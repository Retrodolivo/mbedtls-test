
mbedtls_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f568  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005d44  0801f6f8  0801f6f8  0002f6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802543c  0802543c  000400d4  2**0
                  CONTENTS
  4 .ARM          00000008  0802543c  0802543c  0003543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025444  08025444  000400d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025444  08025444  00035444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025448  08025448  00035448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0802544c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000400d4  2**0
                  CONTENTS
 10 .bss          00003040  200000d4  200000d4  000400d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003114  20003114  000400d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ab69  00000000  00000000  00040104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068ad  00000000  00000000  0006ac6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021d8  00000000  00000000  00071520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f50  00000000  00000000  000736f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279a2  00000000  00000000  00075648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ebc2  00000000  00000000  0009cfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f295c  00000000  00000000  000cbbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001be508  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009998  00000000  00000000  001be558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f6e0 	.word	0x0801f6e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	0801f6e0 	.word	0x0801f6e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <char2hex>:
#include "main.h"
#include <stdio.h>

//char to hex function
char char2hex(unsigned char data, unsigned char *r_data)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
	unsigned char temp_data = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	72fb      	strb	r3, [r7, #11]
	int i;
	for(i = 0; i < 2; i++)
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e01d      	b.n	80005d6 <char2hex+0x52>
	{
		temp_data = (data >> (i*4)) & 0x0F;
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	fa42 f303 	asr.w	r3, r2, r3
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	72fb      	strb	r3, [r7, #11]
		if(temp_data < 0x0a)
 80005ac:	7afb      	ldrb	r3, [r7, #11]
 80005ae:	2b09      	cmp	r3, #9
 80005b0:	d807      	bhi.n	80005c2 <char2hex+0x3e>
		{
			r_data[i] = '0' + temp_data;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	7afa      	ldrb	r2, [r7, #11]
 80005ba:	3230      	adds	r2, #48	; 0x30
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	e006      	b.n	80005d0 <char2hex+0x4c>
		}
		else
		{
			r_data[i] = 'A' + temp_data - 0x0a;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	7afa      	ldrb	r2, [r7, #11]
 80005ca:	3237      	adds	r2, #55	; 0x37
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	ddde      	ble.n	800059a <char2hex+0x16>
		}
	}
	if((r_data[0] < '0')||(r_data[1] < '0'))
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b2f      	cmp	r3, #47	; 0x2f
 80005e2:	d904      	bls.n	80005ee <char2hex+0x6a>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b2f      	cmp	r3, #47	; 0x2f
 80005ec:	d801      	bhi.n	80005f2 <char2hex+0x6e>
		return 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e000      	b.n	80005f4 <char2hex+0x70>
	return 0;
 80005f2:	2300      	movs	r3, #0

}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <string_print_Hex>:

//hex debug print function
char string_print_Hex(unsigned char *buf, unsigned int len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
	unsigned int temp_len = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	unsigned char temp_data[2], temp_buf;
	for(temp_len = 0; temp_len < len; temp_len++)
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e029      	b.n	8000668 <string_print_Hex+0x68>
	{
		temp_buf = buf[temp_len];
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	72fb      	strb	r3, [r7, #11]
		if(char2hex(temp_buf, temp_data) != 0)
 800061e:	f107 0208 	add.w	r2, r7, #8
 8000622:	7afb      	ldrb	r3, [r7, #11]
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffac 	bl	8000584 <char2hex>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d004      	beq.n	800063c <string_print_Hex+0x3c>
		{
			printf("trans hex faill len[%d] \r\n", temp_len);
 8000632:	68f9      	ldr	r1, [r7, #12]
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <string_print_Hex+0x80>)
 8000636:	f01d fe2f 	bl	801e298 <iprintf>
			continue;
 800063a:	e012      	b.n	8000662 <string_print_Hex+0x62>
		}
		printf("%c%c ",temp_data[1],temp_data[0]);
 800063c:	7a7b      	ldrb	r3, [r7, #9]
 800063e:	4619      	mov	r1, r3
 8000640:	7a3b      	ldrb	r3, [r7, #8]
 8000642:	461a      	mov	r2, r3
 8000644:	480f      	ldr	r0, [pc, #60]	; (8000684 <string_print_Hex+0x84>)
 8000646:	f01d fe27 	bl	801e298 <iprintf>
		if((((temp_len + 1) % 16) == 0)&&(temp_len != 0))
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	2b00      	cmp	r3, #0
 8000654:	d105      	bne.n	8000662 <string_print_Hex+0x62>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <string_print_Hex+0x62>
			printf("\r\n");
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <string_print_Hex+0x88>)
 800065e:	f01d fea1 	bl	801e3a4 <puts>
	for(temp_len = 0; temp_len < len; temp_len++)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3d1      	bcc.n	8000614 <string_print_Hex+0x14>
	}
	printf("\r\n");
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <string_print_Hex+0x88>)
 8000672:	f01d fe97 	bl	801e3a4 <puts>
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	0801f6f8 	.word	0x0801f6f8
 8000684:	0801f714 	.word	0x0801f714
 8000688:	0801f71c 	.word	0x0801f71c

0800068c <_write>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void print_network_information(void);

int _write(int fd, char *str, int len)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e00b      	b.n	80006b6 <_write+0x2a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	18d1      	adds	r1, r2, r3
 80006a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a8:	2201      	movs	r2, #1
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <_write+0x3c>)
 80006ac:	f003 fc7f 	bl	8003fae <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	3301      	adds	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	dbef      	blt.n	800069e <_write+0x12>
	}
	return len;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000244 	.word	0x20000244

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int len, server_fd = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
  unsigned int ret = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 ff69 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f879 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f9e9 	bl	8000ab8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006e6:	f000 f8f3 	bl	80008d0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006ea:	f000 f91f 	bl	800092c <MX_I2S3_Init>
  MX_SPI1_Init();
 80006ee:	f000 f94d 	bl	800098c <MX_SPI1_Init>
  MX_CRC_Init();
 80006f2:	f000 f8d9 	bl	80008a8 <MX_CRC_Init>
  MX_SPI2_Init();
 80006f6:	f000 f97f 	bl	80009f8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80006fa:	f000 f9b3 	bl	8000a64 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  w5500_init(&w5500);
 80006fe:	482f      	ldr	r0, [pc, #188]	; (80007bc <main+0xf0>)
 8000700:	f000 febe 	bl	8001480 <w5500_init>
  print_network_information();
 8000704:	f000 fb18 	bl	8000d38 <print_network_information>
  /*  initialize ssl context  */
  ret = wiz_tls_init(&tlsContext, &server_fd);
 8000708:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800070c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f004 f818 	bl	8004748 <wiz_tls_init>
 8000718:	64b8      	str	r0, [r7, #72]	; 0x48
//  }
//  httpc_connection_handler();
//  httpc_connect(&tlsContext);

  /*  Connect to the ssl server  */
  wiz_tls_connect(&tlsContext, SERVER_PORT, gServer_IP);
 800071a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800071e:	4a28      	ldr	r2, [pc, #160]	; (80007c0 <main+0xf4>)
 8000720:	f241 115b 	movw	r1, #4443	; 0x115b
 8000724:	4618      	mov	r0, r3
 8000726:	f004 f8f1 	bl	800490c <wiz_tls_connect>
  printf("connect end \r\n");
 800072a:	4826      	ldr	r0, [pc, #152]	; (80007c4 <main+0xf8>)
 800072c:	f01d fe3a 	bl	801e3a4 <puts>
#endif



//		printf("%s : %d \r\n", ethBuf0, len);
		char get[] = "GET /index.html HTTP/1.1\r\nHost: 192.168.0.116\r\n";
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <main+0xfc>)
 8000732:	1d3c      	adds	r4, r7, #4
 8000734:	461d      	mov	r5, r3
 8000736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/*  Write data to the SSL channel  */
		wiz_tls_write(&tlsContext, get, strlen(get));
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fd41 	bl	80001d0 <strlen>
 800074e:	4602      	mov	r2, r0
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000756:	4618      	mov	r0, r3
 8000758:	f004 f986 	bl	8004a68 <wiz_tls_write>
		if(len > 0)
 800075c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800075e:	2b00      	cmp	r3, #0
 8000760:	dde6      	ble.n	8000730 <main+0x64>
		{
			len = wiz_tls_read(&tlsContext, ethBuf0, ETH_MAX_BUF_SIZE);
 8000762:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000766:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <main+0x100>)
 800076c:	4618      	mov	r0, r3
 800076e:	f004 f969 	bl	8004a44 <wiz_tls_read>
 8000772:	4603      	mov	r3, r0
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
		/*  Send close notify  */
		if(wiz_tls_close_notify(&tlsContext) == 0)
 8000776:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800077a:	4618      	mov	r0, r3
 800077c:	f004 f986 	bl	8004a8c <wiz_tls_close_notify>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d102      	bne.n	800078c <main+0xc0>
			printf("SSL closed\r\n");
 8000786:	4812      	ldr	r0, [pc, #72]	; (80007d0 <main+0x104>)
 8000788:	f01d fe0c 	bl	801e3a4 <puts>

		/*  Free tls context  */
		wiz_tls_deinit(&tlsContext);
 800078c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000790:	4618      	mov	r0, r3
 8000792:	f004 f88b 	bl	80048ac <wiz_tls_deinit>

		ret = wiz_tls_init(&tlsContext, &server_fd);
 8000796:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800079a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 ffd1 	bl	8004748 <wiz_tls_init>
 80007a6:	64b8      	str	r0, [r7, #72]	; 0x48
		wiz_tls_connect(&tlsContext, SERVER_PORT, gServer_IP);
 80007a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <main+0xf4>)
 80007ae:	f241 115b 	movw	r1, #4443	; 0x115b
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 f8aa 	bl	800490c <wiz_tls_connect>
  {
 80007b8:	e7ba      	b.n	8000730 <main+0x64>
 80007ba:	bf00      	nop
 80007bc:	20000a88 	.word	0x20000a88
 80007c0:	20000000 	.word	0x20000000
 80007c4:	0801f720 	.word	0x0801f720
 80007c8:	0801f73c 	.word	0x0801f73c
 80007cc:	20000288 	.word	0x20000288
 80007d0:	0801f730 	.word	0x0801f730

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f01d fc5a 	bl	801e09c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <SystemClock_Config+0xcc>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <SystemClock_Config+0xd0>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <SystemClock_Config+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000844:	2308      	movs	r3, #8
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000848:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800084c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000852:	2307      	movs	r3, #7
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	4618      	mov	r0, r3
 800085c:	f001 ffda 	bl	8002814 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000866:	f000 fad3 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2302      	movs	r3, #2
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000876:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2105      	movs	r1, #5
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fa3b 	bl	8002d04 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000894:	f000 fabc 	bl	8000e10 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	; 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_CRC_Init+0x20>)
 80008ae:	4a07      	ldr	r2, [pc, #28]	; (80008cc <MX_CRC_Init+0x24>)
 80008b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_CRC_Init+0x20>)
 80008b4:	f000 fff7 	bl	80018a6 <HAL_CRC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008be:	f000 faa7 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000f0 	.word	0x200000f0
 80008cc:	40023000 	.word	0x40023000

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2C1_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_I2C1_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_I2C1_Init+0x50>)
 80008dc:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_I2C1_Init+0x58>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_I2C1_Init+0x50>)
 80008ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_I2C1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_I2C1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_I2C1_Init+0x50>)
 800090e:	f001 f99d 	bl	8001c4c <HAL_I2C_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 fa7a 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000f8 	.word	0x200000f8
 8000924:	40005400 	.word	0x40005400
 8000928:	000186a0 	.word	0x000186a0

0800092c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_I2S3_Init+0x54>)
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <MX_I2S3_Init+0x58>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2S3_Init+0x54>)
 8000938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_I2S3_Init+0x54>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_I2S3_Init+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_I2S3_Init+0x54>)
 800094c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000950:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_I2S3_Init+0x54>)
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <MX_I2S3_Init+0x5c>)
 8000956:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_I2S3_Init+0x54>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_I2S3_Init+0x54>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_I2S3_Init+0x54>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_I2S3_Init+0x54>)
 800096c:	f001 fab2 	bl	8001ed4 <HAL_I2S_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000976:	f000 fa4b 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000014c 	.word	0x2000014c
 8000984:	40003c00 	.word	0x40003c00
 8000988:	00017700 	.word	0x00017700

0800098c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_SPI1_Init+0x64>)
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <MX_SPI1_Init+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_SPI1_Init+0x64>)
 8000998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800099c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009d8:	220a      	movs	r2, #10
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009de:	f002 fcf1 	bl	80033c4 <HAL_SPI_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009e8:	f000 fa12 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000194 	.word	0x20000194
 80009f4:	40013000 	.word	0x40013000

080009f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_SPI2_Init+0x64>)
 80009fe:	4a18      	ldr	r2, [pc, #96]	; (8000a60 <MX_SPI2_Init+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a2c:	2218      	movs	r2, #24
 8000a2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a44:	220a      	movs	r2, #10
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_SPI2_Init+0x64>)
 8000a4a:	f002 fcbb 	bl	80033c4 <HAL_SPI_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a54:	f000 f9dc 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200001ec 	.word	0x200001ec
 8000a60:	40003800 	.word	0x40003800

08000a64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_USART2_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	f003 fa3a 	bl	8003f14 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f000 f9b3 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000244 	.word	0x20000244
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	4b93      	ldr	r3, [pc, #588]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b90      	ldr	r3, [pc, #576]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	4b8c      	ldr	r3, [pc, #560]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a8b      	ldr	r2, [pc, #556]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b89      	ldr	r3, [pc, #548]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b85      	ldr	r3, [pc, #532]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a84      	ldr	r2, [pc, #528]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b82      	ldr	r3, [pc, #520]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b7e      	ldr	r3, [pc, #504]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a7d      	ldr	r2, [pc, #500]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b7b      	ldr	r3, [pc, #492]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b77      	ldr	r3, [pc, #476]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a76      	ldr	r2, [pc, #472]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b74      	ldr	r3, [pc, #464]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b70      	ldr	r3, [pc, #448]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a6f      	ldr	r2, [pc, #444]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b6d      	ldr	r3, [pc, #436]	; (8000d20 <MX_GPIO_Init+0x268>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	486a      	ldr	r0, [pc, #424]	; (8000d24 <MX_GPIO_Init+0x26c>)
 8000b7c:	f001 f84c 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	4868      	ldr	r0, [pc, #416]	; (8000d28 <MX_GPIO_Init+0x270>)
 8000b86:	f001 f847 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin|W5500_RST_Pin, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000b90:	4866      	ldr	r0, [pc, #408]	; (8000d2c <MX_GPIO_Init+0x274>)
 8000b92:	f001 f841 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b96:	2200      	movs	r2, #0
 8000b98:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b9c:	4864      	ldr	r0, [pc, #400]	; (8000d30 <MX_GPIO_Init+0x278>)
 8000b9e:	f001 f83b 	bl	8001c18 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	485a      	ldr	r0, [pc, #360]	; (8000d24 <MX_GPIO_Init+0x26c>)
 8000bba:	f000 fe91 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4854      	ldr	r0, [pc, #336]	; (8000d28 <MX_GPIO_Init+0x270>)
 8000bd6:	f000 fe83 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bea:	2305      	movs	r3, #5
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	484c      	ldr	r0, [pc, #304]	; (8000d28 <MX_GPIO_Init+0x270>)
 8000bf6:	f000 fe73 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bfe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4849      	ldr	r0, [pc, #292]	; (8000d34 <MX_GPIO_Init+0x27c>)
 8000c10:	f000 fe66 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4841      	ldr	r0, [pc, #260]	; (8000d2c <MX_GPIO_Init+0x274>)
 8000c28:	f000 fe5a 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4838      	ldr	r0, [pc, #224]	; (8000d2c <MX_GPIO_Init+0x274>)
 8000c4a:	f000 fe49 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8000c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4831      	ldr	r0, [pc, #196]	; (8000d2c <MX_GPIO_Init+0x274>)
 8000c68:	f000 fe3a 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8000c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4829      	ldr	r0, [pc, #164]	; (8000d2c <MX_GPIO_Init+0x274>)
 8000c86:	f000 fe2b 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c8a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c8e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4823      	ldr	r0, [pc, #140]	; (8000d30 <MX_GPIO_Init+0x278>)
 8000ca4:	f000 fe1c 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481d      	ldr	r0, [pc, #116]	; (8000d34 <MX_GPIO_Init+0x27c>)
 8000cbe:	f000 fe0f 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000cc2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4815      	ldr	r0, [pc, #84]	; (8000d34 <MX_GPIO_Init+0x27c>)
 8000ce0:	f000 fdfe 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ce4:	2320      	movs	r3, #32
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480e      	ldr	r0, [pc, #56]	; (8000d30 <MX_GPIO_Init+0x278>)
 8000cf8:	f000 fdf2 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_GPIO_Init+0x26c>)
 8000d12:	f000 fde5 	bl	80018e0 <HAL_GPIO_Init>

}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40020000 	.word	0x40020000

08000d38 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af04      	add	r7, sp, #16
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", w5500.netinfo.mac[0], w5500.netinfo.mac[1], w5500.netinfo.mac[2], w5500.netinfo.mac[3], w5500.netinfo.mac[4], w5500.netinfo.mac[5]);
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <print_network_information+0xc0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <print_network_information+0xc0>)
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	461c      	mov	r4, r3
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <print_network_information+0xc0>)
 8000d4c:	789b      	ldrb	r3, [r3, #2]
 8000d4e:	461d      	mov	r5, r3
 8000d50:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <print_network_information+0xc0>)
 8000d52:	78db      	ldrb	r3, [r3, #3]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <print_network_information+0xc0>)
 8000d58:	791b      	ldrb	r3, [r3, #4]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <print_network_information+0xc0>)
 8000d5e:	795b      	ldrb	r3, [r3, #5]
 8000d60:	9302      	str	r3, [sp, #8]
 8000d62:	9101      	str	r1, [sp, #4]
 8000d64:	9200      	str	r2, [sp, #0]
 8000d66:	462b      	mov	r3, r5
 8000d68:	4622      	mov	r2, r4
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	4823      	ldr	r0, [pc, #140]	; (8000dfc <print_network_information+0xc4>)
 8000d6e:	f01d fa93 	bl	801e298 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r", w5500.netinfo.ip[0], w5500.netinfo.ip[1], w5500.netinfo.ip[2], w5500.netinfo.ip[3]);
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <print_network_information+0xc0>)
 8000d74:	799b      	ldrb	r3, [r3, #6]
 8000d76:	4619      	mov	r1, r3
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <print_network_information+0xc0>)
 8000d7a:	79db      	ldrb	r3, [r3, #7]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <print_network_information+0xc0>)
 8000d80:	7a1b      	ldrb	r3, [r3, #8]
 8000d82:	4618      	mov	r0, r3
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <print_network_information+0xc0>)
 8000d86:	7a5b      	ldrb	r3, [r3, #9]
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	481c      	ldr	r0, [pc, #112]	; (8000e00 <print_network_information+0xc8>)
 8000d8e:	f01d fa83 	bl	801e298 <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r", w5500.netinfo.sn[0], w5500.netinfo.sn[1], w5500.netinfo.sn[2], w5500.netinfo.sn[3]);
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <print_network_information+0xc0>)
 8000d94:	7a9b      	ldrb	r3, [r3, #10]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <print_network_information+0xc0>)
 8000d9a:	7adb      	ldrb	r3, [r3, #11]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <print_network_information+0xc0>)
 8000da0:	7b1b      	ldrb	r3, [r3, #12]
 8000da2:	4618      	mov	r0, r3
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <print_network_information+0xc0>)
 8000da6:	7b5b      	ldrb	r3, [r3, #13]
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	4603      	mov	r3, r0
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <print_network_information+0xcc>)
 8000dae:	f01d fa73 	bl	801e298 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r", w5500.netinfo.gw[0], w5500.netinfo.gw[1], w5500.netinfo.gw[2], w5500.netinfo.gw[3]);
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <print_network_information+0xc0>)
 8000db4:	7b9b      	ldrb	r3, [r3, #14]
 8000db6:	4619      	mov	r1, r3
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <print_network_information+0xc0>)
 8000dba:	7bdb      	ldrb	r3, [r3, #15]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <print_network_information+0xc0>)
 8000dc0:	7c1b      	ldrb	r3, [r3, #16]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <print_network_information+0xc0>)
 8000dc6:	7c5b      	ldrb	r3, [r3, #17]
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	4603      	mov	r3, r0
 8000dcc:	480e      	ldr	r0, [pc, #56]	; (8000e08 <print_network_information+0xd0>)
 8000dce:	f01d fa63 	bl	801e298 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r", w5500.netinfo.dns[0], w5500.netinfo.dns[1], w5500.netinfo.dns[2], w5500.netinfo.dns[3]);
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <print_network_information+0xc0>)
 8000dd4:	7c9b      	ldrb	r3, [r3, #18]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <print_network_information+0xc0>)
 8000dda:	7cdb      	ldrb	r3, [r3, #19]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <print_network_information+0xc0>)
 8000de0:	7d1b      	ldrb	r3, [r3, #20]
 8000de2:	4618      	mov	r0, r3
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <print_network_information+0xc0>)
 8000de6:	7d5b      	ldrb	r3, [r3, #21]
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	4603      	mov	r3, r0
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <print_network_information+0xd4>)
 8000dee:	f01d fa53 	bl	801e298 <iprintf>
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bdb0      	pop	{r4, r5, r7, pc}
 8000df8:	20000a88 	.word	0x20000a88
 8000dfc:	0801f76c 	.word	0x0801f76c
 8000e00:	0801f79c 	.word	0x0801f79c
 8000e04:	0801f7b8 	.word	0x0801f7b8
 8000e08:	0801f7d4 	.word	0x0801f7d4
 8000e0c:	0801f7f0 	.word	0x0801f7f0

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f000 fcf0 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_CRC_MspInit+0x3c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d10d      	bne.n	8000e9a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_CRC_MspInit+0x40>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <HAL_CRC_MspInit+0x40>)
 8000e88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_CRC_MspInit+0x40>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023000 	.word	0x40023000
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_I2C_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12c      	bne.n	8000f2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000eee:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f00:	2304      	movs	r3, #4
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <HAL_I2C_MspInit+0x8c>)
 8000f0c:	f000 fce8 	bl	80018e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40005400 	.word	0x40005400
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a31      	ldr	r2, [pc, #196]	; (8001030 <HAL_I2S_MspInit+0xf0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d15a      	bne.n	8001026 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f70:	2301      	movs	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f74:	23c0      	movs	r3, #192	; 0xc0
 8000f76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 f8df 	bl	8003144 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000f8c:	f7ff ff40 	bl	8000e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <HAL_I2S_MspInit+0xf4>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a26      	ldr	r2, [pc, #152]	; (8001034 <HAL_I2S_MspInit+0xf4>)
 8000f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <HAL_I2S_MspInit+0xf8>)
 8001000:	f000 fc6e 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001004:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001016:	2306      	movs	r3, #6
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <HAL_I2S_MspInit+0xfc>)
 8001022:	f000 fc5d 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	; 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40003c00 	.word	0x40003c00
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020800 	.word	0x40020800

08001040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a41      	ldr	r2, [pc, #260]	; (8001164 <HAL_SPI_MspInit+0x124>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12c      	bne.n	80010bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <HAL_SPI_MspInit+0x128>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a3f      	ldr	r2, [pc, #252]	; (8001168 <HAL_SPI_MspInit+0x128>)
 800106c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <HAL_SPI_MspInit+0x128>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <HAL_SPI_MspInit+0x128>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a38      	ldr	r2, [pc, #224]	; (8001168 <HAL_SPI_MspInit+0x128>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_SPI_MspInit+0x128>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800109a:	23e0      	movs	r3, #224	; 0xe0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010aa:	2305      	movs	r3, #5
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	482d      	ldr	r0, [pc, #180]	; (800116c <HAL_SPI_MspInit+0x12c>)
 80010b6:	f000 fc13 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010ba:	e04f      	b.n	800115c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a2b      	ldr	r2, [pc, #172]	; (8001170 <HAL_SPI_MspInit+0x130>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d14a      	bne.n	800115c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <HAL_SPI_MspInit+0x128>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a26      	ldr	r2, [pc, #152]	; (8001168 <HAL_SPI_MspInit+0x128>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_SPI_MspInit+0x128>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_SPI_MspInit+0x128>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <HAL_SPI_MspInit+0x128>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_SPI_MspInit+0x128>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_SPI_MspInit+0x128>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <HAL_SPI_MspInit+0x128>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_SPI_MspInit+0x128>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = W5500_MISO_Pin;
 800111a:	2304      	movs	r3, #4
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800112a:	2305      	movs	r3, #5
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(W5500_MISO_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <HAL_SPI_MspInit+0x134>)
 8001136:	f000 fbd3 	bl	80018e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MOSI_Pin;
 800113a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800114c:	2305      	movs	r3, #5
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <HAL_SPI_MspInit+0x138>)
 8001158:	f000 fbc2 	bl	80018e0 <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3730      	adds	r7, #48	; 0x30
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40013000 	.word	0x40013000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	40003800 	.word	0x40003800
 8001174:	40020800 	.word	0x40020800
 8001178:	40020400 	.word	0x40020400

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	; (8001200 <HAL_UART_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12b      	bne.n	80011f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PRINT_TX_Pin|PRINT_RX_Pin;
 80011d6:	230c      	movs	r3, #12
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e6:	2307      	movs	r3, #7
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_UART_MspInit+0x8c>)
 80011f2:	f000 fb75 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40004400 	.word	0x40004400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f9fc 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	return 1;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_kill>:

int _kill(int pid, int sig)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800127a:	f01c fe9d 	bl	801dfb8 <__errno>
 800127e:	4603      	mov	r3, r0
 8001280:	2216      	movs	r2, #22
 8001282:	601a      	str	r2, [r3, #0]
	return -1;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_exit>:

void _exit (int status)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ffe7 	bl	8001270 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012a2:	e7fe      	b.n	80012a2 <_exit+0x12>

080012a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e00a      	b.n	80012cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012b6:	f3af 8000 	nop.w
 80012ba:	4601      	mov	r1, r0
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	60ba      	str	r2, [r7, #8]
 80012c2:	b2ca      	uxtb	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbf0      	blt.n	80012b6 <_read+0x12>
	}

return len;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_close>:
	}
	return len;
}

int _close(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001306:	605a      	str	r2, [r3, #4]
	return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_isatty>:

int _isatty(int file)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	return 1;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
	return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f01c fe1e 	bl	801dfb8 <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20020000 	.word	0x20020000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	20000aa8 	.word	0x20000aa8
 80013b0:	20003118 	.word	0x20003118

080013b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <w5500_select>:
#include "wizchip.h"
#include "string.h"


static void w5500_select(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	4802      	ldr	r0, [pc, #8]	; (80013ec <w5500_select+0x14>)
 80013e4:	f000 fc18 	bl	8001c18 <HAL_GPIO_WritePin>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020400 	.word	0x40020400

080013f0 <w5500_unselect>:

static void w5500_unselect(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	4802      	ldr	r0, [pc, #8]	; (8001404 <w5500_unselect+0x14>)
 80013fc:	f000 fc0c 	bl	8001c18 <HAL_GPIO_WritePin>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40020400 	.word	0x40020400

08001408 <w5500_read_byte>:

static uint8_t w5500_read_byte(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
    uint8_t rb;
    HAL_SPI_Receive(W5500_SPI_PORT, &rb, 1, HAL_MAX_DELAY);
 800140e:	1df9      	adds	r1, r7, #7
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	2201      	movs	r2, #1
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <w5500_read_byte+0x20>)
 8001418:	f002 f999 	bl	800374e <HAL_SPI_Receive>
    return rb;
 800141c:	79fb      	ldrb	r3, [r7, #7]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200001ec 	.word	0x200001ec

0800142c <w5500_write_byte>:

static void w5500_write_byte(uint8_t wb)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(W5500_SPI_PORT, &wb, 1, HAL_MAX_DELAY);
 8001436:	1df9      	adds	r1, r7, #7
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	2201      	movs	r2, #1
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <w5500_write_byte+0x20>)
 8001440:	f002 f849 	bl	80034d6 <HAL_SPI_Transmit>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200001ec 	.word	0x200001ec

08001450 <w5500_hw_reset>:

static void w5500_hw_reset(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <w5500_hw_reset+0x2c>)
 800145c:	f000 fbdc 	bl	8001c18 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001460:	200a      	movs	r0, #10
 8001462:	f000 f917 	bl	8001694 <HAL_Delay>
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <w5500_hw_reset+0x2c>)
 800146e:	f000 fbd3 	bl	8001c18 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001472:	200a      	movs	r0, #10
 8001474:	f000 f90e 	bl	8001694 <HAL_Delay>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40020400 	.word	0x40020400

08001480 <w5500_init>:

void w5500_init(w5500chip_t *chip)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	/*link up architecture based spi cntrl funcs to lib funcs*/
	reg_wizchip_cs_cbfunc(w5500_select, w5500_unselect);
 8001488:	492c      	ldr	r1, [pc, #176]	; (800153c <w5500_init+0xbc>)
 800148a:	482d      	ldr	r0, [pc, #180]	; (8001540 <w5500_init+0xc0>)
 800148c:	f01c fbe2 	bl	801dc54 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(w5500_read_byte, w5500_write_byte);
 8001490:	492c      	ldr	r1, [pc, #176]	; (8001544 <w5500_init+0xc4>)
 8001492:	482d      	ldr	r0, [pc, #180]	; (8001548 <w5500_init+0xc8>)
 8001494:	f01c fc04 	bl	801dca0 <reg_wizchip_spi_cbfunc>
	w5500_hw_reset();
 8001498:	f7ff ffda 	bl	8001450 <w5500_hw_reset>
	/*split up rxtx buffer among sockets*/
	chip->rxtx_buff[SOCK_0] = 16;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2210      	movs	r2, #16
 80014a0:	75da      	strb	r2, [r3, #23]
	chip->rxtx_buff[SOCK_1] = 0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	761a      	strb	r2, [r3, #24]
	chip->rxtx_buff[SOCK_2] = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	765a      	strb	r2, [r3, #25]
	chip->rxtx_buff[SOCK_3] = 0;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	769a      	strb	r2, [r3, #26]
	chip->rxtx_buff[SOCK_4] = 0;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	76da      	strb	r2, [r3, #27]
	chip->rxtx_buff[SOCK_5] = 0;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	771a      	strb	r2, [r3, #28]
	chip->rxtx_buff[SOCK_6] = 0;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	775a      	strb	r2, [r3, #29]
	chip->rxtx_buff[SOCK_7] = 0;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	779a      	strb	r2, [r3, #30]

	uint8_t mac[6] = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef};
 80014cc:	4a1f      	ldr	r2, [pc, #124]	; (800154c <w5500_init+0xcc>)
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d6:	6018      	str	r0, [r3, #0]
 80014d8:	3304      	adds	r3, #4
 80014da:	8019      	strh	r1, [r3, #0]
	memcpy(chip->netinfo.mac, mac, 6);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	461a      	mov	r2, r3
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	6010      	str	r0, [r2, #0]
 80014e8:	889b      	ldrh	r3, [r3, #4]
 80014ea:	8093      	strh	r3, [r2, #4]

	uint8_t ip[4] = {192, 168, 1, 200};
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <w5500_init+0xd0>)
 80014ee:	617b      	str	r3, [r7, #20]
	memcpy(chip->netinfo.ip, ip, 4);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3306      	adds	r3, #6
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	601a      	str	r2, [r3, #0]

	/*setting subnet mask*/
	uint8_t sn[4] = {255, 255, 252, 0};
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <w5500_init+0xd4>)
 80014fa:	613b      	str	r3, [r7, #16]
	memcpy(chip->netinfo.sn, sn, 4);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	330a      	adds	r3, #10
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	601a      	str	r2, [r3, #0]

	/*setting gateway*/
	uint8_t gw[4] = {192, 168, 0, 2};
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <w5500_init+0xd8>)
 8001506:	60fb      	str	r3, [r7, #12]
	memcpy(chip->netinfo.gw, gw, 4);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	330e      	adds	r3, #14
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	601a      	str	r2, [r3, #0]

	wizchip_init(chip->rxtx_buff, chip->rxtx_buff);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f103 0217 	add.w	r2, r3, #23
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3317      	adds	r3, #23
 800151a:	4619      	mov	r1, r3
 800151c:	4610      	mov	r0, r2
 800151e:	f01c fc37 	bl	801dd90 <wizchip_init>
	wizchip_setnetinfo(&chip->netinfo);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f01c fcbf 	bl	801dea8 <wizchip_setnetinfo>
	/*after wizchip_getnetinfo() netinfo struct should stay the same*/
	wizchip_getnetinfo(&chip->netinfo);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4618      	mov	r0, r3
 800152e:	f01c fcfb 	bl	801df28 <wizchip_getnetinfo>
}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	080013f1 	.word	0x080013f1
 8001540:	080013d9 	.word	0x080013d9
 8001544:	0800142d 	.word	0x0800142d
 8001548:	08001409 	.word	0x08001409
 800154c:	0801f80c 	.word	0x0801f80c
 8001550:	c801a8c0 	.word	0xc801a8c0
 8001554:	00fcffff 	.word	0x00fcffff
 8001558:	0200a8c0 	.word	0x0200a8c0

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001562:	490e      	ldr	r1, [pc, #56]	; (800159c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001578:	4c0b      	ldr	r4, [pc, #44]	; (80015a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001586:	f7ff ff15 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158a:	f01c fd1b 	bl	801dfc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7ff f89d 	bl	80006cc <main>
  bx  lr    
 8001592:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80015a0:	0802544c 	.word	0x0802544c
  ldr r2, =_sbss
 80015a4:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80015a8:	20003114 	.word	0x20003114

080015ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <HAL_Init+0x40>)
 80015ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_Init+0x40>)
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_Init+0x40>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f931 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f808 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff fc1a 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f93b 	bl	800188e <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f000 f911 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000004 	.word	0x20000004
 800164c:	2000000c 	.word	0x2000000c
 8001650:	20000008 	.word	0x20000008

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2000000c 	.word	0x2000000c
 8001678:	20000aac 	.word	0x20000aac

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000aac 	.word	0x20000aac

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000000c 	.word	0x2000000c

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff47 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff5c 	bl	8001724 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff8e 	bl	8001794 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5d 	bl	8001740 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffb0 	bl	80017fc <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e00e      	b.n	80018d6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	795b      	ldrb	r3, [r3, #5]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff facf 	bl	8000e6c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e16b      	b.n	8001bd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 815a 	bne.w	8001bce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d005      	beq.n	8001932 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192e:	2b02      	cmp	r3, #2
 8001930:	d130      	bne.n	8001994 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 0201 	and.w	r2, r3, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b03      	cmp	r3, #3
 800199e:	d017      	beq.n	80019d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d123      	bne.n	8001a24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	69b9      	ldr	r1, [r7, #24]
 8001a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80b4 	beq.w	8001bce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b60      	ldr	r3, [pc, #384]	; (8001bec <HAL_GPIO_Init+0x30c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a5f      	ldr	r2, [pc, #380]	; (8001bec <HAL_GPIO_Init+0x30c>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <HAL_GPIO_Init+0x30c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a82:	4a5b      	ldr	r2, [pc, #364]	; (8001bf0 <HAL_GPIO_Init+0x310>)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_GPIO_Init+0x314>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d02b      	beq.n	8001b06 <HAL_GPIO_Init+0x226>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a51      	ldr	r2, [pc, #324]	; (8001bf8 <HAL_GPIO_Init+0x318>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d025      	beq.n	8001b02 <HAL_GPIO_Init+0x222>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a50      	ldr	r2, [pc, #320]	; (8001bfc <HAL_GPIO_Init+0x31c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d01f      	beq.n	8001afe <HAL_GPIO_Init+0x21e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <HAL_GPIO_Init+0x320>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d019      	beq.n	8001afa <HAL_GPIO_Init+0x21a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <HAL_GPIO_Init+0x324>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0x216>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4d      	ldr	r2, [pc, #308]	; (8001c08 <HAL_GPIO_Init+0x328>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00d      	beq.n	8001af2 <HAL_GPIO_Init+0x212>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4c      	ldr	r2, [pc, #304]	; (8001c0c <HAL_GPIO_Init+0x32c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0x20e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4b      	ldr	r2, [pc, #300]	; (8001c10 <HAL_GPIO_Init+0x330>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_GPIO_Init+0x20a>
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	e00e      	b.n	8001b08 <HAL_GPIO_Init+0x228>
 8001aea:	2308      	movs	r3, #8
 8001aec:	e00c      	b.n	8001b08 <HAL_GPIO_Init+0x228>
 8001aee:	2306      	movs	r3, #6
 8001af0:	e00a      	b.n	8001b08 <HAL_GPIO_Init+0x228>
 8001af2:	2305      	movs	r3, #5
 8001af4:	e008      	b.n	8001b08 <HAL_GPIO_Init+0x228>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x228>
 8001afa:	2303      	movs	r3, #3
 8001afc:	e004      	b.n	8001b08 <HAL_GPIO_Init+0x228>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_Init+0x228>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_GPIO_Init+0x228>
 8001b06:	2300      	movs	r3, #0
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	f002 0203 	and.w	r2, r2, #3
 8001b0e:	0092      	lsls	r2, r2, #2
 8001b10:	4093      	lsls	r3, r2
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b18:	4935      	ldr	r1, [pc, #212]	; (8001bf0 <HAL_GPIO_Init+0x310>)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4a:	4a32      	ldr	r2, [pc, #200]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b50:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b74:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc8:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	2b0f      	cmp	r3, #15
 8001bd8:	f67f ae90 	bls.w	80018fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40013800 	.word	0x40013800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020c00 	.word	0x40020c00
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40021400 	.word	0x40021400
 8001c0c:	40021800 	.word	0x40021800
 8001c10:	40021c00 	.word	0x40021c00
 8001c14:	40013c00 	.word	0x40013c00

08001c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
 8001c24:	4613      	mov	r3, r2
 8001c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c28:	787b      	ldrb	r3, [r7, #1]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c34:	e003      	b.n	8001c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	041a      	lsls	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	619a      	str	r2, [r3, #24]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e12b      	b.n	8001eb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff f91c 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cb0:	f001 fa20 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8001cb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4a81      	ldr	r2, [pc, #516]	; (8001ec0 <HAL_I2C_Init+0x274>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d807      	bhi.n	8001cd0 <HAL_I2C_Init+0x84>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a80      	ldr	r2, [pc, #512]	; (8001ec4 <HAL_I2C_Init+0x278>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bf94      	ite	ls
 8001cc8:	2301      	movls	r3, #1
 8001cca:	2300      	movhi	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e006      	b.n	8001cde <HAL_I2C_Init+0x92>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4a7d      	ldr	r2, [pc, #500]	; (8001ec8 <HAL_I2C_Init+0x27c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	bf94      	ite	ls
 8001cd8:	2301      	movls	r3, #1
 8001cda:	2300      	movhi	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0e7      	b.n	8001eb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4a78      	ldr	r2, [pc, #480]	; (8001ecc <HAL_I2C_Init+0x280>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a6a      	ldr	r2, [pc, #424]	; (8001ec0 <HAL_I2C_Init+0x274>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d802      	bhi.n	8001d20 <HAL_I2C_Init+0xd4>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	e009      	b.n	8001d34 <HAL_I2C_Init+0xe8>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	4a69      	ldr	r2, [pc, #420]	; (8001ed0 <HAL_I2C_Init+0x284>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	3301      	adds	r3, #1
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	495c      	ldr	r1, [pc, #368]	; (8001ec0 <HAL_I2C_Init+0x274>)
 8001d50:	428b      	cmp	r3, r1
 8001d52:	d819      	bhi.n	8001d88 <HAL_I2C_Init+0x13c>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e59      	subs	r1, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d62:	1c59      	adds	r1, r3, #1
 8001d64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d68:	400b      	ands	r3, r1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_I2C_Init+0x138>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e59      	subs	r1, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d82:	e051      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001d84:	2304      	movs	r3, #4
 8001d86:	e04f      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d111      	bne.n	8001db4 <HAL_I2C_Init+0x168>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e58      	subs	r0, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	e012      	b.n	8001dda <HAL_I2C_Init+0x18e>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1e58      	subs	r0, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	0099      	lsls	r1, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Init+0x196>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e022      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10e      	bne.n	8001e08 <HAL_I2C_Init+0x1bc>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1e58      	subs	r0, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	440b      	add	r3, r1
 8001df8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e06:	e00f      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1e58      	subs	r0, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	0099      	lsls	r1, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	6809      	ldr	r1, [r1, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6911      	ldr	r1, [r2, #16]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68d2      	ldr	r2, [r2, #12]
 8001e62:	4311      	orrs	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	000186a0 	.word	0x000186a0
 8001ec4:	001e847f 	.word	0x001e847f
 8001ec8:	003d08ff 	.word	0x003d08ff
 8001ecc:	431bde83 	.word	0x431bde83
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e128      	b.n	8002138 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a90      	ldr	r2, [pc, #576]	; (8002140 <HAL_I2S_Init+0x26c>)
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff f81d 	bl	8000f40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f1c:	f023 030f 	bic.w	r3, r3, #15
 8001f20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d060      	beq.n	8001ff4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001f3a:	2310      	movs	r3, #16
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e001      	b.n	8001f44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d802      	bhi.n	8001f52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f001 f9d8 	bl	8003308 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f62:	d125      	bne.n	8001fb0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	461a      	mov	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	3305      	adds	r3, #5
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	e01f      	b.n	8001fce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	3305      	adds	r3, #5
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e00e      	b.n	8001fce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	3305      	adds	r3, #5
 8001fcc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4a5c      	ldr	r2, [pc, #368]	; (8002144 <HAL_I2S_Init+0x270>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	e003      	b.n	8001ffc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d902      	bls.n	8002008 <HAL_I2S_Init+0x134>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	2bff      	cmp	r3, #255	; 0xff
 8002006:	d907      	bls.n	8002018 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	f043 0210 	orr.w	r2, r3, #16
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e08f      	b.n	8002138 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	ea42 0103 	orr.w	r1, r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	430a      	orrs	r2, r1
 800202a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002036:	f023 030f 	bic.w	r3, r3, #15
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6851      	ldr	r1, [r2, #4]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6892      	ldr	r2, [r2, #8]
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68d2      	ldr	r2, [r2, #12]
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6992      	ldr	r2, [r2, #24]
 800204e:	430a      	orrs	r2, r1
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d161      	bne.n	8002128 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a38      	ldr	r2, [pc, #224]	; (8002148 <HAL_I2S_Init+0x274>)
 8002068:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a37      	ldr	r2, [pc, #220]	; (800214c <HAL_I2S_Init+0x278>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_I2S_Init+0x1a4>
 8002074:	4b36      	ldr	r3, [pc, #216]	; (8002150 <HAL_I2S_Init+0x27c>)
 8002076:	e001      	b.n	800207c <HAL_I2S_Init+0x1a8>
 8002078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4932      	ldr	r1, [pc, #200]	; (800214c <HAL_I2S_Init+0x278>)
 8002084:	428a      	cmp	r2, r1
 8002086:	d101      	bne.n	800208c <HAL_I2S_Init+0x1b8>
 8002088:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_I2S_Init+0x27c>)
 800208a:	e001      	b.n	8002090 <HAL_I2S_Init+0x1bc>
 800208c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002090:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002094:	f023 030f 	bic.w	r3, r3, #15
 8002098:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2b      	ldr	r2, [pc, #172]	; (800214c <HAL_I2S_Init+0x278>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_I2S_Init+0x1d4>
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_I2S_Init+0x27c>)
 80020a6:	e001      	b.n	80020ac <HAL_I2S_Init+0x1d8>
 80020a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ac:	2202      	movs	r2, #2
 80020ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <HAL_I2S_Init+0x278>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_I2S_Init+0x1ea>
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_I2S_Init+0x27c>)
 80020bc:	e001      	b.n	80020c2 <HAL_I2S_Init+0x1ee>
 80020be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ce:	d003      	beq.n	80020d8 <HAL_I2S_Init+0x204>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d103      	bne.n	80020e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80020d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	e001      	b.n	80020e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002102:	4313      	orrs	r3, r2
 8002104:	b29a      	uxth	r2, r3
 8002106:	897b      	ldrh	r3, [r7, #10]
 8002108:	4313      	orrs	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002110:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a0d      	ldr	r2, [pc, #52]	; (800214c <HAL_I2S_Init+0x278>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_I2S_Init+0x24c>
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_I2S_Init+0x27c>)
 800211e:	e001      	b.n	8002124 <HAL_I2S_Init+0x250>
 8002120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002124:	897a      	ldrh	r2, [r7, #10]
 8002126:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	0800224b 	.word	0x0800224b
 8002144:	cccccccd 	.word	0xcccccccd
 8002148:	08002361 	.word	0x08002361
 800214c:	40003800 	.word	0x40003800
 8002150:	40003400 	.word	0x40003400

08002154 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	1c9a      	adds	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10e      	bne.n	80021e4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffb8 	bl	8002154 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	b292      	uxth	r2, r2
 8002200:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	1c9a      	adds	r2, r3, #2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10e      	bne.n	8002242 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002232:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff93 	bl	8002168 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b04      	cmp	r3, #4
 8002264:	d13a      	bne.n	80022dc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d109      	bne.n	8002284 <I2S_IRQHandler+0x3a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d102      	bne.n	8002284 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffb4 	bl	80021ec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b40      	cmp	r3, #64	; 0x40
 800228c:	d126      	bne.n	80022dc <I2S_IRQHandler+0x92>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b20      	cmp	r3, #32
 800229a:	d11f      	bne.n	80022dc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff50 	bl	800217c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d136      	bne.n	8002356 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d109      	bne.n	8002306 <I2S_IRQHandler+0xbc>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d102      	bne.n	8002306 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff45 	bl	8002190 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b08      	cmp	r3, #8
 800230e:	d122      	bne.n	8002356 <I2S_IRQHandler+0x10c>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	d11b      	bne.n	8002356 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800232c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	f043 0204 	orr.w	r2, r3, #4
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff13 	bl	800217c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a92      	ldr	r2, [pc, #584]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800237a:	4b92      	ldr	r3, [pc, #584]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800237c:	e001      	b.n	8002382 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800237e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a8b      	ldr	r2, [pc, #556]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d101      	bne.n	800239c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002398:	4b8a      	ldr	r3, [pc, #552]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800239a:	e001      	b.n	80023a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800239c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d004      	beq.n	80023b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 8099 	bne.w	80024ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d107      	bne.n	80023d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f925 	bl	800261c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f9c8 	bl	800277c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	d13a      	bne.n	800246c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d035      	beq.n	800246c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6e      	ldr	r2, [pc, #440]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800240a:	4b6e      	ldr	r3, [pc, #440]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800240c:	e001      	b.n	8002412 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800240e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4969      	ldr	r1, [pc, #420]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800241a:	428b      	cmp	r3, r1
 800241c:	d101      	bne.n	8002422 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800241e:	4b69      	ldr	r3, [pc, #420]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002420:	e001      	b.n	8002426 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002426:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800242a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800243a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f043 0202 	orr.w	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fe88 	bl	800217c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	f040 80c3 	bne.w	80025fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80bd 	beq.w	80025fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002492:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a49      	ldr	r2, [pc, #292]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800249e:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024a0:	e001      	b.n	80024a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80024a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4944      	ldr	r1, [pc, #272]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024ae:	428b      	cmp	r3, r1
 80024b0:	d101      	bne.n	80024b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80024b2:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024b4:	e001      	b.n	80024ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80024b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fe4a 	bl	800217c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024e8:	e089      	b.n	80025fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d107      	bne.n	8002504 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f8be 	bl	8002680 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f8fd 	bl	8002718 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d12f      	bne.n	8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d02a      	beq.n	8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002540:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d101      	bne.n	8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800254e:	e001      	b.n	8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4919      	ldr	r1, [pc, #100]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800255c:	428b      	cmp	r3, r1
 800255e:	d101      	bne.n	8002564 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002562:	e001      	b.n	8002568 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002568:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800256c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fdfa 	bl	800217c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b08      	cmp	r3, #8
 8002590:	d136      	bne.n	8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d031      	beq.n	8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025a8:	e001      	b.n	80025ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80025aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4902      	ldr	r1, [pc, #8]	; (80025c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025b6:	428b      	cmp	r3, r1
 80025b8:	d106      	bne.n	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80025ba:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025bc:	e006      	b.n	80025cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80025be:	bf00      	nop
 80025c0:	40003800 	.word	0x40003800
 80025c4:	40003400 	.word	0x40003400
 80025c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f043 0204 	orr.w	r2, r3, #4
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fdc0 	bl	800217c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025fc:	e000      	b.n	8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025fe:	bf00      	nop
}
 8002600:	bf00      	nop
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c99      	adds	r1, r3, #2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6251      	str	r1, [r2, #36]	; 0x24
 800262e:	881a      	ldrh	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d113      	bne.n	8002676 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800265c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ffc9 	bl	8002608 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c99      	adds	r1, r3, #2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6251      	str	r1, [r2, #36]	; 0x24
 8002692:	8819      	ldrh	r1, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <I2SEx_TxISR_I2SExt+0x90>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <I2SEx_TxISR_I2SExt+0x22>
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <I2SEx_TxISR_I2SExt+0x94>)
 80026a0:	e001      	b.n	80026a6 <I2SEx_TxISR_I2SExt+0x26>
 80026a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a6:	460a      	mov	r2, r1
 80026a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d121      	bne.n	8002706 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <I2SEx_TxISR_I2SExt+0x90>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d101      	bne.n	80026d0 <I2SEx_TxISR_I2SExt+0x50>
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <I2SEx_TxISR_I2SExt+0x94>)
 80026ce:	e001      	b.n	80026d4 <I2SEx_TxISR_I2SExt+0x54>
 80026d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	490d      	ldr	r1, [pc, #52]	; (8002710 <I2SEx_TxISR_I2SExt+0x90>)
 80026dc:	428b      	cmp	r3, r1
 80026de:	d101      	bne.n	80026e4 <I2SEx_TxISR_I2SExt+0x64>
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <I2SEx_TxISR_I2SExt+0x94>)
 80026e2:	e001      	b.n	80026e8 <I2SEx_TxISR_I2SExt+0x68>
 80026e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff81 	bl	8002608 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40003800 	.word	0x40003800
 8002714:	40003400 	.word	0x40003400

08002718 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68d8      	ldr	r0, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	1c99      	adds	r1, r3, #2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002730:	b282      	uxth	r2, r0
 8002732:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d113      	bne.n	8002774 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800275a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ff4a 	bl	8002608 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a20      	ldr	r2, [pc, #128]	; (800280c <I2SEx_RxISR_I2SExt+0x90>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <I2SEx_RxISR_I2SExt+0x16>
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <I2SEx_RxISR_I2SExt+0x94>)
 8002790:	e001      	b.n	8002796 <I2SEx_RxISR_I2SExt+0x1a>
 8002792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002796:	68d8      	ldr	r0, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	1c99      	adds	r1, r3, #2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80027a2:	b282      	uxth	r2, r0
 80027a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d121      	bne.n	8002802 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <I2SEx_RxISR_I2SExt+0x90>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d101      	bne.n	80027cc <I2SEx_RxISR_I2SExt+0x50>
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <I2SEx_RxISR_I2SExt+0x94>)
 80027ca:	e001      	b.n	80027d0 <I2SEx_RxISR_I2SExt+0x54>
 80027cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	490d      	ldr	r1, [pc, #52]	; (800280c <I2SEx_RxISR_I2SExt+0x90>)
 80027d8:	428b      	cmp	r3, r1
 80027da:	d101      	bne.n	80027e0 <I2SEx_RxISR_I2SExt+0x64>
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <I2SEx_RxISR_I2SExt+0x94>)
 80027de:	e001      	b.n	80027e4 <I2SEx_RxISR_I2SExt+0x68>
 80027e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff03 	bl	8002608 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40003800 	.word	0x40003800
 8002810:	40003400 	.word	0x40003400

08002814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e267      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d075      	beq.n	800291e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002832:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00c      	beq.n	8002858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002846:	2b08      	cmp	r3, #8
 8002848:	d112      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b82      	ldr	r3, [pc, #520]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05b      	beq.n	800291c <HAL_RCC_OscConfig+0x108>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d157      	bne.n	800291c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e242      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d106      	bne.n	8002888 <HAL_RCC_OscConfig+0x74>
 800287a:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a75      	ldr	r2, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6f      	ldr	r2, [pc, #444]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6c      	ldr	r2, [pc, #432]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 80028ac:	4b69      	ldr	r3, [pc, #420]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b66      	ldr	r3, [pc, #408]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe fed6 	bl	800167c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fed2 	bl	800167c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e207      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xc0>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fec2 	bl	800167c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe febe 	bl	800167c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1f3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0xe8>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292a:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800293e:	2b08      	cmp	r3, #8
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e1c7      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4937      	ldr	r1, [pc, #220]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	e03a      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002984:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_RCC_OscConfig+0x244>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe fe77 	bl	800167c <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe fe73 	bl	800167c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1a8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4925      	ldr	r1, [pc, #148]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCC_OscConfig+0x244>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe fe56 	bl	800167c <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d4:	f7fe fe52 	bl	800167c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e187      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d036      	beq.n	8002a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fe36 	bl	800167c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a14:	f7fe fe32 	bl	800167c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e167      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x200>
 8002a32:	e01b      	b.n	8002a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fe1f 	bl	800167c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	e00e      	b.n	8002a60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe fe1b 	bl	800167c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d907      	bls.n	8002a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e150      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470000 	.word	0x42470000
 8002a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ea      	bne.n	8002a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8097 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7e:	4b81      	ldr	r3, [pc, #516]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10f      	bne.n	8002aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	4b7d      	ldr	r3, [pc, #500]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a7c      	ldr	r2, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b7a      	ldr	r3, [pc, #488]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b77      	ldr	r3, [pc, #476]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4b74      	ldr	r3, [pc, #464]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a73      	ldr	r2, [pc, #460]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fddb 	bl	800167c <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7fe fdd7 	bl	800167c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e10c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x2ea>
 8002af0:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a63      	ldr	r2, [pc, #396]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	e01c      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x30c>
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a5e      	ldr	r2, [pc, #376]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	4b5c      	ldr	r3, [pc, #368]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002b20:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a57      	ldr	r2, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	4b55      	ldr	r3, [pc, #340]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a54      	ldr	r2, [pc, #336]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe fd9c 	bl	800167c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe fd98 	bl	800167c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0cb      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ee      	beq.n	8002b48 <HAL_RCC_OscConfig+0x334>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fd86 	bl	800167c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe fd82 	bl	800167c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0b5      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ee      	bne.n	8002b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9c:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a1 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d05c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d141      	bne.n	8002c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fd56 	bl	800167c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe fd52 	bl	800167c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e087      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	491b      	ldr	r1, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fd2b 	bl	800167c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe fd27 	bl	800167c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e05c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x416>
 8002c48:	e054      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fd14 	bl	800167c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fd10 	bl	800167c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e045      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x444>
 8002c76:	e03d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e038      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4ec>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d121      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0cc      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d90c      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b65      	ldr	r3, [pc, #404]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d044      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d119      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e067      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4934      	ldr	r1, [pc, #208]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fe fc42 	bl	800167c <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe fc3e 	bl	800167c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e04f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d20c      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fba2 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	0802442c 	.word	0x0802442c
 8002ec8:	20000004 	.word	0x20000004
 8002ecc:	20000008 	.word	0x20000008

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b094      	sub	sp, #80	; 0x50
 8002ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	647b      	str	r3, [r7, #68]	; 0x44
 8002edc:	2300      	movs	r3, #0
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee8:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d00d      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x40>
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	f200 80e1 	bhi.w	80030bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x34>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f02:	e0db      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b73      	ldr	r3, [pc, #460]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f08:	e0db      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f0a:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f0e:	e0d8      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f10:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f42:	4622      	mov	r2, r4
 8002f44:	462b      	mov	r3, r5
 8002f46:	f04f 0000 	mov.w	r0, #0
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	0159      	lsls	r1, r3, #5
 8002f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f54:	0150      	lsls	r0, r2, #5
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	1a51      	subs	r1, r2, r1
 8002f5e:	6139      	str	r1, [r7, #16]
 8002f60:	4629      	mov	r1, r5
 8002f62:	eb63 0301 	sbc.w	r3, r3, r1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f74:	4659      	mov	r1, fp
 8002f76:	018b      	lsls	r3, r1, #6
 8002f78:	4651      	mov	r1, sl
 8002f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f7e:	4651      	mov	r1, sl
 8002f80:	018a      	lsls	r2, r1, #6
 8002f82:	4651      	mov	r1, sl
 8002f84:	ebb2 0801 	subs.w	r8, r2, r1
 8002f88:	4659      	mov	r1, fp
 8002f8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fa2:	4690      	mov	r8, r2
 8002fa4:	4699      	mov	r9, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	eb18 0303 	adds.w	r3, r8, r3
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	462b      	mov	r3, r5
 8002fb0:	eb49 0303 	adc.w	r3, r9, r3
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	024b      	lsls	r3, r1, #9
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fcc:	4621      	mov	r1, r4
 8002fce:	024a      	lsls	r2, r1, #9
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fe0:	f7fd f94e 	bl	8000280 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fec:	e058      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ffe:	623b      	str	r3, [r7, #32]
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	f04f 0000 	mov.w	r0, #0
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	0159      	lsls	r1, r3, #5
 8003016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301a:	0150      	lsls	r0, r2, #5
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4641      	mov	r1, r8
 8003022:	ebb2 0a01 	subs.w	sl, r2, r1
 8003026:	4649      	mov	r1, r9
 8003028:	eb63 0b01 	sbc.w	fp, r3, r1
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003038:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800303c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003040:	ebb2 040a 	subs.w	r4, r2, sl
 8003044:	eb63 050b 	sbc.w	r5, r3, fp
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	00eb      	lsls	r3, r5, #3
 8003052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003056:	00e2      	lsls	r2, r4, #3
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	4643      	mov	r3, r8
 800305e:	18e3      	adds	r3, r4, r3
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	464b      	mov	r3, r9
 8003064:	eb45 0303 	adc.w	r3, r5, r3
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003076:	4629      	mov	r1, r5
 8003078:	028b      	lsls	r3, r1, #10
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003080:	4621      	mov	r1, r4
 8003082:	028a      	lsls	r2, r1, #10
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308a:	2200      	movs	r2, #0
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	61fa      	str	r2, [r7, #28]
 8003090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003094:	f7fd f8f4 	bl	8000280 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ba:	e002      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3750      	adds	r7, #80	; 0x50
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	007a1200 	.word	0x007a1200

080030dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000004 	.word	0x20000004

080030f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030f8:	f7ff fff0 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	0a9b      	lsrs	r3, r3, #10
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40023800 	.word	0x40023800
 8003118:	0802443c 	.word	0x0802443c

0800311c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003120:	f7ff ffdc 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	0b5b      	lsrs	r3, r3, #13
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	4903      	ldr	r1, [pc, #12]	; (8003140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800
 8003140:	0802443c 	.word	0x0802443c

08003144 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003168:	2b00      	cmp	r3, #0
 800316a:	d035      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800316c:	4b62      	ldr	r3, [pc, #392]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003172:	f7fe fa83 	bl	800167c <HAL_GetTick>
 8003176:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003178:	e008      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800317a:	f7fe fa7f 	bl	800167c <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0b0      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800318c:	4b5b      	ldr	r3, [pc, #364]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f0      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	019a      	lsls	r2, r3, #6
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	071b      	lsls	r3, r3, #28
 80031a4:	4955      	ldr	r1, [pc, #340]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031ac:	4b52      	ldr	r3, [pc, #328]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031b2:	f7fe fa63 	bl	800167c <HAL_GetTick>
 80031b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031ba:	f7fe fa5f 	bl	800167c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e090      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031cc:	4b4b      	ldr	r3, [pc, #300]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8083 	beq.w	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	4b44      	ldr	r3, [pc, #272]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a43      	ldr	r2, [pc, #268]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003202:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3e      	ldr	r2, [pc, #248]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800320e:	f7fe fa35 	bl	800167c <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7fe fa31 	bl	800167c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e062      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003228:	4b35      	ldr	r3, [pc, #212]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02f      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	429a      	cmp	r2, r3
 8003250:	d028      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003252:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800325c:	4b29      	ldr	r3, [pc, #164]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003262:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003268:	4a24      	ldr	r2, [pc, #144]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800326e:	4b23      	ldr	r3, [pc, #140]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d114      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe f9ff 	bl	800167c <HAL_GetTick>
 800327e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe f9fb 	bl	800167c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e02a      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ee      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032b0:	d10d      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80032c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c6:	490d      	ldr	r1, [pc, #52]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]
 80032cc:	e005      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032d8:	6093      	str	r3, [r2, #8]
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e6:	4905      	ldr	r1, [pc, #20]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	42470068 	.word	0x42470068
 80032fc:	40023800 	.word	0x40023800
 8003300:	40007000 	.word	0x40007000
 8003304:	42470e40 	.word	0x42470e40

08003308 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d13e      	bne.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d12f      	bne.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800333e:	617b      	str	r3, [r7, #20]
          break;
 8003340:	e02f      	b.n	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334e:	d108      	bne.n	8003362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003350:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	e007      	b.n	8003372 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800336a:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338c:	0f1b      	lsrs	r3, r3, #28
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]
          break;
 800339a:	e002      	b.n	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
          break;
 80033a0:	bf00      	nop
        }
      }
      break;
 80033a2:	bf00      	nop
    }
  }
  return frequency;
 80033a4:	697b      	ldr	r3, [r7, #20]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	00bb8000 	.word	0x00bb8000
 80033bc:	007a1200 	.word	0x007a1200
 80033c0:	00f42400 	.word	0x00f42400

080033c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07b      	b.n	80034ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d108      	bne.n	80033f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033e6:	d009      	beq.n	80033fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	61da      	str	r2, [r3, #28]
 80033ee:	e005      	b.n	80033fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fe12 	bl	8001040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003432:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	ea42 0103 	orr.w	r1, r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0104 	and.w	r1, r3, #4
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f003 0210 	and.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b088      	sub	sp, #32
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_SPI_Transmit+0x22>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e126      	b.n	8003746 <HAL_SPI_Transmit+0x270>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003500:	f7fe f8bc 	bl	800167c <HAL_GetTick>
 8003504:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d002      	beq.n	800351c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003516:	2302      	movs	r3, #2
 8003518:	77fb      	strb	r3, [r7, #31]
    goto error;
 800351a:	e10b      	b.n	8003734 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Transmit+0x52>
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800352c:	e102      	b.n	8003734 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2203      	movs	r2, #3
 8003532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003574:	d10f      	bne.n	8003596 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003584:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003594:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d007      	beq.n	80035b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035bc:	d14b      	bne.n	8003656 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_Transmit+0xf6>
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d13e      	bne.n	800364a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	881a      	ldrh	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	1c9a      	adds	r2, r3, #2
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035f0:	e02b      	b.n	800364a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d112      	bne.n	8003626 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	881a      	ldrh	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	86da      	strh	r2, [r3, #54]	; 0x36
 8003624:	e011      	b.n	800364a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003626:	f7fe f829 	bl	800167c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d803      	bhi.n	800363e <HAL_SPI_Transmit+0x168>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d102      	bne.n	8003644 <HAL_SPI_Transmit+0x16e>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003648:	e074      	b.n	8003734 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ce      	bne.n	80035f2 <HAL_SPI_Transmit+0x11c>
 8003654:	e04c      	b.n	80036f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_SPI_Transmit+0x18e>
 800365e:	8afb      	ldrh	r3, [r7, #22]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d140      	bne.n	80036e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800368a:	e02c      	b.n	80036e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b02      	cmp	r3, #2
 8003698:	d113      	bne.n	80036c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	86da      	strh	r2, [r3, #54]	; 0x36
 80036c0:	e011      	b.n	80036e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c2:	f7fd ffdb 	bl	800167c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d803      	bhi.n	80036da <HAL_SPI_Transmit+0x204>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d102      	bne.n	80036e0 <HAL_SPI_Transmit+0x20a>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036e4:	e026      	b.n	8003734 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1cd      	bne.n	800368c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	6839      	ldr	r1, [r7, #0]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fbcb 	bl	8003e90 <SPI_EndRxTxTransaction>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e000      	b.n	8003734 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003732:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003744:	7ffb      	ldrb	r3, [r7, #31]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b088      	sub	sp, #32
 8003752:	af02      	add	r7, sp, #8
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376a:	d112      	bne.n	8003792 <HAL_SPI_Receive+0x44>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10e      	bne.n	8003792 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2204      	movs	r2, #4
 8003778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f8f1 	bl	8003970 <HAL_SPI_TransmitReceive>
 800378e:	4603      	mov	r3, r0
 8003790:	e0ea      	b.n	8003968 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_SPI_Receive+0x52>
 800379c:	2302      	movs	r3, #2
 800379e:	e0e3      	b.n	8003968 <HAL_SPI_Receive+0x21a>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a8:	f7fd ff68 	bl	800167c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037be:	e0ca      	b.n	8003956 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_SPI_Receive+0x7e>
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037d0:	e0c1      	b.n	8003956 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2204      	movs	r2, #4
 80037d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003818:	d10f      	bne.n	800383a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003838:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d007      	beq.n	8003858 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d162      	bne.n	8003926 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003860:	e02e      	b.n	80038c0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d115      	bne.n	800389c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f103 020c 	add.w	r2, r3, #12
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	7812      	ldrb	r2, [r2, #0]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	87da      	strh	r2, [r3, #62]	; 0x3e
 800389a:	e011      	b.n	80038c0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800389c:	f7fd feee 	bl	800167c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d803      	bhi.n	80038b4 <HAL_SPI_Receive+0x166>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d102      	bne.n	80038ba <HAL_SPI_Receive+0x16c>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038be:	e04a      	b.n	8003956 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1cb      	bne.n	8003862 <HAL_SPI_Receive+0x114>
 80038ca:	e031      	b.n	8003930 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d113      	bne.n	8003902 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	b292      	uxth	r2, r2
 80038e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003900:	e011      	b.n	8003926 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003902:	f7fd febb 	bl	800167c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d803      	bhi.n	800391a <HAL_SPI_Receive+0x1cc>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d102      	bne.n	8003920 <HAL_SPI_Receive+0x1d2>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d102      	bne.n	8003926 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003924:	e017      	b.n	8003956 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1cd      	bne.n	80038cc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	6839      	ldr	r1, [r7, #0]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fa45 	bl	8003dc4 <SPI_EndRxTransaction>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
 8003952:	e000      	b.n	8003956 <HAL_SPI_Receive+0x208>
  }

error :
 8003954:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	; 0x30
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800397e:	2301      	movs	r3, #1
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_SPI_TransmitReceive+0x26>
 8003992:	2302      	movs	r3, #2
 8003994:	e18a      	b.n	8003cac <HAL_SPI_TransmitReceive+0x33c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800399e:	f7fd fe6d 	bl	800167c <HAL_GetTick>
 80039a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d00f      	beq.n	80039e0 <HAL_SPI_TransmitReceive+0x70>
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c6:	d107      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x68>
 80039d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d003      	beq.n	80039e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039de:	e15b      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x82>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x82>
 80039ec:	887b      	ldrh	r3, [r7, #2]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039f8:	e14e      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d003      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2205      	movs	r2, #5
 8003a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	887a      	ldrh	r2, [r7, #2]
 8003a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	887a      	ldrh	r2, [r7, #2]
 8003a36:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d007      	beq.n	8003a62 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6a:	d178      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_SPI_TransmitReceive+0x10a>
 8003a74:	8b7b      	ldrh	r3, [r7, #26]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d166      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	881a      	ldrh	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	1c9a      	adds	r2, r3, #2
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a9e:	e053      	b.n	8003b48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d11b      	bne.n	8003ae6 <HAL_SPI_TransmitReceive+0x176>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d016      	beq.n	8003ae6 <HAL_SPI_TransmitReceive+0x176>
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d113      	bne.n	8003ae6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	1c9a      	adds	r2, r3, #2
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d119      	bne.n	8003b28 <HAL_SPI_TransmitReceive+0x1b8>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d014      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	1c9a      	adds	r2, r3, #2
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b24:	2301      	movs	r3, #1
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b28:	f7fd fda8 	bl	800167c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d807      	bhi.n	8003b48 <HAL_SPI_TransmitReceive+0x1d8>
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d003      	beq.n	8003b48 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b46:	e0a7      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1a6      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x130>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1a1      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x130>
 8003b5c:	e07c      	b.n	8003c58 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_SPI_TransmitReceive+0x1fc>
 8003b66:	8b7b      	ldrh	r3, [r7, #26]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d16b      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b92:	e057      	b.n	8003c44 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d11c      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x26c>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d017      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x26c>
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d114      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d119      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x2ae>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d014      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c1e:	f7fd fd2d 	bl	800167c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d803      	bhi.n	8003c36 <HAL_SPI_TransmitReceive+0x2c6>
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d102      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x2cc>
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d103      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c42:	e029      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1a2      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x224>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d19d      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f917 	bl	8003e90 <SPI_EndRxTxTransaction>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c74:	e010      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	e000      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3730      	adds	r7, #48	; 0x30
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cc4:	f7fd fcda 	bl	800167c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cd4:	f7fd fcd2 	bl	800167c <HAL_GetTick>
 8003cd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cda:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	015b      	lsls	r3, r3, #5
 8003ce0:	0d1b      	lsrs	r3, r3, #20
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	fb02 f303 	mul.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cea:	e054      	b.n	8003d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d050      	beq.n	8003d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cf4:	f7fd fcc2 	bl	800167c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d902      	bls.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d13d      	bne.n	8003d86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d22:	d111      	bne.n	8003d48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2c:	d004      	beq.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d107      	bne.n	8003d48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d50:	d10f      	bne.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e017      	b.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d19b      	bne.n	8003cec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000004 	.word	0x20000004

08003dc4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd8:	d111      	bne.n	8003dfe <SPI_EndRxTransaction+0x3a>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d004      	beq.n	8003dee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dec:	d107      	bne.n	8003dfe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e06:	d12a      	bne.n	8003e5e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d012      	beq.n	8003e38 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff ff49 	bl	8003cb4 <SPI_WaitFlagStateUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d02d      	beq.n	8003e84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e026      	b.n	8003e86 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2101      	movs	r1, #1
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff ff36 	bl	8003cb4 <SPI_WaitFlagStateUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01a      	beq.n	8003e84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e013      	b.n	8003e86 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2101      	movs	r1, #1
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff ff23 	bl	8003cb4 <SPI_WaitFlagStateUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f043 0220 	orr.w	r2, r3, #32
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e000      	b.n	8003e86 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <SPI_EndRxTxTransaction+0x7c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <SPI_EndRxTxTransaction+0x80>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0d5b      	lsrs	r3, r3, #21
 8003ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eac:	fb02 f303 	mul.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eba:	d112      	bne.n	8003ee2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff fef4 	bl	8003cb4 <SPI_WaitFlagStateUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d016      	beq.n	8003f00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f043 0220 	orr.w	r2, r3, #32
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00f      	b.n	8003f02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d0f2      	beq.n	8003ee2 <SPI_EndRxTxTransaction+0x52>
 8003efc:	e000      	b.n	8003f00 <SPI_EndRxTxTransaction+0x70>
        break;
 8003efe:	bf00      	nop
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000004 	.word	0x20000004
 8003f10:	165e9f81 	.word	0x165e9f81

08003f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e03f      	b.n	8003fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd f91e 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f929 	bl	80041b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b08a      	sub	sp, #40	; 0x28
 8003fb2:	af02      	add	r7, sp, #8
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d17c      	bne.n	80040c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_Transmit+0x2c>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e075      	b.n	80040ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Transmit+0x3e>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e06e      	b.n	80040ca <HAL_UART_Transmit+0x11c>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2221      	movs	r2, #33	; 0x21
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004002:	f7fd fb3b 	bl	800167c <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401c:	d108      	bne.n	8004030 <HAL_UART_Transmit+0x82>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e003      	b.n	8004038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004040:	e02a      	b.n	8004098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f840 	bl	80040d2 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e036      	b.n	80040ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	3302      	adds	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e007      	b.n	800408a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1cf      	bne.n	8004042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2140      	movs	r1, #64	; 0x40
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f810 	bl	80040d2 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e006      	b.n	80040ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b090      	sub	sp, #64	; 0x40
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	4613      	mov	r3, r2
 80040e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e2:	e050      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d04c      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x30>
 80040f2:	f7fd fac3 	bl	800167c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040fe:	429a      	cmp	r2, r3
 8004100:	d241      	bcs.n	8004186 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004122:	637a      	str	r2, [r7, #52]	; 0x34
 8004124:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	613b      	str	r3, [r7, #16]
   return(result);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	63bb      	str	r3, [r7, #56]	; 0x38
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004156:	623a      	str	r2, [r7, #32]
 8004158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	69f9      	ldr	r1, [r7, #28]
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	61bb      	str	r3, [r7, #24]
   return(result);
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e00f      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d09f      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3740      	adds	r7, #64	; 0x40
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b4:	b0c0      	sub	sp, #256	; 0x100
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	68d9      	ldr	r1, [r3, #12]
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	ea40 0301 	orr.w	r3, r0, r1
 80041d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004208:	f021 010c 	bic.w	r1, r1, #12
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004216:	430b      	orrs	r3, r1
 8004218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422a:	6999      	ldr	r1, [r3, #24]
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	ea40 0301 	orr.w	r3, r0, r1
 8004236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b8f      	ldr	r3, [pc, #572]	; (800447c <UART_SetConfig+0x2cc>)
 8004240:	429a      	cmp	r2, r3
 8004242:	d005      	beq.n	8004250 <UART_SetConfig+0xa0>
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <UART_SetConfig+0x2d0>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d104      	bne.n	800425a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004250:	f7fe ff64 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8004254:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004258:	e003      	b.n	8004262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800425a:	f7fe ff4b 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 800425e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	f040 810c 	bne.w	8004488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004274:	2200      	movs	r2, #0
 8004276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800427a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800427e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	1891      	adds	r1, r2, r2
 8004288:	65b9      	str	r1, [r7, #88]	; 0x58
 800428a:	415b      	adcs	r3, r3
 800428c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800428e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004292:	4621      	mov	r1, r4
 8004294:	eb12 0801 	adds.w	r8, r2, r1
 8004298:	4629      	mov	r1, r5
 800429a:	eb43 0901 	adc.w	r9, r3, r1
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042b2:	4690      	mov	r8, r2
 80042b4:	4699      	mov	r9, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	eb18 0303 	adds.w	r3, r8, r3
 80042bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042c0:	462b      	mov	r3, r5
 80042c2:	eb49 0303 	adc.w	r3, r9, r3
 80042c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042de:	460b      	mov	r3, r1
 80042e0:	18db      	adds	r3, r3, r3
 80042e2:	653b      	str	r3, [r7, #80]	; 0x50
 80042e4:	4613      	mov	r3, r2
 80042e6:	eb42 0303 	adc.w	r3, r2, r3
 80042ea:	657b      	str	r3, [r7, #84]	; 0x54
 80042ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042f4:	f7fb ffc4 	bl	8000280 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4b61      	ldr	r3, [pc, #388]	; (8004484 <UART_SetConfig+0x2d4>)
 80042fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	011c      	lsls	r4, r3, #4
 8004306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004310:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	1891      	adds	r1, r2, r2
 800431e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004320:	415b      	adcs	r3, r3
 8004322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004328:	4641      	mov	r1, r8
 800432a:	eb12 0a01 	adds.w	sl, r2, r1
 800432e:	4649      	mov	r1, r9
 8004330:	eb43 0b01 	adc.w	fp, r3, r1
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004348:	4692      	mov	sl, r2
 800434a:	469b      	mov	fp, r3
 800434c:	4643      	mov	r3, r8
 800434e:	eb1a 0303 	adds.w	r3, sl, r3
 8004352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004356:	464b      	mov	r3, r9
 8004358:	eb4b 0303 	adc.w	r3, fp, r3
 800435c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800436c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004374:	460b      	mov	r3, r1
 8004376:	18db      	adds	r3, r3, r3
 8004378:	643b      	str	r3, [r7, #64]	; 0x40
 800437a:	4613      	mov	r3, r2
 800437c:	eb42 0303 	adc.w	r3, r2, r3
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
 8004382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800438a:	f7fb ff79 	bl	8000280 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4611      	mov	r1, r2
 8004394:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <UART_SetConfig+0x2d4>)
 8004396:	fba3 2301 	umull	r2, r3, r3, r1
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2264      	movs	r2, #100	; 0x64
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	1acb      	subs	r3, r1, r3
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <UART_SetConfig+0x2d4>)
 80043ac:	fba3 2302 	umull	r2, r3, r3, r2
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b8:	441c      	add	r4, r3
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80043d4:	415b      	adcs	r3, r3
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043dc:	4641      	mov	r1, r8
 80043de:	1851      	adds	r1, r2, r1
 80043e0:	6339      	str	r1, [r7, #48]	; 0x30
 80043e2:	4649      	mov	r1, r9
 80043e4:	414b      	adcs	r3, r1
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043f4:	4659      	mov	r1, fp
 80043f6:	00cb      	lsls	r3, r1, #3
 80043f8:	4651      	mov	r1, sl
 80043fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fe:	4651      	mov	r1, sl
 8004400:	00ca      	lsls	r2, r1, #3
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	4603      	mov	r3, r0
 8004408:	4642      	mov	r2, r8
 800440a:	189b      	adds	r3, r3, r2
 800440c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004410:	464b      	mov	r3, r9
 8004412:	460a      	mov	r2, r1
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004428:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800442c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004430:	460b      	mov	r3, r1
 8004432:	18db      	adds	r3, r3, r3
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
 8004436:	4613      	mov	r3, r2
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004446:	f7fb ff1b 	bl	8000280 <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <UART_SetConfig+0x2d4>)
 8004450:	fba3 1302 	umull	r1, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	2164      	movs	r1, #100	; 0x64
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	3332      	adds	r3, #50	; 0x32
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <UART_SetConfig+0x2d4>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	f003 0207 	and.w	r2, r3, #7
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4422      	add	r2, r4
 8004476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004478:	e105      	b.n	8004686 <UART_SetConfig+0x4d6>
 800447a:	bf00      	nop
 800447c:	40011000 	.word	0x40011000
 8004480:	40011400 	.word	0x40011400
 8004484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800448c:	2200      	movs	r2, #0
 800448e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004492:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800449a:	4642      	mov	r2, r8
 800449c:	464b      	mov	r3, r9
 800449e:	1891      	adds	r1, r2, r2
 80044a0:	6239      	str	r1, [r7, #32]
 80044a2:	415b      	adcs	r3, r3
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044aa:	4641      	mov	r1, r8
 80044ac:	1854      	adds	r4, r2, r1
 80044ae:	4649      	mov	r1, r9
 80044b0:	eb43 0501 	adc.w	r5, r3, r1
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	00eb      	lsls	r3, r5, #3
 80044be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c2:	00e2      	lsls	r2, r4, #3
 80044c4:	4614      	mov	r4, r2
 80044c6:	461d      	mov	r5, r3
 80044c8:	4643      	mov	r3, r8
 80044ca:	18e3      	adds	r3, r4, r3
 80044cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044d0:	464b      	mov	r3, r9
 80044d2:	eb45 0303 	adc.w	r3, r5, r3
 80044d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044f6:	4629      	mov	r1, r5
 80044f8:	008b      	lsls	r3, r1, #2
 80044fa:	4621      	mov	r1, r4
 80044fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004500:	4621      	mov	r1, r4
 8004502:	008a      	lsls	r2, r1, #2
 8004504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004508:	f7fb feba 	bl	8000280 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4b60      	ldr	r3, [pc, #384]	; (8004694 <UART_SetConfig+0x4e4>)
 8004512:	fba3 2302 	umull	r2, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	011c      	lsls	r4, r3, #4
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004524:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	61b9      	str	r1, [r7, #24]
 8004534:	415b      	adcs	r3, r3
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800453c:	4641      	mov	r1, r8
 800453e:	1851      	adds	r1, r2, r1
 8004540:	6139      	str	r1, [r7, #16]
 8004542:	4649      	mov	r1, r9
 8004544:	414b      	adcs	r3, r1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004554:	4659      	mov	r1, fp
 8004556:	00cb      	lsls	r3, r1, #3
 8004558:	4651      	mov	r1, sl
 800455a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455e:	4651      	mov	r1, sl
 8004560:	00ca      	lsls	r2, r1, #3
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	4603      	mov	r3, r0
 8004568:	4642      	mov	r2, r8
 800456a:	189b      	adds	r3, r3, r2
 800456c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004570:	464b      	mov	r3, r9
 8004572:	460a      	mov	r2, r1
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	67bb      	str	r3, [r7, #120]	; 0x78
 8004586:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004594:	4649      	mov	r1, r9
 8004596:	008b      	lsls	r3, r1, #2
 8004598:	4641      	mov	r1, r8
 800459a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459e:	4641      	mov	r1, r8
 80045a0:	008a      	lsls	r2, r1, #2
 80045a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045a6:	f7fb fe6b 	bl	8000280 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4b39      	ldr	r3, [pc, #228]	; (8004694 <UART_SetConfig+0x4e4>)
 80045b0:	fba3 1302 	umull	r1, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	2164      	movs	r1, #100	; 0x64
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	3332      	adds	r3, #50	; 0x32
 80045c2:	4a34      	ldr	r2, [pc, #208]	; (8004694 <UART_SetConfig+0x4e4>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ce:	441c      	add	r4, r3
 80045d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d4:	2200      	movs	r2, #0
 80045d6:	673b      	str	r3, [r7, #112]	; 0x70
 80045d8:	677a      	str	r2, [r7, #116]	; 0x74
 80045da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045de:	4642      	mov	r2, r8
 80045e0:	464b      	mov	r3, r9
 80045e2:	1891      	adds	r1, r2, r2
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	415b      	adcs	r3, r3
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ee:	4641      	mov	r1, r8
 80045f0:	1851      	adds	r1, r2, r1
 80045f2:	6039      	str	r1, [r7, #0]
 80045f4:	4649      	mov	r1, r9
 80045f6:	414b      	adcs	r3, r1
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004606:	4659      	mov	r1, fp
 8004608:	00cb      	lsls	r3, r1, #3
 800460a:	4651      	mov	r1, sl
 800460c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004610:	4651      	mov	r1, sl
 8004612:	00ca      	lsls	r2, r1, #3
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	4603      	mov	r3, r0
 800461a:	4642      	mov	r2, r8
 800461c:	189b      	adds	r3, r3, r2
 800461e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004620:	464b      	mov	r3, r9
 8004622:	460a      	mov	r2, r1
 8004624:	eb42 0303 	adc.w	r3, r2, r3
 8004628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	663b      	str	r3, [r7, #96]	; 0x60
 8004634:	667a      	str	r2, [r7, #100]	; 0x64
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004642:	4649      	mov	r1, r9
 8004644:	008b      	lsls	r3, r1, #2
 8004646:	4641      	mov	r1, r8
 8004648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464c:	4641      	mov	r1, r8
 800464e:	008a      	lsls	r2, r1, #2
 8004650:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004654:	f7fb fe14 	bl	8000280 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <UART_SetConfig+0x4e4>)
 800465e:	fba3 1302 	umull	r1, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	2164      	movs	r1, #100	; 0x64
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	3332      	adds	r3, #50	; 0x32
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <UART_SetConfig+0x4e4>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	f003 020f 	and.w	r2, r3, #15
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4422      	add	r2, r4
 8004684:	609a      	str	r2, [r3, #8]
}
 8004686:	bf00      	nop
 8004688:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800468c:	46bd      	mov	sp, r7
 800468e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004692:	bf00      	nop
 8004694:	51eb851f 	.word	0x51eb851f

08004698 <WIZnetRecv>:

//todo Add udp functions, ex) sendto recvfrom

/*Shell for mbedtls recv function*/
int WIZnetRecv(void *ctx, unsigned char *buf, unsigned int len )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
	int32_t ret;
	ret = recv(*((int *)ctx),buf,len);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	b292      	uxth	r2, r2
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f019 f9cd 	bl	801da50 <recv>
 80046b6:	6178      	str	r0, [r7, #20]
	printf("Port:[%d]/Recv(%d)[%d]: \r\n",*((int *)ctx) ,len, (unsigned int)ret);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4805      	ldr	r0, [pc, #20]	; (80046d8 <WIZnetRecv+0x40>)
 80046c2:	f019 fde9 	bl	801e298 <iprintf>
	string_print_Hex(buf, len);
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	68b8      	ldr	r0, [r7, #8]
 80046ca:	f7fb ff99 	bl	8000600 <string_print_Hex>
    //return (recv(*((int *)ctx),buf,len));
	return ret;
 80046ce:	697b      	ldr	r3, [r7, #20]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	0801f814 	.word	0x0801f814

080046dc <WIZnetSend>:

/*Shell for mbedtls send function*/
int WIZnetSend(void *ctx, const unsigned char *buf, unsigned int len )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
	printf("Port:[%d]/Send(%d) : \r\n",*((int *)ctx) ,len);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4619      	mov	r1, r3
 80046f0:	480a      	ldr	r0, [pc, #40]	; (800471c <WIZnetSend+0x40>)
 80046f2:	f019 fdd1 	bl	801e298 <iprintf>
	string_print_Hex(buf, len);
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	68b8      	ldr	r0, [r7, #8]
 80046fa:	f7fb ff81 	bl	8000600 <string_print_Hex>
    return (send(*((int *)ctx),buf,len));
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	b292      	uxth	r2, r2
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f019 f8a6 	bl	801d85c <send>
 8004710:	4603      	mov	r3, r0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	0801f830 	.word	0x0801f830

08004720 <WIZnetDebugCB>:

/*Shell for mbedtls debug function.
 *DEBUG_LEBEL can be changed from 0 to 3*/
#ifdef MBEDTLS_DEBUG_C
void WIZnetDebugCB(void *ctx, int level, const char *file, int line, const char *str)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
    if(level <= DEBUG_LEVEL)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b01      	cmp	r3, #1
 8004732:	dc03      	bgt.n	800473c <WIZnetDebugCB+0x1c>
    {
       printf("%s\r\n",str);
 8004734:	69b9      	ldr	r1, [r7, #24]
 8004736:	4803      	ldr	r0, [pc, #12]	; (8004744 <WIZnetDebugCB+0x24>)
 8004738:	f019 fdae 	bl	801e298 <iprintf>
    }
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	0801f848 	.word	0x0801f848

08004748 <wiz_tls_init>:
#endif

/* SSL context intialization
 * */
unsigned int wiz_tls_init(wiz_tls_context* tlsContext, int* socket_fd)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b09e      	sub	sp, #120	; 0x78
 800474c:	af02      	add	r7, sp, #8
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	int ret = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	66fb      	str	r3, [r7, #108]	; 0x6c
	char error_buf[100];
#endif


#if defined (MBEDTLS_DEBUG_C)
	debug_set_threshold(DEBUG_LEVEL);
 8004756:	2001      	movs	r0, #1
 8004758:	f007 f850 	bl	800b7fc <mbedtls_debug_set_threshold>
#if defined (MBEDTLS_ENTROPY_C)
	tlsContext->entropy = malloc(sizeof(mbedtls_entropy_context));
	mbedtls_entropy_init( tlsContext->entropy);
#endif

	tlsContext->ctr_drbg = malloc(sizeof(mbedtls_ctr_drbg_context));
 800475c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8004760:	f019 fc54 	bl	801e00c <malloc>
 8004764:	4603      	mov	r3, r0
 8004766:	461a      	mov	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	601a      	str	r2, [r3, #0]
	tlsContext->ssl = malloc(sizeof(mbedtls_ssl_context));
 800476c:	20b4      	movs	r0, #180	; 0xb4
 800476e:	f019 fc4d 	bl	801e00c <malloc>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	605a      	str	r2, [r3, #4]
	tlsContext->conf = malloc(sizeof(mbedtls_ssl_config));
 800477a:	2054      	movs	r0, #84	; 0x54
 800477c:	f019 fc46 	bl	801e00c <malloc>
 8004780:	4603      	mov	r3, r0
 8004782:	461a      	mov	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	609a      	str	r2, [r3, #8]
	tlsContext->cacert = malloc(sizeof(mbedtls_x509_crt));
 8004788:	f44f 709a 	mov.w	r0, #308	; 0x134
 800478c:	f019 fc3e 	bl	801e00c <malloc>
 8004790:	4603      	mov	r3, r0
 8004792:	461a      	mov	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]

	mbedtls_ctr_drbg_init(tlsContext->ctr_drbg);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f007 f809 	bl	800b7b4 <mbedtls_ctr_drbg_init>
	mbedtls_x509_crt_init(tlsContext->cacert);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f018 fab0 	bl	801cd0c <mbedtls_x509_crt_init>
	mbedtls_ssl_init(tlsContext->ssl);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f014 fac7 	bl	8018d44 <mbedtls_ssl_init>
	mbedtls_ssl_config_init(tlsContext->conf);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f015 f834 	bl	8019828 <mbedtls_ssl_config_init>
	*/

#if defined (MBEDTLS_X509_CRT_PARSE_C)

#if defined (MBEDTLS_DEBUG_C)
	printf(" Loading the CA root certificate \r\n");
 80047c0:	482f      	ldr	r0, [pc, #188]	; (8004880 <wiz_tls_init+0x138>)
 80047c2:	f019 fdef 	bl	801e3a4 <puts>
#endif
	mbedtls_ssl_config_defaults((tlsContext->conf),
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6898      	ldr	r0, [r3, #8]
 80047ca:	2300      	movs	r3, #0
 80047cc:	2200      	movs	r2, #0
 80047ce:	2100      	movs	r1, #0
 80047d0:	f015 f838 	bl	8019844 <mbedtls_ssl_config_defaults>
								MBEDTLS_SSL_IS_CLIENT,
								MBEDTLS_SSL_TRANSPORT_STREAM,
								MBEDTLS_SSL_PRESET_DEFAULT);
	ret=mbedtls_ssl_setup(tlsContext->ssl, tlsContext->conf);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f014 fabe 	bl	8018d60 <mbedtls_ssl_setup>
 80047e4:	66f8      	str	r0, [r7, #108]	; 0x6c
	printf("mbedtls_ssl_setup : %d\r\n", ret);
 80047e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80047e8:	4826      	ldr	r0, [pc, #152]	; (8004884 <wiz_tls_init+0x13c>)
 80047ea:	f019 fd55 	bl	801e298 <iprintf>
	mbedtls_ssl_set_hostname(tlsContext->ssl, sslHostName);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4925      	ldr	r1, [pc, #148]	; (8004888 <wiz_tls_init+0x140>)
 80047f4:	4618      	mov	r0, r3
 80047f6:	f014 fbd5 	bl	8018fa4 <mbedtls_ssl_set_hostname>

#if defined (MBEDTLS_CERTS_C)
	printf("cert size[%d] = [%s]\r\n", strlen(CERTIFICATE), CERTIFICATE);
 80047fa:	4a24      	ldr	r2, [pc, #144]	; (800488c <wiz_tls_init+0x144>)
 80047fc:	f240 6154 	movw	r1, #1620	; 0x654
 8004800:	4823      	ldr	r0, [pc, #140]	; (8004890 <wiz_tls_init+0x148>)
 8004802:	f019 fd49 	bl	801e298 <iprintf>
	ret = mbedtls_x509_crt_parse((tlsContext->cacert),(unsigned char *)CERTIFICATE, strlen(CERTIFICATE));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f240 6254 	movw	r2, #1620	; 0x654
 800480e:	491f      	ldr	r1, [pc, #124]	; (800488c <wiz_tls_init+0x144>)
 8004810:	4618      	mov	r0, r3
 8004812:	f016 fdcf 	bl	801b3b4 <mbedtls_x509_crt_parse>
 8004816:	66f8      	str	r0, [r7, #108]	; 0x6c
#if defined (MBEDTLS_DEBUG_C)
	printf("SSL_CERTS_C not define .\r\n");
#endif
#endif
#endif
	if(ret < 0)
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	2b00      	cmp	r3, #0
 800481c:	da03      	bge.n	8004826 <wiz_tls_init+0xde>
	{
#if defined (MBEDTLS_CERTS_C)
		printf("x509_crt_parse failed.%x \r\n",ret);
 800481e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004820:	481c      	ldr	r0, [pc, #112]	; (8004894 <wiz_tls_init+0x14c>)
 8004822:	f019 fd39 	bl	801e298 <iprintf>
	}
	/*
		set ssl session param
	*/

	mbedtls_ssl_conf_ca_chain(tlsContext->conf, tlsContext->cacert, NULL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6898      	ldr	r0, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	4619      	mov	r1, r3
 8004832:	f014 fba4 	bl	8018f7e <mbedtls_ssl_conf_ca_chain>
	//mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_REQUIRED);//This option is for server certificate verification
	mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_NONE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f014 fb4b 	bl	8018ed8 <mbedtls_ssl_conf_authmode>
	mbedtls_ssl_conf_rng(tlsContext->conf,SSLRandomCB,tlsContext->ctr_drbg);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6898      	ldr	r0, [r3, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	4912      	ldr	r1, [pc, #72]	; (8004898 <wiz_tls_init+0x150>)
 800484e:	f014 fb59 	bl	8018f04 <mbedtls_ssl_conf_rng>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ssl_conf_dbg(tlsContext->conf, WIZnetDebugCB, stdout);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6898      	ldr	r0, [r3, #8]
 8004856:	4b11      	ldr	r3, [pc, #68]	; (800489c <wiz_tls_init+0x154>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	461a      	mov	r2, r3
 800485e:	4910      	ldr	r1, [pc, #64]	; (80048a0 <wiz_tls_init+0x158>)
 8004860:	f014 fb62 	bl	8018f28 <mbedtls_ssl_conf_dbg>
#endif
	mbedtls_ssl_set_bio(tlsContext->ssl, socket_fd, SSLSendCB, SSLRecvCB, SSLRecvTimeOutCB);		 //set client's socket send and receive functions
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6858      	ldr	r0, [r3, #4]
 8004868:	2300      	movs	r3, #0
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <wiz_tls_init+0x15c>)
 800486e:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <wiz_tls_init+0x160>)
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	f014 fb6b 	bl	8018f4c <mbedtls_ssl_set_bio>

	return 1;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	3770      	adds	r7, #112	; 0x70
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	0801f850 	.word	0x0801f850
 8004884:	0801f874 	.word	0x0801f874
 8004888:	20000010 	.word	0x20000010
 800488c:	08024444 	.word	0x08024444
 8004890:	0801f890 	.word	0x0801f890
 8004894:	0801f8a8 	.word	0x0801f8a8
 8004898:	08004ab5 	.word	0x08004ab5
 800489c:	20000070 	.word	0x20000070
 80048a0:	08004721 	.word	0x08004721
 80048a4:	08004699 	.word	0x08004699
 80048a8:	080046dd 	.word	0x080046dd

080048ac <wiz_tls_deinit>:

/*Free the memory for ssl context*/
void wiz_tls_deinit(wiz_tls_context* tlsContext)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	/*  free SSL context memory  */
	mbedtls_ssl_free( tlsContext->ssl );
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f014 ff11 	bl	80196e0 <mbedtls_ssl_free>
	mbedtls_ssl_config_free( tlsContext->conf );
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f015 f838 	bl	8019938 <mbedtls_ssl_config_free>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ctr_drbg_free( tlsContext->ctr_drbg );
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f006 ff7f 	bl	800b7d0 <mbedtls_ctr_drbg_free>
#endif
	//mbedtls_entropy_free( tlsContext->entropy );
#if defined(MBEDTLS_X509_CRT_PARSE_C)
	mbedtls_x509_crt_free( tlsContext->cacert );
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f018 fa26 	bl	801cd28 <mbedtls_x509_crt_free>
#endif
	free(tlsContext->ctr_drbg);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f019 fb9b 	bl	801e01c <free>
	free(tlsContext->ssl);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f019 fb96 	bl	801e01c <free>
	free(tlsContext->conf);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f019 fb91 	bl	801e01c <free>
	free(tlsContext->cacert);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4618      	mov	r0, r3
 8004900:	f019 fb8c 	bl	801e01c <free>
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <wiz_tls_connect>:

/* SSL handshake */
unsigned int wiz_tls_connect(wiz_tls_context* tlsContext, unsigned short port, uint8_t * addr)
{
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b089      	sub	sp, #36	; 0x24
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	460b      	mov	r3, r1
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	817b      	strh	r3, [r7, #10]
    int ret;

    memset(tempBuf,0,1024);
 800491a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800491e:	2100      	movs	r1, #0
 8004920:	4840      	ldr	r0, [pc, #256]	; (8004a24 <wiz_tls_connect+0x118>)
 8004922:	f019 fbbb 	bl	801e09c <memset>

	/*socket open*/
    printf("socket open port : %d \r\n",*((uint8_t*)(tlsContext->ssl->p_bio)));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	483d      	ldr	r0, [pc, #244]	; (8004a28 <wiz_tls_connect+0x11c>)
 8004932:	f019 fcb1 	bl	801e298 <iprintf>
	ret = socket(*((uint8_t*)(tlsContext->ssl->p_bio)), Sn_MR_TCP, 0, 0x00);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	7818      	ldrb	r0, [r3, #0]
 800493e:	2300      	movs	r3, #0
 8004940:	2200      	movs	r2, #0
 8004942:	2101      	movs	r1, #1
 8004944:	f018 fd2a 	bl	801d39c <socket>
 8004948:	4603      	mov	r3, r0
 800494a:	617b      	str	r3, [r7, #20]
	printf("socket[%d] \r\n", ret);
 800494c:	6979      	ldr	r1, [r7, #20]
 800494e:	4837      	ldr	r0, [pc, #220]	; (8004a2c <wiz_tls_connect+0x120>)
 8004950:	f019 fca2 	bl	801e298 <iprintf>
	if(ret != *((uint8_t*)(tlsContext->ssl->p_bio)))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4293      	cmp	r3, r2
 8004962:	d001      	beq.n	8004968 <wiz_tls_connect+0x5c>
		return ret;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	e058      	b.n	8004a1a <wiz_tls_connect+0x10e>

	/*Connect to the target*/
	printf("server ip : %d.%d.%d.%d port : %d \r\n", addr[0], addr[1], addr[2], addr[3], port);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	4619      	mov	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3301      	adds	r3, #1
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3302      	adds	r3, #2
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	461c      	mov	r4, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3303      	adds	r3, #3
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	897b      	ldrh	r3, [r7, #10]
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	9200      	str	r2, [sp, #0]
 800498c:	4623      	mov	r3, r4
 800498e:	4602      	mov	r2, r0
 8004990:	4827      	ldr	r0, [pc, #156]	; (8004a30 <wiz_tls_connect+0x124>)
 8004992:	f019 fc81 	bl	801e298 <iprintf>
	ret = connect(*((uint8_t*)tlsContext->ssl->p_bio), addr, port);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	897a      	ldrh	r2, [r7, #10]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f018 fe7e 	bl	801d6a4 <connect>
 80049a8:	4603      	mov	r3, r0
 80049aa:	617b      	str	r3, [r7, #20]
	printf("init connect[%d] \r\n", ret);
 80049ac:	6979      	ldr	r1, [r7, #20]
 80049ae:	4821      	ldr	r0, [pc, #132]	; (8004a34 <wiz_tls_connect+0x128>)
 80049b0:	f019 fc72 	bl	801e298 <iprintf>
	if(ret != SOCK_OK)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <wiz_tls_connect+0xb2>
		return ret;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	e02d      	b.n	8004a1a <wiz_tls_connect+0x10e>

#if defined(MBEDTLS_DEBUG_C)
    printf( "  . Performing the SSL/TLS handshake..." );
 80049be:	481e      	ldr	r0, [pc, #120]	; (8004a38 <wiz_tls_connect+0x12c>)
 80049c0:	f019 fc6a 	bl	801e298 <iprintf>
#endif

    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 80049c4:	e015      	b.n	80049f2 <wiz_tls_connect+0xe6>
    {
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 80049cc:	d011      	beq.n	80049f2 <wiz_tls_connect+0xe6>
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f513 4fd1 	cmn.w	r3, #26752	; 0x6880
 80049d4:	d00d      	beq.n	80049f2 <wiz_tls_connect+0xe6>
        {
#if defined(MBEDTLS_ERROR_C)
            mbedtls_strerror( ret, (char *) tempBuf, DEBUG_BUFFER_SIZE );
 80049d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049da:	4912      	ldr	r1, [pc, #72]	; (8004a24 <wiz_tls_connect+0x118>)
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	f007 fceb 	bl	800c3b8 <mbedtls_strerror>
            printf( " failed\n\r  ! mbedtls_ssl_handshake returned %d: %s\n\r", ret, tempBuf );
 80049e2:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <wiz_tls_connect+0x118>)
 80049e4:	6979      	ldr	r1, [r7, #20]
 80049e6:	4815      	ldr	r0, [pc, #84]	; (8004a3c <wiz_tls_connect+0x130>)
 80049e8:	f019 fc56 	bl	801e298 <iprintf>
#endif
            return( -1 );
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	e013      	b.n	8004a1a <wiz_tls_connect+0x10e>
    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f014 fb74 	bl	80190e4 <mbedtls_ssl_handshake>
 80049fc:	6178      	str	r0, [r7, #20]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e0      	bne.n	80049c6 <wiz_tls_connect+0xba>
        }
    }

#if defined(MBEDTLS_DEBUG_C)
    printf( "ok\n\r    [ Ciphersuite is %s ]\n\r",
            mbedtls_ssl_get_ciphersuite( tlsContext->ssl ) );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
    printf( "ok\n\r    [ Ciphersuite is %s ]\n\r",
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f014 fb29 	bl	8019060 <mbedtls_ssl_get_ciphersuite>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4619      	mov	r1, r3
 8004a12:	480b      	ldr	r0, [pc, #44]	; (8004a40 <wiz_tls_connect+0x134>)
 8004a14:	f019 fc40 	bl	801e298 <iprintf>
#endif

    return( 0 );
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd90      	pop	{r4, r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000ab0 	.word	0x20000ab0
 8004a28:	0801f8c4 	.word	0x0801f8c4
 8004a2c:	0801f8e0 	.word	0x0801f8e0
 8004a30:	0801f8f0 	.word	0x0801f8f0
 8004a34:	0801f918 	.word	0x0801f918
 8004a38:	0801f92c 	.word	0x0801f92c
 8004a3c:	0801f954 	.word	0x0801f954
 8004a40:	0801f98c 	.word	0x0801f98c

08004a44 <wiz_tls_read>:

unsigned int wiz_tls_read(wiz_tls_context* tlsContext, unsigned char* readbuf, unsigned int len)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
	return mbedtls_ssl_read( tlsContext->ssl, readbuf, len );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f014 fb7f 	bl	801915c <mbedtls_ssl_read>
 8004a5e:	4603      	mov	r3, r0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <wiz_tls_write>:

unsigned int wiz_tls_write(wiz_tls_context* tlsContext, unsigned char* writebuf, unsigned int len)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
	return mbedtls_ssl_write( tlsContext->ssl, writebuf, len );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f014 fd1f 	bl	80194c0 <mbedtls_ssl_write>
 8004a82:	4603      	mov	r3, r0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <wiz_tls_close_notify>:
	}
}

/* ssl Close notify */
unsigned int wiz_tls_close_notify(wiz_tls_context* tlsContext)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	uint32_t rc;
	do rc = mbedtls_ssl_close_notify( tlsContext->ssl );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f014 fd5f 	bl	801955c <mbedtls_ssl_close_notify>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	60fb      	str	r3, [r7, #12]
	while( rc == MBEDTLS_ERR_SSL_WANT_WRITE );
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f513 4fd1 	cmn.w	r3, #26752	; 0x6880
 8004aa8:	d0f4      	beq.n	8004a94 <wiz_tls_close_notify+0x8>
	//SSLDeinit(tlsContext);
	return rc;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <SSLRandomCB>:
{
	srand(randSeed);
}

int SSLRandomCB( void *p_rng, unsigned char *output, size_t output_len )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
    int i;

	if(output_len <= 0)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <SSLRandomCB+0x16>
	{
         return (1);
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e023      	b.n	8004b12 <SSLRandomCB+0x5e>
	}
    for(i = 0;i < output_len;i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e015      	b.n	8004afc <SSLRandomCB+0x48>
    {
       *output++ = rand() % 0xff;
 8004ad0:	f019 fc9e 	bl	801e410 <rand>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <SSLRandomCB+0x68>)
 8004ad8:	fb83 1302 	smull	r1, r3, r3, r2
 8004adc:	4413      	add	r3, r2
 8004ade:	11d9      	asrs	r1, r3, #7
 8004ae0:	17d3      	asrs	r3, r2, #31
 8004ae2:	1ac9      	subs	r1, r1, r3
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	1a5b      	subs	r3, r3, r1
 8004aea:	1ad1      	subs	r1, r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	60ba      	str	r2, [r7, #8]
 8004af2:	b2ca      	uxtb	r2, r1
 8004af4:	701a      	strb	r2, [r3, #0]
    for(i = 0;i < output_len;i++)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	3301      	adds	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d8e5      	bhi.n	8004ad0 <SSLRandomCB+0x1c>
	}
    srand(rand());
 8004b04:	f019 fc84 	bl	801e410 <rand>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f019 fc52 	bl	801e3b4 <srand>
	return (0);
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	80808081 	.word	0x80808081

08004b20 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e004      	b.n	8004b3a <mbedtls_zeroize+0x1a>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	60fa      	str	r2, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	1e5a      	subs	r2, r3, #1
 8004b3e:	603a      	str	r2, [r7, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f5      	bne.n	8004b30 <mbedtls_zeroize+0x10>
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <aes_gen_tables>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 8004b5a:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004b62:	2301      	movs	r3, #1
 8004b64:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004b68:	e02b      	b.n	8004bc2 <aes_gen_tables+0x6e>
    {
        pow[i] = x;
 8004b6a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004b6e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004b72:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8004b76:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8004b7e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004b82:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004b86:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004b8a:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8004b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8004b92:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004b9c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004ba0:	2a00      	cmp	r2, #0
 8004ba2:	d001      	beq.n	8004ba8 <aes_gen_tables+0x54>
 8004ba4:	221b      	movs	r2, #27
 8004ba6:	e000      	b.n	8004baa <aes_gen_tables+0x56>
 8004ba8:	2200      	movs	r2, #0
 8004baa:	405a      	eors	r2, r3
 8004bac:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004bb0:	4053      	eors	r3, r2
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8004bb8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004bc2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004bc6:	2bff      	cmp	r3, #255	; 0xff
 8004bc8:	ddcf      	ble.n	8004b6a <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004bd6:	e01b      	b.n	8004c10 <aes_gen_tables+0xbc>
    {
        RCON[i] = (uint32_t) x;
 8004bd8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004bdc:	49cc      	ldr	r1, [pc, #816]	; (8004f10 <aes_gen_tables+0x3bc>)
 8004bde:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME( x ) & 0xFF;
 8004be6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004bf0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004bf4:	2a00      	cmp	r2, #0
 8004bf6:	d001      	beq.n	8004bfc <aes_gen_tables+0xa8>
 8004bf8:	221b      	movs	r2, #27
 8004bfa:	e000      	b.n	8004bfe <aes_gen_tables+0xaa>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4053      	eors	r3, r2
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8004c06:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004c10:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c14:	2b09      	cmp	r3, #9
 8004c16:	dddf      	ble.n	8004bd8 <aes_gen_tables+0x84>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8004c18:	4bbe      	ldr	r3, [pc, #760]	; (8004f14 <aes_gen_tables+0x3c0>)
 8004c1a:	2263      	movs	r2, #99	; 0x63
 8004c1c:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8004c1e:	4bbe      	ldr	r3, [pc, #760]	; (8004f18 <aes_gen_tables+0x3c4>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 8004c26:	2301      	movs	r3, #1
 8004c28:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004c2c:	e072      	b.n	8004d14 <aes_gen_tables+0x1c0>
    {
        x = pow[255 - log[i]];
 8004c2e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004c32:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004c36:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8004c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3e:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8004c42:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004c46:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c4e:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004c52:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004c56:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8004c5a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004c5e:	005a      	lsls	r2, r3, #1
 8004c60:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004c64:	11db      	asrs	r3, r3, #7
 8004c66:	4313      	orrs	r3, r2
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004c6e:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004c72:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004c76:	4053      	eors	r3, r2
 8004c78:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004c7c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004c80:	005a      	lsls	r2, r3, #1
 8004c82:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004c86:	11db      	asrs	r3, r3, #7
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004c90:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004c94:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004c98:	4053      	eors	r3, r2
 8004c9a:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004c9e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004ca2:	005a      	lsls	r2, r3, #1
 8004ca4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004ca8:	11db      	asrs	r3, r3, #7
 8004caa:	4313      	orrs	r3, r2
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004cb2:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004cb6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004cba:	4053      	eors	r3, r2
 8004cbc:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004cc0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004cc4:	005a      	lsls	r2, r3, #1
 8004cc6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004cca:	11db      	asrs	r3, r3, #7
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y ^ 0x63;
 8004cd4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004cd8:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 8004cdc:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004ce0:	4053      	eors	r3, r2
 8004ce2:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        FSb[i] = (unsigned char) x;
 8004ce6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004cea:	b2d9      	uxtb	r1, r3
 8004cec:	4a89      	ldr	r2, [pc, #548]	; (8004f14 <aes_gen_tables+0x3c0>)
 8004cee:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004cf2:	4413      	add	r3, r2
 8004cf4:	460a      	mov	r2, r1
 8004cf6:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8004cf8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004cfc:	b2d9      	uxtb	r1, r3
 8004cfe:	4a86      	ldr	r2, [pc, #536]	; (8004f18 <aes_gen_tables+0x3c4>)
 8004d00:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004d04:	4413      	add	r3, r2
 8004d06:	460a      	mov	r2, r1
 8004d08:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8004d0a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004d0e:	3301      	adds	r3, #1
 8004d10:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004d14:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004d18:	2bff      	cmp	r3, #255	; 0xff
 8004d1a:	dd88      	ble.n	8004c2e <aes_gen_tables+0xda>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004d22:	e136      	b.n	8004f92 <aes_gen_tables+0x43e>
    {
        x = FSb[i];
 8004d24:	4a7b      	ldr	r2, [pc, #492]	; (8004f14 <aes_gen_tables+0x3c0>)
 8004d26:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004d2a:	4413      	add	r3, r2
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
        y = XTIME( x ) & 0xFF;
 8004d32:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004d3c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004d40:	2a00      	cmp	r2, #0
 8004d42:	d001      	beq.n	8004d48 <aes_gen_tables+0x1f4>
 8004d44:	221b      	movs	r2, #27
 8004d46:	e000      	b.n	8004d4a <aes_gen_tables+0x1f6>
 8004d48:	2200      	movs	r2, #0
 8004d4a:	4053      	eors	r3, r2
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        z =  ( y ^ x ) & 0xFF;
 8004d52:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8004d56:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004d5a:	4053      	eors	r3, r2
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8004d62:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004d66:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 8004d68:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004d6c:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 8004d6e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004d72:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8004d74:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 8004d76:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8004d7a:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 8004d7c:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 8004d7e:	4967      	ldr	r1, [pc, #412]	; (8004f1c <aes_gen_tables+0x3c8>)
 8004d80:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 8004d88:	4a64      	ldr	r2, [pc, #400]	; (8004f1c <aes_gen_tables+0x3c8>)
 8004d8a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d92:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004d96:	4962      	ldr	r1, [pc, #392]	; (8004f20 <aes_gen_tables+0x3cc>)
 8004d98:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8004da0:	4a5f      	ldr	r2, [pc, #380]	; (8004f20 <aes_gen_tables+0x3cc>)
 8004da2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004daa:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004dae:	495d      	ldr	r1, [pc, #372]	; (8004f24 <aes_gen_tables+0x3d0>)
 8004db0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 8004db8:	4a5a      	ldr	r2, [pc, #360]	; (8004f24 <aes_gen_tables+0x3d0>)
 8004dba:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc2:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004dc6:	4958      	ldr	r1, [pc, #352]	; (8004f28 <aes_gen_tables+0x3d4>)
 8004dc8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        x = RSb[i];
 8004dd0:	4a51      	ldr	r2, [pc, #324]	; (8004f18 <aes_gen_tables+0x3c4>)
 8004dd2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004dd6:	4413      	add	r3, r2
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8004dde:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d020      	beq.n	8004e28 <aes_gen_tables+0x2d4>
 8004de6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004dea:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004df4:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004df8:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004dfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e00:	441a      	add	r2, r3
 8004e02:	4b4a      	ldr	r3, [pc, #296]	; (8004f2c <aes_gen_tables+0x3d8>)
 8004e04:	fb83 1302 	smull	r1, r3, r3, r2
 8004e08:	4413      	add	r3, r2
 8004e0a:	11d9      	asrs	r1, r3, #7
 8004e0c:	17d3      	asrs	r3, r2, #31
 8004e0e:	1ac9      	subs	r1, r1, r3
 8004e10:	460b      	mov	r3, r1
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	1a5b      	subs	r3, r3, r1
 8004e16:	1ad1      	subs	r1, r2, r3
 8004e18:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004e1c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004e20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e24:	4618      	mov	r0, r3
 8004e26:	e000      	b.n	8004e2a <aes_gen_tables+0x2d6>
 8004e28:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8004e2a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d020      	beq.n	8004e74 <aes_gen_tables+0x320>
 8004e32:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004e36:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e3c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004e40:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004e44:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004e48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e4c:	441a      	add	r2, r3
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <aes_gen_tables+0x3d8>)
 8004e50:	fb83 1302 	smull	r1, r3, r3, r2
 8004e54:	4413      	add	r3, r2
 8004e56:	11d9      	asrs	r1, r3, #7
 8004e58:	17d3      	asrs	r3, r2, #31
 8004e5a:	1ac9      	subs	r1, r1, r3
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	1a5b      	subs	r3, r3, r1
 8004e62:	1ad1      	subs	r1, r2, r3
 8004e64:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004e68:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004e6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	e000      	b.n	8004e76 <aes_gen_tables+0x322>
 8004e74:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8004e76:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8004e78:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d020      	beq.n	8004ec2 <aes_gen_tables+0x36e>
 8004e80:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004e84:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004e8e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004e92:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004e96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e9a:	441a      	add	r2, r3
 8004e9c:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <aes_gen_tables+0x3d8>)
 8004e9e:	fb83 1302 	smull	r1, r3, r3, r2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	11d9      	asrs	r1, r3, #7
 8004ea6:	17d3      	asrs	r3, r2, #31
 8004ea8:	1ac9      	subs	r1, r1, r3
 8004eaa:	460b      	mov	r3, r1
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	1a5b      	subs	r3, r3, r1
 8004eb0:	1ad1      	subs	r1, r2, r3
 8004eb2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004eb6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004eba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	e000      	b.n	8004ec4 <aes_gen_tables+0x370>
 8004ec2:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8004ec4:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8004ec6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d030      	beq.n	8004f30 <aes_gen_tables+0x3dc>
 8004ece:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004ed2:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004edc:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004ee0:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004ee4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004ee8:	441a      	add	r2, r3
 8004eea:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <aes_gen_tables+0x3d8>)
 8004eec:	fb83 1302 	smull	r1, r3, r3, r2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	11d9      	asrs	r1, r3, #7
 8004ef4:	17d3      	asrs	r3, r2, #31
 8004ef6:	1ac9      	subs	r1, r1, r3
 8004ef8:	460b      	mov	r3, r1
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	1a5b      	subs	r3, r3, r1
 8004efe:	1ad1      	subs	r1, r2, r3
 8004f00:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004f04:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004f08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	e010      	b.n	8004f32 <aes_gen_tables+0x3de>
 8004f10:	200030b0 	.word	0x200030b0
 8004f14:	20000eb0 	.word	0x20000eb0
 8004f18:	20001fb0 	.word	0x20001fb0
 8004f1c:	20000fb0 	.word	0x20000fb0
 8004f20:	200013b0 	.word	0x200013b0
 8004f24:	200017b0 	.word	0x200017b0
 8004f28:	20001bb0 	.word	0x20001bb0
 8004f2c:	80808081 	.word	0x80808081
 8004f30:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8004f32:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8004f36:	491d      	ldr	r1, [pc, #116]	; (8004fac <aes_gen_tables+0x458>)
 8004f38:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        RT1[i] = ROTL8( RT0[i] );
 8004f40:	4a1a      	ldr	r2, [pc, #104]	; (8004fac <aes_gen_tables+0x458>)
 8004f42:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4a:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004f4e:	4918      	ldr	r1, [pc, #96]	; (8004fb0 <aes_gen_tables+0x45c>)
 8004f50:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8004f58:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <aes_gen_tables+0x45c>)
 8004f5a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f62:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004f66:	4913      	ldr	r1, [pc, #76]	; (8004fb4 <aes_gen_tables+0x460>)
 8004f68:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8004f70:	4a10      	ldr	r2, [pc, #64]	; (8004fb4 <aes_gen_tables+0x460>)
 8004f72:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7a:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004f7e:	490e      	ldr	r1, [pc, #56]	; (8004fb8 <aes_gen_tables+0x464>)
 8004f80:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 8004f88:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004f92:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004f96:	2bff      	cmp	r3, #255	; 0xff
 8004f98:	f77f aec4 	ble.w	8004d24 <aes_gen_tables+0x1d0>
    }
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	f607 0714 	addw	r7, r7, #2068	; 0x814
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	200020b0 	.word	0x200020b0
 8004fb0:	200024b0 	.word	0x200024b0
 8004fb4:	200028b0 	.word	0x200028b0
 8004fb8:	20002cb0 	.word	0x20002cb0

08004fbc <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8004fc4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004fc8:	2100      	movs	r1, #0
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f019 f866 	bl	801e09c <memset>
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8004fe6:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fd98 	bl	8004b20 <mbedtls_zeroize>
 8004ff0:	e000      	b.n	8004ff4 <mbedtls_aes_free+0x1c>
        return;
 8004ff2:	bf00      	nop
}
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8005008:	4b97      	ldr	r3, [pc, #604]	; (8005268 <mbedtls_aes_setkey_enc+0x26c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <mbedtls_aes_setkey_enc+0x1e>
    {
        aes_gen_tables();
 8005010:	f7ff fda0 	bl	8004b54 <aes_gen_tables>
        aes_init_done = 1;
 8005014:	4b94      	ldr	r3, [pc, #592]	; (8005268 <mbedtls_aes_setkey_enc+0x26c>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]

    }
#endif

    switch( keybits )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005020:	d012      	beq.n	8005048 <mbedtls_aes_setkey_enc+0x4c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005028:	d812      	bhi.n	8005050 <mbedtls_aes_setkey_enc+0x54>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b80      	cmp	r3, #128	; 0x80
 800502e:	d003      	beq.n	8005038 <mbedtls_aes_setkey_enc+0x3c>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2bc0      	cmp	r3, #192	; 0xc0
 8005034:	d004      	beq.n	8005040 <mbedtls_aes_setkey_enc+0x44>
 8005036:	e00b      	b.n	8005050 <mbedtls_aes_setkey_enc+0x54>
    {
        case 128: ctx->nr = 10; break;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	220a      	movs	r2, #10
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e00a      	b.n	8005056 <mbedtls_aes_setkey_enc+0x5a>
        case 192: ctx->nr = 12; break;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	220c      	movs	r2, #12
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e006      	b.n	8005056 <mbedtls_aes_setkey_enc+0x5a>
        case 256: ctx->nr = 14; break;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	220e      	movs	r2, #14
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e002      	b.n	8005056 <mbedtls_aes_setkey_enc+0x5a>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8005050:	f06f 031f 	mvn.w	r3, #31
 8005054:	e1aa      	b.n	80053ac <mbedtls_aes_setkey_enc+0x3b0>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3308      	adds	r3, #8
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	e027      	b.n	80050b8 <mbedtls_aes_setkey_enc+0xbc>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4413      	add	r3, r2
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	4619      	mov	r1, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	3301      	adds	r3, #1
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	ea41 0203 	orr.w	r2, r1, r3
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	3302      	adds	r3, #2
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	440b      	add	r3, r1
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	ea42 0103 	orr.w	r1, r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	3303      	adds	r3, #3
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	061a      	lsls	r2, r3, #24
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	6938      	ldr	r0, [r7, #16]
 80050ac:	4403      	add	r3, r0
 80050ae:	430a      	orrs	r2, r1
 80050b0:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	3301      	adds	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d3d2      	bcc.n	8005068 <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b0e      	cmp	r3, #14
 80050c8:	f000 80ca 	beq.w	8005260 <mbedtls_aes_setkey_enc+0x264>
 80050cc:	2b0e      	cmp	r3, #14
 80050ce:	f300 816c 	bgt.w	80053aa <mbedtls_aes_setkey_enc+0x3ae>
 80050d2:	2b0a      	cmp	r3, #10
 80050d4:	d002      	beq.n	80050dc <mbedtls_aes_setkey_enc+0xe0>
 80050d6:	2b0c      	cmp	r3, #12
 80050d8:	d057      	beq.n	800518a <mbedtls_aes_setkey_enc+0x18e>
 80050da:	e166      	b.n	80053aa <mbedtls_aes_setkey_enc+0x3ae>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e04f      	b.n	8005182 <mbedtls_aes_setkey_enc+0x186>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4961      	ldr	r1, [pc, #388]	; (800526c <mbedtls_aes_setkey_enc+0x270>)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050ee:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	320c      	adds	r2, #12
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	0a12      	lsrs	r2, r2, #8
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	495d      	ldr	r1, [pc, #372]	; (8005270 <mbedtls_aes_setkey_enc+0x274>)
 80050fc:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 80050fe:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	330c      	adds	r3, #12
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	0c1b      	lsrs	r3, r3, #16
 8005108:	b2db      	uxtb	r3, r3
 800510a:	4959      	ldr	r1, [pc, #356]	; (8005270 <mbedtls_aes_setkey_enc+0x274>)
 800510c:	5ccb      	ldrb	r3, [r1, r3]
 800510e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8005110:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	330c      	adds	r3, #12
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	0e1b      	lsrs	r3, r3, #24
 800511a:	4955      	ldr	r1, [pc, #340]	; (8005270 <mbedtls_aes_setkey_enc+0x274>)
 800511c:	5ccb      	ldrb	r3, [r1, r3]
 800511e:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8005120:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	330c      	adds	r3, #12
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	4a50      	ldr	r2, [pc, #320]	; (8005270 <mbedtls_aes_setkey_enc+0x274>)
 800512e:	5cd3      	ldrb	r3, [r2, r3]
 8005130:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8005136:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8005138:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	3304      	adds	r3, #4
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	3310      	adds	r3, #16
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3314      	adds	r3, #20
 800514a:	404a      	eors	r2, r1
 800514c:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3308      	adds	r3, #8
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	3314      	adds	r3, #20
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3318      	adds	r3, #24
 800515e:	404a      	eors	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	330c      	adds	r3, #12
 8005166:	6819      	ldr	r1, [r3, #0]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3318      	adds	r3, #24
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	331c      	adds	r3, #28
 8005172:	404a      	eors	r2, r1
 8005174:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	3301      	adds	r3, #1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3310      	adds	r3, #16
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b09      	cmp	r3, #9
 8005186:	d9ac      	bls.n	80050e2 <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 8005188:	e10f      	b.n	80053aa <mbedtls_aes_setkey_enc+0x3ae>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e063      	b.n	8005258 <mbedtls_aes_setkey_enc+0x25c>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4935      	ldr	r1, [pc, #212]	; (800526c <mbedtls_aes_setkey_enc+0x270>)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800519c:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	3214      	adds	r2, #20
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	0a12      	lsrs	r2, r2, #8
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	4931      	ldr	r1, [pc, #196]	; (8005270 <mbedtls_aes_setkey_enc+0x274>)
 80051aa:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 80051ac:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3314      	adds	r3, #20
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	0c1b      	lsrs	r3, r3, #16
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	492d      	ldr	r1, [pc, #180]	; (8005270 <mbedtls_aes_setkey_enc+0x274>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80051be:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	3314      	adds	r3, #20
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	0e1b      	lsrs	r3, r3, #24
 80051c8:	4929      	ldr	r1, [pc, #164]	; (8005270 <mbedtls_aes_setkey_enc+0x274>)
 80051ca:	5ccb      	ldrb	r3, [r1, r3]
 80051cc:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80051ce:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	3314      	adds	r3, #20
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	4a25      	ldr	r2, [pc, #148]	; (8005270 <mbedtls_aes_setkey_enc+0x274>)
 80051dc:	5cd3      	ldrb	r3, [r2, r3]
 80051de:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80051e4:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 80051e6:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	3304      	adds	r3, #4
 80051ec:	6819      	ldr	r1, [r3, #0]
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	3318      	adds	r3, #24
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	331c      	adds	r3, #28
 80051f8:	404a      	eors	r2, r1
 80051fa:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	3308      	adds	r3, #8
 8005200:	6819      	ldr	r1, [r3, #0]
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	331c      	adds	r3, #28
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	3320      	adds	r3, #32
 800520c:	404a      	eors	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	330c      	adds	r3, #12
 8005214:	6819      	ldr	r1, [r3, #0]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	3320      	adds	r3, #32
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	3324      	adds	r3, #36	; 0x24
 8005220:	404a      	eors	r2, r1
 8005222:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3310      	adds	r3, #16
 8005228:	6819      	ldr	r1, [r3, #0]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3324      	adds	r3, #36	; 0x24
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	3328      	adds	r3, #40	; 0x28
 8005234:	404a      	eors	r2, r1
 8005236:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	3314      	adds	r3, #20
 800523c:	6819      	ldr	r1, [r3, #0]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3328      	adds	r3, #40	; 0x28
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	332c      	adds	r3, #44	; 0x2c
 8005248:	404a      	eors	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3301      	adds	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3318      	adds	r3, #24
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b07      	cmp	r3, #7
 800525c:	d998      	bls.n	8005190 <mbedtls_aes_setkey_enc+0x194>
            }
            break;
 800525e:	e0a4      	b.n	80053aa <mbedtls_aes_setkey_enc+0x3ae>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e09c      	b.n	80053a0 <mbedtls_aes_setkey_enc+0x3a4>
 8005266:	bf00      	nop
 8005268:	200030d8 	.word	0x200030d8
 800526c:	200030b0 	.word	0x200030b0
 8005270:	20000eb0 	.word	0x20000eb0
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	494e      	ldr	r1, [pc, #312]	; (80053b4 <mbedtls_aes_setkey_enc+0x3b8>)
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005280:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	321c      	adds	r2, #28
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	0a12      	lsrs	r2, r2, #8
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	494a      	ldr	r1, [pc, #296]	; (80053b8 <mbedtls_aes_setkey_enc+0x3bc>)
 800528e:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 8005290:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	331c      	adds	r3, #28
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	0c1b      	lsrs	r3, r3, #16
 800529a:	b2db      	uxtb	r3, r3
 800529c:	4946      	ldr	r1, [pc, #280]	; (80053b8 <mbedtls_aes_setkey_enc+0x3bc>)
 800529e:	5ccb      	ldrb	r3, [r1, r3]
 80052a0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80052a2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	331c      	adds	r3, #28
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	0e1b      	lsrs	r3, r3, #24
 80052ac:	4942      	ldr	r1, [pc, #264]	; (80053b8 <mbedtls_aes_setkey_enc+0x3bc>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80052b2:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	331c      	adds	r3, #28
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	4a3e      	ldr	r2, [pc, #248]	; (80053b8 <mbedtls_aes_setkey_enc+0x3bc>)
 80052c0:	5cd3      	ldrb	r3, [r2, r3]
 80052c2:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80052c8:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 80052ca:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	3304      	adds	r3, #4
 80052d0:	6819      	ldr	r1, [r3, #0]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3320      	adds	r3, #32
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	3324      	adds	r3, #36	; 0x24
 80052dc:	404a      	eors	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3308      	adds	r3, #8
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3324      	adds	r3, #36	; 0x24
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	3328      	adds	r3, #40	; 0x28
 80052f0:	404a      	eors	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	330c      	adds	r3, #12
 80052f8:	6819      	ldr	r1, [r3, #0]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3328      	adds	r3, #40	; 0x28
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	332c      	adds	r3, #44	; 0x2c
 8005304:	404a      	eors	r2, r1
 8005306:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3310      	adds	r3, #16
 800530c:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	322c      	adds	r2, #44	; 0x2c
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	4928      	ldr	r1, [pc, #160]	; (80053b8 <mbedtls_aes_setkey_enc+0x3bc>)
 8005318:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 800531a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	332c      	adds	r3, #44	; 0x2c
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	b2db      	uxtb	r3, r3
 8005326:	4924      	ldr	r1, [pc, #144]	; (80053b8 <mbedtls_aes_setkey_enc+0x3bc>)
 8005328:	5ccb      	ldrb	r3, [r1, r3]
 800532a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800532c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	332c      	adds	r3, #44	; 0x2c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	b2db      	uxtb	r3, r3
 8005338:	491f      	ldr	r1, [pc, #124]	; (80053b8 <mbedtls_aes_setkey_enc+0x3bc>)
 800533a:	5ccb      	ldrb	r3, [r1, r3]
 800533c:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800533e:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	332c      	adds	r3, #44	; 0x2c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0e1b      	lsrs	r3, r3, #24
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <mbedtls_aes_setkey_enc+0x3bc>)
 800534c:	5cd3      	ldrb	r3, [r2, r3]
 800534e:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	3330      	adds	r3, #48	; 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8005354:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8005356:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	3314      	adds	r3, #20
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	3330      	adds	r3, #48	; 0x30
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	3334      	adds	r3, #52	; 0x34
 8005368:	404a      	eors	r2, r1
 800536a:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	3318      	adds	r3, #24
 8005370:	6819      	ldr	r1, [r3, #0]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3334      	adds	r3, #52	; 0x34
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3338      	adds	r3, #56	; 0x38
 800537c:	404a      	eors	r2, r1
 800537e:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	331c      	adds	r3, #28
 8005384:	6819      	ldr	r1, [r3, #0]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	3338      	adds	r3, #56	; 0x38
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	333c      	adds	r3, #60	; 0x3c
 8005390:	404a      	eors	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3301      	adds	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3320      	adds	r3, #32
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	f67f af66 	bls.w	8005274 <mbedtls_aes_setkey_enc+0x278>
            }
            break;
 80053a8:	bf00      	nop
    }

    return( 0 );
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	200030b0 	.word	0x200030b0
 80053b8:	20000eb0 	.word	0x20000eb0

080053bc <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b0d0      	sub	sp, #320	; 0x140
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80053c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80053ca:	6018      	str	r0, [r3, #0]
 80053cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80053d0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80053d4:	6019      	str	r1, [r3, #0]
 80053d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80053da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80053de:	601a      	str	r2, [r3, #0]
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 80053e0:	f107 0314 	add.w	r3, r7, #20
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fde9 	bl	8004fbc <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80053ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80053ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80053fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80053fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005408:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800540a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800540e:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8005412:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005416:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800541a:	f107 0014 	add.w	r0, r7, #20
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	f7ff fdeb 	bl	8004ffc <mbedtls_aes_setkey_enc>
 8005426:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800542a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 80dd 	bne.w	80055ee <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 8005434:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005438:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005442:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 800544a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800544e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	4413      	add	r3, r2
 8005462:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    *RK++ = *SK++;
 8005466:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800546a:	1d13      	adds	r3, r2, #4
 800546c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005470:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005474:	1d19      	adds	r1, r3, #4
 8005476:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800547e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005482:	1d13      	adds	r3, r2, #4
 8005484:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005488:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800548c:	1d19      	adds	r1, r3, #4
 800548e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005496:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800549a:	1d13      	adds	r3, r2, #4
 800549c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80054a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054a4:	1d19      	adds	r1, r3, #4
 80054a6:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80054ae:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80054b2:	1d13      	adds	r3, r2, #4
 80054b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80054b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054bc:	1d19      	adds	r1, r3, #4
 80054be:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80054c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80054ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80054d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054dc:	3b20      	subs	r3, #32
 80054de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80054e2:	e04f      	b.n	8005584 <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80054ea:	e03d      	b.n	8005568 <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 80054ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	4a44      	ldr	r2, [pc, #272]	; (8005608 <mbedtls_aes_setkey_dec+0x24c>)
 80054f6:	5cd3      	ldrb	r3, [r2, r3]
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b44      	ldr	r3, [pc, #272]	; (800560c <mbedtls_aes_setkey_dec+0x250>)
 80054fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 8005500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	b2db      	uxtb	r3, r3
 800550a:	493f      	ldr	r1, [pc, #252]	; (8005608 <mbedtls_aes_setkey_dec+0x24c>)
 800550c:	5ccb      	ldrb	r3, [r1, r3]
 800550e:	4619      	mov	r1, r3
 8005510:	4b3f      	ldr	r3, [pc, #252]	; (8005610 <mbedtls_aes_setkey_dec+0x254>)
 8005512:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8005516:	405a      	eors	r2, r3
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8005518:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	0c1b      	lsrs	r3, r3, #16
 8005520:	b2db      	uxtb	r3, r3
 8005522:	4939      	ldr	r1, [pc, #228]	; (8005608 <mbedtls_aes_setkey_dec+0x24c>)
 8005524:	5ccb      	ldrb	r3, [r1, r3]
 8005526:	4619      	mov	r1, r3
 8005528:	4b3a      	ldr	r3, [pc, #232]	; (8005614 <mbedtls_aes_setkey_dec+0x258>)
 800552a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800552e:	ea82 0103 	eor.w	r1, r2, r3
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 8005532:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	0e1b      	lsrs	r3, r3, #24
 800553a:	4a33      	ldr	r2, [pc, #204]	; (8005608 <mbedtls_aes_setkey_dec+0x24c>)
 800553c:	5cd3      	ldrb	r3, [r2, r3]
 800553e:	461a      	mov	r2, r3
 8005540:	4b35      	ldr	r3, [pc, #212]	; (8005618 <mbedtls_aes_setkey_dec+0x25c>)
 8005542:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8005546:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800554a:	1d18      	adds	r0, r3, #4
 800554c:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8005550:	404a      	eors	r2, r1
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8005552:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 8005554:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005558:	3301      	adds	r3, #1
 800555a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800555e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005562:	3304      	adds	r3, #4
 8005564:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005568:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800556c:	2b03      	cmp	r3, #3
 800556e:	ddbd      	ble.n	80054ec <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8005570:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005574:	3b01      	subs	r3, #1
 8005576:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800557a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800557e:	3b20      	subs	r3, #32
 8005580:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005584:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005588:	2b00      	cmp	r3, #0
 800558a:	dcab      	bgt.n	80054e4 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 800558c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005590:	1d13      	adds	r3, r2, #4
 8005592:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005596:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800559a:	1d19      	adds	r1, r3, #4
 800559c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80055a4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80055a8:	1d13      	adds	r3, r2, #4
 80055aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80055ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055b2:	1d19      	adds	r1, r3, #4
 80055b4:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80055bc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80055c0:	1d13      	adds	r3, r2, #4
 80055c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80055c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055ca:	1d19      	adds	r1, r3, #4
 80055cc:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80055d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80055d8:	1d13      	adds	r3, r2, #4
 80055da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80055de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055e2:	1d19      	adds	r1, r3, #4
 80055e4:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80055e8:	6812      	ldr	r2, [r2, #0]
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e000      	b.n	80055f0 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 80055ee:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 80055f0:	f107 0314 	add.w	r3, r7, #20
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff fcef 	bl	8004fd8 <mbedtls_aes_free>

    return( ret );
 80055fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 80055fe:	4618      	mov	r0, r3
 8005600:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000eb0 	.word	0x20000eb0
 800560c:	200020b0 	.word	0x200020b0
 8005610:	200024b0 	.word	0x200024b0
 8005614:	200028b0 	.word	0x200028b0
 8005618:	20002cb0 	.word	0x20002cb0

0800561c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800561c:	b480      	push	{r7}
 800561e:	b08f      	sub	sp, #60	; 0x3c
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	3301      	adds	r3, #1
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	431a      	orrs	r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	3302      	adds	r3, #2
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	431a      	orrs	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	3303      	adds	r3, #3
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	061b      	lsls	r3, r3, #24
 8005650:	4313      	orrs	r3, r2
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	633a      	str	r2, [r7, #48]	; 0x30
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800565e:	4053      	eors	r3, r2
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	3304      	adds	r3, #4
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	3305      	adds	r3, #5
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	431a      	orrs	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	3306      	adds	r3, #6
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	041b      	lsls	r3, r3, #16
 800567c:	431a      	orrs	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3307      	adds	r3, #7
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	061b      	lsls	r3, r3, #24
 8005686:	4313      	orrs	r3, r2
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	1d1a      	adds	r2, r3, #4
 800568e:	633a      	str	r2, [r7, #48]	; 0x30
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005694:	4053      	eors	r3, r2
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	3308      	adds	r3, #8
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	3309      	adds	r3, #9
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	330a      	adds	r3, #10
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	431a      	orrs	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	330b      	adds	r3, #11
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	061b      	lsls	r3, r3, #24
 80056bc:	4313      	orrs	r3, r2
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	633a      	str	r2, [r7, #48]	; 0x30
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	4053      	eors	r3, r2
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	330c      	adds	r3, #12
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	330d      	adds	r3, #13
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	431a      	orrs	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	330e      	adds	r3, #14
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	041b      	lsls	r3, r3, #16
 80056e8:	431a      	orrs	r2, r3
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	330f      	adds	r3, #15
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	061b      	lsls	r3, r3, #24
 80056f2:	4313      	orrs	r3, r2
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	1d1a      	adds	r2, r3, #4
 80056fa:	633a      	str	r2, [r7, #48]	; 0x30
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	4053      	eors	r3, r2
 8005702:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	105b      	asrs	r3, r3, #1
 800570a:	3b01      	subs	r3, #1
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
 800570e:	e0fa      	b.n	8005906 <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	633a      	str	r2, [r7, #48]	; 0x30
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	b2db      	uxtb	r3, r3
 800571c:	49ab      	ldr	r1, [pc, #684]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 800571e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005722:	405a      	eors	r2, r3
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b2db      	uxtb	r3, r3
 800572a:	49a9      	ldr	r1, [pc, #676]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 800572c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005730:	405a      	eors	r2, r3
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	b2db      	uxtb	r3, r3
 8005738:	49a6      	ldr	r1, [pc, #664]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 800573a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800573e:	405a      	eors	r2, r3
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	0e1b      	lsrs	r3, r3, #24
 8005744:	49a4      	ldr	r1, [pc, #656]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005746:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800574a:	4053      	eors	r3, r2
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	1d1a      	adds	r2, r3, #4
 8005752:	633a      	str	r2, [r7, #48]	; 0x30
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	b2db      	uxtb	r3, r3
 800575a:	499c      	ldr	r1, [pc, #624]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 800575c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005760:	405a      	eors	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	0a1b      	lsrs	r3, r3, #8
 8005766:	b2db      	uxtb	r3, r3
 8005768:	4999      	ldr	r1, [pc, #612]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 800576a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800576e:	405a      	eors	r2, r3
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	b2db      	uxtb	r3, r3
 8005776:	4997      	ldr	r1, [pc, #604]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005778:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800577c:	405a      	eors	r2, r3
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	0e1b      	lsrs	r3, r3, #24
 8005782:	4995      	ldr	r1, [pc, #596]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005784:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005788:	4053      	eors	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	1d1a      	adds	r2, r3, #4
 8005790:	633a      	str	r2, [r7, #48]	; 0x30
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	b2db      	uxtb	r3, r3
 8005798:	498c      	ldr	r1, [pc, #560]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 800579a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800579e:	405a      	eors	r2, r3
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	498a      	ldr	r1, [pc, #552]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 80057a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057ac:	405a      	eors	r2, r3
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	4987      	ldr	r1, [pc, #540]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 80057b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057ba:	405a      	eors	r2, r3
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	0e1b      	lsrs	r3, r3, #24
 80057c0:	4985      	ldr	r1, [pc, #532]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 80057c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057c6:	4053      	eors	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	1d1a      	adds	r2, r3, #4
 80057ce:	633a      	str	r2, [r7, #48]	; 0x30
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	497d      	ldr	r1, [pc, #500]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 80057d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057dc:	405a      	eors	r2, r3
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	497a      	ldr	r1, [pc, #488]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 80057e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057ea:	405a      	eors	r2, r3
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	0c1b      	lsrs	r3, r3, #16
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	4978      	ldr	r1, [pc, #480]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 80057f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057f8:	405a      	eors	r2, r3
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	0e1b      	lsrs	r3, r3, #24
 80057fe:	4976      	ldr	r1, [pc, #472]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005800:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005804:	4053      	eors	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	1d1a      	adds	r2, r3, #4
 800580c:	633a      	str	r2, [r7, #48]	; 0x30
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	496d      	ldr	r1, [pc, #436]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800581a:	405a      	eors	r2, r3
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	b2db      	uxtb	r3, r3
 8005822:	496b      	ldr	r1, [pc, #428]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005824:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005828:	405a      	eors	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	b2db      	uxtb	r3, r3
 8005830:	4968      	ldr	r1, [pc, #416]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005832:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005836:	405a      	eors	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	0e1b      	lsrs	r3, r3, #24
 800583c:	4966      	ldr	r1, [pc, #408]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 800583e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005842:	4053      	eors	r3, r2
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	1d1a      	adds	r2, r3, #4
 800584a:	633a      	str	r2, [r7, #48]	; 0x30
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	495e      	ldr	r1, [pc, #376]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005854:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005858:	405a      	eors	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	b2db      	uxtb	r3, r3
 8005860:	495b      	ldr	r1, [pc, #364]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005862:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005866:	405a      	eors	r2, r3
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	0c1b      	lsrs	r3, r3, #16
 800586c:	b2db      	uxtb	r3, r3
 800586e:	4959      	ldr	r1, [pc, #356]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005874:	405a      	eors	r2, r3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	0e1b      	lsrs	r3, r3, #24
 800587a:	4957      	ldr	r1, [pc, #348]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 800587c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005880:	4053      	eors	r3, r2
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	1d1a      	adds	r2, r3, #4
 8005888:	633a      	str	r2, [r7, #48]	; 0x30
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	494e      	ldr	r1, [pc, #312]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005892:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005896:	405a      	eors	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	b2db      	uxtb	r3, r3
 800589e:	494c      	ldr	r1, [pc, #304]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 80058a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058a4:	405a      	eors	r2, r3
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	4949      	ldr	r1, [pc, #292]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 80058ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058b2:	405a      	eors	r2, r3
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	0e1b      	lsrs	r3, r3, #24
 80058b8:	4947      	ldr	r1, [pc, #284]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 80058ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058be:	4053      	eors	r3, r2
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	1d1a      	adds	r2, r3, #4
 80058c6:	633a      	str	r2, [r7, #48]	; 0x30
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	493f      	ldr	r1, [pc, #252]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 80058d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058d4:	405a      	eors	r2, r3
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	0a1b      	lsrs	r3, r3, #8
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	493c      	ldr	r1, [pc, #240]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 80058de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058e2:	405a      	eors	r2, r3
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	0c1b      	lsrs	r3, r3, #16
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	493a      	ldr	r1, [pc, #232]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 80058ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058f0:	405a      	eors	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	0e1b      	lsrs	r3, r3, #24
 80058f6:	4938      	ldr	r1, [pc, #224]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 80058f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058fc:	4053      	eors	r3, r2
 80058fe:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	3b01      	subs	r3, #1
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005908:	2b00      	cmp	r3, #0
 800590a:	f73f af01 	bgt.w	8005710 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	1d1a      	adds	r2, r3, #4
 8005912:	633a      	str	r2, [r7, #48]	; 0x30
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	b2db      	uxtb	r3, r3
 800591a:	492c      	ldr	r1, [pc, #176]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 800591c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005920:	405a      	eors	r2, r3
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	b2db      	uxtb	r3, r3
 8005928:	4929      	ldr	r1, [pc, #164]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 800592a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800592e:	405a      	eors	r2, r3
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	0c1b      	lsrs	r3, r3, #16
 8005934:	b2db      	uxtb	r3, r3
 8005936:	4927      	ldr	r1, [pc, #156]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005938:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800593c:	405a      	eors	r2, r3
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	0e1b      	lsrs	r3, r3, #24
 8005942:	4925      	ldr	r1, [pc, #148]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005944:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005948:	4053      	eors	r3, r2
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	1d1a      	adds	r2, r3, #4
 8005950:	633a      	str	r2, [r7, #48]	; 0x30
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	b2db      	uxtb	r3, r3
 8005958:	491c      	ldr	r1, [pc, #112]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 800595a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800595e:	405a      	eors	r2, r3
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	b2db      	uxtb	r3, r3
 8005966:	491a      	ldr	r1, [pc, #104]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005968:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800596c:	405a      	eors	r2, r3
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	b2db      	uxtb	r3, r3
 8005974:	4917      	ldr	r1, [pc, #92]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005976:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800597a:	405a      	eors	r2, r3
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597e:	0e1b      	lsrs	r3, r3, #24
 8005980:	4915      	ldr	r1, [pc, #84]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005982:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005986:	4053      	eors	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	1d1a      	adds	r2, r3, #4
 800598e:	633a      	str	r2, [r7, #48]	; 0x30
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	b2db      	uxtb	r3, r3
 8005996:	490d      	ldr	r1, [pc, #52]	; (80059cc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800599c:	405a      	eors	r2, r3
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	0a1b      	lsrs	r3, r3, #8
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	490a      	ldr	r1, [pc, #40]	; (80059d0 <mbedtls_internal_aes_encrypt+0x3b4>)
 80059a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80059aa:	405a      	eors	r2, r3
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	0c1b      	lsrs	r3, r3, #16
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	4908      	ldr	r1, [pc, #32]	; (80059d4 <mbedtls_internal_aes_encrypt+0x3b8>)
 80059b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80059b8:	405a      	eors	r2, r3
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	0e1b      	lsrs	r3, r3, #24
 80059be:	4906      	ldr	r1, [pc, #24]	; (80059d8 <mbedtls_internal_aes_encrypt+0x3bc>)
 80059c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80059c4:	4053      	eors	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	e007      	b.n	80059dc <mbedtls_internal_aes_encrypt+0x3c0>
 80059cc:	20000fb0 	.word	0x20000fb0
 80059d0:	200013b0 	.word	0x200013b0
 80059d4:	200017b0 	.word	0x200017b0
 80059d8:	20001bb0 	.word	0x20001bb0
 80059dc:	1d1a      	adds	r2, r3, #4
 80059de:	633a      	str	r2, [r7, #48]	; 0x30
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	4979      	ldr	r1, [pc, #484]	; (8005bcc <mbedtls_internal_aes_encrypt+0x5b0>)
 80059e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80059ec:	405a      	eors	r2, r3
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	4976      	ldr	r1, [pc, #472]	; (8005bd0 <mbedtls_internal_aes_encrypt+0x5b4>)
 80059f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80059fa:	405a      	eors	r2, r3
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	0c1b      	lsrs	r3, r3, #16
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	4974      	ldr	r1, [pc, #464]	; (8005bd4 <mbedtls_internal_aes_encrypt+0x5b8>)
 8005a04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a08:	405a      	eors	r2, r3
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	0e1b      	lsrs	r3, r3, #24
 8005a0e:	4972      	ldr	r1, [pc, #456]	; (8005bd8 <mbedtls_internal_aes_encrypt+0x5bc>)
 8005a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a14:	4053      	eors	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	1d1a      	adds	r2, r3, #4
 8005a1c:	633a      	str	r2, [r7, #48]	; 0x30
 8005a1e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	496d      	ldr	r1, [pc, #436]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005a26:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8005a28:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	0a1b      	lsrs	r3, r3, #8
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	496a      	ldr	r1, [pc, #424]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005a32:	5ccb      	ldrb	r3, [r1, r3]
 8005a34:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8005a36:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	0c1b      	lsrs	r3, r3, #16
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	4967      	ldr	r1, [pc, #412]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005a40:	5ccb      	ldrb	r3, [r1, r3]
 8005a42:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005a44:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	0e1b      	lsrs	r3, r3, #24
 8005a4a:	4964      	ldr	r1, [pc, #400]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005a4c:	5ccb      	ldrb	r3, [r1, r3]
 8005a4e:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8005a50:	4053      	eors	r3, r2
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	1d1a      	adds	r2, r3, #4
 8005a58:	633a      	str	r2, [r7, #48]	; 0x30
 8005a5a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	495e      	ldr	r1, [pc, #376]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005a62:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8005a64:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	495b      	ldr	r1, [pc, #364]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005a6e:	5ccb      	ldrb	r3, [r1, r3]
 8005a70:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8005a72:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	0c1b      	lsrs	r3, r3, #16
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	4958      	ldr	r1, [pc, #352]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005a7c:	5ccb      	ldrb	r3, [r1, r3]
 8005a7e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005a80:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	0e1b      	lsrs	r3, r3, #24
 8005a86:	4955      	ldr	r1, [pc, #340]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005a88:	5ccb      	ldrb	r3, [r1, r3]
 8005a8a:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8005a8c:	4053      	eors	r3, r2
 8005a8e:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	633a      	str	r2, [r7, #48]	; 0x30
 8005a96:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	494f      	ldr	r1, [pc, #316]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005a9e:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8005aa0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	0a1b      	lsrs	r3, r3, #8
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	494c      	ldr	r1, [pc, #304]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8005aae:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4949      	ldr	r1, [pc, #292]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005ab8:	5ccb      	ldrb	r3, [r1, r3]
 8005aba:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8005abc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	0e1b      	lsrs	r3, r3, #24
 8005ac2:	4946      	ldr	r1, [pc, #280]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005ac4:	5ccb      	ldrb	r3, [r1, r3]
 8005ac6:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8005ac8:	4053      	eors	r3, r2
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	633a      	str	r2, [r7, #48]	; 0x30
 8005ad2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	4940      	ldr	r1, [pc, #256]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005ada:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8005adc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	493d      	ldr	r1, [pc, #244]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8005aea:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	0c1b      	lsrs	r3, r3, #16
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	493a      	ldr	r1, [pc, #232]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005af4:	5ccb      	ldrb	r3, [r1, r3]
 8005af6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8005af8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	0e1b      	lsrs	r3, r3, #24
 8005afe:	4937      	ldr	r1, [pc, #220]	; (8005bdc <mbedtls_internal_aes_encrypt+0x5c0>)
 8005b00:	5ccb      	ldrb	r3, [r1, r3]
 8005b02:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8005b04:	4053      	eors	r3, r2
 8005b06:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8005b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	0a1a      	lsrs	r2, r3, #8
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3301      	adds	r3, #1
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	0c1a      	lsrs	r2, r3, #16
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3302      	adds	r3, #2
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	0e1a      	lsrs	r2, r3, #24
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3303      	adds	r3, #3
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
 8005b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	0a1a      	lsrs	r2, r3, #8
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3305      	adds	r3, #5
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	0c1a      	lsrs	r2, r3, #16
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3306      	adds	r3, #6
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	0e1a      	lsrs	r2, r3, #24
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3307      	adds	r3, #7
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3308      	adds	r3, #8
 8005b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	0a1a      	lsrs	r2, r3, #8
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3309      	adds	r3, #9
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	0c1a      	lsrs	r2, r3, #16
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	330a      	adds	r3, #10
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	0e1a      	lsrs	r2, r3, #24
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	330b      	adds	r3, #11
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	330c      	adds	r3, #12
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	0a1a      	lsrs	r2, r3, #8
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	330d      	adds	r3, #13
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	0c1a      	lsrs	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	330e      	adds	r3, #14
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	0e1a      	lsrs	r2, r3, #24
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	330f      	adds	r3, #15
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	373c      	adds	r7, #60	; 0x3c
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000fb0 	.word	0x20000fb0
 8005bd0:	200013b0 	.word	0x200013b0
 8005bd4:	200017b0 	.word	0x200017b0
 8005bd8:	20001bb0 	.word	0x20001bb0
 8005bdc:	20000eb0 	.word	0x20000eb0

08005be0 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b08f      	sub	sp, #60	; 0x3c
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	431a      	orrs	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	3302      	adds	r3, #2
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	041b      	lsls	r3, r3, #16
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	3303      	adds	r3, #3
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	061b      	lsls	r3, r3, #24
 8005c14:	4313      	orrs	r3, r2
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	1d1a      	adds	r2, r3, #4
 8005c1c:	633a      	str	r2, [r7, #48]	; 0x30
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c22:	4053      	eors	r3, r2
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	3305      	adds	r3, #5
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	431a      	orrs	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	3306      	adds	r3, #6
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	431a      	orrs	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	3307      	adds	r3, #7
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	1d1a      	adds	r2, r3, #4
 8005c52:	633a      	str	r2, [r7, #48]	; 0x30
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c58:	4053      	eors	r3, r2
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	3309      	adds	r3, #9
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	330a      	adds	r3, #10
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	041b      	lsls	r3, r3, #16
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	330b      	adds	r3, #11
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	061b      	lsls	r3, r3, #24
 8005c80:	4313      	orrs	r3, r2
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	633a      	str	r2, [r7, #48]	; 0x30
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8e:	4053      	eors	r3, r2
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	330c      	adds	r3, #12
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	330d      	adds	r3, #13
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	330e      	adds	r3, #14
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	431a      	orrs	r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	330f      	adds	r3, #15
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	061b      	lsls	r3, r3, #24
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	623b      	str	r3, [r7, #32]
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	1d1a      	adds	r2, r3, #4
 8005cbe:	633a      	str	r2, [r7, #48]	; 0x30
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6a3a      	ldr	r2, [r7, #32]
 8005cc4:	4053      	eors	r3, r2
 8005cc6:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	105b      	asrs	r3, r3, #1
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd2:	e0fa      	b.n	8005eca <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	1d1a      	adds	r2, r3, #4
 8005cd8:	633a      	str	r2, [r7, #48]	; 0x30
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	49ab      	ldr	r1, [pc, #684]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005ce2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ce6:	405a      	eors	r2, r3
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	49a9      	ldr	r1, [pc, #676]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005cf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cf4:	405a      	eors	r2, r3
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	49a6      	ldr	r1, [pc, #664]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005cfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d02:	405a      	eors	r2, r3
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	0e1b      	lsrs	r3, r3, #24
 8005d08:	49a4      	ldr	r1, [pc, #656]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005d0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d0e:	4053      	eors	r3, r2
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	633a      	str	r2, [r7, #48]	; 0x30
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	499c      	ldr	r1, [pc, #624]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d24:	405a      	eors	r2, r3
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	4999      	ldr	r1, [pc, #612]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d32:	405a      	eors	r2, r3
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	0c1b      	lsrs	r3, r3, #16
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	4997      	ldr	r1, [pc, #604]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005d3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d40:	405a      	eors	r2, r3
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	0e1b      	lsrs	r3, r3, #24
 8005d46:	4995      	ldr	r1, [pc, #596]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005d48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d4c:	4053      	eors	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	1d1a      	adds	r2, r3, #4
 8005d54:	633a      	str	r2, [r7, #48]	; 0x30
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	498c      	ldr	r1, [pc, #560]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005d5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d62:	405a      	eors	r2, r3
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	498a      	ldr	r1, [pc, #552]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005d6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d70:	405a      	eors	r2, r3
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4987      	ldr	r1, [pc, #540]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005d7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d7e:	405a      	eors	r2, r3
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	0e1b      	lsrs	r3, r3, #24
 8005d84:	4985      	ldr	r1, [pc, #532]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005d86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d8a:	4053      	eors	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	1d1a      	adds	r2, r3, #4
 8005d92:	633a      	str	r2, [r7, #48]	; 0x30
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	497d      	ldr	r1, [pc, #500]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005d9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005da0:	405a      	eors	r2, r3
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	497a      	ldr	r1, [pc, #488]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005daa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dae:	405a      	eors	r2, r3
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	0c1b      	lsrs	r3, r3, #16
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	4978      	ldr	r1, [pc, #480]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005db8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dbc:	405a      	eors	r2, r3
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	0e1b      	lsrs	r3, r3, #24
 8005dc2:	4976      	ldr	r1, [pc, #472]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005dc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dc8:	4053      	eors	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	1d1a      	adds	r2, r3, #4
 8005dd0:	633a      	str	r2, [r7, #48]	; 0x30
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	496d      	ldr	r1, [pc, #436]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005dda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dde:	405a      	eors	r2, r3
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	0a1b      	lsrs	r3, r3, #8
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	496b      	ldr	r1, [pc, #428]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005de8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dec:	405a      	eors	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	0c1b      	lsrs	r3, r3, #16
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	4968      	ldr	r1, [pc, #416]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005df6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dfa:	405a      	eors	r2, r3
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	0e1b      	lsrs	r3, r3, #24
 8005e00:	4966      	ldr	r1, [pc, #408]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005e02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e06:	4053      	eors	r3, r2
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	1d1a      	adds	r2, r3, #4
 8005e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	495e      	ldr	r1, [pc, #376]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005e18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e1c:	405a      	eors	r2, r3
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	0a1b      	lsrs	r3, r3, #8
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	495b      	ldr	r1, [pc, #364]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005e26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e2a:	405a      	eors	r2, r3
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	0c1b      	lsrs	r3, r3, #16
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	4959      	ldr	r1, [pc, #356]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005e34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e38:	405a      	eors	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	0e1b      	lsrs	r3, r3, #24
 8005e3e:	4957      	ldr	r1, [pc, #348]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005e40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e44:	4053      	eors	r3, r2
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	494e      	ldr	r1, [pc, #312]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005e56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e5a:	405a      	eors	r2, r3
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	494c      	ldr	r1, [pc, #304]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005e64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e68:	405a      	eors	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	0c1b      	lsrs	r3, r3, #16
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	4949      	ldr	r1, [pc, #292]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005e72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e76:	405a      	eors	r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	0e1b      	lsrs	r3, r3, #24
 8005e7c:	4947      	ldr	r1, [pc, #284]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005e7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e82:	4053      	eors	r3, r2
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	1d1a      	adds	r2, r3, #4
 8005e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	493f      	ldr	r1, [pc, #252]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005e94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e98:	405a      	eors	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	0a1b      	lsrs	r3, r3, #8
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	493c      	ldr	r1, [pc, #240]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005ea2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ea6:	405a      	eors	r2, r3
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	0c1b      	lsrs	r3, r3, #16
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	493a      	ldr	r1, [pc, #232]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005eb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005eb4:	405a      	eors	r2, r3
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	0e1b      	lsrs	r3, r3, #24
 8005eba:	4938      	ldr	r1, [pc, #224]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005ebc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ec0:	4053      	eors	r3, r2
 8005ec2:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f73f af01 	bgt.w	8005cd4 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	492c      	ldr	r1, [pc, #176]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005ee0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ee4:	405a      	eors	r2, r3
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	4929      	ldr	r1, [pc, #164]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005eee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ef2:	405a      	eors	r2, r3
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	4927      	ldr	r1, [pc, #156]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005efc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f00:	405a      	eors	r2, r3
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	0e1b      	lsrs	r3, r3, #24
 8005f06:	4925      	ldr	r1, [pc, #148]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005f08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f0c:	4053      	eors	r3, r2
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	1d1a      	adds	r2, r3, #4
 8005f14:	633a      	str	r2, [r7, #48]	; 0x30
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	491c      	ldr	r1, [pc, #112]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005f1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f22:	405a      	eors	r2, r3
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	491a      	ldr	r1, [pc, #104]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005f2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f30:	405a      	eors	r2, r3
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	0c1b      	lsrs	r3, r3, #16
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	4917      	ldr	r1, [pc, #92]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005f3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f3e:	405a      	eors	r2, r3
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	0e1b      	lsrs	r3, r3, #24
 8005f44:	4915      	ldr	r1, [pc, #84]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005f46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f4a:	4053      	eors	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	1d1a      	adds	r2, r3, #4
 8005f52:	633a      	str	r2, [r7, #48]	; 0x30
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	490d      	ldr	r1, [pc, #52]	; (8005f90 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005f5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f60:	405a      	eors	r2, r3
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	490a      	ldr	r1, [pc, #40]	; (8005f94 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005f6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f6e:	405a      	eors	r2, r3
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	0c1b      	lsrs	r3, r3, #16
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	4908      	ldr	r1, [pc, #32]	; (8005f98 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005f78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f7c:	405a      	eors	r2, r3
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	0e1b      	lsrs	r3, r3, #24
 8005f82:	4906      	ldr	r1, [pc, #24]	; (8005f9c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005f84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f88:	4053      	eors	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	e007      	b.n	8005fa0 <mbedtls_internal_aes_decrypt+0x3c0>
 8005f90:	200020b0 	.word	0x200020b0
 8005f94:	200024b0 	.word	0x200024b0
 8005f98:	200028b0 	.word	0x200028b0
 8005f9c:	20002cb0 	.word	0x20002cb0
 8005fa0:	1d1a      	adds	r2, r3, #4
 8005fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	4979      	ldr	r1, [pc, #484]	; (8006190 <mbedtls_internal_aes_decrypt+0x5b0>)
 8005fac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005fb0:	405a      	eors	r2, r3
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	4976      	ldr	r1, [pc, #472]	; (8006194 <mbedtls_internal_aes_decrypt+0x5b4>)
 8005fba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005fbe:	405a      	eors	r2, r3
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4974      	ldr	r1, [pc, #464]	; (8006198 <mbedtls_internal_aes_decrypt+0x5b8>)
 8005fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005fcc:	405a      	eors	r2, r3
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	0e1b      	lsrs	r3, r3, #24
 8005fd2:	4972      	ldr	r1, [pc, #456]	; (800619c <mbedtls_internal_aes_decrypt+0x5bc>)
 8005fd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005fd8:	4053      	eors	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	1d1a      	adds	r2, r3, #4
 8005fe0:	633a      	str	r2, [r7, #48]	; 0x30
 8005fe2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	496d      	ldr	r1, [pc, #436]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005fea:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8005fec:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	0a1b      	lsrs	r3, r3, #8
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	496a      	ldr	r1, [pc, #424]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8005ffa:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	b2db      	uxtb	r3, r3
 8006002:	4967      	ldr	r1, [pc, #412]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006004:	5ccb      	ldrb	r3, [r1, r3]
 8006006:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8006008:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	0e1b      	lsrs	r3, r3, #24
 800600e:	4964      	ldr	r1, [pc, #400]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006010:	5ccb      	ldrb	r3, [r1, r3]
 8006012:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8006014:	4053      	eors	r3, r2
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	633a      	str	r2, [r7, #48]	; 0x30
 800601e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	495e      	ldr	r1, [pc, #376]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006026:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8006028:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	0a1b      	lsrs	r3, r3, #8
 800602e:	b2db      	uxtb	r3, r3
 8006030:	495b      	ldr	r1, [pc, #364]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8006036:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	0c1b      	lsrs	r3, r3, #16
 800603c:	b2db      	uxtb	r3, r3
 800603e:	4958      	ldr	r1, [pc, #352]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006040:	5ccb      	ldrb	r3, [r1, r3]
 8006042:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8006044:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	0e1b      	lsrs	r3, r3, #24
 800604a:	4955      	ldr	r1, [pc, #340]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 800604c:	5ccb      	ldrb	r3, [r1, r3]
 800604e:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8006050:	4053      	eors	r3, r2
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	1d1a      	adds	r2, r3, #4
 8006058:	633a      	str	r2, [r7, #48]	; 0x30
 800605a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	494f      	ldr	r1, [pc, #316]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006062:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8006064:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	b2db      	uxtb	r3, r3
 800606c:	494c      	ldr	r1, [pc, #304]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 800606e:	5ccb      	ldrb	r3, [r1, r3]
 8006070:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8006072:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	0c1b      	lsrs	r3, r3, #16
 8006078:	b2db      	uxtb	r3, r3
 800607a:	4949      	ldr	r1, [pc, #292]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 800607c:	5ccb      	ldrb	r3, [r1, r3]
 800607e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8006080:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	0e1b      	lsrs	r3, r3, #24
 8006086:	4946      	ldr	r1, [pc, #280]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006088:	5ccb      	ldrb	r3, [r1, r3]
 800608a:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 800608c:	4053      	eors	r3, r2
 800608e:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	1d1a      	adds	r2, r3, #4
 8006094:	633a      	str	r2, [r7, #48]	; 0x30
 8006096:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	4940      	ldr	r1, [pc, #256]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 800609e:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 80060a0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	493d      	ldr	r1, [pc, #244]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 80060aa:	5ccb      	ldrb	r3, [r1, r3]
 80060ac:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80060ae:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	493a      	ldr	r1, [pc, #232]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 80060b8:	5ccb      	ldrb	r3, [r1, r3]
 80060ba:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80060bc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	0e1b      	lsrs	r3, r3, #24
 80060c2:	4937      	ldr	r1, [pc, #220]	; (80061a0 <mbedtls_internal_aes_decrypt+0x5c0>)
 80060c4:	5ccb      	ldrb	r3, [r1, r3]
 80060c6:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 80060c8:	4053      	eors	r3, r2
 80060ca:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	0a1a      	lsrs	r2, r3, #8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3301      	adds	r3, #1
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	0c1a      	lsrs	r2, r3, #16
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3302      	adds	r3, #2
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	0e1a      	lsrs	r2, r3, #24
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3303      	adds	r3, #3
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	0a1a      	lsrs	r2, r3, #8
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3305      	adds	r3, #5
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	0c1a      	lsrs	r2, r3, #16
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3306      	adds	r3, #6
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	0e1a      	lsrs	r2, r3, #24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3307      	adds	r3, #7
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3308      	adds	r3, #8
 800612a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	0a1a      	lsrs	r2, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3309      	adds	r3, #9
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	0c1a      	lsrs	r2, r3, #16
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	330a      	adds	r3, #10
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	0e1a      	lsrs	r2, r3, #24
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	330b      	adds	r3, #11
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	330c      	adds	r3, #12
 8006158:	6a3a      	ldr	r2, [r7, #32]
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	0a1a      	lsrs	r2, r3, #8
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	330d      	adds	r3, #13
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	0c1a      	lsrs	r2, r3, #16
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	330e      	adds	r3, #14
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	0e1a      	lsrs	r2, r3, #24
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	330f      	adds	r3, #15
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	373c      	adds	r7, #60	; 0x3c
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	200020b0 	.word	0x200020b0
 8006194:	200024b0 	.word	0x200024b0
 8006198:	200028b0 	.word	0x200028b0
 800619c:	20002cb0 	.word	0x20002cb0
 80061a0:	20001fb0 	.word	0x20001fb0

080061a4 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d106      	bne.n	80061c6 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff fa2d 	bl	800561c <mbedtls_internal_aes_encrypt>
 80061c2:	4603      	mov	r3, r0
 80061c4:	e005      	b.n	80061d2 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f7ff fd08 	bl	8005be0 <mbedtls_internal_aes_decrypt>
 80061d0:	4603      	mov	r3, r0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 80061da:	b5b0      	push	{r4, r5, r7, lr}
 80061dc:	b08a      	sub	sp, #40	; 0x28
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	603b      	str	r3, [r7, #0]
    int i;
    unsigned char temp[16];

    if( length % 16 )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 80061f2:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80061f6:	e06d      	b.n	80062d4 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d166      	bne.n	80062cc <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 80061fe:	e036      	b.n	800626e <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	f107 0414 	add.w	r4, r7, #20
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff ffc4 	bl	80061a4 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 800621c:	2300      	movs	r3, #0
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
 8006220:	e010      	b.n	8006244 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006226:	4413      	add	r3, r2
 8006228:	7819      	ldrb	r1, [r3, #0]
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	4413      	add	r3, r2
 8006230:	781a      	ldrb	r2, [r3, #0]
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006236:	4403      	add	r3, r0
 8006238:	404a      	eors	r2, r1
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	3301      	adds	r3, #1
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	2b0f      	cmp	r3, #15
 8006248:	ddeb      	ble.n	8006222 <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	461d      	mov	r5, r3
 800624e:	f107 0414 	add.w	r4, r7, #20
 8006252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006254:	6028      	str	r0, [r5, #0]
 8006256:	6069      	str	r1, [r5, #4]
 8006258:	60aa      	str	r2, [r5, #8]
 800625a:	60eb      	str	r3, [r5, #12]

            input  += 16;
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	3310      	adds	r3, #16
 8006260:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 8006262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006264:	3310      	adds	r3, #16
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3b10      	subs	r3, #16
 800626c:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1c5      	bne.n	8006200 <mbedtls_aes_crypt_cbc+0x26>
 8006274:	e02d      	b.n	80062d2 <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 8006276:	2300      	movs	r3, #0
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
 800627a:	e010      	b.n	800629e <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006280:	4413      	add	r3, r2
 8006282:	7819      	ldrb	r1, [r3, #0]
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	4413      	add	r3, r2
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006290:	4403      	add	r3, r0
 8006292:	404a      	eors	r2, r1
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	3301      	adds	r3, #1
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	2b0f      	cmp	r3, #15
 80062a2:	ddeb      	ble.n	800627c <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 80062a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f7ff ff7a 	bl	80061a4 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 80062b0:	2210      	movs	r2, #16
 80062b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062b4:	6838      	ldr	r0, [r7, #0]
 80062b6:	f017 fec9 	bl	801e04c <memcpy>

            input  += 16;
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	3310      	adds	r3, #16
 80062be:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	3310      	adds	r3, #16
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3b10      	subs	r3, #16
 80062ca:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1d1      	bne.n	8006276 <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3728      	adds	r7, #40	; 0x28
 80062d8:	46bd      	mov	sp, r7
 80062da:	bdb0      	pop	{r4, r5, r7, pc}

080062dc <mbedtls_zeroize>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e004      	b.n	80062f6 <mbedtls_zeroize+0x1a>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	60fa      	str	r2, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	1e5a      	subs	r2, r3, #1
 80062fa:	603a      	str	r2, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f5      	bne.n	80062ec <mbedtls_zeroize+0x10>
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
    if( ( end - *p ) < 1 )
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	dc02      	bgt.n	800632e <mbedtls_asn1_get_len+0x1e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006328:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 800632c:	e0ac      	b.n	8006488 <mbedtls_asn1_get_len+0x178>

    if( ( **p & 0x80 ) == 0 )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	b25b      	sxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	db09      	blt.n	800634e <mbedtls_asn1_get_len+0x3e>
        *len = *(*p)++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	1c59      	adds	r1, r3, #1
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	6011      	str	r1, [r2, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e090      	b.n	8006470 <mbedtls_asn1_get_len+0x160>
    else
    {
        switch( **p & 0x7F )
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006358:	3b01      	subs	r3, #1
 800635a:	2b03      	cmp	r3, #3
 800635c:	f200 8085 	bhi.w	800646a <mbedtls_asn1_get_len+0x15a>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <mbedtls_asn1_get_len+0x58>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	08006379 	.word	0x08006379
 800636c:	080063a5 	.word	0x080063a5
 8006370:	080063db 	.word	0x080063db
 8006374:	0800641d 	.word	0x0800641d
        {
        case 1:
            if( ( end - *p ) < 2 )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	dc02      	bgt.n	800638a <mbedtls_asn1_get_len+0x7a>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006384:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8006388:	e07e      	b.n	8006488 <mbedtls_asn1_get_len+0x178>

            *len = (*p)[1];
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3301      	adds	r3, #1
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]
            (*p) += 2;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	1c9a      	adds	r2, r3, #2
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	601a      	str	r2, [r3, #0]
            break;
 80063a2:	e065      	b.n	8006470 <mbedtls_asn1_get_len+0x160>

        case 2:
            if( ( end - *p ) < 3 )
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	dc02      	bgt.n	80063b6 <mbedtls_asn1_get_len+0xa6>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80063b0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80063b4:	e068      	b.n	8006488 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	3202      	adds	r2, #2
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
            (*p) += 3;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	1cda      	adds	r2, r3, #3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	601a      	str	r2, [r3, #0]
            break;
 80063d8:	e04a      	b.n	8006470 <mbedtls_asn1_get_len+0x160>

        case 3:
            if( ( end - *p ) < 4 )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	dc02      	bgt.n	80063ec <mbedtls_asn1_get_len+0xdc>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80063e6:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80063ea:	e04d      	b.n	8006488 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 16 ) |
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	041a      	lsls	r2, r3, #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3302      	adds	r3, #2
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8006400:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	3203      	adds	r2, #3
 8006408:	7812      	ldrb	r2, [r2, #0]
 800640a:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 16 ) |
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
            (*p) += 4;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]
            break;
 800641a:	e029      	b.n	8006470 <mbedtls_asn1_get_len+0x160>

        case 4:
            if( ( end - *p ) < 5 )
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b04      	cmp	r3, #4
 8006426:	dc02      	bgt.n	800642e <mbedtls_asn1_get_len+0x11e>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006428:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 800642c:	e02c      	b.n	8006488 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	061a      	lsls	r2, r3, #24
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3302      	adds	r3, #2
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	041b      	lsls	r3, r3, #16
 8006442:	431a      	orrs	r2, r3
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3303      	adds	r3, #3
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800644e:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	3204      	adds	r2, #4
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
            (*p) += 5;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	1d5a      	adds	r2, r3, #5
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]
            break;
 8006468:	e002      	b.n	8006470 <mbedtls_asn1_get_len+0x160>

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800646a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800646e:	e00b      	b.n	8006488 <mbedtls_asn1_get_len+0x178>
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	1a8a      	subs	r2, r1, r2
 800647c:	4293      	cmp	r3, r2
 800647e:	d902      	bls.n	8006486 <mbedtls_asn1_get_len+0x176>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006480:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8006484:	e000      	b.n	8006488 <mbedtls_asn1_get_len+0x178>

    return( 0 );
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
    if( ( end - *p ) < 1 )
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	dc02      	bgt.n	80064b4 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80064ae:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80064b2:	e014      	b.n	80064de <mbedtls_asn1_get_tag+0x4a>

    if( **p != tag )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	4293      	cmp	r3, r2
 80064c0:	d002      	beq.n	80064c8 <mbedtls_asn1_get_tag+0x34>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80064c2:	f06f 0361 	mvn.w	r3, #97	; 0x61
 80064c6:	e00a      	b.n	80064de <mbedtls_asn1_get_tag+0x4a>

    (*p)++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	601a      	str	r2, [r3, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff ff1a 	bl	8006310 <mbedtls_asn1_get_len>
 80064dc:	4603      	mov	r3, r0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80064f2:	f107 0210 	add.w	r2, r7, #16
 80064f6:	2301      	movs	r3, #1
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff ffca 	bl	8006494 <mbedtls_asn1_get_tag>
 8006500:	6178      	str	r0, [r7, #20]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <mbedtls_asn1_get_bool+0x26>
        return( ret );
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	e016      	b.n	800653a <mbedtls_asn1_get_bool+0x54>

    if( len != 1 )
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d002      	beq.n	8006518 <mbedtls_asn1_get_bool+0x32>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8006512:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006516:	e010      	b.n	800653a <mbedtls_asn1_get_bool+0x54>

    *val = ( **p != 0 ) ? 1 : 0;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	bf14      	ite	ne
 8006522:	2301      	movne	r3, #1
 8006524:	2300      	moveq	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	601a      	str	r2, [r3, #0]
    (*p)++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	601a      	str	r2, [r3, #0]

    return( 0 );
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b086      	sub	sp, #24
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800654e:	f107 0210 	add.w	r2, r7, #16
 8006552:	2302      	movs	r3, #2
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff ff9c 	bl	8006494 <mbedtls_asn1_get_tag>
 800655c:	6178      	str	r0, [r7, #20]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <mbedtls_asn1_get_int+0x26>
        return( ret );
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	e026      	b.n	80065b6 <mbedtls_asn1_get_int+0x74>

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d008      	beq.n	8006580 <mbedtls_asn1_get_int+0x3e>
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b04      	cmp	r3, #4
 8006572:	d805      	bhi.n	8006580 <mbedtls_asn1_get_int+0x3e>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	b25b      	sxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	da02      	bge.n	8006586 <mbedtls_asn1_get_int+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8006580:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006584:	e017      	b.n	80065b6 <mbedtls_asn1_get_int+0x74>

    *val = 0;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

    while( len-- > 0 )
 800658c:	e00d      	b.n	80065aa <mbedtls_asn1_get_int+0x68>
    {
        *val = ( *val << 8 ) | **p;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	6812      	ldr	r2, [r2, #0]
 8006598:	7812      	ldrb	r2, [r2, #0]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	601a      	str	r2, [r3, #0]
        (*p)++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	601a      	str	r2, [r3, #0]
    while( len-- > 0 )
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1e5a      	subs	r2, r3, #1
 80065ae:	613a      	str	r2, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1ec      	bne.n	800658e <mbedtls_asn1_get_int+0x4c>
    }

    return( 0 );
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <mbedtls_asn1_get_bitstring>:
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b086      	sub	sp, #24
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	2303      	movs	r3, #3
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7ff ff5f 	bl	8006494 <mbedtls_asn1_get_tag>
 80065d6:	6178      	str	r0, [r7, #20]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <mbedtls_asn1_get_bitstring+0x24>
        return( ret );
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	e030      	b.n	8006644 <mbedtls_asn1_get_bitstring+0x86>

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <mbedtls_asn1_get_bitstring+0x32>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80065ea:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80065ee:	e029      	b.n	8006644 <mbedtls_asn1_get_bitstring+0x86>
    bs->len -= 1;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	1e5a      	subs	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	601a      	str	r2, [r3, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	781a      	ldrb	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	711a      	strb	r2, [r3, #4]
    if( bs->unused_bits > 7 )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	791b      	ldrb	r3, [r3, #4]
 8006608:	2b07      	cmp	r3, #7
 800660a:	d902      	bls.n	8006612 <mbedtls_asn1_get_bitstring+0x54>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800660c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006610:	e018      	b.n	8006644 <mbedtls_asn1_get_bitstring+0x86>
    (*p)++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]

    /* Get actual bitstring */
    bs->p = *p;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	609a      	str	r2, [r3, #8]
    *p += bs->len;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	441a      	add	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	601a      	str	r2, [r3, #0]

    if( *p != end )
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	429a      	cmp	r2, r3
 800663a:	d002      	beq.n	8006642 <mbedtls_asn1_get_bitstring+0x84>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800663c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006640:	e000      	b.n	8006644 <mbedtls_asn1_get_bitstring+0x86>

    return( 0 );
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8006658:	2303      	movs	r3, #3
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff ff18 	bl	8006494 <mbedtls_asn1_get_tag>
 8006664:	6178      	str	r0, [r7, #20]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <mbedtls_asn1_get_bitstring_null+0x24>
        return( ret );
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	e012      	b.n	8006696 <mbedtls_asn1_get_bitstring_null+0x4a>

    if( (*len)-- < 2 || *(*p)++ != 0 )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	1e59      	subs	r1, r3, #1
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d907      	bls.n	800668e <mbedtls_asn1_get_bitstring_null+0x42>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	1c59      	adds	r1, r3, #1
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	6011      	str	r1, [r2, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <mbedtls_asn1_get_bitstring_null+0x48>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800668e:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8006692:	e000      	b.n	8006696 <mbedtls_asn1_get_bitstring_null+0x4a>

    return( 0 );
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b088      	sub	sp, #32
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
 80066aa:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80066ac:	f107 0214 	add.w	r2, r7, #20
 80066b0:	2330      	movs	r3, #48	; 0x30
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff feed 	bl	8006494 <mbedtls_asn1_get_tag>
 80066ba:	61f8      	str	r0, [r7, #28]
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <mbedtls_asn1_get_sequence_of+0x28>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	e051      	b.n	800676a <mbedtls_asn1_get_sequence_of+0xcc>

    if( *p + len != end )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	4413      	add	r3, r2
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d039      	beq.n	8006748 <mbedtls_asn1_get_sequence_of+0xaa>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80066d4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80066d8:	e047      	b.n	800676a <mbedtls_asn1_get_sequence_of+0xcc>

    while( *p < end )
    {
        buf = &(cur->buf);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	61bb      	str	r3, [r7, #24]
        buf->tag = **p;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	601a      	str	r2, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff fece 	bl	8006494 <mbedtls_asn1_get_tag>
 80066f8:	61f8      	str	r0, [r7, #28]
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <mbedtls_asn1_get_sequence_of+0x66>
            return( ret );
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	e032      	b.n	800676a <mbedtls_asn1_get_sequence_of+0xcc>

        buf->p = *p;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	609a      	str	r2, [r3, #8]
        *p += buf->len;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	441a      	add	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	601a      	str	r2, [r3, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	429a      	cmp	r2, r3
 8006722:	d911      	bls.n	8006748 <mbedtls_asn1_get_sequence_of+0xaa>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 8006724:	2110      	movs	r1, #16
 8006726:	2001      	movs	r0, #1
 8006728:	f017 fc3e 	bl	801dfa8 <calloc>
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60da      	str	r2, [r3, #12]
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <mbedtls_asn1_get_sequence_of+0xa4>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 800673c:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8006740:	e013      	b.n	800676a <mbedtls_asn1_get_sequence_of+0xcc>

            cur = cur->next;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	607b      	str	r3, [r7, #4]
    while( *p < end )
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	429a      	cmp	r2, r3
 8006750:	d8c3      	bhi.n	80066da <mbedtls_asn1_get_sequence_of+0x3c>
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	60da      	str	r2, [r3, #12]

    if( *p != end )
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	d002      	beq.n	8006768 <mbedtls_asn1_get_sequence_of+0xca>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8006762:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006766:	e000      	b.n	800676a <mbedtls_asn1_get_sequence_of+0xcc>

    return( 0 );
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3720      	adds	r7, #32
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8006780:	f107 0210 	add.w	r2, r7, #16
 8006784:	2330      	movs	r3, #48	; 0x30
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fe83 	bl	8006494 <mbedtls_asn1_get_tag>
 800678e:	6178      	str	r0, [r7, #20]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <mbedtls_asn1_get_alg+0x28>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	e062      	b.n	8006860 <mbedtls_asn1_get_alg+0xee>

    if( ( end - *p ) < 1 )
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dc02      	bgt.n	80067ac <mbedtls_asn1_get_alg+0x3a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80067a6:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80067aa:	e059      	b.n	8006860 <mbedtls_asn1_get_alg+0xee>

    alg->tag = **p;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	601a      	str	r2, [r3, #0]
    end = *p + len;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	1d1a      	adds	r2, r3, #4
 80067c6:	2306      	movs	r3, #6
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff fe62 	bl	8006494 <mbedtls_asn1_get_tag>
 80067d0:	6178      	str	r0, [r7, #20]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <mbedtls_asn1_get_alg+0x6a>
        return( ret );
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	e041      	b.n	8006860 <mbedtls_asn1_get_alg+0xee>

    alg->p = *p;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	609a      	str	r2, [r3, #8]
    *p += alg->len;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	441a      	add	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	601a      	str	r2, [r3, #0]

    if( *p == end )
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d105      	bne.n	8006808 <mbedtls_asn1_get_alg+0x96>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
 80067fc:	210c      	movs	r1, #12
 80067fe:	6838      	ldr	r0, [r7, #0]
 8006800:	f7ff fd6c 	bl	80062dc <mbedtls_zeroize>
        return( 0 );
 8006804:	2300      	movs	r3, #0
 8006806:	e02b      	b.n	8006860 <mbedtls_asn1_get_alg+0xee>
    }

    params->tag = **p;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	601a      	str	r2, [r3, #0]
    (*p)++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	3304      	adds	r3, #4
 8006822:	461a      	mov	r2, r3
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff fd72 	bl	8006310 <mbedtls_asn1_get_len>
 800682c:	6178      	str	r0, [r7, #20]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <mbedtls_asn1_get_alg+0xc6>
        return( ret );
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	e013      	b.n	8006860 <mbedtls_asn1_get_alg+0xee>

    params->p = *p;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	609a      	str	r2, [r3, #8]
    *p += params->len;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	441a      	add	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	601a      	str	r2, [r3, #0]

    if( *p != end )
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	429a      	cmp	r2, r3
 8006856:	d002      	beq.n	800685e <mbedtls_asn1_get_alg+0xec>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8006858:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800685c:	e000      	b.n	8006860 <mbedtls_asn1_get_alg+0xee>

    return( 0 );
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8006868:	b480      	push	{r7}
 800686a:	b08b      	sub	sp, #44	; 0x2c
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	2300      	movs	r3, #0
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
 8006882:	e06f      	b.n	8006964 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 8006888:	e005      	b.n	8006896 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	3301      	adds	r3, #1
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	3301      	adds	r3, #1
 8006894:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 8006896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	429a      	cmp	r2, r3
 800689c:	d205      	bcs.n	80068aa <mbedtls_base64_decode+0x42>
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	4413      	add	r3, r2
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d0ef      	beq.n	800688a <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d05d      	beq.n	800696e <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 80068b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d90c      	bls.n	80068d6 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	4413      	add	r3, r2
 80068c2:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 80068c4:	2b0d      	cmp	r3, #13
 80068c6:	d106      	bne.n	80068d6 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	3301      	adds	r3, #1
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	4413      	add	r3, r2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b0a      	cmp	r3, #10
 80068d4:	d040      	beq.n	8006958 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	4413      	add	r3, r2
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b0a      	cmp	r3, #10
 80068e0:	d03c      	beq.n	800695c <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80068e8:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 80068ec:	e0d0      	b.n	8006a90 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	4413      	add	r3, r2
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b3d      	cmp	r3, #61	; 0x3d
 80068f8:	d108      	bne.n	800690c <mbedtls_base64_decode+0xa4>
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	3301      	adds	r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d902      	bls.n	800690c <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8006906:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 800690a:	e0c1      	b.n	8006a90 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	4413      	add	r3, r2
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b25b      	sxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	db08      	blt.n	800692c <mbedtls_base64_decode+0xc4>
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	4413      	add	r3, r2
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	4b5d      	ldr	r3, [pc, #372]	; (8006a9c <mbedtls_base64_decode+0x234>)
 8006926:	5c9b      	ldrb	r3, [r3, r2]
 8006928:	2b7f      	cmp	r3, #127	; 0x7f
 800692a:	d102      	bne.n	8006932 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 800692c:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8006930:	e0ae      	b.n	8006a90 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	4413      	add	r3, r2
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	4b57      	ldr	r3, [pc, #348]	; (8006a9c <mbedtls_base64_decode+0x234>)
 800693e:	5c9b      	ldrb	r3, [r3, r2]
 8006940:	2b3f      	cmp	r3, #63	; 0x3f
 8006942:	d805      	bhi.n	8006950 <mbedtls_base64_decode+0xe8>
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 800694a:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 800694e:	e09f      	b.n	8006a90 <mbedtls_base64_decode+0x228>

        n++;
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	3301      	adds	r3, #1
 8006954:	623b      	str	r3, [r7, #32]
 8006956:	e002      	b.n	800695e <mbedtls_base64_decode+0xf6>
            continue;
 8006958:	bf00      	nop
 800695a:	e000      	b.n	800695e <mbedtls_base64_decode+0xf6>
            continue;
 800695c:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	3301      	adds	r3, #1
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	429a      	cmp	r2, r3
 800696a:	d38b      	bcc.n	8006884 <mbedtls_base64_decode+0x1c>
 800696c:	e000      	b.n	8006970 <mbedtls_base64_decode+0x108>
            break;
 800696e:	bf00      	nop
    }

    if( n == 0 )
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d104      	bne.n	8006980 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
        return( 0 );
 800697c:	2300      	movs	r3, #0
 800697e:	e087      	b.n	8006a90 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	08da      	lsrs	r2, r3, #3
 8006984:	4613      	mov	r3, r2
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	4413      	add	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	4619      	mov	r1, r3
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	f003 0207 	and.w	r2, r3, #7
 8006994:	4613      	mov	r3, r2
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	4413      	add	r3, r2
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	3307      	adds	r3, #7
 800699e:	08db      	lsrs	r3, r3, #3
 80069a0:	440b      	add	r3, r1
 80069a2:	623b      	str	r3, [r7, #32]
    n -= j;
 80069a4:	6a3a      	ldr	r2, [r7, #32]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <mbedtls_base64_decode+0x152>
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d205      	bcs.n	80069c6 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a3a      	ldr	r2, [r7, #32]
 80069be:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 80069c0:	f06f 0329 	mvn.w	r3, #41	; 0x29
 80069c4:	e064      	b.n	8006a90 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 80069c6:	2303      	movs	r3, #3
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	2300      	movs	r3, #0
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	2300      	movs	r3, #0
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	e051      	b.n	8006a7c <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b0d      	cmp	r3, #13
 80069de:	d046      	beq.n	8006a6e <mbedtls_base64_decode+0x206>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b0a      	cmp	r3, #10
 80069e6:	d042      	beq.n	8006a6e <mbedtls_base64_decode+0x206>
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d03e      	beq.n	8006a6e <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <mbedtls_base64_decode+0x234>)
 80069f8:	5c9b      	ldrb	r3, [r3, r2]
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	bf0c      	ite	eq
 80069fe:	2301      	moveq	r3, #1
 8006a00:	2300      	movne	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	1a9b      	subs	r3, r3, r2
 8006a0a:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	019a      	lsls	r2, r3, #6
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	4619      	mov	r1, r3
 8006a16:	4b21      	ldr	r3, [pc, #132]	; (8006a9c <mbedtls_base64_decode+0x234>)
 8006a18:	5c5b      	ldrb	r3, [r3, r1]
 8006a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	3301      	adds	r3, #1
 8006a26:	623b      	str	r3, [r7, #32]
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d120      	bne.n	8006a70 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d006      	beq.n	8006a46 <mbedtls_base64_decode+0x1de>
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	0c19      	lsrs	r1, r3, #16
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	617a      	str	r2, [r7, #20]
 8006a42:	b2ca      	uxtb	r2, r1
 8006a44:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d906      	bls.n	8006a5a <mbedtls_base64_decode+0x1f2>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	0a19      	lsrs	r1, r3, #8
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	617a      	str	r2, [r7, #20]
 8006a56:	b2ca      	uxtb	r2, r1
 8006a58:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d907      	bls.n	8006a70 <mbedtls_base64_decode+0x208>
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	617a      	str	r2, [r7, #20]
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	e000      	b.n	8006a70 <mbedtls_base64_decode+0x208>
            continue;
 8006a6e:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	3b01      	subs	r3, #1
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1aa      	bne.n	80069d8 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]

    return( 0 );
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	372c      	adds	r7, #44	; 0x2c
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	08024a9c 	.word	0x08024a9c

08006aa0 <mbedtls_mpi_zeroize>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	e004      	b.n	8006aba <mbedtls_mpi_zeroize+0x1a>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	1d1a      	adds	r2, r3, #4
 8006ab4:	60fa      	str	r2, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	1e5a      	subs	r2, r3, #1
 8006abe:	603a      	str	r2, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1f5      	bne.n	8006ab0 <mbedtls_mpi_zeroize+0x10>
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <mbedtls_zeroize>:

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	e004      	b.n	8006aec <mbedtls_zeroize+0x1a>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	60fa      	str	r2, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	1e5a      	subs	r2, r3, #1
 8006af0:	603a      	str	r2, [r7, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f5      	bne.n	8006ae2 <mbedtls_zeroize+0x10>
}
 8006af6:	bf00      	nop
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <mbedtls_mpi_init+0x22>
        return;

    X->s = 1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
    X->n = 0;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	609a      	str	r2, [r3, #8]
 8006b24:	e000      	b.n	8006b28 <mbedtls_mpi_init+0x24>
        return;
 8006b26:	bf00      	nop
}
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01a      	beq.n	8006b76 <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00c      	beq.n	8006b62 <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	4619      	mov	r1, r3
 8006b52:	4610      	mov	r0, r2
 8006b54:	f7ff ffa4 	bl	8006aa0 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f017 fa5d 	bl	801e01c <free>
    }

    X->s = 1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
    X->n = 0;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	609a      	str	r2, [r3, #8]
 8006b74:	e000      	b.n	8006b78 <mbedtls_mpi_free+0x46>
        return;
 8006b76:	bf00      	nop
}
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d902      	bls.n	8006b98 <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8006b92:	f06f 030f 	mvn.w	r3, #15
 8006b96:	e031      	b.n	8006bfc <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d92b      	bls.n	8006bfa <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8006ba2:	2104      	movs	r1, #4
 8006ba4:	6838      	ldr	r0, [r7, #0]
 8006ba6:	f017 f9ff 	bl	801dfa8 <calloc>
 8006baa:	4603      	mov	r3, r0
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8006bb4:	f06f 030f 	mvn.w	r3, #15
 8006bb8:	e020      	b.n	8006bfc <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d015      	beq.n	8006bee <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6899      	ldr	r1, [r3, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f017 fa3c 	bl	801e04c <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7ff ff5e 	bl	8006aa0 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f017 fa17 	bl	801e01c <free>
        }

        X->n = nblimbs;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	605a      	str	r2, [r3, #4]
        X->p = p;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i;

    if( X == Y )
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d101      	bne.n	8006c1a <mbedtls_mpi_copy+0x16>
        return( 0 );
 8006c16:	2300      	movs	r3, #0
 8006c18:	e041      	b.n	8006c9e <mbedtls_mpi_copy+0x9a>

    if( Y->p == NULL )
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d104      	bne.n	8006c2c <mbedtls_mpi_copy+0x28>
    {
        mbedtls_mpi_free( X );
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff ff85 	bl	8006b32 <mbedtls_mpi_free>
        return( 0 );
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e038      	b.n	8006c9e <mbedtls_mpi_copy+0x9a>
    }

    for( i = Y->n - 1; i > 0; i-- )
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e00a      	b.n	8006c4c <mbedtls_mpi_copy+0x48>
        if( Y->p[i] != 0 )
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <mbedtls_mpi_copy+0x50>
    for( i = Y->n - 1; i > 0; i-- )
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f1      	bne.n	8006c36 <mbedtls_mpi_copy+0x32>
 8006c52:	e000      	b.n	8006c56 <mbedtls_mpi_copy+0x52>
            break;
 8006c54:	bf00      	nop
    i++;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	60fb      	str	r3, [r7, #12]

    X->s = Y->s;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	601a      	str	r2, [r3, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8006c64:	68f9      	ldr	r1, [r7, #12]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff ff89 	bl	8006b7e <mbedtls_mpi_grow>
 8006c6c:	60b8      	str	r0, [r7, #8]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d112      	bne.n	8006c9a <mbedtls_mpi_copy+0x96>

    memset( X->p, 0, X->n * ciL );
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6898      	ldr	r0, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	461a      	mov	r2, r3
 8006c80:	2100      	movs	r1, #0
 8006c82:	f017 fa0b 	bl	801e09c <memset>
    memcpy( X->p, Y->p, i * ciL );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6898      	ldr	r0, [r3, #8]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6899      	ldr	r1, [r3, #8]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	461a      	mov	r2, r3
 8006c94:	f017 f9da 	bl	801e04c <memcpy>
 8006c98:	e000      	b.n	8006c9c <mbedtls_mpi_copy+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8006c9a:	bf00      	nop

cleanup:

    return( ret );
 8006c9c:	68bb      	ldr	r3, [r7, #8]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff ff63 	bl	8006b7e <mbedtls_mpi_grow>
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d11a      	bne.n	8006cf6 <mbedtls_mpi_lset+0x50>
    memset( X->p, 0, X->n * ciL );
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6898      	ldr	r0, [r3, #8]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	461a      	mov	r2, r3
 8006ccc:	2100      	movs	r1, #0
 8006cce:	f017 f9e5 	bl	801e09c <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8006cd8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	da02      	bge.n	8006cee <mbedtls_mpi_lset+0x48>
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cec:	e000      	b.n	8006cf0 <mbedtls_mpi_lset+0x4a>
 8006cee:	2201      	movs	r2, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	e000      	b.n	8006cf8 <mbedtls_mpi_lset+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8006cf6:	bf00      	nop

cleanup:

    return( ret );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
    if( X->n * biL <= pos )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	015b      	lsls	r3, r3, #5
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d301      	bcc.n	8006d1c <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e00d      	b.n	8006d38 <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	fa22 f303 	lsr.w	r3, r2, r3
 8006d34:	f003 0301 	and.w	r3, r3, #1
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]

    for( i = 0; i < X->n; i++ )
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e01d      	b.n	8006d92 <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 8006d56:	2300      	movs	r3, #0
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	e014      	b.n	8006d86 <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <mbedtls_mpi_lsb+0x36>
                return( count );
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	e011      	b.n	8006d9e <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3301      	adds	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b1f      	cmp	r3, #31
 8006d8a:	d9e7      	bls.n	8006d5c <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d3dc      	bcc.n	8006d56 <mbedtls_mpi_lsb+0x12>

    return( 0 );
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8006db2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006db6:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	e00a      	b.n	8006dd4 <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <mbedtls_clz+0x32>

        mask >>= 1;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b1f      	cmp	r3, #31
 8006dd8:	d9f1      	bls.n	8006dbe <mbedtls_clz+0x14>
 8006dda:	e000      	b.n	8006dde <mbedtls_clz+0x34>
        if( x & mask ) break;
 8006ddc:	bf00      	nop
    }

    return j;
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e025      	b.n	8006e4c <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e00a      	b.n	8006e20 <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f1      	bne.n	8006e0a <mbedtls_mpi_bitlen+0x1e>
 8006e26:	e000      	b.n	8006e2a <mbedtls_mpi_bitlen+0x3e>
            break;
 8006e28:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff ffb7 	bl	8006daa <mbedtls_clz>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f1c3 0320 	rsb	r3, r3, #32
 8006e42:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4413      	add	r3, r2
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ffc5 	bl	8006dec <mbedtls_mpi_bitlen>
 8006e62:	4603      	mov	r3, r0
 8006e64:	3307      	adds	r3, #7
 8006e66:	08db      	lsrs	r3, r3, #3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	089b      	lsrs	r3, r3, #2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	f002 0203 	and.w	r2, r2, #3
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	bf14      	ite	ne
 8006e8a:	2201      	movne	r2, #1
 8006e8c:	2200      	moveq	r2, #0
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	4413      	add	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d00d      	beq.n	8006eba <mbedtls_mpi_read_binary+0x4a>
    {
        mbedtls_mpi_free( X );
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7ff fe47 	bl	8006b32 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff fe2d 	bl	8006b04 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8006eaa:	6939      	ldr	r1, [r7, #16]
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff fe66 	bl	8006b7e <mbedtls_mpi_grow>
 8006eb2:	61f8      	str	r0, [r7, #28]
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d130      	bne.n	8006f1c <mbedtls_mpi_read_binary+0xac>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8006eba:	2100      	movs	r1, #0
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff fef2 	bl	8006ca6 <mbedtls_mpi_lset>
 8006ec2:	61f8      	str	r0, [r7, #28]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d12a      	bne.n	8006f20 <mbedtls_mpi_read_binary+0xb0>

    for( i = buflen, j = 0; i > 0; i--, j++ )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	e01f      	b.n	8006f14 <mbedtls_mpi_read_binary+0xa4>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	6819      	ldr	r1, [r3, #0]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4413      	add	r3, r2
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	f003 0318 	and.w	r3, r3, #24
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6898      	ldr	r0, [r3, #8]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	4403      	add	r3, r0
 8006f04:	430a      	orrs	r2, r1
 8006f06:	601a      	str	r2, [r3, #0]
    for( i = buflen, j = 0; i > 0; i--, j++ )
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	3301      	adds	r3, #1
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1dc      	bne.n	8006ed4 <mbedtls_mpi_read_binary+0x64>

cleanup:
 8006f1a:	e002      	b.n	8006f22 <mbedtls_mpi_read_binary+0xb2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8006f1c:	bf00      	nop
 8006f1e:	e000      	b.n	8006f22 <mbedtls_mpi_read_binary+0xb2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8006f20:	bf00      	nop

    return( ret );
 8006f22:	69fb      	ldr	r3, [r7, #28]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3720      	adds	r7, #32
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7ff ff8b 	bl	8006e54 <mbedtls_mpi_size>
 8006f3e:	6178      	str	r0, [r7, #20]

    if( buflen < n )
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d202      	bcs.n	8006f4e <mbedtls_mpi_write_binary+0x22>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8006f48:	f06f 0307 	mvn.w	r3, #7
 8006f4c:	e029      	b.n	8006fa2 <mbedtls_mpi_write_binary+0x76>

    memset( buf, 0, buflen );
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	2100      	movs	r1, #0
 8006f52:	68b8      	ldr	r0, [r7, #8]
 8006f54:	f017 f8a2 	bl	801e09c <memset>

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	61fb      	str	r3, [r7, #28]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e01a      	b.n	8006f9a <mbedtls_mpi_write_binary+0x6e>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	f023 0303 	bic.w	r3, r3, #3
 8006f6e:	4413      	add	r3, r2
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	f003 0318 	and.w	r3, r3, #24
 8006f7a:	fa22 f103 	lsr.w	r1, r2, r3
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	b2ca      	uxtb	r2, r1
 8006f86:	701a      	strb	r2, [r3, #0]
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	3301      	adds	r3, #1
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e1      	bne.n	8006f64 <mbedtls_mpi_write_binary+0x38>

    return( 0 );
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b088      	sub	sp, #32
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]

    v0 = count / (biL    );
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff ff10 	bl	8006dec <mbedtls_mpi_bitlen>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	015b      	lsls	r3, r3, #5
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d912      	bls.n	8007006 <mbedtls_mpi_shift_l+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	f002 021f 	and.w	r2, r2, #31
 8006fea:	2a00      	cmp	r2, #0
 8006fec:	bf14      	ite	ne
 8006fee:	2201      	movne	r2, #1
 8006ff0:	2200      	moveq	r2, #0
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff fdc0 	bl	8006b7e <mbedtls_mpi_grow>
 8006ffe:	61f8      	str	r0, [r7, #28]
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d16e      	bne.n	80070e4 <mbedtls_mpi_shift_l+0x13a>

    ret = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d02f      	beq.n	8007070 <mbedtls_mpi_shift_l+0xc6>
    {
        for( i = X->n; i > v0; i-- )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e016      	b.n	8007046 <mbedtls_mpi_shift_l+0x9c>
            X->p[i - 1] = X->p[i - v0 - 1];
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	69b9      	ldr	r1, [r7, #24]
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1acb      	subs	r3, r1, r3
 8007022:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007026:	3b01      	subs	r3, #1
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6899      	ldr	r1, [r3, #8]
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007036:	3b01      	subs	r3, #1
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	3b01      	subs	r3, #1
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	429a      	cmp	r2, r3
 800704c:	d8e4      	bhi.n	8007018 <mbedtls_mpi_shift_l+0x6e>

        for( ; i > 0; i-- )
 800704e:	e00c      	b.n	800706a <mbedtls_mpi_shift_l+0xc0>
            X->p[i - 1] = 0;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800705a:	3b01      	subs	r3, #1
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	3b01      	subs	r3, #1
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1ef      	bne.n	8007050 <mbedtls_mpi_shift_l+0xa6>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d038      	beq.n	80070e8 <mbedtls_mpi_shift_l+0x13e>
    {
        for( i = v0; i < X->n; i++ )
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	e02d      	b.n	80070d8 <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f1c3 0320 	rsb	r3, r3, #32
 800708e:	fa22 f303 	lsr.w	r3, r2, r3
 8007092:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	6819      	ldr	r1, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	fa01 f202 	lsl.w	r2, r1, r2
 80070b0:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	6819      	ldr	r1, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]
            r0 = r1;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	3301      	adds	r3, #1
 80070d6:	61bb      	str	r3, [r7, #24]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d3cc      	bcc.n	800707c <mbedtls_mpi_shift_l+0xd2>
        }
    }

cleanup:
 80070e2:	e001      	b.n	80070e8 <mbedtls_mpi_shift_l+0x13e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80070e4:	bf00      	nop
 80070e6:	e000      	b.n	80070ea <mbedtls_mpi_shift_l+0x140>
cleanup:
 80070e8:	bf00      	nop

    return( ret );
 80070ea:	69fb      	ldr	r3, [r7, #28]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3720      	adds	r7, #32
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 80070fe:	2300      	movs	r3, #0
 8007100:	61bb      	str	r3, [r7, #24]

    v0 = count /  biL;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	429a      	cmp	r2, r3
 8007118:	d807      	bhi.n	800712a <mbedtls_mpi_shift_r+0x36>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	429a      	cmp	r2, r3
 8007122:	d108      	bne.n	8007136 <mbedtls_mpi_shift_r+0x42>
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 800712a:	2100      	movs	r1, #0
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fdba 	bl	8006ca6 <mbedtls_mpi_lset>
 8007132:	4603      	mov	r3, r0
 8007134:	e075      	b.n	8007222 <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d02a      	beq.n	8007192 <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 800713c:	2300      	movs	r3, #0
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	e010      	b.n	8007164 <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	69f9      	ldr	r1, [r7, #28]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	440b      	add	r3, r1
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	441a      	add	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6899      	ldr	r1, [r3, #8]
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	3301      	adds	r3, #1
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	69fa      	ldr	r2, [r7, #28]
 800716e:	429a      	cmp	r2, r3
 8007170:	d3e7      	bcc.n	8007142 <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 8007172:	e009      	b.n	8007188 <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	3301      	adds	r3, #1
 8007186:	61fb      	str	r3, [r7, #28]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	69fa      	ldr	r2, [r7, #28]
 800718e:	429a      	cmp	r2, r3
 8007190:	d3f0      	bcc.n	8007174 <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d043      	beq.n	8007220 <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	e03c      	b.n	800721a <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071aa:	3b01      	subs	r3, #1
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f1c3 0320 	rsb	r3, r3, #32
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071c8:	3b01      	subs	r3, #1
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071da:	3b01      	subs	r3, #1
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	fa21 f202 	lsr.w	r2, r1, r2
 80071e6:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071f2:	3b01      	subs	r3, #1
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	6819      	ldr	r1, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007204:	3b01      	subs	r3, #1
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	430a      	orrs	r2, r1
 800720e:	601a      	str	r2, [r3, #0]
            r0 = r1;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	3b01      	subs	r3, #1
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1bf      	bne.n	80071a0 <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	e00d      	b.n	8007258 <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007246:	3b01      	subs	r3, #1
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3b01      	subs	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1ee      	bne.n	800723c <mbedtls_mpi_cmp_abs+0x12>
 800725e:	e000      	b.n	8007262 <mbedtls_mpi_cmp_abs+0x38>
            break;
 8007260:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	e00d      	b.n	8007286 <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007274:	3b01      	subs	r3, #1
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	3b01      	subs	r3, #1
 8007284:	60bb      	str	r3, [r7, #8]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1ee      	bne.n	800726a <mbedtls_mpi_cmp_abs+0x40>
 800728c:	e000      	b.n	8007290 <mbedtls_mpi_cmp_abs+0x66>
            break;
 800728e:	bf00      	nop

    if( i == 0 && j == 0 )
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d104      	bne.n	80072a0 <mbedtls_mpi_cmp_abs+0x76>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 800729c:	2300      	movs	r3, #0
 800729e:	e040      	b.n	8007322 <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d901      	bls.n	80072ac <mbedtls_mpi_cmp_abs+0x82>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e03a      	b.n	8007322 <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d932      	bls.n	800731a <mbedtls_mpi_cmp_abs+0xf0>
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295
 80072b8:	e033      	b.n	8007322 <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072c4:	3b01      	subs	r3, #1
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	6899      	ldr	r1, [r3, #8]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072d6:	3b01      	subs	r3, #1
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d901      	bls.n	80072e6 <mbedtls_mpi_cmp_abs+0xbc>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e01d      	b.n	8007322 <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072f0:	3b01      	subs	r3, #1
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	6899      	ldr	r1, [r3, #8]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007302:	3b01      	subs	r3, #1
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d202      	bcs.n	8007314 <mbedtls_mpi_cmp_abs+0xea>
 800730e:	f04f 33ff 	mov.w	r3, #4294967295
 8007312:	e006      	b.n	8007322 <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3b01      	subs	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1cc      	bne.n	80072ba <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	e00d      	b.n	800735c <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800734a:	3b01      	subs	r3, #1
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3b01      	subs	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1ee      	bne.n	8007340 <mbedtls_mpi_cmp_mpi+0x12>
 8007362:	e000      	b.n	8007366 <mbedtls_mpi_cmp_mpi+0x38>
            break;
 8007364:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	60bb      	str	r3, [r7, #8]
 800736c:	e00d      	b.n	800738a <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007378:	3b01      	subs	r3, #1
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	3b01      	subs	r3, #1
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1ee      	bne.n	800736e <mbedtls_mpi_cmp_mpi+0x40>
 8007390:	e000      	b.n	8007394 <mbedtls_mpi_cmp_mpi+0x66>
            break;
 8007392:	bf00      	nop

    if( i == 0 && j == 0 )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <mbedtls_mpi_cmp_mpi+0x76>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 80073a0:	2300      	movs	r3, #0
 80073a2:	e059      	b.n	8007458 <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d902      	bls.n	80073b2 <mbedtls_mpi_cmp_mpi+0x84>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	e052      	b.n	8007458 <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d903      	bls.n	80073c2 <mbedtls_mpi_cmp_mpi+0x94>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	425b      	negs	r3, r3
 80073c0:	e04a      	b.n	8007458 <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	dd05      	ble.n	80073d6 <mbedtls_mpi_cmp_mpi+0xa8>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	da01      	bge.n	80073d6 <mbedtls_mpi_cmp_mpi+0xa8>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e040      	b.n	8007458 <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	dd38      	ble.n	8007450 <mbedtls_mpi_cmp_mpi+0x122>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	da34      	bge.n	8007450 <mbedtls_mpi_cmp_mpi+0x122>
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	e035      	b.n	8007458 <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073f6:	3b01      	subs	r3, #1
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6899      	ldr	r1, [r3, #8]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007408:	3b01      	subs	r3, #1
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	440b      	add	r3, r1
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d902      	bls.n	800741a <mbedtls_mpi_cmp_mpi+0xec>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	e01e      	b.n	8007458 <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007424:	3b01      	subs	r3, #1
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	6899      	ldr	r1, [r3, #8]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007436:	3b01      	subs	r3, #1
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	440b      	add	r3, r1
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d203      	bcs.n	800744a <mbedtls_mpi_cmp_mpi+0x11c>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	425b      	negs	r3, r3
 8007448:	e006      	b.n	8007458 <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3b01      	subs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1ca      	bne.n	80073ec <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	bfb8      	it	lt
 8007474:	425b      	neglt	r3, r3
 8007476:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	da02      	bge.n	8007484 <mbedtls_mpi_cmp_int+0x20>
 800747e:	f04f 33ff 	mov.w	r3, #4294967295
 8007482:	e000      	b.n	8007486 <mbedtls_mpi_cmp_int+0x22>
 8007484:	2301      	movs	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 8007488:	2301      	movs	r3, #1
 800748a:	613b      	str	r3, [r7, #16]
    Y.p = p;
 800748c:	f107 0308 	add.w	r3, r7, #8
 8007490:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8007492:	f107 030c 	add.w	r3, r7, #12
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff ff48 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800749e:	4603      	mov	r3, r0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08c      	sub	sp, #48	; 0x30
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d105      	bne.n	80074c8 <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d008      	beq.n	80074e2 <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80074d0:	68b9      	ldr	r1, [r7, #8]
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7ff fb96 	bl	8006c04 <mbedtls_mpi_copy>
 80074d8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 808d 	bne.w	80075fc <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
 80074ee:	e00d      	b.n	800750c <mbedtls_mpi_add_abs+0x64>
        if( B->p[j - 1] != 0 )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074fa:	3b01      	subs	r3, #1
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <mbedtls_mpi_add_abs+0x6c>
    for( j = B->n; j > 0; j-- )
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	3b01      	subs	r3, #1
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1ee      	bne.n	80074f0 <mbedtls_mpi_add_abs+0x48>
 8007512:	e000      	b.n	8007516 <mbedtls_mpi_add_abs+0x6e>
            break;
 8007514:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8007516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f7ff fb30 	bl	8006b7e <mbedtls_mpi_grow>
 800751e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d16c      	bne.n	8007600 <mbedtls_mpi_add_abs+0x158>

    o = B->p; p = X->p; c = 0;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	623b      	str	r3, [r7, #32]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	2300      	movs	r3, #0
 8007534:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 8007536:	2300      	movs	r3, #0
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
 800753a:	e02c      	b.n	8007596 <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	441a      	add	r2, r3
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	429a      	cmp	r2, r3
 8007556:	bf8c      	ite	hi
 8007558:	2301      	movhi	r3, #1
 800755a:	2300      	movls	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	441a      	add	r2, r3
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	429a      	cmp	r2, r3
 8007574:	bf8c      	ite	hi
 8007576:	2301      	movhi	r3, #1
 8007578:	2300      	movls	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	4413      	add	r3, r2
 8007582:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	3301      	adds	r3, #1
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	3304      	adds	r3, #4
 800758e:	623b      	str	r3, [r7, #32]
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	3304      	adds	r3, #4
 8007594:	61fb      	str	r3, [r7, #28]
 8007596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	429a      	cmp	r2, r3
 800759c:	d3ce      	bcc.n	800753c <mbedtls_mpi_add_abs+0x94>
    }

    while( c != 0 )
 800759e:	e029      	b.n	80075f4 <mbedtls_mpi_add_abs+0x14c>
    {
        if( i >= X->n )
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d30f      	bcc.n	80075ca <mbedtls_mpi_add_abs+0x122>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	3301      	adds	r3, #1
 80075ae:	4619      	mov	r1, r3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff fae4 	bl	8006b7e <mbedtls_mpi_grow>
 80075b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d122      	bne.n	8007604 <mbedtls_mpi_add_abs+0x15c>
            p = X->p + i;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	441a      	add	r2, r3
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	429a      	cmp	r2, r3
 80075de:	bf8c      	ite	hi
 80075e0:	2301      	movhi	r3, #1
 80075e2:	2300      	movls	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	3301      	adds	r3, #1
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	3304      	adds	r3, #4
 80075f2:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1d2      	bne.n	80075a0 <mbedtls_mpi_add_abs+0xf8>
    }

cleanup:
 80075fa:	e004      	b.n	8007606 <mbedtls_mpi_add_abs+0x15e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80075fc:	bf00      	nop
 80075fe:	e002      	b.n	8007606 <mbedtls_mpi_add_abs+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8007600:	bf00      	nop
 8007602:	e000      	b.n	8007606 <mbedtls_mpi_add_abs+0x15e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8007604:	bf00      	nop

    return( ret );
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007608:	4618      	mov	r0, r3
 800760a:	3730      	adds	r7, #48	; 0x30
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800761c:	2300      	movs	r3, #0
 800761e:	61bb      	str	r3, [r7, #24]
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]
 8007624:	e02b      	b.n	800767e <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	429a      	cmp	r2, r3
 800762e:	bf8c      	ite	hi
 8007630:	2301      	movhi	r3, #1
 8007632:	2300      	movls	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	bf34      	ite	cc
 8007650:	2301      	movcc	r3, #1
 8007652:	2300      	movcs	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	461a      	mov	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4413      	add	r3, r2
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	1ad2      	subs	r2, r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	601a      	str	r2, [r3, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	3301      	adds	r3, #1
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	3304      	adds	r3, #4
 8007676:	60bb      	str	r3, [r7, #8]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3304      	adds	r3, #4
 800767c:	607b      	str	r3, [r7, #4]
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	429a      	cmp	r2, r3
 8007684:	d3cf      	bcc.n	8007626 <mpi_sub_hlp+0x16>
    }

    while( c != 0 )
 8007686:	e016      	b.n	80076b6 <mpi_sub_hlp+0xa6>
    {
        z = ( *d < c ); *d -= c;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	429a      	cmp	r2, r3
 8007690:	bf8c      	ite	hi
 8007692:	2301      	movhi	r3, #1
 8007694:	2300      	movls	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	1ad2      	subs	r2, r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	601a      	str	r2, [r3, #0]
        c = z; i++; d++;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	3301      	adds	r3, #1
 80076ae:	61fb      	str	r3, [r7, #28]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3304      	adds	r3, #4
 80076b4:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e5      	bne.n	8007688 <mpi_sub_hlp+0x78>
    }
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	3724      	adds	r7, #36	; 0x24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b08a      	sub	sp, #40	; 0x28
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	68b8      	ldr	r0, [r7, #8]
 80076da:	f7ff fda6 	bl	800722a <mbedtls_mpi_cmp_abs>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	da02      	bge.n	80076ea <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80076e4:	f06f 0309 	mvn.w	r3, #9
 80076e8:	e04f      	b.n	800778a <mbedtls_mpi_sub_abs+0xc0>

    mbedtls_mpi_init( &TB );
 80076ea:	f107 0314 	add.w	r3, r7, #20
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff fa08 	bl	8006b04 <mbedtls_mpi_init>

    if( X == B )
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d10c      	bne.n	8007716 <mbedtls_mpi_sub_abs+0x4c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80076fc:	f107 0314 	add.w	r3, r7, #20
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff fa7e 	bl	8006c04 <mbedtls_mpi_copy>
 8007708:	6278      	str	r0, [r7, #36]	; 0x24
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	d133      	bne.n	8007778 <mbedtls_mpi_sub_abs+0xae>
        B = &TB;
 8007710:	f107 0314 	add.w	r3, r7, #20
 8007714:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	429a      	cmp	r2, r3
 800771c:	d007      	beq.n	800772e <mbedtls_mpi_sub_abs+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800771e:	68b9      	ldr	r1, [r7, #8]
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff fa6f 	bl	8006c04 <mbedtls_mpi_copy>
 8007726:	6278      	str	r0, [r7, #36]	; 0x24
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	d126      	bne.n	800777c <mbedtls_mpi_sub_abs+0xb2>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	601a      	str	r2, [r3, #0]

    ret = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	627b      	str	r3, [r7, #36]	; 0x24

    for( n = B->n; n > 0; n-- )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	623b      	str	r3, [r7, #32]
 800773e:	e00d      	b.n	800775c <mbedtls_mpi_sub_abs+0x92>
        if( B->p[n - 1] != 0 )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800774a:	3b01      	subs	r3, #1
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d106      	bne.n	8007764 <mbedtls_mpi_sub_abs+0x9a>
    for( n = B->n; n > 0; n-- )
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	3b01      	subs	r3, #1
 800775a:	623b      	str	r3, [r7, #32]
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1ee      	bne.n	8007740 <mbedtls_mpi_sub_abs+0x76>
 8007762:	e000      	b.n	8007766 <mbedtls_mpi_sub_abs+0x9c>
            break;
 8007764:	bf00      	nop

    mpi_sub_hlp( n, B->p, X->p );
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6899      	ldr	r1, [r3, #8]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	461a      	mov	r2, r3
 8007770:	6a38      	ldr	r0, [r7, #32]
 8007772:	f7ff ff4d 	bl	8007610 <mpi_sub_hlp>
 8007776:	e002      	b.n	800777e <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8007778:	bf00      	nop
 800777a:	e000      	b.n	800777e <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800777c:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB );
 800777e:	f107 0314 	add.w	r3, r7, #20
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff f9d5 	bl	8006b32 <mbedtls_mpi_free>

    return( ret );
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800778a:	4618      	mov	r0, r3
 800778c:	3728      	adds	r7, #40	; 0x28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b086      	sub	sp, #24
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
    int ret, s = A->s;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	613b      	str	r3, [r7, #16]

    if( A->s * B->s < 0 )
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6812      	ldr	r2, [r2, #0]
 80077ac:	fb02 f303 	mul.w	r3, r2, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da21      	bge.n	80077f8 <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	68b8      	ldr	r0, [r7, #8]
 80077b8:	f7ff fd37 	bl	800722a <mbedtls_mpi_cmp_abs>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	db0c      	blt.n	80077dc <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7ff ff7f 	bl	80076ca <mbedtls_mpi_sub_abs>
 80077cc:	6178      	str	r0, [r7, #20]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11e      	bne.n	8007812 <mbedtls_mpi_add_mpi+0x80>
            X->s =  s;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	e01f      	b.n	800781c <mbedtls_mpi_add_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff ff72 	bl	80076ca <mbedtls_mpi_sub_abs>
 80077e6:	6178      	str	r0, [r7, #20]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d113      	bne.n	8007816 <mbedtls_mpi_add_mpi+0x84>
            X->s = -s;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	425a      	negs	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	e011      	b.n	800781c <mbedtls_mpi_add_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7ff fe53 	bl	80074a8 <mbedtls_mpi_add_abs>
 8007802:	6178      	str	r0, [r7, #20]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d107      	bne.n	800781a <mbedtls_mpi_add_mpi+0x88>
        X->s = s;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	e004      	b.n	800781c <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8007812:	bf00      	nop
 8007814:	e002      	b.n	800781c <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8007816:	bf00      	nop
 8007818:	e000      	b.n	800781c <mbedtls_mpi_add_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800781a:	bf00      	nop
    }

cleanup:

    return( ret );
 800781c:	697b      	ldr	r3, [r7, #20]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
    int ret, s = A->s;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	613b      	str	r3, [r7, #16]

    if( A->s * B->s > 0 )
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6812      	ldr	r2, [r2, #0]
 8007840:	fb02 f303 	mul.w	r3, r2, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	dd21      	ble.n	800788c <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	68b8      	ldr	r0, [r7, #8]
 800784c:	f7ff fced 	bl	800722a <mbedtls_mpi_cmp_abs>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	db0c      	blt.n	8007870 <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff ff35 	bl	80076ca <mbedtls_mpi_sub_abs>
 8007860:	6178      	str	r0, [r7, #20]
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11e      	bne.n	80078a6 <mbedtls_mpi_sub_mpi+0x80>
            X->s =  s;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	e01f      	b.n	80078b0 <mbedtls_mpi_sub_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff ff28 	bl	80076ca <mbedtls_mpi_sub_abs>
 800787a:	6178      	str	r0, [r7, #20]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d113      	bne.n	80078aa <mbedtls_mpi_sub_mpi+0x84>
            X->s = -s;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	425a      	negs	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	e011      	b.n	80078b0 <mbedtls_mpi_sub_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff fe09 	bl	80074a8 <mbedtls_mpi_add_abs>
 8007896:	6178      	str	r0, [r7, #20]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d107      	bne.n	80078ae <mbedtls_mpi_sub_mpi+0x88>
        X->s = s;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	e004      	b.n	80078b0 <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80078a6:	bf00      	nop
 80078a8:	e002      	b.n	80078b0 <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80078aa:	bf00      	nop
 80078ac:	e000      	b.n	80078b0 <mbedtls_mpi_sub_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80078ae:	bf00      	nop
    }

cleanup:

    return( ret );
 80078b0:	697b      	ldr	r3, [r7, #20]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b088      	sub	sp, #32
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	bfb8      	it	lt
 80078cc:	425b      	neglt	r3, r3
 80078ce:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da02      	bge.n	80078dc <mbedtls_mpi_add_int+0x22>
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
 80078da:	e000      	b.n	80078de <mbedtls_mpi_add_int+0x24>
 80078dc:	2301      	movs	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 80078e0:	2301      	movs	r3, #1
 80078e2:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 80078e4:	f107 0310 	add.w	r3, r7, #16
 80078e8:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80078ea:	f107 0314 	add.w	r3, r7, #20
 80078ee:	461a      	mov	r2, r3
 80078f0:	68b9      	ldr	r1, [r7, #8]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7ff ff4d 	bl	8007792 <mbedtls_mpi_add_mpi>
 80078f8:	4603      	mov	r3, r0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3720      	adds	r7, #32
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b088      	sub	sp, #32
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	bfb8      	it	lt
 8007914:	425b      	neglt	r3, r3
 8007916:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	da02      	bge.n	8007924 <mbedtls_mpi_sub_int+0x22>
 800791e:	f04f 33ff 	mov.w	r3, #4294967295
 8007922:	e000      	b.n	8007926 <mbedtls_mpi_sub_int+0x24>
 8007924:	2301      	movs	r3, #1
 8007926:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8007928:	2301      	movs	r3, #1
 800792a:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800792c:	f107 0310 	add.w	r3, r7, #16
 8007930:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 8007932:	f107 0314 	add.w	r3, r7, #20
 8007936:	461a      	mov	r2, r3
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f7ff ff73 	bl	8007826 <mbedtls_mpi_sub_mpi>
 8007940:	4603      	mov	r3, r0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800794a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800794e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007952:	af00      	add	r7, sp, #0
 8007954:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007958:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 800795c:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8007960:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    mbedtls_mpi_uint c = 0, t = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800796a:	2300      	movs	r3, #0
 800796c:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8007970:	f000 bfe7 	b.w	8008942 <mpi_mul_hlp+0xff8>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8007974:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007978:	1d13      	adds	r3, r2, #4
 800797a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800797e:	6813      	ldr	r3, [r2, #0]
 8007980:	2200      	movs	r2, #0
 8007982:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8007986:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 800798a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800798e:	2200      	movs	r2, #0
 8007990:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8007994:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8007998:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 800799c:	460b      	mov	r3, r1
 800799e:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80079a2:	fb02 f203 	mul.w	r2, r2, r3
 80079a6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80079aa:	e9c7 018e 	strd	r0, r1, [r7, #568]	; 0x238
 80079ae:	4601      	mov	r1, r0
 80079b0:	fb01 f303 	mul.w	r3, r1, r3
 80079b4:	4413      	add	r3, r2
 80079b6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80079ba:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80079be:	fba2 1201 	umull	r1, r2, r2, r1
 80079c2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80079c6:	460a      	mov	r2, r1
 80079c8:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 80079cc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80079d0:	4413      	add	r3, r2
 80079d2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80079d6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80079da:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80079de:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80079e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80079e6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80079ea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80079ee:	f04f 0000 	mov.w	r0, #0
 80079f2:	f04f 0100 	mov.w	r1, #0
 80079f6:	0018      	movs	r0, r3
 80079f8:	2100      	movs	r1, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007a00:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007a04:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007a08:	4413      	add	r3, r2
 8007a0a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007a0e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007a12:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007a16:	429a      	cmp	r2, r3
 8007a18:	bf34      	ite	cc
 8007a1a:	2301      	movcc	r3, #1
 8007a1c:	2300      	movcs	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007a26:	4413      	add	r3, r2
 8007a28:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007a2c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007a36:	4413      	add	r3, r2
 8007a38:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007a3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007a46:	4293      	cmp	r3, r2
 8007a48:	bf34      	ite	cc
 8007a4a:	2301      	movcc	r3, #1
 8007a4c:	2300      	movcs	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007a56:	4413      	add	r3, r2
 8007a58:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007a5c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007a60:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007a64:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007a68:	1d13      	adds	r3, r2, #4
 8007a6a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007a6e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007a78:	1d13      	adds	r3, r2, #4
 8007a7a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007a7e:	6813      	ldr	r3, [r2, #0]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8007a86:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8007a8a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8007a94:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8007a98:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8007aa2:	fb02 f203 	mul.w	r2, r2, r3
 8007aa6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8007aaa:	e9c7 018a 	strd	r0, r1, [r7, #552]	; 0x228
 8007aae:	4601      	mov	r1, r0
 8007ab0:	fb01 f303 	mul.w	r3, r1, r3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8007aba:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007abe:	fba2 1201 	umull	r1, r2, r2, r1
 8007ac2:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007ac6:	460a      	mov	r2, r1
 8007ac8:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8007acc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8007ad6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8007ada:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007ade:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007ae2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007ae6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007aea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007aee:	f04f 0000 	mov.w	r0, #0
 8007af2:	f04f 0100 	mov.w	r1, #0
 8007af6:	0018      	movs	r0, r3
 8007af8:	2100      	movs	r1, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007b00:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007b04:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007b08:	4413      	add	r3, r2
 8007b0a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007b0e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007b12:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007b16:	429a      	cmp	r2, r3
 8007b18:	bf34      	ite	cc
 8007b1a:	2301      	movcc	r3, #1
 8007b1c:	2300      	movcs	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007b26:	4413      	add	r3, r2
 8007b28:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007b2c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007b36:	4413      	add	r3, r2
 8007b38:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007b3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007b46:	4293      	cmp	r3, r2
 8007b48:	bf34      	ite	cc
 8007b4a:	2301      	movcc	r3, #1
 8007b4c:	2300      	movcs	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007b56:	4413      	add	r3, r2
 8007b58:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007b5c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007b60:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007b64:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007b68:	1d13      	adds	r3, r2, #4
 8007b6a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007b6e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007b72:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8007b74:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007b78:	1d13      	adds	r3, r2, #4
 8007b7a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007b7e:	6813      	ldr	r3, [r2, #0]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8007b86:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007b8a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8007b94:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8007b98:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8007ba2:	fb02 f203 	mul.w	r2, r2, r3
 8007ba6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007baa:	e9c7 0186 	strd	r0, r1, [r7, #536]	; 0x218
 8007bae:	4601      	mov	r1, r0
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8007bba:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8007bbe:	fba2 1201 	umull	r1, r2, r2, r1
 8007bc2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8007bc6:	460a      	mov	r2, r1
 8007bc8:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8007bcc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007bd6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8007bda:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007bde:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007be2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007be6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007bea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007bee:	f04f 0000 	mov.w	r0, #0
 8007bf2:	f04f 0100 	mov.w	r1, #0
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007c00:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007c04:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007c08:	4413      	add	r3, r2
 8007c0a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007c0e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007c12:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007c16:	429a      	cmp	r2, r3
 8007c18:	bf34      	ite	cc
 8007c1a:	2301      	movcc	r3, #1
 8007c1c:	2300      	movcs	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007c26:	4413      	add	r3, r2
 8007c28:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007c2c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007c36:	4413      	add	r3, r2
 8007c38:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007c3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007c46:	4293      	cmp	r3, r2
 8007c48:	bf34      	ite	cc
 8007c4a:	2301      	movcc	r3, #1
 8007c4c:	2300      	movcs	r3, #0
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007c56:	4413      	add	r3, r2
 8007c58:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007c5c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007c60:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007c64:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007c68:	1d13      	adds	r3, r2, #4
 8007c6a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007c6e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007c78:	1d13      	adds	r3, r2, #4
 8007c7a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007c7e:	6813      	ldr	r3, [r2, #0]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8007c86:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8007c8a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8007c94:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007c98:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8007ca2:	fb02 f203 	mul.w	r2, r2, r3
 8007ca6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007caa:	e9c7 0182 	strd	r0, r1, [r7, #520]	; 0x208
 8007cae:	4601      	mov	r1, r0
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8007cba:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8007cbe:	fba2 1201 	umull	r1, r2, r2, r1
 8007cc2:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8007cc6:	460a      	mov	r2, r1
 8007cc8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8007ccc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007cd6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8007cda:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007cde:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007ce2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007ce6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007cea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007cee:	f04f 0000 	mov.w	r0, #0
 8007cf2:	f04f 0100 	mov.w	r1, #0
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007d00:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007d04:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007d08:	4413      	add	r3, r2
 8007d0a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007d0e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007d12:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007d16:	429a      	cmp	r2, r3
 8007d18:	bf34      	ite	cc
 8007d1a:	2301      	movcc	r3, #1
 8007d1c:	2300      	movcs	r3, #0
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007d26:	4413      	add	r3, r2
 8007d28:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007d2c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007d36:	4413      	add	r3, r2
 8007d38:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007d3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007d46:	4293      	cmp	r3, r2
 8007d48:	bf34      	ite	cc
 8007d4a:	2301      	movcc	r3, #1
 8007d4c:	2300      	movcs	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007d56:	4413      	add	r3, r2
 8007d58:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007d5c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007d60:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007d64:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007d68:	1d13      	adds	r3, r2, #4
 8007d6a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007d6e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007d72:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8007d74:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007d78:	1d13      	adds	r3, r2, #4
 8007d7a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007d7e:	6813      	ldr	r3, [r2, #0]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8007d86:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8007d8a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8007d94:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8007d98:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007da2:	fb02 f203 	mul.w	r2, r2, r3
 8007da6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007daa:	e9c7 017e 	strd	r0, r1, [r7, #504]	; 0x1f8
 8007dae:	4601      	mov	r1, r0
 8007db0:	fb01 f303 	mul.w	r3, r1, r3
 8007db4:	4413      	add	r3, r2
 8007db6:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8007dba:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8007dbe:	fba2 1201 	umull	r1, r2, r2, r1
 8007dc2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007dc6:	460a      	mov	r2, r1
 8007dc8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007dcc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007dd6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8007dda:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007dde:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007de2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007de6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007dea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007dee:	f04f 0000 	mov.w	r0, #0
 8007df2:	f04f 0100 	mov.w	r1, #0
 8007df6:	0018      	movs	r0, r3
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007e00:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007e04:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007e08:	4413      	add	r3, r2
 8007e0a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007e0e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007e12:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007e16:	429a      	cmp	r2, r3
 8007e18:	bf34      	ite	cc
 8007e1a:	2301      	movcc	r3, #1
 8007e1c:	2300      	movcs	r3, #0
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007e26:	4413      	add	r3, r2
 8007e28:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007e2c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007e36:	4413      	add	r3, r2
 8007e38:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007e3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007e46:	4293      	cmp	r3, r2
 8007e48:	bf34      	ite	cc
 8007e4a:	2301      	movcc	r3, #1
 8007e4c:	2300      	movcs	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007e56:	4413      	add	r3, r2
 8007e58:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007e5c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007e60:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007e64:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007e68:	1d13      	adds	r3, r2, #4
 8007e6a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007e6e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007e78:	1d13      	adds	r3, r2, #4
 8007e7a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007e7e:	6813      	ldr	r3, [r2, #0]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8007e86:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8007e8a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007e94:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8007e98:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007ea2:	fb02 f203 	mul.w	r2, r2, r3
 8007ea6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007eaa:	e9c7 017a 	strd	r0, r1, [r7, #488]	; 0x1e8
 8007eae:	4601      	mov	r1, r0
 8007eb0:	fb01 f303 	mul.w	r3, r1, r3
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007eba:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8007ebe:	fba2 1201 	umull	r1, r2, r2, r1
 8007ec2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8007ec6:	460a      	mov	r2, r1
 8007ec8:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8007ecc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ed6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8007eda:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007ede:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007ee2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007ee6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007eea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007eee:	f04f 0000 	mov.w	r0, #0
 8007ef2:	f04f 0100 	mov.w	r1, #0
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007f00:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007f04:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007f08:	4413      	add	r3, r2
 8007f0a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007f0e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007f12:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007f16:	429a      	cmp	r2, r3
 8007f18:	bf34      	ite	cc
 8007f1a:	2301      	movcc	r3, #1
 8007f1c:	2300      	movcs	r3, #0
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007f26:	4413      	add	r3, r2
 8007f28:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007f2c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007f36:	4413      	add	r3, r2
 8007f38:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007f3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007f46:	4293      	cmp	r3, r2
 8007f48:	bf34      	ite	cc
 8007f4a:	2301      	movcc	r3, #1
 8007f4c:	2300      	movcs	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007f56:	4413      	add	r3, r2
 8007f58:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007f5c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007f60:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007f64:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007f68:	1d13      	adds	r3, r2, #4
 8007f6a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007f6e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007f72:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8007f74:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007f78:	1d13      	adds	r3, r2, #4
 8007f7a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007f7e:	6813      	ldr	r3, [r2, #0]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8007f86:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8007f8a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8007f94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8007f98:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8007fa2:	fb02 f203 	mul.w	r2, r2, r3
 8007fa6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007faa:	e9c7 0176 	strd	r0, r1, [r7, #472]	; 0x1d8
 8007fae:	4601      	mov	r1, r0
 8007fb0:	fb01 f303 	mul.w	r3, r1, r3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007fba:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8007fbe:	fba2 1201 	umull	r1, r2, r2, r1
 8007fc2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8007fc6:	460a      	mov	r2, r1
 8007fc8:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8007fcc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007fd6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8007fda:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007fde:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007fe2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007fe6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007fea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007fee:	f04f 0000 	mov.w	r0, #0
 8007ff2:	f04f 0100 	mov.w	r1, #0
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008000:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008004:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008008:	4413      	add	r3, r2
 800800a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800800e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008012:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008016:	429a      	cmp	r2, r3
 8008018:	bf34      	ite	cc
 800801a:	2301      	movcc	r3, #1
 800801c:	2300      	movcs	r3, #0
 800801e:	b2db      	uxtb	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008026:	4413      	add	r3, r2
 8008028:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800802c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008036:	4413      	add	r3, r2
 8008038:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800803c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008046:	4293      	cmp	r3, r2
 8008048:	bf34      	ite	cc
 800804a:	2301      	movcc	r3, #1
 800804c:	2300      	movcs	r3, #0
 800804e:	b2db      	uxtb	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008056:	4413      	add	r3, r2
 8008058:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800805c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008060:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008064:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008068:	1d13      	adds	r3, r2, #4
 800806a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800806e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008078:	1d13      	adds	r3, r2, #4
 800807a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800807e:	6813      	ldr	r3, [r2, #0]
 8008080:	2200      	movs	r2, #0
 8008082:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008086:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800808a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800808e:	2200      	movs	r2, #0
 8008090:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008094:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8008098:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800809c:	460b      	mov	r3, r1
 800809e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80080a2:	fb02 f203 	mul.w	r2, r2, r3
 80080a6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80080aa:	e9c7 0172 	strd	r0, r1, [r7, #456]	; 0x1c8
 80080ae:	4601      	mov	r1, r0
 80080b0:	fb01 f303 	mul.w	r3, r1, r3
 80080b4:	4413      	add	r3, r2
 80080b6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80080ba:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80080be:	fba2 1201 	umull	r1, r2, r2, r1
 80080c2:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80080c6:	460a      	mov	r2, r1
 80080c8:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80080cc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80080d0:	4413      	add	r3, r2
 80080d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080d6:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80080da:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80080de:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80080e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80080e6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80080ea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80080ee:	f04f 0000 	mov.w	r0, #0
 80080f2:	f04f 0100 	mov.w	r1, #0
 80080f6:	0018      	movs	r0, r3
 80080f8:	2100      	movs	r1, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008100:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008104:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008108:	4413      	add	r3, r2
 800810a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800810e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008112:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008116:	429a      	cmp	r2, r3
 8008118:	bf34      	ite	cc
 800811a:	2301      	movcc	r3, #1
 800811c:	2300      	movcs	r3, #0
 800811e:	b2db      	uxtb	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008126:	4413      	add	r3, r2
 8008128:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800812c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008136:	4413      	add	r3, r2
 8008138:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800813c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008146:	4293      	cmp	r3, r2
 8008148:	bf34      	ite	cc
 800814a:	2301      	movcc	r3, #1
 800814c:	2300      	movcs	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008156:	4413      	add	r3, r2
 8008158:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800815c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008160:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008164:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008168:	1d13      	adds	r3, r2, #4
 800816a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800816e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008172:	6013      	str	r3, [r2, #0]

        MULADDC_CORE   MULADDC_CORE
 8008174:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008178:	1d13      	adds	r3, r2, #4
 800817a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800817e:	6813      	ldr	r3, [r2, #0]
 8008180:	2200      	movs	r2, #0
 8008182:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008186:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800818a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800818e:	2200      	movs	r2, #0
 8008190:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8008194:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8008198:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800819c:	460b      	mov	r3, r1
 800819e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80081a2:	fb02 f203 	mul.w	r2, r2, r3
 80081a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80081aa:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
 80081ae:	4601      	mov	r1, r0
 80081b0:	fb01 f303 	mul.w	r3, r1, r3
 80081b4:	4413      	add	r3, r2
 80081b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80081ba:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80081be:	fba2 1201 	umull	r1, r2, r2, r1
 80081c2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80081c6:	460a      	mov	r2, r1
 80081c8:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80081cc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80081d0:	4413      	add	r3, r2
 80081d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081d6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80081da:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80081de:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80081e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80081e6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80081ea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80081ee:	f04f 0000 	mov.w	r0, #0
 80081f2:	f04f 0100 	mov.w	r1, #0
 80081f6:	0018      	movs	r0, r3
 80081f8:	2100      	movs	r1, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008200:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008204:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008208:	4413      	add	r3, r2
 800820a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800820e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008212:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008216:	429a      	cmp	r2, r3
 8008218:	bf34      	ite	cc
 800821a:	2301      	movcc	r3, #1
 800821c:	2300      	movcs	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	461a      	mov	r2, r3
 8008222:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008226:	4413      	add	r3, r2
 8008228:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800822c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008236:	4413      	add	r3, r2
 8008238:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800823c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008246:	4293      	cmp	r3, r2
 8008248:	bf34      	ite	cc
 800824a:	2301      	movcc	r3, #1
 800824c:	2300      	movcs	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008256:	4413      	add	r3, r2
 8008258:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800825c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008260:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008264:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008268:	1d13      	adds	r3, r2, #4
 800826a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800826e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008278:	1d13      	adds	r3, r2, #4
 800827a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800827e:	6813      	ldr	r3, [r2, #0]
 8008280:	2200      	movs	r2, #0
 8008282:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008286:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800828a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800828e:	2200      	movs	r2, #0
 8008290:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008294:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8008298:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 800829c:	460b      	mov	r3, r1
 800829e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80082a2:	fb02 f203 	mul.w	r2, r2, r3
 80082a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80082aa:	e9c7 016a 	strd	r0, r1, [r7, #424]	; 0x1a8
 80082ae:	4601      	mov	r1, r0
 80082b0:	fb01 f303 	mul.w	r3, r1, r3
 80082b4:	4413      	add	r3, r2
 80082b6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80082ba:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80082be:	fba2 1201 	umull	r1, r2, r2, r1
 80082c2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80082c6:	460a      	mov	r2, r1
 80082c8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80082cc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80082d0:	4413      	add	r3, r2
 80082d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082d6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80082da:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80082de:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80082e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80082e6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80082ea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80082ee:	f04f 0000 	mov.w	r0, #0
 80082f2:	f04f 0100 	mov.w	r1, #0
 80082f6:	0018      	movs	r0, r3
 80082f8:	2100      	movs	r1, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008300:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008304:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008308:	4413      	add	r3, r2
 800830a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800830e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008312:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008316:	429a      	cmp	r2, r3
 8008318:	bf34      	ite	cc
 800831a:	2301      	movcc	r3, #1
 800831c:	2300      	movcs	r3, #0
 800831e:	b2db      	uxtb	r3, r3
 8008320:	461a      	mov	r2, r3
 8008322:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008326:	4413      	add	r3, r2
 8008328:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800832c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008336:	4413      	add	r3, r2
 8008338:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800833c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008346:	4293      	cmp	r3, r2
 8008348:	bf34      	ite	cc
 800834a:	2301      	movcc	r3, #1
 800834c:	2300      	movcs	r3, #0
 800834e:	b2db      	uxtb	r3, r3
 8008350:	461a      	mov	r2, r3
 8008352:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008356:	4413      	add	r3, r2
 8008358:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800835c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008360:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008364:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008368:	1d13      	adds	r3, r2, #4
 800836a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800836e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008372:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008374:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008378:	1d13      	adds	r3, r2, #4
 800837a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8008386:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800838a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800838e:	2200      	movs	r2, #0
 8008390:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8008394:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8008398:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800839c:	460b      	mov	r3, r1
 800839e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80083a2:	fb02 f203 	mul.w	r2, r2, r3
 80083a6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80083aa:	e9c7 0166 	strd	r0, r1, [r7, #408]	; 0x198
 80083ae:	4601      	mov	r1, r0
 80083b0:	fb01 f303 	mul.w	r3, r1, r3
 80083b4:	4413      	add	r3, r2
 80083b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80083ba:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 80083be:	fba2 1201 	umull	r1, r2, r2, r1
 80083c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083c6:	460a      	mov	r2, r1
 80083c8:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80083cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80083d0:	4413      	add	r3, r2
 80083d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083d6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80083da:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80083de:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80083e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80083e6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80083ea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80083ee:	f04f 0000 	mov.w	r0, #0
 80083f2:	f04f 0100 	mov.w	r1, #0
 80083f6:	0018      	movs	r0, r3
 80083f8:	2100      	movs	r1, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008400:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008404:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008408:	4413      	add	r3, r2
 800840a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800840e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008412:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008416:	429a      	cmp	r2, r3
 8008418:	bf34      	ite	cc
 800841a:	2301      	movcc	r3, #1
 800841c:	2300      	movcs	r3, #0
 800841e:	b2db      	uxtb	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008426:	4413      	add	r3, r2
 8008428:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800842c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008436:	4413      	add	r3, r2
 8008438:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800843c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008446:	4293      	cmp	r3, r2
 8008448:	bf34      	ite	cc
 800844a:	2301      	movcc	r3, #1
 800844c:	2300      	movcs	r3, #0
 800844e:	b2db      	uxtb	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008456:	4413      	add	r3, r2
 8008458:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800845c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008460:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008464:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008468:	1d13      	adds	r3, r2, #4
 800846a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800846e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008478:	1d13      	adds	r3, r2, #4
 800847a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800847e:	6813      	ldr	r3, [r2, #0]
 8008480:	2200      	movs	r2, #0
 8008482:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008486:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800848a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800848e:	2200      	movs	r2, #0
 8008490:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008494:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8008498:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800849c:	460b      	mov	r3, r1
 800849e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80084a2:	fb02 f203 	mul.w	r2, r2, r3
 80084a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80084aa:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
 80084ae:	4601      	mov	r1, r0
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	4413      	add	r3, r2
 80084b6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80084ba:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 80084be:	fba2 1201 	umull	r1, r2, r2, r1
 80084c2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80084c6:	460a      	mov	r2, r1
 80084c8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80084cc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80084d0:	4413      	add	r3, r2
 80084d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084d6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80084da:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80084de:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80084e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80084e6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80084ea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80084ee:	f04f 0000 	mov.w	r0, #0
 80084f2:	f04f 0100 	mov.w	r1, #0
 80084f6:	0018      	movs	r0, r3
 80084f8:	2100      	movs	r1, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008500:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008504:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008508:	4413      	add	r3, r2
 800850a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800850e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008512:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008516:	429a      	cmp	r2, r3
 8008518:	bf34      	ite	cc
 800851a:	2301      	movcc	r3, #1
 800851c:	2300      	movcs	r3, #0
 800851e:	b2db      	uxtb	r3, r3
 8008520:	461a      	mov	r2, r3
 8008522:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008526:	4413      	add	r3, r2
 8008528:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800852c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008536:	4413      	add	r3, r2
 8008538:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800853c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008546:	4293      	cmp	r3, r2
 8008548:	bf34      	ite	cc
 800854a:	2301      	movcc	r3, #1
 800854c:	2300      	movcs	r3, #0
 800854e:	b2db      	uxtb	r3, r3
 8008550:	461a      	mov	r2, r3
 8008552:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008556:	4413      	add	r3, r2
 8008558:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800855c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008560:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008564:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008568:	1d13      	adds	r3, r2, #4
 800856a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800856e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008572:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008574:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008578:	1d13      	adds	r3, r2, #4
 800857a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800857e:	6813      	ldr	r3, [r2, #0]
 8008580:	2200      	movs	r2, #0
 8008582:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8008586:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800858a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800858e:	2200      	movs	r2, #0
 8008590:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8008594:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8008598:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800859c:	460b      	mov	r3, r1
 800859e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80085a2:	fb02 f203 	mul.w	r2, r2, r3
 80085a6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80085aa:	e9c7 015e 	strd	r0, r1, [r7, #376]	; 0x178
 80085ae:	4601      	mov	r1, r0
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	4413      	add	r3, r2
 80085b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80085ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80085be:	fba2 1201 	umull	r1, r2, r2, r1
 80085c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085c6:	460a      	mov	r2, r1
 80085c8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80085cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80085d0:	4413      	add	r3, r2
 80085d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085d6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80085da:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80085de:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80085e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80085e6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80085ea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80085ee:	f04f 0000 	mov.w	r0, #0
 80085f2:	f04f 0100 	mov.w	r1, #0
 80085f6:	0018      	movs	r0, r3
 80085f8:	2100      	movs	r1, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008600:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008604:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008608:	4413      	add	r3, r2
 800860a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800860e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008612:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008616:	429a      	cmp	r2, r3
 8008618:	bf34      	ite	cc
 800861a:	2301      	movcc	r3, #1
 800861c:	2300      	movcs	r3, #0
 800861e:	b2db      	uxtb	r3, r3
 8008620:	461a      	mov	r2, r3
 8008622:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008626:	4413      	add	r3, r2
 8008628:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800862c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008636:	4413      	add	r3, r2
 8008638:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800863c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008646:	4293      	cmp	r3, r2
 8008648:	bf34      	ite	cc
 800864a:	2301      	movcc	r3, #1
 800864c:	2300      	movcs	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008656:	4413      	add	r3, r2
 8008658:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800865c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008660:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008664:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008668:	1d13      	adds	r3, r2, #4
 800866a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800866e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008678:	1d13      	adds	r3, r2, #4
 800867a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800867e:	6813      	ldr	r3, [r2, #0]
 8008680:	2200      	movs	r2, #0
 8008682:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8008686:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800868a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800868e:	2200      	movs	r2, #0
 8008690:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8008694:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8008698:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800869c:	460b      	mov	r3, r1
 800869e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80086a2:	fb02 f203 	mul.w	r2, r2, r3
 80086a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80086aa:	e9c7 015a 	strd	r0, r1, [r7, #360]	; 0x168
 80086ae:	4601      	mov	r1, r0
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	4413      	add	r3, r2
 80086b6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80086ba:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80086be:	fba2 ab01 	umull	sl, fp, r2, r1
 80086c2:	445b      	add	r3, fp
 80086c4:	469b      	mov	fp, r3
 80086c6:	e9c7 ab96 	strd	sl, fp, [r7, #600]	; 0x258
 80086ca:	e9c7 ab96 	strd	sl, fp, [r7, #600]	; 0x258
 80086ce:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80086d2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80086d6:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80086da:	f04f 0000 	mov.w	r0, #0
 80086de:	f04f 0100 	mov.w	r1, #0
 80086e2:	0018      	movs	r0, r3
 80086e4:	2100      	movs	r1, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80086ec:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80086f0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80086f4:	4413      	add	r3, r2
 80086f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80086fa:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80086fe:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008702:	429a      	cmp	r2, r3
 8008704:	bf34      	ite	cc
 8008706:	2301      	movcc	r3, #1
 8008708:	2300      	movcs	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008712:	4413      	add	r3, r2
 8008714:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008718:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008722:	4413      	add	r3, r2
 8008724:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008728:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008732:	4293      	cmp	r3, r2
 8008734:	bf34      	ite	cc
 8008736:	2301      	movcc	r3, #1
 8008738:	2300      	movcs	r3, #0
 800873a:	b2db      	uxtb	r3, r3
 800873c:	461a      	mov	r2, r3
 800873e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008742:	4413      	add	r3, r2
 8008744:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008748:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800874c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008750:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008754:	1d13      	adds	r3, r2, #4
 8008756:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800875a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800875e:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008760:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008764:	1d13      	adds	r3, r2, #4
 8008766:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800876a:	6813      	ldr	r3, [r2, #0]
 800876c:	2200      	movs	r2, #0
 800876e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008772:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8008776:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800877a:	2200      	movs	r2, #0
 800877c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008780:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008784:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8008788:	460b      	mov	r3, r1
 800878a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800878e:	fb02 f203 	mul.w	r2, r2, r3
 8008792:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008796:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
 800879a:	4601      	mov	r1, r0
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	4413      	add	r3, r2
 80087a2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80087a6:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80087aa:	fba2 8901 	umull	r8, r9, r2, r1
 80087ae:	444b      	add	r3, r9
 80087b0:	4699      	mov	r9, r3
 80087b2:	e9c7 8996 	strd	r8, r9, [r7, #600]	; 0x258
 80087b6:	e9c7 8996 	strd	r8, r9, [r7, #600]	; 0x258
 80087ba:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80087be:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80087c2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 0100 	mov.w	r1, #0
 80087ce:	0018      	movs	r0, r3
 80087d0:	2100      	movs	r1, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80087d8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80087dc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80087e0:	4413      	add	r3, r2
 80087e2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80087e6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80087ea:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80087ee:	429a      	cmp	r2, r3
 80087f0:	bf34      	ite	cc
 80087f2:	2301      	movcc	r3, #1
 80087f4:	2300      	movcs	r3, #0
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	461a      	mov	r2, r3
 80087fa:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80087fe:	4413      	add	r3, r2
 8008800:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008804:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800880e:	4413      	add	r3, r2
 8008810:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008814:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800881e:	4293      	cmp	r3, r2
 8008820:	bf34      	ite	cc
 8008822:	2301      	movcc	r3, #1
 8008824:	2300      	movcs	r3, #0
 8008826:	b2db      	uxtb	r3, r3
 8008828:	461a      	mov	r2, r3
 800882a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800882e:	4413      	add	r3, r2
 8008830:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008834:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008838:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800883c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008840:	1d13      	adds	r3, r2, #4
 8008842:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008846:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008850:	1d13      	adds	r3, r2, #4
 8008852:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008856:	6813      	ldr	r3, [r2, #0]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800885e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008862:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008866:	2200      	movs	r2, #0
 8008868:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800886c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008870:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8008874:	460b      	mov	r3, r1
 8008876:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800887a:	fb02 f203 	mul.w	r2, r2, r3
 800887e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008882:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
 8008886:	4601      	mov	r1, r0
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	4413      	add	r3, r2
 800888e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008892:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008896:	fba2 4501 	umull	r4, r5, r2, r1
 800889a:	442b      	add	r3, r5
 800889c:	461d      	mov	r5, r3
 800889e:	e9c7 4596 	strd	r4, r5, [r7, #600]	; 0x258
 80088a2:	e9c7 4596 	strd	r4, r5, [r7, #600]	; 0x258
 80088a6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80088aa:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80088ae:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f04f 0100 	mov.w	r1, #0
 80088ba:	0018      	movs	r0, r3
 80088bc:	2100      	movs	r1, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80088c4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80088c8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80088cc:	4413      	add	r3, r2
 80088ce:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80088d2:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80088d6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80088da:	429a      	cmp	r2, r3
 80088dc:	bf34      	ite	cc
 80088de:	2301      	movcc	r3, #1
 80088e0:	2300      	movcs	r3, #0
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80088ea:	4413      	add	r3, r2
 80088ec:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80088f0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80088fa:	4413      	add	r3, r2
 80088fc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008900:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800890a:	4293      	cmp	r3, r2
 800890c:	bf34      	ite	cc
 800890e:	2301      	movcc	r3, #1
 8008910:	2300      	movcs	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800891a:	4413      	add	r3, r2
 800891c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008920:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008924:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008928:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800892c:	1d13      	adds	r3, r2, #4
 800892e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008932:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008936:	6013      	str	r3, [r2, #0]
    for( ; i >= 16; i -= 16 )
 8008938:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800893c:	3b10      	subs	r3, #16
 800893e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008942:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008946:	2b0f      	cmp	r3, #15
 8008948:	f63f a814 	bhi.w	8007974 <mpi_mul_hlp+0x2a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800894c:	e3c8      	b.n	80090e0 <mpi_mul_hlp+0x1796>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 800894e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008952:	1d13      	adds	r3, r2, #4
 8008954:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008958:	6813      	ldr	r3, [r2, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008960:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008964:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008968:	2200      	movs	r2, #0
 800896a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800896e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008972:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8008976:	462b      	mov	r3, r5
 8008978:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800897c:	4642      	mov	r2, r8
 800897e:	fb02 f203 	mul.w	r2, r2, r3
 8008982:	464b      	mov	r3, r9
 8008984:	4621      	mov	r1, r4
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	4622      	mov	r2, r4
 800898e:	4641      	mov	r1, r8
 8008990:	fba2 1201 	umull	r1, r2, r2, r1
 8008994:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008998:	460a      	mov	r2, r1
 800899a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800899e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80089a2:	4413      	add	r3, r2
 80089a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80089a8:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80089ac:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 80089b0:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 80089b4:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80089b8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80089bc:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80089c0:	f04f 0000 	mov.w	r0, #0
 80089c4:	f04f 0100 	mov.w	r1, #0
 80089c8:	0018      	movs	r0, r3
 80089ca:	2100      	movs	r1, #0
 80089cc:	4603      	mov	r3, r0
 80089ce:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80089d2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80089d6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80089da:	4413      	add	r3, r2
 80089dc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80089e0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80089e4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80089e8:	429a      	cmp	r2, r3
 80089ea:	bf34      	ite	cc
 80089ec:	2301      	movcc	r3, #1
 80089ee:	2300      	movcs	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80089f8:	4413      	add	r3, r2
 80089fa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80089fe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008a08:	4413      	add	r3, r2
 8008a0a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008a0e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	bf34      	ite	cc
 8008a1c:	2301      	movcc	r3, #1
 8008a1e:	2300      	movcs	r3, #0
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	461a      	mov	r2, r3
 8008a24:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008a28:	4413      	add	r3, r2
 8008a2a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008a2e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008a32:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008a36:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008a3a:	1d13      	adds	r3, r2, #4
 8008a3c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008a40:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008a4a:	1d13      	adds	r3, r2, #4
 8008a4c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008a50:	6813      	ldr	r3, [r2, #0]
 8008a52:	2200      	movs	r2, #0
 8008a54:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a58:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	673b      	str	r3, [r7, #112]	; 0x70
 8008a60:	677a      	str	r2, [r7, #116]	; 0x74
 8008a62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008a66:	462b      	mov	r3, r5
 8008a68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	fb02 f203 	mul.w	r2, r2, r3
 8008a72:	464b      	mov	r3, r9
 8008a74:	4621      	mov	r1, r4
 8008a76:	fb01 f303 	mul.w	r3, r1, r3
 8008a7a:	4413      	add	r3, r2
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	4641      	mov	r1, r8
 8008a80:	fba2 1201 	umull	r1, r2, r2, r1
 8008a84:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8008a88:	460a      	mov	r2, r1
 8008a8a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8008a8e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008a92:	4413      	add	r3, r2
 8008a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a98:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8008a9c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008aa0:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008aa4:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008aa8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008aac:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008ab0:	f04f 0000 	mov.w	r0, #0
 8008ab4:	f04f 0100 	mov.w	r1, #0
 8008ab8:	0018      	movs	r0, r3
 8008aba:	2100      	movs	r1, #0
 8008abc:	4603      	mov	r3, r0
 8008abe:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008ac2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008ac6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008aca:	4413      	add	r3, r2
 8008acc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008ad0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008ad4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	bf34      	ite	cc
 8008adc:	2301      	movcc	r3, #1
 8008ade:	2300      	movcs	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008ae8:	4413      	add	r3, r2
 8008aea:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008aee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008af8:	4413      	add	r3, r2
 8008afa:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008afe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	bf34      	ite	cc
 8008b0c:	2301      	movcc	r3, #1
 8008b0e:	2300      	movcs	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	461a      	mov	r2, r3
 8008b14:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008b18:	4413      	add	r3, r2
 8008b1a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008b1e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008b22:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008b26:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008b2a:	1d13      	adds	r3, r2, #4
 8008b2c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008b30:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008b34:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008b36:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008b3a:	1d13      	adds	r3, r2, #4
 8008b3c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008b40:	6813      	ldr	r3, [r2, #0]
 8008b42:	2200      	movs	r2, #0
 8008b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b48:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b50:	667a      	str	r2, [r7, #100]	; 0x64
 8008b52:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8008b56:	462b      	mov	r3, r5
 8008b58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	fb02 f203 	mul.w	r2, r2, r3
 8008b62:	464b      	mov	r3, r9
 8008b64:	4621      	mov	r1, r4
 8008b66:	fb01 f303 	mul.w	r3, r1, r3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	4622      	mov	r2, r4
 8008b6e:	4641      	mov	r1, r8
 8008b70:	fba2 1201 	umull	r1, r2, r2, r1
 8008b74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b78:	460a      	mov	r2, r1
 8008b7a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8008b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b82:	4413      	add	r3, r2
 8008b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b88:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8008b8c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008b90:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008b94:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008b98:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008b9c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008ba0:	f04f 0000 	mov.w	r0, #0
 8008ba4:	f04f 0100 	mov.w	r1, #0
 8008ba8:	0018      	movs	r0, r3
 8008baa:	2100      	movs	r1, #0
 8008bac:	4603      	mov	r3, r0
 8008bae:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008bb2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008bb6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008bba:	4413      	add	r3, r2
 8008bbc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008bc0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008bc4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	bf34      	ite	cc
 8008bcc:	2301      	movcc	r3, #1
 8008bce:	2300      	movcs	r3, #0
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008bd8:	4413      	add	r3, r2
 8008bda:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008bde:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008be8:	4413      	add	r3, r2
 8008bea:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008bee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	bf34      	ite	cc
 8008bfc:	2301      	movcc	r3, #1
 8008bfe:	2300      	movcs	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	461a      	mov	r2, r3
 8008c04:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008c08:	4413      	add	r3, r2
 8008c0a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008c0e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008c12:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008c16:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008c1a:	1d13      	adds	r3, r2, #4
 8008c1c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008c20:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008c2a:	1d13      	adds	r3, r2, #4
 8008c2c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008c30:	6813      	ldr	r3, [r2, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008c38:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c40:	657a      	str	r2, [r7, #84]	; 0x54
 8008c42:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8008c46:	462b      	mov	r3, r5
 8008c48:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	fb02 f203 	mul.w	r2, r2, r3
 8008c52:	464b      	mov	r3, r9
 8008c54:	4621      	mov	r1, r4
 8008c56:	fb01 f303 	mul.w	r3, r1, r3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4641      	mov	r1, r8
 8008c60:	fba2 1201 	umull	r1, r2, r2, r1
 8008c64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c68:	460a      	mov	r2, r1
 8008c6a:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8008c6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008c72:	4413      	add	r3, r2
 8008c74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c78:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8008c7c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008c80:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008c84:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008c88:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008c8c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008c90:	f04f 0000 	mov.w	r0, #0
 8008c94:	f04f 0100 	mov.w	r1, #0
 8008c98:	0018      	movs	r0, r3
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008ca2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008ca6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008caa:	4413      	add	r3, r2
 8008cac:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008cb0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008cb4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	bf34      	ite	cc
 8008cbc:	2301      	movcc	r3, #1
 8008cbe:	2300      	movcs	r3, #0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008cc8:	4413      	add	r3, r2
 8008cca:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008cce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008cd8:	4413      	add	r3, r2
 8008cda:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008cde:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	bf34      	ite	cc
 8008cec:	2301      	movcc	r3, #1
 8008cee:	2300      	movcs	r3, #0
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008cfe:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008d02:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008d06:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008d0a:	1d13      	adds	r3, r2, #4
 8008d0c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008d10:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008d14:	6013      	str	r3, [r2, #0]

        MULADDC_CORE   MULADDC_CORE
 8008d16:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008d1a:	1d13      	adds	r3, r2, #4
 8008d1c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008d20:	6813      	ldr	r3, [r2, #0]
 8008d22:	2200      	movs	r2, #0
 8008d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008d28:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d30:	647a      	str	r2, [r7, #68]	; 0x44
 8008d32:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8008d36:	462b      	mov	r3, r5
 8008d38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	fb02 f203 	mul.w	r2, r2, r3
 8008d42:	464b      	mov	r3, r9
 8008d44:	4621      	mov	r1, r4
 8008d46:	fb01 f303 	mul.w	r3, r1, r3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	4641      	mov	r1, r8
 8008d50:	fba2 1201 	umull	r1, r2, r2, r1
 8008d54:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008d58:	460a      	mov	r2, r1
 8008d5a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008d5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d62:	4413      	add	r3, r2
 8008d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d68:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8008d6c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008d70:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008d74:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008d78:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008d7c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008d80:	f04f 0000 	mov.w	r0, #0
 8008d84:	f04f 0100 	mov.w	r1, #0
 8008d88:	0018      	movs	r0, r3
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008d92:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008d96:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008da0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008da4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008da8:	429a      	cmp	r2, r3
 8008daa:	bf34      	ite	cc
 8008dac:	2301      	movcc	r3, #1
 8008dae:	2300      	movcs	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008db8:	4413      	add	r3, r2
 8008dba:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008dbe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008dc8:	4413      	add	r3, r2
 8008dca:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008dce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	bf34      	ite	cc
 8008ddc:	2301      	movcc	r3, #1
 8008dde:	2300      	movcs	r3, #0
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	461a      	mov	r2, r3
 8008de4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008de8:	4413      	add	r3, r2
 8008dea:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008dee:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008df2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008df6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008dfa:	1d13      	adds	r3, r2, #4
 8008dfc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008e00:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008e0a:	1d13      	adds	r3, r2, #4
 8008e0c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008e10:	6813      	ldr	r3, [r2, #0]
 8008e12:	2200      	movs	r2, #0
 8008e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e16:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e18:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e20:	637a      	str	r2, [r7, #52]	; 0x34
 8008e22:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8008e26:	462b      	mov	r3, r5
 8008e28:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	fb02 f203 	mul.w	r2, r2, r3
 8008e32:	464b      	mov	r3, r9
 8008e34:	4621      	mov	r1, r4
 8008e36:	fb01 f303 	mul.w	r3, r1, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	4641      	mov	r1, r8
 8008e40:	fba2 1201 	umull	r1, r2, r2, r1
 8008e44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e48:	460a      	mov	r2, r1
 8008e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008e52:	4413      	add	r3, r2
 8008e54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e58:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8008e5c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008e60:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008e64:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008e68:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008e6c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008e70:	f04f 0000 	mov.w	r0, #0
 8008e74:	f04f 0100 	mov.w	r1, #0
 8008e78:	0018      	movs	r0, r3
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008e82:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008e86:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008e90:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008e94:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	bf34      	ite	cc
 8008e9c:	2301      	movcc	r3, #1
 8008e9e:	2300      	movcs	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008eae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008eb8:	4413      	add	r3, r2
 8008eba:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008ebe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	bf34      	ite	cc
 8008ecc:	2301      	movcc	r3, #1
 8008ece:	2300      	movcs	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008ed8:	4413      	add	r3, r2
 8008eda:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008ede:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008ee2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008ee6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008eea:	1d13      	adds	r3, r2, #4
 8008eec:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008ef0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008ef4:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008ef6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008efa:	1d13      	adds	r3, r2, #4
 8008efc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008f00:	6813      	ldr	r3, [r2, #0]
 8008f02:	2200      	movs	r2, #0
 8008f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f08:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	623b      	str	r3, [r7, #32]
 8008f10:	627a      	str	r2, [r7, #36]	; 0x24
 8008f12:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8008f16:	462b      	mov	r3, r5
 8008f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	fb02 f203 	mul.w	r2, r2, r3
 8008f22:	464b      	mov	r3, r9
 8008f24:	4621      	mov	r1, r4
 8008f26:	fb01 f303 	mul.w	r3, r1, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	4641      	mov	r1, r8
 8008f30:	fba2 1201 	umull	r1, r2, r2, r1
 8008f34:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f38:	460a      	mov	r2, r1
 8008f3a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008f3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008f42:	4413      	add	r3, r2
 8008f44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f48:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8008f4c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008f50:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008f54:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008f58:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008f5c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008f60:	f04f 0000 	mov.w	r0, #0
 8008f64:	f04f 0100 	mov.w	r1, #0
 8008f68:	0018      	movs	r0, r3
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008f72:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008f76:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008f80:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008f84:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	bf34      	ite	cc
 8008f8c:	2301      	movcc	r3, #1
 8008f8e:	2300      	movcs	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008f98:	4413      	add	r3, r2
 8008f9a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008f9e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008fa8:	4413      	add	r3, r2
 8008faa:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008fae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	bf34      	ite	cc
 8008fbc:	2301      	movcc	r3, #1
 8008fbe:	2300      	movcs	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008fc8:	4413      	add	r3, r2
 8008fca:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008fce:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008fd2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008fd6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008fda:	1d13      	adds	r3, r2, #4
 8008fdc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008fe0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008fea:	1d13      	adds	r3, r2, #4
 8008fec:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008ff0:	6813      	ldr	r3, [r2, #0]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	61fa      	str	r2, [r7, #28]
 8008ff8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	617a      	str	r2, [r7, #20]
 8009002:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8009006:	462b      	mov	r3, r5
 8009008:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800900c:	4642      	mov	r2, r8
 800900e:	fb02 f203 	mul.w	r2, r2, r3
 8009012:	464b      	mov	r3, r9
 8009014:	4621      	mov	r1, r4
 8009016:	fb01 f303 	mul.w	r3, r1, r3
 800901a:	4413      	add	r3, r2
 800901c:	4622      	mov	r2, r4
 800901e:	4641      	mov	r1, r8
 8009020:	fba2 1201 	umull	r1, r2, r2, r1
 8009024:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009028:	460a      	mov	r2, r1
 800902a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800902e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009032:	4413      	add	r3, r2
 8009034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009038:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800903c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009040:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009044:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8009048:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800904c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8009050:	f04f 0000 	mov.w	r0, #0
 8009054:	f04f 0100 	mov.w	r1, #0
 8009058:	0018      	movs	r0, r3
 800905a:	2100      	movs	r1, #0
 800905c:	4603      	mov	r3, r0
 800905e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8009062:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8009066:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800906a:	4413      	add	r3, r2
 800906c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8009070:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8009074:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009078:	429a      	cmp	r2, r3
 800907a:	bf34      	ite	cc
 800907c:	2301      	movcc	r3, #1
 800907e:	2300      	movcs	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009088:	4413      	add	r3, r2
 800908a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800908e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009098:	4413      	add	r3, r2
 800909a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800909e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80090a8:	4293      	cmp	r3, r2
 80090aa:	bf34      	ite	cc
 80090ac:	2301      	movcc	r3, #1
 80090ae:	2300      	movcs	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	461a      	mov	r2, r3
 80090b4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80090b8:	4413      	add	r3, r2
 80090ba:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80090be:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80090c2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80090c6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80090ca:	1d13      	adds	r3, r2, #4
 80090cc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80090d0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80090d4:	6013      	str	r3, [r2, #0]
    for( ; i >= 8; i -= 8 )
 80090d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090da:	3b08      	subs	r3, #8
 80090dc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80090e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e4:	2b07      	cmp	r3, #7
 80090e6:	f63f ac32 	bhi.w	800894e <mpi_mul_hlp+0x1004>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80090ea:	e07c      	b.n	80091e6 <mpi_mul_hlp+0x189c>
    {
        MULADDC_INIT
        MULADDC_CORE
 80090ec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80090f0:	1d1a      	adds	r2, r3, #4
 80090f2:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2200      	movs	r2, #0
 80090fa:	60bb      	str	r3, [r7, #8]
 80090fc:	60fa      	str	r2, [r7, #12]
 80090fe:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8009102:	2200      	movs	r2, #0
 8009104:	603b      	str	r3, [r7, #0]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800910c:	462b      	mov	r3, r5
 800910e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8009112:	4642      	mov	r2, r8
 8009114:	fb02 f203 	mul.w	r2, r2, r3
 8009118:	464b      	mov	r3, r9
 800911a:	4621      	mov	r1, r4
 800911c:	fb01 f303 	mul.w	r3, r1, r3
 8009120:	4413      	add	r3, r2
 8009122:	4622      	mov	r2, r4
 8009124:	4641      	mov	r1, r8
 8009126:	fba2 1201 	umull	r1, r2, r2, r1
 800912a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800912e:	460a      	mov	r2, r1
 8009130:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009134:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009138:	4413      	add	r3, r2
 800913a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800913e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8009142:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
 8009146:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
 800914a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800914e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8009152:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	f04f 0300 	mov.w	r3, #0
 800915e:	000a      	movs	r2, r1
 8009160:	2300      	movs	r3, #0
 8009162:	4613      	mov	r3, r2
 8009164:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8009168:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800916c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009170:	4413      	add	r3, r2
 8009172:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8009176:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800917a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800917e:	429a      	cmp	r2, r3
 8009180:	bf34      	ite	cc
 8009182:	2301      	movcc	r3, #1
 8009184:	2300      	movcs	r3, #0
 8009186:	b2db      	uxtb	r3, r3
 8009188:	461a      	mov	r2, r3
 800918a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800918e:	4413      	add	r3, r2
 8009190:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8009194:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800919e:	4413      	add	r3, r2
 80091a0:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80091a4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80091ae:	429a      	cmp	r2, r3
 80091b0:	bf34      	ite	cc
 80091b2:	2301      	movcc	r3, #1
 80091b4:	2300      	movcs	r3, #0
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	461a      	mov	r2, r3
 80091ba:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80091be:	4413      	add	r3, r2
 80091c0:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 80091c4:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80091c8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80091cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80091d0:	1d1a      	adds	r2, r3, #4
 80091d2:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80091d6:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80091da:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 80091dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091e0:	3b01      	subs	r3, #1
 80091e2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80091e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f47f af7e 	bne.w	80090ec <mpi_mul_hlp+0x17a2>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 80091f0:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80091f4:	3301      	adds	r3, #1
 80091f6:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

    do {
        *d += c; c = ( *d < c ); d++;
 80091fa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009204:	441a      	add	r2, r3
 8009206:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8009216:	429a      	cmp	r2, r3
 8009218:	bf8c      	ite	hi
 800921a:	2301      	movhi	r3, #1
 800921c:	2300      	movls	r3, #0
 800921e:	b2db      	uxtb	r3, r3
 8009220:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009224:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009228:	3304      	adds	r3, #4
 800922a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    }
    while( c != 0 );
 800922e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e1      	bne.n	80091fa <mpi_mul_hlp+0x18b0>
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	f507 7723 	add.w	r7, r7, #652	; 0x28c
 800923e:	46bd      	mov	sp, r7
 8009240:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009244:	4770      	bx	lr

08009246 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8009246:	b590      	push	{r4, r7, lr}
 8009248:	b08f      	sub	sp, #60	; 0x3c
 800924a:	af00      	add	r7, sp, #0
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 8009252:	f107 0320 	add.w	r3, r7, #32
 8009256:	4618      	mov	r0, r3
 8009258:	f7fd fc54 	bl	8006b04 <mbedtls_mpi_init>
 800925c:	f107 0314 	add.w	r3, r7, #20
 8009260:	4618      	mov	r0, r3
 8009262:	f7fd fc4f 	bl	8006b04 <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	429a      	cmp	r2, r3
 800926c:	d10c      	bne.n	8009288 <mbedtls_mpi_mul_mpi+0x42>
 800926e:	f107 0320 	add.w	r3, r7, #32
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	4618      	mov	r0, r3
 8009276:	f7fd fcc5 	bl	8006c04 <mbedtls_mpi_copy>
 800927a:	6378      	str	r0, [r7, #52]	; 0x34
 800927c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927e:	2b00      	cmp	r3, #0
 8009280:	d17f      	bne.n	8009382 <mbedtls_mpi_mul_mpi+0x13c>
 8009282:	f107 0320 	add.w	r3, r7, #32
 8009286:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	429a      	cmp	r2, r3
 800928e:	d10c      	bne.n	80092aa <mbedtls_mpi_mul_mpi+0x64>
 8009290:	f107 0314 	add.w	r3, r7, #20
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	4618      	mov	r0, r3
 8009298:	f7fd fcb4 	bl	8006c04 <mbedtls_mpi_copy>
 800929c:	6378      	str	r0, [r7, #52]	; 0x34
 800929e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d170      	bne.n	8009386 <mbedtls_mpi_mul_mpi+0x140>
 80092a4:	f107 0314 	add.w	r3, r7, #20
 80092a8:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	633b      	str	r3, [r7, #48]	; 0x30
 80092b0:	e00d      	b.n	80092ce <mbedtls_mpi_mul_mpi+0x88>
        if( A->p[i - 1] != 0 )
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	689a      	ldr	r2, [r3, #8]
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092bc:	3b01      	subs	r3, #1
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <mbedtls_mpi_mul_mpi+0x90>
    for( i = A->n; i > 0; i-- )
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	3b01      	subs	r3, #1
 80092cc:	633b      	str	r3, [r7, #48]	; 0x30
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1ee      	bne.n	80092b2 <mbedtls_mpi_mul_mpi+0x6c>
 80092d4:	e000      	b.n	80092d8 <mbedtls_mpi_mul_mpi+0x92>
            break;
 80092d6:	bf00      	nop

    for( j = B->n; j > 0; j-- )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092de:	e00d      	b.n	80092fc <mbedtls_mpi_mul_mpi+0xb6>
        if( B->p[j - 1] != 0 )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092ea:	3b01      	subs	r3, #1
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <mbedtls_mpi_mul_mpi+0xbe>
    for( j = B->n; j > 0; j-- )
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	3b01      	subs	r3, #1
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1ee      	bne.n	80092e0 <mbedtls_mpi_mul_mpi+0x9a>
 8009302:	e000      	b.n	8009306 <mbedtls_mpi_mul_mpi+0xc0>
            break;
 8009304:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8009306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	4413      	add	r3, r2
 800930c:	4619      	mov	r1, r3
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7fd fc35 	bl	8006b7e <mbedtls_mpi_grow>
 8009314:	6378      	str	r0, [r7, #52]	; 0x34
 8009316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009318:	2b00      	cmp	r3, #0
 800931a:	d136      	bne.n	800938a <mbedtls_mpi_mul_mpi+0x144>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800931c:	2100      	movs	r1, #0
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7fd fcc1 	bl	8006ca6 <mbedtls_mpi_lset>
 8009324:	6378      	str	r0, [r7, #52]	; 0x34
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	2b00      	cmp	r3, #0
 800932a:	d130      	bne.n	800938e <mbedtls_mpi_mul_mpi+0x148>

    for( i++; j > 0; j-- )
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	3301      	adds	r3, #1
 8009330:	633b      	str	r3, [r7, #48]	; 0x30
 8009332:	e01a      	b.n	800936a <mbedtls_mpi_mul_mpi+0x124>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	1e58      	subs	r0, r3, #1
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6899      	ldr	r1, [r3, #8]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009346:	3b01      	subs	r3, #1
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	18d4      	adds	r4, r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009356:	3b01      	subs	r3, #1
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4622      	mov	r2, r4
 8009360:	f7fe faf3 	bl	800794a <mpi_mul_hlp>
    for( i++; j > 0; j-- )
 8009364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009366:	3b01      	subs	r3, #1
 8009368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e1      	bne.n	8009334 <mbedtls_mpi_mul_mpi+0xee>

    X->s = A->s * B->s;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	6812      	ldr	r2, [r2, #0]
 8009378:	fb03 f202 	mul.w	r2, r3, r2
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	e006      	b.n	8009390 <mbedtls_mpi_mul_mpi+0x14a>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8009382:	bf00      	nop
 8009384:	e004      	b.n	8009390 <mbedtls_mpi_mul_mpi+0x14a>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8009386:	bf00      	nop
 8009388:	e002      	b.n	8009390 <mbedtls_mpi_mul_mpi+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800938a:	bf00      	nop
 800938c:	e000      	b.n	8009390 <mbedtls_mpi_mul_mpi+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800938e:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 8009390:	f107 0314 	add.w	r3, r7, #20
 8009394:	4618      	mov	r0, r3
 8009396:	f7fd fbcc 	bl	8006b32 <mbedtls_mpi_free>
 800939a:	f107 0320 	add.w	r3, r7, #32
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fd fbc7 	bl	8006b32 <mbedtls_mpi_free>

    return( ret );
 80093a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	373c      	adds	r7, #60	; 0x3c
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd90      	pop	{r4, r7, pc}

080093ae <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b088      	sub	sp, #32
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 80093ba:	2301      	movs	r3, #1
 80093bc:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 80093be:	2301      	movs	r3, #1
 80093c0:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 80093c2:	f107 0310 	add.w	r3, r7, #16
 80093c6:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80093cc:	f107 0314 	add.w	r3, r7, #20
 80093d0:	461a      	mov	r2, r3
 80093d2:	68b9      	ldr	r1, [r7, #8]
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f7ff ff36 	bl	8009246 <mbedtls_mpi_mul_mpi>
 80093da:	4603      	mov	r3, r0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3720      	adds	r7, #32
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 80093e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093e8:	b08a      	sub	sp, #40	; 0x28
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6178      	str	r0, [r7, #20]
 80093ee:	6139      	str	r1, [r7, #16]
 80093f0:	60fa      	str	r2, [r7, #12]
 80093f2:	60bb      	str	r3, [r7, #8]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <mbedtls_int_div_int+0x1e>
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d309      	bcc.n	8009416 <mbedtls_int_div_int+0x32>
    {
        if (r != NULL) *r = ~0;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <mbedtls_int_div_int+0x2c>
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f04f 32ff 	mov.w	r2, #4294967295
 800940e:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 8009410:	f04f 33ff 	mov.w	r3, #4294967295
 8009414:	e03b      	b.n	800948e <mbedtls_int_div_int+0xaa>
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2200      	movs	r2, #0
 800941a:	469a      	mov	sl, r3
 800941c:	4693      	mov	fp, r2
 800941e:	f04f 0200 	mov.w	r2, #0
 8009422:	f04f 0300 	mov.w	r3, #0
 8009426:	4653      	mov	r3, sl
 8009428:	2200      	movs	r2, #0
 800942a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    dividend |= (mbedtls_t_udbl) u0;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	2200      	movs	r2, #0
 8009432:	461c      	mov	r4, r3
 8009434:	4615      	mov	r5, r2
 8009436:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800943a:	ea42 0804 	orr.w	r8, r2, r4
 800943e:	ea43 0905 	orr.w	r9, r3, r5
 8009442:	e9c7 8906 	strd	r8, r9, [r7, #24]
    quotient = dividend / d;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	607a      	str	r2, [r7, #4]
 800944e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009452:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009456:	f7f6 ff13 	bl	8000280 <__aeabi_uldivmod>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
 8009462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d305      	bcc.n	8009476 <mbedtls_int_div_int+0x92>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
 800946a:	f04f 32ff 	mov.w	r2, #4294967295
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if( r != NULL )
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d007      	beq.n	800948c <mbedtls_int_div_int+0xa8>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	68f9      	ldr	r1, [r7, #12]
 8009482:	fb01 f303 	mul.w	r3, r1, r3
 8009486:	1ad2      	subs	r2, r2, r3
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	601a      	str	r2, [r3, #0]

    return (mbedtls_mpi_uint) quotient;
 800948c:	6a3b      	ldr	r3, [r7, #32]

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
 800948e:	4618      	mov	r0, r3
 8009490:	3728      	adds	r7, #40	; 0x28
 8009492:	46bd      	mov	sp, r7
 8009494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009498 <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8009498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949a:	b099      	sub	sp, #100	; 0x64
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80094a6:	2100      	movs	r1, #0
 80094a8:	6838      	ldr	r0, [r7, #0]
 80094aa:	f7fd ffdb 	bl	8007464 <mbedtls_mpi_cmp_int>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d102      	bne.n	80094ba <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 80094b4:	f06f 030b 	mvn.w	r3, #11
 80094b8:	e2bd      	b.n	8009a36 <mbedtls_mpi_div_mpi+0x59e>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 80094ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fd fb20 	bl	8006b04 <mbedtls_mpi_init>
 80094c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fd fb1b 	bl	8006b04 <mbedtls_mpi_init>
 80094ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fd fb16 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 80094d8:	f107 031c 	add.w	r3, r7, #28
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fd fb11 	bl	8006b04 <mbedtls_mpi_init>
 80094e2:	f107 0310 	add.w	r3, r7, #16
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fd fb0c 	bl	8006b04 <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7fd fe9b 	bl	800722a <mbedtls_mpi_cmp_abs>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	da19      	bge.n	800952e <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d008      	beq.n	8009512 <mbedtls_mpi_div_mpi+0x7a>
 8009500:	2100      	movs	r1, #0
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f7fd fbcf 	bl	8006ca6 <mbedtls_mpi_lset>
 8009508:	65f8      	str	r0, [r7, #92]	; 0x5c
 800950a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 8247 	bne.w	80099a0 <mbedtls_mpi_div_mpi+0x508>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d008      	beq.n	800952a <mbedtls_mpi_div_mpi+0x92>
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	68b8      	ldr	r0, [r7, #8]
 800951c:	f7fd fb72 	bl	8006c04 <mbedtls_mpi_copy>
 8009520:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009524:	2b00      	cmp	r3, #0
 8009526:	f040 823d 	bne.w	80099a4 <mbedtls_mpi_div_mpi+0x50c>
        return( 0 );
 800952a:	2300      	movs	r3, #0
 800952c:	e283      	b.n	8009a36 <mbedtls_mpi_div_mpi+0x59e>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800952e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4618      	mov	r0, r3
 8009536:	f7fd fb65 	bl	8006c04 <mbedtls_mpi_copy>
 800953a:	65f8      	str	r0, [r7, #92]	; 0x5c
 800953c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800953e:	2b00      	cmp	r3, #0
 8009540:	f040 8232 	bne.w	80099a8 <mbedtls_mpi_div_mpi+0x510>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8009544:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	4618      	mov	r0, r3
 800954c:	f7fd fb5a 	bl	8006c04 <mbedtls_mpi_copy>
 8009550:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009554:	2b00      	cmp	r3, #0
 8009556:	f040 8229 	bne.w	80099ac <mbedtls_mpi_div_mpi+0x514>
    X.s = Y.s = 1;
 800955a:	2301      	movs	r3, #1
 800955c:	637b      	str	r3, [r7, #52]	; 0x34
 800955e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009560:	643b      	str	r3, [r7, #64]	; 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	1c9a      	adds	r2, r3, #2
 8009568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f7fd fb05 	bl	8006b7e <mbedtls_mpi_grow>
 8009574:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009578:	2b00      	cmp	r3, #0
 800957a:	f040 8219 	bne.w	80099b0 <mbedtls_mpi_div_mpi+0x518>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800957e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009582:	2100      	movs	r1, #0
 8009584:	4618      	mov	r0, r3
 8009586:	f7fd fb8e 	bl	8006ca6 <mbedtls_mpi_lset>
 800958a:	65f8      	str	r0, [r7, #92]	; 0x5c
 800958c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800958e:	2b00      	cmp	r3, #0
 8009590:	f040 8210 	bne.w	80099b4 <mbedtls_mpi_div_mpi+0x51c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8009594:	f107 031c 	add.w	r3, r7, #28
 8009598:	2102      	movs	r1, #2
 800959a:	4618      	mov	r0, r3
 800959c:	f7fd faef 	bl	8006b7e <mbedtls_mpi_grow>
 80095a0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80095a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f040 8207 	bne.w	80099b8 <mbedtls_mpi_div_mpi+0x520>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 80095aa:	f107 0310 	add.w	r3, r7, #16
 80095ae:	2103      	movs	r1, #3
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fd fae4 	bl	8006b7e <mbedtls_mpi_grow>
 80095b6:	65f8      	str	r0, [r7, #92]	; 0x5c
 80095b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f040 81fe 	bne.w	80099bc <mbedtls_mpi_div_mpi+0x524>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 80095c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fd fc11 	bl	8006dec <mbedtls_mpi_bitlen>
 80095ca:	4603      	mov	r3, r0
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	657b      	str	r3, [r7, #84]	; 0x54
    if( k < biL - 1 )
 80095d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d4:	2b1e      	cmp	r3, #30
 80095d6:	d819      	bhi.n	800960c <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 80095d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095da:	f1c3 031f 	rsb	r3, r3, #31
 80095de:	657b      	str	r3, [r7, #84]	; 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80095e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80095e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fd fcdf 	bl	8006faa <mbedtls_mpi_shift_l>
 80095ec:	65f8      	str	r0, [r7, #92]	; 0x5c
 80095ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f040 81e5 	bne.w	80099c0 <mbedtls_mpi_div_mpi+0x528>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 80095f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80095fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fd fcd4 	bl	8006faa <mbedtls_mpi_shift_l>
 8009602:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <mbedtls_mpi_div_mpi+0x178>
 800960a:	e1fa      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    }
    else k = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	657b      	str	r3, [r7, #84]	; 0x54

    n = X.n - 1;
 8009610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009612:	3b01      	subs	r3, #1
 8009614:	653b      	str	r3, [r7, #80]	; 0x50
    t = Y.n - 1;
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	3b01      	subs	r3, #1
 800961a:	64fb      	str	r3, [r7, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800961c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800961e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f7fd fcbd 	bl	8006faa <mbedtls_mpi_shift_l>
 8009630:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009634:	2b00      	cmp	r3, #0
 8009636:	f040 81c5 	bne.w	80099c4 <mbedtls_mpi_div_mpi+0x52c>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800963a:	e016      	b.n	800966a <mbedtls_mpi_div_mpi+0x1d2>
    {
        Z.p[n - t]++;
 800963c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800963e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009642:	1acb      	subs	r3, r1, r3
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	3201      	adds	r2, #1
 800964c:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800964e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009652:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8009656:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe f8e3 	bl	8007826 <mbedtls_mpi_sub_mpi>
 8009660:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009664:	2b00      	cmp	r3, #0
 8009666:	f040 81af 	bne.w	80099c8 <mbedtls_mpi_div_mpi+0x530>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800966a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800966e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009672:	4611      	mov	r1, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f7fd fe5a 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	dadd      	bge.n	800963c <mbedtls_mpi_div_mpi+0x1a4>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8009680:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f7fd fd30 	bl	80070f4 <mbedtls_mpi_shift_r>
 8009694:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009698:	2b00      	cmp	r3, #0
 800969a:	f040 8197 	bne.w	80099cc <mbedtls_mpi_div_mpi+0x534>

    for( i = n; i > t ; i-- )
 800969e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80096a2:	e13e      	b.n	8009922 <mbedtls_mpi_div_mpi+0x48a>
    {
        if( X.p[i] >= Y.p[t] )
 80096a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	440b      	add	r3, r1
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d30c      	bcc.n	80096d6 <mbedtls_mpi_div_mpi+0x23e>
            Z.p[i - t - 1] = ~0;
 80096bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c2:	1acb      	subs	r3, r1, r3
 80096c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096c8:	3b01      	subs	r3, #1
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	f04f 32ff 	mov.w	r2, #4294967295
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	e021      	b.n	800971a <mbedtls_mpi_div_mpi+0x282>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80096d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096e8:	3b01      	subs	r3, #1
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 80096f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80096f8:	681e      	ldr	r6, [r3, #0]
 80096fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009700:	1acb      	subs	r3, r1, r3
 8009702:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009706:	3b01      	subs	r3, #1
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	18d4      	adds	r4, r2, r3
 800970c:	2300      	movs	r3, #0
 800970e:	4632      	mov	r2, r6
 8009710:	4629      	mov	r1, r5
 8009712:	f7ff fe67 	bl	80093e4 <mbedtls_int_div_int>
 8009716:	4603      	mov	r3, r0
 8009718:	6023      	str	r3, [r4, #0]
        }

        Z.p[i - t - 1]++;
 800971a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800971c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800971e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009720:	1acb      	subs	r3, r1, r3
 8009722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009726:	3b01      	subs	r3, #1
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	3201      	adds	r2, #1
 8009730:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 8009732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009734:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009738:	1acb      	subs	r3, r1, r3
 800973a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800973e:	3b01      	subs	r3, #1
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	3a01      	subs	r2, #1
 8009748:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800974a:	f107 031c 	add.w	r3, r7, #28
 800974e:	2100      	movs	r1, #0
 8009750:	4618      	mov	r0, r3
 8009752:	f7fd faa8 	bl	8006ca6 <mbedtls_mpi_lset>
 8009756:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800975a:	2b00      	cmp	r3, #0
 800975c:	f040 8138 	bne.w	80099d0 <mbedtls_mpi_div_mpi+0x538>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8009760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009762:	2b00      	cmp	r3, #0
 8009764:	d008      	beq.n	8009778 <mbedtls_mpi_div_mpi+0x2e0>
 8009766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800976a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800976e:	3b01      	subs	r3, #1
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	e000      	b.n	800977a <mbedtls_mpi_div_mpi+0x2e2>
 8009778:	2300      	movs	r3, #0
 800977a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800977c:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 800977e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	441a      	add	r2, r3
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	3304      	adds	r3, #4
 800978a:	6812      	ldr	r2, [r2, #0]
 800978c:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800978e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009790:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009794:	1acb      	subs	r3, r1, r3
 8009796:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800979a:	3b01      	subs	r3, #1
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	f107 011c 	add.w	r1, r7, #28
 80097a6:	f107 031c 	add.w	r3, r7, #28
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fdff 	bl	80093ae <mbedtls_mpi_mul_int>
 80097b0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80097b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f040 810d 	bne.w	80099d4 <mbedtls_mpi_div_mpi+0x53c>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 80097ba:	f107 0310 	add.w	r3, r7, #16
 80097be:	2100      	movs	r1, #0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fd fa70 	bl	8006ca6 <mbedtls_mpi_lset>
 80097c6:	65f8      	str	r0, [r7, #92]	; 0x5c
 80097c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f040 8104 	bne.w	80099d8 <mbedtls_mpi_div_mpi+0x540>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80097d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d908      	bls.n	80097e8 <mbedtls_mpi_div_mpi+0x350>
 80097d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097de:	3b02      	subs	r3, #2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	e000      	b.n	80097ea <mbedtls_mpi_div_mpi+0x352>
 80097e8:	2300      	movs	r3, #0
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80097ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d008      	beq.n	8009806 <mbedtls_mpi_div_mpi+0x36e>
 80097f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097fc:	3b01      	subs	r3, #1
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	e000      	b.n	8009808 <mbedtls_mpi_div_mpi+0x370>
 8009806:	2300      	movs	r3, #0
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	3204      	adds	r2, #4
 800980c:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 800980e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	441a      	add	r2, r3
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	3308      	adds	r3, #8
 800981a:	6812      	ldr	r2, [r2, #0]
 800981c:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800981e:	f107 0210 	add.w	r2, r7, #16
 8009822:	f107 031c 	add.w	r3, r7, #28
 8009826:	4611      	mov	r1, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f7fd fd80 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	f73f af7e 	bgt.w	8009732 <mbedtls_mpi_div_mpi+0x29a>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8009836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009838:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800983a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983c:	1acb      	subs	r3, r1, r3
 800983e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009842:	3b01      	subs	r3, #1
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800984e:	f107 031c 	add.w	r3, r7, #28
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff fdab 	bl	80093ae <mbedtls_mpi_mul_int>
 8009858:	65f8      	str	r0, [r7, #92]	; 0x5c
 800985a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800985c:	2b00      	cmp	r3, #0
 800985e:	f040 80bd 	bne.w	80099dc <mbedtls_mpi_div_mpi+0x544>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8009862:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	3b01      	subs	r3, #1
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	f107 031c 	add.w	r3, r7, #28
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f7fd fb99 	bl	8006faa <mbedtls_mpi_shift_l>
 8009878:	65f8      	str	r0, [r7, #92]	; 0x5c
 800987a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 80af 	bne.w	80099e0 <mbedtls_mpi_div_mpi+0x548>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8009882:	f107 021c 	add.w	r2, r7, #28
 8009886:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800988a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800988e:	4618      	mov	r0, r3
 8009890:	f7fd ffc9 	bl	8007826 <mbedtls_mpi_sub_mpi>
 8009894:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009898:	2b00      	cmp	r3, #0
 800989a:	f040 80a3 	bne.w	80099e4 <mbedtls_mpi_div_mpi+0x54c>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800989e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098a2:	2100      	movs	r1, #0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fd fddd 	bl	8007464 <mbedtls_mpi_cmp_int>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	da35      	bge.n	800991c <mbedtls_mpi_div_mpi+0x484>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80098b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80098b4:	f107 031c 	add.w	r3, r7, #28
 80098b8:	4611      	mov	r1, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fd f9a2 	bl	8006c04 <mbedtls_mpi_copy>
 80098c0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80098c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f040 808f 	bne.w	80099e8 <mbedtls_mpi_div_mpi+0x550>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80098ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	3b01      	subs	r3, #1
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	f107 031c 	add.w	r3, r7, #28
 80098d8:	4611      	mov	r1, r2
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fd fb65 	bl	8006faa <mbedtls_mpi_shift_l>
 80098e0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80098e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f040 8081 	bne.w	80099ec <mbedtls_mpi_div_mpi+0x554>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80098ea:	f107 021c 	add.w	r2, r7, #28
 80098ee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80098f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fd ff4b 	bl	8007792 <mbedtls_mpi_add_mpi>
 80098fc:	65f8      	str	r0, [r7, #92]	; 0x5c
 80098fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d175      	bne.n	80099f0 <mbedtls_mpi_div_mpi+0x558>
            Z.p[i - t - 1]--;
 8009904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800990a:	1acb      	subs	r3, r1, r3
 800990c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009910:	3b01      	subs	r3, #1
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	3a01      	subs	r2, #1
 800991a:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 800991c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800991e:	3b01      	subs	r3, #1
 8009920:	65bb      	str	r3, [r7, #88]	; 0x58
 8009922:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009926:	429a      	cmp	r2, r3
 8009928:	f63f aebc 	bhi.w	80096a4 <mbedtls_mpi_div_mpi+0x20c>
        }
    }

    if( Q != NULL )
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d011      	beq.n	8009956 <mbedtls_mpi_div_mpi+0x4be>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8009932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009936:	4619      	mov	r1, r3
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7fd f963 	bl	8006c04 <mbedtls_mpi_copy>
 800993e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d156      	bne.n	80099f4 <mbedtls_mpi_div_mpi+0x55c>
        Q->s = A->s * B->s;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	6812      	ldr	r2, [r2, #0]
 800994e:	fb03 f202 	mul.w	r2, r3, r2
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d04d      	beq.n	80099f8 <mbedtls_mpi_div_mpi+0x560>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800995c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009962:	4618      	mov	r0, r3
 8009964:	f7fd fbc6 	bl	80070f4 <mbedtls_mpi_shift_r>
 8009968:	65f8      	str	r0, [r7, #92]	; 0x5c
 800996a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d145      	bne.n	80099fc <mbedtls_mpi_div_mpi+0x564>
        X.s = A->s;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	643b      	str	r3, [r7, #64]	; 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8009976:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800997a:	4619      	mov	r1, r3
 800997c:	68b8      	ldr	r0, [r7, #8]
 800997e:	f7fd f941 	bl	8006c04 <mbedtls_mpi_copy>
 8009982:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009986:	2b00      	cmp	r3, #0
 8009988:	d13a      	bne.n	8009a00 <mbedtls_mpi_div_mpi+0x568>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800998a:	2100      	movs	r1, #0
 800998c:	68b8      	ldr	r0, [r7, #8]
 800998e:	f7fd fd69 	bl	8007464 <mbedtls_mpi_cmp_int>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d12f      	bne.n	80099f8 <mbedtls_mpi_div_mpi+0x560>
            R->s = 1;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2201      	movs	r2, #1
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	e030      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80099a0:	bf00      	nop
 80099a2:	e02e      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80099a4:	bf00      	nop
 80099a6:	e02c      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 80099a8:	bf00      	nop
 80099aa:	e02a      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 80099ac:	bf00      	nop
 80099ae:	e028      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80099b0:	bf00      	nop
 80099b2:	e026      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 80099b4:	bf00      	nop
 80099b6:	e024      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 80099b8:	bf00      	nop
 80099ba:	e022      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 80099bc:	bf00      	nop
 80099be:	e020      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80099c0:	bf00      	nop
 80099c2:	e01e      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80099c4:	bf00      	nop
 80099c6:	e01c      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 80099c8:	bf00      	nop
 80099ca:	e01a      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 80099cc:	bf00      	nop
 80099ce:	e018      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80099d0:	bf00      	nop
 80099d2:	e016      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80099d4:	bf00      	nop
 80099d6:	e014      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 80099d8:	bf00      	nop
 80099da:	e012      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80099dc:	bf00      	nop
 80099de:	e010      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 80099e0:	bf00      	nop
 80099e2:	e00e      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 80099e4:	bf00      	nop
 80099e6:	e00c      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80099e8:	bf00      	nop
 80099ea:	e00a      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80099ec:	bf00      	nop
 80099ee:	e008      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80099f0:	bf00      	nop
 80099f2:	e006      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80099f4:	bf00      	nop
 80099f6:	e004      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
    }

cleanup:
 80099f8:	bf00      	nop
 80099fa:	e002      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80099fc:	bf00      	nop
 80099fe:	e000      	b.n	8009a02 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8009a00:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8009a02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fd f893 	bl	8006b32 <mbedtls_mpi_free>
 8009a0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fd f88e 	bl	8006b32 <mbedtls_mpi_free>
 8009a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fd f889 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8009a20:	f107 031c 	add.w	r3, r7, #28
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fd f884 	bl	8006b32 <mbedtls_mpi_free>
 8009a2a:	f107 0310 	add.w	r3, r7, #16
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fd f87f 	bl	8006b32 <mbedtls_mpi_free>

    return( ret );
 8009a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3764      	adds	r7, #100	; 0x64
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a3e <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b086      	sub	sp, #24
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7fd fd09 	bl	8007464 <mbedtls_mpi_cmp_int>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	da02      	bge.n	8009a5e <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8009a58:	f06f 0309 	mvn.w	r3, #9
 8009a5c:	e032      	b.n	8009ac4 <mbedtls_mpi_mod_mpi+0x86>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	68f9      	ldr	r1, [r7, #12]
 8009a64:	2000      	movs	r0, #0
 8009a66:	f7ff fd17 	bl	8009498 <mbedtls_mpi_div_mpi>
 8009a6a:	6178      	str	r0, [r7, #20]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d122      	bne.n	8009ab8 <mbedtls_mpi_mod_mpi+0x7a>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8009a72:	e008      	b.n	8009a86 <mbedtls_mpi_mod_mpi+0x48>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	68f9      	ldr	r1, [r7, #12]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7fd fe8a 	bl	8007792 <mbedtls_mpi_add_mpi>
 8009a7e:	6178      	str	r0, [r7, #20]
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d11a      	bne.n	8009abc <mbedtls_mpi_mod_mpi+0x7e>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8009a86:	2100      	movs	r1, #0
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f7fd fceb 	bl	8007464 <mbedtls_mpi_cmp_int>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dbef      	blt.n	8009a74 <mbedtls_mpi_mod_mpi+0x36>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8009a94:	e008      	b.n	8009aa8 <mbedtls_mpi_mod_mpi+0x6a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	68f9      	ldr	r1, [r7, #12]
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7fd fec3 	bl	8007826 <mbedtls_mpi_sub_mpi>
 8009aa0:	6178      	str	r0, [r7, #20]
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10b      	bne.n	8009ac0 <mbedtls_mpi_mod_mpi+0x82>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7fd fc3f 	bl	800732e <mbedtls_mpi_cmp_mpi>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	daef      	bge.n	8009a96 <mbedtls_mpi_mod_mpi+0x58>

cleanup:
 8009ab6:	e004      	b.n	8009ac2 <mbedtls_mpi_mod_mpi+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8009ab8:	bf00      	nop
 8009aba:	e002      	b.n	8009ac2 <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8009abc:	bf00      	nop
 8009abe:	e000      	b.n	8009ac2 <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8009ac0:	bf00      	nop

    return( ret );
 8009ac2:	697b      	ldr	r3, [r7, #20]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint x, m0 = N->p[0];
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60fb      	str	r3, [r7, #12]
    unsigned int i;

    x  = m0;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	617b      	str	r3, [r7, #20]
    x += ( ( m0 + 2 ) & 4 ) << 1;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	f003 0308 	and.w	r3, r3, #8
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	4413      	add	r3, r2
 8009af0:	617b      	str	r3, [r7, #20]

    for( i = biL; i >= 8; i /= 2 )
 8009af2:	2320      	movs	r3, #32
 8009af4:	613b      	str	r3, [r7, #16]
 8009af6:	e00c      	b.n	8009b12 <mpi_montg_init+0x46>
        x *= ( 2 - ( m0 * x ) );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	fb02 f303 	mul.w	r3, r2, r3
 8009b00:	f1c3 0202 	rsb	r2, r3, #2
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	fb02 f303 	mul.w	r3, r2, r3
 8009b0a:	617b      	str	r3, [r7, #20]
    for( i = biL; i >= 8; i /= 2 )
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	085b      	lsrs	r3, r3, #1
 8009b10:	613b      	str	r3, [r7, #16]
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	d8ef      	bhi.n	8009af8 <mpi_montg_init+0x2c>

    *mm = ~x + 1;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	425a      	negs	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]
}
 8009b20:	bf00      	nop
 8009b22:	371c      	adds	r7, #28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08a      	sub	sp, #40	; 0x28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	3301      	adds	r3, #1
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d303      	bcc.n	8009b50 <mpi_montmul+0x24>
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <mpi_montmul+0x2a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8009b50:	f06f 0303 	mvn.w	r3, #3
 8009b54:	e06f      	b.n	8009c36 <mpi_montmul+0x10a>

    memset( T->p, 0, T->n * ciL );
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	6898      	ldr	r0, [r3, #8]
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	461a      	mov	r2, r3
 8009b62:	2100      	movs	r1, #0
 8009b64:	f014 fa9a 	bl	801e09c <memset>

    d = T->p;
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	623b      	str	r3, [r7, #32]
    n = N->n;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	61fb      	str	r3, [r7, #28]
    m = ( B->n < n ) ? B->n : n;
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	69fa      	ldr	r2, [r7, #28]
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	bf28      	it	cs
 8009b7e:	4613      	movcs	r3, r2
 8009b80:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < n; i++ )
 8009b82:	2300      	movs	r3, #0
 8009b84:	627b      	str	r3, [r7, #36]	; 0x24
 8009b86:	e030      	b.n	8009bea <mpi_montmul+0xbe>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	617b      	str	r3, [r7, #20]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6979      	ldr	r1, [r7, #20]
 8009ba2:	fb01 f303 	mul.w	r3, r1, r3
 8009ba6:	441a      	add	r2, r3
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
 8009bae:	613b      	str	r3, [r7, #16]

        mpi_mul_hlp( m, B->p, d, u0 );
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	6899      	ldr	r1, [r3, #8]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	6a3a      	ldr	r2, [r7, #32]
 8009bb8:	69b8      	ldr	r0, [r7, #24]
 8009bba:	f7fd fec6 	bl	800794a <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6899      	ldr	r1, [r3, #8]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	6a3a      	ldr	r2, [r7, #32]
 8009bc6:	69f8      	ldr	r0, [r7, #28]
 8009bc8:	f7fd febf 	bl	800794a <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	1d1a      	adds	r2, r3, #4
 8009bd0:	623a      	str	r2, [r7, #32]
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	6a3a      	ldr	r2, [r7, #32]
 8009bde:	4413      	add	r3, r2
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
    for( i = 0; i < n; i++ )
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	3301      	adds	r3, #1
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d3ca      	bcc.n	8009b88 <mpi_montmul+0x5c>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6898      	ldr	r0, [r3, #8]
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6a39      	ldr	r1, [r7, #32]
 8009c00:	f014 fa24 	bl	801e04c <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f7fd fb0f 	bl	800722a <mbedtls_mpi_cmp_abs>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	db08      	blt.n	8009c24 <mpi_montmul+0xf8>
        mpi_sub_hlp( n, N->p, A->p );
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6899      	ldr	r1, [r3, #8]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	69f8      	ldr	r0, [r7, #28]
 8009c1e:	f7fd fcf7 	bl	8007610 <mpi_sub_hlp>
 8009c22:	e007      	b.n	8009c34 <mpi_montmul+0x108>
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6899      	ldr	r1, [r3, #8]
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	69f8      	ldr	r0, [r7, #28]
 8009c30:	f7fd fcee 	bl	8007610 <mpi_sub_hlp>

    return( 0 );
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3728      	adds	r7, #40	; 0x28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <mpi_montred>:

/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b08a      	sub	sp, #40	; 0x28
 8009c42:	af02      	add	r7, sp, #8
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	60b9      	str	r1, [r7, #8]
 8009c48:	607a      	str	r2, [r7, #4]
 8009c4a:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint z = 1;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	617b      	str	r3, [r7, #20]
    U.p = &z;
 8009c58:	f107 031c 	add.w	r3, r7, #28
 8009c5c:	61bb      	str	r3, [r7, #24]

    return( mpi_montmul( A, &U, N, mm, T ) );
 8009c5e:	f107 0110 	add.w	r1, r7, #16
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff ff5e 	bl	8009b2c <mpi_montmul>
 8009c70:	4603      	mov	r3, r0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 8009c7a:	b590      	push	{r4, r7, lr}
 8009c7c:	f2ad 6d74 	subw	sp, sp, #1652	; 0x674
 8009c80:	af02      	add	r7, sp, #8
 8009c82:	f507 64cd 	add.w	r4, r7, #1640	; 0x668
 8009c86:	f2a4 645c 	subw	r4, r4, #1628	; 0x65c
 8009c8a:	6020      	str	r0, [r4, #0]
 8009c8c:	f507 60cd 	add.w	r0, r7, #1640	; 0x668
 8009c90:	f5a0 60cc 	sub.w	r0, r0, #1632	; 0x660
 8009c94:	6001      	str	r1, [r0, #0]
 8009c96:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8009c9a:	f2a1 6164 	subw	r1, r1, #1636	; 0x664
 8009c9e:	600a      	str	r2, [r1, #0]
 8009ca0:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8009ca4:	f5a2 62cd 	sub.w	r2, r2, #1640	; 0x668
 8009ca8:	6013      	str	r3, [r2, #0]
    int ret;
    size_t wbits, wsize, one = 1;
 8009caa:	2301      	movs	r3, #1
 8009cac:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 8009cb0:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009cb4:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009cb8:	2100      	movs	r1, #0
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	f7fd fbd2 	bl	8007464 <mbedtls_mpi_cmp_int>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	dd0a      	ble.n	8009cdc <mbedtls_mpi_exp_mod+0x62>
 8009cc6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009cca:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d103      	bne.n	8009ce4 <mbedtls_mpi_exp_mod+0x6a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8009cdc:	f06f 0303 	mvn.w	r3, #3
 8009ce0:	f000 bc71 	b.w	800a5c6 <mbedtls_mpi_exp_mod+0x94c>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 8009ce4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009ce8:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8009cec:	2100      	movs	r1, #0
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	f7fd fbb8 	bl	8007464 <mbedtls_mpi_cmp_int>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	da03      	bge.n	8009d02 <mbedtls_mpi_exp_mod+0x88>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8009cfa:	f06f 0303 	mvn.w	r3, #3
 8009cfe:	f000 bc62 	b.w	800a5c6 <mbedtls_mpi_exp_mod+0x94c>

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
 8009d02:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009d06:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009d0a:	f207 6234 	addw	r2, r7, #1588	; 0x634
 8009d0e:	6819      	ldr	r1, [r3, #0]
 8009d10:	4610      	mov	r0, r2
 8009d12:	f7ff fedb 	bl	8009acc <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
 8009d16:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fc fef2 	bl	8006b04 <mbedtls_mpi_init>
 8009d20:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fc feed 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
 8009d2a:	f107 0310 	add.w	r3, r7, #16
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fc fee8 	bl	8006b04 <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
 8009d34:	f107 031c 	add.w	r3, r7, #28
 8009d38:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f014 f9ac 	bl	801e09c <memset>

    i = mbedtls_mpi_bitlen( E );
 8009d44:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009d48:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	f7fd f84d 	bl	8006dec <mbedtls_mpi_bitlen>
 8009d52:	f8c7 0658 	str.w	r0, [r7, #1624]	; 0x658

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8009d56:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009d5a:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8009d5e:	d213      	bcs.n	8009d88 <mbedtls_mpi_exp_mod+0x10e>
 8009d60:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009d64:	2bef      	cmp	r3, #239	; 0xef
 8009d66:	d80d      	bhi.n	8009d84 <mbedtls_mpi_exp_mod+0x10a>
 8009d68:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009d6c:	2b4f      	cmp	r3, #79	; 0x4f
 8009d6e:	d807      	bhi.n	8009d80 <mbedtls_mpi_exp_mod+0x106>
 8009d70:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009d74:	2b17      	cmp	r3, #23
 8009d76:	d901      	bls.n	8009d7c <mbedtls_mpi_exp_mod+0x102>
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e006      	b.n	8009d8a <mbedtls_mpi_exp_mod+0x110>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e004      	b.n	8009d8a <mbedtls_mpi_exp_mod+0x110>
 8009d80:	2304      	movs	r3, #4
 8009d82:	e002      	b.n	8009d8a <mbedtls_mpi_exp_mod+0x110>
 8009d84:	2305      	movs	r3, #5
 8009d86:	e000      	b.n	8009d8a <mbedtls_mpi_exp_mod+0x110>
 8009d88:	2306      	movs	r3, #6
 8009d8a:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
 8009d8e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8009d92:	2b06      	cmp	r3, #6
 8009d94:	d902      	bls.n	8009d9c <mbedtls_mpi_exp_mod+0x122>
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
 8009d96:	2306      	movs	r3, #6
 8009d98:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c

    j = N->n + 1;
 8009d9c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009da0:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	3301      	adds	r3, #1
 8009daa:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8009dae:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009db2:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8009db6:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	f7fc fedf 	bl	8006b7e <mbedtls_mpi_grow>
 8009dc0:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009dc4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f040 838a 	bne.w	800a4e2 <mbedtls_mpi_exp_mod+0x868>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 8009dce:	f107 031c 	add.w	r3, r7, #28
 8009dd2:	330c      	adds	r3, #12
 8009dd4:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fc fed0 	bl	8006b7e <mbedtls_mpi_grow>
 8009dde:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009de2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f040 837d 	bne.w	800a4e6 <mbedtls_mpi_exp_mod+0x86c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 8009dec:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8009df0:	005a      	lsls	r2, r3, #1
 8009df2:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fc fec0 	bl	8006b7e <mbedtls_mpi_grow>
 8009dfe:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009e02:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 836f 	bne.w	800a4ea <mbedtls_mpi_exp_mod+0x870>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 8009e0c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009e10:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1c:	bf0c      	ite	eq
 8009e1e:	2301      	moveq	r3, #1
 8009e20:	2300      	movne	r3, #0
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
    if( neg )
 8009e28:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01d      	beq.n	8009e6c <mbedtls_mpi_exp_mod+0x1f2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 8009e30:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009e34:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009e38:	f107 0210 	add.w	r2, r7, #16
 8009e3c:	6819      	ldr	r1, [r3, #0]
 8009e3e:	4610      	mov	r0, r2
 8009e40:	f7fc fee0 	bl	8006c04 <mbedtls_mpi_copy>
 8009e44:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009e48:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f040 834e 	bne.w	800a4ee <mbedtls_mpi_exp_mod+0x874>
        Apos.s = 1;
 8009e52:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009e56:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]
        A = &Apos;
 8009e5e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009e62:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009e66:	f107 0210 	add.w	r2, r7, #16
 8009e6a:	601a      	str	r2, [r3, #0]
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 8009e6c:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d004      	beq.n	8009e7e <mbedtls_mpi_exp_mod+0x204>
 8009e74:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d13f      	bne.n	8009efe <mbedtls_mpi_exp_mod+0x284>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 8009e7e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009e82:	2101      	movs	r1, #1
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fc ff0e 	bl	8006ca6 <mbedtls_mpi_lset>
 8009e8a:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009e8e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f040 832d 	bne.w	800a4f2 <mbedtls_mpi_exp_mod+0x878>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 8009e98:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009e9c:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	019a      	lsls	r2, r3, #6
 8009ea6:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009eaa:	4611      	mov	r1, r2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fd f87c 	bl	8006faa <mbedtls_mpi_shift_l>
 8009eb2:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009eb6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f040 831b 	bne.w	800a4f6 <mbedtls_mpi_exp_mod+0x87c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 8009ec0:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009ec4:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009ec8:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8009ecc:	f507 60c5 	add.w	r0, r7, #1576	; 0x628
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	f7ff fdb4 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 8009ed6:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009eda:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f040 830b 	bne.w	800a4fa <mbedtls_mpi_exp_mod+0x880>

        if( _RR != NULL )
 8009ee4:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d010      	beq.n	8009f0e <mbedtls_mpi_exp_mod+0x294>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 8009eec:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009ef0:	220c      	movs	r2, #12
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	f8d7 0678 	ldr.w	r0, [r7, #1656]	; 0x678
 8009ef8:	f014 f8a8 	bl	801e04c <memcpy>
        if( _RR != NULL )
 8009efc:	e007      	b.n	8009f0e <mbedtls_mpi_exp_mod+0x294>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 8009efe:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009f02:	220c      	movs	r2, #12
 8009f04:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f014 f89f 	bl	801e04c <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 8009f0e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009f12:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 8009f16:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009f1a:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009f1e:	6811      	ldr	r1, [r2, #0]
 8009f20:	6818      	ldr	r0, [r3, #0]
 8009f22:	f7fd fa04 	bl	800732e <mbedtls_mpi_cmp_mpi>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	db16      	blt.n	8009f5a <mbedtls_mpi_exp_mod+0x2e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 8009f2c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009f30:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 8009f34:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009f38:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009f3c:	f107 011c 	add.w	r1, r7, #28
 8009f40:	f101 000c 	add.w	r0, r1, #12
 8009f44:	6812      	ldr	r2, [r2, #0]
 8009f46:	6819      	ldr	r1, [r3, #0]
 8009f48:	f7ff fd79 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 8009f4c:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009f50:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d012      	beq.n	8009f7e <mbedtls_mpi_exp_mod+0x304>
 8009f58:	e2f0      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 8009f5a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009f5e:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009f62:	f107 021c 	add.w	r2, r7, #28
 8009f66:	320c      	adds	r2, #12
 8009f68:	6819      	ldr	r1, [r3, #0]
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	f7fc fe4a 	bl	8006c04 <mbedtls_mpi_copy>
 8009f70:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009f74:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f040 82c0 	bne.w	800a4fe <mbedtls_mpi_exp_mod+0x884>

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 8009f7e:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 8009f82:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009f86:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 8009f8a:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8009f8e:	f107 031c 	add.w	r3, r7, #28
 8009f92:	f103 000c 	add.w	r0, r3, #12
 8009f96:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	4623      	mov	r3, r4
 8009f9e:	6812      	ldr	r2, [r2, #0]
 8009fa0:	f7ff fdc4 	bl	8009b2c <mpi_montmul>
 8009fa4:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009fa8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f040 82a8 	bne.w	800a502 <mbedtls_mpi_exp_mod+0x888>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 8009fb2:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 8009fb6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009fba:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	6818      	ldr	r0, [r3, #0]
 8009fc2:	f7fc fe1f 	bl	8006c04 <mbedtls_mpi_copy>
 8009fc6:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009fca:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f040 8299 	bne.w	800a506 <mbedtls_mpi_exp_mod+0x88c>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 8009fd4:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 8009fd8:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8009fdc:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8009fe0:	f5a1 61cd 	sub.w	r1, r1, #1640	; 0x668
 8009fe4:	f507 60cd 	add.w	r0, r7, #1640	; 0x668
 8009fe8:	f2a0 605c 	subw	r0, r0, #1628	; 0x65c
 8009fec:	6809      	ldr	r1, [r1, #0]
 8009fee:	6800      	ldr	r0, [r0, #0]
 8009ff0:	f7ff fe25 	bl	8009c3e <mpi_montred>
 8009ff4:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009ff8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f040 8284 	bne.w	800a50a <mbedtls_mpi_exp_mod+0x890>

    if( wsize > 1 )
 800a002:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a006:	2b01      	cmp	r3, #1
 800a008:	f240 80df 	bls.w	800a1ca <mbedtls_mpi_exp_mod+0x550>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 800a00c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a010:	3b01      	subs	r3, #1
 800a012:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800a01e:	f107 011c 	add.w	r1, r7, #28
 800a022:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 800a026:	4613      	mov	r3, r2
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	18ca      	adds	r2, r1, r3
 800a030:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a034:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	3301      	adds	r3, #1
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	f7fc fd9c 	bl	8006b7e <mbedtls_mpi_grow>
 800a046:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a04a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f040 825d 	bne.w	800a50e <mbedtls_mpi_exp_mod+0x894>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800a054:	f107 011c 	add.w	r1, r7, #28
 800a058:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 800a05c:	4613      	mov	r3, r2
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	4413      	add	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	18ca      	adds	r2, r1, r3
 800a066:	f107 031c 	add.w	r3, r7, #28
 800a06a:	330c      	adds	r3, #12
 800a06c:	4619      	mov	r1, r3
 800a06e:	4610      	mov	r0, r2
 800a070:	f7fc fdc8 	bl	8006c04 <mbedtls_mpi_copy>
 800a074:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a078:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f040 8248 	bne.w	800a512 <mbedtls_mpi_exp_mod+0x898>

        for( i = 0; i < wsize - 1; i++ )
 800a082:	2300      	movs	r3, #0
 800a084:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a088:	e02a      	b.n	800a0e0 <mbedtls_mpi_exp_mod+0x466>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800a08a:	f107 011c 	add.w	r1, r7, #28
 800a08e:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 800a092:	4613      	mov	r3, r2
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	18c8      	adds	r0, r1, r3
 800a09c:	f107 011c 	add.w	r1, r7, #28
 800a0a0:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4419      	add	r1, r3
 800a0ae:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a0b2:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a0b6:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a0ba:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	4623      	mov	r3, r4
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	f7ff fd32 	bl	8009b2c <mpi_montmul>
 800a0c8:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a0cc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f040 8220 	bne.w	800a516 <mbedtls_mpi_exp_mod+0x89c>
        for( i = 0; i < wsize - 1; i++ )
 800a0d6:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a0da:	3301      	adds	r3, #1
 800a0dc:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a0e0:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d3cd      	bcc.n	800a08a <mbedtls_mpi_exp_mod+0x410>

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 800a0ee:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a0f8:	e05d      	b.n	800a1b6 <mbedtls_mpi_exp_mod+0x53c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800a0fa:	f107 011c 	add.w	r1, r7, #28
 800a0fe:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a102:	4613      	mov	r3, r2
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	4413      	add	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	18ca      	adds	r2, r1, r3
 800a10c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a110:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	3301      	adds	r3, #1
 800a11a:	4619      	mov	r1, r3
 800a11c:	4610      	mov	r0, r2
 800a11e:	f7fc fd2e 	bl	8006b7e <mbedtls_mpi_grow>
 800a122:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a126:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f040 81f5 	bne.w	800a51a <mbedtls_mpi_exp_mod+0x8a0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800a130:	f107 011c 	add.w	r1, r7, #28
 800a134:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a138:	4613      	mov	r3, r2
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	18c8      	adds	r0, r1, r3
 800a142:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a146:	1e5a      	subs	r2, r3, #1
 800a148:	f107 011c 	add.w	r1, r7, #28
 800a14c:	4613      	mov	r3, r2
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	4413      	add	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	440b      	add	r3, r1
 800a156:	4619      	mov	r1, r3
 800a158:	f7fc fd54 	bl	8006c04 <mbedtls_mpi_copy>
 800a15c:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a160:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 81da 	bne.w	800a51e <mbedtls_mpi_exp_mod+0x8a4>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800a16a:	f107 011c 	add.w	r1, r7, #28
 800a16e:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a172:	4613      	mov	r3, r2
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	4413      	add	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	18c8      	adds	r0, r1, r3
 800a17c:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a180:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a184:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a188:	f107 031c 	add.w	r3, r7, #28
 800a18c:	f103 010c 	add.w	r1, r3, #12
 800a190:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	4623      	mov	r3, r4
 800a198:	6812      	ldr	r2, [r2, #0]
 800a19a:	f7ff fcc7 	bl	8009b2c <mpi_montmul>
 800a19e:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a1a2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f040 81bb 	bne.w	800a522 <mbedtls_mpi_exp_mod+0x8a8>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800a1ac:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a1b6:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a1ba:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a1be:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c2:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d397      	bcc.n	800a0fa <mbedtls_mpi_exp_mod+0x480>
        }
    }

    nblimbs = E->n;
 800a1ca:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a1ce:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    bufsize = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
    nbits   = 0;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
    wbits   = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
    state   = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

    while( 1 )
    {
        if( bufsize == 0 )
 800a1f2:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10c      	bne.n	800a214 <mbedtls_mpi_exp_mod+0x59a>
        {
            if( nblimbs == 0 )
 800a1fa:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 80ca 	beq.w	800a398 <mbedtls_mpi_exp_mod+0x71e>
                break;

            nblimbs--;
 800a204:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a208:	3b01      	subs	r3, #1
 800a20a:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 800a20e:	2320      	movs	r3, #32
 800a210:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
        }

        bufsize--;
 800a214:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a218:	3b01      	subs	r3, #1
 800a21a:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650

        ei = (E->p[nblimbs] >> bufsize) & 1;
 800a21e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a222:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a238:	fa22 f303 	lsr.w	r3, r2, r3
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 800a244:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d104      	bne.n	800a256 <mbedtls_mpi_exp_mod+0x5dc>
 800a24c:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 809d 	beq.w	800a390 <mbedtls_mpi_exp_mod+0x716>
            continue;

        if( ei == 0 && state == 1 )
 800a256:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d121      	bne.n	800a2a2 <mbedtls_mpi_exp_mod+0x628>
 800a25e:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800a262:	2b01      	cmp	r3, #1
 800a264:	d11d      	bne.n	800a2a2 <mbedtls_mpi_exp_mod+0x628>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a266:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a26a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a26e:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a272:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a276:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 800a27a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a27e:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a282:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	4623      	mov	r3, r4
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	6809      	ldr	r1, [r1, #0]
 800a28e:	6800      	ldr	r0, [r0, #0]
 800a290:	f7ff fc4c 	bl	8009b2c <mpi_montmul>
 800a294:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a298:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d079      	beq.n	800a394 <mbedtls_mpi_exp_mod+0x71a>
 800a2a0:	e14c      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
        }

        /*
         * add ei to current window
         */
        state = 2;
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

        nbits++;
 800a2a8:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
        wbits |= ( ei << ( wsize - nbits ) );
 800a2b2:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800a2b6:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 800a2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c4:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660

        if( nbits == wsize )
 800a2ce:	f8d7 264c 	ldr.w	r2, [r7, #1612]	; 0x64c
 800a2d2:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d18b      	bne.n	800a1f2 <mbedtls_mpi_exp_mod+0x578>
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a2e0:	e022      	b.n	800a328 <mbedtls_mpi_exp_mod+0x6ae>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a2e2:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a2e6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a2ea:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a2ee:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a2f2:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 800a2f6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a2fa:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a2fe:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	4623      	mov	r3, r4
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	6809      	ldr	r1, [r1, #0]
 800a30a:	6800      	ldr	r0, [r0, #0]
 800a30c:	f7ff fc0e 	bl	8009b2c <mpi_montmul>
 800a310:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a314:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f040 8104 	bne.w	800a526 <mbedtls_mpi_exp_mod+0x8ac>
            for( i = 0; i < wsize; i++ )
 800a31e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a322:	3301      	adds	r3, #1
 800a324:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a328:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a32c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a330:	429a      	cmp	r2, r3
 800a332:	d3d6      	bcc.n	800a2e2 <mbedtls_mpi_exp_mod+0x668>

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800a334:	f107 011c 	add.w	r1, r7, #28
 800a338:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800a33c:	4613      	mov	r3, r2
 800a33e:	005b      	lsls	r3, r3, #1
 800a340:	4413      	add	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4419      	add	r1, r3
 800a346:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a34a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a34e:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a352:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a356:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a35a:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	4623      	mov	r3, r4
 800a362:	6812      	ldr	r2, [r2, #0]
 800a364:	6800      	ldr	r0, [r0, #0]
 800a366:	f7ff fbe1 	bl	8009b2c <mpi_montmul>
 800a36a:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a36e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a372:	2b00      	cmp	r3, #0
 800a374:	f040 80d9 	bne.w	800a52a <mbedtls_mpi_exp_mod+0x8b0>

            state--;
 800a378:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800a37c:	3b01      	subs	r3, #1
 800a37e:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
            nbits = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
            wbits = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 800a38e:	e730      	b.n	800a1f2 <mbedtls_mpi_exp_mod+0x578>
            continue;
 800a390:	bf00      	nop
 800a392:	e72e      	b.n	800a1f2 <mbedtls_mpi_exp_mod+0x578>
            continue;
 800a394:	bf00      	nop
        if( bufsize == 0 )
 800a396:	e72c      	b.n	800a1f2 <mbedtls_mpi_exp_mod+0x578>
                break;
 800a398:	bf00      	nop
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 800a39a:	2300      	movs	r3, #0
 800a39c:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a3a0:	e04d      	b.n	800a43e <mbedtls_mpi_exp_mod+0x7c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a3a2:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a3a6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a3aa:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a3ae:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a3b2:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 800a3b6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a3ba:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a3be:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	4623      	mov	r3, r4
 800a3c6:	6812      	ldr	r2, [r2, #0]
 800a3c8:	6809      	ldr	r1, [r1, #0]
 800a3ca:	6800      	ldr	r0, [r0, #0]
 800a3cc:	f7ff fbae 	bl	8009b2c <mpi_montmul>
 800a3d0:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a3d4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f040 80a8 	bne.w	800a52e <mbedtls_mpi_exp_mod+0x8b4>

        wbits <<= 1;
 800a3de:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660

        if( ( wbits & ( one << wsize ) ) != 0 )
 800a3e8:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a3ec:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a3f0:	409a      	lsls	r2, r3
 800a3f2:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d01b      	beq.n	800a434 <mbedtls_mpi_exp_mod+0x7ba>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800a3fc:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a400:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a404:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a408:	f107 031c 	add.w	r3, r7, #28
 800a40c:	f103 010c 	add.w	r1, r3, #12
 800a410:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a414:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a418:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	4623      	mov	r3, r4
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	6800      	ldr	r0, [r0, #0]
 800a424:	f7ff fb82 	bl	8009b2c <mpi_montmul>
 800a428:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a42c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a430:	2b00      	cmp	r3, #0
 800a432:	d17e      	bne.n	800a532 <mbedtls_mpi_exp_mod+0x8b8>
    for( i = 0; i < nbits; i++ )
 800a434:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a438:	3301      	adds	r3, #1
 800a43a:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a43e:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a442:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800a446:	429a      	cmp	r2, r3
 800a448:	d3ab      	bcc.n	800a3a2 <mbedtls_mpi_exp_mod+0x728>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800a44a:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 800a44e:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a452:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 800a456:	f5a1 61cd 	sub.w	r1, r1, #1640	; 0x668
 800a45a:	f507 60cd 	add.w	r0, r7, #1640	; 0x668
 800a45e:	f2a0 605c 	subw	r0, r0, #1628	; 0x65c
 800a462:	6809      	ldr	r1, [r1, #0]
 800a464:	6800      	ldr	r0, [r0, #0]
 800a466:	f7ff fbea 	bl	8009c3e <mpi_montred>
 800a46a:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a46e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a472:	2b00      	cmp	r3, #0
 800a474:	d15f      	bne.n	800a536 <mbedtls_mpi_exp_mod+0x8bc>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 800a476:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d05d      	beq.n	800a53a <mbedtls_mpi_exp_mod+0x8c0>
 800a47e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a482:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d055      	beq.n	800a53a <mbedtls_mpi_exp_mod+0x8c0>
 800a48e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a492:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d04a      	beq.n	800a53a <mbedtls_mpi_exp_mod+0x8c0>
    {
        X->s = -1;
 800a4a4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a4a8:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b2:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 800a4b4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a4b8:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 800a4bc:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a4c0:	f5a3 61cd 	sub.w	r1, r3, #1640	; 0x668
 800a4c4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a4c8:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800a4cc:	6812      	ldr	r2, [r2, #0]
 800a4ce:	6809      	ldr	r1, [r1, #0]
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f7fd f95e 	bl	8007792 <mbedtls_mpi_add_mpi>
 800a4d6:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a4da:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a4de:	2b00      	cmp	r3, #0
    }

cleanup:
 800a4e0:	e02b      	b.n	800a53a <mbedtls_mpi_exp_mod+0x8c0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800a4e2:	bf00      	nop
 800a4e4:	e02a      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800a4e6:	bf00      	nop
 800a4e8:	e028      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800a4ea:	bf00      	nop
 800a4ec:	e026      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 800a4ee:	bf00      	nop
 800a4f0:	e024      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 800a4f2:	bf00      	nop
 800a4f4:	e022      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 800a4f6:	bf00      	nop
 800a4f8:	e020      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 800a4fa:	bf00      	nop
 800a4fc:	e01e      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 800a4fe:	bf00      	nop
 800a500:	e01c      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800a502:	bf00      	nop
 800a504:	e01a      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 800a506:	bf00      	nop
 800a508:	e018      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800a50a:	bf00      	nop
 800a50c:	e016      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800a50e:	bf00      	nop
 800a510:	e014      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800a512:	bf00      	nop
 800a514:	e012      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800a516:	bf00      	nop
 800a518:	e010      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800a51a:	bf00      	nop
 800a51c:	e00e      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800a51e:	bf00      	nop
 800a520:	e00c      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800a522:	bf00      	nop
 800a524:	e00a      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a526:	bf00      	nop
 800a528:	e008      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800a52a:	bf00      	nop
 800a52c:	e006      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a52e:	bf00      	nop
 800a530:	e004      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800a532:	bf00      	nop
 800a534:	e002      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800a536:	bf00      	nop
 800a538:	e000      	b.n	800a53c <mbedtls_mpi_exp_mod+0x8c2>
cleanup:
 800a53a:	bf00      	nop

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800a53c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a540:	3b01      	subs	r3, #1
 800a542:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a546:	fa02 f303 	lsl.w	r3, r2, r3
 800a54a:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a54e:	e010      	b.n	800a572 <mbedtls_mpi_exp_mod+0x8f8>
        mbedtls_mpi_free( &W[i] );
 800a550:	f107 011c 	add.w	r1, r7, #28
 800a554:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a558:	4613      	mov	r3, r2
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	440b      	add	r3, r1
 800a562:	4618      	mov	r0, r3
 800a564:	f7fc fae5 	bl	8006b32 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800a568:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a56c:	3301      	adds	r3, #1
 800a56e:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a572:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a576:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a57a:	fa02 f303 	lsl.w	r3, r2, r3
 800a57e:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a582:	429a      	cmp	r2, r3
 800a584:	d3e4      	bcc.n	800a550 <mbedtls_mpi_exp_mod+0x8d6>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 800a586:	f107 031c 	add.w	r3, r7, #28
 800a58a:	330c      	adds	r3, #12
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fc fad0 	bl	8006b32 <mbedtls_mpi_free>
 800a592:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a596:	4618      	mov	r0, r3
 800a598:	f7fc facb 	bl	8006b32 <mbedtls_mpi_free>
 800a59c:	f107 0310 	add.w	r3, r7, #16
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fc fac6 	bl	8006b32 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 800a5a6:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d004      	beq.n	800a5b8 <mbedtls_mpi_exp_mod+0x93e>
 800a5ae:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <mbedtls_mpi_exp_mod+0x948>
        mbedtls_mpi_free( &RR );
 800a5b8:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fc fab8 	bl	8006b32 <mbedtls_mpi_free>

    return( ret );
 800a5c2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f207 676c 	addw	r7, r7, #1644	; 0x66c
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd90      	pop	{r4, r7, pc}

0800a5d0 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b090      	sub	sp, #64	; 0x40
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
    int ret;
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800a5dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fc fa8f 	bl	8006b04 <mbedtls_mpi_init>
 800a5e6:	f107 031c 	add.w	r3, r7, #28
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fc fa8a 	bl	8006b04 <mbedtls_mpi_init>
 800a5f0:	f107 0310 	add.w	r3, r7, #16
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fc fa85 	bl	8006b04 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800a5fa:	f107 031c 	add.w	r3, r7, #28
 800a5fe:	68b9      	ldr	r1, [r7, #8]
 800a600:	4618      	mov	r0, r3
 800a602:	f7fc faff 	bl	8006c04 <mbedtls_mpi_copy>
 800a606:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f040 80af 	bne.w	800a76e <mbedtls_mpi_gcd+0x19e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800a610:	f107 0310 	add.w	r3, r7, #16
 800a614:	6879      	ldr	r1, [r7, #4]
 800a616:	4618      	mov	r0, r3
 800a618:	f7fc faf4 	bl	8006c04 <mbedtls_mpi_copy>
 800a61c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a620:	2b00      	cmp	r3, #0
 800a622:	f040 80a6 	bne.w	800a772 <mbedtls_mpi_gcd+0x1a2>

    lz = mbedtls_mpi_lsb( &TA );
 800a626:	f107 031c 	add.w	r3, r7, #28
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fc fb8a 	bl	8006d44 <mbedtls_mpi_lsb>
 800a630:	63b8      	str	r0, [r7, #56]	; 0x38
    lzt = mbedtls_mpi_lsb( &TB );
 800a632:	f107 0310 	add.w	r3, r7, #16
 800a636:	4618      	mov	r0, r3
 800a638:	f7fc fb84 	bl	8006d44 <mbedtls_mpi_lsb>
 800a63c:	6378      	str	r0, [r7, #52]	; 0x34

    if( lzt < lz )
 800a63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	429a      	cmp	r2, r3
 800a644:	d201      	bcs.n	800a64a <mbedtls_mpi_gcd+0x7a>
        lz = lzt;
 800a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a648:	63bb      	str	r3, [r7, #56]	; 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800a64a:	f107 031c 	add.w	r3, r7, #28
 800a64e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a650:	4618      	mov	r0, r3
 800a652:	f7fc fd4f 	bl	80070f4 <mbedtls_mpi_shift_r>
 800a656:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f040 808b 	bne.w	800a776 <mbedtls_mpi_gcd+0x1a6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800a660:	f107 0310 	add.w	r3, r7, #16
 800a664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a666:	4618      	mov	r0, r3
 800a668:	f7fc fd44 	bl	80070f4 <mbedtls_mpi_shift_r>
 800a66c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a670:	2b00      	cmp	r3, #0
 800a672:	f040 8082 	bne.w	800a77a <mbedtls_mpi_gcd+0x1aa>

    TA.s = TB.s = 1;
 800a676:	2301      	movs	r3, #1
 800a678:	613b      	str	r3, [r7, #16]
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	61fb      	str	r3, [r7, #28]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800a67e:	e059      	b.n	800a734 <mbedtls_mpi_gcd+0x164>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800a680:	f107 031c 	add.w	r3, r7, #28
 800a684:	4618      	mov	r0, r3
 800a686:	f7fc fb5d 	bl	8006d44 <mbedtls_mpi_lsb>
 800a68a:	4602      	mov	r2, r0
 800a68c:	f107 031c 	add.w	r3, r7, #28
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f7fc fd2e 	bl	80070f4 <mbedtls_mpi_shift_r>
 800a698:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d16e      	bne.n	800a77e <mbedtls_mpi_gcd+0x1ae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800a6a0:	f107 0310 	add.w	r3, r7, #16
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fc fb4d 	bl	8006d44 <mbedtls_mpi_lsb>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	f107 0310 	add.w	r3, r7, #16
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fc fd1e 	bl	80070f4 <mbedtls_mpi_shift_r>
 800a6b8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d160      	bne.n	800a782 <mbedtls_mpi_gcd+0x1b2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800a6c0:	f107 0210 	add.w	r2, r7, #16
 800a6c4:	f107 031c 	add.w	r3, r7, #28
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fc fe2f 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	db17      	blt.n	800a706 <mbedtls_mpi_gcd+0x136>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800a6d6:	f107 0210 	add.w	r2, r7, #16
 800a6da:	f107 011c 	add.w	r1, r7, #28
 800a6de:	f107 031c 	add.w	r3, r7, #28
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fc fff1 	bl	80076ca <mbedtls_mpi_sub_abs>
 800a6e8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d14a      	bne.n	800a786 <mbedtls_mpi_gcd+0x1b6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800a6f0:	f107 031c 	add.w	r3, r7, #28
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fc fcfc 	bl	80070f4 <mbedtls_mpi_shift_r>
 800a6fc:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a700:	2b00      	cmp	r3, #0
 800a702:	d017      	beq.n	800a734 <mbedtls_mpi_gcd+0x164>
 800a704:	e046      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800a706:	f107 021c 	add.w	r2, r7, #28
 800a70a:	f107 0110 	add.w	r1, r7, #16
 800a70e:	f107 0310 	add.w	r3, r7, #16
 800a712:	4618      	mov	r0, r3
 800a714:	f7fc ffd9 	bl	80076ca <mbedtls_mpi_sub_abs>
 800a718:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d134      	bne.n	800a78a <mbedtls_mpi_gcd+0x1ba>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800a720:	f107 0310 	add.w	r3, r7, #16
 800a724:	2101      	movs	r1, #1
 800a726:	4618      	mov	r0, r3
 800a728:	f7fc fce4 	bl	80070f4 <mbedtls_mpi_shift_r>
 800a72c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d12c      	bne.n	800a78e <mbedtls_mpi_gcd+0x1be>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800a734:	f107 031c 	add.w	r3, r7, #28
 800a738:	2100      	movs	r1, #0
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fc fe92 	bl	8007464 <mbedtls_mpi_cmp_int>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d19c      	bne.n	800a680 <mbedtls_mpi_gcd+0xb0>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800a746:	f107 0310 	add.w	r3, r7, #16
 800a74a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fc fc2c 	bl	8006faa <mbedtls_mpi_shift_l>
 800a752:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d11b      	bne.n	800a792 <mbedtls_mpi_gcd+0x1c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800a75a:	f107 0310 	add.w	r3, r7, #16
 800a75e:	4619      	mov	r1, r3
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7fc fa4f 	bl	8006c04 <mbedtls_mpi_copy>
 800a766:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a76a:	2b00      	cmp	r3, #0

cleanup:
 800a76c:	e012      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800a76e:	bf00      	nop
 800a770:	e010      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800a772:	bf00      	nop
 800a774:	e00e      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800a776:	bf00      	nop
 800a778:	e00c      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800a77a:	bf00      	nop
 800a77c:	e00a      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800a77e:	bf00      	nop
 800a780:	e008      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800a782:	bf00      	nop
 800a784:	e006      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800a786:	bf00      	nop
 800a788:	e004      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800a78a:	bf00      	nop
 800a78c:	e002      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800a78e:	bf00      	nop
 800a790:	e000      	b.n	800a794 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800a792:	bf00      	nop

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800a794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fc f9ca 	bl	8006b32 <mbedtls_mpi_free>
 800a79e:	f107 031c 	add.w	r3, r7, #28
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fc f9c5 	bl	8006b32 <mbedtls_mpi_free>
 800a7a8:	f107 0310 	add.w	r3, r7, #16
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fc f9c0 	bl	8006b32 <mbedtls_mpi_free>

    return( ret );
 800a7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3740      	adds	r7, #64	; 0x40
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800a7bc:	b590      	push	{r4, r7, lr}
 800a7be:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 800a7c8:	f2a4 440c 	subw	r4, r4, #1036	; 0x40c
 800a7cc:	6020      	str	r0, [r4, #0]
 800a7ce:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 800a7d2:	f5a0 6082 	sub.w	r0, r0, #1040	; 0x410
 800a7d6:	6001      	str	r1, [r0, #0]
 800a7d8:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 800a7dc:	f2a1 4114 	subw	r1, r1, #1044	; 0x414
 800a7e0:	600a      	str	r2, [r1, #0]
 800a7e2:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800a7e6:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 800a7ea:	6013      	str	r3, [r2, #0]
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 800a7ec:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800a7f0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7fa:	d902      	bls.n	800a802 <mbedtls_mpi_fill_random+0x46>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a7fc:	f06f 0303 	mvn.w	r3, #3
 800a800:	e035      	b.n	800a86e <mbedtls_mpi_fill_random+0xb2>

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800a802:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800a806:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 800a80a:	f107 0114 	add.w	r1, r7, #20
 800a80e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800a812:	f5a3 6083 	sub.w	r0, r3, #1048	; 0x418
 800a816:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800a81a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6812      	ldr	r2, [r2, #0]
 800a822:	6800      	ldr	r0, [r0, #0]
 800a824:	4798      	blx	r3
 800a826:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
 800a82a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d113      	bne.n	800a85a <mbedtls_mpi_fill_random+0x9e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 800a832:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800a836:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 800a83a:	f107 0114 	add.w	r1, r7, #20
 800a83e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800a842:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800a846:	6812      	ldr	r2, [r2, #0]
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	f7fc fb11 	bl	8006e70 <mbedtls_mpi_read_binary>
 800a84e:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
 800a852:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800a856:	2b00      	cmp	r3, #0

cleanup:
 800a858:	e000      	b.n	800a85c <mbedtls_mpi_fill_random+0xa0>
    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800a85a:	bf00      	nop
    mbedtls_zeroize( buf, sizeof( buf ) );
 800a85c:	f107 0314 	add.w	r3, r7, #20
 800a860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a864:	4618      	mov	r0, r3
 800a866:	f7fc f934 	bl	8006ad2 <mbedtls_zeroize>
    return( ret );
 800a86a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
}
 800a86e:	4618      	mov	r0, r3
 800a870:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 800a874:	46bd      	mov	sp, r7
 800a876:	bd90      	pop	{r4, r7, pc}

0800a878 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b0a0      	sub	sp, #128	; 0x80
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800a884:	2101      	movs	r1, #1
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7fc fdec 	bl	8007464 <mbedtls_mpi_cmp_int>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dc02      	bgt.n	800a898 <mbedtls_mpi_inv_mod+0x20>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a892:	f06f 0303 	mvn.w	r3, #3
 800a896:	e23e      	b.n	800ad16 <mbedtls_mpi_inv_mod+0x49e>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 800a898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fc f931 	bl	8006b04 <mbedtls_mpi_init>
 800a8a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fc f92c 	bl	8006b04 <mbedtls_mpi_init>
 800a8ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fc f927 	bl	8006b04 <mbedtls_mpi_init>
 800a8b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fc f922 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 800a8c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fc f91d 	bl	8006b04 <mbedtls_mpi_init>
 800a8ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fc f918 	bl	8006b04 <mbedtls_mpi_init>
 800a8d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fc f913 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 800a8de:	f107 031c 	add.w	r3, r7, #28
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fc f90e 	bl	8006b04 <mbedtls_mpi_init>
 800a8e8:	f107 0310 	add.w	r3, r7, #16
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fc f909 	bl	8006b04 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800a8f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7ff fe68 	bl	800a5d0 <mbedtls_mpi_gcd>
 800a900:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a904:	2b00      	cmp	r3, #0
 800a906:	f040 81a5 	bne.w	800ac54 <mbedtls_mpi_inv_mod+0x3dc>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800a90a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a90e:	2101      	movs	r1, #1
 800a910:	4618      	mov	r0, r3
 800a912:	f7fc fda7 	bl	8007464 <mbedtls_mpi_cmp_int>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <mbedtls_mpi_inv_mod+0xac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800a91c:	f06f 030d 	mvn.w	r3, #13
 800a920:	67fb      	str	r3, [r7, #124]	; 0x7c
        goto cleanup;
 800a922:	e1ca      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800a924:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7ff f886 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 800a932:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a934:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a936:	2b00      	cmp	r3, #0
 800a938:	f040 818e 	bne.w	800ac58 <mbedtls_mpi_inv_mod+0x3e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800a93c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800a940:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a944:	4611      	mov	r1, r2
 800a946:	4618      	mov	r0, r3
 800a948:	f7fc f95c 	bl	8006c04 <mbedtls_mpi_copy>
 800a94c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a94e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a950:	2b00      	cmp	r3, #0
 800a952:	f040 8183 	bne.w	800ac5c <mbedtls_mpi_inv_mod+0x3e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800a956:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fc f951 	bl	8006c04 <mbedtls_mpi_copy>
 800a962:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a966:	2b00      	cmp	r3, #0
 800a968:	f040 817a 	bne.w	800ac60 <mbedtls_mpi_inv_mod+0x3e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800a96c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a970:	6879      	ldr	r1, [r7, #4]
 800a972:	4618      	mov	r0, r3
 800a974:	f7fc f946 	bl	8006c04 <mbedtls_mpi_copy>
 800a978:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a97a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f040 8171 	bne.w	800ac64 <mbedtls_mpi_inv_mod+0x3ec>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800a982:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a986:	2101      	movs	r1, #1
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fc f98c 	bl	8006ca6 <mbedtls_mpi_lset>
 800a98e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a990:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a992:	2b00      	cmp	r3, #0
 800a994:	f040 8168 	bne.w	800ac68 <mbedtls_mpi_inv_mod+0x3f0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800a998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a99c:	2100      	movs	r1, #0
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fc f981 	bl	8006ca6 <mbedtls_mpi_lset>
 800a9a4:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a9a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f040 815f 	bne.w	800ac6c <mbedtls_mpi_inv_mod+0x3f4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800a9ae:	f107 031c 	add.w	r3, r7, #28
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fc f976 	bl	8006ca6 <mbedtls_mpi_lset>
 800a9ba:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a9bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f040 8156 	bne.w	800ac70 <mbedtls_mpi_inv_mod+0x3f8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800a9c4:	f107 0310 	add.w	r3, r7, #16
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fc f96b 	bl	8006ca6 <mbedtls_mpi_lset>
 800a9d0:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a9d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f040 814d 	bne.w	800ac74 <mbedtls_mpi_inv_mod+0x3fc>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 800a9da:	e048      	b.n	800aa6e <mbedtls_mpi_inv_mod+0x1f6>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800a9dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fc fb86 	bl	80070f4 <mbedtls_mpi_shift_r>
 800a9e8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a9ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f040 8143 	bne.w	800ac78 <mbedtls_mpi_inv_mod+0x400>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800a9f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d105      	bne.n	800aa0a <mbedtls_mpi_inv_mod+0x192>
 800a9fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d01b      	beq.n	800aa42 <mbedtls_mpi_inv_mod+0x1ca>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800aa0a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800aa0e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800aa12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fc febb 	bl	8007792 <mbedtls_mpi_add_mpi>
 800aa1c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f040 812b 	bne.w	800ac7c <mbedtls_mpi_inv_mod+0x404>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800aa26:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800aa2a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800aa2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fc fef7 	bl	8007826 <mbedtls_mpi_sub_mpi>
 800aa38:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f040 811f 	bne.w	800ac80 <mbedtls_mpi_inv_mod+0x408>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800aa42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aa46:	2101      	movs	r1, #1
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fc fb53 	bl	80070f4 <mbedtls_mpi_shift_r>
 800aa4e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 8116 	bne.w	800ac84 <mbedtls_mpi_inv_mod+0x40c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800aa58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fc fb48 	bl	80070f4 <mbedtls_mpi_shift_r>
 800aa64:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f040 810d 	bne.w	800ac88 <mbedtls_mpi_inv_mod+0x410>
        while( ( TU.p[0] & 1 ) == 0 )
 800aa6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0b0      	beq.n	800a9dc <mbedtls_mpi_inv_mod+0x164>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 800aa7a:	e048      	b.n	800ab0e <mbedtls_mpi_inv_mod+0x296>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800aa7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa80:	2101      	movs	r1, #1
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fc fb36 	bl	80070f4 <mbedtls_mpi_shift_r>
 800aa88:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f040 80fd 	bne.w	800ac8c <mbedtls_mpi_inv_mod+0x414>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d105      	bne.n	800aaaa <mbedtls_mpi_inv_mod+0x232>
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d01b      	beq.n	800aae2 <mbedtls_mpi_inv_mod+0x26a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800aaaa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800aaae:	f107 011c 	add.w	r1, r7, #28
 800aab2:	f107 031c 	add.w	r3, r7, #28
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fc fe6b 	bl	8007792 <mbedtls_mpi_add_mpi>
 800aabc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aabe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f040 80e5 	bne.w	800ac90 <mbedtls_mpi_inv_mod+0x418>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800aac6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800aaca:	f107 0110 	add.w	r1, r7, #16
 800aace:	f107 0310 	add.w	r3, r7, #16
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fc fea7 	bl	8007826 <mbedtls_mpi_sub_mpi>
 800aad8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f040 80d9 	bne.w	800ac94 <mbedtls_mpi_inv_mod+0x41c>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800aae2:	f107 031c 	add.w	r3, r7, #28
 800aae6:	2101      	movs	r1, #1
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fc fb03 	bl	80070f4 <mbedtls_mpi_shift_r>
 800aaee:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aaf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f040 80d0 	bne.w	800ac98 <mbedtls_mpi_inv_mod+0x420>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800aaf8:	f107 0310 	add.w	r3, r7, #16
 800aafc:	2101      	movs	r1, #1
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fc faf8 	bl	80070f4 <mbedtls_mpi_shift_r>
 800ab04:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ab06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f040 80c7 	bne.w	800ac9c <mbedtls_mpi_inv_mod+0x424>
        while( ( TV.p[0] & 1 ) == 0 )
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0b0      	beq.n	800aa7c <mbedtls_mpi_inv_mod+0x204>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800ab1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ab1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ab22:	4611      	mov	r1, r2
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7fc fc02 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	db29      	blt.n	800ab84 <mbedtls_mpi_inv_mod+0x30c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800ab30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ab34:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ab38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fc fe72 	bl	8007826 <mbedtls_mpi_sub_mpi>
 800ab42:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ab44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f040 80aa 	bne.w	800aca0 <mbedtls_mpi_inv_mod+0x428>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800ab4c:	f107 021c 	add.w	r2, r7, #28
 800ab50:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800ab54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fc fe64 	bl	8007826 <mbedtls_mpi_sub_mpi>
 800ab5e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ab60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f040 809e 	bne.w	800aca4 <mbedtls_mpi_inv_mod+0x42c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800ab68:	f107 0210 	add.w	r2, r7, #16
 800ab6c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ab70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fc fe56 	bl	8007826 <mbedtls_mpi_sub_mpi>
 800ab7a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ab7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d028      	beq.n	800abd4 <mbedtls_mpi_inv_mod+0x35c>
 800ab82:	e09a      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800ab84:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ab88:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ab8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fc fe48 	bl	8007826 <mbedtls_mpi_sub_mpi>
 800ab96:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ab98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f040 8084 	bne.w	800aca8 <mbedtls_mpi_inv_mod+0x430>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800aba0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800aba4:	f107 011c 	add.w	r1, r7, #28
 800aba8:	f107 031c 	add.w	r3, r7, #28
 800abac:	4618      	mov	r0, r3
 800abae:	f7fc fe3a 	bl	8007826 <mbedtls_mpi_sub_mpi>
 800abb2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800abb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d178      	bne.n	800acac <mbedtls_mpi_inv_mod+0x434>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800abba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800abbe:	f107 0110 	add.w	r1, r7, #16
 800abc2:	f107 0310 	add.w	r3, r7, #16
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fc fe2d 	bl	8007826 <mbedtls_mpi_sub_mpi>
 800abcc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800abce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d16d      	bne.n	800acb0 <mbedtls_mpi_inv_mod+0x438>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800abd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800abd8:	2100      	movs	r1, #0
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fc fc42 	bl	8007464 <mbedtls_mpi_cmp_int>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f47f af43 	bne.w	800aa6e <mbedtls_mpi_inv_mod+0x1f6>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800abe8:	e00b      	b.n	800ac02 <mbedtls_mpi_inv_mod+0x38a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800abea:	f107 011c 	add.w	r1, r7, #28
 800abee:	f107 031c 	add.w	r3, r7, #28
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fc fdcc 	bl	8007792 <mbedtls_mpi_add_mpi>
 800abfa:	67f8      	str	r0, [r7, #124]	; 0x7c
 800abfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d158      	bne.n	800acb4 <mbedtls_mpi_inv_mod+0x43c>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800ac02:	f107 031c 	add.w	r3, r7, #28
 800ac06:	2100      	movs	r1, #0
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fc fc2b 	bl	8007464 <mbedtls_mpi_cmp_int>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dbea      	blt.n	800abea <mbedtls_mpi_inv_mod+0x372>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800ac14:	e00b      	b.n	800ac2e <mbedtls_mpi_inv_mod+0x3b6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800ac16:	f107 011c 	add.w	r1, r7, #28
 800ac1a:	f107 031c 	add.w	r3, r7, #28
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fc fe00 	bl	8007826 <mbedtls_mpi_sub_mpi>
 800ac26:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ac28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d144      	bne.n	800acb8 <mbedtls_mpi_inv_mod+0x440>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800ac2e:	f107 031c 	add.w	r3, r7, #28
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fc fb7a 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	daea      	bge.n	800ac16 <mbedtls_mpi_inv_mod+0x39e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800ac40:	f107 031c 	add.w	r3, r7, #28
 800ac44:	4619      	mov	r1, r3
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f7fb ffdc 	bl	8006c04 <mbedtls_mpi_copy>
 800ac4c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ac4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac50:	2b00      	cmp	r3, #0

cleanup:
 800ac52:	e032      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800ac54:	bf00      	nop
 800ac56:	e030      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800ac58:	bf00      	nop
 800ac5a:	e02e      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800ac5c:	bf00      	nop
 800ac5e:	e02c      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800ac60:	bf00      	nop
 800ac62:	e02a      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800ac64:	bf00      	nop
 800ac66:	e028      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800ac68:	bf00      	nop
 800ac6a:	e026      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800ac6c:	bf00      	nop
 800ac6e:	e024      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800ac70:	bf00      	nop
 800ac72:	e022      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800ac74:	bf00      	nop
 800ac76:	e020      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800ac78:	bf00      	nop
 800ac7a:	e01e      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800ac7c:	bf00      	nop
 800ac7e:	e01c      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800ac80:	bf00      	nop
 800ac82:	e01a      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800ac84:	bf00      	nop
 800ac86:	e018      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800ac88:	bf00      	nop
 800ac8a:	e016      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800ac8c:	bf00      	nop
 800ac8e:	e014      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800ac90:	bf00      	nop
 800ac92:	e012      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800ac94:	bf00      	nop
 800ac96:	e010      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800ac98:	bf00      	nop
 800ac9a:	e00e      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800ac9c:	bf00      	nop
 800ac9e:	e00c      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800aca0:	bf00      	nop
 800aca2:	e00a      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800aca4:	bf00      	nop
 800aca6:	e008      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800aca8:	bf00      	nop
 800acaa:	e006      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800acac:	bf00      	nop
 800acae:	e004      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800acb0:	bf00      	nop
 800acb2:	e002      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800acb4:	bf00      	nop
 800acb6:	e000      	b.n	800acba <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800acb8:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800acba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fb ff37 	bl	8006b32 <mbedtls_mpi_free>
 800acc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800acc8:	4618      	mov	r0, r3
 800acca:	f7fb ff32 	bl	8006b32 <mbedtls_mpi_free>
 800acce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fb ff2d 	bl	8006b32 <mbedtls_mpi_free>
 800acd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fb ff28 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800ace2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fb ff23 	bl	8006b32 <mbedtls_mpi_free>
 800acec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fb ff1e 	bl	8006b32 <mbedtls_mpi_free>
 800acf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fb ff19 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800ad00:	f107 031c 	add.w	r3, r7, #28
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fb ff14 	bl	8006b32 <mbedtls_mpi_free>
 800ad0a:	f107 0310 	add.w	r3, r7, #16
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fb ff0f 	bl	8006b32 <mbedtls_mpi_free>

    return( ret );
 800ad14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3780      	adds	r7, #128	; 0x80
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <mbedtls_cipher_get_block_size>:
 *
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <mbedtls_cipher_get_block_size+0x16>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <mbedtls_cipher_get_block_size+0x1a>
        return 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	e002      	b.n	800ad3e <mbedtls_cipher_get_block_size+0x20>

    return ctx->cipher_info->block_size;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <mbedtls_cipher_get_iv_size>:
 * \return      <ul><li>If no IV has been set: the recommended IV size.
 *              0 for ciphers not using IV or nonce.</li>
 *              <li>If IV has already been set: the actual size.</li></ul>
 */
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b083      	sub	sp, #12
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <mbedtls_cipher_get_iv_size+0x16>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <mbedtls_cipher_get_iv_size+0x1a>
        return 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	e009      	b.n	800ad78 <mbedtls_cipher_get_iv_size+0x2e>

    if( ctx->iv_size != 0 )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <mbedtls_cipher_get_iv_size+0x28>
        return (int) ctx->iv_size;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad70:	e002      	b.n	800ad78 <mbedtls_cipher_get_iv_size+0x2e>

    return (int) ctx->cipher_info->iv_size;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68db      	ldr	r3, [r3, #12]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <mbedtls_zeroize>:
#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e004      	b.n	800ad9e <mbedtls_zeroize+0x1a>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	1c5a      	adds	r2, r3, #1
 800ad98:	60fa      	str	r2, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	1e5a      	subs	r2, r3, #1
 800ada2:	603a      	str	r2, [r7, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1f5      	bne.n	800ad94 <mbedtls_zeroize+0x10>
}
 800ada8:	bf00      	nop
 800adaa:	bf00      	nop
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
	...

0800adb8 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	4603      	mov	r3, r0
 800adc0:	71fb      	strb	r3, [r7, #7]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800adc2:	4b0c      	ldr	r3, [pc, #48]	; (800adf4 <mbedtls_cipher_info_from_type+0x3c>)
 800adc4:	60fb      	str	r3, [r7, #12]
 800adc6:	e00a      	b.n	800adde <mbedtls_cipher_info_from_type+0x26>
        if( def->type == cipher_type )
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	79fa      	ldrb	r2, [r7, #7]
 800adce:	429a      	cmp	r2, r3
 800add0:	d102      	bne.n	800add8 <mbedtls_cipher_info_from_type+0x20>
            return( def->info );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	e007      	b.n	800ade8 <mbedtls_cipher_info_from_type+0x30>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3308      	adds	r3, #8
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1f0      	bne.n	800adc8 <mbedtls_cipher_info_from_type+0x10>

    return( NULL );
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	08024c50 	.word	0x08024c50

0800adf8 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	6039      	str	r1, [r7, #0]
 800ae02:	71fb      	strb	r3, [r7, #7]
 800ae04:	4613      	mov	r3, r2
 800ae06:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800ae08:	4b13      	ldr	r3, [pc, #76]	; (800ae58 <mbedtls_cipher_info_from_values+0x60>)
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	e018      	b.n	800ae40 <mbedtls_cipher_info_from_values+0x48>
        if( def->info->base->cipher == cipher_id &&
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	79fa      	ldrb	r2, [r7, #7]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d10e      	bne.n	800ae3a <mbedtls_cipher_info_from_values+0x42>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	685a      	ldr	r2, [r3, #4]
 800ae22:	683b      	ldr	r3, [r7, #0]
        if( def->info->base->cipher == cipher_id &&
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d108      	bne.n	800ae3a <mbedtls_cipher_info_from_values+0x42>
            def->info->mode == mode )
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	785b      	ldrb	r3, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800ae2e:	79ba      	ldrb	r2, [r7, #6]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d102      	bne.n	800ae3a <mbedtls_cipher_info_from_values+0x42>
            return( def->info );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	e007      	b.n	800ae4a <mbedtls_cipher_info_from_values+0x52>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3308      	adds	r3, #8
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1e2      	bne.n	800ae0e <mbedtls_cipher_info_from_values+0x16>

    return( NULL );
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	08024c50 	.word	0x08024c50

0800ae5c <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800ae64:	2240      	movs	r2, #64	; 0x40
 800ae66:	2100      	movs	r1, #0
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f013 f917 	bl	801e09c <memset>
}
 800ae6e:	bf00      	nop
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <mbedtls_cipher_free>:

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d010      	beq.n	800aea6 <mbedtls_cipher_free+0x30>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d007      	beq.n	800ae9c <mbedtls_cipher_free+0x26>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800ae9c:	2140      	movs	r1, #64	; 0x40
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7ff ff70 	bl	800ad84 <mbedtls_zeroize>
 800aea4:	e000      	b.n	800aea8 <mbedtls_cipher_free+0x32>
        return;
 800aea6:	bf00      	nop
}
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
    if( NULL == cipher_info || NULL == ctx )
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <mbedtls_cipher_setup+0x16>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <mbedtls_cipher_setup+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800aec6:	4b10      	ldr	r3, [pc, #64]	; (800af08 <mbedtls_cipher_setup+0x58>)
 800aec8:	e019      	b.n	800aefe <mbedtls_cipher_setup+0x4e>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800aeca:	2240      	movs	r2, #64	; 0x40
 800aecc:	2100      	movs	r1, #0
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f013 f8e4 	bl	801e09c <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	4798      	blx	r3
 800aedc:	4602      	mov	r2, r0
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	63da      	str	r2, [r3, #60]	; 0x3c
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <mbedtls_cipher_setup+0x3e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 800aeea:	4b08      	ldr	r3, [pc, #32]	; (800af0c <mbedtls_cipher_setup+0x5c>)
 800aeec:	e007      	b.n	800aefe <mbedtls_cipher_setup+0x4e>

    ctx->cipher_info = cipher_info;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	683a      	ldr	r2, [r7, #0]
 800aef2:	601a      	str	r2, [r3, #0]
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 800aef4:	2104      	movs	r1, #4
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 face 	bl	800b498 <mbedtls_cipher_set_padding_mode>
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	ffff9f00 	.word	0xffff9f00
 800af0c:	ffff9e80 	.word	0xffff9e80

0800af10 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
 800af1c:	70fb      	strb	r3, [r7, #3]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d003      	beq.n	800af2c <mbedtls_cipher_setkey+0x1c>
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <mbedtls_cipher_setkey+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800af2c:	4b23      	ldr	r3, [pc, #140]	; (800afbc <mbedtls_cipher_setkey+0xac>)
 800af2e:	e040      	b.n	800afb2 <mbedtls_cipher_setkey+0xa2>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	f003 0302 	and.w	r3, r3, #2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d108      	bne.n	800af50 <mbedtls_cipher_setkey+0x40>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	461a      	mov	r2, r3
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4293      	cmp	r3, r2
 800af4a:	d001      	beq.n	800af50 <mbedtls_cipher_setkey+0x40>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800af4c:	4b1b      	ldr	r3, [pc, #108]	; (800afbc <mbedtls_cipher_setkey+0xac>)
 800af4e:	e030      	b.n	800afb2 <mbedtls_cipher_setkey+0xa2>
    }

    ctx->key_bitlen = key_bitlen;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	78fa      	ldrb	r2, [r7, #3]
 800af5a:	721a      	strb	r2, [r3, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 800af5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d009      	beq.n	800af78 <mbedtls_cipher_setkey+0x68>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d004      	beq.n	800af78 <mbedtls_cipher_setkey+0x68>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800af74:	2b05      	cmp	r3, #5
 800af76:	d10b      	bne.n	800af90 <mbedtls_cipher_setkey+0x80>
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                ctx->key_bitlen );
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	6852      	ldr	r2, [r2, #4]
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800af88:	68b9      	ldr	r1, [r7, #8]
 800af8a:	4798      	blx	r3
 800af8c:	4603      	mov	r3, r0
 800af8e:	e010      	b.n	800afb2 <mbedtls_cipher_setkey+0xa2>
    }

    if( MBEDTLS_DECRYPT == operation )
 800af90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10b      	bne.n	800afb0 <mbedtls_cipher_setkey+0xa0>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                ctx->key_bitlen );
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	6852      	ldr	r2, [r2, #4]
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800afa8:	68b9      	ldr	r1, [r7, #8]
 800afaa:	4798      	blx	r3
 800afac:	4603      	mov	r3, r0
 800afae:	e000      	b.n	800afb2 <mbedtls_cipher_setkey+0xa2>

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <mbedtls_cipher_setkey+0xac>)
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	ffff9f00 	.word	0xffff9f00

0800afc0 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <mbedtls_cipher_set_iv+0x20>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <mbedtls_cipher_set_iv+0x20>
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <mbedtls_cipher_set_iv+0x24>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800afe0:	4b14      	ldr	r3, [pc, #80]	; (800b034 <mbedtls_cipher_set_iv+0x74>)
 800afe2:	e023      	b.n	800b02c <mbedtls_cipher_set_iv+0x6c>

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b10      	cmp	r3, #16
 800afe8:	d901      	bls.n	800afee <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <mbedtls_cipher_set_iv+0x78>)
 800afec:	e01e      	b.n	800b02c <mbedtls_cipher_set_iv+0x6c>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <mbedtls_cipher_set_iv+0x42>
        actual_iv_size = iv_len;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	e009      	b.n	800b016 <mbedtls_cipher_set_iv+0x56>
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	617b      	str	r3, [r7, #20]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d901      	bls.n	800b016 <mbedtls_cipher_set_iv+0x56>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b012:	4b08      	ldr	r3, [pc, #32]	; (800b034 <mbedtls_cipher_set_iv+0x74>)
 800b014:	e00a      	b.n	800b02c <mbedtls_cipher_set_iv+0x6c>
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3328      	adds	r3, #40	; 0x28
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	68b9      	ldr	r1, [r7, #8]
 800b01e:	4618      	mov	r0, r3
 800b020:	f013 f814 	bl	801e04c <memcpy>
    ctx->iv_size = actual_iv_size;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	639a      	str	r2, [r3, #56]	; 0x38

    return( 0 );
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	ffff9f00 	.word	0xffff9f00
 800b038:	ffff9f80 	.word	0xffff9f80

0800b03c <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <mbedtls_cipher_reset+0x16>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <mbedtls_cipher_reset+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b052:	4b06      	ldr	r3, [pc, #24]	; (800b06c <mbedtls_cipher_reset+0x30>)
 800b054:	e003      	b.n	800b05e <mbedtls_cipher_reset+0x22>

    ctx->unprocessed_len = 0;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	625a      	str	r2, [r3, #36]	; 0x24

    return( 0 );
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	ffff9f00 	.word	0xffff9f00

0800b070 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 800b070:	b5b0      	push	{r4, r5, r7, lr}
 800b072:	b08a      	sub	sp, #40	; 0x28
 800b074:	af02      	add	r7, sp, #8
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
 800b07c:	603b      	str	r3, [r7, #0]
    int ret;
    size_t block_size = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	61bb      	str	r3, [r7, #24]

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d006      	beq.n	800b096 <mbedtls_cipher_update+0x26>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <mbedtls_cipher_update+0x26>
 800b090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <mbedtls_cipher_update+0x2a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b096:	4b90      	ldr	r3, [pc, #576]	; (800b2d8 <mbedtls_cipher_update+0x268>)
 800b098:	e125      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
    }

    *olen = 0;
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	2200      	movs	r2, #0
 800b09e:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7ff fe3c 	bl	800ad1e <mbedtls_cipher_get_block_size>
 800b0a6:	61b8      	str	r0, [r7, #24]

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	785b      	ldrb	r3, [r3, #1]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d11c      	bne.n	800b0ec <mbedtls_cipher_update+0x7c>
    {
        if( ilen != block_size )
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d001      	beq.n	800b0be <mbedtls_cipher_update+0x4e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b0ba:	4b88      	ldr	r3, [pc, #544]	; (800b2dc <mbedtls_cipher_update+0x26c>)
 800b0bc:	e113      	b.n	800b2e6 <mbedtls_cipher_update+0x276>

        *olen = ilen;
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	685c      	ldr	r4, [r3, #4]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	47a0      	blx	r4
 800b0dc:	6178      	str	r0, [r7, #20]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <mbedtls_cipher_update+0x78>
                    ctx->operation, input, output ) ) )
        {
            return( ret );
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	e0fe      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
        }

        return( 0 );
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	e0fc      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	785b      	ldrb	r3, [r3, #1]
 800b0f2:	2b06      	cmp	r3, #6
 800b0f4:	d10b      	bne.n	800b10e <mbedtls_cipher_update+0x9e>
    {
        *olen = ilen;
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	601a      	str	r2, [r3, #0]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	f002 fd16 	bl	800db36 <mbedtls_gcm_update>
 800b10a:	4603      	mov	r3, r0
 800b10c:	e0eb      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
                           output );
    }
#endif

    if ( 0 == block_size )
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <mbedtls_cipher_update+0xa8>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 800b114:	4b72      	ldr	r3, [pc, #456]	; (800b2e0 <mbedtls_cipher_update+0x270>)
 800b116:	e0e6      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
    }

    if( input == output &&
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d10f      	bne.n	800b140 <mbedtls_cipher_update+0xd0>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if( input == output &&
 800b124:	2b00      	cmp	r3, #0
 800b126:	d109      	bne.n	800b13c <mbedtls_cipher_update+0xcc>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b130:	69b9      	ldr	r1, [r7, #24]
 800b132:	fb01 f202 	mul.w	r2, r1, r2
 800b136:	1a9b      	subs	r3, r3, r2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <mbedtls_cipher_update+0xd0>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b13c:	4b66      	ldr	r3, [pc, #408]	; (800b2d8 <mbedtls_cipher_update+0x268>)
 800b13e:	e0d2      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	785b      	ldrb	r3, [r3, #1]
 800b146:	2b02      	cmp	r3, #2
 800b148:	f040 80cc 	bne.w	800b2e4 <mbedtls_cipher_update+0x274>
    {
        size_t copy_len = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d106      	bne.n	800b168 <mbedtls_cipher_update+0xf8>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	1ad3      	subs	r3, r2, r3
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d90b      	bls.n	800b180 <mbedtls_cipher_update+0x110>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen <= block_size - ctx->unprocessed_len ) ||
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d119      	bne.n	800b1a6 <mbedtls_cipher_update+0x136>
                ilen < block_size - ctx->unprocessed_len ) )
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	1ad3      	subs	r3, r2, r3
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d212      	bcs.n	800b1a6 <mbedtls_cipher_update+0x136>
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b184:	3310      	adds	r3, #16
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	4413      	add	r3, r2
 800b18a:	3304      	adds	r3, #4
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	68b9      	ldr	r1, [r7, #8]
 800b190:	4618      	mov	r0, r3
 800b192:	f012 ff5b 	bl	801e04c <memcpy>
                    ilen );

            ctx->unprocessed_len += ilen;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	441a      	add	r2, r3
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	625a      	str	r2, [r3, #36]	; 0x24
            return( 0 );
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e09f      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d03e      	beq.n	800b22c <mbedtls_cipher_update+0x1bc>
        {
            copy_len = block_size - ctx->unprocessed_len;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	61fb      	str	r3, [r7, #28]

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	3310      	adds	r3, #16
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	69fa      	ldr	r2, [r7, #28]
 800b1c6:	68b9      	ldr	r1, [r7, #8]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f012 ff3f 	bl	801e04c <memcpy>
                    copy_len );

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	699b      	ldr	r3, [r3, #24]
 800b1d4:	689c      	ldr	r4, [r3, #8]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, block_size, ctx->iv,
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f103 0528 	add.w	r5, r3, #40	; 0x28
                    ctx->unprocessed_data, output ) ) )
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3314      	adds	r3, #20
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	9201      	str	r2, [sp, #4]
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	462b      	mov	r3, r5
 800b1f2:	69ba      	ldr	r2, [r7, #24]
 800b1f4:	47a0      	blx	r4
 800b1f6:	6178      	str	r0, [r7, #20]
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <mbedtls_cipher_update+0x192>
            {
                return( ret );
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	e071      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
            }

            *olen += block_size;
 800b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	441a      	add	r2, r3
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	601a      	str	r2, [r3, #0]
            output += block_size;
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	4413      	add	r3, r2
 800b214:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	625a      	str	r2, [r3, #36]	; 0x24

            input += copy_len;
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	4413      	add	r3, r2
 800b222:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d02d      	beq.n	800b28e <mbedtls_cipher_update+0x21e>
        {
            if( 0 == block_size )
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <mbedtls_cipher_update+0x1cc>
            {
                return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 800b238:	4b29      	ldr	r3, [pc, #164]	; (800b2e0 <mbedtls_cipher_update+0x270>)
 800b23a:	e054      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
            }

            copy_len = ilen % block_size;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	69ba      	ldr	r2, [r7, #24]
 800b240:	fbb3 f2f2 	udiv	r2, r3, r2
 800b244:	69b9      	ldr	r1, [r7, #24]
 800b246:	fb01 f202 	mul.w	r2, r1, r2
 800b24a:	1a9b      	subs	r3, r3, r2
 800b24c:	61fb      	str	r3, [r7, #28]
            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d106      	bne.n	800b262 <mbedtls_cipher_update+0x1f2>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <mbedtls_cipher_update+0x1f2>
                copy_len = block_size;
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	61fb      	str	r3, [r7, #28]

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f103 0014 	add.w	r0, r3, #20
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	1ad3      	subs	r3, r2, r3
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	4413      	add	r3, r2
 800b272:	69fa      	ldr	r2, [r7, #28]
 800b274:	4619      	mov	r1, r3
 800b276:	f012 fee9 	bl	801e04c <memcpy>
                    copy_len );

            ctx->unprocessed_len += copy_len;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	441a      	add	r2, r3
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	625a      	str	r2, [r3, #36]	; 0x24
            ilen -= copy_len;
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d01e      	beq.n	800b2d2 <mbedtls_cipher_update+0x262>
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	689c      	ldr	r4, [r3, #8]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f103 0228 	add.w	r2, r3, #40	; 0x28
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	9301      	str	r3, [sp, #4]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	47a0      	blx	r4
 800b2ba:	6178      	str	r0, [r7, #20]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <mbedtls_cipher_update+0x256>
            {
                return( ret );
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	e00f      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
            }

            *olen += ilen;
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	441a      	add	r2, r3
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	601a      	str	r2, [r3, #0]
        }

        return( 0 );
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e007      	b.n	800b2e6 <mbedtls_cipher_update+0x276>
 800b2d6:	bf00      	nop
 800b2d8:	ffff9f00 	.word	0xffff9f00
 800b2dc:	ffff9d80 	.word	0xffff9d80
 800b2e0:	ffff9c80 	.word	0xffff9c80

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <mbedtls_cipher_update+0x280>)
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bdb0      	pop	{r4, r5, r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	ffff9f80 	.word	0xffff9f80

0800b2f4 <get_no_padding>:
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
    if( NULL == input || NULL == data_len )
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d002      	beq.n	800b30c <get_no_padding+0x18>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <get_no_padding+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b30c:	4b05      	ldr	r3, [pc, #20]	; (800b324 <get_no_padding+0x30>)
 800b30e:	e003      	b.n	800b318 <get_no_padding+0x24>

    *data_len = input_len;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	601a      	str	r2, [r3, #0]

    return( 0 );
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	ffff9f00 	.word	0xffff9f00

0800b328 <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 800b328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b32a:	b089      	sub	sp, #36	; 0x24
 800b32c:	af02      	add	r7, sp, #8
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d006      	beq.n	800b348 <mbedtls_cipher_finish+0x20>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <mbedtls_cipher_finish+0x20>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <mbedtls_cipher_finish+0x24>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b348:	4b50      	ldr	r3, [pc, #320]	; (800b48c <mbedtls_cipher_finish+0x164>)
 800b34a:	e09a      	b.n	800b482 <mbedtls_cipher_finish+0x15a>

    *olen = 0;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	601a      	str	r2, [r3, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	785b      	ldrb	r3, [r3, #1]
 800b358:	2b03      	cmp	r3, #3
 800b35a:	d00e      	beq.n	800b37a <mbedtls_cipher_finish+0x52>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b362:	2b05      	cmp	r3, #5
 800b364:	d009      	beq.n	800b37a <mbedtls_cipher_finish+0x52>
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
 800b36c:	2b06      	cmp	r3, #6
 800b36e:	d004      	beq.n	800b37a <mbedtls_cipher_finish+0x52>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 800b376:	2b07      	cmp	r3, #7
 800b378:	d101      	bne.n	800b37e <mbedtls_cipher_finish+0x56>
    {
        return( 0 );
 800b37a:	2300      	movs	r3, #0
 800b37c:	e081      	b.n	800b482 <mbedtls_cipher_finish+0x15a>
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	785b      	ldrb	r3, [r3, #1]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d107      	bne.n	800b398 <mbedtls_cipher_finish+0x70>
    {
        if( ctx->unprocessed_len != 0 )
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <mbedtls_cipher_finish+0x6c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b390:	4b3f      	ldr	r3, [pc, #252]	; (800b490 <mbedtls_cipher_finish+0x168>)
 800b392:	e076      	b.n	800b482 <mbedtls_cipher_finish+0x15a>

        return( 0 );
 800b394:	2300      	movs	r3, #0
 800b396:	e074      	b.n	800b482 <mbedtls_cipher_finish+0x15a>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	785b      	ldrb	r3, [r3, #1]
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d16e      	bne.n	800b480 <mbedtls_cipher_finish+0x158>
    {
        int ret = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]

        if( MBEDTLS_ENCRYPT == ctx->operation )
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d11b      	bne.n	800b3e8 <mbedtls_cipher_finish+0xc0>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d107      	bne.n	800b3c8 <mbedtls_cipher_finish+0xa0>
            {
                if( 0 != ctx->unprocessed_len )
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <mbedtls_cipher_finish+0x9c>
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b3c0:	4b33      	ldr	r3, [pc, #204]	; (800b490 <mbedtls_cipher_finish+0x168>)
 800b3c2:	e05e      	b.n	800b482 <mbedtls_cipher_finish+0x15a>

                return( 0 );
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	e05c      	b.n	800b482 <mbedtls_cipher_finish+0x15a>
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	68dc      	ldr	r4, [r3, #12]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f103 0514 	add.w	r5, r3, #20
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f7ff fcb9 	bl	800ad4a <mbedtls_cipher_get_iv_size>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	4619      	mov	r1, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	47a0      	blx	r4
 800b3e6:	e013      	b.n	800b410 <mbedtls_cipher_finish+0xe8>
                    ctx->unprocessed_len );
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7ff fc98 	bl	800ad1e <mbedtls_cipher_get_block_size>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d00b      	beq.n	800b410 <mbedtls_cipher_finish+0xe8>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d105      	bne.n	800b40c <mbedtls_cipher_finish+0xe4>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <mbedtls_cipher_finish+0xe4>
                return( 0 );
 800b408:	2300      	movs	r3, #0
 800b40a:	e03a      	b.n	800b482 <mbedtls_cipher_finish+0x15a>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b40c:	4b20      	ldr	r3, [pc, #128]	; (800b490 <mbedtls_cipher_finish+0x168>)
 800b40e:	e038      	b.n	800b482 <mbedtls_cipher_finish+0x15a>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	689c      	ldr	r4, [r3, #8]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f993 6008 	ldrsb.w	r6, [r3, #8]
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f7ff fc7b 	bl	800ad1e <mbedtls_cipher_get_block_size>
                ctx->operation, mbedtls_cipher_get_block_size( ctx ), ctx->iv,
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f103 0128 	add.w	r1, r3, #40	; 0x28
                ctx->unprocessed_data, output ) ) )
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3314      	adds	r3, #20
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	9201      	str	r2, [sp, #4]
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	460b      	mov	r3, r1
 800b43a:	4602      	mov	r2, r0
 800b43c:	4631      	mov	r1, r6
 800b43e:	4628      	mov	r0, r5
 800b440:	47a0      	blx	r4
 800b442:	6178      	str	r0, [r7, #20]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d001      	beq.n	800b44e <mbedtls_cipher_finish+0x126>
        {
            return( ret );
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	e019      	b.n	800b482 <mbedtls_cipher_finish+0x15a>
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10b      	bne.n	800b470 <mbedtls_cipher_finish+0x148>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	691c      	ldr	r4, [r3, #16]
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7ff fc5e 	bl	800ad1e <mbedtls_cipher_get_block_size>
 800b462:	4603      	mov	r3, r0
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	4619      	mov	r1, r3
 800b468:	68b8      	ldr	r0, [r7, #8]
 800b46a:	47a0      	blx	r4
 800b46c:	4603      	mov	r3, r0
 800b46e:	e008      	b.n	800b482 <mbedtls_cipher_finish+0x15a>
                                     olen );

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f7ff fc54 	bl	800ad1e <mbedtls_cipher_get_block_size>
 800b476:	4602      	mov	r2, r0
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	601a      	str	r2, [r3, #0]
        return( 0 );
 800b47c:	2300      	movs	r3, #0
 800b47e:	e000      	b.n	800b482 <mbedtls_cipher_finish+0x15a>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b480:	4b04      	ldr	r3, [pc, #16]	; (800b494 <mbedtls_cipher_finish+0x16c>)
}
 800b482:	4618      	mov	r0, r3
 800b484:	371c      	adds	r7, #28
 800b486:	46bd      	mov	sp, r7
 800b488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b48a:	bf00      	nop
 800b48c:	ffff9f00 	.word	0xffff9f00
 800b490:	ffff9d80 	.word	0xffff9d80
 800b494:	ffff9f80 	.word	0xffff9f80

0800b498 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	70fb      	strb	r3, [r7, #3]
    if( NULL == ctx ||
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d004      	beq.n	800b4b4 <mbedtls_cipher_set_padding_mode+0x1c>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	785b      	ldrb	r3, [r3, #1]
    if( NULL == ctx ||
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d001      	beq.n	800b4b8 <mbedtls_cipher_set_padding_mode+0x20>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b4b4:	4b0a      	ldr	r3, [pc, #40]	; (800b4e0 <mbedtls_cipher_set_padding_mode+0x48>)
 800b4b6:	e00c      	b.n	800b4d2 <mbedtls_cipher_set_padding_mode+0x3a>
    }

    switch( mode )
 800b4b8:	78fb      	ldrb	r3, [r7, #3]
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d108      	bne.n	800b4d0 <mbedtls_cipher_set_padding_mode+0x38>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_no_padding;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a07      	ldr	r2, [pc, #28]	; (800b4e4 <mbedtls_cipher_set_padding_mode+0x4c>)
 800b4c8:	611a      	str	r2, [r3, #16]
        break;
 800b4ca:	bf00      	nop

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	e000      	b.n	800b4d2 <mbedtls_cipher_set_padding_mode+0x3a>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b4d0:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <mbedtls_cipher_set_padding_mode+0x50>)
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	370c      	adds	r7, #12
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	ffff9f00 	.word	0xffff9f00
 800b4e4:	0800b2f5 	.word	0x0800b2f5
 800b4e8:	ffff9f80 	.word	0xffff9f80

0800b4ec <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
 800b4f8:	603b      	str	r3, [r7, #0]
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	68b9      	ldr	r1, [r7, #8]
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff fd5e 	bl	800afc0 <mbedtls_cipher_set_iv>
 800b504:	6178      	str	r0, [r7, #20]
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <mbedtls_cipher_crypt+0x24>
        return( ret );
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	e02d      	b.n	800b56c <mbedtls_cipher_crypt+0x80>

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f7ff fd93 	bl	800b03c <mbedtls_cipher_reset>
 800b516:	6178      	str	r0, [r7, #20]
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <mbedtls_cipher_crypt+0x36>
        return( ret );
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	e024      	b.n	800b56c <mbedtls_cipher_crypt+0x80>

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	6a3a      	ldr	r2, [r7, #32]
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7ff fd9f 	bl	800b070 <mbedtls_cipher_update>
 800b532:	6178      	str	r0, [r7, #20]
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <mbedtls_cipher_crypt+0x52>
        return( ret );
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	e016      	b.n	800b56c <mbedtls_cipher_crypt+0x80>

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 800b53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b544:	4413      	add	r3, r2
 800b546:	f107 0210 	add.w	r2, r7, #16
 800b54a:	4619      	mov	r1, r3
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7ff feeb 	bl	800b328 <mbedtls_cipher_finish>
 800b552:	6178      	str	r0, [r7, #20]
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <mbedtls_cipher_crypt+0x72>
        return( ret );
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	e006      	b.n	800b56c <mbedtls_cipher_crypt+0x80>

    *olen += finish_olen;
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	441a      	add	r2, r3
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	601a      	str	r2, [r3, #0]

    return( 0 );
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b08c      	sub	sp, #48	; 0x30
 800b578:	af08      	add	r7, sp, #32
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
 800b580:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	785b      	ldrb	r3, [r3, #1]
 800b588:	2b06      	cmp	r3, #6
 800b58a:	d119      	bne.n	800b5c0 <mbedtls_cipher_auth_encrypt+0x4c>
    {
        *olen = ilen;
 800b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58e:	6a3a      	ldr	r2, [r7, #32]
 800b590:	601a      	str	r2, [r3, #0]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b598:	9306      	str	r3, [sp, #24]
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	9305      	str	r3, [sp, #20]
 800b59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	9303      	str	r3, [sp, #12]
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	9302      	str	r3, [sp, #8]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	6a3a      	ldr	r2, [r7, #32]
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	f002 fcda 	bl	800df70 <mbedtls_gcm_crypt_and_tag>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	e000      	b.n	800b5c2 <mbedtls_cipher_auth_encrypt+0x4e>
                                     iv, iv_len, ad, ad_len, input, output,
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b5c0:	4b02      	ldr	r3, [pc, #8]	; (800b5cc <mbedtls_cipher_auth_encrypt+0x58>)
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	ffff9f80 	.word	0xffff9f80

0800b5d0 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08c      	sub	sp, #48	; 0x30
 800b5d4:	af06      	add	r7, sp, #24
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	2b06      	cmp	r3, #6
 800b5e6:	d11e      	bne.n	800b626 <mbedtls_cipher_auth_decrypt+0x56>
    {
        int ret;

        *olen = ilen;
 800b5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ec:	601a      	str	r2, [r3, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f4:	9305      	str	r3, [sp, #20]
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f8:	9304      	str	r3, [sp, #16]
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fc:	9303      	str	r3, [sp, #12]
 800b5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b600:	9302      	str	r3, [sp, #8]
 800b602:	6a3b      	ldr	r3, [r7, #32]
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b610:	f002 fce1 	bl	800dfd6 <mbedtls_gcm_auth_decrypt>
 800b614:	6178      	str	r0, [r7, #20]
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f113 0f12 	cmn.w	r3, #18
 800b61c:	d101      	bne.n	800b622 <mbedtls_cipher_auth_decrypt+0x52>
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 800b61e:	4b04      	ldr	r3, [pc, #16]	; (800b630 <mbedtls_cipher_auth_decrypt+0x60>)
 800b620:	617b      	str	r3, [r7, #20]

        return( ret );
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	e000      	b.n	800b628 <mbedtls_cipher_auth_decrypt+0x58>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b626:	4b03      	ldr	r3, [pc, #12]	; (800b634 <mbedtls_cipher_auth_decrypt+0x64>)
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	ffff9d00 	.word	0xffff9d00
 800b634:	ffff9f80 	.word	0xffff9f80

0800b638 <gcm_ctx_alloc>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 800b63e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800b642:	2001      	movs	r0, #1
 800b644:	f012 fcb0 	bl	801dfa8 <calloc>
 800b648:	4603      	mov	r3, r0
 800b64a:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d002      	beq.n	800b658 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f001 fd93 	bl	800d17e <mbedtls_gcm_init>

    return( ctx );
 800b658:	687b      	ldr	r3, [r7, #4]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <gcm_ctx_free>:

static void gcm_ctx_free( void *ctx )
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free( ctx );
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f002 fcff 	bl	800e06e <mbedtls_gcm_free>
    mbedtls_free( ctx );
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f012 fcd3 	bl	801e01c <free>
}
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	603b      	str	r3, [r7, #0]
 800b68a:	460b      	mov	r3, r1
 800b68c:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800b68e:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7fa fd84 	bl	80061a4 <mbedtls_aes_crypt_ecb>
 800b69c:	4603      	mov	r3, r0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b086      	sub	sp, #24
 800b6aa:	af02      	add	r7, sp, #8
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 800b6b6:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f7fa fd87 	bl	80061da <mbedtls_aes_crypt_cbc>
 800b6cc:	4603      	mov	r3, r0
                          output );
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <aes_setkey_dec_wrap>:
}
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	68b9      	ldr	r1, [r7, #8]
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f7f9 fe68 	bl	80053bc <mbedtls_aes_setkey_dec>
 800b6ec:	4603      	mov	r3, r0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	60b9      	str	r1, [r7, #8]
 800b700:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	68b9      	ldr	r1, [r7, #8]
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7f9 fc78 	bl	8004ffc <mbedtls_aes_setkey_enc>
 800b70c:	4603      	mov	r3, r0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <aes_ctx_alloc>:

static void * aes_ctx_alloc( void )
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b082      	sub	sp, #8
 800b71a:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 800b71c:	f44f 718c 	mov.w	r1, #280	; 0x118
 800b720:	2001      	movs	r0, #1
 800b722:	f012 fc41 	bl	801dfa8 <calloc>
 800b726:	4603      	mov	r3, r0
 800b728:	607b      	str	r3, [r7, #4]

    if( aes == NULL )
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <aes_ctx_alloc+0x1e>
        return( NULL );
 800b730:	2300      	movs	r3, #0
 800b732:	e003      	b.n	800b73c <aes_ctx_alloc+0x26>

    mbedtls_aes_init( aes );
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f7f9 fc41 	bl	8004fbc <mbedtls_aes_init>

    return( aes );
 800b73a:	687b      	ldr	r3, [r7, #4]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <aes_ctx_free>:

static void aes_ctx_free( void *ctx )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7f9 fc43 	bl	8004fd8 <mbedtls_aes_free>
    mbedtls_free( ctx );
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f012 fc62 	bl	801e01c <free>
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	2102      	movs	r1, #2
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f001 fe8b 	bl	800d48e <mbedtls_gcm_setkey>
 800b778:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <mbedtls_zeroize>:
#define mbedtls_printf printf
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800b782:	b480      	push	{r7}
 800b784:	b085      	sub	sp, #20
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	e004      	b.n	800b79c <mbedtls_zeroize+0x1a>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	60fa      	str	r2, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	1e5a      	subs	r2, r3, #1
 800b7a0:	603a      	str	r2, [r7, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1f5      	bne.n	800b792 <mbedtls_zeroize+0x10>
}
 800b7a6:	bf00      	nop
 800b7a8:	bf00      	nop
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800b7bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f012 fc6a 	bl	801e09c <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <mbedtls_ctr_drbg_free>:
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}

void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00a      	beq.n	800b7f4 <mbedtls_ctr_drbg_free+0x24>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_aes_free( &ctx->aes_ctx );
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3320      	adds	r3, #32
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7f9 fbf8 	bl	8004fd8 <mbedtls_aes_free>
    mbedtls_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 800b7e8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff ffc8 	bl	800b782 <mbedtls_zeroize>
 800b7f2:	e000      	b.n	800b7f6 <mbedtls_ctr_drbg_free+0x26>
        return;
 800b7f4:	bf00      	nop
}
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <mbedtls_debug_set_threshold>:
#define DEBUG_BUF_SIZE      512

static int debug_threshold = 0;

void mbedtls_debug_set_threshold( int threshold )
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
    debug_threshold = threshold;
 800b804:	4a04      	ldr	r2, [pc, #16]	; (800b818 <mbedtls_debug_set_threshold+0x1c>)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6013      	str	r3, [r2, #0]
}
 800b80a:	bf00      	nop
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	200030dc 	.word	0x200030dc

0800b81c <debug_send_line>:
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
                                    const char *file, int line,
                                    const char *str )
{
 800b81c:	b590      	push	{r4, r7, lr}
 800b81e:	b087      	sub	sp, #28
 800b820:	af02      	add	r7, sp, #8
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	691c      	ldr	r4, [r3, #16]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	6958      	ldr	r0, [r3, #20]
 800b836:	6a3b      	ldr	r3, [r7, #32]
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	68b9      	ldr	r1, [r7, #8]
 800b840:	47a0      	blx	r4
#endif
}
 800b842:	bf00      	nop
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	bd90      	pop	{r4, r7, pc}
	...

0800b84c <mbedtls_debug_print_msg>:

void mbedtls_debug_print_msg( const mbedtls_ssl_context *ssl, int level,
                              const char *file, int line,
                              const char *format, ... )
{
 800b84c:	b590      	push	{r4, r7, lr}
 800b84e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800b852:	af02      	add	r7, sp, #8
 800b854:	f507 7406 	add.w	r4, r7, #536	; 0x218
 800b858:	f5a4 7403 	sub.w	r4, r4, #524	; 0x20c
 800b85c:	6020      	str	r0, [r4, #0]
 800b85e:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800b862:	f5a0 7004 	sub.w	r0, r0, #528	; 0x210
 800b866:	6001      	str	r1, [r0, #0]
 800b868:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800b86c:	f5a1 7105 	sub.w	r1, r1, #532	; 0x214
 800b870:	600a      	str	r2, [r1, #0]
 800b872:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800b876:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800b87a:	6013      	str	r3, [r2, #0]
    va_list argp;
    char str[DEBUG_BUF_SIZE];
    int ret;

    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 800b87c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b880:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d05e      	beq.n	800b948 <mbedtls_debug_print_msg+0xfc>
 800b88a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b88e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d056      	beq.n	800b948 <mbedtls_debug_print_msg+0xfc>
 800b89a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b89e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d04d      	beq.n	800b948 <mbedtls_debug_print_msg+0xfc>
 800b8ac:	4b29      	ldr	r3, [pc, #164]	; (800b954 <mbedtls_debug_print_msg+0x108>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800b8b4:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800b8b8:	6812      	ldr	r2, [r2, #0]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	dc44      	bgt.n	800b948 <mbedtls_debug_print_msg+0xfc>
        return;

    va_start( argp, format );
 800b8be:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800b8c2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
        str[DEBUG_BUF_SIZE-1] = '\0';
        ret = -1;
    }
#endif
#else
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 800b8c6:	f107 0010 	add.w	r0, r7, #16
 800b8ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b8ce:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800b8d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b8d6:	f012 fe5f 	bl	801e598 <vsniprintf>
 800b8da:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
#endif
    va_end( argp );

    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 800b8de:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	db16      	blt.n	800b914 <mbedtls_debug_print_msg+0xc8>
 800b8e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b8ea:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800b8ee:	dc11      	bgt.n	800b914 <mbedtls_debug_print_msg+0xc8>
    {
        str[ret]     = '\n';
 800b8f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b8f4:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800b8f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b8fc:	4413      	add	r3, r2
 800b8fe:	220a      	movs	r2, #10
 800b900:	701a      	strb	r2, [r3, #0]
        str[ret + 1] = '\0';
 800b902:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b906:	3301      	adds	r3, #1
 800b908:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800b90c:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800b910:	2100      	movs	r1, #0
 800b912:	54d1      	strb	r1, [r2, r3]
    }

    debug_send_line( ssl, level, file, line, str );
 800b914:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b918:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800b91c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800b920:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800b924:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800b928:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800b92c:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800b930:	f5a0 7003 	sub.w	r0, r0, #524	; 0x20c
 800b934:	f107 0410 	add.w	r4, r7, #16
 800b938:	9400      	str	r4, [sp, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6812      	ldr	r2, [r2, #0]
 800b93e:	6809      	ldr	r1, [r1, #0]
 800b940:	6800      	ldr	r0, [r0, #0]
 800b942:	f7ff ff6b 	bl	800b81c <debug_send_line>
 800b946:	e000      	b.n	800b94a <mbedtls_debug_print_msg+0xfe>
        return;
 800b948:	bf00      	nop
}
 800b94a:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd90      	pop	{r4, r7, pc}
 800b952:	bf00      	nop
 800b954:	200030dc 	.word	0x200030dc

0800b958 <mbedtls_debug_print_ret>:

void mbedtls_debug_print_ret( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, int ret )
{
 800b958:	b590      	push	{r4, r7, lr}
 800b95a:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800b95e:	af02      	add	r7, sp, #8
 800b960:	f507 7404 	add.w	r4, r7, #528	; 0x210
 800b964:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 800b968:	6020      	str	r0, [r4, #0]
 800b96a:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800b96e:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 800b972:	6001      	str	r1, [r0, #0]
 800b974:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800b978:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 800b97c:	600a      	str	r2, [r1, #0]
 800b97e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800b982:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800b986:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 800b988:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800b98c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d040      	beq.n	800ba1a <mbedtls_debug_print_ret+0xc2>
 800b998:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800b99c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d037      	beq.n	800ba1a <mbedtls_debug_print_ret+0xc2>
 800b9aa:	4b1f      	ldr	r3, [pc, #124]	; (800ba28 <mbedtls_debug_print_ret+0xd0>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800b9b2:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800b9b6:	6812      	ldr	r2, [r2, #0]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	dc2e      	bgt.n	800ba1a <mbedtls_debug_print_ret+0xc2>
    /*
     * With non-blocking I/O and examples that just retry immediately,
     * the logs would be quickly flooded with WANT_READ, so ignore that.
     * Don't ignore WANT_WRITE however, since is is usually rare.
     */
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 800b9bc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800b9c0:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 800b9c4:	d02b      	beq.n	800ba1e <mbedtls_debug_print_ret+0xc6>
        return;

    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 800b9c6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800b9ca:	425b      	negs	r3, r3
 800b9cc:	f107 0010 	add.w	r0, r7, #16
 800b9d0:	9301      	str	r3, [sp, #4]
 800b9d2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800b9dc:	4a13      	ldr	r2, [pc, #76]	; (800ba2c <mbedtls_debug_print_ret+0xd4>)
 800b9de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9e2:	f012 fd63 	bl	801e4ac <sniprintf>
              text, ret, -ret );

    debug_send_line( ssl, level, file, line, str );
 800b9e6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800b9ea:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800b9ee:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800b9f2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 800b9f6:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800b9fa:	f5a1 7102 	sub.w	r1, r1, #520	; 0x208
 800b9fe:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800ba02:	f5a0 7001 	sub.w	r0, r0, #516	; 0x204
 800ba06:	f107 0410 	add.w	r4, r7, #16
 800ba0a:	9400      	str	r4, [sp, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	6812      	ldr	r2, [r2, #0]
 800ba10:	6809      	ldr	r1, [r1, #0]
 800ba12:	6800      	ldr	r0, [r0, #0]
 800ba14:	f7ff ff02 	bl	800b81c <debug_send_line>
 800ba18:	e002      	b.n	800ba20 <mbedtls_debug_print_ret+0xc8>
        return;
 800ba1a:	bf00      	nop
 800ba1c:	e000      	b.n	800ba20 <mbedtls_debug_print_ret+0xc8>
        return;
 800ba1e:	bf00      	nop
}
 800ba20:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd90      	pop	{r4, r7, pc}
 800ba28:	200030dc 	.word	0x200030dc
 800ba2c:	0801fa60 	.word	0x0801fa60

0800ba30 <mbedtls_debug_print_buf>:

void mbedtls_debug_print_buf( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line, const char *text,
                      const unsigned char *buf, size_t len )
{
 800ba30:	b590      	push	{r4, r7, lr}
 800ba32:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800ba36:	af02      	add	r7, sp, #8
 800ba38:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800ba3c:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 800ba40:	6020      	str	r0, [r4, #0]
 800ba42:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800ba46:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 800ba4a:	6001      	str	r1, [r0, #0]
 800ba4c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800ba50:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 800ba54:	600a      	str	r2, [r1, #0]
 800ba56:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800ba5a:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 800ba5e:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    char txt[17];
    size_t i, idx = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 800ba66:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ba6a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 8136 	beq.w	800bce4 <mbedtls_debug_print_buf+0x2b4>
 800ba78:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ba7c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 812c 	beq.w	800bce4 <mbedtls_debug_print_buf+0x2b4>
 800ba8c:	4b98      	ldr	r3, [pc, #608]	; (800bcf0 <mbedtls_debug_print_buf+0x2c0>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800ba94:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800ba98:	6812      	ldr	r2, [r2, #0]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	f300 8122 	bgt.w	800bce4 <mbedtls_debug_print_buf+0x2b4>
        return;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 800baa0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800baa4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800baa8:	18d0      	adds	r0, r2, r3
 800baaa:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800baae:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800bab2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800babc:	4a8d      	ldr	r2, [pc, #564]	; (800bcf4 <mbedtls_debug_print_buf+0x2c4>)
 800babe:	f012 fcf5 	bl	801e4ac <sniprintf>
              text, (unsigned int) len );

    debug_send_line( ssl, level, file, line, str );
 800bac2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bac6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800baca:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800bace:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800bad2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800bad6:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800bada:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800bade:	f5a0 7009 	sub.w	r0, r0, #548	; 0x224
 800bae2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bae6:	9400      	str	r4, [sp, #0]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	6812      	ldr	r2, [r2, #0]
 800baec:	6809      	ldr	r1, [r1, #0]
 800baee:	6800      	ldr	r0, [r0, #0]
 800baf0:	f7ff fe94 	bl	800b81c <debug_send_line>

    idx = 0;
 800baf4:	2300      	movs	r3, #0
 800baf6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    memset( txt, 0, sizeof( txt ) );
 800bafa:	f107 0314 	add.w	r3, r7, #20
 800bafe:	2211      	movs	r2, #17
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f012 faca 	bl	801e09c <memset>
    for( i = 0; i < len; i++ )
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bb0e:	e094      	b.n	800bc3a <mbedtls_debug_print_buf+0x20a>
    {
        if( i >= 4096 )
 800bb10:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bb14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb18:	f080 8097 	bcs.w	800bc4a <mbedtls_debug_print_buf+0x21a>
            break;

        if( i % 16 == 0 )
 800bb1c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bb20:	f003 030f 	and.w	r3, r3, #15
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d149      	bne.n	800bbbc <mbedtls_debug_print_buf+0x18c>
        {
            if( i > 0 )
 800bb28:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d030      	beq.n	800bb92 <mbedtls_debug_print_buf+0x162>
            {
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 800bb30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bb34:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bb38:	18d0      	adds	r0, r2, r3
 800bb3a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bb3e:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800bb42:	f107 0314 	add.w	r3, r7, #20
 800bb46:	4a6c      	ldr	r2, [pc, #432]	; (800bcf8 <mbedtls_debug_print_buf+0x2c8>)
 800bb48:	f012 fcb0 	bl	801e4ac <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 800bb4c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bb50:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bb54:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800bb58:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800bb5c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800bb60:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800bb64:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800bb68:	f5a0 7009 	sub.w	r0, r0, #548	; 0x224
 800bb6c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bb70:	9400      	str	r4, [sp, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6812      	ldr	r2, [r2, #0]
 800bb76:	6809      	ldr	r1, [r1, #0]
 800bb78:	6800      	ldr	r0, [r0, #0]
 800bb7a:	f7ff fe4f 	bl	800b81c <debug_send_line>

                idx = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
                memset( txt, 0, sizeof( txt ) );
 800bb84:	f107 0314 	add.w	r3, r7, #20
 800bb88:	2211      	movs	r2, #17
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f012 fa85 	bl	801e09c <memset>
            }

            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 800bb92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bb96:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bb9a:	18d0      	adds	r0, r2, r3
 800bb9c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bba0:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800bba4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bba8:	4a54      	ldr	r2, [pc, #336]	; (800bcfc <mbedtls_debug_print_buf+0x2cc>)
 800bbaa:	f012 fc7f 	bl	801e4ac <sniprintf>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
                             (unsigned int) i );

        }

        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 800bbbc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bbc0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bbc4:	18d0      	adds	r0, r2, r3
 800bbc6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bbca:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
                         (unsigned int) buf[i] );
 800bbce:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800bbd2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bbd6:	4413      	add	r3, r2
 800bbd8:	781b      	ldrb	r3, [r3, #0]
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 800bbda:	4a49      	ldr	r2, [pc, #292]	; (800bd00 <mbedtls_debug_print_buf+0x2d0>)
 800bbdc:	f012 fc66 	bl	801e4ac <sniprintf>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bbe8:	4413      	add	r3, r2
 800bbea:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 800bbee:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800bbf2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bbf6:	4413      	add	r3, r2
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	2b1f      	cmp	r3, #31
 800bbfc:	d90e      	bls.n	800bc1c <mbedtls_debug_print_buf+0x1ec>
 800bbfe:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800bc02:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bc06:	4413      	add	r3, r2
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b7e      	cmp	r3, #126	; 0x7e
 800bc0c:	d806      	bhi.n	800bc1c <mbedtls_debug_print_buf+0x1ec>
 800bc0e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800bc12:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bc16:	4413      	add	r3, r2
 800bc18:	7819      	ldrb	r1, [r3, #0]
 800bc1a:	e000      	b.n	800bc1e <mbedtls_debug_print_buf+0x1ee>
 800bc1c:	212e      	movs	r1, #46	; 0x2e
 800bc1e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bc22:	f003 030f 	and.w	r3, r3, #15
 800bc26:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800bc2a:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 800bc2e:	54d1      	strb	r1, [r2, r3]
    for( i = 0; i < len; i++ )
 800bc30:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bc34:	3301      	adds	r3, #1
 800bc36:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bc3a:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800bc3e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bc42:	429a      	cmp	r2, r3
 800bc44:	f4ff af64 	bcc.w	800bb10 <mbedtls_debug_print_buf+0xe0>
 800bc48:	e000      	b.n	800bc4c <mbedtls_debug_print_buf+0x21c>
            break;
 800bc4a:	bf00      	nop
    }

    if( len > 0 )
 800bc4c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d048      	beq.n	800bce6 <mbedtls_debug_print_buf+0x2b6>
    {
        for( /* i = i */; i % 16 != 0; i++ )
 800bc54:	e018      	b.n	800bc88 <mbedtls_debug_print_buf+0x258>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 800bc56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bc5a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bc5e:	18d0      	adds	r0, r2, r3
 800bc60:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bc64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bc68:	4a26      	ldr	r2, [pc, #152]	; (800bd04 <mbedtls_debug_print_buf+0x2d4>)
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	f012 fc1e 	bl	801e4ac <sniprintf>
 800bc70:	4603      	mov	r3, r0
 800bc72:	461a      	mov	r2, r3
 800bc74:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bc78:	4413      	add	r3, r2
 800bc7a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
        for( /* i = i */; i % 16 != 0; i++ )
 800bc7e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bc82:	3301      	adds	r3, #1
 800bc84:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bc88:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bc8c:	f003 030f 	and.w	r3, r3, #15
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1e0      	bne.n	800bc56 <mbedtls_debug_print_buf+0x226>

        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 800bc94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bc98:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bc9c:	18d0      	adds	r0, r2, r3
 800bc9e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bca2:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800bca6:	f107 0314 	add.w	r3, r7, #20
 800bcaa:	4a13      	ldr	r2, [pc, #76]	; (800bcf8 <mbedtls_debug_print_buf+0x2c8>)
 800bcac:	f012 fbfe 	bl	801e4ac <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 800bcb0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bcb4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bcb8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800bcbc:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800bcc0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800bcc4:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800bcc8:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800bccc:	f5a0 7009 	sub.w	r0, r0, #548	; 0x224
 800bcd0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bcd4:	9400      	str	r4, [sp, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	6812      	ldr	r2, [r2, #0]
 800bcda:	6809      	ldr	r1, [r1, #0]
 800bcdc:	6800      	ldr	r0, [r0, #0]
 800bcde:	f7ff fd9d 	bl	800b81c <debug_send_line>
 800bce2:	e000      	b.n	800bce6 <mbedtls_debug_print_buf+0x2b6>
        return;
 800bce4:	bf00      	nop
    }
}
 800bce6:	f507 770d 	add.w	r7, r7, #564	; 0x234
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd90      	pop	{r4, r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	200030dc 	.word	0x200030dc
 800bcf4:	0801fa7c 	.word	0x0801fa7c
 800bcf8:	0801fa98 	.word	0x0801fa98
 800bcfc:	0801faa0 	.word	0x0801faa0
 800bd00:	0801faa8 	.word	0x0801faa8
 800bd04:	0801fab0 	.word	0x0801fab0

0800bd08 <mbedtls_debug_print_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_mpi *X )
{
 800bd08:	b590      	push	{r4, r7, lr}
 800bd0a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800bd0e:	af02      	add	r7, sp, #8
 800bd10:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800bd14:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800bd18:	6020      	str	r0, [r4, #0]
 800bd1a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800bd1e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800bd22:	6001      	str	r1, [r0, #0]
 800bd24:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800bd28:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 800bd2c:	600a      	str	r2, [r1, #0]
 800bd2e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800bd32:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800bd36:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    int j, k, zeros = 1;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    size_t i, n, idx = 0;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 800bd44:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800bd48:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f000 8172 	beq.w	800c03a <mbedtls_debug_print_mpi+0x332>
 800bd56:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800bd5a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f000 8168 	beq.w	800c03a <mbedtls_debug_print_mpi+0x332>
 800bd6a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f000 8163 	beq.w	800c03a <mbedtls_debug_print_mpi+0x332>
 800bd74:	4bb3      	ldr	r3, [pc, #716]	; (800c044 <mbedtls_debug_print_mpi+0x33c>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800bd7c:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 800bd80:	6812      	ldr	r2, [r2, #0]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	f300 8159 	bgt.w	800c03a <mbedtls_debug_print_mpi+0x332>
        return;

    for( n = X->n - 1; n > 0; n-- )
 800bd88:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800bd94:	e00e      	b.n	800bdb4 <mbedtls_debug_print_mpi+0xac>
        if( X->p[n] != 0 )
 800bd96:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bd9a:	689a      	ldr	r2, [r3, #8]
 800bd9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d109      	bne.n	800bdbe <mbedtls_debug_print_mpi+0xb6>
    for( n = X->n - 1; n > 0; n-- )
 800bdaa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800bdb4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1ec      	bne.n	800bd96 <mbedtls_debug_print_mpi+0x8e>
 800bdbc:	e000      	b.n	800bdc0 <mbedtls_debug_print_mpi+0xb8>
            break;
 800bdbe:	bf00      	nop

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 800bdc0:	231f      	movs	r3, #31
 800bdc2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bdc6:	e014      	b.n	800bdf2 <mbedtls_debug_print_mpi+0xea>
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 800bdc8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bdcc:	689a      	ldr	r2, [r3, #8]
 800bdce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bddc:	fa22 f303 	lsr.w	r3, r2, r3
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d109      	bne.n	800bdfc <mbedtls_debug_print_mpi+0xf4>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 800bde8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bdec:	3b01      	subs	r3, #1
 800bdee:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bdf2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dae6      	bge.n	800bdc8 <mbedtls_debug_print_mpi+0xc0>
 800bdfa:	e000      	b.n	800bdfe <mbedtls_debug_print_mpi+0xf6>
            break;
 800bdfc:	bf00      	nop

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 800bdfe:	f107 0210 	add.w	r2, r7, #16
 800be02:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800be06:	18d0      	adds	r0, r2, r3
 800be08:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800be0c:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 800be10:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800be14:	015a      	lsls	r2, r3, #5
 800be16:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800be1a:	4413      	add	r3, r2
 800be1c:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800be24:	4a88      	ldr	r2, [pc, #544]	; (800c048 <mbedtls_debug_print_mpi+0x340>)
 800be26:	f012 fb41 	bl	801e4ac <sniprintf>

    debug_send_line( ssl, level, file, line, str );
 800be2a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800be2e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800be32:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800be36:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800be3a:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800be3e:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800be42:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800be46:	f5a0 7007 	sub.w	r0, r0, #540	; 0x21c
 800be4a:	f107 0410 	add.w	r4, r7, #16
 800be4e:	9400      	str	r4, [sp, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6812      	ldr	r2, [r2, #0]
 800be54:	6809      	ldr	r1, [r1, #0]
 800be56:	6800      	ldr	r0, [r0, #0]
 800be58:	f7ff fce0 	bl	800b81c <debug_send_line>

    idx = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    for( i = n + 1, j = 0; i > 0; i-- )
 800be62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800be66:	3301      	adds	r3, #1
 800be68:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800be6c:	2300      	movs	r3, #0
 800be6e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800be72:	e09e      	b.n	800bfb2 <mbedtls_debug_print_mpi+0x2aa>
    {
        if( zeros && X->p[i - 1] == 0 )
 800be74:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00d      	beq.n	800be98 <mbedtls_debug_print_mpi+0x190>
 800be7c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800be86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800be8a:	3b01      	subs	r3, #1
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4413      	add	r3, r2
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 8087 	beq.w	800bfa6 <mbedtls_debug_print_mpi+0x29e>
            continue;

        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 800be98:	2303      	movs	r3, #3
 800be9a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800be9e:	e07c      	b.n	800bf9a <mbedtls_debug_print_mpi+0x292>
        {
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 800bea0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d012      	beq.n	800bece <mbedtls_debug_print_mpi+0x1c6>
 800bea8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800beac:	689a      	ldr	r2, [r3, #8]
 800beae:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800beb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800beb6:	3b01      	subs	r3, #1
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	fa22 f303 	lsr.w	r3, r2, r3
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d05f      	beq.n	800bf8e <mbedtls_debug_print_mpi+0x286>
                continue;
            else
                zeros = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

            if( j % 16 == 0 )
 800bed4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bed8:	f003 030f 	and.w	r3, r3, #15
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d12c      	bne.n	800bf3a <mbedtls_debug_print_mpi+0x232>
            {
                if( j > 0 )
 800bee0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	dd28      	ble.n	800bf3a <mbedtls_debug_print_mpi+0x232>
                {
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 800bee8:	f107 0210 	add.w	r2, r7, #16
 800beec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bef0:	18d0      	adds	r0, r2, r3
 800bef2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bef6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800befa:	4a54      	ldr	r2, [pc, #336]	; (800c04c <mbedtls_debug_print_mpi+0x344>)
 800befc:	4619      	mov	r1, r3
 800befe:	f012 fad5 	bl	801e4ac <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 800bf02:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800bf06:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800bf0a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800bf0e:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800bf12:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800bf16:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800bf1a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800bf1e:	f5a0 7007 	sub.w	r0, r0, #540	; 0x21c
 800bf22:	f107 0410 	add.w	r4, r7, #16
 800bf26:	9400      	str	r4, [sp, #0]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6812      	ldr	r2, [r2, #0]
 800bf2c:	6809      	ldr	r1, [r1, #0]
 800bf2e:	6800      	ldr	r0, [r0, #0]
 800bf30:	f7ff fc74 	bl	800b81c <debug_send_line>
                    idx = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                }
            }

            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 800bf3a:	f107 0210 	add.w	r2, r7, #16
 800bf3e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bf42:	18d0      	adds	r0, r2, r3
 800bf44:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bf48:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 800bf4c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bf50:	689a      	ldr	r2, [r3, #8]
 800bf52:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800bf56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800bf66:	00db      	lsls	r3, r3, #3
 800bf68:	fa22 f303 	lsr.w	r3, r2, r3
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	4a38      	ldr	r2, [pc, #224]	; (800c050 <mbedtls_debug_print_mpi+0x348>)
 800bf70:	f012 fa9c 	bl	801e4ac <sniprintf>
 800bf74:	4603      	mov	r3, r0
 800bf76:	461a      	mov	r2, r3
 800bf78:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

            j++;
 800bf82:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bf86:	3301      	adds	r3, #1
 800bf88:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bf8c:	e000      	b.n	800bf90 <mbedtls_debug_print_mpi+0x288>
                continue;
 800bf8e:	bf00      	nop
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 800bf90:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800bf94:	3b01      	subs	r3, #1
 800bf96:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800bf9a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f6bf af7e 	bge.w	800bea0 <mbedtls_debug_print_mpi+0x198>
 800bfa4:	e000      	b.n	800bfa8 <mbedtls_debug_print_mpi+0x2a0>
            continue;
 800bfa6:	bf00      	nop
    for( i = n + 1, j = 0; i > 0; i-- )
 800bfa8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800bfac:	3b01      	subs	r3, #1
 800bfae:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800bfb2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f47f af5c 	bne.w	800be74 <mbedtls_debug_print_mpi+0x16c>
        }

    }

    if( zeros == 1 )
 800bfbc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d113      	bne.n	800bfec <mbedtls_debug_print_mpi+0x2e4>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 800bfc4:	f107 0210 	add.w	r2, r7, #16
 800bfc8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bfcc:	18d0      	adds	r0, r2, r3
 800bfce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bfd2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bfd6:	4a1f      	ldr	r2, [pc, #124]	; (800c054 <mbedtls_debug_print_mpi+0x34c>)
 800bfd8:	4619      	mov	r1, r3
 800bfda:	f012 fa67 	bl	801e4ac <sniprintf>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 800bfec:	f107 0210 	add.w	r2, r7, #16
 800bff0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bff4:	18d0      	adds	r0, r2, r3
 800bff6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bffa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bffe:	4a13      	ldr	r2, [pc, #76]	; (800c04c <mbedtls_debug_print_mpi+0x344>)
 800c000:	4619      	mov	r1, r3
 800c002:	f012 fa53 	bl	801e4ac <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 800c006:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c00a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c00e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800c012:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800c016:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800c01a:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800c01e:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800c022:	f5a0 7007 	sub.w	r0, r0, #540	; 0x21c
 800c026:	f107 0410 	add.w	r4, r7, #16
 800c02a:	9400      	str	r4, [sp, #0]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	6812      	ldr	r2, [r2, #0]
 800c030:	6809      	ldr	r1, [r1, #0]
 800c032:	6800      	ldr	r0, [r0, #0]
 800c034:	f7ff fbf2 	bl	800b81c <debug_send_line>
 800c038:	e000      	b.n	800c03c <mbedtls_debug_print_mpi+0x334>
        return;
 800c03a:	bf00      	nop
}
 800c03c:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800c040:	46bd      	mov	sp, r7
 800c042:	bd90      	pop	{r4, r7, pc}
 800c044:	200030dc 	.word	0x200030dc
 800c048:	0801fab4 	.word	0x0801fab4
 800c04c:	0801fad4 	.word	0x0801fad4
 800c050:	0801faa8 	.word	0x0801faa8
 800c054:	0801fad8 	.word	0x0801fad8

0800c058 <debug_print_pk>:

#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void debug_print_pk( const mbedtls_ssl_context *ssl, int level,
                            const char *file, int line,
                            const char *text, const mbedtls_pk_context *pk )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b094      	sub	sp, #80	; 0x50
 800c05c:	af02      	add	r7, sp, #8
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	603b      	str	r3, [r7, #0]
    size_t i;
    mbedtls_pk_debug_item items[MBEDTLS_PK_DEBUG_MAX_ITEMS];
    char name[16];

    memset( items, 0, sizeof( items ) );
 800c066:	f107 0320 	add.w	r3, r7, #32
 800c06a:	2224      	movs	r2, #36	; 0x24
 800c06c:	2100      	movs	r1, #0
 800c06e:	4618      	mov	r0, r3
 800c070:	f012 f814 	bl	801e09c <memset>

    if( mbedtls_pk_debug( pk, items ) != 0 )
 800c074:	f107 0320 	add.w	r3, r7, #32
 800c078:	4619      	mov	r1, r3
 800c07a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c07c:	f002 ffa0 	bl	800efc0 <mbedtls_pk_debug>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d008      	beq.n	800c098 <debug_print_pk+0x40>
    {
        debug_send_line( ssl, level, file, line,
 800c086:	4b2e      	ldr	r3, [pc, #184]	; (800c140 <debug_print_pk+0xe8>)
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7ff fbc3 	bl	800b81c <debug_send_line>
                          "invalid PK context\n" );
        return;
 800c096:	e04f      	b.n	800c138 <debug_print_pk+0xe0>
    }

    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 800c098:	2300      	movs	r3, #0
 800c09a:	647b      	str	r3, [r7, #68]	; 0x44
 800c09c:	e047      	b.n	800c12e <debug_print_pk+0xd6>
    {
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 800c09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	3348      	adds	r3, #72	; 0x48
 800c0aa:	443b      	add	r3, r7
 800c0ac:	3b28      	subs	r3, #40	; 0x28
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d040      	beq.n	800c136 <debug_print_pk+0xde>
            return;

        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 800c0b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	005b      	lsls	r3, r3, #1
 800c0ba:	4413      	add	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	3348      	adds	r3, #72	; 0x48
 800c0c0:	443b      	add	r3, r7
 800c0c2:	3b24      	subs	r3, #36	; 0x24
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f107 0010 	add.w	r0, r7, #16
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ce:	4a1d      	ldr	r2, [pc, #116]	; (800c144 <debug_print_pk+0xec>)
 800c0d0:	2110      	movs	r1, #16
 800c0d2:	f012 f9eb 	bl	801e4ac <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	77fb      	strb	r3, [r7, #31]

        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 800c0da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0dc:	4613      	mov	r3, r2
 800c0de:	005b      	lsls	r3, r3, #1
 800c0e0:	4413      	add	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	3348      	adds	r3, #72	; 0x48
 800c0e6:	443b      	add	r3, r7
 800c0e8:	3b28      	subs	r3, #40	; 0x28
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d113      	bne.n	800c118 <debug_print_pk+0xc0>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 800c0f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	005b      	lsls	r3, r3, #1
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	3348      	adds	r3, #72	; 0x48
 800c0fc:	443b      	add	r3, r7
 800c0fe:	3b20      	subs	r3, #32
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	f107 0310 	add.w	r3, r7, #16
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	68b9      	ldr	r1, [r7, #8]
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	f7ff fdf9 	bl	800bd08 <mbedtls_debug_print_mpi>
 800c116:	e007      	b.n	800c128 <debug_print_pk+0xd0>
#if defined(MBEDTLS_ECP_C)
        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )
            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );
        else
#endif
            debug_send_line( ssl, level, file, line,
 800c118:	4b0b      	ldr	r3, [pc, #44]	; (800c148 <debug_print_pk+0xf0>)
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	68b9      	ldr	r1, [r7, #8]
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f7ff fb7a 	bl	800b81c <debug_send_line>
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 800c128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c12a:	3301      	adds	r3, #1
 800c12c:	647b      	str	r3, [r7, #68]	; 0x44
 800c12e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c130:	2b02      	cmp	r3, #2
 800c132:	d9b4      	bls.n	800c09e <debug_print_pk+0x46>
 800c134:	e000      	b.n	800c138 <debug_print_pk+0xe0>
            return;
 800c136:	bf00      	nop
                              "should not happen\n" );
    }
}
 800c138:	3748      	adds	r7, #72	; 0x48
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	0801fadc 	.word	0x0801fadc
 800c144:	0801faf0 	.word	0x0801faf0
 800c148:	0801faf8 	.word	0x0801faf8

0800c14c <debug_print_line_by_line>:

static void debug_print_line_by_line( const mbedtls_ssl_context *ssl, int level,
                                      const char *file, int line, const char *text )
{
 800c14c:	b590      	push	{r4, r7, lr}
 800c14e:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800c152:	af02      	add	r7, sp, #8
 800c154:	f507 7408 	add.w	r4, r7, #544	; 0x220
 800c158:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 800c15c:	6020      	str	r0, [r4, #0]
 800c15e:	f507 7008 	add.w	r0, r7, #544	; 0x220
 800c162:	f5a0 7006 	sub.w	r0, r0, #536	; 0x218
 800c166:	6001      	str	r1, [r0, #0]
 800c168:	f507 7108 	add.w	r1, r7, #544	; 0x220
 800c16c:	f5a1 7107 	sub.w	r1, r1, #540	; 0x21c
 800c170:	600a      	str	r2, [r1, #0]
 800c172:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800c176:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 800c17a:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    const char *start, *cur;

    start = text;
 800c17c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800c180:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    for( cur = text; *cur != '\0'; cur++ )
 800c184:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800c188:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c18c:	e04a      	b.n	800c224 <debug_print_line_by_line+0xd8>
    {
        if( *cur == '\n' )
 800c18e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b0a      	cmp	r3, #10
 800c196:	d140      	bne.n	800c21a <debug_print_line_by_line+0xce>
        {
            size_t len = cur - start + 1;
 800c198:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800c19c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
            if( len > DEBUG_BUF_SIZE - 1 )
 800c1a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c1ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1b0:	d303      	bcc.n	800c1ba <debug_print_line_by_line+0x6e>
                len = DEBUG_BUF_SIZE - 1;
 800c1b2:	f240 13ff 	movw	r3, #511	; 0x1ff
 800c1b6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

            memcpy( str, start, len );
 800c1ba:	f107 0314 	add.w	r3, r7, #20
 800c1be:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800c1c2:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f011 ff40 	bl	801e04c <memcpy>
            str[len] = '\0';
 800c1cc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c1d0:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800c1d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c1d8:	4413      	add	r3, r2
 800c1da:	2200      	movs	r2, #0
 800c1dc:	701a      	strb	r2, [r3, #0]

            debug_send_line( ssl, level, file, line, str );
 800c1de:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c1e2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800c1e6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800c1ea:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 800c1ee:	f507 7108 	add.w	r1, r7, #544	; 0x220
 800c1f2:	f5a1 7106 	sub.w	r1, r1, #536	; 0x218
 800c1f6:	f507 7008 	add.w	r0, r7, #544	; 0x220
 800c1fa:	f5a0 7005 	sub.w	r0, r0, #532	; 0x214
 800c1fe:	f107 0414 	add.w	r4, r7, #20
 800c202:	9400      	str	r4, [sp, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6812      	ldr	r2, [r2, #0]
 800c208:	6809      	ldr	r1, [r1, #0]
 800c20a:	6800      	ldr	r0, [r0, #0]
 800c20c:	f7ff fb06 	bl	800b81c <debug_send_line>

            start = cur + 1;
 800c210:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c214:	3301      	adds	r3, #1
 800c216:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    for( cur = text; *cur != '\0'; cur++ )
 800c21a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c21e:	3301      	adds	r3, #1
 800c220:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c224:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1af      	bne.n	800c18e <debug_print_line_by_line+0x42>
        }
    }
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800c236:	46bd      	mov	sp, r7
 800c238:	bd90      	pop	{r4, r7, pc}
	...

0800c23c <mbedtls_debug_print_crt>:

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 800c23c:	b590      	push	{r4, r7, lr}
 800c23e:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 800c242:	af02      	add	r7, sp, #8
 800c244:	f507 64c3 	add.w	r4, r7, #1560	; 0x618
 800c248:	f2a4 640c 	subw	r4, r4, #1548	; 0x60c
 800c24c:	6020      	str	r0, [r4, #0]
 800c24e:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c252:	f5a0 60c2 	sub.w	r0, r0, #1552	; 0x610
 800c256:	6001      	str	r1, [r0, #0]
 800c258:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c25c:	f2a1 6114 	subw	r1, r1, #1556	; 0x614
 800c260:	600a      	str	r2, [r1, #0]
 800c262:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c266:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 800c26a:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    int i = 0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 800c272:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c276:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	f000 808c 	beq.w	800c39c <mbedtls_debug_print_crt+0x160>
 800c284:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c288:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 8082 	beq.w	800c39c <mbedtls_debug_print_crt+0x160>
 800c298:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d07d      	beq.n	800c39c <mbedtls_debug_print_crt+0x160>
 800c2a0:	4b41      	ldr	r3, [pc, #260]	; (800c3a8 <mbedtls_debug_print_crt+0x16c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c2a8:	f5a2 62c2 	sub.w	r2, r2, #1552	; 0x610
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	dc74      	bgt.n	800c39c <mbedtls_debug_print_crt+0x160>
        return;

    while( crt != NULL )
 800c2b2:	e06e      	b.n	800c392 <mbedtls_debug_print_crt+0x156>
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 800c2b4:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800c2be:	f207 4014 	addw	r0, r7, #1044	; 0x414
 800c2c2:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c2cc:	4a37      	ldr	r2, [pc, #220]	; (800c3ac <mbedtls_debug_print_crt+0x170>)
 800c2ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2d2:	f012 f8eb 	bl	801e4ac <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 800c2d6:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c2da:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800c2de:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c2e2:	f2a2 6214 	subw	r2, r2, #1556	; 0x614
 800c2e6:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c2ea:	f5a1 61c2 	sub.w	r1, r1, #1552	; 0x610
 800c2ee:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c2f2:	f2a0 600c 	subw	r0, r0, #1548	; 0x60c
 800c2f6:	f207 4414 	addw	r4, r7, #1044	; 0x414
 800c2fa:	9400      	str	r4, [sp, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6812      	ldr	r2, [r2, #0]
 800c300:	6809      	ldr	r1, [r1, #0]
 800c302:	6800      	ldr	r0, [r0, #0]
 800c304:	f7ff fa8a 	bl	800b81c <debug_send_line>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 800c308:	f107 0014 	add.w	r0, r7, #20
 800c30c:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c310:	4a27      	ldr	r2, [pc, #156]	; (800c3b0 <mbedtls_debug_print_crt+0x174>)
 800c312:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c316:	f00f fc35 	bl	801bb84 <mbedtls_x509_crt_info>
        debug_print_line_by_line( ssl, level, file, line, buf );
 800c31a:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c31e:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800c322:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c326:	f2a2 6214 	subw	r2, r2, #1556	; 0x614
 800c32a:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c32e:	f5a1 61c2 	sub.w	r1, r1, #1552	; 0x610
 800c332:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c336:	f2a0 600c 	subw	r0, r0, #1548	; 0x60c
 800c33a:	f107 0414 	add.w	r4, r7, #20
 800c33e:	9400      	str	r4, [sp, #0]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	6812      	ldr	r2, [r2, #0]
 800c344:	6809      	ldr	r1, [r1, #0]
 800c346:	6800      	ldr	r0, [r0, #0]
 800c348:	f7ff ff00 	bl	800c14c <debug_print_line_by_line>

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );
 800c34c:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c350:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 800c354:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c358:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800c35c:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c360:	f2a2 6214 	subw	r2, r2, #1556	; 0x614
 800c364:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c368:	f5a1 61c2 	sub.w	r1, r1, #1552	; 0x610
 800c36c:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c370:	f2a0 600c 	subw	r0, r0, #1548	; 0x60c
 800c374:	9401      	str	r4, [sp, #4]
 800c376:	4c0f      	ldr	r4, [pc, #60]	; (800c3b4 <mbedtls_debug_print_crt+0x178>)
 800c378:	9400      	str	r4, [sp, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6812      	ldr	r2, [r2, #0]
 800c37e:	6809      	ldr	r1, [r1, #0]
 800c380:	6800      	ldr	r0, [r0, #0]
 800c382:	f7ff fe69 	bl	800c058 <debug_print_pk>

        crt = crt->next;
 800c386:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c38a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c38e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
    while( crt != NULL )
 800c392:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c396:	2b00      	cmp	r3, #0
 800c398:	d18c      	bne.n	800c2b4 <mbedtls_debug_print_crt+0x78>
 800c39a:	e000      	b.n	800c39e <mbedtls_debug_print_crt+0x162>
        return;
 800c39c:	bf00      	nop
    }
}
 800c39e:	f207 671c 	addw	r7, r7, #1564	; 0x61c
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd90      	pop	{r4, r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	200030dc 	.word	0x200030dc
 800c3ac:	0801fb0c 	.word	0x0801fb0c
 800c3b0:	0801fb18 	.word	0x0801fb18
 800c3b4:	0801fb1c 	.word	0x0801fb1c

0800c3b8 <mbedtls_strerror>:
#include "mbedtls/xtea.h"
#endif


void mbedtls_strerror( int ret, char *buf, size_t buflen )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
    size_t len;
    int use_ret;

    if( buflen == 0 )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f000 8683 	beq.w	800d0d2 <mbedtls_strerror+0xd1a>
        return;

    memset( buf, 0x00, buflen );
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	68b8      	ldr	r0, [r7, #8]
 800c3d2:	f011 fe63 	bl	801e09c <memset>

    if( ret < 0 )
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	da02      	bge.n	800c3e2 <mbedtls_strerror+0x2a>
        ret = -ret;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	425b      	negs	r3, r3
 800c3e0:	60fb      	str	r3, [r7, #12]

    if( ret & 0xFF80 )
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	f64f 7380 	movw	r3, #65408	; 0xff80
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 8504 	beq.w	800cdf8 <mbedtls_strerror+0xa40>
    {
        use_ret = ret & 0xFF80;
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	f64f 7380 	movw	r3, #65408	; 0xff80
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	617b      	str	r3, [r7, #20]

        // High level error codes
        //
        // BEGIN generated code
#if defined(MBEDTLS_CIPHER_C)
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE) )
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f5b3 4fc1 	cmp.w	r3, #24704	; 0x6080
 800c400:	d104      	bne.n	800c40c <mbedtls_strerror+0x54>
            mbedtls_snprintf( buf, buflen, "CIPHER - The selected feature is not available" );
 800c402:	4a97      	ldr	r2, [pc, #604]	; (800c660 <mbedtls_strerror+0x2a8>)
 800c404:	6879      	ldr	r1, [r7, #4]
 800c406:	68b8      	ldr	r0, [r7, #8]
 800c408:	f012 f850 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA) )
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 800c412:	d104      	bne.n	800c41e <mbedtls_strerror+0x66>
            mbedtls_snprintf( buf, buflen, "CIPHER - Bad input parameters" );
 800c414:	4a93      	ldr	r2, [pc, #588]	; (800c664 <mbedtls_strerror+0x2ac>)
 800c416:	6879      	ldr	r1, [r7, #4]
 800c418:	68b8      	ldr	r0, [r7, #8]
 800c41a:	f012 f847 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED) )
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 800c424:	d104      	bne.n	800c430 <mbedtls_strerror+0x78>
            mbedtls_snprintf( buf, buflen, "CIPHER - Failed to allocate memory" );
 800c426:	4a90      	ldr	r2, [pc, #576]	; (800c668 <mbedtls_strerror+0x2b0>)
 800c428:	6879      	ldr	r1, [r7, #4]
 800c42a:	68b8      	ldr	r0, [r7, #8]
 800c42c:	f012 f83e 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_PADDING) )
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 800c436:	d104      	bne.n	800c442 <mbedtls_strerror+0x8a>
            mbedtls_snprintf( buf, buflen, "CIPHER - Input data contains invalid padding and is rejected" );
 800c438:	4a8c      	ldr	r2, [pc, #560]	; (800c66c <mbedtls_strerror+0x2b4>)
 800c43a:	6879      	ldr	r1, [r7, #4]
 800c43c:	68b8      	ldr	r0, [r7, #8]
 800c43e:	f012 f835 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED) )
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 800c448:	d104      	bne.n	800c454 <mbedtls_strerror+0x9c>
            mbedtls_snprintf( buf, buflen, "CIPHER - Decryption of block requires a full block" );
 800c44a:	4a89      	ldr	r2, [pc, #548]	; (800c670 <mbedtls_strerror+0x2b8>)
 800c44c:	6879      	ldr	r1, [r7, #4]
 800c44e:	68b8      	ldr	r0, [r7, #8]
 800c450:	f012 f82c 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_AUTH_FAILED) )
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 800c45a:	d104      	bne.n	800c466 <mbedtls_strerror+0xae>
            mbedtls_snprintf( buf, buflen, "CIPHER - Authentication failed (for AEAD modes)" );
 800c45c:	4a85      	ldr	r2, [pc, #532]	; (800c674 <mbedtls_strerror+0x2bc>)
 800c45e:	6879      	ldr	r1, [r7, #4]
 800c460:	68b8      	ldr	r0, [r7, #8]
 800c462:	f012 f823 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT) )
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	f5b3 4fc7 	cmp.w	r3, #25472	; 0x6380
 800c46c:	d104      	bne.n	800c478 <mbedtls_strerror+0xc0>
            mbedtls_snprintf( buf, buflen, "CIPHER - The context is invalid. For example, because it was freed" );
 800c46e:	4a82      	ldr	r2, [pc, #520]	; (800c678 <mbedtls_strerror+0x2c0>)
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	68b8      	ldr	r0, [r7, #8]
 800c474:	f012 f81a 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED) )
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 800c47e:	d104      	bne.n	800c48a <mbedtls_strerror+0xd2>
            mbedtls_snprintf( buf, buflen, "CIPHER - Cipher hardware accelerator failed" );
 800c480:	4a7e      	ldr	r2, [pc, #504]	; (800c67c <mbedtls_strerror+0x2c4>)
 800c482:	6879      	ldr	r1, [r7, #4]
 800c484:	68b8      	ldr	r0, [r7, #8]
 800c486:	f012 f811 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_HW_ACCEL_FAILED) )
            mbedtls_snprintf( buf, buflen, "ECP - ECP hardware accelerator failed" );
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_MD_C)
        if( use_ret == -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE) )
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f5b3 4fa1 	cmp.w	r3, #20608	; 0x5080
 800c490:	d104      	bne.n	800c49c <mbedtls_strerror+0xe4>
            mbedtls_snprintf( buf, buflen, "MD - The selected feature is not available" );
 800c492:	4a7b      	ldr	r2, [pc, #492]	; (800c680 <mbedtls_strerror+0x2c8>)
 800c494:	6879      	ldr	r1, [r7, #4]
 800c496:	68b8      	ldr	r0, [r7, #8]
 800c498:	f012 f808 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_BAD_INPUT_DATA) )
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	f5b3 4fa2 	cmp.w	r3, #20736	; 0x5100
 800c4a2:	d104      	bne.n	800c4ae <mbedtls_strerror+0xf6>
            mbedtls_snprintf( buf, buflen, "MD - Bad input parameters to function" );
 800c4a4:	4a77      	ldr	r2, [pc, #476]	; (800c684 <mbedtls_strerror+0x2cc>)
 800c4a6:	6879      	ldr	r1, [r7, #4]
 800c4a8:	68b8      	ldr	r0, [r7, #8]
 800c4aa:	f011 ffff 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_ALLOC_FAILED) )
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f5b3 4fa3 	cmp.w	r3, #20864	; 0x5180
 800c4b4:	d104      	bne.n	800c4c0 <mbedtls_strerror+0x108>
            mbedtls_snprintf( buf, buflen, "MD - Failed to allocate memory" );
 800c4b6:	4a74      	ldr	r2, [pc, #464]	; (800c688 <mbedtls_strerror+0x2d0>)
 800c4b8:	6879      	ldr	r1, [r7, #4]
 800c4ba:	68b8      	ldr	r0, [r7, #8]
 800c4bc:	f011 fff6 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_FILE_IO_ERROR) )
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800c4c6:	d104      	bne.n	800c4d2 <mbedtls_strerror+0x11a>
            mbedtls_snprintf( buf, buflen, "MD - Opening or reading of file failed" );
 800c4c8:	4a70      	ldr	r2, [pc, #448]	; (800c68c <mbedtls_strerror+0x2d4>)
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	68b8      	ldr	r0, [r7, #8]
 800c4ce:	f011 ffed 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_HW_ACCEL_FAILED) )
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f5b3 4fa5 	cmp.w	r3, #21120	; 0x5280
 800c4d8:	d104      	bne.n	800c4e4 <mbedtls_strerror+0x12c>
            mbedtls_snprintf( buf, buflen, "MD - MD hardware accelerator failed" );
 800c4da:	4a6d      	ldr	r2, [pc, #436]	; (800c690 <mbedtls_strerror+0x2d8>)
 800c4dc:	6879      	ldr	r1, [r7, #4]
 800c4de:	68b8      	ldr	r0, [r7, #8]
 800c4e0:	f011 ffe4 	bl	801e4ac <sniprintf>
#endif /* MBEDTLS_MD_C */

#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)
        if( use_ret == -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) )
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800c4ea:	d104      	bne.n	800c4f6 <mbedtls_strerror+0x13e>
            mbedtls_snprintf( buf, buflen, "PEM - No PEM header or footer found" );
 800c4ec:	4a69      	ldr	r2, [pc, #420]	; (800c694 <mbedtls_strerror+0x2dc>)
 800c4ee:	6879      	ldr	r1, [r7, #4]
 800c4f0:	68b8      	ldr	r0, [r7, #8]
 800c4f2:	f011 ffdb 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_DATA) )
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 800c4fc:	d104      	bne.n	800c508 <mbedtls_strerror+0x150>
            mbedtls_snprintf( buf, buflen, "PEM - PEM string is not as expected" );
 800c4fe:	4a66      	ldr	r2, [pc, #408]	; (800c698 <mbedtls_strerror+0x2e0>)
 800c500:	6879      	ldr	r1, [r7, #4]
 800c502:	68b8      	ldr	r0, [r7, #8]
 800c504:	f011 ffd2 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_ALLOC_FAILED) )
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 800c50e:	d104      	bne.n	800c51a <mbedtls_strerror+0x162>
            mbedtls_snprintf( buf, buflen, "PEM - Failed to allocate memory" );
 800c510:	4a62      	ldr	r2, [pc, #392]	; (800c69c <mbedtls_strerror+0x2e4>)
 800c512:	6879      	ldr	r1, [r7, #4]
 800c514:	68b8      	ldr	r0, [r7, #8]
 800c516:	f011 ffc9 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_ENC_IV) )
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800c520:	d104      	bne.n	800c52c <mbedtls_strerror+0x174>
            mbedtls_snprintf( buf, buflen, "PEM - RSA IV is not in hex-format" );
 800c522:	4a5f      	ldr	r2, [pc, #380]	; (800c6a0 <mbedtls_strerror+0x2e8>)
 800c524:	6879      	ldr	r1, [r7, #4]
 800c526:	68b8      	ldr	r0, [r7, #8]
 800c528:	f011 ffc0 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG) )
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800c532:	d104      	bne.n	800c53e <mbedtls_strerror+0x186>
            mbedtls_snprintf( buf, buflen, "PEM - Unsupported key encryption algorithm" );
 800c534:	4a5b      	ldr	r2, [pc, #364]	; (800c6a4 <mbedtls_strerror+0x2ec>)
 800c536:	6879      	ldr	r1, [r7, #4]
 800c538:	68b8      	ldr	r0, [r7, #8]
 800c53a:	f011 ffb7 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED) )
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 800c544:	d104      	bne.n	800c550 <mbedtls_strerror+0x198>
            mbedtls_snprintf( buf, buflen, "PEM - Private key password can't be empty" );
 800c546:	4a58      	ldr	r2, [pc, #352]	; (800c6a8 <mbedtls_strerror+0x2f0>)
 800c548:	6879      	ldr	r1, [r7, #4]
 800c54a:	68b8      	ldr	r0, [r7, #8]
 800c54c:	f011 ffae 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH) )
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	f5b3 5f9c 	cmp.w	r3, #4992	; 0x1380
 800c556:	d104      	bne.n	800c562 <mbedtls_strerror+0x1aa>
            mbedtls_snprintf( buf, buflen, "PEM - Given private key password does not allow for correct decryption" );
 800c558:	4a54      	ldr	r2, [pc, #336]	; (800c6ac <mbedtls_strerror+0x2f4>)
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	68b8      	ldr	r0, [r7, #8]
 800c55e:	f011 ffa5 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE) )
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c568:	d104      	bne.n	800c574 <mbedtls_strerror+0x1bc>
            mbedtls_snprintf( buf, buflen, "PEM - Unavailable feature, e.g. hashing/encryption combination" );
 800c56a:	4a51      	ldr	r2, [pc, #324]	; (800c6b0 <mbedtls_strerror+0x2f8>)
 800c56c:	6879      	ldr	r1, [r7, #4]
 800c56e:	68b8      	ldr	r0, [r7, #8]
 800c570:	f011 ff9c 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA) )
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f5b3 5fa4 	cmp.w	r3, #5248	; 0x1480
 800c57a:	d104      	bne.n	800c586 <mbedtls_strerror+0x1ce>
            mbedtls_snprintf( buf, buflen, "PEM - Bad input parameters to function" );
 800c57c:	4a4d      	ldr	r2, [pc, #308]	; (800c6b4 <mbedtls_strerror+0x2fc>)
 800c57e:	6879      	ldr	r1, [r7, #4]
 800c580:	68b8      	ldr	r0, [r7, #8]
 800c582:	f011 ff93 	bl	801e4ac <sniprintf>
#endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */

#if defined(MBEDTLS_PK_C)
        if( use_ret == -(MBEDTLS_ERR_PK_ALLOC_FAILED) )
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
 800c58c:	d104      	bne.n	800c598 <mbedtls_strerror+0x1e0>
            mbedtls_snprintf( buf, buflen, "PK - Memory allocation failed" );
 800c58e:	4a4a      	ldr	r2, [pc, #296]	; (800c6b8 <mbedtls_strerror+0x300>)
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	68b8      	ldr	r0, [r7, #8]
 800c594:	f011 ff8a 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_TYPE_MISMATCH) )
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800c59e:	d104      	bne.n	800c5aa <mbedtls_strerror+0x1f2>
            mbedtls_snprintf( buf, buflen, "PK - Type mismatch, eg attempt to encrypt with an ECDSA key" );
 800c5a0:	4a46      	ldr	r2, [pc, #280]	; (800c6bc <mbedtls_strerror+0x304>)
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	68b8      	ldr	r0, [r7, #8]
 800c5a6:	f011 ff81 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_BAD_INPUT_DATA) )
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800c5b0:	d104      	bne.n	800c5bc <mbedtls_strerror+0x204>
            mbedtls_snprintf( buf, buflen, "PK - Bad input parameters to function" );
 800c5b2:	4a43      	ldr	r2, [pc, #268]	; (800c6c0 <mbedtls_strerror+0x308>)
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	68b8      	ldr	r0, [r7, #8]
 800c5b8:	f011 ff78 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_FILE_IO_ERROR) )
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 800c5c2:	d104      	bne.n	800c5ce <mbedtls_strerror+0x216>
            mbedtls_snprintf( buf, buflen, "PK - Read/write of file failed" );
 800c5c4:	4a3f      	ldr	r2, [pc, #252]	; (800c6c4 <mbedtls_strerror+0x30c>)
 800c5c6:	6879      	ldr	r1, [r7, #4]
 800c5c8:	68b8      	ldr	r0, [r7, #8]
 800c5ca:	f011 ff6f 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION) )
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	f5b3 5f76 	cmp.w	r3, #15744	; 0x3d80
 800c5d4:	d104      	bne.n	800c5e0 <mbedtls_strerror+0x228>
            mbedtls_snprintf( buf, buflen, "PK - Unsupported key version" );
 800c5d6:	4a3c      	ldr	r2, [pc, #240]	; (800c6c8 <mbedtls_strerror+0x310>)
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	68b8      	ldr	r0, [r7, #8]
 800c5dc:	f011 ff66 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT) )
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	f5b3 5f74 	cmp.w	r3, #15616	; 0x3d00
 800c5e6:	d104      	bne.n	800c5f2 <mbedtls_strerror+0x23a>
            mbedtls_snprintf( buf, buflen, "PK - Invalid key tag or value" );
 800c5e8:	4a38      	ldr	r2, [pc, #224]	; (800c6cc <mbedtls_strerror+0x314>)
 800c5ea:	6879      	ldr	r1, [r7, #4]
 800c5ec:	68b8      	ldr	r0, [r7, #8]
 800c5ee:	f011 ff5d 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG) )
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f5b3 5f72 	cmp.w	r3, #15488	; 0x3c80
 800c5f8:	d104      	bne.n	800c604 <mbedtls_strerror+0x24c>
            mbedtls_snprintf( buf, buflen, "PK - Key algorithm is unsupported (only RSA and EC are supported)" );
 800c5fa:	4a35      	ldr	r2, [pc, #212]	; (800c6d0 <mbedtls_strerror+0x318>)
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	68b8      	ldr	r0, [r7, #8]
 800c600:	f011 ff54 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED) )
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800c60a:	d104      	bne.n	800c616 <mbedtls_strerror+0x25e>
            mbedtls_snprintf( buf, buflen, "PK - Private key password can't be empty" );
 800c60c:	4a31      	ldr	r2, [pc, #196]	; (800c6d4 <mbedtls_strerror+0x31c>)
 800c60e:	6879      	ldr	r1, [r7, #4]
 800c610:	68b8      	ldr	r0, [r7, #8]
 800c612:	f011 ff4b 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH) )
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	f5b3 5f6e 	cmp.w	r3, #15232	; 0x3b80
 800c61c:	d104      	bne.n	800c628 <mbedtls_strerror+0x270>
            mbedtls_snprintf( buf, buflen, "PK - Given private key password does not allow for correct decryption" );
 800c61e:	4a2e      	ldr	r2, [pc, #184]	; (800c6d8 <mbedtls_strerror+0x320>)
 800c620:	6879      	ldr	r1, [r7, #4]
 800c622:	68b8      	ldr	r0, [r7, #8]
 800c624:	f011 ff42 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_PUBKEY) )
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f5b3 5f6c 	cmp.w	r3, #15104	; 0x3b00
 800c62e:	d104      	bne.n	800c63a <mbedtls_strerror+0x282>
            mbedtls_snprintf( buf, buflen, "PK - The pubkey tag or value is invalid (only RSA and EC are supported)" );
 800c630:	4a2a      	ldr	r2, [pc, #168]	; (800c6dc <mbedtls_strerror+0x324>)
 800c632:	6879      	ldr	r1, [r7, #4]
 800c634:	68b8      	ldr	r0, [r7, #8]
 800c636:	f011 ff39 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_ALG) )
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f5b3 5f6a 	cmp.w	r3, #14976	; 0x3a80
 800c640:	d104      	bne.n	800c64c <mbedtls_strerror+0x294>
            mbedtls_snprintf( buf, buflen, "PK - The algorithm tag or value is invalid" );
 800c642:	4a27      	ldr	r2, [pc, #156]	; (800c6e0 <mbedtls_strerror+0x328>)
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	68b8      	ldr	r0, [r7, #8]
 800c648:	f011 ff30 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE) )
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 800c652:	d149      	bne.n	800c6e8 <mbedtls_strerror+0x330>
            mbedtls_snprintf( buf, buflen, "PK - Elliptic curve is unsupported (only NIST curves are supported)" );
 800c654:	4a23      	ldr	r2, [pc, #140]	; (800c6e4 <mbedtls_strerror+0x32c>)
 800c656:	6879      	ldr	r1, [r7, #4]
 800c658:	68b8      	ldr	r0, [r7, #8]
 800c65a:	f011 ff27 	bl	801e4ac <sniprintf>
 800c65e:	e043      	b.n	800c6e8 <mbedtls_strerror+0x330>
 800c660:	0801fb24 	.word	0x0801fb24
 800c664:	0801fb54 	.word	0x0801fb54
 800c668:	0801fb74 	.word	0x0801fb74
 800c66c:	0801fb98 	.word	0x0801fb98
 800c670:	0801fbd8 	.word	0x0801fbd8
 800c674:	0801fc0c 	.word	0x0801fc0c
 800c678:	0801fc3c 	.word	0x0801fc3c
 800c67c:	0801fc80 	.word	0x0801fc80
 800c680:	0801fcac 	.word	0x0801fcac
 800c684:	0801fcd8 	.word	0x0801fcd8
 800c688:	0801fd00 	.word	0x0801fd00
 800c68c:	0801fd20 	.word	0x0801fd20
 800c690:	0801fd48 	.word	0x0801fd48
 800c694:	0801fd6c 	.word	0x0801fd6c
 800c698:	0801fd90 	.word	0x0801fd90
 800c69c:	0801fdb4 	.word	0x0801fdb4
 800c6a0:	0801fdd4 	.word	0x0801fdd4
 800c6a4:	0801fdf8 	.word	0x0801fdf8
 800c6a8:	0801fe24 	.word	0x0801fe24
 800c6ac:	0801fe50 	.word	0x0801fe50
 800c6b0:	0801fe98 	.word	0x0801fe98
 800c6b4:	0801fed8 	.word	0x0801fed8
 800c6b8:	0801ff00 	.word	0x0801ff00
 800c6bc:	0801ff20 	.word	0x0801ff20
 800c6c0:	0801ff5c 	.word	0x0801ff5c
 800c6c4:	0801ff84 	.word	0x0801ff84
 800c6c8:	0801ffa4 	.word	0x0801ffa4
 800c6cc:	0801ffc4 	.word	0x0801ffc4
 800c6d0:	0801ffe4 	.word	0x0801ffe4
 800c6d4:	08020028 	.word	0x08020028
 800c6d8:	08020054 	.word	0x08020054
 800c6dc:	0802009c 	.word	0x0802009c
 800c6e0:	080200e4 	.word	0x080200e4
 800c6e4:	08020110 	.word	0x08020110
        if( use_ret == -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE) )
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 800c6ee:	d104      	bne.n	800c6fa <mbedtls_strerror+0x342>
            mbedtls_snprintf( buf, buflen, "PK - Unavailable feature, e.g. RSA disabled for RSA key" );
 800c6f0:	4a80      	ldr	r2, [pc, #512]	; (800c8f4 <mbedtls_strerror+0x53c>)
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	68b8      	ldr	r0, [r7, #8]
 800c6f6:	f011 fed9 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH) )
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	f5b3 5f64 	cmp.w	r3, #14592	; 0x3900
 800c700:	d104      	bne.n	800c70c <mbedtls_strerror+0x354>
            mbedtls_snprintf( buf, buflen, "PK - The signature is valid but its length is less than expected" );
 800c702:	4a7d      	ldr	r2, [pc, #500]	; (800c8f8 <mbedtls_strerror+0x540>)
 800c704:	6879      	ldr	r1, [r7, #4]
 800c706:	68b8      	ldr	r0, [r7, #8]
 800c708:	f011 fed0 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_HW_ACCEL_FAILED) )
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	f5b3 5f62 	cmp.w	r3, #14464	; 0x3880
 800c712:	d104      	bne.n	800c71e <mbedtls_strerror+0x366>
            mbedtls_snprintf( buf, buflen, "PK - PK hardware accelerator failed" );
 800c714:	4a79      	ldr	r2, [pc, #484]	; (800c8fc <mbedtls_strerror+0x544>)
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	68b8      	ldr	r0, [r7, #8]
 800c71a:	f011 fec7 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH) )
            mbedtls_snprintf( buf, buflen, "PKCS5 - Given private key password does not allow for correct decryption" );
#endif /* MBEDTLS_PKCS5_C */

#if defined(MBEDTLS_RSA_C)
        if( use_ret == -(MBEDTLS_ERR_RSA_BAD_INPUT_DATA) )
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f5b3 4f81 	cmp.w	r3, #16512	; 0x4080
 800c724:	d104      	bne.n	800c730 <mbedtls_strerror+0x378>
            mbedtls_snprintf( buf, buflen, "RSA - Bad input parameters to function" );
 800c726:	4a76      	ldr	r2, [pc, #472]	; (800c900 <mbedtls_strerror+0x548>)
 800c728:	6879      	ldr	r1, [r7, #4]
 800c72a:	68b8      	ldr	r0, [r7, #8]
 800c72c:	f011 febe 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_INVALID_PADDING) )
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f5b3 4f82 	cmp.w	r3, #16640	; 0x4100
 800c736:	d104      	bne.n	800c742 <mbedtls_strerror+0x38a>
            mbedtls_snprintf( buf, buflen, "RSA - Input data contains invalid padding and is rejected" );
 800c738:	4a72      	ldr	r2, [pc, #456]	; (800c904 <mbedtls_strerror+0x54c>)
 800c73a:	6879      	ldr	r1, [r7, #4]
 800c73c:	68b8      	ldr	r0, [r7, #8]
 800c73e:	f011 feb5 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_GEN_FAILED) )
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f5b3 4f83 	cmp.w	r3, #16768	; 0x4180
 800c748:	d104      	bne.n	800c754 <mbedtls_strerror+0x39c>
            mbedtls_snprintf( buf, buflen, "RSA - Something failed during generation of a key" );
 800c74a:	4a6f      	ldr	r2, [pc, #444]	; (800c908 <mbedtls_strerror+0x550>)
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	68b8      	ldr	r0, [r7, #8]
 800c750:	f011 feac 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_CHECK_FAILED) )
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 800c75a:	d104      	bne.n	800c766 <mbedtls_strerror+0x3ae>
            mbedtls_snprintf( buf, buflen, "RSA - Key failed to pass the validity check of the library" );
 800c75c:	4a6b      	ldr	r2, [pc, #428]	; (800c90c <mbedtls_strerror+0x554>)
 800c75e:	6879      	ldr	r1, [r7, #4]
 800c760:	68b8      	ldr	r0, [r7, #8]
 800c762:	f011 fea3 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_PUBLIC_FAILED) )
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f5b3 4f85 	cmp.w	r3, #17024	; 0x4280
 800c76c:	d104      	bne.n	800c778 <mbedtls_strerror+0x3c0>
            mbedtls_snprintf( buf, buflen, "RSA - The public key operation failed" );
 800c76e:	4a68      	ldr	r2, [pc, #416]	; (800c910 <mbedtls_strerror+0x558>)
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	68b8      	ldr	r0, [r7, #8]
 800c774:	f011 fe9a 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_PRIVATE_FAILED) )
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 800c77e:	d104      	bne.n	800c78a <mbedtls_strerror+0x3d2>
            mbedtls_snprintf( buf, buflen, "RSA - The private key operation failed" );
 800c780:	4a64      	ldr	r2, [pc, #400]	; (800c914 <mbedtls_strerror+0x55c>)
 800c782:	6879      	ldr	r1, [r7, #4]
 800c784:	68b8      	ldr	r0, [r7, #8]
 800c786:	f011 fe91 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_VERIFY_FAILED) )
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f5b3 4f87 	cmp.w	r3, #17280	; 0x4380
 800c790:	d104      	bne.n	800c79c <mbedtls_strerror+0x3e4>
            mbedtls_snprintf( buf, buflen, "RSA - The PKCS#1 verification failed" );
 800c792:	4a61      	ldr	r2, [pc, #388]	; (800c918 <mbedtls_strerror+0x560>)
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	68b8      	ldr	r0, [r7, #8]
 800c798:	f011 fe88 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE) )
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800c7a2:	d104      	bne.n	800c7ae <mbedtls_strerror+0x3f6>
            mbedtls_snprintf( buf, buflen, "RSA - The output buffer for decryption is not large enough" );
 800c7a4:	4a5d      	ldr	r2, [pc, #372]	; (800c91c <mbedtls_strerror+0x564>)
 800c7a6:	6879      	ldr	r1, [r7, #4]
 800c7a8:	68b8      	ldr	r0, [r7, #8]
 800c7aa:	f011 fe7f 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_RNG_FAILED) )
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f5b3 4f89 	cmp.w	r3, #17536	; 0x4480
 800c7b4:	d104      	bne.n	800c7c0 <mbedtls_strerror+0x408>
            mbedtls_snprintf( buf, buflen, "RSA - The random generator failed to generate non-zeros" );
 800c7b6:	4a5a      	ldr	r2, [pc, #360]	; (800c920 <mbedtls_strerror+0x568>)
 800c7b8:	6879      	ldr	r1, [r7, #4]
 800c7ba:	68b8      	ldr	r0, [r7, #8]
 800c7bc:	f011 fe76 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION) )
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	f5b3 4f8a 	cmp.w	r3, #17664	; 0x4500
 800c7c6:	d104      	bne.n	800c7d2 <mbedtls_strerror+0x41a>
            mbedtls_snprintf( buf, buflen, "RSA - The implementation does not offer the requested operation, for example, because of security violations or lack of functionality" );
 800c7c8:	4a56      	ldr	r2, [pc, #344]	; (800c924 <mbedtls_strerror+0x56c>)
 800c7ca:	6879      	ldr	r1, [r7, #4]
 800c7cc:	68b8      	ldr	r0, [r7, #8]
 800c7ce:	f011 fe6d 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_HW_ACCEL_FAILED) )
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f5b3 4f8b 	cmp.w	r3, #17792	; 0x4580
 800c7d8:	d104      	bne.n	800c7e4 <mbedtls_strerror+0x42c>
            mbedtls_snprintf( buf, buflen, "RSA - RSA hardware accelerator failed" );
 800c7da:	4a53      	ldr	r2, [pc, #332]	; (800c928 <mbedtls_strerror+0x570>)
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	68b8      	ldr	r0, [r7, #8]
 800c7e0:	f011 fe64 	bl	801e4ac <sniprintf>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_SSL_TLS_C)
        if( use_ret == -(MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE) )
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
 800c7ea:	d104      	bne.n	800c7f6 <mbedtls_strerror+0x43e>
            mbedtls_snprintf( buf, buflen, "SSL - The requested feature is not available" );
 800c7ec:	4a4f      	ldr	r2, [pc, #316]	; (800c92c <mbedtls_strerror+0x574>)
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	68b8      	ldr	r0, [r7, #8]
 800c7f2:	f011 fe5b 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_INPUT_DATA) )
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f5b3 4fe2 	cmp.w	r3, #28928	; 0x7100
 800c7fc:	d104      	bne.n	800c808 <mbedtls_strerror+0x450>
            mbedtls_snprintf( buf, buflen, "SSL - Bad input parameters to function" );
 800c7fe:	4a4c      	ldr	r2, [pc, #304]	; (800c930 <mbedtls_strerror+0x578>)
 800c800:	6879      	ldr	r1, [r7, #4]
 800c802:	68b8      	ldr	r0, [r7, #8]
 800c804:	f011 fe52 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_MAC) )
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	f5b3 4fe3 	cmp.w	r3, #29056	; 0x7180
 800c80e:	d104      	bne.n	800c81a <mbedtls_strerror+0x462>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of the message MAC failed" );
 800c810:	4a48      	ldr	r2, [pc, #288]	; (800c934 <mbedtls_strerror+0x57c>)
 800c812:	6879      	ldr	r1, [r7, #4]
 800c814:	68b8      	ldr	r0, [r7, #8]
 800c816:	f011 fe49 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_RECORD) )
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 800c820:	d104      	bne.n	800c82c <mbedtls_strerror+0x474>
            mbedtls_snprintf( buf, buflen, "SSL - An invalid SSL record was received" );
 800c822:	4a45      	ldr	r2, [pc, #276]	; (800c938 <mbedtls_strerror+0x580>)
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	68b8      	ldr	r0, [r7, #8]
 800c828:	f011 fe40 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CONN_EOF) )
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f5b3 4fe5 	cmp.w	r3, #29312	; 0x7280
 800c832:	d104      	bne.n	800c83e <mbedtls_strerror+0x486>
            mbedtls_snprintf( buf, buflen, "SSL - The connection indicated an EOF" );
 800c834:	4a41      	ldr	r2, [pc, #260]	; (800c93c <mbedtls_strerror+0x584>)
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	68b8      	ldr	r0, [r7, #8]
 800c83a:	f011 fe37 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_CIPHER) )
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 800c844:	d104      	bne.n	800c850 <mbedtls_strerror+0x498>
            mbedtls_snprintf( buf, buflen, "SSL - An unknown cipher was received" );
 800c846:	4a3e      	ldr	r2, [pc, #248]	; (800c940 <mbedtls_strerror+0x588>)
 800c848:	6879      	ldr	r1, [r7, #4]
 800c84a:	68b8      	ldr	r0, [r7, #8]
 800c84c:	f011 fe2e 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN) )
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f5b3 4fe7 	cmp.w	r3, #29568	; 0x7380
 800c856:	d104      	bne.n	800c862 <mbedtls_strerror+0x4aa>
            mbedtls_snprintf( buf, buflen, "SSL - The server has no ciphersuites in common with the client" );
 800c858:	4a3a      	ldr	r2, [pc, #232]	; (800c944 <mbedtls_strerror+0x58c>)
 800c85a:	6879      	ldr	r1, [r7, #4]
 800c85c:	68b8      	ldr	r0, [r7, #8]
 800c85e:	f011 fe25 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_RNG) )
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f5b3 4fe8 	cmp.w	r3, #29696	; 0x7400
 800c868:	d104      	bne.n	800c874 <mbedtls_strerror+0x4bc>
            mbedtls_snprintf( buf, buflen, "SSL - No RNG was provided to the SSL module" );
 800c86a:	4a37      	ldr	r2, [pc, #220]	; (800c948 <mbedtls_strerror+0x590>)
 800c86c:	6879      	ldr	r1, [r7, #4]
 800c86e:	68b8      	ldr	r0, [r7, #8]
 800c870:	f011 fe1c 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE) )
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	f5b3 4fe9 	cmp.w	r3, #29824	; 0x7480
 800c87a:	d104      	bne.n	800c886 <mbedtls_strerror+0x4ce>
            mbedtls_snprintf( buf, buflen, "SSL - No client certification received from the client, but required by the authentication mode" );
 800c87c:	4a33      	ldr	r2, [pc, #204]	; (800c94c <mbedtls_strerror+0x594>)
 800c87e:	6879      	ldr	r1, [r7, #4]
 800c880:	68b8      	ldr	r0, [r7, #8]
 800c882:	f011 fe13 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE) )
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f5b3 4fea 	cmp.w	r3, #29952	; 0x7500
 800c88c:	d104      	bne.n	800c898 <mbedtls_strerror+0x4e0>
            mbedtls_snprintf( buf, buflen, "SSL - Our own certificate(s) is/are too large to send in an SSL message" );
 800c88e:	4a30      	ldr	r2, [pc, #192]	; (800c950 <mbedtls_strerror+0x598>)
 800c890:	6879      	ldr	r1, [r7, #4]
 800c892:	68b8      	ldr	r0, [r7, #8]
 800c894:	f011 fe0a 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED) )
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	f5b3 4feb 	cmp.w	r3, #30080	; 0x7580
 800c89e:	d104      	bne.n	800c8aa <mbedtls_strerror+0x4f2>
            mbedtls_snprintf( buf, buflen, "SSL - The own certificate is not set, but needed by the server" );
 800c8a0:	4a2c      	ldr	r2, [pc, #176]	; (800c954 <mbedtls_strerror+0x59c>)
 800c8a2:	6879      	ldr	r1, [r7, #4]
 800c8a4:	68b8      	ldr	r0, [r7, #8]
 800c8a6:	f011 fe01 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED) )
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f5b3 4fec 	cmp.w	r3, #30208	; 0x7600
 800c8b0:	d104      	bne.n	800c8bc <mbedtls_strerror+0x504>
            mbedtls_snprintf( buf, buflen, "SSL - The own private key or pre-shared key is not set, but needed" );
 800c8b2:	4a29      	ldr	r2, [pc, #164]	; (800c958 <mbedtls_strerror+0x5a0>)
 800c8b4:	6879      	ldr	r1, [r7, #4]
 800c8b6:	68b8      	ldr	r0, [r7, #8]
 800c8b8:	f011 fdf8 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED) )
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f5b3 4fed 	cmp.w	r3, #30336	; 0x7680
 800c8c2:	d104      	bne.n	800c8ce <mbedtls_strerror+0x516>
            mbedtls_snprintf( buf, buflen, "SSL - No CA Chain is set, but required to operate" );
 800c8c4:	4a25      	ldr	r2, [pc, #148]	; (800c95c <mbedtls_strerror+0x5a4>)
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	68b8      	ldr	r0, [r7, #8]
 800c8ca:	f011 fdef 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE) )
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	f5b3 4fee 	cmp.w	r3, #30464	; 0x7700
 800c8d4:	d104      	bne.n	800c8e0 <mbedtls_strerror+0x528>
            mbedtls_snprintf( buf, buflen, "SSL - An unexpected message was received from our peer" );
 800c8d6:	4a22      	ldr	r2, [pc, #136]	; (800c960 <mbedtls_strerror+0x5a8>)
 800c8d8:	6879      	ldr	r1, [r7, #4]
 800c8da:	68b8      	ldr	r0, [r7, #8]
 800c8dc:	f011 fde6 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE) )
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f5b3 4fef 	cmp.w	r3, #30592	; 0x7780
 800c8e6:	d13f      	bne.n	800c968 <mbedtls_strerror+0x5b0>
        {
            mbedtls_snprintf( buf, buflen, "SSL - A fatal alert message was received from our peer" );
 800c8e8:	4a1e      	ldr	r2, [pc, #120]	; (800c964 <mbedtls_strerror+0x5ac>)
 800c8ea:	6879      	ldr	r1, [r7, #4]
 800c8ec:	68b8      	ldr	r0, [r7, #8]
 800c8ee:	f011 fddd 	bl	801e4ac <sniprintf>
            return;
 800c8f2:	e3f5      	b.n	800d0e0 <mbedtls_strerror+0xd28>
 800c8f4:	08020154 	.word	0x08020154
 800c8f8:	0802018c 	.word	0x0802018c
 800c8fc:	080201d0 	.word	0x080201d0
 800c900:	080201f4 	.word	0x080201f4
 800c904:	0802021c 	.word	0x0802021c
 800c908:	08020258 	.word	0x08020258
 800c90c:	0802028c 	.word	0x0802028c
 800c910:	080202c8 	.word	0x080202c8
 800c914:	080202f0 	.word	0x080202f0
 800c918:	08020318 	.word	0x08020318
 800c91c:	08020340 	.word	0x08020340
 800c920:	0802037c 	.word	0x0802037c
 800c924:	080203b4 	.word	0x080203b4
 800c928:	0802043c 	.word	0x0802043c
 800c92c:	08020464 	.word	0x08020464
 800c930:	08020494 	.word	0x08020494
 800c934:	080204bc 	.word	0x080204bc
 800c938:	080204ec 	.word	0x080204ec
 800c93c:	08020518 	.word	0x08020518
 800c940:	08020540 	.word	0x08020540
 800c944:	08020568 	.word	0x08020568
 800c948:	080205a8 	.word	0x080205a8
 800c94c:	080205d4 	.word	0x080205d4
 800c950:	08020634 	.word	0x08020634
 800c954:	0802067c 	.word	0x0802067c
 800c958:	080206bc 	.word	0x080206bc
 800c95c:	08020700 	.word	0x08020700
 800c960:	08020734 	.word	0x08020734
 800c964:	0802076c 	.word	0x0802076c
        }
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED) )
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800c96e:	d104      	bne.n	800c97a <mbedtls_strerror+0x5c2>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of our peer failed" );
 800c970:	4a97      	ldr	r2, [pc, #604]	; (800cbd0 <mbedtls_strerror+0x818>)
 800c972:	6879      	ldr	r1, [r7, #4]
 800c974:	68b8      	ldr	r0, [r7, #8]
 800c976:	f011 fd99 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY) )
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f5b3 4ff1 	cmp.w	r3, #30848	; 0x7880
 800c980:	d104      	bne.n	800c98c <mbedtls_strerror+0x5d4>
            mbedtls_snprintf( buf, buflen, "SSL - The peer notified us that the connection is going to be closed" );
 800c982:	4a94      	ldr	r2, [pc, #592]	; (800cbd4 <mbedtls_strerror+0x81c>)
 800c984:	6879      	ldr	r1, [r7, #4]
 800c986:	68b8      	ldr	r0, [r7, #8]
 800c988:	f011 fd90 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO) )
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	f5b3 4ff2 	cmp.w	r3, #30976	; 0x7900
 800c992:	d104      	bne.n	800c99e <mbedtls_strerror+0x5e6>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientHello handshake message failed" );
 800c994:	4a90      	ldr	r2, [pc, #576]	; (800cbd8 <mbedtls_strerror+0x820>)
 800c996:	6879      	ldr	r1, [r7, #4]
 800c998:	68b8      	ldr	r0, [r7, #8]
 800c99a:	f011 fd87 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO) )
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f5b3 4ff3 	cmp.w	r3, #31104	; 0x7980
 800c9a4:	d104      	bne.n	800c9b0 <mbedtls_strerror+0x5f8>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHello handshake message failed" );
 800c9a6:	4a8d      	ldr	r2, [pc, #564]	; (800cbdc <mbedtls_strerror+0x824>)
 800c9a8:	6879      	ldr	r1, [r7, #4]
 800c9aa:	68b8      	ldr	r0, [r7, #8]
 800c9ac:	f011 fd7e 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE) )
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	f5b3 4ff4 	cmp.w	r3, #31232	; 0x7a00
 800c9b6:	d104      	bne.n	800c9c2 <mbedtls_strerror+0x60a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Certificate handshake message failed" );
 800c9b8:	4a89      	ldr	r2, [pc, #548]	; (800cbe0 <mbedtls_strerror+0x828>)
 800c9ba:	6879      	ldr	r1, [r7, #4]
 800c9bc:	68b8      	ldr	r0, [r7, #8]
 800c9be:	f011 fd75 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST) )
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	f5b3 4ff5 	cmp.w	r3, #31360	; 0x7a80
 800c9c8:	d104      	bne.n	800c9d4 <mbedtls_strerror+0x61c>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateRequest handshake message failed" );
 800c9ca:	4a86      	ldr	r2, [pc, #536]	; (800cbe4 <mbedtls_strerror+0x82c>)
 800c9cc:	6879      	ldr	r1, [r7, #4]
 800c9ce:	68b8      	ldr	r0, [r7, #8]
 800c9d0:	f011 fd6c 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE) )
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	f5b3 4ff6 	cmp.w	r3, #31488	; 0x7b00
 800c9da:	d104      	bne.n	800c9e6 <mbedtls_strerror+0x62e>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerKeyExchange handshake message failed" );
 800c9dc:	4a82      	ldr	r2, [pc, #520]	; (800cbe8 <mbedtls_strerror+0x830>)
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	68b8      	ldr	r0, [r7, #8]
 800c9e2:	f011 fd63 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE) )
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f5b3 4ff7 	cmp.w	r3, #31616	; 0x7b80
 800c9ec:	d104      	bne.n	800c9f8 <mbedtls_strerror+0x640>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHelloDone handshake message failed" );
 800c9ee:	4a7f      	ldr	r2, [pc, #508]	; (800cbec <mbedtls_strerror+0x834>)
 800c9f0:	6879      	ldr	r1, [r7, #4]
 800c9f2:	68b8      	ldr	r0, [r7, #8]
 800c9f4:	f011 fd5a 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE) )
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 800c9fe:	d104      	bne.n	800ca0a <mbedtls_strerror+0x652>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed" );
 800ca00:	4a7b      	ldr	r2, [pc, #492]	; (800cbf0 <mbedtls_strerror+0x838>)
 800ca02:	6879      	ldr	r1, [r7, #4]
 800ca04:	68b8      	ldr	r0, [r7, #8]
 800ca06:	f011 fd51 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP) )
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	f5b3 4ff9 	cmp.w	r3, #31872	; 0x7c80
 800ca10:	d104      	bne.n	800ca1c <mbedtls_strerror+0x664>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public" );
 800ca12:	4a78      	ldr	r2, [pc, #480]	; (800cbf4 <mbedtls_strerror+0x83c>)
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	68b8      	ldr	r0, [r7, #8]
 800ca18:	f011 fd48 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS) )
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800ca22:	d104      	bne.n	800ca2e <mbedtls_strerror+0x676>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret" );
 800ca24:	4a74      	ldr	r2, [pc, #464]	; (800cbf8 <mbedtls_strerror+0x840>)
 800ca26:	6879      	ldr	r1, [r7, #4]
 800ca28:	68b8      	ldr	r0, [r7, #8]
 800ca2a:	f011 fd3f 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY) )
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f5b3 4ffb 	cmp.w	r3, #32128	; 0x7d80
 800ca34:	d104      	bne.n	800ca40 <mbedtls_strerror+0x688>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateVerify handshake message failed" );
 800ca36:	4a71      	ldr	r2, [pc, #452]	; (800cbfc <mbedtls_strerror+0x844>)
 800ca38:	6879      	ldr	r1, [r7, #4]
 800ca3a:	68b8      	ldr	r0, [r7, #8]
 800ca3c:	f011 fd36 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC) )
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 800ca46:	d104      	bne.n	800ca52 <mbedtls_strerror+0x69a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ChangeCipherSpec handshake message failed" );
 800ca48:	4a6d      	ldr	r2, [pc, #436]	; (800cc00 <mbedtls_strerror+0x848>)
 800ca4a:	6879      	ldr	r1, [r7, #4]
 800ca4c:	68b8      	ldr	r0, [r7, #8]
 800ca4e:	f011 fd2d 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_FINISHED) )
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	f5b3 4ffd 	cmp.w	r3, #32384	; 0x7e80
 800ca58:	d104      	bne.n	800ca64 <mbedtls_strerror+0x6ac>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Finished handshake message failed" );
 800ca5a:	4a6a      	ldr	r2, [pc, #424]	; (800cc04 <mbedtls_strerror+0x84c>)
 800ca5c:	6879      	ldr	r1, [r7, #4]
 800ca5e:	68b8      	ldr	r0, [r7, #8]
 800ca60:	f011 fd24 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_ALLOC_FAILED) )
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 800ca6a:	d104      	bne.n	800ca76 <mbedtls_strerror+0x6be>
            mbedtls_snprintf( buf, buflen, "SSL - Memory allocation failed" );
 800ca6c:	4a66      	ldr	r2, [pc, #408]	; (800cc08 <mbedtls_strerror+0x850>)
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	68b8      	ldr	r0, [r7, #8]
 800ca72:	f011 fd1b 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FAILED) )
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f5b3 4fff 	cmp.w	r3, #32640	; 0x7f80
 800ca7c:	d104      	bne.n	800ca88 <mbedtls_strerror+0x6d0>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function returned with error" );
 800ca7e:	4a63      	ldr	r2, [pc, #396]	; (800cc0c <mbedtls_strerror+0x854>)
 800ca80:	6879      	ldr	r1, [r7, #4]
 800ca82:	68b8      	ldr	r0, [r7, #8]
 800ca84:	f011 fd12 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH) )
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	f5b3 4fdf 	cmp.w	r3, #28544	; 0x6f80
 800ca8e:	d104      	bne.n	800ca9a <mbedtls_strerror+0x6e2>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function skipped / left alone data" );
 800ca90:	4a5f      	ldr	r2, [pc, #380]	; (800cc10 <mbedtls_strerror+0x858>)
 800ca92:	6879      	ldr	r1, [r7, #4]
 800ca94:	68b8      	ldr	r0, [r7, #8]
 800ca96:	f011 fd09 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_COMPRESSION_FAILED) )
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	f5b3 4fde 	cmp.w	r3, #28416	; 0x6f00
 800caa0:	d104      	bne.n	800caac <mbedtls_strerror+0x6f4>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the compression / decompression failed" );
 800caa2:	4a5c      	ldr	r2, [pc, #368]	; (800cc14 <mbedtls_strerror+0x85c>)
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	68b8      	ldr	r0, [r7, #8]
 800caa8:	f011 fd00 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION) )
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	f5b3 4fdd 	cmp.w	r3, #28288	; 0x6e80
 800cab2:	d104      	bne.n	800cabe <mbedtls_strerror+0x706>
            mbedtls_snprintf( buf, buflen, "SSL - Handshake protocol not within min/max boundaries" );
 800cab4:	4a58      	ldr	r2, [pc, #352]	; (800cc18 <mbedtls_strerror+0x860>)
 800cab6:	6879      	ldr	r1, [r7, #4]
 800cab8:	68b8      	ldr	r0, [r7, #8]
 800caba:	f011 fcf7 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET) )
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	f5b3 4fdc 	cmp.w	r3, #28160	; 0x6e00
 800cac4:	d104      	bne.n	800cad0 <mbedtls_strerror+0x718>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the NewSessionTicket handshake message failed" );
 800cac6:	4a55      	ldr	r2, [pc, #340]	; (800cc1c <mbedtls_strerror+0x864>)
 800cac8:	6879      	ldr	r1, [r7, #4]
 800caca:	68b8      	ldr	r0, [r7, #8]
 800cacc:	f011 fcee 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED) )
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	f5b3 4fdb 	cmp.w	r3, #28032	; 0x6d80
 800cad6:	d104      	bne.n	800cae2 <mbedtls_strerror+0x72a>
            mbedtls_snprintf( buf, buflen, "SSL - Session ticket has expired" );
 800cad8:	4a51      	ldr	r2, [pc, #324]	; (800cc20 <mbedtls_strerror+0x868>)
 800cada:	6879      	ldr	r1, [r7, #4]
 800cadc:	68b8      	ldr	r0, [r7, #8]
 800cade:	f011 fce5 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH) )
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	f5b3 4fda 	cmp.w	r3, #27904	; 0x6d00
 800cae8:	d104      	bne.n	800caf4 <mbedtls_strerror+0x73c>
            mbedtls_snprintf( buf, buflen, "SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)" );
 800caea:	4a4e      	ldr	r2, [pc, #312]	; (800cc24 <mbedtls_strerror+0x86c>)
 800caec:	6879      	ldr	r1, [r7, #4]
 800caee:	68b8      	ldr	r0, [r7, #8]
 800caf0:	f011 fcdc 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY) )
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f5b3 4fd9 	cmp.w	r3, #27776	; 0x6c80
 800cafa:	d104      	bne.n	800cb06 <mbedtls_strerror+0x74e>
            mbedtls_snprintf( buf, buflen, "SSL - Unknown identity received (eg, PSK identity)" );
 800cafc:	4a4a      	ldr	r2, [pc, #296]	; (800cc28 <mbedtls_strerror+0x870>)
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	68b8      	ldr	r0, [r7, #8]
 800cb02:	f011 fcd3 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INTERNAL_ERROR) )
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	f5b3 4fd8 	cmp.w	r3, #27648	; 0x6c00
 800cb0c:	d104      	bne.n	800cb18 <mbedtls_strerror+0x760>
            mbedtls_snprintf( buf, buflen, "SSL - Internal error (eg, unexpected failure in lower-level module)" );
 800cb0e:	4a47      	ldr	r2, [pc, #284]	; (800cc2c <mbedtls_strerror+0x874>)
 800cb10:	6879      	ldr	r1, [r7, #4]
 800cb12:	68b8      	ldr	r0, [r7, #8]
 800cb14:	f011 fcca 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_COUNTER_WRAPPING) )
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	f5b3 4fd7 	cmp.w	r3, #27520	; 0x6b80
 800cb1e:	d104      	bne.n	800cb2a <mbedtls_strerror+0x772>
            mbedtls_snprintf( buf, buflen, "SSL - A counter would wrap (eg, too many messages exchanged)" );
 800cb20:	4a43      	ldr	r2, [pc, #268]	; (800cc30 <mbedtls_strerror+0x878>)
 800cb22:	6879      	ldr	r1, [r7, #4]
 800cb24:	68b8      	ldr	r0, [r7, #8]
 800cb26:	f011 fcc1 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO) )
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	f5b3 4fd6 	cmp.w	r3, #27392	; 0x6b00
 800cb30:	d104      	bne.n	800cb3c <mbedtls_strerror+0x784>
            mbedtls_snprintf( buf, buflen, "SSL - Unexpected message at ServerHello in renegotiation" );
 800cb32:	4a40      	ldr	r2, [pc, #256]	; (800cc34 <mbedtls_strerror+0x87c>)
 800cb34:	6879      	ldr	r1, [r7, #4]
 800cb36:	68b8      	ldr	r0, [r7, #8]
 800cb38:	f011 fcb8 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED) )
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	f5b3 4fd5 	cmp.w	r3, #27264	; 0x6a80
 800cb42:	d104      	bne.n	800cb4e <mbedtls_strerror+0x796>
            mbedtls_snprintf( buf, buflen, "SSL - DTLS client must retry for hello verification" );
 800cb44:	4a3c      	ldr	r2, [pc, #240]	; (800cc38 <mbedtls_strerror+0x880>)
 800cb46:	6879      	ldr	r1, [r7, #4]
 800cb48:	68b8      	ldr	r0, [r7, #8]
 800cb4a:	f011 fcaf 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL) )
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f5b3 4fd4 	cmp.w	r3, #27136	; 0x6a00
 800cb54:	d104      	bne.n	800cb60 <mbedtls_strerror+0x7a8>
            mbedtls_snprintf( buf, buflen, "SSL - A buffer is too small to receive or write a message" );
 800cb56:	4a39      	ldr	r2, [pc, #228]	; (800cc3c <mbedtls_strerror+0x884>)
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	68b8      	ldr	r0, [r7, #8]
 800cb5c:	f011 fca6 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE) )
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	f5b3 4fd3 	cmp.w	r3, #27008	; 0x6980
 800cb66:	d104      	bne.n	800cb72 <mbedtls_strerror+0x7ba>
            mbedtls_snprintf( buf, buflen, "SSL - None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages)" );
 800cb68:	4a35      	ldr	r2, [pc, #212]	; (800cc40 <mbedtls_strerror+0x888>)
 800cb6a:	6879      	ldr	r1, [r7, #4]
 800cb6c:	68b8      	ldr	r0, [r7, #8]
 800cb6e:	f011 fc9d 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_READ) )
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f5b3 4fd2 	cmp.w	r3, #26880	; 0x6900
 800cb78:	d104      	bne.n	800cb84 <mbedtls_strerror+0x7cc>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a read call" );
 800cb7a:	4a32      	ldr	r2, [pc, #200]	; (800cc44 <mbedtls_strerror+0x88c>)
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	68b8      	ldr	r0, [r7, #8]
 800cb80:	f011 fc94 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_WRITE) )
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	f5b3 4fd1 	cmp.w	r3, #26752	; 0x6880
 800cb8a:	d104      	bne.n	800cb96 <mbedtls_strerror+0x7de>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a write call" );
 800cb8c:	4a2e      	ldr	r2, [pc, #184]	; (800cc48 <mbedtls_strerror+0x890>)
 800cb8e:	6879      	ldr	r1, [r7, #4]
 800cb90:	68b8      	ldr	r0, [r7, #8]
 800cb92:	f011 fc8b 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_TIMEOUT) )
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
 800cb9c:	d104      	bne.n	800cba8 <mbedtls_strerror+0x7f0>
            mbedtls_snprintf( buf, buflen, "SSL - The operation timed out" );
 800cb9e:	4a2b      	ldr	r2, [pc, #172]	; (800cc4c <mbedtls_strerror+0x894>)
 800cba0:	6879      	ldr	r1, [r7, #4]
 800cba2:	68b8      	ldr	r0, [r7, #8]
 800cba4:	f011 fc82 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CLIENT_RECONNECT) )
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	f5b3 4fcf 	cmp.w	r3, #26496	; 0x6780
 800cbae:	d104      	bne.n	800cbba <mbedtls_strerror+0x802>
            mbedtls_snprintf( buf, buflen, "SSL - The client initiated a reconnect from the same port" );
 800cbb0:	4a27      	ldr	r2, [pc, #156]	; (800cc50 <mbedtls_strerror+0x898>)
 800cbb2:	6879      	ldr	r1, [r7, #4]
 800cbb4:	68b8      	ldr	r0, [r7, #8]
 800cbb6:	f011 fc79 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_RECORD) )
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	f5b3 4fce 	cmp.w	r3, #26368	; 0x6700
 800cbc0:	d14a      	bne.n	800cc58 <mbedtls_strerror+0x8a0>
            mbedtls_snprintf( buf, buflen, "SSL - Record header looks valid but is not expected" );
 800cbc2:	4a24      	ldr	r2, [pc, #144]	; (800cc54 <mbedtls_strerror+0x89c>)
 800cbc4:	6879      	ldr	r1, [r7, #4]
 800cbc6:	68b8      	ldr	r0, [r7, #8]
 800cbc8:	f011 fc70 	bl	801e4ac <sniprintf>
 800cbcc:	e044      	b.n	800cc58 <mbedtls_strerror+0x8a0>
 800cbce:	bf00      	nop
 800cbd0:	080207a4 	.word	0x080207a4
 800cbd4:	080207cc 	.word	0x080207cc
 800cbd8:	08020814 	.word	0x08020814
 800cbdc:	08020854 	.word	0x08020854
 800cbe0:	08020894 	.word	0x08020894
 800cbe4:	080208d4 	.word	0x080208d4
 800cbe8:	08020918 	.word	0x08020918
 800cbec:	0802095c 	.word	0x0802095c
 800cbf0:	080209a0 	.word	0x080209a0
 800cbf4:	080209e4 	.word	0x080209e4
 800cbf8:	08020a44 	.word	0x08020a44
 800cbfc:	08020aa8 	.word	0x08020aa8
 800cc00:	08020aec 	.word	0x08020aec
 800cc04:	08020b30 	.word	0x08020b30
 800cc08:	08020b6c 	.word	0x08020b6c
 800cc0c:	08020b8c 	.word	0x08020b8c
 800cc10:	08020bc8 	.word	0x08020bc8
 800cc14:	08020c08 	.word	0x08020c08
 800cc18:	08020c44 	.word	0x08020c44
 800cc1c:	08020c7c 	.word	0x08020c7c
 800cc20:	08020cc0 	.word	0x08020cc0
 800cc24:	08020ce4 	.word	0x08020ce4
 800cc28:	08020d3c 	.word	0x08020d3c
 800cc2c:	08020d70 	.word	0x08020d70
 800cc30:	08020db4 	.word	0x08020db4
 800cc34:	08020df4 	.word	0x08020df4
 800cc38:	08020e30 	.word	0x08020e30
 800cc3c:	08020e64 	.word	0x08020e64
 800cc40:	08020ea0 	.word	0x08020ea0
 800cc44:	08020f04 	.word	0x08020f04
 800cc48:	08020f2c 	.word	0x08020f2c
 800cc4c:	08020f54 	.word	0x08020f54
 800cc50:	08020f74 	.word	0x08020f74
 800cc54:	08020fb0 	.word	0x08020fb0
        if( use_ret == -(MBEDTLS_ERR_SSL_NON_FATAL) )
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f5b3 4fcd 	cmp.w	r3, #26240	; 0x6680
 800cc5e:	d104      	bne.n	800cc6a <mbedtls_strerror+0x8b2>
            mbedtls_snprintf( buf, buflen, "SSL - The alert message received indicates a non-fatal error" );
 800cc60:	4a97      	ldr	r2, [pc, #604]	; (800cec0 <mbedtls_strerror+0xb08>)
 800cc62:	6879      	ldr	r1, [r7, #4]
 800cc64:	68b8      	ldr	r0, [r7, #8]
 800cc66:	f011 fc21 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH) )
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f5b3 4fcc 	cmp.w	r3, #26112	; 0x6600
 800cc70:	d104      	bne.n	800cc7c <mbedtls_strerror+0x8c4>
            mbedtls_snprintf( buf, buflen, "SSL - Couldn't set the hash for verifying CertificateVerify" );
 800cc72:	4a94      	ldr	r2, [pc, #592]	; (800cec4 <mbedtls_strerror+0xb0c>)
 800cc74:	6879      	ldr	r1, [r7, #4]
 800cc76:	68b8      	ldr	r0, [r7, #8]
 800cc78:	f011 fc18 	bl	801e4ac <sniprintf>
#endif /* MBEDTLS_SSL_TLS_C */

#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)
        if( use_ret == -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE) )
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	f5b3 5f02 	cmp.w	r3, #8320	; 0x2080
 800cc82:	d104      	bne.n	800cc8e <mbedtls_strerror+0x8d6>
            mbedtls_snprintf( buf, buflen, "X509 - Unavailable feature, e.g. RSA hashing/encryption combination" );
 800cc84:	4a90      	ldr	r2, [pc, #576]	; (800cec8 <mbedtls_strerror+0xb10>)
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	68b8      	ldr	r0, [r7, #8]
 800cc8a:	f011 fc0f 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_OID) )
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
 800cc94:	d104      	bne.n	800cca0 <mbedtls_strerror+0x8e8>
            mbedtls_snprintf( buf, buflen, "X509 - Requested OID is unknown" );
 800cc96:	4a8d      	ldr	r2, [pc, #564]	; (800cecc <mbedtls_strerror+0xb14>)
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	68b8      	ldr	r0, [r7, #8]
 800cc9c:	f011 fc06 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_FORMAT) )
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 800cca6:	d104      	bne.n	800ccb2 <mbedtls_strerror+0x8fa>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected" );
 800cca8:	4a89      	ldr	r2, [pc, #548]	; (800ced0 <mbedtls_strerror+0xb18>)
 800ccaa:	6879      	ldr	r1, [r7, #4]
 800ccac:	68b8      	ldr	r0, [r7, #8]
 800ccae:	f011 fbfd 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_VERSION) )
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 800ccb8:	d104      	bne.n	800ccc4 <mbedtls_strerror+0x90c>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR version element is invalid" );
 800ccba:	4a86      	ldr	r2, [pc, #536]	; (800ced4 <mbedtls_strerror+0xb1c>)
 800ccbc:	6879      	ldr	r1, [r7, #4]
 800ccbe:	68b8      	ldr	r0, [r7, #8]
 800ccc0:	f011 fbf4 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SERIAL) )
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
 800ccca:	d104      	bne.n	800ccd6 <mbedtls_strerror+0x91e>
            mbedtls_snprintf( buf, buflen, "X509 - The serial tag or value is invalid" );
 800cccc:	4a82      	ldr	r2, [pc, #520]	; (800ced8 <mbedtls_strerror+0xb20>)
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	68b8      	ldr	r0, [r7, #8]
 800ccd2:	f011 fbeb 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_ALG) )
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800ccdc:	d104      	bne.n	800cce8 <mbedtls_strerror+0x930>
            mbedtls_snprintf( buf, buflen, "X509 - The algorithm tag or value is invalid" );
 800ccde:	4a7f      	ldr	r2, [pc, #508]	; (800cedc <mbedtls_strerror+0xb24>)
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	68b8      	ldr	r0, [r7, #8]
 800cce4:	f011 fbe2 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_NAME) )
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 800ccee:	d104      	bne.n	800ccfa <mbedtls_strerror+0x942>
            mbedtls_snprintf( buf, buflen, "X509 - The name tag or value is invalid" );
 800ccf0:	4a7b      	ldr	r2, [pc, #492]	; (800cee0 <mbedtls_strerror+0xb28>)
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	68b8      	ldr	r0, [r7, #8]
 800ccf6:	f011 fbd9 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_DATE) )
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800cd00:	d104      	bne.n	800cd0c <mbedtls_strerror+0x954>
            mbedtls_snprintf( buf, buflen, "X509 - The date tag or value is invalid" );
 800cd02:	4a78      	ldr	r2, [pc, #480]	; (800cee4 <mbedtls_strerror+0xb2c>)
 800cd04:	6879      	ldr	r1, [r7, #4]
 800cd06:	68b8      	ldr	r0, [r7, #8]
 800cd08:	f011 fbd0 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SIGNATURE) )
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	f5b3 5f12 	cmp.w	r3, #9344	; 0x2480
 800cd12:	d104      	bne.n	800cd1e <mbedtls_strerror+0x966>
            mbedtls_snprintf( buf, buflen, "X509 - The signature tag or value invalid" );
 800cd14:	4a74      	ldr	r2, [pc, #464]	; (800cee8 <mbedtls_strerror+0xb30>)
 800cd16:	6879      	ldr	r1, [r7, #4]
 800cd18:	68b8      	ldr	r0, [r7, #8]
 800cd1a:	f011 fbc7 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS) )
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 800cd24:	d104      	bne.n	800cd30 <mbedtls_strerror+0x978>
            mbedtls_snprintf( buf, buflen, "X509 - The extension tag or value is invalid" );
 800cd26:	4a71      	ldr	r2, [pc, #452]	; (800ceec <mbedtls_strerror+0xb34>)
 800cd28:	6879      	ldr	r1, [r7, #4]
 800cd2a:	68b8      	ldr	r0, [r7, #8]
 800cd2c:	f011 fbbe 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_VERSION) )
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800cd36:	d104      	bne.n	800cd42 <mbedtls_strerror+0x98a>
            mbedtls_snprintf( buf, buflen, "X509 - CRT/CRL/CSR has an unsupported version number" );
 800cd38:	4a6d      	ldr	r2, [pc, #436]	; (800cef0 <mbedtls_strerror+0xb38>)
 800cd3a:	6879      	ldr	r1, [r7, #4]
 800cd3c:	68b8      	ldr	r0, [r7, #8]
 800cd3e:	f011 fbb5 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG) )
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 800cd48:	d104      	bne.n	800cd54 <mbedtls_strerror+0x99c>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithm (oid) is unsupported" );
 800cd4a:	4a6a      	ldr	r2, [pc, #424]	; (800cef4 <mbedtls_strerror+0xb3c>)
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	68b8      	ldr	r0, [r7, #8]
 800cd50:	f011 fbac 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_SIG_MISMATCH) )
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f5b3 5f1a 	cmp.w	r3, #9856	; 0x2680
 800cd5a:	d104      	bne.n	800cd66 <mbedtls_strerror+0x9ae>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithms do not match. (see \\c ::mbedtls_x509_crt sig_oid)" );
 800cd5c:	4a66      	ldr	r2, [pc, #408]	; (800cef8 <mbedtls_strerror+0xb40>)
 800cd5e:	6879      	ldr	r1, [r7, #4]
 800cd60:	68b8      	ldr	r0, [r7, #8]
 800cd62:	f011 fba3 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) )
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	f5b3 5f1c 	cmp.w	r3, #9984	; 0x2700
 800cd6c:	d104      	bne.n	800cd78 <mbedtls_strerror+0x9c0>
            mbedtls_snprintf( buf, buflen, "X509 - Certificate verification failed, e.g. CRL, CA or signature check failed" );
 800cd6e:	4a63      	ldr	r2, [pc, #396]	; (800cefc <mbedtls_strerror+0xb44>)
 800cd70:	6879      	ldr	r1, [r7, #4]
 800cd72:	68b8      	ldr	r0, [r7, #8]
 800cd74:	f011 fb9a 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT) )
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f5b3 5f1e 	cmp.w	r3, #10112	; 0x2780
 800cd7e:	d104      	bne.n	800cd8a <mbedtls_strerror+0x9d2>
            mbedtls_snprintf( buf, buflen, "X509 - Format not recognized as DER or PEM" );
 800cd80:	4a5f      	ldr	r2, [pc, #380]	; (800cf00 <mbedtls_strerror+0xb48>)
 800cd82:	6879      	ldr	r1, [r7, #4]
 800cd84:	68b8      	ldr	r0, [r7, #8]
 800cd86:	f011 fb91 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_BAD_INPUT_DATA) )
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd90:	d104      	bne.n	800cd9c <mbedtls_strerror+0x9e4>
            mbedtls_snprintf( buf, buflen, "X509 - Input invalid" );
 800cd92:	4a5c      	ldr	r2, [pc, #368]	; (800cf04 <mbedtls_strerror+0xb4c>)
 800cd94:	6879      	ldr	r1, [r7, #4]
 800cd96:	68b8      	ldr	r0, [r7, #8]
 800cd98:	f011 fb88 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_ALLOC_FAILED) )
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	f5b3 5f22 	cmp.w	r3, #10368	; 0x2880
 800cda2:	d104      	bne.n	800cdae <mbedtls_strerror+0x9f6>
            mbedtls_snprintf( buf, buflen, "X509 - Allocation of memory failed" );
 800cda4:	4a58      	ldr	r2, [pc, #352]	; (800cf08 <mbedtls_strerror+0xb50>)
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	68b8      	ldr	r0, [r7, #8]
 800cdaa:	f011 fb7f 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FILE_IO_ERROR) )
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
 800cdb4:	d104      	bne.n	800cdc0 <mbedtls_strerror+0xa08>
            mbedtls_snprintf( buf, buflen, "X509 - Read/write of file failed" );
 800cdb6:	4a55      	ldr	r2, [pc, #340]	; (800cf0c <mbedtls_strerror+0xb54>)
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	68b8      	ldr	r0, [r7, #8]
 800cdbc:	f011 fb76 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	f5b3 5f26 	cmp.w	r3, #10624	; 0x2980
 800cdc6:	d104      	bne.n	800cdd2 <mbedtls_strerror+0xa1a>
            mbedtls_snprintf( buf, buflen, "X509 - Destination buffer is too small" );
 800cdc8:	4a51      	ldr	r2, [pc, #324]	; (800cf10 <mbedtls_strerror+0xb58>)
 800cdca:	6879      	ldr	r1, [r7, #4]
 800cdcc:	68b8      	ldr	r0, [r7, #8]
 800cdce:	f011 fb6d 	bl	801e4ac <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdd8:	d104      	bne.n	800cde4 <mbedtls_strerror+0xa2c>
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
 800cdda:	4a4e      	ldr	r2, [pc, #312]	; (800cf14 <mbedtls_strerror+0xb5c>)
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	68b8      	ldr	r0, [r7, #8]
 800cde0:	f011 fb64 	bl	801e4ac <sniprintf>
#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */
        // END generated code

        if( strlen( buf ) == 0 )
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d105      	bne.n	800cdf8 <mbedtls_strerror+0xa40>
            mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	4a4a      	ldr	r2, [pc, #296]	; (800cf18 <mbedtls_strerror+0xb60>)
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	68b8      	ldr	r0, [r7, #8]
 800cdf4:	f011 fb5a 	bl	801e4ac <sniprintf>
    }

    use_ret = ret & ~0xFF80;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce02:	617b      	str	r3, [r7, #20]

    if( use_ret == 0 )
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f000 8165 	beq.w	800d0d6 <mbedtls_strerror+0xd1e>
        return;

    // If high level code is present, make a concatenation between both
    // error strings.
    //
    len = strlen( buf );
 800ce0c:	68b8      	ldr	r0, [r7, #8]
 800ce0e:	f7f3 f9df 	bl	80001d0 <strlen>
 800ce12:	6138      	str	r0, [r7, #16]

    if( len > 0 )
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d019      	beq.n	800ce4e <mbedtls_strerror+0xa96>
    {
        if( buflen - len < 5 )
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	2b04      	cmp	r3, #4
 800ce22:	f240 815a 	bls.w	800d0da <mbedtls_strerror+0xd22>
            return;

        mbedtls_snprintf( buf + len, buflen - len, " : " );
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	18d0      	adds	r0, r2, r3
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	4a3a      	ldr	r2, [pc, #232]	; (800cf1c <mbedtls_strerror+0xb64>)
 800ce34:	4619      	mov	r1, r3
 800ce36:	f011 fb39 	bl	801e4ac <sniprintf>

        buf += len + 3;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	3303      	adds	r3, #3
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	4413      	add	r3, r2
 800ce42:	60bb      	str	r3, [r7, #8]
        buflen -= len + 3;
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	3b03      	subs	r3, #3
 800ce4c:	607b      	str	r3, [r7, #4]

    // Low level error codes
    //
    // BEGIN generated code
#if defined(MBEDTLS_AES_C)
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH) )
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	2b20      	cmp	r3, #32
 800ce52:	d104      	bne.n	800ce5e <mbedtls_strerror+0xaa6>
        mbedtls_snprintf( buf, buflen, "AES - Invalid key length" );
 800ce54:	4a32      	ldr	r2, [pc, #200]	; (800cf20 <mbedtls_strerror+0xb68>)
 800ce56:	6879      	ldr	r1, [r7, #4]
 800ce58:	68b8      	ldr	r0, [r7, #8]
 800ce5a:	f011 fb27 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH) )
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	2b22      	cmp	r3, #34	; 0x22
 800ce62:	d104      	bne.n	800ce6e <mbedtls_strerror+0xab6>
        mbedtls_snprintf( buf, buflen, "AES - Invalid data input length" );
 800ce64:	4a2f      	ldr	r2, [pc, #188]	; (800cf24 <mbedtls_strerror+0xb6c>)
 800ce66:	6879      	ldr	r1, [r7, #4]
 800ce68:	68b8      	ldr	r0, [r7, #8]
 800ce6a:	f011 fb1f 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE) )
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	2b23      	cmp	r3, #35	; 0x23
 800ce72:	d104      	bne.n	800ce7e <mbedtls_strerror+0xac6>
        mbedtls_snprintf( buf, buflen, "AES - Feature not available. For example, an unsupported AES key size" );
 800ce74:	4a2c      	ldr	r2, [pc, #176]	; (800cf28 <mbedtls_strerror+0xb70>)
 800ce76:	6879      	ldr	r1, [r7, #4]
 800ce78:	68b8      	ldr	r0, [r7, #8]
 800ce7a:	f011 fb17 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_HW_ACCEL_FAILED) )
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2b25      	cmp	r3, #37	; 0x25
 800ce82:	d104      	bne.n	800ce8e <mbedtls_strerror+0xad6>
        mbedtls_snprintf( buf, buflen, "AES - AES hardware accelerator failed" );
 800ce84:	4a29      	ldr	r2, [pc, #164]	; (800cf2c <mbedtls_strerror+0xb74>)
 800ce86:	6879      	ldr	r1, [r7, #4]
 800ce88:	68b8      	ldr	r0, [r7, #8]
 800ce8a:	f011 fb0f 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ARC4_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "ARC4 - ARC4 hardware accelerator failed" );
#endif /* MBEDTLS_ARC4_C */

#if defined(MBEDTLS_ASN1_PARSE_C)
    if( use_ret == -(MBEDTLS_ERR_ASN1_OUT_OF_DATA) )
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	2b60      	cmp	r3, #96	; 0x60
 800ce92:	d104      	bne.n	800ce9e <mbedtls_strerror+0xae6>
        mbedtls_snprintf( buf, buflen, "ASN1 - Out of data when parsing an ASN1 data structure" );
 800ce94:	4a26      	ldr	r2, [pc, #152]	; (800cf30 <mbedtls_strerror+0xb78>)
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	68b8      	ldr	r0, [r7, #8]
 800ce9a:	f011 fb07 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) )
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	2b62      	cmp	r3, #98	; 0x62
 800cea2:	d104      	bne.n	800ceae <mbedtls_strerror+0xaf6>
        mbedtls_snprintf( buf, buflen, "ASN1 - ASN1 tag was of an unexpected value" );
 800cea4:	4a23      	ldr	r2, [pc, #140]	; (800cf34 <mbedtls_strerror+0xb7c>)
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	68b8      	ldr	r0, [r7, #8]
 800ceaa:	f011 faff 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_LENGTH) )
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b64      	cmp	r3, #100	; 0x64
 800ceb2:	d143      	bne.n	800cf3c <mbedtls_strerror+0xb84>
        mbedtls_snprintf( buf, buflen, "ASN1 - Error when trying to determine the length or invalid length" );
 800ceb4:	4a20      	ldr	r2, [pc, #128]	; (800cf38 <mbedtls_strerror+0xb80>)
 800ceb6:	6879      	ldr	r1, [r7, #4]
 800ceb8:	68b8      	ldr	r0, [r7, #8]
 800ceba:	f011 faf7 	bl	801e4ac <sniprintf>
 800cebe:	e03d      	b.n	800cf3c <mbedtls_strerror+0xb84>
 800cec0:	08020fe4 	.word	0x08020fe4
 800cec4:	08021024 	.word	0x08021024
 800cec8:	08021060 	.word	0x08021060
 800cecc:	080210a4 	.word	0x080210a4
 800ced0:	080210c4 	.word	0x080210c4
 800ced4:	0802110c 	.word	0x0802110c
 800ced8:	08021140 	.word	0x08021140
 800cedc:	0802116c 	.word	0x0802116c
 800cee0:	0802119c 	.word	0x0802119c
 800cee4:	080211c4 	.word	0x080211c4
 800cee8:	080211ec 	.word	0x080211ec
 800ceec:	08021218 	.word	0x08021218
 800cef0:	08021248 	.word	0x08021248
 800cef4:	08021280 	.word	0x08021280
 800cef8:	080212b0 	.word	0x080212b0
 800cefc:	08021300 	.word	0x08021300
 800cf00:	08021350 	.word	0x08021350
 800cf04:	0802137c 	.word	0x0802137c
 800cf08:	08021394 	.word	0x08021394
 800cf0c:	080213b8 	.word	0x080213b8
 800cf10:	080213dc 	.word	0x080213dc
 800cf14:	08021404 	.word	0x08021404
 800cf18:	08021458 	.word	0x08021458
 800cf1c:	08021474 	.word	0x08021474
 800cf20:	08021478 	.word	0x08021478
 800cf24:	08021494 	.word	0x08021494
 800cf28:	080214b4 	.word	0x080214b4
 800cf2c:	080214fc 	.word	0x080214fc
 800cf30:	08021524 	.word	0x08021524
 800cf34:	0802155c 	.word	0x0802155c
 800cf38:	08021588 	.word	0x08021588
    if( use_ret == -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH) )
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b66      	cmp	r3, #102	; 0x66
 800cf40:	d104      	bne.n	800cf4c <mbedtls_strerror+0xb94>
        mbedtls_snprintf( buf, buflen, "ASN1 - Actual length differs from expected length" );
 800cf42:	4a69      	ldr	r2, [pc, #420]	; (800d0e8 <mbedtls_strerror+0xd30>)
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	68b8      	ldr	r0, [r7, #8]
 800cf48:	f011 fab0 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_DATA) )
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	2b68      	cmp	r3, #104	; 0x68
 800cf50:	d104      	bne.n	800cf5c <mbedtls_strerror+0xba4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Data is invalid. (not used)" );
 800cf52:	4a66      	ldr	r2, [pc, #408]	; (800d0ec <mbedtls_strerror+0xd34>)
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	68b8      	ldr	r0, [r7, #8]
 800cf58:	f011 faa8 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_ALLOC_FAILED) )
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	2b6a      	cmp	r3, #106	; 0x6a
 800cf60:	d104      	bne.n	800cf6c <mbedtls_strerror+0xbb4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Memory allocation failed" );
 800cf62:	4a63      	ldr	r2, [pc, #396]	; (800d0f0 <mbedtls_strerror+0xd38>)
 800cf64:	6879      	ldr	r1, [r7, #4]
 800cf66:	68b8      	ldr	r0, [r7, #8]
 800cf68:	f011 faa0 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL) )
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	2b6c      	cmp	r3, #108	; 0x6c
 800cf70:	d104      	bne.n	800cf7c <mbedtls_strerror+0xbc4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Buffer too small when writing ASN.1 data structure" );
 800cf72:	4a60      	ldr	r2, [pc, #384]	; (800d0f4 <mbedtls_strerror+0xd3c>)
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	68b8      	ldr	r0, [r7, #8]
 800cf78:	f011 fa98 	bl	801e4ac <sniprintf>
#endif /* MBEDTLS_ASN1_PARSE_C */

#if defined(MBEDTLS_BASE64_C)
    if( use_ret == -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL) )
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf80:	d104      	bne.n	800cf8c <mbedtls_strerror+0xbd4>
        mbedtls_snprintf( buf, buflen, "BASE64 - Output buffer too small" );
 800cf82:	4a5d      	ldr	r2, [pc, #372]	; (800d0f8 <mbedtls_strerror+0xd40>)
 800cf84:	6879      	ldr	r1, [r7, #4]
 800cf86:	68b8      	ldr	r0, [r7, #8]
 800cf88:	f011 fa90 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER) )
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	2b2c      	cmp	r3, #44	; 0x2c
 800cf90:	d104      	bne.n	800cf9c <mbedtls_strerror+0xbe4>
        mbedtls_snprintf( buf, buflen, "BASE64 - Invalid character in input" );
 800cf92:	4a5a      	ldr	r2, [pc, #360]	; (800d0fc <mbedtls_strerror+0xd44>)
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	68b8      	ldr	r0, [r7, #8]
 800cf98:	f011 fa88 	bl	801e4ac <sniprintf>
#endif /* MBEDTLS_BASE64_C */

#if defined(MBEDTLS_BIGNUM_C)
    if( use_ret == -(MBEDTLS_ERR_MPI_FILE_IO_ERROR) )
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	d104      	bne.n	800cfac <mbedtls_strerror+0xbf4>
        mbedtls_snprintf( buf, buflen, "BIGNUM - An error occurred while reading from or writing to a file" );
 800cfa2:	4a57      	ldr	r2, [pc, #348]	; (800d100 <mbedtls_strerror+0xd48>)
 800cfa4:	6879      	ldr	r1, [r7, #4]
 800cfa6:	68b8      	ldr	r0, [r7, #8]
 800cfa8:	f011 fa80 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA) )
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	2b04      	cmp	r3, #4
 800cfb0:	d104      	bne.n	800cfbc <mbedtls_strerror+0xc04>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Bad input parameters to function" );
 800cfb2:	4a54      	ldr	r2, [pc, #336]	; (800d104 <mbedtls_strerror+0xd4c>)
 800cfb4:	6879      	ldr	r1, [r7, #4]
 800cfb6:	68b8      	ldr	r0, [r7, #8]
 800cfb8:	f011 fa78 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_INVALID_CHARACTER) )
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	2b06      	cmp	r3, #6
 800cfc0:	d104      	bne.n	800cfcc <mbedtls_strerror+0xc14>
        mbedtls_snprintf( buf, buflen, "BIGNUM - There is an invalid character in the digit string" );
 800cfc2:	4a51      	ldr	r2, [pc, #324]	; (800d108 <mbedtls_strerror+0xd50>)
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	68b8      	ldr	r0, [r7, #8]
 800cfc8:	f011 fa70 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL) )
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	2b08      	cmp	r3, #8
 800cfd0:	d104      	bne.n	800cfdc <mbedtls_strerror+0xc24>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The buffer is too small to write to" );
 800cfd2:	4a4e      	ldr	r2, [pc, #312]	; (800d10c <mbedtls_strerror+0xd54>)
 800cfd4:	6879      	ldr	r1, [r7, #4]
 800cfd6:	68b8      	ldr	r0, [r7, #8]
 800cfd8:	f011 fa68 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE) )
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2b0a      	cmp	r3, #10
 800cfe0:	d104      	bne.n	800cfec <mbedtls_strerror+0xc34>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are negative or result in illegal output" );
 800cfe2:	4a4b      	ldr	r2, [pc, #300]	; (800d110 <mbedtls_strerror+0xd58>)
 800cfe4:	6879      	ldr	r1, [r7, #4]
 800cfe6:	68b8      	ldr	r0, [r7, #8]
 800cfe8:	f011 fa60 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO) )
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	2b0c      	cmp	r3, #12
 800cff0:	d104      	bne.n	800cffc <mbedtls_strerror+0xc44>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input argument for division is zero, which is not allowed" );
 800cff2:	4a48      	ldr	r2, [pc, #288]	; (800d114 <mbedtls_strerror+0xd5c>)
 800cff4:	6879      	ldr	r1, [r7, #4]
 800cff6:	68b8      	ldr	r0, [r7, #8]
 800cff8:	f011 fa58 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE) )
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	2b0e      	cmp	r3, #14
 800d000:	d104      	bne.n	800d00c <mbedtls_strerror+0xc54>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are not acceptable" );
 800d002:	4a45      	ldr	r2, [pc, #276]	; (800d118 <mbedtls_strerror+0xd60>)
 800d004:	6879      	ldr	r1, [r7, #4]
 800d006:	68b8      	ldr	r0, [r7, #8]
 800d008:	f011 fa50 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_ALLOC_FAILED) )
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	2b10      	cmp	r3, #16
 800d010:	d104      	bne.n	800d01c <mbedtls_strerror+0xc64>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Memory allocation failed" );
 800d012:	4a42      	ldr	r2, [pc, #264]	; (800d11c <mbedtls_strerror+0xd64>)
 800d014:	6879      	ldr	r1, [r7, #4]
 800d016:	68b8      	ldr	r0, [r7, #8]
 800d018:	f011 fa48 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CMAC_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "CMAC - CMAC hardware accelerator failed" );
#endif /* MBEDTLS_CMAC_C */

#if defined(MBEDTLS_CTR_DRBG_C)
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED) )
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	2b34      	cmp	r3, #52	; 0x34
 800d020:	d104      	bne.n	800d02c <mbedtls_strerror+0xc74>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The entropy source failed" );
 800d022:	4a3f      	ldr	r2, [pc, #252]	; (800d120 <mbedtls_strerror+0xd68>)
 800d024:	6879      	ldr	r1, [r7, #4]
 800d026:	68b8      	ldr	r0, [r7, #8]
 800d028:	f011 fa40 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG) )
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	2b36      	cmp	r3, #54	; 0x36
 800d030:	d104      	bne.n	800d03c <mbedtls_strerror+0xc84>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The requested random buffer length is too big" );
 800d032:	4a3c      	ldr	r2, [pc, #240]	; (800d124 <mbedtls_strerror+0xd6c>)
 800d034:	6879      	ldr	r1, [r7, #4]
 800d036:	68b8      	ldr	r0, [r7, #8]
 800d038:	f011 fa38 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG) )
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	2b38      	cmp	r3, #56	; 0x38
 800d040:	d104      	bne.n	800d04c <mbedtls_strerror+0xc94>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The input (entropy + additional data) is too large" );
 800d042:	4a39      	ldr	r2, [pc, #228]	; (800d128 <mbedtls_strerror+0xd70>)
 800d044:	6879      	ldr	r1, [r7, #4]
 800d046:	68b8      	ldr	r0, [r7, #8]
 800d048:	f011 fa30 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR) )
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	2b3a      	cmp	r3, #58	; 0x3a
 800d050:	d104      	bne.n	800d05c <mbedtls_strerror+0xca4>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - Read or write error in file" );
 800d052:	4a36      	ldr	r2, [pc, #216]	; (800d12c <mbedtls_strerror+0xd74>)
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	68b8      	ldr	r0, [r7, #8]
 800d058:	f011 fa28 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR) )
        mbedtls_snprintf( buf, buflen, "ENTROPY - Read/write error in file" );
#endif /* MBEDTLS_ENTROPY_C */

#if defined(MBEDTLS_GCM_C)
    if( use_ret == -(MBEDTLS_ERR_GCM_AUTH_FAILED) )
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b12      	cmp	r3, #18
 800d060:	d104      	bne.n	800d06c <mbedtls_strerror+0xcb4>
        mbedtls_snprintf( buf, buflen, "GCM - Authenticated decryption failed" );
 800d062:	4a33      	ldr	r2, [pc, #204]	; (800d130 <mbedtls_strerror+0xd78>)
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	68b8      	ldr	r0, [r7, #8]
 800d068:	f011 fa20 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_GCM_HW_ACCEL_FAILED) )
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	2b13      	cmp	r3, #19
 800d070:	d104      	bne.n	800d07c <mbedtls_strerror+0xcc4>
        mbedtls_snprintf( buf, buflen, "GCM - GCM hardware accelerator failed" );
 800d072:	4a30      	ldr	r2, [pc, #192]	; (800d134 <mbedtls_strerror+0xd7c>)
 800d074:	6879      	ldr	r1, [r7, #4]
 800d076:	68b8      	ldr	r0, [r7, #8]
 800d078:	f011 fa18 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_GCM_BAD_INPUT) )
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	2b14      	cmp	r3, #20
 800d080:	d104      	bne.n	800d08c <mbedtls_strerror+0xcd4>
        mbedtls_snprintf( buf, buflen, "GCM - Bad input parameters to function" );
 800d082:	4a2d      	ldr	r2, [pc, #180]	; (800d138 <mbedtls_strerror+0xd80>)
 800d084:	6879      	ldr	r1, [r7, #4]
 800d086:	68b8      	ldr	r0, [r7, #8]
 800d088:	f011 fa10 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_NET_INVALID_CONTEXT) )
        mbedtls_snprintf( buf, buflen, "NET - The context is invalid, eg because it was free()ed" );
#endif /* MBEDTLS_NET_C */

#if defined(MBEDTLS_OID_C)
    if( use_ret == -(MBEDTLS_ERR_OID_NOT_FOUND) )
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	2b2e      	cmp	r3, #46	; 0x2e
 800d090:	d104      	bne.n	800d09c <mbedtls_strerror+0xce4>
        mbedtls_snprintf( buf, buflen, "OID - OID is not found" );
 800d092:	4a2a      	ldr	r2, [pc, #168]	; (800d13c <mbedtls_strerror+0xd84>)
 800d094:	6879      	ldr	r1, [r7, #4]
 800d096:	68b8      	ldr	r0, [r7, #8]
 800d098:	f011 fa08 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_OID_BUF_TOO_SMALL) )
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	2b0b      	cmp	r3, #11
 800d0a0:	d104      	bne.n	800d0ac <mbedtls_strerror+0xcf4>
        mbedtls_snprintf( buf, buflen, "OID - output buffer is too small" );
 800d0a2:	4a27      	ldr	r2, [pc, #156]	; (800d140 <mbedtls_strerror+0xd88>)
 800d0a4:	6879      	ldr	r1, [r7, #4]
 800d0a6:	68b8      	ldr	r0, [r7, #8]
 800d0a8:	f011 fa00 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_SHA1_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "SHA1 - SHA-1 hardware accelerator failed" );
#endif /* MBEDTLS_SHA1_C */

#if defined(MBEDTLS_SHA256_C)
    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2b37      	cmp	r3, #55	; 0x37
 800d0b0:	d104      	bne.n	800d0bc <mbedtls_strerror+0xd04>
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 hardware accelerator failed" );
 800d0b2:	4a24      	ldr	r2, [pc, #144]	; (800d144 <mbedtls_strerror+0xd8c>)
 800d0b4:	6879      	ldr	r1, [r7, #4]
 800d0b6:	68b8      	ldr	r0, [r7, #8]
 800d0b8:	f011 f9f8 	bl	801e4ac <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "XTEA - XTEA hardware accelerator failed" );
#endif /* MBEDTLS_XTEA_C */
    // END generated code

    if( strlen( buf ) != 0 )
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10c      	bne.n	800d0de <mbedtls_strerror+0xd26>
        return;

    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	4a20      	ldr	r2, [pc, #128]	; (800d148 <mbedtls_strerror+0xd90>)
 800d0c8:	6879      	ldr	r1, [r7, #4]
 800d0ca:	68b8      	ldr	r0, [r7, #8]
 800d0cc:	f011 f9ee 	bl	801e4ac <sniprintf>
 800d0d0:	e006      	b.n	800d0e0 <mbedtls_strerror+0xd28>
        return;
 800d0d2:	bf00      	nop
 800d0d4:	e004      	b.n	800d0e0 <mbedtls_strerror+0xd28>
        return;
 800d0d6:	bf00      	nop
 800d0d8:	e002      	b.n	800d0e0 <mbedtls_strerror+0xd28>
            return;
 800d0da:	bf00      	nop
 800d0dc:	e000      	b.n	800d0e0 <mbedtls_strerror+0xd28>
        return;
 800d0de:	bf00      	nop
}
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	080215cc 	.word	0x080215cc
 800d0ec:	08021600 	.word	0x08021600
 800d0f0:	08021624 	.word	0x08021624
 800d0f4:	08021644 	.word	0x08021644
 800d0f8:	08021680 	.word	0x08021680
 800d0fc:	080216a4 	.word	0x080216a4
 800d100:	080216c8 	.word	0x080216c8
 800d104:	0802170c 	.word	0x0802170c
 800d108:	08021738 	.word	0x08021738
 800d10c:	08021774 	.word	0x08021774
 800d110:	080217a4 	.word	0x080217a4
 800d114:	080217ec 	.word	0x080217ec
 800d118:	08021834 	.word	0x08021834
 800d11c:	08021864 	.word	0x08021864
 800d120:	08021888 	.word	0x08021888
 800d124:	080218b0 	.word	0x080218b0
 800d128:	080218ec 	.word	0x080218ec
 800d12c:	0802192c 	.word	0x0802192c
 800d130:	08021954 	.word	0x08021954
 800d134:	0802197c 	.word	0x0802197c
 800d138:	080219a4 	.word	0x080219a4
 800d13c:	080219cc 	.word	0x080219cc
 800d140:	080219e4 	.word	0x080219e4
 800d144:	08021a08 	.word	0x08021a08
 800d148:	08021458 	.word	0x08021458

0800d14c <mbedtls_zeroize>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	60fb      	str	r3, [r7, #12]
 800d15a:	e004      	b.n	800d166 <mbedtls_zeroize+0x1a>
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	1c5a      	adds	r2, r3, #1
 800d160:	60fa      	str	r2, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	701a      	strb	r2, [r3, #0]
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	1e5a      	subs	r2, r3, #1
 800d16a:	603a      	str	r2, [r7, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d1f5      	bne.n	800d15c <mbedtls_zeroize+0x10>
}
 800d170:	bf00      	nop
 800d172:	bf00      	nop
 800d174:	3714      	adds	r7, #20
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b082      	sub	sp, #8
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 800d186:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800d18a:	2100      	movs	r1, #0
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f010 ff85 	bl	801e09c <memset>
}
 800d192:	bf00      	nop
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table( mbedtls_gcm_context *ctx )
{
 800d19a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d19e:	b0a8      	sub	sp, #160	; 0xa0
 800d1a0:	af02      	add	r7, sp, #8
 800d1a2:	6478      	str	r0, [r7, #68]	; 0x44
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	64bb      	str	r3, [r7, #72]	; 0x48

    memset( h, 0, 16 );
 800d1a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d1ac:	2210      	movs	r2, #16
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f010 ff73 	bl	801e09c <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 800d1b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d1b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d1bc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800d1c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	2210      	movs	r2, #16
 800d1ca:	f7fd ff51 	bl	800b070 <mbedtls_cipher_update>
 800d1ce:	67f8      	str	r0, [r7, #124]	; 0x7c
 800d1d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d001      	beq.n	800d1da <gcm_gen_table+0x40>
        return( ret );
 800d1d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1d8:	e154      	b.n	800d484 <gcm_gen_table+0x2ea>

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
 800d1da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d1de:	061a      	lsls	r2, r3, #24
 800d1e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d1e4:	041b      	lsls	r3, r3, #16
 800d1e6:	431a      	orrs	r2, r3
 800d1e8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d1ec:	021b      	lsls	r3, r3, #8
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	4698      	mov	r8, r3
 800d1fa:	4691      	mov	r9, r2
 800d1fc:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
    GET_UINT32_BE( lo, h,  4  );
 800d200:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d204:	061a      	lsls	r2, r3, #24
 800d206:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800d20a:	041b      	lsls	r3, r3, #16
 800d20c:	431a      	orrs	r2, r3
 800d20e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800d212:	021b      	lsls	r3, r3, #8
 800d214:	431a      	orrs	r2, r3
 800d216:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d21a:	4313      	orrs	r3, r2
 800d21c:	2200      	movs	r2, #0
 800d21e:	623b      	str	r3, [r7, #32]
 800d220:	627a      	str	r2, [r7, #36]	; 0x24
 800d222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d226:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    vh = (uint64_t) hi << 32 | lo;
 800d22a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d22e:	f04f 0000 	mov.w	r0, #0
 800d232:	f04f 0100 	mov.w	r1, #0
 800d236:	0011      	movs	r1, r2
 800d238:	2000      	movs	r0, #0
 800d23a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d23e:	ea42 0400 	orr.w	r4, r2, r0
 800d242:	ea43 0501 	orr.w	r5, r3, r1
 800d246:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80

    GET_UINT32_BE( hi, h,  8  );
 800d24a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d24e:	061a      	lsls	r2, r3, #24
 800d250:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800d254:	041b      	lsls	r3, r3, #16
 800d256:	431a      	orrs	r2, r3
 800d258:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800d25c:	021b      	lsls	r3, r3, #8
 800d25e:	431a      	orrs	r2, r3
 800d260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d264:	4313      	orrs	r3, r2
 800d266:	2200      	movs	r2, #0
 800d268:	61bb      	str	r3, [r7, #24]
 800d26a:	61fa      	str	r2, [r7, #28]
 800d26c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d270:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    GET_UINT32_BE( lo, h,  12 );
 800d274:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800d278:	061a      	lsls	r2, r3, #24
 800d27a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800d27e:	041b      	lsls	r3, r3, #16
 800d280:	431a      	orrs	r2, r3
 800d282:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800d286:	021b      	lsls	r3, r3, #8
 800d288:	431a      	orrs	r2, r3
 800d28a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d28e:	4313      	orrs	r3, r2
 800d290:	2200      	movs	r2, #0
 800d292:	613b      	str	r3, [r7, #16]
 800d294:	617a      	str	r2, [r7, #20]
 800d296:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d29a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    vl = (uint64_t) hi << 32 | lo;
 800d29e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d2a2:	f04f 0000 	mov.w	r0, #0
 800d2a6:	f04f 0100 	mov.w	r1, #0
 800d2aa:	0011      	movs	r1, r2
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d2b2:	ea42 0a00 	orr.w	sl, r2, r0
 800d2b6:	ea43 0b01 	orr.w	fp, r3, r1
 800d2ba:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 800d2be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d2c4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    ctx->HH[8] = vh;
 800d2c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2ca:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d2ce:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 800d2d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2d4:	f04f 0200 	mov.w	r2, #0
 800d2d8:	f04f 0300 	mov.w	r3, #0
 800d2dc:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    ctx->HL[0] = 0;
 800d2e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2e2:	f04f 0200 	mov.w	r2, #0
 800d2e6:	f04f 0300 	mov.w	r3, #0
 800d2ea:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    for( i = 4; i > 0; i >>= 1 )
 800d2ee:	2304      	movs	r3, #4
 800d2f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2f4:	e05b      	b.n	800d3ae <gcm_gen_table+0x214>
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 800d2f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d2fa:	f003 0201 	and.w	r2, r3, #1
 800d2fe:	4613      	mov	r3, r2
 800d300:	0152      	lsls	r2, r2, #5
 800d302:	1a9b      	subs	r3, r3, r2
 800d304:	061b      	lsls	r3, r3, #24
 800d306:	65fb      	str	r3, [r7, #92]	; 0x5c
        vl  = ( vh << 63 ) | ( vl >> 1 );
 800d308:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d30c:	f04f 0400 	mov.w	r4, #0
 800d310:	f04f 0500 	mov.w	r5, #0
 800d314:	07d5      	lsls	r5, r2, #31
 800d316:	2400      	movs	r4, #0
 800d318:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d31c:	f04f 0000 	mov.w	r0, #0
 800d320:	f04f 0100 	mov.w	r1, #0
 800d324:	0850      	lsrs	r0, r2, #1
 800d326:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d32a:	0859      	lsrs	r1, r3, #1
 800d32c:	ea44 0300 	orr.w	r3, r4, r0
 800d330:	60bb      	str	r3, [r7, #8]
 800d332:	ea45 0301 	orr.w	r3, r5, r1
 800d336:	60fb      	str	r3, [r7, #12]
 800d338:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d33c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 800d340:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d344:	f04f 0000 	mov.w	r0, #0
 800d348:	f04f 0100 	mov.w	r1, #0
 800d34c:	0850      	lsrs	r0, r2, #1
 800d34e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d352:	0859      	lsrs	r1, r3, #1
 800d354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d356:	2200      	movs	r2, #0
 800d358:	63bb      	str	r3, [r7, #56]	; 0x38
 800d35a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d35c:	f04f 0200 	mov.w	r2, #0
 800d360:	f04f 0300 	mov.w	r3, #0
 800d364:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d366:	0023      	movs	r3, r4
 800d368:	2200      	movs	r2, #0
 800d36a:	ea80 0402 	eor.w	r4, r0, r2
 800d36e:	603c      	str	r4, [r7, #0]
 800d370:	404b      	eors	r3, r1
 800d372:	607b      	str	r3, [r7, #4]
 800d374:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d378:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

        ctx->HL[i] = vl;
 800d37c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d37e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d382:	3308      	adds	r3, #8
 800d384:	00db      	lsls	r3, r3, #3
 800d386:	18d1      	adds	r1, r2, r3
 800d388:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d38c:	e9c1 2300 	strd	r2, r3, [r1]
        ctx->HH[i] = vh;
 800d390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d396:	3318      	adds	r3, #24
 800d398:	00db      	lsls	r3, r3, #3
 800d39a:	18d1      	adds	r1, r2, r3
 800d39c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d3a0:	e9c1 2300 	strd	r2, r3, [r1]
    for( i = 4; i > 0; i >>= 1 )
 800d3a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3a8:	105b      	asrs	r3, r3, #1
 800d3aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d3ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	dc9f      	bgt.n	800d2f6 <gcm_gen_table+0x15c>
    }

    for( i = 2; i <= 8; i *= 2 )
 800d3b6:	2302      	movs	r3, #2
 800d3b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d3bc:	e05d      	b.n	800d47a <gcm_gen_table+0x2e0>
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 800d3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800d3c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3c8:	00db      	lsls	r3, r3, #3
 800d3ca:	4413      	add	r3, r2
 800d3cc:	667b      	str	r3, [r7, #100]	; 0x64
 800d3ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3d0:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800d3d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3d8:	00db      	lsls	r3, r3, #3
 800d3da:	4413      	add	r3, r2
 800d3dc:	663b      	str	r3, [r7, #96]	; 0x60
        vh = *HiH;
 800d3de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
        vl = *HiL;
 800d3e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        for( j = 1; j < i; j++ )
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d3f8:	e034      	b.n	800d464 <gcm_gen_table+0x2ca>
        {
            HiH[j] = vh ^ ctx->HH[j];
 800d3fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d400:	3318      	adds	r3, #24
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	4413      	add	r3, r2
 800d406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d40a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d40e:	00db      	lsls	r3, r3, #3
 800d410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d412:	18d4      	adds	r4, r2, r3
 800d414:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d418:	ea80 0502 	eor.w	r5, r0, r2
 800d41c:	633d      	str	r5, [r7, #48]	; 0x30
 800d41e:	404b      	eors	r3, r1
 800d420:	637b      	str	r3, [r7, #52]	; 0x34
 800d422:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d426:	e9c4 2300 	strd	r2, r3, [r4]
            HiL[j] = vl ^ ctx->HL[j];
 800d42a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d42c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d430:	3308      	adds	r3, #8
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	4413      	add	r3, r2
 800d436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d43a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d442:	18d4      	adds	r4, r2, r3
 800d444:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d448:	ea80 0502 	eor.w	r5, r0, r2
 800d44c:	62bd      	str	r5, [r7, #40]	; 0x28
 800d44e:	404b      	eors	r3, r1
 800d450:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d456:	e9c4 2300 	strd	r2, r3, [r4]
        for( j = 1; j < i; j++ )
 800d45a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d45e:	3301      	adds	r3, #1
 800d460:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d464:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d468:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d46c:	429a      	cmp	r2, r3
 800d46e:	dbc4      	blt.n	800d3fa <gcm_gen_table+0x260>
    for( i = 2; i <= 8; i *= 2 )
 800d470:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d474:	005b      	lsls	r3, r3, #1
 800d476:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d47a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d47e:	2b08      	cmp	r3, #8
 800d480:	dd9d      	ble.n	800d3be <gcm_gen_table+0x224>
        }
    }

    return( 0 );
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3798      	adds	r7, #152	; 0x98
 800d488:	46bd      	mov	sp, r7
 800d48a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d48e <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b086      	sub	sp, #24
 800d492:	af00      	add	r7, sp, #0
 800d494:	60f8      	str	r0, [r7, #12]
 800d496:	607a      	str	r2, [r7, #4]
 800d498:	603b      	str	r3, [r7, #0]
 800d49a:	460b      	mov	r3, r1
 800d49c:	72fb      	strb	r3, [r7, #11]
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 800d49e:	6839      	ldr	r1, [r7, #0]
 800d4a0:	7afb      	ldrb	r3, [r7, #11]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fd fca7 	bl	800adf8 <mbedtls_cipher_info_from_values>
 800d4aa:	6178      	str	r0, [r7, #20]
    if( cipher_info == NULL )
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d102      	bne.n	800d4b8 <mbedtls_gcm_setkey+0x2a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d4b2:	f06f 0313 	mvn.w	r3, #19
 800d4b6:	e02b      	b.n	800d510 <mbedtls_gcm_setkey+0x82>

    if( cipher_info->block_size != 16 )
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	695b      	ldr	r3, [r3, #20]
 800d4bc:	2b10      	cmp	r3, #16
 800d4be:	d002      	beq.n	800d4c6 <mbedtls_gcm_setkey+0x38>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d4c0:	f06f 0313 	mvn.w	r3, #19
 800d4c4:	e024      	b.n	800d510 <mbedtls_gcm_setkey+0x82>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fd fcd4 	bl	800ae76 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6979      	ldr	r1, [r7, #20]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fd fcec 	bl	800aeb0 <mbedtls_cipher_setup>
 800d4d8:	6138      	str	r0, [r7, #16]
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <mbedtls_gcm_setkey+0x56>
        return( ret );
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	e015      	b.n	800d510 <mbedtls_gcm_setkey+0x82>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	f7fd fd10 	bl	800af10 <mbedtls_cipher_setkey>
 800d4f0:	6138      	str	r0, [r7, #16]
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <mbedtls_gcm_setkey+0x6e>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	e009      	b.n	800d510 <mbedtls_gcm_setkey+0x82>
    }

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f7ff fe4c 	bl	800d19a <gcm_gen_table>
 800d502:	6138      	str	r0, [r7, #16]
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d001      	beq.n	800d50e <mbedtls_gcm_setkey+0x80>
        return( ret );
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	e000      	b.n	800d510 <mbedtls_gcm_setkey+0x82>

    return( 0 );
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3718      	adds	r7, #24
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 800d518:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d51c:	b099      	sub	sp, #100	; 0x64
 800d51e:	af00      	add	r7, sp, #0
 800d520:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d522:	63b9      	str	r1, [r7, #56]	; 0x38
 800d524:	637a      	str	r2, [r7, #52]	; 0x34
    int i = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 800d52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52c:	330f      	adds	r3, #15
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	f003 030f 	and.w	r3, r3, #15
 800d534:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    zh = ctx->HH[lo];
 800d538:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d53c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d53e:	3318      	adds	r3, #24
 800d540:	00db      	lsls	r3, r3, #3
 800d542:	4413      	add	r3, r2
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    zl = ctx->HL[lo];
 800d54c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d552:	3308      	adds	r3, #8
 800d554:	00db      	lsls	r3, r3, #3
 800d556:	4413      	add	r3, r2
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    for( i = 15; i >= 0; i-- )
 800d560:	230f      	movs	r3, #15
 800d562:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d564:	e0e6      	b.n	800d734 <gcm_mult+0x21c>
    {
        lo = x[i] & 0xf;
 800d566:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	4413      	add	r3, r2
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	f003 030f 	and.w	r3, r3, #15
 800d572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        hi = x[i] >> 4;
 800d576:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57a:	4413      	add	r3, r2
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	091b      	lsrs	r3, r3, #4
 800d580:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        if( i != 15 )
 800d584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d586:	2b0f      	cmp	r3, #15
 800d588:	d068      	beq.n	800d65c <gcm_mult+0x144>
        {
            rem = (unsigned char) zl & 0xf;
 800d58a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d58e:	f003 030f 	and.w	r3, r3, #15
 800d592:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            zl = ( zh << 60 ) | ( zl >> 4 );
 800d596:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d59a:	f04f 0400 	mov.w	r4, #0
 800d59e:	f04f 0500 	mov.w	r5, #0
 800d5a2:	0715      	lsls	r5, r2, #28
 800d5a4:	2400      	movs	r4, #0
 800d5a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d5aa:	f04f 0000 	mov.w	r0, #0
 800d5ae:	f04f 0100 	mov.w	r1, #0
 800d5b2:	0910      	lsrs	r0, r2, #4
 800d5b4:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d5b8:	0919      	lsrs	r1, r3, #4
 800d5ba:	ea44 0300 	orr.w	r3, r4, r0
 800d5be:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5c0:	ea45 0301 	orr.w	r3, r5, r1
 800d5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5c6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d5ca:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
            zh = ( zh >> 4 );
 800d5ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d5d2:	f04f 0000 	mov.w	r0, #0
 800d5d6:	f04f 0100 	mov.w	r1, #0
 800d5da:	0910      	lsrs	r0, r2, #4
 800d5dc:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d5e0:	0919      	lsrs	r1, r3, #4
 800d5e2:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
            zh ^= (uint64_t) last4[rem] << 48;
 800d5e6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d5ea:	4ab6      	ldr	r2, [pc, #728]	; (800d8c4 <gcm_mult+0x3ac>)
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	4413      	add	r3, r2
 800d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f4:	f04f 0000 	mov.w	r0, #0
 800d5f8:	f04f 0100 	mov.w	r1, #0
 800d5fc:	0411      	lsls	r1, r2, #16
 800d5fe:	2000      	movs	r0, #0
 800d600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d604:	ea82 0400 	eor.w	r4, r2, r0
 800d608:	623c      	str	r4, [r7, #32]
 800d60a:	404b      	eors	r3, r1
 800d60c:	627b      	str	r3, [r7, #36]	; 0x24
 800d60e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d612:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zh ^= ctx->HH[lo];
 800d616:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d61a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d61c:	3318      	adds	r3, #24
 800d61e:	00db      	lsls	r3, r3, #3
 800d620:	4413      	add	r3, r2
 800d622:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d626:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d62a:	ea82 0400 	eor.w	r4, r2, r0
 800d62e:	61bc      	str	r4, [r7, #24]
 800d630:	404b      	eors	r3, r1
 800d632:	61fb      	str	r3, [r7, #28]
 800d634:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d638:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zl ^= ctx->HL[lo];
 800d63c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d642:	3308      	adds	r3, #8
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	4413      	add	r3, r2
 800d648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d64c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d650:	ea82 0800 	eor.w	r8, r2, r0
 800d654:	ea83 0901 	eor.w	r9, r3, r1
 800d658:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48

        }

        rem = (unsigned char) zl & 0xf;
 800d65c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d660:	f003 030f 	and.w	r3, r3, #15
 800d664:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        zl = ( zh << 60 ) | ( zl >> 4 );
 800d668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d66c:	f04f 0400 	mov.w	r4, #0
 800d670:	f04f 0500 	mov.w	r5, #0
 800d674:	0715      	lsls	r5, r2, #28
 800d676:	2400      	movs	r4, #0
 800d678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d67c:	f04f 0000 	mov.w	r0, #0
 800d680:	f04f 0100 	mov.w	r1, #0
 800d684:	0910      	lsrs	r0, r2, #4
 800d686:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d68a:	0919      	lsrs	r1, r3, #4
 800d68c:	ea44 0300 	orr.w	r3, r4, r0
 800d690:	613b      	str	r3, [r7, #16]
 800d692:	ea45 0301 	orr.w	r3, r5, r1
 800d696:	617b      	str	r3, [r7, #20]
 800d698:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d69c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        zh = ( zh >> 4 );
 800d6a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d6a4:	f04f 0000 	mov.w	r0, #0
 800d6a8:	f04f 0100 	mov.w	r1, #0
 800d6ac:	0910      	lsrs	r0, r2, #4
 800d6ae:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d6b2:	0919      	lsrs	r1, r3, #4
 800d6b4:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
        zh ^= (uint64_t) last4[rem] << 48;
 800d6b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d6bc:	4a81      	ldr	r2, [pc, #516]	; (800d8c4 <gcm_mult+0x3ac>)
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	4413      	add	r3, r2
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	f04f 0000 	mov.w	r0, #0
 800d6ca:	f04f 0100 	mov.w	r1, #0
 800d6ce:	0411      	lsls	r1, r2, #16
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d6d6:	ea82 0400 	eor.w	r4, r2, r0
 800d6da:	60bc      	str	r4, [r7, #8]
 800d6dc:	404b      	eors	r3, r1
 800d6de:	60fb      	str	r3, [r7, #12]
 800d6e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d6e4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zh ^= ctx->HH[hi];
 800d6e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d6ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6ee:	3318      	adds	r3, #24
 800d6f0:	00db      	lsls	r3, r3, #3
 800d6f2:	4413      	add	r3, r2
 800d6f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d6fc:	ea82 0400 	eor.w	r4, r2, r0
 800d700:	603c      	str	r4, [r7, #0]
 800d702:	404b      	eors	r3, r1
 800d704:	607b      	str	r3, [r7, #4]
 800d706:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d70a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zl ^= ctx->HL[hi];
 800d70e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d714:	3308      	adds	r3, #8
 800d716:	00db      	lsls	r3, r3, #3
 800d718:	4413      	add	r3, r2
 800d71a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d71e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d722:	ea82 0a00 	eor.w	sl, r2, r0
 800d726:	ea83 0b01 	eor.w	fp, r3, r1
 800d72a:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
    for( i = 15; i >= 0; i-- )
 800d72e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d730:	3b01      	subs	r3, #1
 800d732:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d736:	2b00      	cmp	r3, #0
 800d738:	f6bf af15 	bge.w	800d566 <gcm_mult+0x4e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 800d73c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d740:	f04f 0200 	mov.w	r2, #0
 800d744:	f04f 0300 	mov.w	r3, #0
 800d748:	0e0a      	lsrs	r2, r1, #24
 800d74a:	2300      	movs	r3, #0
 800d74c:	b2d2      	uxtb	r2, r2
 800d74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d750:	701a      	strb	r2, [r3, #0]
 800d752:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d756:	f04f 0200 	mov.w	r2, #0
 800d75a:	f04f 0300 	mov.w	r3, #0
 800d75e:	0c0a      	lsrs	r2, r1, #16
 800d760:	2300      	movs	r3, #0
 800d762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d764:	3101      	adds	r1, #1
 800d766:	b2d3      	uxtb	r3, r2
 800d768:	700b      	strb	r3, [r1, #0]
 800d76a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d76e:	f04f 0200 	mov.w	r2, #0
 800d772:	f04f 0300 	mov.w	r3, #0
 800d776:	0a0a      	lsrs	r2, r1, #8
 800d778:	2300      	movs	r3, #0
 800d77a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d77c:	3102      	adds	r1, #2
 800d77e:	b2d3      	uxtb	r3, r2
 800d780:	700b      	strb	r3, [r1, #0]
 800d782:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d786:	f04f 0200 	mov.w	r2, #0
 800d78a:	f04f 0300 	mov.w	r3, #0
 800d78e:	000a      	movs	r2, r1
 800d790:	2300      	movs	r3, #0
 800d792:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d794:	3103      	adds	r1, #3
 800d796:	b2d3      	uxtb	r3, r2
 800d798:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zh, output, 4 );
 800d79a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d79e:	f04f 0200 	mov.w	r2, #0
 800d7a2:	f04f 0300 	mov.w	r3, #0
 800d7a6:	0e02      	lsrs	r2, r0, #24
 800d7a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d7ac:	0e0b      	lsrs	r3, r1, #24
 800d7ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d7b0:	3104      	adds	r1, #4
 800d7b2:	b2d3      	uxtb	r3, r2
 800d7b4:	700b      	strb	r3, [r1, #0]
 800d7b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d7ba:	f04f 0200 	mov.w	r2, #0
 800d7be:	f04f 0300 	mov.w	r3, #0
 800d7c2:	0c02      	lsrs	r2, r0, #16
 800d7c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d7c8:	0c0b      	lsrs	r3, r1, #16
 800d7ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d7cc:	3105      	adds	r1, #5
 800d7ce:	b2d3      	uxtb	r3, r2
 800d7d0:	700b      	strb	r3, [r1, #0]
 800d7d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d7d6:	f04f 0200 	mov.w	r2, #0
 800d7da:	f04f 0300 	mov.w	r3, #0
 800d7de:	0a02      	lsrs	r2, r0, #8
 800d7e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d7e4:	0a0b      	lsrs	r3, r1, #8
 800d7e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d7e8:	3106      	adds	r1, #6
 800d7ea:	b2d3      	uxtb	r3, r2
 800d7ec:	700b      	strb	r3, [r1, #0]
 800d7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f0:	3307      	adds	r3, #7
 800d7f2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d7f6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 800d7f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d7fc:	f04f 0200 	mov.w	r2, #0
 800d800:	f04f 0300 	mov.w	r3, #0
 800d804:	0e0a      	lsrs	r2, r1, #24
 800d806:	2300      	movs	r3, #0
 800d808:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d80a:	3108      	adds	r1, #8
 800d80c:	b2d3      	uxtb	r3, r2
 800d80e:	700b      	strb	r3, [r1, #0]
 800d810:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d814:	f04f 0200 	mov.w	r2, #0
 800d818:	f04f 0300 	mov.w	r3, #0
 800d81c:	0c0a      	lsrs	r2, r1, #16
 800d81e:	2300      	movs	r3, #0
 800d820:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d822:	3109      	adds	r1, #9
 800d824:	b2d3      	uxtb	r3, r2
 800d826:	700b      	strb	r3, [r1, #0]
 800d828:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d82c:	f04f 0200 	mov.w	r2, #0
 800d830:	f04f 0300 	mov.w	r3, #0
 800d834:	0a0a      	lsrs	r2, r1, #8
 800d836:	2300      	movs	r3, #0
 800d838:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d83a:	310a      	adds	r1, #10
 800d83c:	b2d3      	uxtb	r3, r2
 800d83e:	700b      	strb	r3, [r1, #0]
 800d840:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d844:	f04f 0200 	mov.w	r2, #0
 800d848:	f04f 0300 	mov.w	r3, #0
 800d84c:	000a      	movs	r2, r1
 800d84e:	2300      	movs	r3, #0
 800d850:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d852:	310b      	adds	r1, #11
 800d854:	b2d3      	uxtb	r3, r2
 800d856:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zl, output, 12 );
 800d858:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d85c:	f04f 0200 	mov.w	r2, #0
 800d860:	f04f 0300 	mov.w	r3, #0
 800d864:	0e02      	lsrs	r2, r0, #24
 800d866:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d86a:	0e0b      	lsrs	r3, r1, #24
 800d86c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d86e:	310c      	adds	r1, #12
 800d870:	b2d3      	uxtb	r3, r2
 800d872:	700b      	strb	r3, [r1, #0]
 800d874:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d878:	f04f 0200 	mov.w	r2, #0
 800d87c:	f04f 0300 	mov.w	r3, #0
 800d880:	0c02      	lsrs	r2, r0, #16
 800d882:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d886:	0c0b      	lsrs	r3, r1, #16
 800d888:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d88a:	310d      	adds	r1, #13
 800d88c:	b2d3      	uxtb	r3, r2
 800d88e:	700b      	strb	r3, [r1, #0]
 800d890:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d894:	f04f 0200 	mov.w	r2, #0
 800d898:	f04f 0300 	mov.w	r3, #0
 800d89c:	0a02      	lsrs	r2, r0, #8
 800d89e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d8a2:	0a0b      	lsrs	r3, r1, #8
 800d8a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d8a6:	310e      	adds	r1, #14
 800d8a8:	b2d3      	uxtb	r3, r2
 800d8aa:	700b      	strb	r3, [r1, #0]
 800d8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ae:	330f      	adds	r3, #15
 800d8b0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d8b4:	701a      	strb	r2, [r3, #0]
}
 800d8b6:	bf00      	nop
 800d8b8:	3764      	adds	r7, #100	; 0x64
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	08024ca0 	.word	0x08024ca0

0800d8c8 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 800d8c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8cc:	b090      	sub	sp, #64	; 0x40
 800d8ce:	af02      	add	r7, sp, #8
 800d8d0:	60f8      	str	r0, [r7, #12]
 800d8d2:	60b9      	str	r1, [r7, #8]
 800d8d4:	607a      	str	r2, [r7, #4]
 800d8d6:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	617b      	str	r3, [r7, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d019      	beq.n	800d916 <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	469a      	mov	sl, r3
 800d8e8:	4693      	mov	fp, r2
 800d8ea:	f04f 0200 	mov.w	r2, #0
 800d8ee:	f04f 0300 	mov.w	r3, #0
 800d8f2:	ea4f 725b 	mov.w	r2, fp, lsr #29
 800d8f6:	2300      	movs	r3, #0
    if( iv_len == 0 ||
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	d10c      	bne.n	800d916 <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) add_len ) >> 61 != 0 )
 800d8fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8fe:	2200      	movs	r2, #0
 800d900:	4698      	mov	r8, r3
 800d902:	4691      	mov	r9, r2
 800d904:	f04f 0200 	mov.w	r2, #0
 800d908:	f04f 0300 	mov.w	r3, #0
 800d90c:	ea4f 7259 	mov.w	r2, r9, lsr #29
 800d910:	2300      	movs	r3, #0
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800d912:	4313      	orrs	r3, r2
 800d914:	d002      	beq.n	800d91c <mbedtls_gcm_starts+0x54>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d916:	f06f 0313 	mvn.w	r3, #19
 800d91a:	e107      	b.n	800db2c <mbedtls_gcm_starts+0x264>
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d922:	2210      	movs	r2, #16
 800d924:	2100      	movs	r1, #0
 800d926:	4618      	mov	r0, r3
 800d928:	f010 fbb8 	bl	801e09c <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800d932:	2210      	movs	r2, #16
 800d934:	2100      	movs	r1, #0
 800d936:	4618      	mov	r0, r3
 800d938:	f010 fbb0 	bl	801e09c <memset>

    ctx->mode = mode;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	68ba      	ldr	r2, [r7, #8]
 800d940:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ctx->len = 0;
 800d944:	68f9      	ldr	r1, [r7, #12]
 800d946:	f04f 0200 	mov.w	r2, #0
 800d94a:	f04f 0300 	mov.w	r3, #0
 800d94e:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    ctx->add_len = 0;
 800d952:	68f9      	ldr	r1, [r7, #12]
 800d954:	f04f 0200 	mov.w	r2, #0
 800d958:	f04f 0300 	mov.w	r3, #0
 800d95c:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148

    if( iv_len == 12 )
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	2b0c      	cmp	r3, #12
 800d964:	d10c      	bne.n	800d980 <mbedtls_gcm_starts+0xb8>
    {
        memcpy( ctx->y, iv, iv_len );
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d96c:	683a      	ldr	r2, [r7, #0]
 800d96e:	6879      	ldr	r1, [r7, #4]
 800d970:	4618      	mov	r0, r3
 800d972:	f010 fb6b 	bl	801e04c <memcpy>
        ctx->y[15] = 1;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2201      	movs	r2, #1
 800d97a:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 800d97e:	e07f      	b.n	800da80 <mbedtls_gcm_starts+0x1b8>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 800d980:	f107 0318 	add.w	r3, r7, #24
 800d984:	2210      	movs	r2, #16
 800d986:	2100      	movs	r1, #0
 800d988:	4618      	mov	r0, r3
 800d98a:	f010 fb87 	bl	801e09c <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	00db      	lsls	r3, r3, #3
 800d992:	0e1b      	lsrs	r3, r3, #24
 800d994:	b2db      	uxtb	r3, r3
 800d996:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	00db      	lsls	r3, r3, #3
 800d99e:	0c1b      	lsrs	r3, r3, #16
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	00db      	lsls	r3, r3, #3
 800d9aa:	0a1b      	lsrs	r3, r3, #8
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        p = iv;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 800d9c2:	e033      	b.n	800da2c <mbedtls_gcm_starts+0x164>
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	2b10      	cmp	r3, #16
 800d9c8:	bf28      	it	cs
 800d9ca:	2310      	movcs	r3, #16
 800d9cc:	62fb      	str	r3, [r7, #44]	; 0x2c

            for( i = 0; i < use_len; i++ )
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d9d2:	e015      	b.n	800da00 <mbedtls_gcm_starts+0x138>
                ctx->y[i] ^= p[i];
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9d8:	4413      	add	r3, r2
 800d9da:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d9de:	781a      	ldrb	r2, [r3, #0]
 800d9e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e4:	440b      	add	r3, r1
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	4053      	eors	r3, r2
 800d9ea:	b2d9      	uxtb	r1, r3
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d9f6:	460a      	mov	r2, r1
 800d9f8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < use_len; i++ )
 800d9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	637b      	str	r3, [r7, #52]	; 0x34
 800da00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da04:	429a      	cmp	r2, r3
 800da06:	d3e5      	bcc.n	800d9d4 <mbedtls_gcm_starts+0x10c>

            gcm_mult( ctx, ctx->y, ctx->y );
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800da14:	461a      	mov	r2, r3
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f7ff fd7e 	bl	800d518 <gcm_mult>

            iv_len -= use_len;
 800da1c:	683a      	ldr	r2, [r7, #0]
 800da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	603b      	str	r3, [r7, #0]
            p += use_len;
 800da24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da28:	4413      	add	r3, r2
 800da2a:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1c8      	bne.n	800d9c4 <mbedtls_gcm_starts+0xfc>
        }

        for( i = 0; i < 16; i++ )
 800da32:	2300      	movs	r3, #0
 800da34:	637b      	str	r3, [r7, #52]	; 0x34
 800da36:	e016      	b.n	800da66 <mbedtls_gcm_starts+0x19e>
            ctx->y[i] ^= work_buf[i];
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da3c:	4413      	add	r3, r2
 800da3e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800da42:	781a      	ldrb	r2, [r3, #0]
 800da44:	f107 0118 	add.w	r1, r7, #24
 800da48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da4a:	440b      	add	r3, r1
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	4053      	eors	r3, r2
 800da50:	b2d9      	uxtb	r1, r3
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da56:	4413      	add	r3, r2
 800da58:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800da5c:	460a      	mov	r2, r1
 800da5e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800da60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da62:	3301      	adds	r3, #1
 800da64:	637b      	str	r3, [r7, #52]	; 0x34
 800da66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da68:	2b0f      	cmp	r3, #15
 800da6a:	d9e5      	bls.n	800da38 <mbedtls_gcm_starts+0x170>

        gcm_mult( ctx, ctx->y, ctx->y );
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800da78:	461a      	mov	r2, r3
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f7ff fd4c 	bl	800d518 <gcm_mult>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 800da8e:	f107 0314 	add.w	r3, r7, #20
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	4613      	mov	r3, r2
 800da96:	2210      	movs	r2, #16
 800da98:	f7fd faea 	bl	800b070 <mbedtls_cipher_update>
 800da9c:	62b8      	str	r0, [r7, #40]	; 0x28
 800da9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d001      	beq.n	800daa8 <mbedtls_gcm_starts+0x1e0>
                             &olen ) ) != 0 )
    {
        return( ret );
 800daa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa6:	e041      	b.n	800db2c <mbedtls_gcm_starts+0x264>
    }

    ctx->add_len = add_len;
 800daa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daaa:	2200      	movs	r2, #0
 800daac:	461c      	mov	r4, r3
 800daae:	4615      	mov	r5, r2
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	e9c3 4552 	strd	r4, r5, [r3, #328]	; 0x148
    p = add;
 800dab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dab8:	633b      	str	r3, [r7, #48]	; 0x30
    while( add_len > 0 )
 800daba:	e033      	b.n	800db24 <mbedtls_gcm_starts+0x25c>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 800dabc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dabe:	2b10      	cmp	r3, #16
 800dac0:	bf28      	it	cs
 800dac2:	2310      	movcs	r3, #16
 800dac4:	62fb      	str	r3, [r7, #44]	; 0x2c

        for( i = 0; i < use_len; i++ )
 800dac6:	2300      	movs	r3, #0
 800dac8:	637b      	str	r3, [r7, #52]	; 0x34
 800daca:	e015      	b.n	800daf8 <mbedtls_gcm_starts+0x230>
            ctx->buf[i] ^= p[i];
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad0:	4413      	add	r3, r2
 800dad2:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dad6:	781a      	ldrb	r2, [r3, #0]
 800dad8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dadc:	440b      	add	r3, r1
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	4053      	eors	r3, r2
 800dae2:	b2d9      	uxtb	r1, r3
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae8:	4413      	add	r3, r2
 800daea:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800daee:	460a      	mov	r2, r1
 800daf0:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 800daf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf4:	3301      	adds	r3, #1
 800daf6:	637b      	str	r3, [r7, #52]	; 0x34
 800daf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d3e5      	bcc.n	800dacc <mbedtls_gcm_starts+0x204>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800db0c:	461a      	mov	r2, r3
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f7ff fd02 	bl	800d518 <gcm_mult>

        add_len -= use_len;
 800db14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	65fb      	str	r3, [r7, #92]	; 0x5c
        p += use_len;
 800db1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db20:	4413      	add	r3, r2
 800db22:	633b      	str	r3, [r7, #48]	; 0x30
    while( add_len > 0 )
 800db24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1c8      	bne.n	800dabc <mbedtls_gcm_starts+0x1f4>
    }

    return( 0 );
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3738      	adds	r7, #56	; 0x38
 800db30:	46bd      	mov	sp, r7
 800db32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db36 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 800db36:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db3a:	b096      	sub	sp, #88	; 0x58
 800db3c:	af02      	add	r7, sp, #8
 800db3e:	6278      	str	r0, [r7, #36]	; 0x24
 800db40:	6239      	str	r1, [r7, #32]
 800db42:	61fa      	str	r2, [r7, #28]
 800db44:	61bb      	str	r3, [r7, #24]
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	647b      	str	r3, [r7, #68]	; 0x44
    size_t use_len, olen = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	62bb      	str	r3, [r7, #40]	; 0x28

    if( output > input && (size_t) ( output - input ) < length )
 800db4e:	69ba      	ldr	r2, [r7, #24]
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	429a      	cmp	r2, r3
 800db54:	d909      	bls.n	800db6a <mbedtls_gcm_update+0x34>
 800db56:	69ba      	ldr	r2, [r7, #24]
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	461a      	mov	r2, r3
 800db5e:	6a3b      	ldr	r3, [r7, #32]
 800db60:	4293      	cmp	r3, r2
 800db62:	d902      	bls.n	800db6a <mbedtls_gcm_update+0x34>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800db64:	f06f 0313 	mvn.w	r3, #19
 800db68:	e0d8      	b.n	800dd1c <mbedtls_gcm_update+0x1e6>

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 800db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6c:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800db70:	6a39      	ldr	r1, [r7, #32]
 800db72:	2000      	movs	r0, #0
 800db74:	6139      	str	r1, [r7, #16]
 800db76:	6178      	str	r0, [r7, #20]
 800db78:	6939      	ldr	r1, [r7, #16]
 800db7a:	eb12 0801 	adds.w	r8, r2, r1
 800db7e:	6979      	ldr	r1, [r7, #20]
 800db80:	eb43 0901 	adc.w	r9, r3, r1
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800db8a:	4590      	cmp	r8, r2
 800db8c:	eb79 0303 	sbcs.w	r3, r9, r3
 800db90:	d313      	bcc.n	800dbba <mbedtls_gcm_update+0x84>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800db98:	6a39      	ldr	r1, [r7, #32]
 800db9a:	2000      	movs	r0, #0
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800dba4:	4641      	mov	r1, r8
 800dba6:	1854      	adds	r4, r2, r1
 800dba8:	4649      	mov	r1, r9
 800dbaa:	eb43 0101 	adc.w	r1, r3, r1
 800dbae:	460d      	mov	r5, r1
    if( ctx->len + length < ctx->len ||
 800dbb0:	f114 0f1f 	cmn.w	r4, #31
 800dbb4:	f175 030f 	sbcs.w	r3, r5, #15
 800dbb8:	d302      	bcc.n	800dbc0 <mbedtls_gcm_update+0x8a>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800dbba:	f06f 0313 	mvn.w	r3, #19
 800dbbe:	e0ad      	b.n	800dd1c <mbedtls_gcm_update+0x1e6>
    }

    ctx->len += length;
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800dbc6:	6a39      	ldr	r1, [r7, #32]
 800dbc8:	2000      	movs	r0, #0
 800dbca:	468a      	mov	sl, r1
 800dbcc:	4683      	mov	fp, r0
 800dbce:	eb12 010a 	adds.w	r1, r2, sl
 800dbd2:	6039      	str	r1, [r7, #0]
 800dbd4:	eb43 030b 	adc.w	r3, r3, fp
 800dbd8:	607b      	str	r3, [r7, #4]
 800dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbdc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dbe0:	e9c3 1250 	strd	r1, r2, [r3, #320]	; 0x140

    p = input;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	64bb      	str	r3, [r7, #72]	; 0x48
    while( length > 0 )
 800dbe8:	e093      	b.n	800dd12 <mbedtls_gcm_update+0x1dc>
    {
        use_len = ( length < 16 ) ? length : 16;
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	2b10      	cmp	r3, #16
 800dbee:	bf28      	it	cs
 800dbf0:	2310      	movcs	r3, #16
 800dbf2:	643b      	str	r3, [r7, #64]	; 0x40

        for( i = 16; i > 12; i-- )
 800dbf4:	2310      	movs	r3, #16
 800dbf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbf8:	e014      	b.n	800dc24 <mbedtls_gcm_update+0xee>
            if( ++ctx->y[i - 1] != 0 )
 800dbfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc00:	441a      	add	r2, r3
 800dc02:	f892 2160 	ldrb.w	r2, [r2, #352]	; 0x160
 800dc06:	3201      	adds	r2, #1
 800dc08:	b2d1      	uxtb	r1, r2
 800dc0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc0c:	441a      	add	r2, r3
 800dc0e:	f882 1160 	strb.w	r1, [r2, #352]	; 0x160
 800dc12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc14:	4413      	add	r3, r2
 800dc16:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <mbedtls_gcm_update+0xf6>
        for( i = 16; i > 12; i-- )
 800dc1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc20:	3b01      	subs	r3, #1
 800dc22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc26:	2b0c      	cmp	r3, #12
 800dc28:	d8e7      	bhi.n	800dbfa <mbedtls_gcm_update+0xc4>
 800dc2a:	e000      	b.n	800dc2e <mbedtls_gcm_update+0xf8>
                break;
 800dc2c:	bf00      	nop

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 800dc2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800dc36:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800dc3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	4613      	mov	r3, r2
 800dc42:	2210      	movs	r2, #16
 800dc44:	f7fd fa14 	bl	800b070 <mbedtls_cipher_update>
 800dc48:	63f8      	str	r0, [r7, #60]	; 0x3c
 800dc4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d001      	beq.n	800dc54 <mbedtls_gcm_update+0x11e>
                                   &olen ) ) != 0 )
        {
            return( ret );
 800dc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc52:	e063      	b.n	800dd1c <mbedtls_gcm_update+0x1e6>
        }

        for( i = 0; i < use_len; i++ )
 800dc54:	2300      	movs	r3, #0
 800dc56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc58:	e041      	b.n	800dcde <mbedtls_gcm_update+0x1a8>
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d112      	bne.n	800dc8a <mbedtls_gcm_update+0x154>
                ctx->buf[i] ^= p[i];
 800dc64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc68:	4413      	add	r3, r2
 800dc6a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dc6e:	781a      	ldrb	r2, [r3, #0]
 800dc70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc74:	440b      	add	r3, r1
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	4053      	eors	r3, r2
 800dc7a:	b2d9      	uxtb	r1, r3
 800dc7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc80:	4413      	add	r3, r2
 800dc82:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dc86:	460a      	mov	r2, r1
 800dc88:	701a      	strb	r2, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 800dc8a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800dc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc90:	4413      	add	r3, r2
 800dc92:	7819      	ldrb	r1, [r3, #0]
 800dc94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc98:	4413      	add	r3, r2
 800dc9a:	781a      	ldrb	r2, [r3, #0]
 800dc9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dc9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca0:	4403      	add	r3, r0
 800dca2:	404a      	eors	r2, r1
 800dca4:	b2d2      	uxtb	r2, r2
 800dca6:	701a      	strb	r2, [r3, #0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 800dca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcaa:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d112      	bne.n	800dcd8 <mbedtls_gcm_update+0x1a2>
                ctx->buf[i] ^= out_p[i];
 800dcb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb6:	4413      	add	r3, r2
 800dcb8:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dcbc:	781a      	ldrb	r2, [r3, #0]
 800dcbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc2:	440b      	add	r3, r1
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	4053      	eors	r3, r2
 800dcc8:	b2d9      	uxtb	r1, r3
 800dcca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcce:	4413      	add	r3, r2
 800dcd0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dcd4:	460a      	mov	r2, r1
 800dcd6:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 800dcd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcda:	3301      	adds	r3, #1
 800dcdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d3b9      	bcc.n	800dc5a <mbedtls_gcm_update+0x124>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcf6:	f7ff fc0f 	bl	800d518 <gcm_mult>

        length -= use_len;
 800dcfa:	6a3a      	ldr	r2, [r7, #32]
 800dcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcfe:	1ad3      	subs	r3, r2, r3
 800dd00:	623b      	str	r3, [r7, #32]
        p += use_len;
 800dd02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd06:	4413      	add	r3, r2
 800dd08:	64bb      	str	r3, [r7, #72]	; 0x48
        out_p += use_len;
 800dd0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd0e:	4413      	add	r3, r2
 800dd10:	647b      	str	r3, [r7, #68]	; 0x44
    while( length > 0 )
 800dd12:	6a3b      	ldr	r3, [r7, #32]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f47f af68 	bne.w	800dbea <mbedtls_gcm_update+0xb4>
    }

    return( 0 );
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3750      	adds	r7, #80	; 0x50
 800dd20:	46bd      	mov	sp, r7
 800dd22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dd26 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b08e      	sub	sp, #56	; 0x38
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	60f8      	str	r0, [r7, #12]
 800dd2e:	60b9      	str	r1, [r7, #8]
 800dd30:	607a      	str	r2, [r7, #4]
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800dd38:	f04f 0200 	mov.w	r2, #0
 800dd3c:	f04f 0300 	mov.w	r3, #0
 800dd40:	00cb      	lsls	r3, r1, #3
 800dd42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800dd46:	00c2      	lsls	r2, r0, #3
 800dd48:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    uint64_t orig_add_len = ctx->add_len * 8;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	; 0x148
 800dd52:	f04f 0200 	mov.w	r2, #0
 800dd56:	f04f 0300 	mov.w	r3, #0
 800dd5a:	00cb      	lsls	r3, r1, #3
 800dd5c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800dd60:	00c2      	lsls	r2, r0, #3
 800dd62:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if( tag_len > 16 || tag_len < 4 )
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b10      	cmp	r3, #16
 800dd6a:	d802      	bhi.n	800dd72 <mbedtls_gcm_finish+0x4c>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b03      	cmp	r3, #3
 800dd70:	d802      	bhi.n	800dd78 <mbedtls_gcm_finish+0x52>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800dd72:	f06f 0313 	mvn.w	r3, #19
 800dd76:	e0f7      	b.n	800df68 <mbedtls_gcm_finish+0x242>

    memcpy( tag, ctx->base_ectr, tag_len );
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	4619      	mov	r1, r3
 800dd82:	68b8      	ldr	r0, [r7, #8]
 800dd84:	f010 f962 	bl	801e04c <memcpy>

    if( orig_len || orig_add_len )
 800dd88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	d104      	bne.n	800dd9a <mbedtls_gcm_finish+0x74>
 800dd90:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dd94:	4313      	orrs	r3, r2
 800dd96:	f000 80e6 	beq.w	800df66 <mbedtls_gcm_finish+0x240>
    {
        memset( work_buf, 0x00, 16 );
 800dd9a:	f107 0310 	add.w	r3, r7, #16
 800dd9e:	2210      	movs	r2, #16
 800dda0:	2100      	movs	r1, #0
 800dda2:	4618      	mov	r0, r3
 800dda4:	f010 f97a 	bl	801e09c <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 800dda8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ddac:	f04f 0200 	mov.w	r2, #0
 800ddb0:	f04f 0300 	mov.w	r3, #0
 800ddb4:	0e0a      	lsrs	r2, r1, #24
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	b2d3      	uxtb	r3, r2
 800ddba:	743b      	strb	r3, [r7, #16]
 800ddbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ddc0:	f04f 0200 	mov.w	r2, #0
 800ddc4:	f04f 0300 	mov.w	r3, #0
 800ddc8:	0c0a      	lsrs	r2, r1, #16
 800ddca:	2300      	movs	r3, #0
 800ddcc:	b2d3      	uxtb	r3, r2
 800ddce:	747b      	strb	r3, [r7, #17]
 800ddd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ddd4:	f04f 0200 	mov.w	r2, #0
 800ddd8:	f04f 0300 	mov.w	r3, #0
 800dddc:	0a0a      	lsrs	r2, r1, #8
 800ddde:	2300      	movs	r3, #0
 800dde0:	b2d3      	uxtb	r3, r2
 800dde2:	74bb      	strb	r3, [r7, #18]
 800dde4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dde8:	f04f 0200 	mov.w	r2, #0
 800ddec:	f04f 0300 	mov.w	r3, #0
 800ddf0:	000a      	movs	r2, r1
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	b2d3      	uxtb	r3, r2
 800ddf6:	74fb      	strb	r3, [r7, #19]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 800ddf8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ddfc:	f04f 0200 	mov.w	r2, #0
 800de00:	f04f 0300 	mov.w	r3, #0
 800de04:	0e02      	lsrs	r2, r0, #24
 800de06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800de0a:	0e0b      	lsrs	r3, r1, #24
 800de0c:	b2d3      	uxtb	r3, r2
 800de0e:	753b      	strb	r3, [r7, #20]
 800de10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800de14:	f04f 0200 	mov.w	r2, #0
 800de18:	f04f 0300 	mov.w	r3, #0
 800de1c:	0c02      	lsrs	r2, r0, #16
 800de1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800de22:	0c0b      	lsrs	r3, r1, #16
 800de24:	b2d3      	uxtb	r3, r2
 800de26:	757b      	strb	r3, [r7, #21]
 800de28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800de2c:	f04f 0200 	mov.w	r2, #0
 800de30:	f04f 0300 	mov.w	r3, #0
 800de34:	0a02      	lsrs	r2, r0, #8
 800de36:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800de3a:	0a0b      	lsrs	r3, r1, #8
 800de3c:	b2d3      	uxtb	r3, r2
 800de3e:	75bb      	strb	r3, [r7, #22]
 800de40:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de44:	75fb      	strb	r3, [r7, #23]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 800de46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de4a:	f04f 0200 	mov.w	r2, #0
 800de4e:	f04f 0300 	mov.w	r3, #0
 800de52:	0e0a      	lsrs	r2, r1, #24
 800de54:	2300      	movs	r3, #0
 800de56:	b2d3      	uxtb	r3, r2
 800de58:	763b      	strb	r3, [r7, #24]
 800de5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de5e:	f04f 0200 	mov.w	r2, #0
 800de62:	f04f 0300 	mov.w	r3, #0
 800de66:	0c0a      	lsrs	r2, r1, #16
 800de68:	2300      	movs	r3, #0
 800de6a:	b2d3      	uxtb	r3, r2
 800de6c:	767b      	strb	r3, [r7, #25]
 800de6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de72:	f04f 0200 	mov.w	r2, #0
 800de76:	f04f 0300 	mov.w	r3, #0
 800de7a:	0a0a      	lsrs	r2, r1, #8
 800de7c:	2300      	movs	r3, #0
 800de7e:	b2d3      	uxtb	r3, r2
 800de80:	76bb      	strb	r3, [r7, #26]
 800de82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de86:	f04f 0200 	mov.w	r2, #0
 800de8a:	f04f 0300 	mov.w	r3, #0
 800de8e:	000a      	movs	r2, r1
 800de90:	2300      	movs	r3, #0
 800de92:	b2d3      	uxtb	r3, r2
 800de94:	76fb      	strb	r3, [r7, #27]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 800de96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de9a:	f04f 0200 	mov.w	r2, #0
 800de9e:	f04f 0300 	mov.w	r3, #0
 800dea2:	0e02      	lsrs	r2, r0, #24
 800dea4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dea8:	0e0b      	lsrs	r3, r1, #24
 800deaa:	b2d3      	uxtb	r3, r2
 800deac:	773b      	strb	r3, [r7, #28]
 800deae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800deb2:	f04f 0200 	mov.w	r2, #0
 800deb6:	f04f 0300 	mov.w	r3, #0
 800deba:	0c02      	lsrs	r2, r0, #16
 800debc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dec0:	0c0b      	lsrs	r3, r1, #16
 800dec2:	b2d3      	uxtb	r3, r2
 800dec4:	777b      	strb	r3, [r7, #29]
 800dec6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800deca:	f04f 0200 	mov.w	r2, #0
 800dece:	f04f 0300 	mov.w	r3, #0
 800ded2:	0a02      	lsrs	r2, r0, #8
 800ded4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ded8:	0a0b      	lsrs	r3, r1, #8
 800deda:	b2d3      	uxtb	r3, r2
 800dedc:	77bb      	strb	r3, [r7, #30]
 800dede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dee2:	77fb      	strb	r3, [r7, #31]

        for( i = 0; i < 16; i++ )
 800dee4:	2300      	movs	r3, #0
 800dee6:	637b      	str	r3, [r7, #52]	; 0x34
 800dee8:	e016      	b.n	800df18 <mbedtls_gcm_finish+0x1f2>
            ctx->buf[i] ^= work_buf[i];
 800deea:	68fa      	ldr	r2, [r7, #12]
 800deec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deee:	4413      	add	r3, r2
 800def0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800def4:	781a      	ldrb	r2, [r3, #0]
 800def6:	f107 0110 	add.w	r1, r7, #16
 800defa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defc:	440b      	add	r3, r1
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	4053      	eors	r3, r2
 800df02:	b2d9      	uxtb	r1, r3
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df08:	4413      	add	r3, r2
 800df0a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800df0e:	460a      	mov	r2, r1
 800df10:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800df12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df14:	3301      	adds	r3, #1
 800df16:	637b      	str	r3, [r7, #52]	; 0x34
 800df18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df1a:	2b0f      	cmp	r3, #15
 800df1c:	d9e5      	bls.n	800deea <mbedtls_gcm_finish+0x1c4>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800df2a:	461a      	mov	r2, r3
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7ff faf3 	bl	800d518 <gcm_mult>

        for( i = 0; i < tag_len; i++ )
 800df32:	2300      	movs	r3, #0
 800df34:	637b      	str	r3, [r7, #52]	; 0x34
 800df36:	e012      	b.n	800df5e <mbedtls_gcm_finish+0x238>
            tag[i] ^= ctx->buf[i];
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df3c:	4413      	add	r3, r2
 800df3e:	7819      	ldrb	r1, [r3, #0]
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df44:	4413      	add	r3, r2
 800df46:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800df4a:	781a      	ldrb	r2, [r3, #0]
 800df4c:	68b8      	ldr	r0, [r7, #8]
 800df4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df50:	4403      	add	r3, r0
 800df52:	404a      	eors	r2, r1
 800df54:	b2d2      	uxtb	r2, r2
 800df56:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < tag_len; i++ )
 800df58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df5a:	3301      	adds	r3, #1
 800df5c:	637b      	str	r3, [r7, #52]	; 0x34
 800df5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	429a      	cmp	r2, r3
 800df64:	d3e8      	bcc.n	800df38 <mbedtls_gcm_finish+0x212>
    }

    return( 0 );
 800df66:	2300      	movs	r3, #0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3738      	adds	r7, #56	; 0x38
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b088      	sub	sp, #32
 800df74:	af02      	add	r7, sp, #8
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
 800df7c:	603b      	str	r3, [r7, #0]
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 800df7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	6a3b      	ldr	r3, [r7, #32]
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	68b9      	ldr	r1, [r7, #8]
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f7ff fc9b 	bl	800d8c8 <mbedtls_gcm_starts>
 800df92:	6178      	str	r0, [r7, #20]
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <mbedtls_gcm_crypt_and_tag+0x2e>
        return( ret );
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	e017      	b.n	800dfce <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfa2:	6879      	ldr	r1, [r7, #4]
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f7ff fdc6 	bl	800db36 <mbedtls_gcm_update>
 800dfaa:	6178      	str	r0, [r7, #20]
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <mbedtls_gcm_crypt_and_tag+0x46>
        return( ret );
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	e00b      	b.n	800dfce <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 800dfb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f7ff feb3 	bl	800dd26 <mbedtls_gcm_finish>
 800dfc0:	6178      	str	r0, [r7, #20]
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <mbedtls_gcm_crypt_and_tag+0x5c>
        return( ret );
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	e000      	b.n	800dfce <mbedtls_gcm_crypt_and_tag+0x5e>

    return( 0 );
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b094      	sub	sp, #80	; 0x50
 800dfda:	af08      	add	r7, sp, #32
 800dfdc:	60f8      	str	r0, [r7, #12]
 800dfde:	60b9      	str	r1, [r7, #8]
 800dfe0:	607a      	str	r2, [r7, #4]
 800dfe2:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 800dfe4:	f107 0314 	add.w	r3, r7, #20
 800dfe8:	9306      	str	r3, [sp, #24]
 800dfea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfec:	9305      	str	r3, [sp, #20]
 800dfee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dff0:	9304      	str	r3, [sp, #16]
 800dff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dff4:	9303      	str	r3, [sp, #12]
 800dff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff8:	9302      	str	r3, [sp, #8]
 800dffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffc:	9301      	str	r3, [sp, #4]
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	2100      	movs	r1, #0
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f7ff ffb1 	bl	800df70 <mbedtls_gcm_crypt_and_tag>
 800e00e:	6278      	str	r0, [r7, #36]	; 0x24
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	2b00      	cmp	r3, #0
 800e014:	d001      	beq.n	800e01a <mbedtls_gcm_auth_decrypt+0x44>
                                   iv, iv_len, add, add_len,
                                   input, output, tag_len, check_tag ) ) != 0 )
    {
        return( ret );
 800e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e018:	e025      	b.n	800e066 <mbedtls_gcm_auth_decrypt+0x90>
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800e01a:	2300      	movs	r3, #0
 800e01c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e01e:	2300      	movs	r3, #0
 800e020:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e022:	e011      	b.n	800e048 <mbedtls_gcm_auth_decrypt+0x72>
        diff |= tag[i] ^ check_tag[i];
 800e024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e028:	4413      	add	r3, r2
 800e02a:	781a      	ldrb	r2, [r3, #0]
 800e02c:	f107 0114 	add.w	r1, r7, #20
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	440b      	add	r3, r1
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	4053      	eors	r3, r2
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	461a      	mov	r2, r3
 800e03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03e:	4313      	orrs	r3, r2
 800e040:	62bb      	str	r3, [r7, #40]	; 0x28
    for( diff = 0, i = 0; i < tag_len; i++ )
 800e042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e044:	3301      	adds	r3, #1
 800e046:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d3e9      	bcc.n	800e024 <mbedtls_gcm_auth_decrypt+0x4e>

    if( diff != 0 )
 800e050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e052:	2b00      	cmp	r3, #0
 800e054:	d006      	beq.n	800e064 <mbedtls_gcm_auth_decrypt+0x8e>
    {
        mbedtls_zeroize( output, length );
 800e056:	68b9      	ldr	r1, [r7, #8]
 800e058:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e05a:	f7ff f877 	bl	800d14c <mbedtls_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 800e05e:	f06f 0311 	mvn.w	r3, #17
 800e062:	e000      	b.n	800e066 <mbedtls_gcm_auth_decrypt+0x90>
    }

    return( 0 );
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3730      	adds	r7, #48	; 0x30
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b082      	sub	sp, #8
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fc fefc 	bl	800ae76 <mbedtls_cipher_free>
    mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 800e07e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7ff f862 	bl	800d14c <mbedtls_zeroize>
}
 800e088:	bf00      	nop
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <mbedtls_zeroize>:
#if defined(MBEDTLS_FS_IO)
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	60fb      	str	r3, [r7, #12]
 800e09e:	e004      	b.n	800e0aa <mbedtls_zeroize+0x1a>
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	1c5a      	adds	r2, r3, #1
 800e0a4:	60fa      	str	r2, [r7, #12]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	701a      	strb	r2, [r3, #0]
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	1e5a      	subs	r2, r3, #1
 800e0ae:	603a      	str	r2, [r7, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1f5      	bne.n	800e0a0 <mbedtls_zeroize+0x10>
}
 800e0b4:	bf00      	nop
 800e0b6:	bf00      	nop
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
	...

0800e0c4 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	71fb      	strb	r3, [r7, #7]
    switch( md_type )
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	2b05      	cmp	r3, #5
 800e0d2:	d002      	beq.n	800e0da <mbedtls_md_info_from_type+0x16>
 800e0d4:	2b06      	cmp	r3, #6
 800e0d6:	d002      	beq.n	800e0de <mbedtls_md_info_from_type+0x1a>
 800e0d8:	e003      	b.n	800e0e2 <mbedtls_md_info_from_type+0x1e>
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
 800e0da:	4b05      	ldr	r3, [pc, #20]	; (800e0f0 <mbedtls_md_info_from_type+0x2c>)
 800e0dc:	e002      	b.n	800e0e4 <mbedtls_md_info_from_type+0x20>
        case MBEDTLS_MD_SHA256:
            return( &mbedtls_sha256_info );
 800e0de:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <mbedtls_md_info_from_type+0x30>)
 800e0e0:	e000      	b.n	800e0e4 <mbedtls_md_info_from_type+0x20>
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 800e0e2:	2300      	movs	r3, #0
    }
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	08024d20 	.word	0x08024d20
 800e0f4:	08024d50 	.word	0x08024d50

0800e0f8 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 800e100:	220c      	movs	r2, #12
 800e102:	2100      	movs	r1, #0
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f00f ffc9 	bl	801e09c <memset>
}
 800e10a:	bf00      	nop
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->md_info == NULL )
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d026      	beq.n	800e16e <mbedtls_md_free+0x5c>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d022      	beq.n	800e16e <mbedtls_md_free+0x5c>
        return;

    if( ctx->md_ctx != NULL )
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d006      	beq.n	800e13e <mbedtls_md_free+0x2c>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	6852      	ldr	r2, [r2, #4]
 800e13a:	4610      	mov	r0, r2
 800e13c:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00e      	beq.n	800e164 <mbedtls_md_free+0x52>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	689a      	ldr	r2, [r3, #8]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	005b      	lsls	r3, r3, #1
 800e152:	4619      	mov	r1, r3
 800e154:	4610      	mov	r0, r2
 800e156:	f7ff ff9b 	bl	800e090 <mbedtls_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	4618      	mov	r0, r3
 800e160:	f00f ff5c 	bl	801e01c <free>
    }

    mbedtls_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 800e164:	210c      	movs	r1, #12
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff ff92 	bl	800e090 <mbedtls_zeroize>
 800e16c:	e000      	b.n	800e170 <mbedtls_md_free+0x5e>
        return;
 800e16e:	bf00      	nop
}
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
    if( md_info == NULL || ctx == NULL )
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d002      	beq.n	800e190 <mbedtls_md_setup+0x18>
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <mbedtls_md_setup+0x1c>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e190:	4b17      	ldr	r3, [pc, #92]	; (800e1f0 <mbedtls_md_setup+0x78>)
 800e192:	e028      	b.n	800e1e6 <mbedtls_md_setup+0x6e>

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	6a1b      	ldr	r3, [r3, #32]
 800e198:	4798      	blx	r3
 800e19a:	4602      	mov	r2, r0
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	605a      	str	r2, [r3, #4]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d101      	bne.n	800e1ac <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800e1a8:	4b12      	ldr	r3, [pc, #72]	; (800e1f4 <mbedtls_md_setup+0x7c>)
 800e1aa:	e01c      	b.n	800e1e6 <mbedtls_md_setup+0x6e>

    if( hmac != 0 )
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d015      	beq.n	800e1de <mbedtls_md_setup+0x66>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	2002      	movs	r0, #2
 800e1ba:	f00f fef5 	bl	801dfa8 <calloc>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	609a      	str	r2, [r3, #8]
        if( ctx->hmac_ctx == NULL )
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d107      	bne.n	800e1de <mbedtls_md_setup+0x66>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d2:	68fa      	ldr	r2, [r7, #12]
 800e1d4:	6852      	ldr	r2, [r2, #4]
 800e1d6:	4610      	mov	r0, r2
 800e1d8:	4798      	blx	r3
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800e1da:	4b06      	ldr	r3, [pc, #24]	; (800e1f4 <mbedtls_md_setup+0x7c>)
 800e1dc:	e003      	b.n	800e1e6 <mbedtls_md_setup+0x6e>
        }
    }

    ctx->md_info = md_info;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	601a      	str	r2, [r3, #0]

    return( 0 );
 800e1e4:	2300      	movs	r3, #0
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	ffffaf00 	.word	0xffffaf00
 800e1f4:	ffffae80 	.word	0xffffae80

0800e1f8 <mbedtls_md>:
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]
 800e204:	603b      	str	r3, [r7, #0]
    if( md_info == NULL )
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d101      	bne.n	800e210 <mbedtls_md+0x18>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e20c:	4b06      	ldr	r3, [pc, #24]	; (800e228 <mbedtls_md+0x30>)
 800e20e:	e006      	b.n	800e21e <mbedtls_md+0x26>

    return( md_info->digest_func( input, ilen, output ) );
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	69db      	ldr	r3, [r3, #28]
 800e214:	683a      	ldr	r2, [r7, #0]
 800e216:	6879      	ldr	r1, [r7, #4]
 800e218:	68b8      	ldr	r0, [r7, #8]
 800e21a:	4798      	blx	r3
 800e21c:	4603      	mov	r3, r0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	ffffaf00 	.word	0xffffaf00

0800e22c <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b090      	sub	sp, #64	; 0x40
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d007      	beq.n	800e24e <mbedtls_md_hmac_starts+0x22>
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d003      	beq.n	800e24e <mbedtls_md_hmac_starts+0x22>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d101      	bne.n	800e252 <mbedtls_md_hmac_starts+0x26>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e24e:	4b4f      	ldr	r3, [pc, #316]	; (800e38c <mbedtls_md_hmac_starts+0x160>)
 800e250:	e098      	b.n	800e384 <mbedtls_md_hmac_starts+0x158>

    if( keylen > (size_t) ctx->md_info->block_size )
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	461a      	mov	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d92a      	bls.n	800e2b6 <mbedtls_md_hmac_starts+0x8a>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	6852      	ldr	r2, [r2, #4]
 800e26a:	4610      	mov	r0, r2
 800e26c:	4798      	blx	r3
 800e26e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e272:	2b00      	cmp	r3, #0
 800e274:	d178      	bne.n	800e368 <mbedtls_md_hmac_starts+0x13c>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	695b      	ldr	r3, [r3, #20]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	6850      	ldr	r0, [r2, #4]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	68b9      	ldr	r1, [r7, #8]
 800e284:	4798      	blx	r3
 800e286:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d16e      	bne.n	800e36c <mbedtls_md_hmac_starts+0x140>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	699b      	ldr	r3, [r3, #24]
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	6852      	ldr	r2, [r2, #4]
 800e298:	f107 0110 	add.w	r1, r7, #16
 800e29c:	4610      	mov	r0, r2
 800e29e:	4798      	blx	r3
 800e2a0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d163      	bne.n	800e370 <mbedtls_md_hmac_starts+0x144>
            goto cleanup;

        keylen = ctx->md_info->size;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	607b      	str	r3, [r7, #4]
        key = sum;
 800e2b0:	f107 0310 	add.w	r3, r7, #16
 800e2b4:	60bb      	str	r3, [r7, #8]
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	637b      	str	r3, [r7, #52]	; 0x34
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	6812      	ldr	r2, [r2, #0]
 800e2c4:	68d2      	ldr	r2, [r2, #12]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	633b      	str	r3, [r7, #48]	; 0x30

    memset( ipad, 0x36, ctx->md_info->block_size );
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	2136      	movs	r1, #54	; 0x36
 800e2d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2d6:	f00f fee1 	bl	801e09c <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	215c      	movs	r1, #92	; 0x5c
 800e2e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2e6:	f00f fed9 	bl	801e09c <memset>

    for( i = 0; i < keylen; i++ )
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2ee:	e01e      	b.n	800e32e <mbedtls_md_hmac_starts+0x102>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800e2f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f4:	4413      	add	r3, r2
 800e2f6:	7819      	ldrb	r1, [r3, #0]
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	4413      	add	r3, r2
 800e2fe:	781a      	ldrb	r2, [r3, #0]
 800e300:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e304:	4403      	add	r3, r0
 800e306:	404a      	eors	r2, r1
 800e308:	b2d2      	uxtb	r2, r2
 800e30a:	701a      	strb	r2, [r3, #0]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800e30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e310:	4413      	add	r3, r2
 800e312:	7819      	ldrb	r1, [r3, #0]
 800e314:	68ba      	ldr	r2, [r7, #8]
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	4413      	add	r3, r2
 800e31a:	781a      	ldrb	r2, [r3, #0]
 800e31c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e320:	4403      	add	r3, r0
 800e322:	404a      	eors	r2, r1
 800e324:	b2d2      	uxtb	r2, r2
 800e326:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < keylen; i++ )
 800e328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32a:	3301      	adds	r3, #1
 800e32c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e32e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	429a      	cmp	r2, r3
 800e334:	d3dc      	bcc.n	800e2f0 <mbedtls_md_hmac_starts+0xc4>
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	691b      	ldr	r3, [r3, #16]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	6852      	ldr	r2, [r2, #4]
 800e340:	4610      	mov	r0, r2
 800e342:	4798      	blx	r3
 800e344:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d113      	bne.n	800e374 <mbedtls_md_hmac_starts+0x148>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	6850      	ldr	r0, [r2, #4]
                                           ctx->md_info->block_size ) ) != 0 )
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	6812      	ldr	r2, [r2, #0]
 800e35a:	68d2      	ldr	r2, [r2, #12]
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e35c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e35e:	4798      	blx	r3
 800e360:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e364:	2b00      	cmp	r3, #0
        goto cleanup;

cleanup:
 800e366:	e006      	b.n	800e376 <mbedtls_md_hmac_starts+0x14a>
            goto cleanup;
 800e368:	bf00      	nop
 800e36a:	e004      	b.n	800e376 <mbedtls_md_hmac_starts+0x14a>
            goto cleanup;
 800e36c:	bf00      	nop
 800e36e:	e002      	b.n	800e376 <mbedtls_md_hmac_starts+0x14a>
            goto cleanup;
 800e370:	bf00      	nop
 800e372:	e000      	b.n	800e376 <mbedtls_md_hmac_starts+0x14a>
        goto cleanup;
 800e374:	bf00      	nop
    mbedtls_zeroize( sum, sizeof( sum ) );
 800e376:	f107 0310 	add.w	r3, r7, #16
 800e37a:	2120      	movs	r1, #32
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7ff fe87 	bl	800e090 <mbedtls_zeroize>

    return( ret );
 800e382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e384:	4618      	mov	r0, r3
 800e386:	3740      	adds	r7, #64	; 0x40
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	ffffaf00 	.word	0xffffaf00

0800e390 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d007      	beq.n	800e3b2 <mbedtls_md_hmac_update+0x22>
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d003      	beq.n	800e3b2 <mbedtls_md_hmac_update+0x22>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	689b      	ldr	r3, [r3, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <mbedtls_md_hmac_update+0x26>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e3b2:	4b07      	ldr	r3, [pc, #28]	; (800e3d0 <mbedtls_md_hmac_update+0x40>)
 800e3b4:	e008      	b.n	800e3c8 <mbedtls_md_hmac_update+0x38>

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	695b      	ldr	r3, [r3, #20]
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	6850      	ldr	r0, [r2, #4]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	68b9      	ldr	r1, [r7, #8]
 800e3c4:	4798      	blx	r3
 800e3c6:	4603      	mov	r3, r0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	ffffaf00 	.word	0xffffaf00

0800e3d4 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08c      	sub	sp, #48	; 0x30
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d007      	beq.n	800e3f4 <mbedtls_md_hmac_finish+0x20>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d003      	beq.n	800e3f4 <mbedtls_md_hmac_finish+0x20>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d101      	bne.n	800e3f8 <mbedtls_md_hmac_finish+0x24>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e3f4:	4b29      	ldr	r3, [pc, #164]	; (800e49c <mbedtls_md_hmac_finish+0xc8>)
 800e3f6:	e04c      	b.n	800e492 <mbedtls_md_hmac_finish+0xbe>

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	689b      	ldr	r3, [r3, #8]
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	6812      	ldr	r2, [r2, #0]
 800e400:	68d2      	ldr	r2, [r2, #12]
 800e402:	4413      	add	r3, r2
 800e404:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	699b      	ldr	r3, [r3, #24]
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	6852      	ldr	r2, [r2, #4]
 800e410:	f107 0108 	add.w	r1, r7, #8
 800e414:	4610      	mov	r0, r2
 800e416:	4798      	blx	r3
 800e418:	62b8      	str	r0, [r7, #40]	; 0x28
 800e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d001      	beq.n	800e424 <mbedtls_md_hmac_finish+0x50>
        return( ret );
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	e036      	b.n	800e492 <mbedtls_md_hmac_finish+0xbe>
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	691b      	ldr	r3, [r3, #16]
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	6852      	ldr	r2, [r2, #4]
 800e42e:	4610      	mov	r0, r2
 800e430:	4798      	blx	r3
 800e432:	62b8      	str	r0, [r7, #40]	; 0x28
 800e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e436:	2b00      	cmp	r3, #0
 800e438:	d001      	beq.n	800e43e <mbedtls_md_hmac_finish+0x6a>
        return( ret );
 800e43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43c:	e029      	b.n	800e492 <mbedtls_md_hmac_finish+0xbe>
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	695b      	ldr	r3, [r3, #20]
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	6850      	ldr	r0, [r2, #4]
                                           ctx->md_info->block_size ) ) != 0 )
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	6812      	ldr	r2, [r2, #0]
 800e44c:	68d2      	ldr	r2, [r2, #12]
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 800e44e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e450:	4798      	blx	r3
 800e452:	62b8      	str	r0, [r7, #40]	; 0x28
 800e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e456:	2b00      	cmp	r3, #0
 800e458:	d001      	beq.n	800e45e <mbedtls_md_hmac_finish+0x8a>
        return( ret );
 800e45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45c:	e019      	b.n	800e492 <mbedtls_md_hmac_finish+0xbe>
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	695b      	ldr	r3, [r3, #20]
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	6850      	ldr	r0, [r2, #4]
                                           ctx->md_info->size ) ) != 0 )
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	6812      	ldr	r2, [r2, #0]
 800e46c:	6892      	ldr	r2, [r2, #8]
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 800e46e:	f107 0108 	add.w	r1, r7, #8
 800e472:	4798      	blx	r3
 800e474:	62b8      	str	r0, [r7, #40]	; 0x28
 800e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d001      	beq.n	800e480 <mbedtls_md_hmac_finish+0xac>
        return( ret );
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	e008      	b.n	800e492 <mbedtls_md_hmac_finish+0xbe>
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	6852      	ldr	r2, [r2, #4]
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	4610      	mov	r0, r2
 800e48e:	4798      	blx	r3
 800e490:	4603      	mov	r3, r0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3730      	adds	r7, #48	; 0x30
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	ffffaf00 	.word	0xffffaf00

0800e4a0 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d007      	beq.n	800e4be <mbedtls_md_hmac_reset+0x1e>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d003      	beq.n	800e4be <mbedtls_md_hmac_reset+0x1e>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d101      	bne.n	800e4c2 <mbedtls_md_hmac_reset+0x22>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e4be:	4b10      	ldr	r3, [pc, #64]	; (800e500 <mbedtls_md_hmac_reset+0x60>)
 800e4c0:	e01a      	b.n	800e4f8 <mbedtls_md_hmac_reset+0x58>

    ipad = (unsigned char *) ctx->hmac_ctx;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	60fb      	str	r3, [r7, #12]

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	691b      	ldr	r3, [r3, #16]
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	6852      	ldr	r2, [r2, #4]
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	4798      	blx	r3
 800e4d6:	60b8      	str	r0, [r7, #8]
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d001      	beq.n	800e4e2 <mbedtls_md_hmac_reset+0x42>
        return( ret );
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	e00a      	b.n	800e4f8 <mbedtls_md_hmac_reset+0x58>
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	6850      	ldr	r0, [r2, #4]
                                       ctx->md_info->block_size ) );
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	6812      	ldr	r2, [r2, #0]
 800e4f0:	68d2      	ldr	r2, [r2, #12]
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e4f2:	68f9      	ldr	r1, [r7, #12]
 800e4f4:	4798      	blx	r3
 800e4f6:	4603      	mov	r3, r0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	ffffaf00 	.word	0xffffaf00

0800e504 <mbedtls_md_process>:

    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
    if( ctx == NULL || ctx->md_info == NULL )
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d003      	beq.n	800e51c <mbedtls_md_process+0x18>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d101      	bne.n	800e520 <mbedtls_md_process+0x1c>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e51c:	4b07      	ldr	r3, [pc, #28]	; (800e53c <mbedtls_md_process+0x38>)
 800e51e:	e008      	b.n	800e532 <mbedtls_md_process+0x2e>

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	6852      	ldr	r2, [r2, #4]
 800e52a:	6839      	ldr	r1, [r7, #0]
 800e52c:	4610      	mov	r0, r2
 800e52e:	4798      	blx	r3
 800e530:	4603      	mov	r3, r0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	ffffaf00 	.word	0xffffaf00

0800e540 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
    if( md_info == NULL )
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d101      	bne.n	800e552 <mbedtls_md_get_size+0x12>
        return( 0 );
 800e54e:	2300      	movs	r3, #0
 800e550:	e002      	b.n	800e558 <mbedtls_md_get_size+0x18>

    return md_info->size;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	b2db      	uxtb	r3, r3
}
 800e558:	4618      	mov	r0, r3
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <sha224_starts_wrap>:
 * Wrappers for generic message digests
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 800e56c:	2101      	movs	r1, #1
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f003 f8f8 	bl	8011764 <mbedtls_sha256_starts_ret>
 800e574:	4603      	mov	r3, r0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <sha224_update_wrap>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b084      	sub	sp, #16
 800e582:	af00      	add	r7, sp, #0
 800e584:	60f8      	str	r0, [r7, #12]
 800e586:	60b9      	str	r1, [r7, #8]
 800e588:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	68b9      	ldr	r1, [r7, #8]
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f004 fe9c 	bl	80132cc <mbedtls_sha256_update_ret>
 800e594:	4603      	mov	r3, r0
                                       input, ilen ) );
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <sha224_finish_wrap>:

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b082      	sub	sp, #8
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	6039      	str	r1, [r7, #0]
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 800e5a8:	6839      	ldr	r1, [r7, #0]
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f004 ff04 	bl	80133b8 <mbedtls_sha256_finish_ret>
 800e5b0:	4603      	mov	r3, r0
                                       output ) );
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <sha224_wrap>:

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b084      	sub	sp, #16
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	60f8      	str	r0, [r7, #12]
 800e5c2:	60b9      	str	r1, [r7, #8]
 800e5c4:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	68b9      	ldr	r1, [r7, #8]
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f005 f82d 	bl	801362c <mbedtls_sha256_ret>
 800e5d2:	4603      	mov	r3, r0
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <sha224_ctx_alloc>:

static void *sha224_ctx_alloc( void )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 800e5e2:	216c      	movs	r1, #108	; 0x6c
 800e5e4:	2001      	movs	r0, #1
 800e5e6:	f00f fcdf 	bl	801dfa8 <calloc>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <sha224_ctx_alloc+0x1e>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f003 f887 	bl	8011708 <mbedtls_sha256_init>

    return( ctx );
 800e5fa:	687b      	ldr	r3, [r7, #4]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <sha224_ctx_free>:

static void sha224_ctx_free( void *ctx )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f003 f888 	bl	8011722 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f00f fd02 	bl	801e01c <free>
}
 800e618:	bf00      	nop
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <sha224_clone_wrap>:

static void sha224_clone_wrap( void *dst, const void *src )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 800e62a:	6839      	ldr	r1, [r7, #0]
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f003 f888 	bl	8011742 <mbedtls_sha256_clone>
                    (const mbedtls_sha256_context *) src );
}
 800e632:	bf00      	nop
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <sha224_process_wrap>:

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b082      	sub	sp, #8
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
 800e642:	6039      	str	r1, [r7, #0]
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f003 f8f6 	bl	8011838 <mbedtls_internal_sha256_process>
 800e64c:	4603      	mov	r3, r0
                                             data ) );
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <sha256_starts_wrap>:
    sha224_clone_wrap,
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b082      	sub	sp, #8
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 800e65e:	2100      	movs	r1, #0
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f003 f87f 	bl	8011764 <mbedtls_sha256_starts_ret>
 800e666:	4603      	mov	r3, r0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <sha256_wrap>:

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 800e67c:	2300      	movs	r3, #0
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	68b9      	ldr	r1, [r7, #8]
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f004 ffd2 	bl	801362c <mbedtls_sha256_ret>
 800e688:	4603      	mov	r3, r0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
	...

0800e694 <oid_x520_attr_from_asn1>:
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	4b16      	ldr	r3, [pc, #88]	; (800e6f8 <oid_x520_attr_from_asn1+0x64>)
 800e69e:	60fb      	str	r3, [r7, #12]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	60bb      	str	r3, [r7, #8]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <oid_x520_attr_from_asn1+0x1c>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d11a      	bne.n	800e6e6 <oid_x520_attr_from_asn1+0x52>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	e01d      	b.n	800e6f0 <oid_x520_attr_from_asn1+0x5c>
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	685a      	ldr	r2, [r3, #4]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d10d      	bne.n	800e6dc <oid_x520_attr_from_asn1+0x48>
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	6818      	ldr	r0, [r3, #0]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6899      	ldr	r1, [r3, #8]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	f00f fcad 	bl	801e02c <memcmp>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <oid_x520_attr_from_asn1+0x48>
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	e009      	b.n	800e6f0 <oid_x520_attr_from_asn1+0x5c>
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	3314      	adds	r3, #20
 800e6e0:	60fb      	str	r3, [r7, #12]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	60bb      	str	r3, [r7, #8]
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1e2      	bne.n	800e6b4 <oid_x520_attr_from_asn1+0x20>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3710      	adds	r7, #16
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	08024d80 	.word	0x08024d80

0800e6fc <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7ff ffc4 	bl	800e694 <oid_x520_attr_from_asn1>
 800e70c:	60f8      	str	r0, [r7, #12]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d102      	bne.n	800e71a <mbedtls_oid_get_attr_short_name+0x1e>
 800e714:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e718:	e004      	b.n	800e724 <mbedtls_oid_get_attr_short_name+0x28>
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	691a      	ldr	r2, [r3, #16]
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	2300      	movs	r3, #0
 800e724:	4618      	mov	r0, r3
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <oid_x509_ext_from_asn1>:
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	4b16      	ldr	r3, [pc, #88]	; (800e790 <oid_x509_ext_from_asn1+0x64>)
 800e736:	60fb      	str	r3, [r7, #12]
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	60bb      	str	r3, [r7, #8]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d002      	beq.n	800e748 <oid_x509_ext_from_asn1+0x1c>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d11a      	bne.n	800e77e <oid_x509_ext_from_asn1+0x52>
 800e748:	2300      	movs	r3, #0
 800e74a:	e01d      	b.n	800e788 <oid_x509_ext_from_asn1+0x5c>
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	685a      	ldr	r2, [r3, #4]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	429a      	cmp	r2, r3
 800e756:	d10d      	bne.n	800e774 <oid_x509_ext_from_asn1+0x48>
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	6818      	ldr	r0, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6899      	ldr	r1, [r3, #8]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	461a      	mov	r2, r3
 800e766:	f00f fc61 	bl	801e02c <memcmp>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d101      	bne.n	800e774 <oid_x509_ext_from_asn1+0x48>
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	e009      	b.n	800e788 <oid_x509_ext_from_asn1+0x5c>
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	3314      	adds	r3, #20
 800e778:	60fb      	str	r3, [r7, #12]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	60bb      	str	r3, [r7, #8]
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d1e2      	bne.n	800e74c <oid_x509_ext_from_asn1+0x20>
 800e786:	2300      	movs	r3, #0
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	08024f10 	.word	0x08024f10

0800e794 <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7ff ffc4 	bl	800e72c <oid_x509_ext_from_asn1>
 800e7a4:	60f8      	str	r0, [r7, #12]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d102      	bne.n	800e7b2 <mbedtls_oid_get_x509_ext_type+0x1e>
 800e7ac:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e7b0:	e004      	b.n	800e7bc <mbedtls_oid_get_x509_ext_type+0x28>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	691a      	ldr	r2, [r3, #16]
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	601a      	str	r2, [r3, #0]
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <oid_ext_key_usage_from_asn1>:
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	4b16      	ldr	r3, [pc, #88]	; (800e828 <oid_ext_key_usage_from_asn1+0x64>)
 800e7ce:	60fb      	str	r3, [r7, #12]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	60bb      	str	r3, [r7, #8]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d002      	beq.n	800e7e0 <oid_ext_key_usage_from_asn1+0x1c>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d11a      	bne.n	800e816 <oid_ext_key_usage_from_asn1+0x52>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	e01d      	b.n	800e820 <oid_ext_key_usage_from_asn1+0x5c>
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	685a      	ldr	r2, [r3, #4]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d10d      	bne.n	800e80c <oid_ext_key_usage_from_asn1+0x48>
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	6818      	ldr	r0, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6899      	ldr	r1, [r3, #8]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	f00f fc15 	bl	801e02c <memcmp>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d101      	bne.n	800e80c <oid_ext_key_usage_from_asn1+0x48>
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	e009      	b.n	800e820 <oid_ext_key_usage_from_asn1+0x5c>
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	3310      	adds	r3, #16
 800e810:	60fb      	str	r3, [r7, #12]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	60bb      	str	r3, [r7, #8]
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1e2      	bne.n	800e7e4 <oid_ext_key_usage_from_asn1+0x20>
 800e81e:	2300      	movs	r3, #0
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	08024f88 	.word	0x08024f88

0800e82c <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7ff ffc4 	bl	800e7c4 <oid_ext_key_usage_from_asn1>
 800e83c:	60f8      	str	r0, [r7, #12]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d102      	bne.n	800e84a <mbedtls_oid_get_extended_key_usage+0x1e>
 800e844:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e848:	e004      	b.n	800e854 <mbedtls_oid_get_extended_key_usage+0x28>
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	68da      	ldr	r2, [r3, #12]
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	601a      	str	r2, [r3, #0]
 800e852:	2300      	movs	r3, #0
 800e854:	4618      	mov	r0, r3
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <oid_sig_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	4b16      	ldr	r3, [pc, #88]	; (800e8c0 <oid_sig_alg_from_asn1+0x64>)
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	60bb      	str	r3, [r7, #8]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d002      	beq.n	800e878 <oid_sig_alg_from_asn1+0x1c>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d11a      	bne.n	800e8ae <oid_sig_alg_from_asn1+0x52>
 800e878:	2300      	movs	r3, #0
 800e87a:	e01d      	b.n	800e8b8 <oid_sig_alg_from_asn1+0x5c>
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	429a      	cmp	r2, r3
 800e886:	d10d      	bne.n	800e8a4 <oid_sig_alg_from_asn1+0x48>
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	6818      	ldr	r0, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6899      	ldr	r1, [r3, #8]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	461a      	mov	r2, r3
 800e896:	f00f fbc9 	bl	801e02c <memcmp>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <oid_sig_alg_from_asn1+0x48>
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	e009      	b.n	800e8b8 <oid_sig_alg_from_asn1+0x5c>
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	3314      	adds	r3, #20
 800e8a8:	60fb      	str	r3, [r7, #12]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	60bb      	str	r3, [r7, #8]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1e2      	bne.n	800e87c <oid_sig_alg_from_asn1+0x20>
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	08024ff8 	.word	0x08024ff8

0800e8c4 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7ff ffc4 	bl	800e85c <oid_sig_alg_from_asn1>
 800e8d4:	60f8      	str	r0, [r7, #12]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <mbedtls_oid_get_sig_alg_desc+0x1e>
 800e8dc:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e8e0:	e004      	b.n	800e8ec <mbedtls_oid_get_sig_alg_desc+0x28>
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	68da      	ldr	r2, [r3, #12]
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	601a      	str	r2, [r3, #0]
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b086      	sub	sp, #24
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7ff ffab 	bl	800e85c <oid_sig_alg_from_asn1>
 800e906:	6178      	str	r0, [r7, #20]
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d102      	bne.n	800e914 <mbedtls_oid_get_sig_alg+0x20>
 800e90e:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e912:	e008      	b.n	800e926 <mbedtls_oid_get_sig_alg+0x32>
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	7c1a      	ldrb	r2, [r3, #16]
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	701a      	strb	r2, [r3, #0]
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	7c5a      	ldrb	r2, [r3, #17]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	701a      	strb	r2, [r3, #0]
 800e924:	2300      	movs	r3, #0
 800e926:	4618      	mov	r0, r3
 800e928:	3718      	adds	r7, #24
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
	...

0800e930 <oid_pk_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	4b16      	ldr	r3, [pc, #88]	; (800e994 <oid_pk_alg_from_asn1+0x64>)
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	60bb      	str	r3, [r7, #8]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d002      	beq.n	800e94c <oid_pk_alg_from_asn1+0x1c>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d11a      	bne.n	800e982 <oid_pk_alg_from_asn1+0x52>
 800e94c:	2300      	movs	r3, #0
 800e94e:	e01d      	b.n	800e98c <oid_pk_alg_from_asn1+0x5c>
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	685a      	ldr	r2, [r3, #4]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d10d      	bne.n	800e978 <oid_pk_alg_from_asn1+0x48>
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	6818      	ldr	r0, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6899      	ldr	r1, [r3, #8]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	461a      	mov	r2, r3
 800e96a:	f00f fb5f 	bl	801e02c <memcmp>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d101      	bne.n	800e978 <oid_pk_alg_from_asn1+0x48>
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	e009      	b.n	800e98c <oid_pk_alg_from_asn1+0x5c>
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	3314      	adds	r3, #20
 800e97c:	60fb      	str	r3, [r7, #12]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	60bb      	str	r3, [r7, #8]
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1e2      	bne.n	800e950 <oid_pk_alg_from_asn1+0x20>
 800e98a:	2300      	movs	r3, #0
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	08025048 	.word	0x08025048

0800e998 <mbedtls_oid_get_pk_alg>:
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7ff ffc4 	bl	800e930 <oid_pk_alg_from_asn1>
 800e9a8:	60f8      	str	r0, [r7, #12]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d102      	bne.n	800e9b6 <mbedtls_oid_get_pk_alg+0x1e>
 800e9b0:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e9b4:	e004      	b.n	800e9c0 <mbedtls_oid_get_pk_alg+0x28>
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	7c1a      	ldrb	r2, [r3, #16]
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	701a      	strb	r2, [r3, #0]
 800e9be:	2300      	movs	r3, #0
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 800e9c8:	b480      	push	{r7}
 800e9ca:	b087      	sub	sp, #28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	73fb      	strb	r3, [r7, #15]
 800e9d6:	4b10      	ldr	r3, [pc, #64]	; (800ea18 <mbedtls_oid_get_oid_by_md+0x50>)
 800e9d8:	617b      	str	r3, [r7, #20]
 800e9da:	e011      	b.n	800ea00 <mbedtls_oid_get_oid_by_md+0x38>
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	7c1b      	ldrb	r3, [r3, #16]
 800e9e0:	7bfa      	ldrb	r2, [r7, #15]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d109      	bne.n	800e9fa <mbedtls_oid_get_oid_by_md+0x32>
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	601a      	str	r2, [r3, #0]
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	685a      	ldr	r2, [r3, #4]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	e008      	b.n	800ea0c <mbedtls_oid_get_oid_by_md+0x44>
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	3314      	adds	r3, #20
 800e9fe:	617b      	str	r3, [r7, #20]
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d1e9      	bne.n	800e9dc <mbedtls_oid_get_oid_by_md+0x14>
 800ea08:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	371c      	adds	r7, #28
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	08025098 	.word	0x08025098

0800ea1c <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	60fb      	str	r3, [r7, #12]
 800ea2a:	e004      	b.n	800ea36 <mbedtls_zeroize+0x1a>
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	60fa      	str	r2, [r7, #12]
 800ea32:	2200      	movs	r2, #0
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	1e5a      	subs	r2, r3, #1
 800ea3a:	603a      	str	r2, [r7, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1f5      	bne.n	800ea2c <mbedtls_zeroize+0x10>
}
 800ea40:	bf00      	nop
 800ea42:	bf00      	nop
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <mbedtls_pem_init>:

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b082      	sub	sp, #8
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 800ea56:	220c      	movs	r2, #12
 800ea58:	2100      	movs	r1, #0
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f00f fb1e 	bl	801e09c <memset>
}
 800ea60:	bf00      	nop
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b08e      	sub	sp, #56	; 0x38
 800ea6c:	af02      	add	r7, sp, #8
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	603b      	str	r3, [r7, #0]
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d101      	bne.n	800ea80 <mbedtls_pem_read_buffer+0x18>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 800ea7c:	4b63      	ldr	r3, [pc, #396]	; (800ec0c <mbedtls_pem_read_buffer+0x1a4>)
 800ea7e:	e0c0      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>

    s1 = (unsigned char *) strstr( (const char *) data, header );
 800ea80:	68b9      	ldr	r1, [r7, #8]
 800ea82:	6838      	ldr	r0, [r7, #0]
 800ea84:	f00f fd46 	bl	801e514 <strstr>
 800ea88:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( s1 == NULL )
 800ea8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d101      	bne.n	800ea94 <mbedtls_pem_read_buffer+0x2c>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800ea90:	4b5f      	ldr	r3, [pc, #380]	; (800ec10 <mbedtls_pem_read_buffer+0x1a8>)
 800ea92:	e0b6      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 800ea94:	6879      	ldr	r1, [r7, #4]
 800ea96:	6838      	ldr	r0, [r7, #0]
 800ea98:	f00f fd3c 	bl	801e514 <strstr>
 800ea9c:	6278      	str	r0, [r7, #36]	; 0x24

    if( s2 == NULL || s2 <= s1 )
 800ea9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d003      	beq.n	800eaac <mbedtls_pem_read_buffer+0x44>
 800eaa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d801      	bhi.n	800eab0 <mbedtls_pem_read_buffer+0x48>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800eaac:	4b58      	ldr	r3, [pc, #352]	; (800ec10 <mbedtls_pem_read_buffer+0x1a8>)
 800eaae:	e0a8      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>

    s1 += strlen( header );
 800eab0:	68b8      	ldr	r0, [r7, #8]
 800eab2:	f7f1 fb8d 	bl	80001d0 <strlen>
 800eab6:	4602      	mov	r2, r0
 800eab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaba:	4413      	add	r3, r2
 800eabc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == ' '  ) s1++;
 800eabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	2b20      	cmp	r3, #32
 800eac4:	d102      	bne.n	800eacc <mbedtls_pem_read_buffer+0x64>
 800eac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac8:	3301      	adds	r3, #1
 800eaca:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == '\r' ) s1++;
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	2b0d      	cmp	r3, #13
 800ead2:	d102      	bne.n	800eada <mbedtls_pem_read_buffer+0x72>
 800ead4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead6:	3301      	adds	r3, #1
 800ead8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == '\n' ) s1++;
 800eada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	2b0a      	cmp	r3, #10
 800eae0:	d110      	bne.n	800eb04 <mbedtls_pem_read_buffer+0x9c>
 800eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae4:	3301      	adds	r3, #1
 800eae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
 800eae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaea:	62bb      	str	r3, [r7, #40]	; 0x28
    end += strlen( footer );
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7f1 fb6f 	bl	80001d0 <strlen>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf6:	4413      	add	r3, r2
 800eaf8:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == ' '  ) end++;
 800eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	2b20      	cmp	r3, #32
 800eb00:	d105      	bne.n	800eb0e <mbedtls_pem_read_buffer+0xa6>
 800eb02:	e001      	b.n	800eb08 <mbedtls_pem_read_buffer+0xa0>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800eb04:	4b42      	ldr	r3, [pc, #264]	; (800ec10 <mbedtls_pem_read_buffer+0x1a8>)
 800eb06:	e07c      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>
    if( *end == ' '  ) end++;
 800eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == '\r' ) end++;
 800eb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	2b0d      	cmp	r3, #13
 800eb14:	d102      	bne.n	800eb1c <mbedtls_pem_read_buffer+0xb4>
 800eb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb18:	3301      	adds	r3, #1
 800eb1a:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == '\n' ) end++;
 800eb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	2b0a      	cmp	r3, #10
 800eb22:	d102      	bne.n	800eb2a <mbedtls_pem_read_buffer+0xc2>
 800eb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb26:	3301      	adds	r3, #1
 800eb28:	62bb      	str	r3, [r7, #40]	; 0x28
    *use_len = end - data;
 800eb2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	1ad3      	subs	r3, r2, r3
 800eb30:	461a      	mov	r2, r3
 800eb32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb34:	601a      	str	r2, [r3, #0]

    enc = 0;
 800eb36:	2300      	movs	r3, #0
 800eb38:	623b      	str	r3, [r7, #32]

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 800eb3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3e:	1ad3      	subs	r3, r2, r3
 800eb40:	2b15      	cmp	r3, #21
 800eb42:	dd09      	ble.n	800eb58 <mbedtls_pem_read_buffer+0xf0>
 800eb44:	2216      	movs	r2, #22
 800eb46:	4933      	ldr	r1, [pc, #204]	; (800ec14 <mbedtls_pem_read_buffer+0x1ac>)
 800eb48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb4a:	f00f fa6f 	bl	801e02c <memcmp>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d101      	bne.n	800eb58 <mbedtls_pem_read_buffer+0xf0>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 800eb54:	4b30      	ldr	r3, [pc, #192]	; (800ec18 <mbedtls_pem_read_buffer+0x1b0>)
 800eb56:	e054      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 800eb58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d301      	bcc.n	800eb64 <mbedtls_pem_read_buffer+0xfc>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 800eb60:	4b2e      	ldr	r3, [pc, #184]	; (800ec1c <mbedtls_pem_read_buffer+0x1b4>)
 800eb62:	e04e      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 800eb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	f107 0214 	add.w	r2, r7, #20
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb72:	2100      	movs	r1, #0
 800eb74:	2000      	movs	r0, #0
 800eb76:	f7f7 fe77 	bl	8006868 <mbedtls_base64_decode>
 800eb7a:	61f8      	str	r0, [r7, #28]

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	f113 0f2c 	cmn.w	r3, #44	; 0x2c
 800eb82:	d103      	bne.n	800eb8c <mbedtls_pem_read_buffer+0x124>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800eb8a:	e03a      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	4619      	mov	r1, r3
 800eb90:	2001      	movs	r0, #1
 800eb92:	f00f fa09 	bl	801dfa8 <calloc>
 800eb96:	4603      	mov	r3, r0
 800eb98:	61bb      	str	r3, [r7, #24]
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d101      	bne.n	800eba4 <mbedtls_pem_read_buffer+0x13c>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 800eba0:	4b1f      	ldr	r3, [pc, #124]	; (800ec20 <mbedtls_pem_read_buffer+0x1b8>)
 800eba2:	e02e      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 800eba4:	6979      	ldr	r1, [r7, #20]
 800eba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	1ad3      	subs	r3, r2, r3
 800ebac:	f107 0214 	add.w	r2, r7, #20
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb4:	69b8      	ldr	r0, [r7, #24]
 800ebb6:	f7f7 fe57 	bl	8006868 <mbedtls_base64_decode>
 800ebba:	61f8      	str	r0, [r7, #28]
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00b      	beq.n	800ebda <mbedtls_pem_read_buffer+0x172>
    {
        mbedtls_zeroize( buf, len );
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	69b8      	ldr	r0, [r7, #24]
 800ebc8:	f7ff ff28 	bl	800ea1c <mbedtls_zeroize>
        mbedtls_free( buf );
 800ebcc:	69b8      	ldr	r0, [r7, #24]
 800ebce:	f00f fa25 	bl	801e01c <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800ebd8:	e013      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>
    }

    if( enc != 0 )
 800ebda:	6a3b      	ldr	r3, [r7, #32]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d009      	beq.n	800ebf4 <mbedtls_pem_read_buffer+0x18c>
            mbedtls_zeroize( buf, len );
            mbedtls_free( buf );
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
        }
#else
        mbedtls_zeroize( buf, len );
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	69b8      	ldr	r0, [r7, #24]
 800ebe6:	f7ff ff19 	bl	800ea1c <mbedtls_zeroize>
        mbedtls_free( buf );
 800ebea:	69b8      	ldr	r0, [r7, #24]
 800ebec:	f00f fa16 	bl	801e01c <free>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 800ebf0:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <mbedtls_pem_read_buffer+0x1b0>)
 800ebf2:	e006      	b.n	800ec02 <mbedtls_pem_read_buffer+0x19a>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	69ba      	ldr	r2, [r7, #24]
 800ebf8:	601a      	str	r2, [r3, #0]
    ctx->buflen = len;
 800ebfa:	697a      	ldr	r2, [r7, #20]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	605a      	str	r2, [r3, #4]

    return( 0 );
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3730      	adds	r7, #48	; 0x30
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	ffffeb80 	.word	0xffffeb80
 800ec10:	ffffef80 	.word	0xffffef80
 800ec14:	080221d0 	.word	0x080221d0
 800ec18:	ffffec00 	.word	0xffffec00
 800ec1c:	ffffef00 	.word	0xffffef00
 800ec20:	ffffee80 	.word	0xffffee80

0800ec24 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
    if( ctx->buf != NULL )
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d007      	beq.n	800ec44 <mbedtls_pem_free+0x20>
        mbedtls_zeroize( ctx->buf, ctx->buflen );
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4610      	mov	r0, r2
 800ec40:	f7ff feec 	bl	800ea1c <mbedtls_zeroize>
    mbedtls_free( ctx->buf );
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f00f f9e7 	bl	801e01c <free>
    mbedtls_free( ctx->info );
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f00f f9e2 	bl	801e01c <free>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 800ec58:	210c      	movs	r1, #12
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff fede 	bl	800ea1c <mbedtls_zeroize>
}
 800ec60:	bf00      	nop
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <mbedtls_zeroize>:

#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	60fb      	str	r3, [r7, #12]
 800ec76:	e004      	b.n	800ec82 <mbedtls_zeroize+0x1a>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	1c5a      	adds	r2, r3, #1
 800ec7c:	60fa      	str	r2, [r7, #12]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	701a      	strb	r2, [r3, #0]
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	1e5a      	subs	r2, r3, #1
 800ec86:	603a      	str	r2, [r7, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d1f5      	bne.n	800ec78 <mbedtls_zeroize+0x10>
}
 800ec8c:	bf00      	nop
 800ec8e:	bf00      	nop
 800ec90:	3714      	adds	r7, #20
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr

0800ec9a <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b082      	sub	sp, #8
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00f      	beq.n	800ecc8 <mbedtls_pk_free+0x2e>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00b      	beq.n	800ecc8 <mbedtls_pk_free+0x2e>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	6852      	ldr	r2, [r2, #4]
 800ecba:	4610      	mov	r0, r2
 800ecbc:	4798      	blx	r3

    mbedtls_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 800ecbe:	2108      	movs	r1, #8
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7ff ffd1 	bl	800ec68 <mbedtls_zeroize>
 800ecc6:	e000      	b.n	800ecca <mbedtls_pk_free+0x30>
        return;
 800ecc8:	bf00      	nop
}
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	71fb      	strb	r3, [r7, #7]
    switch( pk_type ) {
 800ecda:	79fb      	ldrb	r3, [r7, #7]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d101      	bne.n	800ece4 <mbedtls_pk_info_from_type+0x14>
#if defined(MBEDTLS_RSA_C)
        case MBEDTLS_PK_RSA:
            return( &mbedtls_rsa_info );
 800ece0:	4b04      	ldr	r3, [pc, #16]	; (800ecf4 <mbedtls_pk_info_from_type+0x24>)
 800ece2:	e000      	b.n	800ece6 <mbedtls_pk_info_from_type+0x16>
        case MBEDTLS_PK_ECDSA:
            return( &mbedtls_ecdsa_info );
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
 800ece4:	2300      	movs	r3, #0
    }
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	370c      	adds	r7, #12
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	080250d4 	.word	0x080250d4

0800ecf8 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d006      	beq.n	800ed16 <mbedtls_pk_setup+0x1e>
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d003      	beq.n	800ed16 <mbedtls_pk_setup+0x1e>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d001      	beq.n	800ed1a <mbedtls_pk_setup+0x22>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ed16:	4b0b      	ldr	r3, [pc, #44]	; (800ed44 <mbedtls_pk_setup+0x4c>)
 800ed18:	e00f      	b.n	800ed3a <mbedtls_pk_setup+0x42>

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1e:	4798      	blx	r3
 800ed20:	4602      	mov	r2, r0
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	605a      	str	r2, [r3, #4]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <mbedtls_pk_setup+0x3a>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 800ed2e:	4b06      	ldr	r3, [pc, #24]	; (800ed48 <mbedtls_pk_setup+0x50>)
 800ed30:	e003      	b.n	800ed3a <mbedtls_pk_setup+0x42>

    ctx->pk_info = info;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	601a      	str	r2, [r3, #0]

    return( 0 );
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	ffffc180 	.word	0xffffc180
 800ed48:	ffffc080 	.word	0xffffc080

0800ed4c <mbedtls_pk_can_do>:

/*
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	460b      	mov	r3, r1
 800ed56:	70fb      	strb	r3, [r7, #3]
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d003      	beq.n	800ed66 <mbedtls_pk_can_do+0x1a>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d101      	bne.n	800ed6a <mbedtls_pk_can_do+0x1e>
        return( 0 );
 800ed66:	2300      	movs	r3, #0
 800ed68:	e006      	b.n	800ed78 <mbedtls_pk_can_do+0x2c>

    return( ctx->pk_info->can_do( type ) );
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	78fa      	ldrb	r2, [r7, #3]
 800ed72:	4610      	mov	r0, r2
 800ed74:	4798      	blx	r3
 800ed76:	4603      	mov	r3, r0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <pk_hashlen_helper>:

/*
 * Helper for mbedtls_pk_sign and mbedtls_pk_verify
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	4603      	mov	r3, r0
 800ed88:	6039      	str	r1, [r7, #0]
 800ed8a:	71fb      	strb	r3, [r7, #7]
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <pk_hashlen_helper+0x18>
        return( 0 );
 800ed94:	2300      	movs	r3, #0
 800ed96:	e012      	b.n	800edbe <pk_hashlen_helper+0x3e>

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 800ed98:	79fb      	ldrb	r3, [r7, #7]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7ff f992 	bl	800e0c4 <mbedtls_md_info_from_type>
 800eda0:	60f8      	str	r0, [r7, #12]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d102      	bne.n	800edae <pk_hashlen_helper+0x2e>
        return( -1 );
 800eda8:	f04f 33ff 	mov.w	r3, #4294967295
 800edac:	e007      	b.n	800edbe <pk_hashlen_helper+0x3e>

    *hash_len = mbedtls_md_get_size( md_info );
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f7ff fbc6 	bl	800e540 <mbedtls_md_get_size>
 800edb4:	4603      	mov	r3, r0
 800edb6:	461a      	mov	r2, r3
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	601a      	str	r2, [r3, #0]
    return( 0 );
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
	...

0800edc8 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 800edc8:	b590      	push	{r4, r7, lr}
 800edca:	b087      	sub	sp, #28
 800edcc:	af02      	add	r7, sp, #8
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	607a      	str	r2, [r7, #4]
 800edd2:	603b      	str	r3, [r7, #0]
 800edd4:	460b      	mov	r3, r1
 800edd6:	72fb      	strb	r3, [r7, #11]
    if( ctx == NULL || ctx->pk_info == NULL ||
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d00c      	beq.n	800edf8 <mbedtls_pk_verify+0x30>
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d008      	beq.n	800edf8 <mbedtls_pk_verify+0x30>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
 800ede6:	463a      	mov	r2, r7
 800ede8:	7afb      	ldrb	r3, [r7, #11]
 800edea:	4611      	mov	r1, r2
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff ffc7 	bl	800ed80 <pk_hashlen_helper>
 800edf2:	4603      	mov	r3, r0
    if( ctx == NULL || ctx->pk_info == NULL ||
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d001      	beq.n	800edfc <mbedtls_pk_verify+0x34>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800edf8:	4b0d      	ldr	r3, [pc, #52]	; (800ee30 <mbedtls_pk_verify+0x68>)
 800edfa:	e015      	b.n	800ee28 <mbedtls_pk_verify+0x60>

    if( ctx->pk_info->verify_func == NULL )
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d101      	bne.n	800ee0a <mbedtls_pk_verify+0x42>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800ee06:	4b0b      	ldr	r3, [pc, #44]	; (800ee34 <mbedtls_pk_verify+0x6c>)
 800ee08:	e00e      	b.n	800ee28 <mbedtls_pk_verify+0x60>

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	691c      	ldr	r4, [r3, #16]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6858      	ldr	r0, [r3, #4]
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	7af9      	ldrb	r1, [r7, #11]
 800ee18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1a:	9301      	str	r3, [sp, #4]
 800ee1c:	6a3b      	ldr	r3, [r7, #32]
 800ee1e:	9300      	str	r3, [sp, #0]
 800ee20:	4613      	mov	r3, r2
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	47a0      	blx	r4
 800ee26:	4603      	mov	r3, r0
                                       sig, sig_len ) );
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3714      	adds	r7, #20
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd90      	pop	{r4, r7, pc}
 800ee30:	ffffc180 	.word	0xffffc180
 800ee34:	ffffc100 	.word	0xffffc100

0800ee38 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b086      	sub	sp, #24
 800ee3c:	af02      	add	r7, sp, #8
 800ee3e:	60b9      	str	r1, [r7, #8]
 800ee40:	607a      	str	r2, [r7, #4]
 800ee42:	461a      	mov	r2, r3
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
 800ee48:	4613      	mov	r3, r2
 800ee4a:	73bb      	strb	r3, [r7, #14]
    if( ctx == NULL || ctx->pk_info == NULL )
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d003      	beq.n	800ee5a <mbedtls_pk_verify_ext+0x22>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d101      	bne.n	800ee5e <mbedtls_pk_verify_ext+0x26>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ee5a:	4b12      	ldr	r3, [pc, #72]	; (800eea4 <mbedtls_pk_verify_ext+0x6c>)
 800ee5c:	e01e      	b.n	800ee9c <mbedtls_pk_verify_ext+0x64>

    if( ! mbedtls_pk_can_do( ctx, type ) )
 800ee5e:	7bfb      	ldrb	r3, [r7, #15]
 800ee60:	4619      	mov	r1, r3
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f7ff ff72 	bl	800ed4c <mbedtls_pk_can_do>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d101      	bne.n	800ee72 <mbedtls_pk_verify_ext+0x3a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800ee6e:	4b0e      	ldr	r3, [pc, #56]	; (800eea8 <mbedtls_pk_verify_ext+0x70>)
 800ee70:	e014      	b.n	800ee9c <mbedtls_pk_verify_ext+0x64>

    if( type == MBEDTLS_PK_RSASSA_PSS )
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
 800ee74:	2b06      	cmp	r3, #6
 800ee76:	d101      	bne.n	800ee7c <mbedtls_pk_verify_ext+0x44>
        if( sig_len > mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
#else
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 800ee78:	4b0c      	ldr	r3, [pc, #48]	; (800eeac <mbedtls_pk_verify_ext+0x74>)
 800ee7a:	e00f      	b.n	800ee9c <mbedtls_pk_verify_ext+0x64>
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <mbedtls_pk_verify_ext+0x4e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ee82:	4b08      	ldr	r3, [pc, #32]	; (800eea4 <mbedtls_pk_verify_ext+0x6c>)
 800ee84:	e00a      	b.n	800ee9c <mbedtls_pk_verify_ext+0x64>

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 800ee86:	7bb9      	ldrb	r1, [r7, #14]
 800ee88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8a:	9301      	str	r3, [sp, #4]
 800ee8c:	6a3b      	ldr	r3, [r7, #32]
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	69ba      	ldr	r2, [r7, #24]
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7ff ff97 	bl	800edc8 <mbedtls_pk_verify>
 800ee9a:	4603      	mov	r3, r0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	ffffc180 	.word	0xffffc180
 800eea8:	ffffc100 	.word	0xffffc100
 800eeac:	ffffc680 	.word	0xffffc680

0800eeb0 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800eeb0:	b590      	push	{r4, r7, lr}
 800eeb2:	b089      	sub	sp, #36	; 0x24
 800eeb4:	af04      	add	r7, sp, #16
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	607a      	str	r2, [r7, #4]
 800eeba:	603b      	str	r3, [r7, #0]
 800eebc:	460b      	mov	r3, r1
 800eebe:	72fb      	strb	r3, [r7, #11]
    if( ctx == NULL || ctx->pk_info == NULL ||
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00c      	beq.n	800eee0 <mbedtls_pk_sign+0x30>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d008      	beq.n	800eee0 <mbedtls_pk_sign+0x30>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
 800eece:	463a      	mov	r2, r7
 800eed0:	7afb      	ldrb	r3, [r7, #11]
 800eed2:	4611      	mov	r1, r2
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7ff ff53 	bl	800ed80 <pk_hashlen_helper>
 800eeda:	4603      	mov	r3, r0
    if( ctx == NULL || ctx->pk_info == NULL ||
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d001      	beq.n	800eee4 <mbedtls_pk_sign+0x34>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800eee0:	4b0f      	ldr	r3, [pc, #60]	; (800ef20 <mbedtls_pk_sign+0x70>)
 800eee2:	e019      	b.n	800ef18 <mbedtls_pk_sign+0x68>

    if( ctx->pk_info->sign_func == NULL )
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	695b      	ldr	r3, [r3, #20]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <mbedtls_pk_sign+0x42>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800eeee:	4b0d      	ldr	r3, [pc, #52]	; (800ef24 <mbedtls_pk_sign+0x74>)
 800eef0:	e012      	b.n	800ef18 <mbedtls_pk_sign+0x68>

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	695c      	ldr	r4, [r3, #20]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6858      	ldr	r0, [r3, #4]
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	7af9      	ldrb	r1, [r7, #11]
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	9303      	str	r3, [sp, #12]
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	9302      	str	r3, [sp, #8]
 800ef08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0a:	9301      	str	r3, [sp, #4]
 800ef0c:	6a3b      	ldr	r3, [r7, #32]
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	4613      	mov	r3, r2
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	47a0      	blx	r4
 800ef16:	4603      	mov	r3, r0
                                     sig, sig_len, f_rng, p_rng ) );
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3714      	adds	r7, #20
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd90      	pop	{r4, r7, pc}
 800ef20:	ffffc180 	.word	0xffffc180
 800ef24:	ffffc100 	.word	0xffffc100

0800ef28 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800ef28:	b590      	push	{r4, r7, lr}
 800ef2a:	b089      	sub	sp, #36	; 0x24
 800ef2c:	af04      	add	r7, sp, #16
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	603b      	str	r3, [r7, #0]
    if( ctx == NULL || ctx->pk_info == NULL )
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d003      	beq.n	800ef44 <mbedtls_pk_encrypt+0x1c>
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d101      	bne.n	800ef48 <mbedtls_pk_encrypt+0x20>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ef44:	4b0f      	ldr	r3, [pc, #60]	; (800ef84 <mbedtls_pk_encrypt+0x5c>)
 800ef46:	e018      	b.n	800ef7a <mbedtls_pk_encrypt+0x52>

    if( ctx->pk_info->encrypt_func == NULL )
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	69db      	ldr	r3, [r3, #28]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d101      	bne.n	800ef56 <mbedtls_pk_encrypt+0x2e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800ef52:	4b0d      	ldr	r3, [pc, #52]	; (800ef88 <mbedtls_pk_encrypt+0x60>)
 800ef54:	e011      	b.n	800ef7a <mbedtls_pk_encrypt+0x52>

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	69dc      	ldr	r4, [r3, #28]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	6858      	ldr	r0, [r3, #4]
 800ef60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef62:	9303      	str	r3, [sp, #12]
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	9302      	str	r3, [sp, #8]
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	9301      	str	r3, [sp, #4]
 800ef6c:	6a3b      	ldr	r3, [r7, #32]
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	68b9      	ldr	r1, [r7, #8]
 800ef76:	47a0      	blx	r4
 800ef78:	4603      	mov	r3, r0
                output, olen, osize, f_rng, p_rng ) );
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3714      	adds	r7, #20
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd90      	pop	{r4, r7, pc}
 800ef82:	bf00      	nop
 800ef84:	ffffc180 	.word	0xffffc180
 800ef88:	ffffc100 	.word	0xffffc100

0800ef8c <mbedtls_pk_get_bitlen>:

/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d003      	beq.n	800efa2 <mbedtls_pk_get_bitlen+0x16>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <mbedtls_pk_get_bitlen+0x1a>
        return( 0 );
 800efa2:	2300      	movs	r3, #0
 800efa4:	e007      	b.n	800efb6 <mbedtls_pk_get_bitlen+0x2a>

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	689b      	ldr	r3, [r3, #8]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	6852      	ldr	r2, [r2, #4]
 800efb0:	4610      	mov	r0, r2
 800efb2:	4798      	blx	r3
 800efb4:	4603      	mov	r3, r0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3708      	adds	r7, #8
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
	...

0800efc0 <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
    if( ctx == NULL || ctx->pk_info == NULL )
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d003      	beq.n	800efd8 <mbedtls_pk_debug+0x18>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <mbedtls_pk_debug+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800efd8:	4b0a      	ldr	r3, [pc, #40]	; (800f004 <mbedtls_pk_debug+0x44>)
 800efda:	e00f      	b.n	800effc <mbedtls_pk_debug+0x3c>

    if( ctx->pk_info->debug_func == NULL )
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d101      	bne.n	800efea <mbedtls_pk_debug+0x2a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800efe6:	4b08      	ldr	r3, [pc, #32]	; (800f008 <mbedtls_pk_debug+0x48>)
 800efe8:	e008      	b.n	800effc <mbedtls_pk_debug+0x3c>

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	6852      	ldr	r2, [r2, #4]
 800eff4:	6839      	ldr	r1, [r7, #0]
 800eff6:	4610      	mov	r0, r2
 800eff8:	4798      	blx	r3
    return( 0 );
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3708      	adds	r7, #8
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	ffffc180 	.word	0xffffc180
 800f008:	ffffc100 	.word	0xffffc100

0800f00c <mbedtls_pk_get_name>:

/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d003      	beq.n	800f022 <mbedtls_pk_get_name+0x16>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d101      	bne.n	800f026 <mbedtls_pk_get_name+0x1a>
        return( "invalid PK" );
 800f022:	4b05      	ldr	r3, [pc, #20]	; (800f038 <mbedtls_pk_get_name+0x2c>)
 800f024:	e002      	b.n	800f02c <mbedtls_pk_get_name+0x20>

    return( ctx->pk_info->name );
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	685b      	ldr	r3, [r3, #4]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr
 800f038:	080221e8 	.word	0x080221e8

0800f03c <mbedtls_pk_get_type>:

/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d003      	beq.n	800f052 <mbedtls_pk_get_type+0x16>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <mbedtls_pk_get_type+0x1a>
        return( MBEDTLS_PK_NONE );
 800f052:	2300      	movs	r3, #0
 800f054:	e002      	b.n	800f05c <mbedtls_pk_get_type+0x20>

    return( ctx->pk_info->type );
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	781b      	ldrb	r3, [r3, #0]
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	370c      	adds	r7, #12
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr

0800f068 <rsa_can_do>:
}
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
 800f068:	b480      	push	{r7}
 800f06a:	b083      	sub	sp, #12
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	4603      	mov	r3, r0
 800f070:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_RSA ||
 800f072:	79fb      	ldrb	r3, [r7, #7]
 800f074:	2b01      	cmp	r3, #1
 800f076:	d002      	beq.n	800f07e <rsa_can_do+0x16>
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	2b06      	cmp	r3, #6
 800f07c:	d101      	bne.n	800f082 <rsa_can_do+0x1a>
 800f07e:	2301      	movs	r3, #1
 800f080:	e000      	b.n	800f084 <rsa_can_do+0x1c>
 800f082:	2300      	movs	r3, #0
            type == MBEDTLS_PK_RSASSA_PSS );
}
 800f084:	4618      	mov	r0, r3
 800f086:	370c      	adds	r7, #12
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <rsa_get_bitlen>:

static size_t rsa_get_bitlen( const void *ctx )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	60fb      	str	r3, [r7, #12]
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f000 fd09 	bl	800fab4 <mbedtls_rsa_get_len>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	00db      	lsls	r3, r3, #3
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
	...

0800f0b0 <rsa_verify_wrap>:

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b08c      	sub	sp, #48	; 0x30
 800f0b4:	af04      	add	r7, sp, #16
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	607a      	str	r2, [r7, #4]
 800f0ba:	603b      	str	r3, [r7, #0]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	72fb      	strb	r3, [r7, #11]
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	61fb      	str	r3, [r7, #28]
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 800f0c4:	69f8      	ldr	r0, [r7, #28]
 800f0c6:	f000 fcf5 	bl	800fab4 <mbedtls_rsa_get_len>
 800f0ca:	61b8      	str	r0, [r7, #24]
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 800f0cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d201      	bcs.n	800f0d8 <rsa_verify_wrap+0x28>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 800f0d4:	4b10      	ldr	r3, [pc, #64]	; (800f118 <rsa_verify_wrap+0x68>)
 800f0d6:	e01a      	b.n	800f10e <rsa_verify_wrap+0x5e>

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 800f0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0da:	9303      	str	r3, [sp, #12]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	9302      	str	r3, [sp, #8]
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	9301      	str	r3, [sp, #4]
 800f0e4:	7afb      	ldrb	r3, [r7, #11]
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	69f8      	ldr	r0, [r7, #28]
 800f0f0:	f001 fdea 	bl	8010cc8 <mbedtls_rsa_pkcs1_verify>
 800f0f4:	6178      	str	r0, [r7, #20]
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <rsa_verify_wrap+0x50>
                                  MBEDTLS_RSA_PUBLIC, md_alg,
                                  (unsigned int) hash_len, hash, sig ) ) != 0 )
        return( ret );
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	e006      	b.n	800f10e <rsa_verify_wrap+0x5e>

    if( sig_len > rsa_len )
 800f100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	429a      	cmp	r2, r3
 800f106:	d901      	bls.n	800f10c <rsa_verify_wrap+0x5c>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 800f108:	4b04      	ldr	r3, [pc, #16]	; (800f11c <rsa_verify_wrap+0x6c>)
 800f10a:	e000      	b.n	800f10e <rsa_verify_wrap+0x5e>

    return( 0 );
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3720      	adds	r7, #32
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	ffffbc80 	.word	0xffffbc80
 800f11c:	ffffc700 	.word	0xffffc700

0800f120 <rsa_sign_wrap>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b08a      	sub	sp, #40	; 0x28
 800f124:	af04      	add	r7, sp, #16
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	607a      	str	r2, [r7, #4]
 800f12a:	603b      	str	r3, [r7, #0]
 800f12c:	460b      	mov	r3, r1
 800f12e:	72fb      	strb	r3, [r7, #11]
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	617b      	str	r3, [r7, #20]
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 800f134:	6978      	ldr	r0, [r7, #20]
 800f136:	f000 fcbd 	bl	800fab4 <mbedtls_rsa_get_len>
 800f13a:	4602      	mov	r2, r0
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	601a      	str	r2, [r3, #0]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 800f140:	6a3b      	ldr	r3, [r7, #32]
 800f142:	9303      	str	r3, [sp, #12]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	9302      	str	r3, [sp, #8]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	9301      	str	r3, [sp, #4]
 800f14c:	7afb      	ldrb	r3, [r7, #11]
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	2301      	movs	r3, #1
 800f152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f156:	6978      	ldr	r0, [r7, #20]
 800f158:	f001 fd10 	bl	8010b7c <mbedtls_rsa_pkcs1_sign>
 800f15c:	4603      	mov	r3, r0
                md_alg, (unsigned int) hash_len, hash, sig ) );
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3718      	adds	r7, #24
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
	...

0800f168 <rsa_decrypt_wrap>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b08a      	sub	sp, #40	; 0x28
 800f16c:	af04      	add	r7, sp, #16
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]
 800f174:	603b      	str	r3, [r7, #0]
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	617b      	str	r3, [r7, #20]

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 800f17a:	6978      	ldr	r0, [r7, #20]
 800f17c:	f000 fc9a 	bl	800fab4 <mbedtls_rsa_get_len>
 800f180:	4602      	mov	r2, r0
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	4293      	cmp	r3, r2
 800f186:	d001      	beq.n	800f18c <rsa_decrypt_wrap+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f188:	4b0a      	ldr	r3, [pc, #40]	; (800f1b4 <rsa_decrypt_wrap+0x4c>)
 800f18a:	e00e      	b.n	800f1aa <rsa_decrypt_wrap+0x42>

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18e:	9303      	str	r3, [sp, #12]
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	9302      	str	r3, [sp, #8]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	9301      	str	r3, [sp, #4]
 800f198:	6a3b      	ldr	r3, [r7, #32]
 800f19a:	9300      	str	r3, [sp, #0]
 800f19c:	2301      	movs	r3, #1
 800f19e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1a2:	6978      	ldr	r0, [r7, #20]
 800f1a4:	f001 fb4c 	bl	8010840 <mbedtls_rsa_pkcs1_decrypt>
 800f1a8:	4603      	mov	r3, r0
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3718      	adds	r7, #24
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	ffffbf80 	.word	0xffffbf80

0800f1b8 <rsa_encrypt_wrap>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b08a      	sub	sp, #40	; 0x28
 800f1bc:	af04      	add	r7, sp, #16
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]
 800f1c4:	603b      	str	r3, [r7, #0]
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	617b      	str	r3, [r7, #20]
    *olen = mbedtls_rsa_get_len( rsa );
 800f1ca:	6978      	ldr	r0, [r7, #20]
 800f1cc:	f000 fc72 	bl	800fab4 <mbedtls_rsa_get_len>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	601a      	str	r2, [r3, #0]

    if( *olen > osize )
 800f1d6:	6a3b      	ldr	r3, [r7, #32]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d201      	bcs.n	800f1e4 <rsa_encrypt_wrap+0x2c>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );
 800f1e0:	4b09      	ldr	r3, [pc, #36]	; (800f208 <rsa_encrypt_wrap+0x50>)
 800f1e2:	e00c      	b.n	800f1fe <rsa_encrypt_wrap+0x46>

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	9302      	str	r3, [sp, #8]
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	9301      	str	r3, [sp, #4]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1f6:	6978      	ldr	r0, [r7, #20]
 800f1f8:	f001 f96a 	bl	80104d0 <mbedtls_rsa_pkcs1_encrypt>
 800f1fc:	4603      	mov	r3, r0
                                       ilen, input, output ) );
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3718      	adds	r7, #24
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	ffffbc00 	.word	0xffffbc00

0800f20c <rsa_check_pair_wrap>:

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 800f216:	6839      	ldr	r1, [r7, #0]
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 fce7 	bl	800fbec <mbedtls_rsa_check_pub_priv>
 800f21e:	4603      	mov	r3, r0
                                (const mbedtls_rsa_context *) prv ) );
}
 800f220:	4618      	mov	r0, r3
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <rsa_alloc_wrap>:

static void *rsa_alloc_wrap( void )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 800f22e:	21ac      	movs	r1, #172	; 0xac
 800f230:	2001      	movs	r0, #1
 800f232:	f00e feb9 	bl	801dfa8 <calloc>
 800f236:	4603      	mov	r3, r0
 800f238:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d004      	beq.n	800f24a <rsa_alloc_wrap+0x22>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 800f240:	2200      	movs	r2, #0
 800f242:	2100      	movs	r1, #0
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 fc0d 	bl	800fa64 <mbedtls_rsa_init>

    return( ctx );
 800f24a:	687b      	ldr	r3, [r7, #4]
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <rsa_free_wrap>:

static void rsa_free_wrap( void *ctx )
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f001 fd57 	bl	8010d10 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f00e feda 	bl	801e01c <free>
}
 800f268:	bf00      	nop
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <rsa_debug>:

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
    items->type = MBEDTLS_PK_DEBUG_MPI;
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	2201      	movs	r2, #1
 800f27e:	701a      	strb	r2, [r3, #0]
    items->name = "rsa.N";
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	4a0d      	ldr	r2, [pc, #52]	; (800f2b8 <rsa_debug+0x48>)
 800f284:	605a      	str	r2, [r3, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f103 0208 	add.w	r2, r3, #8
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	609a      	str	r2, [r3, #8]

    items++;
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	330c      	adds	r3, #12
 800f294:	603b      	str	r3, [r7, #0]

    items->type = MBEDTLS_PK_DEBUG_MPI;
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	2201      	movs	r2, #1
 800f29a:	701a      	strb	r2, [r3, #0]
    items->name = "rsa.E";
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	4a07      	ldr	r2, [pc, #28]	; (800f2bc <rsa_debug+0x4c>)
 800f2a0:	605a      	str	r2, [r3, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f103 0214 	add.w	r2, r3, #20
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	609a      	str	r2, [r3, #8]
}
 800f2ac:	bf00      	nop
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr
 800f2b8:	080221f4 	.word	0x080221f4
 800f2bc:	080221fc 	.word	0x080221fc

0800f2c0 <mbedtls_pk_rsa>:
 *
 * \warning You must make sure the PK context actually holds an RSA context
 * before using this function!
 */
static inline mbedtls_rsa_context *mbedtls_pk_rsa( const mbedtls_pk_context pk )
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	463b      	mov	r3, r7
 800f2c8:	e883 0003 	stmia.w	r3, {r0, r1}
    return( (mbedtls_rsa_context *) (pk).pk_ctx );
 800f2cc:	687b      	ldr	r3, [r7, #4]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	370c      	adds	r7, #12
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
	...

0800f2dc <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b08e      	sub	sp, #56	; 0x38
 800f2e0:	af08      	add	r7, sp, #32
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800f2e8:	f107 0210 	add.w	r2, r7, #16
 800f2ec:	2330      	movs	r3, #48	; 0x30
 800f2ee:	68b9      	ldr	r1, [r7, #8]
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f7f7 f8cf 	bl	8006494 <mbedtls_asn1_get_tag>
 800f2f6:	6178      	str	r0, [r7, #20]
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d003      	beq.n	800f306 <pk_get_rsapubkey+0x2a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f304:	e07e      	b.n	800f404 <pk_get_rsapubkey+0x128>

    if( *p + len != end )
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	4413      	add	r3, r2
 800f30e:	68ba      	ldr	r2, [r7, #8]
 800f310:	429a      	cmp	r2, r3
 800f312:	d001      	beq.n	800f318 <pk_get_rsapubkey+0x3c>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 800f314:	4b3d      	ldr	r3, [pc, #244]	; (800f40c <pk_get_rsapubkey+0x130>)
 800f316:	e075      	b.n	800f404 <pk_get_rsapubkey+0x128>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800f318:	f107 0210 	add.w	r2, r7, #16
 800f31c:	2302      	movs	r3, #2
 800f31e:	68b9      	ldr	r1, [r7, #8]
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f7f7 f8b7 	bl	8006494 <mbedtls_asn1_get_tag>
 800f326:	6178      	str	r0, [r7, #20]
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d003      	beq.n	800f336 <pk_get_rsapubkey+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f334:	e066      	b.n	800f404 <pk_get_rsapubkey+0x128>

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6819      	ldr	r1, [r3, #0]
 800f33a:	693a      	ldr	r2, [r7, #16]
 800f33c:	2300      	movs	r3, #0
 800f33e:	9306      	str	r3, [sp, #24]
 800f340:	2300      	movs	r3, #0
 800f342:	9305      	str	r3, [sp, #20]
 800f344:	2300      	movs	r3, #0
 800f346:	9304      	str	r3, [sp, #16]
 800f348:	2300      	movs	r3, #0
 800f34a:	9303      	str	r3, [sp, #12]
 800f34c:	2300      	movs	r3, #0
 800f34e:	9302      	str	r3, [sp, #8]
 800f350:	2300      	movs	r3, #0
 800f352:	9301      	str	r3, [sp, #4]
 800f354:	2300      	movs	r3, #0
 800f356:	9300      	str	r3, [sp, #0]
 800f358:	2300      	movs	r3, #0
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f000 f961 	bl	800f622 <mbedtls_rsa_import_raw>
 800f360:	6178      	str	r0, [r7, #20]
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <pk_get_rsapubkey+0x90>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 800f368:	4b29      	ldr	r3, [pc, #164]	; (800f410 <pk_get_rsapubkey+0x134>)
 800f36a:	e04b      	b.n	800f404 <pk_get_rsapubkey+0x128>

    *p += len;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	441a      	add	r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	601a      	str	r2, [r3, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800f378:	f107 0210 	add.w	r2, r7, #16
 800f37c:	2302      	movs	r3, #2
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f7f7 f887 	bl	8006494 <mbedtls_asn1_get_tag>
 800f386:	6178      	str	r0, [r7, #20]
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d003      	beq.n	800f396 <pk_get_rsapubkey+0xba>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f394:	e036      	b.n	800f404 <pk_get_rsapubkey+0x128>

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	693a      	ldr	r2, [r7, #16]
 800f39c:	9206      	str	r2, [sp, #24]
 800f39e:	9305      	str	r3, [sp, #20]
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	9304      	str	r3, [sp, #16]
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9303      	str	r3, [sp, #12]
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	9302      	str	r3, [sp, #8]
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	9301      	str	r3, [sp, #4]
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	9300      	str	r3, [sp, #0]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 f931 	bl	800f622 <mbedtls_rsa_import_raw>
 800f3c0:	6178      	str	r0, [r7, #20]
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d001      	beq.n	800f3cc <pk_get_rsapubkey+0xf0>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 800f3c8:	4b11      	ldr	r3, [pc, #68]	; (800f410 <pk_get_rsapubkey+0x134>)
 800f3ca:	e01b      	b.n	800f404 <pk_get_rsapubkey+0x128>

    *p += len;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	441a      	add	r2, r3
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	601a      	str	r2, [r3, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 fa1b 	bl	800f814 <mbedtls_rsa_complete>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d105      	bne.n	800f3f0 <pk_get_rsapubkey+0x114>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fb71 	bl	800facc <mbedtls_rsa_check_pubkey>
 800f3ea:	4603      	mov	r3, r0
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d001      	beq.n	800f3f4 <pk_get_rsapubkey+0x118>
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 800f3f0:	4b07      	ldr	r3, [pc, #28]	; (800f410 <pk_get_rsapubkey+0x134>)
 800f3f2:	e007      	b.n	800f404 <pk_get_rsapubkey+0x128>
    }

    if( *p != end )
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d001      	beq.n	800f402 <pk_get_rsapubkey+0x126>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 800f3fe:	4b03      	ldr	r3, [pc, #12]	; (800f40c <pk_get_rsapubkey+0x130>)
 800f400:	e000      	b.n	800f404 <pk_get_rsapubkey+0x128>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	ffffc49a 	.word	0xffffc49a
 800f410:	ffffc500 	.word	0xffffc500

0800f414 <pk_get_pk_alg>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b088      	sub	sp, #32
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	607a      	str	r2, [r7, #4]
 800f420:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 800f422:	220c      	movs	r2, #12
 800f424:	2100      	movs	r1, #0
 800f426:	6838      	ldr	r0, [r7, #0]
 800f428:	f00e fe38 	bl	801e09c <memset>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 800f42c:	f107 0210 	add.w	r2, r7, #16
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	68b9      	ldr	r1, [r7, #8]
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f7f7 f99c 	bl	8006772 <mbedtls_asn1_get_alg>
 800f43a:	61f8      	str	r0, [r7, #28]
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d003      	beq.n	800f44a <pk_get_pk_alg+0x36>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	f5a3 536a 	sub.w	r3, r3, #14976	; 0x3a80
 800f448:	e01d      	b.n	800f486 <pk_get_pk_alg+0x72>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 800f44a:	f107 0310 	add.w	r3, r7, #16
 800f44e:	6879      	ldr	r1, [r7, #4]
 800f450:	4618      	mov	r0, r3
 800f452:	f7ff faa1 	bl	800e998 <mbedtls_oid_get_pk_alg>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <pk_get_pk_alg+0x4c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 800f45c:	4b0c      	ldr	r3, [pc, #48]	; (800f490 <pk_get_pk_alg+0x7c>)
 800f45e:	e012      	b.n	800f486 <pk_get_pk_alg+0x72>

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	2b01      	cmp	r3, #1
 800f466:	d10d      	bne.n	800f484 <pk_get_pk_alg+0x70>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	681b      	ldr	r3, [r3, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 800f46c:	2b05      	cmp	r3, #5
 800f46e:	d003      	beq.n	800f478 <pk_get_pk_alg+0x64>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d103      	bne.n	800f480 <pk_get_pk_alg+0x6c>
                params->len != 0 ) )
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	685b      	ldr	r3, [r3, #4]
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <pk_get_pk_alg+0x70>
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 800f480:	4b04      	ldr	r3, [pc, #16]	; (800f494 <pk_get_pk_alg+0x80>)
 800f482:	e000      	b.n	800f486 <pk_get_pk_alg+0x72>
    }

    return( 0 );
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3720      	adds	r7, #32
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	ffffc380 	.word	0xffffc380
 800f494:	ffffc580 	.word	0xffffc580

0800f498 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b08c      	sub	sp, #48	; 0x30
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	75fb      	strb	r3, [r7, #23]
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800f4a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f4ac:	2330      	movs	r3, #48	; 0x30
 800f4ae:	68b9      	ldr	r1, [r7, #8]
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	f7f6 ffef 	bl	8006494 <mbedtls_asn1_get_tag>
 800f4b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <mbedtls_pk_parse_subpubkey+0x2e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 800f4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c0:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 800f4c4:	e061      	b.n	800f58a <mbedtls_pk_parse_subpubkey+0xf2>
    }

    end = *p + len;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	4413      	add	r3, r2
 800f4ce:	60bb      	str	r3, [r7, #8]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 800f4d0:	f107 0318 	add.w	r3, r7, #24
 800f4d4:	f107 0217 	add.w	r2, r7, #23
 800f4d8:	68b9      	ldr	r1, [r7, #8]
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f7ff ff9a 	bl	800f414 <pk_get_pk_alg>
 800f4e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d001      	beq.n	800f4ec <mbedtls_pk_parse_subpubkey+0x54>
        return( ret );
 800f4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ea:	e04e      	b.n	800f58a <mbedtls_pk_parse_subpubkey+0xf2>

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 800f4ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	68b9      	ldr	r1, [r7, #8]
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f7f7 f8a9 	bl	800664c <mbedtls_asn1_get_bitstring_null>
 800f4fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d003      	beq.n	800f50a <mbedtls_pk_parse_subpubkey+0x72>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f504:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f508:	e03f      	b.n	800f58a <mbedtls_pk_parse_subpubkey+0xf2>

    if( *p + len != end )
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f510:	4413      	add	r3, r2
 800f512:	68ba      	ldr	r2, [r7, #8]
 800f514:	429a      	cmp	r2, r3
 800f516:	d001      	beq.n	800f51c <mbedtls_pk_parse_subpubkey+0x84>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 800f518:	4b1e      	ldr	r3, [pc, #120]	; (800f594 <mbedtls_pk_parse_subpubkey+0xfc>)
 800f51a:	e036      	b.n	800f58a <mbedtls_pk_parse_subpubkey+0xf2>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 800f51c:	7dfb      	ldrb	r3, [r7, #23]
 800f51e:	4618      	mov	r0, r3
 800f520:	f7ff fbd6 	bl	800ecd0 <mbedtls_pk_info_from_type>
 800f524:	62b8      	str	r0, [r7, #40]	; 0x28
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d101      	bne.n	800f530 <mbedtls_pk_parse_subpubkey+0x98>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 800f52c:	4b1a      	ldr	r3, [pc, #104]	; (800f598 <mbedtls_pk_parse_subpubkey+0x100>)
 800f52e:	e02c      	b.n	800f58a <mbedtls_pk_parse_subpubkey+0xf2>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 800f530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7ff fbe0 	bl	800ecf8 <mbedtls_pk_setup>
 800f538:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d001      	beq.n	800f544 <mbedtls_pk_parse_subpubkey+0xac>
        return( ret );
 800f540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f542:	e022      	b.n	800f58a <mbedtls_pk_parse_subpubkey+0xf2>

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 800f544:	7dfb      	ldrb	r3, [r7, #23]
 800f546:	2b01      	cmp	r3, #1
 800f548:	d10c      	bne.n	800f564 <mbedtls_pk_parse_subpubkey+0xcc>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f550:	f7ff feb6 	bl	800f2c0 <mbedtls_pk_rsa>
 800f554:	4603      	mov	r3, r0
 800f556:	461a      	mov	r2, r3
 800f558:	68b9      	ldr	r1, [r7, #8]
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f7ff febe 	bl	800f2dc <pk_get_rsapubkey>
 800f560:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f562:	e001      	b.n	800f568 <mbedtls_pk_parse_subpubkey+0xd0>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 800f564:	4b0c      	ldr	r3, [pc, #48]	; (800f598 <mbedtls_pk_parse_subpubkey+0x100>)
 800f566:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ret == 0 && *p != end )
 800f568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d106      	bne.n	800f57c <mbedtls_pk_parse_subpubkey+0xe4>
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	429a      	cmp	r2, r3
 800f576:	d001      	beq.n	800f57c <mbedtls_pk_parse_subpubkey+0xe4>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 800f578:	4b06      	ldr	r3, [pc, #24]	; (800f594 <mbedtls_pk_parse_subpubkey+0xfc>)
 800f57a:	62fb      	str	r3, [r7, #44]	; 0x2c
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;

    if( ret != 0 )
 800f57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d002      	beq.n	800f588 <mbedtls_pk_parse_subpubkey+0xf0>
        mbedtls_pk_free( pk );
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7ff fb89 	bl	800ec9a <mbedtls_pk_free>

    return( ret );
 800f588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3730      	adds	r7, #48	; 0x30
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	ffffc49a 	.word	0xffffc49a
 800f598:	ffffc380 	.word	0xffffc380

0800f59c <mbedtls_zeroize>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800f59c:	b480      	push	{r7}
 800f59e:	b085      	sub	sp, #20
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	60fb      	str	r3, [r7, #12]
 800f5aa:	e004      	b.n	800f5b6 <mbedtls_zeroize+0x1a>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	60fa      	str	r2, [r7, #12]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	701a      	strb	r2, [r3, #0]
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	1e5a      	subs	r2, r3, #1
 800f5ba:	603a      	str	r2, [r7, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1f5      	bne.n	800f5ac <mbedtls_zeroize+0x10>
}
 800f5c0:	bf00      	nop
 800f5c2:	bf00      	nop
 800f5c4:	3714      	adds	r7, #20
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <mbedtls_safer_memcmp>:

/* constant-time buffer comparison */
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
 800f5ce:	b480      	push	{r7}
 800f5d0:	b089      	sub	sp, #36	; 0x24
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	60f8      	str	r0, [r7, #12]
 800f5d6:	60b9      	str	r1, [r7, #8]
 800f5d8:	607a      	str	r2, [r7, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	617b      	str	r3, [r7, #20]
    const unsigned char *B = (const unsigned char *) b;
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	613b      	str	r3, [r7, #16]
    unsigned char diff = 0;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	76fb      	strb	r3, [r7, #27]

    for( i = 0; i < n; i++ )
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	61fb      	str	r3, [r7, #28]
 800f5ea:	e00f      	b.n	800f60c <mbedtls_safer_memcmp+0x3e>
        diff |= A[i] ^ B[i];
 800f5ec:	697a      	ldr	r2, [r7, #20]
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	781a      	ldrb	r2, [r3, #0]
 800f5f4:	6939      	ldr	r1, [r7, #16]
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	440b      	add	r3, r1
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	4053      	eors	r3, r2
 800f5fe:	b2da      	uxtb	r2, r3
 800f600:	7efb      	ldrb	r3, [r7, #27]
 800f602:	4313      	orrs	r3, r2
 800f604:	76fb      	strb	r3, [r7, #27]
    for( i = 0; i < n; i++ )
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	3301      	adds	r3, #1
 800f60a:	61fb      	str	r3, [r7, #28]
 800f60c:	69fa      	ldr	r2, [r7, #28]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	429a      	cmp	r2, r3
 800f612:	d3eb      	bcc.n	800f5ec <mbedtls_safer_memcmp+0x1e>

    return( diff );
 800f614:	7efb      	ldrb	r3, [r7, #27]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3724      	adds	r7, #36	; 0x24
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr

0800f622 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b086      	sub	sp, #24
 800f626:	af00      	add	r7, sp, #0
 800f628:	60f8      	str	r0, [r7, #12]
 800f62a:	60b9      	str	r1, [r7, #8]
 800f62c:	607a      	str	r2, [r7, #4]
 800f62e:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800f630:	2300      	movs	r3, #0
 800f632:	617b      	str	r3, [r7, #20]

    if( N != NULL )
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d012      	beq.n	800f660 <mbedtls_rsa_import_raw+0x3e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	3308      	adds	r3, #8
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	68b9      	ldr	r1, [r7, #8]
 800f642:	4618      	mov	r0, r3
 800f644:	f7f7 fc14 	bl	8006e70 <mbedtls_mpi_read_binary>
 800f648:	6178      	str	r0, [r7, #20]
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d13f      	bne.n	800f6d0 <mbedtls_rsa_import_raw+0xae>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	3308      	adds	r3, #8
 800f654:	4618      	mov	r0, r3
 800f656:	f7f7 fbfd 	bl	8006e54 <mbedtls_mpi_size>
 800f65a:	4602      	mov	r2, r0
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	605a      	str	r2, [r3, #4]
    }

    if( P != NULL )
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00a      	beq.n	800f67c <mbedtls_rsa_import_raw+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	332c      	adds	r3, #44	; 0x2c
 800f66a:	6a3a      	ldr	r2, [r7, #32]
 800f66c:	6839      	ldr	r1, [r7, #0]
 800f66e:	4618      	mov	r0, r3
 800f670:	f7f7 fbfe 	bl	8006e70 <mbedtls_mpi_read_binary>
 800f674:	6178      	str	r0, [r7, #20]
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d12b      	bne.n	800f6d4 <mbedtls_rsa_import_raw+0xb2>

    if( Q != NULL )
 800f67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d00a      	beq.n	800f698 <mbedtls_rsa_import_raw+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	3338      	adds	r3, #56	; 0x38
 800f686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7f7 fbf0 	bl	8006e70 <mbedtls_mpi_read_binary>
 800f690:	6178      	str	r0, [r7, #20]
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d11f      	bne.n	800f6d8 <mbedtls_rsa_import_raw+0xb6>

    if( D != NULL )
 800f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00a      	beq.n	800f6b4 <mbedtls_rsa_import_raw+0x92>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	3320      	adds	r3, #32
 800f6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7f7 fbe2 	bl	8006e70 <mbedtls_mpi_read_binary>
 800f6ac:	6178      	str	r0, [r7, #20]
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d113      	bne.n	800f6dc <mbedtls_rsa_import_raw+0xba>

    if( E != NULL )
 800f6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d012      	beq.n	800f6e0 <mbedtls_rsa_import_raw+0xbe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	3314      	adds	r3, #20
 800f6be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7f7 fbd4 	bl	8006e70 <mbedtls_mpi_read_binary>
 800f6c8:	6178      	str	r0, [r7, #20]
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	2b00      	cmp	r3, #0

cleanup:
 800f6ce:	e007      	b.n	800f6e0 <mbedtls_rsa_import_raw+0xbe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 800f6d0:	bf00      	nop
 800f6d2:	e006      	b.n	800f6e2 <mbedtls_rsa_import_raw+0xc0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 800f6d4:	bf00      	nop
 800f6d6:	e004      	b.n	800f6e2 <mbedtls_rsa_import_raw+0xc0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 800f6d8:	bf00      	nop
 800f6da:	e002      	b.n	800f6e2 <mbedtls_rsa_import_raw+0xc0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 800f6dc:	bf00      	nop
 800f6de:	e000      	b.n	800f6e2 <mbedtls_rsa_import_raw+0xc0>
cleanup:
 800f6e0:	bf00      	nop

    if( ret != 0 )
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d003      	beq.n	800f6f0 <mbedtls_rsa_import_raw+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800f6ee:	e000      	b.n	800f6f2 <mbedtls_rsa_import_raw+0xd0>

    return( 0 );
 800f6f0:	2300      	movs	r3, #0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3718      	adds	r7, #24
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
	...

0800f6fc <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
 800f6fc:	b590      	push	{r4, r7, lr}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	685c      	ldr	r4, [r3, #4]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	3308      	adds	r3, #8
 800f710:	4618      	mov	r0, r3
 800f712:	f7f7 fb9f 	bl	8006e54 <mbedtls_mpi_size>
 800f716:	4603      	mov	r3, r0
 800f718:	429c      	cmp	r4, r3
 800f71a:	d104      	bne.n	800f726 <rsa_check_context+0x2a>
        ctx->len > MBEDTLS_MPI_MAX_SIZE )
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	685b      	ldr	r3, [r3, #4]
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 800f720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f724:	d901      	bls.n	800f72a <rsa_check_context+0x2e>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f726:	4b3a      	ldr	r3, [pc, #232]	; (800f810 <rsa_check_context+0x114>)
 800f728:	e06d      	b.n	800f806 <rsa_check_context+0x10a>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3308      	adds	r3, #8
 800f72e:	2100      	movs	r1, #0
 800f730:	4618      	mov	r0, r3
 800f732:	f7f7 fe97 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	dd08      	ble.n	800f74e <rsa_check_context+0x52>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	3308      	adds	r3, #8
 800f740:	2100      	movs	r1, #0
 800f742:	4618      	mov	r0, r3
 800f744:	f7f7 fadd 	bl	8006d02 <mbedtls_mpi_get_bit>
 800f748:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d101      	bne.n	800f752 <rsa_check_context+0x56>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f74e:	4b30      	ldr	r3, [pc, #192]	; (800f810 <rsa_check_context+0x114>)
 800f750:	e059      	b.n	800f806 <rsa_check_context+0x10a>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d025      	beq.n	800f7a4 <rsa_check_context+0xa8>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	332c      	adds	r3, #44	; 0x2c
 800f75c:	2100      	movs	r1, #0
 800f75e:	4618      	mov	r0, r3
 800f760:	f7f7 fe80 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f764:	4603      	mov	r3, r0
    if( is_priv &&
 800f766:	2b00      	cmp	r3, #0
 800f768:	dd1a      	ble.n	800f7a0 <rsa_check_context+0xa4>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	332c      	adds	r3, #44	; 0x2c
 800f76e:	2100      	movs	r1, #0
 800f770:	4618      	mov	r0, r3
 800f772:	f7f7 fac6 	bl	8006d02 <mbedtls_mpi_get_bit>
 800f776:	4603      	mov	r3, r0
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d011      	beq.n	800f7a0 <rsa_check_context+0xa4>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	3338      	adds	r3, #56	; 0x38
 800f780:	2100      	movs	r1, #0
 800f782:	4618      	mov	r0, r3
 800f784:	f7f7 fe6e 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f788:	4603      	mov	r3, r0
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	dd08      	ble.n	800f7a0 <rsa_check_context+0xa4>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	3338      	adds	r3, #56	; 0x38
 800f792:	2100      	movs	r1, #0
 800f794:	4618      	mov	r0, r3
 800f796:	f7f7 fab4 	bl	8006d02 <mbedtls_mpi_get_bit>
 800f79a:	4603      	mov	r3, r0
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d101      	bne.n	800f7a4 <rsa_check_context+0xa8>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f7a0:	4b1b      	ldr	r3, [pc, #108]	; (800f810 <rsa_check_context+0x114>)
 800f7a2:	e030      	b.n	800f806 <rsa_check_context+0x10a>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	3314      	adds	r3, #20
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7f7 fe5a 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	dc01      	bgt.n	800f7ba <rsa_check_context+0xbe>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f7b6:	4b16      	ldr	r3, [pc, #88]	; (800f810 <rsa_check_context+0x114>)
 800f7b8:	e025      	b.n	800f806 <rsa_check_context+0x10a>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d013      	beq.n	800f7e8 <rsa_check_context+0xec>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	3344      	adds	r3, #68	; 0x44
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7f7 fe4c 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f7cc:	4603      	mov	r3, r0
    if( is_priv &&
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	dd08      	ble.n	800f7e4 <rsa_check_context+0xe8>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	3350      	adds	r3, #80	; 0x50
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7f7 fe43 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f7de:	4603      	mov	r3, r0
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	dc01      	bgt.n	800f7e8 <rsa_check_context+0xec>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f7e4:	4b0a      	ldr	r3, [pc, #40]	; (800f810 <rsa_check_context+0x114>)
 800f7e6:	e00e      	b.n	800f806 <rsa_check_context+0x10a>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00a      	beq.n	800f804 <rsa_check_context+0x108>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	335c      	adds	r3, #92	; 0x5c
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7f7 fe35 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f7fa:	4603      	mov	r3, r0
    if( is_priv &&
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dc01      	bgt.n	800f804 <rsa_check_context+0x108>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f800:	4b03      	ldr	r3, [pc, #12]	; (800f810 <rsa_check_context+0x114>)
 800f802:	e000      	b.n	800f806 <rsa_check_context+0x10a>
    }
#endif

    return( 0 );
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	3714      	adds	r7, #20
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd90      	pop	{r4, r7, pc}
 800f80e:	bf00      	nop
 800f810:	ffffbf80 	.word	0xffffbf80

0800f814 <mbedtls_rsa_complete>:

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 800f814:	b5b0      	push	{r4, r5, r7, lr}
 800f816:	b090      	sub	sp, #64	; 0x40
 800f818:	af02      	add	r7, sp, #8
 800f81a:	6078      	str	r0, [r7, #4]
    int ret = 0;
 800f81c:	2300      	movs	r3, #0
 800f81e:	637b      	str	r3, [r7, #52]	; 0x34

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	3308      	adds	r3, #8
 800f824:	2100      	movs	r1, #0
 800f826:	4618      	mov	r0, r3
 800f828:	f7f7 fe1c 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	bf14      	ite	ne
 800f832:	2301      	movne	r3, #1
 800f834:	2300      	moveq	r3, #0
 800f836:	b2db      	uxtb	r3, r3
 800f838:	633b      	str	r3, [r7, #48]	; 0x30
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	332c      	adds	r3, #44	; 0x2c
 800f83e:	2100      	movs	r1, #0
 800f840:	4618      	mov	r0, r3
 800f842:	f7f7 fe0f 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f846:	4603      	mov	r3, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	bf14      	ite	ne
 800f84c:	2301      	movne	r3, #1
 800f84e:	2300      	moveq	r3, #0
 800f850:	b2db      	uxtb	r3, r3
 800f852:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	3338      	adds	r3, #56	; 0x38
 800f858:	2100      	movs	r1, #0
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7f7 fe02 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	bf14      	ite	ne
 800f866:	2301      	movne	r3, #1
 800f868:	2300      	moveq	r3, #0
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	62bb      	str	r3, [r7, #40]	; 0x28
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	3320      	adds	r3, #32
 800f872:	2100      	movs	r1, #0
 800f874:	4618      	mov	r0, r3
 800f876:	f7f7 fdf5 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	bf14      	ite	ne
 800f880:	2301      	movne	r3, #1
 800f882:	2300      	moveq	r3, #0
 800f884:	b2db      	uxtb	r3, r3
 800f886:	627b      	str	r3, [r7, #36]	; 0x24
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	3314      	adds	r3, #20
 800f88c:	2100      	movs	r1, #0
 800f88e:	4618      	mov	r0, r3
 800f890:	f7f7 fde8 	bl	8007464 <mbedtls_mpi_cmp_int>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	bf14      	ite	ne
 800f89a:	2301      	movne	r3, #1
 800f89c:	2300      	moveq	r3, #0
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	623b      	str	r3, [r7, #32]
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 800f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d00a      	beq.n	800f8be <mbedtls_rsa_complete+0xaa>
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d007      	beq.n	800f8be <mbedtls_rsa_complete+0xaa>
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d004      	beq.n	800f8be <mbedtls_rsa_complete+0xaa>
 800f8b4:	6a3b      	ldr	r3, [r7, #32]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d001      	beq.n	800f8be <mbedtls_rsa_complete+0xaa>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e000      	b.n	800f8c0 <mbedtls_rsa_complete+0xac>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	61fb      	str	r3, [r7, #28]
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 800f8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d00d      	beq.n	800f8e4 <mbedtls_rsa_complete+0xd0>
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10a      	bne.n	800f8e4 <mbedtls_rsa_complete+0xd0>
 800f8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d107      	bne.n	800f8e4 <mbedtls_rsa_complete+0xd0>
 800f8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d004      	beq.n	800f8e4 <mbedtls_rsa_complete+0xd0>
 800f8da:	6a3b      	ldr	r3, [r7, #32]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d001      	beq.n	800f8e4 <mbedtls_rsa_complete+0xd0>
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	e000      	b.n	800f8e6 <mbedtls_rsa_complete+0xd2>
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	61bb      	str	r3, [r7, #24]
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00a      	beq.n	800f904 <mbedtls_rsa_complete+0xf0>
 800f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d007      	beq.n	800f904 <mbedtls_rsa_complete+0xf0>
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d104      	bne.n	800f904 <mbedtls_rsa_complete+0xf0>
 800f8fa:	6a3b      	ldr	r3, [r7, #32]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d001      	beq.n	800f904 <mbedtls_rsa_complete+0xf0>
 800f900:	2301      	movs	r3, #1
 800f902:	e000      	b.n	800f906 <mbedtls_rsa_complete+0xf2>
 800f904:	2300      	movs	r3, #0
 800f906:	617b      	str	r3, [r7, #20]
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 800f908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00d      	beq.n	800f92a <mbedtls_rsa_complete+0x116>
 800f90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f910:	2b00      	cmp	r3, #0
 800f912:	d10a      	bne.n	800f92a <mbedtls_rsa_complete+0x116>
 800f914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f916:	2b00      	cmp	r3, #0
 800f918:	d107      	bne.n	800f92a <mbedtls_rsa_complete+0x116>
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d104      	bne.n	800f92a <mbedtls_rsa_complete+0x116>
 800f920:	6a3b      	ldr	r3, [r7, #32]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d001      	beq.n	800f92a <mbedtls_rsa_complete+0x116>
 800f926:	2301      	movs	r3, #1
 800f928:	e000      	b.n	800f92c <mbedtls_rsa_complete+0x118>
 800f92a:	2300      	movs	r3, #0
 800f92c:	613b      	str	r3, [r7, #16]

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d105      	bne.n	800f940 <mbedtls_rsa_complete+0x12c>
 800f934:	69bb      	ldr	r3, [r7, #24]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d102      	bne.n	800f940 <mbedtls_rsa_complete+0x12c>
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d001      	beq.n	800f944 <mbedtls_rsa_complete+0x130>
 800f940:	2301      	movs	r3, #1
 800f942:	e000      	b.n	800f946 <mbedtls_rsa_complete+0x132>
 800f944:	2300      	movs	r3, #0
 800f946:	60fb      	str	r3, [r7, #12]

    if( !is_priv && !is_pub )
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d104      	bne.n	800f958 <mbedtls_rsa_complete+0x144>
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d101      	bne.n	800f958 <mbedtls_rsa_complete+0x144>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f954:	4b42      	ldr	r3, [pc, #264]	; (800fa60 <mbedtls_rsa_complete+0x24c>)
 800f956:	e07f      	b.n	800fa58 <mbedtls_rsa_complete+0x244>

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 800f958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d120      	bne.n	800f9a0 <mbedtls_rsa_complete+0x18c>
 800f95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f960:	2b00      	cmp	r3, #0
 800f962:	d01d      	beq.n	800f9a0 <mbedtls_rsa_complete+0x18c>
 800f964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f966:	2b00      	cmp	r3, #0
 800f968:	d01a      	beq.n	800f9a0 <mbedtls_rsa_complete+0x18c>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f103 0008 	add.w	r0, r3, #8
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f103 012c 	add.w	r1, r3, #44	; 0x2c
                                         &ctx->Q ) ) != 0 )
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	3338      	adds	r3, #56	; 0x38
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 800f97a:	461a      	mov	r2, r3
 800f97c:	f7f9 fc63 	bl	8009246 <mbedtls_mpi_mul_mpi>
 800f980:	6378      	str	r0, [r7, #52]	; 0x34
 800f982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f984:	2b00      	cmp	r3, #0
 800f986:	d003      	beq.n	800f990 <mbedtls_rsa_complete+0x17c>
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800f988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98a:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800f98e:	e063      	b.n	800fa58 <mbedtls_rsa_complete+0x244>
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3308      	adds	r3, #8
 800f994:	4618      	mov	r0, r3
 800f996:	f7f7 fa5d 	bl	8006e54 <mbedtls_mpi_size>
 800f99a:	4602      	mov	r2, r0
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	605a      	str	r2, [r3, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d019      	beq.n	800f9da <mbedtls_rsa_complete+0x1c6>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f103 0008 	add.w	r0, r3, #8
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f103 0114 	add.w	r1, r3, #20
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f103 0220 	add.w	r2, r3, #32
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	3338      	adds	r3, #56	; 0x38
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	4623      	mov	r3, r4
 800f9c6:	f001 f9ed 	bl	8010da4 <mbedtls_rsa_deduce_primes>
 800f9ca:	6378      	str	r0, [r7, #52]	; 0x34
                                         &ctx->P, &ctx->Q );
        if( ret != 0 )
 800f9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d01b      	beq.n	800fa0a <mbedtls_rsa_complete+0x1f6>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800f9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9d4:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800f9d8:	e03e      	b.n	800fa58 <mbedtls_rsa_complete+0x244>

    }
    else if( d_missing )
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d014      	beq.n	800fa0a <mbedtls_rsa_complete+0x1f6>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
                                                         &ctx->Q,
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
                                                         &ctx->E,
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f103 0214 	add.w	r2, r3, #20
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	3320      	adds	r3, #32
 800f9f6:	f001 fb59 	bl	80110ac <mbedtls_rsa_deduce_private_exponent>
 800f9fa:	6378      	str	r0, [r7, #52]	; 0x34
 800f9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d003      	beq.n	800fa0a <mbedtls_rsa_complete+0x1f6>
                                                         &ctx->D ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800fa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa04:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800fa08:	e026      	b.n	800fa58 <mbedtls_rsa_complete+0x244>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d01d      	beq.n	800fa4c <mbedtls_rsa_complete+0x238>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f103 0420 	add.w	r4, r3, #32
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f103 0544 	add.w	r5, r3, #68	; 0x44
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	3350      	adds	r3, #80	; 0x50
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	325c      	adds	r2, #92	; 0x5c
 800fa30:	9201      	str	r2, [sp, #4]
 800fa32:	9300      	str	r3, [sp, #0]
 800fa34:	462b      	mov	r3, r5
 800fa36:	4622      	mov	r2, r4
 800fa38:	f001 fdee 	bl	8011618 <mbedtls_rsa_deduce_crt>
 800fa3c:	6378      	str	r0, [r7, #52]	; 0x34
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
        if( ret != 0 )
 800fa3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d003      	beq.n	800fa4c <mbedtls_rsa_complete+0x238>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800fa44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa46:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800fa4a:	e005      	b.n	800fa58 <mbedtls_rsa_complete+0x244>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	68f9      	ldr	r1, [r7, #12]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7ff fe53 	bl	800f6fc <rsa_check_context>
 800fa56:	4603      	mov	r3, r0
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3738      	adds	r7, #56	; 0x38
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bdb0      	pop	{r4, r5, r7, pc}
 800fa60:	ffffbf80 	.word	0xffffbf80

0800fa64 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	607a      	str	r2, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 800fa70:	22ac      	movs	r2, #172	; 0xac
 800fa72:	2100      	movs	r1, #0
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f00e fb11 	bl	801e09c <memset>

    mbedtls_rsa_set_padding( ctx, padding, hash_id );
 800fa7a:	687a      	ldr	r2, [r7, #4]
 800fa7c:	68b9      	ldr	r1, [r7, #8]
 800fa7e:	68f8      	ldr	r0, [r7, #12]
 800fa80:	f000 f804 	bl	800fa8c <mbedtls_rsa_set_padding>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 800fa84:	bf00      	nop
 800fa86:	3710      	adds	r7, #16
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <mbedtls_rsa_set_padding>:

/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	607a      	str	r2, [r7, #4]
    ctx->padding = padding;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	68ba      	ldr	r2, [r7, #8]
 800fa9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    ctx->hash_id = hash_id;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800faa8:	bf00      	nop
 800faaa:	3714      	adds	r7, #20
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <mbedtls_rsa_get_len>:
/*
 * Get length in bytes of RSA modulus
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
 800fab4:	b480      	push	{r7}
 800fab6:	b083      	sub	sp, #12
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
    return( ctx->len );
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	685b      	ldr	r3, [r3, #4]
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr

0800facc <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 800fad4:	2200      	movs	r2, #0
 800fad6:	2100      	movs	r1, #0
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7ff fe0f 	bl	800f6fc <rsa_check_context>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <mbedtls_rsa_check_pubkey+0x1c>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fae4:	4b17      	ldr	r3, [pc, #92]	; (800fb44 <mbedtls_rsa_check_pubkey+0x78>)
 800fae6:	e029      	b.n	800fb3c <mbedtls_rsa_check_pubkey+0x70>

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	3308      	adds	r3, #8
 800faec:	4618      	mov	r0, r3
 800faee:	f7f7 f97d 	bl	8006dec <mbedtls_mpi_bitlen>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b7f      	cmp	r3, #127	; 0x7f
 800faf6:	d801      	bhi.n	800fafc <mbedtls_rsa_check_pubkey+0x30>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800faf8:	4b12      	ldr	r3, [pc, #72]	; (800fb44 <mbedtls_rsa_check_pubkey+0x78>)
 800fafa:	e01f      	b.n	800fb3c <mbedtls_rsa_check_pubkey+0x70>
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	3314      	adds	r3, #20
 800fb00:	2100      	movs	r1, #0
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f7 f8fd 	bl	8006d02 <mbedtls_mpi_get_bit>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d013      	beq.n	800fb36 <mbedtls_rsa_check_pubkey+0x6a>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	3314      	adds	r3, #20
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7f7 f96a 	bl	8006dec <mbedtls_mpi_bitlen>
 800fb18:	4603      	mov	r3, r0
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d90b      	bls.n	800fb36 <mbedtls_rsa_check_pubkey+0x6a>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f103 0214 	add.w	r2, r3, #20
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	3308      	adds	r3, #8
 800fb28:	4619      	mov	r1, r3
 800fb2a:	4610      	mov	r0, r2
 800fb2c:	f7f7 fbff 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800fb30:	4603      	mov	r3, r0
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	db01      	blt.n	800fb3a <mbedtls_rsa_check_pubkey+0x6e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fb36:	4b03      	ldr	r3, [pc, #12]	; (800fb44 <mbedtls_rsa_check_pubkey+0x78>)
 800fb38:	e000      	b.n	800fb3c <mbedtls_rsa_check_pubkey+0x70>
    }

    return( 0 );
 800fb3a:	2300      	movs	r3, #0
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	ffffbe00 	.word	0xffffbe00

0800fb48 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 800fb48:	b5b0      	push	{r4, r5, r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af04      	add	r7, sp, #16
 800fb4e:	6078      	str	r0, [r7, #4]
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7ff ffbb 	bl	800facc <mbedtls_rsa_check_pubkey>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d107      	bne.n	800fb6c <mbedtls_rsa_check_privkey+0x24>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	2101      	movs	r1, #1
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7ff fdcb 	bl	800f6fc <rsa_check_context>
 800fb66:	4603      	mov	r3, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d001      	beq.n	800fb70 <mbedtls_rsa_check_privkey+0x28>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fb6c:	4b1e      	ldr	r3, [pc, #120]	; (800fbe8 <mbedtls_rsa_check_privkey+0xa0>)
 800fb6e:	e036      	b.n	800fbde <mbedtls_rsa_check_privkey+0x96>
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f103 0008 	add.w	r0, r3, #8
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f103 0420 	add.w	r4, r3, #32
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	3314      	adds	r3, #20
 800fb8c:	2500      	movs	r5, #0
 800fb8e:	9502      	str	r5, [sp, #8]
 800fb90:	2500      	movs	r5, #0
 800fb92:	9501      	str	r5, [sp, #4]
 800fb94:	9300      	str	r3, [sp, #0]
 800fb96:	4623      	mov	r3, r4
 800fb98:	f001 fc14 	bl	80113c4 <mbedtls_rsa_validate_params>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d001      	beq.n	800fba6 <mbedtls_rsa_check_privkey+0x5e>
                                     &ctx->D, &ctx->E, NULL, NULL ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fba2:	4b11      	ldr	r3, [pc, #68]	; (800fbe8 <mbedtls_rsa_check_privkey+0xa0>)
 800fba4:	e01b      	b.n	800fbde <mbedtls_rsa_check_privkey+0x96>
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f103 0420 	add.w	r4, r3, #32
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f103 0544 	add.w	r5, r3, #68	; 0x44
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	3350      	adds	r3, #80	; 0x50
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	325c      	adds	r2, #92	; 0x5c
 800fbc6:	9201      	str	r2, [sp, #4]
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	462b      	mov	r3, r5
 800fbcc:	4622      	mov	r2, r4
 800fbce:	f001 fb03 	bl	80111d8 <mbedtls_rsa_validate_crt>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d001      	beq.n	800fbdc <mbedtls_rsa_check_privkey+0x94>
                                       &ctx->DP, &ctx->DQ, &ctx->QP ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fbd8:	4b03      	ldr	r3, [pc, #12]	; (800fbe8 <mbedtls_rsa_check_privkey+0xa0>)
 800fbda:	e000      	b.n	800fbde <mbedtls_rsa_check_privkey+0x96>
    }
#endif

    return( 0 );
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bdb0      	pop	{r4, r5, r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	ffffbe00 	.word	0xffffbe00

0800fbec <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7ff ff68 	bl	800facc <mbedtls_rsa_check_pubkey>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d105      	bne.n	800fc0e <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 800fc02:	6838      	ldr	r0, [r7, #0]
 800fc04:	f7ff ffa0 	bl	800fb48 <mbedtls_rsa_check_privkey>
 800fc08:	4603      	mov	r3, r0
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d001      	beq.n	800fc12 <mbedtls_rsa_check_pub_priv+0x26>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fc0e:	4b10      	ldr	r3, [pc, #64]	; (800fc50 <mbedtls_rsa_check_pub_priv+0x64>)
 800fc10:	e01a      	b.n	800fc48 <mbedtls_rsa_check_pub_priv+0x5c>
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f103 0208 	add.w	r2, r3, #8
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	3308      	adds	r3, #8
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	4610      	mov	r0, r2
 800fc20:	f7f7 fb85 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800fc24:	4603      	mov	r3, r0
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d10b      	bne.n	800fc42 <mbedtls_rsa_check_pub_priv+0x56>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f103 0214 	add.w	r2, r3, #20
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	3314      	adds	r3, #20
 800fc34:	4619      	mov	r1, r3
 800fc36:	4610      	mov	r0, r2
 800fc38:	f7f7 fb79 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800fc3c:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d001      	beq.n	800fc46 <mbedtls_rsa_check_pub_priv+0x5a>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fc42:	4b03      	ldr	r3, [pc, #12]	; (800fc50 <mbedtls_rsa_check_pub_priv+0x64>)
 800fc44:	e000      	b.n	800fc48 <mbedtls_rsa_check_pub_priv+0x5c>
    }

    return( 0 );
 800fc46:	2300      	movs	r3, #0
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	ffffbe00 	.word	0xffffbe00

0800fc54 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 800fc54:	b590      	push	{r4, r7, lr}
 800fc56:	b08d      	sub	sp, #52	; 0x34
 800fc58:	af02      	add	r7, sp, #8
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 800fc60:	2200      	movs	r2, #0
 800fc62:	2100      	movs	r1, #0
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f7ff fd49 	bl	800f6fc <rsa_check_context>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d001      	beq.n	800fc74 <mbedtls_rsa_public+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fc70:	4b2c      	ldr	r3, [pc, #176]	; (800fd24 <mbedtls_rsa_public+0xd0>)
 800fc72:	e052      	b.n	800fd1a <mbedtls_rsa_public+0xc6>

    mbedtls_mpi_init( &T );
 800fc74:	f107 0314 	add.w	r3, r7, #20
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7f6 ff43 	bl	8006b04 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	685a      	ldr	r2, [r3, #4]
 800fc82:	f107 0314 	add.w	r3, r7, #20
 800fc86:	68b9      	ldr	r1, [r7, #8]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7f7 f8f1 	bl	8006e70 <mbedtls_mpi_read_binary>
 800fc8e:	6278      	str	r0, [r7, #36]	; 0x24
 800fc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d131      	bne.n	800fcfa <mbedtls_rsa_public+0xa6>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f103 0208 	add.w	r2, r3, #8
 800fc9c:	f107 0314 	add.w	r3, r7, #20
 800fca0:	4611      	mov	r1, r2
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7f7 fb43 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	db03      	blt.n	800fcb6 <mbedtls_rsa_public+0x62>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 800fcae:	f06f 0303 	mvn.w	r3, #3
 800fcb2:	627b      	str	r3, [r7, #36]	; 0x24
        goto cleanup;
 800fcb4:	e024      	b.n	800fd00 <mbedtls_rsa_public+0xac>
    }

    olen = ctx->len;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	623b      	str	r3, [r7, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f103 0214 	add.w	r2, r3, #20
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f103 0408 	add.w	r4, r3, #8
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	3368      	adds	r3, #104	; 0x68
 800fccc:	f107 0114 	add.w	r1, r7, #20
 800fcd0:	f107 0014 	add.w	r0, r7, #20
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	4623      	mov	r3, r4
 800fcd8:	f7f9 ffcf 	bl	8009c7a <mbedtls_mpi_exp_mod>
 800fcdc:	6278      	str	r0, [r7, #36]	; 0x24
 800fcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d10c      	bne.n	800fcfe <mbedtls_rsa_public+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 800fce4:	f107 0314 	add.w	r3, r7, #20
 800fce8:	6a3a      	ldr	r2, [r7, #32]
 800fcea:	6879      	ldr	r1, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7f7 f91d 	bl	8006f2c <mbedtls_mpi_write_binary>
 800fcf2:	6278      	str	r0, [r7, #36]	; 0x24
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	2b00      	cmp	r3, #0

cleanup:
 800fcf8:	e002      	b.n	800fd00 <mbedtls_rsa_public+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 800fcfa:	bf00      	nop
 800fcfc:	e000      	b.n	800fd00 <mbedtls_rsa_public+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 800fcfe:	bf00      	nop
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 800fd00:	f107 0314 	add.w	r3, r7, #20
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7f6 ff14 	bl	8006b32 <mbedtls_mpi_free>

    if( ret != 0 )
 800fd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d003      	beq.n	800fd18 <mbedtls_rsa_public+0xc4>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 800fd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd12:	f5a3 4385 	sub.w	r3, r3, #17024	; 0x4280
 800fd16:	e000      	b.n	800fd1a <mbedtls_rsa_public+0xc6>

    return( 0 );
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	372c      	adds	r7, #44	; 0x2c
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd90      	pop	{r4, r7, pc}
 800fd22:	bf00      	nop
 800fd24:	ffffbf80 	.word	0xffffbf80

0800fd28 <rsa_prepare_blinding>:
 *  DSS, and other systems. In : Advances in Cryptology-CRYPTO'96. Springer
 *  Berlin Heidelberg, 1996. p. 104-113.
 */
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800fd28:	b590      	push	{r4, r7, lr}
 800fd2a:	b089      	sub	sp, #36	; 0x24
 800fd2c:	af02      	add	r7, sp, #8
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
    int ret, count = 0;
 800fd34:	2300      	movs	r3, #0
 800fd36:	613b      	str	r3, [r7, #16]

    if( ctx->Vf.p != NULL )
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d03b      	beq.n	800fdba <rsa_prepare_blinding+0x92>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	338c      	adds	r3, #140	; 0x8c
 800fd52:	461a      	mov	r2, r3
 800fd54:	f7f9 fa77 	bl	8009246 <mbedtls_mpi_mul_mpi>
 800fd58:	6178      	str	r0, [r7, #20]
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d17e      	bne.n	800fe5e <rsa_prepare_blinding+0x136>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	3308      	adds	r3, #8
 800fd70:	461a      	mov	r2, r3
 800fd72:	f7f9 fe64 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 800fd76:	6178      	str	r0, [r7, #20]
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d171      	bne.n	800fe62 <rsa_prepare_blinding+0x13a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	3398      	adds	r3, #152	; 0x98
 800fd8e:	461a      	mov	r2, r3
 800fd90:	f7f9 fa59 	bl	8009246 <mbedtls_mpi_mul_mpi>
 800fd94:	6178      	str	r0, [r7, #20]
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d164      	bne.n	800fe66 <rsa_prepare_blinding+0x13e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	3308      	adds	r3, #8
 800fdac:	461a      	mov	r2, r3
 800fdae:	f7f9 fe46 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 800fdb2:	6178      	str	r0, [r7, #20]
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	2b00      	cmp	r3, #0

        goto cleanup;
 800fdb8:	e05c      	b.n	800fe74 <rsa_prepare_blinding+0x14c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	1c5a      	adds	r2, r3, #1
 800fdbe:	613a      	str	r2, [r7, #16]
 800fdc0:	2b0a      	cmp	r3, #10
 800fdc2:	dd01      	ble.n	800fdc8 <rsa_prepare_blinding+0xa0>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 800fdc4:	4b2e      	ldr	r3, [pc, #184]	; (800fe80 <rsa_prepare_blinding+0x158>)
 800fdc6:	e056      	b.n	800fe76 <rsa_prepare_blinding+0x14e>

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	1e59      	subs	r1, r3, #1
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	f7fa fcf0 	bl	800a7bc <mbedtls_mpi_fill_random>
 800fddc:	6178      	str	r0, [r7, #20]
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d142      	bne.n	800fe6a <rsa_prepare_blinding+0x142>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	3308      	adds	r3, #8
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	f7fa fbeb 	bl	800a5d0 <mbedtls_mpi_gcd>
 800fdfa:	6178      	str	r0, [r7, #20]
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d135      	bne.n	800fe6e <rsa_prepare_blinding+0x146>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	338c      	adds	r3, #140	; 0x8c
 800fe06:	2101      	movs	r1, #1
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7f7 fb2b 	bl	8007464 <mbedtls_mpi_cmp_int>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1d2      	bne.n	800fdba <rsa_prepare_blinding+0x92>

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	3308      	adds	r3, #8
 800fe24:	461a      	mov	r2, r3
 800fe26:	f7fa fd27 	bl	800a878 <mbedtls_mpi_inv_mod>
 800fe2a:	6178      	str	r0, [r7, #20]
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d11f      	bne.n	800fe72 <rsa_prepare_blinding+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f103 0214 	add.w	r2, r3, #20
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f103 0408 	add.w	r4, r3, #8
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	3368      	adds	r3, #104	; 0x68
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	4623      	mov	r3, r4
 800fe52:	f7f9 ff12 	bl	8009c7a <mbedtls_mpi_exp_mod>
 800fe56:	6178      	str	r0, [r7, #20]
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	2b00      	cmp	r3, #0


cleanup:
 800fe5c:	e00a      	b.n	800fe74 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 800fe5e:	bf00      	nop
 800fe60:	e008      	b.n	800fe74 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 800fe62:	bf00      	nop
 800fe64:	e006      	b.n	800fe74 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 800fe66:	bf00      	nop
 800fe68:	e004      	b.n	800fe74 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 800fe6a:	bf00      	nop
 800fe6c:	e002      	b.n	800fe74 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 800fe6e:	bf00      	nop
 800fe70:	e000      	b.n	800fe74 <rsa_prepare_blinding+0x14c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 800fe72:	bf00      	nop
    return( ret );
 800fe74:	697b      	ldr	r3, [r7, #20]
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	371c      	adds	r7, #28
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd90      	pop	{r4, r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	ffffbb80 	.word	0xffffbb80

0800fe84 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 800fe84:	b590      	push	{r4, r7, lr}
 800fe86:	b0a9      	sub	sp, #164	; 0xa4
 800fe88:	af02      	add	r7, sp, #8
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
 800fe90:	603b      	str	r3, [r7, #0]
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	3344      	adds	r3, #68	; 0x44
 800fe96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    mbedtls_mpi *DQ = &ctx->DQ;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	3350      	adds	r3, #80	; 0x50
 800fe9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	bf14      	ite	ne
 800fea8:	2301      	movne	r3, #1
 800feaa:	2300      	moveq	r3, #0
 800feac:	b2db      	uxtb	r3, r3
 800feae:	461a      	mov	r2, r3
 800feb0:	2101      	movs	r1, #1
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	f7ff fc22 	bl	800f6fc <rsa_check_context>
 800feb8:	4603      	mov	r3, r0
 800feba:	2b00      	cmp	r3, #0
 800febc:	d001      	beq.n	800fec2 <mbedtls_rsa_private+0x3e>
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800febe:	4b2b      	ldr	r3, [pc, #172]	; (800ff6c <mbedtls_rsa_private+0xe8>)
 800fec0:	e263      	b.n	801038a <mbedtls_rsa_private+0x506>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 800fec2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7f6 fe1c 	bl	8006b04 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 800fecc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7f6 fe17 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 800fed6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800feda:	4618      	mov	r0, r3
 800fedc:	f7f6 fe12 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 800fee0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7f6 fe0d 	bl	8006b04 <mbedtls_mpi_init>

    if( f_rng != NULL )
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d009      	beq.n	800ff04 <mbedtls_rsa_private+0x80>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 800fef0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7f6 fe05 	bl	8006b04 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 800fefa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7f6 fe00 	bl	8006b04 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 800ff04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7f6 fdfb 	bl	8006b04 <mbedtls_mpi_init>
 800ff0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7f6 fdf6 	bl	8006b04 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 800ff18:	f107 031c 	add.w	r3, r7, #28
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7f6 fdf1 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 800ff22:	f107 0310 	add.w	r3, r7, #16
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7f6 fdec 	bl	8006b04 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	685a      	ldr	r2, [r3, #4]
 800ff30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ff34:	6839      	ldr	r1, [r7, #0]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7f6 ff9a 	bl	8006e70 <mbedtls_mpi_read_binary>
 800ff3c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ff40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f040 81b4 	bne.w	80102b2 <mbedtls_rsa_private+0x42e>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f103 0208 	add.w	r2, r3, #8
 800ff50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ff54:	4611      	mov	r1, r2
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7f7 f9e9 	bl	800732e <mbedtls_mpi_cmp_mpi>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	db06      	blt.n	800ff70 <mbedtls_rsa_private+0xec>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 800ff62:	f06f 0303 	mvn.w	r3, #3
 800ff66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        goto cleanup;
 800ff6a:	e1cf      	b.n	801030c <mbedtls_rsa_private+0x488>
 800ff6c:	ffffbf80 	.word	0xffffbf80
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 800ff70:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800ff74:	f107 031c 	add.w	r3, r7, #28
 800ff78:	4611      	mov	r1, r2
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7f6 fe42 	bl	8006c04 <mbedtls_mpi_copy>
 800ff80:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ff84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	f040 8194 	bne.w	80102b6 <mbedtls_rsa_private+0x432>

    if( f_rng != NULL )
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	f000 80b4 	beq.w	80100fe <mbedtls_rsa_private+0x27a>
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	68b9      	ldr	r1, [r7, #8]
 800ff9a:	68f8      	ldr	r0, [r7, #12]
 800ff9c:	f7ff fec4 	bl	800fd28 <rsa_prepare_blinding>
 800ffa0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ffa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f040 8186 	bne.w	80102ba <mbedtls_rsa_private+0x436>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 800ffb4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800ffb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7f9 f942 	bl	8009246 <mbedtls_mpi_mul_mpi>
 800ffc2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ffc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f040 8177 	bne.w	80102be <mbedtls_rsa_private+0x43a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f103 0208 	add.w	r2, r3, #8
 800ffd6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800ffda:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7f9 fd2d 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 800ffe4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ffe8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f040 8168 	bne.w	80102c2 <mbedtls_rsa_private+0x43e>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800fff8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fffc:	2201      	movs	r2, #1
 800fffe:	4618      	mov	r0, r3
 8010000:	f7f7 fc7f 	bl	8007902 <mbedtls_mpi_sub_int>
 8010004:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801000c:	2b00      	cmp	r3, #0
 801000e:	f040 815a 	bne.w	80102c6 <mbedtls_rsa_private+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010018:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801001c:	2201      	movs	r2, #1
 801001e:	4618      	mov	r0, r3
 8010020:	f7f7 fc6f 	bl	8007902 <mbedtls_mpi_sub_int>
 8010024:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010028:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801002c:	2b00      	cmp	r3, #0
 801002e:	f040 814c 	bne.w	80102ca <mbedtls_rsa_private+0x446>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8010032:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68ba      	ldr	r2, [r7, #8]
 801003a:	211c      	movs	r1, #28
 801003c:	f7fa fbbe 	bl	800a7bc <mbedtls_mpi_fill_random>
 8010040:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010044:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010048:	2b00      	cmp	r3, #0
 801004a:	f040 8140 	bne.w	80102ce <mbedtls_rsa_private+0x44a>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 801004e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010052:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8010056:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801005a:	4618      	mov	r0, r3
 801005c:	f7f9 f8f3 	bl	8009246 <mbedtls_mpi_mul_mpi>
 8010060:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010064:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010068:	2b00      	cmp	r3, #0
 801006a:	f040 8132 	bne.w	80102d2 <mbedtls_rsa_private+0x44e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8010074:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8010078:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801007c:	4618      	mov	r0, r3
 801007e:	f7f7 fb88 	bl	8007792 <mbedtls_mpi_add_mpi>
 8010082:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010086:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801008a:	2b00      	cmp	r3, #0
 801008c:	f040 8123 	bne.w	80102d6 <mbedtls_rsa_private+0x452>
                    &ctx->DP ) );

        DP = &DP_blind;
 8010090:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010094:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8010098:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	68ba      	ldr	r2, [r7, #8]
 80100a0:	211c      	movs	r1, #28
 80100a2:	f7fa fb8b 	bl	800a7bc <mbedtls_mpi_fill_random>
 80100a6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80100aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f040 8113 	bne.w	80102da <mbedtls_rsa_private+0x456>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 80100b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80100b8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80100bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7f9 f8c0 	bl	8009246 <mbedtls_mpi_mul_mpi>
 80100c6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80100ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f040 8105 	bne.w	80102de <mbedtls_rsa_private+0x45a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80100da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80100de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7f7 fb55 	bl	8007792 <mbedtls_mpi_add_mpi>
 80100e8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80100ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f040 80f6 	bne.w	80102e2 <mbedtls_rsa_private+0x45e>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 80100f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80100fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	3374      	adds	r3, #116	; 0x74
 8010108:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801010c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	4613      	mov	r3, r2
 8010114:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010118:	f7f9 fdaf 	bl	8009c7a <mbedtls_mpi_exp_mod>
 801011c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010124:	2b00      	cmp	r3, #0
 8010126:	f040 80de 	bne.w	80102e6 <mbedtls_rsa_private+0x462>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	3380      	adds	r3, #128	; 0x80
 8010134:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010138:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801013c:	9300      	str	r3, [sp, #0]
 801013e:	4613      	mov	r3, r2
 8010140:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010144:	f7f9 fd99 	bl	8009c7a <mbedtls_mpi_exp_mod>
 8010148:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801014c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010150:	2b00      	cmp	r3, #0
 8010152:	f040 80ca 	bne.w	80102ea <mbedtls_rsa_private+0x466>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8010156:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801015a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 801015e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010162:	4618      	mov	r0, r3
 8010164:	f7f7 fb5f 	bl	8007826 <mbedtls_mpi_sub_mpi>
 8010168:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801016c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010170:	2b00      	cmp	r3, #0
 8010172:	f040 80bc 	bne.w	80102ee <mbedtls_rsa_private+0x46a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801017c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010180:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010184:	4618      	mov	r0, r3
 8010186:	f7f9 f85e 	bl	8009246 <mbedtls_mpi_mul_mpi>
 801018a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801018e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010192:	2b00      	cmp	r3, #0
 8010194:	f040 80ad 	bne.w	80102f2 <mbedtls_rsa_private+0x46e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801019e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80101a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7f9 fc49 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 80101ac:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80101b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f040 809e 	bne.w	80102f6 <mbedtls_rsa_private+0x472>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80101c0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80101c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7f9 f83c 	bl	8009246 <mbedtls_mpi_mul_mpi>
 80101ce:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80101d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	f040 808f 	bne.w	80102fa <mbedtls_rsa_private+0x476>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 80101dc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80101e0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80101e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7f7 fad2 	bl	8007792 <mbedtls_mpi_add_mpi>
 80101ee:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80101f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	f040 8081 	bne.w	80102fe <mbedtls_rsa_private+0x47a>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d01f      	beq.n	8010242 <mbedtls_rsa_private+0x3be>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8010208:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801020c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010210:	4618      	mov	r0, r3
 8010212:	f7f9 f818 	bl	8009246 <mbedtls_mpi_mul_mpi>
 8010216:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801021a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801021e:	2b00      	cmp	r3, #0
 8010220:	d16f      	bne.n	8010302 <mbedtls_rsa_private+0x47e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f103 0208 	add.w	r2, r3, #8
 8010228:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801022c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010230:	4618      	mov	r0, r3
 8010232:	f7f9 fc04 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 8010236:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801023a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801023e:	2b00      	cmp	r3, #0
 8010240:	d161      	bne.n	8010306 <mbedtls_rsa_private+0x482>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f103 0214 	add.w	r2, r3, #20
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f103 0408 	add.w	r4, r3, #8
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	3368      	adds	r3, #104	; 0x68
 8010252:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010256:	f107 0010 	add.w	r0, r7, #16
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	4623      	mov	r3, r4
 801025e:	f7f9 fd0c 	bl	8009c7a <mbedtls_mpi_exp_mod>
 8010262:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010266:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801026a:	2b00      	cmp	r3, #0
 801026c:	d14d      	bne.n	801030a <mbedtls_rsa_private+0x486>
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 801026e:	f107 021c 	add.w	r2, r7, #28
 8010272:	f107 0310 	add.w	r3, r7, #16
 8010276:	4611      	mov	r1, r2
 8010278:	4618      	mov	r0, r3
 801027a:	f7f7 f858 	bl	800732e <mbedtls_mpi_cmp_mpi>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d003      	beq.n	801028c <mbedtls_rsa_private+0x408>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8010284:	4b43      	ldr	r3, [pc, #268]	; (8010394 <mbedtls_rsa_private+0x510>)
 8010286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        goto cleanup;
 801028a:	e03f      	b.n	801030c <mbedtls_rsa_private+0x488>
    }

    olen = ctx->len;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8010294:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010298:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801029c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7f6 fe43 	bl	8006f2c <mbedtls_mpi_write_binary>
 80102a6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80102aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102ae:	2b00      	cmp	r3, #0

cleanup:
 80102b0:	e02c      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80102b2:	bf00      	nop
 80102b4:	e02a      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 80102b6:	bf00      	nop
 80102b8:	e028      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 80102ba:	bf00      	nop
 80102bc:	e026      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 80102be:	bf00      	nop
 80102c0:	e024      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80102c2:	bf00      	nop
 80102c4:	e022      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80102c6:	bf00      	nop
 80102c8:	e020      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 80102ca:	bf00      	nop
 80102cc:	e01e      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80102ce:	bf00      	nop
 80102d0:	e01c      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 80102d2:	bf00      	nop
 80102d4:	e01a      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 80102d6:	bf00      	nop
 80102d8:	e018      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80102da:	bf00      	nop
 80102dc:	e016      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 80102de:	bf00      	nop
 80102e0:	e014      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 80102e2:	bf00      	nop
 80102e4:	e012      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 80102e6:	bf00      	nop
 80102e8:	e010      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 80102ea:	bf00      	nop
 80102ec:	e00e      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 80102ee:	bf00      	nop
 80102f0:	e00c      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 80102f2:	bf00      	nop
 80102f4:	e00a      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 80102f6:	bf00      	nop
 80102f8:	e008      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 80102fa:	bf00      	nop
 80102fc:	e006      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 80102fe:	bf00      	nop
 8010300:	e004      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8010302:	bf00      	nop
 8010304:	e002      	b.n	801030c <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8010306:	bf00      	nop
 8010308:	e000      	b.n	801030c <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 801030a:	bf00      	nop
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 801030c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010310:	4618      	mov	r0, r3
 8010312:	f7f6 fc0e 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 8010316:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801031a:	4618      	mov	r0, r3
 801031c:	f7f6 fc09 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8010320:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010324:	4618      	mov	r0, r3
 8010326:	f7f6 fc04 	bl	8006b32 <mbedtls_mpi_free>

    if( f_rng != NULL )
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d009      	beq.n	8010344 <mbedtls_rsa_private+0x4c0>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 8010330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010334:	4618      	mov	r0, r3
 8010336:	f7f6 fbfc 	bl	8006b32 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 801033a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801033e:	4618      	mov	r0, r3
 8010340:	f7f6 fbf7 	bl	8006b32 <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 8010344:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010348:	4618      	mov	r0, r3
 801034a:	f7f6 fbf2 	bl	8006b32 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 801034e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010352:	4618      	mov	r0, r3
 8010354:	f7f6 fbed 	bl	8006b32 <mbedtls_mpi_free>
 8010358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801035c:	4618      	mov	r0, r3
 801035e:	f7f6 fbe8 	bl	8006b32 <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 8010362:	f107 0310 	add.w	r3, r7, #16
 8010366:	4618      	mov	r0, r3
 8010368:	f7f6 fbe3 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 801036c:	f107 031c 	add.w	r3, r7, #28
 8010370:	4618      	mov	r0, r3
 8010372:	f7f6 fbde 	bl	8006b32 <mbedtls_mpi_free>

    if( ret != 0 )
 8010376:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801037a:	2b00      	cmp	r3, #0
 801037c:	d004      	beq.n	8010388 <mbedtls_rsa_private+0x504>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 801037e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010382:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
 8010386:	e000      	b.n	801038a <mbedtls_rsa_private+0x506>

    return( 0 );
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	379c      	adds	r7, #156	; 0x9c
 801038e:	46bd      	mov	sp, r7
 8010390:	bd90      	pop	{r4, r7, pc}
 8010392:	bf00      	nop
 8010394:	ffffbc80 	.word	0xffffbc80

08010398 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b08c      	sub	sp, #48	; 0x30
 801039c:	af02      	add	r7, sp, #8
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
 80103a4:	603b      	str	r3, [r7, #0]
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;
 80103a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a8:	623b      	str	r3, [r7, #32]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d106      	bne.n	80103be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d001      	beq.n	80103be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80103ba:	4b44      	ldr	r3, [pc, #272]	; (80104cc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x134>)
 80103bc:	e081      	b.n	80104c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d005      	beq.n	80103d0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x38>
 80103c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x38>
 80103ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d101      	bne.n	80103d4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80103d0:	4b3e      	ldr	r3, [pc, #248]	; (80104cc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x134>)
 80103d2:	e076      	b.n	80104c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

    olen = ctx->len;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	61bb      	str	r3, [r7, #24]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80103da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103dc:	f113 0f0c 	cmn.w	r3, #12
 80103e0:	d804      	bhi.n	80103ec <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x54>
 80103e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e4:	330b      	adds	r3, #11
 80103e6:	69ba      	ldr	r2, [r7, #24]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d201      	bcs.n	80103f0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x58>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80103ec:	4b37      	ldr	r3, [pc, #220]	; (80104cc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x134>)
 80103ee:	e068      	b.n	80104c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

    nb_pad = olen - 3 - ilen;
 80103f0:	69ba      	ldr	r2, [r7, #24]
 80103f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f4:	1ad3      	subs	r3, r2, r3
 80103f6:	3b03      	subs	r3, #3
 80103f8:	627b      	str	r3, [r7, #36]	; 0x24

    *p++ = 0;
 80103fa:	6a3b      	ldr	r3, [r7, #32]
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	623a      	str	r2, [r7, #32]
 8010400:	2200      	movs	r2, #0
 8010402:	701a      	strb	r2, [r3, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d12d      	bne.n	8010466 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 801040a:	6a3b      	ldr	r3, [r7, #32]
 801040c:	1c5a      	adds	r2, r3, #1
 801040e:	623a      	str	r2, [r7, #32]
 8010410:	2202      	movs	r2, #2
 8010412:	701a      	strb	r2, [r3, #0]

        while( nb_pad-- > 0 )
 8010414:	e021      	b.n	801045a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
        {
            int rng_dl = 100;
 8010416:	2364      	movs	r3, #100	; 0x64
 8010418:	61fb      	str	r3, [r7, #28]

            do {
                ret = f_rng( p_rng, p, 1 );
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	2201      	movs	r2, #1
 801041e:	6a39      	ldr	r1, [r7, #32]
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	4798      	blx	r3
 8010424:	6178      	str	r0, [r7, #20]
            } while( *p == 0 && --rng_dl && ret == 0 );
 8010426:	6a3b      	ldr	r3, [r7, #32]
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d108      	bne.n	8010440 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa8>
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	3b01      	subs	r3, #1
 8010432:	61fb      	str	r3, [r7, #28]
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d002      	beq.n	8010440 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa8>
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d0ec      	beq.n	801041a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d002      	beq.n	801044c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb4>
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d003      	beq.n	8010454 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbc>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	f5a3 4389 	sub.w	r3, r3, #17536	; 0x4480
 8010452:	e036      	b.n	80104c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

            p++;
 8010454:	6a3b      	ldr	r3, [r7, #32]
 8010456:	3301      	adds	r3, #1
 8010458:	623b      	str	r3, [r7, #32]
        while( nb_pad-- > 0 )
 801045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045c:	1e5a      	subs	r2, r3, #1
 801045e:	627a      	str	r2, [r7, #36]	; 0x24
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1d8      	bne.n	8010416 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7e>
 8010464:	e00f      	b.n	8010486 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xee>
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 8010466:	6a3b      	ldr	r3, [r7, #32]
 8010468:	1c5a      	adds	r2, r3, #1
 801046a:	623a      	str	r2, [r7, #32]
 801046c:	2201      	movs	r2, #1
 801046e:	701a      	strb	r2, [r3, #0]

        while( nb_pad-- > 0 )
 8010470:	e004      	b.n	801047c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe4>
            *p++ = 0xFF;
 8010472:	6a3b      	ldr	r3, [r7, #32]
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	623a      	str	r2, [r7, #32]
 8010478:	22ff      	movs	r2, #255	; 0xff
 801047a:	701a      	strb	r2, [r3, #0]
        while( nb_pad-- > 0 )
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047e:	1e5a      	subs	r2, r3, #1
 8010480:	627a      	str	r2, [r7, #36]	; 0x24
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1f5      	bne.n	8010472 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
    }

    *p++ = 0;
 8010486:	6a3b      	ldr	r3, [r7, #32]
 8010488:	1c5a      	adds	r2, r3, #1
 801048a:	623a      	str	r2, [r7, #32]
 801048c:	2200      	movs	r2, #0
 801048e:	701a      	strb	r2, [r3, #0]
    memcpy( p, input, ilen );
 8010490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010492:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010494:	6a38      	ldr	r0, [r7, #32]
 8010496:	f00d fdd9 	bl	801e04c <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d106      	bne.n	80104ae <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x116>
            ? mbedtls_rsa_public(  ctx, output, output )
 80104a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	f7ff fbd5 	bl	800fc54 <mbedtls_rsa_public>
 80104aa:	4603      	mov	r3, r0
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80104ac:	e008      	b.n	80104c0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x128>
 80104ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	68b9      	ldr	r1, [r7, #8]
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f7ff fce3 	bl	800fe84 <mbedtls_rsa_private>
 80104be:	4603      	mov	r3, r0
 80104c0:	bf00      	nop
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3728      	adds	r7, #40	; 0x28
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	ffffbf80 	.word	0xffffbf80

080104d0 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b088      	sub	sp, #32
 80104d4:	af04      	add	r7, sp, #16
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
 80104dc:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d10d      	bne.n	8010504 <mbedtls_rsa_pkcs1_encrypt+0x34>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 80104e8:	6a3b      	ldr	r3, [r7, #32]
 80104ea:	9302      	str	r3, [sp, #8]
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	9301      	str	r3, [sp, #4]
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	9300      	str	r3, [sp, #0]
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	68b9      	ldr	r1, [r7, #8]
 80104fa:	68f8      	ldr	r0, [r7, #12]
 80104fc:	f7ff ff4c 	bl	8010398 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
 8010500:	4603      	mov	r3, r0
 8010502:	e000      	b.n	8010506 <mbedtls_rsa_pkcs1_encrypt+0x36>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8010504:	4b02      	ldr	r3, [pc, #8]	; (8010510 <mbedtls_rsa_pkcs1_encrypt+0x40>)
    }
}
 8010506:	4618      	mov	r0, r3
 8010508:	3710      	adds	r7, #16
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	ffffbf00 	.word	0xffffbf00

08010514 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8010514:	b590      	push	{r4, r7, lr}
 8010516:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
 801051a:	af02      	add	r7, sp, #8
 801051c:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8010520:	f2a4 441c 	subw	r4, r4, #1052	; 0x41c
 8010524:	6020      	str	r0, [r4, #0]
 8010526:	f507 6085 	add.w	r0, r7, #1064	; 0x428
 801052a:	f5a0 6084 	sub.w	r0, r0, #1056	; 0x420
 801052e:	6001      	str	r1, [r0, #0]
 8010530:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8010534:	f2a1 4124 	subw	r1, r1, #1060	; 0x424
 8010538:	600a      	str	r2, [r1, #0]
 801053a:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 801053e:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8010542:	6013      	str	r3, [r2, #0]
    int ret;
    size_t ilen, pad_count = 0, i;
 8010544:	2300      	movs	r3, #0
 8010546:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    unsigned char *p, bad, pad_done = 0;
 801054a:	2300      	movs	r3, #0
 801054c:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8010550:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8010554:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2b01      	cmp	r3, #1
 801055c:	d10a      	bne.n	8010574 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x60>
 801055e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8010562:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801056c:	2b00      	cmp	r3, #0
 801056e:	d001      	beq.n	8010574 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x60>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010570:	4bb0      	ldr	r3, [pc, #704]	; (8010834 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x320>)
 8010572:	e159      	b.n	8010828 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x314>

    ilen = ctx->len;
 8010574:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8010578:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

    if( ilen < 16 || ilen > sizeof( buf ) )
 8010584:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8010588:	2b0f      	cmp	r3, #15
 801058a:	d904      	bls.n	8010596 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x82>
 801058c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8010590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010594:	d901      	bls.n	801059a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x86>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010596:	4ba7      	ldr	r3, [pc, #668]	; (8010834 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x320>)
 8010598:	e146      	b.n	8010828 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x314>

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 801059a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801059e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d10c      	bne.n	80105c2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xae>
          ? mbedtls_rsa_public(  ctx, input, buf )
 80105a8:	f107 0210 	add.w	r2, r7, #16
 80105ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80105b0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80105b4:	f8d7 143c 	ldr.w	r1, [r7, #1084]	; 0x43c
 80105b8:	6818      	ldr	r0, [r3, #0]
 80105ba:	f7ff fb4b 	bl	800fc54 <mbedtls_rsa_public>
 80105be:	4603      	mov	r3, r0
 80105c0:	e016      	b.n	80105f0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xdc>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80105c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80105c6:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 80105ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80105ce:	f5a3 6184 	sub.w	r1, r3, #1056	; 0x420
 80105d2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80105d6:	f2a3 401c 	subw	r0, r3, #1052	; 0x41c
 80105da:	f107 0310 	add.w	r3, r7, #16
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80105e4:	6812      	ldr	r2, [r2, #0]
 80105e6:	6809      	ldr	r1, [r1, #0]
 80105e8:	6800      	ldr	r0, [r0, #0]
 80105ea:	f7ff fc4b 	bl	800fe84 <mbedtls_rsa_private>
 80105ee:	4603      	mov	r3, r0
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 80105f0:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

    if( ret != 0 )
 80105f4:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	f040 810b 	bne.w	8010814 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x300>
        goto cleanup;

    p = buf;
 80105fe:	f107 0310 	add.w	r3, r7, #16
 8010602:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
    bad = 0;
 8010606:	2300      	movs	r3, #0
 8010608:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 801060c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8010610:	1c5a      	adds	r2, r3, #1
 8010612:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8010616:	781a      	ldrb	r2, [r3, #0]
 8010618:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 801061c:	4313      	orrs	r3, r2
 801061e:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8010622:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8010626:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d15f      	bne.n	80106f0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1dc>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8010630:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8010634:	1c5a      	adds	r2, r3, #1
 8010636:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	f083 0302 	eor.w	r3, r3, #2
 8010640:	b2db      	uxtb	r3, r3
 8010642:	b25a      	sxtb	r2, r3
 8010644:	f997 3417 	ldrsb.w	r3, [r7, #1047]	; 0x417
 8010648:	4313      	orrs	r3, r2
 801064a:	b25b      	sxtb	r3, r3
 801064c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8010650:	2300      	movs	r3, #0
 8010652:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8010656:	e031      	b.n	80106bc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a8>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8010658:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 801065c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8010660:	4413      	add	r3, r2
 8010662:	781a      	ldrb	r2, [r3, #0]
 8010664:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 8010668:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801066c:	440b      	add	r3, r1
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	425b      	negs	r3, r3
 8010672:	b2db      	uxtb	r3, r3
 8010674:	4313      	orrs	r3, r2
 8010676:	b2db      	uxtb	r3, r3
 8010678:	09db      	lsrs	r3, r3, #7
 801067a:	b2db      	uxtb	r3, r3
 801067c:	f083 0301 	eor.w	r3, r3, #1
 8010680:	b2da      	uxtb	r2, r3
 8010682:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8010686:	4313      	orrs	r3, r2
 8010688:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 801068c:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8010690:	425b      	negs	r3, r3
 8010692:	b2da      	uxtb	r2, r3
 8010694:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8010698:	4313      	orrs	r3, r2
 801069a:	b2db      	uxtb	r3, r3
 801069c:	09db      	lsrs	r3, r3, #7
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	f083 0301 	eor.w	r3, r3, #1
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	461a      	mov	r2, r3
 80106a8:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80106ac:	4413      	add	r3, r2
 80106ae:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
        for( i = 0; i < ilen - 3; i++ )
 80106b2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80106b6:	3301      	adds	r3, #1
 80106b8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 80106bc:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80106c0:	3b03      	subs	r3, #3
 80106c2:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d3c6      	bcc.n	8010658 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x144>
        }

        p += pad_count;
 80106ca:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80106ce:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80106d2:	4413      	add	r3, r2
 80106d4:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
        bad |= *p++; /* Must be zero */
 80106d8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80106dc:	1c5a      	adds	r2, r3, #1
 80106de:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 80106e2:	781a      	ldrb	r2, [r3, #0]
 80106e4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 80106e8:	4313      	orrs	r3, r2
 80106ea:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 80106ee:	e050      	b.n	8010792 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x27e>
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80106f0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80106f4:	1c5a      	adds	r2, r3, #1
 80106f6:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f083 0301 	eor.w	r3, r3, #1
 8010700:	b2db      	uxtb	r3, r3
 8010702:	b25a      	sxtb	r2, r3
 8010704:	f997 3417 	ldrsb.w	r3, [r7, #1047]	; 0x417
 8010708:	4313      	orrs	r3, r2
 801070a:	b25b      	sxtb	r3, r3
 801070c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8010710:	2300      	movs	r3, #0
 8010712:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8010716:	e023      	b.n	8010760 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x24c>
        {
            pad_done |= ( p[i] != 0xFF );
 8010718:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 801071c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8010720:	4413      	add	r3, r2
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	2bff      	cmp	r3, #255	; 0xff
 8010726:	bf14      	ite	ne
 8010728:	2301      	movne	r3, #1
 801072a:	2300      	moveq	r3, #0
 801072c:	b2db      	uxtb	r3, r3
 801072e:	b25a      	sxtb	r2, r3
 8010730:	f997 3416 	ldrsb.w	r3, [r7, #1046]	; 0x416
 8010734:	4313      	orrs	r3, r2
 8010736:	b25b      	sxtb	r3, r3
 8010738:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
            pad_count += ( pad_done == 0 );
 801073c:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8010740:	2b00      	cmp	r3, #0
 8010742:	bf0c      	ite	eq
 8010744:	2301      	moveq	r3, #1
 8010746:	2300      	movne	r3, #0
 8010748:	b2db      	uxtb	r3, r3
 801074a:	461a      	mov	r2, r3
 801074c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8010750:	4413      	add	r3, r2
 8010752:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
        for( i = 0; i < ilen - 3; i++ )
 8010756:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801075a:	3301      	adds	r3, #1
 801075c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8010760:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8010764:	3b03      	subs	r3, #3
 8010766:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 801076a:	429a      	cmp	r2, r3
 801076c:	d3d4      	bcc.n	8010718 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x204>
        }

        p += pad_count;
 801076e:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8010772:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8010776:	4413      	add	r3, r2
 8010778:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
        bad |= *p++; /* Must be zero */
 801077c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8010780:	1c5a      	adds	r2, r3, #1
 8010782:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8010786:	781a      	ldrb	r2, [r3, #0]
 8010788:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 801078c:	4313      	orrs	r3, r2
 801078e:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    bad |= ( pad_count < 8 );
 8010792:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8010796:	2b07      	cmp	r3, #7
 8010798:	bf94      	ite	ls
 801079a:	2301      	movls	r3, #1
 801079c:	2300      	movhi	r3, #0
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	b25a      	sxtb	r2, r3
 80107a2:	f997 3417 	ldrsb.w	r3, [r7, #1047]	; 0x417
 80107a6:	4313      	orrs	r3, r2
 80107a8:	b25b      	sxtb	r3, r3
 80107aa:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417

    if( bad )
 80107ae:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d003      	beq.n	80107be <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2aa>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80107b6:	4b20      	ldr	r3, [pc, #128]	; (8010838 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x324>)
 80107b8:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
        goto cleanup;
 80107bc:	e02b      	b.n	8010816 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x302>
    }

    if( ilen - ( p - buf ) > output_max_len )
 80107be:	f107 0310 	add.w	r3, r7, #16
 80107c2:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80107c6:	1ad3      	subs	r3, r2, r3
 80107c8:	461a      	mov	r2, r3
 80107ca:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80107ce:	1a9b      	subs	r3, r3, r2
 80107d0:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d203      	bcs.n	80107e0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2cc>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 80107d8:	4b18      	ldr	r3, [pc, #96]	; (801083c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x328>)
 80107da:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
        goto cleanup;
 80107de:	e01a      	b.n	8010816 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x302>
    }

    *olen = ilen - (p - buf);
 80107e0:	f107 0310 	add.w	r3, r7, #16
 80107e4:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	461a      	mov	r2, r3
 80107ec:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80107f0:	1a9a      	subs	r2, r3, r2
 80107f2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80107f6:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 80107f8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	461a      	mov	r2, r3
 8010800:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 8010804:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 8010808:	f00d fc20 	bl	801e04c <memcpy>
    ret = 0;
 801080c:	2300      	movs	r3, #0
 801080e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8010812:	e000      	b.n	8010816 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x302>
        goto cleanup;
 8010814:	bf00      	nop

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8010816:	f107 0310 	add.w	r3, r7, #16
 801081a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801081e:	4618      	mov	r0, r3
 8010820:	f7fe febc 	bl	800f59c <mbedtls_zeroize>

    return( ret );
 8010824:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
}
 8010828:	4618      	mov	r0, r3
 801082a:	f207 472c 	addw	r7, r7, #1068	; 0x42c
 801082e:	46bd      	mov	sp, r7
 8010830:	bd90      	pop	{r4, r7, pc}
 8010832:	bf00      	nop
 8010834:	ffffbf80 	.word	0xffffbf80
 8010838:	ffffbf00 	.word	0xffffbf00
 801083c:	ffffbc00 	.word	0xffffbc00

08010840 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b088      	sub	sp, #32
 8010844:	af04      	add	r7, sp, #16
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
 801084c:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010854:	2b00      	cmp	r3, #0
 8010856:	d10f      	bne.n	8010878 <mbedtls_rsa_pkcs1_decrypt+0x38>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 8010858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085a:	9303      	str	r3, [sp, #12]
 801085c:	6a3b      	ldr	r3, [r7, #32]
 801085e:	9302      	str	r3, [sp, #8]
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	9301      	str	r3, [sp, #4]
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	68b9      	ldr	r1, [r7, #8]
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	f7ff fe50 	bl	8010514 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
 8010874:	4603      	mov	r3, r0
 8010876:	e000      	b.n	801087a <mbedtls_rsa_pkcs1_decrypt+0x3a>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8010878:	4b02      	ldr	r3, [pc, #8]	; (8010884 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 801087a:	4618      	mov	r0, r3
 801087c:	3710      	adds	r7, #16
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	ffffbf00 	.word	0xffffbf00

08010888 <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b08a      	sub	sp, #40	; 0x28
 801088c:	af00      	add	r7, sp, #0
 801088e:	60b9      	str	r1, [r7, #8]
 8010890:	607a      	str	r2, [r7, #4]
 8010892:	603b      	str	r3, [r7, #0]
 8010894:	4603      	mov	r3, r0
 8010896:	73fb      	strb	r3, [r7, #15]
    size_t oid_size  = 0;
 8010898:	2300      	movs	r3, #0
 801089a:	61bb      	str	r3, [r7, #24]
    size_t nb_pad    = dst_len;
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char *p = dst;
 80108a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a2:	623b      	str	r3, [r7, #32]
    const char *oid  = NULL;
 80108a4:	2300      	movs	r3, #0
 80108a6:	617b      	str	r3, [r7, #20]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 80108a8:	7bfb      	ldrb	r3, [r7, #15]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d041      	beq.n	8010932 <rsa_rsassa_pkcs1_v15_encode+0xaa>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80108ae:	7bfb      	ldrb	r3, [r7, #15]
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fd fc07 	bl	800e0c4 <mbedtls_md_info_from_type>
 80108b6:	61f8      	str	r0, [r7, #28]
        if( md_info == NULL )
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <rsa_rsassa_pkcs1_v15_encode+0x3a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80108be:	4b68      	ldr	r3, [pc, #416]	; (8010a60 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 80108c0:	e0c9      	b.n	8010a56 <rsa_rsassa_pkcs1_v15_encode+0x1ce>

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80108c2:	f107 0218 	add.w	r2, r7, #24
 80108c6:	f107 0114 	add.w	r1, r7, #20
 80108ca:	7bfb      	ldrb	r3, [r7, #15]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fe f87b 	bl	800e9c8 <mbedtls_oid_get_oid_by_md>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d001      	beq.n	80108dc <rsa_rsassa_pkcs1_v15_encode+0x54>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80108d8:	4b61      	ldr	r3, [pc, #388]	; (8010a60 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 80108da:	e0bc      	b.n	8010a56 <rsa_rsassa_pkcs1_v15_encode+0x1ce>

        hashlen = mbedtls_md_get_size( md_info );
 80108dc:	69f8      	ldr	r0, [r7, #28]
 80108de:	f7fd fe2f 	bl	800e540 <mbedtls_md_get_size>
 80108e2:	4603      	mov	r3, r0
 80108e4:	60bb      	str	r3, [r7, #8]

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 80108e6:	69ba      	ldr	r2, [r7, #24]
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	4413      	add	r3, r2
 80108ec:	3308      	adds	r3, #8
 80108ee:	2b7f      	cmp	r3, #127	; 0x7f
 80108f0:	d80c      	bhi.n	801090c <rsa_rsassa_pkcs1_v15_encode+0x84>
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	f113 0f0b 	cmn.w	r3, #11
 80108f8:	d808      	bhi.n	801090c <rsa_rsassa_pkcs1_v15_encode+0x84>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 80108fa:	69ba      	ldr	r2, [r7, #24]
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	4413      	add	r3, r2
 8010900:	f103 020a 	add.w	r2, r3, #10
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	330a      	adds	r3, #10
            10 + hashlen            <  hashlen      ||
 8010908:	429a      	cmp	r2, r3
 801090a:	d201      	bcs.n	8010910 <rsa_rsassa_pkcs1_v15_encode+0x88>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801090c:	4b54      	ldr	r3, [pc, #336]	; (8010a60 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 801090e:	e0a2      	b.n	8010a56 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 8010910:	69ba      	ldr	r2, [r7, #24]
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	4413      	add	r3, r2
 8010916:	330a      	adds	r3, #10
 8010918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801091a:	429a      	cmp	r2, r3
 801091c:	d201      	bcs.n	8010922 <rsa_rsassa_pkcs1_v15_encode+0x9a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801091e:	4b50      	ldr	r3, [pc, #320]	; (8010a60 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010920:	e099      	b.n	8010a56 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
        nb_pad -= 10 + hashlen + oid_size;
 8010922:	69ba      	ldr	r2, [r7, #24]
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	4413      	add	r3, r2
 8010928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	3b0a      	subs	r3, #10
 801092e:	627b      	str	r3, [r7, #36]	; 0x24
 8010930:	e009      	b.n	8010946 <rsa_rsassa_pkcs1_v15_encode+0xbe>
    }
    else
    {
        if( nb_pad < hashlen )
 8010932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	429a      	cmp	r2, r3
 8010938:	d201      	bcs.n	801093e <rsa_rsassa_pkcs1_v15_encode+0xb6>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801093a:	4b49      	ldr	r3, [pc, #292]	; (8010a60 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 801093c:	e08b      	b.n	8010a56 <rsa_rsassa_pkcs1_v15_encode+0x1ce>

        nb_pad -= hashlen;
 801093e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8010946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010948:	2b0a      	cmp	r3, #10
 801094a:	d801      	bhi.n	8010950 <rsa_rsassa_pkcs1_v15_encode+0xc8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801094c:	4b44      	ldr	r3, [pc, #272]	; (8010a60 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 801094e:	e082      	b.n	8010a56 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
    nb_pad -= 3;
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	3b03      	subs	r3, #3
 8010954:	627b      	str	r3, [r7, #36]	; 0x24

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8010956:	6a3b      	ldr	r3, [r7, #32]
 8010958:	1c5a      	adds	r2, r3, #1
 801095a:	623a      	str	r2, [r7, #32]
 801095c:	2200      	movs	r2, #0
 801095e:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_RSA_SIGN;
 8010960:	6a3b      	ldr	r3, [r7, #32]
 8010962:	1c5a      	adds	r2, r3, #1
 8010964:	623a      	str	r2, [r7, #32]
 8010966:	2201      	movs	r2, #1
 8010968:	701a      	strb	r2, [r3, #0]
    memset( p, 0xFF, nb_pad );
 801096a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801096c:	21ff      	movs	r1, #255	; 0xff
 801096e:	6a38      	ldr	r0, [r7, #32]
 8010970:	f00d fb94 	bl	801e09c <memset>
    p += nb_pad;
 8010974:	6a3a      	ldr	r2, [r7, #32]
 8010976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010978:	4413      	add	r3, r2
 801097a:	623b      	str	r3, [r7, #32]
    *p++ = 0;
 801097c:	6a3b      	ldr	r3, [r7, #32]
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	623a      	str	r2, [r7, #32]
 8010982:	2200      	movs	r2, #0
 8010984:	701a      	strb	r2, [r3, #0]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
 8010986:	7bfb      	ldrb	r3, [r7, #15]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d106      	bne.n	801099a <rsa_rsassa_pkcs1_v15_encode+0x112>
    {
        memcpy( p, hash, hashlen );
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	6879      	ldr	r1, [r7, #4]
 8010990:	6a38      	ldr	r0, [r7, #32]
 8010992:	f00d fb5b 	bl	801e04c <memcpy>
        return( 0 );
 8010996:	2300      	movs	r3, #0
 8010998:	e05d      	b.n	8010a56 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	1c5a      	adds	r2, r3, #1
 801099e:	623a      	str	r2, [r7, #32]
 80109a0:	2230      	movs	r2, #48	; 0x30
 80109a2:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	b2da      	uxtb	r2, r3
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	4413      	add	r3, r2
 80109ae:	b2da      	uxtb	r2, r3
 80109b0:	6a3b      	ldr	r3, [r7, #32]
 80109b2:	1c59      	adds	r1, r3, #1
 80109b4:	6239      	str	r1, [r7, #32]
 80109b6:	3208      	adds	r2, #8
 80109b8:	b2d2      	uxtb	r2, r2
 80109ba:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80109bc:	6a3b      	ldr	r3, [r7, #32]
 80109be:	1c5a      	adds	r2, r3, #1
 80109c0:	623a      	str	r2, [r7, #32]
 80109c2:	2230      	movs	r2, #48	; 0x30
 80109c4:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( 0x04 + oid_size );
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	b2da      	uxtb	r2, r3
 80109ca:	6a3b      	ldr	r3, [r7, #32]
 80109cc:	1c59      	adds	r1, r3, #1
 80109ce:	6239      	str	r1, [r7, #32]
 80109d0:	3204      	adds	r2, #4
 80109d2:	b2d2      	uxtb	r2, r2
 80109d4:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_ASN1_OID;
 80109d6:	6a3b      	ldr	r3, [r7, #32]
 80109d8:	1c5a      	adds	r2, r3, #1
 80109da:	623a      	str	r2, [r7, #32]
 80109dc:	2206      	movs	r2, #6
 80109de:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char) oid_size;
 80109e0:	69b9      	ldr	r1, [r7, #24]
 80109e2:	6a3b      	ldr	r3, [r7, #32]
 80109e4:	1c5a      	adds	r2, r3, #1
 80109e6:	623a      	str	r2, [r7, #32]
 80109e8:	b2ca      	uxtb	r2, r1
 80109ea:	701a      	strb	r2, [r3, #0]
    memcpy( p, oid, oid_size );
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	69ba      	ldr	r2, [r7, #24]
 80109f0:	4619      	mov	r1, r3
 80109f2:	6a38      	ldr	r0, [r7, #32]
 80109f4:	f00d fb2a 	bl	801e04c <memcpy>
    p += oid_size;
 80109f8:	69bb      	ldr	r3, [r7, #24]
 80109fa:	6a3a      	ldr	r2, [r7, #32]
 80109fc:	4413      	add	r3, r2
 80109fe:	623b      	str	r3, [r7, #32]
    *p++ = MBEDTLS_ASN1_NULL;
 8010a00:	6a3b      	ldr	r3, [r7, #32]
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	623a      	str	r2, [r7, #32]
 8010a06:	2205      	movs	r2, #5
 8010a08:	701a      	strb	r2, [r3, #0]
    *p++ = 0x00;
 8010a0a:	6a3b      	ldr	r3, [r7, #32]
 8010a0c:	1c5a      	adds	r2, r3, #1
 8010a0e:	623a      	str	r2, [r7, #32]
 8010a10:	2200      	movs	r2, #0
 8010a12:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8010a14:	6a3b      	ldr	r3, [r7, #32]
 8010a16:	1c5a      	adds	r2, r3, #1
 8010a18:	623a      	str	r2, [r7, #32]
 8010a1a:	2204      	movs	r2, #4
 8010a1c:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char) hashlen;
 8010a1e:	6a3b      	ldr	r3, [r7, #32]
 8010a20:	1c5a      	adds	r2, r3, #1
 8010a22:	623a      	str	r2, [r7, #32]
 8010a24:	68ba      	ldr	r2, [r7, #8]
 8010a26:	b2d2      	uxtb	r2, r2
 8010a28:	701a      	strb	r2, [r3, #0]
    memcpy( p, hash, hashlen );
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	6879      	ldr	r1, [r7, #4]
 8010a2e:	6a38      	ldr	r0, [r7, #32]
 8010a30:	f00d fb0c 	bl	801e04c <memcpy>
    p += hashlen;
 8010a34:	6a3a      	ldr	r2, [r7, #32]
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	4413      	add	r3, r2
 8010a3a:	623b      	str	r3, [r7, #32]

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 8010a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	4413      	add	r3, r2
 8010a42:	6a3a      	ldr	r2, [r7, #32]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d005      	beq.n	8010a54 <rsa_rsassa_pkcs1_v15_encode+0x1cc>
    {
        mbedtls_zeroize( dst, dst_len );
 8010a48:	6839      	ldr	r1, [r7, #0]
 8010a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a4c:	f7fe fda6 	bl	800f59c <mbedtls_zeroize>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010a50:	4b03      	ldr	r3, [pc, #12]	; (8010a60 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010a52:	e000      	b.n	8010a56 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
    }

    return( 0 );
 8010a54:	2300      	movs	r3, #0
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3728      	adds	r7, #40	; 0x28
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	ffffbf80 	.word	0xffffbf80

08010a64 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b08a      	sub	sp, #40	; 0x28
 8010a68:	af02      	add	r7, sp, #8
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
 8010a70:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;
 8010a72:	2300      	movs	r3, #0
 8010a74:	61bb      	str	r3, [r7, #24]
 8010a76:	2300      	movs	r3, #0
 8010a78:	617b      	str	r3, [r7, #20]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	d106      	bne.n	8010a8e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x2a>
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d001      	beq.n	8010a8e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010a8a:	4b3a      	ldr	r3, [pc, #232]	; (8010b74 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x110>)
 8010a8c:	e06d      	b.n	8010b6a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	685a      	ldr	r2, [r3, #4]
 8010a92:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8010a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010aa0:	f7ff fef2 	bl	8010888 <rsa_rsassa_pkcs1_v15_encode>
 8010aa4:	61f8      	str	r0, [r7, #28]
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d001      	beq.n	8010ab0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x4c>
                                             ctx->len, sig ) ) != 0 )
        return( ret );
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	e05c      	b.n	8010b6a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d106      	bne.n	8010ac4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8010ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ab8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010aba:	68f8      	ldr	r0, [r7, #12]
 8010abc:	f7ff f8ca 	bl	800fc54 <mbedtls_rsa_public>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	e052      	b.n	8010b6a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = mbedtls_calloc( 1, ctx->len );
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	4619      	mov	r1, r3
 8010aca:	2001      	movs	r0, #1
 8010acc:	f00d fa6c 	bl	801dfa8 <calloc>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	61bb      	str	r3, [r7, #24]
    if( sig_try == NULL )
 8010ad4:	69bb      	ldr	r3, [r7, #24]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d102      	bne.n	8010ae0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x7c>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8010ada:	f06f 030f 	mvn.w	r3, #15
 8010ade:	e044      	b.n	8010b6a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>

    verif = mbedtls_calloc( 1, ctx->len );
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	2001      	movs	r0, #1
 8010ae8:	f00d fa5e 	bl	801dfa8 <calloc>
 8010aec:	4603      	mov	r3, r0
 8010aee:	617b      	str	r3, [r7, #20]
    if( verif == NULL )
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d105      	bne.n	8010b02 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9e>
    {
        mbedtls_free( sig_try );
 8010af6:	69b8      	ldr	r0, [r7, #24]
 8010af8:	f00d fa90 	bl	801e01c <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8010afc:	f06f 030f 	mvn.w	r3, #15
 8010b00:	e033      	b.n	8010b6a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8010b02:	69bb      	ldr	r3, [r7, #24]
 8010b04:	9300      	str	r3, [sp, #0]
 8010b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b08:	687a      	ldr	r2, [r7, #4]
 8010b0a:	68b9      	ldr	r1, [r7, #8]
 8010b0c:	68f8      	ldr	r0, [r7, #12]
 8010b0e:	f7ff f9b9 	bl	800fe84 <mbedtls_rsa_private>
 8010b12:	61f8      	str	r0, [r7, #28]
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d11d      	bne.n	8010b56 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8010b1a:	697a      	ldr	r2, [r7, #20]
 8010b1c:	69b9      	ldr	r1, [r7, #24]
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f7ff f898 	bl	800fc54 <mbedtls_rsa_public>
 8010b24:	61f8      	str	r0, [r7, #28]
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d116      	bne.n	8010b5a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf6>

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	461a      	mov	r2, r3
 8010b32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010b34:	6978      	ldr	r0, [r7, #20]
 8010b36:	f7fe fd4a 	bl	800f5ce <mbedtls_safer_memcmp>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xe2>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8010b40:	4b0d      	ldr	r3, [pc, #52]	; (8010b78 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x114>)
 8010b42:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 8010b44:	e00a      	b.n	8010b5c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>
    }

    memcpy( sig, sig_try, ctx->len );
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	69b9      	ldr	r1, [r7, #24]
 8010b4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010b50:	f00d fa7c 	bl	801e04c <memcpy>
 8010b54:	e002      	b.n	8010b5c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8010b56:	bf00      	nop
 8010b58:	e000      	b.n	8010b5c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8010b5a:	bf00      	nop

cleanup:
    mbedtls_free( sig_try );
 8010b5c:	69b8      	ldr	r0, [r7, #24]
 8010b5e:	f00d fa5d 	bl	801e01c <free>
    mbedtls_free( verif );
 8010b62:	6978      	ldr	r0, [r7, #20]
 8010b64:	f00d fa5a 	bl	801e01c <free>

    return( ret );
 8010b68:	69fb      	ldr	r3, [r7, #28]
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3720      	adds	r7, #32
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	bf00      	nop
 8010b74:	ffffbf80 	.word	0xffffbf80
 8010b78:	ffffbd00 	.word	0xffffbd00

08010b7c <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b088      	sub	sp, #32
 8010b80:	af04      	add	r7, sp, #16
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	607a      	str	r2, [r7, #4]
 8010b88:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d10f      	bne.n	8010bb4 <mbedtls_rsa_pkcs1_sign+0x38>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b96:	9303      	str	r3, [sp, #12]
 8010b98:	6a3b      	ldr	r3, [r7, #32]
 8010b9a:	9302      	str	r3, [sp, #8]
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	9301      	str	r3, [sp, #4]
 8010ba0:	7e3b      	ldrb	r3, [r7, #24]
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	687a      	ldr	r2, [r7, #4]
 8010ba8:	68b9      	ldr	r1, [r7, #8]
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	f7ff ff5a 	bl	8010a64 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	e000      	b.n	8010bb6 <mbedtls_rsa_pkcs1_sign+0x3a>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8010bb4:	4b02      	ldr	r3, [pc, #8]	; (8010bc0 <mbedtls_rsa_pkcs1_sign+0x44>)
    }
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	ffffbf00 	.word	0xffffbf00

08010bc4 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b08a      	sub	sp, #40	; 0x28
 8010bc8:	af02      	add	r7, sp, #8
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	607a      	str	r2, [r7, #4]
 8010bd0:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	61fb      	str	r3, [r7, #28]
    const size_t sig_len = ctx->len;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	617b      	str	r3, [r7, #20]
    unsigned char *encoded = NULL, *encoded_expected = NULL;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	613b      	str	r3, [r7, #16]
 8010be0:	2300      	movs	r3, #0
 8010be2:	61bb      	str	r3, [r7, #24]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d106      	bne.n	8010bf8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d001      	beq.n	8010bf8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010bf4:	4b32      	ldr	r3, [pc, #200]	; (8010cc0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xfc>)
 8010bf6:	e05f      	b.n	8010cb8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xf4>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8010bf8:	6979      	ldr	r1, [r7, #20]
 8010bfa:	2001      	movs	r0, #1
 8010bfc:	f00d f9d4 	bl	801dfa8 <calloc>
 8010c00:	4603      	mov	r3, r0
 8010c02:	613b      	str	r3, [r7, #16]
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d008      	beq.n	8010c1c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
        ( encoded_expected = mbedtls_calloc( 1, sig_len ) ) == NULL )
 8010c0a:	6979      	ldr	r1, [r7, #20]
 8010c0c:	2001      	movs	r0, #1
 8010c0e:	f00d f9cb 	bl	801dfa8 <calloc>
 8010c12:	4603      	mov	r3, r0
 8010c14:	61bb      	str	r3, [r7, #24]
    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8010c16:	69bb      	ldr	r3, [r7, #24]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d103      	bne.n	8010c24 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x60>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8010c1c:	f06f 030f 	mvn.w	r3, #15
 8010c20:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 8010c22:	e034      	b.n	8010c8e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 8010c24:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	9300      	str	r3, [sp, #0]
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c32:	f7ff fe29 	bl	8010888 <rsa_rsassa_pkcs1_v15_encode>
 8010c36:	61f8      	str	r0, [r7, #28]
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d122      	bne.n	8010c84 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc0>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d106      	bne.n	8010c52 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8e>
          ? mbedtls_rsa_public(  ctx, sig, encoded )
 8010c44:	693a      	ldr	r2, [r7, #16]
 8010c46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010c48:	68f8      	ldr	r0, [r7, #12]
 8010c4a:	f7ff f803 	bl	800fc54 <mbedtls_rsa_public>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	e008      	b.n	8010c64 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	9300      	str	r3, [sp, #0]
 8010c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	68b9      	ldr	r1, [r7, #8]
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f7ff f911 	bl	800fe84 <mbedtls_rsa_private>
 8010c62:	4603      	mov	r3, r0
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 8010c64:	61fb      	str	r3, [r7, #28]
    if( ret != 0 )
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d10d      	bne.n	8010c88 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>

    /*
     * Compare
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
 8010c6c:	697a      	ldr	r2, [r7, #20]
 8010c6e:	69b9      	ldr	r1, [r7, #24]
 8010c70:	6938      	ldr	r0, [r7, #16]
 8010c72:	f7fe fcac 	bl	800f5ce <mbedtls_safer_memcmp>
 8010c76:	61f8      	str	r0, [r7, #28]
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d006      	beq.n	8010c8c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8010c7e:	4b11      	ldr	r3, [pc, #68]	; (8010cc4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x100>)
 8010c80:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 8010c82:	e004      	b.n	8010c8e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
        goto cleanup;
 8010c84:	bf00      	nop
 8010c86:	e002      	b.n	8010c8e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
        goto cleanup;
 8010c88:	bf00      	nop
 8010c8a:	e000      	b.n	8010c8e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
    }

cleanup:
 8010c8c:	bf00      	nop

    if( encoded != NULL )
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d006      	beq.n	8010ca2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xde>
    {
        mbedtls_zeroize( encoded, sig_len );
 8010c94:	6979      	ldr	r1, [r7, #20]
 8010c96:	6938      	ldr	r0, [r7, #16]
 8010c98:	f7fe fc80 	bl	800f59c <mbedtls_zeroize>
        mbedtls_free( encoded );
 8010c9c:	6938      	ldr	r0, [r7, #16]
 8010c9e:	f00d f9bd 	bl	801e01c <free>
    }

    if( encoded_expected != NULL )
 8010ca2:	69bb      	ldr	r3, [r7, #24]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d006      	beq.n	8010cb6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xf2>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 8010ca8:	6979      	ldr	r1, [r7, #20]
 8010caa:	69b8      	ldr	r0, [r7, #24]
 8010cac:	f7fe fc76 	bl	800f59c <mbedtls_zeroize>
        mbedtls_free( encoded_expected );
 8010cb0:	69b8      	ldr	r0, [r7, #24]
 8010cb2:	f00d f9b3 	bl	801e01c <free>
    }

    return( ret );
 8010cb6:	69fb      	ldr	r3, [r7, #28]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3720      	adds	r7, #32
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	ffffbf80 	.word	0xffffbf80
 8010cc4:	ffffbc80 	.word	0xffffbc80

08010cc8 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b088      	sub	sp, #32
 8010ccc:	af04      	add	r7, sp, #16
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	607a      	str	r2, [r7, #4]
 8010cd4:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10f      	bne.n	8010d00 <mbedtls_rsa_pkcs1_verify+0x38>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	9303      	str	r3, [sp, #12]
 8010ce4:	6a3b      	ldr	r3, [r7, #32]
 8010ce6:	9302      	str	r3, [sp, #8]
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	9301      	str	r3, [sp, #4]
 8010cec:	7e3b      	ldrb	r3, [r7, #24]
 8010cee:	9300      	str	r3, [sp, #0]
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	68b9      	ldr	r1, [r7, #8]
 8010cf6:	68f8      	ldr	r0, [r7, #12]
 8010cf8:	f7ff ff64 	bl	8010bc4 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	e000      	b.n	8010d02 <mbedtls_rsa_pkcs1_verify+0x3a>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8010d00:	4b02      	ldr	r3, [pc, #8]	; (8010d0c <mbedtls_rsa_pkcs1_verify+0x44>)
    }
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	ffffbf00 	.word	0xffffbf00

08010d10 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	338c      	adds	r3, #140	; 0x8c
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7f5 ff08 	bl	8006b32 <mbedtls_mpi_free>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	3398      	adds	r3, #152	; 0x98
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7f5 ff03 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3368      	adds	r3, #104	; 0x68
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7f5 fefe 	bl	8006b32 <mbedtls_mpi_free>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	3320      	adds	r3, #32
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7f5 fef9 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	3338      	adds	r3, #56	; 0x38
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7f5 fef4 	bl	8006b32 <mbedtls_mpi_free>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	332c      	adds	r3, #44	; 0x2c
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7f5 feef 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	3314      	adds	r3, #20
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7f5 feea 	bl	8006b32 <mbedtls_mpi_free>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	3308      	adds	r3, #8
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7f5 fee5 	bl	8006b32 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	3380      	adds	r3, #128	; 0x80
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7f5 fee0 	bl	8006b32 <mbedtls_mpi_free>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	3374      	adds	r3, #116	; 0x74
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7f5 fedb 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	335c      	adds	r3, #92	; 0x5c
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7f5 fed6 	bl	8006b32 <mbedtls_mpi_free>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	3350      	adds	r3, #80	; 0x50
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7f5 fed1 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	3344      	adds	r3, #68	; 0x44
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7f5 fecc 	bl	8006b32 <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8010d9a:	bf00      	nop
 8010d9c:	3708      	adds	r7, #8
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
	...

08010da4 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 8010da4:	b5b0      	push	{r4, r5, r7, lr}
 8010da6:	b09e      	sub	sp, #120	; 0x78
 8010da8:	af02      	add	r7, sp, #8
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	607a      	str	r2, [r7, #4]
 8010db0:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8010db2:	2300      	movs	r3, #0
 8010db4:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 8010db6:	4bb4      	ldr	r3, [pc, #720]	; (8011088 <mbedtls_rsa_deduce_primes+0x2e4>)
 8010db8:	f107 0410 	add.w	r4, r7, #16
 8010dbc:	461d      	mov	r5, r3
 8010dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010dca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010dce:	6020      	str	r0, [r4, #0]
 8010dd0:	3404      	adds	r4, #4
 8010dd2:	8021      	strh	r1, [r4, #0]
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );
 8010dd4:	2336      	movs	r3, #54	; 0x36
 8010dd6:	667b      	str	r3, [r7, #100]	; 0x64

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00c      	beq.n	8010df8 <mbedtls_rsa_deduce_primes+0x54>
 8010dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d008      	beq.n	8010df8 <mbedtls_rsa_deduce_primes+0x54>
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d104      	bne.n	8010df8 <mbedtls_rsa_deduce_primes+0x54>
 8010dee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010df2:	689b      	ldr	r3, [r3, #8]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d002      	beq.n	8010dfe <mbedtls_rsa_deduce_primes+0x5a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8010df8:	f06f 0303 	mvn.w	r3, #3
 8010dfc:	e152      	b.n	80110a4 <mbedtls_rsa_deduce_primes+0x300>

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8010dfe:	2100      	movs	r1, #0
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f7f6 fb2f 	bl	8007464 <mbedtls_mpi_cmp_int>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	dd1b      	ble.n	8010e44 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8010e0c:	2101      	movs	r1, #1
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f7f6 fb28 	bl	8007464 <mbedtls_mpi_cmp_int>
 8010e14:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	dd14      	ble.n	8010e44 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8010e1a:	68f9      	ldr	r1, [r7, #12]
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7f6 fa86 	bl	800732e <mbedtls_mpi_cmp_mpi>
 8010e22:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	da0d      	bge.n	8010e44 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8010e28:	2101      	movs	r1, #1
 8010e2a:	68b8      	ldr	r0, [r7, #8]
 8010e2c:	f7f6 fb1a 	bl	8007464 <mbedtls_mpi_cmp_int>
 8010e30:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	dd06      	ble.n	8010e44 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8010e36:	68f9      	ldr	r1, [r7, #12]
 8010e38:	68b8      	ldr	r0, [r7, #8]
 8010e3a:	f7f6 fa78 	bl	800732e <mbedtls_mpi_cmp_mpi>
 8010e3e:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	db02      	blt.n	8010e4a <mbedtls_rsa_deduce_primes+0xa6>
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8010e44:	f06f 0303 	mvn.w	r3, #3
 8010e48:	e12c      	b.n	80110a4 <mbedtls_rsa_deduce_primes+0x300>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 8010e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7f5 fe58 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 8010e54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7f5 fe53 	bl	8006b04 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 8010e5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010e62:	68ba      	ldr	r2, [r7, #8]
 8010e64:	6879      	ldr	r1, [r7, #4]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7f8 f9ed 	bl	8009246 <mbedtls_mpi_mul_mpi>
 8010e6c:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f040 80f7 	bne.w	8011064 <mbedtls_rsa_deduce_primes+0x2c0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 8010e76:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8010e7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010e7e:	2201      	movs	r2, #1
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7f6 fd3e 	bl	8007902 <mbedtls_mpi_sub_int>
 8010e86:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f040 80ec 	bne.w	8011068 <mbedtls_rsa_deduce_primes+0x2c4>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 8010e90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7f5 ff55 	bl	8006d44 <mbedtls_mpi_lsb>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010ea0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d103      	bne.n	8010eb0 <mbedtls_rsa_deduce_primes+0x10c>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8010ea8:	f06f 0303 	mvn.w	r3, #3
 8010eac:	66fb      	str	r3, [r7, #108]	; 0x6c
        goto cleanup;
 8010eae:	e0ee      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 8010eb0:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8010eb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010eb8:	4611      	mov	r1, r2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7f6 f91a 	bl	80070f4 <mbedtls_mpi_shift_r>
 8010ec0:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f040 80d1 	bne.w	801106c <mbedtls_rsa_deduce_primes+0x2c8>
    /*
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    if( N->p[0] % 8 == 1 )
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	689b      	ldr	r3, [r3, #8]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	f003 0307 	and.w	r3, r3, #7
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	f040 80b6 	bne.w	801104c <mbedtls_rsa_deduce_primes+0x2a8>
        attempt = 1;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    for( ; attempt < num_primes; ++attempt )
 8010ee6:	e0b1      	b.n	801104c <mbedtls_rsa_deduce_primes+0x2a8>
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 8010ee8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8010eec:	3370      	adds	r3, #112	; 0x70
 8010eee:	443b      	add	r3, r7
 8010ef0:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010efa:	4611      	mov	r1, r2
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7f5 fed2 	bl	8006ca6 <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8010f02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f06:	68fa      	ldr	r2, [r7, #12]
 8010f08:	4619      	mov	r1, r3
 8010f0a:	6838      	ldr	r0, [r7, #0]
 8010f0c:	f7f9 fb60 	bl	800a5d0 <mbedtls_mpi_gcd>
 8010f10:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f040 80ab 	bne.w	8011070 <mbedtls_rsa_deduce_primes+0x2cc>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 8010f1a:	2101      	movs	r1, #1
 8010f1c:	6838      	ldr	r0, [r7, #0]
 8010f1e:	f7f6 faa1 	bl	8007464 <mbedtls_mpi_cmp_int>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f040 808b 	bne.w	8011040 <mbedtls_rsa_deduce_primes+0x29c>
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 8010f2a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010f2e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010f32:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8010f36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f7f8 fe9c 	bl	8009c7a <mbedtls_mpi_exp_mod>
 8010f42:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	f040 8094 	bne.w	8011074 <mbedtls_rsa_deduce_primes+0x2d0>
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8010f52:	e063      	b.n	801101c <mbedtls_rsa_deduce_primes+0x278>
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 8010f54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f58:	2101      	movs	r1, #1
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7f6 fa82 	bl	8007464 <mbedtls_mpi_cmp_int>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d061      	beq.n	801102a <mbedtls_rsa_deduce_primes+0x286>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 8010f66:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010f6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f6e:	2201      	movs	r2, #1
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7f6 fca2 	bl	80078ba <mbedtls_mpi_add_int>
 8010f76:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d17c      	bne.n	8011078 <mbedtls_rsa_deduce_primes+0x2d4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8010f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	4619      	mov	r1, r3
 8010f86:	6838      	ldr	r0, [r7, #0]
 8010f88:	f7f9 fb22 	bl	800a5d0 <mbedtls_mpi_gcd>
 8010f8c:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d173      	bne.n	801107c <mbedtls_rsa_deduce_primes+0x2d8>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8010f94:	2101      	movs	r1, #1
 8010f96:	6838      	ldr	r0, [r7, #0]
 8010f98:	f7f6 fa64 	bl	8007464 <mbedtls_mpi_cmp_int>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d112      	bne.n	8010fc8 <mbedtls_rsa_deduce_primes+0x224>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 8010fa2:	68f9      	ldr	r1, [r7, #12]
 8010fa4:	6838      	ldr	r0, [r7, #0]
 8010fa6:	f7f6 f9c2 	bl	800732e <mbedtls_mpi_cmp_mpi>
 8010faa:	4603      	mov	r3, r0
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8010fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fb0:	d10a      	bne.n	8010fc8 <mbedtls_rsa_deduce_primes+0x224>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	68fa      	ldr	r2, [r7, #12]
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010fbc:	f7f8 fa6c 	bl	8009498 <mbedtls_mpi_div_mpi>
 8010fc0:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fc4:	2b00      	cmp	r3, #0
                goto cleanup;
 8010fc6:	e062      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8010fc8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010fcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7f6 fc95 	bl	8007902 <mbedtls_mpi_sub_int>
 8010fd8:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d14f      	bne.n	8011080 <mbedtls_rsa_deduce_primes+0x2dc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 8010fe0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010fe4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010fe8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7f8 f92a 	bl	8009246 <mbedtls_mpi_mul_mpi>
 8010ff2:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d144      	bne.n	8011084 <mbedtls_rsa_deduce_primes+0x2e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 8010ffa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010ffe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011002:	68fa      	ldr	r2, [r7, #12]
 8011004:	4618      	mov	r0, r3
 8011006:	f7f8 fd1a 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 801100a:	66f8      	str	r0, [r7, #108]	; 0x6c
 801100c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801100e:	2b00      	cmp	r3, #0
 8011010:	d13c      	bne.n	801108c <mbedtls_rsa_deduce_primes+0x2e8>
        for( iter = 1; iter <= order; ++iter )
 8011012:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8011016:	3301      	adds	r3, #1
 8011018:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801101c:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8011020:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011024:	429a      	cmp	r2, r3
 8011026:	d995      	bls.n	8010f54 <mbedtls_rsa_deduce_primes+0x1b0>
 8011028:	e000      	b.n	801102c <mbedtls_rsa_deduce_primes+0x288>
                break;
 801102a:	bf00      	nop
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 801102c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011030:	2101      	movs	r1, #1
 8011032:	4618      	mov	r0, r3
 8011034:	f7f6 fa16 	bl	8007464 <mbedtls_mpi_cmp_int>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d10d      	bne.n	801105a <mbedtls_rsa_deduce_primes+0x2b6>
 801103e:	e000      	b.n	8011042 <mbedtls_rsa_deduce_primes+0x29e>
            continue;
 8011040:	bf00      	nop
    for( ; attempt < num_primes; ++attempt )
 8011042:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011046:	3301      	adds	r3, #1
 8011048:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 801104c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011050:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011052:	429a      	cmp	r2, r3
 8011054:	f63f af48 	bhi.w	8010ee8 <mbedtls_rsa_deduce_primes+0x144>
 8011058:	e000      	b.n	801105c <mbedtls_rsa_deduce_primes+0x2b8>
        {
            break;
 801105a:	bf00      	nop
        }
    }

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 801105c:	f06f 0303 	mvn.w	r3, #3
 8011060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011062:	e014      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 8011064:	bf00      	nop
 8011066:	e012      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 8011068:	bf00      	nop
 801106a:	e010      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 801106c:	bf00      	nop
 801106e:	e00e      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8011070:	bf00      	nop
 8011072:	e00c      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 8011074:	bf00      	nop
 8011076:	e00a      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 8011078:	bf00      	nop
 801107a:	e008      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 801107c:	bf00      	nop
 801107e:	e006      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011080:	bf00      	nop
 8011082:	e004      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 8011084:	bf00      	nop
 8011086:	e002      	b.n	801108e <mbedtls_rsa_deduce_primes+0x2ea>
 8011088:	08022208 	.word	0x08022208
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 801108c:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &K );
 801108e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011092:	4618      	mov	r0, r3
 8011094:	f7f5 fd4d 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 8011098:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801109c:	4618      	mov	r0, r3
 801109e:	f7f5 fd48 	bl	8006b32 <mbedtls_mpi_free>
    return( ret );
 80110a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3770      	adds	r7, #112	; 0x70
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bdb0      	pop	{r4, r5, r7, pc}

080110ac <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b08c      	sub	sp, #48	; 0x30
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	60f8      	str	r0, [r7, #12]
 80110b4:	60b9      	str	r1, [r7, #8]
 80110b6:	607a      	str	r2, [r7, #4]
 80110b8:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80110ba:	2300      	movs	r3, #0
 80110bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d006      	beq.n	80110d2 <mbedtls_rsa_deduce_private_exponent+0x26>
 80110c4:	2100      	movs	r1, #0
 80110c6:	6838      	ldr	r0, [r7, #0]
 80110c8:	f7f6 f9cc 	bl	8007464 <mbedtls_mpi_cmp_int>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d002      	beq.n	80110d8 <mbedtls_rsa_deduce_private_exponent+0x2c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80110d2:	f06f 0303 	mvn.w	r3, #3
 80110d6:	e07b      	b.n	80111d0 <mbedtls_rsa_deduce_private_exponent+0x124>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80110d8:	2101      	movs	r1, #1
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	f7f6 f9c2 	bl	8007464 <mbedtls_mpi_cmp_int>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	dd0d      	ble.n	8011102 <mbedtls_rsa_deduce_private_exponent+0x56>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80110e6:	2101      	movs	r1, #1
 80110e8:	68b8      	ldr	r0, [r7, #8]
 80110ea:	f7f6 f9bb 	bl	8007464 <mbedtls_mpi_cmp_int>
 80110ee:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	dd06      	ble.n	8011102 <mbedtls_rsa_deduce_private_exponent+0x56>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 80110f4:	2100      	movs	r1, #0
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f7f6 f9b4 	bl	8007464 <mbedtls_mpi_cmp_int>
 80110fc:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d102      	bne.n	8011108 <mbedtls_rsa_deduce_private_exponent+0x5c>
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8011102:	f06f 0303 	mvn.w	r3, #3
 8011106:	e063      	b.n	80111d0 <mbedtls_rsa_deduce_private_exponent+0x124>
    }

    mbedtls_mpi_init( &K );
 8011108:	f107 0320 	add.w	r3, r7, #32
 801110c:	4618      	mov	r0, r3
 801110e:	f7f5 fcf9 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8011112:	f107 0314 	add.w	r3, r7, #20
 8011116:	4618      	mov	r0, r3
 8011118:	f7f5 fcf4 	bl	8006b04 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 801111c:	f107 0320 	add.w	r3, r7, #32
 8011120:	2201      	movs	r2, #1
 8011122:	68f9      	ldr	r1, [r7, #12]
 8011124:	4618      	mov	r0, r3
 8011126:	f7f6 fbec 	bl	8007902 <mbedtls_mpi_sub_int>
 801112a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112e:	2b00      	cmp	r3, #0
 8011130:	d13a      	bne.n	80111a8 <mbedtls_rsa_deduce_private_exponent+0xfc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8011132:	f107 0314 	add.w	r3, r7, #20
 8011136:	2201      	movs	r2, #1
 8011138:	68b9      	ldr	r1, [r7, #8]
 801113a:	4618      	mov	r0, r3
 801113c:	f7f6 fbe1 	bl	8007902 <mbedtls_mpi_sub_int>
 8011140:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011144:	2b00      	cmp	r3, #0
 8011146:	d131      	bne.n	80111ac <mbedtls_rsa_deduce_private_exponent+0x100>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 8011148:	f107 0214 	add.w	r2, r7, #20
 801114c:	f107 0320 	add.w	r3, r7, #32
 8011150:	4619      	mov	r1, r3
 8011152:	6838      	ldr	r0, [r7, #0]
 8011154:	f7f9 fa3c 	bl	800a5d0 <mbedtls_mpi_gcd>
 8011158:	62f8      	str	r0, [r7, #44]	; 0x2c
 801115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115c:	2b00      	cmp	r3, #0
 801115e:	d127      	bne.n	80111b0 <mbedtls_rsa_deduce_private_exponent+0x104>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 8011160:	f107 0214 	add.w	r2, r7, #20
 8011164:	f107 0120 	add.w	r1, r7, #32
 8011168:	f107 0320 	add.w	r3, r7, #32
 801116c:	4618      	mov	r0, r3
 801116e:	f7f8 f86a 	bl	8009246 <mbedtls_mpi_mul_mpi>
 8011172:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	2b00      	cmp	r3, #0
 8011178:	d11c      	bne.n	80111b4 <mbedtls_rsa_deduce_private_exponent+0x108>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 801117a:	f107 0220 	add.w	r2, r7, #32
 801117e:	f107 0020 	add.w	r0, r7, #32
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	2100      	movs	r1, #0
 8011186:	f7f8 f987 	bl	8009498 <mbedtls_mpi_div_mpi>
 801118a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801118e:	2b00      	cmp	r3, #0
 8011190:	d112      	bne.n	80111b8 <mbedtls_rsa_deduce_private_exponent+0x10c>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 8011192:	f107 0320 	add.w	r3, r7, #32
 8011196:	461a      	mov	r2, r3
 8011198:	6879      	ldr	r1, [r7, #4]
 801119a:	6838      	ldr	r0, [r7, #0]
 801119c:	f7f9 fb6c 	bl	800a878 <mbedtls_mpi_inv_mod>
 80111a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80111a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a4:	2b00      	cmp	r3, #0

cleanup:
 80111a6:	e008      	b.n	80111ba <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80111a8:	bf00      	nop
 80111aa:	e006      	b.n	80111ba <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80111ac:	bf00      	nop
 80111ae:	e004      	b.n	80111ba <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 80111b0:	bf00      	nop
 80111b2:	e002      	b.n	80111ba <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 80111b4:	bf00      	nop
 80111b6:	e000      	b.n	80111ba <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 80111b8:	bf00      	nop

    mbedtls_mpi_free( &K );
 80111ba:	f107 0320 	add.w	r3, r7, #32
 80111be:	4618      	mov	r0, r3
 80111c0:	f7f5 fcb7 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80111c4:	f107 0314 	add.w	r3, r7, #20
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7f5 fcb2 	bl	8006b32 <mbedtls_mpi_free>

    return( ret );
 80111ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3730      	adds	r7, #48	; 0x30
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b08c      	sub	sp, #48	; 0x30
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	607a      	str	r2, [r7, #4]
 80111e4:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80111e6:	2300      	movs	r3, #0
 80111e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 80111ea:	f107 0320 	add.w	r3, r7, #32
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7f5 fc88 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80111f4:	f107 0314 	add.w	r3, r7, #20
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7f5 fc83 	bl	8006b04 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d037      	beq.n	8011274 <mbedtls_rsa_validate_crt+0x9c>
    {
        if( P == NULL )
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d102      	bne.n	8011210 <mbedtls_rsa_validate_crt+0x38>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 801120a:	4b6c      	ldr	r3, [pc, #432]	; (80113bc <mbedtls_rsa_validate_crt+0x1e4>)
 801120c:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 801120e:	e0b7      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8011210:	f107 0320 	add.w	r3, r7, #32
 8011214:	2201      	movs	r2, #1
 8011216:	68f9      	ldr	r1, [r7, #12]
 8011218:	4618      	mov	r0, r3
 801121a:	f7f6 fb72 	bl	8007902 <mbedtls_mpi_sub_int>
 801121e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011222:	2b00      	cmp	r3, #0
 8011224:	f040 8099 	bne.w	801135a <mbedtls_rsa_validate_crt+0x182>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 8011228:	f107 0314 	add.w	r3, r7, #20
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	6839      	ldr	r1, [r7, #0]
 8011230:	4618      	mov	r0, r3
 8011232:	f7f6 faf8 	bl	8007826 <mbedtls_mpi_sub_mpi>
 8011236:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123a:	2b00      	cmp	r3, #0
 801123c:	f040 808f 	bne.w	801135e <mbedtls_rsa_validate_crt+0x186>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8011240:	f107 0220 	add.w	r2, r7, #32
 8011244:	f107 0114 	add.w	r1, r7, #20
 8011248:	f107 0314 	add.w	r3, r7, #20
 801124c:	4618      	mov	r0, r3
 801124e:	f7f8 fbf6 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 8011252:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011256:	2b00      	cmp	r3, #0
 8011258:	f040 8083 	bne.w	8011362 <mbedtls_rsa_validate_crt+0x18a>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 801125c:	f107 0314 	add.w	r3, r7, #20
 8011260:	2100      	movs	r1, #0
 8011262:	4618      	mov	r0, r3
 8011264:	f7f6 f8fe 	bl	8007464 <mbedtls_mpi_cmp_int>
 8011268:	4603      	mov	r3, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d002      	beq.n	8011274 <mbedtls_rsa_validate_crt+0x9c>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801126e:	4b54      	ldr	r3, [pc, #336]	; (80113c0 <mbedtls_rsa_validate_crt+0x1e8>)
 8011270:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011272:	e085      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 8011274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011276:	2b00      	cmp	r3, #0
 8011278:	d034      	beq.n	80112e4 <mbedtls_rsa_validate_crt+0x10c>
    {
        if( Q == NULL )
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d102      	bne.n	8011286 <mbedtls_rsa_validate_crt+0xae>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 8011280:	4b4e      	ldr	r3, [pc, #312]	; (80113bc <mbedtls_rsa_validate_crt+0x1e4>)
 8011282:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011284:	e07c      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 8011286:	f107 0320 	add.w	r3, r7, #32
 801128a:	2201      	movs	r2, #1
 801128c:	68b9      	ldr	r1, [r7, #8]
 801128e:	4618      	mov	r0, r3
 8011290:	f7f6 fb37 	bl	8007902 <mbedtls_mpi_sub_int>
 8011294:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011298:	2b00      	cmp	r3, #0
 801129a:	d164      	bne.n	8011366 <mbedtls_rsa_validate_crt+0x18e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 801129c:	f107 0314 	add.w	r3, r7, #20
 80112a0:	687a      	ldr	r2, [r7, #4]
 80112a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7f6 fabe 	bl	8007826 <mbedtls_mpi_sub_mpi>
 80112aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80112ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d15b      	bne.n	801136a <mbedtls_rsa_validate_crt+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80112b2:	f107 0220 	add.w	r2, r7, #32
 80112b6:	f107 0114 	add.w	r1, r7, #20
 80112ba:	f107 0314 	add.w	r3, r7, #20
 80112be:	4618      	mov	r0, r3
 80112c0:	f7f8 fbbd 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 80112c4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80112c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d150      	bne.n	801136e <mbedtls_rsa_validate_crt+0x196>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80112cc:	f107 0314 	add.w	r3, r7, #20
 80112d0:	2100      	movs	r1, #0
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7f6 f8c6 	bl	8007464 <mbedtls_mpi_cmp_int>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d002      	beq.n	80112e4 <mbedtls_rsa_validate_crt+0x10c>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80112de:	4b38      	ldr	r3, [pc, #224]	; (80113c0 <mbedtls_rsa_validate_crt+0x1e8>)
 80112e0:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80112e2:	e04d      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 80112e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d043      	beq.n	8011372 <mbedtls_rsa_validate_crt+0x19a>
    {
        if( P == NULL || Q == NULL )
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d002      	beq.n	80112f6 <mbedtls_rsa_validate_crt+0x11e>
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d102      	bne.n	80112fc <mbedtls_rsa_validate_crt+0x124>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 80112f6:	4b31      	ldr	r3, [pc, #196]	; (80113bc <mbedtls_rsa_validate_crt+0x1e4>)
 80112f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80112fa:	e041      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 80112fc:	f107 0320 	add.w	r3, r7, #32
 8011300:	68ba      	ldr	r2, [r7, #8]
 8011302:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011304:	4618      	mov	r0, r3
 8011306:	f7f7 ff9e 	bl	8009246 <mbedtls_mpi_mul_mpi>
 801130a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130e:	2b00      	cmp	r3, #0
 8011310:	d131      	bne.n	8011376 <mbedtls_rsa_validate_crt+0x19e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011312:	f107 0120 	add.w	r1, r7, #32
 8011316:	f107 0320 	add.w	r3, r7, #32
 801131a:	2201      	movs	r2, #1
 801131c:	4618      	mov	r0, r3
 801131e:	f7f6 faf0 	bl	8007902 <mbedtls_mpi_sub_int>
 8011322:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011326:	2b00      	cmp	r3, #0
 8011328:	d127      	bne.n	801137a <mbedtls_rsa_validate_crt+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 801132a:	f107 0120 	add.w	r1, r7, #32
 801132e:	f107 0320 	add.w	r3, r7, #32
 8011332:	68fa      	ldr	r2, [r7, #12]
 8011334:	4618      	mov	r0, r3
 8011336:	f7f8 fb82 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 801133a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133e:	2b00      	cmp	r3, #0
 8011340:	d11d      	bne.n	801137e <mbedtls_rsa_validate_crt+0x1a6>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8011342:	f107 0320 	add.w	r3, r7, #32
 8011346:	2100      	movs	r1, #0
 8011348:	4618      	mov	r0, r3
 801134a:	f7f6 f88b 	bl	8007464 <mbedtls_mpi_cmp_int>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00e      	beq.n	8011372 <mbedtls_rsa_validate_crt+0x19a>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011354:	4b1a      	ldr	r3, [pc, #104]	; (80113c0 <mbedtls_rsa_validate_crt+0x1e8>)
 8011356:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011358:	e012      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 801135a:	bf00      	nop
 801135c:	e010      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 801135e:	bf00      	nop
 8011360:	e00e      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8011362:	bf00      	nop
 8011364:	e00c      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 8011366:	bf00      	nop
 8011368:	e00a      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 801136a:	bf00      	nop
 801136c:	e008      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 801136e:	bf00      	nop
 8011370:	e006      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        }
    }

cleanup:
 8011372:	bf00      	nop
 8011374:	e004      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 8011376:	bf00      	nop
 8011378:	e002      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 801137a:	bf00      	nop
 801137c:	e000      	b.n	8011380 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 801137e:	bf00      	nop

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 8011380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00b      	beq.n	801139e <mbedtls_rsa_validate_crt+0x1c6>
 8011386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011388:	f513 4f84 	cmn.w	r3, #16896	; 0x4200
 801138c:	d007      	beq.n	801139e <mbedtls_rsa_validate_crt+0x1c6>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 801138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011390:	f513 4f81 	cmn.w	r3, #16512	; 0x4080
 8011394:	d003      	beq.n	801139e <mbedtls_rsa_validate_crt+0x1c6>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011398:	f5a3 4384 	sub.w	r3, r3, #16896	; 0x4200
 801139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    mbedtls_mpi_free( &K );
 801139e:	f107 0320 	add.w	r3, r7, #32
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7f5 fbc5 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80113a8:	f107 0314 	add.w	r3, r7, #20
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7f5 fbc0 	bl	8006b32 <mbedtls_mpi_free>

    return( ret );
 80113b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3730      	adds	r7, #48	; 0x30
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	ffffbf80 	.word	0xffffbf80
 80113c0:	ffffbe00 	.word	0xffffbe00

080113c4 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08c      	sub	sp, #48	; 0x30
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
 80113d0:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80113d2:	2300      	movs	r3, #0
 80113d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 80113d6:	f107 0320 	add.w	r3, r7, #32
 80113da:	4618      	mov	r0, r3
 80113dc:	f7f5 fb92 	bl	8006b04 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80113e0:	f107 0314 	add.w	r3, r7, #20
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7f5 fb8d 	bl	8006b04 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d024      	beq.n	801143a <mbedtls_rsa_validate_params+0x76>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d021      	beq.n	801143a <mbedtls_rsa_validate_params+0x76>
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d01e      	beq.n	801143a <mbedtls_rsa_validate_params+0x76>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 80113fc:	f107 0320 	add.w	r3, r7, #32
 8011400:	687a      	ldr	r2, [r7, #4]
 8011402:	68b9      	ldr	r1, [r7, #8]
 8011404:	4618      	mov	r0, r3
 8011406:	f7f7 ff1e 	bl	8009246 <mbedtls_mpi_mul_mpi>
 801140a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140e:	2b00      	cmp	r3, #0
 8011410:	f040 80d2 	bne.w	80115b8 <mbedtls_rsa_validate_params+0x1f4>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8011414:	2101      	movs	r1, #1
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f7f6 f824 	bl	8007464 <mbedtls_mpi_cmp_int>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	dd08      	ble.n	8011434 <mbedtls_rsa_validate_params+0x70>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 8011422:	f107 0320 	add.w	r3, r7, #32
 8011426:	68f9      	ldr	r1, [r7, #12]
 8011428:	4618      	mov	r0, r3
 801142a:	f7f5 ff80 	bl	800732e <mbedtls_mpi_cmp_mpi>
 801142e:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8011430:	2b00      	cmp	r3, #0
 8011432:	d002      	beq.n	801143a <mbedtls_rsa_validate_params+0x76>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011434:	4b77      	ldr	r3, [pc, #476]	; (8011614 <mbedtls_rsa_validate_params+0x250>)
 8011436:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011438:	e0d1      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d024      	beq.n	801148a <mbedtls_rsa_validate_params+0xc6>
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d021      	beq.n	801148a <mbedtls_rsa_validate_params+0xc6>
 8011446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011448:	2b00      	cmp	r3, #0
 801144a:	d01e      	beq.n	801148a <mbedtls_rsa_validate_params+0xc6>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 801144c:	2101      	movs	r1, #1
 801144e:	6838      	ldr	r0, [r7, #0]
 8011450:	f7f6 f808 	bl	8007464 <mbedtls_mpi_cmp_int>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	dd14      	ble.n	8011484 <mbedtls_rsa_validate_params+0xc0>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 801145a:	2101      	movs	r1, #1
 801145c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801145e:	f7f6 f801 	bl	8007464 <mbedtls_mpi_cmp_int>
 8011462:	4603      	mov	r3, r0
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8011464:	2b00      	cmp	r3, #0
 8011466:	dd0d      	ble.n	8011484 <mbedtls_rsa_validate_params+0xc0>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8011468:	68f9      	ldr	r1, [r7, #12]
 801146a:	6838      	ldr	r0, [r7, #0]
 801146c:	f7f5 ff5f 	bl	800732e <mbedtls_mpi_cmp_mpi>
 8011470:	4603      	mov	r3, r0
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8011472:	2b00      	cmp	r3, #0
 8011474:	da06      	bge.n	8011484 <mbedtls_rsa_validate_params+0xc0>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8011476:	68f9      	ldr	r1, [r7, #12]
 8011478:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801147a:	f7f5 ff58 	bl	800732e <mbedtls_mpi_cmp_mpi>
 801147e:	4603      	mov	r3, r0
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8011480:	2b00      	cmp	r3, #0
 8011482:	db02      	blt.n	801148a <mbedtls_rsa_validate_params+0xc6>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011484:	4b63      	ldr	r3, [pc, #396]	; (8011614 <mbedtls_rsa_validate_params+0x250>)
 8011486:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011488:	e0a9      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	2b00      	cmp	r3, #0
 801148e:	f000 8095 	beq.w	80115bc <mbedtls_rsa_validate_params+0x1f8>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	f000 8091 	beq.w	80115bc <mbedtls_rsa_validate_params+0x1f8>
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	2b00      	cmp	r3, #0
 801149e:	f000 808d 	beq.w	80115bc <mbedtls_rsa_validate_params+0x1f8>
 80114a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	f000 8089 	beq.w	80115bc <mbedtls_rsa_validate_params+0x1f8>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80114aa:	2101      	movs	r1, #1
 80114ac:	68b8      	ldr	r0, [r7, #8]
 80114ae:	f7f5 ffd9 	bl	8007464 <mbedtls_mpi_cmp_int>
 80114b2:	4603      	mov	r3, r0
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	dd06      	ble.n	80114c6 <mbedtls_rsa_validate_params+0x102>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 80114b8:	2101      	movs	r1, #1
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f7f5 ffd2 	bl	8007464 <mbedtls_mpi_cmp_int>
 80114c0:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	dc02      	bgt.n	80114cc <mbedtls_rsa_validate_params+0x108>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80114c6:	4b53      	ldr	r3, [pc, #332]	; (8011614 <mbedtls_rsa_validate_params+0x250>)
 80114c8:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80114ca:	e088      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80114cc:	f107 0320 	add.w	r3, r7, #32
 80114d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114d2:	6839      	ldr	r1, [r7, #0]
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7f7 feb6 	bl	8009246 <mbedtls_mpi_mul_mpi>
 80114da:	62f8      	str	r0, [r7, #44]	; 0x2c
 80114dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d16e      	bne.n	80115c0 <mbedtls_rsa_validate_params+0x1fc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80114e2:	f107 0120 	add.w	r1, r7, #32
 80114e6:	f107 0320 	add.w	r3, r7, #32
 80114ea:	2201      	movs	r2, #1
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7f6 fa08 	bl	8007902 <mbedtls_mpi_sub_int>
 80114f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80114f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d164      	bne.n	80115c4 <mbedtls_rsa_validate_params+0x200>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 80114fa:	f107 0314 	add.w	r3, r7, #20
 80114fe:	2201      	movs	r2, #1
 8011500:	68b9      	ldr	r1, [r7, #8]
 8011502:	4618      	mov	r0, r3
 8011504:	f7f6 f9fd 	bl	8007902 <mbedtls_mpi_sub_int>
 8011508:	62f8      	str	r0, [r7, #44]	; 0x2c
 801150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150c:	2b00      	cmp	r3, #0
 801150e:	d15b      	bne.n	80115c8 <mbedtls_rsa_validate_params+0x204>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8011510:	f107 0214 	add.w	r2, r7, #20
 8011514:	f107 0120 	add.w	r1, r7, #32
 8011518:	f107 0320 	add.w	r3, r7, #32
 801151c:	4618      	mov	r0, r3
 801151e:	f7f8 fa8e 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 8011522:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011526:	2b00      	cmp	r3, #0
 8011528:	d150      	bne.n	80115cc <mbedtls_rsa_validate_params+0x208>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 801152a:	f107 0320 	add.w	r3, r7, #32
 801152e:	2100      	movs	r1, #0
 8011530:	4618      	mov	r0, r3
 8011532:	f7f5 ff97 	bl	8007464 <mbedtls_mpi_cmp_int>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d002      	beq.n	8011542 <mbedtls_rsa_validate_params+0x17e>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801153c:	4b35      	ldr	r3, [pc, #212]	; (8011614 <mbedtls_rsa_validate_params+0x250>)
 801153e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011540:	e04d      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8011542:	f107 0320 	add.w	r3, r7, #32
 8011546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011548:	6839      	ldr	r1, [r7, #0]
 801154a:	4618      	mov	r0, r3
 801154c:	f7f7 fe7b 	bl	8009246 <mbedtls_mpi_mul_mpi>
 8011550:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011554:	2b00      	cmp	r3, #0
 8011556:	d13b      	bne.n	80115d0 <mbedtls_rsa_validate_params+0x20c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011558:	f107 0120 	add.w	r1, r7, #32
 801155c:	f107 0320 	add.w	r3, r7, #32
 8011560:	2201      	movs	r2, #1
 8011562:	4618      	mov	r0, r3
 8011564:	f7f6 f9cd 	bl	8007902 <mbedtls_mpi_sub_int>
 8011568:	62f8      	str	r0, [r7, #44]	; 0x2c
 801156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156c:	2b00      	cmp	r3, #0
 801156e:	d131      	bne.n	80115d4 <mbedtls_rsa_validate_params+0x210>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8011570:	f107 0314 	add.w	r3, r7, #20
 8011574:	2201      	movs	r2, #1
 8011576:	6879      	ldr	r1, [r7, #4]
 8011578:	4618      	mov	r0, r3
 801157a:	f7f6 f9c2 	bl	8007902 <mbedtls_mpi_sub_int>
 801157e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011582:	2b00      	cmp	r3, #0
 8011584:	d128      	bne.n	80115d8 <mbedtls_rsa_validate_params+0x214>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8011586:	f107 0214 	add.w	r2, r7, #20
 801158a:	f107 0120 	add.w	r1, r7, #32
 801158e:	f107 0320 	add.w	r3, r7, #32
 8011592:	4618      	mov	r0, r3
 8011594:	f7f8 fa53 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 8011598:	62f8      	str	r0, [r7, #44]	; 0x2c
 801159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801159c:	2b00      	cmp	r3, #0
 801159e:	d11d      	bne.n	80115dc <mbedtls_rsa_validate_params+0x218>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80115a0:	f107 0320 	add.w	r3, r7, #32
 80115a4:	2100      	movs	r1, #0
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7f5 ff5c 	bl	8007464 <mbedtls_mpi_cmp_int>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d004      	beq.n	80115bc <mbedtls_rsa_validate_params+0x1f8>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80115b2:	4b18      	ldr	r3, [pc, #96]	; (8011614 <mbedtls_rsa_validate_params+0x250>)
 80115b4:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80115b6:	e012      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 80115b8:	bf00      	nop
 80115ba:	e010      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        }
    }

cleanup:
 80115bc:	bf00      	nop
 80115be:	e00e      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80115c0:	bf00      	nop
 80115c2:	e00c      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80115c4:	bf00      	nop
 80115c6:	e00a      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 80115c8:	bf00      	nop
 80115ca:	e008      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80115cc:	bf00      	nop
 80115ce:	e006      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80115d0:	bf00      	nop
 80115d2:	e004      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80115d4:	bf00      	nop
 80115d6:	e002      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80115d8:	bf00      	nop
 80115da:	e000      	b.n	80115de <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80115dc:	bf00      	nop

    mbedtls_mpi_free( &K );
 80115de:	f107 0320 	add.w	r3, r7, #32
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7f5 faa5 	bl	8006b32 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80115e8:	f107 0314 	add.w	r3, r7, #20
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7f5 faa0 	bl	8006b32 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 80115f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d007      	beq.n	8011608 <mbedtls_rsa_validate_params+0x244>
 80115f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fa:	f513 4f84 	cmn.w	r3, #16896	; 0x4200
 80115fe:	d003      	beq.n	8011608 <mbedtls_rsa_validate_params+0x244>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011602:	f5a3 4384 	sub.w	r3, r3, #16896	; 0x4200
 8011606:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return( ret );
 8011608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801160a:	4618      	mov	r0, r3
 801160c:	3730      	adds	r7, #48	; 0x30
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	ffffbe00 	.word	0xffffbe00

08011618 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b088      	sub	sp, #32
 801161c:	af00      	add	r7, sp, #0
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	60b9      	str	r1, [r7, #8]
 8011622:	607a      	str	r2, [r7, #4]
 8011624:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 801162a:	f107 0310 	add.w	r3, r7, #16
 801162e:	4618      	mov	r0, r3
 8011630:	f7f5 fa68 	bl	8006b04 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d015      	beq.n	8011666 <mbedtls_rsa_deduce_crt+0x4e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 801163a:	f107 0310 	add.w	r3, r7, #16
 801163e:	2201      	movs	r2, #1
 8011640:	68f9      	ldr	r1, [r7, #12]
 8011642:	4618      	mov	r0, r3
 8011644:	f7f6 f95d 	bl	8007902 <mbedtls_mpi_sub_int>
 8011648:	61f8      	str	r0, [r7, #28]
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d12f      	bne.n	80116b0 <mbedtls_rsa_deduce_crt+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 8011650:	f107 0310 	add.w	r3, r7, #16
 8011654:	461a      	mov	r2, r3
 8011656:	6879      	ldr	r1, [r7, #4]
 8011658:	6838      	ldr	r0, [r7, #0]
 801165a:	f7f8 f9f0 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 801165e:	61f8      	str	r0, [r7, #28]
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d126      	bne.n	80116b4 <mbedtls_rsa_deduce_crt+0x9c>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 8011666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011668:	2b00      	cmp	r3, #0
 801166a:	d015      	beq.n	8011698 <mbedtls_rsa_deduce_crt+0x80>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 801166c:	f107 0310 	add.w	r3, r7, #16
 8011670:	2201      	movs	r2, #1
 8011672:	68b9      	ldr	r1, [r7, #8]
 8011674:	4618      	mov	r0, r3
 8011676:	f7f6 f944 	bl	8007902 <mbedtls_mpi_sub_int>
 801167a:	61f8      	str	r0, [r7, #28]
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d11a      	bne.n	80116b8 <mbedtls_rsa_deduce_crt+0xa0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 8011682:	f107 0310 	add.w	r3, r7, #16
 8011686:	461a      	mov	r2, r3
 8011688:	6879      	ldr	r1, [r7, #4]
 801168a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801168c:	f7f8 f9d7 	bl	8009a3e <mbedtls_mpi_mod_mpi>
 8011690:	61f8      	str	r0, [r7, #28]
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d111      	bne.n	80116bc <mbedtls_rsa_deduce_crt+0xa4>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 8011698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169a:	2b00      	cmp	r3, #0
 801169c:	d010      	beq.n	80116c0 <mbedtls_rsa_deduce_crt+0xa8>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 801169e:	68fa      	ldr	r2, [r7, #12]
 80116a0:	68b9      	ldr	r1, [r7, #8]
 80116a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116a4:	f7f9 f8e8 	bl	800a878 <mbedtls_mpi_inv_mod>
 80116a8:	61f8      	str	r0, [r7, #28]
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	2b00      	cmp	r3, #0
    }

cleanup:
 80116ae:	e007      	b.n	80116c0 <mbedtls_rsa_deduce_crt+0xa8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 80116b0:	bf00      	nop
 80116b2:	e006      	b.n	80116c2 <mbedtls_rsa_deduce_crt+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 80116b4:	bf00      	nop
 80116b6:	e004      	b.n	80116c2 <mbedtls_rsa_deduce_crt+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 80116b8:	bf00      	nop
 80116ba:	e002      	b.n	80116c2 <mbedtls_rsa_deduce_crt+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 80116bc:	bf00      	nop
 80116be:	e000      	b.n	80116c2 <mbedtls_rsa_deduce_crt+0xaa>
cleanup:
 80116c0:	bf00      	nop
    mbedtls_mpi_free( &K );
 80116c2:	f107 0310 	add.w	r3, r7, #16
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7f5 fa33 	bl	8006b32 <mbedtls_mpi_free>

    return( ret );
 80116cc:	69fb      	ldr	r3, [r7, #28]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3720      	adds	r7, #32
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80116d6:	b480      	push	{r7}
 80116d8:	b085      	sub	sp, #20
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
 80116de:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	60fb      	str	r3, [r7, #12]
 80116e4:	e004      	b.n	80116f0 <mbedtls_zeroize+0x1a>
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	1c5a      	adds	r2, r3, #1
 80116ea:	60fa      	str	r2, [r7, #12]
 80116ec:	2200      	movs	r2, #0
 80116ee:	701a      	strb	r2, [r3, #0]
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	1e5a      	subs	r2, r3, #1
 80116f4:	603a      	str	r2, [r7, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1f5      	bne.n	80116e6 <mbedtls_zeroize+0x10>
}
 80116fa:	bf00      	nop
 80116fc:	bf00      	nop
 80116fe:	3714      	adds	r7, #20
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr

08011708 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8011710:	226c      	movs	r2, #108	; 0x6c
 8011712:	2100      	movs	r1, #0
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f00c fcc1 	bl	801e09c <memset>
}
 801171a:	bf00      	nop
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8011722:	b580      	push	{r7, lr}
 8011724:	b082      	sub	sp, #8
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d004      	beq.n	801173a <mbedtls_sha256_free+0x18>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8011730:	216c      	movs	r1, #108	; 0x6c
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f7ff ffcf 	bl	80116d6 <mbedtls_zeroize>
 8011738:	e000      	b.n	801173c <mbedtls_sha256_free+0x1a>
        return;
 801173a:	bf00      	nop
}
 801173c:	3708      	adds	r7, #8
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}

08011742 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8011742:	b580      	push	{r7, lr}
 8011744:	b082      	sub	sp, #8
 8011746:	af00      	add	r7, sp, #0
 8011748:	6078      	str	r0, [r7, #4]
 801174a:	6039      	str	r1, [r7, #0]
    *dst = *src;
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	4610      	mov	r0, r2
 8011752:	4619      	mov	r1, r3
 8011754:	236c      	movs	r3, #108	; 0x6c
 8011756:	461a      	mov	r2, r3
 8011758:	f00c fc78 	bl	801e04c <memcpy>
}
 801175c:	bf00      	nop
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8011764:	b480      	push	{r7}
 8011766:	b083      	sub	sp, #12
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
    ctx->total[0] = 0;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2200      	movs	r2, #0
 8011778:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d118      	bne.n	80117b2 <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4a1d      	ldr	r2, [pc, #116]	; (80117f8 <mbedtls_sha256_starts_ret+0x94>)
 8011784:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	4a1c      	ldr	r2, [pc, #112]	; (80117fc <mbedtls_sha256_starts_ret+0x98>)
 801178a:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	4a1c      	ldr	r2, [pc, #112]	; (8011800 <mbedtls_sha256_starts_ret+0x9c>)
 8011790:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4a1b      	ldr	r2, [pc, #108]	; (8011804 <mbedtls_sha256_starts_ret+0xa0>)
 8011796:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	4a1b      	ldr	r2, [pc, #108]	; (8011808 <mbedtls_sha256_starts_ret+0xa4>)
 801179c:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	4a1a      	ldr	r2, [pc, #104]	; (801180c <mbedtls_sha256_starts_ret+0xa8>)
 80117a2:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4a1a      	ldr	r2, [pc, #104]	; (8011810 <mbedtls_sha256_starts_ret+0xac>)
 80117a8:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4a19      	ldr	r2, [pc, #100]	; (8011814 <mbedtls_sha256_starts_ret+0xb0>)
 80117ae:	625a      	str	r2, [r3, #36]	; 0x24
 80117b0:	e017      	b.n	80117e2 <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4a18      	ldr	r2, [pc, #96]	; (8011818 <mbedtls_sha256_starts_ret+0xb4>)
 80117b6:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	4a18      	ldr	r2, [pc, #96]	; (801181c <mbedtls_sha256_starts_ret+0xb8>)
 80117bc:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	4a17      	ldr	r2, [pc, #92]	; (8011820 <mbedtls_sha256_starts_ret+0xbc>)
 80117c2:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	4a17      	ldr	r2, [pc, #92]	; (8011824 <mbedtls_sha256_starts_ret+0xc0>)
 80117c8:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	4a16      	ldr	r2, [pc, #88]	; (8011828 <mbedtls_sha256_starts_ret+0xc4>)
 80117ce:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4a16      	ldr	r2, [pc, #88]	; (801182c <mbedtls_sha256_starts_ret+0xc8>)
 80117d4:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	4a15      	ldr	r2, [pc, #84]	; (8011830 <mbedtls_sha256_starts_ret+0xcc>)
 80117da:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	4a15      	ldr	r2, [pc, #84]	; (8011834 <mbedtls_sha256_starts_ret+0xd0>)
 80117e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    ctx->is224 = is224;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	683a      	ldr	r2, [r7, #0]
 80117e6:	669a      	str	r2, [r3, #104]	; 0x68

    return( 0 );
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	370c      	adds	r7, #12
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop
 80117f8:	6a09e667 	.word	0x6a09e667
 80117fc:	bb67ae85 	.word	0xbb67ae85
 8011800:	3c6ef372 	.word	0x3c6ef372
 8011804:	a54ff53a 	.word	0xa54ff53a
 8011808:	510e527f 	.word	0x510e527f
 801180c:	9b05688c 	.word	0x9b05688c
 8011810:	1f83d9ab 	.word	0x1f83d9ab
 8011814:	5be0cd19 	.word	0x5be0cd19
 8011818:	c1059ed8 	.word	0xc1059ed8
 801181c:	367cd507 	.word	0x367cd507
 8011820:	3070dd17 	.word	0x3070dd17
 8011824:	f70e5939 	.word	0xf70e5939
 8011828:	ffc00b31 	.word	0xffc00b31
 801182c:	68581511 	.word	0x68581511
 8011830:	64f98fa7 	.word	0x64f98fa7
 8011834:	befa4fa4 	.word	0xbefa4fa4

08011838 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8011838:	b490      	push	{r4, r7}
 801183a:	b0ce      	sub	sp, #312	; 0x138
 801183c:	af00      	add	r7, sp, #0
 801183e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011842:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8011846:	6018      	str	r0, [r3, #0]
 8011848:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801184c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011850:	6019      	str	r1, [r3, #0]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8011852:	2300      	movs	r3, #0
 8011854:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011858:	e016      	b.n	8011888 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 801185a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801185e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011868:	3202      	adds	r2, #2
 801186a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801186e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011876:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801187a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 801187e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011882:	3301      	adds	r3, #1
 8011884:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801188c:	2b07      	cmp	r3, #7
 801188e:	d9e4      	bls.n	801185a <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8011890:	2300      	movs	r3, #0
 8011892:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011896:	e03e      	b.n	8011916 <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8011898:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80118a2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80118a6:	6812      	ldr	r2, [r2, #0]
 80118a8:	4413      	add	r3, r2
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	061a      	lsls	r2, r3, #24
 80118ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80118b2:	009b      	lsls	r3, r3, #2
 80118b4:	3301      	adds	r3, #1
 80118b6:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80118ba:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80118be:	6809      	ldr	r1, [r1, #0]
 80118c0:	440b      	add	r3, r1
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	041b      	lsls	r3, r3, #16
 80118c6:	431a      	orrs	r2, r3
 80118c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	3302      	adds	r3, #2
 80118d0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80118d4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80118d8:	6809      	ldr	r1, [r1, #0]
 80118da:	440b      	add	r3, r1
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	021b      	lsls	r3, r3, #8
 80118e0:	4313      	orrs	r3, r2
 80118e2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80118e6:	0092      	lsls	r2, r2, #2
 80118e8:	3203      	adds	r2, #3
 80118ea:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80118ee:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80118f2:	6809      	ldr	r1, [r1, #0]
 80118f4:	440a      	add	r2, r1
 80118f6:	7812      	ldrb	r2, [r2, #0]
 80118f8:	ea43 0102 	orr.w	r1, r3, r2
 80118fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011900:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011904:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 801190c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011910:	3301      	adds	r3, #1
 8011912:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011916:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801191a:	2b0f      	cmp	r3, #15
 801191c:	d9bc      	bls.n	8011898 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 801191e:	2300      	movs	r3, #0
 8011920:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011924:	f000 bcba 	b.w	801229c <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8011928:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801192c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011930:	69da      	ldr	r2, [r3, #28]
 8011932:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801193a:	691b      	ldr	r3, [r3, #16]
 801193c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011940:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011948:	691b      	ldr	r3, [r3, #16]
 801194a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801194e:	4059      	eors	r1, r3
 8011950:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011958:	691b      	ldr	r3, [r3, #16]
 801195a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801195e:	404b      	eors	r3, r1
 8011960:	441a      	add	r2, r3
 8011962:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801196a:	6999      	ldr	r1, [r3, #24]
 801196c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011974:	6918      	ldr	r0, [r3, #16]
 8011976:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801197a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801197e:	695c      	ldr	r4, [r3, #20]
 8011980:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011988:	699b      	ldr	r3, [r3, #24]
 801198a:	4063      	eors	r3, r4
 801198c:	4003      	ands	r3, r0
 801198e:	404b      	eors	r3, r1
 8011990:	441a      	add	r2, r3
 8011992:	49e0      	ldr	r1, [pc, #896]	; (8011d14 <mbedtls_internal_sha256_process+0x4dc>)
 8011994:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801199c:	441a      	add	r2, r3
 801199e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119a6:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80119aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119ae:	4413      	add	r3, r2
 80119b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80119b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80119c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	ea4f 3373 	mov.w	r3, r3, ror #13
 80119d0:	405a      	eors	r2, r3
 80119d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80119e0:	405a      	eors	r2, r3
 80119e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119ea:	6819      	ldr	r1, [r3, #0]
 80119ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	4019      	ands	r1, r3
 80119f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a00:	6898      	ldr	r0, [r3, #8]
 8011a02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a0a:	681c      	ldr	r4, [r3, #0]
 8011a0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	4323      	orrs	r3, r4
 8011a18:	4003      	ands	r3, r0
 8011a1a:	430b      	orrs	r3, r1
 8011a1c:	4413      	add	r3, r2
 8011a1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011a22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a2a:	68da      	ldr	r2, [r3, #12]
 8011a2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011a30:	441a      	add	r2, r3
 8011a32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a3a:	60da      	str	r2, [r3, #12]
 8011a3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011a44:	441a      	add	r2, r3
 8011a46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a4e:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8011a50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a58:	699a      	ldr	r2, [r3, #24]
 8011a5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011a68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011a76:	4059      	eors	r1, r3
 8011a78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011a86:	404b      	eors	r3, r1
 8011a88:	441a      	add	r2, r3
 8011a8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a92:	6959      	ldr	r1, [r3, #20]
 8011a94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a9c:	68d8      	ldr	r0, [r3, #12]
 8011a9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011aa6:	691c      	ldr	r4, [r3, #16]
 8011aa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ab0:	695b      	ldr	r3, [r3, #20]
 8011ab2:	4063      	eors	r3, r4
 8011ab4:	4003      	ands	r3, r0
 8011ab6:	404b      	eors	r3, r1
 8011ab8:	441a      	add	r2, r3
 8011aba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011abe:	3301      	adds	r3, #1
 8011ac0:	4994      	ldr	r1, [pc, #592]	; (8011d14 <mbedtls_internal_sha256_process+0x4dc>)
 8011ac2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011ac6:	441a      	add	r2, r3
 8011ac8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011acc:	1c59      	adds	r1, r3, #1
 8011ace:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ad2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011ada:	4413      	add	r3, r2
 8011adc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011ae0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ae8:	69db      	ldr	r3, [r3, #28]
 8011aea:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011aee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011af6:	69db      	ldr	r3, [r3, #28]
 8011af8:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011afc:	405a      	eors	r2, r3
 8011afe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b06:	69db      	ldr	r3, [r3, #28]
 8011b08:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011b0c:	405a      	eors	r2, r3
 8011b0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b16:	69d9      	ldr	r1, [r3, #28]
 8011b18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	4019      	ands	r1, r3
 8011b24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b2c:	6858      	ldr	r0, [r3, #4]
 8011b2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b36:	69dc      	ldr	r4, [r3, #28]
 8011b38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	4323      	orrs	r3, r4
 8011b44:	4003      	ands	r3, r0
 8011b46:	430b      	orrs	r3, r1
 8011b48:	4413      	add	r3, r2
 8011b4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011b4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b56:	689a      	ldr	r2, [r3, #8]
 8011b58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011b5c:	441a      	add	r2, r3
 8011b5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b66:	609a      	str	r2, [r3, #8]
 8011b68:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011b70:	441a      	add	r2, r3
 8011b72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b7a:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8011b7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b84:	695a      	ldr	r2, [r3, #20]
 8011b86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011b94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b9c:	689b      	ldr	r3, [r3, #8]
 8011b9e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011ba2:	4059      	eors	r1, r3
 8011ba4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bac:	689b      	ldr	r3, [r3, #8]
 8011bae:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011bb2:	404b      	eors	r3, r1
 8011bb4:	441a      	add	r2, r3
 8011bb6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bbe:	6919      	ldr	r1, [r3, #16]
 8011bc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bc8:	6898      	ldr	r0, [r3, #8]
 8011bca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bd2:	68dc      	ldr	r4, [r3, #12]
 8011bd4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bdc:	691b      	ldr	r3, [r3, #16]
 8011bde:	4063      	eors	r3, r4
 8011be0:	4003      	ands	r3, r0
 8011be2:	404b      	eors	r3, r1
 8011be4:	441a      	add	r2, r3
 8011be6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bea:	3302      	adds	r3, #2
 8011bec:	4949      	ldr	r1, [pc, #292]	; (8011d14 <mbedtls_internal_sha256_process+0x4dc>)
 8011bee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011bf2:	441a      	add	r2, r3
 8011bf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bf8:	1c99      	adds	r1, r3, #2
 8011bfa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011c06:	4413      	add	r3, r2
 8011c08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011c0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011c1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c22:	699b      	ldr	r3, [r3, #24]
 8011c24:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011c28:	405a      	eors	r2, r3
 8011c2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c32:	699b      	ldr	r3, [r3, #24]
 8011c34:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011c38:	405a      	eors	r2, r3
 8011c3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c42:	6999      	ldr	r1, [r3, #24]
 8011c44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c4c:	69db      	ldr	r3, [r3, #28]
 8011c4e:	4019      	ands	r1, r3
 8011c50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c58:	6818      	ldr	r0, [r3, #0]
 8011c5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c62:	699c      	ldr	r4, [r3, #24]
 8011c64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c6c:	69db      	ldr	r3, [r3, #28]
 8011c6e:	4323      	orrs	r3, r4
 8011c70:	4003      	ands	r3, r0
 8011c72:	430b      	orrs	r3, r1
 8011c74:	4413      	add	r3, r2
 8011c76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011c7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c82:	685a      	ldr	r2, [r3, #4]
 8011c84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011c88:	441a      	add	r2, r3
 8011c8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c92:	605a      	str	r2, [r3, #4]
 8011c94:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011c9c:	441a      	add	r2, r3
 8011c9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ca2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ca6:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8011ca8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cb0:	691a      	ldr	r2, [r3, #16]
 8011cb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011cc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011cce:	4059      	eors	r1, r3
 8011cd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011cde:	404b      	eors	r3, r1
 8011ce0:	441a      	add	r2, r3
 8011ce2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ce6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cea:	68d9      	ldr	r1, [r3, #12]
 8011cec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cf4:	6858      	ldr	r0, [r3, #4]
 8011cf6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cfe:	689c      	ldr	r4, [r3, #8]
 8011d00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	4063      	eors	r3, r4
 8011d0c:	4003      	ands	r3, r0
 8011d0e:	404b      	eors	r3, r1
 8011d10:	441a      	add	r2, r3
 8011d12:	e001      	b.n	8011d18 <mbedtls_internal_sha256_process+0x4e0>
 8011d14:	08025104 	.word	0x08025104
 8011d18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d1c:	3303      	adds	r3, #3
 8011d1e:	49e0      	ldr	r1, [pc, #896]	; (80120a0 <mbedtls_internal_sha256_process+0x868>)
 8011d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011d24:	441a      	add	r2, r3
 8011d26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d2a:	1cd9      	adds	r1, r3, #3
 8011d2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d38:	4413      	add	r3, r2
 8011d3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011d3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d46:	695b      	ldr	r3, [r3, #20]
 8011d48:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011d4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d54:	695b      	ldr	r3, [r3, #20]
 8011d56:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011d5a:	405a      	eors	r2, r3
 8011d5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d64:	695b      	ldr	r3, [r3, #20]
 8011d66:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011d6a:	405a      	eors	r2, r3
 8011d6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d74:	6959      	ldr	r1, [r3, #20]
 8011d76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d7e:	699b      	ldr	r3, [r3, #24]
 8011d80:	4019      	ands	r1, r3
 8011d82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d8a:	69d8      	ldr	r0, [r3, #28]
 8011d8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d94:	695c      	ldr	r4, [r3, #20]
 8011d96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d9e:	699b      	ldr	r3, [r3, #24]
 8011da0:	4323      	orrs	r3, r4
 8011da2:	4003      	ands	r3, r0
 8011da4:	430b      	orrs	r3, r1
 8011da6:	4413      	add	r3, r2
 8011da8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011dac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011dba:	441a      	add	r2, r3
 8011dbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011dc4:	601a      	str	r2, [r3, #0]
 8011dc6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011dce:	441a      	add	r2, r3
 8011dd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011dd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011dd8:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8011dda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011dde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011de2:	68da      	ldr	r2, [r3, #12]
 8011de4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011df2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011e00:	4059      	eors	r1, r3
 8011e02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011e10:	404b      	eors	r3, r1
 8011e12:	441a      	add	r2, r3
 8011e14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e1c:	6899      	ldr	r1, [r3, #8]
 8011e1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e26:	6818      	ldr	r0, [r3, #0]
 8011e28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e30:	685c      	ldr	r4, [r3, #4]
 8011e32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e3a:	689b      	ldr	r3, [r3, #8]
 8011e3c:	4063      	eors	r3, r4
 8011e3e:	4003      	ands	r3, r0
 8011e40:	404b      	eors	r3, r1
 8011e42:	441a      	add	r2, r3
 8011e44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011e48:	3304      	adds	r3, #4
 8011e4a:	4995      	ldr	r1, [pc, #596]	; (80120a0 <mbedtls_internal_sha256_process+0x868>)
 8011e4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011e50:	441a      	add	r2, r3
 8011e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011e56:	1d19      	adds	r1, r3, #4
 8011e58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e64:	4413      	add	r3, r2
 8011e66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011e6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e72:	691b      	ldr	r3, [r3, #16]
 8011e74:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011e78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e80:	691b      	ldr	r3, [r3, #16]
 8011e82:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011e86:	405a      	eors	r2, r3
 8011e88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e90:	691b      	ldr	r3, [r3, #16]
 8011e92:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011e96:	405a      	eors	r2, r3
 8011e98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ea0:	6919      	ldr	r1, [r3, #16]
 8011ea2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011eaa:	695b      	ldr	r3, [r3, #20]
 8011eac:	4019      	ands	r1, r3
 8011eae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011eb6:	6998      	ldr	r0, [r3, #24]
 8011eb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ec0:	691c      	ldr	r4, [r3, #16]
 8011ec2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011eca:	695b      	ldr	r3, [r3, #20]
 8011ecc:	4323      	orrs	r3, r4
 8011ece:	4003      	ands	r3, r0
 8011ed0:	430b      	orrs	r3, r1
 8011ed2:	4413      	add	r3, r2
 8011ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011ed8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011edc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ee0:	69da      	ldr	r2, [r3, #28]
 8011ee2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011ee6:	441a      	add	r2, r3
 8011ee8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ef0:	61da      	str	r2, [r3, #28]
 8011ef2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011efa:	441a      	add	r2, r3
 8011efc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f04:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8011f06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f0e:	689a      	ldr	r2, [r3, #8]
 8011f10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f18:	69db      	ldr	r3, [r3, #28]
 8011f1a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011f1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f26:	69db      	ldr	r3, [r3, #28]
 8011f28:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011f2c:	4059      	eors	r1, r3
 8011f2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f36:	69db      	ldr	r3, [r3, #28]
 8011f38:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011f3c:	404b      	eors	r3, r1
 8011f3e:	441a      	add	r2, r3
 8011f40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f48:	6859      	ldr	r1, [r3, #4]
 8011f4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f52:	69d8      	ldr	r0, [r3, #28]
 8011f54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f5c:	681c      	ldr	r4, [r3, #0]
 8011f5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	4063      	eors	r3, r4
 8011f6a:	4003      	ands	r3, r0
 8011f6c:	404b      	eors	r3, r1
 8011f6e:	441a      	add	r2, r3
 8011f70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f74:	3305      	adds	r3, #5
 8011f76:	494a      	ldr	r1, [pc, #296]	; (80120a0 <mbedtls_internal_sha256_process+0x868>)
 8011f78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011f7c:	441a      	add	r2, r3
 8011f7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f82:	1d59      	adds	r1, r3, #5
 8011f84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f90:	4413      	add	r3, r2
 8011f92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011f96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011fa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011fb2:	405a      	eors	r2, r3
 8011fb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fbc:	68db      	ldr	r3, [r3, #12]
 8011fbe:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011fc2:	405a      	eors	r2, r3
 8011fc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fcc:	68d9      	ldr	r1, [r3, #12]
 8011fce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fd6:	691b      	ldr	r3, [r3, #16]
 8011fd8:	4019      	ands	r1, r3
 8011fda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fe2:	6958      	ldr	r0, [r3, #20]
 8011fe4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fec:	68dc      	ldr	r4, [r3, #12]
 8011fee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ff2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ff6:	691b      	ldr	r3, [r3, #16]
 8011ff8:	4323      	orrs	r3, r4
 8011ffa:	4003      	ands	r3, r0
 8011ffc:	430b      	orrs	r3, r1
 8011ffe:	4413      	add	r3, r2
 8012000:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012004:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801200c:	699a      	ldr	r2, [r3, #24]
 801200e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012012:	441a      	add	r2, r3
 8012014:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801201c:	619a      	str	r2, [r3, #24]
 801201e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012026:	441a      	add	r2, r3
 8012028:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801202c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012030:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8012032:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012036:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801203a:	685a      	ldr	r2, [r3, #4]
 801203c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012040:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012044:	699b      	ldr	r3, [r3, #24]
 8012046:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801204a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801204e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012052:	699b      	ldr	r3, [r3, #24]
 8012054:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012058:	4059      	eors	r1, r3
 801205a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801205e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012062:	699b      	ldr	r3, [r3, #24]
 8012064:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012068:	404b      	eors	r3, r1
 801206a:	441a      	add	r2, r3
 801206c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012074:	6819      	ldr	r1, [r3, #0]
 8012076:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801207a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801207e:	6998      	ldr	r0, [r3, #24]
 8012080:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012084:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012088:	69dc      	ldr	r4, [r3, #28]
 801208a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801208e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	4063      	eors	r3, r4
 8012096:	4003      	ands	r3, r0
 8012098:	404b      	eors	r3, r1
 801209a:	441a      	add	r2, r3
 801209c:	e002      	b.n	80120a4 <mbedtls_internal_sha256_process+0x86c>
 801209e:	bf00      	nop
 80120a0:	08025104 	.word	0x08025104
 80120a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80120a8:	3306      	adds	r3, #6
 80120aa:	4981      	ldr	r1, [pc, #516]	; (80122b0 <mbedtls_internal_sha256_process+0xa78>)
 80120ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80120b0:	441a      	add	r2, r3
 80120b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80120b6:	1d99      	adds	r1, r3, #6
 80120b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80120c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80120c4:	4413      	add	r3, r2
 80120c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80120ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120d2:	689b      	ldr	r3, [r3, #8]
 80120d4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80120d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120e0:	689b      	ldr	r3, [r3, #8]
 80120e2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80120e6:	405a      	eors	r2, r3
 80120e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120f0:	689b      	ldr	r3, [r3, #8]
 80120f2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80120f6:	405a      	eors	r2, r3
 80120f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012100:	6899      	ldr	r1, [r3, #8]
 8012102:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	4019      	ands	r1, r3
 801210e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012116:	6918      	ldr	r0, [r3, #16]
 8012118:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801211c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012120:	689c      	ldr	r4, [r3, #8]
 8012122:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012126:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801212a:	68db      	ldr	r3, [r3, #12]
 801212c:	4323      	orrs	r3, r4
 801212e:	4003      	ands	r3, r0
 8012130:	430b      	orrs	r3, r1
 8012132:	4413      	add	r3, r2
 8012134:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012138:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801213c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012140:	695a      	ldr	r2, [r3, #20]
 8012142:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012146:	441a      	add	r2, r3
 8012148:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801214c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012150:	615a      	str	r2, [r3, #20]
 8012152:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801215a:	441a      	add	r2, r3
 801215c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012164:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8012166:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801216a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801216e:	681a      	ldr	r2, [r3, #0]
 8012170:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012178:	695b      	ldr	r3, [r3, #20]
 801217a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801217e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012186:	695b      	ldr	r3, [r3, #20]
 8012188:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801218c:	4059      	eors	r1, r3
 801218e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012196:	695b      	ldr	r3, [r3, #20]
 8012198:	ea4f 6373 	mov.w	r3, r3, ror #25
 801219c:	404b      	eors	r3, r1
 801219e:	441a      	add	r2, r3
 80121a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80121a8:	69d9      	ldr	r1, [r3, #28]
 80121aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80121b2:	6958      	ldr	r0, [r3, #20]
 80121b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80121bc:	699c      	ldr	r4, [r3, #24]
 80121be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80121c6:	69db      	ldr	r3, [r3, #28]
 80121c8:	4063      	eors	r3, r4
 80121ca:	4003      	ands	r3, r0
 80121cc:	404b      	eors	r3, r1
 80121ce:	441a      	add	r2, r3
 80121d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80121d4:	3307      	adds	r3, #7
 80121d6:	4936      	ldr	r1, [pc, #216]	; (80122b0 <mbedtls_internal_sha256_process+0xa78>)
 80121d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80121dc:	441a      	add	r2, r3
 80121de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80121e2:	1dd9      	adds	r1, r3, #7
 80121e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80121f0:	4413      	add	r3, r2
 80121f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80121f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012204:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012212:	405a      	eors	r2, r3
 8012214:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012222:	405a      	eors	r2, r3
 8012224:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801222c:	6859      	ldr	r1, [r3, #4]
 801222e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012236:	689b      	ldr	r3, [r3, #8]
 8012238:	4019      	ands	r1, r3
 801223a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801223e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012242:	68d8      	ldr	r0, [r3, #12]
 8012244:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801224c:	685c      	ldr	r4, [r3, #4]
 801224e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012256:	689b      	ldr	r3, [r3, #8]
 8012258:	4323      	orrs	r3, r4
 801225a:	4003      	ands	r3, r0
 801225c:	430b      	orrs	r3, r1
 801225e:	4413      	add	r3, r2
 8012260:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012264:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801226c:	691a      	ldr	r2, [r3, #16]
 801226e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012272:	441a      	add	r2, r3
 8012274:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801227c:	611a      	str	r2, [r3, #16]
 801227e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012286:	441a      	add	r2, r3
 8012288:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801228c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012290:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 8012292:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012296:	3308      	adds	r3, #8
 8012298:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801229c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80122a0:	2b0f      	cmp	r3, #15
 80122a2:	f67f ab41 	bls.w	8011928 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 80122a6:	2310      	movs	r3, #16
 80122a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80122ac:	f000 bfd5 	b.w	801325a <mbedtls_internal_sha256_process+0x1a22>
 80122b0:	08025104 	.word	0x08025104
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80122b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122bc:	69da      	ldr	r2, [r3, #28]
 80122be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122c6:	691b      	ldr	r3, [r3, #16]
 80122c8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80122cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122d4:	691b      	ldr	r3, [r3, #16]
 80122d6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80122da:	4059      	eors	r1, r3
 80122dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122e4:	691b      	ldr	r3, [r3, #16]
 80122e6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80122ea:	404b      	eors	r3, r1
 80122ec:	441a      	add	r2, r3
 80122ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122f6:	6999      	ldr	r1, [r3, #24]
 80122f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012300:	6918      	ldr	r0, [r3, #16]
 8012302:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012306:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801230a:	695c      	ldr	r4, [r3, #20]
 801230c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012314:	699b      	ldr	r3, [r3, #24]
 8012316:	4063      	eors	r3, r4
 8012318:	4003      	ands	r3, r0
 801231a:	404b      	eors	r3, r1
 801231c:	441a      	add	r2, r3
 801231e:	49ec      	ldr	r1, [pc, #944]	; (80126d0 <mbedtls_internal_sha256_process+0xe98>)
 8012320:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012324:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012328:	441a      	add	r2, r3
 801232a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801232e:	1e99      	subs	r1, r3, #2
 8012330:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012334:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012338:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801233c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012340:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012344:	1e98      	subs	r0, r3, #2
 8012346:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801234a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801234e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012352:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012356:	4059      	eors	r1, r3
 8012358:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801235c:	1e98      	subs	r0, r3, #2
 801235e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012362:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012366:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801236a:	0a9b      	lsrs	r3, r3, #10
 801236c:	4059      	eors	r1, r3
 801236e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012372:	1fd8      	subs	r0, r3, #7
 8012374:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012378:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801237c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012380:	4419      	add	r1, r3
 8012382:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012386:	f1a3 000f 	sub.w	r0, r3, #15
 801238a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801238e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012392:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012396:	ea4f 10f3 	mov.w	r0, r3, ror #7
 801239a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801239e:	f1a3 040f 	sub.w	r4, r3, #15
 80123a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80123ae:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80123b2:	4058      	eors	r0, r3
 80123b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80123b8:	f1a3 040f 	sub.w	r4, r3, #15
 80123bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80123c8:	08db      	lsrs	r3, r3, #3
 80123ca:	4043      	eors	r3, r0
 80123cc:	4419      	add	r1, r3
 80123ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80123d2:	f1a3 0010 	sub.w	r0, r3, #16
 80123d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123e2:	18c8      	adds	r0, r1, r3
 80123e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123ec:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80123f0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 80123f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123fc:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012404:	4413      	add	r3, r2
 8012406:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801240a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801240e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012418:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801241c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012426:	405a      	eors	r2, r3
 8012428:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801242c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012436:	405a      	eors	r2, r3
 8012438:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801243c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012440:	6819      	ldr	r1, [r3, #0]
 8012442:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	4019      	ands	r1, r3
 801244e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012452:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012456:	6898      	ldr	r0, [r3, #8]
 8012458:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801245c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012460:	681c      	ldr	r4, [r3, #0]
 8012462:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	4323      	orrs	r3, r4
 801246e:	4003      	ands	r3, r0
 8012470:	430b      	orrs	r3, r1
 8012472:	4413      	add	r3, r2
 8012474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012478:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801247c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012480:	68da      	ldr	r2, [r3, #12]
 8012482:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012486:	441a      	add	r2, r3
 8012488:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801248c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012490:	60da      	str	r2, [r3, #12]
 8012492:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801249a:	441a      	add	r2, r3
 801249c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124a4:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80124a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124ae:	699a      	ldr	r2, [r3, #24]
 80124b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124b8:	68db      	ldr	r3, [r3, #12]
 80124ba:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80124be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80124cc:	4059      	eors	r1, r3
 80124ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80124dc:	404b      	eors	r3, r1
 80124de:	441a      	add	r2, r3
 80124e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124e8:	6959      	ldr	r1, [r3, #20]
 80124ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124f2:	68d8      	ldr	r0, [r3, #12]
 80124f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124fc:	691c      	ldr	r4, [r3, #16]
 80124fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012506:	695b      	ldr	r3, [r3, #20]
 8012508:	4063      	eors	r3, r4
 801250a:	4003      	ands	r3, r0
 801250c:	404b      	eors	r3, r1
 801250e:	441a      	add	r2, r3
 8012510:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012514:	3301      	adds	r3, #1
 8012516:	496e      	ldr	r1, [pc, #440]	; (80126d0 <mbedtls_internal_sha256_process+0xe98>)
 8012518:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801251c:	441a      	add	r2, r3
 801251e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012522:	1e59      	subs	r1, r3, #1
 8012524:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012528:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801252c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012530:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012534:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012538:	1e58      	subs	r0, r3, #1
 801253a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801253e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012542:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012546:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801254a:	4059      	eors	r1, r3
 801254c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012550:	1e58      	subs	r0, r3, #1
 8012552:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012556:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801255a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801255e:	0a9b      	lsrs	r3, r3, #10
 8012560:	4059      	eors	r1, r3
 8012562:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012566:	1f98      	subs	r0, r3, #6
 8012568:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801256c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012570:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012574:	4419      	add	r1, r3
 8012576:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801257a:	f1a3 000e 	sub.w	r0, r3, #14
 801257e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012582:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012586:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801258a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 801258e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012592:	f1a3 040e 	sub.w	r4, r3, #14
 8012596:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801259a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801259e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80125a2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80125a6:	4058      	eors	r0, r3
 80125a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80125ac:	f1a3 040e 	sub.w	r4, r3, #14
 80125b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80125bc:	08db      	lsrs	r3, r3, #3
 80125be:	4043      	eors	r3, r0
 80125c0:	18c8      	adds	r0, r1, r3
 80125c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80125c6:	f1a3 010f 	sub.w	r1, r3, #15
 80125ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125d2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80125d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80125da:	3301      	adds	r3, #1
 80125dc:	4408      	add	r0, r1
 80125de:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80125e2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80125e6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80125ea:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80125ee:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80125f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80125f6:	4413      	add	r3, r2
 80125f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80125fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012600:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012604:	69db      	ldr	r3, [r3, #28]
 8012606:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801260a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801260e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012612:	69db      	ldr	r3, [r3, #28]
 8012614:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012618:	405a      	eors	r2, r3
 801261a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801261e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012622:	69db      	ldr	r3, [r3, #28]
 8012624:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012628:	405a      	eors	r2, r3
 801262a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801262e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012632:	69d9      	ldr	r1, [r3, #28]
 8012634:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4019      	ands	r1, r3
 8012640:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012644:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012648:	6858      	ldr	r0, [r3, #4]
 801264a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801264e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012652:	69dc      	ldr	r4, [r3, #28]
 8012654:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012658:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	4323      	orrs	r3, r4
 8012660:	4003      	ands	r3, r0
 8012662:	430b      	orrs	r3, r1
 8012664:	4413      	add	r3, r2
 8012666:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801266a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801266e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012672:	689a      	ldr	r2, [r3, #8]
 8012674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012678:	441a      	add	r2, r3
 801267a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801267e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012682:	609a      	str	r2, [r3, #8]
 8012684:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801268c:	441a      	add	r2, r3
 801268e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012696:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8012698:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801269c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126a0:	695a      	ldr	r2, [r3, #20]
 80126a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126aa:	689b      	ldr	r3, [r3, #8]
 80126ac:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80126b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126b8:	689b      	ldr	r3, [r3, #8]
 80126ba:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80126be:	4059      	eors	r1, r3
 80126c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	ea4f 6373 	mov.w	r3, r3, ror #25
 80126ce:	e001      	b.n	80126d4 <mbedtls_internal_sha256_process+0xe9c>
 80126d0:	08025104 	.word	0x08025104
 80126d4:	404b      	eors	r3, r1
 80126d6:	441a      	add	r2, r3
 80126d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126e0:	6919      	ldr	r1, [r3, #16]
 80126e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126ea:	6898      	ldr	r0, [r3, #8]
 80126ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126f4:	68dc      	ldr	r4, [r3, #12]
 80126f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	4063      	eors	r3, r4
 8012702:	4003      	ands	r3, r0
 8012704:	404b      	eors	r3, r1
 8012706:	441a      	add	r2, r3
 8012708:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801270c:	3302      	adds	r3, #2
 801270e:	49ec      	ldr	r1, [pc, #944]	; (8012ac0 <mbedtls_internal_sha256_process+0x1288>)
 8012710:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012714:	441a      	add	r2, r3
 8012716:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801271a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801271e:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012726:	ea4f 4173 	mov.w	r1, r3, ror #17
 801272a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801272e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012732:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8012736:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801273a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801273e:	4059      	eors	r1, r3
 8012740:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012744:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012748:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 801274c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012750:	0a9b      	lsrs	r3, r3, #10
 8012752:	4059      	eors	r1, r3
 8012754:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012758:	1f58      	subs	r0, r3, #5
 801275a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801275e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012762:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012766:	4419      	add	r1, r3
 8012768:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801276c:	f1a3 000d 	sub.w	r0, r3, #13
 8012770:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012774:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012778:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801277c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012780:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012784:	f1a3 040d 	sub.w	r4, r3, #13
 8012788:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801278c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012790:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012794:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012798:	4058      	eors	r0, r3
 801279a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801279e:	f1a3 040d 	sub.w	r4, r3, #13
 80127a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80127ae:	08db      	lsrs	r3, r3, #3
 80127b0:	4043      	eors	r3, r0
 80127b2:	18c8      	adds	r0, r1, r3
 80127b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80127b8:	f1a3 010e 	sub.w	r1, r3, #14
 80127bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127c4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80127c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80127cc:	3302      	adds	r3, #2
 80127ce:	4408      	add	r0, r1
 80127d0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80127d4:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80127d8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80127dc:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80127e0:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80127e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80127e8:	4413      	add	r3, r2
 80127ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80127ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80127f6:	699b      	ldr	r3, [r3, #24]
 80127f8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80127fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012804:	699b      	ldr	r3, [r3, #24]
 8012806:	ea4f 3373 	mov.w	r3, r3, ror #13
 801280a:	405a      	eors	r2, r3
 801280c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012814:	699b      	ldr	r3, [r3, #24]
 8012816:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801281a:	405a      	eors	r2, r3
 801281c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012820:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012824:	6999      	ldr	r1, [r3, #24]
 8012826:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801282a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801282e:	69db      	ldr	r3, [r3, #28]
 8012830:	4019      	ands	r1, r3
 8012832:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801283a:	6818      	ldr	r0, [r3, #0]
 801283c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012844:	699c      	ldr	r4, [r3, #24]
 8012846:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801284a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801284e:	69db      	ldr	r3, [r3, #28]
 8012850:	4323      	orrs	r3, r4
 8012852:	4003      	ands	r3, r0
 8012854:	430b      	orrs	r3, r1
 8012856:	4413      	add	r3, r2
 8012858:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801285c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012864:	685a      	ldr	r2, [r3, #4]
 8012866:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801286a:	441a      	add	r2, r3
 801286c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012874:	605a      	str	r2, [r3, #4]
 8012876:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801287a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801287e:	441a      	add	r2, r3
 8012880:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012888:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 801288a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801288e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012892:	691a      	ldr	r2, [r3, #16]
 8012894:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80128a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80128b0:	4059      	eors	r1, r3
 80128b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	ea4f 6373 	mov.w	r3, r3, ror #25
 80128c0:	404b      	eors	r3, r1
 80128c2:	441a      	add	r2, r3
 80128c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128cc:	68d9      	ldr	r1, [r3, #12]
 80128ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128d6:	6858      	ldr	r0, [r3, #4]
 80128d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128e0:	689c      	ldr	r4, [r3, #8]
 80128e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128ea:	68db      	ldr	r3, [r3, #12]
 80128ec:	4063      	eors	r3, r4
 80128ee:	4003      	ands	r3, r0
 80128f0:	404b      	eors	r3, r1
 80128f2:	441a      	add	r2, r3
 80128f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80128f8:	3303      	adds	r3, #3
 80128fa:	4971      	ldr	r1, [pc, #452]	; (8012ac0 <mbedtls_internal_sha256_process+0x1288>)
 80128fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012900:	441a      	add	r2, r3
 8012902:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012906:	1c59      	adds	r1, r3, #1
 8012908:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801290c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012914:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012918:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801291c:	1c58      	adds	r0, r3, #1
 801291e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012926:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801292a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801292e:	4059      	eors	r1, r3
 8012930:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012934:	1c58      	adds	r0, r3, #1
 8012936:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801293a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801293e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012942:	0a9b      	lsrs	r3, r3, #10
 8012944:	4059      	eors	r1, r3
 8012946:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801294a:	1f18      	subs	r0, r3, #4
 801294c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012950:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012954:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012958:	4419      	add	r1, r3
 801295a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801295e:	f1a3 000c 	sub.w	r0, r3, #12
 8012962:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012966:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801296a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801296e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012972:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012976:	f1a3 040c 	sub.w	r4, r3, #12
 801297a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801297e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012982:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012986:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801298a:	4058      	eors	r0, r3
 801298c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012990:	f1a3 040c 	sub.w	r4, r3, #12
 8012994:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012998:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801299c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80129a0:	08db      	lsrs	r3, r3, #3
 80129a2:	4043      	eors	r3, r0
 80129a4:	18c8      	adds	r0, r1, r3
 80129a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129aa:	f1a3 010d 	sub.w	r1, r3, #13
 80129ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129b6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80129ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129be:	3303      	adds	r3, #3
 80129c0:	4408      	add	r0, r1
 80129c2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80129c6:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80129ca:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80129ce:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80129d2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80129d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80129da:	4413      	add	r3, r2
 80129dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80129e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80129e8:	695b      	ldr	r3, [r3, #20]
 80129ea:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80129ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80129f6:	695b      	ldr	r3, [r3, #20]
 80129f8:	ea4f 3373 	mov.w	r3, r3, ror #13
 80129fc:	405a      	eors	r2, r3
 80129fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a06:	695b      	ldr	r3, [r3, #20]
 8012a08:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012a0c:	405a      	eors	r2, r3
 8012a0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a16:	6959      	ldr	r1, [r3, #20]
 8012a18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a20:	699b      	ldr	r3, [r3, #24]
 8012a22:	4019      	ands	r1, r3
 8012a24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a2c:	69d8      	ldr	r0, [r3, #28]
 8012a2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a36:	695c      	ldr	r4, [r3, #20]
 8012a38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a40:	699b      	ldr	r3, [r3, #24]
 8012a42:	4323      	orrs	r3, r4
 8012a44:	4003      	ands	r3, r0
 8012a46:	430b      	orrs	r3, r1
 8012a48:	4413      	add	r3, r2
 8012a4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012a5c:	441a      	add	r2, r3
 8012a5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a66:	601a      	str	r2, [r3, #0]
 8012a68:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012a70:	441a      	add	r2, r3
 8012a72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a7a:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8012a7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a84:	68da      	ldr	r2, [r3, #12]
 8012a86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012a94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012aa2:	4059      	eors	r1, r3
 8012aa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012aa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012ab2:	404b      	eors	r3, r1
 8012ab4:	441a      	add	r2, r3
 8012ab6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012abe:	e001      	b.n	8012ac4 <mbedtls_internal_sha256_process+0x128c>
 8012ac0:	08025104 	.word	0x08025104
 8012ac4:	6899      	ldr	r1, [r3, #8]
 8012ac6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ace:	6818      	ldr	r0, [r3, #0]
 8012ad0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ad4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ad8:	685c      	ldr	r4, [r3, #4]
 8012ada:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ae2:	689b      	ldr	r3, [r3, #8]
 8012ae4:	4063      	eors	r3, r4
 8012ae6:	4003      	ands	r3, r0
 8012ae8:	404b      	eors	r3, r1
 8012aea:	441a      	add	r2, r3
 8012aec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012af0:	3304      	adds	r3, #4
 8012af2:	49ec      	ldr	r1, [pc, #944]	; (8012ea4 <mbedtls_internal_sha256_process+0x166c>)
 8012af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012af8:	441a      	add	r2, r3
 8012afa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012afe:	1c99      	adds	r1, r3, #2
 8012b00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b0c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012b10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b14:	1c98      	adds	r0, r3, #2
 8012b16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012b22:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012b26:	4059      	eors	r1, r3
 8012b28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b2c:	1c98      	adds	r0, r3, #2
 8012b2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012b3a:	0a9b      	lsrs	r3, r3, #10
 8012b3c:	4059      	eors	r1, r3
 8012b3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b42:	1ed8      	subs	r0, r3, #3
 8012b44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012b50:	4419      	add	r1, r3
 8012b52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b56:	f1a3 000b 	sub.w	r0, r3, #11
 8012b5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b62:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012b66:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b6e:	f1a3 040b 	sub.w	r4, r3, #11
 8012b72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b7a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012b7e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012b82:	4058      	eors	r0, r3
 8012b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b88:	f1a3 040b 	sub.w	r4, r3, #11
 8012b8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012b98:	08db      	lsrs	r3, r3, #3
 8012b9a:	4043      	eors	r3, r0
 8012b9c:	18c8      	adds	r0, r1, r3
 8012b9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012ba2:	f1a3 010c 	sub.w	r1, r3, #12
 8012ba6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012baa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bae:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012bb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012bb6:	3304      	adds	r3, #4
 8012bb8:	4408      	add	r0, r1
 8012bba:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012bbe:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012bc2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012bc6:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012bca:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012bce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012bd2:	4413      	add	r3, r2
 8012bd4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012bd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012be0:	691b      	ldr	r3, [r3, #16]
 8012be2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012be6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012bee:	691b      	ldr	r3, [r3, #16]
 8012bf0:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012bf4:	405a      	eors	r2, r3
 8012bf6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012bfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012bfe:	691b      	ldr	r3, [r3, #16]
 8012c00:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012c04:	405a      	eors	r2, r3
 8012c06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c0e:	6919      	ldr	r1, [r3, #16]
 8012c10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c18:	695b      	ldr	r3, [r3, #20]
 8012c1a:	4019      	ands	r1, r3
 8012c1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c24:	6998      	ldr	r0, [r3, #24]
 8012c26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c2e:	691c      	ldr	r4, [r3, #16]
 8012c30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c38:	695b      	ldr	r3, [r3, #20]
 8012c3a:	4323      	orrs	r3, r4
 8012c3c:	4003      	ands	r3, r0
 8012c3e:	430b      	orrs	r3, r1
 8012c40:	4413      	add	r3, r2
 8012c42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012c46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c4e:	69da      	ldr	r2, [r3, #28]
 8012c50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012c54:	441a      	add	r2, r3
 8012c56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c5e:	61da      	str	r2, [r3, #28]
 8012c60:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012c68:	441a      	add	r2, r3
 8012c6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c72:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8012c74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c7c:	689a      	ldr	r2, [r3, #8]
 8012c7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c86:	69db      	ldr	r3, [r3, #28]
 8012c88:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012c8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c94:	69db      	ldr	r3, [r3, #28]
 8012c96:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012c9a:	4059      	eors	r1, r3
 8012c9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ca4:	69db      	ldr	r3, [r3, #28]
 8012ca6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012caa:	404b      	eors	r3, r1
 8012cac:	441a      	add	r2, r3
 8012cae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cb6:	6859      	ldr	r1, [r3, #4]
 8012cb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cc0:	69d8      	ldr	r0, [r3, #28]
 8012cc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cca:	681c      	ldr	r4, [r3, #0]
 8012ccc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	4063      	eors	r3, r4
 8012cd8:	4003      	ands	r3, r0
 8012cda:	404b      	eors	r3, r1
 8012cdc:	441a      	add	r2, r3
 8012cde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012ce2:	3305      	adds	r3, #5
 8012ce4:	496f      	ldr	r1, [pc, #444]	; (8012ea4 <mbedtls_internal_sha256_process+0x166c>)
 8012ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012cea:	441a      	add	r2, r3
 8012cec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012cf0:	1cd9      	adds	r1, r3, #3
 8012cf2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012cfe:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d06:	1cd8      	adds	r0, r3, #3
 8012d08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012d14:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012d18:	4059      	eors	r1, r3
 8012d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d1e:	1cd8      	adds	r0, r3, #3
 8012d20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012d2c:	0a9b      	lsrs	r3, r3, #10
 8012d2e:	4059      	eors	r1, r3
 8012d30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d34:	1e98      	subs	r0, r3, #2
 8012d36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012d42:	4419      	add	r1, r3
 8012d44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d48:	f1a3 000a 	sub.w	r0, r3, #10
 8012d4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012d58:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012d5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d60:	f1a3 040a 	sub.w	r4, r3, #10
 8012d64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d6c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012d70:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012d74:	4058      	eors	r0, r3
 8012d76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d7a:	f1a3 040a 	sub.w	r4, r3, #10
 8012d7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012d8a:	08db      	lsrs	r3, r3, #3
 8012d8c:	4043      	eors	r3, r0
 8012d8e:	18c8      	adds	r0, r1, r3
 8012d90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d94:	f1a3 010b 	sub.w	r1, r3, #11
 8012d98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012da0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012da4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012da8:	3305      	adds	r3, #5
 8012daa:	4408      	add	r0, r1
 8012dac:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012db0:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012db4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012db8:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012dbc:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012dc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012dca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012dce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012dd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ddc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012de0:	68db      	ldr	r3, [r3, #12]
 8012de2:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012de6:	405a      	eors	r2, r3
 8012de8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012dec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012df0:	68db      	ldr	r3, [r3, #12]
 8012df2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012df6:	405a      	eors	r2, r3
 8012df8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e00:	68d9      	ldr	r1, [r3, #12]
 8012e02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e0a:	691b      	ldr	r3, [r3, #16]
 8012e0c:	4019      	ands	r1, r3
 8012e0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e16:	6958      	ldr	r0, [r3, #20]
 8012e18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e20:	68dc      	ldr	r4, [r3, #12]
 8012e22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e2a:	691b      	ldr	r3, [r3, #16]
 8012e2c:	4323      	orrs	r3, r4
 8012e2e:	4003      	ands	r3, r0
 8012e30:	430b      	orrs	r3, r1
 8012e32:	4413      	add	r3, r2
 8012e34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012e38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e40:	699a      	ldr	r2, [r3, #24]
 8012e42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012e46:	441a      	add	r2, r3
 8012e48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e50:	619a      	str	r2, [r3, #24]
 8012e52:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012e5a:	441a      	add	r2, r3
 8012e5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e64:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8012e66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e6e:	685a      	ldr	r2, [r3, #4]
 8012e70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e78:	699b      	ldr	r3, [r3, #24]
 8012e7a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012e7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e86:	699b      	ldr	r3, [r3, #24]
 8012e88:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012e8c:	4059      	eors	r1, r3
 8012e8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e96:	699b      	ldr	r3, [r3, #24]
 8012e98:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012e9c:	404b      	eors	r3, r1
 8012e9e:	441a      	add	r2, r3
 8012ea0:	e002      	b.n	8012ea8 <mbedtls_internal_sha256_process+0x1670>
 8012ea2:	bf00      	nop
 8012ea4:	08025104 	.word	0x08025104
 8012ea8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012eb0:	6819      	ldr	r1, [r3, #0]
 8012eb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012eba:	6998      	ldr	r0, [r3, #24]
 8012ebc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ec4:	69dc      	ldr	r4, [r3, #28]
 8012ec6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4063      	eors	r3, r4
 8012ed2:	4003      	ands	r3, r0
 8012ed4:	404b      	eors	r3, r1
 8012ed6:	441a      	add	r2, r3
 8012ed8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012edc:	3306      	adds	r3, #6
 8012ede:	49e3      	ldr	r1, [pc, #908]	; (801326c <mbedtls_internal_sha256_process+0x1a34>)
 8012ee0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012ee4:	441a      	add	r2, r3
 8012ee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012eea:	1d19      	adds	r1, r3, #4
 8012eec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ef0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ef4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ef8:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012efc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f00:	1d18      	adds	r0, r3, #4
 8012f02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012f0e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012f12:	4059      	eors	r1, r3
 8012f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f18:	1d18      	adds	r0, r3, #4
 8012f1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012f26:	0a9b      	lsrs	r3, r3, #10
 8012f28:	4059      	eors	r1, r3
 8012f2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f2e:	1e58      	subs	r0, r3, #1
 8012f30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012f3c:	4419      	add	r1, r3
 8012f3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f42:	f1a3 0009 	sub.w	r0, r3, #9
 8012f46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012f52:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012f56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f5a:	f1a3 0409 	sub.w	r4, r3, #9
 8012f5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f66:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012f6a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012f6e:	4058      	eors	r0, r3
 8012f70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f74:	f1a3 0409 	sub.w	r4, r3, #9
 8012f78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f80:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012f84:	08db      	lsrs	r3, r3, #3
 8012f86:	4043      	eors	r3, r0
 8012f88:	18c8      	adds	r0, r1, r3
 8012f8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f8e:	f1a3 010a 	sub.w	r1, r3, #10
 8012f92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f9a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012f9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012fa2:	3306      	adds	r3, #6
 8012fa4:	4408      	add	r0, r1
 8012fa6:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012faa:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012fae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012fb2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012fb6:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012fba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012fbe:	4413      	add	r3, r2
 8012fc0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012fc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012fcc:	689b      	ldr	r3, [r3, #8]
 8012fce:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012fd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012fe0:	405a      	eors	r2, r3
 8012fe2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012ff0:	405a      	eors	r2, r3
 8012ff2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ffa:	6899      	ldr	r1, [r3, #8]
 8012ffc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013000:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	4019      	ands	r1, r3
 8013008:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801300c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013010:	6918      	ldr	r0, [r3, #16]
 8013012:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801301a:	689c      	ldr	r4, [r3, #8]
 801301c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013024:	68db      	ldr	r3, [r3, #12]
 8013026:	4323      	orrs	r3, r4
 8013028:	4003      	ands	r3, r0
 801302a:	430b      	orrs	r3, r1
 801302c:	4413      	add	r3, r2
 801302e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013032:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013036:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801303a:	695a      	ldr	r2, [r3, #20]
 801303c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013040:	441a      	add	r2, r3
 8013042:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801304a:	615a      	str	r2, [r3, #20]
 801304c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8013050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013054:	441a      	add	r2, r3
 8013056:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801305a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801305e:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8013060:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801306e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013072:	695b      	ldr	r3, [r3, #20]
 8013074:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013078:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801307c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013080:	695b      	ldr	r3, [r3, #20]
 8013082:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013086:	4059      	eors	r1, r3
 8013088:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801308c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013090:	695b      	ldr	r3, [r3, #20]
 8013092:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013096:	404b      	eors	r3, r1
 8013098:	441a      	add	r2, r3
 801309a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801309e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130a2:	69d9      	ldr	r1, [r3, #28]
 80130a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130ac:	6958      	ldr	r0, [r3, #20]
 80130ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130b6:	699c      	ldr	r4, [r3, #24]
 80130b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130c0:	69db      	ldr	r3, [r3, #28]
 80130c2:	4063      	eors	r3, r4
 80130c4:	4003      	ands	r3, r0
 80130c6:	404b      	eors	r3, r1
 80130c8:	441a      	add	r2, r3
 80130ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80130ce:	3307      	adds	r3, #7
 80130d0:	4966      	ldr	r1, [pc, #408]	; (801326c <mbedtls_internal_sha256_process+0x1a34>)
 80130d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80130d6:	441a      	add	r2, r3
 80130d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80130dc:	1d59      	adds	r1, r3, #5
 80130de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80130e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80130ea:	ea4f 4173 	mov.w	r1, r3, ror #17
 80130ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80130f2:	1d58      	adds	r0, r3, #5
 80130f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80130fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013100:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8013104:	4059      	eors	r1, r3
 8013106:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801310a:	1d58      	adds	r0, r3, #5
 801310c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013110:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013114:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013118:	0a9b      	lsrs	r3, r3, #10
 801311a:	4059      	eors	r1, r3
 801311c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013120:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013124:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8013128:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801312c:	4419      	add	r1, r3
 801312e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013132:	f1a3 0008 	sub.w	r0, r3, #8
 8013136:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801313a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801313e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013142:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8013146:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801314a:	f1a3 0408 	sub.w	r4, r3, #8
 801314e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013152:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013156:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801315a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801315e:	4058      	eors	r0, r3
 8013160:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013164:	f1a3 0408 	sub.w	r4, r3, #8
 8013168:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801316c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013170:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013174:	08db      	lsrs	r3, r3, #3
 8013176:	4043      	eors	r3, r0
 8013178:	18c8      	adds	r0, r1, r3
 801317a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801317e:	f1a3 0109 	sub.w	r1, r3, #9
 8013182:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013186:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801318a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801318e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013192:	3307      	adds	r3, #7
 8013194:	4408      	add	r0, r1
 8013196:	f507 719c 	add.w	r1, r7, #312	; 0x138
 801319a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801319e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80131a2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80131a6:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80131aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80131ae:	4413      	add	r3, r2
 80131b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80131b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80131c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	ea4f 3373 	mov.w	r3, r3, ror #13
 80131d0:	405a      	eors	r2, r3
 80131d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80131e0:	405a      	eors	r2, r3
 80131e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80131ea:	6859      	ldr	r1, [r3, #4]
 80131ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80131f4:	689b      	ldr	r3, [r3, #8]
 80131f6:	4019      	ands	r1, r3
 80131f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013200:	68d8      	ldr	r0, [r3, #12]
 8013202:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801320a:	685c      	ldr	r4, [r3, #4]
 801320c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013214:	689b      	ldr	r3, [r3, #8]
 8013216:	4323      	orrs	r3, r4
 8013218:	4003      	ands	r3, r0
 801321a:	430b      	orrs	r3, r1
 801321c:	4413      	add	r3, r2
 801321e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013222:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801322a:	691a      	ldr	r2, [r3, #16]
 801322c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013230:	441a      	add	r2, r3
 8013232:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013236:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801323a:	611a      	str	r2, [r3, #16]
 801323c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8013240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013244:	441a      	add	r2, r3
 8013246:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801324a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801324e:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 8013250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013254:	3308      	adds	r3, #8
 8013256:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801325a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801325e:	2b3f      	cmp	r3, #63	; 0x3f
 8013260:	f67f a828 	bls.w	80122b4 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8013264:	2300      	movs	r3, #0
 8013266:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801326a:	e023      	b.n	80132b4 <mbedtls_internal_sha256_process+0x1a7c>
 801326c:	08025104 	.word	0x08025104
        ctx->state[i] += A[i];
 8013270:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013274:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801327e:	3202      	adds	r2, #2
 8013280:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013284:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801328c:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8013290:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013294:	18d1      	adds	r1, r2, r3
 8013296:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801329a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80132a4:	3202      	adds	r2, #2
 80132a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 80132aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80132ae:	3301      	adds	r3, #1
 80132b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80132b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80132b8:	2b07      	cmp	r3, #7
 80132ba:	d9d9      	bls.n	8013270 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 80132bc:	2300      	movs	r3, #0
}
 80132be:	4618      	mov	r0, r3
 80132c0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bc90      	pop	{r4, r7}
 80132c8:	4770      	bx	lr
 80132ca:	bf00      	nop

080132cc <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b088      	sub	sp, #32
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d101      	bne.n	80132e2 <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 80132de:	2300      	movs	r3, #0
 80132e0:	e065      	b.n	80133ae <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132ea:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80132f2:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681a      	ldr	r2, [r3, #0]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	441a      	add	r2, r3
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	687a      	ldr	r2, [r7, #4]
 801330e:	429a      	cmp	r2, r3
 8013310:	d904      	bls.n	801331c <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	1c5a      	adds	r2, r3, #1
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 801331c:	69fb      	ldr	r3, [r7, #28]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d034      	beq.n	801338c <mbedtls_sha256_update_ret+0xc0>
 8013322:	687a      	ldr	r2, [r7, #4]
 8013324:	69bb      	ldr	r3, [r7, #24]
 8013326:	429a      	cmp	r2, r3
 8013328:	d330      	bcc.n	801338c <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013330:	69fb      	ldr	r3, [r7, #28]
 8013332:	4413      	add	r3, r2
 8013334:	69ba      	ldr	r2, [r7, #24]
 8013336:	68b9      	ldr	r1, [r7, #8]
 8013338:	4618      	mov	r0, r3
 801333a:	f00a fe87 	bl	801e04c <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	3328      	adds	r3, #40	; 0x28
 8013342:	4619      	mov	r1, r3
 8013344:	68f8      	ldr	r0, [r7, #12]
 8013346:	f7fe fa77 	bl	8011838 <mbedtls_internal_sha256_process>
 801334a:	6178      	str	r0, [r7, #20]
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d001      	beq.n	8013356 <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	e02b      	b.n	80133ae <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 8013356:	68ba      	ldr	r2, [r7, #8]
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	4413      	add	r3, r2
 801335c:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	1ad3      	subs	r3, r2, r3
 8013364:	607b      	str	r3, [r7, #4]
        left = 0;
 8013366:	2300      	movs	r3, #0
 8013368:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 801336a:	e00f      	b.n	801338c <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 801336c:	68b9      	ldr	r1, [r7, #8]
 801336e:	68f8      	ldr	r0, [r7, #12]
 8013370:	f7fe fa62 	bl	8011838 <mbedtls_internal_sha256_process>
 8013374:	6178      	str	r0, [r7, #20]
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d001      	beq.n	8013380 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	e016      	b.n	80133ae <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	3340      	adds	r3, #64	; 0x40
 8013384:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	3b40      	subs	r3, #64	; 0x40
 801338a:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2b3f      	cmp	r3, #63	; 0x3f
 8013390:	d8ec      	bhi.n	801336c <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d009      	beq.n	80133ac <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801339e:	69fb      	ldr	r3, [r7, #28]
 80133a0:	4413      	add	r3, r2
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	68b9      	ldr	r1, [r7, #8]
 80133a6:	4618      	mov	r0, r3
 80133a8:	f00a fe50 	bl	801e04c <memcpy>

    return( 0 );
 80133ac:	2300      	movs	r3, #0
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3720      	adds	r7, #32
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
	...

080133b8 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b08a      	sub	sp, #40	; 0x28
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
    int ret;
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 80133ce:	4313      	orrs	r3, r2
 80133d0:	627b      	str	r3, [r7, #36]	; 0x24
    low  = ( ctx->total[0] <<  3 );
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	00db      	lsls	r3, r3, #3
 80133d8:	623b      	str	r3, [r7, #32]

    PUT_UINT32_BE( high, msglen, 0 );
 80133da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133dc:	0e1b      	lsrs	r3, r3, #24
 80133de:	b2db      	uxtb	r3, r3
 80133e0:	733b      	strb	r3, [r7, #12]
 80133e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e4:	0c1b      	lsrs	r3, r3, #16
 80133e6:	b2db      	uxtb	r3, r3
 80133e8:	737b      	strb	r3, [r7, #13]
 80133ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ec:	0a1b      	lsrs	r3, r3, #8
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	73bb      	strb	r3, [r7, #14]
 80133f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f4:	b2db      	uxtb	r3, r3
 80133f6:	73fb      	strb	r3, [r7, #15]
    PUT_UINT32_BE( low,  msglen, 4 );
 80133f8:	6a3b      	ldr	r3, [r7, #32]
 80133fa:	0e1b      	lsrs	r3, r3, #24
 80133fc:	b2db      	uxtb	r3, r3
 80133fe:	743b      	strb	r3, [r7, #16]
 8013400:	6a3b      	ldr	r3, [r7, #32]
 8013402:	0c1b      	lsrs	r3, r3, #16
 8013404:	b2db      	uxtb	r3, r3
 8013406:	747b      	strb	r3, [r7, #17]
 8013408:	6a3b      	ldr	r3, [r7, #32]
 801340a:	0a1b      	lsrs	r3, r3, #8
 801340c:	b2db      	uxtb	r3, r3
 801340e:	74bb      	strb	r3, [r7, #18]
 8013410:	6a3b      	ldr	r3, [r7, #32]
 8013412:	b2db      	uxtb	r3, r3
 8013414:	74fb      	strb	r3, [r7, #19]

    last = ctx->total[0] & 0x3F;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801341e:	61fb      	str	r3, [r7, #28]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	2b37      	cmp	r3, #55	; 0x37
 8013424:	d803      	bhi.n	801342e <mbedtls_sha256_finish_ret+0x76>
 8013426:	69fb      	ldr	r3, [r7, #28]
 8013428:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801342c:	e002      	b.n	8013434 <mbedtls_sha256_finish_ret+0x7c>
 801342e:	69fb      	ldr	r3, [r7, #28]
 8013430:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8013434:	61bb      	str	r3, [r7, #24]

    if( ( ret = mbedtls_sha256_update_ret( ctx, sha256_padding, padn ) ) != 0 )
 8013436:	69ba      	ldr	r2, [r7, #24]
 8013438:	497b      	ldr	r1, [pc, #492]	; (8013628 <mbedtls_sha256_finish_ret+0x270>)
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f7ff ff46 	bl	80132cc <mbedtls_sha256_update_ret>
 8013440:	6178      	str	r0, [r7, #20]
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d001      	beq.n	801344c <mbedtls_sha256_finish_ret+0x94>
        return( ret );
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	e0e8      	b.n	801361e <mbedtls_sha256_finish_ret+0x266>

    if( ( ret = mbedtls_sha256_update_ret( ctx, msglen, 8 ) ) != 0 )
 801344c:	f107 030c 	add.w	r3, r7, #12
 8013450:	2208      	movs	r2, #8
 8013452:	4619      	mov	r1, r3
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f7ff ff39 	bl	80132cc <mbedtls_sha256_update_ret>
 801345a:	6178      	str	r0, [r7, #20]
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d001      	beq.n	8013466 <mbedtls_sha256_finish_ret+0xae>
        return( ret );
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	e0db      	b.n	801361e <mbedtls_sha256_finish_ret+0x266>

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	0e1b      	lsrs	r3, r3, #24
 801346c:	b2da      	uxtb	r2, r3
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	701a      	strb	r2, [r3, #0]
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	689b      	ldr	r3, [r3, #8]
 8013476:	0c1a      	lsrs	r2, r3, #16
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	3301      	adds	r3, #1
 801347c:	b2d2      	uxtb	r2, r2
 801347e:	701a      	strb	r2, [r3, #0]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	689b      	ldr	r3, [r3, #8]
 8013484:	0a1a      	lsrs	r2, r3, #8
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	3302      	adds	r3, #2
 801348a:	b2d2      	uxtb	r2, r2
 801348c:	701a      	strb	r2, [r3, #0]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	689a      	ldr	r2, [r3, #8]
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	3303      	adds	r3, #3
 8013496:	b2d2      	uxtb	r2, r2
 8013498:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	68db      	ldr	r3, [r3, #12]
 801349e:	0e1a      	lsrs	r2, r3, #24
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	3304      	adds	r3, #4
 80134a4:	b2d2      	uxtb	r2, r2
 80134a6:	701a      	strb	r2, [r3, #0]
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	68db      	ldr	r3, [r3, #12]
 80134ac:	0c1a      	lsrs	r2, r3, #16
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	3305      	adds	r3, #5
 80134b2:	b2d2      	uxtb	r2, r2
 80134b4:	701a      	strb	r2, [r3, #0]
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	0a1a      	lsrs	r2, r3, #8
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	3306      	adds	r3, #6
 80134c0:	b2d2      	uxtb	r2, r2
 80134c2:	701a      	strb	r2, [r3, #0]
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	68da      	ldr	r2, [r3, #12]
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	3307      	adds	r3, #7
 80134cc:	b2d2      	uxtb	r2, r2
 80134ce:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	691b      	ldr	r3, [r3, #16]
 80134d4:	0e1a      	lsrs	r2, r3, #24
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	3308      	adds	r3, #8
 80134da:	b2d2      	uxtb	r2, r2
 80134dc:	701a      	strb	r2, [r3, #0]
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	691b      	ldr	r3, [r3, #16]
 80134e2:	0c1a      	lsrs	r2, r3, #16
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	3309      	adds	r3, #9
 80134e8:	b2d2      	uxtb	r2, r2
 80134ea:	701a      	strb	r2, [r3, #0]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	691b      	ldr	r3, [r3, #16]
 80134f0:	0a1a      	lsrs	r2, r3, #8
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	330a      	adds	r3, #10
 80134f6:	b2d2      	uxtb	r2, r2
 80134f8:	701a      	strb	r2, [r3, #0]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	691a      	ldr	r2, [r3, #16]
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	330b      	adds	r3, #11
 8013502:	b2d2      	uxtb	r2, r2
 8013504:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	695b      	ldr	r3, [r3, #20]
 801350a:	0e1a      	lsrs	r2, r3, #24
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	330c      	adds	r3, #12
 8013510:	b2d2      	uxtb	r2, r2
 8013512:	701a      	strb	r2, [r3, #0]
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	695b      	ldr	r3, [r3, #20]
 8013518:	0c1a      	lsrs	r2, r3, #16
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	330d      	adds	r3, #13
 801351e:	b2d2      	uxtb	r2, r2
 8013520:	701a      	strb	r2, [r3, #0]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	695b      	ldr	r3, [r3, #20]
 8013526:	0a1a      	lsrs	r2, r3, #8
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	330e      	adds	r3, #14
 801352c:	b2d2      	uxtb	r2, r2
 801352e:	701a      	strb	r2, [r3, #0]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	695a      	ldr	r2, [r3, #20]
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	330f      	adds	r3, #15
 8013538:	b2d2      	uxtb	r2, r2
 801353a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	699b      	ldr	r3, [r3, #24]
 8013540:	0e1a      	lsrs	r2, r3, #24
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	3310      	adds	r3, #16
 8013546:	b2d2      	uxtb	r2, r2
 8013548:	701a      	strb	r2, [r3, #0]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	699b      	ldr	r3, [r3, #24]
 801354e:	0c1a      	lsrs	r2, r3, #16
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	3311      	adds	r3, #17
 8013554:	b2d2      	uxtb	r2, r2
 8013556:	701a      	strb	r2, [r3, #0]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	699b      	ldr	r3, [r3, #24]
 801355c:	0a1a      	lsrs	r2, r3, #8
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	3312      	adds	r3, #18
 8013562:	b2d2      	uxtb	r2, r2
 8013564:	701a      	strb	r2, [r3, #0]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	699a      	ldr	r2, [r3, #24]
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	3313      	adds	r3, #19
 801356e:	b2d2      	uxtb	r2, r2
 8013570:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	69db      	ldr	r3, [r3, #28]
 8013576:	0e1a      	lsrs	r2, r3, #24
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	3314      	adds	r3, #20
 801357c:	b2d2      	uxtb	r2, r2
 801357e:	701a      	strb	r2, [r3, #0]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	69db      	ldr	r3, [r3, #28]
 8013584:	0c1a      	lsrs	r2, r3, #16
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	3315      	adds	r3, #21
 801358a:	b2d2      	uxtb	r2, r2
 801358c:	701a      	strb	r2, [r3, #0]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	69db      	ldr	r3, [r3, #28]
 8013592:	0a1a      	lsrs	r2, r3, #8
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	3316      	adds	r3, #22
 8013598:	b2d2      	uxtb	r2, r2
 801359a:	701a      	strb	r2, [r3, #0]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	69da      	ldr	r2, [r3, #28]
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	3317      	adds	r3, #23
 80135a4:	b2d2      	uxtb	r2, r2
 80135a6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6a1b      	ldr	r3, [r3, #32]
 80135ac:	0e1a      	lsrs	r2, r3, #24
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	3318      	adds	r3, #24
 80135b2:	b2d2      	uxtb	r2, r2
 80135b4:	701a      	strb	r2, [r3, #0]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6a1b      	ldr	r3, [r3, #32]
 80135ba:	0c1a      	lsrs	r2, r3, #16
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	3319      	adds	r3, #25
 80135c0:	b2d2      	uxtb	r2, r2
 80135c2:	701a      	strb	r2, [r3, #0]
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6a1b      	ldr	r3, [r3, #32]
 80135c8:	0a1a      	lsrs	r2, r3, #8
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	331a      	adds	r3, #26
 80135ce:	b2d2      	uxtb	r2, r2
 80135d0:	701a      	strb	r2, [r3, #0]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6a1a      	ldr	r2, [r3, #32]
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	331b      	adds	r3, #27
 80135da:	b2d2      	uxtb	r2, r2
 80135dc:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d11a      	bne.n	801361c <mbedtls_sha256_finish_ret+0x264>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ea:	0e1a      	lsrs	r2, r3, #24
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	331c      	adds	r3, #28
 80135f0:	b2d2      	uxtb	r2, r2
 80135f2:	701a      	strb	r2, [r3, #0]
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135f8:	0c1a      	lsrs	r2, r3, #16
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	331d      	adds	r3, #29
 80135fe:	b2d2      	uxtb	r2, r2
 8013600:	701a      	strb	r2, [r3, #0]
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013606:	0a1a      	lsrs	r2, r3, #8
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	331e      	adds	r3, #30
 801360c:	b2d2      	uxtb	r2, r2
 801360e:	701a      	strb	r2, [r3, #0]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	331f      	adds	r3, #31
 8013618:	b2d2      	uxtb	r2, r2
 801361a:	701a      	strb	r2, [r3, #0]

    return( 0 );
 801361c:	2300      	movs	r3, #0
}
 801361e:	4618      	mov	r0, r3
 8013620:	3728      	adds	r7, #40	; 0x28
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	08025204 	.word	0x08025204

0801362c <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b0a0      	sub	sp, #128	; 0x80
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 801363a:	f107 0310 	add.w	r3, r7, #16
 801363e:	4618      	mov	r0, r3
 8013640:	f7fe f862 	bl	8011708 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8013644:	f107 0310 	add.w	r3, r7, #16
 8013648:	6839      	ldr	r1, [r7, #0]
 801364a:	4618      	mov	r0, r3
 801364c:	f7fe f88a 	bl	8011764 <mbedtls_sha256_starts_ret>
 8013650:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013654:	2b00      	cmp	r3, #0
 8013656:	d114      	bne.n	8013682 <mbedtls_sha256_ret+0x56>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8013658:	f107 0310 	add.w	r3, r7, #16
 801365c:	68ba      	ldr	r2, [r7, #8]
 801365e:	68f9      	ldr	r1, [r7, #12]
 8013660:	4618      	mov	r0, r3
 8013662:	f7ff fe33 	bl	80132cc <mbedtls_sha256_update_ret>
 8013666:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801366a:	2b00      	cmp	r3, #0
 801366c:	d10b      	bne.n	8013686 <mbedtls_sha256_ret+0x5a>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 801366e:	f107 0310 	add.w	r3, r7, #16
 8013672:	6879      	ldr	r1, [r7, #4]
 8013674:	4618      	mov	r0, r3
 8013676:	f7ff fe9f 	bl	80133b8 <mbedtls_sha256_finish_ret>
 801367a:	67f8      	str	r0, [r7, #124]	; 0x7c
 801367c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801367e:	2b00      	cmp	r3, #0
        goto exit;

exit:
 8013680:	e002      	b.n	8013688 <mbedtls_sha256_ret+0x5c>
        goto exit;
 8013682:	bf00      	nop
 8013684:	e000      	b.n	8013688 <mbedtls_sha256_ret+0x5c>
        goto exit;
 8013686:	bf00      	nop
    mbedtls_sha256_free( &ctx );
 8013688:	f107 0310 	add.w	r3, r7, #16
 801368c:	4618      	mov	r0, r3
 801368e:	f7fe f848 	bl	8011722 <mbedtls_sha256_free>

    return( ret );
 8013692:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8013694:	4618      	mov	r0, r3
 8013696:	3780      	adds	r7, #128	; 0x80
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}

0801369c <mbedtls_ssl_list_ciphersuites>:
      0, 0, 0, 0, 0 }
};

#if defined(MBEDTLS_SSL_CIPHERSUITES)
const int *mbedtls_ssl_list_ciphersuites( void )
{
 801369c:	b480      	push	{r7}
 801369e:	af00      	add	r7, sp, #0
    return( ciphersuite_preference );
 80136a0:	4b02      	ldr	r3, [pc, #8]	; (80136ac <mbedtls_ssl_list_ciphersuites+0x10>)
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	46bd      	mov	sp, r7
 80136a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136aa:	4770      	bx	lr
 80136ac:	08025244 	.word	0x08025244

080136b0 <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
 80136b0:	b480      	push	{r7}
 80136b2:	b085      	sub	sp, #20
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 80136b8:	4b0b      	ldr	r3, [pc, #44]	; (80136e8 <mbedtls_ssl_ciphersuite_from_id+0x38>)
 80136ba:	60fb      	str	r3, [r7, #12]

    while( cur->id != 0 )
 80136bc:	e009      	b.n	80136d2 <mbedtls_ssl_ciphersuite_from_id+0x22>
    {
        if( cur->id == ciphersuite )
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d101      	bne.n	80136cc <mbedtls_ssl_ciphersuite_from_id+0x1c>
            return( cur );
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	e007      	b.n	80136dc <mbedtls_ssl_ciphersuite_from_id+0x2c>

        cur++;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	3320      	adds	r3, #32
 80136d0:	60fb      	str	r3, [r7, #12]
    while( cur->id != 0 )
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d1f1      	bne.n	80136be <mbedtls_ssl_ciphersuite_from_id+0xe>
    }

    return( NULL );
 80136da:	2300      	movs	r3, #0
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3714      	adds	r7, #20
 80136e0:	46bd      	mov	sp, r7
 80136e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e6:	4770      	bx	lr
 80136e8:	08025254 	.word	0x08025254

080136ec <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b084      	sub	sp, #16
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f7ff ffdb 	bl	80136b0 <mbedtls_ssl_ciphersuite_from_id>
 80136fa:	60f8      	str	r0, [r7, #12]

    if( cur == NULL )
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d101      	bne.n	8013706 <mbedtls_ssl_get_ciphersuite_name+0x1a>
        return( "unknown" );
 8013702:	4b04      	ldr	r3, [pc, #16]	; (8013714 <mbedtls_ssl_get_ciphersuite_name+0x28>)
 8013704:	e001      	b.n	801370a <mbedtls_ssl_get_ciphersuite_name+0x1e>

    return( cur->name );
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	685b      	ldr	r3, [r3, #4]
}
 801370a:	4618      	mov	r0, r3
 801370c:	3710      	adds	r7, #16
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	080222a4 	.word	0x080222a4

08013718 <mbedtls_ssl_ciphersuite_cert_req_allowed>:
    }
}
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */

static inline int mbedtls_ssl_ciphersuite_cert_req_allowed( const mbedtls_ssl_ciphersuite_t *info )
{
 8013718:	b480      	push	{r7}
 801371a:	b083      	sub	sp, #12
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
    switch( info->key_exchange )
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	7a9b      	ldrb	r3, [r3, #10]
 8013724:	2b04      	cmp	r3, #4
 8013726:	dc02      	bgt.n	801372e <mbedtls_ssl_ciphersuite_cert_req_allowed+0x16>
 8013728:	2b00      	cmp	r3, #0
 801372a:	dc03      	bgt.n	8013734 <mbedtls_ssl_ciphersuite_cert_req_allowed+0x1c>
 801372c:	e004      	b.n	8013738 <mbedtls_ssl_ciphersuite_cert_req_allowed+0x20>
 801372e:	3b09      	subs	r3, #9
 8013730:	2b01      	cmp	r3, #1
 8013732:	d801      	bhi.n	8013738 <mbedtls_ssl_ciphersuite_cert_req_allowed+0x20>
        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( 1 );
 8013734:	2301      	movs	r3, #1
 8013736:	e000      	b.n	801373a <mbedtls_ssl_ciphersuite_cert_req_allowed+0x22>

        default:
            return( 0 );
 8013738:	2300      	movs	r3, #0
    }
}
 801373a:	4618      	mov	r0, r3
 801373c:	370c      	adds	r7, #12
 801373e:	46bd      	mov	sp, r7
 8013740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013744:	4770      	bx	lr

08013746 <mbedtls_ssl_own_key>:
                                mbedtls_md_type_t md );
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
 8013746:	b480      	push	{r7}
 8013748:	b085      	sub	sp, #20
 801374a:	af00      	add	r7, sp, #0
 801374c:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013752:	2b00      	cmp	r3, #0
 8013754:	d009      	beq.n	801376a <mbedtls_ssl_own_key+0x24>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801375a:	685b      	ldr	r3, [r3, #4]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d004      	beq.n	801376a <mbedtls_ssl_own_key+0x24>
        key_cert = ssl->handshake->key_cert;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	60fb      	str	r3, [r7, #12]
 8013768:	e003      	b.n	8013772 <mbedtls_ssl_own_key+0x2c>
    else
        key_cert = ssl->conf->key_cert;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013770:	60fb      	str	r3, [r7, #12]

    return( key_cert == NULL ? NULL : key_cert->key );
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d002      	beq.n	801377e <mbedtls_ssl_own_key+0x38>
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	e000      	b.n	8013780 <mbedtls_ssl_own_key+0x3a>
 801377e:	2300      	movs	r3, #0
}
 8013780:	4618      	mov	r0, r3
 8013782:	3714      	adds	r7, #20
 8013784:	46bd      	mov	sp, r7
 8013786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378a:	4770      	bx	lr

0801378c <mbedtls_ssl_own_cert>:

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
 801378c:	b480      	push	{r7}
 801378e:	b085      	sub	sp, #20
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013798:	2b00      	cmp	r3, #0
 801379a:	d009      	beq.n	80137b0 <mbedtls_ssl_own_cert+0x24>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d004      	beq.n	80137b0 <mbedtls_ssl_own_cert+0x24>
        key_cert = ssl->handshake->key_cert;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	60fb      	str	r3, [r7, #12]
 80137ae:	e003      	b.n	80137b8 <mbedtls_ssl_own_cert+0x2c>
    else
        key_cert = ssl->conf->key_cert;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137b6:	60fb      	str	r3, [r7, #12]

    return( key_cert == NULL ? NULL : key_cert->cert );
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d002      	beq.n	80137c4 <mbedtls_ssl_own_cert+0x38>
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	e000      	b.n	80137c6 <mbedtls_ssl_own_cert+0x3a>
 80137c4:	2300      	movs	r3, #0
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3714      	adds	r7, #20
 80137ca:	46bd      	mov	sp, r7
 80137cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d0:	4770      	bx	lr

080137d2 <mbedtls_ssl_hs_hdr_len>:
#endif
    return( 5 );
}

static inline size_t mbedtls_ssl_hs_hdr_len( const mbedtls_ssl_context *ssl )
{
 80137d2:	b480      	push	{r7}
 80137d4:	b083      	sub	sp, #12
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        return( 12 );
#else
    ((void) ssl);
#endif
    return( 4 );
 80137da:	2304      	movs	r3, #4
}
 80137dc:	4618      	mov	r0, r3
 80137de:	370c      	adds	r7, #12
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr

080137e8 <ssl_write_signature_algorithms_ext>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
 80137e8:	b590      	push	{r4, r7, lr}
 80137ea:	b08d      	sub	sp, #52	; 0x34
 80137ec:	af02      	add	r7, sp, #8
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
    unsigned char *p = buf;
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	61fb      	str	r3, [r7, #28]
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80137fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013802:	61bb      	str	r3, [r7, #24]
    size_t sig_alg_len = 0;
 8013804:	2300      	movs	r3, #0
 8013806:	627b      	str	r3, [r7, #36]	; 0x24
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	3306      	adds	r3, #6
 801380c:	617b      	str	r3, [r7, #20]
#endif

    *olen = 0;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2200      	movs	r2, #0
 8013812:	601a      	str	r2, [r3, #0]

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801381c:	2b03      	cmp	r3, #3
 801381e:	d178      	bne.n	8013912 <ssl_write_signature_algorithms_ext+0x12a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 8013820:	4b3e      	ldr	r3, [pc, #248]	; (801391c <ssl_write_signature_algorithms_ext+0x134>)
 8013822:	9300      	str	r3, [sp, #0]
 8013824:	23bd      	movs	r3, #189	; 0xbd
 8013826:	4a3e      	ldr	r2, [pc, #248]	; (8013920 <ssl_write_signature_algorithms_ext+0x138>)
 8013828:	2103      	movs	r1, #3
 801382a:	68f8      	ldr	r0, [r7, #12]
 801382c:	f7f8 f80e 	bl	800b84c <mbedtls_debug_print_msg>

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013836:	623b      	str	r3, [r7, #32]
 8013838:	e005      	b.n	8013846 <ssl_write_signature_algorithms_ext+0x5e>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 801383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383c:	3302      	adds	r3, #2
 801383e:	627b      	str	r3, [r7, #36]	; 0x24
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8013840:	6a3b      	ldr	r3, [r7, #32]
 8013842:	3304      	adds	r3, #4
 8013844:	623b      	str	r3, [r7, #32]
 8013846:	6a3b      	ldr	r3, [r7, #32]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d1f5      	bne.n	801383a <ssl_write_signature_algorithms_ext+0x52>
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 801384e:	69ba      	ldr	r2, [r7, #24]
 8013850:	69fb      	ldr	r3, [r7, #28]
 8013852:	429a      	cmp	r2, r3
 8013854:	d307      	bcc.n	8013866 <ssl_write_signature_algorithms_ext+0x7e>
 8013856:	69ba      	ldr	r2, [r7, #24]
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	1ad3      	subs	r3, r2, r3
 801385c:	461a      	mov	r2, r3
 801385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013860:	3306      	adds	r3, #6
 8013862:	429a      	cmp	r2, r3
 8013864:	d208      	bcs.n	8013878 <ssl_write_signature_algorithms_ext+0x90>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 8013866:	4b2f      	ldr	r3, [pc, #188]	; (8013924 <ssl_write_signature_algorithms_ext+0x13c>)
 8013868:	9300      	str	r3, [sp, #0]
 801386a:	23cb      	movs	r3, #203	; 0xcb
 801386c:	4a2c      	ldr	r2, [pc, #176]	; (8013920 <ssl_write_signature_algorithms_ext+0x138>)
 801386e:	2101      	movs	r1, #1
 8013870:	68f8      	ldr	r0, [r7, #12]
 8013872:	f7f7 ffeb 	bl	800b84c <mbedtls_debug_print_msg>
        return;
 8013876:	e04d      	b.n	8013914 <ssl_write_signature_algorithms_ext+0x12c>
    }

    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;
 8013878:	2300      	movs	r3, #0
 801387a:	627b      	str	r3, [r7, #36]	; 0x24

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013882:	623b      	str	r3, [r7, #32]
 8013884:	e015      	b.n	80138b2 <ssl_write_signature_algorithms_ext+0xca>
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 8013886:	6a3b      	ldr	r3, [r7, #32]
 8013888:	6819      	ldr	r1, [r3, #0]
 801388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388c:	1c5a      	adds	r2, r3, #1
 801388e:	627a      	str	r2, [r7, #36]	; 0x24
 8013890:	697a      	ldr	r2, [r7, #20]
 8013892:	18d4      	adds	r4, r2, r3
 8013894:	4608      	mov	r0, r1
 8013896:	f006 f884 	bl	80199a2 <mbedtls_ssl_hash_from_md_alg>
 801389a:	4603      	mov	r3, r0
 801389c:	7023      	strb	r3, [r4, #0]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	627a      	str	r2, [r7, #36]	; 0x24
 80138a4:	697a      	ldr	r2, [r7, #20]
 80138a6:	4413      	add	r3, r2
 80138a8:	2201      	movs	r2, #1
 80138aa:	701a      	strb	r2, [r3, #0]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80138ac:	6a3b      	ldr	r3, [r7, #32]
 80138ae:	3304      	adds	r3, #4
 80138b0:	623b      	str	r3, [r7, #32]
 80138b2:	6a3b      	ldr	r3, [r7, #32]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d1e5      	bne.n	8013886 <ssl_write_signature_algorithms_ext+0x9e>
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	1c5a      	adds	r2, r3, #1
 80138be:	61fa      	str	r2, [r7, #28]
 80138c0:	2200      	movs	r2, #0
 80138c2:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 80138c4:	69fb      	ldr	r3, [r7, #28]
 80138c6:	1c5a      	adds	r2, r3, #1
 80138c8:	61fa      	str	r2, [r7, #28]
 80138ca:	220d      	movs	r2, #13
 80138cc:	701a      	strb	r2, [r3, #0]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 80138ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d0:	3302      	adds	r3, #2
 80138d2:	0a19      	lsrs	r1, r3, #8
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	1c5a      	adds	r2, r3, #1
 80138d8:	61fa      	str	r2, [r7, #28]
 80138da:	b2ca      	uxtb	r2, r1
 80138dc:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 80138de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e0:	b2da      	uxtb	r2, r3
 80138e2:	69fb      	ldr	r3, [r7, #28]
 80138e4:	1c59      	adds	r1, r3, #1
 80138e6:	61f9      	str	r1, [r7, #28]
 80138e8:	3202      	adds	r2, #2
 80138ea:	b2d2      	uxtb	r2, r2
 80138ec:	701a      	strb	r2, [r3, #0]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80138ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f0:	0a19      	lsrs	r1, r3, #8
 80138f2:	69fb      	ldr	r3, [r7, #28]
 80138f4:	1c5a      	adds	r2, r3, #1
 80138f6:	61fa      	str	r2, [r7, #28]
 80138f8:	b2ca      	uxtb	r2, r1
 80138fa:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	1c5a      	adds	r2, r3, #1
 8013900:	61fa      	str	r2, [r7, #28]
 8013902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013904:	b2d2      	uxtb	r2, r2
 8013906:	701a      	strb	r2, [r3, #0]

    *olen = 6 + sig_alg_len;
 8013908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390a:	1d9a      	adds	r2, r3, #6
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	601a      	str	r2, [r3, #0]
 8013910:	e000      	b.n	8013914 <ssl_write_signature_algorithms_ext+0x12c>
        return;
 8013912:	bf00      	nop
}
 8013914:	372c      	adds	r7, #44	; 0x2c
 8013916:	46bd      	mov	sp, r7
 8013918:	bd90      	pop	{r4, r7, pc}
 801391a:	bf00      	nop
 801391c:	080222d8 	.word	0x080222d8
 8013920:	080222ac 	.word	0x080222ac
 8013924:	0802230c 	.word	0x0802230c

08013928 <ssl_generate_random>:

/*
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013934:	3388      	adds	r3, #136	; 0x88
 8013936:	60fb      	str	r3, [r7, #12]
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	699b      	ldr	r3, [r3, #24]
 801393e:	687a      	ldr	r2, [r7, #4]
 8013940:	6812      	ldr	r2, [r2, #0]
 8013942:	69d0      	ldr	r0, [r2, #28]
 8013944:	2204      	movs	r2, #4
 8013946:	68f9      	ldr	r1, [r7, #12]
 8013948:	4798      	blx	r3
 801394a:	60b8      	str	r0, [r7, #8]
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d001      	beq.n	8013956 <ssl_generate_random+0x2e>
        return( ret );
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	e012      	b.n	801397c <ssl_generate_random+0x54>

    p += 4;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	3304      	adds	r3, #4
 801395a:	60fb      	str	r3, [r7, #12]
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	699b      	ldr	r3, [r3, #24]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	6812      	ldr	r2, [r2, #0]
 8013966:	69d0      	ldr	r0, [r2, #28]
 8013968:	221c      	movs	r2, #28
 801396a:	68f9      	ldr	r1, [r7, #12]
 801396c:	4798      	blx	r3
 801396e:	60b8      	str	r0, [r7, #8]
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d001      	beq.n	801397a <ssl_generate_random+0x52>
        return( ret );
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	e000      	b.n	801397c <ssl_generate_random+0x54>

    return( 0 );
 801397a:	2300      	movs	r3, #0
}
 801397c:	4618      	mov	r0, r3
 801397e:	3710      	adds	r7, #16
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <ssl_write_client_hello>:

static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b092      	sub	sp, #72	; 0x48
 8013988:	af04      	add	r7, sp, #16
 801398a:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i, n, olen, ext_len = 0;
 801398c:	2300      	movs	r3, #0
 801398e:	62bb      	str	r3, [r7, #40]	; 0x28
    unsigned char *p, *q;
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 8013990:	4b98      	ldr	r3, [pc, #608]	; (8013bf4 <ssl_write_client_hello+0x270>)
 8013992:	9300      	str	r3, [sp, #0]
 8013994:	f240 23da 	movw	r3, #730	; 0x2da
 8013998:	4a97      	ldr	r2, [pc, #604]	; (8013bf8 <ssl_write_client_hello+0x274>)
 801399a:	2102      	movs	r1, #2
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7f7 ff55 	bl	800b84c <mbedtls_debug_print_msg>

    if( ssl->conf->f_rng == NULL )
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	699b      	ldr	r3, [r3, #24]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d10a      	bne.n	80139c2 <ssl_write_client_hello+0x3e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 80139ac:	4b93      	ldr	r3, [pc, #588]	; (8013bfc <ssl_write_client_hello+0x278>)
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	f240 23de 	movw	r3, #734	; 0x2de
 80139b4:	4a90      	ldr	r2, [pc, #576]	; (8013bf8 <ssl_write_client_hello+0x274>)
 80139b6:	2101      	movs	r1, #1
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f7f7 ff47 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_NO_RNG );
 80139be:	4b90      	ldr	r3, [pc, #576]	; (8013c00 <ssl_write_client_hello+0x27c>)
 80139c0:	e218      	b.n	8013df4 <ssl_write_client_hello+0x470>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80139ca:	461a      	mov	r2, r3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	609a      	str	r2, [r3, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80139d8:	461a      	mov	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	60da      	str	r2, [r3, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d10a      	bne.n	8013a00 <ssl_write_client_hello+0x7c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 80139ea:	4b86      	ldr	r3, [pc, #536]	; (8013c04 <ssl_write_client_hello+0x280>)
 80139ec:	9300      	str	r3, [sp, #0]
 80139ee:	f44f 733b 	mov.w	r3, #748	; 0x2ec
 80139f2:	4a81      	ldr	r2, [pc, #516]	; (8013bf8 <ssl_write_client_hello+0x274>)
 80139f4:	2101      	movs	r1, #1
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f7f7 ff28 	bl	800b84c <mbedtls_debug_print_msg>
                            "consider using mbedtls_ssl_config_defaults()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80139fc:	4b82      	ldr	r3, [pc, #520]	; (8013c08 <ssl_write_client_hello+0x284>)
 80139fe:	e1f9      	b.n	8013df4 <ssl_write_client_hello+0x470>
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013a06:	627b      	str	r3, [r7, #36]	; 0x24
    p = buf + 4;
 8013a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0a:	3304      	adds	r3, #4
 8013a0c:	62fb      	str	r3, [r7, #44]	; 0x2c

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013a16:	4618      	mov	r0, r3
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013a20:	4619      	mov	r1, r3
                       ssl->conf->transport, p );
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8013a2e:	b2db      	uxtb	r3, r3
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8013a30:	461a      	mov	r2, r3
 8013a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a34:	f005 ffdb 	bl	80199ee <mbedtls_ssl_write_version>
    p += 2;
 8013a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3a:	3302      	adds	r3, #2
 8013a3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 8013a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a40:	3304      	adds	r3, #4
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	461a      	mov	r2, r3
 8013a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a48:	3305      	adds	r3, #5
 8013a4a:	781b      	ldrb	r3, [r3, #0]
 8013a4c:	9302      	str	r3, [sp, #8]
 8013a4e:	9201      	str	r2, [sp, #4]
 8013a50:	4b6e      	ldr	r3, [pc, #440]	; (8013c0c <ssl_write_client_hello+0x288>)
 8013a52:	9300      	str	r3, [sp, #0]
 8013a54:	f240 23ff 	movw	r3, #767	; 0x2ff
 8013a58:	4a67      	ldr	r2, [pc, #412]	; (8013bf8 <ssl_write_client_hello+0x274>)
 8013a5a:	2103      	movs	r1, #3
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f7f7 fef5 	bl	800b84c <mbedtls_debug_print_msg>
                   buf[4], buf[5] ) );

    if( ( ret = ssl_generate_random( ssl ) ) != 0 )
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f7ff ff60 	bl	8013928 <ssl_generate_random>
 8013a68:	6238      	str	r0, [r7, #32]
 8013a6a:	6a3b      	ldr	r3, [r7, #32]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d00c      	beq.n	8013a8a <ssl_write_client_hello+0x106>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 8013a70:	6a3b      	ldr	r3, [r7, #32]
 8013a72:	9301      	str	r3, [sp, #4]
 8013a74:	4b66      	ldr	r3, [pc, #408]	; (8013c10 <ssl_write_client_hello+0x28c>)
 8013a76:	9300      	str	r3, [sp, #0]
 8013a78:	f44f 7341 	mov.w	r3, #772	; 0x304
 8013a7c:	4a5e      	ldr	r2, [pc, #376]	; (8013bf8 <ssl_write_client_hello+0x274>)
 8013a7e:	2101      	movs	r1, #1
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	f7f7 ff69 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8013a86:	6a3b      	ldr	r3, [r7, #32]
 8013a88:	e1b4      	b.n	8013df4 <ssl_write_client_hello+0x470>
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a8e:	3388      	adds	r3, #136	; 0x88
 8013a90:	2220      	movs	r2, #32
 8013a92:	4619      	mov	r1, r3
 8013a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a96:	f00a fad9 	bl	801e04c <memcpy>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 8013a9a:	2320      	movs	r3, #32
 8013a9c:	9302      	str	r3, [sp, #8]
 8013a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa0:	9301      	str	r3, [sp, #4]
 8013aa2:	4b5c      	ldr	r3, [pc, #368]	; (8013c14 <ssl_write_client_hello+0x290>)
 8013aa4:	9300      	str	r3, [sp, #0]
 8013aa6:	f240 3309 	movw	r3, #777	; 0x309
 8013aaa:	4a53      	ldr	r2, [pc, #332]	; (8013bf8 <ssl_write_client_hello+0x274>)
 8013aac:	2103      	movs	r1, #3
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f7f7 ffbe 	bl	800ba30 <mbedtls_debug_print_buf>
    p += 32;
 8013ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab6:	3320      	adds	r3, #32
 8013ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013abe:	689b      	ldr	r3, [r3, #8]
 8013ac0:	633b      	str	r3, [r7, #48]	; 0x30

    if( n < 16 || n > 32 ||
 8013ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac4:	2b0f      	cmp	r3, #15
 8013ac6:	d908      	bls.n	8013ada <ssl_write_client_hello+0x156>
 8013ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aca:	2b20      	cmp	r3, #32
 8013acc:	d805      	bhi.n	8013ada <ssl_write_client_hello+0x156>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ad2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
    if( n < 16 || n > 32 ||
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d101      	bne.n	8013ade <ssl_write_client_hello+0x15a>
    {
        n = 0;
 8013ada:	2300      	movs	r3, #0
 8013adc:	633b      	str	r3, [r7, #48]	; 0x30
            ssl->session_negotiate->id_len = n = 32;
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 8013ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae0:	1c5a      	adds	r2, r3, #1
 8013ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ae6:	b2d2      	uxtb	r2, r2
 8013ae8:	701a      	strb	r2, [r3, #0]

    for( i = 0; i < n; i++ )
 8013aea:	2300      	movs	r3, #0
 8013aec:	637b      	str	r3, [r7, #52]	; 0x34
 8013aee:	e00c      	b.n	8013b0a <ssl_write_client_hello+0x186>
        *p++ = ssl->session_negotiate->id[i];
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af6:	1c5a      	adds	r2, r3, #1
 8013af8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013afc:	440a      	add	r2, r1
 8013afe:	320c      	adds	r2, #12
 8013b00:	7812      	ldrb	r2, [r2, #0]
 8013b02:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < n; i++ )
 8013b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b06:	3301      	adds	r3, #1
 8013b08:	637b      	str	r3, [r7, #52]	; 0x34
 8013b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d3ee      	bcc.n	8013af0 <ssl_write_client_hello+0x16c>

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 8013b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b14:	9301      	str	r3, [sp, #4]
 8013b16:	4b40      	ldr	r3, [pc, #256]	; (8013c18 <ssl_write_client_hello+0x294>)
 8013b18:	9300      	str	r3, [sp, #0]
 8013b1a:	f240 333e 	movw	r3, #830	; 0x33e
 8013b1e:	4a36      	ldr	r2, [pc, #216]	; (8013bf8 <ssl_write_client_hello+0x274>)
 8013b20:	2103      	movs	r1, #3
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f7f7 fe92 	bl	800b84c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 8013b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2a:	3327      	adds	r3, #39	; 0x27
 8013b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b2e:	9202      	str	r2, [sp, #8]
 8013b30:	9301      	str	r3, [sp, #4]
 8013b32:	4b3a      	ldr	r3, [pc, #232]	; (8013c1c <ssl_write_client_hello+0x298>)
 8013b34:	9300      	str	r3, [sp, #0]
 8013b36:	f240 333f 	movw	r3, #831	; 0x33f
 8013b3a:	4a2f      	ldr	r2, [pc, #188]	; (8013bf8 <ssl_write_client_hello+0x274>)
 8013b3c:	2103      	movs	r1, #3
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f7f7 ff76 	bl	800ba30 <mbedtls_debug_print_buf>
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	687a      	ldr	r2, [r7, #4]
 8013b4a:	68d2      	ldr	r2, [r2, #12]
 8013b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b50:	61fb      	str	r3, [r7, #28]

    /* Skip writing ciphersuite length for now */
    n = 0;
 8013b52:	2300      	movs	r3, #0
 8013b54:	633b      	str	r3, [r7, #48]	; 0x30
    q = p;
 8013b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b58:	61bb      	str	r3, [r7, #24]
    p += 2;
 8013b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b5c:	3302      	adds	r3, #2
 8013b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

    for( i = 0; ciphersuites[i] != 0; i++ )
 8013b60:	2300      	movs	r3, #0
 8013b62:	637b      	str	r3, [r7, #52]	; 0x34
 8013b64:	e062      	b.n	8013c2c <ssl_write_client_hello+0x2a8>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 8013b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b68:	009b      	lsls	r3, r3, #2
 8013b6a:	69fa      	ldr	r2, [r7, #28]
 8013b6c:	4413      	add	r3, r2
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7ff fd9d 	bl	80136b0 <mbedtls_ssl_ciphersuite_from_id>
 8013b76:	6138      	str	r0, [r7, #16]

        if( ciphersuite_info == NULL )
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d037      	beq.n	8013bee <ssl_write_client_hello+0x26a>
            continue;

        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	691b      	ldr	r3, [r3, #16]
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	6812      	ldr	r2, [r2, #0]
 8013b86:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	dc4a      	bgt.n	8013c24 <ssl_write_client_hello+0x2a0>
            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	699b      	ldr	r3, [r3, #24]
 8013b92:	687a      	ldr	r2, [r7, #4]
 8013b94:	6812      	ldr	r2, [r2, #0]
 8013b96:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	db42      	blt.n	8013c24 <ssl_write_client_hello+0x2a0>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&
            mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )
            continue;
#endif

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 8013b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ba0:	009b      	lsls	r3, r3, #2
 8013ba2:	69fa      	ldr	r2, [r7, #28]
 8013ba4:	4413      	add	r3, r2
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	9301      	str	r3, [sp, #4]
 8013baa:	4b1d      	ldr	r3, [pc, #116]	; (8013c20 <ssl_write_client_hello+0x29c>)
 8013bac:	9300      	str	r3, [sp, #0]
 8013bae:	f240 3381 	movw	r3, #897	; 0x381
 8013bb2:	4a11      	ldr	r2, [pc, #68]	; (8013bf8 <ssl_write_client_hello+0x274>)
 8013bb4:	2103      	movs	r1, #3
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f7f7 fe48 	bl	800b84c <mbedtls_debug_print_msg>
                                    ciphersuites[i] ) );

        n++;
 8013bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	633b      	str	r3, [r7, #48]	; 0x30
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 8013bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bc4:	009b      	lsls	r3, r3, #2
 8013bc6:	69fa      	ldr	r2, [r7, #28]
 8013bc8:	4413      	add	r3, r2
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	1219      	asrs	r1, r3, #8
 8013bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd0:	1c5a      	adds	r2, r3, #1
 8013bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013bd4:	b2ca      	uxtb	r2, r1
 8013bd6:	701a      	strb	r2, [r3, #0]
        *p++ = (unsigned char)( ciphersuites[i]      );
 8013bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bda:	009b      	lsls	r3, r3, #2
 8013bdc:	69fa      	ldr	r2, [r7, #28]
 8013bde:	4413      	add	r3, r2
 8013be0:	6819      	ldr	r1, [r3, #0]
 8013be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be4:	1c5a      	adds	r2, r3, #1
 8013be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013be8:	b2ca      	uxtb	r2, r1
 8013bea:	701a      	strb	r2, [r3, #0]
 8013bec:	e01b      	b.n	8013c26 <ssl_write_client_hello+0x2a2>
            continue;
 8013bee:	bf00      	nop
 8013bf0:	e019      	b.n	8013c26 <ssl_write_client_hello+0x2a2>
 8013bf2:	bf00      	nop
 8013bf4:	08022320 	.word	0x08022320
 8013bf8:	080222ac 	.word	0x080222ac
 8013bfc:	08022338 	.word	0x08022338
 8013c00:	ffff8c00 	.word	0xffff8c00
 8013c04:	08022348 	.word	0x08022348
 8013c08:	ffff8f00 	.word	0xffff8f00
 8013c0c:	080223a0 	.word	0x080223a0
 8013c10:	080223c4 	.word	0x080223c4
 8013c14:	080223d8 	.word	0x080223d8
 8013c18:	080223f4 	.word	0x080223f4
 8013c1c:	08022418 	.word	0x08022418
 8013c20:	08022434 	.word	0x08022434
            continue;
 8013c24:	bf00      	nop
    for( i = 0; ciphersuites[i] != 0; i++ )
 8013c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c28:	3301      	adds	r3, #1
 8013c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8013c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	69fa      	ldr	r2, [r7, #28]
 8013c32:	4413      	add	r3, r2
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d195      	bne.n	8013b66 <ssl_write_client_hello+0x1e2>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites (excluding SCSVs)", n ) );
 8013c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c3c:	9301      	str	r3, [sp, #4]
 8013c3e:	4b6f      	ldr	r3, [pc, #444]	; (8013dfc <ssl_write_client_hello+0x478>)
 8013c40:	9300      	str	r3, [sp, #0]
 8013c42:	f240 3389 	movw	r3, #905	; 0x389
 8013c46:	4a6e      	ldr	r2, [pc, #440]	; (8013e00 <ssl_write_client_hello+0x47c>)
 8013c48:	2103      	movs	r1, #3
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7f7 fdfe 	bl	800b84c <mbedtls_debug_print_msg>
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
 8013c50:	4b6c      	ldr	r3, [pc, #432]	; (8013e04 <ssl_write_client_hello+0x480>)
 8013c52:	9300      	str	r3, [sp, #0]
 8013c54:	f240 3392 	movw	r3, #914	; 0x392
 8013c58:	4a69      	ldr	r2, [pc, #420]	; (8013e00 <ssl_write_client_hello+0x47c>)
 8013c5a:	2103      	movs	r1, #3
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f7f7 fdf5 	bl	800b84c <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 8013c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c64:	1c5a      	adds	r2, r3, #1
 8013c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013c68:	2200      	movs	r2, #0
 8013c6a:	701a      	strb	r2, [r3, #0]
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 8013c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c6e:	1c5a      	adds	r2, r3, #1
 8013c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013c72:	22ff      	movs	r2, #255	; 0xff
 8013c74:	701a      	strb	r2, [r3, #0]
        n++;
 8013c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c78:	3301      	adds	r3, #1
 8013c7a:	633b      	str	r3, [r7, #48]	; 0x30
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 8013c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c7e:	09d9      	lsrs	r1, r3, #7
 8013c80:	69bb      	ldr	r3, [r7, #24]
 8013c82:	1c5a      	adds	r2, r3, #1
 8013c84:	61ba      	str	r2, [r7, #24]
 8013c86:	b2ca      	uxtb	r2, r1
 8013c88:	701a      	strb	r2, [r3, #0]
    *q++ = (unsigned char)( n << 1 );
 8013c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8c:	b2da      	uxtb	r2, r3
 8013c8e:	69bb      	ldr	r3, [r7, #24]
 8013c90:	1c59      	adds	r1, r3, #1
 8013c92:	61b9      	str	r1, [r7, #24]
 8013c94:	0052      	lsls	r2, r2, #1
 8013c96:	b2d2      	uxtb	r2, r2
 8013c98:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_ZLIB_SUPPORT)
    offer_compress = 1;
#else
    offer_compress = 0;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	75fb      	strb	r3, [r7, #23]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        offer_compress = 0;
#endif

    if( offer_compress )
 8013c9e:	7dfb      	ldrb	r3, [r7, #23]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d027      	beq.n	8013cf4 <ssl_write_client_hello+0x370>
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 2 ) );
 8013ca4:	2302      	movs	r3, #2
 8013ca6:	9301      	str	r3, [sp, #4]
 8013ca8:	4b57      	ldr	r3, [pc, #348]	; (8013e08 <ssl_write_client_hello+0x484>)
 8013caa:	9300      	str	r3, [sp, #0]
 8013cac:	f240 33b9 	movw	r3, #953	; 0x3b9
 8013cb0:	4a53      	ldr	r2, [pc, #332]	; (8013e00 <ssl_write_client_hello+0x47c>)
 8013cb2:	2103      	movs	r1, #3
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f7f7 fdc9 	bl	800b84c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d %d",
 8013cba:	2300      	movs	r3, #0
 8013cbc:	9302      	str	r3, [sp, #8]
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	9301      	str	r3, [sp, #4]
 8013cc2:	4b52      	ldr	r3, [pc, #328]	; (8013e0c <ssl_write_client_hello+0x488>)
 8013cc4:	9300      	str	r3, [sp, #0]
 8013cc6:	f240 33ba 	movw	r3, #954	; 0x3ba
 8013cca:	4a4d      	ldr	r2, [pc, #308]	; (8013e00 <ssl_write_client_hello+0x47c>)
 8013ccc:	2103      	movs	r1, #3
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f7f7 fdbc 	bl	800b84c <mbedtls_debug_print_msg>
                            MBEDTLS_SSL_COMPRESS_DEFLATE, MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 2;
 8013cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cd6:	1c5a      	adds	r2, r3, #1
 8013cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013cda:	2202      	movs	r2, #2
 8013cdc:	701a      	strb	r2, [r3, #0]
        *p++ = MBEDTLS_SSL_COMPRESS_DEFLATE;
 8013cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce0:	1c5a      	adds	r2, r3, #1
 8013ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	701a      	strb	r2, [r3, #0]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 8013ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cea:	1c5a      	adds	r2, r3, #1
 8013cec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013cee:	2200      	movs	r2, #0
 8013cf0:	701a      	strb	r2, [r3, #0]
 8013cf2:	e01f      	b.n	8013d34 <ssl_write_client_hello+0x3b0>
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	9301      	str	r3, [sp, #4]
 8013cf8:	4b43      	ldr	r3, [pc, #268]	; (8013e08 <ssl_write_client_hello+0x484>)
 8013cfa:	9300      	str	r3, [sp, #0]
 8013cfc:	f240 33c3 	movw	r3, #963	; 0x3c3
 8013d00:	4a3f      	ldr	r2, [pc, #252]	; (8013e00 <ssl_write_client_hello+0x47c>)
 8013d02:	2103      	movs	r1, #3
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f7f7 fda1 	bl	800b84c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	9301      	str	r3, [sp, #4]
 8013d0e:	4b40      	ldr	r3, [pc, #256]	; (8013e10 <ssl_write_client_hello+0x48c>)
 8013d10:	9300      	str	r3, [sp, #0]
 8013d12:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 8013d16:	4a3a      	ldr	r2, [pc, #232]	; (8013e00 <ssl_write_client_hello+0x47c>)
 8013d18:	2103      	movs	r1, #3
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7f7 fd96 	bl	800b84c <mbedtls_debug_print_msg>
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 8013d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d22:	1c5a      	adds	r2, r3, #1
 8013d24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013d26:	2201      	movs	r2, #1
 8013d28:	701a      	strb	r2, [r3, #0]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 8013d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2c:	1c5a      	adds	r2, r3, #1
 8013d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013d30:	2200      	movs	r2, #0
 8013d32:	701a      	strb	r2, [r3, #0]
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 8013d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d36:	3302      	adds	r3, #2
 8013d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d3a:	4413      	add	r3, r2
 8013d3c:	f107 020c 	add.w	r2, r7, #12
 8013d40:	4619      	mov	r1, r3
 8013d42:	6878      	ldr	r0, [r7, #4]
 8013d44:	f7ff fd50 	bl	80137e8 <ssl_write_signature_algorithms_ext>
    ext_len += olen;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d4c:	4413      	add	r3, r2
 8013d4e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    /* olen unused if all extensions are disabled */
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 8013d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d52:	9301      	str	r3, [sp, #4]
 8013d54:	4b2f      	ldr	r3, [pc, #188]	; (8013e14 <ssl_write_client_hello+0x490>)
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	f240 430e 	movw	r3, #1038	; 0x40e
 8013d5c:	4a28      	ldr	r2, [pc, #160]	; (8013e00 <ssl_write_client_hello+0x47c>)
 8013d5e:	2103      	movs	r1, #3
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7f7 fd73 	bl	800b84c <mbedtls_debug_print_msg>
                   ext_len ) );

    if( ext_len > 0 )
 8013d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d010      	beq.n	8013d8e <ssl_write_client_hello+0x40a>
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 8013d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d6e:	0a19      	lsrs	r1, r3, #8
 8013d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d72:	1c5a      	adds	r2, r3, #1
 8013d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013d76:	b2ca      	uxtb	r2, r1
 8013d78:	701a      	strb	r2, [r3, #0]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 8013d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d7c:	1c5a      	adds	r2, r3, #1
 8013d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d82:	b2d2      	uxtb	r2, r2
 8013d84:	701a      	strb	r2, [r3, #0]
        p += ext_len;
 8013d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d8a:	4413      	add	r3, r2
 8013d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    ssl->out_msglen  = p - buf;
 8013d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d92:	1ad3      	subs	r3, r2, r3
 8013d94:	461a      	mov	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2216      	movs	r2, #22
 8013da0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013daa:	2201      	movs	r2, #1
 8013dac:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	1c5a      	adds	r2, r3, #1
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f003 fa13 	bl	80171e4 <mbedtls_ssl_write_record>
 8013dbe:	6238      	str	r0, [r7, #32]
 8013dc0:	6a3b      	ldr	r3, [r7, #32]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d00c      	beq.n	8013de0 <ssl_write_client_hello+0x45c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8013dc6:	6a3b      	ldr	r3, [r7, #32]
 8013dc8:	9301      	str	r3, [sp, #4]
 8013dca:	4b13      	ldr	r3, [pc, #76]	; (8013e18 <ssl_write_client_hello+0x494>)
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	f240 4325 	movw	r3, #1061	; 0x425
 8013dd2:	4a0b      	ldr	r2, [pc, #44]	; (8013e00 <ssl_write_client_hello+0x47c>)
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f7f7 fdbe 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8013ddc:	6a3b      	ldr	r3, [r7, #32]
 8013dde:	e009      	b.n	8013df4 <ssl_write_client_hello+0x470>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 8013de0:	4b0e      	ldr	r3, [pc, #56]	; (8013e1c <ssl_write_client_hello+0x498>)
 8013de2:	9300      	str	r3, [sp, #0]
 8013de4:	f240 4329 	movw	r3, #1065	; 0x429
 8013de8:	4a05      	ldr	r2, [pc, #20]	; (8013e00 <ssl_write_client_hello+0x47c>)
 8013dea:	2102      	movs	r1, #2
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f7f7 fd2d 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8013df2:	2300      	movs	r3, #0
}
 8013df4:	4618      	mov	r0, r3
 8013df6:	3738      	adds	r7, #56	; 0x38
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}
 8013dfc:	08022458 	.word	0x08022458
 8013e00:	080222ac 	.word	0x080222ac
 8013e04:	0802248c 	.word	0x0802248c
 8013e08:	080224b4 	.word	0x080224b4
 8013e0c:	080224d4 	.word	0x080224d4
 8013e10:	080224f8 	.word	0x080224f8
 8013e14:	08022518 	.word	0x08022518
 8013e18:	08022544 	.word	0x08022544
 8013e1c:	08022560 	.word	0x08022560

08013e20 <ssl_parse_renegotiation_info>:

static int ssl_parse_renegotiation_info( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b086      	sub	sp, #24
 8013e24:	af02      	add	r7, sp, #8
 8013e26:	60f8      	str	r0, [r7, #12]
 8013e28:	60b9      	str	r1, [r7, #8]
 8013e2a:	607a      	str	r2, [r7, #4]
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b01      	cmp	r3, #1
 8013e30:	d103      	bne.n	8013e3a <ssl_parse_renegotiation_info+0x1a>
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d00f      	beq.n	8013e5a <ssl_parse_renegotiation_info+0x3a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 8013e3a:	4b0c      	ldr	r3, [pc, #48]	; (8013e6c <ssl_parse_renegotiation_info+0x4c>)
 8013e3c:	9300      	str	r3, [sp, #0]
 8013e3e:	f44f 6389 	mov.w	r3, #1096	; 0x448
 8013e42:	4a0b      	ldr	r2, [pc, #44]	; (8013e70 <ssl_parse_renegotiation_info+0x50>)
 8013e44:	2101      	movs	r1, #1
 8013e46:	68f8      	ldr	r0, [r7, #12]
 8013e48:	f7f7 fd00 	bl	800b84c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013e4c:	2228      	movs	r2, #40	; 0x28
 8013e4e:	2102      	movs	r1, #2
 8013e50:	68f8      	ldr	r0, [r7, #12]
 8013e52:	f003 fe71 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8013e56:	4b07      	ldr	r3, [pc, #28]	; (8013e74 <ssl_parse_renegotiation_info+0x54>)
 8013e58:	e004      	b.n	8013e64 <ssl_parse_renegotiation_info+0x44>
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	2201      	movs	r2, #1
 8013e5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    return( 0 );
 8013e62:	2300      	movs	r3, #0
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3710      	adds	r7, #16
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	08022578 	.word	0x08022578
 8013e70:	080222ac 	.word	0x080222ac
 8013e74:	ffff8680 	.word	0xffff8680

08013e78 <ssl_parse_server_hello>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

static int ssl_parse_server_hello( mbedtls_ssl_context *ssl )
{
 8013e78:	b5b0      	push	{r4, r5, r7, lr}
 8013e7a:	b096      	sub	sp, #88	; 0x58
 8013e7c:	af08      	add	r7, sp, #32
 8013e7e:	6078      	str	r0, [r7, #4]
    int accept_comp;
#endif
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    int renegotiation_info_seen = 0;
#endif
    int handshake_failure = 0;
 8013e80:	2300      	movs	r3, #0
 8013e82:	62bb      	str	r3, [r7, #40]	; 0x28
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 8013e84:	4b87      	ldr	r3, [pc, #540]	; (80140a4 <ssl_parse_server_hello+0x22c>)
 8013e86:	9300      	str	r3, [sp, #0]
 8013e88:	f240 53b2 	movw	r3, #1458	; 0x5b2
 8013e8c:	4a86      	ldr	r2, [pc, #536]	; (80140a8 <ssl_parse_server_hello+0x230>)
 8013e8e:	2102      	movs	r1, #2
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f7f7 fcdb 	bl	800b84c <mbedtls_debug_print_msg>

    buf = ssl->in_msg;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013e9a:	627b      	str	r3, [r7, #36]	; 0x24

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f003 fcaf 	bl	8017800 <mbedtls_ssl_read_record>
 8013ea2:	6238      	str	r0, [r7, #32]
 8013ea4:	6a3b      	ldr	r3, [r7, #32]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d00c      	beq.n	8013ec4 <ssl_parse_server_hello+0x4c>
    {
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8013eaa:	6a3b      	ldr	r3, [r7, #32]
 8013eac:	9301      	str	r3, [sp, #4]
 8013eae:	4b7f      	ldr	r3, [pc, #508]	; (80140ac <ssl_parse_server_hello+0x234>)
 8013eb0:	9300      	str	r3, [sp, #0]
 8013eb2:	f240 53b9 	movw	r3, #1465	; 0x5b9
 8013eb6:	4a7c      	ldr	r2, [pc, #496]	; (80140a8 <ssl_parse_server_hello+0x230>)
 8013eb8:	2101      	movs	r1, #1
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7f7 fd4c 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8013ec0:	6a3b      	ldr	r3, [r7, #32]
 8013ec2:	e384      	b.n	80145ce <ssl_parse_server_hello+0x756>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec8:	2b16      	cmp	r3, #22
 8013eca:	d00f      	beq.n	8013eec <ssl_parse_server_hello+0x74>
            ssl->keep_current_message = 1;
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8013ecc:	4b78      	ldr	r3, [pc, #480]	; (80140b0 <ssl_parse_server_hello+0x238>)
 8013ece:	9300      	str	r3, [sp, #0]
 8013ed0:	f240 53d3 	movw	r3, #1491	; 0x5d3
 8013ed4:	4a74      	ldr	r2, [pc, #464]	; (80140a8 <ssl_parse_server_hello+0x230>)
 8013ed6:	2101      	movs	r1, #1
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f7f7 fcb7 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013ede:	220a      	movs	r2, #10
 8013ee0:	2102      	movs	r1, #2
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f003 fe28 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8013ee8:	4b72      	ldr	r3, [pc, #456]	; (80140b4 <ssl_parse_server_hello+0x23c>)
 8013eea:	e370      	b.n	80145ce <ssl_parse_server_hello+0x756>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f7ff fc6e 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	3326      	adds	r3, #38	; 0x26
 8013efa:	429c      	cmp	r4, r3
 8013efc:	d303      	bcc.n	8013f06 <ssl_parse_server_hello+0x8e>
        buf[0] != MBEDTLS_SSL_HS_SERVER_HELLO )
 8013efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f00:	781b      	ldrb	r3, [r3, #0]
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 8013f02:	2b02      	cmp	r3, #2
 8013f04:	d00f      	beq.n	8013f26 <ssl_parse_server_hello+0xae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8013f06:	4b6a      	ldr	r3, [pc, #424]	; (80140b0 <ssl_parse_server_hello+0x238>)
 8013f08:	9300      	str	r3, [sp, #0]
 8013f0a:	f240 53ef 	movw	r3, #1519	; 0x5ef
 8013f0e:	4a66      	ldr	r2, [pc, #408]	; (80140a8 <ssl_parse_server_hello+0x230>)
 8013f10:	2101      	movs	r1, #1
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f7f7 fc9a 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013f18:	2232      	movs	r2, #50	; 0x32
 8013f1a:	2102      	movs	r1, #2
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f003 fe0b 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8013f22:	4b65      	ldr	r3, [pc, #404]	; (80140b8 <ssl_parse_server_hello+0x240>)
 8013f24:	e353      	b.n	80145ce <ssl_parse_server_hello+0x756>
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f7ff fc53 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8013f2c:	4602      	mov	r2, r0
 8013f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f30:	4413      	add	r3, r2
 8013f32:	627b      	str	r3, [r7, #36]	; 0x24

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 8013f34:	2302      	movs	r3, #2
 8013f36:	9302      	str	r3, [sp, #8]
 8013f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3a:	9301      	str	r3, [sp, #4]
 8013f3c:	4b5f      	ldr	r3, [pc, #380]	; (80140bc <ssl_parse_server_hello+0x244>)
 8013f3e:	9300      	str	r3, [sp, #0]
 8013f40:	f240 6302 	movw	r3, #1538	; 0x602
 8013f44:	4a58      	ldr	r2, [pc, #352]	; (80140a8 <ssl_parse_server_hello+0x230>)
 8013f46:	2103      	movs	r1, #3
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f7f7 fd71 	bl	800ba30 <mbedtls_debug_print_buf>
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f103 0008 	add.w	r0, r3, #8
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f103 010c 	add.w	r1, r3, #12
                      ssl->conf->transport, buf + 0 );
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013f62:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8013f66:	b2db      	uxtb	r3, r3
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 8013f68:	461a      	mov	r2, r3
 8013f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6c:	f005 fd55 	bl	8019a1a <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	689b      	ldr	r3, [r3, #8]
 8013f74:	687a      	ldr	r2, [r7, #4]
 8013f76:	6812      	ldr	r2, [r2, #0]
 8013f78:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	db17      	blt.n	8013fb0 <ssl_parse_server_hello+0x138>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	68db      	ldr	r3, [r3, #12]
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	6812      	ldr	r2, [r2, #0]
 8013f88:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	db0f      	blt.n	8013fb0 <ssl_parse_server_hello+0x138>
        ssl->major_ver > ssl->conf->max_major_ver ||
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	689b      	ldr	r3, [r3, #8]
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	6812      	ldr	r2, [r2, #0]
 8013f98:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	dc07      	bgt.n	8013fb0 <ssl_parse_server_hello+0x138>
        ssl->minor_ver > ssl->conf->max_minor_ver )
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	687a      	ldr	r2, [r7, #4]
 8013fa6:	6812      	ldr	r2, [r2, #0]
 8013fa8:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
        ssl->major_ver > ssl->conf->max_major_ver ||
 8013fac:	4293      	cmp	r3, r2
 8013fae:	dd2c      	ble.n	801400a <ssl_parse_server_hello+0x192>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013fb8:	4618      	mov	r0, r3
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8013fc2:	461c      	mov	r4, r3
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	689b      	ldr	r3, [r3, #8]
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	68d2      	ldr	r2, [r2, #12]
 8013fcc:	6879      	ldr	r1, [r7, #4]
 8013fce:	6809      	ldr	r1, [r1, #0]
 8013fd0:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
 8013fd4:	460d      	mov	r5, r1
 8013fd6:	6879      	ldr	r1, [r7, #4]
 8013fd8:	6809      	ldr	r1, [r1, #0]
 8013fda:	f891 104d 	ldrb.w	r1, [r1, #77]	; 0x4d
 8013fde:	9106      	str	r1, [sp, #24]
 8013fe0:	9505      	str	r5, [sp, #20]
 8013fe2:	9204      	str	r2, [sp, #16]
 8013fe4:	9303      	str	r3, [sp, #12]
 8013fe6:	9402      	str	r4, [sp, #8]
 8013fe8:	9001      	str	r0, [sp, #4]
 8013fea:	4b35      	ldr	r3, [pc, #212]	; (80140c0 <ssl_parse_server_hello+0x248>)
 8013fec:	9300      	str	r3, [sp, #0]
 8013fee:	f240 630b 	movw	r3, #1547	; 0x60b
 8013ff2:	4a2d      	ldr	r2, [pc, #180]	; (80140a8 <ssl_parse_server_hello+0x230>)
 8013ff4:	2101      	movs	r1, #1
 8013ff6:	6878      	ldr	r0, [r7, #4]
 8013ff8:	f7f7 fc28 	bl	800b84c <mbedtls_debug_print_msg>
                            " min: [%d:%d], server: [%d:%d], max: [%d:%d]",
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013ffc:	2246      	movs	r2, #70	; 0x46
 8013ffe:	2102      	movs	r1, #2
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f003 fd99 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 8014006:	4b2f      	ldr	r3, [pc, #188]	; (80140c4 <ssl_parse_server_hello+0x24c>)
 8014008:	e2e1      	b.n	80145ce <ssl_parse_server_hello+0x756>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu",
 801400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400c:	3302      	adds	r3, #2
 801400e:	781b      	ldrb	r3, [r3, #0]
 8014010:	061a      	lsls	r2, r3, #24
 8014012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014014:	3303      	adds	r3, #3
 8014016:	781b      	ldrb	r3, [r3, #0]
 8014018:	041b      	lsls	r3, r3, #16
 801401a:	431a      	orrs	r2, r3
 801401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401e:	3304      	adds	r3, #4
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	021b      	lsls	r3, r3, #8
 8014024:	4313      	orrs	r3, r2
 8014026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014028:	3205      	adds	r2, #5
 801402a:	7812      	ldrb	r2, [r2, #0]
 801402c:	4313      	orrs	r3, r2
 801402e:	9301      	str	r3, [sp, #4]
 8014030:	4b25      	ldr	r3, [pc, #148]	; (80140c8 <ssl_parse_server_hello+0x250>)
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	f240 6317 	movw	r3, #1559	; 0x617
 8014038:	4a1b      	ldr	r2, [pc, #108]	; (80140a8 <ssl_parse_server_hello+0x230>)
 801403a:	2103      	movs	r1, #3
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f7f7 fc05 	bl	800b84c <mbedtls_debug_print_msg>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014046:	3388      	adds	r3, #136	; 0x88
 8014048:	f103 0020 	add.w	r0, r3, #32
 801404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404e:	3302      	adds	r3, #2
 8014050:	2220      	movs	r2, #32
 8014052:	4619      	mov	r1, r3
 8014054:	f009 fffa 	bl	801e04c <memcpy>

    n = buf[34];
 8014058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405a:	3322      	adds	r3, #34	; 0x22
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	61fb      	str	r3, [r7, #28]

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 8014060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014062:	3302      	adds	r3, #2
 8014064:	2220      	movs	r2, #32
 8014066:	9202      	str	r2, [sp, #8]
 8014068:	9301      	str	r3, [sp, #4]
 801406a:	4b18      	ldr	r3, [pc, #96]	; (80140cc <ssl_parse_server_hello+0x254>)
 801406c:	9300      	str	r3, [sp, #0]
 801406e:	f240 6321 	movw	r3, #1569	; 0x621
 8014072:	4a0d      	ldr	r2, [pc, #52]	; (80140a8 <ssl_parse_server_hello+0x230>)
 8014074:	2103      	movs	r1, #3
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f7f7 fcda 	bl	800ba30 <mbedtls_debug_print_buf>

    if( n > 32 )
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	2b20      	cmp	r3, #32
 8014080:	d926      	bls.n	80140d0 <ssl_parse_server_hello+0x258>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014082:	4b0b      	ldr	r3, [pc, #44]	; (80140b0 <ssl_parse_server_hello+0x238>)
 8014084:	9300      	str	r3, [sp, #0]
 8014086:	f240 6325 	movw	r3, #1573	; 0x625
 801408a:	4a07      	ldr	r2, [pc, #28]	; (80140a8 <ssl_parse_server_hello+0x230>)
 801408c:	2101      	movs	r1, #1
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f7f7 fbdc 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014094:	2232      	movs	r2, #50	; 0x32
 8014096:	2102      	movs	r1, #2
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f003 fd4d 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801409e:	4b06      	ldr	r3, [pc, #24]	; (80140b8 <ssl_parse_server_hello+0x240>)
 80140a0:	e295      	b.n	80145ce <ssl_parse_server_hello+0x756>
 80140a2:	bf00      	nop
 80140a4:	0802259c 	.word	0x0802259c
 80140a8:	080222ac 	.word	0x080222ac
 80140ac:	080225b4 	.word	0x080225b4
 80140b0:	080225cc 	.word	0x080225cc
 80140b4:	ffff8900 	.word	0xffff8900
 80140b8:	ffff8680 	.word	0xffff8680
 80140bc:	080225e8 	.word	0x080225e8
 80140c0:	08022600 	.word	0x08022600
 80140c4:	ffff9180 	.word	0xffff9180
 80140c8:	0802264c 	.word	0x0802264c
 80140cc:	0802266c 	.word	0x0802266c
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f7ff fb7c 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 80140da:	4602      	mov	r2, r0
 80140dc:	69fb      	ldr	r3, [r7, #28]
 80140de:	4413      	add	r3, r2
 80140e0:	3327      	adds	r3, #39	; 0x27
 80140e2:	429c      	cmp	r4, r3
 80140e4:	d92f      	bls.n	8014146 <ssl_parse_server_hello+0x2ce>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 80140e6:	69fb      	ldr	r3, [r7, #28]
 80140e8:	3326      	adds	r3, #38	; 0x26
 80140ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140ec:	4413      	add	r3, r2
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	021b      	lsls	r3, r3, #8
                  | ( buf[39 + n]       ) );
 80140f2:	69fa      	ldr	r2, [r7, #28]
 80140f4:	3227      	adds	r2, #39	; 0x27
 80140f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80140f8:	440a      	add	r2, r1
 80140fa:	7812      	ldrb	r2, [r2, #0]
 80140fc:	4313      	orrs	r3, r2
        ext_len = ( ( buf[38 + n] <<  8 )
 80140fe:	633b      	str	r3, [r7, #48]	; 0x30

        if( ( ext_len > 0 && ext_len < 4 ) ||
 8014100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014102:	2b00      	cmp	r3, #0
 8014104:	d002      	beq.n	801410c <ssl_parse_server_hello+0x294>
 8014106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014108:	2b03      	cmp	r3, #3
 801410a:	d90c      	bls.n	8014126 <ssl_parse_server_hello+0x2ae>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f7ff fb5e 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014116:	4602      	mov	r2, r0
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	441a      	add	r2, r3
 801411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801411e:	4413      	add	r3, r2
 8014120:	3328      	adds	r3, #40	; 0x28
        if( ( ext_len > 0 && ext_len < 4 ) ||
 8014122:	429c      	cmp	r4, r3
 8014124:	d02d      	beq.n	8014182 <ssl_parse_server_hello+0x30a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014126:	4b80      	ldr	r3, [pc, #512]	; (8014328 <ssl_parse_server_hello+0x4b0>)
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	f240 6333 	movw	r3, #1587	; 0x633
 801412e:	4a7f      	ldr	r2, [pc, #508]	; (801432c <ssl_parse_server_hello+0x4b4>)
 8014130:	2101      	movs	r1, #1
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f7f7 fb8a 	bl	800b84c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014138:	2232      	movs	r2, #50	; 0x32
 801413a:	2102      	movs	r1, #2
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f003 fcfb 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8014142:	4b7b      	ldr	r3, [pc, #492]	; (8014330 <ssl_parse_server_hello+0x4b8>)
 8014144:	e243      	b.n	80145ce <ssl_parse_server_hello+0x756>
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f7ff fb41 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014150:	4602      	mov	r2, r0
 8014152:	69fb      	ldr	r3, [r7, #28]
 8014154:	4413      	add	r3, r2
 8014156:	3326      	adds	r3, #38	; 0x26
 8014158:	429c      	cmp	r4, r3
 801415a:	d102      	bne.n	8014162 <ssl_parse_server_hello+0x2ea>
    {
        ext_len = 0;
 801415c:	2300      	movs	r3, #0
 801415e:	633b      	str	r3, [r7, #48]	; 0x30
 8014160:	e00f      	b.n	8014182 <ssl_parse_server_hello+0x30a>
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014162:	4b71      	ldr	r3, [pc, #452]	; (8014328 <ssl_parse_server_hello+0x4b0>)
 8014164:	9300      	str	r3, [sp, #0]
 8014166:	f240 633f 	movw	r3, #1599	; 0x63f
 801416a:	4a70      	ldr	r2, [pc, #448]	; (801432c <ssl_parse_server_hello+0x4b4>)
 801416c:	2101      	movs	r1, #1
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f7f7 fb6c 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014174:	2232      	movs	r2, #50	; 0x32
 8014176:	2102      	movs	r1, #2
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f003 fcdd 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801417e:	4b6c      	ldr	r3, [pc, #432]	; (8014330 <ssl_parse_server_hello+0x4b8>)
 8014180:	e225      	b.n	80145ce <ssl_parse_server_hello+0x756>
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 8014182:	69fb      	ldr	r3, [r7, #28]
 8014184:	3323      	adds	r3, #35	; 0x23
 8014186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014188:	4413      	add	r3, r2
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	021b      	lsls	r3, r3, #8
 801418e:	69fa      	ldr	r2, [r7, #28]
 8014190:	3224      	adds	r2, #36	; 0x24
 8014192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014194:	440a      	add	r2, r1
 8014196:	7812      	ldrb	r2, [r2, #0]
 8014198:	4313      	orrs	r3, r2
 801419a:	637b      	str	r3, [r7, #52]	; 0x34

    /*
     * Read and check compression
     */
    comp = buf[37 + n];
 801419c:	69fb      	ldr	r3, [r7, #28]
 801419e:	3325      	adds	r3, #37	; 0x25
 80141a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141a2:	4413      	add	r3, r2
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	76fb      	strb	r3, [r7, #27]
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 80141a8:	7efb      	ldrb	r3, [r7, #27]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d011      	beq.n	80141d2 <ssl_parse_server_hello+0x35a>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 80141ae:	7efb      	ldrb	r3, [r7, #27]
 80141b0:	9301      	str	r3, [sp, #4]
 80141b2:	4b60      	ldr	r3, [pc, #384]	; (8014334 <ssl_parse_server_hello+0x4bc>)
 80141b4:	9300      	str	r3, [sp, #0]
 80141b6:	f240 635c 	movw	r3, #1628	; 0x65c
 80141ba:	4a5c      	ldr	r2, [pc, #368]	; (801432c <ssl_parse_server_hello+0x4b4>)
 80141bc:	2101      	movs	r1, #1
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f7f7 fb44 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80141c4:	222f      	movs	r2, #47	; 0x2f
 80141c6:	2102      	movs	r1, #2
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f003 fcb5 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 80141ce:	4b5a      	ldr	r3, [pc, #360]	; (8014338 <ssl_parse_server_hello+0x4c0>)
 80141d0:	e1fd      	b.n	80145ce <ssl_parse_server_hello+0x756>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80141d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80141d8:	f7ff fa6a 	bl	80136b0 <mbedtls_ssl_ciphersuite_from_id>
 80141dc:	4603      	mov	r3, r0
 80141de:	6023      	str	r3, [r4, #0]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d111      	bne.n	801420e <ssl_parse_server_hello+0x396>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 80141ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141ec:	9301      	str	r3, [sp, #4]
 80141ee:	4b53      	ldr	r3, [pc, #332]	; (801433c <ssl_parse_server_hello+0x4c4>)
 80141f0:	9300      	str	r3, [sp, #0]
 80141f2:	f240 6369 	movw	r3, #1641	; 0x669
 80141f6:	4a4d      	ldr	r2, [pc, #308]	; (801432c <ssl_parse_server_hello+0x4b4>)
 80141f8:	2101      	movs	r1, #1
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f7f7 fb26 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014200:	2250      	movs	r2, #80	; 0x50
 8014202:	2102      	movs	r1, #2
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f003 fc97 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801420a:	4b4d      	ldr	r3, [pc, #308]	; (8014340 <ssl_parse_server_hello+0x4c8>)
 801420c:	e1df      	b.n	80145ce <ssl_parse_server_hello+0x756>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4619      	mov	r1, r3
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f004 f9ca 	bl	80185b0 <mbedtls_ssl_optimize_checksum>

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 801421c:	69fb      	ldr	r3, [r7, #28]
 801421e:	9301      	str	r3, [sp, #4]
 8014220:	4b48      	ldr	r3, [pc, #288]	; (8014344 <ssl_parse_server_hello+0x4cc>)
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	f240 6371 	movw	r3, #1649	; 0x671
 8014228:	4a40      	ldr	r2, [pc, #256]	; (801432c <ssl_parse_server_hello+0x4b4>)
 801422a:	2103      	movs	r1, #3
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f7f7 fb0d 	bl	800b84c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 8014232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014234:	3323      	adds	r3, #35	; 0x23
 8014236:	69fa      	ldr	r2, [r7, #28]
 8014238:	9202      	str	r2, [sp, #8]
 801423a:	9301      	str	r3, [sp, #4]
 801423c:	4b42      	ldr	r3, [pc, #264]	; (8014348 <ssl_parse_server_hello+0x4d0>)
 801423e:	9300      	str	r3, [sp, #0]
 8014240:	f240 6372 	movw	r3, #1650	; 0x672
 8014244:	4a39      	ldr	r2, [pc, #228]	; (801432c <ssl_parse_server_hello+0x4b4>)
 8014246:	2103      	movs	r1, #3
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f7f7 fbf1 	bl	800ba30 <mbedtls_debug_print_buf>

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014252:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8014256:	2b00      	cmp	r3, #0
 8014258:	d021      	beq.n	801429e <ssl_parse_server_hello+0x426>
 801425a:	69fb      	ldr	r3, [r7, #28]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d01e      	beq.n	801429e <ssl_parse_server_hello+0x426>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014264:	681b      	ldr	r3, [r3, #0]
    if( ssl->handshake->resume == 0 || n == 0 ||
 8014266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014268:	429a      	cmp	r2, r3
 801426a:	d118      	bne.n	801429e <ssl_parse_server_hello+0x426>
        ssl->session_negotiate->compression != comp ||
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014270:	685a      	ldr	r2, [r3, #4]
 8014272:	7efb      	ldrb	r3, [r7, #27]
        ssl->session_negotiate->ciphersuite != i ||
 8014274:	429a      	cmp	r2, r3
 8014276:	d112      	bne.n	801429e <ssl_parse_server_hello+0x426>
        ssl->session_negotiate->id_len != n ||
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801427c:	689b      	ldr	r3, [r3, #8]
        ssl->session_negotiate->compression != comp ||
 801427e:	69fa      	ldr	r2, [r7, #28]
 8014280:	429a      	cmp	r2, r3
 8014282:	d10c      	bne.n	801429e <ssl_parse_server_hello+0x426>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014288:	f103 000c 	add.w	r0, r3, #12
 801428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428e:	3323      	adds	r3, #35	; 0x23
 8014290:	69fa      	ldr	r2, [r7, #28]
 8014292:	4619      	mov	r1, r3
 8014294:	f009 feca 	bl	801e02c <memcmp>
 8014298:	4603      	mov	r3, r0
        ssl->session_negotiate->id_len != n ||
 801429a:	2b00      	cmp	r3, #0
 801429c:	d020      	beq.n	80142e0 <ssl_parse_server_hello+0x468>
    {
        ssl->state++;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	685b      	ldr	r3, [r3, #4]
 80142a2:	1c5a      	adds	r2, r3, #1
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	605a      	str	r2, [r3, #4]
        ssl->handshake->resume = 0;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142ac:	2200      	movs	r2, #0
 80142ae:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142b8:	601a      	str	r2, [r3, #0]
        ssl->session_negotiate->compression = comp;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142be:	7efa      	ldrb	r2, [r7, #27]
 80142c0:	605a      	str	r2, [r3, #4]
        ssl->session_negotiate->id_len = n;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c6:	69fa      	ldr	r2, [r7, #28]
 80142c8:	609a      	str	r2, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ce:	f103 000c 	add.w	r0, r3, #12
 80142d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d4:	3323      	adds	r3, #35	; 0x23
 80142d6:	69fa      	ldr	r2, [r7, #28]
 80142d8:	4619      	mov	r1, r3
 80142da:	f009 feb7 	bl	801e04c <memcpy>
 80142de:	e01b      	b.n	8014318 <ssl_parse_server_hello+0x4a0>
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	220c      	movs	r2, #12
 80142e4:	605a      	str	r2, [r3, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f001 f9d2 	bl	8015690 <mbedtls_ssl_derive_keys>
 80142ec:	6238      	str	r0, [r7, #32]
 80142ee:	6a3b      	ldr	r3, [r7, #32]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d011      	beq.n	8014318 <ssl_parse_server_hello+0x4a0>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 80142f4:	6a3b      	ldr	r3, [r7, #32]
 80142f6:	9301      	str	r3, [sp, #4]
 80142f8:	4b14      	ldr	r3, [pc, #80]	; (801434c <ssl_parse_server_hello+0x4d4>)
 80142fa:	9300      	str	r3, [sp, #0]
 80142fc:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8014300:	4a0a      	ldr	r2, [pc, #40]	; (801432c <ssl_parse_server_hello+0x4b4>)
 8014302:	2101      	movs	r1, #1
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f7f7 fb27 	bl	800b958 <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801430a:	2250      	movs	r2, #80	; 0x50
 801430c:	2102      	movs	r1, #2
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f003 fc12 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
            return( ret );
 8014314:	6a3b      	ldr	r3, [r7, #32]
 8014316:	e15a      	b.n	80145ce <ssl_parse_server_hello+0x756>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801431c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8014320:	2b00      	cmp	r3, #0
 8014322:	d017      	beq.n	8014354 <ssl_parse_server_hello+0x4dc>
 8014324:	4b0a      	ldr	r3, [pc, #40]	; (8014350 <ssl_parse_server_hello+0x4d8>)
 8014326:	e016      	b.n	8014356 <ssl_parse_server_hello+0x4de>
 8014328:	080225cc 	.word	0x080225cc
 801432c:	080222ac 	.word	0x080222ac
 8014330:	ffff8680 	.word	0xffff8680
 8014334:	08022688 	.word	0x08022688
 8014338:	ffff8f80 	.word	0xffff8f80
 801433c:	080226ac 	.word	0x080226ac
 8014340:	ffff8f00 	.word	0xffff8f00
 8014344:	080226d0 	.word	0x080226d0
 8014348:	080226f4 	.word	0x080226f4
 801434c:	08022710 	.word	0x08022710
 8014350:	08022728 	.word	0x08022728
 8014354:	4ba0      	ldr	r3, [pc, #640]	; (80145d8 <ssl_parse_server_hello+0x760>)
 8014356:	9301      	str	r3, [sp, #4]
 8014358:	4ba0      	ldr	r3, [pc, #640]	; (80145dc <ssl_parse_server_hello+0x764>)
 801435a:	9300      	str	r3, [sp, #0]
 801435c:	f240 6397 	movw	r3, #1687	; 0x697
 8014360:	4a9f      	ldr	r2, [pc, #636]	; (80145e0 <ssl_parse_server_hello+0x768>)
 8014362:	2103      	movs	r1, #3
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7f7 fa71 	bl	800b84c <mbedtls_debug_print_msg>
                   ssl->handshake->resume ? "a" : "no" ) );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 801436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801436c:	9301      	str	r3, [sp, #4]
 801436e:	4b9d      	ldr	r3, [pc, #628]	; (80145e4 <ssl_parse_server_hello+0x76c>)
 8014370:	9300      	str	r3, [sp, #0]
 8014372:	f240 639a 	movw	r3, #1690	; 0x69a
 8014376:	4a9a      	ldr	r2, [pc, #616]	; (80145e0 <ssl_parse_server_hello+0x768>)
 8014378:	2103      	movs	r1, #3
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f7f7 fa66 	bl	800b84c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	3325      	adds	r3, #37	; 0x25
 8014384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014386:	4413      	add	r3, r2
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	9301      	str	r3, [sp, #4]
 801438c:	4b96      	ldr	r3, [pc, #600]	; (80145e8 <ssl_parse_server_hello+0x770>)
 801438e:	9300      	str	r3, [sp, #0]
 8014390:	f240 639b 	movw	r3, #1691	; 0x69b
 8014394:	4a92      	ldr	r2, [pc, #584]	; (80145e0 <ssl_parse_server_hello+0x768>)
 8014396:	2103      	movs	r1, #3
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f7f7 fa57 	bl	800b84c <mbedtls_debug_print_msg>

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7ff f983 	bl	80136b0 <mbedtls_ssl_ciphersuite_from_id>
 80143aa:	6178      	str	r0, [r7, #20]
    if( suite_info == NULL
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d10f      	bne.n	80143d2 <ssl_parse_server_hello+0x55a>
            || ( ssl->conf->arc4_disabled &&
                suite_info->cipher == MBEDTLS_CIPHER_ARC4_128 )
#endif
        )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80143b2:	4b8e      	ldr	r3, [pc, #568]	; (80145ec <ssl_parse_server_hello+0x774>)
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	f240 63a5 	movw	r3, #1701	; 0x6a5
 80143ba:	4a89      	ldr	r2, [pc, #548]	; (80145e0 <ssl_parse_server_hello+0x768>)
 80143bc:	2101      	movs	r1, #1
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f7f7 fa44 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80143c4:	222f      	movs	r2, #47	; 0x2f
 80143c6:	2102      	movs	r1, #2
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f003 fbb5 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80143ce:	4b88      	ldr	r3, [pc, #544]	; (80145f0 <ssl_parse_server_hello+0x778>)
 80143d0:	e0fd      	b.n	80145ce <ssl_parse_server_hello+0x756>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	9301      	str	r3, [sp, #4]
 80143d8:	4b86      	ldr	r3, [pc, #536]	; (80145f4 <ssl_parse_server_hello+0x77c>)
 80143da:	9300      	str	r3, [sp, #0]
 80143dc:	f240 63ab 	movw	r3, #1707	; 0x6ab
 80143e0:	4a7f      	ldr	r2, [pc, #508]	; (80145e0 <ssl_parse_server_hello+0x768>)
 80143e2:	2103      	movs	r1, #3
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f7f7 fa31 	bl	800b84c <mbedtls_debug_print_msg>

    i = 0;
 80143ea:	2300      	movs	r3, #0
 80143ec:	637b      	str	r3, [r7, #52]	; 0x34
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	687a      	ldr	r2, [r7, #4]
 80143f4:	68d2      	ldr	r2, [r2, #12]
 80143f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80143fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143fc:	009b      	lsls	r3, r3, #2
 80143fe:	4413      	add	r3, r2
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d10f      	bne.n	8014426 <ssl_parse_server_hello+0x5ae>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014406:	4b79      	ldr	r3, [pc, #484]	; (80145ec <ssl_parse_server_hello+0x774>)
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	f240 63b2 	movw	r3, #1714	; 0x6b2
 801440e:	4a74      	ldr	r2, [pc, #464]	; (80145e0 <ssl_parse_server_hello+0x768>)
 8014410:	2101      	movs	r1, #1
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f7f7 fa1a 	bl	800b84c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014418:	222f      	movs	r2, #47	; 0x2f
 801441a:	2102      	movs	r1, #2
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f003 fb8b 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8014422:	4b73      	ldr	r3, [pc, #460]	; (80145f0 <ssl_parse_server_hello+0x778>)
 8014424:	e0d3      	b.n	80145ce <ssl_parse_server_hello+0x756>
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	687a      	ldr	r2, [r7, #4]
 801442c:	68d2      	ldr	r2, [r2, #12]
 801442e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014434:	1c59      	adds	r1, r3, #1
 8014436:	6379      	str	r1, [r7, #52]	; 0x34
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	4413      	add	r3, r2
 801443c:	681a      	ldr	r2, [r3, #0]
            ssl->session_negotiate->ciphersuite )
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014442:	681b      	ldr	r3, [r3, #0]
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 8014444:	429a      	cmp	r2, r3
 8014446:	d000      	beq.n	801444a <ssl_parse_server_hello+0x5d2>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 8014448:	e7d1      	b.n	80143ee <ssl_parse_server_hello+0x576>
        {
            break;
 801444a:	bf00      	nop
        }
    }

    if( comp != MBEDTLS_SSL_COMPRESS_NULL
 801444c:	7efb      	ldrb	r3, [r7, #27]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d00f      	beq.n	8014472 <ssl_parse_server_hello+0x5fa>
#if defined(MBEDTLS_ZLIB_SUPPORT)
        && comp != MBEDTLS_SSL_COMPRESS_DEFLATE
#endif
      )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014452:	4b66      	ldr	r3, [pc, #408]	; (80145ec <ssl_parse_server_hello+0x774>)
 8014454:	9300      	str	r3, [sp, #0]
 8014456:	f240 63c5 	movw	r3, #1733	; 0x6c5
 801445a:	4a61      	ldr	r2, [pc, #388]	; (80145e0 <ssl_parse_server_hello+0x768>)
 801445c:	2101      	movs	r1, #1
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7f7 f9f4 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014464:	222f      	movs	r2, #47	; 0x2f
 8014466:	2102      	movs	r1, #2
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f003 fb65 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801446e:	4b60      	ldr	r3, [pc, #384]	; (80145f0 <ssl_parse_server_hello+0x778>)
 8014470:	e0ad      	b.n	80145ce <ssl_parse_server_hello+0x756>
    }
    ssl->session_negotiate->compression = comp;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014476:	7efa      	ldrb	r2, [r7, #27]
 8014478:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 801447a:	69fb      	ldr	r3, [r7, #28]
 801447c:	3328      	adds	r3, #40	; 0x28
 801447e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014480:	4413      	add	r3, r2
 8014482:	62fb      	str	r3, [r7, #44]	; 0x2c

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 8014484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014486:	9301      	str	r3, [sp, #4]
 8014488:	4b5b      	ldr	r3, [pc, #364]	; (80145f8 <ssl_parse_server_hello+0x780>)
 801448a:	9300      	str	r3, [sp, #0]
 801448c:	f240 63ce 	movw	r3, #1742	; 0x6ce
 8014490:	4a53      	ldr	r2, [pc, #332]	; (80145e0 <ssl_parse_server_hello+0x768>)
 8014492:	2102      	movs	r1, #2
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f7f7 f9d9 	bl	800b84c <mbedtls_debug_print_msg>

    while( ext_len )
 801449a:	e068      	b.n	801456e <ssl_parse_server_hello+0x6f6>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 801449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	021b      	lsls	r3, r3, #8
                                | ( ext[1]       ) );
 80144a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144a4:	3201      	adds	r2, #1
 80144a6:	7812      	ldrb	r2, [r2, #0]
 80144a8:	4313      	orrs	r3, r2
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 80144aa:	613b      	str	r3, [r7, #16]
        unsigned int ext_size = ( ( ext[2] <<  8 )
 80144ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ae:	3302      	adds	r3, #2
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	021b      	lsls	r3, r3, #8
                                | ( ext[3]       ) );
 80144b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144b6:	3203      	adds	r2, #3
 80144b8:	7812      	ldrb	r2, [r2, #0]
 80144ba:	4313      	orrs	r3, r2
        unsigned int ext_size = ( ( ext[2] <<  8 )
 80144bc:	60fb      	str	r3, [r7, #12]

        if( ext_size + 4 > ext_len )
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	3304      	adds	r3, #4
 80144c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d20f      	bcs.n	80144e8 <ssl_parse_server_hello+0x670>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80144c8:	4b48      	ldr	r3, [pc, #288]	; (80145ec <ssl_parse_server_hello+0x774>)
 80144ca:	9300      	str	r3, [sp, #0]
 80144cc:	f240 63d9 	movw	r3, #1753	; 0x6d9
 80144d0:	4a43      	ldr	r2, [pc, #268]	; (80145e0 <ssl_parse_server_hello+0x768>)
 80144d2:	2101      	movs	r1, #1
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f7f7 f9b9 	bl	800b84c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80144da:	2232      	movs	r2, #50	; 0x32
 80144dc:	2102      	movs	r1, #2
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f003 fb2a 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80144e4:	4b42      	ldr	r3, [pc, #264]	; (80145f0 <ssl_parse_server_hello+0x778>)
 80144e6:	e072      	b.n	80145ce <ssl_parse_server_hello+0x756>
        }

        switch( ext_id )
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	f64f 7201 	movw	r2, #65281	; 0xff01
 80144ee:	4293      	cmp	r3, r2
 80144f0:	d115      	bne.n	801451e <ssl_parse_server_hello+0x6a6>
        {
        case MBEDTLS_TLS_EXT_RENEGOTIATION_INFO:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 80144f2:	4b42      	ldr	r3, [pc, #264]	; (80145fc <ssl_parse_server_hello+0x784>)
 80144f4:	9300      	str	r3, [sp, #0]
 80144f6:	f240 63e2 	movw	r3, #1762	; 0x6e2
 80144fa:	4a39      	ldr	r2, [pc, #228]	; (80145e0 <ssl_parse_server_hello+0x768>)
 80144fc:	2103      	movs	r1, #3
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f7f7 f9a4 	bl	800b84c <mbedtls_debug_print_msg>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
            renegotiation_info_seen = 1;
#endif

            if( ( ret = ssl_parse_renegotiation_info( ssl, ext + 4,
 8014504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014506:	3304      	adds	r3, #4
 8014508:	68fa      	ldr	r2, [r7, #12]
 801450a:	4619      	mov	r1, r3
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7ff fc87 	bl	8013e20 <ssl_parse_renegotiation_info>
 8014512:	6238      	str	r0, [r7, #32]
 8014514:	6a3b      	ldr	r3, [r7, #32]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d00d      	beq.n	8014536 <ssl_parse_server_hello+0x6be>
                                                      ext_size ) ) != 0 )
                return( ret );
 801451a:	6a3b      	ldr	r3, [r7, #32]
 801451c:	e057      	b.n	80145ce <ssl_parse_server_hello+0x756>

            break;
#endif /* MBEDTLS_SSL_ALPN */

        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	9301      	str	r3, [sp, #4]
 8014522:	4b37      	ldr	r3, [pc, #220]	; (8014600 <ssl_parse_server_hello+0x788>)
 8014524:	9300      	str	r3, [sp, #0]
 8014526:	f240 7355 	movw	r3, #1877	; 0x755
 801452a:	4a2d      	ldr	r2, [pc, #180]	; (80145e0 <ssl_parse_server_hello+0x768>)
 801452c:	2103      	movs	r1, #3
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f7f7 f98c 	bl	800b84c <mbedtls_debug_print_msg>
 8014534:	e000      	b.n	8014538 <ssl_parse_server_hello+0x6c0>
            break;
 8014536:	bf00      	nop
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 8014538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	1ad3      	subs	r3, r2, r3
 801453e:	3b04      	subs	r3, #4
 8014540:	633b      	str	r3, [r7, #48]	; 0x30
        ext += 4 + ext_size;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	3304      	adds	r3, #4
 8014546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014548:	4413      	add	r3, r2
 801454a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ext_len > 0 && ext_len < 4 )
 801454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801454e:	2b00      	cmp	r3, #0
 8014550:	d00d      	beq.n	801456e <ssl_parse_server_hello+0x6f6>
 8014552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014554:	2b03      	cmp	r3, #3
 8014556:	d80a      	bhi.n	801456e <ssl_parse_server_hello+0x6f6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014558:	4b24      	ldr	r3, [pc, #144]	; (80145ec <ssl_parse_server_hello+0x774>)
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	f240 735e 	movw	r3, #1886	; 0x75e
 8014560:	4a1f      	ldr	r2, [pc, #124]	; (80145e0 <ssl_parse_server_hello+0x768>)
 8014562:	2101      	movs	r1, #1
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7f7 f971 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801456a:	4b21      	ldr	r3, [pc, #132]	; (80145f0 <ssl_parse_server_hello+0x778>)
 801456c:	e02f      	b.n	80145ce <ssl_parse_server_hello+0x756>
    while( ext_len )
 801456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014570:	2b00      	cmp	r3, #0
 8014572:	d193      	bne.n	801449c <ssl_parse_server_hello+0x624>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801457a:	2b00      	cmp	r3, #0
 801457c:	d113      	bne.n	80145a6 <ssl_parse_server_hello+0x72e>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014586:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801458a:	b2db      	uxtb	r3, r3
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801458c:	2b20      	cmp	r3, #32
 801458e:	d10a      	bne.n	80145a6 <ssl_parse_server_hello+0x72e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 8014590:	4b1c      	ldr	r3, [pc, #112]	; (8014604 <ssl_parse_server_hello+0x78c>)
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	f240 7369 	movw	r3, #1897	; 0x769
 8014598:	4a11      	ldr	r2, [pc, #68]	; (80145e0 <ssl_parse_server_hello+0x768>)
 801459a:	2101      	movs	r1, #1
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f7f7 f955 	bl	800b84c <mbedtls_debug_print_msg>
        handshake_failure = 1;
 80145a2:	2301      	movs	r3, #1
 80145a4:	62bb      	str	r3, [r7, #40]	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
        handshake_failure = 1;
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

    if( handshake_failure == 1 )
 80145a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a8:	2b01      	cmp	r3, #1
 80145aa:	d106      	bne.n	80145ba <ssl_parse_server_hello+0x742>
    {
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80145ac:	2228      	movs	r2, #40	; 0x28
 80145ae:	2102      	movs	r1, #2
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f003 fac1 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80145b6:	4b0e      	ldr	r3, [pc, #56]	; (80145f0 <ssl_parse_server_hello+0x778>)
 80145b8:	e009      	b.n	80145ce <ssl_parse_server_hello+0x756>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 80145ba:	4b13      	ldr	r3, [pc, #76]	; (8014608 <ssl_parse_server_hello+0x790>)
 80145bc:	9300      	str	r3, [sp, #0]
 80145be:	f240 738b 	movw	r3, #1931	; 0x78b
 80145c2:	4a07      	ldr	r2, [pc, #28]	; (80145e0 <ssl_parse_server_hello+0x768>)
 80145c4:	2102      	movs	r1, #2
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f7f7 f940 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 80145cc:	2300      	movs	r3, #0
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3738      	adds	r7, #56	; 0x38
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bdb0      	pop	{r4, r5, r7, pc}
 80145d6:	bf00      	nop
 80145d8:	0802272c 	.word	0x0802272c
 80145dc:	08022730 	.word	0x08022730
 80145e0:	080222ac 	.word	0x080222ac
 80145e4:	0802274c 	.word	0x0802274c
 80145e8:	08022774 	.word	0x08022774
 80145ec:	080225cc 	.word	0x080225cc
 80145f0:	ffff8680 	.word	0xffff8680
 80145f4:	08022794 	.word	0x08022794
 80145f8:	080227bc 	.word	0x080227bc
 80145fc:	080227e8 	.word	0x080227e8
 8014600:	08022808 	.word	0x08022808
 8014604:	08022830 	.word	0x08022830
 8014608:	08022860 	.word	0x08022860

0801460c <ssl_write_encrypted_pms>:
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
 801460c:	b5b0      	push	{r4, r5, r7, lr}
 801460e:	b08c      	sub	sp, #48	; 0x30
 8014610:	af04      	add	r7, sp, #16
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	60b9      	str	r1, [r7, #8]
 8014616:	607a      	str	r2, [r7, #4]
 8014618:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d101      	bne.n	8014626 <ssl_write_encrypted_pms+0x1a>
 8014622:	2300      	movs	r3, #0
 8014624:	e000      	b.n	8014628 <ssl_write_encrypted_pms+0x1c>
 8014626:	2302      	movs	r3, #2
 8014628:	61fb      	str	r3, [r7, #28]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801462e:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	4413      	add	r3, r2
 8014636:	61bb      	str	r3, [r7, #24]

    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8014638:	68ba      	ldr	r2, [r7, #8]
 801463a:	69fb      	ldr	r3, [r7, #28]
 801463c:	4413      	add	r3, r2
 801463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014642:	d90a      	bls.n	801465a <ssl_write_encrypted_pms+0x4e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small for encrypted pms" ) );
 8014644:	4b5e      	ldr	r3, [pc, #376]	; (80147c0 <ssl_write_encrypted_pms+0x1b4>)
 8014646:	9300      	str	r3, [sp, #0]
 8014648:	f640 0338 	movw	r3, #2104	; 0x838
 801464c:	4a5d      	ldr	r2, [pc, #372]	; (80147c4 <ssl_write_encrypted_pms+0x1b8>)
 801464e:	2101      	movs	r1, #1
 8014650:	68f8      	ldr	r0, [r7, #12]
 8014652:	f7f7 f8fb 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
 8014656:	4b5c      	ldr	r3, [pc, #368]	; (80147c8 <ssl_write_encrypted_pms+0x1bc>)
 8014658:	e0ad      	b.n	80147b6 <ssl_write_encrypted_pms+0x1aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8014662:	4618      	mov	r0, r3
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801466c:	4619      	mov	r1, r3
                       ssl->conf->transport, p );
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014676:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801467a:	b2db      	uxtb	r3, r3
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801467c:	461a      	mov	r2, r3
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	f005 f9b5 	bl	80199ee <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	699b      	ldr	r3, [r3, #24]
 801468a:	68fa      	ldr	r2, [r7, #12]
 801468c:	6812      	ldr	r2, [r2, #0]
 801468e:	69d0      	ldr	r0, [r2, #28]
 8014690:	69ba      	ldr	r2, [r7, #24]
 8014692:	1c91      	adds	r1, r2, #2
 8014694:	222e      	movs	r2, #46	; 0x2e
 8014696:	4798      	blx	r3
 8014698:	6178      	str	r0, [r7, #20]
 801469a:	697b      	ldr	r3, [r7, #20]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d00c      	beq.n	80146ba <ssl_write_encrypted_pms+0xae>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 80146a0:	697b      	ldr	r3, [r7, #20]
 80146a2:	9301      	str	r3, [sp, #4]
 80146a4:	4b49      	ldr	r3, [pc, #292]	; (80147cc <ssl_write_encrypted_pms+0x1c0>)
 80146a6:	9300      	str	r3, [sp, #0]
 80146a8:	f640 0348 	movw	r3, #2120	; 0x848
 80146ac:	4a45      	ldr	r2, [pc, #276]	; (80147c4 <ssl_write_encrypted_pms+0x1b8>)
 80146ae:	2101      	movs	r1, #1
 80146b0:	68f8      	ldr	r0, [r7, #12]
 80146b2:	f7f7 f951 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	e07d      	b.n	80147b6 <ssl_write_encrypted_pms+0x1aa>
    }

    ssl->handshake->pmslen = 48;
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146be:	2230      	movs	r2, #48	; 0x30
 80146c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if( ssl->session_negotiate->peer_cert == NULL )
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d10a      	bne.n	80146e4 <ssl_write_encrypted_pms+0xd8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 80146ce:	4b40      	ldr	r3, [pc, #256]	; (80147d0 <ssl_write_encrypted_pms+0x1c4>)
 80146d0:	9300      	str	r3, [sp, #0]
 80146d2:	f44f 6305 	mov.w	r3, #2128	; 0x850
 80146d6:	4a3b      	ldr	r2, [pc, #236]	; (80147c4 <ssl_write_encrypted_pms+0x1b8>)
 80146d8:	2102      	movs	r1, #2
 80146da:	68f8      	ldr	r0, [r7, #12]
 80146dc:	f7f7 f8b6 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80146e0:	4b3c      	ldr	r3, [pc, #240]	; (80147d4 <ssl_write_encrypted_pms+0x1c8>)
 80146e2:	e068      	b.n	80147b6 <ssl_write_encrypted_pms+0x1aa>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80146ea:	33bc      	adds	r3, #188	; 0xbc
 80146ec:	2101      	movs	r1, #1
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7fa fb2c 	bl	800ed4c <mbedtls_pk_can_do>
 80146f4:	4603      	mov	r3, r0
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d10a      	bne.n	8014710 <ssl_write_encrypted_pms+0x104>
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 80146fa:	4b37      	ldr	r3, [pc, #220]	; (80147d8 <ssl_write_encrypted_pms+0x1cc>)
 80146fc:	9300      	str	r3, [sp, #0]
 80146fe:	f640 035a 	movw	r3, #2138	; 0x85a
 8014702:	4a30      	ldr	r2, [pc, #192]	; (80147c4 <ssl_write_encrypted_pms+0x1b8>)
 8014704:	2101      	movs	r1, #1
 8014706:	68f8      	ldr	r0, [r7, #12]
 8014708:	f7f7 f8a0 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801470c:	4b33      	ldr	r3, [pc, #204]	; (80147dc <ssl_write_encrypted_pms+0x1d0>)
 801470e:	e052      	b.n	80147b6 <ssl_write_encrypted_pms+0x1aa>
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014716:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
                            p, ssl->handshake->pmslen,
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801471e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
                            ssl->out_msg + offset + len_bytes, olen,
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014728:	68b9      	ldr	r1, [r7, #8]
 801472a:	69fb      	ldr	r3, [r7, #28]
 801472c:	440b      	add	r3, r1
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801472e:	18d5      	adds	r5, r2, r3
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
 8014730:	68ba      	ldr	r2, [r7, #8]
 8014732:	69fb      	ldr	r3, [r7, #28]
 8014734:	4413      	add	r3, r2
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014736:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801473a:	68fa      	ldr	r2, [r7, #12]
 801473c:	6812      	ldr	r2, [r2, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801473e:	6992      	ldr	r2, [r2, #24]
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8014740:	68f9      	ldr	r1, [r7, #12]
 8014742:	6809      	ldr	r1, [r1, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014744:	69c9      	ldr	r1, [r1, #28]
 8014746:	9103      	str	r1, [sp, #12]
 8014748:	9202      	str	r2, [sp, #8]
 801474a:	9301      	str	r3, [sp, #4]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	9300      	str	r3, [sp, #0]
 8014750:	462b      	mov	r3, r5
 8014752:	4622      	mov	r2, r4
 8014754:	69b9      	ldr	r1, [r7, #24]
 8014756:	f7fa fbe7 	bl	800ef28 <mbedtls_pk_encrypt>
 801475a:	6178      	str	r0, [r7, #20]
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d00c      	beq.n	801477c <ssl_write_encrypted_pms+0x170>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	9301      	str	r3, [sp, #4]
 8014766:	4b1e      	ldr	r3, [pc, #120]	; (80147e0 <ssl_write_encrypted_pms+0x1d4>)
 8014768:	9300      	str	r3, [sp, #0]
 801476a:	f640 0364 	movw	r3, #2148	; 0x864
 801476e:	4a15      	ldr	r2, [pc, #84]	; (80147c4 <ssl_write_encrypted_pms+0x1b8>)
 8014770:	2101      	movs	r1, #1
 8014772:	68f8      	ldr	r0, [r7, #12]
 8014774:	f7f7 f8f0 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	e01c      	b.n	80147b6 <ssl_write_encrypted_pms+0x1aa>
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 801477c:	69fb      	ldr	r3, [r7, #28]
 801477e:	2b02      	cmp	r3, #2
 8014780:	d118      	bne.n	80147b4 <ssl_write_encrypted_pms+0x1a8>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	0a19      	lsrs	r1, r3, #8
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	4413      	add	r3, r2
 8014792:	b2ca      	uxtb	r2, r1
 8014794:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	6819      	ldr	r1, [r3, #0]
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	3301      	adds	r3, #1
 80147a4:	4413      	add	r3, r2
 80147a6:	b2ca      	uxtb	r2, r1
 80147a8:	701a      	strb	r2, [r3, #0]
        *olen += 2;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	1c9a      	adds	r2, r3, #2
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	601a      	str	r2, [r3, #0]
    }
#endif

    return( 0 );
 80147b4:	2300      	movs	r3, #0
}
 80147b6:	4618      	mov	r0, r3
 80147b8:	3720      	adds	r7, #32
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bdb0      	pop	{r4, r5, r7, pc}
 80147be:	bf00      	nop
 80147c0:	08022878 	.word	0x08022878
 80147c4:	080222ac 	.word	0x080222ac
 80147c8:	ffff9600 	.word	0xffff9600
 80147cc:	0802289c 	.word	0x0802289c
 80147d0:	080228a4 	.word	0x080228a4
 80147d4:	ffff8900 	.word	0xffff8900
 80147d8:	080228bc 	.word	0x080228bc
 80147dc:	ffff9300 	.word	0xffff9300
 80147e0:	080228dc 	.word	0x080228dc

080147e4 <ssl_parse_server_key_exchange>:
}
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
 80147e4:	b590      	push	{r4, r7, lr}
 80147e6:	b08b      	sub	sp, #44	; 0x2c
 80147e8:	af04      	add	r7, sp, #16
 80147ea:	6078      	str	r0, [r7, #4]
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	617b      	str	r3, [r7, #20]
    unsigned char *p = NULL, *end = NULL;
 80147f4:	2300      	movs	r3, #0
 80147f6:	613b      	str	r3, [r7, #16]
 80147f8:	2300      	movs	r3, #0
 80147fa:	60fb      	str	r3, [r7, #12]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 80147fc:	4b50      	ldr	r3, [pc, #320]	; (8014940 <ssl_parse_server_key_exchange+0x15c>)
 80147fe:	9300      	str	r3, [sp, #0]
 8014800:	f640 03e6 	movw	r3, #2278	; 0x8e6
 8014804:	4a4f      	ldr	r2, [pc, #316]	; (8014944 <ssl_parse_server_key_exchange+0x160>)
 8014806:	2102      	movs	r1, #2
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f7f7 f81f 	bl	800b84c <mbedtls_debug_print_msg>

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	7a9b      	ldrb	r3, [r3, #10]
 8014812:	2b01      	cmp	r3, #1
 8014814:	d10f      	bne.n	8014836 <ssl_parse_server_key_exchange+0x52>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 8014816:	4b4c      	ldr	r3, [pc, #304]	; (8014948 <ssl_parse_server_key_exchange+0x164>)
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	f640 03eb 	movw	r3, #2283	; 0x8eb
 801481e:	4a49      	ldr	r2, [pc, #292]	; (8014944 <ssl_parse_server_key_exchange+0x160>)
 8014820:	2102      	movs	r1, #2
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f7f7 f812 	bl	800b84c <mbedtls_debug_print_msg>
        ssl->state++;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	685b      	ldr	r3, [r3, #4]
 801482c:	1c5a      	adds	r2, r3, #1
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	605a      	str	r2, [r3, #4]
        return( 0 );
 8014832:	2300      	movs	r3, #0
 8014834:	e080      	b.n	8014938 <ssl_parse_server_key_exchange+0x154>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f002 ffe2 	bl	8017800 <mbedtls_ssl_read_record>
 801483c:	60b8      	str	r0, [r7, #8]
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d00c      	beq.n	801485e <ssl_parse_server_key_exchange+0x7a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	9301      	str	r3, [sp, #4]
 8014848:	4b40      	ldr	r3, [pc, #256]	; (801494c <ssl_parse_server_key_exchange+0x168>)
 801484a:	9300      	str	r3, [sp, #0]
 801484c:	f640 130b 	movw	r3, #2315	; 0x90b
 8014850:	4a3c      	ldr	r2, [pc, #240]	; (8014944 <ssl_parse_server_key_exchange+0x160>)
 8014852:	2101      	movs	r1, #1
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f7f7 f87f 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	e06c      	b.n	8014938 <ssl_parse_server_key_exchange+0x154>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014862:	2b16      	cmp	r3, #22
 8014864:	d00f      	beq.n	8014886 <ssl_parse_server_key_exchange+0xa2>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8014866:	4b3a      	ldr	r3, [pc, #232]	; (8014950 <ssl_parse_server_key_exchange+0x16c>)
 8014868:	9300      	str	r3, [sp, #0]
 801486a:	f640 1311 	movw	r3, #2321	; 0x911
 801486e:	4a35      	ldr	r2, [pc, #212]	; (8014944 <ssl_parse_server_key_exchange+0x160>)
 8014870:	2101      	movs	r1, #1
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f7f6 ffea 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014878:	220a      	movs	r2, #10
 801487a:	2102      	movs	r1, #2
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f003 f95b 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014882:	4b34      	ldr	r3, [pc, #208]	; (8014954 <ssl_parse_server_key_exchange+0x170>)
 8014884:	e058      	b.n	8014938 <ssl_parse_server_key_exchange+0x154>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801488a:	781b      	ldrb	r3, [r3, #0]
 801488c:	2b0c      	cmp	r3, #12
 801488e:	d02c      	beq.n	80148ea <ssl_parse_server_key_exchange+0x106>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	7a9b      	ldrb	r3, [r3, #10]
 8014894:	2b05      	cmp	r3, #5
 8014896:	d003      	beq.n	80148a0 <ssl_parse_server_key_exchange+0xbc>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	7a9b      	ldrb	r3, [r3, #10]
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801489c:	2b07      	cmp	r3, #7
 801489e:	d114      	bne.n	80148ca <ssl_parse_server_key_exchange+0xe6>
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	2201      	movs	r2, #1
 80148a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            goto exit;
 80148a8:	bf00      	nop
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	685b      	ldr	r3, [r3, #4]
 80148ae:	1c5a      	adds	r2, r3, #1
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	605a      	str	r2, [r3, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 80148b4:	4b28      	ldr	r3, [pc, #160]	; (8014958 <ssl_parse_server_key_exchange+0x174>)
 80148b6:	9300      	str	r3, [sp, #0]
 80148b8:	f640 2314 	movw	r3, #2580	; 0xa14
 80148bc:	4a21      	ldr	r2, [pc, #132]	; (8014944 <ssl_parse_server_key_exchange+0x160>)
 80148be:	2102      	movs	r1, #2
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7f6 ffc3 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 80148c6:	2300      	movs	r3, #0
 80148c8:	e036      	b.n	8014938 <ssl_parse_server_key_exchange+0x154>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 80148ca:	4b24      	ldr	r3, [pc, #144]	; (801495c <ssl_parse_server_key_exchange+0x178>)
 80148cc:	9300      	str	r3, [sp, #0]
 80148ce:	f640 1326 	movw	r3, #2342	; 0x926
 80148d2:	4a1c      	ldr	r2, [pc, #112]	; (8014944 <ssl_parse_server_key_exchange+0x160>)
 80148d4:	2101      	movs	r1, #1
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f7f6 ffb8 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80148dc:	220a      	movs	r2, #10
 80148de:	2102      	movs	r1, #2
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f003 f929 	bl	8017b38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80148e6:	4b1b      	ldr	r3, [pc, #108]	; (8014954 <ssl_parse_server_key_exchange+0x170>)
 80148e8:	e026      	b.n	8014938 <ssl_parse_server_key_exchange+0x154>
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80148ee:	6878      	ldr	r0, [r7, #4]
 80148f0:	f7fe ff6f 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 80148f4:	4603      	mov	r3, r0
 80148f6:	4423      	add	r3, r4
 80148f8:	613b      	str	r3, [r7, #16]
    end = ssl->in_msg + ssl->in_hslen;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014902:	4413      	add	r3, r2
 8014904:	60fb      	str	r3, [r7, #12]
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 8014906:	68fa      	ldr	r2, [r7, #12]
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	1ad3      	subs	r3, r2, r3
 801490c:	9302      	str	r3, [sp, #8]
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	9301      	str	r3, [sp, #4]
 8014912:	4b13      	ldr	r3, [pc, #76]	; (8014960 <ssl_parse_server_key_exchange+0x17c>)
 8014914:	9300      	str	r3, [sp, #0]
 8014916:	f44f 6313 	mov.w	r3, #2352	; 0x930
 801491a:	4a0a      	ldr	r2, [pc, #40]	; (8014944 <ssl_parse_server_key_exchange+0x160>)
 801491c:	2103      	movs	r1, #3
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7f7 f886 	bl	800ba30 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8014924:	4b0f      	ldr	r3, [pc, #60]	; (8014964 <ssl_parse_server_key_exchange+0x180>)
 8014926:	9300      	str	r3, [sp, #0]
 8014928:	f640 137d 	movw	r3, #2429	; 0x97d
 801492c:	4a05      	ldr	r2, [pc, #20]	; (8014944 <ssl_parse_server_key_exchange+0x160>)
 801492e:	2101      	movs	r1, #1
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f7f6 ff8b 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8014936:	4b0c      	ldr	r3, [pc, #48]	; (8014968 <ssl_parse_server_key_exchange+0x184>)
}
 8014938:	4618      	mov	r0, r3
 801493a:	371c      	adds	r7, #28
 801493c:	46bd      	mov	sp, r7
 801493e:	bd90      	pop	{r4, r7, pc}
 8014940:	080228f8 	.word	0x080228f8
 8014944:	080222ac 	.word	0x080222ac
 8014948:	08022918 	.word	0x08022918
 801494c:	080225b4 	.word	0x080225b4
 8014950:	0802293c 	.word	0x0802293c
 8014954:	ffff8900 	.word	0xffff8900
 8014958:	080229b4 	.word	0x080229b4
 801495c:	0802295c 	.word	0x0802295c
 8014960:	0802298c 	.word	0x0802298c
 8014964:	080229a0 	.word	0x080229a0
 8014968:	ffff9400 	.word	0xffff9400

0801496c <ssl_parse_certificate_request>:
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
}
#else /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */
static int ssl_parse_certificate_request( mbedtls_ssl_context *ssl )
{
 801496c:	b590      	push	{r4, r7, lr}
 801496e:	b091      	sub	sp, #68	; 0x44
 8014970:	af04      	add	r7, sp, #16
 8014972:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *buf;
    size_t n = 0;
 8014974:	2300      	movs	r3, #0
 8014976:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t cert_type_len = 0, dn_len = 0;
 8014978:	2300      	movs	r3, #0
 801497a:	627b      	str	r3, [r7, #36]	; 0x24
 801497c:	2300      	movs	r3, #0
 801497e:	623b      	str	r3, [r7, #32]
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	61fb      	str	r3, [r7, #28]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 8014988:	4ba2      	ldr	r3, [pc, #648]	; (8014c14 <ssl_parse_certificate_request+0x2a8>)
 801498a:	9300      	str	r3, [sp, #0]
 801498c:	f640 2335 	movw	r3, #2613	; 0xa35
 8014990:	4aa1      	ldr	r2, [pc, #644]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 8014992:	2102      	movs	r1, #2
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f7f6 ff59 	bl	800b84c <mbedtls_debug_print_msg>

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
 801499a:	69f8      	ldr	r0, [r7, #28]
 801499c:	f7fe febc 	bl	8013718 <mbedtls_ssl_ciphersuite_cert_req_allowed>
 80149a0:	4603      	mov	r3, r0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d10f      	bne.n	80149c6 <ssl_parse_certificate_request+0x5a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 80149a6:	4b9d      	ldr	r3, [pc, #628]	; (8014c1c <ssl_parse_certificate_request+0x2b0>)
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	f640 2339 	movw	r3, #2617	; 0xa39
 80149ae:	4a9a      	ldr	r2, [pc, #616]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 80149b0:	2102      	movs	r1, #2
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f7f6 ff4a 	bl	800b84c <mbedtls_debug_print_msg>
        ssl->state++;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	1c5a      	adds	r2, r3, #1
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	605a      	str	r2, [r3, #4]
        return( 0 );
 80149c2:	2300      	movs	r3, #0
 80149c4:	e121      	b.n	8014c0a <ssl_parse_certificate_request+0x29e>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f002 ff1a 	bl	8017800 <mbedtls_ssl_read_record>
 80149cc:	61b8      	str	r0, [r7, #24]
 80149ce:	69bb      	ldr	r3, [r7, #24]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d00c      	beq.n	80149ee <ssl_parse_certificate_request+0x82>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	9301      	str	r3, [sp, #4]
 80149d8:	4b91      	ldr	r3, [pc, #580]	; (8014c20 <ssl_parse_certificate_request+0x2b4>)
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 80149e0:	4a8d      	ldr	r2, [pc, #564]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 80149e2:	2101      	movs	r1, #1
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f7f6 ffb7 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	e10d      	b.n	8014c0a <ssl_parse_certificate_request+0x29e>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149f2:	2b16      	cmp	r3, #22
 80149f4:	d00f      	beq.n	8014a16 <ssl_parse_certificate_request+0xaa>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 80149f6:	4b8b      	ldr	r3, [pc, #556]	; (8014c24 <ssl_parse_certificate_request+0x2b8>)
 80149f8:	9300      	str	r3, [sp, #0]
 80149fa:	f640 2346 	movw	r3, #2630	; 0xa46
 80149fe:	4a86      	ldr	r2, [pc, #536]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 8014a00:	2101      	movs	r1, #1
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f7f6 ff22 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014a08:	220a      	movs	r2, #10
 8014a0a:	2102      	movs	r1, #2
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f003 f893 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014a12:	4b85      	ldr	r3, [pc, #532]	; (8014c28 <ssl_parse_certificate_request+0x2bc>)
 8014a14:	e0f9      	b.n	8014c0a <ssl_parse_certificate_request+0x29e>
    }

    ssl->state++;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	685b      	ldr	r3, [r3, #4]
 8014a1a:	1c5a      	adds	r2, r3, #1
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	605a      	str	r2, [r3, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	2b0d      	cmp	r3, #13
 8014a28:	bf0c      	ite	eq
 8014a2a:	2301      	moveq	r3, #1
 8014a2c:	2300      	movne	r3, #0
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	461a      	mov	r2, r3
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d001      	beq.n	8014a46 <ssl_parse_certificate_request+0xda>
 8014a42:	4b7a      	ldr	r3, [pc, #488]	; (8014c2c <ssl_parse_certificate_request+0x2c0>)
 8014a44:	e000      	b.n	8014a48 <ssl_parse_certificate_request+0xdc>
 8014a46:	4b7a      	ldr	r3, [pc, #488]	; (8014c30 <ssl_parse_certificate_request+0x2c4>)
 8014a48:	9301      	str	r3, [sp, #4]
 8014a4a:	4b7a      	ldr	r3, [pc, #488]	; (8014c34 <ssl_parse_certificate_request+0x2c8>)
 8014a4c:	9300      	str	r3, [sp, #0]
 8014a4e:	f640 234f 	movw	r3, #2639	; 0xa4f
 8014a52:	4a71      	ldr	r2, [pc, #452]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 8014a54:	2103      	movs	r1, #3
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f7f6 fef8 	bl	800b84c <mbedtls_debug_print_msg>
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d104      	bne.n	8014a70 <ssl_parse_certificate_request+0x104>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2201      	movs	r2, #1
 8014a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        goto exit;
 8014a6e:	e0c2      	b.n	8014bf6 <ssl_parse_certificate_request+0x28a>
     *  write_certificate_verify), so let's just use what we have.
     *
     *  However, we still minimally parse the message to check it is at least
     *  superficially sane.
     */
    buf = ssl->in_msg;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014a74:	617b      	str	r3, [r7, #20]

    /* certificate_types */
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f7fe feab 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014a7c:	4602      	mov	r2, r0
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	4413      	add	r3, r2
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	627b      	str	r3, [r7, #36]	; 0x24
    n = cert_type_len;
 8014a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a88:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7fe fe9f 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014a94:	4602      	mov	r2, r0
 8014a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a98:	4413      	add	r3, r2
 8014a9a:	3302      	adds	r3, #2
 8014a9c:	429c      	cmp	r4, r3
 8014a9e:	d20f      	bcs.n	8014ac0 <ssl_parse_certificate_request+0x154>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8014aa0:	4b60      	ldr	r3, [pc, #384]	; (8014c24 <ssl_parse_certificate_request+0x2b8>)
 8014aa2:	9300      	str	r3, [sp, #0]
 8014aa4:	f640 2379 	movw	r3, #2681	; 0xa79
 8014aa8:	4a5b      	ldr	r2, [pc, #364]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 8014aaa:	2101      	movs	r1, #1
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f7f6 fecd 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014ab2:	2232      	movs	r2, #50	; 0x32
 8014ab4:	2102      	movs	r1, #2
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f003 f83e 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8014abc:	4b5e      	ldr	r3, [pc, #376]	; (8014c38 <ssl_parse_certificate_request+0x2cc>)
 8014abe:	e0a4      	b.n	8014c0a <ssl_parse_certificate_request+0x29e>
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	2b03      	cmp	r3, #3
 8014ac6:	d15f      	bne.n	8014b88 <ssl_parse_certificate_request+0x21c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f7fe fe82 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad2:	4413      	add	r3, r2
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	697a      	ldr	r2, [r7, #20]
 8014ad8:	4413      	add	r3, r2
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	021c      	lsls	r4, r3, #8
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f7fe fe77 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014ae4:	4602      	mov	r2, r0
 8014ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae8:	4413      	add	r3, r2
 8014aea:	3302      	adds	r3, #2
 8014aec:	697a      	ldr	r2, [r7, #20]
 8014aee:	4413      	add	r3, r2
 8014af0:	781b      	ldrb	r3, [r3, #0]
 8014af2:	4323      	orrs	r3, r4
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8014af4:	613b      	str	r3, [r7, #16]
#if defined(MBEDTLS_DEBUG_C)
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	f7fe fe6b 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014afc:	4602      	mov	r2, r0
 8014afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b00:	4413      	add	r3, r2
 8014b02:	3303      	adds	r3, #3
 8014b04:	697a      	ldr	r2, [r7, #20]
 8014b06:	4413      	add	r3, r2
 8014b08:	60fb      	str	r3, [r7, #12]
        size_t i;

        for( i = 0; i < sig_alg_len; i += 2 )
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b0e:	e017      	b.n	8014b40 <ssl_parse_certificate_request+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 8014b10:	68fa      	ldr	r2, [r7, #12]
 8014b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b14:	4413      	add	r3, r2
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	4619      	mov	r1, r3
 8014b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	68fa      	ldr	r2, [r7, #12]
 8014b20:	4413      	add	r3, r2
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	9302      	str	r3, [sp, #8]
 8014b26:	9101      	str	r1, [sp, #4]
 8014b28:	4b44      	ldr	r3, [pc, #272]	; (8014c3c <ssl_parse_certificate_request+0x2d0>)
 8014b2a:	9300      	str	r3, [sp, #0]
 8014b2c:	f640 238b 	movw	r3, #2699	; 0xa8b
 8014b30:	4a39      	ldr	r2, [pc, #228]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 8014b32:	2103      	movs	r1, #3
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f7f6 fe89 	bl	800b84c <mbedtls_debug_print_msg>
        for( i = 0; i < sig_alg_len; i += 2 )
 8014b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b3c:	3302      	adds	r3, #2
 8014b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b42:	693b      	ldr	r3, [r7, #16]
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d3e3      	bcc.n	8014b10 <ssl_parse_certificate_request+0x1a4>
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 8014b48:	693a      	ldr	r2, [r7, #16]
 8014b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b4c:	4413      	add	r3, r2
 8014b4e:	3302      	adds	r3, #2
 8014b50:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f7fe fe3b 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014b5c:	4602      	mov	r2, r0
 8014b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b60:	4413      	add	r3, r2
 8014b62:	3302      	adds	r3, #2
 8014b64:	429c      	cmp	r4, r3
 8014b66:	d20f      	bcs.n	8014b88 <ssl_parse_certificate_request+0x21c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8014b68:	4b2e      	ldr	r3, [pc, #184]	; (8014c24 <ssl_parse_certificate_request+0x2b8>)
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	f640 2394 	movw	r3, #2708	; 0xa94
 8014b70:	4a29      	ldr	r2, [pc, #164]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 8014b72:	2101      	movs	r1, #1
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f7f6 fe69 	bl	800b84c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014b7a:	2232      	movs	r2, #50	; 0x32
 8014b7c:	2102      	movs	r1, #2
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f002 ffda 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8014b84:	4b2c      	ldr	r3, [pc, #176]	; (8014c38 <ssl_parse_certificate_request+0x2cc>)
 8014b86:	e040      	b.n	8014c0a <ssl_parse_certificate_request+0x29e>
        }
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7fe fe22 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b92:	4413      	add	r3, r2
 8014b94:	3301      	adds	r3, #1
 8014b96:	697a      	ldr	r2, [r7, #20]
 8014b98:	4413      	add	r3, r2
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	021c      	lsls	r4, r3, #8
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f7fe fe17 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014ba4:	4602      	mov	r2, r0
 8014ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba8:	4413      	add	r3, r2
 8014baa:	3302      	adds	r3, #2
 8014bac:	697a      	ldr	r2, [r7, #20]
 8014bae:	4413      	add	r3, r2
 8014bb0:	781b      	ldrb	r3, [r3, #0]
 8014bb2:	4323      	orrs	r3, r4
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8014bb4:	623b      	str	r3, [r7, #32]

    n += dn_len;
 8014bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bb8:	6a3b      	ldr	r3, [r7, #32]
 8014bba:	4413      	add	r3, r2
 8014bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f7fe fe05 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014bc8:	4602      	mov	r2, r0
 8014bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bcc:	4413      	add	r3, r2
 8014bce:	3303      	adds	r3, #3
 8014bd0:	429c      	cmp	r4, r3
 8014bd2:	d00f      	beq.n	8014bf4 <ssl_parse_certificate_request+0x288>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8014bd4:	4b13      	ldr	r3, [pc, #76]	; (8014c24 <ssl_parse_certificate_request+0x2b8>)
 8014bd6:	9300      	str	r3, [sp, #0]
 8014bd8:	f640 23a3 	movw	r3, #2723	; 0xaa3
 8014bdc:	4a0e      	ldr	r2, [pc, #56]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 8014bde:	2101      	movs	r1, #1
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f7f6 fe33 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014be6:	2232      	movs	r2, #50	; 0x32
 8014be8:	2102      	movs	r1, #2
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f002 ffa4 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8014bf0:	4b11      	ldr	r3, [pc, #68]	; (8014c38 <ssl_parse_certificate_request+0x2cc>)
 8014bf2:	e00a      	b.n	8014c0a <ssl_parse_certificate_request+0x29e>
    }

exit:
 8014bf4:	bf00      	nop
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 8014bf6:	4b12      	ldr	r3, [pc, #72]	; (8014c40 <ssl_parse_certificate_request+0x2d4>)
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8014bfe:	4a06      	ldr	r2, [pc, #24]	; (8014c18 <ssl_parse_certificate_request+0x2ac>)
 8014c00:	2102      	movs	r1, #2
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f7f6 fe22 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8014c08:	2300      	movs	r3, #0
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3734      	adds	r7, #52	; 0x34
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd90      	pop	{r4, r7, pc}
 8014c12:	bf00      	nop
 8014c14:	080229d4 	.word	0x080229d4
 8014c18:	080222ac 	.word	0x080222ac
 8014c1c:	080229f4 	.word	0x080229f4
 8014c20:	080225b4 	.word	0x080225b4
 8014c24:	08022a18 	.word	0x08022a18
 8014c28:	ffff8900 	.word	0xffff8900
 8014c2c:	08022728 	.word	0x08022728
 8014c30:	0802272c 	.word	0x0802272c
 8014c34:	08022a38 	.word	0x08022a38
 8014c38:	ffff8580 	.word	0xffff8580
 8014c3c:	08022a54 	.word	0x08022a54
 8014c40:	08022a80 	.word	0x08022a80

08014c44 <ssl_parse_server_hello_done>:
#endif /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */

static int ssl_parse_server_hello_done( mbedtls_ssl_context *ssl )
{
 8014c44:	b590      	push	{r4, r7, lr}
 8014c46:	b087      	sub	sp, #28
 8014c48:	af02      	add	r7, sp, #8
 8014c4a:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 8014c4c:	4b2d      	ldr	r3, [pc, #180]	; (8014d04 <ssl_parse_server_hello_done+0xc0>)
 8014c4e:	9300      	str	r3, [sp, #0]
 8014c50:	f640 23b4 	movw	r3, #2740	; 0xab4
 8014c54:	4a2c      	ldr	r2, [pc, #176]	; (8014d08 <ssl_parse_server_hello_done+0xc4>)
 8014c56:	2102      	movs	r1, #2
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f7f6 fdf7 	bl	800b84c <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f002 fdce 	bl	8017800 <mbedtls_ssl_read_record>
 8014c64:	60f8      	str	r0, [r7, #12]
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d00c      	beq.n	8014c86 <ssl_parse_server_hello_done+0x42>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	9301      	str	r3, [sp, #4]
 8014c70:	4b26      	ldr	r3, [pc, #152]	; (8014d0c <ssl_parse_server_hello_done+0xc8>)
 8014c72:	9300      	str	r3, [sp, #0]
 8014c74:	f640 23b8 	movw	r3, #2744	; 0xab8
 8014c78:	4a23      	ldr	r2, [pc, #140]	; (8014d08 <ssl_parse_server_hello_done+0xc4>)
 8014c7a:	2101      	movs	r1, #1
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7f6 fe6b 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	e03a      	b.n	8014cfc <ssl_parse_server_hello_done+0xb8>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c8a:	2b16      	cmp	r3, #22
 8014c8c:	d00a      	beq.n	8014ca4 <ssl_parse_server_hello_done+0x60>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 8014c8e:	4b20      	ldr	r3, [pc, #128]	; (8014d10 <ssl_parse_server_hello_done+0xcc>)
 8014c90:	9300      	str	r3, [sp, #0]
 8014c92:	f640 23be 	movw	r3, #2750	; 0xabe
 8014c96:	4a1c      	ldr	r2, [pc, #112]	; (8014d08 <ssl_parse_server_hello_done+0xc4>)
 8014c98:	2101      	movs	r1, #1
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f7f6 fdd6 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014ca0:	4b1c      	ldr	r3, [pc, #112]	; (8014d14 <ssl_parse_server_hello_done+0xd0>)
 8014ca2:	e02b      	b.n	8014cfc <ssl_parse_server_hello_done+0xb8>
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f7fe fd92 	bl	80137d2 <mbedtls_ssl_hs_hdr_len>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	429c      	cmp	r4, r3
 8014cb2:	d104      	bne.n	8014cbe <ssl_parse_server_hello_done+0x7a>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014cb8:	781b      	ldrb	r3, [r3, #0]
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 8014cba:	2b0e      	cmp	r3, #14
 8014cbc:	d00f      	beq.n	8014cde <ssl_parse_server_hello_done+0x9a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 8014cbe:	4b14      	ldr	r3, [pc, #80]	; (8014d10 <ssl_parse_server_hello_done+0xcc>)
 8014cc0:	9300      	str	r3, [sp, #0]
 8014cc2:	f640 23c5 	movw	r3, #2757	; 0xac5
 8014cc6:	4a10      	ldr	r2, [pc, #64]	; (8014d08 <ssl_parse_server_hello_done+0xc4>)
 8014cc8:	2101      	movs	r1, #1
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f7f6 fdbe 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014cd0:	2232      	movs	r2, #50	; 0x32
 8014cd2:	2102      	movs	r1, #2
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f002 ff2f 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 8014cda:	4b0f      	ldr	r3, [pc, #60]	; (8014d18 <ssl_parse_server_hello_done+0xd4>)
 8014cdc:	e00e      	b.n	8014cfc <ssl_parse_server_hello_done+0xb8>
    }

    ssl->state++;
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	1c5a      	adds	r2, r3, #1
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 8014ce8:	4b0c      	ldr	r3, [pc, #48]	; (8014d1c <ssl_parse_server_hello_done+0xd8>)
 8014cea:	9300      	str	r3, [sp, #0]
 8014cec:	f640 23d2 	movw	r3, #2770	; 0xad2
 8014cf0:	4a05      	ldr	r2, [pc, #20]	; (8014d08 <ssl_parse_server_hello_done+0xc4>)
 8014cf2:	2102      	movs	r1, #2
 8014cf4:	6878      	ldr	r0, [r7, #4]
 8014cf6:	f7f6 fda9 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8014cfa:	2300      	movs	r3, #0
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3714      	adds	r7, #20
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd90      	pop	{r4, r7, pc}
 8014d04:	08022aa0 	.word	0x08022aa0
 8014d08:	080222ac 	.word	0x080222ac
 8014d0c:	080225b4 	.word	0x080225b4
 8014d10:	08022abc 	.word	0x08022abc
 8014d14:	ffff8900 	.word	0xffff8900
 8014d18:	ffff8480 	.word	0xffff8480
 8014d1c:	08022adc 	.word	0x08022adc

08014d20 <ssl_write_client_key_exchange>:

static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b088      	sub	sp, #32
 8014d24:	af02      	add	r7, sp, #8
 8014d26:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	617b      	str	r3, [r7, #20]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 8014d30:	4b2e      	ldr	r3, [pc, #184]	; (8014dec <ssl_write_client_key_exchange+0xcc>)
 8014d32:	9300      	str	r3, [sp, #0]
 8014d34:	f640 23de 	movw	r3, #2782	; 0xade
 8014d38:	4a2d      	ldr	r2, [pc, #180]	; (8014df0 <ssl_write_client_key_exchange+0xd0>)
 8014d3a:	2102      	movs	r1, #2
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7f6 fd85 	bl	800b84c <mbedtls_debug_print_msg>
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	7a9b      	ldrb	r3, [r3, #10]
 8014d46:	2b01      	cmp	r3, #1
 8014d48:	d10e      	bne.n	8014d68 <ssl_write_client_key_exchange+0x48>
    {
        i = 4;
 8014d4a:	2304      	movs	r3, #4
 8014d4c:	613b      	str	r3, [r7, #16]
        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )
 8014d4e:	f107 0208 	add.w	r2, r7, #8
 8014d52:	2300      	movs	r3, #0
 8014d54:	6939      	ldr	r1, [r7, #16]
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f7ff fc58 	bl	801460c <ssl_write_encrypted_pms>
 8014d5c:	60f8      	str	r0, [r7, #12]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d00c      	beq.n	8014d7e <ssl_write_client_key_exchange+0x5e>
            return( ret );
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	e03c      	b.n	8014de2 <ssl_write_client_key_exchange+0xc2>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */
    {
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8014d68:	4b22      	ldr	r3, [pc, #136]	; (8014df4 <ssl_write_client_key_exchange+0xd4>)
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8014d70:	4a1f      	ldr	r2, [pc, #124]	; (8014df0 <ssl_write_client_key_exchange+0xd0>)
 8014d72:	2101      	movs	r1, #1
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f7f6 fd69 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8014d7a:	4b1f      	ldr	r3, [pc, #124]	; (8014df8 <ssl_write_client_key_exchange+0xd8>)
 8014d7c:	e031      	b.n	8014de2 <ssl_write_client_key_exchange+0xc2>
    }

    ssl->out_msglen  = i + n;
 8014d7e:	68ba      	ldr	r2, [r7, #8]
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	441a      	add	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2216      	movs	r2, #22
 8014d8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d98:	2210      	movs	r2, #16
 8014d9a:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	1c5a      	adds	r2, r3, #1
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f002 fa1c 	bl	80171e4 <mbedtls_ssl_write_record>
 8014dac:	60f8      	str	r0, [r7, #12]
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d00c      	beq.n	8014dce <ssl_write_client_key_exchange+0xae>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	9301      	str	r3, [sp, #4]
 8014db8:	4b10      	ldr	r3, [pc, #64]	; (8014dfc <ssl_write_client_key_exchange+0xdc>)
 8014dba:	9300      	str	r3, [sp, #0]
 8014dbc:	f640 33cc 	movw	r3, #3020	; 0xbcc
 8014dc0:	4a0b      	ldr	r2, [pc, #44]	; (8014df0 <ssl_write_client_key_exchange+0xd0>)
 8014dc2:	2101      	movs	r1, #1
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f7f6 fdc7 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	e009      	b.n	8014de2 <ssl_write_client_key_exchange+0xc2>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 8014dce:	4b0c      	ldr	r3, [pc, #48]	; (8014e00 <ssl_write_client_key_exchange+0xe0>)
 8014dd0:	9300      	str	r3, [sp, #0]
 8014dd2:	f44f 633d 	mov.w	r3, #3024	; 0xbd0
 8014dd6:	4a06      	ldr	r2, [pc, #24]	; (8014df0 <ssl_write_client_key_exchange+0xd0>)
 8014dd8:	2102      	movs	r1, #2
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f7f6 fd36 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8014de0:	2300      	movs	r3, #0
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3718      	adds	r7, #24
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	08022af8 	.word	0x08022af8
 8014df0:	080222ac 	.word	0x080222ac
 8014df4:	080229a0 	.word	0x080229a0
 8014df8:	ffff9400 	.word	0xffff9400
 8014dfc:	08022544 	.word	0x08022544
 8014e00:	08022b18 	.word	0x08022b18

08014e04 <ssl_write_certificate_verify>:
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
}
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
 8014e04:	b590      	push	{r4, r7, lr}
 8014e06:	b09b      	sub	sp, #108	; 0x6c
 8014e08:	af04      	add	r7, sp, #16
 8014e0a:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 8014e0c:	4b9b      	ldr	r3, [pc, #620]	; (801507c <ssl_write_certificate_verify+0x278>)
 8014e0e:	653b      	str	r3, [r7, #80]	; 0x50
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t n = 0, offset = 0;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char hash[48];
    unsigned char *hash_start = hash;
 8014e20:	f107 030c 	add.w	r3, r7, #12
 8014e24:	647b      	str	r3, [r7, #68]	; 0x44
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
 8014e26:	2300      	movs	r3, #0
 8014e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 8014e2c:	4b94      	ldr	r3, [pc, #592]	; (8015080 <ssl_write_certificate_verify+0x27c>)
 8014e2e:	9300      	str	r3, [sp, #0]
 8014e30:	f640 4303 	movw	r3, #3075	; 0xc03
 8014e34:	4a93      	ldr	r2, [pc, #588]	; (8015084 <ssl_write_certificate_verify+0x280>)
 8014e36:	2102      	movs	r1, #2
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7f6 fd07 	bl	800b84c <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f000 fc26 	bl	8015690 <mbedtls_ssl_derive_keys>
 8014e44:	6538      	str	r0, [r7, #80]	; 0x50
 8014e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d00c      	beq.n	8014e66 <ssl_write_certificate_verify+0x62>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 8014e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e4e:	9301      	str	r3, [sp, #4]
 8014e50:	4b8d      	ldr	r3, [pc, #564]	; (8015088 <ssl_write_certificate_verify+0x284>)
 8014e52:	9300      	str	r3, [sp, #0]
 8014e54:	f640 4307 	movw	r3, #3079	; 0xc07
 8014e58:	4a8a      	ldr	r2, [pc, #552]	; (8015084 <ssl_write_certificate_verify+0x280>)
 8014e5a:	2101      	movs	r1, #1
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f7f6 fd7b 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8014e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e64:	e106      	b.n	8015074 <ssl_write_certificate_verify+0x270>
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8014e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e68:	7a9b      	ldrb	r3, [r3, #10]
 8014e6a:	2b05      	cmp	r3, #5
 8014e6c:	d00f      	beq.n	8014e8e <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
 8014e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e70:	7a9b      	ldrb	r3, [r3, #10]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8014e72:	2b07      	cmp	r3, #7
 8014e74:	d00b      	beq.n	8014e8e <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8014e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e78:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
 8014e7a:	2b08      	cmp	r3, #8
 8014e7c:	d007      	beq.n	8014e8e <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8014e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e80:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8014e82:	2b06      	cmp	r3, #6
 8014e84:	d003      	beq.n	8014e8e <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
 8014e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e88:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8014e8a:	2b0b      	cmp	r3, #11
 8014e8c:	d10f      	bne.n	8014eae <ssl_write_certificate_verify+0xaa>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 8014e8e:	4b7f      	ldr	r3, [pc, #508]	; (801508c <ssl_write_certificate_verify+0x288>)
 8014e90:	9300      	str	r3, [sp, #0]
 8014e92:	f640 4311 	movw	r3, #3089	; 0xc11
 8014e96:	4a7b      	ldr	r2, [pc, #492]	; (8015084 <ssl_write_certificate_verify+0x280>)
 8014e98:	2102      	movs	r1, #2
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f7f6 fcd6 	bl	800b84c <mbedtls_debug_print_msg>
        ssl->state++;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	1c5a      	adds	r2, r3, #1
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	605a      	str	r2, [r3, #4]
        return( 0 );
 8014eaa:	2300      	movs	r3, #0
 8014eac:	e0e2      	b.n	8015074 <ssl_write_certificate_verify+0x270>
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d005      	beq.n	8014ec4 <ssl_write_certificate_verify+0xc0>
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7fe fc67 	bl	801378c <mbedtls_ssl_own_cert>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d10f      	bne.n	8014ee4 <ssl_write_certificate_verify+0xe0>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 8014ec4:	4b71      	ldr	r3, [pc, #452]	; (801508c <ssl_write_certificate_verify+0x288>)
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	f640 4318 	movw	r3, #3096	; 0xc18
 8014ecc:	4a6d      	ldr	r2, [pc, #436]	; (8015084 <ssl_write_certificate_verify+0x280>)
 8014ece:	2102      	movs	r1, #2
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f7f6 fcbb 	bl	800b84c <mbedtls_debug_print_msg>
        ssl->state++;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	1c5a      	adds	r2, r3, #1
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	605a      	str	r2, [r3, #4]
        return( 0 );
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	e0c7      	b.n	8015074 <ssl_write_certificate_verify+0x270>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 8014ee4:	6878      	ldr	r0, [r7, #4]
 8014ee6:	f7fe fc2e 	bl	8013746 <mbedtls_ssl_own_key>
 8014eea:	4603      	mov	r3, r0
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d10a      	bne.n	8014f06 <ssl_write_certificate_verify+0x102>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 8014ef0:	4b67      	ldr	r3, [pc, #412]	; (8015090 <ssl_write_certificate_verify+0x28c>)
 8014ef2:	9300      	str	r3, [sp, #0]
 8014ef4:	f640 431f 	movw	r3, #3103	; 0xc1f
 8014ef8:	4a62      	ldr	r2, [pc, #392]	; (8015084 <ssl_write_certificate_verify+0x280>)
 8014efa:	2101      	movs	r1, #1
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f7f6 fca5 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 8014f02:	4b64      	ldr	r3, [pc, #400]	; (8015094 <ssl_write_certificate_verify+0x290>)
 8014f04:	e0b6      	b.n	8015074 <ssl_write_certificate_verify+0x270>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f0c:	f107 020c 	add.w	r2, r7, #12
 8014f10:	4611      	mov	r1, r2
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	68db      	ldr	r3, [r3, #12]
 8014f1a:	2b03      	cmp	r3, #3
 8014f1c:	d14c      	bne.n	8014fb8 <ssl_write_certificate_verify+0x1b4>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	7a5b      	ldrb	r3, [r3, #9]
 8014f26:	2b07      	cmp	r3, #7
 8014f28:	d109      	bne.n	8014f3e <ssl_write_certificate_verify+0x13a>
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
 8014f2a:	2307      	movs	r3, #7
 8014f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014f36:	3304      	adds	r3, #4
 8014f38:	2205      	movs	r2, #5
 8014f3a:	701a      	strb	r2, [r3, #0]
 8014f3c:	e008      	b.n	8014f50 <ssl_write_certificate_verify+0x14c>
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 8014f3e:	2306      	movs	r3, #6
 8014f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014f4a:	3304      	adds	r3, #4
 8014f4c:	2204      	movs	r2, #4
 8014f4e:	701a      	strb	r2, [r3, #0]
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	f7fe fbf8 	bl	8013746 <mbedtls_ssl_own_key>
 8014f56:	4602      	mov	r2, r0
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014f5e:	1d5c      	adds	r4, r3, #5
 8014f60:	4610      	mov	r0, r2
 8014f62:	f004 fcfa 	bl	801995a <mbedtls_ssl_sig_from_pk>
 8014f66:	4603      	mov	r3, r0
 8014f68:	7023      	strb	r3, [r4, #0]

        /* Info from md_alg will be used instead */
        hashlen = 0;
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	643b      	str	r3, [r7, #64]	; 0x40
        offset = 2;
 8014f6e:	2302      	movs	r3, #2
 8014f70:	64bb      	str	r3, [r7, #72]	; 0x48
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f7fe fbe7 	bl	8013746 <mbedtls_ssl_own_key>
 8014f78:	4604      	mov	r4, r0
                         ssl->out_msg + 6 + offset, &n,
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f82:	3306      	adds	r3, #6
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8014f84:	4413      	add	r3, r2
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8014f86:	687a      	ldr	r2, [r7, #4]
 8014f88:	6812      	ldr	r2, [r2, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8014f8a:	6992      	ldr	r2, [r2, #24]
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8014f8c:	6879      	ldr	r1, [r7, #4]
 8014f8e:	6809      	ldr	r1, [r1, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8014f90:	69c9      	ldr	r1, [r1, #28]
 8014f92:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 8014f96:	9103      	str	r1, [sp, #12]
 8014f98:	9202      	str	r2, [sp, #8]
 8014f9a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014f9e:	9201      	str	r2, [sp, #4]
 8014fa0:	9300      	str	r3, [sp, #0]
 8014fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014fa6:	4601      	mov	r1, r0
 8014fa8:	4620      	mov	r0, r4
 8014faa:	f7f9 ff81 	bl	800eeb0 <mbedtls_pk_sign>
 8014fae:	6538      	str	r0, [r7, #80]	; 0x50
 8014fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d018      	beq.n	8014fe8 <ssl_write_certificate_verify+0x1e4>
 8014fb6:	e00a      	b.n	8014fce <ssl_write_certificate_verify+0x1ca>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8014fb8:	4b37      	ldr	r3, [pc, #220]	; (8015098 <ssl_write_certificate_verify+0x294>)
 8014fba:	9300      	str	r3, [sp, #0]
 8014fbc:	f640 436e 	movw	r3, #3182	; 0xc6e
 8014fc0:	4a30      	ldr	r2, [pc, #192]	; (8015084 <ssl_write_certificate_verify+0x280>)
 8014fc2:	2101      	movs	r1, #1
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f7f6 fc41 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8014fca:	4b34      	ldr	r3, [pc, #208]	; (801509c <ssl_write_certificate_verify+0x298>)
 8014fcc:	e052      	b.n	8015074 <ssl_write_certificate_verify+0x270>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 8014fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fd0:	9301      	str	r3, [sp, #4]
 8014fd2:	4b33      	ldr	r3, [pc, #204]	; (80150a0 <ssl_write_certificate_verify+0x29c>)
 8014fd4:	9300      	str	r3, [sp, #0]
 8014fd6:	f640 4376 	movw	r3, #3190	; 0xc76
 8014fda:	4a2a      	ldr	r2, [pc, #168]	; (8015084 <ssl_write_certificate_verify+0x280>)
 8014fdc:	2101      	movs	r1, #1
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f7f6 fcba 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8014fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fe6:	e045      	b.n	8015074 <ssl_write_certificate_verify+0x270>
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 8014fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fea:	0a19      	lsrs	r1, r3, #8
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ff4:	3304      	adds	r3, #4
 8014ff6:	4413      	add	r3, r2
 8014ff8:	b2ca      	uxtb	r2, r1
 8014ffa:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 8014ffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8015004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015006:	3305      	adds	r3, #5
 8015008:	4413      	add	r3, r2
 801500a:	b2ca      	uxtb	r2, r1
 801500c:	701a      	strb	r2, [r3, #0]

    ssl->out_msglen  = 6 + n + offset;
 801500e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015012:	4413      	add	r3, r2
 8015014:	1d9a      	adds	r2, r3, #6
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2216      	movs	r2, #22
 8015020:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801502a:	220f      	movs	r2, #15
 801502c:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	685b      	ldr	r3, [r3, #4]
 8015032:	1c5a      	adds	r2, r3, #1
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8015038:	6878      	ldr	r0, [r7, #4]
 801503a:	f002 f8d3 	bl	80171e4 <mbedtls_ssl_write_record>
 801503e:	6538      	str	r0, [r7, #80]	; 0x50
 8015040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015042:	2b00      	cmp	r3, #0
 8015044:	d00c      	beq.n	8015060 <ssl_write_certificate_verify+0x25c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8015046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015048:	9301      	str	r3, [sp, #4]
 801504a:	4b16      	ldr	r3, [pc, #88]	; (80150a4 <ssl_write_certificate_verify+0x2a0>)
 801504c:	9300      	str	r3, [sp, #0]
 801504e:	f640 4385 	movw	r3, #3205	; 0xc85
 8015052:	4a0c      	ldr	r2, [pc, #48]	; (8015084 <ssl_write_certificate_verify+0x280>)
 8015054:	2101      	movs	r1, #1
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f7f6 fc7e 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 801505c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801505e:	e009      	b.n	8015074 <ssl_write_certificate_verify+0x270>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 8015060:	4b11      	ldr	r3, [pc, #68]	; (80150a8 <ssl_write_certificate_verify+0x2a4>)
 8015062:	9300      	str	r3, [sp, #0]
 8015064:	f640 4389 	movw	r3, #3209	; 0xc89
 8015068:	4a06      	ldr	r2, [pc, #24]	; (8015084 <ssl_write_certificate_verify+0x280>)
 801506a:	2102      	movs	r1, #2
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f7f6 fbed 	bl	800b84c <mbedtls_debug_print_msg>

    return( ret );
 8015072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8015074:	4618      	mov	r0, r3
 8015076:	375c      	adds	r7, #92	; 0x5c
 8015078:	46bd      	mov	sp, r7
 801507a:	bd90      	pop	{r4, r7, pc}
 801507c:	ffff8f80 	.word	0xffff8f80
 8015080:	08022b38 	.word	0x08022b38
 8015084:	080222ac 	.word	0x080222ac
 8015088:	08022710 	.word	0x08022710
 801508c:	08022b54 	.word	0x08022b54
 8015090:	08022b78 	.word	0x08022b78
 8015094:	ffff8a00 	.word	0xffff8a00
 8015098:	080229a0 	.word	0x080229a0
 801509c:	ffff9400 	.word	0xffff9400
 80150a0:	08022b9c 	.word	0x08022b9c
 80150a4:	08022544 	.word	0x08022544
 80150a8:	08022bac 	.word	0x08022bac

080150ac <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b086      	sub	sp, #24
 80150b0:	af02      	add	r7, sp, #8
 80150b2:	6078      	str	r0, [r7, #4]
    int ret = 0;
 80150b4:	2300      	movs	r3, #0
 80150b6:	60fb      	str	r3, [r7, #12]

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	2b10      	cmp	r3, #16
 80150be:	d003      	beq.n	80150c8 <mbedtls_ssl_handshake_client_step+0x1c>
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d101      	bne.n	80150cc <mbedtls_ssl_handshake_client_step+0x20>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80150c8:	4b56      	ldr	r3, [pc, #344]	; (8015224 <mbedtls_ssl_handshake_client_step+0x178>)
 80150ca:	e0a6      	b.n	801521a <mbedtls_ssl_handshake_client_step+0x16e>
    printf("handshake: %d \r\n", ssl->handshake);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150d0:	4619      	mov	r1, r3
 80150d2:	4855      	ldr	r0, [pc, #340]	; (8015228 <mbedtls_ssl_handshake_client_step+0x17c>)
 80150d4:	f009 f8e0 	bl	801e298 <iprintf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	9301      	str	r3, [sp, #4]
 80150de:	4b53      	ldr	r3, [pc, #332]	; (801522c <mbedtls_ssl_handshake_client_step+0x180>)
 80150e0:	9300      	str	r3, [sp, #0]
 80150e2:	f640 5308 	movw	r3, #3336	; 0xd08
 80150e6:	4a52      	ldr	r2, [pc, #328]	; (8015230 <mbedtls_ssl_handshake_client_step+0x184>)
 80150e8:	2102      	movs	r1, #2
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f7f6 fbae 	bl	800b84c <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f001 ffaf 	bl	8017054 <mbedtls_ssl_flush_output>
 80150f6:	60f8      	str	r0, [r7, #12]
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d001      	beq.n	8015102 <mbedtls_ssl_handshake_client_step+0x56>
        return( ret );
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	e08b      	b.n	801521a <mbedtls_ssl_handshake_client_step+0x16e>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
    }
#endif

    switch( ssl->state )
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	685b      	ldr	r3, [r3, #4]
 8015106:	2b0f      	cmp	r3, #15
 8015108:	d878      	bhi.n	80151fc <mbedtls_ssl_handshake_client_step+0x150>
 801510a:	a201      	add	r2, pc, #4	; (adr r2, 8015110 <mbedtls_ssl_handshake_client_step+0x64>)
 801510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015110:	08015151 	.word	0x08015151
 8015114:	08015159 	.word	0x08015159
 8015118:	08015163 	.word	0x08015163
 801511c:	0801516d 	.word	0x0801516d
 8015120:	08015177 	.word	0x08015177
 8015124:	08015181 	.word	0x08015181
 8015128:	0801518b 	.word	0x0801518b
 801512c:	08015195 	.word	0x08015195
 8015130:	0801519f 	.word	0x0801519f
 8015134:	080151a9 	.word	0x080151a9
 8015138:	080151b3 	.word	0x080151b3
 801513c:	080151bd 	.word	0x080151bd
 8015140:	080151c7 	.word	0x080151c7
 8015144:	080151d1 	.word	0x080151d1
 8015148:	080151db 	.word	0x080151db
 801514c:	080151f5 	.word	0x080151f5
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2201      	movs	r2, #1
 8015154:	605a      	str	r2, [r3, #4]
            break;
 8015156:	e05f      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       /*
        *  ==>   ClientHello
        */
       case MBEDTLS_SSL_CLIENT_HELLO:
           ret = ssl_write_client_hello( ssl );
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f7fe fc13 	bl	8013984 <ssl_write_client_hello>
 801515e:	60f8      	str	r0, [r7, #12]
           break;
 8015160:	e05a      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>
        *      ( ServerKeyExchange  )
        *      ( CertificateRequest )
        *        ServerHelloDone
        */
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f7fe fe88 	bl	8013e78 <ssl_parse_server_hello>
 8015168:	60f8      	str	r0, [r7, #12]
           break;
 801516a:	e055      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f002 fe65 	bl	8017e3c <mbedtls_ssl_parse_certificate>
 8015172:	60f8      	str	r0, [r7, #12]
           break;
 8015174:	e050      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_KEY_EXCHANGE:
           ret = ssl_parse_server_key_exchange( ssl );
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f7ff fb34 	bl	80147e4 <ssl_parse_server_key_exchange>
 801517c:	60f8      	str	r0, [r7, #12]
           break;
 801517e:	e04b      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CERTIFICATE_REQUEST:
           ret = ssl_parse_certificate_request( ssl );
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f7ff fbf3 	bl	801496c <ssl_parse_certificate_request>
 8015186:	60f8      	str	r0, [r7, #12]
           break;
 8015188:	e046      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_HELLO_DONE:
           ret = ssl_parse_server_hello_done( ssl );
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f7ff fd5a 	bl	8014c44 <ssl_parse_server_hello_done>
 8015190:	60f8      	str	r0, [r7, #12]
           break;
 8015192:	e041      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f002 fd37 	bl	8017c08 <mbedtls_ssl_write_certificate>
 801519a:	60f8      	str	r0, [r7, #12]
           break;
 801519c:	e03c      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:
           ret = ssl_write_client_key_exchange( ssl );
 801519e:	6878      	ldr	r0, [r7, #4]
 80151a0:	f7ff fdbe 	bl	8014d20 <ssl_write_client_key_exchange>
 80151a4:	60f8      	str	r0, [r7, #12]
           break;
 80151a6:	e037      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
 80151a8:	6878      	ldr	r0, [r7, #4]
 80151aa:	f7ff fe2b 	bl	8014e04 <ssl_write_certificate_verify>
 80151ae:	60f8      	str	r0, [r7, #12]
           break;
 80151b0:	e032      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f003 f914 	bl	80183e0 <mbedtls_ssl_write_change_cipher_spec>
 80151b8:	60f8      	str	r0, [r7, #12]
           break;
 80151ba:	e02d      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f003 fb7d 	bl	80188bc <mbedtls_ssl_write_finished>
 80151c2:	60f8      	str	r0, [r7, #12]
           break;
 80151c4:	e028      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 80151c6:	6878      	ldr	r0, [r7, #4]
 80151c8:	f003 f954 	bl	8018474 <mbedtls_ssl_parse_change_cipher_spec>
 80151cc:	60f8      	str	r0, [r7, #12]
           break;
 80151ce:	e023      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f003 fc1d 	bl	8018a10 <mbedtls_ssl_parse_finished>
 80151d6:	60f8      	str	r0, [r7, #12]
           break;
 80151d8:	e01e      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 80151da:	4b16      	ldr	r3, [pc, #88]	; (8015234 <mbedtls_ssl_handshake_client_step+0x188>)
 80151dc:	9300      	str	r3, [sp, #0]
 80151de:	f640 5377 	movw	r3, #3447	; 0xd77
 80151e2:	4a13      	ldr	r2, [pc, #76]	; (8015230 <mbedtls_ssl_handshake_client_step+0x184>)
 80151e4:	2102      	movs	r1, #2
 80151e6:	6878      	ldr	r0, [r7, #4]
 80151e8:	f7f6 fb30 	bl	800b84c <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	220f      	movs	r2, #15
 80151f0:	605a      	str	r2, [r3, #4]
           break;
 80151f2:	e011      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f003 faf9 	bl	80187ec <mbedtls_ssl_handshake_wrapup>
           break;
 80151fa:	e00d      	b.n	8015218 <mbedtls_ssl_handshake_client_step+0x16c>

       default:
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	9301      	str	r3, [sp, #4]
 8015202:	4b0d      	ldr	r3, [pc, #52]	; (8015238 <mbedtls_ssl_handshake_client_step+0x18c>)
 8015204:	9300      	str	r3, [sp, #0]
 8015206:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 801520a:	4a09      	ldr	r2, [pc, #36]	; (8015230 <mbedtls_ssl_handshake_client_step+0x184>)
 801520c:	2101      	movs	r1, #1
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f7f6 fb1c 	bl	800b84c <mbedtls_debug_print_msg>
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015214:	4b03      	ldr	r3, [pc, #12]	; (8015224 <mbedtls_ssl_handshake_client_step+0x178>)
 8015216:	e000      	b.n	801521a <mbedtls_ssl_handshake_client_step+0x16e>
   }

    return( ret );
 8015218:	68fb      	ldr	r3, [r7, #12]
}
 801521a:	4618      	mov	r0, r3
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	ffff8f00 	.word	0xffff8f00
 8015228:	08022bc8 	.word	0x08022bc8
 801522c:	08022bdc 	.word	0x08022bdc
 8015230:	080222ac 	.word	0x080222ac
 8015234:	08022bf0 	.word	0x08022bf0
 8015238:	08022c00 	.word	0x08022c00

0801523c <mbedtls_cipher_get_cipher_mode>:
{
 801523c:	b480      	push	{r7}
 801523e:	b083      	sub	sp, #12
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d003      	beq.n	8015252 <mbedtls_cipher_get_cipher_mode+0x16>
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d101      	bne.n	8015256 <mbedtls_cipher_get_cipher_mode+0x1a>
        return MBEDTLS_MODE_NONE;
 8015252:	2300      	movs	r3, #0
 8015254:	e002      	b.n	801525c <mbedtls_cipher_get_cipher_mode+0x20>
    return ctx->cipher_info->mode;
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	785b      	ldrb	r3, [r3, #1]
}
 801525c:	4618      	mov	r0, r3
 801525e:	370c      	adds	r7, #12
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr

08015268 <mbedtls_ssl_sig_hash_set_init>:
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b082      	sub	sp, #8
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_sig_hash_set_const_hash( set, MBEDTLS_MD_NONE );
 8015270:	2100      	movs	r1, #0
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f004 fb83 	bl	801997e <mbedtls_ssl_sig_hash_set_const_hash>
}
 8015278:	bf00      	nop
 801527a:	3708      	adds	r7, #8
 801527c:	46bd      	mov	sp, r7
 801527e:	bd80      	pop	{r7, pc}

08015280 <mbedtls_ssl_own_cert>:
{
 8015280:	b480      	push	{r7}
 8015282:	b085      	sub	sp, #20
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801528c:	2b00      	cmp	r3, #0
 801528e:	d009      	beq.n	80152a4 <mbedtls_ssl_own_cert+0x24>
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d004      	beq.n	80152a4 <mbedtls_ssl_own_cert+0x24>
        key_cert = ssl->handshake->key_cert;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801529e:	685b      	ldr	r3, [r3, #4]
 80152a0:	60fb      	str	r3, [r7, #12]
 80152a2:	e003      	b.n	80152ac <mbedtls_ssl_own_cert+0x2c>
        key_cert = ssl->conf->key_cert;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152aa:	60fb      	str	r3, [r7, #12]
    return( key_cert == NULL ? NULL : key_cert->cert );
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d002      	beq.n	80152b8 <mbedtls_ssl_own_cert+0x38>
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	e000      	b.n	80152ba <mbedtls_ssl_own_cert+0x3a>
 80152b8:	2300      	movs	r3, #0
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3714      	adds	r7, #20
 80152be:	46bd      	mov	sp, r7
 80152c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c4:	4770      	bx	lr

080152c6 <mbedtls_ssl_hdr_len>:
{
 80152c6:	b480      	push	{r7}
 80152c8:	b083      	sub	sp, #12
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	6078      	str	r0, [r7, #4]
    return( 5 );
 80152ce:	2305      	movs	r3, #5
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	370c      	adds	r7, #12
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr

080152dc <mbedtls_ssl_hs_hdr_len>:
{
 80152dc:	b480      	push	{r7}
 80152de:	b083      	sub	sp, #12
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
    return( 4 );
 80152e4:	2304      	movs	r3, #4
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	370c      	adds	r7, #12
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr

080152f2 <mbedtls_ssl_safer_memcmp>:
void mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl );
#endif

/* constant-time buffer comparison */
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
 80152f2:	b480      	push	{r7}
 80152f4:	b089      	sub	sp, #36	; 0x24
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	60f8      	str	r0, [r7, #12]
 80152fa:	60b9      	str	r1, [r7, #8]
 80152fc:	607a      	str	r2, [r7, #4]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	61bb      	str	r3, [r7, #24]
    volatile const unsigned char *B = (volatile const unsigned char *) b;
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	617b      	str	r3, [r7, #20]
    volatile unsigned char diff = 0;
 8015306:	2300      	movs	r3, #0
 8015308:	74fb      	strb	r3, [r7, #19]

    for( i = 0; i < n; i++ )
 801530a:	2300      	movs	r3, #0
 801530c:	61fb      	str	r3, [r7, #28]
 801530e:	e016      	b.n	801533e <mbedtls_ssl_safer_memcmp+0x4c>
        diff |= A[i] ^ B[i];
 8015310:	69ba      	ldr	r2, [r7, #24]
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	4413      	add	r3, r2
 8015316:	781b      	ldrb	r3, [r3, #0]
 8015318:	b2da      	uxtb	r2, r3
 801531a:	6979      	ldr	r1, [r7, #20]
 801531c:	69fb      	ldr	r3, [r7, #28]
 801531e:	440b      	add	r3, r1
 8015320:	781b      	ldrb	r3, [r3, #0]
 8015322:	b2db      	uxtb	r3, r3
 8015324:	4053      	eors	r3, r2
 8015326:	b2db      	uxtb	r3, r3
 8015328:	b25a      	sxtb	r2, r3
 801532a:	7cfb      	ldrb	r3, [r7, #19]
 801532c:	b2db      	uxtb	r3, r3
 801532e:	b25b      	sxtb	r3, r3
 8015330:	4313      	orrs	r3, r2
 8015332:	b25b      	sxtb	r3, r3
 8015334:	b2db      	uxtb	r3, r3
 8015336:	74fb      	strb	r3, [r7, #19]
    for( i = 0; i < n; i++ )
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	3301      	adds	r3, #1
 801533c:	61fb      	str	r3, [r7, #28]
 801533e:	69fa      	ldr	r2, [r7, #28]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	429a      	cmp	r2, r3
 8015344:	d3e4      	bcc.n	8015310 <mbedtls_ssl_safer_memcmp+0x1e>

    return( diff );
 8015346:	7cfb      	ldrb	r3, [r7, #19]
 8015348:	b2db      	uxtb	r3, r3
}
 801534a:	4618      	mov	r0, r3
 801534c:	3724      	adds	r7, #36	; 0x24
 801534e:	46bd      	mov	sp, r7
 8015350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015354:	4770      	bx	lr

08015356 <mbedtls_zeroize>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8015356:	b480      	push	{r7}
 8015358:	b085      	sub	sp, #20
 801535a:	af00      	add	r7, sp, #0
 801535c:	6078      	str	r0, [r7, #4]
 801535e:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	60fb      	str	r3, [r7, #12]
 8015364:	e004      	b.n	8015370 <mbedtls_zeroize+0x1a>
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	1c5a      	adds	r2, r3, #1
 801536a:	60fa      	str	r2, [r7, #12]
 801536c:	2200      	movs	r2, #0
 801536e:	701a      	strb	r2, [r3, #0]
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	1e5a      	subs	r2, r3, #1
 8015374:	603a      	str	r2, [r7, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d1f5      	bne.n	8015366 <mbedtls_zeroize+0x10>
}
 801537a:	bf00      	nop
 801537c:	bf00      	nop
 801537e:	3714      	adds	r7, #20
 8015380:	46bd      	mov	sp, r7
 8015382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015386:	4770      	bx	lr

08015388 <ssl_ep_len>:

/* Length of the "epoch" field in the record header */
static inline size_t ssl_ep_len( const mbedtls_ssl_context *ssl )
{
 8015388:	b480      	push	{r7}
 801538a:	b083      	sub	sp, #12
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        return( 2 );
#else
    ((void) ssl);
#endif
    return( 0 );
 8015390:	2300      	movs	r3, #0
}
 8015392:	4618      	mov	r0, r3
 8015394:	370c      	adds	r7, #12
 8015396:	46bd      	mov	sp, r7
 8015398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539c:	4770      	bx	lr
	...

080153a0 <ssl_set_timer>:
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af02      	add	r7, sp, #8
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
    if( ssl->f_set_timer == NULL )
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d012      	beq.n	80153d8 <ssl_set_timer+0x38>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 80153b2:	683b      	ldr	r3, [r7, #0]
 80153b4:	9301      	str	r3, [sp, #4]
 80153b6:	4b0a      	ldr	r3, [pc, #40]	; (80153e0 <ssl_set_timer+0x40>)
 80153b8:	9300      	str	r3, [sp, #0]
 80153ba:	2352      	movs	r3, #82	; 0x52
 80153bc:	4a09      	ldr	r2, [pc, #36]	; (80153e4 <ssl_set_timer+0x44>)
 80153be:	2103      	movs	r1, #3
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f7f6 fa43 	bl	800b84c <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153ca:	687a      	ldr	r2, [r7, #4]
 80153cc:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80153ce:	683a      	ldr	r2, [r7, #0]
 80153d0:	0891      	lsrs	r1, r2, #2
 80153d2:	683a      	ldr	r2, [r7, #0]
 80153d4:	4798      	blx	r3
 80153d6:	e000      	b.n	80153da <ssl_set_timer+0x3a>
        return;
 80153d8:	bf00      	nop
}
 80153da:	3708      	adds	r7, #8
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	08022c40 	.word	0x08022c40
 80153e4:	08022c14 	.word	0x08022c14

080153e8 <ssl_check_timer>:

/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b084      	sub	sp, #16
 80153ec:	af02      	add	r7, sp, #8
 80153ee:	6078      	str	r0, [r7, #4]
    if( ssl->f_get_timer == NULL )
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d101      	bne.n	80153fc <ssl_check_timer+0x14>
        return( 0 );
 80153f8:	2300      	movs	r3, #0
 80153fa:	e014      	b.n	8015426 <ssl_check_timer+0x3e>

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015400:	687a      	ldr	r2, [r7, #4]
 8015402:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8015404:	4610      	mov	r0, r2
 8015406:	4798      	blx	r3
 8015408:	4603      	mov	r3, r0
 801540a:	2b02      	cmp	r3, #2
 801540c:	d10a      	bne.n	8015424 <ssl_check_timer+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801540e:	4b08      	ldr	r3, [pc, #32]	; (8015430 <ssl_check_timer+0x48>)
 8015410:	9300      	str	r3, [sp, #0]
 8015412:	2360      	movs	r3, #96	; 0x60
 8015414:	4a07      	ldr	r2, [pc, #28]	; (8015434 <ssl_check_timer+0x4c>)
 8015416:	2103      	movs	r1, #3
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f7f6 fa17 	bl	800b84c <mbedtls_debug_print_msg>
        return( -1 );
 801541e:	f04f 33ff 	mov.w	r3, #4294967295
 8015422:	e000      	b.n	8015426 <ssl_check_timer+0x3e>
    }

    return( 0 );
 8015424:	2300      	movs	r3, #0
}
 8015426:	4618      	mov	r0, r3
 8015428:	3708      	adds	r7, #8
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}
 801542e:	bf00      	nop
 8015430:	08022c54 	.word	0x08022c54
 8015434:	08022c14 	.word	0x08022c14

08015438 <tls_prf_generic>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b0b6      	sub	sp, #216	; 0xd8
 801543c:	af00      	add	r7, sp, #0
 801543e:	60b9      	str	r1, [r7, #8]
 8015440:	607a      	str	r2, [r7, #4]
 8015442:	603b      	str	r3, [r7, #0]
 8015444:	4603      	mov	r3, r0
 8015446:	73fb      	strb	r3, [r7, #15]
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 8015448:	f107 0310 	add.w	r3, r7, #16
 801544c:	4618      	mov	r0, r3
 801544e:	f7f8 fe53 	bl	800e0f8 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 8015452:	7bfb      	ldrb	r3, [r7, #15]
 8015454:	4618      	mov	r0, r3
 8015456:	f7f8 fe35 	bl	800e0c4 <mbedtls_md_info_from_type>
 801545a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 801545e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015462:	2b00      	cmp	r3, #0
 8015464:	d101      	bne.n	801546a <tls_prf_generic+0x32>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015466:	4b7b      	ldr	r3, [pc, #492]	; (8015654 <tls_prf_generic+0x21c>)
 8015468:	e0ef      	b.n	801564a <tls_prf_generic+0x212>

    md_len = mbedtls_md_get_size( md_info );
 801546a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801546e:	f7f9 f867 	bl	800e540 <mbedtls_md_get_size>
 8015472:	4603      	mov	r3, r0
 8015474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 8015478:	6838      	ldr	r0, [r7, #0]
 801547a:	f7ea fea9 	bl	80001d0 <strlen>
 801547e:	4602      	mov	r2, r0
 8015480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015484:	441a      	add	r2, r3
 8015486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801548a:	4413      	add	r3, r2
 801548c:	2b80      	cmp	r3, #128	; 0x80
 801548e:	d901      	bls.n	8015494 <tls_prf_generic+0x5c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015490:	4b71      	ldr	r3, [pc, #452]	; (8015658 <tls_prf_generic+0x220>)
 8015492:	e0da      	b.n	801564a <tls_prf_generic+0x212>

    nb = strlen( label );
 8015494:	6838      	ldr	r0, [r7, #0]
 8015496:	f7ea fe9b 	bl	80001d0 <strlen>
 801549a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    memcpy( tmp + md_len, label, nb );
 801549e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80154a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80154a6:	4413      	add	r3, r2
 80154a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80154ac:	6839      	ldr	r1, [r7, #0]
 80154ae:	4618      	mov	r0, r3
 80154b0:	f008 fdcc 	bl	801e04c <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 80154b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80154b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80154bc:	4413      	add	r3, r2
 80154be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80154c2:	4413      	add	r3, r2
 80154c4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80154c8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80154cc:	4618      	mov	r0, r3
 80154ce:	f008 fdbd 	bl	801e04c <memcpy>
    nb += rlen;
 80154d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80154d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80154da:	4413      	add	r3, r2
 80154dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80154e0:	f107 0310 	add.w	r3, r7, #16
 80154e4:	2201      	movs	r2, #1
 80154e6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7f8 fe44 	bl	800e178 <mbedtls_md_setup>
 80154f0:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80154f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d002      	beq.n	8015502 <tls_prf_generic+0xca>
        return( ret );
 80154fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015500:	e0a3      	b.n	801564a <tls_prf_generic+0x212>

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8015502:	f107 0310 	add.w	r3, r7, #16
 8015506:	687a      	ldr	r2, [r7, #4]
 8015508:	68b9      	ldr	r1, [r7, #8]
 801550a:	4618      	mov	r0, r3
 801550c:	f7f8 fe8e 	bl	800e22c <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 8015510:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015514:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015518:	18d1      	adds	r1, r2, r3
 801551a:	f107 0310 	add.w	r3, r7, #16
 801551e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015522:	4618      	mov	r0, r3
 8015524:	f7f8 ff34 	bl	800e390 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 8015528:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801552c:	f107 0310 	add.w	r3, r7, #16
 8015530:	4611      	mov	r1, r2
 8015532:	4618      	mov	r0, r3
 8015534:	f7f8 ff4e 	bl	800e3d4 <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 8015538:	2300      	movs	r3, #0
 801553a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801553e:	e06c      	b.n	801561a <tls_prf_generic+0x1e2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 8015540:	f107 0310 	add.w	r3, r7, #16
 8015544:	4618      	mov	r0, r3
 8015546:	f7f8 ffab 	bl	800e4a0 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 801554a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801554e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015552:	441a      	add	r2, r3
 8015554:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015558:	f107 0310 	add.w	r3, r7, #16
 801555c:	4618      	mov	r0, r3
 801555e:	f7f8 ff17 	bl	800e390 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 8015562:	f107 021c 	add.w	r2, r7, #28
 8015566:	f107 0310 	add.w	r3, r7, #16
 801556a:	4611      	mov	r1, r2
 801556c:	4618      	mov	r0, r3
 801556e:	f7f8 ff31 	bl	800e3d4 <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 8015572:	f107 0310 	add.w	r3, r7, #16
 8015576:	4618      	mov	r0, r3
 8015578:	f7f8 ff92 	bl	800e4a0 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 801557c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015580:	f107 0310 	add.w	r3, r7, #16
 8015584:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015588:	4618      	mov	r0, r3
 801558a:	f7f8 ff01 	bl	800e390 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 801558e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015592:	f107 0310 	add.w	r3, r7, #16
 8015596:	4611      	mov	r1, r2
 8015598:	4618      	mov	r0, r3
 801559a:	f7f8 ff1b 	bl	800e3d4 <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 801559e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80155a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80155a6:	4413      	add	r3, r2
 80155a8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80155ac:	429a      	cmp	r2, r3
 80155ae:	d20b      	bcs.n	80155c8 <tls_prf_generic+0x190>
 80155b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80155b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80155b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80155bc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80155c0:	fb01 f202 	mul.w	r2, r1, r2
 80155c4:	1a9b      	subs	r3, r3, r2
 80155c6:	e001      	b.n	80155cc <tls_prf_generic+0x194>
 80155c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80155cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        for( j = 0; j < k; j++ )
 80155d0:	2300      	movs	r3, #0
 80155d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80155d6:	e013      	b.n	8015600 <tls_prf_generic+0x1c8>
            dstbuf[i + j]  = h_i[j];
 80155d8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80155dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80155e0:	4413      	add	r3, r2
 80155e2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80155e6:	4413      	add	r3, r2
 80155e8:	f107 011c 	add.w	r1, r7, #28
 80155ec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80155f0:	440a      	add	r2, r1
 80155f2:	7812      	ldrb	r2, [r2, #0]
 80155f4:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < k; j++ )
 80155f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80155fa:	3301      	adds	r3, #1
 80155fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015600:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015604:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015608:	429a      	cmp	r2, r3
 801560a:	d3e5      	bcc.n	80155d8 <tls_prf_generic+0x1a0>
    for( i = 0; i < dlen; i += md_len )
 801560c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015614:	4413      	add	r3, r2
 8015616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801561a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801561e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015622:	429a      	cmp	r2, r3
 8015624:	d38c      	bcc.n	8015540 <tls_prf_generic+0x108>
    }

    mbedtls_md_free( &md_ctx );
 8015626:	f107 0310 	add.w	r3, r7, #16
 801562a:	4618      	mov	r0, r3
 801562c:	f7f8 fd71 	bl	800e112 <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8015630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015634:	2180      	movs	r1, #128	; 0x80
 8015636:	4618      	mov	r0, r3
 8015638:	f7ff fe8d 	bl	8015356 <mbedtls_zeroize>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 801563c:	f107 031c 	add.w	r3, r7, #28
 8015640:	2120      	movs	r1, #32
 8015642:	4618      	mov	r0, r3
 8015644:	f7ff fe87 	bl	8015356 <mbedtls_zeroize>

    return( 0 );
 8015648:	2300      	movs	r3, #0
}
 801564a:	4618      	mov	r0, r3
 801564c:	37d8      	adds	r7, #216	; 0xd8
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}
 8015652:	bf00      	nop
 8015654:	ffff9400 	.word	0xffff9400
 8015658:	ffff8f00 	.word	0xffff8f00

0801565c <tls_prf_sha256>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b088      	sub	sp, #32
 8015660:	af04      	add	r7, sp, #16
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	60b9      	str	r1, [r7, #8]
 8015666:	607a      	str	r2, [r7, #4]
 8015668:	603b      	str	r3, [r7, #0]
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 801566a:	6a3b      	ldr	r3, [r7, #32]
 801566c:	9303      	str	r3, [sp, #12]
 801566e:	69fb      	ldr	r3, [r7, #28]
 8015670:	9302      	str	r3, [sp, #8]
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	9301      	str	r3, [sp, #4]
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	68ba      	ldr	r2, [r7, #8]
 801567e:	68f9      	ldr	r1, [r7, #12]
 8015680:	2006      	movs	r0, #6
 8015682:	f7ff fed9 	bl	8015438 <tls_prf_generic>
 8015686:	4603      	mov	r3, r0
                             label, random, rlen, dstbuf, dlen ) );
}
 8015688:	4618      	mov	r0, r3
 801568a:	3710      	adds	r7, #16
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8015690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015692:	b0e5      	sub	sp, #404	; 0x194
 8015694:	af06      	add	r7, sp, #24
 8015696:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801569a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801569e:	6018      	str	r0, [r3, #0]
    int ret = 0;
 80156a0:	2300      	movs	r3, #0
 80156a2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80156a6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80156aa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 80156b6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80156ba:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 80156c6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80156ca:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 80156d6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80156da:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80156de:	4b9b      	ldr	r3, [pc, #620]	; (801594c <mbedtls_ssl_derive_keys+0x2bc>)
 80156e0:	9300      	str	r3, [sp, #0]
 80156e2:	f240 2301 	movw	r3, #513	; 0x201
 80156e6:	4a9a      	ldr	r2, [pc, #616]	; (8015950 <mbedtls_ssl_derive_keys+0x2c0>)
 80156e8:	2102      	movs	r1, #2
 80156ea:	6800      	ldr	r0, [r0, #0]
 80156ec:	f7f6 f8ae 	bl	800b84c <mbedtls_debug_print_msg>

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80156f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	7a1b      	ldrb	r3, [r3, #8]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7f5 fb5d 	bl	800adb8 <mbedtls_cipher_info_from_type>
 80156fe:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
    if( cipher_info == NULL )
 8015702:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015706:	2b00      	cmp	r3, #0
 8015708:	d114      	bne.n	8015734 <mbedtls_ssl_derive_keys+0xa4>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 801570a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	7a1b      	ldrb	r3, [r3, #8]
 8015712:	461a      	mov	r2, r3
 8015714:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015718:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 801571c:	9201      	str	r2, [sp, #4]
 801571e:	4b8d      	ldr	r3, [pc, #564]	; (8015954 <mbedtls_ssl_derive_keys+0x2c4>)
 8015720:	9300      	str	r3, [sp, #0]
 8015722:	f240 2306 	movw	r3, #518	; 0x206
 8015726:	4a8a      	ldr	r2, [pc, #552]	; (8015950 <mbedtls_ssl_derive_keys+0x2c0>)
 8015728:	2101      	movs	r1, #1
 801572a:	6800      	ldr	r0, [r0, #0]
 801572c:	f7f6 f88e 	bl	800b84c <mbedtls_debug_print_msg>
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015730:	4b89      	ldr	r3, [pc, #548]	; (8015958 <mbedtls_ssl_derive_keys+0x2c8>)
 8015732:	e3f3      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8015734:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	7a5b      	ldrb	r3, [r3, #9]
 801573c:	4618      	mov	r0, r3
 801573e:	f7f8 fcc1 	bl	800e0c4 <mbedtls_md_info_from_type>
 8015742:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if( md_info == NULL )
 8015746:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801574a:	2b00      	cmp	r3, #0
 801574c:	d114      	bne.n	8015778 <mbedtls_ssl_derive_keys+0xe8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801574e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	7a5b      	ldrb	r3, [r3, #9]
 8015756:	461a      	mov	r2, r3
 8015758:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801575c:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015760:	9201      	str	r2, [sp, #4]
 8015762:	4b7e      	ldr	r3, [pc, #504]	; (801595c <mbedtls_ssl_derive_keys+0x2cc>)
 8015764:	9300      	str	r3, [sp, #0]
 8015766:	f240 230e 	movw	r3, #526	; 0x20e
 801576a:	4a79      	ldr	r2, [pc, #484]	; (8015950 <mbedtls_ssl_derive_keys+0x2c0>)
 801576c:	2101      	movs	r1, #1
 801576e:	6800      	ldr	r0, [r0, #0]
 8015770:	f7f6 f86c 	bl	800b84c <mbedtls_debug_print_msg>
                            transform->ciphersuite_info->mac ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015774:	4b78      	ldr	r3, [pc, #480]	; (8015958 <mbedtls_ssl_derive_keys+0x2c8>)
 8015776:	e3d1      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
    }
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8015778:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801577c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	68db      	ldr	r3, [r3, #12]
 8015784:	2b03      	cmp	r3, #3
 8015786:	d113      	bne.n	80157b0 <mbedtls_ssl_derive_keys+0x120>
    {
        handshake->tls_prf = tls_prf_sha256;
 8015788:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801578c:	4a74      	ldr	r2, [pc, #464]	; (8015960 <mbedtls_ssl_derive_keys+0x2d0>)
 801578e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8015792:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015796:	4a73      	ldr	r2, [pc, #460]	; (8015964 <mbedtls_ssl_derive_keys+0x2d4>)
 8015798:	679a      	str	r2, [r3, #120]	; 0x78
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 801579a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801579e:	4a72      	ldr	r2, [pc, #456]	; (8015968 <mbedtls_ssl_derive_keys+0x2d8>)
 80157a0:	67da      	str	r2, [r3, #124]	; 0x7c
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 80157a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80157a6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d161      	bne.n	8015872 <mbedtls_ssl_derive_keys+0x1e2>
 80157ae:	e00e      	b.n	80157ce <mbedtls_ssl_derive_keys+0x13e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80157b0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80157b4:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80157b8:	4b6c      	ldr	r3, [pc, #432]	; (801596c <mbedtls_ssl_derive_keys+0x2dc>)
 80157ba:	9300      	str	r3, [sp, #0]
 80157bc:	f240 233e 	movw	r3, #574	; 0x23e
 80157c0:	4a63      	ldr	r2, [pc, #396]	; (8015950 <mbedtls_ssl_derive_keys+0x2c0>)
 80157c2:	2101      	movs	r1, #1
 80157c4:	6800      	ldr	r0, [r0, #0]
 80157c6:	f7f6 f841 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80157ca:	4b69      	ldr	r3, [pc, #420]	; (8015970 <mbedtls_ssl_derive_keys+0x2e0>)
 80157cc:	e3a6      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
    {
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 80157ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80157d2:	33c8      	adds	r3, #200	; 0xc8
 80157d4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80157d8:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 80157dc:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80157e0:	f5a1 70ba 	sub.w	r0, r1, #372	; 0x174
 80157e4:	9202      	str	r2, [sp, #8]
 80157e6:	9301      	str	r3, [sp, #4]
 80157e8:	4b62      	ldr	r3, [pc, #392]	; (8015974 <mbedtls_ssl_derive_keys+0x2e4>)
 80157ea:	9300      	str	r3, [sp, #0]
 80157ec:	f240 234e 	movw	r3, #590	; 0x24e
 80157f0:	4a57      	ldr	r2, [pc, #348]	; (8015950 <mbedtls_ssl_derive_keys+0x2c0>)
 80157f2:	2103      	movs	r1, #3
 80157f4:	6800      	ldr	r0, [r0, #0]
 80157f6:	f7f6 f91b 	bl	800ba30 <mbedtls_debug_print_buf>
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 80157fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80157fe:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8015802:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015806:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
 801580a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801580e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
                                  "master secret",
                                  handshake->randbytes, 64,
 8015812:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015816:	f103 0288 	add.w	r2, r3, #136	; 0x88
                                  session->master, 48 );
 801581a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801581e:	332c      	adds	r3, #44	; 0x2c
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8015820:	2530      	movs	r5, #48	; 0x30
 8015822:	9502      	str	r5, [sp, #8]
 8015824:	9301      	str	r3, [sp, #4]
 8015826:	2340      	movs	r3, #64	; 0x40
 8015828:	9300      	str	r3, [sp, #0]
 801582a:	4613      	mov	r3, r2
 801582c:	4a52      	ldr	r2, [pc, #328]	; (8015978 <mbedtls_ssl_derive_keys+0x2e8>)
 801582e:	47a0      	blx	r4
 8015830:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
        if( ret != 0 )
 8015834:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015838:	2b00      	cmp	r3, #0
 801583a:	d012      	beq.n	8015862 <mbedtls_ssl_derive_keys+0x1d2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801583c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015840:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015844:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015848:	9301      	str	r3, [sp, #4]
 801584a:	4b4c      	ldr	r3, [pc, #304]	; (801597c <mbedtls_ssl_derive_keys+0x2ec>)
 801584c:	9300      	str	r3, [sp, #0]
 801584e:	f240 2381 	movw	r3, #641	; 0x281
 8015852:	4a3f      	ldr	r2, [pc, #252]	; (8015950 <mbedtls_ssl_derive_keys+0x2c0>)
 8015854:	2101      	movs	r1, #1
 8015856:	6800      	ldr	r0, [r0, #0]
 8015858:	f7f6 f87e 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 801585c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015860:	e35c      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 8015862:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015866:	33c8      	adds	r3, #200	; 0xc8
 8015868:	2130      	movs	r1, #48	; 0x30
 801586a:	4618      	mov	r0, r3
 801586c:	f7ff fd73 	bl	8015356 <mbedtls_zeroize>
 8015870:	e00c      	b.n	801588c <mbedtls_ssl_derive_keys+0x1fc>
    }
    else
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 8015872:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015876:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 801587a:	4b41      	ldr	r3, [pc, #260]	; (8015980 <mbedtls_ssl_derive_keys+0x2f0>)
 801587c:	9300      	str	r3, [sp, #0]
 801587e:	f44f 7322 	mov.w	r3, #648	; 0x288
 8015882:	4a33      	ldr	r2, [pc, #204]	; (8015950 <mbedtls_ssl_derive_keys+0x2c0>)
 8015884:	2103      	movs	r1, #3
 8015886:	6800      	ldr	r0, [r0, #0]
 8015888:	f7f5 ffe0 	bl	800b84c <mbedtls_debug_print_msg>

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 801588c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015890:	3388      	adds	r3, #136	; 0x88
 8015892:	461c      	mov	r4, r3
 8015894:	f507 7684 	add.w	r6, r7, #264	; 0x108
 8015898:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801589c:	4635      	mov	r5, r6
 801589e:	4623      	mov	r3, r4
 80158a0:	6818      	ldr	r0, [r3, #0]
 80158a2:	6859      	ldr	r1, [r3, #4]
 80158a4:	689a      	ldr	r2, [r3, #8]
 80158a6:	68db      	ldr	r3, [r3, #12]
 80158a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80158aa:	3410      	adds	r4, #16
 80158ac:	3610      	adds	r6, #16
 80158ae:	4564      	cmp	r4, ip
 80158b0:	d1f4      	bne.n	801589c <mbedtls_ssl_derive_keys+0x20c>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80158b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80158b6:	f103 0088 	add.w	r0, r3, #136	; 0x88
 80158ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80158be:	3320      	adds	r3, #32
 80158c0:	2220      	movs	r2, #32
 80158c2:	4619      	mov	r1, r3
 80158c4:	f008 fbc2 	bl	801e04c <memcpy>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80158c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80158cc:	3388      	adds	r3, #136	; 0x88
 80158ce:	3320      	adds	r3, #32
 80158d0:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80158d4:	2220      	movs	r2, #32
 80158d6:	4618      	mov	r0, r3
 80158d8:	f008 fbb8 	bl	801e04c <memcpy>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80158dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80158e0:	2140      	movs	r1, #64	; 0x40
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7ff fd37 	bl	8015356 <mbedtls_zeroize>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80158e8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80158ec:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80158f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80158f4:	f103 002c 	add.w	r0, r3, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 80158f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80158fc:	f103 0288 	add.w	r2, r3, #136	; 0x88
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 8015900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015904:	9302      	str	r3, [sp, #8]
 8015906:	f107 0308 	add.w	r3, r7, #8
 801590a:	9301      	str	r3, [sp, #4]
 801590c:	2340      	movs	r3, #64	; 0x40
 801590e:	9300      	str	r3, [sp, #0]
 8015910:	4613      	mov	r3, r2
 8015912:	4a1c      	ldr	r2, [pc, #112]	; (8015984 <mbedtls_ssl_derive_keys+0x2f4>)
 8015914:	2130      	movs	r1, #48	; 0x30
 8015916:	47a0      	blx	r4
 8015918:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if( ret != 0 )
 801591c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015920:	2b00      	cmp	r3, #0
 8015922:	d031      	beq.n	8015988 <mbedtls_ssl_derive_keys+0x2f8>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 8015924:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015928:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 801592c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015930:	9301      	str	r3, [sp, #4]
 8015932:	4b12      	ldr	r3, [pc, #72]	; (801597c <mbedtls_ssl_derive_keys+0x2ec>)
 8015934:	9300      	str	r3, [sp, #0]
 8015936:	f240 23a2 	movw	r3, #674	; 0x2a2
 801593a:	4a05      	ldr	r2, [pc, #20]	; (8015950 <mbedtls_ssl_derive_keys+0x2c0>)
 801593c:	2101      	movs	r1, #1
 801593e:	6800      	ldr	r0, [r0, #0]
 8015940:	f7f6 f80a 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8015944:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015948:	e2e8      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
 801594a:	bf00      	nop
 801594c:	08022c64 	.word	0x08022c64
 8015950:	08022c14 	.word	0x08022c14
 8015954:	08022c74 	.word	0x08022c74
 8015958:	ffff8f00 	.word	0xffff8f00
 801595c:	08022c94 	.word	0x08022c94
 8015960:	0801565d 	.word	0x0801565d
 8015964:	08015f45 	.word	0x08015f45
 8015968:	0801863d 	.word	0x0801863d
 801596c:	08022cb8 	.word	0x08022cb8
 8015970:	ffff9400 	.word	0xffff9400
 8015974:	08022ccc 	.word	0x08022ccc
 8015978:	08022ce0 	.word	0x08022ce0
 801597c:	08022cf0 	.word	0x08022cf0
 8015980:	08022cf4 	.word	0x08022cf4
 8015984:	08022d14 	.word	0x08022d14
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 8015988:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	4618      	mov	r0, r3
 8015990:	f7fd feac 	bl	80136ec <mbedtls_ssl_get_ciphersuite_name>
 8015994:	4603      	mov	r3, r0
 8015996:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 801599a:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 801599e:	9301      	str	r3, [sp, #4]
 80159a0:	4bb0      	ldr	r3, [pc, #704]	; (8015c64 <mbedtls_ssl_derive_keys+0x5d4>)
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	f240 23a6 	movw	r3, #678	; 0x2a6
 80159a8:	4aaf      	ldr	r2, [pc, #700]	; (8015c68 <mbedtls_ssl_derive_keys+0x5d8>)
 80159aa:	2103      	movs	r1, #3
 80159ac:	6800      	ldr	r0, [r0, #0]
 80159ae:	f7f5 ff4d 	bl	800b84c <mbedtls_debug_print_msg>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 80159b2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80159b6:	332c      	adds	r3, #44	; 0x2c
 80159b8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80159bc:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 80159c0:	2230      	movs	r2, #48	; 0x30
 80159c2:	9202      	str	r2, [sp, #8]
 80159c4:	9301      	str	r3, [sp, #4]
 80159c6:	4ba9      	ldr	r3, [pc, #676]	; (8015c6c <mbedtls_ssl_derive_keys+0x5dc>)
 80159c8:	9300      	str	r3, [sp, #0]
 80159ca:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 80159ce:	4aa6      	ldr	r2, [pc, #664]	; (8015c68 <mbedtls_ssl_derive_keys+0x5d8>)
 80159d0:	2103      	movs	r1, #3
 80159d2:	6800      	ldr	r0, [r0, #0]
 80159d4:	f7f6 f82c 	bl	800ba30 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 80159d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80159dc:	3388      	adds	r3, #136	; 0x88
 80159de:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80159e2:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 80159e6:	2240      	movs	r2, #64	; 0x40
 80159e8:	9202      	str	r2, [sp, #8]
 80159ea:	9301      	str	r3, [sp, #4]
 80159ec:	4ba0      	ldr	r3, [pc, #640]	; (8015c70 <mbedtls_ssl_derive_keys+0x5e0>)
 80159ee:	9300      	str	r3, [sp, #0]
 80159f0:	f240 23a9 	movw	r3, #681	; 0x2a9
 80159f4:	4a9c      	ldr	r2, [pc, #624]	; (8015c68 <mbedtls_ssl_derive_keys+0x5d8>)
 80159f6:	2104      	movs	r1, #4
 80159f8:	6800      	ldr	r0, [r0, #0]
 80159fa:	f7f6 f819 	bl	800ba30 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 80159fe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015a02:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015a0a:	9302      	str	r3, [sp, #8]
 8015a0c:	f107 0308 	add.w	r3, r7, #8
 8015a10:	9301      	str	r3, [sp, #4]
 8015a12:	4b98      	ldr	r3, [pc, #608]	; (8015c74 <mbedtls_ssl_derive_keys+0x5e4>)
 8015a14:	9300      	str	r3, [sp, #0]
 8015a16:	f240 23aa 	movw	r3, #682	; 0x2aa
 8015a1a:	4a93      	ldr	r2, [pc, #588]	; (8015c68 <mbedtls_ssl_derive_keys+0x5d8>)
 8015a1c:	2104      	movs	r1, #4
 8015a1e:	6800      	ldr	r0, [r0, #0]
 8015a20:	f7f6 f806 	bl	800ba30 <mbedtls_debug_print_buf>

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 8015a24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015a28:	3388      	adds	r3, #136	; 0x88
 8015a2a:	2140      	movs	r1, #64	; 0x40
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7ff fc92 	bl	8015356 <mbedtls_zeroize>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 8015a32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015a36:	685b      	ldr	r3, [r3, #4]
 8015a38:	08da      	lsrs	r2, r3, #3
 8015a3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a3e:	605a      	str	r2, [r3, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8015a40:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015a44:	785b      	ldrb	r3, [r3, #1]
 8015a46:	2b06      	cmp	r3, #6
 8015a48:	d004      	beq.n	8015a54 <mbedtls_ssl_derive_keys+0x3c4>
        cipher_info->mode == MBEDTLS_MODE_CCM )
 8015a4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015a4e:	785b      	ldrb	r3, [r3, #1]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8015a50:	2b08      	cmp	r3, #8
 8015a52:	d125      	bne.n	8015aa0 <mbedtls_ssl_derive_keys+0x410>
    {
        transform->maclen = 0;
 8015a54:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a58:	2200      	movs	r2, #0
 8015a5a:	615a      	str	r2, [r3, #20]
        mac_key_len = 0;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

        transform->ivlen = 12;
 8015a62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a66:	220c      	movs	r2, #12
 8015a68:	60da      	str	r2, [r3, #12]
        transform->fixed_ivlen = 4;
 8015a6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a6e:	2204      	movs	r2, #4
 8015a70:	611a      	str	r2, [r3, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
 8015a72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a76:	68da      	ldr	r2, [r3, #12]
 8015a78:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a7c:	691b      	ldr	r3, [r3, #16]
 8015a7e:	1ad3      	subs	r3, r2, r3
                            + ( transform->ciphersuite_info->flags &
 8015a80:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8015a84:	6812      	ldr	r2, [r2, #0]
 8015a86:	7f12      	ldrb	r2, [r2, #28]
 8015a88:	f002 0202 	and.w	r2, r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 8015a8c:	2a00      	cmp	r2, #0
 8015a8e:	d001      	beq.n	8015a94 <mbedtls_ssl_derive_keys+0x404>
 8015a90:	2208      	movs	r2, #8
 8015a92:	e000      	b.n	8015a96 <mbedtls_ssl_derive_keys+0x406>
 8015a94:	2210      	movs	r2, #16
                            + ( transform->ciphersuite_info->flags &
 8015a96:	441a      	add	r2, r3
        transform->minlen = transform->ivlen - transform->fixed_ivlen
 8015a98:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a9c:	609a      	str	r2, [r3, #8]
 8015a9e:	e08e      	b.n	8015bbe <mbedtls_ssl_derive_keys+0x52e>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 8015aa0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015aa4:	3338      	adds	r3, #56	; 0x38
 8015aa6:	2201      	movs	r2, #1
 8015aa8:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7f8 fb63 	bl	800e178 <mbedtls_md_setup>
 8015ab2:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015ab6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d10e      	bne.n	8015adc <mbedtls_ssl_derive_keys+0x44c>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
 8015abe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015ac2:	3344      	adds	r3, #68	; 0x44
 8015ac4:	2201      	movs	r2, #1
 8015ac6:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8015aca:	4618      	mov	r0, r3
 8015acc:	f7f8 fb54 	bl	800e178 <mbedtls_md_setup>
 8015ad0:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 8015ad4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d012      	beq.n	8015b02 <mbedtls_ssl_derive_keys+0x472>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 8015adc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015ae0:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015ae4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015ae8:	9301      	str	r3, [sp, #4]
 8015aea:	4b63      	ldr	r3, [pc, #396]	; (8015c78 <mbedtls_ssl_derive_keys+0x5e8>)
 8015aec:	9300      	str	r3, [sp, #0]
 8015aee:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 8015af2:	4a5d      	ldr	r2, [pc, #372]	; (8015c68 <mbedtls_ssl_derive_keys+0x5d8>)
 8015af4:	2101      	movs	r1, #1
 8015af6:	6800      	ldr	r0, [r0, #0]
 8015af8:	f7f5 ff2e 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 8015afc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015b00:	e20c      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 8015b02:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8015b06:	f7f8 fd1b 	bl	800e540 <mbedtls_md_get_size>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        transform->maclen = mac_key_len;
 8015b10:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b14:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015b18:	615a      	str	r2, [r3, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 8015b1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015b1e:	68da      	ldr	r2, [r3, #12]
 8015b20:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b24:	60da      	str	r2, [r3, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 8015b26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015b2a:	785b      	ldrb	r3, [r3, #1]
 8015b2c:	2b07      	cmp	r3, #7
 8015b2e:	d106      	bne.n	8015b3e <mbedtls_ssl_derive_keys+0x4ae>
            transform->minlen = transform->maclen;
 8015b30:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b34:	695a      	ldr	r2, [r3, #20]
 8015b36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b3a:	609a      	str	r2, [r3, #8]
 8015b3c:	e03f      	b.n	8015bbe <mbedtls_ssl_derive_keys+0x52e>
                                  + cipher_info->block_size;
            }
            else
#endif
            {
                transform->minlen = transform->maclen
 8015b3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b42:	695a      	ldr	r2, [r3, #20]
                                  + cipher_info->block_size
 8015b44:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015b48:	695b      	ldr	r3, [r3, #20]
 8015b4a:	18d1      	adds	r1, r2, r3
                                  - transform->maclen % cipher_info->block_size;
 8015b4c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b50:	695b      	ldr	r3, [r3, #20]
 8015b52:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8015b56:	6952      	ldr	r2, [r2, #20]
 8015b58:	fbb3 f0f2 	udiv	r0, r3, r2
 8015b5c:	fb00 f202 	mul.w	r2, r0, r2
 8015b60:	1a9b      	subs	r3, r3, r2
 8015b62:	1aca      	subs	r2, r1, r3
                transform->minlen = transform->maclen
 8015b64:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b68:	609a      	str	r2, [r3, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8015b6a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015b6e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	68db      	ldr	r3, [r3, #12]
 8015b76:	2b02      	cmp	r3, #2
 8015b78:	d007      	beq.n	8015b8a <mbedtls_ssl_derive_keys+0x4fa>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8015b7a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015b7e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	68db      	ldr	r3, [r3, #12]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8015b86:	2b03      	cmp	r3, #3
 8015b88:	d10a      	bne.n	8015ba0 <mbedtls_ssl_derive_keys+0x510>
            {
                transform->minlen += transform->ivlen;
 8015b8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b8e:	689a      	ldr	r2, [r3, #8]
 8015b90:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b94:	68db      	ldr	r3, [r3, #12]
 8015b96:	441a      	add	r2, r3
 8015b98:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b9c:	609a      	str	r2, [r3, #8]
 8015b9e:	e00e      	b.n	8015bbe <mbedtls_ssl_derive_keys+0x52e>
            }
            else
#endif
            {
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015ba0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015ba4:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015ba8:	4b34      	ldr	r3, [pc, #208]	; (8015c7c <mbedtls_ssl_derive_keys+0x5ec>)
 8015baa:	9300      	str	r3, [sp, #0]
 8015bac:	f240 330e 	movw	r3, #782	; 0x30e
 8015bb0:	4a2d      	ldr	r2, [pc, #180]	; (8015c68 <mbedtls_ssl_derive_keys+0x5d8>)
 8015bb2:	2101      	movs	r1, #1
 8015bb4:	6800      	ldr	r0, [r0, #0]
 8015bb6:	f7f5 fe49 	bl	800b84c <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015bba:	4b31      	ldr	r3, [pc, #196]	; (8015c80 <mbedtls_ssl_derive_keys+0x5f0>)
 8015bbc:	e1ae      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
            }
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 8015bbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8015bc8:	6892      	ldr	r2, [r2, #8]
 8015bca:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8015bce:	68c9      	ldr	r1, [r1, #12]
 8015bd0:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8015bd4:	6944      	ldr	r4, [r0, #20]
 8015bd6:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8015bda:	f5a0 70ba 	sub.w	r0, r0, #372	; 0x174
 8015bde:	9404      	str	r4, [sp, #16]
 8015be0:	9103      	str	r1, [sp, #12]
 8015be2:	9202      	str	r2, [sp, #8]
 8015be4:	9301      	str	r3, [sp, #4]
 8015be6:	4b27      	ldr	r3, [pc, #156]	; (8015c84 <mbedtls_ssl_derive_keys+0x5f4>)
 8015be8:	9300      	str	r3, [sp, #0]
 8015bea:	f44f 7345 	mov.w	r3, #788	; 0x314
 8015bee:	4a1e      	ldr	r2, [pc, #120]	; (8015c68 <mbedtls_ssl_derive_keys+0x5d8>)
 8015bf0:	2103      	movs	r1, #3
 8015bf2:	6800      	ldr	r0, [r0, #0]
 8015bf4:	f7f5 fe2a 	bl	800b84c <mbedtls_debug_print_msg>

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8015bf8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015bfc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015c08:	f003 0301 	and.w	r3, r3, #1
 8015c0c:	b2db      	uxtb	r3, r3
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d169      	bne.n	8015ce6 <mbedtls_ssl_derive_keys+0x656>
    {
        key1 = keyblk + mac_key_len * 2;
 8015c12:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015c16:	005b      	lsls	r3, r3, #1
 8015c18:	f107 0208 	add.w	r2, r7, #8
 8015c1c:	4413      	add	r3, r2
 8015c1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 8015c22:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015c26:	005a      	lsls	r2, r3, #1
 8015c28:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015c2c:	685b      	ldr	r3, [r3, #4]
 8015c2e:	4413      	add	r3, r2
 8015c30:	f107 0208 	add.w	r2, r7, #8
 8015c34:	4413      	add	r3, r2
 8015c36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

        mac_enc = keyblk;
 8015c3a:	f107 0308 	add.w	r3, r7, #8
 8015c3e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
        mac_dec = keyblk + mac_key_len;
 8015c42:	f107 0208 	add.w	r2, r7, #8
 8015c46:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015c4a:	4413      	add	r3, r2
 8015c4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 8015c50:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015c54:	691b      	ldr	r3, [r3, #16]
                            transform->fixed_ivlen : transform->ivlen;
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d016      	beq.n	8015c88 <mbedtls_ssl_derive_keys+0x5f8>
 8015c5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015c5e:	691b      	ldr	r3, [r3, #16]
 8015c60:	e015      	b.n	8015c8e <mbedtls_ssl_derive_keys+0x5fe>
 8015c62:	bf00      	nop
 8015c64:	08022d24 	.word	0x08022d24
 8015c68:	08022c14 	.word	0x08022c14
 8015c6c:	08022ce0 	.word	0x08022ce0
 8015c70:	08022d38 	.word	0x08022d38
 8015c74:	08022d48 	.word	0x08022d48
 8015c78:	08022d54 	.word	0x08022d54
 8015c7c:	08022cb8 	.word	0x08022cb8
 8015c80:	ffff9400 	.word	0xffff9400
 8015c84:	08022d68 	.word	0x08022d68
 8015c88:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015c8c:	68db      	ldr	r3, [r3, #12]
        iv_copy_len = ( transform->fixed_ivlen ) ?
 8015c8e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 8015c92:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015c96:	f103 0018 	add.w	r0, r3, #24
 8015c9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015c9e:	685b      	ldr	r3, [r3, #4]
 8015ca0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015ca4:	4413      	add	r3, r2
 8015ca6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015caa:	4619      	mov	r1, r3
 8015cac:	f008 f9ce 	bl	801e04c <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 8015cb0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015cb4:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8015cb8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015cbc:	685a      	ldr	r2, [r3, #4]
 8015cbe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015cc2:	4413      	add	r3, r2
 8015cc4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015cc8:	4413      	add	r3, r2
 8015cca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015cce:	4619      	mov	r1, r3
 8015cd0:	f008 f9bc 	bl	801e04c <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8015cd4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015cd8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	68db      	ldr	r3, [r3, #12]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	dd32      	ble.n	8015d4a <mbedtls_ssl_derive_keys+0x6ba>
 8015ce4:	e00e      	b.n	8015d04 <mbedtls_ssl_derive_keys+0x674>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015ce6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015cea:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015cee:	4b8e      	ldr	r3, [pc, #568]	; (8015f28 <mbedtls_ssl_derive_keys+0x898>)
 8015cf0:	9300      	str	r3, [sp, #0]
 8015cf2:	f44f 7351 	mov.w	r3, #836	; 0x344
 8015cf6:	4a8d      	ldr	r2, [pc, #564]	; (8015f2c <mbedtls_ssl_derive_keys+0x89c>)
 8015cf8:	2101      	movs	r1, #1
 8015cfa:	6800      	ldr	r0, [r0, #0]
 8015cfc:	f7f5 fda6 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015d00:	4b8b      	ldr	r3, [pc, #556]	; (8015f30 <mbedtls_ssl_derive_keys+0x8a0>)
 8015d02:	e10b      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
    {
        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 8015d04:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015d08:	3338      	adds	r3, #56	; 0x38
 8015d0a:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015d0e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7f8 fa8a 	bl	800e22c <mbedtls_md_hmac_starts>
        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 8015d18:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015d1c:	3344      	adds	r3, #68	; 0x44
 8015d1e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015d22:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8015d26:	4618      	mov	r0, r3
 8015d28:	f7f8 fa80 	bl	800e22c <mbedtls_md_hmac_starts>
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 8015d2c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015d30:	3350      	adds	r3, #80	; 0x50
 8015d32:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7f5 f8ba 	bl	800aeb0 <mbedtls_cipher_setup>
 8015d3c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015d40:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d022      	beq.n	8015d8e <mbedtls_ssl_derive_keys+0x6fe>
 8015d48:	e00e      	b.n	8015d68 <mbedtls_ssl_derive_keys+0x6d8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015d4a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015d4e:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015d52:	4b75      	ldr	r3, [pc, #468]	; (8015f28 <mbedtls_ssl_derive_keys+0x898>)
 8015d54:	9300      	str	r3, [sp, #0]
 8015d56:	f44f 7358 	mov.w	r3, #864	; 0x360
 8015d5a:	4a74      	ldr	r2, [pc, #464]	; (8015f2c <mbedtls_ssl_derive_keys+0x89c>)
 8015d5c:	2101      	movs	r1, #1
 8015d5e:	6800      	ldr	r0, [r0, #0]
 8015d60:	f7f5 fd74 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015d64:	4b72      	ldr	r3, [pc, #456]	; (8015f30 <mbedtls_ssl_derive_keys+0x8a0>)
 8015d66:	e0d9      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
                                 cipher_info ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 8015d68:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015d6c:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015d70:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015d74:	9301      	str	r3, [sp, #4]
 8015d76:	4b6f      	ldr	r3, [pc, #444]	; (8015f34 <mbedtls_ssl_derive_keys+0x8a4>)
 8015d78:	9300      	str	r3, [sp, #0]
 8015d7a:	f44f 7361 	mov.w	r3, #900	; 0x384
 8015d7e:	4a6b      	ldr	r2, [pc, #428]	; (8015f2c <mbedtls_ssl_derive_keys+0x89c>)
 8015d80:	2101      	movs	r1, #1
 8015d82:	6800      	ldr	r0, [r0, #0]
 8015d84:	f7f5 fde8 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8015d88:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015d8c:	e0c6      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 8015d8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015d92:	3390      	adds	r3, #144	; 0x90
 8015d94:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7f5 f889 	bl	800aeb0 <mbedtls_cipher_setup>
 8015d9e:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015da2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d012      	beq.n	8015dd0 <mbedtls_ssl_derive_keys+0x740>
                                 cipher_info ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 8015daa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015dae:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015db2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015db6:	9301      	str	r3, [sp, #4]
 8015db8:	4b5e      	ldr	r3, [pc, #376]	; (8015f34 <mbedtls_ssl_derive_keys+0x8a4>)
 8015dba:	9300      	str	r3, [sp, #0]
 8015dbc:	f240 338b 	movw	r3, #907	; 0x38b
 8015dc0:	4a5a      	ldr	r2, [pc, #360]	; (8015f2c <mbedtls_ssl_derive_keys+0x89c>)
 8015dc2:	2101      	movs	r1, #1
 8015dc4:	6800      	ldr	r0, [r0, #0]
 8015dc6:	f7f5 fdc7 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8015dca:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015dce:	e0a5      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 8015dd0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015dd4:	f103 0050 	add.w	r0, r3, #80	; 0x50
                               cipher_info->key_bitlen,
 8015dd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015ddc:	685b      	ldr	r3, [r3, #4]
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 8015dde:	461a      	mov	r2, r3
 8015de0:	2301      	movs	r3, #1
 8015de2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8015de6:	f7f5 f893 	bl	800af10 <mbedtls_cipher_setkey>
 8015dea:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015dee:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d012      	beq.n	8015e1c <mbedtls_ssl_derive_keys+0x78c>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 8015df6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015dfa:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015dfe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015e02:	9301      	str	r3, [sp, #4]
 8015e04:	4b4c      	ldr	r3, [pc, #304]	; (8015f38 <mbedtls_ssl_derive_keys+0x8a8>)
 8015e06:	9300      	str	r3, [sp, #0]
 8015e08:	f240 3393 	movw	r3, #915	; 0x393
 8015e0c:	4a47      	ldr	r2, [pc, #284]	; (8015f2c <mbedtls_ssl_derive_keys+0x89c>)
 8015e0e:	2101      	movs	r1, #1
 8015e10:	6800      	ldr	r0, [r0, #0]
 8015e12:	f7f5 fda1 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8015e16:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015e1a:	e07f      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 8015e1c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015e20:	f103 0090 	add.w	r0, r3, #144	; 0x90
                               cipher_info->key_bitlen,
 8015e24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015e28:	685b      	ldr	r3, [r3, #4]
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8015e32:	f7f5 f86d 	bl	800af10 <mbedtls_cipher_setkey>
 8015e36:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015e3a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d012      	beq.n	8015e68 <mbedtls_ssl_derive_keys+0x7d8>
                               MBEDTLS_DECRYPT ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 8015e42:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015e46:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015e4a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015e4e:	9301      	str	r3, [sp, #4]
 8015e50:	4b39      	ldr	r3, [pc, #228]	; (8015f38 <mbedtls_ssl_derive_keys+0x8a8>)
 8015e52:	9300      	str	r3, [sp, #0]
 8015e54:	f240 339b 	movw	r3, #923	; 0x39b
 8015e58:	4a34      	ldr	r2, [pc, #208]	; (8015f2c <mbedtls_ssl_derive_keys+0x89c>)
 8015e5a:	2101      	movs	r1, #1
 8015e5c:	6800      	ldr	r0, [r0, #0]
 8015e5e:	f7f5 fd7b 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8015e62:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015e66:	e059      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 8015e68:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015e6c:	785b      	ldrb	r3, [r3, #1]
 8015e6e:	2b02      	cmp	r3, #2
 8015e70:	d13f      	bne.n	8015ef2 <mbedtls_ssl_derive_keys+0x862>
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 8015e72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015e76:	3350      	adds	r3, #80	; 0x50
 8015e78:	2104      	movs	r1, #4
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7f5 fb0c 	bl	800b498 <mbedtls_cipher_set_padding_mode>
 8015e80:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015e84:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d012      	beq.n	8015eb2 <mbedtls_ssl_derive_keys+0x822>
                                             MBEDTLS_PADDING_NONE ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 8015e8c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015e90:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015e94:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015e98:	9301      	str	r3, [sp, #4]
 8015e9a:	4b28      	ldr	r3, [pc, #160]	; (8015f3c <mbedtls_ssl_derive_keys+0x8ac>)
 8015e9c:	9300      	str	r3, [sp, #0]
 8015e9e:	f240 33a5 	movw	r3, #933	; 0x3a5
 8015ea2:	4a22      	ldr	r2, [pc, #136]	; (8015f2c <mbedtls_ssl_derive_keys+0x89c>)
 8015ea4:	2101      	movs	r1, #1
 8015ea6:	6800      	ldr	r0, [r0, #0]
 8015ea8:	f7f5 fd56 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 8015eac:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015eb0:	e034      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 8015eb2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015eb6:	3390      	adds	r3, #144	; 0x90
 8015eb8:	2104      	movs	r1, #4
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f7f5 faec 	bl	800b498 <mbedtls_cipher_set_padding_mode>
 8015ec0:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015ec4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d012      	beq.n	8015ef2 <mbedtls_ssl_derive_keys+0x862>
                                             MBEDTLS_PADDING_NONE ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 8015ecc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015ed0:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015ed4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015ed8:	9301      	str	r3, [sp, #4]
 8015eda:	4b18      	ldr	r3, [pc, #96]	; (8015f3c <mbedtls_ssl_derive_keys+0x8ac>)
 8015edc:	9300      	str	r3, [sp, #0]
 8015ede:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 8015ee2:	4a12      	ldr	r2, [pc, #72]	; (8015f2c <mbedtls_ssl_derive_keys+0x89c>)
 8015ee4:	2101      	movs	r1, #1
 8015ee6:	6800      	ldr	r0, [r0, #0]
 8015ee8:	f7f5 fd36 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 8015eec:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015ef0:	e014      	b.n	8015f1c <mbedtls_ssl_derive_keys+0x88c>
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 8015ef2:	f107 0308 	add.w	r3, r7, #8
 8015ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7ff fa2b 	bl	8015356 <mbedtls_zeroize>
            return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
        }
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 8015f00:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015f04:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015f08:	4b0d      	ldr	r3, [pc, #52]	; (8015f40 <mbedtls_ssl_derive_keys+0x8b0>)
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8015f10:	4a06      	ldr	r2, [pc, #24]	; (8015f2c <mbedtls_ssl_derive_keys+0x89c>)
 8015f12:	2102      	movs	r1, #2
 8015f14:	6800      	ldr	r0, [r0, #0]
 8015f16:	f7f5 fc99 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8015f1a:	2300      	movs	r3, #0
}
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f26:	bf00      	nop
 8015f28:	08022cb8 	.word	0x08022cb8
 8015f2c:	08022c14 	.word	0x08022c14
 8015f30:	ffff9400 	.word	0xffff9400
 8015f34:	08022d98 	.word	0x08022d98
 8015f38:	08022db0 	.word	0x08022db0
 8015f3c:	08022dc8 	.word	0x08022dc8
 8015f40:	08022de8 	.word	0x08022de8

08015f44 <ssl_calc_verify_tls_sha256>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b0a2      	sub	sp, #136	; 0x88
 8015f48:	af04      	add	r7, sp, #16
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	6039      	str	r1, [r7, #0]
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 8015f4e:	f107 030c 	add.w	r3, r7, #12
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7fb fbd8 	bl	8011708 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 8015f58:	4b1b      	ldr	r3, [pc, #108]	; (8015fc8 <ssl_calc_verify_tls_sha256+0x84>)
 8015f5a:	9300      	str	r3, [sp, #0]
 8015f5c:	f240 432d 	movw	r3, #1069	; 0x42d
 8015f60:	4a1a      	ldr	r2, [pc, #104]	; (8015fcc <ssl_calc_verify_tls_sha256+0x88>)
 8015f62:	2102      	movs	r1, #2
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f7f5 fc71 	bl	800b84c <mbedtls_debug_print_msg>

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f6e:	f103 0208 	add.w	r2, r3, #8
 8015f72:	f107 030c 	add.w	r3, r7, #12
 8015f76:	4611      	mov	r1, r2
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7fb fbe2 	bl	8011742 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 8015f7e:	f107 030c 	add.w	r3, r7, #12
 8015f82:	6839      	ldr	r1, [r7, #0]
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7fd fa17 	bl	80133b8 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 8015f8a:	2320      	movs	r3, #32
 8015f8c:	9302      	str	r3, [sp, #8]
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	9301      	str	r3, [sp, #4]
 8015f92:	4b0f      	ldr	r3, [pc, #60]	; (8015fd0 <ssl_calc_verify_tls_sha256+0x8c>)
 8015f94:	9300      	str	r3, [sp, #0]
 8015f96:	f240 4332 	movw	r3, #1074	; 0x432
 8015f9a:	4a0c      	ldr	r2, [pc, #48]	; (8015fcc <ssl_calc_verify_tls_sha256+0x88>)
 8015f9c:	2103      	movs	r1, #3
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f7f5 fd46 	bl	800ba30 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 8015fa4:	4b0b      	ldr	r3, [pc, #44]	; (8015fd4 <ssl_calc_verify_tls_sha256+0x90>)
 8015fa6:	9300      	str	r3, [sp, #0]
 8015fa8:	f240 4333 	movw	r3, #1075	; 0x433
 8015fac:	4a07      	ldr	r2, [pc, #28]	; (8015fcc <ssl_calc_verify_tls_sha256+0x88>)
 8015fae:	2102      	movs	r1, #2
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f7f5 fc4b 	bl	800b84c <mbedtls_debug_print_msg>

    mbedtls_sha256_free( &sha256 );
 8015fb6:	f107 030c 	add.w	r3, r7, #12
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f7fb fbb1 	bl	8011722 <mbedtls_sha256_free>

    return;
 8015fc0:	bf00      	nop
}
 8015fc2:	3778      	adds	r7, #120	; 0x78
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}
 8015fc8:	08022df8 	.word	0x08022df8
 8015fcc:	08022c14 	.word	0x08022c14
 8015fd0:	08022e10 	.word	0x08022e10
 8015fd4:	08022e2c 	.word	0x08022e2c

08015fd8 <ssl_encrypt_buf>:

/*
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
 8015fd8:	b5b0      	push	{r4, r5, r7, lr}
 8015fda:	b0a4      	sub	sp, #144	; 0x90
 8015fdc:	af08      	add	r7, sp, #32
 8015fde:	6078      	str	r0, [r7, #4]
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	66fb      	str	r3, [r7, #108]	; 0x6c

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 8015fe4:	4b9c      	ldr	r3, [pc, #624]	; (8016258 <ssl_encrypt_buf+0x280>)
 8015fe6:	9300      	str	r3, [sp, #0]
 8015fe8:	f240 5304 	movw	r3, #1284	; 0x504
 8015fec:	4a9b      	ldr	r2, [pc, #620]	; (801625c <ssl_encrypt_buf+0x284>)
 8015fee:	2102      	movs	r1, #2
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f7f5 fc2b 	bl	800b84c <mbedtls_debug_print_msg>

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d003      	beq.n	8016006 <ssl_encrypt_buf+0x2e>
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016002:	2b00      	cmp	r3, #0
 8016004:	d10a      	bne.n	801601c <ssl_encrypt_buf+0x44>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016006:	4b96      	ldr	r3, [pc, #600]	; (8016260 <ssl_encrypt_buf+0x288>)
 8016008:	9300      	str	r3, [sp, #0]
 801600a:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 801600e:	4a93      	ldr	r2, [pc, #588]	; (801625c <ssl_encrypt_buf+0x284>)
 8016010:	2101      	movs	r1, #1
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f7f5 fc1a 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016018:	4b92      	ldr	r3, [pc, #584]	; (8016264 <ssl_encrypt_buf+0x28c>)
 801601a:	e2da      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016020:	3350      	adds	r3, #80	; 0x50
 8016022:	4618      	mov	r0, r3
 8016024:	f7ff f90a 	bl	801523c <mbedtls_cipher_get_cipher_mode>
 8016028:	4603      	mov	r3, r0
 801602a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016034:	687a      	ldr	r2, [r7, #4]
 8016036:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 801603a:	9202      	str	r2, [sp, #8]
 801603c:	9301      	str	r3, [sp, #4]
 801603e:	4b8a      	ldr	r3, [pc, #552]	; (8016268 <ssl_encrypt_buf+0x290>)
 8016040:	9300      	str	r3, [sp, #0]
 8016042:	f240 530e 	movw	r3, #1294	; 0x50e
 8016046:	4a85      	ldr	r2, [pc, #532]	; (801625c <ssl_encrypt_buf+0x284>)
 8016048:	2104      	movs	r1, #4
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f7f5 fcf0 	bl	800ba30 <mbedtls_debug_print_buf>
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801605a:	d911      	bls.n	8016080 <ssl_encrypt_buf+0xa8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016062:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016066:	9202      	str	r2, [sp, #8]
 8016068:	9301      	str	r3, [sp, #4]
 801606a:	4b80      	ldr	r3, [pc, #512]	; (801626c <ssl_encrypt_buf+0x294>)
 801606c:	9300      	str	r3, [sp, #0]
 801606e:	f240 5313 	movw	r3, #1299	; 0x513
 8016072:	4a7a      	ldr	r2, [pc, #488]	; (801625c <ssl_encrypt_buf+0x284>)
 8016074:	2101      	movs	r1, #1
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f7f5 fbe8 	bl	800b84c <mbedtls_debug_print_msg>
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801607c:	4b7c      	ldr	r3, [pc, #496]	; (8016270 <ssl_encrypt_buf+0x298>)
 801607e:	e2a8      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 8016080:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016084:	2b07      	cmp	r3, #7
 8016086:	d003      	beq.n	8016090 <ssl_encrypt_buf+0xb8>
 8016088:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801608c:	2b02      	cmp	r3, #2
 801608e:	d17d      	bne.n	801618c <ssl_encrypt_buf+0x1b4>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	68db      	ldr	r3, [r3, #12]
 8016094:	2b00      	cmp	r3, #0
 8016096:	dd6e      	ble.n	8016176 <ssl_encrypt_buf+0x19e>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801609c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80160a6:	2208      	movs	r2, #8
 80160a8:	4619      	mov	r1, r3
 80160aa:	f7f8 f971 	bl	800e390 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160b2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80160bc:	2203      	movs	r2, #3
 80160be:	4619      	mov	r1, r3
 80160c0:	f7f8 f966 	bl	800e390 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160c8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80160d2:	2202      	movs	r2, #2
 80160d4:	4619      	mov	r1, r3
 80160d6:	f7f8 f95b 	bl	800e390 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160de:	f103 0038 	add.w	r0, r3, #56	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80160ee:	461a      	mov	r2, r3
 80160f0:	f7f8 f94e 	bl	800e390 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160f8:	3338      	adds	r3, #56	; 0x38
 80160fa:	f107 020c 	add.w	r2, r7, #12
 80160fe:	4611      	mov	r1, r2
 8016100:	4618      	mov	r0, r3
 8016102:	f7f8 f967 	bl	800e3d4 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801610a:	3338      	adds	r3, #56	; 0x38
 801610c:	4618      	mov	r0, r3
 801610e:	f7f8 f9c7 	bl	800e4a0 <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801611e:	18d0      	adds	r0, r2, r3
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016124:	695a      	ldr	r2, [r3, #20]
 8016126:	f107 030c 	add.w	r3, r7, #12
 801612a:	4619      	mov	r1, r3
 801612c:	f007 ff8e 	bl	801e04c <memcpy>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801613c:	4413      	add	r3, r2
 801613e:	687a      	ldr	r2, [r7, #4]
 8016140:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016142:	6952      	ldr	r2, [r2, #20]
 8016144:	9202      	str	r2, [sp, #8]
 8016146:	9301      	str	r3, [sp, #4]
 8016148:	4b4a      	ldr	r3, [pc, #296]	; (8016274 <ssl_encrypt_buf+0x29c>)
 801614a:	9300      	str	r3, [sp, #0]
 801614c:	f240 534a 	movw	r3, #1354	; 0x54a
 8016150:	4a42      	ldr	r2, [pc, #264]	; (801625c <ssl_encrypt_buf+0x284>)
 8016152:	2104      	movs	r1, #4
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f7f5 fc6b 	bl	800ba30 <mbedtls_debug_print_buf>
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016164:	695b      	ldr	r3, [r3, #20]
 8016166:	441a      	add	r2, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        auth_done++;
 801616e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016170:	3301      	adds	r3, #1
 8016172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016174:	e00a      	b.n	801618c <ssl_encrypt_buf+0x1b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016176:	4b3a      	ldr	r3, [pc, #232]	; (8016260 <ssl_encrypt_buf+0x288>)
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	f240 5346 	movw	r3, #1350	; 0x546
 801617e:	4a37      	ldr	r2, [pc, #220]	; (801625c <ssl_encrypt_buf+0x284>)
 8016180:	2101      	movs	r1, #1
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	f7f5 fb62 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016188:	4b36      	ldr	r3, [pc, #216]	; (8016264 <ssl_encrypt_buf+0x28c>)
 801618a:	e222      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 801618c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016190:	2b06      	cmp	r3, #6
 8016192:	d004      	beq.n	801619e <ssl_encrypt_buf+0x1c6>
 8016194:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016198:	2b08      	cmp	r3, #8
 801619a:	f040 8122 	bne.w	80163e2 <ssl_encrypt_buf+0x40a>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	7f1b      	ldrb	r3, [r3, #28]
 80161a6:	f003 0302 	and.w	r3, r3, #2
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d001      	beq.n	80161b2 <ssl_encrypt_buf+0x1da>
 80161ae:	2308      	movs	r3, #8
 80161b0:	e000      	b.n	80161b4 <ssl_encrypt_buf+0x1dc>
 80161b2:	2310      	movs	r3, #16
 80161b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80161be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161c2:	2208      	movs	r2, #8
 80161c4:	4618      	mov	r0, r3
 80161c6:	f007 ff41 	bl	801e04c <memcpy>
        add_data[8]  = ssl->out_msgtype;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80161d0:	b2db      	uxtb	r3, r3
 80161d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	6898      	ldr	r0, [r3, #8]
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	68d9      	ldr	r1, [r3, #12]
                           ssl->conf->transport, add_data + 9 );
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80161e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80161ea:	b2db      	uxtb	r3, r3
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80161ec:	461a      	mov	r2, r3
 80161ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161f2:	3309      	adds	r3, #9
 80161f4:	f003 fbfb 	bl	80199ee <mbedtls_ssl_write_version>
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80161fe:	0a1b      	lsrs	r3, r3, #8
 8016200:	b2db      	uxtb	r3, r3
 8016202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801620c:	b2db      	uxtb	r3, r3
 801620e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 8016212:	230d      	movs	r3, #13
 8016214:	9302      	str	r3, [sp, #8]
 8016216:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801621a:	9301      	str	r3, [sp, #4]
 801621c:	4b16      	ldr	r3, [pc, #88]	; (8016278 <ssl_encrypt_buf+0x2a0>)
 801621e:	9300      	str	r3, [sp, #0]
 8016220:	f240 5384 	movw	r3, #1412	; 0x584
 8016224:	4a0d      	ldr	r2, [pc, #52]	; (801625c <ssl_encrypt_buf+0x284>)
 8016226:	2104      	movs	r1, #4
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f7f5 fc01 	bl	800ba30 <mbedtls_debug_print_buf>
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016232:	68da      	ldr	r2, [r3, #12]
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016238:	691b      	ldr	r3, [r3, #16]
 801623a:	1ad3      	subs	r3, r2, r3
 801623c:	2b08      	cmp	r3, #8
 801623e:	d01d      	beq.n	801627c <ssl_encrypt_buf+0x2a4>
        {
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016240:	4b07      	ldr	r3, [pc, #28]	; (8016260 <ssl_encrypt_buf+0x288>)
 8016242:	9300      	str	r3, [sp, #0]
 8016244:	f240 538d 	movw	r3, #1421	; 0x58d
 8016248:	4a04      	ldr	r2, [pc, #16]	; (801625c <ssl_encrypt_buf+0x284>)
 801624a:	2101      	movs	r1, #1
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f7f5 fafd 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016252:	4b04      	ldr	r3, [pc, #16]	; (8016264 <ssl_encrypt_buf+0x28c>)
 8016254:	e1bd      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
 8016256:	bf00      	nop
 8016258:	08022e3c 	.word	0x08022e3c
 801625c:	08022c14 	.word	0x08022c14
 8016260:	08022cb8 	.word	0x08022cb8
 8016264:	ffff9400 	.word	0xffff9400
 8016268:	08022e4c 	.word	0x08022e4c
 801626c:	08022e6c 	.word	0x08022e6c
 8016270:	ffff8f00 	.word	0xffff8f00
 8016274:	08022e94 	.word	0x08022e94
 8016278:	08022ea4 	.word	0x08022ea4
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016280:	f103 0218 	add.w	r2, r3, #24
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016288:	691b      	ldr	r3, [r3, #16]
 801628a:	18d0      	adds	r0, r2, r3
                             ssl->out_ctr, 8 );
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 8016292:	2208      	movs	r2, #8
 8016294:	4619      	mov	r1, r3
 8016296:	f007 fed9 	bl	801e04c <memcpy>
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80162a6:	2208      	movs	r2, #8
 80162a8:	4619      	mov	r1, r3
 80162aa:	f007 fecf 	bl	801e04c <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80162b4:	687a      	ldr	r2, [r7, #4]
 80162b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80162b8:	68d1      	ldr	r1, [r2, #12]
 80162ba:	687a      	ldr	r2, [r7, #4]
 80162bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80162be:	6912      	ldr	r2, [r2, #16]
 80162c0:	1a8a      	subs	r2, r1, r2
 80162c2:	9202      	str	r2, [sp, #8]
 80162c4:	9301      	str	r3, [sp, #4]
 80162c6:	4b76      	ldr	r3, [pc, #472]	; (80164a0 <ssl_encrypt_buf+0x4c8>)
 80162c8:	9300      	str	r3, [sp, #0]
 80162ca:	f240 5395 	movw	r3, #1429	; 0x595
 80162ce:	4a75      	ldr	r2, [pc, #468]	; (80164a4 <ssl_encrypt_buf+0x4cc>)
 80162d0:	2104      	movs	r1, #4
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f7f5 fbac 	bl	800ba30 <mbedtls_debug_print_buf>
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80162de:	64fb      	str	r3, [r7, #76]	; 0x4c
        enc_msglen = ssl->out_msglen;
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80162e6:	64bb      	str	r3, [r7, #72]	; 0x48
        ssl->out_msglen += ssl->transform_out->ivlen -
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162f2:	68d9      	ldr	r1, [r3, #12]
                           ssl->transform_out->fixed_ivlen;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162f8:	691b      	ldr	r3, [r3, #16]
        ssl->out_msglen += ssl->transform_out->ivlen -
 80162fa:	1acb      	subs	r3, r1, r3
 80162fc:	441a      	add	r2, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801630a:	2200      	movs	r2, #0
 801630c:	9202      	str	r2, [sp, #8]
 801630e:	9301      	str	r3, [sp, #4]
 8016310:	4b65      	ldr	r3, [pc, #404]	; (80164a8 <ssl_encrypt_buf+0x4d0>)
 8016312:	9300      	str	r3, [sp, #0]
 8016314:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8016318:	4a62      	ldr	r2, [pc, #392]	; (80164a4 <ssl_encrypt_buf+0x4cc>)
 801631a:	2103      	movs	r1, #3
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f7f5 fa95 	bl	800b84c <mbedtls_debug_print_msg>
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016326:	f103 0050 	add.w	r0, r3, #80	; 0x50
                                         ssl->transform_out->iv_enc,
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801632e:	f103 0118 	add.w	r1, r3, #24
                                         ssl->transform_out->ivlen,
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 8016336:	68dc      	ldr	r4, [r3, #12]
 8016338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801633a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801633c:	4413      	add	r3, r2
 801633e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8016342:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8016346:	9206      	str	r2, [sp, #24]
 8016348:	9305      	str	r3, [sp, #20]
 801634a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801634e:	9304      	str	r3, [sp, #16]
 8016350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016352:	9303      	str	r3, [sp, #12]
 8016354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016356:	9302      	str	r3, [sp, #8]
 8016358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801635a:	9301      	str	r3, [sp, #4]
 801635c:	230d      	movs	r3, #13
 801635e:	9300      	str	r3, [sp, #0]
 8016360:	462b      	mov	r3, r5
 8016362:	4622      	mov	r2, r4
 8016364:	f7f5 f906 	bl	800b574 <mbedtls_cipher_auth_encrypt>
 8016368:	6478      	str	r0, [r7, #68]	; 0x44
 801636a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801636c:	2b00      	cmp	r3, #0
 801636e:	d00c      	beq.n	801638a <ssl_encrypt_buf+0x3b2>
                                         add_data, 13,
                                         enc_msg, enc_msglen,
                                         enc_msg, &olen,
                                         enc_msg + enc_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 8016370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016372:	9301      	str	r3, [sp, #4]
 8016374:	4b4d      	ldr	r3, [pc, #308]	; (80164ac <ssl_encrypt_buf+0x4d4>)
 8016376:	9300      	str	r3, [sp, #0]
 8016378:	f240 53af 	movw	r3, #1455	; 0x5af
 801637c:	4a49      	ldr	r2, [pc, #292]	; (80164a4 <ssl_encrypt_buf+0x4cc>)
 801637e:	2101      	movs	r1, #1
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f7f5 fae9 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 8016386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016388:	e123      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
        }

        if( olen != enc_msglen )
 801638a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801638c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801638e:	429a      	cmp	r2, r3
 8016390:	d00a      	beq.n	80163a8 <ssl_encrypt_buf+0x3d0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016392:	4b47      	ldr	r3, [pc, #284]	; (80164b0 <ssl_encrypt_buf+0x4d8>)
 8016394:	9300      	str	r3, [sp, #0]
 8016396:	f240 53b5 	movw	r3, #1461	; 0x5b5
 801639a:	4a42      	ldr	r2, [pc, #264]	; (80164a4 <ssl_encrypt_buf+0x4cc>)
 801639c:	2101      	movs	r1, #1
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f7f5 fa54 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80163a4:	4b43      	ldr	r3, [pc, #268]	; (80164b4 <ssl_encrypt_buf+0x4dc>)
 80163a6:	e114      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
        }

        ssl->out_msglen += taglen;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80163ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80163b2:	441a      	add	r2, r3
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        auth_done++;
 80163ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80163bc:	3301      	adds	r3, #1
 80163be:	66fb      	str	r3, [r7, #108]	; 0x6c

        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 80163c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80163c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80163c4:	4413      	add	r3, r2
 80163c6:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80163ca:	9202      	str	r2, [sp, #8]
 80163cc:	9301      	str	r3, [sp, #4]
 80163ce:	4b3a      	ldr	r3, [pc, #232]	; (80164b8 <ssl_encrypt_buf+0x4e0>)
 80163d0:	9300      	str	r3, [sp, #0]
 80163d2:	f240 53bc 	movw	r3, #1468	; 0x5bc
 80163d6:	4a33      	ldr	r2, [pc, #204]	; (80164a4 <ssl_encrypt_buf+0x4cc>)
 80163d8:	2104      	movs	r1, #4
 80163da:	6878      	ldr	r0, [r7, #4]
 80163dc:	f7f5 fb28 	bl	800ba30 <mbedtls_debug_print_buf>
    {
 80163e0:	e0df      	b.n	80165a2 <ssl_encrypt_buf+0x5ca>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 80163e2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80163e6:	2b02      	cmp	r3, #2
 80163e8:	f040 80d0 	bne.w	801658c <ssl_encrypt_buf+0x5b4>
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 80163ec:	2300      	movs	r3, #0
 80163ee:	62fb      	str	r3, [r7, #44]	; 0x2c

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163f4:	68d9      	ldr	r1, [r3, #12]
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80163fc:	3301      	adds	r3, #1
                 ssl->transform_out->ivlen;
 80163fe:	687a      	ldr	r2, [r7, #4]
 8016400:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016402:	68d2      	ldr	r2, [r2, #12]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 8016404:	fbb3 f0f2 	udiv	r0, r3, r2
 8016408:	fb00 f202 	mul.w	r2, r0, r2
 801640c:	1a9b      	subs	r3, r3, r2
 801640e:	1acb      	subs	r3, r1, r3
 8016410:	663b      	str	r3, [r7, #96]	; 0x60
        if( padlen == ssl->transform_out->ivlen )
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016416:	68db      	ldr	r3, [r3, #12]
 8016418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801641a:	429a      	cmp	r2, r3
 801641c:	d101      	bne.n	8016422 <ssl_encrypt_buf+0x44a>
            padlen = 0;
 801641e:	2300      	movs	r3, #0
 8016420:	663b      	str	r3, [r7, #96]	; 0x60

        for( i = 0; i <= padlen; i++ )
 8016422:	2300      	movs	r3, #0
 8016424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016426:	e00e      	b.n	8016446 <ssl_encrypt_buf+0x46e>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8016434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016436:	440b      	add	r3, r1
 8016438:	4413      	add	r3, r2
 801643a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801643c:	b2d2      	uxtb	r2, r2
 801643e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i <= padlen; i++ )
 8016440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016442:	3301      	adds	r3, #1
 8016444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016446:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801644a:	429a      	cmp	r2, r3
 801644c:	d9ec      	bls.n	8016428 <ssl_encrypt_buf+0x450>

        ssl->out_msglen += padlen + 1;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016456:	4413      	add	r3, r2
 8016458:	1c5a      	adds	r2, r3, #1
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        enc_msglen = ssl->out_msglen;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016466:	667b      	str	r3, [r7, #100]	; 0x64
        enc_msg = ssl->out_msg;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801646e:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	68db      	ldr	r3, [r3, #12]
 8016474:	2b01      	cmp	r3, #1
 8016476:	dd40      	ble.n	80164fa <ssl_encrypt_buf+0x522>
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	699b      	ldr	r3, [r3, #24]
 801647e:	687a      	ldr	r2, [r7, #4]
 8016480:	6812      	ldr	r2, [r2, #0]
 8016482:	69d0      	ldr	r0, [r2, #28]
 8016484:	687a      	ldr	r2, [r7, #4]
 8016486:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016488:	f102 0118 	add.w	r1, r2, #24
                                  ssl->transform_out->ivlen );
 801648c:	687a      	ldr	r2, [r7, #4]
 801648e:	6b92      	ldr	r2, [r2, #56]	; 0x38
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 8016490:	68d2      	ldr	r2, [r2, #12]
 8016492:	4798      	blx	r3
 8016494:	6578      	str	r0, [r7, #84]	; 0x54
            if( ret != 0 )
 8016496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016498:	2b00      	cmp	r3, #0
 801649a:	d00f      	beq.n	80164bc <ssl_encrypt_buf+0x4e4>
                return( ret );
 801649c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801649e:	e098      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
 80164a0:	08022ec4 	.word	0x08022ec4
 80164a4:	08022c14 	.word	0x08022c14
 80164a8:	08022ecc 	.word	0x08022ecc
 80164ac:	08022f08 	.word	0x08022f08
 80164b0:	08022cb8 	.word	0x08022cb8
 80164b4:	ffff9400 	.word	0xffff9400
 80164b8:	08022f24 	.word	0x08022f24

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164c6:	f103 0118 	add.w	r1, r3, #24
                    ssl->transform_out->ivlen );
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 80164ce:	68db      	ldr	r3, [r3, #12]
 80164d0:	461a      	mov	r2, r3
 80164d2:	f007 fdbb 	bl	801e04c <memcpy>

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80164dc:	66bb      	str	r3, [r7, #104]	; 0x68
            enc_msglen = ssl->out_msglen;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80164e4:	667b      	str	r3, [r7, #100]	; 0x64
            ssl->out_msglen += ssl->transform_out->ivlen;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164f0:	68db      	ldr	r3, [r3, #12]
 80164f2:	441a      	add	r2, r3
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016500:	687a      	ldr	r2, [r7, #4]
 8016502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016504:	68d2      	ldr	r2, [r2, #12]
 8016506:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016508:	3101      	adds	r1, #1
 801650a:	9103      	str	r1, [sp, #12]
 801650c:	9202      	str	r2, [sp, #8]
 801650e:	9301      	str	r3, [sp, #4]
 8016510:	4b32      	ldr	r3, [pc, #200]	; (80165dc <ssl_encrypt_buf+0x604>)
 8016512:	9300      	str	r3, [sp, #0]
 8016514:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8016518:	4a31      	ldr	r2, [pc, #196]	; (80165e0 <ssl_encrypt_buf+0x608>)
 801651a:	2103      	movs	r1, #3
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f7f5 f995 	bl	800b84c <mbedtls_debug_print_msg>
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016526:	f103 0050 	add.w	r0, r3, #80	; 0x50
                                   ssl->transform_out->iv_enc,
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801652e:	f103 0118 	add.w	r1, r3, #24
                                   ssl->transform_out->ivlen,
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 8016536:	68da      	ldr	r2, [r3, #12]
 8016538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801653c:	9302      	str	r3, [sp, #8]
 801653e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016540:	9301      	str	r3, [sp, #4]
 8016542:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016544:	9300      	str	r3, [sp, #0]
 8016546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016548:	f7f4 ffd0 	bl	800b4ec <mbedtls_cipher_crypt>
 801654c:	6578      	str	r0, [r7, #84]	; 0x54
 801654e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016550:	2b00      	cmp	r3, #0
 8016552:	d00c      	beq.n	801656e <ssl_encrypt_buf+0x596>
                                   enc_msg, enc_msglen,
                                   enc_msg, &olen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 8016554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016556:	9301      	str	r3, [sp, #4]
 8016558:	4b22      	ldr	r3, [pc, #136]	; (80165e4 <ssl_encrypt_buf+0x60c>)
 801655a:	9300      	str	r3, [sp, #0]
 801655c:	f240 53fb 	movw	r3, #1531	; 0x5fb
 8016560:	4a1f      	ldr	r2, [pc, #124]	; (80165e0 <ssl_encrypt_buf+0x608>)
 8016562:	2101      	movs	r1, #1
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f7f5 f9f7 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 801656a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801656c:	e031      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
        }

        if( enc_msglen != olen )
 801656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016570:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016572:	429a      	cmp	r2, r3
 8016574:	d015      	beq.n	80165a2 <ssl_encrypt_buf+0x5ca>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016576:	4b1c      	ldr	r3, [pc, #112]	; (80165e8 <ssl_encrypt_buf+0x610>)
 8016578:	9300      	str	r3, [sp, #0]
 801657a:	f240 6301 	movw	r3, #1537	; 0x601
 801657e:	4a18      	ldr	r2, [pc, #96]	; (80165e0 <ssl_encrypt_buf+0x608>)
 8016580:	2101      	movs	r1, #1
 8016582:	6878      	ldr	r0, [r7, #4]
 8016584:	f7f5 f962 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016588:	4b18      	ldr	r3, [pc, #96]	; (80165ec <ssl_encrypt_buf+0x614>)
 801658a:	e022      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
    }
    else
#endif /* MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801658c:	4b16      	ldr	r3, [pc, #88]	; (80165e8 <ssl_encrypt_buf+0x610>)
 801658e:	9300      	str	r3, [sp, #0]
 8016590:	f240 6337 	movw	r3, #1591	; 0x637
 8016594:	4a12      	ldr	r2, [pc, #72]	; (80165e0 <ssl_encrypt_buf+0x608>)
 8016596:	2101      	movs	r1, #1
 8016598:	6878      	ldr	r0, [r7, #4]
 801659a:	f7f5 f957 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801659e:	4b13      	ldr	r3, [pc, #76]	; (80165ec <ssl_encrypt_buf+0x614>)
 80165a0:	e017      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 80165a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80165a4:	2b01      	cmp	r3, #1
 80165a6:	d00a      	beq.n	80165be <ssl_encrypt_buf+0x5e6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80165a8:	4b0f      	ldr	r3, [pc, #60]	; (80165e8 <ssl_encrypt_buf+0x610>)
 80165aa:	9300      	str	r3, [sp, #0]
 80165ac:	f240 633e 	movw	r3, #1598	; 0x63e
 80165b0:	4a0b      	ldr	r2, [pc, #44]	; (80165e0 <ssl_encrypt_buf+0x608>)
 80165b2:	2101      	movs	r1, #1
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f7f5 f949 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80165ba:	4b0c      	ldr	r3, [pc, #48]	; (80165ec <ssl_encrypt_buf+0x614>)
 80165bc:	e009      	b.n	80165d2 <ssl_encrypt_buf+0x5fa>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 80165be:	4b0c      	ldr	r3, [pc, #48]	; (80165f0 <ssl_encrypt_buf+0x618>)
 80165c0:	9300      	str	r3, [sp, #0]
 80165c2:	f240 6342 	movw	r3, #1602	; 0x642
 80165c6:	4a06      	ldr	r2, [pc, #24]	; (80165e0 <ssl_encrypt_buf+0x608>)
 80165c8:	2102      	movs	r1, #2
 80165ca:	6878      	ldr	r0, [r7, #4]
 80165cc:	f7f5 f93e 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 80165d0:	2300      	movs	r3, #0
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	3770      	adds	r7, #112	; 0x70
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bdb0      	pop	{r4, r5, r7, pc}
 80165da:	bf00      	nop
 80165dc:	08022f38 	.word	0x08022f38
 80165e0:	08022c14 	.word	0x08022c14
 80165e4:	08022f88 	.word	0x08022f88
 80165e8:	08022cb8 	.word	0x08022cb8
 80165ec:	ffff9400 	.word	0xffff9400
 80165f0:	08022fa0 	.word	0x08022fa0

080165f4 <ssl_decrypt_buf>:

static int ssl_decrypt_buf( mbedtls_ssl_context *ssl )
{
 80165f4:	b5b0      	push	{r4, r5, r7, lr}
 80165f6:	b0ae      	sub	sp, #184	; 0xb8
 80165f8:	af08      	add	r7, sp, #32
 80165fa:	6078      	str	r0, [r7, #4]
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 80165fc:	2300      	movs	r3, #0
 80165fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 8016602:	2300      	movs	r3, #0
 8016604:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016608:	2301      	movs	r3, #1
 801660a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 801660e:	4b98      	ldr	r3, [pc, #608]	; (8016870 <ssl_decrypt_buf+0x27c>)
 8016610:	9300      	str	r3, [sp, #0]
 8016612:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8016616:	4a97      	ldr	r2, [pc, #604]	; (8016874 <ssl_decrypt_buf+0x280>)
 8016618:	2102      	movs	r1, #2
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f7f5 f916 	bl	800b84c <mbedtls_debug_print_msg>

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6a1b      	ldr	r3, [r3, #32]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d003      	beq.n	8016630 <ssl_decrypt_buf+0x3c>
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801662c:	2b00      	cmp	r3, #0
 801662e:	d10b      	bne.n	8016648 <ssl_decrypt_buf+0x54>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016630:	4b91      	ldr	r3, [pc, #580]	; (8016878 <ssl_decrypt_buf+0x284>)
 8016632:	9300      	str	r3, [sp, #0]
 8016634:	f240 6354 	movw	r3, #1620	; 0x654
 8016638:	4a8e      	ldr	r2, [pc, #568]	; (8016874 <ssl_decrypt_buf+0x280>)
 801663a:	2101      	movs	r1, #1
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f7f5 f905 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016642:	4b8e      	ldr	r3, [pc, #568]	; (801687c <ssl_decrypt_buf+0x288>)
 8016644:	f000 bc36 	b.w	8016eb4 <ssl_decrypt_buf+0x8c0>
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801664c:	3390      	adds	r3, #144	; 0x90
 801664e:	4618      	mov	r0, r3
 8016650:	f7fe fdf4 	bl	801523c <mbedtls_cipher_get_cipher_mode>
 8016654:	4603      	mov	r3, r0
 8016656:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    if( ssl->in_msglen < ssl->transform_in->minlen )
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016662:	689b      	ldr	r3, [r3, #8]
 8016664:	429a      	cmp	r2, r3
 8016666:	d212      	bcs.n	801668e <ssl_decrypt_buf+0x9a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016670:	6892      	ldr	r2, [r2, #8]
 8016672:	9202      	str	r2, [sp, #8]
 8016674:	9301      	str	r3, [sp, #4]
 8016676:	4b82      	ldr	r3, [pc, #520]	; (8016880 <ssl_decrypt_buf+0x28c>)
 8016678:	9300      	str	r3, [sp, #0]
 801667a:	f240 635c 	movw	r3, #1628	; 0x65c
 801667e:	4a7d      	ldr	r2, [pc, #500]	; (8016874 <ssl_decrypt_buf+0x280>)
 8016680:	2101      	movs	r1, #1
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f7f5 f8e2 	bl	800b84c <mbedtls_debug_print_msg>
                       ssl->in_msglen, ssl->transform_in->minlen ) );
        return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016688:	4b7e      	ldr	r3, [pc, #504]	; (8016884 <ssl_decrypt_buf+0x290>)
 801668a:	f000 bc13 	b.w	8016eb4 <ssl_decrypt_buf+0x8c0>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 801668e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016692:	2b06      	cmp	r3, #6
 8016694:	d004      	beq.n	80166a0 <ssl_decrypt_buf+0xac>
 8016696:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801669a:	2b08      	cmp	r3, #8
 801669c:	f040 8113 	bne.w	80168c6 <ssl_decrypt_buf+0x2d2>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	7f1b      	ldrb	r3, [r3, #28]
 80166a8:	f003 0302 	and.w	r3, r3, #2
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d001      	beq.n	80166b4 <ssl_decrypt_buf+0xc0>
 80166b0:	2308      	movs	r3, #8
 80166b2:	e000      	b.n	80166b6 <ssl_decrypt_buf+0xc2>
 80166b4:	2310      	movs	r3, #16
 80166b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166be:	68da      	ldr	r2, [r3, #12]
                                 ssl->transform_in->fixed_ivlen;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166c4:	691b      	ldr	r3, [r3, #16]
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 80166c6:	1ad3      	subs	r3, r2, r3
 80166c8:	65bb      	str	r3, [r7, #88]	; 0x58

        if( ssl->in_msglen < explicit_iv_len + taglen )
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80166ce:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 80166d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80166d4:	440b      	add	r3, r1
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d212      	bcs.n	8016700 <ssl_decrypt_buf+0x10c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166de:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80166e2:	9203      	str	r2, [sp, #12]
 80166e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80166e6:	9202      	str	r2, [sp, #8]
 80166e8:	9301      	str	r3, [sp, #4]
 80166ea:	4b67      	ldr	r3, [pc, #412]	; (8016888 <ssl_decrypt_buf+0x294>)
 80166ec:	9300      	str	r3, [sp, #0]
 80166ee:	f240 638b 	movw	r3, #1675	; 0x68b
 80166f2:	4a60      	ldr	r2, [pc, #384]	; (8016874 <ssl_decrypt_buf+0x280>)
 80166f4:	2101      	movs	r1, #1
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f7f5 f8a8 	bl	800b84c <mbedtls_debug_print_msg>
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 80166fc:	4b61      	ldr	r3, [pc, #388]	; (8016884 <ssl_decrypt_buf+0x290>)
 80166fe:	e3d9      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016706:	1ad2      	subs	r2, r2, r3
 8016708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801670c:	1ad3      	subs	r3, r2, r3
 801670e:	657b      	str	r3, [r7, #84]	; 0x54

        dec_msg = ssl->in_msg;
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016714:	653b      	str	r3, [r7, #80]	; 0x50
        dec_msg_result = ssl->in_msg;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801671a:	64fb      	str	r3, [r7, #76]	; 0x4c
        ssl->in_msglen = dec_msglen;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016720:	671a      	str	r2, [r3, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016726:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801672a:	2208      	movs	r2, #8
 801672c:	4618      	mov	r0, r3
 801672e:	f007 fc8d 	bl	801e04c <memcpy>
        add_data[8]  = ssl->in_msgtype;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016736:	b2db      	uxtb	r3, r3
 8016738:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6898      	ldr	r0, [r3, #8]
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	68d9      	ldr	r1, [r3, #12]
                           ssl->conf->transport, add_data + 9 );
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801674c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016750:	b2db      	uxtb	r3, r3
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8016752:	461a      	mov	r2, r3
 8016754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016758:	3309      	adds	r3, #9
 801675a:	f003 f948 	bl	80199ee <mbedtls_ssl_write_version>
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016762:	0a1b      	lsrs	r3, r3, #8
 8016764:	b2db      	uxtb	r3, r3
 8016766:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        add_data[12] = ssl->in_msglen & 0xFF;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801676e:	b2db      	uxtb	r3, r3
 8016770:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 8016774:	230d      	movs	r3, #13
 8016776:	9302      	str	r3, [sp, #8]
 8016778:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801677c:	9301      	str	r3, [sp, #4]
 801677e:	4b43      	ldr	r3, [pc, #268]	; (801688c <ssl_decrypt_buf+0x298>)
 8016780:	9300      	str	r3, [sp, #0]
 8016782:	f240 639d 	movw	r3, #1693	; 0x69d
 8016786:	4a3b      	ldr	r2, [pc, #236]	; (8016874 <ssl_decrypt_buf+0x280>)
 8016788:	2104      	movs	r1, #4
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	f7f5 f950 	bl	800ba30 <mbedtls_debug_print_buf>
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016794:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801679c:	691b      	ldr	r3, [r3, #16]
 801679e:	18d0      	adds	r0, r2, r3
                ssl->in_iv,
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6e19      	ldr	r1, [r3, #96]	; 0x60
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167a8:	68da      	ldr	r2, [r3, #12]
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167ae:	691b      	ldr	r3, [r3, #16]
        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 80167b0:	1ad3      	subs	r3, r2, r3
 80167b2:	461a      	mov	r2, r3
 80167b4:	f007 fc4a 	bl	801e04c <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167bc:	3328      	adds	r3, #40	; 0x28
 80167be:	687a      	ldr	r2, [r7, #4]
 80167c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80167c2:	68d2      	ldr	r2, [r2, #12]
 80167c4:	9202      	str	r2, [sp, #8]
 80167c6:	9301      	str	r3, [sp, #4]
 80167c8:	4b31      	ldr	r3, [pc, #196]	; (8016890 <ssl_decrypt_buf+0x29c>)
 80167ca:	9300      	str	r3, [sp, #0]
 80167cc:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80167d0:	4a28      	ldr	r2, [pc, #160]	; (8016874 <ssl_decrypt_buf+0x280>)
 80167d2:	2104      	movs	r1, #4
 80167d4:	6878      	ldr	r0, [r7, #4]
 80167d6:	f7f5 f92b 	bl	800ba30 <mbedtls_debug_print_buf>
                                     ssl->transform_in->ivlen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 80167da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80167dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80167de:	4413      	add	r3, r2
 80167e0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80167e4:	9202      	str	r2, [sp, #8]
 80167e6:	9301      	str	r3, [sp, #4]
 80167e8:	4b2a      	ldr	r3, [pc, #168]	; (8016894 <ssl_decrypt_buf+0x2a0>)
 80167ea:	9300      	str	r3, [sp, #0]
 80167ec:	f240 63a6 	movw	r3, #1702	; 0x6a6
 80167f0:	4a20      	ldr	r2, [pc, #128]	; (8016874 <ssl_decrypt_buf+0x280>)
 80167f2:	2104      	movs	r1, #4
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f7f5 f91b 	bl	800ba30 <mbedtls_debug_print_buf>

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167fe:	f103 0090 	add.w	r0, r3, #144	; 0x90
                                         ssl->transform_in->iv_dec,
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016806:	f103 0128 	add.w	r1, r3, #40	; 0x28
                                         ssl->transform_in->ivlen,
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 801680e:	68dc      	ldr	r4, [r3, #12]
                                         add_data, 13,
                                         dec_msg, dec_msglen,
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
 8016810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016814:	4413      	add	r3, r2
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 8016816:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801681a:	f107 0530 	add.w	r5, r7, #48	; 0x30
 801681e:	9206      	str	r2, [sp, #24]
 8016820:	9305      	str	r3, [sp, #20]
 8016822:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016826:	9304      	str	r3, [sp, #16]
 8016828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801682a:	9303      	str	r3, [sp, #12]
 801682c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801682e:	9302      	str	r3, [sp, #8]
 8016830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016832:	9301      	str	r3, [sp, #4]
 8016834:	230d      	movs	r3, #13
 8016836:	9300      	str	r3, [sp, #0]
 8016838:	462b      	mov	r3, r5
 801683a:	4622      	mov	r2, r4
 801683c:	f7f4 fec8 	bl	800b5d0 <mbedtls_cipher_auth_decrypt>
 8016840:	64b8      	str	r0, [r7, #72]	; 0x48
 8016842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016844:	2b00      	cmp	r3, #0
 8016846:	d029      	beq.n	801689c <ssl_decrypt_buf+0x2a8>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 8016848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801684a:	9301      	str	r3, [sp, #4]
 801684c:	4b12      	ldr	r3, [pc, #72]	; (8016898 <ssl_decrypt_buf+0x2a4>)
 801684e:	9300      	str	r3, [sp, #0]
 8016850:	f240 63b3 	movw	r3, #1715	; 0x6b3
 8016854:	4a07      	ldr	r2, [pc, #28]	; (8016874 <ssl_decrypt_buf+0x280>)
 8016856:	2101      	movs	r1, #1
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f7f5 f87d 	bl	800b958 <mbedtls_debug_print_ret>

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 801685e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016860:	f513 4fc6 	cmn.w	r3, #25344	; 0x6300
 8016864:	d101      	bne.n	801686a <ssl_decrypt_buf+0x276>
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016866:	4b07      	ldr	r3, [pc, #28]	; (8016884 <ssl_decrypt_buf+0x290>)
 8016868:	e324      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>

            return( ret );
 801686a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801686c:	e322      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
 801686e:	bf00      	nop
 8016870:	08022fb0 	.word	0x08022fb0
 8016874:	08022c14 	.word	0x08022c14
 8016878:	08022cb8 	.word	0x08022cb8
 801687c:	ffff9400 	.word	0xffff9400
 8016880:	08022fc0 	.word	0x08022fc0
 8016884:	ffff8e80 	.word	0xffff8e80
 8016888:	08022fe0 	.word	0x08022fe0
 801688c:	08022ea4 	.word	0x08022ea4
 8016890:	08022ec4 	.word	0x08022ec4
 8016894:	08023014 	.word	0x08023014
 8016898:	08023020 	.word	0x08023020
        }
        auth_done++;
 801689c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80168a0:	3301      	adds	r3, #1
 80168a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if( olen != dec_msglen )
 80168a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80168a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80168aa:	429a      	cmp	r2, r3
 80168ac:	f000 81a9 	beq.w	8016c02 <ssl_decrypt_buf+0x60e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80168b0:	4b9a      	ldr	r3, [pc, #616]	; (8016b1c <ssl_decrypt_buf+0x528>)
 80168b2:	9300      	str	r3, [sp, #0]
 80168b4:	f240 63be 	movw	r3, #1726	; 0x6be
 80168b8:	4a99      	ldr	r2, [pc, #612]	; (8016b20 <ssl_decrypt_buf+0x52c>)
 80168ba:	2101      	movs	r1, #1
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f7f4 ffc5 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80168c2:	4b98      	ldr	r3, [pc, #608]	; (8016b24 <ssl_decrypt_buf+0x530>)
 80168c4:	e2f6      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 80168c6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80168ca:	2b02      	cmp	r3, #2
 80168cc:	f040 818e 	bne.w	8016bec <ssl_decrypt_buf+0x5f8>
         */
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
 80168d0:	2300      	movs	r3, #0
 80168d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        size_t olen = 0;
 80168d6:	2300      	movs	r3, #0
 80168d8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	68db      	ldr	r3, [r3, #12]
 80168de:	2b01      	cmp	r3, #1
 80168e0:	dd07      	ble.n	80168f2 <ssl_decrypt_buf+0x2fe>
            minlen += ssl->transform_in->ivlen;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168e6:	68db      	ldr	r3, [r3, #12]
 80168e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80168ec:	4413      	add	r3, r2
 80168ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168fa:	68d9      	ldr	r1, [r3, #12]
 80168fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016900:	440b      	add	r3, r1
 8016902:	429a      	cmp	r2, r3
 8016904:	d30a      	bcc.n	801691c <ssl_decrypt_buf+0x328>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801690e:	6959      	ldr	r1, [r3, #20]
 8016910:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016914:	440b      	add	r3, r1
 8016916:	3301      	adds	r3, #1
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 8016918:	429a      	cmp	r2, r3
 801691a:	d215      	bcs.n	8016948 <ssl_decrypt_buf+0x354>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016920:	687a      	ldr	r2, [r7, #4]
 8016922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016924:	68d2      	ldr	r2, [r2, #12]
 8016926:	6879      	ldr	r1, [r7, #4]
 8016928:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801692a:	6949      	ldr	r1, [r1, #20]
 801692c:	9103      	str	r1, [sp, #12]
 801692e:	9202      	str	r2, [sp, #8]
 8016930:	9301      	str	r3, [sp, #4]
 8016932:	4b7d      	ldr	r3, [pc, #500]	; (8016b28 <ssl_decrypt_buf+0x534>)
 8016934:	9300      	str	r3, [sp, #0]
 8016936:	f240 63dd 	movw	r3, #1757	; 0x6dd
 801693a:	4a79      	ldr	r2, [pc, #484]	; (8016b20 <ssl_decrypt_buf+0x52c>)
 801693c:	2101      	movs	r1, #1
 801693e:	6878      	ldr	r0, [r7, #4]
 8016940:	f7f4 ff84 	bl	800b84c <mbedtls_debug_print_msg>
                                "+ 1 ) ( + expl IV )", ssl->in_msglen,
                                ssl->transform_in->ivlen,
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016944:	4b79      	ldr	r3, [pc, #484]	; (8016b2c <ssl_decrypt_buf+0x538>)
 8016946:	e2b5      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
        }

        dec_msglen = ssl->in_msglen;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801694c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        dec_msg = ssl->in_msg;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016954:	66fb      	str	r3, [r7, #108]	; 0x6c
        dec_msg_result = ssl->in_msg;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801695a:	66bb      	str	r3, [r7, #104]	; 0x68
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016960:	687a      	ldr	r2, [r7, #4]
 8016962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016964:	68d2      	ldr	r2, [r2, #12]
 8016966:	fbb3 f1f2 	udiv	r1, r3, r2
 801696a:	fb01 f202 	mul.w	r2, r1, r2
 801696e:	1a9b      	subs	r3, r3, r2
 8016970:	2b00      	cmp	r3, #0
 8016972:	d011      	beq.n	8016998 <ssl_decrypt_buf+0x3a4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016978:	687a      	ldr	r2, [r7, #4]
 801697a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801697c:	68d2      	ldr	r2, [r2, #12]
 801697e:	9202      	str	r2, [sp, #8]
 8016980:	9301      	str	r3, [sp, #4]
 8016982:	4b6b      	ldr	r3, [pc, #428]	; (8016b30 <ssl_decrypt_buf+0x53c>)
 8016984:	9300      	str	r3, [sp, #0]
 8016986:	f44f 63e3 	mov.w	r3, #1816	; 0x718
 801698a:	4a65      	ldr	r2, [pc, #404]	; (8016b20 <ssl_decrypt_buf+0x52c>)
 801698c:	2101      	movs	r1, #1
 801698e:	6878      	ldr	r0, [r7, #4]
 8016990:	f7f4 ff5c 	bl	800b84c <mbedtls_debug_print_msg>
                           ssl->in_msglen, ssl->transform_in->ivlen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016994:	4b65      	ldr	r3, [pc, #404]	; (8016b2c <ssl_decrypt_buf+0x538>)
 8016996:	e28d      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	68db      	ldr	r3, [r3, #12]
 801699c:	2b01      	cmp	r3, #1
 801699e:	dd2d      	ble.n	80169fc <ssl_decrypt_buf+0x408>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169a4:	68db      	ldr	r3, [r3, #12]
 80169a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80169aa:	1ad3      	subs	r3, r2, r3
 80169ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            ssl->in_msglen -= ssl->transform_in->ivlen;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169b8:	68db      	ldr	r3, [r3, #12]
 80169ba:	1ad2      	subs	r2, r2, r3
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	671a      	str	r2, [r3, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 80169c0:	2300      	movs	r3, #0
 80169c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80169c6:	e012      	b.n	80169ee <ssl_decrypt_buf+0x3fa>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80169cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80169d0:	4413      	add	r3, r2
 80169d2:	687a      	ldr	r2, [r7, #4]
 80169d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80169d6:	7819      	ldrb	r1, [r3, #0]
 80169d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80169dc:	4413      	add	r3, r2
 80169de:	3328      	adds	r3, #40	; 0x28
 80169e0:	460a      	mov	r2, r1
 80169e2:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 80169e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80169e8:	3301      	adds	r3, #1
 80169ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169f2:	68db      	ldr	r3, [r3, #12]
 80169f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80169f8:	429a      	cmp	r2, r3
 80169fa:	d3e5      	bcc.n	80169c8 <ssl_decrypt_buf+0x3d4>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a00:	f103 0090 	add.w	r0, r3, #144	; 0x90
                                   ssl->transform_in->iv_dec,
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a08:	f103 0128 	add.w	r1, r3, #40	; 0x28
                                   ssl->transform_in->ivlen,
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 8016a10:	68da      	ldr	r2, [r3, #12]
 8016a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a16:	9302      	str	r3, [sp, #8]
 8016a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016a1a:	9301      	str	r3, [sp, #4]
 8016a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016a20:	9300      	str	r3, [sp, #0]
 8016a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a24:	f7f4 fd62 	bl	800b4ec <mbedtls_cipher_crypt>
 8016a28:	6678      	str	r0, [r7, #100]	; 0x64
 8016a2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d00c      	beq.n	8016a4a <ssl_decrypt_buf+0x456>
                                   dec_msg, dec_msglen,
                                   dec_msg_result, &olen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 8016a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016a32:	9301      	str	r3, [sp, #4]
 8016a34:	4b3f      	ldr	r3, [pc, #252]	; (8016b34 <ssl_decrypt_buf+0x540>)
 8016a36:	9300      	str	r3, [sp, #0]
 8016a38:	f240 7331 	movw	r3, #1841	; 0x731
 8016a3c:	4a38      	ldr	r2, [pc, #224]	; (8016b20 <ssl_decrypt_buf+0x52c>)
 8016a3e:	2101      	movs	r1, #1
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f7f4 ff89 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 8016a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016a48:	e234      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
        }

        if( dec_msglen != olen )
 8016a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d00a      	beq.n	8016a6a <ssl_decrypt_buf+0x476>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016a54:	4b31      	ldr	r3, [pc, #196]	; (8016b1c <ssl_decrypt_buf+0x528>)
 8016a56:	9300      	str	r3, [sp, #0]
 8016a58:	f240 7337 	movw	r3, #1847	; 0x737
 8016a5c:	4a30      	ldr	r2, [pc, #192]	; (8016b20 <ssl_decrypt_buf+0x52c>)
 8016a5e:	2101      	movs	r1, #1
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7f4 fef3 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016a66:	4b2f      	ldr	r3, [pc, #188]	; (8016b24 <ssl_decrypt_buf+0x530>)
 8016a68:	e224      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a72:	3b01      	subs	r3, #1
 8016a74:	4413      	add	r3, r2
 8016a76:	781b      	ldrb	r3, [r3, #0]
 8016a78:	3301      	adds	r3, #1
 8016a7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a86:	6959      	ldr	r1, [r3, #20]
 8016a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a8c:	440b      	add	r3, r1
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d209      	bcs.n	8016aa6 <ssl_decrypt_buf+0x4b2>
 8016a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d105      	bne.n	8016aa6 <ssl_decrypt_buf+0x4b2>
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            correct = 0;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	68db      	ldr	r3, [r3, #12]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	f340 8093 	ble.w	8016bd6 <ssl_decrypt_buf+0x5e2>
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016ab4:	2301      	movs	r3, #1
 8016ab6:	67bb      	str	r3, [r7, #120]	; 0x78
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016ac0:	1ad3      	subs	r3, r2, r3
 8016ac2:	3b01      	subs	r3, #1
 8016ac4:	663b      	str	r3, [r7, #96]	; 0x60
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( ssl->in_msglen >= padlen + 1 );
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016ace:	3301      	adds	r3, #1
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	bf2c      	ite	cs
 8016ad4:	2301      	movcs	r3, #1
 8016ad6:	2300      	movcc	r3, #0
 8016ad8:	b2db      	uxtb	r3, r3
 8016ada:	461a      	mov	r2, r3
 8016adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016ae0:	4013      	ands	r3, r2
 8016ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016aea:	695b      	ldr	r3, [r3, #20]
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 8016aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016af0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016af2:	429a      	cmp	r2, r3
 8016af4:	bf34      	ite	cc
 8016af6:	2301      	movcc	r3, #1
 8016af8:	2300      	movcs	r3, #0
 8016afa:	b2db      	uxtb	r3, r3
 8016afc:	461a      	mov	r2, r3
 8016afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b02:	4013      	ands	r3, r2
 8016b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            padding_idx *= correct;
 8016b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016b0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016b0e:	fb02 f303 	mul.w	r3, r2, r3
 8016b12:	663b      	str	r3, [r7, #96]	; 0x60

            for( i = 1; i <= 256; i++ )
 8016b14:	2301      	movs	r3, #1
 8016b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016b1a:	e037      	b.n	8016b8c <ssl_decrypt_buf+0x598>
 8016b1c:	08022cb8 	.word	0x08022cb8
 8016b20:	08022c14 	.word	0x08022c14
 8016b24:	ffff9400 	.word	0xffff9400
 8016b28:	0802303c 	.word	0x0802303c
 8016b2c:	ffff8e80 	.word	0xffff8e80
 8016b30:	0802307c 	.word	0x0802307c
 8016b34:	08022f88 	.word	0x08022f88
            {
                real_count &= ( i <= padlen );
 8016b38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016b40:	429a      	cmp	r2, r3
 8016b42:	bf94      	ite	ls
 8016b44:	2301      	movls	r3, #1
 8016b46:	2300      	movhi	r3, #0
 8016b48:	b2db      	uxtb	r3, r3
 8016b4a:	461a      	mov	r2, r3
 8016b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b4e:	4013      	ands	r3, r2
 8016b50:	67bb      	str	r3, [r7, #120]	; 0x78
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016b56:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b5c:	440b      	add	r3, r1
 8016b5e:	4413      	add	r3, r2
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	461a      	mov	r2, r3
 8016b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016b68:	3b01      	subs	r3, #1
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	bf0c      	ite	eq
 8016b6e:	2301      	moveq	r3, #1
 8016b70:	2300      	movne	r3, #0
 8016b72:	b2db      	uxtb	r3, r3
 8016b74:	461a      	mov	r2, r3
                pad_count += real_count *
 8016b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b78:	fb02 f303 	mul.w	r3, r2, r3
 8016b7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016b7e:	4413      	add	r3, r2
 8016b80:	67fb      	str	r3, [r7, #124]	; 0x7c
            for( i = 1; i <= 256; i++ )
 8016b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b86:	3301      	adds	r3, #1
 8016b88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b94:	d9d0      	bls.n	8016b38 <ssl_decrypt_buf+0x544>
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 8016b96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016b9c:	429a      	cmp	r2, r3
 8016b9e:	bf0c      	ite	eq
 8016ba0:	2301      	moveq	r3, #1
 8016ba2:	2300      	movne	r3, #0
 8016ba4:	b2db      	uxtb	r3, r3
 8016ba6:	461a      	mov	r2, r3
 8016ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016bac:	4013      	ands	r3, r2
 8016bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 8016bb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016bb6:	4613      	mov	r3, r2
 8016bb8:	025b      	lsls	r3, r3, #9
 8016bba:	1a9b      	subs	r3, r3, r2
 8016bbc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016bc0:	4013      	ands	r3, r2
 8016bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016bce:	1ad2      	subs	r2, r2, r3
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	671a      	str	r2, [r3, #112]	; 0x70
 8016bd4:	e016      	b.n	8016c04 <ssl_decrypt_buf+0x610>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016bd6:	4ba0      	ldr	r3, [pc, #640]	; (8016e58 <ssl_decrypt_buf+0x864>)
 8016bd8:	9300      	str	r3, [sp, #0]
 8016bda:	f240 7391 	movw	r3, #1937	; 0x791
 8016bde:	4a9f      	ldr	r2, [pc, #636]	; (8016e5c <ssl_decrypt_buf+0x868>)
 8016be0:	2101      	movs	r1, #1
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	f7f4 fe32 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016be8:	4b9d      	ldr	r3, [pc, #628]	; (8016e60 <ssl_decrypt_buf+0x86c>)
 8016bea:	e163      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
    }
    else
#endif /* MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016bec:	4b9a      	ldr	r3, [pc, #616]	; (8016e58 <ssl_decrypt_buf+0x864>)
 8016bee:	9300      	str	r3, [sp, #0]
 8016bf0:	f240 739b 	movw	r3, #1947	; 0x79b
 8016bf4:	4a99      	ldr	r2, [pc, #612]	; (8016e5c <ssl_decrypt_buf+0x868>)
 8016bf6:	2101      	movs	r1, #1
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f7f4 fe27 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016bfe:	4b98      	ldr	r3, [pc, #608]	; (8016e60 <ssl_decrypt_buf+0x86c>)
 8016c00:	e158      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
    {
 8016c02:	bf00      	nop
    }

    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c08:	687a      	ldr	r2, [r7, #4]
 8016c0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8016c0c:	9202      	str	r2, [sp, #8]
 8016c0e:	9301      	str	r3, [sp, #4]
 8016c10:	4b94      	ldr	r3, [pc, #592]	; (8016e64 <ssl_decrypt_buf+0x870>)
 8016c12:	9300      	str	r3, [sp, #0]
 8016c14:	f240 739f 	movw	r3, #1951	; 0x79f
 8016c18:	4a90      	ldr	r2, [pc, #576]	; (8016e5c <ssl_decrypt_buf+0x868>)
 8016c1a:	2104      	movs	r1, #4
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	f7f4 ff07 	bl	800ba30 <mbedtls_debug_print_buf>
    /*
     * Authenticate if not done yet.
     * Compute the MAC regardless of the padding result (RFC4346, CBCTIME).
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
 8016c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	f040 80cc 	bne.w	8016dc4 <ssl_decrypt_buf+0x7d0>
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c34:	695b      	ldr	r3, [r3, #20]
 8016c36:	1ad2      	subs	r2, r2, r3
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	671a      	str	r2, [r3, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c40:	0a1a      	lsrs	r2, r3, #8
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c46:	b2d2      	uxtb	r2, r2
 8016c48:	701a      	strb	r2, [r3, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c52:	3301      	adds	r3, #1
 8016c54:	b2d2      	uxtb	r2, r2
 8016c56:	701a      	strb	r2, [r3, #0]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	68db      	ldr	r3, [r3, #12]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	f340 8098 	ble.w	8016d92 <ssl_decrypt_buf+0x79e>
             *
             * We use ( ( Lx + 8 ) / 64 ) to handle 'negative Lx' values
             * correctly. (We round down instead of up, so -56 is the correct
             * value for our calculations instead of -55)
             */
            size_t j, extra_run = 0;
 8016c62:	2300      	movs	r3, #0
 8016c64:	647b      	str	r3, [r7, #68]	; 0x44
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016c6e:	4413      	add	r3, r2
 8016c70:	3315      	adds	r3, #21
 8016c72:	099a      	lsrs	r2, r3, #6
                        ( 13 + ssl->in_msglen          + 8 ) / 64;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c78:	3315      	adds	r3, #21
 8016c7a:	099b      	lsrs	r3, r3, #6
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 8016c7c:	1ad3      	subs	r3, r2, r3
 8016c7e:	647b      	str	r3, [r7, #68]	; 0x44

            extra_run &= correct * 0xFF;
 8016c80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016c84:	4613      	mov	r3, r2
 8016c86:	021b      	lsls	r3, r3, #8
 8016c88:	1a9b      	subs	r3, r3, r2
 8016c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016c8c:	4013      	ands	r3, r2
 8016c8e:	647b      	str	r3, [r7, #68]	; 0x44

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c94:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c9c:	2208      	movs	r2, #8
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	f7f7 fb76 	bl	800e390 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ca8:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016cb0:	2203      	movs	r2, #3
 8016cb2:	4619      	mov	r1, r3
 8016cb4:	f7f7 fb6c 	bl	800e390 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cbc:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cc4:	2202      	movs	r2, #2
 8016cc6:	4619      	mov	r1, r3
 8016cc8:	f7f7 fb62 	bl	800e390 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cd0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cdc:	461a      	mov	r2, r3
 8016cde:	f7f7 fb57 	bl	800e390 <mbedtls_md_hmac_update>
                             ssl->in_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ce6:	3344      	adds	r3, #68	; 0x44
 8016ce8:	f107 020c 	add.w	r2, r7, #12
 8016cec:	4611      	mov	r1, r2
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7f7 fb70 	bl	800e3d4 <mbedtls_md_hmac_finish>
            /* Call mbedtls_md_process at least once due to cache attacks */
            for( j = 0; j < extra_run + 1; j++ )
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	677b      	str	r3, [r7, #116]	; 0x74
 8016cf8:	e00c      	b.n	8016d14 <ssl_decrypt_buf+0x720>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cfe:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016d06:	4619      	mov	r1, r3
 8016d08:	4610      	mov	r0, r2
 8016d0a:	f7f7 fbfb 	bl	800e504 <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 8016d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016d10:	3301      	adds	r3, #1
 8016d12:	677b      	str	r3, [r7, #116]	; 0x74
 8016d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d16:	3301      	adds	r3, #1
 8016d18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	d3ed      	bcc.n	8016cfa <ssl_decrypt_buf+0x706>

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d22:	3344      	adds	r3, #68	; 0x44
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7f7 fbbb 	bl	800e4a0 <mbedtls_md_hmac_reset>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d2e:	695b      	ldr	r3, [r3, #20]
 8016d30:	9302      	str	r3, [sp, #8]
 8016d32:	f107 030c 	add.w	r3, r7, #12
 8016d36:	9301      	str	r3, [sp, #4]
 8016d38:	4b4b      	ldr	r3, [pc, #300]	; (8016e68 <ssl_decrypt_buf+0x874>)
 8016d3a:	9300      	str	r3, [sp, #0]
 8016d3c:	f240 73e6 	movw	r3, #2022	; 0x7e6
 8016d40:	4a46      	ldr	r2, [pc, #280]	; (8016e5c <ssl_decrypt_buf+0x868>)
 8016d42:	2104      	movs	r1, #4
 8016d44:	6878      	ldr	r0, [r7, #4]
 8016d46:	f7f4 fe73 	bl	800ba30 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d52:	4413      	add	r3, r2
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016d58:	6952      	ldr	r2, [r2, #20]
 8016d5a:	9202      	str	r2, [sp, #8]
 8016d5c:	9301      	str	r3, [sp, #4]
 8016d5e:	4b43      	ldr	r3, [pc, #268]	; (8016e6c <ssl_decrypt_buf+0x878>)
 8016d60:	9300      	str	r3, [sp, #0]
 8016d62:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8016d66:	4a3d      	ldr	r2, [pc, #244]	; (8016e5c <ssl_decrypt_buf+0x868>)
 8016d68:	2104      	movs	r1, #4
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f7f4 fe60 	bl	800ba30 <mbedtls_debug_print_buf>
                               ssl->transform_in->maclen );

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d78:	18d0      	adds	r0, r2, r3
                                      ssl->transform_in->maclen ) != 0 )
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8016d7e:	695a      	ldr	r2, [r3, #20]
 8016d80:	f107 030c 	add.w	r3, r7, #12
 8016d84:	4619      	mov	r1, r3
 8016d86:	f7fe fab4 	bl	80152f2 <mbedtls_ssl_safer_memcmp>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d00e      	beq.n	8016dae <ssl_decrypt_buf+0x7ba>
 8016d90:	e00a      	b.n	8016da8 <ssl_decrypt_buf+0x7b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016d92:	4b31      	ldr	r3, [pc, #196]	; (8016e58 <ssl_decrypt_buf+0x864>)
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	f240 73e2 	movw	r3, #2018	; 0x7e2
 8016d9a:	4a30      	ldr	r2, [pc, #192]	; (8016e5c <ssl_decrypt_buf+0x868>)
 8016d9c:	2101      	movs	r1, #1
 8016d9e:	6878      	ldr	r0, [r7, #4]
 8016da0:	f7f4 fd54 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016da4:	4b2e      	ldr	r3, [pc, #184]	; (8016e60 <ssl_decrypt_buf+0x86c>)
 8016da6:	e085      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
#endif
            correct = 0;
 8016da8:	2300      	movs	r3, #0
 8016daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }
        auth_done++;
 8016dae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016db2:	3301      	adds	r3, #1
 8016db4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 8016db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d101      	bne.n	8016dc4 <ssl_decrypt_buf+0x7d0>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016dc0:	4b2b      	ldr	r3, [pc, #172]	; (8016e70 <ssl_decrypt_buf+0x87c>)
 8016dc2:	e077      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
    }
#endif /* SSL_SOME_MODES_USE_MAC */

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 8016dc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016dc8:	2b01      	cmp	r3, #1
 8016dca:	d00a      	beq.n	8016de2 <ssl_decrypt_buf+0x7ee>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016dcc:	4b22      	ldr	r3, [pc, #136]	; (8016e58 <ssl_decrypt_buf+0x864>)
 8016dce:	9300      	str	r3, [sp, #0]
 8016dd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8016dd4:	4a21      	ldr	r2, [pc, #132]	; (8016e5c <ssl_decrypt_buf+0x868>)
 8016dd6:	2101      	movs	r1, #1
 8016dd8:	6878      	ldr	r0, [r7, #4]
 8016dda:	f7f4 fd37 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016dde:	4b20      	ldr	r3, [pc, #128]	; (8016e60 <ssl_decrypt_buf+0x86c>)
 8016de0:	e068      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
    }

    if( ssl->in_msglen == 0 )
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d113      	bne.n	8016e12 <ssl_decrypt_buf+0x81e>
    {
        ssl->nb_zero++;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016dee:	1c5a      	adds	r2, r3, #1
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	67da      	str	r2, [r3, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016df8:	2b03      	cmp	r3, #3
 8016dfa:	dd0d      	ble.n	8016e18 <ssl_decrypt_buf+0x824>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 8016dfc:	4b1d      	ldr	r3, [pc, #116]	; (8016e74 <ssl_decrypt_buf+0x880>)
 8016dfe:	9300      	str	r3, [sp, #0]
 8016e00:	f640 030d 	movw	r3, #2061	; 0x80d
 8016e04:	4a15      	ldr	r2, [pc, #84]	; (8016e5c <ssl_decrypt_buf+0x868>)
 8016e06:	2101      	movs	r1, #1
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f7f4 fd1f 	bl	800b84c <mbedtls_debug_print_msg>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016e0e:	4b18      	ldr	r3, [pc, #96]	; (8016e70 <ssl_decrypt_buf+0x87c>)
 8016e10:	e050      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
        }
    }
    else
        ssl->nb_zero = 0;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2200      	movs	r2, #0
 8016e16:	67da      	str	r2, [r3, #124]	; 0x7c
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8016e18:	2308      	movs	r3, #8
 8016e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016e1e:	e011      	b.n	8016e44 <ssl_decrypt_buf+0x850>
            if( ++ssl->in_ctr[i - 1] != 0 )
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e28:	3b01      	subs	r3, #1
 8016e2a:	4413      	add	r3, r2
 8016e2c:	781a      	ldrb	r2, [r3, #0]
 8016e2e:	3201      	adds	r2, #1
 8016e30:	b2d2      	uxtb	r2, r2
 8016e32:	701a      	strb	r2, [r3, #0]
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d11e      	bne.n	8016e78 <ssl_decrypt_buf+0x884>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8016e3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e3e:	3b01      	subs	r3, #1
 8016e40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016e44:	6878      	ldr	r0, [r7, #4]
 8016e46:	f7fe fa9f 	bl	8015388 <ssl_ep_len>
 8016e4a:	4602      	mov	r2, r0
 8016e4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e50:	4293      	cmp	r3, r2
 8016e52:	d8e5      	bhi.n	8016e20 <ssl_decrypt_buf+0x82c>
 8016e54:	e011      	b.n	8016e7a <ssl_decrypt_buf+0x886>
 8016e56:	bf00      	nop
 8016e58:	08022cb8 	.word	0x08022cb8
 8016e5c:	08022c14 	.word	0x08022c14
 8016e60:	ffff9400 	.word	0xffff9400
 8016e64:	0802309c 	.word	0x0802309c
 8016e68:	080230b8 	.word	0x080230b8
 8016e6c:	080230c8 	.word	0x080230c8
 8016e70:	ffff8e80 	.word	0xffff8e80
 8016e74:	080230d8 	.word	0x080230d8
                break;
 8016e78:	bf00      	nop

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f7fe fa84 	bl	8015388 <ssl_ep_len>
 8016e80:	4602      	mov	r2, r0
 8016e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e86:	4293      	cmp	r3, r2
 8016e88:	d10a      	bne.n	8016ea0 <ssl_decrypt_buf+0x8ac>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 8016e8a:	4b0c      	ldr	r3, [pc, #48]	; (8016ebc <ssl_decrypt_buf+0x8c8>)
 8016e8c:	9300      	str	r3, [sp, #0]
 8016e8e:	f640 0324 	movw	r3, #2084	; 0x824
 8016e92:	4a0b      	ldr	r2, [pc, #44]	; (8016ec0 <ssl_decrypt_buf+0x8cc>)
 8016e94:	2101      	movs	r1, #1
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f7f4 fcd8 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8016e9c:	4b09      	ldr	r3, [pc, #36]	; (8016ec4 <ssl_decrypt_buf+0x8d0>)
 8016e9e:	e009      	b.n	8016eb4 <ssl_decrypt_buf+0x8c0>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 8016ea0:	4b09      	ldr	r3, [pc, #36]	; (8016ec8 <ssl_decrypt_buf+0x8d4>)
 8016ea2:	9300      	str	r3, [sp, #0]
 8016ea4:	f640 0329 	movw	r3, #2089	; 0x829
 8016ea8:	4a05      	ldr	r2, [pc, #20]	; (8016ec0 <ssl_decrypt_buf+0x8cc>)
 8016eaa:	2102      	movs	r1, #2
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f7f4 fccd 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8016eb2:	2300      	movs	r3, #0
}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	3798      	adds	r7, #152	; 0x98
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bdb0      	pop	{r4, r5, r7, pc}
 8016ebc:	08023118 	.word	0x08023118
 8016ec0:	08022c14 	.word	0x08022c14
 8016ec4:	ffff9480 	.word	0xffff9480
 8016ec8:	0802313c 	.word	0x0802313c

08016ecc <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 8016ecc:	b590      	push	{r4, r7, lr}
 8016ece:	b089      	sub	sp, #36	; 0x24
 8016ed0:	af04      	add	r7, sp, #16
 8016ed2:	6078      	str	r0, [r7, #4]
 8016ed4:	6039      	str	r1, [r7, #0]
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 8016ed6:	4b55      	ldr	r3, [pc, #340]	; (801702c <mbedtls_ssl_fetch_input+0x160>)
 8016ed8:	9300      	str	r3, [sp, #0]
 8016eda:	f640 03c6 	movw	r3, #2246	; 0x8c6
 8016ede:	4a54      	ldr	r2, [pc, #336]	; (8017030 <mbedtls_ssl_fetch_input+0x164>)
 8016ee0:	2102      	movs	r1, #2
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f7f4 fcb2 	bl	800b84c <mbedtls_debug_print_msg>

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	695b      	ldr	r3, [r3, #20]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d10e      	bne.n	8016f0e <mbedtls_ssl_fetch_input+0x42>
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	699b      	ldr	r3, [r3, #24]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d10a      	bne.n	8016f0e <mbedtls_ssl_fetch_input+0x42>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 8016ef8:	4b4e      	ldr	r3, [pc, #312]	; (8017034 <mbedtls_ssl_fetch_input+0x168>)
 8016efa:	9300      	str	r3, [sp, #0]
 8016efc:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8016f00:	4a4b      	ldr	r2, [pc, #300]	; (8017030 <mbedtls_ssl_fetch_input+0x164>)
 8016f02:	2101      	movs	r1, #1
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f7f4 fca1 	bl	800b84c <mbedtls_debug_print_msg>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8016f0a:	4b4b      	ldr	r3, [pc, #300]	; (8017038 <mbedtls_ssl_fetch_input+0x16c>)
 8016f0c:	e08a      	b.n	8017024 <mbedtls_ssl_fetch_input+0x158>
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f16:	1ad3      	subs	r3, r2, r3
 8016f18:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 8016f1c:	331d      	adds	r3, #29
 8016f1e:	683a      	ldr	r2, [r7, #0]
 8016f20:	429a      	cmp	r2, r3
 8016f22:	d90a      	bls.n	8016f3a <mbedtls_ssl_fetch_input+0x6e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 8016f24:	4b45      	ldr	r3, [pc, #276]	; (801703c <mbedtls_ssl_fetch_input+0x170>)
 8016f26:	9300      	str	r3, [sp, #0]
 8016f28:	f640 03d1 	movw	r3, #2257	; 0x8d1
 8016f2c:	4a40      	ldr	r2, [pc, #256]	; (8017030 <mbedtls_ssl_fetch_input+0x164>)
 8016f2e:	2101      	movs	r1, #1
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	f7f4 fc8b 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8016f36:	4b40      	ldr	r3, [pc, #256]	; (8017038 <mbedtls_ssl_fetch_input+0x16c>)
 8016f38:	e074      	b.n	8017024 <mbedtls_ssl_fetch_input+0x158>
        ssl->in_left = ret;
    }
    else
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f3e:	683a      	ldr	r2, [r7, #0]
 8016f40:	9202      	str	r2, [sp, #8]
 8016f42:	9301      	str	r3, [sp, #4]
 8016f44:	4b3e      	ldr	r3, [pc, #248]	; (8017040 <mbedtls_ssl_fetch_input+0x174>)
 8016f46:	9300      	str	r3, [sp, #0]
 8016f48:	f640 1363 	movw	r3, #2403	; 0x963
 8016f4c:	4a38      	ldr	r2, [pc, #224]	; (8017030 <mbedtls_ssl_fetch_input+0x164>)
 8016f4e:	2102      	movs	r1, #2
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f7f4 fc7b 	bl	800b84c <mbedtls_debug_print_msg>
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 8016f56:	e056      	b.n	8017006 <mbedtls_ssl_fetch_input+0x13a>
        {
            len = nb_want - ssl->in_left;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f5c:	683a      	ldr	r2, [r7, #0]
 8016f5e:	1ad3      	subs	r3, r2, r3
 8016f60:	60bb      	str	r3, [r7, #8]

            if( ssl_check_timer( ssl ) != 0 )
 8016f62:	6878      	ldr	r0, [r7, #4]
 8016f64:	f7fe fa40 	bl	80153e8 <ssl_check_timer>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d002      	beq.n	8016f74 <mbedtls_ssl_fetch_input+0xa8>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 8016f6e:	4b35      	ldr	r3, [pc, #212]	; (8017044 <mbedtls_ssl_fetch_input+0x178>)
 8016f70:	60fb      	str	r3, [r7, #12]
 8016f72:	e01f      	b.n	8016fb4 <mbedtls_ssl_fetch_input+0xe8>
            else
            {
                if( ssl->f_recv_timeout != NULL )
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	699b      	ldr	r3, [r3, #24]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d00f      	beq.n	8016f9c <mbedtls_ssl_fetch_input+0xd0>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	699c      	ldr	r4, [r3, #24]
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	69d8      	ldr	r0, [r3, #28]
                                               ssl->in_hdr + ssl->in_left, len,
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 8016f8c:	18d1      	adds	r1, r2, r3
                                               ssl->conf->read_timeout );
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 8016f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016f94:	68ba      	ldr	r2, [r7, #8]
 8016f96:	47a0      	blx	r4
 8016f98:	60f8      	str	r0, [r7, #12]
 8016f9a:	e00b      	b.n	8016fb4 <mbedtls_ssl_fetch_input+0xe8>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	695b      	ldr	r3, [r3, #20]
 8016fa0:	687a      	ldr	r2, [r7, #4]
 8016fa2:	69d0      	ldr	r0, [r2, #28]
                                       ssl->in_hdr + ssl->in_left, len );
 8016fa4:	687a      	ldr	r2, [r7, #4]
 8016fa6:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8016fa8:	687a      	ldr	r2, [r7, #4]
 8016faa:	6f52      	ldr	r2, [r2, #116]	; 0x74
                    ret = ssl->f_recv( ssl->p_bio,
 8016fac:	4411      	add	r1, r2
 8016fae:	68ba      	ldr	r2, [r7, #8]
 8016fb0:	4798      	blx	r3
 8016fb2:	60f8      	str	r0, [r7, #12]
                }
            }

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016fb8:	683a      	ldr	r2, [r7, #0]
 8016fba:	9202      	str	r2, [sp, #8]
 8016fbc:	9301      	str	r3, [sp, #4]
 8016fbe:	4b20      	ldr	r3, [pc, #128]	; (8017040 <mbedtls_ssl_fetch_input+0x174>)
 8016fc0:	9300      	str	r3, [sp, #0]
 8016fc2:	f640 137b 	movw	r3, #2427	; 0x97b
 8016fc6:	4a1a      	ldr	r2, [pc, #104]	; (8017030 <mbedtls_ssl_fetch_input+0x164>)
 8016fc8:	2102      	movs	r1, #2
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	f7f4 fc3e 	bl	800b84c <mbedtls_debug_print_msg>
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	9301      	str	r3, [sp, #4]
 8016fd4:	4b1c      	ldr	r3, [pc, #112]	; (8017048 <mbedtls_ssl_fetch_input+0x17c>)
 8016fd6:	9300      	str	r3, [sp, #0]
 8016fd8:	f640 137d 	movw	r3, #2429	; 0x97d
 8016fdc:	4a14      	ldr	r2, [pc, #80]	; (8017030 <mbedtls_ssl_fetch_input+0x164>)
 8016fde:	2102      	movs	r1, #2
 8016fe0:	6878      	ldr	r0, [r7, #4]
 8016fe2:	f7f4 fcb9 	bl	800b958 <mbedtls_debug_print_ret>

            if( ret == 0 )
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d101      	bne.n	8016ff0 <mbedtls_ssl_fetch_input+0x124>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 8016fec:	4b17      	ldr	r3, [pc, #92]	; (801704c <mbedtls_ssl_fetch_input+0x180>)
 8016fee:	e019      	b.n	8017024 <mbedtls_ssl_fetch_input+0x158>

            if( ret < 0 )
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	da01      	bge.n	8016ffa <mbedtls_ssl_fetch_input+0x12e>
                return( ret );
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	e014      	b.n	8017024 <mbedtls_ssl_fetch_input+0x158>

            ssl->in_left += ret;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	441a      	add	r2, r3
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	675a      	str	r2, [r3, #116]	; 0x74
        while( ssl->in_left < nb_want )
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801700a:	683a      	ldr	r2, [r7, #0]
 801700c:	429a      	cmp	r2, r3
 801700e:	d8a3      	bhi.n	8016f58 <mbedtls_ssl_fetch_input+0x8c>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 8017010:	4b0f      	ldr	r3, [pc, #60]	; (8017050 <mbedtls_ssl_fetch_input+0x184>)
 8017012:	9300      	str	r3, [sp, #0]
 8017014:	f640 1389 	movw	r3, #2441	; 0x989
 8017018:	4a05      	ldr	r2, [pc, #20]	; (8017030 <mbedtls_ssl_fetch_input+0x164>)
 801701a:	2102      	movs	r1, #2
 801701c:	6878      	ldr	r0, [r7, #4]
 801701e:	f7f4 fc15 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8017022:	2300      	movs	r3, #0
}
 8017024:	4618      	mov	r0, r3
 8017026:	3714      	adds	r7, #20
 8017028:	46bd      	mov	sp, r7
 801702a:	bd90      	pop	{r4, r7, pc}
 801702c:	0802314c 	.word	0x0802314c
 8017030:	08022c14 	.word	0x08022c14
 8017034:	0802315c 	.word	0x0802315c
 8017038:	ffff8f00 	.word	0xffff8f00
 801703c:	08023198 	.word	0x08023198
 8017040:	080231b8 	.word	0x080231b8
 8017044:	ffff9800 	.word	0xffff9800
 8017048:	080231d4 	.word	0x080231d4
 801704c:	ffff8d80 	.word	0xffff8d80
 8017050:	080231ec 	.word	0x080231ec

08017054 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8017054:	b590      	push	{r4, r7, lr}
 8017056:	b08b      	sub	sp, #44	; 0x2c
 8017058:	af04      	add	r7, sp, #16
 801705a:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 801705c:	4b58      	ldr	r3, [pc, #352]	; (80171c0 <mbedtls_ssl_flush_output+0x16c>)
 801705e:	9300      	str	r3, [sp, #0]
 8017060:	f640 1396 	movw	r3, #2454	; 0x996
 8017064:	4a57      	ldr	r2, [pc, #348]	; (80171c4 <mbedtls_ssl_flush_output+0x170>)
 8017066:	2102      	movs	r1, #2
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f7f4 fbef 	bl	800b84c <mbedtls_debug_print_msg>

    if( ssl->f_send == NULL )
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	691b      	ldr	r3, [r3, #16]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d10a      	bne.n	801708c <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 8017076:	4b54      	ldr	r3, [pc, #336]	; (80171c8 <mbedtls_ssl_flush_output+0x174>)
 8017078:	9300      	str	r3, [sp, #0]
 801707a:	f640 139a 	movw	r3, #2458	; 0x99a
 801707e:	4a51      	ldr	r2, [pc, #324]	; (80171c4 <mbedtls_ssl_flush_output+0x170>)
 8017080:	2101      	movs	r1, #1
 8017082:	6878      	ldr	r0, [r7, #4]
 8017084:	f7f4 fbe2 	bl	800b84c <mbedtls_debug_print_msg>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8017088:	4b50      	ldr	r3, [pc, #320]	; (80171cc <mbedtls_ssl_flush_output+0x178>)
 801708a:	e095      	b.n	80171b8 <mbedtls_ssl_flush_output+0x164>
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017092:	2b00      	cmp	r3, #0
 8017094:	d153      	bne.n	801713e <mbedtls_ssl_flush_output+0xea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 8017096:	4b4e      	ldr	r3, [pc, #312]	; (80171d0 <mbedtls_ssl_flush_output+0x17c>)
 8017098:	9300      	str	r3, [sp, #0]
 801709a:	f640 13a2 	movw	r3, #2466	; 0x9a2
 801709e:	4a49      	ldr	r2, [pc, #292]	; (80171c4 <mbedtls_ssl_flush_output+0x170>)
 80170a0:	2102      	movs	r1, #2
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f7f4 fbd2 	bl	800b84c <mbedtls_debug_print_msg>
        return( 0 );
 80170a8:	2300      	movs	r3, #0
 80170aa:	e085      	b.n	80171b8 <mbedtls_ssl_flush_output+0x164>
    }

    while( ssl->out_left > 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f7fe f90a 	bl	80152c6 <mbedtls_ssl_hdr_len>
 80170b2:	4602      	mov	r2, r0
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80170ba:	4413      	add	r3, r2
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 80170c2:	9202      	str	r2, [sp, #8]
 80170c4:	9301      	str	r3, [sp, #4]
 80170c6:	4b43      	ldr	r3, [pc, #268]	; (80171d4 <mbedtls_ssl_flush_output+0x180>)
 80170c8:	9300      	str	r3, [sp, #0]
 80170ca:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80170ce:	4a3d      	ldr	r2, [pc, #244]	; (80171c4 <mbedtls_ssl_flush_output+0x170>)
 80170d0:	2102      	movs	r1, #2
 80170d2:	6878      	ldr	r0, [r7, #4]
 80170d4:	f7f4 fbba 	bl	800b84c <mbedtls_debug_print_msg>
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f7fe f8f1 	bl	80152c6 <mbedtls_ssl_hdr_len>
 80170e4:	4602      	mov	r2, r0
              ssl->out_msglen - ssl->out_left;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 80170ec:	441a      	add	r2, r3
              ssl->out_msglen - ssl->out_left;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80170f4:	1ad3      	subs	r3, r2, r3
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 80170f6:	4423      	add	r3, r4
 80170f8:	613b      	str	r3, [r7, #16]
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	691b      	ldr	r3, [r3, #16]
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	69d0      	ldr	r0, [r2, #28]
 8017102:	687a      	ldr	r2, [r7, #4]
 8017104:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8017108:	6939      	ldr	r1, [r7, #16]
 801710a:	4798      	blx	r3
 801710c:	60f8      	str	r0, [r7, #12]

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	9301      	str	r3, [sp, #4]
 8017112:	4b31      	ldr	r3, [pc, #196]	; (80171d8 <mbedtls_ssl_flush_output+0x184>)
 8017114:	9300      	str	r3, [sp, #0]
 8017116:	f640 13af 	movw	r3, #2479	; 0x9af
 801711a:	4a2a      	ldr	r2, [pc, #168]	; (80171c4 <mbedtls_ssl_flush_output+0x170>)
 801711c:	2102      	movs	r1, #2
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f7f4 fc1a 	bl	800b958 <mbedtls_debug_print_ret>

        if( ret <= 0 )
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	2b00      	cmp	r3, #0
 8017128:	dc01      	bgt.n	801712e <mbedtls_ssl_flush_output+0xda>
            return( ret );
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	e044      	b.n	80171b8 <mbedtls_ssl_flush_output+0x164>

        ssl->out_left -= ret;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	1ad2      	subs	r2, r2, r3
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    while( ssl->out_left > 0 )
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017144:	2b00      	cmp	r3, #0
 8017146:	d1b1      	bne.n	80170ac <mbedtls_ssl_flush_output+0x58>
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8017148:	2308      	movs	r3, #8
 801714a:	75fb      	strb	r3, [r7, #23]
 801714c:	e00f      	b.n	801716e <mbedtls_ssl_flush_output+0x11a>
        if( ++ssl->out_ctr[i - 1] != 0 )
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017154:	7dfb      	ldrb	r3, [r7, #23]
 8017156:	3b01      	subs	r3, #1
 8017158:	4413      	add	r3, r2
 801715a:	781a      	ldrb	r2, [r3, #0]
 801715c:	3201      	adds	r2, #1
 801715e:	b2d2      	uxtb	r2, r2
 8017160:	701a      	strb	r2, [r3, #0]
 8017162:	781b      	ldrb	r3, [r3, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d10a      	bne.n	801717e <mbedtls_ssl_flush_output+0x12a>
    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8017168:	7dfb      	ldrb	r3, [r7, #23]
 801716a:	3b01      	subs	r3, #1
 801716c:	75fb      	strb	r3, [r7, #23]
 801716e:	7dfc      	ldrb	r4, [r7, #23]
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	f7fe f909 	bl	8015388 <ssl_ep_len>
 8017176:	4603      	mov	r3, r0
 8017178:	429c      	cmp	r4, r3
 801717a:	d8e8      	bhi.n	801714e <mbedtls_ssl_flush_output+0xfa>
 801717c:	e000      	b.n	8017180 <mbedtls_ssl_flush_output+0x12c>
            break;
 801717e:	bf00      	nop

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
 8017180:	7dfc      	ldrb	r4, [r7, #23]
 8017182:	6878      	ldr	r0, [r7, #4]
 8017184:	f7fe f900 	bl	8015388 <ssl_ep_len>
 8017188:	4603      	mov	r3, r0
 801718a:	429c      	cmp	r4, r3
 801718c:	d10a      	bne.n	80171a4 <mbedtls_ssl_flush_output+0x150>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801718e:	4b13      	ldr	r3, [pc, #76]	; (80171dc <mbedtls_ssl_flush_output+0x188>)
 8017190:	9300      	str	r3, [sp, #0]
 8017192:	f640 13be 	movw	r3, #2494	; 0x9be
 8017196:	4a0b      	ldr	r2, [pc, #44]	; (80171c4 <mbedtls_ssl_flush_output+0x170>)
 8017198:	2101      	movs	r1, #1
 801719a:	6878      	ldr	r0, [r7, #4]
 801719c:	f7f4 fb56 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 80171a0:	4b0f      	ldr	r3, [pc, #60]	; (80171e0 <mbedtls_ssl_flush_output+0x18c>)
 80171a2:	e009      	b.n	80171b8 <mbedtls_ssl_flush_output+0x164>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 80171a4:	4b0a      	ldr	r3, [pc, #40]	; (80171d0 <mbedtls_ssl_flush_output+0x17c>)
 80171a6:	9300      	str	r3, [sp, #0]
 80171a8:	f640 13c2 	movw	r3, #2498	; 0x9c2
 80171ac:	4a05      	ldr	r2, [pc, #20]	; (80171c4 <mbedtls_ssl_flush_output+0x170>)
 80171ae:	2102      	movs	r1, #2
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f7f4 fb4b 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 80171b6:	2300      	movs	r3, #0
}
 80171b8:	4618      	mov	r0, r3
 80171ba:	371c      	adds	r7, #28
 80171bc:	46bd      	mov	sp, r7
 80171be:	bd90      	pop	{r4, r7, pc}
 80171c0:	080231fc 	.word	0x080231fc
 80171c4:	08022c14 	.word	0x08022c14
 80171c8:	0802315c 	.word	0x0802315c
 80171cc:	ffff8f00 	.word	0xffff8f00
 80171d0:	0802320c 	.word	0x0802320c
 80171d4:	0802321c 	.word	0x0802321c
 80171d8:	08023240 	.word	0x08023240
 80171dc:	0802324c 	.word	0x0802324c
 80171e0:	ffff9480 	.word	0xffff9480

080171e4 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80171e4:	b590      	push	{r4, r7, lr}
 80171e6:	b08d      	sub	sp, #52	; 0x34
 80171e8:	af06      	add	r7, sp, #24
 80171ea:	6078      	str	r0, [r7, #4]
    int ret, done = 0, out_msg_type;
 80171ec:	2300      	movs	r3, #0
 80171ee:	617b      	str	r3, [r7, #20]
    size_t len = ssl->out_msglen;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80171f6:	613b      	str	r3, [r7, #16]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 80171f8:	4b86      	ldr	r3, [pc, #536]	; (8017414 <mbedtls_ssl_write_record+0x230>)
 80171fa:	9300      	str	r3, [sp, #0]
 80171fc:	f640 23b3 	movw	r3, #2739	; 0xab3
 8017200:	4a85      	ldr	r2, [pc, #532]	; (8017418 <mbedtls_ssl_write_record+0x234>)
 8017202:	2102      	movs	r1, #2
 8017204:	6878      	ldr	r0, [r7, #4]
 8017206:	f7f4 fb21 	bl	800b84c <mbedtls_debug_print_msg>
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017210:	2b16      	cmp	r3, #22
 8017212:	d13d      	bne.n	8017290 <mbedtls_ssl_write_record+0xac>
    {
        out_msg_type = ssl->out_msg[0];
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	60fb      	str	r3, [r7, #12]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d00e      	beq.n	8017242 <mbedtls_ssl_write_record+0x5e>
            ssl->handshake == NULL )
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 8017228:	2b00      	cmp	r3, #0
 801722a:	d10a      	bne.n	8017242 <mbedtls_ssl_write_record+0x5e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801722c:	4b7b      	ldr	r3, [pc, #492]	; (801741c <mbedtls_ssl_write_record+0x238>)
 801722e:	9300      	str	r3, [sp, #0]
 8017230:	f640 23c5 	movw	r3, #2757	; 0xac5
 8017234:	4a78      	ldr	r2, [pc, #480]	; (8017418 <mbedtls_ssl_write_record+0x234>)
 8017236:	2101      	movs	r1, #1
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f7f4 fb07 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801723e:	4b78      	ldr	r3, [pc, #480]	; (8017420 <mbedtls_ssl_write_record+0x23c>)
 8017240:	e0e4      	b.n	801740c <mbedtls_ssl_write_record+0x228>
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 8017242:	693b      	ldr	r3, [r7, #16]
 8017244:	3b04      	subs	r3, #4
 8017246:	0c1a      	lsrs	r2, r3, #16
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801724e:	3301      	adds	r3, #1
 8017250:	b2d2      	uxtb	r2, r2
 8017252:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 8017254:	693b      	ldr	r3, [r7, #16]
 8017256:	3b04      	subs	r3, #4
 8017258:	0a1a      	lsrs	r2, r3, #8
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017260:	3302      	adds	r3, #2
 8017262:	b2d2      	uxtb	r2, r2
 8017264:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 8017266:	693b      	ldr	r3, [r7, #16]
 8017268:	b2da      	uxtb	r2, r3
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017270:	3303      	adds	r3, #3
 8017272:	3a04      	subs	r2, #4
 8017274:	b2d2      	uxtb	r2, r2
 8017276:	701a      	strb	r2, [r3, #0]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d008      	beq.n	8017290 <mbedtls_ssl_write_record+0xac>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017284:	687a      	ldr	r2, [r7, #4]
 8017286:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 801728a:	693a      	ldr	r2, [r7, #16]
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	4798      	blx	r3

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	2b00      	cmp	r3, #0
 8017294:	f040 809c 	bne.w	80173d0 <mbedtls_ssl_write_record+0x1ec>
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80172a4:	b2d2      	uxtb	r2, r2
 80172a6:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	6898      	ldr	r0, [r3, #8]
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	68d9      	ldr	r1, [r3, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80172b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80172bc:	b2db      	uxtb	r3, r3
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80172be:	461a      	mov	r2, r3
                           ssl->conf->transport, ssl->out_hdr + 1 );
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80172c6:	3301      	adds	r3, #1
 80172c8:	f002 fb91 	bl	80199ee <mbedtls_ssl_write_version>

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	0a1a      	lsrs	r2, r3, #8
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80172d6:	b2d2      	uxtb	r2, r2
 80172d8:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80172e0:	3301      	adds	r3, #1
 80172e2:	693a      	ldr	r2, [r7, #16]
 80172e4:	b2d2      	uxtb	r2, r2
 80172e6:	701a      	strb	r2, [r3, #0]

        if( ssl->transform_out != NULL )
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d025      	beq.n	801733c <mbedtls_ssl_write_record+0x158>
        {
            if( ( ret = ssl_encrypt_buf( ssl ) ) != 0 )
 80172f0:	6878      	ldr	r0, [r7, #4]
 80172f2:	f7fe fe71 	bl	8015fd8 <ssl_encrypt_buf>
 80172f6:	60b8      	str	r0, [r7, #8]
 80172f8:	68bb      	ldr	r3, [r7, #8]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d00c      	beq.n	8017318 <mbedtls_ssl_write_record+0x134>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	9301      	str	r3, [sp, #4]
 8017302:	4b48      	ldr	r3, [pc, #288]	; (8017424 <mbedtls_ssl_write_record+0x240>)
 8017304:	9300      	str	r3, [sp, #0]
 8017306:	f640 3337 	movw	r3, #2871	; 0xb37
 801730a:	4a43      	ldr	r2, [pc, #268]	; (8017418 <mbedtls_ssl_write_record+0x234>)
 801730c:	2101      	movs	r1, #1
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f7f4 fb22 	bl	800b958 <mbedtls_debug_print_ret>
                return( ret );
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	e079      	b.n	801740c <mbedtls_ssl_write_record+0x228>
            }

            len = ssl->out_msglen;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801731e:	613b      	str	r3, [r7, #16]
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 8017320:	693b      	ldr	r3, [r7, #16]
 8017322:	0a1a      	lsrs	r2, r3, #8
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801732a:	b2d2      	uxtb	r2, r2
 801732c:	701a      	strb	r2, [r3, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017334:	3301      	adds	r3, #1
 8017336:	693a      	ldr	r2, [r7, #16]
 8017338:	b2d2      	uxtb	r2, r2
 801733a:	701a      	strb	r2, [r3, #0]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f7fd ffc2 	bl	80152c6 <mbedtls_ssl_hdr_len>
 8017342:	4602      	mov	r2, r0
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801734a:	441a      	add	r2, r3
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	4619      	mov	r1, r3
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017362:	3301      	adds	r3, #1
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	4618      	mov	r0, r3
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801736e:	3302      	adds	r3, #2
 8017370:	781b      	ldrb	r3, [r3, #0]
 8017372:	461c      	mov	r4, r3
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801737a:	781b      	ldrb	r3, [r3, #0]
 801737c:	021b      	lsls	r3, r3, #8
 801737e:	687a      	ldr	r2, [r7, #4]
 8017380:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8017384:	3201      	adds	r2, #1
 8017386:	7812      	ldrb	r2, [r2, #0]
 8017388:	4313      	orrs	r3, r2
 801738a:	9304      	str	r3, [sp, #16]
 801738c:	9403      	str	r4, [sp, #12]
 801738e:	9002      	str	r0, [sp, #8]
 8017390:	9101      	str	r1, [sp, #4]
 8017392:	4b25      	ldr	r3, [pc, #148]	; (8017428 <mbedtls_ssl_write_record+0x244>)
 8017394:	9300      	str	r3, [sp, #0]
 8017396:	f640 3342 	movw	r3, #2882	; 0xb42
 801739a:	4a1f      	ldr	r2, [pc, #124]	; (8017418 <mbedtls_ssl_write_record+0x234>)
 801739c:	2103      	movs	r1, #3
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f7f4 fa54 	bl	800b84c <mbedtls_debug_print_msg>
                            "version = [%d:%d], msglen = %d",
                       ssl->out_hdr[0], ssl->out_hdr[1], ssl->out_hdr[2],
                     ( ssl->out_len[0] << 8 ) | ssl->out_len[1] ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f7fd ff8b 	bl	80152c6 <mbedtls_ssl_hdr_len>
 80173b0:	4602      	mov	r2, r0
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80173b8:	4413      	add	r3, r2
 80173ba:	9302      	str	r3, [sp, #8]
 80173bc:	9401      	str	r4, [sp, #4]
 80173be:	4b1b      	ldr	r3, [pc, #108]	; (801742c <mbedtls_ssl_write_record+0x248>)
 80173c0:	9300      	str	r3, [sp, #0]
 80173c2:	f640 3347 	movw	r3, #2887	; 0xb47
 80173c6:	4a14      	ldr	r2, [pc, #80]	; (8017418 <mbedtls_ssl_write_record+0x234>)
 80173c8:	2104      	movs	r1, #4
 80173ca:	6878      	ldr	r0, [r7, #4]
 80173cc:	f7f4 fb30 	bl	800ba30 <mbedtls_debug_print_buf>
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f7ff fe3f 	bl	8017054 <mbedtls_ssl_flush_output>
 80173d6:	60b8      	str	r0, [r7, #8]
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d00c      	beq.n	80173f8 <mbedtls_ssl_write_record+0x214>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 80173de:	68bb      	ldr	r3, [r7, #8]
 80173e0:	9301      	str	r3, [sp, #4]
 80173e2:	4b13      	ldr	r3, [pc, #76]	; (8017430 <mbedtls_ssl_write_record+0x24c>)
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	f640 334d 	movw	r3, #2893	; 0xb4d
 80173ea:	4a0b      	ldr	r2, [pc, #44]	; (8017418 <mbedtls_ssl_write_record+0x234>)
 80173ec:	2101      	movs	r1, #1
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	f7f4 fab2 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	e009      	b.n	801740c <mbedtls_ssl_write_record+0x228>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 80173f8:	4b0e      	ldr	r3, [pc, #56]	; (8017434 <mbedtls_ssl_write_record+0x250>)
 80173fa:	9300      	str	r3, [sp, #0]
 80173fc:	f640 3351 	movw	r3, #2897	; 0xb51
 8017400:	4a05      	ldr	r2, [pc, #20]	; (8017418 <mbedtls_ssl_write_record+0x234>)
 8017402:	2102      	movs	r1, #2
 8017404:	6878      	ldr	r0, [r7, #4]
 8017406:	f7f4 fa21 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 801740a:	2300      	movs	r3, #0
}
 801740c:	4618      	mov	r0, r3
 801740e:	371c      	adds	r7, #28
 8017410:	46bd      	mov	sp, r7
 8017412:	bd90      	pop	{r4, r7, pc}
 8017414:	08023270 	.word	0x08023270
 8017418:	08022c14 	.word	0x08022c14
 801741c:	08022cb8 	.word	0x08022cb8
 8017420:	ffff9400 	.word	0xffff9400
 8017424:	08023280 	.word	0x08023280
 8017428:	08023290 	.word	0x08023290
 801742c:	080232cc 	.word	0x080232cc
 8017430:	080232ec 	.word	0x080232ec
 8017434:	08023308 	.word	0x08023308

08017438 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 8017438:	b590      	push	{r4, r7, lr}
 801743a:	b087      	sub	sp, #28
 801743c:	af04      	add	r7, sp, #16
 801743e:	6078      	str	r0, [r7, #4]
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8017444:	6878      	ldr	r0, [r7, #4]
 8017446:	f7fd ff49 	bl	80152dc <mbedtls_ssl_hs_hdr_len>
 801744a:	4603      	mov	r3, r0
 801744c:	429c      	cmp	r4, r3
 801744e:	d20d      	bcs.n	801746c <mbedtls_ssl_prepare_handshake_record+0x34>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017454:	9301      	str	r3, [sp, #4]
 8017456:	4b26      	ldr	r3, [pc, #152]	; (80174f0 <mbedtls_ssl_prepare_handshake_record+0xb8>)
 8017458:	9300      	str	r3, [sp, #0]
 801745a:	f640 4334 	movw	r3, #3124	; 0xc34
 801745e:	4a25      	ldr	r2, [pc, #148]	; (80174f4 <mbedtls_ssl_prepare_handshake_record+0xbc>)
 8017460:	2101      	movs	r1, #1
 8017462:	6878      	ldr	r0, [r7, #4]
 8017464:	f7f4 f9f2 	bl	800b84c <mbedtls_debug_print_msg>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017468:	4b23      	ldr	r3, [pc, #140]	; (80174f8 <mbedtls_ssl_prepare_handshake_record+0xc0>)
 801746a:	e03c      	b.n	80174e6 <mbedtls_ssl_prepare_handshake_record+0xae>
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f7fd ff35 	bl	80152dc <mbedtls_ssl_hs_hdr_len>
 8017472:	4601      	mov	r1, r0
                    ( ssl->in_msg[1] << 16 ) |
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017478:	3301      	adds	r3, #1
 801747a:	781b      	ldrb	r3, [r3, #0]
 801747c:	041a      	lsls	r2, r3, #16
                    ( ssl->in_msg[2] << 8  ) |
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017482:	3302      	adds	r3, #2
 8017484:	781b      	ldrb	r3, [r3, #0]
 8017486:	021b      	lsls	r3, r3, #8
                    ( ssl->in_msg[1] << 16 ) |
 8017488:	4313      	orrs	r3, r2
                      ssl->in_msg[3] );
 801748a:	687a      	ldr	r2, [r7, #4]
 801748c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801748e:	3203      	adds	r2, #3
 8017490:	7812      	ldrb	r2, [r2, #0]
                    ( ssl->in_msg[2] << 8  ) |
 8017492:	4313      	orrs	r3, r2
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 8017494:	18ca      	adds	r2, r1, r3
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	679a      	str	r2, [r3, #120]	; 0x78

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801749e:	687a      	ldr	r2, [r7, #4]
 80174a0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80174a2:	7812      	ldrb	r2, [r2, #0]
 80174a4:	4611      	mov	r1, r2
 80174a6:	687a      	ldr	r2, [r7, #4]
 80174a8:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80174aa:	9203      	str	r2, [sp, #12]
 80174ac:	9102      	str	r1, [sp, #8]
 80174ae:	9301      	str	r3, [sp, #4]
 80174b0:	4b12      	ldr	r3, [pc, #72]	; (80174fc <mbedtls_ssl_prepare_handshake_record+0xc4>)
 80174b2:	9300      	str	r3, [sp, #0]
 80174b4:	f640 433e 	movw	r3, #3134	; 0xc3e
 80174b8:	4a0e      	ldr	r2, [pc, #56]	; (80174f4 <mbedtls_ssl_prepare_handshake_record+0xbc>)
 80174ba:	2103      	movs	r1, #3
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f7f4 f9c5 	bl	800b84c <mbedtls_debug_print_msg>
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    /* With TLS we don't handle fragmentation (for now) */
    if( ssl->in_msglen < ssl->in_hslen )
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80174ca:	429a      	cmp	r2, r3
 80174cc:	d20a      	bcs.n	80174e4 <mbedtls_ssl_prepare_handshake_record+0xac>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 80174ce:	4b0c      	ldr	r3, [pc, #48]	; (8017500 <mbedtls_ssl_prepare_handshake_record+0xc8>)
 80174d0:	9300      	str	r3, [sp, #0]
 80174d2:	f640 437e 	movw	r3, #3198	; 0xc7e
 80174d6:	4a07      	ldr	r2, [pc, #28]	; (80174f4 <mbedtls_ssl_prepare_handshake_record+0xbc>)
 80174d8:	2101      	movs	r1, #1
 80174da:	6878      	ldr	r0, [r7, #4]
 80174dc:	f7f4 f9b6 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 80174e0:	4b08      	ldr	r3, [pc, #32]	; (8017504 <mbedtls_ssl_prepare_handshake_record+0xcc>)
 80174e2:	e000      	b.n	80174e6 <mbedtls_ssl_prepare_handshake_record+0xae>
    }

    return( 0 );
 80174e4:	2300      	movs	r3, #0
}
 80174e6:	4618      	mov	r0, r3
 80174e8:	370c      	adds	r7, #12
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd90      	pop	{r4, r7, pc}
 80174ee:	bf00      	nop
 80174f0:	08023318 	.word	0x08023318
 80174f4:	08022c14 	.word	0x08022c14
 80174f8:	ffff8e00 	.word	0xffff8e00
 80174fc:	08023338 	.word	0x08023338
 8017500:	08023370 	.word	0x08023370
 8017504:	ffff8f80 	.word	0xffff8f80

08017508 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b082      	sub	sp, #8
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	2b10      	cmp	r3, #16
 8017516:	d00c      	beq.n	8017532 <mbedtls_ssl_update_handshake_status+0x2a>
        ssl->handshake != NULL )
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801751c:	2b00      	cmp	r3, #0
 801751e:	d008      	beq.n	8017532 <mbedtls_ssl_update_handshake_status+0x2a>
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017526:	687a      	ldr	r2, [r7, #4]
 8017528:	6e51      	ldr	r1, [r2, #100]	; 0x64
 801752a:	687a      	ldr	r2, [r7, #4]
 801752c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801752e:	6878      	ldr	r0, [r7, #4]
 8017530:	4798      	blx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 8017532:	bf00      	nop
 8017534:	3708      	adds	r7, #8
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}
	...

0801753c <ssl_parse_record_header>:
 * 4. drop the whole datagram if this function returns anything else.
 * Point 2 is needed when the peer is resending, and we have already received
 * the first record from a datagram but are still waiting for the others.
 */
static int ssl_parse_record_header( mbedtls_ssl_context *ssl )
{
 801753c:	b590      	push	{r4, r7, lr}
 801753e:	b08b      	sub	sp, #44	; 0x2c
 8017540:	af06      	add	r7, sp, #24
 8017542:	6078      	str	r0, [r7, #4]
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f7fd febc 	bl	80152c6 <mbedtls_ssl_hdr_len>
 801754e:	4603      	mov	r3, r0
 8017550:	9302      	str	r3, [sp, #8]
 8017552:	9401      	str	r4, [sp, #4]
 8017554:	4b6f      	ldr	r3, [pc, #444]	; (8017714 <ssl_parse_record_header+0x1d8>)
 8017556:	9300      	str	r3, [sp, #0]
 8017558:	f640 53c5 	movw	r3, #3525	; 0xdc5
 801755c:	4a6e      	ldr	r2, [pc, #440]	; (8017718 <ssl_parse_record_header+0x1dc>)
 801755e:	2104      	movs	r1, #4
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f7f4 fa65 	bl	800ba30 <mbedtls_debug_print_buf>

    ssl->in_msgtype =  ssl->in_hdr[0];
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801756a:	781b      	ldrb	r3, [r3, #0]
 801756c:	461a      	mov	r2, r3
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	66da      	str	r2, [r3, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	021b      	lsls	r3, r3, #8
 801757a:	687a      	ldr	r2, [r7, #4]
 801757c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801757e:	3201      	adds	r2, #1
 8017580:	7812      	ldrb	r2, [r2, #0]
 8017582:	4313      	orrs	r3, r2
 8017584:	461a      	mov	r2, r3
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	671a      	str	r2, [r3, #112]	; 0x70
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017592:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017596:	b2db      	uxtb	r3, r3
 8017598:	461a      	mov	r2, r3
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801759e:	3301      	adds	r3, #1
 80175a0:	f107 0108 	add.w	r1, r7, #8
 80175a4:	f107 000c 	add.w	r0, r7, #12
 80175a8:	f002 fa37 	bl	8019a1a <mbedtls_ssl_read_version>

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175b0:	68fa      	ldr	r2, [r7, #12]
 80175b2:	68b9      	ldr	r1, [r7, #8]
 80175b4:	6878      	ldr	r0, [r7, #4]
 80175b6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80175b8:	9004      	str	r0, [sp, #16]
 80175ba:	9103      	str	r1, [sp, #12]
 80175bc:	9202      	str	r2, [sp, #8]
 80175be:	9301      	str	r3, [sp, #4]
 80175c0:	4b56      	ldr	r3, [pc, #344]	; (801771c <ssl_parse_record_header+0x1e0>)
 80175c2:	9300      	str	r3, [sp, #0]
 80175c4:	f640 53cb 	movw	r3, #3531	; 0xdcb
 80175c8:	4a53      	ldr	r2, [pc, #332]	; (8017718 <ssl_parse_record_header+0x1dc>)
 80175ca:	2103      	movs	r1, #3
 80175cc:	6878      	ldr	r0, [r7, #4]
 80175ce:	f7f4 f93d 	bl	800b84c <mbedtls_debug_print_msg>
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175d6:	2b16      	cmp	r3, #22
 80175d8:	d01b      	beq.n	8017612 <ssl_parse_record_header+0xd6>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80175de:	2b15      	cmp	r3, #21
 80175e0:	d017      	beq.n	8017612 <ssl_parse_record_header+0xd6>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&
 80175e6:	2b14      	cmp	r3, #20
 80175e8:	d013      	beq.n	8017612 <ssl_parse_record_header+0xd6>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 80175ee:	2b17      	cmp	r3, #23
 80175f0:	d00f      	beq.n	8017612 <ssl_parse_record_header+0xd6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 80175f2:	4b4b      	ldr	r3, [pc, #300]	; (8017720 <ssl_parse_record_header+0x1e4>)
 80175f4:	9300      	str	r3, [sp, #0]
 80175f6:	f640 53d6 	movw	r3, #3542	; 0xdd6
 80175fa:	4a47      	ldr	r2, [pc, #284]	; (8017718 <ssl_parse_record_header+0x1dc>)
 80175fc:	2101      	movs	r1, #1
 80175fe:	6878      	ldr	r0, [r7, #4]
 8017600:	f7f4 f924 	bl	800b84c <mbedtls_debug_print_msg>
#if defined(MBEDTLS_SSL_PROTO_DTLS)
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017604:	220a      	movs	r2, #10
 8017606:	2102      	movs	r1, #2
 8017608:	6878      	ldr	r0, [r7, #4]
 801760a:	f000 fa95 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801760e:	4b45      	ldr	r3, [pc, #276]	; (8017724 <ssl_parse_record_header+0x1e8>)
 8017610:	e07c      	b.n	801770c <ssl_parse_record_header+0x1d0>
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	689a      	ldr	r2, [r3, #8]
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	429a      	cmp	r2, r3
 801761a:	d00a      	beq.n	8017632 <ssl_parse_record_header+0xf6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 801761c:	4b42      	ldr	r3, [pc, #264]	; (8017728 <ssl_parse_record_header+0x1ec>)
 801761e:	9300      	str	r3, [sp, #0]
 8017620:	f640 53e6 	movw	r3, #3558	; 0xde6
 8017624:	4a3c      	ldr	r2, [pc, #240]	; (8017718 <ssl_parse_record_header+0x1dc>)
 8017626:	2101      	movs	r1, #1
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f7f4 f90f 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801762e:	4b3d      	ldr	r3, [pc, #244]	; (8017724 <ssl_parse_record_header+0x1e8>)
 8017630:	e06c      	b.n	801770c <ssl_parse_record_header+0x1d0>
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801763a:	461a      	mov	r2, r3
 801763c:	68bb      	ldr	r3, [r7, #8]
 801763e:	429a      	cmp	r2, r3
 8017640:	da0a      	bge.n	8017658 <ssl_parse_record_header+0x11c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 8017642:	4b3a      	ldr	r3, [pc, #232]	; (801772c <ssl_parse_record_header+0x1f0>)
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	f640 53ec 	movw	r3, #3564	; 0xdec
 801764a:	4a33      	ldr	r2, [pc, #204]	; (8017718 <ssl_parse_record_header+0x1dc>)
 801764c:	2101      	movs	r1, #1
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f7f4 f8fc 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017654:	4b33      	ldr	r3, [pc, #204]	; (8017724 <ssl_parse_record_header+0x1e8>)
 8017656:	e059      	b.n	801770c <ssl_parse_record_header+0x1d0>
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017664:	1acb      	subs	r3, r1, r3
 8017666:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 801766a:	331d      	adds	r3, #29
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 801766c:	429a      	cmp	r2, r3
 801766e:	d90a      	bls.n	8017686 <ssl_parse_record_header+0x14a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8017670:	4b2f      	ldr	r3, [pc, #188]	; (8017730 <ssl_parse_record_header+0x1f4>)
 8017672:	9300      	str	r3, [sp, #0]
 8017674:	f640 53f4 	movw	r3, #3572	; 0xdf4
 8017678:	4a27      	ldr	r2, [pc, #156]	; (8017718 <ssl_parse_record_header+0x1dc>)
 801767a:	2101      	movs	r1, #1
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	f7f4 f8e5 	bl	800b84c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017682:	4b28      	ldr	r3, [pc, #160]	; (8017724 <ssl_parse_record_header+0x1e8>)
 8017684:	e042      	b.n	801770c <ssl_parse_record_header+0x1d0>
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801768a:	2b00      	cmp	r3, #0
 801768c:	d113      	bne.n	80176b6 <ssl_parse_record_header+0x17a>
    {
        if( ssl->in_msglen < 1 ||
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017692:	2b00      	cmp	r3, #0
 8017694:	d004      	beq.n	80176a0 <ssl_parse_record_header+0x164>
            ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if( ssl->in_msglen < 1 ||
 801769a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801769e:	d934      	bls.n	801770a <ssl_parse_record_header+0x1ce>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80176a0:	4b23      	ldr	r3, [pc, #140]	; (8017730 <ssl_parse_record_header+0x1f4>)
 80176a2:	9300      	str	r3, [sp, #0]
 80176a4:	f640 53fe 	movw	r3, #3582	; 0xdfe
 80176a8:	4a1b      	ldr	r2, [pc, #108]	; (8017718 <ssl_parse_record_header+0x1dc>)
 80176aa:	2101      	movs	r1, #1
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f7f4 f8cd 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80176b2:	4b1c      	ldr	r3, [pc, #112]	; (8017724 <ssl_parse_record_header+0x1e8>)
 80176b4:	e02a      	b.n	801770c <ssl_parse_record_header+0x1d0>
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80176be:	689b      	ldr	r3, [r3, #8]
 80176c0:	429a      	cmp	r2, r3
 80176c2:	d20a      	bcs.n	80176da <ssl_parse_record_header+0x19e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80176c4:	4b1a      	ldr	r3, [pc, #104]	; (8017730 <ssl_parse_record_header+0x1f4>)
 80176c6:	9300      	str	r3, [sp, #0]
 80176c8:	f640 6306 	movw	r3, #3590	; 0xe06
 80176cc:	4a12      	ldr	r2, [pc, #72]	; (8017718 <ssl_parse_record_header+0x1dc>)
 80176ce:	2101      	movs	r1, #1
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f7f4 f8bb 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80176d6:	4b13      	ldr	r3, [pc, #76]	; (8017724 <ssl_parse_record_header+0x1e8>)
 80176d8:	e018      	b.n	801770c <ssl_parse_record_header+0x1d0>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	68db      	ldr	r3, [r3, #12]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	dd13      	ble.n	801770a <ssl_parse_record_header+0x1ce>
            ssl->in_msglen > ssl->transform_in->minlen +
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80176ea:	689b      	ldr	r3, [r3, #8]
                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
 80176ec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d90a      	bls.n	801770a <ssl_parse_record_header+0x1ce>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80176f4:	4b0e      	ldr	r3, [pc, #56]	; (8017730 <ssl_parse_record_header+0x1f4>)
 80176f6:	9300      	str	r3, [sp, #0]
 80176f8:	f640 631b 	movw	r3, #3611	; 0xe1b
 80176fc:	4a06      	ldr	r2, [pc, #24]	; (8017718 <ssl_parse_record_header+0x1dc>)
 80176fe:	2101      	movs	r1, #1
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f7f4 f8a3 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017706:	4b07      	ldr	r3, [pc, #28]	; (8017724 <ssl_parse_record_header+0x1e8>)
 8017708:	e000      	b.n	801770c <ssl_parse_record_header+0x1d0>
        }
#endif
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    return( 0 );
 801770a:	2300      	movs	r3, #0
}
 801770c:	4618      	mov	r0, r3
 801770e:	3714      	adds	r7, #20
 8017710:	46bd      	mov	sp, r7
 8017712:	bd90      	pop	{r4, r7, pc}
 8017714:	0802339c 	.word	0x0802339c
 8017718:	08022c14 	.word	0x08022c14
 801771c:	080233b0 	.word	0x080233b0
 8017720:	080233ec 	.word	0x080233ec
 8017724:	ffff8e00 	.word	0xffff8e00
 8017728:	08023400 	.word	0x08023400
 801772c:	08023418 	.word	0x08023418
 8017730:	08023430 	.word	0x08023430

08017734 <ssl_prepare_record_content>:

/*
 * If applicable, decrypt (and decompress) record content
 */
static int ssl_prepare_record_content( mbedtls_ssl_context *ssl )
{
 8017734:	b590      	push	{r4, r7, lr}
 8017736:	b089      	sub	sp, #36	; 0x24
 8017738:	af04      	add	r7, sp, #16
 801773a:	6078      	str	r0, [r7, #4]
    int ret, done = 0;
 801773c:	2300      	movs	r3, #0
 801773e:	60fb      	str	r3, [r7, #12]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	f7fd fdbe 	bl	80152c6 <mbedtls_ssl_hdr_len>
 801774a:	4602      	mov	r2, r0
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017750:	4413      	add	r3, r2
 8017752:	9302      	str	r3, [sp, #8]
 8017754:	9401      	str	r4, [sp, #4]
 8017756:	4b24      	ldr	r3, [pc, #144]	; (80177e8 <ssl_prepare_record_content+0xb4>)
 8017758:	9300      	str	r3, [sp, #0]
 801775a:	f640 6377 	movw	r3, #3703	; 0xe77
 801775e:	4a23      	ldr	r2, [pc, #140]	; (80177ec <ssl_prepare_record_content+0xb8>)
 8017760:	2104      	movs	r1, #4
 8017762:	6878      	ldr	r0, [r7, #4]
 8017764:	f7f4 f964 	bl	800ba30 <mbedtls_debug_print_buf>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d136      	bne.n	80177dc <ssl_prepare_record_content+0xa8>
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017772:	2b00      	cmp	r3, #0
 8017774:	d032      	beq.n	80177dc <ssl_prepare_record_content+0xa8>
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f7fe ff3c 	bl	80165f4 <ssl_decrypt_buf>
 801777c:	60b8      	str	r0, [r7, #8]
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d00c      	beq.n	801779e <ssl_prepare_record_content+0x6a>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	9301      	str	r3, [sp, #4]
 8017788:	4b19      	ldr	r3, [pc, #100]	; (80177f0 <ssl_prepare_record_content+0xbc>)
 801778a:	9300      	str	r3, [sp, #0]
 801778c:	f640 638e 	movw	r3, #3726	; 0xe8e
 8017790:	4a16      	ldr	r2, [pc, #88]	; (80177ec <ssl_prepare_record_content+0xb8>)
 8017792:	2101      	movs	r1, #1
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f7f4 f8df 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 801779a:	68bb      	ldr	r3, [r7, #8]
 801779c:	e01f      	b.n	80177de <ssl_prepare_record_content+0xaa>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80177a2:	687a      	ldr	r2, [r7, #4]
 80177a4:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80177a6:	9202      	str	r2, [sp, #8]
 80177a8:	9301      	str	r3, [sp, #4]
 80177aa:	4b12      	ldr	r3, [pc, #72]	; (80177f4 <ssl_prepare_record_content+0xc0>)
 80177ac:	9300      	str	r3, [sp, #0]
 80177ae:	f640 6392 	movw	r3, #3730	; 0xe92
 80177b2:	4a0e      	ldr	r2, [pc, #56]	; (80177ec <ssl_prepare_record_content+0xb8>)
 80177b4:	2104      	movs	r1, #4
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	f7f4 f93a 	bl	800ba30 <mbedtls_debug_print_buf>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80177c4:	d90a      	bls.n	80177dc <ssl_prepare_record_content+0xa8>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80177c6:	4b0c      	ldr	r3, [pc, #48]	; (80177f8 <ssl_prepare_record_content+0xc4>)
 80177c8:	9300      	str	r3, [sp, #0]
 80177ca:	f640 6397 	movw	r3, #3735	; 0xe97
 80177ce:	4a07      	ldr	r2, [pc, #28]	; (80177ec <ssl_prepare_record_content+0xb8>)
 80177d0:	2101      	movs	r1, #1
 80177d2:	6878      	ldr	r0, [r7, #4]
 80177d4:	f7f4 f83a 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80177d8:	4b08      	ldr	r3, [pc, #32]	; (80177fc <ssl_prepare_record_content+0xc8>)
 80177da:	e000      	b.n	80177de <ssl_prepare_record_content+0xaa>
    {
        mbedtls_ssl_dtls_replay_update( ssl );
    }
#endif

    return( 0 );
 80177dc:	2300      	movs	r3, #0
}
 80177de:	4618      	mov	r0, r3
 80177e0:	3714      	adds	r7, #20
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd90      	pop	{r4, r7, pc}
 80177e6:	bf00      	nop
 80177e8:	08023444 	.word	0x08023444
 80177ec:	08022c14 	.word	0x08022c14
 80177f0:	08023460 	.word	0x08023460
 80177f4:	08023470 	.word	0x08023470
 80177f8:	08023430 	.word	0x08023430
 80177fc:	ffff8e00 	.word	0xffff8e00

08017800 <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b086      	sub	sp, #24
 8017804:	af02      	add	r7, sp, #8
 8017806:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 8017808:	4b2e      	ldr	r3, [pc, #184]	; (80178c4 <mbedtls_ssl_read_record+0xc4>)
 801780a:	9300      	str	r3, [sp, #0]
 801780c:	f640 63bf 	movw	r3, #3775	; 0xebf
 8017810:	4a2d      	ldr	r2, [pc, #180]	; (80178c8 <mbedtls_ssl_read_record+0xc8>)
 8017812:	2102      	movs	r1, #2
 8017814:	6878      	ldr	r0, [r7, #4]
 8017816:	f7f4 f819 	bl	800b84c <mbedtls_debug_print_msg>

    if( ssl->keep_current_message == 0 )
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017820:	2b00      	cmp	r3, #0
 8017822:	d133      	bne.n	801788c <mbedtls_ssl_read_record+0x8c>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 8017824:	6878      	ldr	r0, [r7, #4]
 8017826:	f000 f857 	bl	80178d8 <mbedtls_ssl_read_record_layer>
 801782a:	60f8      	str	r0, [r7, #12]
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d00c      	beq.n	801784c <mbedtls_ssl_read_record+0x4c>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	9301      	str	r3, [sp, #4]
 8017836:	4b25      	ldr	r3, [pc, #148]	; (80178cc <mbedtls_ssl_read_record+0xcc>)
 8017838:	9300      	str	r3, [sp, #0]
 801783a:	f640 63c7 	movw	r3, #3783	; 0xec7
 801783e:	4a22      	ldr	r2, [pc, #136]	; (80178c8 <mbedtls_ssl_read_record+0xc8>)
 8017840:	2101      	movs	r1, #1
 8017842:	6878      	ldr	r0, [r7, #4]
 8017844:	f7f4 f888 	bl	800b958 <mbedtls_debug_print_ret>
                return( ret );
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	e036      	b.n	80178ba <mbedtls_ssl_read_record+0xba>
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 801784c:	6878      	ldr	r0, [r7, #4]
 801784e:	f000 f8f3 	bl	8017a38 <mbedtls_ssl_handle_message_type>
 8017852:	60f8      	str	r0, [r7, #12]

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	f513 4fcd 	cmn.w	r3, #26240	; 0x6680
 801785a:	d0e3      	beq.n	8017824 <mbedtls_ssl_read_record+0x24>

        if( 0 != ret )
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d00c      	beq.n	801787c <mbedtls_ssl_read_record+0x7c>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	9301      	str	r3, [sp, #4]
 8017866:	4b19      	ldr	r3, [pc, #100]	; (80178cc <mbedtls_ssl_read_record+0xcc>)
 8017868:	9300      	str	r3, [sp, #0]
 801786a:	f640 63d1 	movw	r3, #3793	; 0xed1
 801786e:	4a16      	ldr	r2, [pc, #88]	; (80178c8 <mbedtls_ssl_read_record+0xc8>)
 8017870:	2101      	movs	r1, #1
 8017872:	6878      	ldr	r0, [r7, #4]
 8017874:	f7f4 f870 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	e01e      	b.n	80178ba <mbedtls_ssl_read_record+0xba>
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017880:	2b16      	cmp	r3, #22
 8017882:	d110      	bne.n	80178a6 <mbedtls_ssl_read_record+0xa6>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	f7ff fe3f 	bl	8017508 <mbedtls_ssl_update_handshake_status>
 801788a:	e00c      	b.n	80178a6 <mbedtls_ssl_read_record+0xa6>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
 801788c:	4b10      	ldr	r3, [pc, #64]	; (80178d0 <mbedtls_ssl_read_record+0xd0>)
 801788e:	9300      	str	r3, [sp, #0]
 8017890:	f640 63dc 	movw	r3, #3804	; 0xedc
 8017894:	4a0c      	ldr	r2, [pc, #48]	; (80178c8 <mbedtls_ssl_read_record+0xc8>)
 8017896:	2102      	movs	r1, #2
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f7f3 ffd7 	bl	800b84c <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	2200      	movs	r2, #0
 80178a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 80178a6:	4b0b      	ldr	r3, [pc, #44]	; (80178d4 <mbedtls_ssl_read_record+0xd4>)
 80178a8:	9300      	str	r3, [sp, #0]
 80178aa:	f44f 636e 	mov.w	r3, #3808	; 0xee0
 80178ae:	4a06      	ldr	r2, [pc, #24]	; (80178c8 <mbedtls_ssl_read_record+0xc8>)
 80178b0:	2102      	movs	r1, #2
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7f3 ffca 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 80178b8:	2300      	movs	r3, #0
}
 80178ba:	4618      	mov	r0, r3
 80178bc:	3710      	adds	r7, #16
 80178be:	46bd      	mov	sp, r7
 80178c0:	bd80      	pop	{r7, pc}
 80178c2:	bf00      	nop
 80178c4:	0802348c 	.word	0x0802348c
 80178c8:	08022c14 	.word	0x08022c14
 80178cc:	0802349c 	.word	0x0802349c
 80178d0:	080234bc 	.word	0x080234bc
 80178d4:	080234e0 	.word	0x080234e0

080178d8 <mbedtls_ssl_read_record_layer>:

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b088      	sub	sp, #32
 80178dc:	af04      	add	r7, sp, #16
 80178de:	6078      	str	r0, [r7, #4]
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d03e      	beq.n	8017966 <mbedtls_ssl_read_record_layer+0x8e>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d00a      	beq.n	8017906 <mbedtls_ssl_read_record_layer+0x2e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80178f0:	4b4c      	ldr	r3, [pc, #304]	; (8017a24 <mbedtls_ssl_read_record_layer+0x14c>)
 80178f2:	9300      	str	r3, [sp, #0]
 80178f4:	f640 730e 	movw	r3, #3854	; 0xf0e
 80178f8:	4a4b      	ldr	r2, [pc, #300]	; (8017a28 <mbedtls_ssl_read_record_layer+0x150>)
 80178fa:	2101      	movs	r1, #1
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f7f3 ffa5 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8017902:	4b4a      	ldr	r3, [pc, #296]	; (8017a2c <mbedtls_ssl_read_record_layer+0x154>)
 8017904:	e089      	b.n	8017a1a <mbedtls_ssl_read_record_layer+0x142>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801790e:	429a      	cmp	r2, r3
 8017910:	d222      	bcs.n	8017958 <mbedtls_ssl_read_record_layer+0x80>
        {
            ssl->in_msglen -= ssl->in_hslen;
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801791a:	1ad2      	subs	r2, r2, r3
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	671a      	str	r2, [r3, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801792c:	18d1      	adds	r1, r2, r3
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017932:	461a      	mov	r2, r3
 8017934:	f006 fb98 	bl	801e068 <memmove>
                     ssl->in_msglen );

            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801793c:	687a      	ldr	r2, [r7, #4]
 801793e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8017940:	9202      	str	r2, [sp, #8]
 8017942:	9301      	str	r3, [sp, #4]
 8017944:	4b3a      	ldr	r3, [pc, #232]	; (8017a30 <mbedtls_ssl_read_record_layer+0x158>)
 8017946:	9300      	str	r3, [sp, #0]
 8017948:	f640 732d 	movw	r3, #3885	; 0xf2d
 801794c:	4a36      	ldr	r2, [pc, #216]	; (8017a28 <mbedtls_ssl_read_record_layer+0x150>)
 801794e:	2104      	movs	r1, #4
 8017950:	6878      	ldr	r0, [r7, #4]
 8017952:	f7f4 f86d 	bl	800ba30 <mbedtls_debug_print_buf>
 8017956:	e002      	b.n	801795e <mbedtls_ssl_read_record_layer+0x86>
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	2200      	movs	r2, #0
 801795c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	2200      	movs	r2, #0
 8017962:	679a      	str	r2, [r3, #120]	; 0x78
 8017964:	e008      	b.n	8017978 <mbedtls_ssl_read_record_layer+0xa0>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801796a:	2b00      	cmp	r3, #0
 801796c:	d001      	beq.n	8017972 <mbedtls_ssl_read_record_layer+0x9a>
    {
        return( 0 );
 801796e:	2300      	movs	r3, #0
 8017970:	e053      	b.n	8017a1a <mbedtls_ssl_read_record_layer+0x142>
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	2200      	movs	r2, #0
 8017976:	671a      	str	r2, [r3, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801797c:	2b00      	cmp	r3, #0
 801797e:	d001      	beq.n	8017984 <mbedtls_ssl_read_record_layer+0xac>
    {
        /* There's something left to be processed in the current record. */
        return( 0 );
 8017980:	2300      	movs	r3, #0
 8017982:	e04a      	b.n	8017a1a <mbedtls_ssl_read_record_layer+0x142>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 8017984:	6878      	ldr	r0, [r7, #4]
 8017986:	f7fd fc9e 	bl	80152c6 <mbedtls_ssl_hdr_len>
 801798a:	4603      	mov	r3, r0
 801798c:	4619      	mov	r1, r3
 801798e:	6878      	ldr	r0, [r7, #4]
 8017990:	f7ff fa9c 	bl	8016ecc <mbedtls_ssl_fetch_input>
 8017994:	60f8      	str	r0, [r7, #12]
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d00c      	beq.n	80179b6 <mbedtls_ssl_read_record_layer+0xde>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	9301      	str	r3, [sp, #4]
 80179a0:	4b24      	ldr	r3, [pc, #144]	; (8017a34 <mbedtls_ssl_read_record_layer+0x15c>)
 80179a2:	9300      	str	r3, [sp, #0]
 80179a4:	f640 7359 	movw	r3, #3929	; 0xf59
 80179a8:	4a1f      	ldr	r2, [pc, #124]	; (8017a28 <mbedtls_ssl_read_record_layer+0x150>)
 80179aa:	2101      	movs	r1, #1
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7f3 ffd3 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	e031      	b.n	8017a1a <mbedtls_ssl_read_record_layer+0x142>
    }

    if( ( ret = ssl_parse_record_header( ssl ) ) != 0 )
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7ff fdc0 	bl	801753c <ssl_parse_record_header>
 80179bc:	60f8      	str	r0, [r7, #12]
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d001      	beq.n	80179c8 <mbedtls_ssl_read_record_layer+0xf0>

            /* Get next record */
            goto read_record_header;
        }
#endif
        return( ret );
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	e028      	b.n	8017a1a <mbedtls_ssl_read_record_layer+0x142>

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
                                 mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen ) ) != 0 )
 80179c8:	6878      	ldr	r0, [r7, #4]
 80179ca:	f7fd fc7c 	bl	80152c6 <mbedtls_ssl_hdr_len>
 80179ce:	4602      	mov	r2, r0
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 80179d4:	4413      	add	r3, r2
 80179d6:	4619      	mov	r1, r3
 80179d8:	6878      	ldr	r0, [r7, #4]
 80179da:	f7ff fa77 	bl	8016ecc <mbedtls_ssl_fetch_input>
 80179de:	60f8      	str	r0, [r7, #12]
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d00c      	beq.n	8017a00 <mbedtls_ssl_read_record_layer+0x128>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	9301      	str	r3, [sp, #4]
 80179ea:	4b12      	ldr	r3, [pc, #72]	; (8017a34 <mbedtls_ssl_read_record_layer+0x15c>)
 80179ec:	9300      	str	r3, [sp, #0]
 80179ee:	f640 7383 	movw	r3, #3971	; 0xf83
 80179f2:	4a0d      	ldr	r2, [pc, #52]	; (8017a28 <mbedtls_ssl_read_record_layer+0x150>)
 80179f4:	2101      	movs	r1, #1
 80179f6:	6878      	ldr	r0, [r7, #4]
 80179f8:	f7f3 ffae 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	e00c      	b.n	8017a1a <mbedtls_ssl_read_record_layer+0x142>
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	2200      	movs	r2, #0
 8017a04:	675a      	str	r2, [r3, #116]	; 0x74

    if( ( ret = ssl_prepare_record_content( ssl ) ) != 0 )
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f7ff fe94 	bl	8017734 <ssl_prepare_record_content>
 8017a0c:	60f8      	str	r0, [r7, #12]
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d001      	beq.n	8017a18 <mbedtls_ssl_read_record_layer+0x140>
                mbedtls_ssl_send_alert_message( ssl,
                        MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                        MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
            }
#endif
            return( ret );
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	e000      	b.n	8017a1a <mbedtls_ssl_read_record_layer+0x142>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 8017a18:	2300      	movs	r3, #0
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3710      	adds	r7, #16
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	08022cb8 	.word	0x08022cb8
 8017a28:	08022c14 	.word	0x08022c14
 8017a2c:	ffff9400 	.word	0xffff9400
 8017a30:	080234f0 	.word	0x080234f0
 8017a34:	0802350c 	.word	0x0802350c

08017a38 <mbedtls_ssl_handle_message_type>:

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b088      	sub	sp, #32
 8017a3c:	af04      	add	r7, sp, #16
 8017a3e:	6078      	str	r0, [r7, #4]
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a44:	2b16      	cmp	r3, #22
 8017a46:	d108      	bne.n	8017a5a <mbedtls_ssl_handle_message_type+0x22>
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 8017a48:	6878      	ldr	r0, [r7, #4]
 8017a4a:	f7ff fcf5 	bl	8017438 <mbedtls_ssl_prepare_handshake_record>
 8017a4e:	60f8      	str	r0, [r7, #12]
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d001      	beq.n	8017a5a <mbedtls_ssl_handle_message_type+0x22>
        {
            return( ret );
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	e05a      	b.n	8017b10 <mbedtls_ssl_handle_message_type+0xd8>
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a5e:	2b15      	cmp	r3, #21
 8017a60:	d155      	bne.n	8017b0e <mbedtls_ssl_handle_message_type+0xd6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017a66:	781b      	ldrb	r3, [r3, #0]
 8017a68:	461a      	mov	r2, r3
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017a6e:	3301      	adds	r3, #1
 8017a70:	781b      	ldrb	r3, [r3, #0]
 8017a72:	9302      	str	r3, [sp, #8]
 8017a74:	9201      	str	r2, [sp, #4]
 8017a76:	4b28      	ldr	r3, [pc, #160]	; (8017b18 <mbedtls_ssl_handle_message_type+0xe0>)
 8017a78:	9300      	str	r3, [sp, #0]
 8017a7a:	f241 030a 	movw	r3, #4106	; 0x100a
 8017a7e:	4a27      	ldr	r2, [pc, #156]	; (8017b1c <mbedtls_ssl_handle_message_type+0xe4>)
 8017a80:	2102      	movs	r1, #2
 8017a82:	6878      	ldr	r0, [r7, #4]
 8017a84:	f7f3 fee2 	bl	800b84c <mbedtls_debug_print_msg>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017a8c:	781b      	ldrb	r3, [r3, #0]
 8017a8e:	2b02      	cmp	r3, #2
 8017a90:	d10f      	bne.n	8017ab2 <mbedtls_ssl_handle_message_type+0x7a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017a96:	3301      	adds	r3, #1
 8017a98:	781b      	ldrb	r3, [r3, #0]
 8017a9a:	9301      	str	r3, [sp, #4]
 8017a9c:	4b20      	ldr	r3, [pc, #128]	; (8017b20 <mbedtls_ssl_handle_message_type+0xe8>)
 8017a9e:	9300      	str	r3, [sp, #0]
 8017aa0:	f241 0312 	movw	r3, #4114	; 0x1012
 8017aa4:	4a1d      	ldr	r2, [pc, #116]	; (8017b1c <mbedtls_ssl_handle_message_type+0xe4>)
 8017aa6:	2101      	movs	r1, #1
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	f7f3 fecf 	bl	800b84c <mbedtls_debug_print_msg>
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 8017aae:	4b1d      	ldr	r3, [pc, #116]	; (8017b24 <mbedtls_ssl_handle_message_type+0xec>)
 8017ab0:	e02e      	b.n	8017b10 <mbedtls_ssl_handle_message_type+0xd8>
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017ab6:	781b      	ldrb	r3, [r3, #0]
 8017ab8:	2b01      	cmp	r3, #1
 8017aba:	d110      	bne.n	8017ade <mbedtls_ssl_handle_message_type+0xa6>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017ac0:	3301      	adds	r3, #1
 8017ac2:	781b      	ldrb	r3, [r3, #0]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d10a      	bne.n	8017ade <mbedtls_ssl_handle_message_type+0xa6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 8017ac8:	4b17      	ldr	r3, [pc, #92]	; (8017b28 <mbedtls_ssl_handle_message_type+0xf0>)
 8017aca:	9300      	str	r3, [sp, #0]
 8017acc:	f241 031a 	movw	r3, #4122	; 0x101a
 8017ad0:	4a12      	ldr	r2, [pc, #72]	; (8017b1c <mbedtls_ssl_handle_message_type+0xe4>)
 8017ad2:	2102      	movs	r1, #2
 8017ad4:	6878      	ldr	r0, [r7, #4]
 8017ad6:	f7f3 feb9 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 8017ada:	4b14      	ldr	r3, [pc, #80]	; (8017b2c <mbedtls_ssl_handle_message_type+0xf4>)
 8017adc:	e018      	b.n	8017b10 <mbedtls_ssl_handle_message_type+0xd8>
        }

#if defined(MBEDTLS_SSL_RENEGOTIATION_ENABLED)
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	d110      	bne.n	8017b0a <mbedtls_ssl_handle_message_type+0xd2>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION )
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017aec:	3301      	adds	r3, #1
 8017aee:	781b      	ldrb	r3, [r3, #0]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8017af0:	2b64      	cmp	r3, #100	; 0x64
 8017af2:	d10a      	bne.n	8017b0a <mbedtls_ssl_handle_message_type+0xd2>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
 8017af4:	4b0e      	ldr	r3, [pc, #56]	; (8017b30 <mbedtls_ssl_handle_message_type+0xf8>)
 8017af6:	9300      	str	r3, [sp, #0]
 8017af8:	f241 0322 	movw	r3, #4130	; 0x1022
 8017afc:	4a07      	ldr	r2, [pc, #28]	; (8017b1c <mbedtls_ssl_handle_message_type+0xe4>)
 8017afe:	2102      	movs	r1, #2
 8017b00:	6878      	ldr	r0, [r7, #4]
 8017b02:	f7f3 fea3 	bl	800b84c <mbedtls_debug_print_msg>
            /* Will be handled when trying to parse ServerHello */
            return( 0 );
 8017b06:	2300      	movs	r3, #0
 8017b08:	e002      	b.n	8017b10 <mbedtls_ssl_handle_message_type+0xd8>
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8017b0a:	4b0a      	ldr	r3, [pc, #40]	; (8017b34 <mbedtls_ssl_handle_message_type+0xfc>)
 8017b0c:	e000      	b.n	8017b10 <mbedtls_ssl_handle_message_type+0xd8>
    }

    return( 0 );
 8017b0e:	2300      	movs	r3, #0
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	3710      	adds	r7, #16
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}
 8017b18:	08023524 	.word	0x08023524
 8017b1c:	08022c14 	.word	0x08022c14
 8017b20:	08023548 	.word	0x08023548
 8017b24:	ffff8880 	.word	0xffff8880
 8017b28:	0802356c 	.word	0x0802356c
 8017b2c:	ffff8780 	.word	0xffff8780
 8017b30:	08023588 	.word	0x08023588
 8017b34:	ffff9980 	.word	0xffff9980

08017b38 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b088      	sub	sp, #32
 8017b3c:	af04      	add	r7, sp, #16
 8017b3e:	6078      	str	r0, [r7, #4]
 8017b40:	460b      	mov	r3, r1
 8017b42:	70fb      	strb	r3, [r7, #3]
 8017b44:	4613      	mov	r3, r2
 8017b46:	70bb      	strb	r3, [r7, #2]
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d003      	beq.n	8017b56 <mbedtls_ssl_send_alert_message+0x1e>
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d101      	bne.n	8017b5a <mbedtls_ssl_send_alert_message+0x22>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8017b56:	4b26      	ldr	r3, [pc, #152]	; (8017bf0 <mbedtls_ssl_send_alert_message+0xb8>)
 8017b58:	e046      	b.n	8017be8 <mbedtls_ssl_send_alert_message+0xb0>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 8017b5a:	4b26      	ldr	r3, [pc, #152]	; (8017bf4 <mbedtls_ssl_send_alert_message+0xbc>)
 8017b5c:	9300      	str	r3, [sp, #0]
 8017b5e:	f241 0352 	movw	r3, #4178	; 0x1052
 8017b62:	4a25      	ldr	r2, [pc, #148]	; (8017bf8 <mbedtls_ssl_send_alert_message+0xc0>)
 8017b64:	2102      	movs	r1, #2
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7f3 fe70 	bl	800b84c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 8017b6c:	78fb      	ldrb	r3, [r7, #3]
 8017b6e:	78ba      	ldrb	r2, [r7, #2]
 8017b70:	9202      	str	r2, [sp, #8]
 8017b72:	9301      	str	r3, [sp, #4]
 8017b74:	4b21      	ldr	r3, [pc, #132]	; (8017bfc <mbedtls_ssl_send_alert_message+0xc4>)
 8017b76:	9300      	str	r3, [sp, #0]
 8017b78:	f241 0353 	movw	r3, #4179	; 0x1053
 8017b7c:	4a1e      	ldr	r2, [pc, #120]	; (8017bf8 <mbedtls_ssl_send_alert_message+0xc0>)
 8017b7e:	2103      	movs	r1, #3
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f7f3 fe63 	bl	800b84c <mbedtls_debug_print_msg>

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	2215      	movs	r2, #21
 8017b8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msglen = 2;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	2202      	movs	r2, #2
 8017b92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msg[0] = level;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017b9c:	78fa      	ldrb	r2, [r7, #3]
 8017b9e:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[1] = message;
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017ba6:	3301      	adds	r3, #1
 8017ba8:	78ba      	ldrb	r2, [r7, #2]
 8017baa:	701a      	strb	r2, [r3, #0]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8017bac:	6878      	ldr	r0, [r7, #4]
 8017bae:	f7ff fb19 	bl	80171e4 <mbedtls_ssl_write_record>
 8017bb2:	60f8      	str	r0, [r7, #12]
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d00c      	beq.n	8017bd4 <mbedtls_ssl_send_alert_message+0x9c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	9301      	str	r3, [sp, #4]
 8017bbe:	4b10      	ldr	r3, [pc, #64]	; (8017c00 <mbedtls_ssl_send_alert_message+0xc8>)
 8017bc0:	9300      	str	r3, [sp, #0]
 8017bc2:	f241 035c 	movw	r3, #4188	; 0x105c
 8017bc6:	4a0c      	ldr	r2, [pc, #48]	; (8017bf8 <mbedtls_ssl_send_alert_message+0xc0>)
 8017bc8:	2101      	movs	r1, #1
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	f7f3 fec4 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	e009      	b.n	8017be8 <mbedtls_ssl_send_alert_message+0xb0>
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 8017bd4:	4b0b      	ldr	r3, [pc, #44]	; (8017c04 <mbedtls_ssl_send_alert_message+0xcc>)
 8017bd6:	9300      	str	r3, [sp, #0]
 8017bd8:	f241 035f 	movw	r3, #4191	; 0x105f
 8017bdc:	4a06      	ldr	r2, [pc, #24]	; (8017bf8 <mbedtls_ssl_send_alert_message+0xc0>)
 8017bde:	2102      	movs	r1, #2
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f7f3 fe33 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8017be6:	2300      	movs	r3, #0
}
 8017be8:	4618      	mov	r0, r3
 8017bea:	3710      	adds	r7, #16
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}
 8017bf0:	ffff8f00 	.word	0xffff8f00
 8017bf4:	0802359c 	.word	0x0802359c
 8017bf8:	08022c14 	.word	0x08022c14
 8017bfc:	080235b4 	.word	0x080235b4
 8017c00:	080235d4 	.word	0x080235d4
 8017c04:	080235f0 	.word	0x080235f0

08017c08 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b08c      	sub	sp, #48	; 0x30
 8017c0c:	af04      	add	r7, sp, #16
 8017c0e:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 8017c10:	4b81      	ldr	r3, [pc, #516]	; (8017e18 <mbedtls_ssl_write_certificate+0x210>)
 8017c12:	617b      	str	r3, [r7, #20]
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	613b      	str	r3, [r7, #16]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 8017c1c:	4b7f      	ldr	r3, [pc, #508]	; (8017e1c <mbedtls_ssl_write_certificate+0x214>)
 8017c1e:	9300      	str	r3, [sp, #0]
 8017c20:	f241 03a1 	movw	r3, #4257	; 0x10a1
 8017c24:	4a7e      	ldr	r2, [pc, #504]	; (8017e20 <mbedtls_ssl_write_certificate+0x218>)
 8017c26:	2102      	movs	r1, #2
 8017c28:	6878      	ldr	r0, [r7, #4]
 8017c2a:	f7f3 fe0f 	bl	800b84c <mbedtls_debug_print_msg>

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	7a9b      	ldrb	r3, [r3, #10]
 8017c32:	2b05      	cmp	r3, #5
 8017c34:	d00b      	beq.n	8017c4e <mbedtls_ssl_write_certificate+0x46>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8017c36:	693b      	ldr	r3, [r7, #16]
 8017c38:	7a9b      	ldrb	r3, [r3, #10]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8017c3a:	2b06      	cmp	r3, #6
 8017c3c:	d007      	beq.n	8017c4e <mbedtls_ssl_write_certificate+0x46>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8017c3e:	693b      	ldr	r3, [r7, #16]
 8017c40:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8017c42:	2b08      	cmp	r3, #8
 8017c44:	d003      	beq.n	8017c4e <mbedtls_ssl_write_certificate+0x46>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
 8017c46:	693b      	ldr	r3, [r7, #16]
 8017c48:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8017c4a:	2b0b      	cmp	r3, #11
 8017c4c:	d10f      	bne.n	8017c6e <mbedtls_ssl_write_certificate+0x66>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 8017c4e:	4b75      	ldr	r3, [pc, #468]	; (8017e24 <mbedtls_ssl_write_certificate+0x21c>)
 8017c50:	9300      	str	r3, [sp, #0]
 8017c52:	f241 03a8 	movw	r3, #4264	; 0x10a8
 8017c56:	4a72      	ldr	r2, [pc, #456]	; (8017e20 <mbedtls_ssl_write_certificate+0x218>)
 8017c58:	2102      	movs	r1, #2
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f7f3 fdf6 	bl	800b84c <mbedtls_debug_print_msg>
        ssl->state++;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	685b      	ldr	r3, [r3, #4]
 8017c64:	1c5a      	adds	r2, r3, #1
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	605a      	str	r2, [r3, #4]
        return( 0 );
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	e0cf      	b.n	8017e0e <mbedtls_ssl_write_certificate+0x206>
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017c76:	f003 0301 	and.w	r3, r3, #1
 8017c7a:	b2db      	uxtb	r3, r3
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d114      	bne.n	8017caa <mbedtls_ssl_write_certificate+0xa2>
    {
        if( ssl->client_auth == 0 )
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d10f      	bne.n	8017caa <mbedtls_ssl_write_certificate+0xa2>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 8017c8a:	4b66      	ldr	r3, [pc, #408]	; (8017e24 <mbedtls_ssl_write_certificate+0x21c>)
 8017c8c:	9300      	str	r3, [sp, #0]
 8017c8e:	f241 03b2 	movw	r3, #4274	; 0x10b2
 8017c92:	4a63      	ldr	r2, [pc, #396]	; (8017e20 <mbedtls_ssl_write_certificate+0x218>)
 8017c94:	2102      	movs	r1, #2
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f7f3 fdd8 	bl	800b84c <mbedtls_debug_print_msg>
            ssl->state++;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	1c5a      	adds	r2, r3, #1
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	605a      	str	r2, [r3, #4]
            return( 0 );
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	e0b1      	b.n	8017e0e <mbedtls_ssl_write_certificate+0x206>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED );
        }
    }
#endif

    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f7fd fae8 	bl	8015280 <mbedtls_ssl_own_cert>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	9301      	str	r3, [sp, #4]
 8017cb4:	4b5c      	ldr	r3, [pc, #368]	; (8017e28 <mbedtls_ssl_write_certificate+0x220>)
 8017cb6:	9300      	str	r3, [sp, #0]
 8017cb8:	f241 03d5 	movw	r3, #4309	; 0x10d5
 8017cbc:	4a58      	ldr	r2, [pc, #352]	; (8017e20 <mbedtls_ssl_write_certificate+0x218>)
 8017cbe:	2103      	movs	r1, #3
 8017cc0:	6878      	ldr	r0, [r7, #4]
 8017cc2:	f7f4 fabb 	bl	800c23c <mbedtls_debug_print_crt>
     *     7  .  9    length of cert. 1
     *    10  . n-1   peer certificate
     *     n  . n+2   length of cert. 2
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
 8017cc6:	2307      	movs	r3, #7
 8017cc8:	61fb      	str	r3, [r7, #28]
    crt = mbedtls_ssl_own_cert( ssl );
 8017cca:	6878      	ldr	r0, [r7, #4]
 8017ccc:	f7fd fad8 	bl	8015280 <mbedtls_ssl_own_cert>
 8017cd0:	61b8      	str	r0, [r7, #24]

    while( crt != NULL )
 8017cd2:	e04e      	b.n	8017d72 <mbedtls_ssl_write_certificate+0x16a>
    {
        n = crt->raw.len;
 8017cd4:	69bb      	ldr	r3, [r7, #24]
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	60fb      	str	r3, [r7, #12]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 8017cda:	69fb      	ldr	r3, [r7, #28]
 8017cdc:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8017ce0:	330d      	adds	r3, #13
 8017ce2:	68fa      	ldr	r2, [r7, #12]
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d912      	bls.n	8017d0e <mbedtls_ssl_write_certificate+0x106>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 8017ce8:	69fa      	ldr	r2, [r7, #28]
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	4413      	add	r3, r2
 8017cee:	3303      	adds	r3, #3
 8017cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017cf4:	9202      	str	r2, [sp, #8]
 8017cf6:	9301      	str	r3, [sp, #4]
 8017cf8:	4b4c      	ldr	r3, [pc, #304]	; (8017e2c <mbedtls_ssl_write_certificate+0x224>)
 8017cfa:	9300      	str	r3, [sp, #0]
 8017cfc:	f241 03e8 	movw	r3, #4328	; 0x10e8
 8017d00:	4a47      	ldr	r2, [pc, #284]	; (8017e20 <mbedtls_ssl_write_certificate+0x218>)
 8017d02:	2101      	movs	r1, #1
 8017d04:	6878      	ldr	r0, [r7, #4]
 8017d06:	f7f3 fda1 	bl	800b84c <mbedtls_debug_print_msg>
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 8017d0a:	4b49      	ldr	r3, [pc, #292]	; (8017e30 <mbedtls_ssl_write_certificate+0x228>)
 8017d0c:	e07f      	b.n	8017e0e <mbedtls_ssl_write_certificate+0x206>
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	0c19      	lsrs	r1, r3, #16
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8017d18:	69fb      	ldr	r3, [r7, #28]
 8017d1a:	4413      	add	r3, r2
 8017d1c:	b2ca      	uxtb	r2, r1
 8017d1e:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	0a19      	lsrs	r1, r3, #8
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8017d2a:	69fb      	ldr	r3, [r7, #28]
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	4413      	add	r3, r2
 8017d30:	b2ca      	uxtb	r2, r1
 8017d32:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8017d3a:	69fb      	ldr	r3, [r7, #28]
 8017d3c:	3302      	adds	r3, #2
 8017d3e:	4413      	add	r3, r2
 8017d40:	68fa      	ldr	r2, [r7, #12]
 8017d42:	b2d2      	uxtb	r2, r2
 8017d44:	701a      	strb	r2, [r3, #0]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 8017d46:	69fb      	ldr	r3, [r7, #28]
 8017d48:	3303      	adds	r3, #3
 8017d4a:	61fb      	str	r3, [r7, #28]
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8017d52:	69fb      	ldr	r3, [r7, #28]
 8017d54:	18d0      	adds	r0, r2, r3
 8017d56:	69bb      	ldr	r3, [r7, #24]
 8017d58:	689b      	ldr	r3, [r3, #8]
 8017d5a:	68fa      	ldr	r2, [r7, #12]
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	f006 f975 	bl	801e04c <memcpy>
        i += n; crt = crt->next;
 8017d62:	69fa      	ldr	r2, [r7, #28]
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	4413      	add	r3, r2
 8017d68:	61fb      	str	r3, [r7, #28]
 8017d6a:	69bb      	ldr	r3, [r7, #24]
 8017d6c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8017d70:	61bb      	str	r3, [r7, #24]
    while( crt != NULL )
 8017d72:	69bb      	ldr	r3, [r7, #24]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d1ad      	bne.n	8017cd4 <mbedtls_ssl_write_certificate+0xcc>
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 8017d78:	69fb      	ldr	r3, [r7, #28]
 8017d7a:	3b07      	subs	r3, #7
 8017d7c:	0c1a      	lsrs	r2, r3, #16
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d84:	3304      	adds	r3, #4
 8017d86:	b2d2      	uxtb	r2, r2
 8017d88:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 8017d8a:	69fb      	ldr	r3, [r7, #28]
 8017d8c:	3b07      	subs	r3, #7
 8017d8e:	0a1a      	lsrs	r2, r3, #8
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d96:	3305      	adds	r3, #5
 8017d98:	b2d2      	uxtb	r2, r2
 8017d9a:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 8017d9c:	69fb      	ldr	r3, [r7, #28]
 8017d9e:	b2da      	uxtb	r2, r3
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017da6:	3306      	adds	r3, #6
 8017da8:	3a07      	subs	r2, #7
 8017daa:	b2d2      	uxtb	r2, r2
 8017dac:	701a      	strb	r2, [r3, #0]

    ssl->out_msglen  = i;
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	69fa      	ldr	r2, [r7, #28]
 8017db2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	2216      	movs	r2, #22
 8017dba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017dc4:	220b      	movs	r2, #11
 8017dc6:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	685b      	ldr	r3, [r3, #4]
 8017dcc:	1c5a      	adds	r2, r3, #1
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8017dd2:	6878      	ldr	r0, [r7, #4]
 8017dd4:	f7ff fa06 	bl	80171e4 <mbedtls_ssl_write_record>
 8017dd8:	6178      	str	r0, [r7, #20]
 8017dda:	697b      	ldr	r3, [r7, #20]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d00c      	beq.n	8017dfa <mbedtls_ssl_write_certificate+0x1f2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	9301      	str	r3, [sp, #4]
 8017de4:	4b13      	ldr	r3, [pc, #76]	; (8017e34 <mbedtls_ssl_write_certificate+0x22c>)
 8017de6:	9300      	str	r3, [sp, #0]
 8017de8:	f241 1305 	movw	r3, #4357	; 0x1105
 8017dec:	4a0c      	ldr	r2, [pc, #48]	; (8017e20 <mbedtls_ssl_write_certificate+0x218>)
 8017dee:	2101      	movs	r1, #1
 8017df0:	6878      	ldr	r0, [r7, #4]
 8017df2:	f7f3 fdb1 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8017df6:	697b      	ldr	r3, [r7, #20]
 8017df8:	e009      	b.n	8017e0e <mbedtls_ssl_write_certificate+0x206>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 8017dfa:	4b0f      	ldr	r3, [pc, #60]	; (8017e38 <mbedtls_ssl_write_certificate+0x230>)
 8017dfc:	9300      	str	r3, [sp, #0]
 8017dfe:	f241 1309 	movw	r3, #4361	; 0x1109
 8017e02:	4a07      	ldr	r2, [pc, #28]	; (8017e20 <mbedtls_ssl_write_certificate+0x218>)
 8017e04:	2102      	movs	r1, #2
 8017e06:	6878      	ldr	r0, [r7, #4]
 8017e08:	f7f3 fd20 	bl	800b84c <mbedtls_debug_print_msg>

    return( ret );
 8017e0c:	697b      	ldr	r3, [r7, #20]
}
 8017e0e:	4618      	mov	r0, r3
 8017e10:	3720      	adds	r7, #32
 8017e12:	46bd      	mov	sp, r7
 8017e14:	bd80      	pop	{r7, pc}
 8017e16:	bf00      	nop
 8017e18:	ffff8f80 	.word	0xffff8f80
 8017e1c:	08023608 	.word	0x08023608
 8017e20:	08022c14 	.word	0x08022c14
 8017e24:	08023620 	.word	0x08023620
 8017e28:	0802363c 	.word	0x0802363c
 8017e2c:	0802364c 	.word	0x0802364c
 8017e30:	ffff8b00 	.word	0xffff8b00
 8017e34:	080235d4 	.word	0x080235d4
 8017e38:	0802366c 	.word	0x0802366c

08017e3c <mbedtls_ssl_parse_certificate>:

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 8017e3c:	b5b0      	push	{r4, r5, r7, lr}
 8017e3e:	b08e      	sub	sp, #56	; 0x38
 8017e40:	af04      	add	r7, sp, #16
 8017e42:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 8017e44:	4b99      	ldr	r3, [pc, #612]	; (80180ac <mbedtls_ssl_parse_certificate+0x270>)
 8017e46:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	61bb      	str	r3, [r7, #24]
    int authmode = ssl->conf->authmode;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017e58:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	617b      	str	r3, [r7, #20]
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 8017e60:	4b93      	ldr	r3, [pc, #588]	; (80180b0 <mbedtls_ssl_parse_certificate+0x274>)
 8017e62:	9300      	str	r3, [sp, #0]
 8017e64:	f241 1316 	movw	r3, #4374	; 0x1116
 8017e68:	4a92      	ldr	r2, [pc, #584]	; (80180b4 <mbedtls_ssl_parse_certificate+0x278>)
 8017e6a:	2102      	movs	r1, #2
 8017e6c:	6878      	ldr	r0, [r7, #4]
 8017e6e:	f7f3 fced 	bl	800b84c <mbedtls_debug_print_msg>

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8017e72:	69bb      	ldr	r3, [r7, #24]
 8017e74:	7a9b      	ldrb	r3, [r3, #10]
 8017e76:	2b05      	cmp	r3, #5
 8017e78:	d00b      	beq.n	8017e92 <mbedtls_ssl_parse_certificate+0x56>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8017e7a:	69bb      	ldr	r3, [r7, #24]
 8017e7c:	7a9b      	ldrb	r3, [r3, #10]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8017e7e:	2b06      	cmp	r3, #6
 8017e80:	d007      	beq.n	8017e92 <mbedtls_ssl_parse_certificate+0x56>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8017e86:	2b08      	cmp	r3, #8
 8017e88:	d003      	beq.n	8017e92 <mbedtls_ssl_parse_certificate+0x56>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
 8017e8a:	69bb      	ldr	r3, [r7, #24]
 8017e8c:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8017e8e:	2b0b      	cmp	r3, #11
 8017e90:	d10f      	bne.n	8017eb2 <mbedtls_ssl_parse_certificate+0x76>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 8017e92:	4b89      	ldr	r3, [pc, #548]	; (80180b8 <mbedtls_ssl_parse_certificate+0x27c>)
 8017e94:	9300      	str	r3, [sp, #0]
 8017e96:	f241 131d 	movw	r3, #4381	; 0x111d
 8017e9a:	4a86      	ldr	r2, [pc, #536]	; (80180b4 <mbedtls_ssl_parse_certificate+0x278>)
 8017e9c:	2102      	movs	r1, #2
 8017e9e:	6878      	ldr	r0, [r7, #4]
 8017ea0:	f7f3 fcd4 	bl	800b84c <mbedtls_debug_print_msg>
        ssl->state++;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	685b      	ldr	r3, [r3, #4]
 8017ea8:	1c5a      	adds	r2, r3, #1
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	605a      	str	r2, [r3, #4]
        return( 0 );
 8017eae:	2300      	movs	r3, #0
 8017eb0:	e28b      	b.n	80183ca <mbedtls_ssl_parse_certificate+0x58e>
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8017eb2:	6878      	ldr	r0, [r7, #4]
 8017eb4:	f7ff fca4 	bl	8017800 <mbedtls_ssl_read_record>
 8017eb8:	6278      	str	r0, [r7, #36]	; 0x24
 8017eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d00c      	beq.n	8017eda <mbedtls_ssl_parse_certificate+0x9e>
    {
        /* mbedtls_ssl_read_record may have sent an alert already. We
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8017ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec2:	9301      	str	r3, [sp, #4]
 8017ec4:	4b7d      	ldr	r3, [pc, #500]	; (80180bc <mbedtls_ssl_parse_certificate+0x280>)
 8017ec6:	9300      	str	r3, [sp, #0]
 8017ec8:	f241 133e 	movw	r3, #4414	; 0x113e
 8017ecc:	4a79      	ldr	r2, [pc, #484]	; (80180b4 <mbedtls_ssl_parse_certificate+0x278>)
 8017ece:	2101      	movs	r1, #1
 8017ed0:	6878      	ldr	r0, [r7, #4]
 8017ed2:	f7f3 fd41 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8017ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed8:	e277      	b.n	80183ca <mbedtls_ssl_parse_certificate+0x58e>
    }

    ssl->state++;
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	685b      	ldr	r3, [r3, #4]
 8017ede:	1c5a      	adds	r2, r3, #1
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	605a      	str	r2, [r3, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ee8:	2b16      	cmp	r3, #22
 8017eea:	d00f      	beq.n	8017f0c <mbedtls_ssl_parse_certificate+0xd0>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8017eec:	4b74      	ldr	r3, [pc, #464]	; (80180c0 <mbedtls_ssl_parse_certificate+0x284>)
 8017eee:	9300      	str	r3, [sp, #0]
 8017ef0:	f241 137b 	movw	r3, #4475	; 0x117b
 8017ef4:	4a6f      	ldr	r2, [pc, #444]	; (80180b4 <mbedtls_ssl_parse_certificate+0x278>)
 8017ef6:	2101      	movs	r1, #1
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f7f3 fca7 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017efe:	220a      	movs	r2, #10
 8017f00:	2102      	movs	r1, #2
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f7ff fe18 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8017f08:	4b6e      	ldr	r3, [pc, #440]	; (80180c4 <mbedtls_ssl_parse_certificate+0x288>)
 8017f0a:	e25e      	b.n	80183ca <mbedtls_ssl_parse_certificate+0x58e>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f10:	781b      	ldrb	r3, [r3, #0]
 8017f12:	2b0b      	cmp	r3, #11
 8017f14:	d108      	bne.n	8017f28 <mbedtls_ssl_parse_certificate+0xec>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8017f1a:	6878      	ldr	r0, [r7, #4]
 8017f1c:	f7fd f9de 	bl	80152dc <mbedtls_ssl_hs_hdr_len>
 8017f20:	4603      	mov	r3, r0
 8017f22:	3306      	adds	r3, #6
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 8017f24:	429c      	cmp	r4, r3
 8017f26:	d20f      	bcs.n	8017f48 <mbedtls_ssl_parse_certificate+0x10c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8017f28:	4b65      	ldr	r3, [pc, #404]	; (80180c0 <mbedtls_ssl_parse_certificate+0x284>)
 8017f2a:	9300      	str	r3, [sp, #0]
 8017f2c:	f241 1384 	movw	r3, #4484	; 0x1184
 8017f30:	4a60      	ldr	r2, [pc, #384]	; (80180b4 <mbedtls_ssl_parse_certificate+0x278>)
 8017f32:	2101      	movs	r1, #1
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f7f3 fc89 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017f3a:	2232      	movs	r2, #50	; 0x32
 8017f3c:	2102      	movs	r1, #2
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f7ff fdfa 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8017f44:	4b60      	ldr	r3, [pc, #384]	; (80180c8 <mbedtls_ssl_parse_certificate+0x28c>)
 8017f46:	e240      	b.n	80183ca <mbedtls_ssl_parse_certificate+0x58e>
    }

    i = mbedtls_ssl_hs_hdr_len( ssl );
 8017f48:	6878      	ldr	r0, [r7, #4]
 8017f4a:	f7fd f9c7 	bl	80152dc <mbedtls_ssl_hs_hdr_len>
 8017f4e:	6238      	str	r0, [r7, #32]

    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017f54:	6a3b      	ldr	r3, [r7, #32]
 8017f56:	3301      	adds	r3, #1
 8017f58:	4413      	add	r3, r2
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	021b      	lsls	r3, r3, #8
 8017f5e:	687a      	ldr	r2, [r7, #4]
 8017f60:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8017f62:	6a3a      	ldr	r2, [r7, #32]
 8017f64:	3202      	adds	r2, #2
 8017f66:	440a      	add	r2, r1
 8017f68:	7812      	ldrb	r2, [r2, #0]
 8017f6a:	4313      	orrs	r3, r2
 8017f6c:	613b      	str	r3, [r7, #16]

    if( ssl->in_msg[i] != 0 ||
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017f72:	6a3b      	ldr	r3, [r7, #32]
 8017f74:	4413      	add	r3, r2
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d10a      	bne.n	8017f92 <mbedtls_ssl_parse_certificate+0x156>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8017f80:	6878      	ldr	r0, [r7, #4]
 8017f82:	f7fd f9ab 	bl	80152dc <mbedtls_ssl_hs_hdr_len>
 8017f86:	4602      	mov	r2, r0
 8017f88:	693b      	ldr	r3, [r7, #16]
 8017f8a:	4413      	add	r3, r2
 8017f8c:	3303      	adds	r3, #3
    if( ssl->in_msg[i] != 0 ||
 8017f8e:	429c      	cmp	r4, r3
 8017f90:	d00f      	beq.n	8017fb2 <mbedtls_ssl_parse_certificate+0x176>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8017f92:	4b4b      	ldr	r3, [pc, #300]	; (80180c0 <mbedtls_ssl_parse_certificate+0x284>)
 8017f94:	9300      	str	r3, [sp, #0]
 8017f96:	f241 1394 	movw	r3, #4500	; 0x1194
 8017f9a:	4a46      	ldr	r2, [pc, #280]	; (80180b4 <mbedtls_ssl_parse_certificate+0x278>)
 8017f9c:	2101      	movs	r1, #1
 8017f9e:	6878      	ldr	r0, [r7, #4]
 8017fa0:	f7f3 fc54 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017fa4:	2232      	movs	r2, #50	; 0x32
 8017fa6:	2102      	movs	r1, #2
 8017fa8:	6878      	ldr	r0, [r7, #4]
 8017faa:	f7ff fdc5 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8017fae:	4b46      	ldr	r3, [pc, #280]	; (80180c8 <mbedtls_ssl_parse_certificate+0x28c>)
 8017fb0:	e20b      	b.n	80183ca <mbedtls_ssl_parse_certificate+0x58e>
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d00b      	beq.n	8017fd4 <mbedtls_ssl_parse_certificate+0x198>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f004 feb0 	bl	801cd28 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f006 f824 	bl	801e01c <free>
    }

    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8017fd8:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017fdc:	2001      	movs	r0, #1
 8017fde:	f005 ffe3 	bl	801dfa8 <calloc>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017fe6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d112      	bne.n	8018012 <mbedtls_ssl_parse_certificate+0x1d6>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 8017fec:	f44f 739a 	mov.w	r3, #308	; 0x134
 8017ff0:	9301      	str	r3, [sp, #4]
 8017ff2:	4b36      	ldr	r3, [pc, #216]	; (80180cc <mbedtls_ssl_parse_certificate+0x290>)
 8017ff4:	9300      	str	r3, [sp, #0]
 8017ff6:	f241 13a4 	movw	r3, #4516	; 0x11a4
 8017ffa:	4a2e      	ldr	r2, [pc, #184]	; (80180b4 <mbedtls_ssl_parse_certificate+0x278>)
 8017ffc:	2101      	movs	r1, #1
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f7f3 fc24 	bl	800b84c <mbedtls_debug_print_msg>
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018004:	2250      	movs	r2, #80	; 0x50
 8018006:	2102      	movs	r1, #2
 8018008:	6878      	ldr	r0, [r7, #4]
 801800a:	f7ff fd95 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801800e:	4b30      	ldr	r3, [pc, #192]	; (80180d0 <mbedtls_ssl_parse_certificate+0x294>)
 8018010:	e1db      	b.n	80183ca <mbedtls_ssl_parse_certificate+0x58e>
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018018:	4618      	mov	r0, r3
 801801a:	f004 fe77 	bl	801cd0c <mbedtls_x509_crt_init>

    i += 3;
 801801e:	6a3b      	ldr	r3, [r7, #32]
 8018020:	3303      	adds	r3, #3
 8018022:	623b      	str	r3, [r7, #32]

    while( i < ssl->in_hslen )
 8018024:	e099      	b.n	801815a <mbedtls_ssl_parse_certificate+0x31e>
    {
        if( ssl->in_msg[i] != 0 )
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801802a:	6a3b      	ldr	r3, [r7, #32]
 801802c:	4413      	add	r3, r2
 801802e:	781b      	ldrb	r3, [r3, #0]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d00f      	beq.n	8018054 <mbedtls_ssl_parse_certificate+0x218>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8018034:	4b22      	ldr	r3, [pc, #136]	; (80180c0 <mbedtls_ssl_parse_certificate+0x284>)
 8018036:	9300      	str	r3, [sp, #0]
 8018038:	f241 13b3 	movw	r3, #4531	; 0x11b3
 801803c:	4a1d      	ldr	r2, [pc, #116]	; (80180b4 <mbedtls_ssl_parse_certificate+0x278>)
 801803e:	2101      	movs	r1, #1
 8018040:	6878      	ldr	r0, [r7, #4]
 8018042:	f7f3 fc03 	bl	800b84c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018046:	2232      	movs	r2, #50	; 0x32
 8018048:	2102      	movs	r1, #2
 801804a:	6878      	ldr	r0, [r7, #4]
 801804c:	f7ff fd74 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8018050:	4b1d      	ldr	r3, [pc, #116]	; (80180c8 <mbedtls_ssl_parse_certificate+0x28c>)
 8018052:	e1ba      	b.n	80183ca <mbedtls_ssl_parse_certificate+0x58e>
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8018058:	6a3b      	ldr	r3, [r7, #32]
 801805a:	3301      	adds	r3, #1
 801805c:	4413      	add	r3, r2
 801805e:	781b      	ldrb	r3, [r3, #0]
 8018060:	021b      	lsls	r3, r3, #8
            | (unsigned int) ssl->in_msg[i + 2];
 8018062:	687a      	ldr	r2, [r7, #4]
 8018064:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8018066:	6a3a      	ldr	r2, [r7, #32]
 8018068:	3202      	adds	r2, #2
 801806a:	440a      	add	r2, r1
 801806c:	7812      	ldrb	r2, [r2, #0]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801806e:	4313      	orrs	r3, r2
 8018070:	613b      	str	r3, [r7, #16]
        i += 3;
 8018072:	6a3b      	ldr	r3, [r7, #32]
 8018074:	3303      	adds	r3, #3
 8018076:	623b      	str	r3, [r7, #32]

        if( n < 128 || i + n > ssl->in_hslen )
 8018078:	693b      	ldr	r3, [r7, #16]
 801807a:	2b7f      	cmp	r3, #127	; 0x7f
 801807c:	d906      	bls.n	801808c <mbedtls_ssl_parse_certificate+0x250>
 801807e:	6a3a      	ldr	r2, [r7, #32]
 8018080:	693b      	ldr	r3, [r7, #16]
 8018082:	441a      	add	r2, r3
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018088:	429a      	cmp	r2, r3
 801808a:	d923      	bls.n	80180d4 <mbedtls_ssl_parse_certificate+0x298>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801808c:	4b0c      	ldr	r3, [pc, #48]	; (80180c0 <mbedtls_ssl_parse_certificate+0x284>)
 801808e:	9300      	str	r3, [sp, #0]
 8018090:	f241 13bf 	movw	r3, #4543	; 0x11bf
 8018094:	4a07      	ldr	r2, [pc, #28]	; (80180b4 <mbedtls_ssl_parse_certificate+0x278>)
 8018096:	2101      	movs	r1, #1
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	f7f3 fbd7 	bl	800b84c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801809e:	2232      	movs	r2, #50	; 0x32
 80180a0:	2102      	movs	r1, #2
 80180a2:	6878      	ldr	r0, [r7, #4]
 80180a4:	f7ff fd48 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 80180a8:	4b07      	ldr	r3, [pc, #28]	; (80180c8 <mbedtls_ssl_parse_certificate+0x28c>)
 80180aa:	e18e      	b.n	80183ca <mbedtls_ssl_parse_certificate+0x58e>
 80180ac:	ffff8f80 	.word	0xffff8f80
 80180b0:	08023684 	.word	0x08023684
 80180b4:	08022c14 	.word	0x08022c14
 80180b8:	0802369c 	.word	0x0802369c
 80180bc:	080236b8 	.word	0x080236b8
 80180c0:	080236d0 	.word	0x080236d0
 80180c4:	ffff8900 	.word	0xffff8900
 80180c8:	ffff8600 	.word	0xffff8600
 80180cc:	080236e8 	.word	0x080236e8
 80180d0:	ffff8100 	.word	0xffff8100
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180d8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
                                  ssl->in_msg + i, n );
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80180de:	6a3b      	ldr	r3, [r7, #32]
 80180e0:	4413      	add	r3, r2
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 80180e2:	693a      	ldr	r2, [r7, #16]
 80180e4:	4619      	mov	r1, r3
 80180e6:	f003 f8fb 	bl	801b2e0 <mbedtls_x509_crt_parse_der>
 80180ea:	6278      	str	r0, [r7, #36]	; 0x24
        switch( ret )
 80180ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d02e      	beq.n	8018150 <mbedtls_ssl_parse_certificate+0x314>
 80180f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	dc16      	bgt.n	8018126 <mbedtls_ssl_parse_certificate+0x2ea>
 80180f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fa:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
 80180fe:	d00f      	beq.n	8018120 <mbedtls_ssl_parse_certificate+0x2e4>
 8018100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018102:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
 8018106:	dc0e      	bgt.n	8018126 <mbedtls_ssl_parse_certificate+0x2ea>
 8018108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801810a:	f513 5f22 	cmn.w	r3, #10368	; 0x2880
 801810e:	d004      	beq.n	801811a <mbedtls_ssl_parse_certificate+0x2de>
 8018110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018112:	4a9a      	ldr	r2, [pc, #616]	; (801837c <mbedtls_ssl_parse_certificate+0x540>)
 8018114:	4293      	cmp	r3, r2
 8018116:	d106      	bne.n	8018126 <mbedtls_ssl_parse_certificate+0x2ea>
        {
        case 0: /*ok*/
        case MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + MBEDTLS_ERR_OID_NOT_FOUND:
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;
 8018118:	e01a      	b.n	8018150 <mbedtls_ssl_parse_certificate+0x314>

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 801811a:	2350      	movs	r3, #80	; 0x50
 801811c:	77fb      	strb	r3, [r7, #31]
            goto crt_parse_der_failed;
 801811e:	e004      	b.n	801812a <mbedtls_ssl_parse_certificate+0x2ee>

        case MBEDTLS_ERR_X509_UNKNOWN_VERSION:
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8018120:	232b      	movs	r3, #43	; 0x2b
 8018122:	77fb      	strb	r3, [r7, #31]
            goto crt_parse_der_failed;
 8018124:	e001      	b.n	801812a <mbedtls_ssl_parse_certificate+0x2ee>

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 8018126:	232a      	movs	r3, #42	; 0x2a
 8018128:	77fb      	strb	r3, [r7, #31]
        crt_parse_der_failed:
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 801812a:	7ffb      	ldrb	r3, [r7, #31]
 801812c:	461a      	mov	r2, r3
 801812e:	2102      	movs	r1, #2
 8018130:	6878      	ldr	r0, [r7, #4]
 8018132:	f7ff fd01 	bl	8017b38 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 8018136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018138:	9301      	str	r3, [sp, #4]
 801813a:	4b91      	ldr	r3, [pc, #580]	; (8018380 <mbedtls_ssl_parse_certificate+0x544>)
 801813c:	9300      	str	r3, [sp, #0]
 801813e:	f241 13db 	movw	r3, #4571	; 0x11db
 8018142:	4a90      	ldr	r2, [pc, #576]	; (8018384 <mbedtls_ssl_parse_certificate+0x548>)
 8018144:	2101      	movs	r1, #1
 8018146:	6878      	ldr	r0, [r7, #4]
 8018148:	f7f3 fc06 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 801814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801814e:	e13c      	b.n	80183ca <mbedtls_ssl_parse_certificate+0x58e>
            break;
 8018150:	bf00      	nop
        }

        i += n;
 8018152:	6a3a      	ldr	r2, [r7, #32]
 8018154:	693b      	ldr	r3, [r7, #16]
 8018156:	4413      	add	r3, r2
 8018158:	623b      	str	r3, [r7, #32]
    while( i < ssl->in_hslen )
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801815e:	6a3a      	ldr	r2, [r7, #32]
 8018160:	429a      	cmp	r2, r3
 8018162:	f4ff af60 	bcc.w	8018026 <mbedtls_ssl_parse_certificate+0x1ea>
    }

    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801816a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801816c:	9301      	str	r3, [sp, #4]
 801816e:	4b86      	ldr	r3, [pc, #536]	; (8018388 <mbedtls_ssl_parse_certificate+0x54c>)
 8018170:	9300      	str	r3, [sp, #0]
 8018172:	f241 13e2 	movw	r3, #4578	; 0x11e2
 8018176:	4a83      	ldr	r2, [pc, #524]	; (8018384 <mbedtls_ssl_parse_certificate+0x548>)
 8018178:	2103      	movs	r1, #3
 801817a:	6878      	ldr	r0, [r7, #4]
 801817c:	f7f4 f85e 	bl	800c23c <mbedtls_debug_print_crt>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 8018180:	697b      	ldr	r3, [r7, #20]
 8018182:	2b00      	cmp	r3, #0
 8018184:	f000 8117 	beq.w	80183b6 <mbedtls_ssl_parse_certificate+0x57a>
            ca_crl   = ssl->handshake->sni_ca_crl;
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801818e:	60fb      	str	r3, [r7, #12]
            ca_crl   = ssl->conf->ca_crl;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018196:	60bb      	str	r3, [r7, #8]

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_with_profile(
 801819c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	681b      	ldr	r3, [r3, #0]
        ret = mbedtls_x509_crt_verify_with_profile(
 80181a2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
                                ssl->hostname,
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                               &ssl->session_negotiate->verify_result,
 80181aa:	687a      	ldr	r2, [r7, #4]
 80181ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_with_profile(
 80181ae:	3260      	adds	r2, #96	; 0x60
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80181b0:	6879      	ldr	r1, [r7, #4]
 80181b2:	6809      	ldr	r1, [r1, #0]
        ret = mbedtls_x509_crt_verify_with_profile(
 80181b4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80181b6:	6878      	ldr	r0, [r7, #4]
 80181b8:	6800      	ldr	r0, [r0, #0]
        ret = mbedtls_x509_crt_verify_with_profile(
 80181ba:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80181bc:	9003      	str	r0, [sp, #12]
 80181be:	9102      	str	r1, [sp, #8]
 80181c0:	9201      	str	r2, [sp, #4]
 80181c2:	9300      	str	r3, [sp, #0]
 80181c4:	462b      	mov	r3, r5
 80181c6:	68ba      	ldr	r2, [r7, #8]
 80181c8:	68f9      	ldr	r1, [r7, #12]
 80181ca:	4620      	mov	r0, r4
 80181cc:	f004 fc28 	bl	801ca20 <mbedtls_x509_crt_verify_with_profile>
 80181d0:	6278      	str	r0, [r7, #36]	; 0x24

        if( ret != 0 )
 80181d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d00a      	beq.n	80181ee <mbedtls_ssl_parse_certificate+0x3b2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 80181d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181da:	9301      	str	r3, [sp, #4]
 80181dc:	4b6b      	ldr	r3, [pc, #428]	; (801838c <mbedtls_ssl_parse_certificate+0x550>)
 80181de:	9300      	str	r3, [sp, #0]
 80181e0:	f241 2321 	movw	r3, #4641	; 0x1221
 80181e4:	4a67      	ldr	r2, [pc, #412]	; (8018384 <mbedtls_ssl_parse_certificate+0x548>)
 80181e6:	2101      	movs	r1, #1
 80181e8:	6878      	ldr	r0, [r7, #4]
 80181ea:	f7f3 fbb5 	bl	800b958 <mbedtls_debug_print_ret>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181f2:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80181fc:	f003 0301 	and.w	r3, r3, #1
 8018200:	b2db      	uxtb	r3, r3
 8018202:	2b00      	cmp	r3, #0
 8018204:	bf0c      	ite	eq
 8018206:	2301      	moveq	r3, #1
 8018208:	2300      	movne	r3, #0
 801820a:	b2db      	uxtb	r3, r3
 801820c:	461a      	mov	r2, r3
                                 &ssl->session_negotiate->verify_result ) != 0 )
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 8018212:	3360      	adds	r3, #96	; 0x60
 8018214:	69b9      	ldr	r1, [r7, #24]
 8018216:	f001 fbda 	bl	80199ce <mbedtls_ssl_check_cert_usage>
 801821a:	4603      	mov	r3, r0
 801821c:	2b00      	cmp	r3, #0
 801821e:	d00d      	beq.n	801823c <mbedtls_ssl_parse_certificate+0x400>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
 8018220:	4b5b      	ldr	r3, [pc, #364]	; (8018390 <mbedtls_ssl_parse_certificate+0x554>)
 8018222:	9300      	str	r3, [sp, #0]
 8018224:	f241 233e 	movw	r3, #4670	; 0x123e
 8018228:	4a56      	ldr	r2, [pc, #344]	; (8018384 <mbedtls_ssl_parse_certificate+0x548>)
 801822a:	2101      	movs	r1, #1
 801822c:	6878      	ldr	r0, [r7, #4]
 801822e:	f7f3 fb0d 	bl	800b84c <mbedtls_debug_print_msg>
            if( ret == 0 )
 8018232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018234:	2b00      	cmp	r3, #0
 8018236:	d101      	bne.n	801823c <mbedtls_ssl_parse_certificate+0x400>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 8018238:	4b56      	ldr	r3, [pc, #344]	; (8018394 <mbedtls_ssl_parse_certificate+0x558>)
 801823a:	627b      	str	r3, [r7, #36]	; 0x24
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 801823c:	697b      	ldr	r3, [r7, #20]
 801823e:	2b01      	cmp	r3, #1
 8018240:	d109      	bne.n	8018256 <mbedtls_ssl_parse_certificate+0x41a>
 8018242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018244:	f513 5f1c 	cmn.w	r3, #9984	; 0x2700
 8018248:	d003      	beq.n	8018252 <mbedtls_ssl_parse_certificate+0x416>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 801824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801824c:	f513 4ff4 	cmn.w	r3, #31232	; 0x7a00
 8018250:	d101      	bne.n	8018256 <mbedtls_ssl_parse_certificate+0x41a>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
 8018252:	2300      	movs	r3, #0
 8018254:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d10d      	bne.n	8018278 <mbedtls_ssl_parse_certificate+0x43c>
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	2b02      	cmp	r3, #2
 8018260:	d10a      	bne.n	8018278 <mbedtls_ssl_parse_certificate+0x43c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 8018262:	4b4d      	ldr	r3, [pc, #308]	; (8018398 <mbedtls_ssl_parse_certificate+0x55c>)
 8018264:	9300      	str	r3, [sp, #0]
 8018266:	f241 2352 	movw	r3, #4690	; 0x1252
 801826a:	4a46      	ldr	r2, [pc, #280]	; (8018384 <mbedtls_ssl_parse_certificate+0x548>)
 801826c:	2101      	movs	r1, #1
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	f7f3 faec 	bl	800b84c <mbedtls_debug_print_msg>
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 8018274:	4b49      	ldr	r3, [pc, #292]	; (801839c <mbedtls_ssl_parse_certificate+0x560>)
 8018276:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if( ret != 0 )
 8018278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801827a:	2b00      	cmp	r3, #0
 801827c:	d06b      	beq.n	8018356 <mbedtls_ssl_parse_certificate+0x51a>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018288:	2b00      	cmp	r3, #0
 801828a:	d002      	beq.n	8018292 <mbedtls_ssl_parse_certificate+0x456>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 801828c:	2331      	movs	r3, #49	; 0x31
 801828e:	77fb      	strb	r3, [r7, #31]
 8018290:	e05b      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018298:	f003 0304 	and.w	r3, r3, #4
 801829c:	2b00      	cmp	r3, #0
 801829e:	d002      	beq.n	80182a6 <mbedtls_ssl_parse_certificate+0x46a>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 80182a0:	232a      	movs	r3, #42	; 0x2a
 80182a2:	77fb      	strb	r3, [r7, #31]
 80182a4:	e051      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_KEY_USAGE )
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80182ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d002      	beq.n	80182ba <mbedtls_ssl_parse_certificate+0x47e>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80182b4:	232b      	movs	r3, #43	; 0x2b
 80182b6:	77fb      	strb	r3, [r7, #31]
 80182b8:	e047      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXT_KEY_USAGE )
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80182c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d002      	beq.n	80182ce <mbedtls_ssl_parse_certificate+0x492>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80182c8:	232b      	movs	r3, #43	; 0x2b
 80182ca:	77fb      	strb	r3, [r7, #31]
 80182cc:	e03d      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80182d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d002      	beq.n	80182e2 <mbedtls_ssl_parse_certificate+0x4a6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80182dc:	232b      	movs	r3, #43	; 0x2b
 80182de:	77fb      	strb	r3, [r7, #31]
 80182e0:	e033      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80182e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d002      	beq.n	80182f6 <mbedtls_ssl_parse_certificate+0x4ba>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80182f0:	232b      	movs	r3, #43	; 0x2b
 80182f2:	77fb      	strb	r3, [r7, #31]
 80182f4:	e029      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80182fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018300:	2b00      	cmp	r3, #0
 8018302:	d002      	beq.n	801830a <mbedtls_ssl_parse_certificate+0x4ce>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8018304:	232b      	movs	r3, #43	; 0x2b
 8018306:	77fb      	strb	r3, [r7, #31]
 8018308:	e01f      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801830e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018310:	f003 0301 	and.w	r3, r3, #1
 8018314:	2b00      	cmp	r3, #0
 8018316:	d002      	beq.n	801831e <mbedtls_ssl_parse_certificate+0x4e2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 8018318:	232d      	movs	r3, #45	; 0x2d
 801831a:	77fb      	strb	r3, [r7, #31]
 801831c:	e015      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018324:	f003 0302 	and.w	r3, r3, #2
 8018328:	2b00      	cmp	r3, #0
 801832a:	d002      	beq.n	8018332 <mbedtls_ssl_parse_certificate+0x4f6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 801832c:	232c      	movs	r3, #44	; 0x2c
 801832e:	77fb      	strb	r3, [r7, #31]
 8018330:	e00b      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018338:	f003 0308 	and.w	r3, r3, #8
 801833c:	2b00      	cmp	r3, #0
 801833e:	d002      	beq.n	8018346 <mbedtls_ssl_parse_certificate+0x50a>
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
 8018340:	2330      	movs	r3, #48	; 0x30
 8018342:	77fb      	strb	r3, [r7, #31]
 8018344:	e001      	b.n	801834a <mbedtls_ssl_parse_certificate+0x50e>
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 8018346:	232e      	movs	r3, #46	; 0x2e
 8018348:	77fb      	strb	r3, [r7, #31]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801834a:	7ffb      	ldrb	r3, [r7, #31]
 801834c:	461a      	mov	r2, r3
 801834e:	2102      	movs	r1, #2
 8018350:	6878      	ldr	r0, [r7, #4]
 8018352:	f7ff fbf1 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                            alert );
        }

#if defined(MBEDTLS_DEBUG_C)
        if( ssl->session_negotiate->verify_result != 0 )
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801835a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801835c:	2b00      	cmp	r3, #0
 801835e:	d021      	beq.n	80183a4 <mbedtls_ssl_parse_certificate+0x568>
        {
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018366:	9301      	str	r3, [sp, #4]
 8018368:	4b0d      	ldr	r3, [pc, #52]	; (80183a0 <mbedtls_ssl_parse_certificate+0x564>)
 801836a:	9300      	str	r3, [sp, #0]
 801836c:	f241 2378 	movw	r3, #4728	; 0x1278
 8018370:	4a04      	ldr	r2, [pc, #16]	; (8018384 <mbedtls_ssl_parse_certificate+0x548>)
 8018372:	2103      	movs	r1, #3
 8018374:	6878      	ldr	r0, [r7, #4]
 8018376:	f7f3 fa69 	bl	800b84c <mbedtls_debug_print_msg>
 801837a:	e01c      	b.n	80183b6 <mbedtls_ssl_parse_certificate+0x57a>
 801837c:	ffffd9d2 	.word	0xffffd9d2
 8018380:	08023700 	.word	0x08023700
 8018384:	08022c14 	.word	0x08022c14
 8018388:	0802371c 	.word	0x0802371c
 801838c:	08023730 	.word	0x08023730
 8018390:	08023744 	.word	0x08023744
 8018394:	ffff8600 	.word	0xffff8600
 8018398:	08023768 	.word	0x08023768
 801839c:	ffff8980 	.word	0xffff8980
 80183a0:	08023778 	.word	0x08023778
                                        ssl->session_negotiate->verify_result ) );
        }
        else
        {
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 80183a4:	4b0b      	ldr	r3, [pc, #44]	; (80183d4 <mbedtls_ssl_parse_certificate+0x598>)
 80183a6:	9300      	str	r3, [sp, #0]
 80183a8:	f241 237d 	movw	r3, #4733	; 0x127d
 80183ac:	4a0a      	ldr	r2, [pc, #40]	; (80183d8 <mbedtls_ssl_parse_certificate+0x59c>)
 80183ae:	2103      	movs	r1, #3
 80183b0:	6878      	ldr	r0, [r7, #4]
 80183b2:	f7f3 fa4b 	bl	800b84c <mbedtls_debug_print_msg>
        }
#endif /* MBEDTLS_DEBUG_C */
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 80183b6:	4b09      	ldr	r3, [pc, #36]	; (80183dc <mbedtls_ssl_parse_certificate+0x5a0>)
 80183b8:	9300      	str	r3, [sp, #0]
 80183ba:	f241 2382 	movw	r3, #4738	; 0x1282
 80183be:	4a06      	ldr	r2, [pc, #24]	; (80183d8 <mbedtls_ssl_parse_certificate+0x59c>)
 80183c0:	2102      	movs	r1, #2
 80183c2:	6878      	ldr	r0, [r7, #4]
 80183c4:	f7f3 fa42 	bl	800b84c <mbedtls_debug_print_msg>

    return( ret );
 80183c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3728      	adds	r7, #40	; 0x28
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bdb0      	pop	{r4, r5, r7, pc}
 80183d2:	bf00      	nop
 80183d4:	0802379c 	.word	0x0802379c
 80183d8:	08022c14 	.word	0x08022c14
 80183dc:	080237c4 	.word	0x080237c4

080183e0 <mbedtls_ssl_write_change_cipher_spec>:
          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

int mbedtls_ssl_write_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b086      	sub	sp, #24
 80183e4:	af02      	add	r7, sp, #8
 80183e6:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 80183e8:	4b1e      	ldr	r3, [pc, #120]	; (8018464 <mbedtls_ssl_write_change_cipher_spec+0x84>)
 80183ea:	9300      	str	r3, [sp, #0]
 80183ec:	f241 2392 	movw	r3, #4754	; 0x1292
 80183f0:	4a1d      	ldr	r2, [pc, #116]	; (8018468 <mbedtls_ssl_write_change_cipher_spec+0x88>)
 80183f2:	2102      	movs	r1, #2
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f7f3 fa29 	bl	800b84c <mbedtls_debug_print_msg>

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	2214      	movs	r2, #20
 80183fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msglen  = 1;
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	2201      	movs	r2, #1
 8018406:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018410:	2201      	movs	r2, #1
 8018412:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	685b      	ldr	r3, [r3, #4]
 8018418:	1c5a      	adds	r2, r3, #1
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801841e:	6878      	ldr	r0, [r7, #4]
 8018420:	f7fe fee0 	bl	80171e4 <mbedtls_ssl_write_record>
 8018424:	60f8      	str	r0, [r7, #12]
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d00c      	beq.n	8018446 <mbedtls_ssl_write_change_cipher_spec+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	9301      	str	r3, [sp, #4]
 8018430:	4b0e      	ldr	r3, [pc, #56]	; (801846c <mbedtls_ssl_write_change_cipher_spec+0x8c>)
 8018432:	9300      	str	r3, [sp, #0]
 8018434:	f241 239c 	movw	r3, #4764	; 0x129c
 8018438:	4a0b      	ldr	r2, [pc, #44]	; (8018468 <mbedtls_ssl_write_change_cipher_spec+0x88>)
 801843a:	2101      	movs	r1, #1
 801843c:	6878      	ldr	r0, [r7, #4]
 801843e:	f7f3 fa8b 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	e009      	b.n	801845a <mbedtls_ssl_write_change_cipher_spec+0x7a>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 8018446:	4b0a      	ldr	r3, [pc, #40]	; (8018470 <mbedtls_ssl_write_change_cipher_spec+0x90>)
 8018448:	9300      	str	r3, [sp, #0]
 801844a:	f44f 5395 	mov.w	r3, #4768	; 0x12a0
 801844e:	4a06      	ldr	r2, [pc, #24]	; (8018468 <mbedtls_ssl_write_change_cipher_spec+0x88>)
 8018450:	2102      	movs	r1, #2
 8018452:	6878      	ldr	r0, [r7, #4]
 8018454:	f7f3 f9fa 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8018458:	2300      	movs	r3, #0
}
 801845a:	4618      	mov	r0, r3
 801845c:	3710      	adds	r7, #16
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop
 8018464:	080237dc 	.word	0x080237dc
 8018468:	08022c14 	.word	0x08022c14
 801846c:	080235d4 	.word	0x080235d4
 8018470:	080237f8 	.word	0x080237f8

08018474 <mbedtls_ssl_parse_change_cipher_spec>:

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b086      	sub	sp, #24
 8018478:	af02      	add	r7, sp, #8
 801847a:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 801847c:	4b44      	ldr	r3, [pc, #272]	; (8018590 <mbedtls_ssl_parse_change_cipher_spec+0x11c>)
 801847e:	9300      	str	r3, [sp, #0]
 8018480:	f241 23a9 	movw	r3, #4777	; 0x12a9
 8018484:	4a43      	ldr	r2, [pc, #268]	; (8018594 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 8018486:	2102      	movs	r1, #2
 8018488:	6878      	ldr	r0, [r7, #4]
 801848a:	f7f3 f9df 	bl	800b84c <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801848e:	6878      	ldr	r0, [r7, #4]
 8018490:	f7ff f9b6 	bl	8017800 <mbedtls_ssl_read_record>
 8018494:	60f8      	str	r0, [r7, #12]
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d00c      	beq.n	80184b6 <mbedtls_ssl_parse_change_cipher_spec+0x42>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	9301      	str	r3, [sp, #4]
 80184a0:	4b3d      	ldr	r3, [pc, #244]	; (8018598 <mbedtls_ssl_parse_change_cipher_spec+0x124>)
 80184a2:	9300      	str	r3, [sp, #0]
 80184a4:	f241 23ad 	movw	r3, #4781	; 0x12ad
 80184a8:	4a3a      	ldr	r2, [pc, #232]	; (8018594 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 80184aa:	2101      	movs	r1, #1
 80184ac:	6878      	ldr	r0, [r7, #4]
 80184ae:	f7f3 fa53 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	e068      	b.n	8018588 <mbedtls_ssl_parse_change_cipher_spec+0x114>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184ba:	2b14      	cmp	r3, #20
 80184bc:	d00f      	beq.n	80184de <mbedtls_ssl_parse_change_cipher_spec+0x6a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 80184be:	4b37      	ldr	r3, [pc, #220]	; (801859c <mbedtls_ssl_parse_change_cipher_spec+0x128>)
 80184c0:	9300      	str	r3, [sp, #0]
 80184c2:	f241 23b3 	movw	r3, #4787	; 0x12b3
 80184c6:	4a33      	ldr	r2, [pc, #204]	; (8018594 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 80184c8:	2101      	movs	r1, #1
 80184ca:	6878      	ldr	r0, [r7, #4]
 80184cc:	f7f3 f9be 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80184d0:	220a      	movs	r2, #10
 80184d2:	2102      	movs	r1, #2
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	f7ff fb2f 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80184da:	4b31      	ldr	r3, [pc, #196]	; (80185a0 <mbedtls_ssl_parse_change_cipher_spec+0x12c>)
 80184dc:	e054      	b.n	8018588 <mbedtls_ssl_parse_change_cipher_spec+0x114>
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184e2:	2b01      	cmp	r3, #1
 80184e4:	d104      	bne.n	80184f0 <mbedtls_ssl_parse_change_cipher_spec+0x7c>
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80184ea:	781b      	ldrb	r3, [r3, #0]
 80184ec:	2b01      	cmp	r3, #1
 80184ee:	d00f      	beq.n	8018510 <mbedtls_ssl_parse_change_cipher_spec+0x9c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 80184f0:	4b2a      	ldr	r3, [pc, #168]	; (801859c <mbedtls_ssl_parse_change_cipher_spec+0x128>)
 80184f2:	9300      	str	r3, [sp, #0]
 80184f4:	f241 23bb 	movw	r3, #4795	; 0x12bb
 80184f8:	4a26      	ldr	r2, [pc, #152]	; (8018594 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 80184fa:	2101      	movs	r1, #1
 80184fc:	6878      	ldr	r0, [r7, #4]
 80184fe:	f7f3 f9a5 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018502:	2232      	movs	r2, #50	; 0x32
 8018504:	2102      	movs	r1, #2
 8018506:	6878      	ldr	r0, [r7, #4]
 8018508:	f7ff fb16 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 801850c:	4b25      	ldr	r3, [pc, #148]	; (80185a4 <mbedtls_ssl_parse_change_cipher_spec+0x130>)
 801850e:	e03b      	b.n	8018588 <mbedtls_ssl_parse_change_cipher_spec+0x114>

    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 8018510:	4b25      	ldr	r3, [pc, #148]	; (80185a8 <mbedtls_ssl_parse_change_cipher_spec+0x134>)
 8018512:	9300      	str	r3, [sp, #0]
 8018514:	f241 23c5 	movw	r3, #4805	; 0x12c5
 8018518:	4a1e      	ldr	r2, [pc, #120]	; (8018594 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 801851a:	2103      	movs	r1, #3
 801851c:	6878      	ldr	r0, [r7, #4]
 801851e:	f7f3 f995 	bl	800b84c <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	635a      	str	r2, [r3, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	621a      	str	r2, [r3, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018536:	2208      	movs	r2, #8
 8018538:	2100      	movs	r1, #0
 801853a:	4618      	mov	r0, r3
 801853c:	f005 fdae 	bl	801e09c <memset>

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	68db      	ldr	r3, [r3, #12]
 8018544:	2b01      	cmp	r3, #1
 8018546:	dd0c      	ble.n	8018562 <mbedtls_ssl_parse_change_cipher_spec+0xee>
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018550:	68d9      	ldr	r1, [r3, #12]
                      ssl->transform_negotiate->fixed_ivlen;
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018556:	691b      	ldr	r3, [r3, #16]
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 8018558:	1acb      	subs	r3, r1, r3
 801855a:	441a      	add	r2, r3
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	665a      	str	r2, [r3, #100]	; 0x64
 8018560:	e003      	b.n	801856a <mbedtls_ssl_parse_change_cipher_spec+0xf6>
    }
    else
        ssl->in_msg = ssl->in_iv;
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	665a      	str	r2, [r3, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	1c5a      	adds	r2, r3, #1
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	605a      	str	r2, [r3, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 8018574:	4b0d      	ldr	r3, [pc, #52]	; (80185ac <mbedtls_ssl_parse_change_cipher_spec+0x138>)
 8018576:	9300      	str	r3, [sp, #0]
 8018578:	f241 23f7 	movw	r3, #4855	; 0x12f7
 801857c:	4a05      	ldr	r2, [pc, #20]	; (8018594 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 801857e:	2102      	movs	r1, #2
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	f7f3 f963 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8018586:	2300      	movs	r3, #0
}
 8018588:	4618      	mov	r0, r3
 801858a:	3710      	adds	r7, #16
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}
 8018590:	08023814 	.word	0x08023814
 8018594:	08022c14 	.word	0x08022c14
 8018598:	080236b8 	.word	0x080236b8
 801859c:	08023830 	.word	0x08023830
 80185a0:	ffff8900 	.word	0xffff8900
 80185a4:	ffff8200 	.word	0xffff8200
 80185a8:	08023850 	.word	0x08023850
 80185ac:	08023884 	.word	0x08023884

080185b0 <mbedtls_ssl_optimize_checksum>:

void mbedtls_ssl_optimize_checksum( mbedtls_ssl_context *ssl,
                            const mbedtls_ssl_ciphersuite_t *ciphersuite_info )
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b084      	sub	sp, #16
 80185b4:	af02      	add	r7, sp, #8
 80185b6:	6078      	str	r0, [r7, #4]
 80185b8:	6039      	str	r1, [r7, #0]
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
 80185ba:	683b      	ldr	r3, [r7, #0]
 80185bc:	7a5b      	ldrb	r3, [r3, #9]
 80185be:	2b07      	cmp	r3, #7
 80185c0:	d004      	beq.n	80185cc <mbedtls_ssl_optimize_checksum+0x1c>
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185c6:	4a08      	ldr	r2, [pc, #32]	; (80185e8 <mbedtls_ssl_optimize_checksum+0x38>)
 80185c8:	675a      	str	r2, [r3, #116]	; 0x74
 80185ca:	e009      	b.n	80185e0 <mbedtls_ssl_optimize_checksum+0x30>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80185cc:	4b07      	ldr	r3, [pc, #28]	; (80185ec <mbedtls_ssl_optimize_checksum+0x3c>)
 80185ce:	9300      	str	r3, [sp, #0]
 80185d0:	f241 3314 	movw	r3, #4884	; 0x1314
 80185d4:	4a06      	ldr	r2, [pc, #24]	; (80185f0 <mbedtls_ssl_optimize_checksum+0x40>)
 80185d6:	2101      	movs	r1, #1
 80185d8:	6878      	ldr	r0, [r7, #4]
 80185da:	f7f3 f937 	bl	800b84c <mbedtls_debug_print_msg>
        return;
 80185de:	bf00      	nop
    }
}
 80185e0:	3708      	adds	r7, #8
 80185e2:	46bd      	mov	sp, r7
 80185e4:	bd80      	pop	{r7, pc}
 80185e6:	bf00      	nop
 80185e8:	08018619 	.word	0x08018619
 80185ec:	08022cb8 	.word	0x08022cb8
 80185f0:	08022c14 	.word	0x08022c14

080185f4 <ssl_update_checksum_start>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b084      	sub	sp, #16
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	60f8      	str	r0, [r7, #12]
 80185fc:	60b9      	str	r1, [r7, #8]
 80185fe:	607a      	str	r2, [r7, #4]
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018604:	3308      	adds	r3, #8
 8018606:	687a      	ldr	r2, [r7, #4]
 8018608:	68b9      	ldr	r1, [r7, #8]
 801860a:	4618      	mov	r0, r3
 801860c:	f7fa fe5e 	bl	80132cc <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 8018610:	bf00      	nop
 8018612:	3710      	adds	r7, #16
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}

08018618 <ssl_update_checksum_sha256>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b084      	sub	sp, #16
 801861c:	af00      	add	r7, sp, #0
 801861e:	60f8      	str	r0, [r7, #12]
 8018620:	60b9      	str	r1, [r7, #8]
 8018622:	607a      	str	r2, [r7, #4]
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018628:	3308      	adds	r3, #8
 801862a:	687a      	ldr	r2, [r7, #4]
 801862c:	68b9      	ldr	r1, [r7, #8]
 801862e:	4618      	mov	r0, r3
 8018630:	f7fa fe4c 	bl	80132cc <mbedtls_sha256_update_ret>
}
 8018634:	bf00      	nop
 8018636:	3710      	adds	r7, #16
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}

0801863c <ssl_calc_finished_tls_sha256>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 801863c:	b590      	push	{r4, r7, lr}
 801863e:	b0af      	sub	sp, #188	; 0xbc
 8018640:	af04      	add	r7, sp, #16
 8018642:	60f8      	str	r0, [r7, #12]
 8018644:	60b9      	str	r1, [r7, #8]
 8018646:	607a      	str	r2, [r7, #4]
    int len = 12;
 8018648:	230c      	movs	r3, #12
 801864a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if( !session )
 8018656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801865a:	2b00      	cmp	r3, #0
 801865c:	d103      	bne.n	8018666 <ssl_calc_finished_tls_sha256+0x2a>
        session = ssl->session;
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    mbedtls_sha256_init( &sha256 );
 8018666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801866a:	4618      	mov	r0, r3
 801866c:	f7f9 f84c 	bl	8011708 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 8018670:	4b36      	ldr	r3, [pc, #216]	; (801874c <ssl_calc_finished_tls_sha256+0x110>)
 8018672:	9300      	str	r3, [sp, #0]
 8018674:	f241 33f8 	movw	r3, #5112	; 0x13f8
 8018678:	4a35      	ldr	r2, [pc, #212]	; (8018750 <ssl_calc_finished_tls_sha256+0x114>)
 801867a:	2102      	movs	r1, #2
 801867c:	68f8      	ldr	r0, [r7, #12]
 801867e:	f7f3 f8e5 	bl	800b84c <mbedtls_debug_print_msg>

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018686:	f103 0208 	add.w	r2, r3, #8
 801868a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801868e:	4611      	mov	r1, r2
 8018690:	4618      	mov	r0, r3
 8018692:	f7f9 f856 	bl	8011742 <mbedtls_sha256_clone>
     *   hash = PRF( master, finished_label,
     *               Hash( handshake ) )[0.11]
     */

#if !defined(MBEDTLS_SHA256_ALT)
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 8018696:	2320      	movs	r3, #32
 8018698:	9302      	str	r3, [sp, #8]
 801869a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801869e:	3308      	adds	r3, #8
 80186a0:	9301      	str	r3, [sp, #4]
 80186a2:	4b2c      	ldr	r3, [pc, #176]	; (8018754 <ssl_calc_finished_tls_sha256+0x118>)
 80186a4:	9300      	str	r3, [sp, #0]
 80186a6:	f241 4303 	movw	r3, #5123	; 0x1403
 80186aa:	4a29      	ldr	r2, [pc, #164]	; (8018750 <ssl_calc_finished_tls_sha256+0x114>)
 80186ac:	2104      	movs	r1, #4
 80186ae:	68f8      	ldr	r0, [r7, #12]
 80186b0:	f7f3 f9be 	bl	800ba30 <mbedtls_debug_print_buf>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d101      	bne.n	80186be <ssl_calc_finished_tls_sha256+0x82>
 80186ba:	4b27      	ldr	r3, [pc, #156]	; (8018758 <ssl_calc_finished_tls_sha256+0x11c>)
 80186bc:	e000      	b.n	80186c0 <ssl_calc_finished_tls_sha256+0x84>
 80186be:	4b27      	ldr	r3, [pc, #156]	; (801875c <ssl_calc_finished_tls_sha256+0x120>)
 80186c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
             ? "client finished"
             : "server finished";

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80186c4:	f107 0210 	add.w	r2, r7, #16
 80186c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80186cc:	4611      	mov	r1, r2
 80186ce:	4618      	mov	r0, r3
 80186d0:	f7fa fe72 	bl	80133b8 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186d8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80186dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80186e0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80186e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80186e8:	f107 0210 	add.w	r2, r7, #16
 80186ec:	9302      	str	r3, [sp, #8]
 80186ee:	68bb      	ldr	r3, [r7, #8]
 80186f0:	9301      	str	r3, [sp, #4]
 80186f2:	2320      	movs	r3, #32
 80186f4:	9300      	str	r3, [sp, #0]
 80186f6:	4613      	mov	r3, r2
 80186f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80186fc:	2130      	movs	r1, #48	; 0x30
 80186fe:	47a0      	blx	r4
                             padbuf, 32, buf, len );

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 8018700:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018704:	9302      	str	r3, [sp, #8]
 8018706:	68bb      	ldr	r3, [r7, #8]
 8018708:	9301      	str	r3, [sp, #4]
 801870a:	4b15      	ldr	r3, [pc, #84]	; (8018760 <ssl_calc_finished_tls_sha256+0x124>)
 801870c:	9300      	str	r3, [sp, #0]
 801870e:	f241 4310 	movw	r3, #5136	; 0x1410
 8018712:	4a0f      	ldr	r2, [pc, #60]	; (8018750 <ssl_calc_finished_tls_sha256+0x114>)
 8018714:	2103      	movs	r1, #3
 8018716:	68f8      	ldr	r0, [r7, #12]
 8018718:	f7f3 f98a 	bl	800ba30 <mbedtls_debug_print_buf>

    mbedtls_sha256_free( &sha256 );
 801871c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018720:	4618      	mov	r0, r3
 8018722:	f7f8 fffe 	bl	8011722 <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 8018726:	f107 0310 	add.w	r3, r7, #16
 801872a:	2120      	movs	r1, #32
 801872c:	4618      	mov	r0, r3
 801872e:	f7fc fe12 	bl	8015356 <mbedtls_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 8018732:	4b0c      	ldr	r3, [pc, #48]	; (8018764 <ssl_calc_finished_tls_sha256+0x128>)
 8018734:	9300      	str	r3, [sp, #0]
 8018736:	f241 4316 	movw	r3, #5142	; 0x1416
 801873a:	4a05      	ldr	r2, [pc, #20]	; (8018750 <ssl_calc_finished_tls_sha256+0x114>)
 801873c:	2102      	movs	r1, #2
 801873e:	68f8      	ldr	r0, [r7, #12]
 8018740:	f7f3 f884 	bl	800b84c <mbedtls_debug_print_msg>
}
 8018744:	bf00      	nop
 8018746:	37ac      	adds	r7, #172	; 0xac
 8018748:	46bd      	mov	sp, r7
 801874a:	bd90      	pop	{r4, r7, pc}
 801874c:	080238a0 	.word	0x080238a0
 8018750:	08022c14 	.word	0x08022c14
 8018754:	080238c0 	.word	0x080238c0
 8018758:	080238d4 	.word	0x080238d4
 801875c:	080238e4 	.word	0x080238e4
 8018760:	080238f4 	.word	0x080238f4
 8018764:	0802390c 	.word	0x0802390c

08018768 <ssl_handshake_wrapup_free_hs_transform>:
}
#endif /* MBEDTLS_SHA512_C */
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

static void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl )
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b084      	sub	sp, #16
 801876c:	af02      	add	r7, sp, #8
 801876e:	6078      	str	r0, [r7, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 8018770:	4b1b      	ldr	r3, [pc, #108]	; (80187e0 <ssl_handshake_wrapup_free_hs_transform+0x78>)
 8018772:	9300      	str	r3, [sp, #0]
 8018774:	f241 434e 	movw	r3, #5198	; 0x144e
 8018778:	4a1a      	ldr	r2, [pc, #104]	; (80187e4 <ssl_handshake_wrapup_free_hs_transform+0x7c>)
 801877a:	2103      	movs	r1, #3
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	f7f3 f865 	bl	800b84c <mbedtls_debug_print_msg>

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018786:	4618      	mov	r0, r3
 8018788:	f000 ff75 	bl	8019676 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018790:	4618      	mov	r0, r3
 8018792:	f005 fc43 	bl	801e01c <free>
    ssl->handshake = NULL;
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	2200      	movs	r2, #0
 801879a:	631a      	str	r2, [r3, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d009      	beq.n	80187b8 <ssl_handshake_wrapup_free_hs_transform+0x50>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80187a8:	4618      	mov	r0, r3
 80187aa:	f000 ff29 	bl	8019600 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80187b2:	4618      	mov	r0, r3
 80187b4:	f005 fc32 	bl	801e01c <free>
    }
    ssl->transform = ssl->transform_negotiate;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	63da      	str	r2, [r3, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	2200      	movs	r2, #0
 80187c4:	641a      	str	r2, [r3, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 80187c6:	4b08      	ldr	r3, [pc, #32]	; (80187e8 <ssl_handshake_wrapup_free_hs_transform+0x80>)
 80187c8:	9300      	str	r3, [sp, #0]
 80187ca:	f241 4362 	movw	r3, #5218	; 0x1462
 80187ce:	4a05      	ldr	r2, [pc, #20]	; (80187e4 <ssl_handshake_wrapup_free_hs_transform+0x7c>)
 80187d0:	2103      	movs	r1, #3
 80187d2:	6878      	ldr	r0, [r7, #4]
 80187d4:	f7f3 f83a 	bl	800b84c <mbedtls_debug_print_msg>
}
 80187d8:	bf00      	nop
 80187da:	3708      	adds	r7, #8
 80187dc:	46bd      	mov	sp, r7
 80187de:	bd80      	pop	{r7, pc}
 80187e0:	08023920 	.word	0x08023920
 80187e4:	08022c14 	.word	0x08022c14
 80187e8:	08023940 	.word	0x08023940

080187ec <mbedtls_ssl_handshake_wrapup>:

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b086      	sub	sp, #24
 80187f0:	af02      	add	r7, sp, #8
 80187f2:	6078      	str	r0, [r7, #4]
    int resume = ssl->handshake->resume;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187f8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80187fc:	60fb      	str	r3, [r7, #12]

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 80187fe:	4b2b      	ldr	r3, [pc, #172]	; (80188ac <mbedtls_ssl_handshake_wrapup+0xc0>)
 8018800:	9300      	str	r3, [sp, #0]
 8018802:	f241 4369 	movw	r3, #5225	; 0x1469
 8018806:	4a2a      	ldr	r2, [pc, #168]	; (80188b0 <mbedtls_ssl_handshake_wrapup+0xc4>)
 8018808:	2103      	movs	r1, #3
 801880a:	6878      	ldr	r0, [r7, #4]
 801880c:	f7f3 f81e 	bl	800b84c <mbedtls_debug_print_msg>
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018814:	2b00      	cmp	r3, #0
 8018816:	d009      	beq.n	801882c <mbedtls_ssl_handshake_wrapup+0x40>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801881c:	4618      	mov	r0, r3
 801881e:	f000 ff40 	bl	80196a2 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018826:	4618      	mov	r0, r3
 8018828:	f005 fbf8 	bl	801e01c <free>
    }
    ssl->session = ssl->session_negotiate;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	629a      	str	r2, [r3, #40]	; 0x28
    ssl->session_negotiate = NULL;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	2200      	movs	r2, #0
 8018838:	62da      	str	r2, [r3, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018840:	2b00      	cmp	r3, #0
 8018842:	d01d      	beq.n	8018880 <mbedtls_ssl_handshake_wrapup+0x94>
        ssl->session->id_len != 0 &&
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018848:	689b      	ldr	r3, [r3, #8]
    if( ssl->conf->f_set_cache != NULL &&
 801884a:	2b00      	cmp	r3, #0
 801884c:	d018      	beq.n	8018880 <mbedtls_ssl_handshake_wrapup+0x94>
        ssl->session->id_len != 0 &&
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d115      	bne.n	8018880 <mbedtls_ssl_handshake_wrapup+0x94>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801885a:	687a      	ldr	r2, [r7, #4]
 801885c:	6812      	ldr	r2, [r2, #0]
 801885e:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8018860:	687a      	ldr	r2, [r7, #4]
 8018862:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8018864:	4611      	mov	r1, r2
 8018866:	4798      	blx	r3
 8018868:	4603      	mov	r3, r0
 801886a:	2b00      	cmp	r3, #0
 801886c:	d008      	beq.n	8018880 <mbedtls_ssl_handshake_wrapup+0x94>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 801886e:	4b11      	ldr	r3, [pc, #68]	; (80188b4 <mbedtls_ssl_handshake_wrapup+0xc8>)
 8018870:	9300      	str	r3, [sp, #0]
 8018872:	f241 438c 	movw	r3, #5260	; 0x148c
 8018876:	4a0e      	ldr	r2, [pc, #56]	; (80188b0 <mbedtls_ssl_handshake_wrapup+0xc4>)
 8018878:	2101      	movs	r1, #1
 801887a:	6878      	ldr	r0, [r7, #4]
 801887c:	f7f2 ffe6 	bl	800b84c <mbedtls_debug_print_msg>
         * we need the handshake and transform structures for that */
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip freeing handshake and transform" ) );
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	f7ff ff71 	bl	8018768 <ssl_handshake_wrapup_free_hs_transform>

    ssl->state++;
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	685b      	ldr	r3, [r3, #4]
 801888a:	1c5a      	adds	r2, r3, #1
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	605a      	str	r2, [r3, #4]

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 8018890:	4b09      	ldr	r3, [pc, #36]	; (80188b8 <mbedtls_ssl_handshake_wrapup+0xcc>)
 8018892:	9300      	str	r3, [sp, #0]
 8018894:	f44f 53a5 	mov.w	r3, #5280	; 0x14a0
 8018898:	4a05      	ldr	r2, [pc, #20]	; (80188b0 <mbedtls_ssl_handshake_wrapup+0xc4>)
 801889a:	2103      	movs	r1, #3
 801889c:	6878      	ldr	r0, [r7, #4]
 801889e:	f7f2 ffd5 	bl	800b84c <mbedtls_debug_print_msg>
}
 80188a2:	bf00      	nop
 80188a4:	3710      	adds	r7, #16
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bd80      	pop	{r7, pc}
 80188aa:	bf00      	nop
 80188ac:	08023960 	.word	0x08023960
 80188b0:	08022c14 	.word	0x08022c14
 80188b4:	08023974 	.word	0x08023974
 80188b8:	08023990 	.word	0x08023990

080188bc <mbedtls_ssl_write_finished>:

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b086      	sub	sp, #24
 80188c0:	af02      	add	r7, sp, #8
 80188c2:	6078      	str	r0, [r7, #4]
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 80188c4:	4b4d      	ldr	r3, [pc, #308]	; (80189fc <mbedtls_ssl_write_finished+0x140>)
 80188c6:	9300      	str	r3, [sp, #0]
 80188c8:	f241 43a7 	movw	r3, #5287	; 0x14a7
 80188cc:	4a4c      	ldr	r2, [pc, #304]	; (8018a00 <mbedtls_ssl_write_finished+0x144>)
 80188ce:	2102      	movs	r1, #2
 80188d0:	6878      	ldr	r0, [r7, #4]
 80188d2:	f7f2 ffbb 	bl	800b84c <mbedtls_debug_print_msg>

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	68db      	ldr	r3, [r3, #12]
 80188da:	2b01      	cmp	r3, #1
 80188dc:	dd0e      	ble.n	80188fc <mbedtls_ssl_write_finished+0x40>
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188e8:	68d9      	ldr	r1, [r3, #12]
                       ssl->transform_negotiate->fixed_ivlen;
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188ee:	691b      	ldr	r3, [r3, #16]
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 80188f0:	1acb      	subs	r3, r1, r3
 80188f2:	441a      	add	r2, r3
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80188fa:	e005      	b.n	8018908 <mbedtls_ssl_write_finished+0x4c>
    }
    else
        ssl->out_msg = ssl->out_iv;
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801890c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801890e:	687a      	ldr	r2, [r7, #4]
 8018910:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8018914:	1d11      	adds	r1, r2, #4
 8018916:	687a      	ldr	r2, [r7, #4]
 8018918:	6812      	ldr	r2, [r2, #0]
 801891a:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 801891e:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8018922:	b2d2      	uxtb	r2, r2
 8018924:	6878      	ldr	r0, [r7, #4]
 8018926:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	68db      	ldr	r3, [r3, #12]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d101      	bne.n	8018934 <mbedtls_ssl_write_finished+0x78>
 8018930:	2324      	movs	r3, #36	; 0x24
 8018932:	e000      	b.n	8018936 <mbedtls_ssl_write_finished+0x7a>
 8018934:	230c      	movs	r3, #12
 8018936:	60fb      	str	r3, [r7, #12]
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	3304      	adds	r3, #4
 801893c:	461a      	mov	r2, r3
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2216      	movs	r2, #22
 8018948:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018952:	2214      	movs	r2, #20
 8018954:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801895a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801895e:	2b00      	cmp	r3, #0
 8018960:	d00c      	beq.n	801897c <mbedtls_ssl_write_finished+0xc0>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801896a:	f003 0301 	and.w	r3, r3, #1
 801896e:	b2db      	uxtb	r3, r3
 8018970:	2b00      	cmp	r3, #0
 8018972:	d108      	bne.n	8018986 <mbedtls_ssl_write_finished+0xca>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	220f      	movs	r2, #15
 8018978:	605a      	str	r2, [r3, #4]
 801897a:	e004      	b.n	8018986 <mbedtls_ssl_write_finished+0xca>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	685b      	ldr	r3, [r3, #4]
 8018980:	1c5a      	adds	r2, r3, #1
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	605a      	str	r2, [r3, #4]

    /*
     * Switch to our negotiated transform and session parameters for outbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 8018986:	4b1f      	ldr	r3, [pc, #124]	; (8018a04 <mbedtls_ssl_write_finished+0x148>)
 8018988:	9300      	str	r3, [sp, #0]
 801898a:	f241 43dd 	movw	r3, #5341	; 0x14dd
 801898e:	4a1c      	ldr	r2, [pc, #112]	; (8018a00 <mbedtls_ssl_write_finished+0x144>)
 8018990:	2103      	movs	r1, #3
 8018992:	6878      	ldr	r0, [r7, #4]
 8018994:	f7f2 ff5a 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801899e:	2208      	movs	r2, #8
 80189a0:	2100      	movs	r1, #0
 80189a2:	4618      	mov	r0, r3
 80189a4:	f005 fb7a 	bl	801e09c <memset>

    ssl->transform_out = ssl->transform_negotiate;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	639a      	str	r2, [r3, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80189b8:	6878      	ldr	r0, [r7, #4]
 80189ba:	f7fe fc13 	bl	80171e4 <mbedtls_ssl_write_record>
 80189be:	60b8      	str	r0, [r7, #8]
 80189c0:	68bb      	ldr	r3, [r7, #8]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d00c      	beq.n	80189e0 <mbedtls_ssl_write_finished+0x124>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 80189c6:	68bb      	ldr	r3, [r7, #8]
 80189c8:	9301      	str	r3, [sp, #4]
 80189ca:	4b0f      	ldr	r3, [pc, #60]	; (8018a08 <mbedtls_ssl_write_finished+0x14c>)
 80189cc:	9300      	str	r3, [sp, #0]
 80189ce:	f241 5310 	movw	r3, #5392	; 0x1510
 80189d2:	4a0b      	ldr	r2, [pc, #44]	; (8018a00 <mbedtls_ssl_write_finished+0x144>)
 80189d4:	2101      	movs	r1, #1
 80189d6:	6878      	ldr	r0, [r7, #4]
 80189d8:	f7f2 ffbe 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 80189dc:	68bb      	ldr	r3, [r7, #8]
 80189de:	e009      	b.n	80189f4 <mbedtls_ssl_write_finished+0x138>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 80189e0:	4b0a      	ldr	r3, [pc, #40]	; (8018a0c <mbedtls_ssl_write_finished+0x150>)
 80189e2:	9300      	str	r3, [sp, #0]
 80189e4:	f241 5314 	movw	r3, #5396	; 0x1514
 80189e8:	4a05      	ldr	r2, [pc, #20]	; (8018a00 <mbedtls_ssl_write_finished+0x144>)
 80189ea:	2102      	movs	r1, #2
 80189ec:	6878      	ldr	r0, [r7, #4]
 80189ee:	f7f2 ff2d 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 80189f2:	2300      	movs	r3, #0
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3710      	adds	r7, #16
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}
 80189fc:	080239a4 	.word	0x080239a4
 8018a00:	08022c14 	.word	0x08022c14
 8018a04:	080239b8 	.word	0x080239b8
 8018a08:	080235d4 	.word	0x080235d4
 8018a0c:	080239ec 	.word	0x080239ec

08018a10 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 8018a10:	b590      	push	{r4, r7, lr}
 8018a12:	b08b      	sub	sp, #44	; 0x2c
 8018a14:	af02      	add	r7, sp, #8
 8018a16:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 8018a18:	4b54      	ldr	r3, [pc, #336]	; (8018b6c <mbedtls_ssl_parse_finished+0x15c>)
 8018a1a:	9300      	str	r3, [sp, #0]
 8018a1c:	f241 5325 	movw	r3, #5413	; 0x1525
 8018a20:	4a53      	ldr	r2, [pc, #332]	; (8018b70 <mbedtls_ssl_parse_finished+0x160>)
 8018a22:	2102      	movs	r1, #2
 8018a24:	6878      	ldr	r0, [r7, #4]
 8018a26:	f7f2 ff11 	bl	800b84c <mbedtls_debug_print_msg>

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018a30:	687a      	ldr	r2, [r7, #4]
 8018a32:	6812      	ldr	r2, [r2, #0]
 8018a34:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8018a38:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8018a3c:	b2d2      	uxtb	r2, r2
 8018a3e:	f082 0201 	eor.w	r2, r2, #1
 8018a42:	b2d2      	uxtb	r2, r2
 8018a44:	f107 010c 	add.w	r1, r7, #12
 8018a48:	6878      	ldr	r0, [r7, #4]
 8018a4a:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8018a4c:	6878      	ldr	r0, [r7, #4]
 8018a4e:	f7fe fed7 	bl	8017800 <mbedtls_ssl_read_record>
 8018a52:	61f8      	str	r0, [r7, #28]
 8018a54:	69fb      	ldr	r3, [r7, #28]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d00c      	beq.n	8018a74 <mbedtls_ssl_parse_finished+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8018a5a:	69fb      	ldr	r3, [r7, #28]
 8018a5c:	9301      	str	r3, [sp, #4]
 8018a5e:	4b45      	ldr	r3, [pc, #276]	; (8018b74 <mbedtls_ssl_parse_finished+0x164>)
 8018a60:	9300      	str	r3, [sp, #0]
 8018a62:	f241 532b 	movw	r3, #5419	; 0x152b
 8018a66:	4a42      	ldr	r2, [pc, #264]	; (8018b70 <mbedtls_ssl_parse_finished+0x160>)
 8018a68:	2101      	movs	r1, #1
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	f7f2 ff74 	bl	800b958 <mbedtls_debug_print_ret>
        return( ret );
 8018a70:	69fb      	ldr	r3, [r7, #28]
 8018a72:	e076      	b.n	8018b62 <mbedtls_ssl_parse_finished+0x152>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a78:	2b16      	cmp	r3, #22
 8018a7a:	d00f      	beq.n	8018a9c <mbedtls_ssl_parse_finished+0x8c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8018a7c:	4b3e      	ldr	r3, [pc, #248]	; (8018b78 <mbedtls_ssl_parse_finished+0x168>)
 8018a7e:	9300      	str	r3, [sp, #0]
 8018a80:	f241 5331 	movw	r3, #5425	; 0x1531
 8018a84:	4a3a      	ldr	r2, [pc, #232]	; (8018b70 <mbedtls_ssl_parse_finished+0x160>)
 8018a86:	2101      	movs	r1, #1
 8018a88:	6878      	ldr	r0, [r7, #4]
 8018a8a:	f7f2 fedf 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018a8e:	220a      	movs	r2, #10
 8018a90:	2102      	movs	r1, #2
 8018a92:	6878      	ldr	r0, [r7, #4]
 8018a94:	f7ff f850 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8018a98:	4b38      	ldr	r3, [pc, #224]	; (8018b7c <mbedtls_ssl_parse_finished+0x16c>)
 8018a9a:	e062      	b.n	8018b62 <mbedtls_ssl_parse_finished+0x152>
#if defined(MBEDTLS_SSL_PROTO_SSL3)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        hash_len = 36;
    else
#endif
        hash_len = 12;
 8018a9c:	230c      	movs	r3, #12
 8018a9e:	61bb      	str	r3, [r7, #24]

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018aa4:	781b      	ldrb	r3, [r3, #0]
 8018aa6:	2b14      	cmp	r3, #20
 8018aa8:	d109      	bne.n	8018abe <mbedtls_ssl_parse_finished+0xae>
        ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) + hash_len )
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8018aae:	6878      	ldr	r0, [r7, #4]
 8018ab0:	f7fc fc14 	bl	80152dc <mbedtls_ssl_hs_hdr_len>
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	69bb      	ldr	r3, [r7, #24]
 8018ab8:	4413      	add	r3, r2
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 8018aba:	429c      	cmp	r4, r3
 8018abc:	d00f      	beq.n	8018ade <mbedtls_ssl_parse_finished+0xce>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8018abe:	4b2e      	ldr	r3, [pc, #184]	; (8018b78 <mbedtls_ssl_parse_finished+0x168>)
 8018ac0:	9300      	str	r3, [sp, #0]
 8018ac2:	f241 5342 	movw	r3, #5442	; 0x1542
 8018ac6:	4a2a      	ldr	r2, [pc, #168]	; (8018b70 <mbedtls_ssl_parse_finished+0x160>)
 8018ac8:	2101      	movs	r1, #1
 8018aca:	6878      	ldr	r0, [r7, #4]
 8018acc:	f7f2 febe 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018ad0:	2232      	movs	r2, #50	; 0x32
 8018ad2:	2102      	movs	r1, #2
 8018ad4:	6878      	ldr	r0, [r7, #4]
 8018ad6:	f7ff f82f 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 8018ada:	4b29      	ldr	r3, [pc, #164]	; (8018b80 <mbedtls_ssl_parse_finished+0x170>)
 8018adc:	e041      	b.n	8018b62 <mbedtls_ssl_parse_finished+0x152>
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8018ae2:	6878      	ldr	r0, [r7, #4]
 8018ae4:	f7fc fbfa 	bl	80152dc <mbedtls_ssl_hs_hdr_len>
 8018ae8:	4603      	mov	r3, r0
 8018aea:	4423      	add	r3, r4
 8018aec:	f107 010c 	add.w	r1, r7, #12
 8018af0:	69ba      	ldr	r2, [r7, #24]
 8018af2:	4618      	mov	r0, r3
 8018af4:	f7fc fbfd 	bl	80152f2 <mbedtls_ssl_safer_memcmp>
 8018af8:	4603      	mov	r3, r0
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d00f      	beq.n	8018b1e <mbedtls_ssl_parse_finished+0x10e>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8018afe:	4b1e      	ldr	r3, [pc, #120]	; (8018b78 <mbedtls_ssl_parse_finished+0x168>)
 8018b00:	9300      	str	r3, [sp, #0]
 8018b02:	f241 534b 	movw	r3, #5451	; 0x154b
 8018b06:	4a1a      	ldr	r2, [pc, #104]	; (8018b70 <mbedtls_ssl_parse_finished+0x160>)
 8018b08:	2101      	movs	r1, #1
 8018b0a:	6878      	ldr	r0, [r7, #4]
 8018b0c:	f7f2 fe9e 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018b10:	2232      	movs	r2, #50	; 0x32
 8018b12:	2102      	movs	r1, #2
 8018b14:	6878      	ldr	r0, [r7, #4]
 8018b16:	f7ff f80f 	bl	8017b38 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 8018b1a:	4b19      	ldr	r3, [pc, #100]	; (8018b80 <mbedtls_ssl_parse_finished+0x170>)
 8018b1c:	e021      	b.n	8018b62 <mbedtls_ssl_parse_finished+0x152>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b22:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d00c      	beq.n	8018b44 <mbedtls_ssl_parse_finished+0x134>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018b32:	f003 0301 	and.w	r3, r3, #1
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d108      	bne.n	8018b4e <mbedtls_ssl_parse_finished+0x13e>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	220a      	movs	r2, #10
 8018b40:	605a      	str	r2, [r3, #4]
 8018b42:	e004      	b.n	8018b4e <mbedtls_ssl_parse_finished+0x13e>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	685b      	ldr	r3, [r3, #4]
 8018b48:	1c5a      	adds	r2, r3, #1
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 8018b4e:	4b0d      	ldr	r3, [pc, #52]	; (8018b84 <mbedtls_ssl_parse_finished+0x174>)
 8018b50:	9300      	str	r3, [sp, #0]
 8018b52:	f241 5369 	movw	r3, #5481	; 0x1569
 8018b56:	4a06      	ldr	r2, [pc, #24]	; (8018b70 <mbedtls_ssl_parse_finished+0x160>)
 8018b58:	2102      	movs	r1, #2
 8018b5a:	6878      	ldr	r0, [r7, #4]
 8018b5c:	f7f2 fe76 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 8018b60:	2300      	movs	r3, #0
}
 8018b62:	4618      	mov	r0, r3
 8018b64:	3724      	adds	r7, #36	; 0x24
 8018b66:	46bd      	mov	sp, r7
 8018b68:	bd90      	pop	{r4, r7, pc}
 8018b6a:	bf00      	nop
 8018b6c:	08023a00 	.word	0x08023a00
 8018b70:	08022c14 	.word	0x08022c14
 8018b74:	080236b8 	.word	0x080236b8
 8018b78:	08023a14 	.word	0x08023a14
 8018b7c:	ffff8900 	.word	0xffff8900
 8018b80:	ffff8180 	.word	0xffff8180
 8018b84:	08023a2c 	.word	0x08023a2c

08018b88 <ssl_handshake_params_init>:

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b082      	sub	sp, #8
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 8018b90:	f44f 7284 	mov.w	r2, #264	; 0x108
 8018b94:	2100      	movs	r1, #0
 8018b96:	6878      	ldr	r0, [r7, #4]
 8018b98:	f005 fa80 	bl	801e09c <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	3308      	adds	r3, #8
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f7f8 fdb1 	bl	8011708 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	3308      	adds	r3, #8
 8018baa:	2100      	movs	r1, #0
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7f8 fdd9 	bl	8011764 <mbedtls_sha256_starts_ret>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	4a04      	ldr	r2, [pc, #16]	; (8018bc8 <ssl_handshake_params_init+0x40>)
 8018bb6:	675a      	str	r2, [r3, #116]	; 0x74

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    mbedtls_ssl_sig_hash_set_init( &handshake->hash_algs );
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	4618      	mov	r0, r3
 8018bbc:	f7fc fb54 	bl	8015268 <mbedtls_ssl_sig_hash_set_init>
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
#endif
}
 8018bc0:	bf00      	nop
 8018bc2:	3708      	adds	r7, #8
 8018bc4:	46bd      	mov	sp, r7
 8018bc6:	bd80      	pop	{r7, pc}
 8018bc8:	080185f5 	.word	0x080185f5

08018bcc <ssl_transform_init>:

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b082      	sub	sp, #8
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	6078      	str	r0, [r7, #4]
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 8018bd4:	22d0      	movs	r2, #208	; 0xd0
 8018bd6:	2100      	movs	r1, #0
 8018bd8:	6878      	ldr	r0, [r7, #4]
 8018bda:	f005 fa5f 	bl	801e09c <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	3350      	adds	r3, #80	; 0x50
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7f2 f93a 	bl	800ae5c <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	3390      	adds	r3, #144	; 0x90
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7f2 f935 	bl	800ae5c <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	3338      	adds	r3, #56	; 0x38
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	f7f5 fa7e 	bl	800e0f8 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	3344      	adds	r3, #68	; 0x44
 8018c00:	4618      	mov	r0, r3
 8018c02:	f7f5 fa79 	bl	800e0f8 <mbedtls_md_init>
}
 8018c06:	bf00      	nop
 8018c08:	3708      	adds	r7, #8
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}

08018c0e <mbedtls_ssl_session_init>:

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
 8018c0e:	b580      	push	{r7, lr}
 8018c10:	b082      	sub	sp, #8
 8018c12:	af00      	add	r7, sp, #0
 8018c14:	6078      	str	r0, [r7, #4]
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 8018c16:	2264      	movs	r2, #100	; 0x64
 8018c18:	2100      	movs	r1, #0
 8018c1a:	6878      	ldr	r0, [r7, #4]
 8018c1c:	f005 fa3e 	bl	801e09c <memset>
}
 8018c20:	bf00      	nop
 8018c22:	3708      	adds	r7, #8
 8018c24:	46bd      	mov	sp, r7
 8018c26:	bd80      	pop	{r7, pc}

08018c28 <ssl_handshake_init>:

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b084      	sub	sp, #16
 8018c2c:	af02      	add	r7, sp, #8
 8018c2e:	6078      	str	r0, [r7, #4]
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d004      	beq.n	8018c42 <ssl_handshake_init+0x1a>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f000 fcdf 	bl	8019600 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d004      	beq.n	8018c54 <ssl_handshake_init+0x2c>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f000 fd27 	bl	80196a2 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d004      	beq.n	8018c66 <ssl_handshake_init+0x3e>
        mbedtls_ssl_handshake_free( ssl->handshake );
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c60:	4618      	mov	r0, r3
 8018c62:	f000 fd08 	bl	8019676 <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d107      	bne.n	8018c7e <ssl_handshake_init+0x56>
    {
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 8018c6e:	21d0      	movs	r1, #208	; 0xd0
 8018c70:	2001      	movs	r0, #1
 8018c72:	f005 f999 	bl	801dfa8 <calloc>
 8018c76:	4603      	mov	r3, r0
 8018c78:	461a      	mov	r2, r3
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d107      	bne.n	8018c96 <ssl_handshake_init+0x6e>
    {
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 8018c86:	2164      	movs	r1, #100	; 0x64
 8018c88:	2001      	movs	r0, #1
 8018c8a:	f005 f98d 	bl	801dfa8 <calloc>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	461a      	mov	r2, r3
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d108      	bne.n	8018cb0 <ssl_handshake_init+0x88>
    {
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 8018c9e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8018ca2:	2001      	movs	r0, #1
 8018ca4:	f005 f980 	bl	801dfa8 <calloc>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	461a      	mov	r2, r3
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d007      	beq.n	8018cc8 <ssl_handshake_init+0xa0>
        ssl->transform_negotiate == NULL ||
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if( ssl->handshake == NULL ||
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d003      	beq.n	8018cc8 <ssl_handshake_init+0xa0>
        ssl->session_negotiate == NULL )
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        ssl->transform_negotiate == NULL ||
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d122      	bne.n	8018d0e <ssl_handshake_init+0xe6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 8018cc8:	4b1b      	ldr	r3, [pc, #108]	; (8018d38 <ssl_handshake_init+0x110>)
 8018cca:	9300      	str	r3, [sp, #0]
 8018ccc:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8018cd0:	4a1a      	ldr	r2, [pc, #104]	; (8018d3c <ssl_handshake_init+0x114>)
 8018cd2:	2101      	movs	r1, #1
 8018cd4:	6878      	ldr	r0, [r7, #4]
 8018cd6:	f7f2 fdb9 	bl	800b84c <mbedtls_debug_print_msg>

        mbedtls_free( ssl->handshake );
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cde:	4618      	mov	r0, r3
 8018ce0:	f005 f99c 	bl	801e01c <free>
        mbedtls_free( ssl->transform_negotiate );
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ce8:	4618      	mov	r0, r3
 8018cea:	f005 f997 	bl	801e01c <free>
        mbedtls_free( ssl->session_negotiate );
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f005 f992 	bl	801e01c <free>

        ssl->handshake = NULL;
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	2200      	movs	r2, #0
 8018cfc:	631a      	str	r2, [r3, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	2200      	movs	r2, #0
 8018d02:	641a      	str	r2, [r3, #64]	; 0x40
        ssl->session_negotiate = NULL;
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2200      	movs	r2, #0
 8018d08:	62da      	str	r2, [r3, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8018d0a:	4b0d      	ldr	r3, [pc, #52]	; (8018d40 <ssl_handshake_init+0x118>)
 8018d0c:	e00f      	b.n	8018d2e <ssl_handshake_init+0x106>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d12:	4618      	mov	r0, r3
 8018d14:	f7ff ff7b 	bl	8018c0e <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f7ff ff55 	bl	8018bcc <ssl_transform_init>
    ssl_handshake_params_init( ssl->handshake );
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d26:	4618      	mov	r0, r3
 8018d28:	f7ff ff2e 	bl	8018b88 <ssl_handshake_params_init>

        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
 8018d2c:	2300      	movs	r3, #0
}
 8018d2e:	4618      	mov	r0, r3
 8018d30:	3708      	adds	r7, #8
 8018d32:	46bd      	mov	sp, r7
 8018d34:	bd80      	pop	{r7, pc}
 8018d36:	bf00      	nop
 8018d38:	08023a40 	.word	0x08023a40
 8018d3c:	08022c14 	.word	0x08022c14
 8018d40:	ffff8100 	.word	0xffff8100

08018d44 <mbedtls_ssl_init>:

/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b082      	sub	sp, #8
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 8018d4c:	22b4      	movs	r2, #180	; 0xb4
 8018d4e:	2100      	movs	r1, #0
 8018d50:	6878      	ldr	r0, [r7, #4]
 8018d52:	f005 f9a3 	bl	801e09c <memset>
}
 8018d56:	bf00      	nop
 8018d58:	3708      	adds	r7, #8
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}
	...

08018d60 <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b086      	sub	sp, #24
 8018d64:	af02      	add	r7, sp, #8
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	6039      	str	r1, [r7, #0]
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;
 8018d6a:	f241 133d 	movw	r3, #4413	; 0x113d
 8018d6e:	60fb      	str	r3, [r7, #12]

    ssl->conf = conf;
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	683a      	ldr	r2, [r7, #0]
 8018d74:	601a      	str	r2, [r3, #0]

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 8018d76:	68f9      	ldr	r1, [r7, #12]
 8018d78:	2001      	movs	r0, #1
 8018d7a:	f005 f915 	bl	801dfa8 <calloc>
 8018d7e:	4603      	mov	r3, r0
 8018d80:	461a      	mov	r2, r3
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	651a      	str	r2, [r3, #80]	; 0x50
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d00d      	beq.n	8018daa <mbedtls_ssl_setup+0x4a>
        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
 8018d8e:	68f9      	ldr	r1, [r7, #12]
 8018d90:	2001      	movs	r0, #1
 8018d92:	f005 f909 	bl	801dfa8 <calloc>
 8018d96:	4603      	mov	r3, r0
 8018d98:	461a      	mov	r2, r3
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d114      	bne.n	8018dd4 <mbedtls_ssl_setup+0x74>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	9301      	str	r3, [sp, #4]
 8018dae:	4b31      	ldr	r3, [pc, #196]	; (8018e74 <mbedtls_ssl_setup+0x114>)
 8018db0:	9300      	str	r3, [sp, #0]
 8018db2:	f241 6329 	movw	r3, #5673	; 0x1629
 8018db6:	4a30      	ldr	r2, [pc, #192]	; (8018e78 <mbedtls_ssl_setup+0x118>)
 8018db8:	2101      	movs	r1, #1
 8018dba:	6878      	ldr	r0, [r7, #4]
 8018dbc:	f7f2 fd46 	bl	800b84c <mbedtls_debug_print_msg>
        mbedtls_free( ssl->in_buf );
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	f005 f929 	bl	801e01c <free>
        ssl->in_buf = NULL;
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	651a      	str	r2, [r3, #80]	; 0x50
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8018dd0:	4b2a      	ldr	r3, [pc, #168]	; (8018e7c <mbedtls_ssl_setup+0x11c>)
 8018dd2:	e04b      	b.n	8018e6c <mbedtls_ssl_setup+0x10c>
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018de6:	f103 0208 	add.w	r2, r3, #8
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018df6:	f103 020b 	add.w	r2, r3, #11
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018e06:	f103 020d 	add.w	r2, r3, #13
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018e16:	f103 020d 	add.w	r2, r3, #13
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	655a      	str	r2, [r3, #84]	; 0x54
        ssl->in_hdr = ssl->in_buf +  8;
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e2c:	f103 0208 	add.w	r2, r3, #8
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	659a      	str	r2, [r3, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e38:	f103 020b 	add.w	r2, r3, #11
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	65da      	str	r2, [r3, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e44:	f103 020d 	add.w	r2, r3, #13
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	661a      	str	r2, [r3, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e50:	f103 020d 	add.w	r2, r3, #13
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	665a      	str	r2, [r3, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f7ff fee5 	bl	8018c28 <ssl_handshake_init>
 8018e5e:	60b8      	str	r0, [r7, #8]
 8018e60:	68bb      	ldr	r3, [r7, #8]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d001      	beq.n	8018e6a <mbedtls_ssl_setup+0x10a>
        return( ret );
 8018e66:	68bb      	ldr	r3, [r7, #8]
 8018e68:	e000      	b.n	8018e6c <mbedtls_ssl_setup+0x10c>

    return( 0 );
 8018e6a:	2300      	movs	r3, #0
}
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	3710      	adds	r7, #16
 8018e70:	46bd      	mov	sp, r7
 8018e72:	bd80      	pop	{r7, pc}
 8018e74:	080236e8 	.word	0x080236e8
 8018e78:	08022c14 	.word	0x08022c14
 8018e7c:	ffff8100 	.word	0xffff8100

08018e80 <mbedtls_ssl_conf_endpoint>:

/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
 8018e80:	b480      	push	{r7}
 8018e82:	b083      	sub	sp, #12
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
 8018e88:	6039      	str	r1, [r7, #0]
    conf->endpoint   = endpoint;
 8018e8a:	683b      	ldr	r3, [r7, #0]
 8018e8c:	f003 0301 	and.w	r3, r3, #1
 8018e90:	b2d9      	uxtb	r1, r3
 8018e92:	687a      	ldr	r2, [r7, #4]
 8018e94:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8018e98:	f361 0300 	bfi	r3, r1, #0, #1
 8018e9c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8018ea0:	bf00      	nop
 8018ea2:	370c      	adds	r7, #12
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eaa:	4770      	bx	lr

08018eac <mbedtls_ssl_conf_transport>:

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
 8018eac:	b480      	push	{r7}
 8018eae:	b083      	sub	sp, #12
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	6039      	str	r1, [r7, #0]
    conf->transport = transport;
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	f003 0301 	and.w	r3, r3, #1
 8018ebc:	b2d9      	uxtb	r1, r3
 8018ebe:	687a      	ldr	r2, [r7, #4]
 8018ec0:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8018ec4:	f361 0341 	bfi	r3, r1, #1, #1
 8018ec8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8018ecc:	bf00      	nop
 8018ece:	370c      	adds	r7, #12
 8018ed0:	46bd      	mov	sp, r7
 8018ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed6:	4770      	bx	lr

08018ed8 <mbedtls_ssl_conf_authmode>:
    conf->hs_timeout_max = max;
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
 8018ed8:	b480      	push	{r7}
 8018eda:	b083      	sub	sp, #12
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
 8018ee0:	6039      	str	r1, [r7, #0]
    conf->authmode   = authmode;
 8018ee2:	683b      	ldr	r3, [r7, #0]
 8018ee4:	f003 0303 	and.w	r3, r3, #3
 8018ee8:	b2d9      	uxtb	r1, r3
 8018eea:	687a      	ldr	r2, [r7, #4]
 8018eec:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8018ef0:	f361 0383 	bfi	r3, r1, #2, #2
 8018ef4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8018ef8:	bf00      	nop
 8018efa:	370c      	adds	r7, #12
 8018efc:	46bd      	mov	sp, r7
 8018efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f02:	4770      	bx	lr

08018f04 <mbedtls_ssl_conf_rng>:
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
 8018f04:	b480      	push	{r7}
 8018f06:	b085      	sub	sp, #20
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	60f8      	str	r0, [r7, #12]
 8018f0c:	60b9      	str	r1, [r7, #8]
 8018f0e:	607a      	str	r2, [r7, #4]
    conf->f_rng      = f_rng;
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	68ba      	ldr	r2, [r7, #8]
 8018f14:	619a      	str	r2, [r3, #24]
    conf->p_rng      = p_rng;
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	61da      	str	r2, [r3, #28]
}
 8018f1c:	bf00      	nop
 8018f1e:	3714      	adds	r7, #20
 8018f20:	46bd      	mov	sp, r7
 8018f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f26:	4770      	bx	lr

08018f28 <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
 8018f28:	b480      	push	{r7}
 8018f2a:	b085      	sub	sp, #20
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	60f8      	str	r0, [r7, #12]
 8018f30:	60b9      	str	r1, [r7, #8]
 8018f32:	607a      	str	r2, [r7, #4]
    conf->f_dbg      = f_dbg;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	68ba      	ldr	r2, [r7, #8]
 8018f38:	611a      	str	r2, [r3, #16]
    conf->p_dbg      = p_dbg;
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	687a      	ldr	r2, [r7, #4]
 8018f3e:	615a      	str	r2, [r3, #20]
}
 8018f40:	bf00      	nop
 8018f42:	3714      	adds	r7, #20
 8018f44:	46bd      	mov	sp, r7
 8018f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4a:	4770      	bx	lr

08018f4c <mbedtls_ssl_set_bio>:
void mbedtls_ssl_set_bio( mbedtls_ssl_context *ssl,
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
 8018f4c:	b480      	push	{r7}
 8018f4e:	b085      	sub	sp, #20
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	60b9      	str	r1, [r7, #8]
 8018f56:	607a      	str	r2, [r7, #4]
 8018f58:	603b      	str	r3, [r7, #0]
    ssl->p_bio          = p_bio;
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	68ba      	ldr	r2, [r7, #8]
 8018f5e:	61da      	str	r2, [r3, #28]
    ssl->f_send         = f_send;
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	687a      	ldr	r2, [r7, #4]
 8018f64:	611a      	str	r2, [r3, #16]
    ssl->f_recv         = f_recv;
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	683a      	ldr	r2, [r7, #0]
 8018f6a:	615a      	str	r2, [r3, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	69ba      	ldr	r2, [r7, #24]
 8018f70:	619a      	str	r2, [r3, #24]
}
 8018f72:	bf00      	nop
 8018f74:	3714      	adds	r7, #20
 8018f76:	46bd      	mov	sp, r7
 8018f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f7c:	4770      	bx	lr

08018f7e <mbedtls_ssl_conf_ca_chain>:
}

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
 8018f7e:	b480      	push	{r7}
 8018f80:	b085      	sub	sp, #20
 8018f82:	af00      	add	r7, sp, #0
 8018f84:	60f8      	str	r0, [r7, #12]
 8018f86:	60b9      	str	r1, [r7, #8]
 8018f88:	607a      	str	r2, [r7, #4]
    conf->ca_chain   = ca_chain;
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	68ba      	ldr	r2, [r7, #8]
 8018f8e:	63da      	str	r2, [r3, #60]	; 0x3c
    conf->ca_crl     = ca_crl;
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	687a      	ldr	r2, [r7, #4]
 8018f94:	641a      	str	r2, [r3, #64]	; 0x40
}
 8018f96:	bf00      	nop
 8018f98:	3714      	adds	r7, #20
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa0:	4770      	bx	lr
	...

08018fa4 <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
 8018fa4:	b590      	push	{r4, r7, lr}
 8018fa6:	b085      	sub	sp, #20
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
 8018fac:	6039      	str	r1, [r7, #0]
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	60fb      	str	r3, [r7, #12]

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
 8018fb2:	683b      	ldr	r3, [r7, #0]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d008      	beq.n	8018fca <mbedtls_ssl_set_hostname+0x26>
    {
        hostname_len = strlen( hostname );
 8018fb8:	6838      	ldr	r0, [r7, #0]
 8018fba:	f7e7 f909 	bl	80001d0 <strlen>
 8018fbe:	60f8      	str	r0, [r7, #12]

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	2bff      	cmp	r3, #255	; 0xff
 8018fc4:	d901      	bls.n	8018fca <mbedtls_ssl_set_hostname+0x26>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8018fc6:	4b24      	ldr	r3, [pc, #144]	; (8019058 <mbedtls_ssl_set_hostname+0xb4>)
 8018fc8:	e042      	b.n	8019050 <mbedtls_ssl_set_hostname+0xac>
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d013      	beq.n	8018ffc <mbedtls_ssl_set_hostname+0x58>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f7e7 f8f5 	bl	80001d0 <strlen>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	4619      	mov	r1, r3
 8018fea:	4620      	mov	r0, r4
 8018fec:	f7fc f9b3 	bl	8015356 <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f005 f810 	bl	801e01c <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
 8018ffc:	683b      	ldr	r3, [r7, #0]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d104      	bne.n	801900c <mbedtls_ssl_set_hostname+0x68>
    {
        ssl->hostname = NULL;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2200      	movs	r2, #0
 8019006:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 801900a:	e020      	b.n	801904e <mbedtls_ssl_set_hostname+0xaa>
    }
    else
    {
        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	3301      	adds	r3, #1
 8019010:	4619      	mov	r1, r3
 8019012:	2001      	movs	r0, #1
 8019014:	f004 ffc8 	bl	801dfa8 <calloc>
 8019018:	4603      	mov	r3, r0
 801901a:	461a      	mov	r2, r3
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        if( ssl->hostname == NULL )
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019028:	2b00      	cmp	r3, #0
 801902a:	d101      	bne.n	8019030 <mbedtls_ssl_set_hostname+0x8c>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801902c:	4b0b      	ldr	r3, [pc, #44]	; (801905c <mbedtls_ssl_set_hostname+0xb8>)
 801902e:	e00f      	b.n	8019050 <mbedtls_ssl_set_hostname+0xac>

        memcpy( ssl->hostname, hostname, hostname_len );
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019036:	68fa      	ldr	r2, [r7, #12]
 8019038:	6839      	ldr	r1, [r7, #0]
 801903a:	4618      	mov	r0, r3
 801903c:	f005 f806 	bl	801e04c <memcpy>

        ssl->hostname[hostname_len] = '\0';
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	4413      	add	r3, r2
 801904a:	2200      	movs	r2, #0
 801904c:	701a      	strb	r2, [r3, #0]
    }

    return( 0 );
 801904e:	2300      	movs	r3, #0
}
 8019050:	4618      	mov	r0, r3
 8019052:	3714      	adds	r7, #20
 8019054:	46bd      	mov	sp, r7
 8019056:	bd90      	pop	{r4, r7, pc}
 8019058:	ffff8f00 	.word	0xffff8f00
 801905c:	ffff8100 	.word	0xffff8100

08019060 <mbedtls_ssl_get_ciphersuite>:

    return( 0xFFFFFFFF );
}

const char *mbedtls_ssl_get_ciphersuite( const mbedtls_ssl_context *ssl )
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b082      	sub	sp, #8
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
    if( ssl == NULL || ssl->session == NULL )
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d003      	beq.n	8019076 <mbedtls_ssl_get_ciphersuite+0x16>
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019072:	2b00      	cmp	r3, #0
 8019074:	d101      	bne.n	801907a <mbedtls_ssl_get_ciphersuite+0x1a>
        return( NULL );
 8019076:	2300      	movs	r3, #0
 8019078:	e006      	b.n	8019088 <mbedtls_ssl_get_ciphersuite+0x28>

    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	4618      	mov	r0, r3
 8019082:	f7fa fb33 	bl	80136ec <mbedtls_ssl_get_ciphersuite_name>
 8019086:	4603      	mov	r3, r0
}
 8019088:	4618      	mov	r0, r3
 801908a:	3708      	adds	r7, #8
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}

08019090 <mbedtls_ssl_handshake_step>:

/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b084      	sub	sp, #16
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 8019098:	4b0f      	ldr	r3, [pc, #60]	; (80190d8 <mbedtls_ssl_handshake_step+0x48>)
 801909a:	60fb      	str	r3, [r7, #12]

    if( ssl == NULL || ssl->conf == NULL )
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d003      	beq.n	80190aa <mbedtls_ssl_handshake_step+0x1a>
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d104      	bne.n	80190b4 <mbedtls_ssl_handshake_step+0x24>
    {
    	printf("----------------------handshake step bad input --------------------------\r\n");
 80190aa:	480c      	ldr	r0, [pc, #48]	; (80190dc <mbedtls_ssl_handshake_step+0x4c>)
 80190ac:	f005 f97a 	bl	801e3a4 <puts>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80190b0:	4b0b      	ldr	r3, [pc, #44]	; (80190e0 <mbedtls_ssl_handshake_step+0x50>)
 80190b2:	e00d      	b.n	80190d0 <mbedtls_ssl_handshake_step+0x40>
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80190bc:	f003 0301 	and.w	r3, r3, #1
 80190c0:	b2db      	uxtb	r3, r3
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d103      	bne.n	80190ce <mbedtls_ssl_handshake_step+0x3e>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 80190c6:	6878      	ldr	r0, [r7, #4]
 80190c8:	f7fb fff0 	bl	80150ac <mbedtls_ssl_handshake_client_step>
 80190cc:	60f8      	str	r0, [r7, #12]
#if defined(MBEDTLS_SSL_SRV_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
 80190ce:	68fb      	ldr	r3, [r7, #12]
}
 80190d0:	4618      	mov	r0, r3
 80190d2:	3710      	adds	r7, #16
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd80      	pop	{r7, pc}
 80190d8:	ffff8f80 	.word	0xffff8f80
 80190dc:	08023a8c 	.word	0x08023a8c
 80190e0:	ffff8f00 	.word	0xffff8f00

080190e4 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b086      	sub	sp, #24
 80190e8:	af02      	add	r7, sp, #8
 80190ea:	6078      	str	r0, [r7, #4]
    int ret = 0;
 80190ec:	2300      	movs	r3, #0
 80190ee:	60fb      	str	r3, [r7, #12]

    if( ssl == NULL || ssl->conf == NULL )
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d003      	beq.n	80190fe <mbedtls_ssl_handshake+0x1a>
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d101      	bne.n	8019102 <mbedtls_ssl_handshake+0x1e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80190fe:	4b13      	ldr	r3, [pc, #76]	; (801914c <mbedtls_ssl_handshake+0x68>)
 8019100:	e020      	b.n	8019144 <mbedtls_ssl_handshake+0x60>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 8019102:	4b13      	ldr	r3, [pc, #76]	; (8019150 <mbedtls_ssl_handshake+0x6c>)
 8019104:	9300      	str	r3, [sp, #0]
 8019106:	f641 2306 	movw	r3, #6662	; 0x1a06
 801910a:	4a12      	ldr	r2, [pc, #72]	; (8019154 <mbedtls_ssl_handshake+0x70>)
 801910c:	2102      	movs	r1, #2
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f7f2 fb9c 	bl	800b84c <mbedtls_debug_print_msg>

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 8019114:	e006      	b.n	8019124 <mbedtls_ssl_handshake+0x40>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 8019116:	6878      	ldr	r0, [r7, #4]
 8019118:	f7ff ffba 	bl	8019090 <mbedtls_ssl_handshake_step>
 801911c:	60f8      	str	r0, [r7, #12]

        if( ret != 0 )
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d104      	bne.n	801912e <mbedtls_ssl_handshake+0x4a>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	2b10      	cmp	r3, #16
 801912a:	d1f4      	bne.n	8019116 <mbedtls_ssl_handshake+0x32>
 801912c:	e000      	b.n	8019130 <mbedtls_ssl_handshake+0x4c>
            break;
 801912e:	bf00      	nop
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 8019130:	4b09      	ldr	r3, [pc, #36]	; (8019158 <mbedtls_ssl_handshake+0x74>)
 8019132:	9300      	str	r3, [sp, #0]
 8019134:	f641 2310 	movw	r3, #6672	; 0x1a10
 8019138:	4a06      	ldr	r2, [pc, #24]	; (8019154 <mbedtls_ssl_handshake+0x70>)
 801913a:	2102      	movs	r1, #2
 801913c:	6878      	ldr	r0, [r7, #4]
 801913e:	f7f2 fb85 	bl	800b84c <mbedtls_debug_print_msg>

    return( ret );
 8019142:	68fb      	ldr	r3, [r7, #12]
}
 8019144:	4618      	mov	r0, r3
 8019146:	3710      	adds	r7, #16
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}
 801914c:	ffff8f00 	.word	0xffff8f00
 8019150:	08023ad8 	.word	0x08023ad8
 8019154:	08022c14 	.word	0x08022c14
 8019158:	08023ae8 	.word	0x08023ae8

0801915c <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
 801915c:	b590      	push	{r4, r7, lr}
 801915e:	b089      	sub	sp, #36	; 0x24
 8019160:	af02      	add	r7, sp, #8
 8019162:	60f8      	str	r0, [r7, #12]
 8019164:	60b9      	str	r1, [r7, #8]
 8019166:	607a      	str	r2, [r7, #4]
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d003      	beq.n	8019176 <mbedtls_ssl_read+0x1a>
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d101      	bne.n	801917a <mbedtls_ssl_read+0x1e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8019176:	4b97      	ldr	r3, [pc, #604]	; (80193d4 <mbedtls_ssl_read+0x278>)
 8019178:	e127      	b.n	80193ca <mbedtls_ssl_read+0x26e>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 801917a:	4b97      	ldr	r3, [pc, #604]	; (80193d8 <mbedtls_ssl_read+0x27c>)
 801917c:	9300      	str	r3, [sp, #0]
 801917e:	f44f 53d6 	mov.w	r3, #6848	; 0x1ac0
 8019182:	4a96      	ldr	r2, [pc, #600]	; (80193dc <mbedtls_ssl_read+0x280>)
 8019184:	2102      	movs	r1, #2
 8019186:	68f8      	ldr	r0, [r7, #12]
 8019188:	f7f2 fb60 	bl	800b84c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	685b      	ldr	r3, [r3, #4]
 8019190:	2b10      	cmp	r3, #16
 8019192:	d017      	beq.n	80191c4 <mbedtls_ssl_read+0x68>
    {
        ret = mbedtls_ssl_handshake( ssl );
 8019194:	68f8      	ldr	r0, [r7, #12]
 8019196:	f7ff ffa5 	bl	80190e4 <mbedtls_ssl_handshake>
 801919a:	6178      	str	r0, [r7, #20]
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801919c:	697b      	ldr	r3, [r7, #20]
 801919e:	f513 4fd6 	cmn.w	r3, #27392	; 0x6b00
 80191a2:	d00f      	beq.n	80191c4 <mbedtls_ssl_read+0x68>
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d00c      	beq.n	80191c4 <mbedtls_ssl_read+0x68>
            ret != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 80191aa:	697b      	ldr	r3, [r7, #20]
 80191ac:	9301      	str	r3, [sp, #4]
 80191ae:	4b8c      	ldr	r3, [pc, #560]	; (80193e0 <mbedtls_ssl_read+0x284>)
 80191b0:	9300      	str	r3, [sp, #0]
 80191b2:	f641 23ed 	movw	r3, #6893	; 0x1aed
 80191b6:	4a89      	ldr	r2, [pc, #548]	; (80193dc <mbedtls_ssl_read+0x280>)
 80191b8:	2101      	movs	r1, #1
 80191ba:	68f8      	ldr	r0, [r7, #12]
 80191bc:	f7f2 fbcc 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 80191c0:	697b      	ldr	r3, [r7, #20]
 80191c2:	e102      	b.n	80193ca <mbedtls_ssl_read+0x26e>
     * This will also remove the need to manually reset
     * ssl->keep_current_message = 0 below.
     *
     */

    if( ssl->in_offt == NULL )
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	f040 80ce 	bne.w	801936a <mbedtls_ssl_read+0x20e>
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d010      	beq.n	80191f8 <mbedtls_ssl_read+0x9c>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191da:	68fa      	ldr	r2, [r7, #12]
 80191dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80191de:	4610      	mov	r0, r2
 80191e0:	4798      	blx	r3
 80191e2:	4603      	mov	r3, r0
        if( ssl->f_get_timer != NULL &&
 80191e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191e8:	d106      	bne.n	80191f8 <mbedtls_ssl_read+0x9c>
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191f0:	4619      	mov	r1, r3
 80191f2:	68f8      	ldr	r0, [r7, #12]
 80191f4:	f7fc f8d4 	bl	80153a0 <ssl_set_timer>
        }

        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80191f8:	68f8      	ldr	r0, [r7, #12]
 80191fa:	f7fe fb01 	bl	8017800 <mbedtls_ssl_read_record>
 80191fe:	6178      	str	r0, [r7, #20]
 8019200:	697b      	ldr	r3, [r7, #20]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d012      	beq.n	801922c <mbedtls_ssl_read+0xd0>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 8019206:	697b      	ldr	r3, [r7, #20]
 8019208:	f513 4fe5 	cmn.w	r3, #29312	; 0x7280
 801920c:	d101      	bne.n	8019212 <mbedtls_ssl_read+0xb6>
                return( 0 );
 801920e:	2300      	movs	r3, #0
 8019210:	e0db      	b.n	80193ca <mbedtls_ssl_read+0x26e>

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8019212:	697b      	ldr	r3, [r7, #20]
 8019214:	9301      	str	r3, [sp, #4]
 8019216:	4b73      	ldr	r3, [pc, #460]	; (80193e4 <mbedtls_ssl_read+0x288>)
 8019218:	9300      	str	r3, [sp, #0]
 801921a:	f641 3323 	movw	r3, #6947	; 0x1b23
 801921e:	4a6f      	ldr	r2, [pc, #444]	; (80193dc <mbedtls_ssl_read+0x280>)
 8019220:	2101      	movs	r1, #1
 8019222:	68f8      	ldr	r0, [r7, #12]
 8019224:	f7f2 fb98 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 8019228:	697b      	ldr	r3, [r7, #20]
 801922a:	e0ce      	b.n	80193ca <mbedtls_ssl_read+0x26e>
        }

        if( ssl->in_msglen  == 0 &&
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019230:	2b00      	cmp	r3, #0
 8019232:	d11d      	bne.n	8019270 <mbedtls_ssl_read+0x114>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if( ssl->in_msglen  == 0 &&
 8019238:	2b17      	cmp	r3, #23
 801923a:	d119      	bne.n	8019270 <mbedtls_ssl_read+0x114>
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801923c:	68f8      	ldr	r0, [r7, #12]
 801923e:	f7fe fadf 	bl	8017800 <mbedtls_ssl_read_record>
 8019242:	6178      	str	r0, [r7, #20]
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d012      	beq.n	8019270 <mbedtls_ssl_read+0x114>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 801924a:	697b      	ldr	r3, [r7, #20]
 801924c:	f513 4fe5 	cmn.w	r3, #29312	; 0x7280
 8019250:	d101      	bne.n	8019256 <mbedtls_ssl_read+0xfa>
                    return( 0 );
 8019252:	2300      	movs	r3, #0
 8019254:	e0b9      	b.n	80193ca <mbedtls_ssl_read+0x26e>

                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8019256:	697b      	ldr	r3, [r7, #20]
 8019258:	9301      	str	r3, [sp, #4]
 801925a:	4b62      	ldr	r3, [pc, #392]	; (80193e4 <mbedtls_ssl_read+0x288>)
 801925c:	9300      	str	r3, [sp, #0]
 801925e:	f641 3332 	movw	r3, #6962	; 0x1b32
 8019262:	4a5e      	ldr	r2, [pc, #376]	; (80193dc <mbedtls_ssl_read+0x280>)
 8019264:	2101      	movs	r1, #1
 8019266:	68f8      	ldr	r0, [r7, #12]
 8019268:	f7f2 fb76 	bl	800b958 <mbedtls_debug_print_ret>
                return( ret );
 801926c:	697b      	ldr	r3, [r7, #20]
 801926e:	e0ac      	b.n	80193ca <mbedtls_ssl_read+0x26e>
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019274:	2b16      	cmp	r3, #22
 8019276:	d14e      	bne.n	8019316 <mbedtls_ssl_read+0x1ba>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 8019278:	4b5b      	ldr	r3, [pc, #364]	; (80193e8 <mbedtls_ssl_read+0x28c>)
 801927a:	9300      	str	r3, [sp, #0]
 801927c:	f641 3339 	movw	r3, #6969	; 0x1b39
 8019280:	4a56      	ldr	r2, [pc, #344]	; (80193dc <mbedtls_ssl_read+0x280>)
 8019282:	2101      	movs	r1, #1
 8019284:	68f8      	ldr	r0, [r7, #12]
 8019286:	f7f2 fae1 	bl	800b84c <mbedtls_debug_print_msg>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019292:	f003 0301 	and.w	r3, r3, #1
 8019296:	b2db      	uxtb	r3, r3
 8019298:	2b00      	cmp	r3, #0
 801929a:	d117      	bne.n	80192cc <mbedtls_ssl_read+0x170>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80192a0:	781b      	ldrb	r3, [r3, #0]
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d107      	bne.n	80192b6 <mbedtls_ssl_read+0x15a>
                  ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ) )
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80192aa:	68f8      	ldr	r0, [r7, #12]
 80192ac:	f7fc f816 	bl	80152dc <mbedtls_ssl_hs_hdr_len>
 80192b0:	4603      	mov	r3, r0
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 80192b2:	429c      	cmp	r4, r3
 80192b4:	d00a      	beq.n	80192cc <mbedtls_ssl_read+0x170>
            {
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 80192b6:	4b4d      	ldr	r3, [pc, #308]	; (80193ec <mbedtls_ssl_read+0x290>)
 80192b8:	9300      	str	r3, [sp, #0]
 80192ba:	f641 3346 	movw	r3, #6982	; 0x1b46
 80192be:	4a47      	ldr	r2, [pc, #284]	; (80193dc <mbedtls_ssl_read+0x280>)
 80192c0:	2101      	movs	r1, #1
 80192c2:	68f8      	ldr	r0, [r7, #12]
 80192c4:	f7f2 fac2 	bl	800b84c <mbedtls_debug_print_msg>
                /* With DTLS, drop the packet (probably from last handshake) */
#if defined(MBEDTLS_SSL_PROTO_DTLS)
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                    return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80192c8:	4b49      	ldr	r3, [pc, #292]	; (80193f0 <mbedtls_ssl_read+0x294>)
 80192ca:	e07e      	b.n	80193ca <mbedtls_ssl_read+0x26e>
            {
                /*
                 * Refuse renegotiation
                 */

                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 80192cc:	4b49      	ldr	r3, [pc, #292]	; (80193f4 <mbedtls_ssl_read+0x298>)
 80192ce:	9300      	str	r3, [sp, #0]
 80192d0:	f641 3382 	movw	r3, #7042	; 0x1b82
 80192d4:	4a41      	ldr	r2, [pc, #260]	; (80193dc <mbedtls_ssl_read+0x280>)
 80192d6:	2103      	movs	r1, #3
 80192d8:	68f8      	ldr	r0, [r7, #12]
 80192da:	f7f2 fab7 	bl	800b84c <mbedtls_debug_print_msg>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	68db      	ldr	r3, [r3, #12]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	dd0a      	ble.n	80192fc <mbedtls_ssl_read+0x1a0>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 80192e6:	2264      	movs	r2, #100	; 0x64
 80192e8:	2101      	movs	r1, #1
 80192ea:	68f8      	ldr	r0, [r7, #12]
 80192ec:	f7fe fc24 	bl	8017b38 <mbedtls_ssl_send_alert_message>
 80192f0:	6178      	str	r0, [r7, #20]
 80192f2:	697b      	ldr	r3, [r7, #20]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d00c      	beq.n	8019312 <mbedtls_ssl_read+0x1b6>
                                    MBEDTLS_SSL_ALERT_LEVEL_WARNING,
                                    MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION ) ) != 0 )
                    {
                        return( ret );
 80192f8:	697b      	ldr	r3, [r7, #20]
 80192fa:	e066      	b.n	80193ca <mbedtls_ssl_read+0x26e>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80192fc:	4b3e      	ldr	r3, [pc, #248]	; (80193f8 <mbedtls_ssl_read+0x29c>)
 80192fe:	9300      	str	r3, [sp, #0]
 8019300:	f641 339e 	movw	r3, #7070	; 0x1b9e
 8019304:	4a35      	ldr	r2, [pc, #212]	; (80193dc <mbedtls_ssl_read+0x280>)
 8019306:	2101      	movs	r1, #1
 8019308:	68f8      	ldr	r0, [r7, #12]
 801930a:	f7f2 fa9f 	bl	800b84c <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801930e:	4b3b      	ldr	r3, [pc, #236]	; (80193fc <mbedtls_ssl_read+0x2a0>)
 8019310:	e05b      	b.n	80193ca <mbedtls_ssl_read+0x26e>
                }
            }

            return( MBEDTLS_ERR_SSL_WANT_READ );
 8019312:	4b3b      	ldr	r3, [pc, #236]	; (8019400 <mbedtls_ssl_read+0x2a4>)
 8019314:	e059      	b.n	80193ca <mbedtls_ssl_read+0x26e>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801931a:	2b15      	cmp	r3, #21
 801931c:	d10a      	bne.n	8019334 <mbedtls_ssl_read+0x1d8>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 801931e:	4b39      	ldr	r3, [pc, #228]	; (8019404 <mbedtls_ssl_read+0x2a8>)
 8019320:	9300      	str	r3, [sp, #0]
 8019322:	f641 33b7 	movw	r3, #7095	; 0x1bb7
 8019326:	4a2d      	ldr	r2, [pc, #180]	; (80193dc <mbedtls_ssl_read+0x280>)
 8019328:	2102      	movs	r1, #2
 801932a:	68f8      	ldr	r0, [r7, #12]
 801932c:	f7f2 fa8e 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 8019330:	4b33      	ldr	r3, [pc, #204]	; (8019400 <mbedtls_ssl_read+0x2a4>)
 8019332:	e04a      	b.n	80193ca <mbedtls_ssl_read+0x26e>
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019338:	2b17      	cmp	r3, #23
 801933a:	d00a      	beq.n	8019352 <mbedtls_ssl_read+0x1f6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801933c:	4b32      	ldr	r3, [pc, #200]	; (8019408 <mbedtls_ssl_read+0x2ac>)
 801933e:	9300      	str	r3, [sp, #0]
 8019340:	f641 33bd 	movw	r3, #7101	; 0x1bbd
 8019344:	4a25      	ldr	r2, [pc, #148]	; (80193dc <mbedtls_ssl_read+0x280>)
 8019346:	2101      	movs	r1, #1
 8019348:	68f8      	ldr	r0, [r7, #12]
 801934a:	f7f2 fa7f 	bl	800b84c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801934e:	4b28      	ldr	r3, [pc, #160]	; (80193f0 <mbedtls_ssl_read+0x294>)
 8019350:	e03b      	b.n	80193ca <mbedtls_ssl_read+0x26e>
        }

        ssl->in_offt = ssl->in_msg;
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	669a      	str	r2, [r3, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	685b      	ldr	r3, [r3, #4]
 801935e:	2b10      	cmp	r3, #16
 8019360:	d103      	bne.n	801936a <mbedtls_ssl_read+0x20e>
            ssl_set_timer( ssl, 0 );
 8019362:	2100      	movs	r1, #0
 8019364:	68f8      	ldr	r0, [r7, #12]
 8019366:	f7fc f81b 	bl	80153a0 <ssl_set_timer>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801936e:	687a      	ldr	r2, [r7, #4]
 8019370:	4293      	cmp	r3, r2
 8019372:	bf28      	it	cs
 8019374:	4613      	movcs	r3, r2
 8019376:	613b      	str	r3, [r7, #16]
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801937c:	693a      	ldr	r2, [r7, #16]
 801937e:	4619      	mov	r1, r3
 8019380:	68b8      	ldr	r0, [r7, #8]
 8019382:	f004 fe63 	bl	801e04c <memcpy>
    ssl->in_msglen -= n;
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801938a:	693b      	ldr	r3, [r7, #16]
 801938c:	1ad2      	subs	r2, r2, r3
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	671a      	str	r2, [r3, #112]	; 0x70

    if( ssl->in_msglen == 0 )
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019396:	2b00      	cmp	r3, #0
 8019398:	d107      	bne.n	80193aa <mbedtls_ssl_read+0x24e>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	2200      	movs	r2, #0
 801939e:	669a      	str	r2, [r3, #104]	; 0x68
        ssl->keep_current_message = 0;
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	2200      	movs	r2, #0
 80193a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80193a8:	e005      	b.n	80193b6 <mbedtls_ssl_read+0x25a>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80193ae:	693b      	ldr	r3, [r7, #16]
 80193b0:	441a      	add	r2, r3
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 80193b6:	4b15      	ldr	r3, [pc, #84]	; (801940c <mbedtls_ssl_read+0x2b0>)
 80193b8:	9300      	str	r3, [sp, #0]
 80193ba:	f641 33ec 	movw	r3, #7148	; 0x1bec
 80193be:	4a07      	ldr	r2, [pc, #28]	; (80193dc <mbedtls_ssl_read+0x280>)
 80193c0:	2102      	movs	r1, #2
 80193c2:	68f8      	ldr	r0, [r7, #12]
 80193c4:	f7f2 fa42 	bl	800b84c <mbedtls_debug_print_msg>

    return( (int) n );
 80193c8:	693b      	ldr	r3, [r7, #16]
}
 80193ca:	4618      	mov	r0, r3
 80193cc:	371c      	adds	r7, #28
 80193ce:	46bd      	mov	sp, r7
 80193d0:	bd90      	pop	{r4, r7, pc}
 80193d2:	bf00      	nop
 80193d4:	ffff8f00 	.word	0xffff8f00
 80193d8:	08023af8 	.word	0x08023af8
 80193dc:	08022c14 	.word	0x08022c14
 80193e0:	08023b00 	.word	0x08023b00
 80193e4:	080236b8 	.word	0x080236b8
 80193e8:	08023b18 	.word	0x08023b18
 80193ec:	08023b34 	.word	0x08023b34
 80193f0:	ffff8900 	.word	0xffff8900
 80193f4:	08023b5c 	.word	0x08023b5c
 80193f8:	08022cb8 	.word	0x08022cb8
 80193fc:	ffff9400 	.word	0xffff9400
 8019400:	ffff9700 	.word	0xffff9700
 8019404:	08023b84 	.word	0x08023b84
 8019408:	08023bac 	.word	0x08023bac
 801940c:	08023bcc 	.word	0x08023bcc

08019410 <ssl_write_real>:
 * Send application data to be encrypted by the SSL layer,
 * taking care of max fragment length and buffer size
 */
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b088      	sub	sp, #32
 8019414:	af02      	add	r7, sp, #8
 8019416:	60f8      	str	r0, [r7, #12]
 8019418:	60b9      	str	r1, [r7, #8]
 801941a:	607a      	str	r2, [r7, #4]
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
#else
    size_t max_len = MBEDTLS_SSL_MAX_CONTENT_LEN;
 801941c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019420:	617b      	str	r3, [r7, #20]
#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
    if( len > max_len )
 8019422:	687a      	ldr	r2, [r7, #4]
 8019424:	697b      	ldr	r3, [r7, #20]
 8019426:	429a      	cmp	r2, r3
 8019428:	d901      	bls.n	801942e <ssl_write_real+0x1e>
                                len, max_len ) );
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        }
        else
#endif
            len = max_len;
 801942a:	697b      	ldr	r3, [r7, #20]
 801942c:	607b      	str	r3, [r7, #4]
    }

    if( ssl->out_left != 0 )
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019434:	2b00      	cmp	r3, #0
 8019436:	d013      	beq.n	8019460 <ssl_write_real+0x50>
    {
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8019438:	68f8      	ldr	r0, [r7, #12]
 801943a:	f7fd fe0b 	bl	8017054 <mbedtls_ssl_flush_output>
 801943e:	6138      	str	r0, [r7, #16]
 8019440:	693b      	ldr	r3, [r7, #16]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d030      	beq.n	80194a8 <ssl_write_real+0x98>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 8019446:	693b      	ldr	r3, [r7, #16]
 8019448:	9301      	str	r3, [sp, #4]
 801944a:	4b1a      	ldr	r3, [pc, #104]	; (80194b4 <ssl_write_real+0xa4>)
 801944c:	9300      	str	r3, [sp, #0]
 801944e:	f641 4311 	movw	r3, #7185	; 0x1c11
 8019452:	4a19      	ldr	r2, [pc, #100]	; (80194b8 <ssl_write_real+0xa8>)
 8019454:	2101      	movs	r1, #1
 8019456:	68f8      	ldr	r0, [r7, #12]
 8019458:	f7f2 fa7e 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 801945c:	693b      	ldr	r3, [r7, #16]
 801945e:	e024      	b.n	80194aa <ssl_write_real+0x9a>
        }
    }
    else
    {
        ssl->out_msglen  = len;
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	687a      	ldr	r2, [r7, #4]
 8019464:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	2217      	movs	r2, #23
 801946c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019476:	687a      	ldr	r2, [r7, #4]
 8019478:	68b9      	ldr	r1, [r7, #8]
 801947a:	4618      	mov	r0, r3
 801947c:	f004 fde6 	bl	801e04c <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8019480:	68f8      	ldr	r0, [r7, #12]
 8019482:	f7fd feaf 	bl	80171e4 <mbedtls_ssl_write_record>
 8019486:	6138      	str	r0, [r7, #16]
 8019488:	693b      	ldr	r3, [r7, #16]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d00c      	beq.n	80194a8 <ssl_write_real+0x98>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801948e:	693b      	ldr	r3, [r7, #16]
 8019490:	9301      	str	r3, [sp, #4]
 8019492:	4b0a      	ldr	r3, [pc, #40]	; (80194bc <ssl_write_real+0xac>)
 8019494:	9300      	str	r3, [sp, #0]
 8019496:	f641 431d 	movw	r3, #7197	; 0x1c1d
 801949a:	4a07      	ldr	r2, [pc, #28]	; (80194b8 <ssl_write_real+0xa8>)
 801949c:	2101      	movs	r1, #1
 801949e:	68f8      	ldr	r0, [r7, #12]
 80194a0:	f7f2 fa5a 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 80194a4:	693b      	ldr	r3, [r7, #16]
 80194a6:	e000      	b.n	80194aa <ssl_write_real+0x9a>
        }
    }

    return( (int) len );
 80194a8:	687b      	ldr	r3, [r7, #4]
}
 80194aa:	4618      	mov	r0, r3
 80194ac:	3718      	adds	r7, #24
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	080232ec 	.word	0x080232ec
 80194b8:	08022c14 	.word	0x08022c14
 80194bc:	080235d4 	.word	0x080235d4

080194c0 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b088      	sub	sp, #32
 80194c4:	af02      	add	r7, sp, #8
 80194c6:	60f8      	str	r0, [r7, #12]
 80194c8:	60b9      	str	r1, [r7, #8]
 80194ca:	607a      	str	r2, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 80194cc:	4b1e      	ldr	r3, [pc, #120]	; (8019548 <mbedtls_ssl_write+0x88>)
 80194ce:	9300      	str	r3, [sp, #0]
 80194d0:	f641 4352 	movw	r3, #7250	; 0x1c52
 80194d4:	4a1d      	ldr	r2, [pc, #116]	; (801954c <mbedtls_ssl_write+0x8c>)
 80194d6:	2102      	movs	r1, #2
 80194d8:	68f8      	ldr	r0, [r7, #12]
 80194da:	f7f2 f9b7 	bl	800b84c <mbedtls_debug_print_msg>

    if( ssl == NULL || ssl->conf == NULL )
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d003      	beq.n	80194ec <mbedtls_ssl_write+0x2c>
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d101      	bne.n	80194f0 <mbedtls_ssl_write+0x30>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80194ec:	4b18      	ldr	r3, [pc, #96]	; (8019550 <mbedtls_ssl_write+0x90>)
 80194ee:	e027      	b.n	8019540 <mbedtls_ssl_write+0x80>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	685b      	ldr	r3, [r3, #4]
 80194f4:	2b10      	cmp	r3, #16
 80194f6:	d013      	beq.n	8019520 <mbedtls_ssl_write+0x60>
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 80194f8:	68f8      	ldr	r0, [r7, #12]
 80194fa:	f7ff fdf3 	bl	80190e4 <mbedtls_ssl_handshake>
 80194fe:	6178      	str	r0, [r7, #20]
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d00c      	beq.n	8019520 <mbedtls_ssl_write+0x60>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	9301      	str	r3, [sp, #4]
 801950a:	4b12      	ldr	r3, [pc, #72]	; (8019554 <mbedtls_ssl_write+0x94>)
 801950c:	9300      	str	r3, [sp, #0]
 801950e:	f641 4363 	movw	r3, #7267	; 0x1c63
 8019512:	4a0e      	ldr	r2, [pc, #56]	; (801954c <mbedtls_ssl_write+0x8c>)
 8019514:	2101      	movs	r1, #1
 8019516:	68f8      	ldr	r0, [r7, #12]
 8019518:	f7f2 fa1e 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 801951c:	697b      	ldr	r3, [r7, #20]
 801951e:	e00f      	b.n	8019540 <mbedtls_ssl_write+0x80>
    }

#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
    ret = ssl_write_split( ssl, buf, len );
#else
    ret = ssl_write_real( ssl, buf, len );
 8019520:	687a      	ldr	r2, [r7, #4]
 8019522:	68b9      	ldr	r1, [r7, #8]
 8019524:	68f8      	ldr	r0, [r7, #12]
 8019526:	f7ff ff73 	bl	8019410 <ssl_write_real>
 801952a:	6178      	str	r0, [r7, #20]
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 801952c:	4b0a      	ldr	r3, [pc, #40]	; (8019558 <mbedtls_ssl_write+0x98>)
 801952e:	9300      	str	r3, [sp, #0]
 8019530:	f641 436e 	movw	r3, #7278	; 0x1c6e
 8019534:	4a05      	ldr	r2, [pc, #20]	; (801954c <mbedtls_ssl_write+0x8c>)
 8019536:	2102      	movs	r1, #2
 8019538:	68f8      	ldr	r0, [r7, #12]
 801953a:	f7f2 f987 	bl	800b84c <mbedtls_debug_print_msg>

    return( ret );
 801953e:	697b      	ldr	r3, [r7, #20]
}
 8019540:	4618      	mov	r0, r3
 8019542:	3718      	adds	r7, #24
 8019544:	46bd      	mov	sp, r7
 8019546:	bd80      	pop	{r7, pc}
 8019548:	08023bd4 	.word	0x08023bd4
 801954c:	08022c14 	.word	0x08022c14
 8019550:	ffff8f00 	.word	0xffff8f00
 8019554:	08023b00 	.word	0x08023b00
 8019558:	08023be0 	.word	0x08023be0

0801955c <mbedtls_ssl_close_notify>:

/*
 * Notify the peer that the connection is being closed
 */
int mbedtls_ssl_close_notify( mbedtls_ssl_context *ssl )
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b086      	sub	sp, #24
 8019560:	af02      	add	r7, sp, #8
 8019562:	6078      	str	r0, [r7, #4]
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d003      	beq.n	8019572 <mbedtls_ssl_close_notify+0x16>
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d101      	bne.n	8019576 <mbedtls_ssl_close_notify+0x1a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8019572:	4b1e      	ldr	r3, [pc, #120]	; (80195ec <mbedtls_ssl_close_notify+0x90>)
 8019574:	e036      	b.n	80195e4 <mbedtls_ssl_close_notify+0x88>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
 8019576:	4b1e      	ldr	r3, [pc, #120]	; (80195f0 <mbedtls_ssl_close_notify+0x94>)
 8019578:	9300      	str	r3, [sp, #0]
 801957a:	f641 437d 	movw	r3, #7293	; 0x1c7d
 801957e:	4a1d      	ldr	r2, [pc, #116]	; (80195f4 <mbedtls_ssl_close_notify+0x98>)
 8019580:	2102      	movs	r1, #2
 8019582:	6878      	ldr	r0, [r7, #4]
 8019584:	f7f2 f962 	bl	800b84c <mbedtls_debug_print_msg>

    if( ssl->out_left != 0 )
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801958e:	2b00      	cmp	r3, #0
 8019590:	d004      	beq.n	801959c <mbedtls_ssl_close_notify+0x40>
        return( mbedtls_ssl_flush_output( ssl ) );
 8019592:	6878      	ldr	r0, [r7, #4]
 8019594:	f7fd fd5e 	bl	8017054 <mbedtls_ssl_flush_output>
 8019598:	4603      	mov	r3, r0
 801959a:	e023      	b.n	80195e4 <mbedtls_ssl_close_notify+0x88>

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	685b      	ldr	r3, [r3, #4]
 80195a0:	2b10      	cmp	r3, #16
 80195a2:	d115      	bne.n	80195d0 <mbedtls_ssl_close_notify+0x74>
    {
        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 80195a4:	2200      	movs	r2, #0
 80195a6:	2101      	movs	r1, #1
 80195a8:	6878      	ldr	r0, [r7, #4]
 80195aa:	f7fe fac5 	bl	8017b38 <mbedtls_ssl_send_alert_message>
 80195ae:	60f8      	str	r0, [r7, #12]
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d00c      	beq.n	80195d0 <mbedtls_ssl_close_notify+0x74>
                        MBEDTLS_SSL_ALERT_LEVEL_WARNING,
                        MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	9301      	str	r3, [sp, #4]
 80195ba:	4b0f      	ldr	r3, [pc, #60]	; (80195f8 <mbedtls_ssl_close_notify+0x9c>)
 80195bc:	9300      	str	r3, [sp, #0]
 80195be:	f641 4388 	movw	r3, #7304	; 0x1c88
 80195c2:	4a0c      	ldr	r2, [pc, #48]	; (80195f4 <mbedtls_ssl_close_notify+0x98>)
 80195c4:	2101      	movs	r1, #1
 80195c6:	6878      	ldr	r0, [r7, #4]
 80195c8:	f7f2 f9c6 	bl	800b958 <mbedtls_debug_print_ret>
            return( ret );
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	e009      	b.n	80195e4 <mbedtls_ssl_close_notify+0x88>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
 80195d0:	4b0a      	ldr	r3, [pc, #40]	; (80195fc <mbedtls_ssl_close_notify+0xa0>)
 80195d2:	9300      	str	r3, [sp, #0]
 80195d4:	f641 438d 	movw	r3, #7309	; 0x1c8d
 80195d8:	4a06      	ldr	r2, [pc, #24]	; (80195f4 <mbedtls_ssl_close_notify+0x98>)
 80195da:	2102      	movs	r1, #2
 80195dc:	6878      	ldr	r0, [r7, #4]
 80195de:	f7f2 f935 	bl	800b84c <mbedtls_debug_print_msg>

    return( 0 );
 80195e2:	2300      	movs	r3, #0
}
 80195e4:	4618      	mov	r0, r3
 80195e6:	3710      	adds	r7, #16
 80195e8:	46bd      	mov	sp, r7
 80195ea:	bd80      	pop	{r7, pc}
 80195ec:	ffff8f00 	.word	0xffff8f00
 80195f0:	08023bec 	.word	0x08023bec
 80195f4:	08022c14 	.word	0x08022c14
 80195f8:	08023c04 	.word	0x08023c04
 80195fc:	08023c24 	.word	0x08023c24

08019600 <mbedtls_ssl_transform_free>:

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b082      	sub	sp, #8
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
    if( transform == NULL )
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d018      	beq.n	8019640 <mbedtls_ssl_transform_free+0x40>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	3350      	adds	r3, #80	; 0x50
 8019612:	4618      	mov	r0, r3
 8019614:	f7f1 fc2f 	bl	800ae76 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	3390      	adds	r3, #144	; 0x90
 801961c:	4618      	mov	r0, r3
 801961e:	f7f1 fc2a 	bl	800ae76 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	3338      	adds	r3, #56	; 0x38
 8019626:	4618      	mov	r0, r3
 8019628:	f7f4 fd73 	bl	800e112 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	3344      	adds	r3, #68	; 0x44
 8019630:	4618      	mov	r0, r3
 8019632:	f7f4 fd6e 	bl	800e112 <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 8019636:	21d0      	movs	r1, #208	; 0xd0
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f7fb fe8c 	bl	8015356 <mbedtls_zeroize>
 801963e:	e000      	b.n	8019642 <mbedtls_ssl_transform_free+0x42>
        return;
 8019640:	bf00      	nop
}
 8019642:	3708      	adds	r7, #8
 8019644:	46bd      	mov	sp, r7
 8019646:	bd80      	pop	{r7, pc}

08019648 <ssl_key_cert_free>:

#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
 8019648:	b580      	push	{r7, lr}
 801964a:	b084      	sub	sp, #16
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_key_cert *cur = key_cert, *next;
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 8019654:	e007      	b.n	8019666 <ssl_key_cert_free+0x1e>
    {
        next = cur->next;
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	689b      	ldr	r3, [r3, #8]
 801965a:	60bb      	str	r3, [r7, #8]
        mbedtls_free( cur );
 801965c:	68f8      	ldr	r0, [r7, #12]
 801965e:	f004 fcdd 	bl	801e01c <free>
        cur = next;
 8019662:	68bb      	ldr	r3, [r7, #8]
 8019664:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d1f4      	bne.n	8019656 <ssl_key_cert_free+0xe>
    }
}
 801966c:	bf00      	nop
 801966e:	bf00      	nop
 8019670:	3710      	adds	r7, #16
 8019672:	46bd      	mov	sp, r7
 8019674:	bd80      	pop	{r7, pc}

08019676 <mbedtls_ssl_handshake_free>:
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 8019676:	b580      	push	{r7, lr}
 8019678:	b082      	sub	sp, #8
 801967a:	af00      	add	r7, sp, #0
 801967c:	6078      	str	r0, [r7, #4]
    if( handshake == NULL )
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d00a      	beq.n	801969a <mbedtls_ssl_handshake_free+0x24>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	3308      	adds	r3, #8
 8019688:	4618      	mov	r0, r3
 801968a:	f7f8 f84a 	bl	8011722 <mbedtls_sha256_free>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 801968e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8019692:	6878      	ldr	r0, [r7, #4]
 8019694:	f7fb fe5f 	bl	8015356 <mbedtls_zeroize>
 8019698:	e000      	b.n	801969c <mbedtls_ssl_handshake_free+0x26>
        return;
 801969a:	bf00      	nop
}
 801969c:	3708      	adds	r7, #8
 801969e:	46bd      	mov	sp, r7
 80196a0:	bd80      	pop	{r7, pc}

080196a2 <mbedtls_ssl_session_free>:

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 80196a2:	b580      	push	{r7, lr}
 80196a4:	b082      	sub	sp, #8
 80196a6:	af00      	add	r7, sp, #0
 80196a8:	6078      	str	r0, [r7, #4]
    if( session == NULL )
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d012      	beq.n	80196d6 <mbedtls_ssl_session_free+0x34>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d009      	beq.n	80196cc <mbedtls_ssl_session_free+0x2a>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196bc:	4618      	mov	r0, r3
 80196be:	f003 fb33 	bl	801cd28 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196c6:	4618      	mov	r0, r3
 80196c8:	f004 fca8 	bl	801e01c <free>

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 80196cc:	2164      	movs	r1, #100	; 0x64
 80196ce:	6878      	ldr	r0, [r7, #4]
 80196d0:	f7fb fe41 	bl	8015356 <mbedtls_zeroize>
 80196d4:	e000      	b.n	80196d8 <mbedtls_ssl_session_free+0x36>
        return;
 80196d6:	bf00      	nop
}
 80196d8:	3708      	adds	r7, #8
 80196da:	46bd      	mov	sp, r7
 80196dc:	bd80      	pop	{r7, pc}
	...

080196e0 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 80196e0:	b590      	push	{r4, r7, lr}
 80196e2:	b085      	sub	sp, #20
 80196e4:	af02      	add	r7, sp, #8
 80196e6:	6078      	str	r0, [r7, #4]
    if( ssl == NULL )
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	f000 8091 	beq.w	8019812 <mbedtls_ssl_free+0x132>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
 80196f0:	4b4a      	ldr	r3, [pc, #296]	; (801981c <mbedtls_ssl_free+0x13c>)
 80196f2:	9300      	str	r3, [sp, #0]
 80196f4:	f641 531b 	movw	r3, #7451	; 0x1d1b
 80196f8:	4a49      	ldr	r2, [pc, #292]	; (8019820 <mbedtls_ssl_free+0x140>)
 80196fa:	2102      	movs	r1, #2
 80196fc:	6878      	ldr	r0, [r7, #4]
 80196fe:	f7f2 f8a5 	bl	800b84c <mbedtls_debug_print_msg>

    if( ssl->out_buf != NULL )
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019708:	2b00      	cmp	r3, #0
 801970a:	d00d      	beq.n	8019728 <mbedtls_ssl_free+0x48>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019712:	f241 113d 	movw	r1, #4413	; 0x113d
 8019716:	4618      	mov	r0, r3
 8019718:	f7fb fe1d 	bl	8015356 <mbedtls_zeroize>
        mbedtls_free( ssl->out_buf );
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019722:	4618      	mov	r0, r3
 8019724:	f004 fc7a 	bl	801e01c <free>
    }

    if( ssl->in_buf != NULL )
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801972c:	2b00      	cmp	r3, #0
 801972e:	d00b      	beq.n	8019748 <mbedtls_ssl_free+0x68>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019734:	f241 113d 	movw	r1, #4413	; 0x113d
 8019738:	4618      	mov	r0, r3
 801973a:	f7fb fe0c 	bl	8015356 <mbedtls_zeroize>
        mbedtls_free( ssl->in_buf );
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019742:	4618      	mov	r0, r3
 8019744:	f004 fc6a 	bl	801e01c <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801974c:	2b00      	cmp	r3, #0
 801974e:	d009      	beq.n	8019764 <mbedtls_ssl_free+0x84>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019754:	4618      	mov	r0, r3
 8019756:	f7ff ff53 	bl	8019600 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801975e:	4618      	mov	r0, r3
 8019760:	f004 fc5c 	bl	801e01c <free>
    }

    if( ssl->handshake )
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019768:	2b00      	cmp	r3, #0
 801976a:	d01d      	beq.n	80197a8 <mbedtls_ssl_free+0xc8>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019770:	4618      	mov	r0, r3
 8019772:	f7ff ff80 	bl	8019676 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801977a:	4618      	mov	r0, r3
 801977c:	f7ff ff40 	bl	8019600 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019784:	4618      	mov	r0, r3
 8019786:	f7ff ff8c 	bl	80196a2 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801978e:	4618      	mov	r0, r3
 8019790:	f004 fc44 	bl	801e01c <free>
        mbedtls_free( ssl->transform_negotiate );
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019798:	4618      	mov	r0, r3
 801979a:	f004 fc3f 	bl	801e01c <free>
        mbedtls_free( ssl->session_negotiate );
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197a2:	4618      	mov	r0, r3
 80197a4:	f004 fc3a 	bl	801e01c <free>
    }

    if( ssl->session )
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d009      	beq.n	80197c4 <mbedtls_ssl_free+0xe4>
    {
        mbedtls_ssl_session_free( ssl->session );
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197b4:	4618      	mov	r0, r3
 80197b6:	f7ff ff74 	bl	80196a2 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197be:	4618      	mov	r0, r3
 80197c0:	f004 fc2c 	bl	801e01c <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d013      	beq.n	80197f6 <mbedtls_ssl_free+0x116>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80197da:	4618      	mov	r0, r3
 80197dc:	f7e6 fcf8 	bl	80001d0 <strlen>
 80197e0:	4603      	mov	r3, r0
 80197e2:	4619      	mov	r1, r3
 80197e4:	4620      	mov	r0, r4
 80197e6:	f7fb fdb6 	bl	8015356 <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80197f0:	4618      	mov	r0, r3
 80197f2:	f004 fc13 	bl	801e01c <free>

#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
    mbedtls_free( ssl->cli_id );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
 80197f6:	4b0b      	ldr	r3, [pc, #44]	; (8019824 <mbedtls_ssl_free+0x144>)
 80197f8:	9300      	str	r3, [sp, #0]
 80197fa:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80197fe:	4a08      	ldr	r2, [pc, #32]	; (8019820 <mbedtls_ssl_free+0x140>)
 8019800:	2102      	movs	r1, #2
 8019802:	6878      	ldr	r0, [r7, #4]
 8019804:	f7f2 f822 	bl	800b84c <mbedtls_debug_print_msg>

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 8019808:	21b4      	movs	r1, #180	; 0xb4
 801980a:	6878      	ldr	r0, [r7, #4]
 801980c:	f7fb fda3 	bl	8015356 <mbedtls_zeroize>
 8019810:	e000      	b.n	8019814 <mbedtls_ssl_free+0x134>
        return;
 8019812:	bf00      	nop
}
 8019814:	370c      	adds	r7, #12
 8019816:	46bd      	mov	sp, r7
 8019818:	bd90      	pop	{r4, r7, pc}
 801981a:	bf00      	nop
 801981c:	08023c3c 	.word	0x08023c3c
 8019820:	08022c14 	.word	0x08022c14
 8019824:	08023c44 	.word	0x08023c44

08019828 <mbedtls_ssl_config_init>:

/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b082      	sub	sp, #8
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 8019830:	2254      	movs	r2, #84	; 0x54
 8019832:	2100      	movs	r1, #0
 8019834:	6878      	ldr	r0, [r7, #4]
 8019836:	f004 fc31 	bl	801e09c <memset>
}
 801983a:	bf00      	nop
 801983c:	3708      	adds	r7, #8
 801983e:	46bd      	mov	sp, r7
 8019840:	bd80      	pop	{r7, pc}
	...

08019844 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b084      	sub	sp, #16
 8019848:	af00      	add	r7, sp, #0
 801984a:	60f8      	str	r0, [r7, #12]
 801984c:	60b9      	str	r1, [r7, #8]
 801984e:	607a      	str	r2, [r7, #4]
 8019850:	603b      	str	r3, [r7, #0]
    int ret;
#endif

    /* Use the functions here so that they are covered in tests,
     * but otherwise access member directly for efficiency */
    mbedtls_ssl_conf_endpoint( conf, endpoint );
 8019852:	68b9      	ldr	r1, [r7, #8]
 8019854:	68f8      	ldr	r0, [r7, #12]
 8019856:	f7ff fb13 	bl	8018e80 <mbedtls_ssl_conf_endpoint>
    mbedtls_ssl_conf_transport( conf, transport );
 801985a:	6879      	ldr	r1, [r7, #4]
 801985c:	68f8      	ldr	r0, [r7, #12]
 801985e:	f7ff fb25 	bl	8018eac <mbedtls_ssl_conf_transport>

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d107      	bne.n	8019878 <mbedtls_ssl_config_defaults+0x34>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 8019868:	68fa      	ldr	r2, [r7, #12]
 801986a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801986e:	2102      	movs	r1, #2
 8019870:	f361 0383 	bfi	r3, r1, #2, #2
 8019874:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	2b02      	cmp	r3, #2
 801987c:	d125      	bne.n	80198ca <mbedtls_ssl_config_defaults+0x86>
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	2203      	movs	r2, #3
 8019882:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	2203      	movs	r2, #3
 801988a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	2203      	movs	r2, #3
 8019892:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	2203      	movs	r2, #3
 801989a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	4a20      	ldr	r2, [pc, #128]	; (8019924 <mbedtls_ssl_config_defaults+0xe0>)
 80198a2:	60da      	str	r2, [r3, #12]
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	68da      	ldr	r2, [r3, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	609a      	str	r2, [r3, #8]
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	689a      	ldr	r2, [r3, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	605a      	str	r2, [r3, #4]
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	685a      	ldr	r2, [r3, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	601a      	str	r2, [r3, #0]
                                   ssl_preset_suiteb_ciphersuites;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	4a1a      	ldr	r2, [pc, #104]	; (8019928 <mbedtls_ssl_config_defaults+0xe4>)
 80198c0:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	4a19      	ldr	r2, [pc, #100]	; (801992c <mbedtls_ssl_config_defaults+0xe8>)
 80198c6:	645a      	str	r2, [r3, #68]	; 0x44
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = ssl_preset_suiteb_curves;
#endif
            break;
 80198c8:	e026      	b.n	8019918 <mbedtls_ssl_config_defaults+0xd4>

        /*
         * Default
         */
        default:
            conf->min_major_ver = ( MBEDTLS_SSL_MIN_MAJOR_VERSION >
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	2203      	movs	r2, #3
 80198ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                                    MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION ) ?
                                    MBEDTLS_SSL_MIN_MAJOR_VERSION :
                                    MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION;
            conf->min_minor_ver = ( MBEDTLS_SSL_MIN_MINOR_VERSION >
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	2203      	movs	r2, #3
 80198d6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
                                    MBEDTLS_SSL_MIN_VALID_MINOR_VERSION ) ?
                                    MBEDTLS_SSL_MIN_MINOR_VERSION :
                                    MBEDTLS_SSL_MIN_VALID_MINOR_VERSION;
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	2203      	movs	r2, #3
 80198de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	2203      	movs	r2, #3
 80198e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80198ea:	f7f9 fed7 	bl	801369c <mbedtls_ssl_list_ciphersuites>
 80198ee:	4602      	mov	r2, r0
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	60da      	str	r2, [r3, #12]
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	68da      	ldr	r2, [r3, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	609a      	str	r2, [r3, #8]
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	689a      	ldr	r2, [r3, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	605a      	str	r2, [r3, #4]
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	685a      	ldr	r2, [r3, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	601a      	str	r2, [r3, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	4a08      	ldr	r2, [pc, #32]	; (8019930 <mbedtls_ssl_config_defaults+0xec>)
 8019910:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	4a07      	ldr	r2, [pc, #28]	; (8019934 <mbedtls_ssl_config_defaults+0xf0>)
 8019916:	645a      	str	r2, [r3, #68]	; 0x44
#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
 8019918:	2300      	movs	r3, #0
}
 801991a:	4618      	mov	r0, r3
 801991c:	3710      	adds	r7, #16
 801991e:	46bd      	mov	sp, r7
 8019920:	bd80      	pop	{r7, pc}
 8019922:	bf00      	nop
 8019924:	20000028 	.word	0x20000028
 8019928:	080252e4 	.word	0x080252e4
 801992c:	20000034 	.word	0x20000034
 8019930:	080252d4 	.word	0x080252d4
 8019934:	2000001c 	.word	0x2000001c

08019938 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 8019938:	b580      	push	{r7, lr}
 801993a:	b082      	sub	sp, #8
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019944:	4618      	mov	r0, r3
 8019946:	f7ff fe7f 	bl	8019648 <ssl_key_cert_free>
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 801994a:	2154      	movs	r1, #84	; 0x54
 801994c:	6878      	ldr	r0, [r7, #4]
 801994e:	f7fb fd02 	bl	8015356 <mbedtls_zeroize>
}
 8019952:	bf00      	nop
 8019954:	3708      	adds	r7, #8
 8019956:	46bd      	mov	sp, r7
 8019958:	bd80      	pop	{r7, pc}

0801995a <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 801995a:	b580      	push	{r7, lr}
 801995c:	b082      	sub	sp, #8
 801995e:	af00      	add	r7, sp, #0
 8019960:	6078      	str	r0, [r7, #4]
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 8019962:	2101      	movs	r1, #1
 8019964:	6878      	ldr	r0, [r7, #4]
 8019966:	f7f5 f9f1 	bl	800ed4c <mbedtls_pk_can_do>
 801996a:	4603      	mov	r3, r0
 801996c:	2b00      	cmp	r3, #0
 801996e:	d001      	beq.n	8019974 <mbedtls_ssl_sig_from_pk+0x1a>
        return( MBEDTLS_SSL_SIG_RSA );
 8019970:	2301      	movs	r3, #1
 8019972:	e000      	b.n	8019976 <mbedtls_ssl_sig_from_pk+0x1c>
#endif
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
 8019974:	2300      	movs	r3, #0
}
 8019976:	4618      	mov	r0, r3
 8019978:	3708      	adds	r7, #8
 801997a:	46bd      	mov	sp, r7
 801997c:	bd80      	pop	{r7, pc}

0801997e <mbedtls_ssl_sig_hash_set_const_hash>:
}

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
 801997e:	b480      	push	{r7}
 8019980:	b083      	sub	sp, #12
 8019982:	af00      	add	r7, sp, #0
 8019984:	6078      	str	r0, [r7, #4]
 8019986:	460b      	mov	r3, r1
 8019988:	70fb      	strb	r3, [r7, #3]
    set->rsa   = md_alg;
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	78fa      	ldrb	r2, [r7, #3]
 801998e:	701a      	strb	r2, [r3, #0]
    set->ecdsa = md_alg;
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	78fa      	ldrb	r2, [r7, #3]
 8019994:	705a      	strb	r2, [r3, #1]
}
 8019996:	bf00      	nop
 8019998:	370c      	adds	r7, #12
 801999a:	46bd      	mov	sp, r7
 801999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a0:	4770      	bx	lr

080199a2 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 80199a2:	b480      	push	{r7}
 80199a4:	b083      	sub	sp, #12
 80199a6:	af00      	add	r7, sp, #0
 80199a8:	6078      	str	r0, [r7, #4]
    switch( md )
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	2b05      	cmp	r3, #5
 80199ae:	d003      	beq.n	80199b8 <mbedtls_ssl_hash_from_md_alg+0x16>
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	2b06      	cmp	r3, #6
 80199b4:	d002      	beq.n	80199bc <mbedtls_ssl_hash_from_md_alg+0x1a>
 80199b6:	e003      	b.n	80199c0 <mbedtls_ssl_hash_from_md_alg+0x1e>
        case MBEDTLS_MD_SHA1:
            return( MBEDTLS_SSL_HASH_SHA1 );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( MBEDTLS_SSL_HASH_SHA224 );
 80199b8:	2303      	movs	r3, #3
 80199ba:	e002      	b.n	80199c2 <mbedtls_ssl_hash_from_md_alg+0x20>
        case MBEDTLS_MD_SHA256:
            return( MBEDTLS_SSL_HASH_SHA256 );
 80199bc:	2304      	movs	r3, #4
 80199be:	e000      	b.n	80199c2 <mbedtls_ssl_hash_from_md_alg+0x20>
            return( MBEDTLS_SSL_HASH_SHA384 );
        case MBEDTLS_MD_SHA512:
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
 80199c0:	2300      	movs	r3, #0
    }
}
 80199c2:	4618      	mov	r0, r3
 80199c4:	370c      	adds	r7, #12
 80199c6:	46bd      	mov	sp, r7
 80199c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199cc:	4770      	bx	lr

080199ce <mbedtls_ssl_check_cert_usage>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 80199ce:	b480      	push	{r7}
 80199d0:	b087      	sub	sp, #28
 80199d2:	af00      	add	r7, sp, #0
 80199d4:	60f8      	str	r0, [r7, #12]
 80199d6:	60b9      	str	r1, [r7, #8]
 80199d8:	607a      	str	r2, [r7, #4]
 80199da:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80199dc:	2300      	movs	r3, #0
 80199de:	617b      	str	r3, [r7, #20]
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
 80199e0:	697b      	ldr	r3, [r7, #20]
}
 80199e2:	4618      	mov	r0, r3
 80199e4:	371c      	adds	r7, #28
 80199e6:	46bd      	mov	sp, r7
 80199e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ec:	4770      	bx	lr

080199ee <mbedtls_ssl_write_version>:
 * 1.0 <-> 3.2      (DTLS 1.0 is based on TLS 1.1)
 * 1.x <-> 3.x+1    for x != 0 (DTLS 1.2 based on TLS 1.2)
 */
void mbedtls_ssl_write_version( int major, int minor, int transport,
                        unsigned char ver[2] )
{
 80199ee:	b480      	push	{r7}
 80199f0:	b085      	sub	sp, #20
 80199f2:	af00      	add	r7, sp, #0
 80199f4:	60f8      	str	r0, [r7, #12]
 80199f6:	60b9      	str	r1, [r7, #8]
 80199f8:	607a      	str	r2, [r7, #4]
 80199fa:	603b      	str	r3, [r7, #0]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	b2da      	uxtb	r2, r3
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	701a      	strb	r2, [r3, #0]
        ver[1] = (unsigned char) minor;
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	3301      	adds	r3, #1
 8019a08:	68ba      	ldr	r2, [r7, #8]
 8019a0a:	b2d2      	uxtb	r2, r2
 8019a0c:	701a      	strb	r2, [r3, #0]
    }
}
 8019a0e:	bf00      	nop
 8019a10:	3714      	adds	r7, #20
 8019a12:	46bd      	mov	sp, r7
 8019a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a18:	4770      	bx	lr

08019a1a <mbedtls_ssl_read_version>:

void mbedtls_ssl_read_version( int *major, int *minor, int transport,
                       const unsigned char ver[2] )
{
 8019a1a:	b480      	push	{r7}
 8019a1c:	b085      	sub	sp, #20
 8019a1e:	af00      	add	r7, sp, #0
 8019a20:	60f8      	str	r0, [r7, #12]
 8019a22:	60b9      	str	r1, [r7, #8]
 8019a24:	607a      	str	r2, [r7, #4]
 8019a26:	603b      	str	r3, [r7, #0]
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 8019a28:	683b      	ldr	r3, [r7, #0]
 8019a2a:	781b      	ldrb	r3, [r3, #0]
 8019a2c:	461a      	mov	r2, r3
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	601a      	str	r2, [r3, #0]
        *minor = ver[1];
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	3301      	adds	r3, #1
 8019a36:	781b      	ldrb	r3, [r3, #0]
 8019a38:	461a      	mov	r2, r3
 8019a3a:	68bb      	ldr	r3, [r7, #8]
 8019a3c:	601a      	str	r2, [r3, #0]
    }
}
 8019a3e:	bf00      	nop
 8019a40:	3714      	adds	r7, #20
 8019a42:	46bd      	mov	sp, r7
 8019a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a48:	4770      	bx	lr
	...

08019a4c <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b086      	sub	sp, #24
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	60f8      	str	r0, [r7, #12]
 8019a54:	60b9      	str	r1, [r7, #8]
 8019a56:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( end - *p ) < 1 )
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	68ba      	ldr	r2, [r7, #8]
 8019a5e:	1ad3      	subs	r3, r2, r3
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	dc01      	bgt.n	8019a68 <mbedtls_x509_get_serial+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 8019a64:	4b1a      	ldr	r3, [pc, #104]	; (8019ad0 <mbedtls_x509_get_serial+0x84>)
 8019a66:	e02f      	b.n	8019ac8 <mbedtls_x509_get_serial+0x7c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	781b      	ldrb	r3, [r3, #0]
 8019a6e:	2b82      	cmp	r3, #130	; 0x82
 8019a70:	d006      	beq.n	8019a80 <mbedtls_x509_get_serial+0x34>
        **p !=   MBEDTLS_ASN1_INTEGER )
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	781b      	ldrb	r3, [r3, #0]
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8019a78:	2b02      	cmp	r3, #2
 8019a7a:	d001      	beq.n	8019a80 <mbedtls_x509_get_serial+0x34>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 8019a7c:	4b15      	ldr	r3, [pc, #84]	; (8019ad4 <mbedtls_x509_get_serial+0x88>)
 8019a7e:	e023      	b.n	8019ac8 <mbedtls_x509_get_serial+0x7c>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	1c59      	adds	r1, r3, #1
 8019a86:	68fa      	ldr	r2, [r7, #12]
 8019a88:	6011      	str	r1, [r2, #0]
 8019a8a:	781b      	ldrb	r3, [r3, #0]
 8019a8c:	461a      	mov	r2, r3
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	3304      	adds	r3, #4
 8019a96:	461a      	mov	r2, r3
 8019a98:	68b9      	ldr	r1, [r7, #8]
 8019a9a:	68f8      	ldr	r0, [r7, #12]
 8019a9c:	f7ec fc38 	bl	8006310 <mbedtls_asn1_get_len>
 8019aa0:	6178      	str	r0, [r7, #20]
 8019aa2:	697b      	ldr	r3, [r7, #20]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d003      	beq.n	8019ab0 <mbedtls_x509_get_serial+0x64>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 8019aa8:	697b      	ldr	r3, [r7, #20]
 8019aaa:	f5a3 530a 	sub.w	r3, r3, #8832	; 0x2280
 8019aae:	e00b      	b.n	8019ac8 <mbedtls_x509_get_serial+0x7c>

    serial->p = *p;
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	681a      	ldr	r2, [r3, #0]
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	609a      	str	r2, [r3, #8]
    *p += serial->len;
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	681a      	ldr	r2, [r3, #0]
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	685b      	ldr	r3, [r3, #4]
 8019ac0:	441a      	add	r2, r3
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	601a      	str	r2, [r3, #0]

    return( 0 );
 8019ac6:	2300      	movs	r3, #0
}
 8019ac8:	4618      	mov	r0, r3
 8019aca:	3718      	adds	r7, #24
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}
 8019ad0:	ffffdd20 	.word	0xffffdd20
 8019ad4:	ffffdd1e 	.word	0xffffdd1e

08019ad8 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b086      	sub	sp, #24
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	60f8      	str	r0, [r7, #12]
 8019ae0:	60b9      	str	r1, [r7, #8]
 8019ae2:	607a      	str	r2, [r7, #4]
 8019ae4:	603b      	str	r3, [r7, #0]
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 8019ae6:	683b      	ldr	r3, [r7, #0]
 8019ae8:	687a      	ldr	r2, [r7, #4]
 8019aea:	68b9      	ldr	r1, [r7, #8]
 8019aec:	68f8      	ldr	r0, [r7, #12]
 8019aee:	f7ec fe40 	bl	8006772 <mbedtls_asn1_get_alg>
 8019af2:	6178      	str	r0, [r7, #20]
 8019af4:	697b      	ldr	r3, [r7, #20]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d003      	beq.n	8019b02 <mbedtls_x509_get_alg+0x2a>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 8019afa:	697b      	ldr	r3, [r7, #20]
 8019afc:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8019b00:	e000      	b.n	8019b04 <mbedtls_x509_get_alg+0x2c>

    return( 0 );
 8019b02:	2300      	movs	r3, #0
}
 8019b04:	4618      	mov	r0, r3
 8019b06:	3718      	adds	r7, #24
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	bd80      	pop	{r7, pc}

08019b0c <x509_get_attr_type_value>:
 *  AttributeValue ::= ANY DEFINED BY AttributeType
 */
static int x509_get_attr_type_value( unsigned char **p,
                                     const unsigned char *end,
                                     mbedtls_x509_name *cur )
{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	b088      	sub	sp, #32
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	60f8      	str	r0, [r7, #12]
 8019b14:	60b9      	str	r1, [r7, #8]
 8019b16:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8019b18:	f107 0210 	add.w	r2, r7, #16
 8019b1c:	2330      	movs	r3, #48	; 0x30
 8019b1e:	68b9      	ldr	r1, [r7, #8]
 8019b20:	68f8      	ldr	r0, [r7, #12]
 8019b22:	f7ec fcb7 	bl	8006494 <mbedtls_asn1_get_tag>
 8019b26:	61f8      	str	r0, [r7, #28]
 8019b28:	69fb      	ldr	r3, [r7, #28]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d003      	beq.n	8019b36 <x509_get_attr_type_value+0x2a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019b2e:	69fb      	ldr	r3, [r7, #28]
 8019b30:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 8019b34:	e080      	b.n	8019c38 <x509_get_attr_type_value+0x12c>

    if( ( end - *p ) < 1 )
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	68ba      	ldr	r2, [r7, #8]
 8019b3c:	1ad3      	subs	r3, r2, r3
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	dc01      	bgt.n	8019b46 <x509_get_attr_type_value+0x3a>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 8019b42:	4b3f      	ldr	r3, [pc, #252]	; (8019c40 <x509_get_attr_type_value+0x134>)
 8019b44:	e078      	b.n	8019c38 <x509_get_attr_type_value+0x12c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	61bb      	str	r3, [r7, #24]
    oid->tag = **p;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	781b      	ldrb	r3, [r3, #0]
 8019b50:	461a      	mov	r2, r3
 8019b52:	69bb      	ldr	r3, [r7, #24]
 8019b54:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8019b56:	69bb      	ldr	r3, [r7, #24]
 8019b58:	1d1a      	adds	r2, r3, #4
 8019b5a:	2306      	movs	r3, #6
 8019b5c:	68b9      	ldr	r1, [r7, #8]
 8019b5e:	68f8      	ldr	r0, [r7, #12]
 8019b60:	f7ec fc98 	bl	8006494 <mbedtls_asn1_get_tag>
 8019b64:	61f8      	str	r0, [r7, #28]
 8019b66:	69fb      	ldr	r3, [r7, #28]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d003      	beq.n	8019b74 <x509_get_attr_type_value+0x68>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019b6c:	69fb      	ldr	r3, [r7, #28]
 8019b6e:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 8019b72:	e061      	b.n	8019c38 <x509_get_attr_type_value+0x12c>

    oid->p = *p;
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	681a      	ldr	r2, [r3, #0]
 8019b78:	69bb      	ldr	r3, [r7, #24]
 8019b7a:	609a      	str	r2, [r3, #8]
    *p += oid->len;
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	681a      	ldr	r2, [r3, #0]
 8019b80:	69bb      	ldr	r3, [r7, #24]
 8019b82:	685b      	ldr	r3, [r3, #4]
 8019b84:	441a      	add	r2, r3
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	601a      	str	r2, [r3, #0]

    if( ( end - *p ) < 1 )
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	68ba      	ldr	r2, [r7, #8]
 8019b90:	1ad3      	subs	r3, r2, r3
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	dc01      	bgt.n	8019b9a <x509_get_attr_type_value+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 8019b96:	4b2a      	ldr	r3, [pc, #168]	; (8019c40 <x509_get_attr_type_value+0x134>)
 8019b98:	e04e      	b.n	8019c38 <x509_get_attr_type_value+0x12c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	781b      	ldrb	r3, [r3, #0]
 8019ba0:	2b1e      	cmp	r3, #30
 8019ba2:	d01f      	beq.n	8019be4 <x509_get_attr_type_value+0xd8>
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	2b0c      	cmp	r3, #12
 8019bac:	d01a      	beq.n	8019be4 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	781b      	ldrb	r3, [r3, #0]
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8019bb4:	2b14      	cmp	r3, #20
 8019bb6:	d015      	beq.n	8019be4 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	781b      	ldrb	r3, [r3, #0]
 8019bbe:	2b13      	cmp	r3, #19
 8019bc0:	d010      	beq.n	8019be4 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	781b      	ldrb	r3, [r3, #0]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
 8019bc8:	2b16      	cmp	r3, #22
 8019bca:	d00b      	beq.n	8019be4 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	2b1c      	cmp	r3, #28
 8019bd4:	d006      	beq.n	8019be4 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_BIT_STRING )
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	781b      	ldrb	r3, [r3, #0]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8019bdc:	2b03      	cmp	r3, #3
 8019bde:	d001      	beq.n	8019be4 <x509_get_attr_type_value+0xd8>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 8019be0:	4b18      	ldr	r3, [pc, #96]	; (8019c44 <x509_get_attr_type_value+0x138>)
 8019be2:	e029      	b.n	8019c38 <x509_get_attr_type_value+0x12c>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	330c      	adds	r3, #12
 8019be8:	617b      	str	r3, [r7, #20]
    val->tag = *(*p)++;
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	1c59      	adds	r1, r3, #1
 8019bf0:	68fa      	ldr	r2, [r7, #12]
 8019bf2:	6011      	str	r1, [r2, #0]
 8019bf4:	781b      	ldrb	r3, [r3, #0]
 8019bf6:	461a      	mov	r2, r3
 8019bf8:	697b      	ldr	r3, [r7, #20]
 8019bfa:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8019bfc:	697b      	ldr	r3, [r7, #20]
 8019bfe:	3304      	adds	r3, #4
 8019c00:	461a      	mov	r2, r3
 8019c02:	68b9      	ldr	r1, [r7, #8]
 8019c04:	68f8      	ldr	r0, [r7, #12]
 8019c06:	f7ec fb83 	bl	8006310 <mbedtls_asn1_get_len>
 8019c0a:	61f8      	str	r0, [r7, #28]
 8019c0c:	69fb      	ldr	r3, [r7, #28]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d003      	beq.n	8019c1a <x509_get_attr_type_value+0x10e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019c12:	69fb      	ldr	r3, [r7, #28]
 8019c14:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 8019c18:	e00e      	b.n	8019c38 <x509_get_attr_type_value+0x12c>

    val->p = *p;
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	681a      	ldr	r2, [r3, #0]
 8019c1e:	697b      	ldr	r3, [r7, #20]
 8019c20:	609a      	str	r2, [r3, #8]
    *p += val->len;
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	681a      	ldr	r2, [r3, #0]
 8019c26:	697b      	ldr	r3, [r7, #20]
 8019c28:	685b      	ldr	r3, [r3, #4]
 8019c2a:	441a      	add	r2, r3
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	601a      	str	r2, [r3, #0]

    cur->next = NULL;
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	2200      	movs	r2, #0
 8019c34:	619a      	str	r2, [r3, #24]

    return( 0 );
 8019c36:	2300      	movs	r3, #0
}
 8019c38:	4618      	mov	r0, r3
 8019c3a:	3720      	adds	r7, #32
 8019c3c:	46bd      	mov	sp, r7
 8019c3e:	bd80      	pop	{r7, pc}
 8019c40:	ffffdc20 	.word	0xffffdc20
 8019c44:	ffffdc1e 	.word	0xffffdc1e

08019c48 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	b088      	sub	sp, #32
 8019c4c:	af00      	add	r7, sp, #0
 8019c4e:	60f8      	str	r0, [r7, #12]
 8019c50:	60b9      	str	r1, [r7, #8]
 8019c52:	607a      	str	r2, [r7, #4]
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8019c54:	f107 0214 	add.w	r2, r7, #20
 8019c58:	2331      	movs	r3, #49	; 0x31
 8019c5a:	68b9      	ldr	r1, [r7, #8]
 8019c5c:	68f8      	ldr	r0, [r7, #12]
 8019c5e:	f7ec fc19 	bl	8006494 <mbedtls_asn1_get_tag>
 8019c62:	61f8      	str	r0, [r7, #28]
 8019c64:	69fb      	ldr	r3, [r7, #28]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d003      	beq.n	8019c72 <mbedtls_x509_get_name+0x2a>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019c6a:	69fb      	ldr	r3, [r7, #28]
 8019c6c:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 8019c70:	e043      	b.n	8019cfa <mbedtls_x509_get_name+0xb2>

        end_set  = *p + set_len;
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	681a      	ldr	r2, [r3, #0]
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	4413      	add	r3, r2
 8019c7a:	61bb      	str	r3, [r7, #24]

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8019c7c:	687a      	ldr	r2, [r7, #4]
 8019c7e:	69b9      	ldr	r1, [r7, #24]
 8019c80:	68f8      	ldr	r0, [r7, #12]
 8019c82:	f7ff ff43 	bl	8019b0c <x509_get_attr_type_value>
 8019c86:	61f8      	str	r0, [r7, #28]
 8019c88:	69fb      	ldr	r3, [r7, #28]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d001      	beq.n	8019c92 <mbedtls_x509_get_name+0x4a>
                return( ret );
 8019c8e:	69fb      	ldr	r3, [r7, #28]
 8019c90:	e033      	b.n	8019cfa <mbedtls_x509_get_name+0xb2>

            if( *p == end_set )
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	69ba      	ldr	r2, [r7, #24]
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	d014      	beq.n	8019cc6 <mbedtls_x509_get_name+0x7e>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	2201      	movs	r2, #1
 8019ca0:	771a      	strb	r2, [r3, #28]

            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8019ca2:	2120      	movs	r1, #32
 8019ca4:	2001      	movs	r0, #1
 8019ca6:	f004 f97f 	bl	801dfa8 <calloc>
 8019caa:	4603      	mov	r3, r0
 8019cac:	461a      	mov	r2, r3
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	619a      	str	r2, [r3, #24]

            if( cur->next == NULL )
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	699b      	ldr	r3, [r3, #24]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d101      	bne.n	8019cbe <mbedtls_x509_get_name+0x76>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8019cba:	4b12      	ldr	r3, [pc, #72]	; (8019d04 <mbedtls_x509_get_name+0xbc>)
 8019cbc:	e01d      	b.n	8019cfa <mbedtls_x509_get_name+0xb2>

            cur = cur->next;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	699b      	ldr	r3, [r3, #24]
 8019cc2:	607b      	str	r3, [r7, #4]
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8019cc4:	e7da      	b.n	8019c7c <mbedtls_x509_get_name+0x34>
                break;
 8019cc6:	bf00      	nop
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	68ba      	ldr	r2, [r7, #8]
 8019cce:	429a      	cmp	r2, r3
 8019cd0:	d101      	bne.n	8019cd6 <mbedtls_x509_get_name+0x8e>
            return( 0 );
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	e011      	b.n	8019cfa <mbedtls_x509_get_name+0xb2>

        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8019cd6:	2120      	movs	r1, #32
 8019cd8:	2001      	movs	r0, #1
 8019cda:	f004 f965 	bl	801dfa8 <calloc>
 8019cde:	4603      	mov	r3, r0
 8019ce0:	461a      	mov	r2, r3
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	619a      	str	r2, [r3, #24]

        if( cur->next == NULL )
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	699b      	ldr	r3, [r3, #24]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d101      	bne.n	8019cf2 <mbedtls_x509_get_name+0xaa>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8019cee:	4b05      	ldr	r3, [pc, #20]	; (8019d04 <mbedtls_x509_get_name+0xbc>)
 8019cf0:	e003      	b.n	8019cfa <mbedtls_x509_get_name+0xb2>

        cur = cur->next;
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	699b      	ldr	r3, [r3, #24]
 8019cf6:	607b      	str	r3, [r7, #4]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8019cf8:	e7ac      	b.n	8019c54 <mbedtls_x509_get_name+0xc>
    }
}
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	3720      	adds	r7, #32
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	bd80      	pop	{r7, pc}
 8019d02:	bf00      	nop
 8019d04:	ffffd780 	.word	0xffffd780

08019d08 <x509_parse_int>:

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 8019d08:	b480      	push	{r7}
 8019d0a:	b085      	sub	sp, #20
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	60f8      	str	r0, [r7, #12]
 8019d10:	60b9      	str	r1, [r7, #8]
 8019d12:	607a      	str	r2, [r7, #4]
    *res = 0;
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	2200      	movs	r2, #0
 8019d18:	601a      	str	r2, [r3, #0]

    for( ; n > 0; --n )
 8019d1a:	e024      	b.n	8019d66 <x509_parse_int+0x5e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	781b      	ldrb	r3, [r3, #0]
 8019d22:	2b2f      	cmp	r3, #47	; 0x2f
 8019d24:	d904      	bls.n	8019d30 <x509_parse_int+0x28>
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	781b      	ldrb	r3, [r3, #0]
 8019d2c:	2b39      	cmp	r3, #57	; 0x39
 8019d2e:	d901      	bls.n	8019d34 <x509_parse_int+0x2c>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8019d30:	4b12      	ldr	r3, [pc, #72]	; (8019d7c <x509_parse_int+0x74>)
 8019d32:	e01c      	b.n	8019d6e <x509_parse_int+0x66>

        *res *= 10;
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	681a      	ldr	r2, [r3, #0]
 8019d38:	4613      	mov	r3, r2
 8019d3a:	009b      	lsls	r3, r3, #2
 8019d3c:	4413      	add	r3, r2
 8019d3e:	005b      	lsls	r3, r3, #1
 8019d40:	461a      	mov	r2, r3
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	601a      	str	r2, [r3, #0]
        *res += ( *(*p)++ - '0' );
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	1c59      	adds	r1, r3, #1
 8019d4c:	68fa      	ldr	r2, [r7, #12]
 8019d4e:	6011      	str	r1, [r2, #0]
 8019d50:	781b      	ldrb	r3, [r3, #0]
 8019d52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	441a      	add	r2, r3
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	601a      	str	r2, [r3, #0]
    for( ; n > 0; --n )
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	3b01      	subs	r3, #1
 8019d64:	60bb      	str	r3, [r7, #8]
 8019d66:	68bb      	ldr	r3, [r7, #8]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d1d7      	bne.n	8019d1c <x509_parse_int+0x14>
    }

    return( 0 );
 8019d6c:	2300      	movs	r3, #0
}
 8019d6e:	4618      	mov	r0, r3
 8019d70:	3714      	adds	r7, #20
 8019d72:	46bd      	mov	sp, r7
 8019d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d78:	4770      	bx	lr
 8019d7a:	bf00      	nop
 8019d7c:	ffffdc00 	.word	0xffffdc00

08019d80 <x509_date_is_valid>:

static int x509_date_is_valid(const mbedtls_x509_time *t )
{
 8019d80:	b480      	push	{r7}
 8019d82:	b085      	sub	sp, #20
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
 8019d88:	4b47      	ldr	r3, [pc, #284]	; (8019ea8 <x509_date_is_valid+0x128>)
 8019d8a:	60bb      	str	r3, [r7, #8]
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	db05      	blt.n	8019da0 <x509_date_is_valid+0x20>
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	f242 720f 	movw	r2, #9999	; 0x270f
 8019d9c:	4293      	cmp	r3, r2
 8019d9e:	dd01      	ble.n	8019da4 <x509_date_is_valid+0x24>
 8019da0:	68bb      	ldr	r3, [r7, #8]
 8019da2:	e07a      	b.n	8019e9a <x509_date_is_valid+0x11a>
    CHECK_RANGE( 0, 23,   t->hour );
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	68db      	ldr	r3, [r3, #12]
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	db03      	blt.n	8019db4 <x509_date_is_valid+0x34>
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	68db      	ldr	r3, [r3, #12]
 8019db0:	2b17      	cmp	r3, #23
 8019db2:	dd01      	ble.n	8019db8 <x509_date_is_valid+0x38>
 8019db4:	68bb      	ldr	r3, [r7, #8]
 8019db6:	e070      	b.n	8019e9a <x509_date_is_valid+0x11a>
    CHECK_RANGE( 0, 59,   t->min  );
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	691b      	ldr	r3, [r3, #16]
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	db03      	blt.n	8019dc8 <x509_date_is_valid+0x48>
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	691b      	ldr	r3, [r3, #16]
 8019dc4:	2b3b      	cmp	r3, #59	; 0x3b
 8019dc6:	dd01      	ble.n	8019dcc <x509_date_is_valid+0x4c>
 8019dc8:	68bb      	ldr	r3, [r7, #8]
 8019dca:	e066      	b.n	8019e9a <x509_date_is_valid+0x11a>
    CHECK_RANGE( 0, 59,   t->sec  );
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	695b      	ldr	r3, [r3, #20]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	db03      	blt.n	8019ddc <x509_date_is_valid+0x5c>
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	695b      	ldr	r3, [r3, #20]
 8019dd8:	2b3b      	cmp	r3, #59	; 0x3b
 8019dda:	dd01      	ble.n	8019de0 <x509_date_is_valid+0x60>
 8019ddc:	68bb      	ldr	r3, [r7, #8]
 8019dde:	e05c      	b.n	8019e9a <x509_date_is_valid+0x11a>

    switch( t->mon )
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	685b      	ldr	r3, [r3, #4]
 8019de4:	3b01      	subs	r3, #1
 8019de6:	2b0b      	cmp	r3, #11
 8019de8:	d849      	bhi.n	8019e7e <x509_date_is_valid+0xfe>
 8019dea:	a201      	add	r2, pc, #4	; (adr r2, 8019df0 <x509_date_is_valid+0x70>)
 8019dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019df0:	08019e21 	.word	0x08019e21
 8019df4:	08019e2d 	.word	0x08019e2d
 8019df8:	08019e21 	.word	0x08019e21
 8019dfc:	08019e27 	.word	0x08019e27
 8019e00:	08019e21 	.word	0x08019e21
 8019e04:	08019e27 	.word	0x08019e27
 8019e08:	08019e21 	.word	0x08019e21
 8019e0c:	08019e21 	.word	0x08019e21
 8019e10:	08019e27 	.word	0x08019e27
 8019e14:	08019e21 	.word	0x08019e21
 8019e18:	08019e27 	.word	0x08019e27
 8019e1c:	08019e21 	.word	0x08019e21
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 8019e20:	231f      	movs	r3, #31
 8019e22:	60fb      	str	r3, [r7, #12]
            break;
 8019e24:	e02d      	b.n	8019e82 <x509_date_is_valid+0x102>
        case 4: case 6: case 9: case 11:
            month_len = 30;
 8019e26:	231e      	movs	r3, #30
 8019e28:	60fb      	str	r3, [r7, #12]
            break;
 8019e2a:	e02a      	b.n	8019e82 <x509_date_is_valid+0x102>
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	f003 0303 	and.w	r3, r3, #3
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d10d      	bne.n	8019e54 <x509_date_is_valid+0xd4>
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	681a      	ldr	r2, [r3, #0]
 8019e3c:	4b1b      	ldr	r3, [pc, #108]	; (8019eac <x509_date_is_valid+0x12c>)
 8019e3e:	fb83 1302 	smull	r1, r3, r3, r2
 8019e42:	1159      	asrs	r1, r3, #5
 8019e44:	17d3      	asrs	r3, r2, #31
 8019e46:	1acb      	subs	r3, r1, r3
 8019e48:	2164      	movs	r1, #100	; 0x64
 8019e4a:	fb01 f303 	mul.w	r3, r1, r3
 8019e4e:	1ad3      	subs	r3, r2, r3
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d10e      	bne.n	8019e72 <x509_date_is_valid+0xf2>
                !( t->year % 400 ) )
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	681a      	ldr	r2, [r3, #0]
 8019e58:	4b14      	ldr	r3, [pc, #80]	; (8019eac <x509_date_is_valid+0x12c>)
 8019e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8019e5e:	11d9      	asrs	r1, r3, #7
 8019e60:	17d3      	asrs	r3, r2, #31
 8019e62:	1acb      	subs	r3, r1, r3
 8019e64:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8019e68:	fb01 f303 	mul.w	r3, r1, r3
 8019e6c:	1ad3      	subs	r3, r2, r3
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d102      	bne.n	8019e78 <x509_date_is_valid+0xf8>
                month_len = 29;
 8019e72:	231d      	movs	r3, #29
 8019e74:	60fb      	str	r3, [r7, #12]
            else
                month_len = 28;
            break;
 8019e76:	e004      	b.n	8019e82 <x509_date_is_valid+0x102>
                month_len = 28;
 8019e78:	231c      	movs	r3, #28
 8019e7a:	60fb      	str	r3, [r7, #12]
            break;
 8019e7c:	e001      	b.n	8019e82 <x509_date_is_valid+0x102>
        default:
            return( ret );
 8019e7e:	68bb      	ldr	r3, [r7, #8]
 8019e80:	e00b      	b.n	8019e9a <x509_date_is_valid+0x11a>
    }
    CHECK_RANGE( 1, month_len, t->day );
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	689b      	ldr	r3, [r3, #8]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	dd04      	ble.n	8019e94 <x509_date_is_valid+0x114>
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	689b      	ldr	r3, [r3, #8]
 8019e8e:	68fa      	ldr	r2, [r7, #12]
 8019e90:	429a      	cmp	r2, r3
 8019e92:	da01      	bge.n	8019e98 <x509_date_is_valid+0x118>
 8019e94:	68bb      	ldr	r3, [r7, #8]
 8019e96:	e000      	b.n	8019e9a <x509_date_is_valid+0x11a>

    return( 0 );
 8019e98:	2300      	movs	r3, #0
}
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	3714      	adds	r7, #20
 8019e9e:	46bd      	mov	sp, r7
 8019ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea4:	4770      	bx	lr
 8019ea6:	bf00      	nop
 8019ea8:	ffffdc00 	.word	0xffffdc00
 8019eac:	51eb851f 	.word	0x51eb851f

08019eb0 <x509_parse_time>:
 * Parse an ASN1_UTC_TIME (yearlen=2) or ASN1_GENERALIZED_TIME (yearlen=4)
 * field.
 */
static int x509_parse_time( unsigned char **p, size_t len, size_t yearlen,
                            mbedtls_x509_time *tm )
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b086      	sub	sp, #24
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	60f8      	str	r0, [r7, #12]
 8019eb8:	60b9      	str	r1, [r7, #8]
 8019eba:	607a      	str	r2, [r7, #4]
 8019ebc:	603b      	str	r3, [r7, #0]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	3308      	adds	r3, #8
 8019ec2:	68ba      	ldr	r2, [r7, #8]
 8019ec4:	429a      	cmp	r2, r3
 8019ec6:	d201      	bcs.n	8019ecc <x509_parse_time+0x1c>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8019ec8:	4b49      	ldr	r3, [pc, #292]	; (8019ff0 <x509_parse_time+0x140>)
 8019eca:	e08c      	b.n	8019fe6 <x509_parse_time+0x136>
    len -= yearlen + 8;
 8019ecc:	68ba      	ldr	r2, [r7, #8]
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	1ad3      	subs	r3, r2, r3
 8019ed2:	3b08      	subs	r3, #8
 8019ed4:	60bb      	str	r3, [r7, #8]

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	461a      	mov	r2, r3
 8019eda:	6879      	ldr	r1, [r7, #4]
 8019edc:	68f8      	ldr	r0, [r7, #12]
 8019ede:	f7ff ff13 	bl	8019d08 <x509_parse_int>
 8019ee2:	6178      	str	r0, [r7, #20]
 8019ee4:	697b      	ldr	r3, [r7, #20]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d001      	beq.n	8019eee <x509_parse_time+0x3e>
 8019eea:	697b      	ldr	r3, [r7, #20]
 8019eec:	e07b      	b.n	8019fe6 <x509_parse_time+0x136>
    if ( 2 == yearlen )
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	2b02      	cmp	r3, #2
 8019ef2:	d10f      	bne.n	8019f14 <x509_parse_time+0x64>
    {
        if ( tm->year < 50 )
 8019ef4:	683b      	ldr	r3, [r7, #0]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	2b31      	cmp	r3, #49	; 0x31
 8019efa:	dc05      	bgt.n	8019f08 <x509_parse_time+0x58>
            tm->year += 100;
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8019f04:	683b      	ldr	r3, [r7, #0]
 8019f06:	601a      	str	r2, [r3, #0]

        tm->year += 1900;
 8019f08:	683b      	ldr	r3, [r7, #0]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8019f10:	683b      	ldr	r3, [r7, #0]
 8019f12:	601a      	str	r2, [r3, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 8019f14:	683b      	ldr	r3, [r7, #0]
 8019f16:	3304      	adds	r3, #4
 8019f18:	461a      	mov	r2, r3
 8019f1a:	2102      	movs	r1, #2
 8019f1c:	68f8      	ldr	r0, [r7, #12]
 8019f1e:	f7ff fef3 	bl	8019d08 <x509_parse_int>
 8019f22:	6178      	str	r0, [r7, #20]
 8019f24:	697b      	ldr	r3, [r7, #20]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d001      	beq.n	8019f2e <x509_parse_time+0x7e>
 8019f2a:	697b      	ldr	r3, [r7, #20]
 8019f2c:	e05b      	b.n	8019fe6 <x509_parse_time+0x136>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 8019f2e:	683b      	ldr	r3, [r7, #0]
 8019f30:	3308      	adds	r3, #8
 8019f32:	461a      	mov	r2, r3
 8019f34:	2102      	movs	r1, #2
 8019f36:	68f8      	ldr	r0, [r7, #12]
 8019f38:	f7ff fee6 	bl	8019d08 <x509_parse_int>
 8019f3c:	6178      	str	r0, [r7, #20]
 8019f3e:	697b      	ldr	r3, [r7, #20]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d001      	beq.n	8019f48 <x509_parse_time+0x98>
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	e04e      	b.n	8019fe6 <x509_parse_time+0x136>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	330c      	adds	r3, #12
 8019f4c:	461a      	mov	r2, r3
 8019f4e:	2102      	movs	r1, #2
 8019f50:	68f8      	ldr	r0, [r7, #12]
 8019f52:	f7ff fed9 	bl	8019d08 <x509_parse_int>
 8019f56:	6178      	str	r0, [r7, #20]
 8019f58:	697b      	ldr	r3, [r7, #20]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d001      	beq.n	8019f62 <x509_parse_time+0xb2>
 8019f5e:	697b      	ldr	r3, [r7, #20]
 8019f60:	e041      	b.n	8019fe6 <x509_parse_time+0x136>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 8019f62:	683b      	ldr	r3, [r7, #0]
 8019f64:	3310      	adds	r3, #16
 8019f66:	461a      	mov	r2, r3
 8019f68:	2102      	movs	r1, #2
 8019f6a:	68f8      	ldr	r0, [r7, #12]
 8019f6c:	f7ff fecc 	bl	8019d08 <x509_parse_int>
 8019f70:	6178      	str	r0, [r7, #20]
 8019f72:	697b      	ldr	r3, [r7, #20]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d001      	beq.n	8019f7c <x509_parse_time+0xcc>
 8019f78:	697b      	ldr	r3, [r7, #20]
 8019f7a:	e034      	b.n	8019fe6 <x509_parse_time+0x136>

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 8019f7c:	68bb      	ldr	r3, [r7, #8]
 8019f7e:	2b01      	cmp	r3, #1
 8019f80:	d913      	bls.n	8019faa <x509_parse_time+0xfa>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 8019f82:	683b      	ldr	r3, [r7, #0]
 8019f84:	3314      	adds	r3, #20
 8019f86:	461a      	mov	r2, r3
 8019f88:	2102      	movs	r1, #2
 8019f8a:	68f8      	ldr	r0, [r7, #12]
 8019f8c:	f7ff febc 	bl	8019d08 <x509_parse_int>
 8019f90:	6178      	str	r0, [r7, #20]
 8019f92:	697b      	ldr	r3, [r7, #20]
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d001      	beq.n	8019f9c <x509_parse_time+0xec>
 8019f98:	697b      	ldr	r3, [r7, #20]
 8019f9a:	e024      	b.n	8019fe6 <x509_parse_time+0x136>
        len -= 2;
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	3b02      	subs	r3, #2
 8019fa0:	60bb      	str	r3, [r7, #8]
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 8019fa2:	68bb      	ldr	r3, [r7, #8]
 8019fa4:	2b01      	cmp	r3, #1
 8019fa6:	d10f      	bne.n	8019fc8 <x509_parse_time+0x118>
 8019fa8:	e001      	b.n	8019fae <x509_parse_time+0xfe>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8019faa:	4b11      	ldr	r3, [pc, #68]	; (8019ff0 <x509_parse_time+0x140>)
 8019fac:	e01b      	b.n	8019fe6 <x509_parse_time+0x136>
    if ( 1 == len && 'Z' == **p )
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	781b      	ldrb	r3, [r3, #0]
 8019fb4:	2b5a      	cmp	r3, #90	; 0x5a
 8019fb6:	d107      	bne.n	8019fc8 <x509_parse_time+0x118>
    {
        (*p)++;
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	1c5a      	adds	r2, r3, #1
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	601a      	str	r2, [r3, #0]
        len--;
 8019fc2:	68bb      	ldr	r3, [r7, #8]
 8019fc4:	3b01      	subs	r3, #1
 8019fc6:	60bb      	str	r3, [r7, #8]
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 8019fc8:	68bb      	ldr	r3, [r7, #8]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d001      	beq.n	8019fd2 <x509_parse_time+0x122>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8019fce:	4b08      	ldr	r3, [pc, #32]	; (8019ff0 <x509_parse_time+0x140>)
 8019fd0:	e009      	b.n	8019fe6 <x509_parse_time+0x136>

    CHECK( x509_date_is_valid( tm ) );
 8019fd2:	6838      	ldr	r0, [r7, #0]
 8019fd4:	f7ff fed4 	bl	8019d80 <x509_date_is_valid>
 8019fd8:	6178      	str	r0, [r7, #20]
 8019fda:	697b      	ldr	r3, [r7, #20]
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d001      	beq.n	8019fe4 <x509_parse_time+0x134>
 8019fe0:	697b      	ldr	r3, [r7, #20]
 8019fe2:	e000      	b.n	8019fe6 <x509_parse_time+0x136>

    return ( 0 );
 8019fe4:	2300      	movs	r3, #0
}
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	3718      	adds	r7, #24
 8019fea:	46bd      	mov	sp, r7
 8019fec:	bd80      	pop	{r7, pc}
 8019fee:	bf00      	nop
 8019ff0:	ffffdc00 	.word	0xffffdc00

08019ff4 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b088      	sub	sp, #32
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	60f8      	str	r0, [r7, #12]
 8019ffc:	60b9      	str	r1, [r7, #8]
 8019ffe:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	68ba      	ldr	r2, [r7, #8]
 801a006:	1ad3      	subs	r3, r2, r3
 801a008:	2b00      	cmp	r3, #0
 801a00a:	dc01      	bgt.n	801a010 <mbedtls_x509_get_time+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801a00c:	4b19      	ldr	r3, [pc, #100]	; (801a074 <mbedtls_x509_get_time+0x80>)
 801a00e:	e02c      	b.n	801a06a <mbedtls_x509_get_time+0x76>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	781b      	ldrb	r3, [r3, #0]
 801a016:	76fb      	strb	r3, [r7, #27]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 801a018:	7efb      	ldrb	r3, [r7, #27]
 801a01a:	2b17      	cmp	r3, #23
 801a01c:	d102      	bne.n	801a024 <mbedtls_x509_get_time+0x30>
        year_len = 2;
 801a01e:	2302      	movs	r3, #2
 801a020:	61fb      	str	r3, [r7, #28]
 801a022:	e007      	b.n	801a034 <mbedtls_x509_get_time+0x40>
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 801a024:	7efb      	ldrb	r3, [r7, #27]
 801a026:	2b18      	cmp	r3, #24
 801a028:	d102      	bne.n	801a030 <mbedtls_x509_get_time+0x3c>
        year_len = 4;
 801a02a:	2304      	movs	r3, #4
 801a02c:	61fb      	str	r3, [r7, #28]
 801a02e:	e001      	b.n	801a034 <mbedtls_x509_get_time+0x40>
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801a030:	4b11      	ldr	r3, [pc, #68]	; (801a078 <mbedtls_x509_get_time+0x84>)
 801a032:	e01a      	b.n	801a06a <mbedtls_x509_get_time+0x76>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	1c5a      	adds	r2, r3, #1
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	601a      	str	r2, [r3, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 801a03e:	f107 0310 	add.w	r3, r7, #16
 801a042:	461a      	mov	r2, r3
 801a044:	68b9      	ldr	r1, [r7, #8]
 801a046:	68f8      	ldr	r0, [r7, #12]
 801a048:	f7ec f962 	bl	8006310 <mbedtls_asn1_get_len>
 801a04c:	6178      	str	r0, [r7, #20]

    if( ret != 0 )
 801a04e:	697b      	ldr	r3, [r7, #20]
 801a050:	2b00      	cmp	r3, #0
 801a052:	d003      	beq.n	801a05c <mbedtls_x509_get_time+0x68>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 801a05a:	e006      	b.n	801a06a <mbedtls_x509_get_time+0x76>

    return x509_parse_time( p, len, year_len, tm );
 801a05c:	6939      	ldr	r1, [r7, #16]
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	69fa      	ldr	r2, [r7, #28]
 801a062:	68f8      	ldr	r0, [r7, #12]
 801a064:	f7ff ff24 	bl	8019eb0 <x509_parse_time>
 801a068:	4603      	mov	r3, r0
}
 801a06a:	4618      	mov	r0, r3
 801a06c:	3720      	adds	r7, #32
 801a06e:	46bd      	mov	sp, r7
 801a070:	bd80      	pop	{r7, pc}
 801a072:	bf00      	nop
 801a074:	ffffdba0 	.word	0xffffdba0
 801a078:	ffffdb9e 	.word	0xffffdb9e

0801a07c <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b088      	sub	sp, #32
 801a080:	af00      	add	r7, sp, #0
 801a082:	60f8      	str	r0, [r7, #12]
 801a084:	60b9      	str	r1, [r7, #8]
 801a086:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	68ba      	ldr	r2, [r7, #8]
 801a08e:	1ad3      	subs	r3, r2, r3
 801a090:	2b00      	cmp	r3, #0
 801a092:	dc01      	bgt.n	801a098 <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 801a094:	4b14      	ldr	r3, [pc, #80]	; (801a0e8 <mbedtls_x509_get_sig+0x6c>)
 801a096:	e023      	b.n	801a0e0 <mbedtls_x509_get_sig+0x64>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	781b      	ldrb	r3, [r3, #0]
 801a09e:	61fb      	str	r3, [r7, #28]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801a0a0:	f107 0314 	add.w	r3, r7, #20
 801a0a4:	461a      	mov	r2, r3
 801a0a6:	68b9      	ldr	r1, [r7, #8]
 801a0a8:	68f8      	ldr	r0, [r7, #12]
 801a0aa:	f7ec facf 	bl	800664c <mbedtls_asn1_get_bitstring_null>
 801a0ae:	61b8      	str	r0, [r7, #24]
 801a0b0:	69bb      	ldr	r3, [r7, #24]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d003      	beq.n	801a0be <mbedtls_x509_get_sig+0x42>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 801a0b6:	69bb      	ldr	r3, [r7, #24]
 801a0b8:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 801a0bc:	e010      	b.n	801a0e0 <mbedtls_x509_get_sig+0x64>

    sig->tag = tag_type;
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	69fa      	ldr	r2, [r7, #28]
 801a0c2:	601a      	str	r2, [r3, #0]
    sig->len = len;
 801a0c4:	697a      	ldr	r2, [r7, #20]
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	605a      	str	r2, [r3, #4]
    sig->p = *p;
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	681a      	ldr	r2, [r3, #0]
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	609a      	str	r2, [r3, #8]

    *p += len;
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	681a      	ldr	r2, [r3, #0]
 801a0d6:	697b      	ldr	r3, [r7, #20]
 801a0d8:	441a      	add	r2, r3
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	601a      	str	r2, [r3, #0]

    return( 0 );
 801a0de:	2300      	movs	r3, #0
}
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	3720      	adds	r7, #32
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	bd80      	pop	{r7, pc}
 801a0e8:	ffffdb20 	.word	0xffffdb20

0801a0ec <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 801a0ec:	b580      	push	{r7, lr}
 801a0ee:	b086      	sub	sp, #24
 801a0f0:	af00      	add	r7, sp, #0
 801a0f2:	60f8      	str	r0, [r7, #12]
 801a0f4:	60b9      	str	r1, [r7, #8]
 801a0f6:	607a      	str	r2, [r7, #4]
 801a0f8:	603b      	str	r3, [r7, #0]
    int ret;

    if( *sig_opts != NULL )
 801a0fa:	6a3b      	ldr	r3, [r7, #32]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d001      	beq.n	801a106 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801a102:	4b11      	ldr	r3, [pc, #68]	; (801a148 <mbedtls_x509_get_sig_alg+0x5c>)
 801a104:	e01b      	b.n	801a13e <mbedtls_x509_get_sig_alg+0x52>

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 801a106:	683a      	ldr	r2, [r7, #0]
 801a108:	6879      	ldr	r1, [r7, #4]
 801a10a:	68f8      	ldr	r0, [r7, #12]
 801a10c:	f7f4 fbf2 	bl	800e8f4 <mbedtls_oid_get_sig_alg>
 801a110:	6178      	str	r0, [r7, #20]
 801a112:	697b      	ldr	r3, [r7, #20]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d003      	beq.n	801a120 <mbedtls_x509_get_sig_alg+0x34>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 801a118:	697b      	ldr	r3, [r7, #20]
 801a11a:	f5a3 5318 	sub.w	r3, r3, #9728	; 0x2600
 801a11e:	e00e      	b.n	801a13e <mbedtls_x509_get_sig_alg+0x52>
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	2b05      	cmp	r3, #5
 801a126:	d003      	beq.n	801a130 <mbedtls_x509_get_sig_alg+0x44>
 801a128:	68bb      	ldr	r3, [r7, #8]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d103      	bne.n	801a138 <mbedtls_x509_get_sig_alg+0x4c>
              sig_params->len != 0 )
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	685b      	ldr	r3, [r3, #4]
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 801a134:	2b00      	cmp	r3, #0
 801a136:	d001      	beq.n	801a13c <mbedtls_x509_get_sig_alg+0x50>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801a138:	4b04      	ldr	r3, [pc, #16]	; (801a14c <mbedtls_x509_get_sig_alg+0x60>)
 801a13a:	e000      	b.n	801a13e <mbedtls_x509_get_sig_alg+0x52>
    }

    return( 0 );
 801a13c:	2300      	movs	r3, #0
}
 801a13e:	4618      	mov	r0, r3
 801a140:	3718      	adds	r7, #24
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}
 801a146:	bf00      	nop
 801a148:	ffffd800 	.word	0xffffd800
 801a14c:	ffffdd00 	.word	0xffffdd00

0801a150 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b086      	sub	sp, #24
 801a154:	af00      	add	r7, sp, #0
 801a156:	60f8      	str	r0, [r7, #12]
 801a158:	60b9      	str	r1, [r7, #8]
 801a15a:	607a      	str	r2, [r7, #4]
 801a15c:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( *p == end )
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	68ba      	ldr	r2, [r7, #8]
 801a164:	429a      	cmp	r2, r3
 801a166:	d101      	bne.n	801a16c <mbedtls_x509_get_ext+0x1c>
        return( 0 );
 801a168:	2300      	movs	r3, #0
 801a16a:	e037      	b.n	801a1dc <mbedtls_x509_get_ext+0x8c>

    ext->tag = **p;
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	781b      	ldrb	r3, [r3, #0]
 801a172:	461a      	mov	r2, r3
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	1d1a      	adds	r2, r3, #4
 801a17c:	683b      	ldr	r3, [r7, #0]
 801a17e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 801a182:	68b9      	ldr	r1, [r7, #8]
 801a184:	68f8      	ldr	r0, [r7, #12]
 801a186:	f7ec f985 	bl	8006494 <mbedtls_asn1_get_tag>
 801a18a:	6178      	str	r0, [r7, #20]
 801a18c:	697b      	ldr	r3, [r7, #20]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d001      	beq.n	801a196 <mbedtls_x509_get_ext+0x46>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );
 801a192:	697b      	ldr	r3, [r7, #20]
 801a194:	e022      	b.n	801a1dc <mbedtls_x509_get_ext+0x8c>

    ext->p = *p;
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	681a      	ldr	r2, [r3, #0]
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	609a      	str	r2, [r3, #8]
    end = *p + ext->len;
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	681a      	ldr	r2, [r3, #0]
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	685b      	ldr	r3, [r3, #4]
 801a1a6:	4413      	add	r3, r2
 801a1a8:	60bb      	str	r3, [r7, #8]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a1aa:	f107 0210 	add.w	r2, r7, #16
 801a1ae:	2330      	movs	r3, #48	; 0x30
 801a1b0:	68b9      	ldr	r1, [r7, #8]
 801a1b2:	68f8      	ldr	r0, [r7, #12]
 801a1b4:	f7ec f96e 	bl	8006494 <mbedtls_asn1_get_tag>
 801a1b8:	6178      	str	r0, [r7, #20]
 801a1ba:	697b      	ldr	r3, [r7, #20]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d003      	beq.n	801a1c8 <mbedtls_x509_get_ext+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a1c0:	697b      	ldr	r3, [r7, #20]
 801a1c2:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a1c6:	e009      	b.n	801a1dc <mbedtls_x509_get_ext+0x8c>

    if( end != *p + len )
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	681a      	ldr	r2, [r3, #0]
 801a1cc:	693b      	ldr	r3, [r7, #16]
 801a1ce:	4413      	add	r3, r2
 801a1d0:	68ba      	ldr	r2, [r7, #8]
 801a1d2:	429a      	cmp	r2, r3
 801a1d4:	d001      	beq.n	801a1da <mbedtls_x509_get_ext+0x8a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a1d6:	4b03      	ldr	r3, [pc, #12]	; (801a1e4 <mbedtls_x509_get_ext+0x94>)
 801a1d8:	e000      	b.n	801a1dc <mbedtls_x509_get_ext+0x8c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801a1da:	2300      	movs	r3, #0
}
 801a1dc:	4618      	mov	r0, r3
 801a1de:	3718      	adds	r7, #24
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	ffffda9a 	.word	0xffffda9a

0801a1e8 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b0cc      	sub	sp, #304	; 0x130
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a1f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801a1f6:	6018      	str	r0, [r3, #0]
 801a1f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a1fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801a200:	6019      	str	r1, [r3, #0]
 801a202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a20a:	601a      	str	r2, [r3, #0]
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 801a20c:	2300      	movs	r3, #0
 801a20e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 801a212:	2300      	movs	r3, #0
 801a214:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 801a218:	f107 0310 	add.w	r3, r7, #16
 801a21c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a220:	2100      	movs	r1, #0
 801a222:	4618      	mov	r0, r3
 801a224:	f003 ff3a 	bl	801e09c <memset>

    name = dn;
 801a228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a22c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    p = buf;
 801a236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a23a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    n = size;
 801a244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a248:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    while( name != NULL )
 801a252:	e0f5      	b.n	801a440 <mbedtls_x509_dn_gets+0x258>
    {
        if( !name->oid.p )
 801a254:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a258:	689b      	ldr	r3, [r3, #8]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d105      	bne.n	801a26a <mbedtls_x509_dn_gets+0x82>
        {
            name = name->next;
 801a25e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a262:	699b      	ldr	r3, [r3, #24]
 801a264:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            continue;
 801a268:	e0ea      	b.n	801a440 <mbedtls_x509_dn_gets+0x258>
        }

        if( name != dn )
 801a26a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a26e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a272:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	429a      	cmp	r2, r3
 801a27a:	d029      	beq.n	801a2d0 <mbedtls_x509_dn_gets+0xe8>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 801a27c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 801a280:	2b00      	cmp	r3, #0
 801a282:	d001      	beq.n	801a288 <mbedtls_x509_dn_gets+0xa0>
 801a284:	4b77      	ldr	r3, [pc, #476]	; (801a464 <mbedtls_x509_dn_gets+0x27c>)
 801a286:	e000      	b.n	801a28a <mbedtls_x509_dn_gets+0xa2>
 801a288:	4b77      	ldr	r3, [pc, #476]	; (801a468 <mbedtls_x509_dn_gets+0x280>)
 801a28a:	461a      	mov	r2, r3
 801a28c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801a290:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801a294:	f004 f90a 	bl	801e4ac <sniprintf>
 801a298:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
            MBEDTLS_X509_SAFE_SNPRINTF;
 801a29c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	db05      	blt.n	801a2b0 <mbedtls_x509_dn_gets+0xc8>
 801a2a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a2a8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a2ac:	429a      	cmp	r2, r3
 801a2ae:	d801      	bhi.n	801a2b4 <mbedtls_x509_dn_gets+0xcc>
 801a2b0:	4b6e      	ldr	r3, [pc, #440]	; (801a46c <mbedtls_x509_dn_gets+0x284>)
 801a2b2:	e0d2      	b.n	801a45a <mbedtls_x509_dn_gets+0x272>
 801a2b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a2b8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a2bc:	1ad3      	subs	r3, r2, r3
 801a2be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a2c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a2c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801a2ca:	4413      	add	r3, r2
 801a2cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 801a2d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a2d4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801a2d8:	4611      	mov	r1, r2
 801a2da:	4618      	mov	r0, r3
 801a2dc:	f7f4 fa0e 	bl	800e6fc <mbedtls_oid_get_attr_short_name>
 801a2e0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

        if( ret == 0 )
 801a2e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d10b      	bne.n	801a304 <mbedtls_x509_dn_gets+0x11c>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 801a2ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a2f0:	4a5f      	ldr	r2, [pc, #380]	; (801a470 <mbedtls_x509_dn_gets+0x288>)
 801a2f2:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801a2f6:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801a2fa:	f004 f8d7 	bl	801e4ac <sniprintf>
 801a2fe:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 801a302:	e008      	b.n	801a316 <mbedtls_x509_dn_gets+0x12e>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 801a304:	4a5b      	ldr	r2, [pc, #364]	; (801a474 <mbedtls_x509_dn_gets+0x28c>)
 801a306:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801a30a:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801a30e:	f004 f8cd 	bl	801e4ac <sniprintf>
 801a312:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
        MBEDTLS_X509_SAFE_SNPRINTF;
 801a316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	db05      	blt.n	801a32a <mbedtls_x509_dn_gets+0x142>
 801a31e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a322:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a326:	429a      	cmp	r2, r3
 801a328:	d801      	bhi.n	801a32e <mbedtls_x509_dn_gets+0x146>
 801a32a:	4b50      	ldr	r3, [pc, #320]	; (801a46c <mbedtls_x509_dn_gets+0x284>)
 801a32c:	e095      	b.n	801a45a <mbedtls_x509_dn_gets+0x272>
 801a32e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a332:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a336:	1ad3      	subs	r3, r2, r3
 801a338:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a33c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a340:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801a344:	4413      	add	r3, r2
 801a346:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

        for( i = 0; i < name->val.len; i++ )
 801a34a:	2300      	movs	r3, #0
 801a34c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a350:	e035      	b.n	801a3be <mbedtls_x509_dn_gets+0x1d6>
        {
            if( i >= sizeof( s ) - 1 )
 801a352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a356:	2bfe      	cmp	r3, #254	; 0xfe
 801a358:	d839      	bhi.n	801a3ce <mbedtls_x509_dn_gets+0x1e6>
                break;

            c = name->val.p[i];
 801a35a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a35e:	695a      	ldr	r2, [r3, #20]
 801a360:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a364:	4413      	add	r3, r2
 801a366:	781b      	ldrb	r3, [r3, #0]
 801a368:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 801a36c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a370:	2b1f      	cmp	r3, #31
 801a372:	d90b      	bls.n	801a38c <mbedtls_x509_dn_gets+0x1a4>
 801a374:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a378:	2b7f      	cmp	r3, #127	; 0x7f
 801a37a:	d007      	beq.n	801a38c <mbedtls_x509_dn_gets+0x1a4>
 801a37c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a380:	2b80      	cmp	r3, #128	; 0x80
 801a382:	d90d      	bls.n	801a3a0 <mbedtls_x509_dn_gets+0x1b8>
 801a384:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a388:	2b9f      	cmp	r3, #159	; 0x9f
 801a38a:	d809      	bhi.n	801a3a0 <mbedtls_x509_dn_gets+0x1b8>
                 s[i] = '?';
 801a38c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a390:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801a394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a398:	4413      	add	r3, r2
 801a39a:	223f      	movs	r2, #63	; 0x3f
 801a39c:	701a      	strb	r2, [r3, #0]
 801a39e:	e009      	b.n	801a3b4 <mbedtls_x509_dn_gets+0x1cc>
            else s[i] = c;
 801a3a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a3a4:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801a3a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a3ac:	4413      	add	r3, r2
 801a3ae:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 801a3b2:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < name->val.len; i++ )
 801a3b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a3b8:	3301      	adds	r3, #1
 801a3ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a3be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a3c2:	691b      	ldr	r3, [r3, #16]
 801a3c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801a3c8:	429a      	cmp	r2, r3
 801a3ca:	d3c2      	bcc.n	801a352 <mbedtls_x509_dn_gets+0x16a>
 801a3cc:	e000      	b.n	801a3d0 <mbedtls_x509_dn_gets+0x1e8>
                break;
 801a3ce:	bf00      	nop
        }
        s[i] = '\0';
 801a3d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a3d4:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801a3d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a3dc:	4413      	add	r3, r2
 801a3de:	2200      	movs	r2, #0
 801a3e0:	701a      	strb	r2, [r3, #0]
        ret = mbedtls_snprintf( p, n, "%s", s );
 801a3e2:	f107 0310 	add.w	r3, r7, #16
 801a3e6:	4a24      	ldr	r2, [pc, #144]	; (801a478 <mbedtls_x509_dn_gets+0x290>)
 801a3e8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801a3ec:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801a3f0:	f004 f85c 	bl	801e4ac <sniprintf>
 801a3f4:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
        MBEDTLS_X509_SAFE_SNPRINTF;
 801a3f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	db05      	blt.n	801a40c <mbedtls_x509_dn_gets+0x224>
 801a400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a404:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a408:	429a      	cmp	r2, r3
 801a40a:	d801      	bhi.n	801a410 <mbedtls_x509_dn_gets+0x228>
 801a40c:	4b17      	ldr	r3, [pc, #92]	; (801a46c <mbedtls_x509_dn_gets+0x284>)
 801a40e:	e024      	b.n	801a45a <mbedtls_x509_dn_gets+0x272>
 801a410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a414:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a418:	1ad3      	subs	r3, r2, r3
 801a41a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a41e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a422:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801a426:	4413      	add	r3, r2
 801a428:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

        merge = name->next_merged;
 801a42c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a430:	7f1b      	ldrb	r3, [r3, #28]
 801a432:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        name = name->next;
 801a436:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a43a:	699b      	ldr	r3, [r3, #24]
 801a43c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    while( name != NULL )
 801a440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a444:	2b00      	cmp	r3, #0
 801a446:	f47f af05 	bne.w	801a254 <mbedtls_x509_dn_gets+0x6c>
    }

    return( (int) ( size - n ) );
 801a44a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a44e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801a452:	681a      	ldr	r2, [r3, #0]
 801a454:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801a458:	1ad3      	subs	r3, r2, r3
}
 801a45a:	4618      	mov	r0, r3
 801a45c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}
 801a464:	08023c88 	.word	0x08023c88
 801a468:	08023c8c 	.word	0x08023c8c
 801a46c:	ffffd680 	.word	0xffffd680
 801a470:	08023c90 	.word	0x08023c90
 801a474:	08023c94 	.word	0x08023c94
 801a478:	08023c98 	.word	0x08023c98

0801a47c <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b08c      	sub	sp, #48	; 0x30
 801a480:	af02      	add	r7, sp, #8
 801a482:	60f8      	str	r0, [r7, #12]
 801a484:	60b9      	str	r1, [r7, #8]
 801a486:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	61fb      	str	r3, [r7, #28]
    n = size;
 801a48c:	68bb      	ldr	r3, [r7, #8]
 801a48e:	623b      	str	r3, [r7, #32]

    nr = ( serial->len <= 32 )
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	685b      	ldr	r3, [r3, #4]
        ? serial->len  : 28;
 801a494:	2b20      	cmp	r3, #32
 801a496:	d802      	bhi.n	801a49e <mbedtls_x509_serial_gets+0x22>
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	685b      	ldr	r3, [r3, #4]
 801a49c:	e000      	b.n	801a4a0 <mbedtls_x509_serial_gets+0x24>
 801a49e:	231c      	movs	r3, #28
    nr = ( serial->len <= 32 )
 801a4a0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < nr; i++ )
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	627b      	str	r3, [r7, #36]	; 0x24
 801a4a6:	e038      	b.n	801a51a <mbedtls_x509_serial_gets+0x9e>
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 801a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d109      	bne.n	801a4c2 <mbedtls_x509_serial_gets+0x46>
 801a4ae:	69bb      	ldr	r3, [r7, #24]
 801a4b0:	2b01      	cmp	r3, #1
 801a4b2:	d906      	bls.n	801a4c2 <mbedtls_x509_serial_gets+0x46>
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	689a      	ldr	r2, [r3, #8]
 801a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ba:	4413      	add	r3, r2
 801a4bc:	781b      	ldrb	r3, [r3, #0]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d027      	beq.n	801a512 <mbedtls_x509_serial_gets+0x96>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	689a      	ldr	r2, [r3, #8]
 801a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c8:	4413      	add	r3, r2
 801a4ca:	781b      	ldrb	r3, [r3, #0]
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801a4cc:	4619      	mov	r1, r3
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 801a4ce:	69bb      	ldr	r3, [r7, #24]
 801a4d0:	3b01      	subs	r3, #1
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801a4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4d4:	429a      	cmp	r2, r3
 801a4d6:	d201      	bcs.n	801a4dc <mbedtls_x509_serial_gets+0x60>
 801a4d8:	4b23      	ldr	r3, [pc, #140]	; (801a568 <mbedtls_x509_serial_gets+0xec>)
 801a4da:	e000      	b.n	801a4de <mbedtls_x509_serial_gets+0x62>
 801a4dc:	4b23      	ldr	r3, [pc, #140]	; (801a56c <mbedtls_x509_serial_gets+0xf0>)
 801a4de:	9300      	str	r3, [sp, #0]
 801a4e0:	460b      	mov	r3, r1
 801a4e2:	4a23      	ldr	r2, [pc, #140]	; (801a570 <mbedtls_x509_serial_gets+0xf4>)
 801a4e4:	6a39      	ldr	r1, [r7, #32]
 801a4e6:	69f8      	ldr	r0, [r7, #28]
 801a4e8:	f003 ffe0 	bl	801e4ac <sniprintf>
 801a4ec:	6178      	str	r0, [r7, #20]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801a4ee:	697b      	ldr	r3, [r7, #20]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	db03      	blt.n	801a4fc <mbedtls_x509_serial_gets+0x80>
 801a4f4:	697b      	ldr	r3, [r7, #20]
 801a4f6:	6a3a      	ldr	r2, [r7, #32]
 801a4f8:	429a      	cmp	r2, r3
 801a4fa:	d801      	bhi.n	801a500 <mbedtls_x509_serial_gets+0x84>
 801a4fc:	4b1d      	ldr	r3, [pc, #116]	; (801a574 <mbedtls_x509_serial_gets+0xf8>)
 801a4fe:	e02f      	b.n	801a560 <mbedtls_x509_serial_gets+0xe4>
 801a500:	697b      	ldr	r3, [r7, #20]
 801a502:	6a3a      	ldr	r2, [r7, #32]
 801a504:	1ad3      	subs	r3, r2, r3
 801a506:	623b      	str	r3, [r7, #32]
 801a508:	697b      	ldr	r3, [r7, #20]
 801a50a:	69fa      	ldr	r2, [r7, #28]
 801a50c:	4413      	add	r3, r2
 801a50e:	61fb      	str	r3, [r7, #28]
 801a510:	e000      	b.n	801a514 <mbedtls_x509_serial_gets+0x98>
            continue;
 801a512:	bf00      	nop
    for( i = 0; i < nr; i++ )
 801a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a516:	3301      	adds	r3, #1
 801a518:	627b      	str	r3, [r7, #36]	; 0x24
 801a51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a51c:	69bb      	ldr	r3, [r7, #24]
 801a51e:	429a      	cmp	r2, r3
 801a520:	d3c2      	bcc.n	801a4a8 <mbedtls_x509_serial_gets+0x2c>
    }

    if( nr != serial->len )
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	685b      	ldr	r3, [r3, #4]
 801a526:	69ba      	ldr	r2, [r7, #24]
 801a528:	429a      	cmp	r2, r3
 801a52a:	d016      	beq.n	801a55a <mbedtls_x509_serial_gets+0xde>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 801a52c:	4a12      	ldr	r2, [pc, #72]	; (801a578 <mbedtls_x509_serial_gets+0xfc>)
 801a52e:	6a39      	ldr	r1, [r7, #32]
 801a530:	69f8      	ldr	r0, [r7, #28]
 801a532:	f003 ffbb 	bl	801e4ac <sniprintf>
 801a536:	6178      	str	r0, [r7, #20]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801a538:	697b      	ldr	r3, [r7, #20]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	db03      	blt.n	801a546 <mbedtls_x509_serial_gets+0xca>
 801a53e:	697b      	ldr	r3, [r7, #20]
 801a540:	6a3a      	ldr	r2, [r7, #32]
 801a542:	429a      	cmp	r2, r3
 801a544:	d801      	bhi.n	801a54a <mbedtls_x509_serial_gets+0xce>
 801a546:	4b0b      	ldr	r3, [pc, #44]	; (801a574 <mbedtls_x509_serial_gets+0xf8>)
 801a548:	e00a      	b.n	801a560 <mbedtls_x509_serial_gets+0xe4>
 801a54a:	697b      	ldr	r3, [r7, #20]
 801a54c:	6a3a      	ldr	r2, [r7, #32]
 801a54e:	1ad3      	subs	r3, r2, r3
 801a550:	623b      	str	r3, [r7, #32]
 801a552:	697b      	ldr	r3, [r7, #20]
 801a554:	69fa      	ldr	r2, [r7, #28]
 801a556:	4413      	add	r3, r2
 801a558:	61fb      	str	r3, [r7, #28]
    }

    return( (int) ( size - n ) );
 801a55a:	68ba      	ldr	r2, [r7, #8]
 801a55c:	6a3b      	ldr	r3, [r7, #32]
 801a55e:	1ad3      	subs	r3, r2, r3
}
 801a560:	4618      	mov	r0, r3
 801a562:	3728      	adds	r7, #40	; 0x28
 801a564:	46bd      	mov	sp, r7
 801a566:	bd80      	pop	{r7, pc}
 801a568:	08023c9c 	.word	0x08023c9c
 801a56c:	08023ca0 	.word	0x08023ca0
 801a570:	08023ca4 	.word	0x08023ca4
 801a574:	ffffd680 	.word	0xffffd680
 801a578:	08023cac 	.word	0x08023cac

0801a57c <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b088      	sub	sp, #32
 801a580:	af00      	add	r7, sp, #0
 801a582:	60f8      	str	r0, [r7, #12]
 801a584:	60b9      	str	r1, [r7, #8]
 801a586:	607a      	str	r2, [r7, #4]
 801a588:	70fb      	strb	r3, [r7, #3]
    int ret;
    char *p = buf;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	61bb      	str	r3, [r7, #24]
    size_t n = size;
 801a58e:	68bb      	ldr	r3, [r7, #8]
 801a590:	617b      	str	r3, [r7, #20]
    const char *desc = NULL;
 801a592:	2300      	movs	r3, #0
 801a594:	613b      	str	r3, [r7, #16]

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801a596:	f107 0310 	add.w	r3, r7, #16
 801a59a:	4619      	mov	r1, r3
 801a59c:	6878      	ldr	r0, [r7, #4]
 801a59e:	f7f4 f991 	bl	800e8c4 <mbedtls_oid_get_sig_alg_desc>
 801a5a2:	61f8      	str	r0, [r7, #28]
    if( ret != 0 )
 801a5a4:	69fb      	ldr	r3, [r7, #28]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d006      	beq.n	801a5b8 <mbedtls_x509_sig_alg_gets+0x3c>
        ret = mbedtls_snprintf( p, n, "???"  );
 801a5aa:	4a13      	ldr	r2, [pc, #76]	; (801a5f8 <mbedtls_x509_sig_alg_gets+0x7c>)
 801a5ac:	6979      	ldr	r1, [r7, #20]
 801a5ae:	69b8      	ldr	r0, [r7, #24]
 801a5b0:	f003 ff7c 	bl	801e4ac <sniprintf>
 801a5b4:	61f8      	str	r0, [r7, #28]
 801a5b6:	e006      	b.n	801a5c6 <mbedtls_x509_sig_alg_gets+0x4a>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 801a5b8:	693b      	ldr	r3, [r7, #16]
 801a5ba:	4a10      	ldr	r2, [pc, #64]	; (801a5fc <mbedtls_x509_sig_alg_gets+0x80>)
 801a5bc:	6979      	ldr	r1, [r7, #20]
 801a5be:	69b8      	ldr	r0, [r7, #24]
 801a5c0:	f003 ff74 	bl	801e4ac <sniprintf>
 801a5c4:	61f8      	str	r0, [r7, #28]
    MBEDTLS_X509_SAFE_SNPRINTF;
 801a5c6:	69fb      	ldr	r3, [r7, #28]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	db03      	blt.n	801a5d4 <mbedtls_x509_sig_alg_gets+0x58>
 801a5cc:	69fb      	ldr	r3, [r7, #28]
 801a5ce:	697a      	ldr	r2, [r7, #20]
 801a5d0:	429a      	cmp	r2, r3
 801a5d2:	d801      	bhi.n	801a5d8 <mbedtls_x509_sig_alg_gets+0x5c>
 801a5d4:	4b0a      	ldr	r3, [pc, #40]	; (801a600 <mbedtls_x509_sig_alg_gets+0x84>)
 801a5d6:	e00a      	b.n	801a5ee <mbedtls_x509_sig_alg_gets+0x72>
 801a5d8:	69fb      	ldr	r3, [r7, #28]
 801a5da:	697a      	ldr	r2, [r7, #20]
 801a5dc:	1ad3      	subs	r3, r2, r3
 801a5de:	617b      	str	r3, [r7, #20]
 801a5e0:	69fb      	ldr	r3, [r7, #28]
 801a5e2:	69ba      	ldr	r2, [r7, #24]
 801a5e4:	4413      	add	r3, r2
 801a5e6:	61bb      	str	r3, [r7, #24]
    ((void) pk_alg);
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
 801a5e8:	68ba      	ldr	r2, [r7, #8]
 801a5ea:	697b      	ldr	r3, [r7, #20]
 801a5ec:	1ad3      	subs	r3, r2, r3
}
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	3720      	adds	r7, #32
 801a5f2:	46bd      	mov	sp, r7
 801a5f4:	bd80      	pop	{r7, pc}
 801a5f6:	bf00      	nop
 801a5f8:	08023cb4 	.word	0x08023cb4
 801a5fc:	08023c98 	.word	0x08023c98
 801a600:	ffffd680 	.word	0xffffd680

0801a604 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 801a604:	b580      	push	{r7, lr}
 801a606:	b088      	sub	sp, #32
 801a608:	af00      	add	r7, sp, #0
 801a60a:	60f8      	str	r0, [r7, #12]
 801a60c:	60b9      	str	r1, [r7, #8]
 801a60e:	607a      	str	r2, [r7, #4]
    char *p = buf;
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	61fb      	str	r3, [r7, #28]
    size_t n = buf_size;
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	61bb      	str	r3, [r7, #24]
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	4a0e      	ldr	r2, [pc, #56]	; (801a654 <mbedtls_x509_key_size_helper+0x50>)
 801a61c:	69b9      	ldr	r1, [r7, #24]
 801a61e:	69f8      	ldr	r0, [r7, #28]
 801a620:	f003 ff44 	bl	801e4ac <sniprintf>
 801a624:	6178      	str	r0, [r7, #20]
    MBEDTLS_X509_SAFE_SNPRINTF;
 801a626:	697b      	ldr	r3, [r7, #20]
 801a628:	2b00      	cmp	r3, #0
 801a62a:	db03      	blt.n	801a634 <mbedtls_x509_key_size_helper+0x30>
 801a62c:	697b      	ldr	r3, [r7, #20]
 801a62e:	69ba      	ldr	r2, [r7, #24]
 801a630:	429a      	cmp	r2, r3
 801a632:	d801      	bhi.n	801a638 <mbedtls_x509_key_size_helper+0x34>
 801a634:	4b08      	ldr	r3, [pc, #32]	; (801a658 <mbedtls_x509_key_size_helper+0x54>)
 801a636:	e008      	b.n	801a64a <mbedtls_x509_key_size_helper+0x46>
 801a638:	697b      	ldr	r3, [r7, #20]
 801a63a:	69ba      	ldr	r2, [r7, #24]
 801a63c:	1ad3      	subs	r3, r2, r3
 801a63e:	61bb      	str	r3, [r7, #24]
 801a640:	697b      	ldr	r3, [r7, #20]
 801a642:	69fa      	ldr	r2, [r7, #28]
 801a644:	4413      	add	r3, r2
 801a646:	61fb      	str	r3, [r7, #28]

    return( 0 );
 801a648:	2300      	movs	r3, #0
}
 801a64a:	4618      	mov	r0, r3
 801a64c:	3720      	adds	r7, #32
 801a64e:	46bd      	mov	sp, r7
 801a650:	bd80      	pop	{r7, pc}
 801a652:	bf00      	nop
 801a654:	08023cb8 	.word	0x08023cb8
 801a658:	ffffd680 	.word	0xffffd680

0801a65c <mbedtls_x509_time_is_past>:
}

#else  /* MBEDTLS_HAVE_TIME_DATE */

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
 801a65c:	b480      	push	{r7}
 801a65e:	b083      	sub	sp, #12
 801a660:	af00      	add	r7, sp, #0
 801a662:	6078      	str	r0, [r7, #4]
    ((void) to);
    return( 0 );
 801a664:	2300      	movs	r3, #0
}
 801a666:	4618      	mov	r0, r3
 801a668:	370c      	adds	r7, #12
 801a66a:	46bd      	mov	sp, r7
 801a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a670:	4770      	bx	lr

0801a672 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
 801a672:	b480      	push	{r7}
 801a674:	b083      	sub	sp, #12
 801a676:	af00      	add	r7, sp, #0
 801a678:	6078      	str	r0, [r7, #4]
    ((void) from);
    return( 0 );
 801a67a:	2300      	movs	r3, #0
}
 801a67c:	4618      	mov	r0, r3
 801a67e:	370c      	adds	r7, #12
 801a680:	46bd      	mov	sp, r7
 801a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a686:	4770      	bx	lr

0801a688 <mbedtls_zeroize>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 801a688:	b480      	push	{r7}
 801a68a:	b085      	sub	sp, #20
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
 801a690:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	60fb      	str	r3, [r7, #12]
 801a696:	e004      	b.n	801a6a2 <mbedtls_zeroize+0x1a>
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	1c5a      	adds	r2, r3, #1
 801a69c:	60fa      	str	r2, [r7, #12]
 801a69e:	2200      	movs	r2, #0
 801a6a0:	701a      	strb	r2, [r3, #0]
 801a6a2:	683b      	ldr	r3, [r7, #0]
 801a6a4:	1e5a      	subs	r2, r3, #1
 801a6a6:	603a      	str	r2, [r7, #0]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d1f5      	bne.n	801a698 <mbedtls_zeroize+0x10>
}
 801a6ac:	bf00      	nop
 801a6ae:	bf00      	nop
 801a6b0:	3714      	adds	r7, #20
 801a6b2:	46bd      	mov	sp, r7
 801a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b8:	4770      	bx	lr

0801a6ba <x509_profile_check_md_alg>:
 * Check md_alg against profile
 * Return 0 if md_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_md_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_md_type_t md_alg )
{
 801a6ba:	b480      	push	{r7}
 801a6bc:	b083      	sub	sp, #12
 801a6be:	af00      	add	r7, sp, #0
 801a6c0:	6078      	str	r0, [r7, #4]
 801a6c2:	460b      	mov	r3, r1
 801a6c4:	70fb      	strb	r3, [r7, #3]
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	78fa      	ldrb	r2, [r7, #3]
 801a6cc:	3a01      	subs	r2, #1
 801a6ce:	2101      	movs	r1, #1
 801a6d0:	fa01 f202 	lsl.w	r2, r1, r2
 801a6d4:	4013      	ands	r3, r2
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d001      	beq.n	801a6de <x509_profile_check_md_alg+0x24>
        return( 0 );
 801a6da:	2300      	movs	r3, #0
 801a6dc:	e001      	b.n	801a6e2 <x509_profile_check_md_alg+0x28>

    return( -1 );
 801a6de:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	370c      	adds	r7, #12
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ec:	4770      	bx	lr

0801a6ee <x509_profile_check_pk_alg>:
 * Check pk_alg against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
 801a6ee:	b480      	push	{r7}
 801a6f0:	b083      	sub	sp, #12
 801a6f2:	af00      	add	r7, sp, #0
 801a6f4:	6078      	str	r0, [r7, #4]
 801a6f6:	460b      	mov	r3, r1
 801a6f8:	70fb      	strb	r3, [r7, #3]
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	685b      	ldr	r3, [r3, #4]
 801a6fe:	78fa      	ldrb	r2, [r7, #3]
 801a700:	3a01      	subs	r2, #1
 801a702:	2101      	movs	r1, #1
 801a704:	fa01 f202 	lsl.w	r2, r1, r2
 801a708:	4013      	ands	r3, r2
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d001      	beq.n	801a712 <x509_profile_check_pk_alg+0x24>
        return( 0 );
 801a70e:	2300      	movs	r3, #0
 801a710:	e001      	b.n	801a716 <x509_profile_check_pk_alg+0x28>

    return( -1 );
 801a712:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a716:	4618      	mov	r0, r3
 801a718:	370c      	adds	r7, #12
 801a71a:	46bd      	mov	sp, r7
 801a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a720:	4770      	bx	lr

0801a722 <x509_profile_check_key>:
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
 801a722:	b580      	push	{r7, lr}
 801a724:	b084      	sub	sp, #16
 801a726:	af00      	add	r7, sp, #0
 801a728:	60f8      	str	r0, [r7, #12]
 801a72a:	460b      	mov	r3, r1
 801a72c:	607a      	str	r2, [r7, #4]
 801a72e:	72fb      	strb	r3, [r7, #11]
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801a730:	7afb      	ldrb	r3, [r7, #11]
 801a732:	2b01      	cmp	r3, #1
 801a734:	d002      	beq.n	801a73c <x509_profile_check_key+0x1a>
 801a736:	7afb      	ldrb	r3, [r7, #11]
 801a738:	2b06      	cmp	r3, #6
 801a73a:	d10c      	bne.n	801a756 <x509_profile_check_key+0x34>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 801a73c:	6878      	ldr	r0, [r7, #4]
 801a73e:	f7f4 fc25 	bl	800ef8c <mbedtls_pk_get_bitlen>
 801a742:	4602      	mov	r2, r0
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	68db      	ldr	r3, [r3, #12]
 801a748:	429a      	cmp	r2, r3
 801a74a:	d301      	bcc.n	801a750 <x509_profile_check_key+0x2e>
            return( 0 );
 801a74c:	2300      	movs	r3, #0
 801a74e:	e004      	b.n	801a75a <x509_profile_check_key+0x38>

        return( -1 );
 801a750:	f04f 33ff 	mov.w	r3, #4294967295
 801a754:	e001      	b.n	801a75a <x509_profile_check_key+0x38>

        return( -1 );
    }
#endif

    return( -1 );
 801a756:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a75a:	4618      	mov	r0, r3
 801a75c:	3710      	adds	r7, #16
 801a75e:	46bd      	mov	sp, r7
 801a760:	bd80      	pop	{r7, pc}
	...

0801a764 <x509_get_version>:
 *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
 */
static int x509_get_version( unsigned char **p,
                             const unsigned char *end,
                             int *ver )
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b086      	sub	sp, #24
 801a768:	af00      	add	r7, sp, #0
 801a76a:	60f8      	str	r0, [r7, #12]
 801a76c:	60b9      	str	r1, [r7, #8]
 801a76e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a770:	f107 0210 	add.w	r2, r7, #16
 801a774:	23a0      	movs	r3, #160	; 0xa0
 801a776:	68b9      	ldr	r1, [r7, #8]
 801a778:	68f8      	ldr	r0, [r7, #12]
 801a77a:	f7eb fe8b 	bl	8006494 <mbedtls_asn1_get_tag>
 801a77e:	6178      	str	r0, [r7, #20]
 801a780:	697b      	ldr	r3, [r7, #20]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d00a      	beq.n	801a79c <x509_get_version+0x38>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801a786:	697b      	ldr	r3, [r7, #20]
 801a788:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801a78c:	d104      	bne.n	801a798 <x509_get_version+0x34>
        {
            *ver = 0;
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	2200      	movs	r2, #0
 801a792:	601a      	str	r2, [r3, #0]
            return( 0 );
 801a794:	2300      	movs	r3, #0
 801a796:	e01b      	b.n	801a7d0 <x509_get_version+0x6c>
        }

        return( ret );
 801a798:	697b      	ldr	r3, [r7, #20]
 801a79a:	e019      	b.n	801a7d0 <x509_get_version+0x6c>
    }

    end = *p + len;
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	681a      	ldr	r2, [r3, #0]
 801a7a0:	693b      	ldr	r3, [r7, #16]
 801a7a2:	4413      	add	r3, r2
 801a7a4:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 801a7a6:	687a      	ldr	r2, [r7, #4]
 801a7a8:	68b9      	ldr	r1, [r7, #8]
 801a7aa:	68f8      	ldr	r0, [r7, #12]
 801a7ac:	f7eb fec9 	bl	8006542 <mbedtls_asn1_get_int>
 801a7b0:	6178      	str	r0, [r7, #20]
 801a7b2:	697b      	ldr	r3, [r7, #20]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d003      	beq.n	801a7c0 <x509_get_version+0x5c>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 801a7b8:	697b      	ldr	r3, [r7, #20]
 801a7ba:	f5a3 5308 	sub.w	r3, r3, #8704	; 0x2200
 801a7be:	e007      	b.n	801a7d0 <x509_get_version+0x6c>

    if( *p != end )
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	68ba      	ldr	r2, [r7, #8]
 801a7c6:	429a      	cmp	r2, r3
 801a7c8:	d001      	beq.n	801a7ce <x509_get_version+0x6a>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 801a7ca:	4b03      	ldr	r3, [pc, #12]	; (801a7d8 <x509_get_version+0x74>)
 801a7cc:	e000      	b.n	801a7d0 <x509_get_version+0x6c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801a7ce:	2300      	movs	r3, #0
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	3718      	adds	r7, #24
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd80      	pop	{r7, pc}
 801a7d8:	ffffdd9a 	.word	0xffffdd9a

0801a7dc <x509_get_dates>:
 */
static int x509_get_dates( unsigned char **p,
                           const unsigned char *end,
                           mbedtls_x509_time *from,
                           mbedtls_x509_time *to )
{
 801a7dc:	b580      	push	{r7, lr}
 801a7de:	b086      	sub	sp, #24
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	60f8      	str	r0, [r7, #12]
 801a7e4:	60b9      	str	r1, [r7, #8]
 801a7e6:	607a      	str	r2, [r7, #4]
 801a7e8:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a7ea:	f107 0210 	add.w	r2, r7, #16
 801a7ee:	2330      	movs	r3, #48	; 0x30
 801a7f0:	68b9      	ldr	r1, [r7, #8]
 801a7f2:	68f8      	ldr	r0, [r7, #12]
 801a7f4:	f7eb fe4e 	bl	8006494 <mbedtls_asn1_get_tag>
 801a7f8:	6178      	str	r0, [r7, #20]
 801a7fa:	697b      	ldr	r3, [r7, #20]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d003      	beq.n	801a808 <x509_get_dates+0x2c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 801a800:	697b      	ldr	r3, [r7, #20]
 801a802:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 801a806:	e022      	b.n	801a84e <x509_get_dates+0x72>

    end = *p + len;
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	681a      	ldr	r2, [r3, #0]
 801a80c:	693b      	ldr	r3, [r7, #16]
 801a80e:	4413      	add	r3, r2
 801a810:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 801a812:	687a      	ldr	r2, [r7, #4]
 801a814:	68b9      	ldr	r1, [r7, #8]
 801a816:	68f8      	ldr	r0, [r7, #12]
 801a818:	f7ff fbec 	bl	8019ff4 <mbedtls_x509_get_time>
 801a81c:	6178      	str	r0, [r7, #20]
 801a81e:	697b      	ldr	r3, [r7, #20]
 801a820:	2b00      	cmp	r3, #0
 801a822:	d001      	beq.n	801a828 <x509_get_dates+0x4c>
        return( ret );
 801a824:	697b      	ldr	r3, [r7, #20]
 801a826:	e012      	b.n	801a84e <x509_get_dates+0x72>

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 801a828:	683a      	ldr	r2, [r7, #0]
 801a82a:	68b9      	ldr	r1, [r7, #8]
 801a82c:	68f8      	ldr	r0, [r7, #12]
 801a82e:	f7ff fbe1 	bl	8019ff4 <mbedtls_x509_get_time>
 801a832:	6178      	str	r0, [r7, #20]
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d001      	beq.n	801a83e <x509_get_dates+0x62>
        return( ret );
 801a83a:	697b      	ldr	r3, [r7, #20]
 801a83c:	e007      	b.n	801a84e <x509_get_dates+0x72>

    if( *p != end )
 801a83e:	68fb      	ldr	r3, [r7, #12]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	68ba      	ldr	r2, [r7, #8]
 801a844:	429a      	cmp	r2, r3
 801a846:	d001      	beq.n	801a84c <x509_get_dates+0x70>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801a848:	4b03      	ldr	r3, [pc, #12]	; (801a858 <x509_get_dates+0x7c>)
 801a84a:	e000      	b.n	801a84e <x509_get_dates+0x72>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801a84c:	2300      	movs	r3, #0
}
 801a84e:	4618      	mov	r0, r3
 801a850:	3718      	adds	r7, #24
 801a852:	46bd      	mov	sp, r7
 801a854:	bd80      	pop	{r7, pc}
 801a856:	bf00      	nop
 801a858:	ffffdb9a 	.word	0xffffdb9a

0801a85c <x509_get_uid>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 801a85c:	b580      	push	{r7, lr}
 801a85e:	b086      	sub	sp, #24
 801a860:	af00      	add	r7, sp, #0
 801a862:	60f8      	str	r0, [r7, #12]
 801a864:	60b9      	str	r1, [r7, #8]
 801a866:	607a      	str	r2, [r7, #4]
 801a868:	603b      	str	r3, [r7, #0]
    int ret;

    if( *p == end )
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	68ba      	ldr	r2, [r7, #8]
 801a870:	429a      	cmp	r2, r3
 801a872:	d101      	bne.n	801a878 <x509_get_uid+0x1c>
        return( 0 );
 801a874:	2300      	movs	r3, #0
 801a876:	e026      	b.n	801a8c6 <x509_get_uid+0x6a>

    uid->tag = **p;
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	781b      	ldrb	r3, [r3, #0]
 801a87e:	461a      	mov	r2, r3
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	1d1a      	adds	r2, r3, #4
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 801a88e:	68b9      	ldr	r1, [r7, #8]
 801a890:	68f8      	ldr	r0, [r7, #12]
 801a892:	f7eb fdff 	bl	8006494 <mbedtls_asn1_get_tag>
 801a896:	6178      	str	r0, [r7, #20]
 801a898:	697b      	ldr	r3, [r7, #20]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d007      	beq.n	801a8ae <x509_get_uid+0x52>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801a89e:	697b      	ldr	r3, [r7, #20]
 801a8a0:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801a8a4:	d101      	bne.n	801a8aa <x509_get_uid+0x4e>
            return( 0 );
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	e00d      	b.n	801a8c6 <x509_get_uid+0x6a>

        return( ret );
 801a8aa:	697b      	ldr	r3, [r7, #20]
 801a8ac:	e00b      	b.n	801a8c6 <x509_get_uid+0x6a>
    }

    uid->p = *p;
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	681a      	ldr	r2, [r3, #0]
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	609a      	str	r2, [r3, #8]
    *p += uid->len;
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	681a      	ldr	r2, [r3, #0]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	685b      	ldr	r3, [r3, #4]
 801a8be:	441a      	add	r2, r3
 801a8c0:	68fb      	ldr	r3, [r7, #12]
 801a8c2:	601a      	str	r2, [r3, #0]

    return( 0 );
 801a8c4:	2300      	movs	r3, #0
}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	3718      	adds	r7, #24
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	bd80      	pop	{r7, pc}
	...

0801a8d0 <x509_get_basic_constraints>:

static int x509_get_basic_constraints( unsigned char **p,
                                       const unsigned char *end,
                                       int *ca_istrue,
                                       int *max_pathlen )
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b086      	sub	sp, #24
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	60f8      	str	r0, [r7, #12]
 801a8d8:	60b9      	str	r1, [r7, #8]
 801a8da:	607a      	str	r2, [r7, #4]
 801a8dc:	603b      	str	r3, [r7, #0]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	601a      	str	r2, [r3, #0]
    *max_pathlen = 0; /* endless */
 801a8e4:	683b      	ldr	r3, [r7, #0]
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a8ea:	f107 0210 	add.w	r2, r7, #16
 801a8ee:	2330      	movs	r3, #48	; 0x30
 801a8f0:	68b9      	ldr	r1, [r7, #8]
 801a8f2:	68f8      	ldr	r0, [r7, #12]
 801a8f4:	f7eb fdce 	bl	8006494 <mbedtls_asn1_get_tag>
 801a8f8:	6178      	str	r0, [r7, #20]
 801a8fa:	697b      	ldr	r3, [r7, #20]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d003      	beq.n	801a908 <x509_get_basic_constraints+0x38>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a900:	697b      	ldr	r3, [r7, #20]
 801a902:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a906:	e048      	b.n	801a99a <x509_get_basic_constraints+0xca>

    if( *p == end )
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	68ba      	ldr	r2, [r7, #8]
 801a90e:	429a      	cmp	r2, r3
 801a910:	d101      	bne.n	801a916 <x509_get_basic_constraints+0x46>
        return( 0 );
 801a912:	2300      	movs	r3, #0
 801a914:	e041      	b.n	801a99a <x509_get_basic_constraints+0xca>

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 801a916:	687a      	ldr	r2, [r7, #4]
 801a918:	68b9      	ldr	r1, [r7, #8]
 801a91a:	68f8      	ldr	r0, [r7, #12]
 801a91c:	f7eb fde3 	bl	80064e6 <mbedtls_asn1_get_bool>
 801a920:	6178      	str	r0, [r7, #20]
 801a922:	697b      	ldr	r3, [r7, #20]
 801a924:	2b00      	cmp	r3, #0
 801a926:	d017      	beq.n	801a958 <x509_get_basic_constraints+0x88>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801a928:	697b      	ldr	r3, [r7, #20]
 801a92a:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801a92e:	d105      	bne.n	801a93c <x509_get_basic_constraints+0x6c>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 801a930:	687a      	ldr	r2, [r7, #4]
 801a932:	68b9      	ldr	r1, [r7, #8]
 801a934:	68f8      	ldr	r0, [r7, #12]
 801a936:	f7eb fe04 	bl	8006542 <mbedtls_asn1_get_int>
 801a93a:	6178      	str	r0, [r7, #20]

        if( ret != 0 )
 801a93c:	697b      	ldr	r3, [r7, #20]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d003      	beq.n	801a94a <x509_get_basic_constraints+0x7a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a942:	697b      	ldr	r3, [r7, #20]
 801a944:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a948:	e027      	b.n	801a99a <x509_get_basic_constraints+0xca>

        if( *ca_istrue != 0 )
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d002      	beq.n	801a958 <x509_get_basic_constraints+0x88>
            *ca_istrue = 1;
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	2201      	movs	r2, #1
 801a956:	601a      	str	r2, [r3, #0]
    }

    if( *p == end )
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	68ba      	ldr	r2, [r7, #8]
 801a95e:	429a      	cmp	r2, r3
 801a960:	d101      	bne.n	801a966 <x509_get_basic_constraints+0x96>
        return( 0 );
 801a962:	2300      	movs	r3, #0
 801a964:	e019      	b.n	801a99a <x509_get_basic_constraints+0xca>

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 801a966:	683a      	ldr	r2, [r7, #0]
 801a968:	68b9      	ldr	r1, [r7, #8]
 801a96a:	68f8      	ldr	r0, [r7, #12]
 801a96c:	f7eb fde9 	bl	8006542 <mbedtls_asn1_get_int>
 801a970:	6178      	str	r0, [r7, #20]
 801a972:	697b      	ldr	r3, [r7, #20]
 801a974:	2b00      	cmp	r3, #0
 801a976:	d003      	beq.n	801a980 <x509_get_basic_constraints+0xb0>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a978:	697b      	ldr	r3, [r7, #20]
 801a97a:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a97e:	e00c      	b.n	801a99a <x509_get_basic_constraints+0xca>

    if( *p != end )
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	68ba      	ldr	r2, [r7, #8]
 801a986:	429a      	cmp	r2, r3
 801a988:	d001      	beq.n	801a98e <x509_get_basic_constraints+0xbe>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a98a:	4b06      	ldr	r3, [pc, #24]	; (801a9a4 <x509_get_basic_constraints+0xd4>)
 801a98c:	e005      	b.n	801a99a <x509_get_basic_constraints+0xca>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 801a98e:	683b      	ldr	r3, [r7, #0]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	1c5a      	adds	r2, r3, #1
 801a994:	683b      	ldr	r3, [r7, #0]
 801a996:	601a      	str	r2, [r3, #0]

    return( 0 );
 801a998:	2300      	movs	r3, #0
}
 801a99a:	4618      	mov	r0, r3
 801a99c:	3718      	adds	r7, #24
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	bd80      	pop	{r7, pc}
 801a9a2:	bf00      	nop
 801a9a4:	ffffda9a 	.word	0xffffda9a

0801a9a8 <x509_get_ns_cert_type>:

static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b088      	sub	sp, #32
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	60f8      	str	r0, [r7, #12]
 801a9b0:	60b9      	str	r1, [r7, #8]
 801a9b2:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 801a9b4:	2300      	movs	r3, #0
 801a9b6:	613b      	str	r3, [r7, #16]
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	753b      	strb	r3, [r7, #20]
 801a9bc:	2300      	movs	r3, #0
 801a9be:	61bb      	str	r3, [r7, #24]

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 801a9c0:	f107 0310 	add.w	r3, r7, #16
 801a9c4:	461a      	mov	r2, r3
 801a9c6:	68b9      	ldr	r1, [r7, #8]
 801a9c8:	68f8      	ldr	r0, [r7, #12]
 801a9ca:	f7eb fdf8 	bl	80065be <mbedtls_asn1_get_bitstring>
 801a9ce:	61f8      	str	r0, [r7, #28]
 801a9d0:	69fb      	ldr	r3, [r7, #28]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d003      	beq.n	801a9de <x509_get_ns_cert_type+0x36>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a9d6:	69fb      	ldr	r3, [r7, #28]
 801a9d8:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a9dc:	e009      	b.n	801a9f2 <x509_get_ns_cert_type+0x4a>

    if( bs.len != 1 )
 801a9de:	693b      	ldr	r3, [r7, #16]
 801a9e0:	2b01      	cmp	r3, #1
 801a9e2:	d001      	beq.n	801a9e8 <x509_get_ns_cert_type+0x40>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a9e4:	4b05      	ldr	r3, [pc, #20]	; (801a9fc <x509_get_ns_cert_type+0x54>)
 801a9e6:	e004      	b.n	801a9f2 <x509_get_ns_cert_type+0x4a>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 801a9e8:	69bb      	ldr	r3, [r7, #24]
 801a9ea:	781a      	ldrb	r2, [r3, #0]
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	701a      	strb	r2, [r3, #0]
    return( 0 );
 801a9f0:	2300      	movs	r3, #0
}
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	3720      	adds	r7, #32
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	bd80      	pop	{r7, pc}
 801a9fa:	bf00      	nop
 801a9fc:	ffffda9c 	.word	0xffffda9c

0801aa00 <x509_get_key_usage>:

static int x509_get_key_usage( unsigned char **p,
                               const unsigned char *end,
                               unsigned int *key_usage)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b08a      	sub	sp, #40	; 0x28
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	60f8      	str	r0, [r7, #12]
 801aa08:	60b9      	str	r1, [r7, #8]
 801aa0a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	617b      	str	r3, [r7, #20]
 801aa10:	2300      	movs	r3, #0
 801aa12:	763b      	strb	r3, [r7, #24]
 801aa14:	2300      	movs	r3, #0
 801aa16:	61fb      	str	r3, [r7, #28]

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 801aa18:	f107 0314 	add.w	r3, r7, #20
 801aa1c:	461a      	mov	r2, r3
 801aa1e:	68b9      	ldr	r1, [r7, #8]
 801aa20:	68f8      	ldr	r0, [r7, #12]
 801aa22:	f7eb fdcc 	bl	80065be <mbedtls_asn1_get_bitstring>
 801aa26:	6238      	str	r0, [r7, #32]
 801aa28:	6a3b      	ldr	r3, [r7, #32]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d003      	beq.n	801aa36 <x509_get_key_usage+0x36>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801aa2e:	6a3b      	ldr	r3, [r7, #32]
 801aa30:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801aa34:	e023      	b.n	801aa7e <x509_get_key_usage+0x7e>

    if( bs.len < 1 )
 801aa36:	697b      	ldr	r3, [r7, #20]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d101      	bne.n	801aa40 <x509_get_key_usage+0x40>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801aa3c:	4b12      	ldr	r3, [pc, #72]	; (801aa88 <x509_get_key_usage+0x88>)
 801aa3e:	e01e      	b.n	801aa7e <x509_get_key_usage+0x7e>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	2200      	movs	r2, #0
 801aa44:	601a      	str	r2, [r3, #0]
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 801aa46:	2300      	movs	r3, #0
 801aa48:	627b      	str	r3, [r7, #36]	; 0x24
 801aa4a:	e010      	b.n	801aa6e <x509_get_key_usage+0x6e>
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681a      	ldr	r2, [r3, #0]
 801aa50:	69f9      	ldr	r1, [r7, #28]
 801aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa54:	440b      	add	r3, r1
 801aa56:	781b      	ldrb	r3, [r3, #0]
 801aa58:	4619      	mov	r1, r3
 801aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa5c:	00db      	lsls	r3, r3, #3
 801aa5e:	fa01 f303 	lsl.w	r3, r1, r3
 801aa62:	431a      	orrs	r2, r3
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	601a      	str	r2, [r3, #0]
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 801aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa6a:	3301      	adds	r3, #1
 801aa6c:	627b      	str	r3, [r7, #36]	; 0x24
 801aa6e:	697b      	ldr	r3, [r7, #20]
 801aa70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa72:	429a      	cmp	r2, r3
 801aa74:	d202      	bcs.n	801aa7c <x509_get_key_usage+0x7c>
 801aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa78:	2b03      	cmp	r3, #3
 801aa7a:	d9e7      	bls.n	801aa4c <x509_get_key_usage+0x4c>
    }

    return( 0 );
 801aa7c:	2300      	movs	r3, #0
}
 801aa7e:	4618      	mov	r0, r3
 801aa80:	3728      	adds	r7, #40	; 0x28
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bd80      	pop	{r7, pc}
 801aa86:	bf00      	nop
 801aa88:	ffffda9c 	.word	0xffffda9c

0801aa8c <x509_get_ext_key_usage>:
 * KeyPurposeId ::= OBJECT IDENTIFIER
 */
static int x509_get_ext_key_usage( unsigned char **p,
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b086      	sub	sp, #24
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	60f8      	str	r0, [r7, #12]
 801aa94:	60b9      	str	r1, [r7, #8]
 801aa96:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 801aa98:	2306      	movs	r3, #6
 801aa9a:	687a      	ldr	r2, [r7, #4]
 801aa9c:	68b9      	ldr	r1, [r7, #8]
 801aa9e:	68f8      	ldr	r0, [r7, #12]
 801aaa0:	f7eb fdfd 	bl	800669e <mbedtls_asn1_get_sequence_of>
 801aaa4:	6178      	str	r0, [r7, #20]
 801aaa6:	697b      	ldr	r3, [r7, #20]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d003      	beq.n	801aab4 <x509_get_ext_key_usage+0x28>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801aaac:	697b      	ldr	r3, [r7, #20]
 801aaae:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801aab2:	e006      	b.n	801aac2 <x509_get_ext_key_usage+0x36>

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	689b      	ldr	r3, [r3, #8]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d101      	bne.n	801aac0 <x509_get_ext_key_usage+0x34>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801aabc:	4b03      	ldr	r3, [pc, #12]	; (801aacc <x509_get_ext_key_usage+0x40>)
 801aabe:	e000      	b.n	801aac2 <x509_get_ext_key_usage+0x36>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    return( 0 );
 801aac0:	2300      	movs	r3, #0
}
 801aac2:	4618      	mov	r0, r3
 801aac4:	3718      	adds	r7, #24
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}
 801aaca:	bf00      	nop
 801aacc:	ffffda9c 	.word	0xffffda9c

0801aad0 <x509_get_subject_alt_name>:
 * NOTE: we only parse and use dNSName at this point.
 */
static int x509_get_subject_alt_name( unsigned char **p,
                                      const unsigned char *end,
                                      mbedtls_x509_sequence *subject_alt_name )
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b08a      	sub	sp, #40	; 0x28
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	60f8      	str	r0, [r7, #12]
 801aad8:	60b9      	str	r1, [r7, #8]
 801aada:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len, tag_len;
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801aae0:	f107 0214 	add.w	r2, r7, #20
 801aae4:	2330      	movs	r3, #48	; 0x30
 801aae6:	68b9      	ldr	r1, [r7, #8]
 801aae8:	68f8      	ldr	r0, [r7, #12]
 801aaea:	f7eb fcd3 	bl	8006494 <mbedtls_asn1_get_tag>
 801aaee:	6238      	str	r0, [r7, #32]
 801aaf0:	6a3b      	ldr	r3, [r7, #32]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d003      	beq.n	801aafe <x509_get_subject_alt_name+0x2e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801aaf6:	6a3b      	ldr	r3, [r7, #32]
 801aaf8:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801aafc:	e077      	b.n	801abee <x509_get_subject_alt_name+0x11e>

    if( *p + len != end )
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	681a      	ldr	r2, [r3, #0]
 801ab02:	697b      	ldr	r3, [r7, #20]
 801ab04:	4413      	add	r3, r2
 801ab06:	68ba      	ldr	r2, [r7, #8]
 801ab08:	429a      	cmp	r2, r3
 801ab0a:	d060      	beq.n	801abce <x509_get_subject_alt_name+0xfe>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ab0c:	4b3a      	ldr	r3, [pc, #232]	; (801abf8 <x509_get_subject_alt_name+0x128>)
 801ab0e:	e06e      	b.n	801abee <x509_get_subject_alt_name+0x11e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        if( ( end - *p ) < 1 )
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	68ba      	ldr	r2, [r7, #8]
 801ab16:	1ad3      	subs	r3, r2, r3
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	dc01      	bgt.n	801ab20 <x509_get_subject_alt_name+0x50>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ab1c:	4b37      	ldr	r3, [pc, #220]	; (801abfc <x509_get_subject_alt_name+0x12c>)
 801ab1e:	e066      	b.n	801abee <x509_get_subject_alt_name+0x11e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	781b      	ldrb	r3, [r3, #0]
 801ab26:	77fb      	strb	r3, [r7, #31]
        (*p)++;
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	1c5a      	adds	r2, r3, #1
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	601a      	str	r2, [r3, #0]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 801ab32:	f107 0310 	add.w	r3, r7, #16
 801ab36:	461a      	mov	r2, r3
 801ab38:	68b9      	ldr	r1, [r7, #8]
 801ab3a:	68f8      	ldr	r0, [r7, #12]
 801ab3c:	f7eb fbe8 	bl	8006310 <mbedtls_asn1_get_len>
 801ab40:	6238      	str	r0, [r7, #32]
 801ab42:	6a3b      	ldr	r3, [r7, #32]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d003      	beq.n	801ab50 <x509_get_subject_alt_name+0x80>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ab48:	6a3b      	ldr	r3, [r7, #32]
 801ab4a:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801ab4e:	e04e      	b.n	801abee <x509_get_subject_alt_name+0x11e>

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 801ab50:	7ffb      	ldrb	r3, [r7, #31]
 801ab52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ab56:	2b80      	cmp	r3, #128	; 0x80
 801ab58:	d001      	beq.n	801ab5e <x509_get_subject_alt_name+0x8e>
                MBEDTLS_ASN1_CONTEXT_SPECIFIC )
        {
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ab5a:	4b29      	ldr	r3, [pc, #164]	; (801ac00 <x509_get_subject_alt_name+0x130>)
 801ab5c:	e047      	b.n	801abee <x509_get_subject_alt_name+0x11e>
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 801ab5e:	7ffb      	ldrb	r3, [r7, #31]
 801ab60:	2b82      	cmp	r3, #130	; 0x82
 801ab62:	d006      	beq.n	801ab72 <x509_get_subject_alt_name+0xa2>
        {
            *p += tag_len;
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	681a      	ldr	r2, [r3, #0]
 801ab68:	693b      	ldr	r3, [r7, #16]
 801ab6a:	441a      	add	r2, r3
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	601a      	str	r2, [r3, #0]
            continue;
 801ab70:	e02d      	b.n	801abce <x509_get_subject_alt_name+0xfe>
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 801ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab74:	689b      	ldr	r3, [r3, #8]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d016      	beq.n	801aba8 <x509_get_subject_alt_name+0xd8>
        {
            if( cur->next != NULL )
 801ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab7c:	68db      	ldr	r3, [r3, #12]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d001      	beq.n	801ab86 <x509_get_subject_alt_name+0xb6>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 801ab82:	4b20      	ldr	r3, [pc, #128]	; (801ac04 <x509_get_subject_alt_name+0x134>)
 801ab84:	e033      	b.n	801abee <x509_get_subject_alt_name+0x11e>

            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 801ab86:	2110      	movs	r1, #16
 801ab88:	2001      	movs	r0, #1
 801ab8a:	f003 fa0d 	bl	801dfa8 <calloc>
 801ab8e:	4603      	mov	r3, r0
 801ab90:	461a      	mov	r2, r3
 801ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab94:	60da      	str	r2, [r3, #12]

            if( cur->next == NULL )
 801ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab98:	68db      	ldr	r3, [r3, #12]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d101      	bne.n	801aba2 <x509_get_subject_alt_name+0xd2>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ab9e:	4b1a      	ldr	r3, [pc, #104]	; (801ac08 <x509_get_subject_alt_name+0x138>)
 801aba0:	e025      	b.n	801abee <x509_get_subject_alt_name+0x11e>
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );

            cur = cur->next;
 801aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aba4:	68db      	ldr	r3, [r3, #12]
 801aba6:	627b      	str	r3, [r7, #36]	; 0x24
        }

        buf = &(cur->buf);
 801aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abaa:	61bb      	str	r3, [r7, #24]
        buf->tag = tag;
 801abac:	7ffa      	ldrb	r2, [r7, #31]
 801abae:	69bb      	ldr	r3, [r7, #24]
 801abb0:	601a      	str	r2, [r3, #0]
        buf->p = *p;
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	681a      	ldr	r2, [r3, #0]
 801abb6:	69bb      	ldr	r3, [r7, #24]
 801abb8:	609a      	str	r2, [r3, #8]
        buf->len = tag_len;
 801abba:	693a      	ldr	r2, [r7, #16]
 801abbc:	69bb      	ldr	r3, [r7, #24]
 801abbe:	605a      	str	r2, [r3, #4]
        *p += buf->len;
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	681a      	ldr	r2, [r3, #0]
 801abc4:	69bb      	ldr	r3, [r7, #24]
 801abc6:	685b      	ldr	r3, [r3, #4]
 801abc8:	441a      	add	r2, r3
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	601a      	str	r2, [r3, #0]
    while( *p < end )
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	68ba      	ldr	r2, [r7, #8]
 801abd4:	429a      	cmp	r2, r3
 801abd6:	d89b      	bhi.n	801ab10 <x509_get_subject_alt_name+0x40>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 801abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abda:	2200      	movs	r2, #0
 801abdc:	60da      	str	r2, [r3, #12]

    if( *p != end )
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	68ba      	ldr	r2, [r7, #8]
 801abe4:	429a      	cmp	r2, r3
 801abe6:	d001      	beq.n	801abec <x509_get_subject_alt_name+0x11c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801abe8:	4b03      	ldr	r3, [pc, #12]	; (801abf8 <x509_get_subject_alt_name+0x128>)
 801abea:	e000      	b.n	801abee <x509_get_subject_alt_name+0x11e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801abec:	2300      	movs	r3, #0
}
 801abee:	4618      	mov	r0, r3
 801abf0:	3728      	adds	r7, #40	; 0x28
 801abf2:	46bd      	mov	sp, r7
 801abf4:	bd80      	pop	{r7, pc}
 801abf6:	bf00      	nop
 801abf8:	ffffda9a 	.word	0xffffda9a
 801abfc:	ffffdaa0 	.word	0xffffdaa0
 801ac00:	ffffda9e 	.word	0xffffda9e
 801ac04:	ffffdb00 	.word	0xffffdb00
 801ac08:	ffffda96 	.word	0xffffda96

0801ac0c <x509_get_crt_ext>:
 *
 */
static int x509_get_crt_ext( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_x509_crt *crt )
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b08e      	sub	sp, #56	; 0x38
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	60f8      	str	r0, [r7, #12]
 801ac14:	60b9      	str	r1, [r7, #8]
 801ac16:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 801ac1e:	2303      	movs	r3, #3
 801ac20:	68b9      	ldr	r1, [r7, #8]
 801ac22:	68f8      	ldr	r0, [r7, #12]
 801ac24:	f7ff fa94 	bl	801a150 <mbedtls_x509_get_ext>
 801ac28:	6378      	str	r0, [r7, #52]	; 0x34
 801ac2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	f000 8107 	beq.w	801ae40 <x509_get_crt_ext+0x234>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801ac32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac34:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801ac38:	d101      	bne.n	801ac3e <x509_get_crt_ext+0x32>
            return( 0 );
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	e10e      	b.n	801ae5c <x509_get_crt_ext+0x250>

        return( ret );
 801ac3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac40:	e10c      	b.n	801ae5c <x509_get_crt_ext+0x250>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 801ac42:	2300      	movs	r3, #0
 801ac44:	61fb      	str	r3, [r7, #28]
 801ac46:	2300      	movs	r3, #0
 801ac48:	623b      	str	r3, [r7, #32]
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	627b      	str	r3, [r7, #36]	; 0x24
        int is_critical = 0; /* DEFAULT FALSE */
 801ac4e:	2300      	movs	r3, #0
 801ac50:	61bb      	str	r3, [r7, #24]
        int ext_type = 0;
 801ac52:	2300      	movs	r3, #0
 801ac54:	617b      	str	r3, [r7, #20]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801ac56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ac5a:	2330      	movs	r3, #48	; 0x30
 801ac5c:	68b9      	ldr	r1, [r7, #8]
 801ac5e:	68f8      	ldr	r0, [r7, #12]
 801ac60:	f7eb fc18 	bl	8006494 <mbedtls_asn1_get_tag>
 801ac64:	6378      	str	r0, [r7, #52]	; 0x34
 801ac66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d003      	beq.n	801ac74 <x509_get_crt_ext+0x68>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ac6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac6e:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801ac72:	e0f3      	b.n	801ae5c <x509_get_crt_ext+0x250>

        end_ext_data = *p + len;
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	681a      	ldr	r2, [r3, #0]
 801ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac7a:	4413      	add	r3, r2
 801ac7c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Get extension ID */
        extn_oid.tag = **p;
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	781b      	ldrb	r3, [r3, #0]
 801ac84:	61fb      	str	r3, [r7, #28]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 801ac86:	f107 031c 	add.w	r3, r7, #28
 801ac8a:	1d1a      	adds	r2, r3, #4
 801ac8c:	2306      	movs	r3, #6
 801ac8e:	68b9      	ldr	r1, [r7, #8]
 801ac90:	68f8      	ldr	r0, [r7, #12]
 801ac92:	f7eb fbff 	bl	8006494 <mbedtls_asn1_get_tag>
 801ac96:	6378      	str	r0, [r7, #52]	; 0x34
 801ac98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d003      	beq.n	801aca6 <x509_get_crt_ext+0x9a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ac9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aca0:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801aca4:	e0da      	b.n	801ae5c <x509_get_crt_ext+0x250>

        extn_oid.p = *p;
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	627b      	str	r3, [r7, #36]	; 0x24
        *p += extn_oid.len;
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	681a      	ldr	r2, [r3, #0]
 801acb0:	6a3b      	ldr	r3, [r7, #32]
 801acb2:	441a      	add	r2, r3
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	601a      	str	r2, [r3, #0]

        if( ( end - *p ) < 1 )
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	68ba      	ldr	r2, [r7, #8]
 801acbe:	1ad3      	subs	r3, r2, r3
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	dc01      	bgt.n	801acc8 <x509_get_crt_ext+0xbc>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801acc4:	4b67      	ldr	r3, [pc, #412]	; (801ae64 <x509_get_crt_ext+0x258>)
 801acc6:	e0c9      	b.n	801ae5c <x509_get_crt_ext+0x250>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 801acc8:	f107 0318 	add.w	r3, r7, #24
 801accc:	461a      	mov	r2, r3
 801acce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801acd0:	68f8      	ldr	r0, [r7, #12]
 801acd2:	f7eb fc08 	bl	80064e6 <mbedtls_asn1_get_bool>
 801acd6:	6378      	str	r0, [r7, #52]	; 0x34
 801acd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d007      	beq.n	801acee <x509_get_crt_ext+0xe2>
 801acde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ace0:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801ace4:	d003      	beq.n	801acee <x509_get_crt_ext+0xe2>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ace6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ace8:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801acec:	e0b6      	b.n	801ae5c <x509_get_crt_ext+0x250>

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 801acee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801acf2:	2304      	movs	r3, #4
 801acf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801acf6:	68f8      	ldr	r0, [r7, #12]
 801acf8:	f7eb fbcc 	bl	8006494 <mbedtls_asn1_get_tag>
 801acfc:	6378      	str	r0, [r7, #52]	; 0x34
 801acfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d003      	beq.n	801ad0c <x509_get_crt_ext+0x100>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ad04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad06:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801ad0a:	e0a7      	b.n	801ae5c <x509_get_crt_ext+0x250>

        end_ext_octet = *p + len;
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	681a      	ldr	r2, [r3, #0]
 801ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad12:	4413      	add	r3, r2
 801ad14:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( end_ext_octet != end_ext_data )
 801ad16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad1a:	429a      	cmp	r2, r3
 801ad1c:	d001      	beq.n	801ad22 <x509_get_crt_ext+0x116>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ad1e:	4b52      	ldr	r3, [pc, #328]	; (801ae68 <x509_get_crt_ext+0x25c>)
 801ad20:	e09c      	b.n	801ae5c <x509_get_crt_ext+0x250>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 801ad22:	f107 0214 	add.w	r2, r7, #20
 801ad26:	f107 031c 	add.w	r3, r7, #28
 801ad2a:	4611      	mov	r1, r2
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	f7f3 fd31 	bl	800e794 <mbedtls_oid_get_x509_ext_type>
 801ad32:	6378      	str	r0, [r7, #52]	; 0x34

        if( ret != 0 )
 801ad34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d007      	beq.n	801ad4a <x509_get_crt_ext+0x13e>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ad3e:	601a      	str	r2, [r3, #0]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 801ad40:	69bb      	ldr	r3, [r7, #24]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d07c      	beq.n	801ae40 <x509_get_crt_ext+0x234>
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ad46:	4b49      	ldr	r3, [pc, #292]	; (801ae6c <x509_get_crt_ext+0x260>)
 801ad48:	e088      	b.n	801ae5c <x509_get_crt_ext+0x250>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801ad50:	697b      	ldr	r3, [r7, #20]
 801ad52:	4013      	ands	r3, r2
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d001      	beq.n	801ad5c <x509_get_crt_ext+0x150>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 801ad58:	4b45      	ldr	r3, [pc, #276]	; (801ae70 <x509_get_crt_ext+0x264>)
 801ad5a:	e07f      	b.n	801ae5c <x509_get_crt_ext+0x250>

        crt->ext_types |= ext_type;
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801ad62:	697b      	ldr	r3, [r7, #20]
 801ad64:	431a      	orrs	r2, r3
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

        switch( ext_type )
 801ad6c:	697b      	ldr	r3, [r7, #20]
 801ad6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad72:	d04c      	beq.n	801ae0e <x509_get_crt_ext+0x202>
 801ad74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad78:	dc57      	bgt.n	801ae2a <x509_get_crt_ext+0x21e>
 801ad7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ad7e:	d02b      	beq.n	801add8 <x509_get_crt_ext+0x1cc>
 801ad80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ad84:	dc51      	bgt.n	801ae2a <x509_get_crt_ext+0x21e>
 801ad86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ad8a:	d007      	beq.n	801ad9c <x509_get_crt_ext+0x190>
 801ad8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ad90:	dc4b      	bgt.n	801ae2a <x509_get_crt_ext+0x21e>
 801ad92:	2b04      	cmp	r3, #4
 801ad94:	d012      	beq.n	801adbc <x509_get_crt_ext+0x1b0>
 801ad96:	2b20      	cmp	r3, #32
 801ad98:	d02c      	beq.n	801adf4 <x509_get_crt_ext+0x1e8>
 801ad9a:	e046      	b.n	801ae2a <x509_get_crt_ext+0x21e>
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	f103 02fc 	add.w	r2, r3, #252	; 0xfc
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801ada8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801adaa:	68f8      	ldr	r0, [r7, #12]
 801adac:	f7ff fd90 	bl	801a8d0 <x509_get_basic_constraints>
 801adb0:	6378      	str	r0, [r7, #52]	; 0x34
 801adb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d03a      	beq.n	801ae2e <x509_get_crt_ext+0x222>
                    &crt->ca_istrue, &crt->max_pathlen ) ) != 0 )
                return( ret );
 801adb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adba:	e04f      	b.n	801ae5c <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_KEY_USAGE:
            /* Parse key usage */
            if( ( ret = x509_get_key_usage( p, end_ext_octet,
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801adc2:	461a      	mov	r2, r3
 801adc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801adc6:	68f8      	ldr	r0, [r7, #12]
 801adc8:	f7ff fe1a 	bl	801aa00 <x509_get_key_usage>
 801adcc:	6378      	str	r0, [r7, #52]	; 0x34
 801adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801add0:	2b00      	cmp	r3, #0
 801add2:	d02e      	beq.n	801ae32 <x509_get_crt_ext+0x226>
                    &crt->key_usage ) ) != 0 )
                return( ret );
 801add4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801add6:	e041      	b.n	801ae5c <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE:
            /* Parse extended key usage */
            if( ( ret = x509_get_ext_key_usage( p, end_ext_octet,
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801adde:	461a      	mov	r2, r3
 801ade0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ade2:	68f8      	ldr	r0, [r7, #12]
 801ade4:	f7ff fe52 	bl	801aa8c <x509_get_ext_key_usage>
 801ade8:	6378      	str	r0, [r7, #52]	; 0x34
 801adea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adec:	2b00      	cmp	r3, #0
 801adee:	d022      	beq.n	801ae36 <x509_get_crt_ext+0x22a>
                    &crt->ext_key_usage ) ) != 0 )
                return( ret );
 801adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adf2:	e033      	b.n	801ae5c <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	33e8      	adds	r3, #232	; 0xe8
 801adf8:	461a      	mov	r2, r3
 801adfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801adfc:	68f8      	ldr	r0, [r7, #12]
 801adfe:	f7ff fe67 	bl	801aad0 <x509_get_subject_alt_name>
 801ae02:	6378      	str	r0, [r7, #52]	; 0x34
 801ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d017      	beq.n	801ae3a <x509_get_crt_ext+0x22e>
                    &crt->subject_alt_names ) ) != 0 )
                return( ret );
 801ae0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae0c:	e026      	b.n	801ae5c <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801ae14:	461a      	mov	r2, r3
 801ae16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ae18:	68f8      	ldr	r0, [r7, #12]
 801ae1a:	f7ff fdc5 	bl	801a9a8 <x509_get_ns_cert_type>
 801ae1e:	6378      	str	r0, [r7, #52]	; 0x34
 801ae20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d00b      	beq.n	801ae3e <x509_get_crt_ext+0x232>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
 801ae26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae28:	e018      	b.n	801ae5c <x509_get_crt_ext+0x250>
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 801ae2a:	4b12      	ldr	r3, [pc, #72]	; (801ae74 <x509_get_crt_ext+0x268>)
 801ae2c:	e016      	b.n	801ae5c <x509_get_crt_ext+0x250>
            break;
 801ae2e:	bf00      	nop
 801ae30:	e006      	b.n	801ae40 <x509_get_crt_ext+0x234>
            break;
 801ae32:	bf00      	nop
 801ae34:	e004      	b.n	801ae40 <x509_get_crt_ext+0x234>
            break;
 801ae36:	bf00      	nop
 801ae38:	e002      	b.n	801ae40 <x509_get_crt_ext+0x234>
            break;
 801ae3a:	bf00      	nop
 801ae3c:	e000      	b.n	801ae40 <x509_get_crt_ext+0x234>
            break;
 801ae3e:	bf00      	nop
    while( *p < end )
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	68ba      	ldr	r2, [r7, #8]
 801ae46:	429a      	cmp	r2, r3
 801ae48:	f63f aefb 	bhi.w	801ac42 <x509_get_crt_ext+0x36>
        }
    }

    if( *p != end )
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	68ba      	ldr	r2, [r7, #8]
 801ae52:	429a      	cmp	r2, r3
 801ae54:	d001      	beq.n	801ae5a <x509_get_crt_ext+0x24e>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ae56:	4b04      	ldr	r3, [pc, #16]	; (801ae68 <x509_get_crt_ext+0x25c>)
 801ae58:	e000      	b.n	801ae5c <x509_get_crt_ext+0x250>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801ae5a:	2300      	movs	r3, #0
}
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	3738      	adds	r7, #56	; 0x38
 801ae60:	46bd      	mov	sp, r7
 801ae62:	bd80      	pop	{r7, pc}
 801ae64:	ffffdaa0 	.word	0xffffdaa0
 801ae68:	ffffda9a 	.word	0xffffda9a
 801ae6c:	ffffda9e 	.word	0xffffda9e
 801ae70:	ffffdb00 	.word	0xffffdb00
 801ae74:	ffffdf80 	.word	0xffffdf80

0801ae78 <x509_crt_parse_der_core>:
/*
 * Parse and fill a single X.509 certificate in DER format
 */
static int x509_crt_parse_der_core( mbedtls_x509_crt *crt, const unsigned char *buf,
                                    size_t buflen )
{
 801ae78:	b590      	push	{r4, r7, lr}
 801ae7a:	b095      	sub	sp, #84	; 0x54
 801ae7c:	af02      	add	r7, sp, #8
 801ae7e:	60f8      	str	r0, [r7, #12]
 801ae80:	60b9      	str	r1, [r7, #8]
 801ae82:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 801ae84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ae88:	220c      	movs	r2, #12
 801ae8a:	2100      	movs	r1, #0
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	f003 f905 	bl	801e09c <memset>
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 801ae92:	f107 031c 	add.w	r3, r7, #28
 801ae96:	220c      	movs	r2, #12
 801ae98:	2100      	movs	r1, #0
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f003 f8fe 	bl	801e09c <memset>
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 801aea0:	f107 0310 	add.w	r3, r7, #16
 801aea4:	220c      	movs	r2, #12
 801aea6:	2100      	movs	r1, #0
 801aea8:	4618      	mov	r0, r3
 801aeaa:	f003 f8f7 	bl	801e09c <memset>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d002      	beq.n	801aeba <x509_crt_parse_der_core+0x42>
 801aeb4:	68bb      	ldr	r3, [r7, #8]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d101      	bne.n	801aebe <x509_crt_parse_der_core+0x46>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801aeba:	4ba0      	ldr	r3, [pc, #640]	; (801b13c <x509_crt_parse_der_core+0x2c4>)
 801aebc:	e207      	b.n	801b2ce <x509_crt_parse_der_core+0x456>

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 801aebe:	68bb      	ldr	r3, [r7, #8]
 801aec0:	637b      	str	r3, [r7, #52]	; 0x34
    len = buflen;
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	63bb      	str	r3, [r7, #56]	; 0x38
    end = p + len;
 801aec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aeca:	4413      	add	r3, r2
 801aecc:	643b      	str	r3, [r7, #64]	; 0x40
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801aece:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801aed2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801aed6:	2330      	movs	r3, #48	; 0x30
 801aed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801aeda:	f7eb fadb 	bl	8006494 <mbedtls_asn1_get_tag>
 801aede:	6478      	str	r0, [r7, #68]	; 0x44
 801aee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d004      	beq.n	801aef0 <x509_crt_parse_der_core+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801aee6:	68f8      	ldr	r0, [r7, #12]
 801aee8:	f001 ff1e 	bl	801cd28 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 801aeec:	4b94      	ldr	r3, [pc, #592]	; (801b140 <x509_crt_parse_der_core+0x2c8>)
 801aeee:	e1ee      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    if( len > (size_t) ( end - p ) )
 801aef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801aef4:	1ad3      	subs	r3, r2, r3
 801aef6:	461a      	mov	r2, r3
 801aef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aefa:	429a      	cmp	r2, r3
 801aefc:	d204      	bcs.n	801af08 <x509_crt_parse_der_core+0x90>
    {
        mbedtls_x509_crt_free( crt );
 801aefe:	68f8      	ldr	r0, [r7, #12]
 801af00:	f001 ff12 	bl	801cd28 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801af04:	4b8f      	ldr	r3, [pc, #572]	; (801b144 <x509_crt_parse_der_core+0x2cc>)
 801af06:	e1e2      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;
 801af08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801af0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af0c:	4413      	add	r3, r2
 801af0e:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 801af10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	1ad3      	subs	r3, r2, r3
 801af16:	461a      	mov	r2, r3
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	605a      	str	r2, [r3, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	685b      	ldr	r3, [r3, #4]
 801af20:	4619      	mov	r1, r3
 801af22:	2001      	movs	r0, #1
 801af24:	f003 f840 	bl	801dfa8 <calloc>
 801af28:	4603      	mov	r3, r0
 801af2a:	637b      	str	r3, [r7, #52]	; 0x34
 801af2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	609a      	str	r2, [r3, #8]
    if( p == NULL )
 801af32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af34:	2b00      	cmp	r3, #0
 801af36:	d101      	bne.n	801af3c <x509_crt_parse_der_core+0xc4>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801af38:	4b83      	ldr	r3, [pc, #524]	; (801b148 <x509_crt_parse_der_core+0x2d0>)
 801af3a:	e1c8      	b.n	801b2ce <x509_crt_parse_der_core+0x456>

    memcpy( p, buf, crt->raw.len );
 801af3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801af3e:	68fb      	ldr	r3, [r7, #12]
 801af40:	685b      	ldr	r3, [r3, #4]
 801af42:	461a      	mov	r2, r3
 801af44:	68b9      	ldr	r1, [r7, #8]
 801af46:	f003 f881 	bl	801e04c <memcpy>

    // Direct pointers to the new buffer 
    p += crt->raw.len - len;
 801af4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	6859      	ldr	r1, [r3, #4]
 801af50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af52:	1acb      	subs	r3, r1, r3
 801af54:	4413      	add	r3, r2
 801af56:	637b      	str	r3, [r7, #52]	; 0x34
    end = crt_end = p + len;
 801af58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801af5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af5c:	4413      	add	r3, r2
 801af5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801af60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af62:	643b      	str	r3, [r7, #64]	; 0x40

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 801af64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	615a      	str	r2, [r3, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801af6a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801af6e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801af72:	2330      	movs	r3, #48	; 0x30
 801af74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801af76:	f7eb fa8d 	bl	8006494 <mbedtls_asn1_get_tag>
 801af7a:	6478      	str	r0, [r7, #68]	; 0x44
 801af7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d006      	beq.n	801af90 <x509_crt_parse_der_core+0x118>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801af82:	68f8      	ldr	r0, [r7, #12]
 801af84:	f001 fed0 	bl	801cd28 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801af88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801af8a:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
 801af8e:	e19e      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    end = p + len;
 801af90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af94:	4413      	add	r3, r2
 801af96:	643b      	str	r3, [r7, #64]	; 0x40
    crt->tbs.len = end - crt->tbs.p;
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	695b      	ldr	r3, [r3, #20]
 801af9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801af9e:	1ad3      	subs	r3, r2, r3
 801afa0:	461a      	mov	r2, r3
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	611a      	str	r2, [r3, #16]
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	f103 0218 	add.w	r2, r3, #24
 801afac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801afb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801afb2:	4618      	mov	r0, r3
 801afb4:	f7ff fbd6 	bl	801a764 <x509_get_version>
 801afb8:	6478      	str	r0, [r7, #68]	; 0x44
 801afba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d11a      	bne.n	801aff6 <x509_crt_parse_der_core+0x17e>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	f103 021c 	add.w	r2, r3, #28
 801afc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801afca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801afcc:	4618      	mov	r0, r3
 801afce:	f7fe fd3d 	bl	8019a4c <mbedtls_x509_get_serial>
 801afd2:	6478      	str	r0, [r7, #68]	; 0x44
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 801afd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d10d      	bne.n	801aff6 <x509_crt_parse_der_core+0x17e>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801afe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afe4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801afe8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801afea:	f7fe fd75 	bl	8019ad8 <mbedtls_x509_get_alg>
 801afee:	6478      	str	r0, [r7, #68]	; 0x44
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 801aff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d004      	beq.n	801b000 <x509_crt_parse_der_core+0x188>
                                            &sig_params1 ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801aff6:	68f8      	ldr	r0, [r7, #12]
 801aff8:	f001 fe96 	bl	801cd28 <mbedtls_x509_crt_free>
        return( ret );
 801affc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801affe:	e166      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    if( crt->version < 0 || crt->version > 2 )
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	699b      	ldr	r3, [r3, #24]
 801b004:	2b00      	cmp	r3, #0
 801b006:	db03      	blt.n	801b010 <x509_crt_parse_der_core+0x198>
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	699b      	ldr	r3, [r3, #24]
 801b00c:	2b02      	cmp	r3, #2
 801b00e:	dd04      	ble.n	801b01a <x509_crt_parse_der_core+0x1a2>
    {
        mbedtls_x509_crt_free( crt );
 801b010:	68f8      	ldr	r0, [r7, #12]
 801b012:	f001 fe89 	bl	801cd28 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 801b016:	4b4d      	ldr	r3, [pc, #308]	; (801b14c <x509_crt_parse_der_core+0x2d4>)
 801b018:	e159      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    crt->version++;
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	699b      	ldr	r3, [r3, #24]
 801b01e:	1c5a      	adds	r2, r3, #1
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	619a      	str	r2, [r3, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	f503 7294 	add.w	r2, r3, #296	; 0x128
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	f203 1429 	addw	r4, r3, #297	; 0x129
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 801b03c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801b040:	9300      	str	r3, [sp, #0]
 801b042:	4623      	mov	r3, r4
 801b044:	f7ff f852 	bl	801a0ec <mbedtls_x509_get_sig_alg>
 801b048:	6478      	str	r0, [r7, #68]	; 0x44
 801b04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d004      	beq.n	801b05a <x509_crt_parse_der_core+0x1e2>
                                  &crt->sig_md, &crt->sig_pk,
                                  &crt->sig_opts ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b050:	68f8      	ldr	r0, [r7, #12]
 801b052:	f001 fe69 	bl	801cd28 <mbedtls_x509_crt_free>
        return( ret );
 801b056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b058:	e139      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 801b05a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	63da      	str	r2, [r3, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801b060:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b064:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b068:	2330      	movs	r3, #48	; 0x30
 801b06a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b06c:	f7eb fa12 	bl	8006494 <mbedtls_asn1_get_tag>
 801b070:	6478      	str	r0, [r7, #68]	; 0x44
 801b072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b074:	2b00      	cmp	r3, #0
 801b076:	d006      	beq.n	801b086 <x509_crt_parse_der_core+0x20e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b078:	68f8      	ldr	r0, [r7, #12]
 801b07a:	f001 fe55 	bl	801cd28 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801b07e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b080:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
 801b084:	e123      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 801b086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b08a:	18d1      	adds	r1, r2, r3
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801b092:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b096:	4618      	mov	r0, r3
 801b098:	f7fe fdd6 	bl	8019c48 <mbedtls_x509_get_name>
 801b09c:	6478      	str	r0, [r7, #68]	; 0x44
 801b09e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d004      	beq.n	801b0ae <x509_crt_parse_der_core+0x236>
    {
        mbedtls_x509_crt_free( crt );
 801b0a4:	68f8      	ldr	r0, [r7, #12]
 801b0a6:	f001 fe3f 	bl	801cd28 <mbedtls_x509_crt_free>
        return( ret );
 801b0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b0ac:	e10f      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 801b0ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0b4:	1ad3      	subs	r3, r2, r3
 801b0b6:	461a      	mov	r2, r3
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	639a      	str	r2, [r3, #56]	; 0x38
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	33a4      	adds	r3, #164	; 0xa4
 801b0c6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b0ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b0cc:	f7ff fb86 	bl	801a7dc <x509_get_dates>
 801b0d0:	6478      	str	r0, [r7, #68]	; 0x44
 801b0d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d004      	beq.n	801b0e2 <x509_crt_parse_der_core+0x26a>
                                         &crt->valid_to ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b0d8:	68f8      	ldr	r0, [r7, #12]
 801b0da:	f001 fe25 	bl	801cd28 <mbedtls_x509_crt_free>
        return( ret );
 801b0de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b0e0:	e0f5      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 801b0e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	649a      	str	r2, [r3, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801b0e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b0ec:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b0f0:	2330      	movs	r3, #48	; 0x30
 801b0f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b0f4:	f7eb f9ce 	bl	8006494 <mbedtls_asn1_get_tag>
 801b0f8:	6478      	str	r0, [r7, #68]	; 0x44
 801b0fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d006      	beq.n	801b10e <x509_crt_parse_der_core+0x296>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b100:	68f8      	ldr	r0, [r7, #12]
 801b102:	f001 fe11 	bl	801cd28 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801b106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b108:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
 801b10c:	e0df      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 801b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b110:	2b00      	cmp	r3, #0
 801b112:	d01d      	beq.n	801b150 <x509_crt_parse_der_core+0x2d8>
 801b114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b118:	18d1      	adds	r1, r2, r3
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801b120:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b124:	4618      	mov	r0, r3
 801b126:	f7fe fd8f 	bl	8019c48 <mbedtls_x509_get_name>
 801b12a:	6478      	str	r0, [r7, #68]	; 0x44
 801b12c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d00e      	beq.n	801b150 <x509_crt_parse_der_core+0x2d8>
    {
        mbedtls_x509_crt_free( crt );
 801b132:	68f8      	ldr	r0, [r7, #12]
 801b134:	f001 fdf8 	bl	801cd28 <mbedtls_x509_crt_free>
        return( ret );
 801b138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b13a:	e0c8      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
 801b13c:	ffffd800 	.word	0xffffd800
 801b140:	ffffde80 	.word	0xffffde80
 801b144:	ffffde1a 	.word	0xffffde1a
 801b148:	ffffd780 	.word	0xffffd780
 801b14c:	ffffda80 	.word	0xffffda80
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 801b150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b156:	1ad3      	subs	r3, r2, r3
 801b158:	461a      	mov	r2, r3
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	645a      	str	r2, [r3, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 801b15e:	68fb      	ldr	r3, [r7, #12]
 801b160:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 801b164:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b168:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b16a:	4618      	mov	r0, r3
 801b16c:	f7f4 f994 	bl	800f498 <mbedtls_pk_parse_subpubkey>
 801b170:	6478      	str	r0, [r7, #68]	; 0x44
 801b172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b174:	2b00      	cmp	r3, #0
 801b176:	d004      	beq.n	801b182 <x509_crt_parse_der_core+0x30a>
    {
        mbedtls_x509_crt_free( crt );
 801b178:	68f8      	ldr	r0, [r7, #12]
 801b17a:	f001 fdd5 	bl	801cd28 <mbedtls_x509_crt_free>
        return( ret );
 801b17e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b180:	e0a5      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	699b      	ldr	r3, [r3, #24]
 801b186:	2b02      	cmp	r3, #2
 801b188:	d003      	beq.n	801b192 <x509_crt_parse_der_core+0x31a>
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	699b      	ldr	r3, [r3, #24]
 801b18e:	2b03      	cmp	r3, #3
 801b190:	d111      	bne.n	801b1b6 <x509_crt_parse_der_core+0x33e>
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 801b198:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b19c:	2301      	movs	r3, #1
 801b19e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b1a0:	f7ff fb5c 	bl	801a85c <x509_get_uid>
 801b1a4:	6478      	str	r0, [r7, #68]	; 0x44
        if( ret != 0 )
 801b1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d004      	beq.n	801b1b6 <x509_crt_parse_der_core+0x33e>
        {
            mbedtls_x509_crt_free( crt );
 801b1ac:	68f8      	ldr	r0, [r7, #12]
 801b1ae:	f001 fdbb 	bl	801cd28 <mbedtls_x509_crt_free>
            return( ret );
 801b1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1b4:	e08b      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 801b1b6:	68fb      	ldr	r3, [r7, #12]
 801b1b8:	699b      	ldr	r3, [r3, #24]
 801b1ba:	2b02      	cmp	r3, #2
 801b1bc:	d003      	beq.n	801b1c6 <x509_crt_parse_der_core+0x34e>
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	699b      	ldr	r3, [r3, #24]
 801b1c2:	2b03      	cmp	r3, #3
 801b1c4:	d111      	bne.n	801b1ea <x509_crt_parse_der_core+0x372>
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 801b1cc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b1d0:	2302      	movs	r3, #2
 801b1d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b1d4:	f7ff fb42 	bl	801a85c <x509_get_uid>
 801b1d8:	6478      	str	r0, [r7, #68]	; 0x44
        if( ret != 0 )
 801b1da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d004      	beq.n	801b1ea <x509_crt_parse_der_core+0x372>
        {
            mbedtls_x509_crt_free( crt );
 801b1e0:	68f8      	ldr	r0, [r7, #12]
 801b1e2:	f001 fda1 	bl	801cd28 <mbedtls_x509_crt_free>
            return( ret );
 801b1e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1e8:	e071      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	699b      	ldr	r3, [r3, #24]
 801b1ee:	2b03      	cmp	r3, #3
 801b1f0:	d10f      	bne.n	801b212 <x509_crt_parse_der_core+0x39a>
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
 801b1f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b1f6:	68fa      	ldr	r2, [r7, #12]
 801b1f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f7ff fd06 	bl	801ac0c <x509_get_crt_ext>
 801b200:	6478      	str	r0, [r7, #68]	; 0x44
        if( ret != 0 )
 801b202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b204:	2b00      	cmp	r3, #0
 801b206:	d004      	beq.n	801b212 <x509_crt_parse_der_core+0x39a>
        {
            mbedtls_x509_crt_free( crt );
 801b208:	68f8      	ldr	r0, [r7, #12]
 801b20a:	f001 fd8d 	bl	801cd28 <mbedtls_x509_crt_free>
            return( ret );
 801b20e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b210:	e05d      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
        }
    }

    if( p != end )
 801b212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b216:	429a      	cmp	r2, r3
 801b218:	d004      	beq.n	801b224 <x509_crt_parse_der_core+0x3ac>
    {
        mbedtls_x509_crt_free( crt );
 801b21a:	68f8      	ldr	r0, [r7, #12]
 801b21c:	f001 fd84 	bl	801cd28 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801b220:	4b2d      	ldr	r3, [pc, #180]	; (801b2d8 <x509_crt_parse_der_core+0x460>)
 801b222:	e054      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    end = crt_end;
 801b224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b226:	643b      	str	r3, [r7, #64]	; 0x40
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 801b228:	f107 031c 	add.w	r3, r7, #28
 801b22c:	f107 0210 	add.w	r2, r7, #16
 801b230:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b234:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b236:	f7fe fc4f 	bl	8019ad8 <mbedtls_x509_get_alg>
 801b23a:	6478      	str	r0, [r7, #68]	; 0x44
 801b23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d004      	beq.n	801b24c <x509_crt_parse_der_core+0x3d4>
    {
        mbedtls_x509_crt_free( crt );
 801b242:	68f8      	ldr	r0, [r7, #12]
 801b244:	f001 fd70 	bl	801cd28 <mbedtls_x509_crt_free>
        return( ret );
 801b248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b24a:	e040      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b250:	697b      	ldr	r3, [r7, #20]
 801b252:	429a      	cmp	r2, r3
 801b254:	d11a      	bne.n	801b28c <x509_crt_parse_der_core+0x414>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801b25a:	69b9      	ldr	r1, [r7, #24]
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b260:	461a      	mov	r2, r3
 801b262:	f002 fee3 	bl	801e02c <memcmp>
 801b266:	4603      	mov	r3, r0
    if( crt->sig_oid.len != sig_oid2.len ||
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d10f      	bne.n	801b28c <x509_crt_parse_der_core+0x414>
        sig_params1.len != sig_params2.len ||
 801b26c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b26e:	6a3b      	ldr	r3, [r7, #32]
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 801b270:	429a      	cmp	r2, r3
 801b272:	d10b      	bne.n	801b28c <x509_crt_parse_der_core+0x414>
        ( sig_params1.len != 0 &&
 801b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        sig_params1.len != sig_params2.len ||
 801b276:	2b00      	cmp	r3, #0
 801b278:	d00d      	beq.n	801b296 <x509_crt_parse_der_core+0x41e>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 801b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b27c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b27e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b280:	4618      	mov	r0, r3
 801b282:	f002 fed3 	bl	801e02c <memcmp>
 801b286:	4603      	mov	r3, r0
        ( sig_params1.len != 0 &&
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d004      	beq.n	801b296 <x509_crt_parse_der_core+0x41e>
    {
        mbedtls_x509_crt_free( crt );
 801b28c:	68f8      	ldr	r0, [r7, #12]
 801b28e:	f001 fd4b 	bl	801cd28 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 801b292:	4b12      	ldr	r3, [pc, #72]	; (801b2dc <x509_crt_parse_der_core+0x464>)
 801b294:	e01b      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 801b29c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b2a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	f7fe feea 	bl	801a07c <mbedtls_x509_get_sig>
 801b2a8:	6478      	str	r0, [r7, #68]	; 0x44
 801b2aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d004      	beq.n	801b2ba <x509_crt_parse_der_core+0x442>
    {
        mbedtls_x509_crt_free( crt );
 801b2b0:	68f8      	ldr	r0, [r7, #12]
 801b2b2:	f001 fd39 	bl	801cd28 <mbedtls_x509_crt_free>
        return( ret );
 801b2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2b8:	e009      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
    }

    if( p != end )
 801b2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b2bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b2be:	429a      	cmp	r2, r3
 801b2c0:	d004      	beq.n	801b2cc <x509_crt_parse_der_core+0x454>
    {
        mbedtls_x509_crt_free( crt );
 801b2c2:	68f8      	ldr	r0, [r7, #12]
 801b2c4:	f001 fd30 	bl	801cd28 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801b2c8:	4b03      	ldr	r3, [pc, #12]	; (801b2d8 <x509_crt_parse_der_core+0x460>)
 801b2ca:	e000      	b.n	801b2ce <x509_crt_parse_der_core+0x456>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    return( 0 );
 801b2cc:	2300      	movs	r3, #0
}
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	374c      	adds	r7, #76	; 0x4c
 801b2d2:	46bd      	mov	sp, r7
 801b2d4:	bd90      	pop	{r4, r7, pc}
 801b2d6:	bf00      	nop
 801b2d8:	ffffde1a 	.word	0xffffde1a
 801b2dc:	ffffd980 	.word	0xffffd980

0801b2e0 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 801b2e0:	b580      	push	{r7, lr}
 801b2e2:	b088      	sub	sp, #32
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	60f8      	str	r0, [r7, #12]
 801b2e8:	60b9      	str	r1, [r7, #8]
 801b2ea:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	61fb      	str	r3, [r7, #28]
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	61bb      	str	r3, [r7, #24]

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 801b2f4:	69fb      	ldr	r3, [r7, #28]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d002      	beq.n	801b300 <mbedtls_x509_crt_parse_der+0x20>
 801b2fa:	68bb      	ldr	r3, [r7, #8]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d107      	bne.n	801b310 <mbedtls_x509_crt_parse_der+0x30>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801b300:	4b2a      	ldr	r3, [pc, #168]	; (801b3ac <mbedtls_x509_crt_parse_der+0xcc>)
 801b302:	e04e      	b.n	801b3a2 <mbedtls_x509_crt_parse_der+0xc2>

    while( crt->version != 0 && crt->next != NULL )
    {
        prev = crt;
 801b304:	69fb      	ldr	r3, [r7, #28]
 801b306:	61bb      	str	r3, [r7, #24]
        crt = crt->next;
 801b308:	69fb      	ldr	r3, [r7, #28]
 801b30a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b30e:	61fb      	str	r3, [r7, #28]
    while( crt->version != 0 && crt->next != NULL )
 801b310:	69fb      	ldr	r3, [r7, #28]
 801b312:	699b      	ldr	r3, [r3, #24]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d004      	beq.n	801b322 <mbedtls_x509_crt_parse_der+0x42>
 801b318:	69fb      	ldr	r3, [r7, #28]
 801b31a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d1f0      	bne.n	801b304 <mbedtls_x509_crt_parse_der+0x24>
    }

    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
 801b322:	69fb      	ldr	r3, [r7, #28]
 801b324:	699b      	ldr	r3, [r3, #24]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d021      	beq.n	801b36e <mbedtls_x509_crt_parse_der+0x8e>
 801b32a:	69fb      	ldr	r3, [r7, #28]
 801b32c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b330:	2b00      	cmp	r3, #0
 801b332:	d11c      	bne.n	801b36e <mbedtls_x509_crt_parse_der+0x8e>
    {
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 801b334:	f44f 719a 	mov.w	r1, #308	; 0x134
 801b338:	2001      	movs	r0, #1
 801b33a:	f002 fe35 	bl	801dfa8 <calloc>
 801b33e:	4603      	mov	r3, r0
 801b340:	461a      	mov	r2, r3
 801b342:	69fb      	ldr	r3, [r7, #28]
 801b344:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if( crt->next == NULL )
 801b348:	69fb      	ldr	r3, [r7, #28]
 801b34a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d101      	bne.n	801b356 <mbedtls_x509_crt_parse_der+0x76>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801b352:	4b17      	ldr	r3, [pc, #92]	; (801b3b0 <mbedtls_x509_crt_parse_der+0xd0>)
 801b354:	e025      	b.n	801b3a2 <mbedtls_x509_crt_parse_der+0xc2>

        prev = crt;
 801b356:	69fb      	ldr	r3, [r7, #28]
 801b358:	61bb      	str	r3, [r7, #24]
        mbedtls_x509_crt_init( crt->next );
 801b35a:	69fb      	ldr	r3, [r7, #28]
 801b35c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b360:	4618      	mov	r0, r3
 801b362:	f001 fcd3 	bl	801cd0c <mbedtls_x509_crt_init>
        crt = crt->next;
 801b366:	69fb      	ldr	r3, [r7, #28]
 801b368:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b36c:	61fb      	str	r3, [r7, #28]
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 801b36e:	687a      	ldr	r2, [r7, #4]
 801b370:	68b9      	ldr	r1, [r7, #8]
 801b372:	69f8      	ldr	r0, [r7, #28]
 801b374:	f7ff fd80 	bl	801ae78 <x509_crt_parse_der_core>
 801b378:	6178      	str	r0, [r7, #20]
 801b37a:	697b      	ldr	r3, [r7, #20]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d00f      	beq.n	801b3a0 <mbedtls_x509_crt_parse_der+0xc0>
    {
        if( prev )
 801b380:	69bb      	ldr	r3, [r7, #24]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d003      	beq.n	801b38e <mbedtls_x509_crt_parse_der+0xae>
            prev->next = NULL;
 801b386:	69bb      	ldr	r3, [r7, #24]
 801b388:	2200      	movs	r2, #0
 801b38a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if( crt != chain )
 801b38e:	69fa      	ldr	r2, [r7, #28]
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	429a      	cmp	r2, r3
 801b394:	d002      	beq.n	801b39c <mbedtls_x509_crt_parse_der+0xbc>
            mbedtls_free( crt );
 801b396:	69f8      	ldr	r0, [r7, #28]
 801b398:	f002 fe40 	bl	801e01c <free>

        return( ret );
 801b39c:	697b      	ldr	r3, [r7, #20]
 801b39e:	e000      	b.n	801b3a2 <mbedtls_x509_crt_parse_der+0xc2>
    }

    return( 0 );
 801b3a0:	2300      	movs	r3, #0
}
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	3720      	adds	r7, #32
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}
 801b3aa:	bf00      	nop
 801b3ac:	ffffd800 	.word	0xffffd800
 801b3b0:	ffffd780 	.word	0xffffd780

0801b3b4 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b092      	sub	sp, #72	; 0x48
 801b3b8:	af04      	add	r7, sp, #16
 801b3ba:	60f8      	str	r0, [r7, #12]
 801b3bc:	60b9      	str	r1, [r7, #8]
 801b3be:	607a      	str	r2, [r7, #4]
#if defined(MBEDTLS_PEM_PARSE_C)
    int success = 0, first_error = 0, total_failed = 0;
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	637b      	str	r3, [r7, #52]	; 0x34
 801b3c4:	2300      	movs	r3, #0
 801b3c6:	633b      	str	r3, [r7, #48]	; 0x30
 801b3c8:	2300      	movs	r3, #0
 801b3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    int buf_format = MBEDTLS_X509_FORMAT_DER;
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d002      	beq.n	801b3dc <mbedtls_x509_crt_parse+0x28>
 801b3d6:	68bb      	ldr	r3, [r7, #8]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d101      	bne.n	801b3e0 <mbedtls_x509_crt_parse+0x2c>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801b3dc:	4b4b      	ldr	r3, [pc, #300]	; (801b50c <mbedtls_x509_crt_parse+0x158>)
 801b3de:	e090      	b.n	801b502 <mbedtls_x509_crt_parse+0x14e>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d00f      	beq.n	801b406 <mbedtls_x509_crt_parse+0x52>
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	3b01      	subs	r3, #1
 801b3ea:	68ba      	ldr	r2, [r7, #8]
 801b3ec:	4413      	add	r3, r2
 801b3ee:	781b      	ldrb	r3, [r3, #0]
 801b3f0:	2b0a      	cmp	r3, #10
 801b3f2:	d108      	bne.n	801b406 <mbedtls_x509_crt_parse+0x52>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 801b3f4:	4946      	ldr	r1, [pc, #280]	; (801b510 <mbedtls_x509_crt_parse+0x15c>)
 801b3f6:	68b8      	ldr	r0, [r7, #8]
 801b3f8:	f003 f88c 	bl	801e514 <strstr>
 801b3fc:	4603      	mov	r3, r0
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d001      	beq.n	801b406 <mbedtls_x509_crt_parse+0x52>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
 801b402:	2302      	movs	r3, #2
 801b404:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
 801b406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b408:	2b01      	cmp	r3, #1
 801b40a:	d106      	bne.n	801b41a <mbedtls_x509_crt_parse+0x66>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 801b40c:	687a      	ldr	r2, [r7, #4]
 801b40e:	68b9      	ldr	r1, [r7, #8]
 801b410:	68f8      	ldr	r0, [r7, #12]
 801b412:	f7ff ff65 	bl	801b2e0 <mbedtls_x509_crt_parse_der>
 801b416:	4603      	mov	r3, r0
 801b418:	e073      	b.n	801b502 <mbedtls_x509_crt_parse+0x14e>
#else
    return mbedtls_x509_crt_parse_der( chain, buf, buflen );
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
    if( buf_format == MBEDTLS_X509_FORMAT_PEM )
 801b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b41c:	2b02      	cmp	r3, #2
 801b41e:	d165      	bne.n	801b4ec <mbedtls_x509_crt_parse+0x138>
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 801b420:	e05f      	b.n	801b4e2 <mbedtls_x509_crt_parse+0x12e>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 801b422:	f107 0318 	add.w	r3, r7, #24
 801b426:	4618      	mov	r0, r3
 801b428:	f7f3 fb11 	bl	800ea4e <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
 801b42c:	f107 0018 	add.w	r0, r7, #24
 801b430:	f107 0314 	add.w	r3, r7, #20
 801b434:	9302      	str	r3, [sp, #8]
 801b436:	2300      	movs	r3, #0
 801b438:	9301      	str	r3, [sp, #4]
 801b43a:	2300      	movs	r3, #0
 801b43c:	9300      	str	r3, [sp, #0]
 801b43e:	68bb      	ldr	r3, [r7, #8]
 801b440:	4a34      	ldr	r2, [pc, #208]	; (801b514 <mbedtls_x509_crt_parse+0x160>)
 801b442:	4933      	ldr	r1, [pc, #204]	; (801b510 <mbedtls_x509_crt_parse+0x15c>)
 801b444:	f7f3 fb10 	bl	800ea68 <mbedtls_pem_read_buffer>
 801b448:	6278      	str	r0, [r7, #36]	; 0x24
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );

            if( ret == 0 )
 801b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d117      	bne.n	801b480 <mbedtls_x509_crt_parse+0xcc>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 801b450:	697b      	ldr	r3, [r7, #20]
 801b452:	687a      	ldr	r2, [r7, #4]
 801b454:	1ad3      	subs	r3, r2, r3
 801b456:	607b      	str	r3, [r7, #4]
                buf += use_len;
 801b458:	697b      	ldr	r3, [r7, #20]
 801b45a:	68ba      	ldr	r2, [r7, #8]
 801b45c:	4413      	add	r3, r2
 801b45e:	60bb      	str	r3, [r7, #8]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 801b460:	69bb      	ldr	r3, [r7, #24]
 801b462:	69fa      	ldr	r2, [r7, #28]
 801b464:	4619      	mov	r1, r3
 801b466:	68f8      	ldr	r0, [r7, #12]
 801b468:	f7ff ff3a 	bl	801b2e0 <mbedtls_x509_crt_parse_der>
 801b46c:	6278      	str	r0, [r7, #36]	; 0x24

            mbedtls_pem_free( &pem );
 801b46e:	f107 0318 	add.w	r3, r7, #24
 801b472:	4618      	mov	r0, r3
 801b474:	f7f3 fbd6 	bl	800ec24 <mbedtls_pem_free>

            if( ret != 0 )
 801b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d02f      	beq.n	801b4de <mbedtls_x509_crt_parse+0x12a>
 801b47e:	e01f      	b.n	801b4c0 <mbedtls_x509_crt_parse+0x10c>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 801b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b482:	f513 5fa4 	cmn.w	r3, #5248	; 0x1480
 801b486:	d101      	bne.n	801b48c <mbedtls_x509_crt_parse+0xd8>
                return( ret );
 801b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b48a:	e03a      	b.n	801b502 <mbedtls_x509_crt_parse+0x14e>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 801b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b48e:	f513 5f84 	cmn.w	r3, #4224	; 0x1080
 801b492:	d02a      	beq.n	801b4ea <mbedtls_x509_crt_parse+0x136>
                mbedtls_pem_free( &pem );
 801b494:	f107 0318 	add.w	r3, r7, #24
 801b498:	4618      	mov	r0, r3
 801b49a:	f7f3 fbc3 	bl	800ec24 <mbedtls_pem_free>
                buflen -= use_len;
 801b49e:	697b      	ldr	r3, [r7, #20]
 801b4a0:	687a      	ldr	r2, [r7, #4]
 801b4a2:	1ad3      	subs	r3, r2, r3
 801b4a4:	607b      	str	r3, [r7, #4]
                buf += use_len;
 801b4a6:	697b      	ldr	r3, [r7, #20]
 801b4a8:	68ba      	ldr	r2, [r7, #8]
 801b4aa:	4413      	add	r3, r2
 801b4ac:	60bb      	str	r3, [r7, #8]
                if( first_error == 0 )
 801b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d101      	bne.n	801b4b8 <mbedtls_x509_crt_parse+0x104>
                    first_error = ret;
 801b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4b6:	633b      	str	r3, [r7, #48]	; 0x30
                total_failed++;
 801b4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ba:	3301      	adds	r3, #1
 801b4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                continue;
 801b4be:	e010      	b.n	801b4e2 <mbedtls_x509_crt_parse+0x12e>
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 801b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4c2:	f513 5f22 	cmn.w	r3, #10368	; 0x2880
 801b4c6:	d101      	bne.n	801b4cc <mbedtls_x509_crt_parse+0x118>
                    return( ret );
 801b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ca:	e01a      	b.n	801b502 <mbedtls_x509_crt_parse+0x14e>

                if( first_error == 0 )
 801b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d101      	bne.n	801b4d6 <mbedtls_x509_crt_parse+0x122>
                    first_error = ret;
 801b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4d4:	633b      	str	r3, [r7, #48]	; 0x30

                total_failed++;
 801b4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4d8:	3301      	adds	r3, #1
 801b4da:	62fb      	str	r3, [r7, #44]	; 0x2c
                continue;
 801b4dc:	e001      	b.n	801b4e2 <mbedtls_x509_crt_parse+0x12e>
            }

            success = 1;
 801b4de:	2301      	movs	r3, #1
 801b4e0:	637b      	str	r3, [r7, #52]	; 0x34
        while( buflen > 1 )
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	2b01      	cmp	r3, #1
 801b4e6:	d89c      	bhi.n	801b422 <mbedtls_x509_crt_parse+0x6e>
 801b4e8:	e000      	b.n	801b4ec <mbedtls_x509_crt_parse+0x138>
                break;
 801b4ea:	bf00      	nop
        }
    }

    if( success )
 801b4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d001      	beq.n	801b4f6 <mbedtls_x509_crt_parse+0x142>
        return( total_failed );
 801b4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4f4:	e005      	b.n	801b502 <mbedtls_x509_crt_parse+0x14e>
    else if( first_error )
 801b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d001      	beq.n	801b500 <mbedtls_x509_crt_parse+0x14c>
        return( first_error );
 801b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4fe:	e000      	b.n	801b502 <mbedtls_x509_crt_parse+0x14e>
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 801b500:	4b05      	ldr	r3, [pc, #20]	; (801b518 <mbedtls_x509_crt_parse+0x164>)
#endif /* MBEDTLS_PEM_PARSE_C */
}
 801b502:	4618      	mov	r0, r3
 801b504:	3738      	adds	r7, #56	; 0x38
 801b506:	46bd      	mov	sp, r7
 801b508:	bd80      	pop	{r7, pc}
 801b50a:	bf00      	nop
 801b50c:	ffffd800 	.word	0xffffd800
 801b510:	08023cc4 	.word	0x08023cc4
 801b514:	08023ce0 	.word	0x08023ce0
 801b518:	ffffd880 	.word	0xffffd880

0801b51c <x509_info_subject_alt_name>:
}
#endif /* MBEDTLS_FS_IO */

static int x509_info_subject_alt_name( char **buf, size_t *size,
                                       const mbedtls_x509_sequence *subject_alt_name )
{
 801b51c:	b480      	push	{r7}
 801b51e:	b08b      	sub	sp, #44	; 0x2c
 801b520:	af00      	add	r7, sp, #0
 801b522:	60f8      	str	r0, [r7, #12]
 801b524:	60b9      	str	r1, [r7, #8]
 801b526:	607a      	str	r2, [r7, #4]
    size_t i;
    size_t n = *size;
 801b528:	68bb      	ldr	r3, [r7, #8]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	623b      	str	r3, [r7, #32]
    char *p = *buf;
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	61fb      	str	r3, [r7, #28]
    const mbedtls_x509_sequence *cur = subject_alt_name;
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	61bb      	str	r3, [r7, #24]
    const char *sep = "";
 801b538:	4b2b      	ldr	r3, [pc, #172]	; (801b5e8 <x509_info_subject_alt_name+0xcc>)
 801b53a:	617b      	str	r3, [r7, #20]
    size_t sep_len = 0;
 801b53c:	2300      	movs	r3, #0
 801b53e:	613b      	str	r3, [r7, #16]

    while( cur != NULL )
 801b540:	e03f      	b.n	801b5c2 <x509_info_subject_alt_name+0xa6>
    {
        if( cur->buf.len + sep_len >= n )
 801b542:	69bb      	ldr	r3, [r7, #24]
 801b544:	685a      	ldr	r2, [r3, #4]
 801b546:	693b      	ldr	r3, [r7, #16]
 801b548:	4413      	add	r3, r2
 801b54a:	6a3a      	ldr	r2, [r7, #32]
 801b54c:	429a      	cmp	r2, r3
 801b54e:	d804      	bhi.n	801b55a <x509_info_subject_alt_name+0x3e>
        {
            *p = '\0';
 801b550:	69fb      	ldr	r3, [r7, #28]
 801b552:	2200      	movs	r2, #0
 801b554:	701a      	strb	r2, [r3, #0]
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 801b556:	4b25      	ldr	r3, [pc, #148]	; (801b5ec <x509_info_subject_alt_name+0xd0>)
 801b558:	e040      	b.n	801b5dc <x509_info_subject_alt_name+0xc0>
        }

        n -= cur->buf.len + sep_len;
 801b55a:	69bb      	ldr	r3, [r7, #24]
 801b55c:	685a      	ldr	r2, [r3, #4]
 801b55e:	693b      	ldr	r3, [r7, #16]
 801b560:	4413      	add	r3, r2
 801b562:	6a3a      	ldr	r2, [r7, #32]
 801b564:	1ad3      	subs	r3, r2, r3
 801b566:	623b      	str	r3, [r7, #32]
        for( i = 0; i < sep_len; i++ )
 801b568:	2300      	movs	r3, #0
 801b56a:	627b      	str	r3, [r7, #36]	; 0x24
 801b56c:	e00a      	b.n	801b584 <x509_info_subject_alt_name+0x68>
            *p++ = sep[i];
 801b56e:	697a      	ldr	r2, [r7, #20]
 801b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b572:	441a      	add	r2, r3
 801b574:	69fb      	ldr	r3, [r7, #28]
 801b576:	1c59      	adds	r1, r3, #1
 801b578:	61f9      	str	r1, [r7, #28]
 801b57a:	7812      	ldrb	r2, [r2, #0]
 801b57c:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < sep_len; i++ )
 801b57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b580:	3301      	adds	r3, #1
 801b582:	627b      	str	r3, [r7, #36]	; 0x24
 801b584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b586:	693b      	ldr	r3, [r7, #16]
 801b588:	429a      	cmp	r2, r3
 801b58a:	d3f0      	bcc.n	801b56e <x509_info_subject_alt_name+0x52>
        for( i = 0; i < cur->buf.len; i++ )
 801b58c:	2300      	movs	r3, #0
 801b58e:	627b      	str	r3, [r7, #36]	; 0x24
 801b590:	e00b      	b.n	801b5aa <x509_info_subject_alt_name+0x8e>
            *p++ = cur->buf.p[i];
 801b592:	69bb      	ldr	r3, [r7, #24]
 801b594:	689a      	ldr	r2, [r3, #8]
 801b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b598:	441a      	add	r2, r3
 801b59a:	69fb      	ldr	r3, [r7, #28]
 801b59c:	1c59      	adds	r1, r3, #1
 801b59e:	61f9      	str	r1, [r7, #28]
 801b5a0:	7812      	ldrb	r2, [r2, #0]
 801b5a2:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < cur->buf.len; i++ )
 801b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5a6:	3301      	adds	r3, #1
 801b5a8:	627b      	str	r3, [r7, #36]	; 0x24
 801b5aa:	69bb      	ldr	r3, [r7, #24]
 801b5ac:	685b      	ldr	r3, [r3, #4]
 801b5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b5b0:	429a      	cmp	r2, r3
 801b5b2:	d3ee      	bcc.n	801b592 <x509_info_subject_alt_name+0x76>

        sep = ", ";
 801b5b4:	4b0e      	ldr	r3, [pc, #56]	; (801b5f0 <x509_info_subject_alt_name+0xd4>)
 801b5b6:	617b      	str	r3, [r7, #20]
        sep_len = 2;
 801b5b8:	2302      	movs	r3, #2
 801b5ba:	613b      	str	r3, [r7, #16]

        cur = cur->next;
 801b5bc:	69bb      	ldr	r3, [r7, #24]
 801b5be:	68db      	ldr	r3, [r3, #12]
 801b5c0:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 801b5c2:	69bb      	ldr	r3, [r7, #24]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d1bc      	bne.n	801b542 <x509_info_subject_alt_name+0x26>
    }

    *p = '\0';
 801b5c8:	69fb      	ldr	r3, [r7, #28]
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	701a      	strb	r2, [r3, #0]

    *size = n;
 801b5ce:	68bb      	ldr	r3, [r7, #8]
 801b5d0:	6a3a      	ldr	r2, [r7, #32]
 801b5d2:	601a      	str	r2, [r3, #0]
    *buf = p;
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	69fa      	ldr	r2, [r7, #28]
 801b5d8:	601a      	str	r2, [r3, #0]

    return( 0 );
 801b5da:	2300      	movs	r3, #0
}
 801b5dc:	4618      	mov	r0, r3
 801b5de:	372c      	adds	r7, #44	; 0x2c
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5e6:	4770      	bx	lr
 801b5e8:	08023cfc 	.word	0x08023cfc
 801b5ec:	ffffd680 	.word	0xffffd680
 801b5f0:	08023d00 	.word	0x08023d00

0801b5f4 <x509_info_cert_type>:
    if( ns_cert_type & type )                   \
        PRINT_ITEM( name );

static int x509_info_cert_type( char **buf, size_t *size,
                                unsigned char ns_cert_type )
{
 801b5f4:	b580      	push	{r7, lr}
 801b5f6:	b088      	sub	sp, #32
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	60f8      	str	r0, [r7, #12]
 801b5fc:	60b9      	str	r1, [r7, #8]
 801b5fe:	4613      	mov	r3, r2
 801b600:	71fb      	strb	r3, [r7, #7]
    int ret;
    size_t n = *size;
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	61fb      	str	r3, [r7, #28]
    char *p = *buf;
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	61bb      	str	r3, [r7, #24]
    const char *sep = "";
 801b60e:	4b82      	ldr	r3, [pc, #520]	; (801b818 <x509_info_cert_type+0x224>)
 801b610:	617b      	str	r3, [r7, #20]

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 801b612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b616:	2b00      	cmp	r3, #0
 801b618:	da19      	bge.n	801b64e <x509_info_cert_type+0x5a>
 801b61a:	697b      	ldr	r3, [r7, #20]
 801b61c:	4a7f      	ldr	r2, [pc, #508]	; (801b81c <x509_info_cert_type+0x228>)
 801b61e:	69f9      	ldr	r1, [r7, #28]
 801b620:	69b8      	ldr	r0, [r7, #24]
 801b622:	f002 ff43 	bl	801e4ac <sniprintf>
 801b626:	6138      	str	r0, [r7, #16]
 801b628:	693b      	ldr	r3, [r7, #16]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	db03      	blt.n	801b636 <x509_info_cert_type+0x42>
 801b62e:	693b      	ldr	r3, [r7, #16]
 801b630:	69fa      	ldr	r2, [r7, #28]
 801b632:	429a      	cmp	r2, r3
 801b634:	d801      	bhi.n	801b63a <x509_info_cert_type+0x46>
 801b636:	4b7a      	ldr	r3, [pc, #488]	; (801b820 <x509_info_cert_type+0x22c>)
 801b638:	e0e9      	b.n	801b80e <x509_info_cert_type+0x21a>
 801b63a:	693b      	ldr	r3, [r7, #16]
 801b63c:	69fa      	ldr	r2, [r7, #28]
 801b63e:	1ad3      	subs	r3, r2, r3
 801b640:	61fb      	str	r3, [r7, #28]
 801b642:	693b      	ldr	r3, [r7, #16]
 801b644:	69ba      	ldr	r2, [r7, #24]
 801b646:	4413      	add	r3, r2
 801b648:	61bb      	str	r3, [r7, #24]
 801b64a:	4b76      	ldr	r3, [pc, #472]	; (801b824 <x509_info_cert_type+0x230>)
 801b64c:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 801b64e:	79fb      	ldrb	r3, [r7, #7]
 801b650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b654:	2b00      	cmp	r3, #0
 801b656:	d019      	beq.n	801b68c <x509_info_cert_type+0x98>
 801b658:	697b      	ldr	r3, [r7, #20]
 801b65a:	4a73      	ldr	r2, [pc, #460]	; (801b828 <x509_info_cert_type+0x234>)
 801b65c:	69f9      	ldr	r1, [r7, #28]
 801b65e:	69b8      	ldr	r0, [r7, #24]
 801b660:	f002 ff24 	bl	801e4ac <sniprintf>
 801b664:	6138      	str	r0, [r7, #16]
 801b666:	693b      	ldr	r3, [r7, #16]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	db03      	blt.n	801b674 <x509_info_cert_type+0x80>
 801b66c:	693b      	ldr	r3, [r7, #16]
 801b66e:	69fa      	ldr	r2, [r7, #28]
 801b670:	429a      	cmp	r2, r3
 801b672:	d801      	bhi.n	801b678 <x509_info_cert_type+0x84>
 801b674:	4b6a      	ldr	r3, [pc, #424]	; (801b820 <x509_info_cert_type+0x22c>)
 801b676:	e0ca      	b.n	801b80e <x509_info_cert_type+0x21a>
 801b678:	693b      	ldr	r3, [r7, #16]
 801b67a:	69fa      	ldr	r2, [r7, #28]
 801b67c:	1ad3      	subs	r3, r2, r3
 801b67e:	61fb      	str	r3, [r7, #28]
 801b680:	693b      	ldr	r3, [r7, #16]
 801b682:	69ba      	ldr	r2, [r7, #24]
 801b684:	4413      	add	r3, r2
 801b686:	61bb      	str	r3, [r7, #24]
 801b688:	4b66      	ldr	r3, [pc, #408]	; (801b824 <x509_info_cert_type+0x230>)
 801b68a:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 801b68c:	79fb      	ldrb	r3, [r7, #7]
 801b68e:	f003 0320 	and.w	r3, r3, #32
 801b692:	2b00      	cmp	r3, #0
 801b694:	d019      	beq.n	801b6ca <x509_info_cert_type+0xd6>
 801b696:	697b      	ldr	r3, [r7, #20]
 801b698:	4a64      	ldr	r2, [pc, #400]	; (801b82c <x509_info_cert_type+0x238>)
 801b69a:	69f9      	ldr	r1, [r7, #28]
 801b69c:	69b8      	ldr	r0, [r7, #24]
 801b69e:	f002 ff05 	bl	801e4ac <sniprintf>
 801b6a2:	6138      	str	r0, [r7, #16]
 801b6a4:	693b      	ldr	r3, [r7, #16]
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	db03      	blt.n	801b6b2 <x509_info_cert_type+0xbe>
 801b6aa:	693b      	ldr	r3, [r7, #16]
 801b6ac:	69fa      	ldr	r2, [r7, #28]
 801b6ae:	429a      	cmp	r2, r3
 801b6b0:	d801      	bhi.n	801b6b6 <x509_info_cert_type+0xc2>
 801b6b2:	4b5b      	ldr	r3, [pc, #364]	; (801b820 <x509_info_cert_type+0x22c>)
 801b6b4:	e0ab      	b.n	801b80e <x509_info_cert_type+0x21a>
 801b6b6:	693b      	ldr	r3, [r7, #16]
 801b6b8:	69fa      	ldr	r2, [r7, #28]
 801b6ba:	1ad3      	subs	r3, r2, r3
 801b6bc:	61fb      	str	r3, [r7, #28]
 801b6be:	693b      	ldr	r3, [r7, #16]
 801b6c0:	69ba      	ldr	r2, [r7, #24]
 801b6c2:	4413      	add	r3, r2
 801b6c4:	61bb      	str	r3, [r7, #24]
 801b6c6:	4b57      	ldr	r3, [pc, #348]	; (801b824 <x509_info_cert_type+0x230>)
 801b6c8:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 801b6ca:	79fb      	ldrb	r3, [r7, #7]
 801b6cc:	f003 0310 	and.w	r3, r3, #16
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d019      	beq.n	801b708 <x509_info_cert_type+0x114>
 801b6d4:	697b      	ldr	r3, [r7, #20]
 801b6d6:	4a56      	ldr	r2, [pc, #344]	; (801b830 <x509_info_cert_type+0x23c>)
 801b6d8:	69f9      	ldr	r1, [r7, #28]
 801b6da:	69b8      	ldr	r0, [r7, #24]
 801b6dc:	f002 fee6 	bl	801e4ac <sniprintf>
 801b6e0:	6138      	str	r0, [r7, #16]
 801b6e2:	693b      	ldr	r3, [r7, #16]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	db03      	blt.n	801b6f0 <x509_info_cert_type+0xfc>
 801b6e8:	693b      	ldr	r3, [r7, #16]
 801b6ea:	69fa      	ldr	r2, [r7, #28]
 801b6ec:	429a      	cmp	r2, r3
 801b6ee:	d801      	bhi.n	801b6f4 <x509_info_cert_type+0x100>
 801b6f0:	4b4b      	ldr	r3, [pc, #300]	; (801b820 <x509_info_cert_type+0x22c>)
 801b6f2:	e08c      	b.n	801b80e <x509_info_cert_type+0x21a>
 801b6f4:	693b      	ldr	r3, [r7, #16]
 801b6f6:	69fa      	ldr	r2, [r7, #28]
 801b6f8:	1ad3      	subs	r3, r2, r3
 801b6fa:	61fb      	str	r3, [r7, #28]
 801b6fc:	693b      	ldr	r3, [r7, #16]
 801b6fe:	69ba      	ldr	r2, [r7, #24]
 801b700:	4413      	add	r3, r2
 801b702:	61bb      	str	r3, [r7, #24]
 801b704:	4b47      	ldr	r3, [pc, #284]	; (801b824 <x509_info_cert_type+0x230>)
 801b706:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 801b708:	79fb      	ldrb	r3, [r7, #7]
 801b70a:	f003 0308 	and.w	r3, r3, #8
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d019      	beq.n	801b746 <x509_info_cert_type+0x152>
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	4a47      	ldr	r2, [pc, #284]	; (801b834 <x509_info_cert_type+0x240>)
 801b716:	69f9      	ldr	r1, [r7, #28]
 801b718:	69b8      	ldr	r0, [r7, #24]
 801b71a:	f002 fec7 	bl	801e4ac <sniprintf>
 801b71e:	6138      	str	r0, [r7, #16]
 801b720:	693b      	ldr	r3, [r7, #16]
 801b722:	2b00      	cmp	r3, #0
 801b724:	db03      	blt.n	801b72e <x509_info_cert_type+0x13a>
 801b726:	693b      	ldr	r3, [r7, #16]
 801b728:	69fa      	ldr	r2, [r7, #28]
 801b72a:	429a      	cmp	r2, r3
 801b72c:	d801      	bhi.n	801b732 <x509_info_cert_type+0x13e>
 801b72e:	4b3c      	ldr	r3, [pc, #240]	; (801b820 <x509_info_cert_type+0x22c>)
 801b730:	e06d      	b.n	801b80e <x509_info_cert_type+0x21a>
 801b732:	693b      	ldr	r3, [r7, #16]
 801b734:	69fa      	ldr	r2, [r7, #28]
 801b736:	1ad3      	subs	r3, r2, r3
 801b738:	61fb      	str	r3, [r7, #28]
 801b73a:	693b      	ldr	r3, [r7, #16]
 801b73c:	69ba      	ldr	r2, [r7, #24]
 801b73e:	4413      	add	r3, r2
 801b740:	61bb      	str	r3, [r7, #24]
 801b742:	4b38      	ldr	r3, [pc, #224]	; (801b824 <x509_info_cert_type+0x230>)
 801b744:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 801b746:	79fb      	ldrb	r3, [r7, #7]
 801b748:	f003 0304 	and.w	r3, r3, #4
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d019      	beq.n	801b784 <x509_info_cert_type+0x190>
 801b750:	697b      	ldr	r3, [r7, #20]
 801b752:	4a39      	ldr	r2, [pc, #228]	; (801b838 <x509_info_cert_type+0x244>)
 801b754:	69f9      	ldr	r1, [r7, #28]
 801b756:	69b8      	ldr	r0, [r7, #24]
 801b758:	f002 fea8 	bl	801e4ac <sniprintf>
 801b75c:	6138      	str	r0, [r7, #16]
 801b75e:	693b      	ldr	r3, [r7, #16]
 801b760:	2b00      	cmp	r3, #0
 801b762:	db03      	blt.n	801b76c <x509_info_cert_type+0x178>
 801b764:	693b      	ldr	r3, [r7, #16]
 801b766:	69fa      	ldr	r2, [r7, #28]
 801b768:	429a      	cmp	r2, r3
 801b76a:	d801      	bhi.n	801b770 <x509_info_cert_type+0x17c>
 801b76c:	4b2c      	ldr	r3, [pc, #176]	; (801b820 <x509_info_cert_type+0x22c>)
 801b76e:	e04e      	b.n	801b80e <x509_info_cert_type+0x21a>
 801b770:	693b      	ldr	r3, [r7, #16]
 801b772:	69fa      	ldr	r2, [r7, #28]
 801b774:	1ad3      	subs	r3, r2, r3
 801b776:	61fb      	str	r3, [r7, #28]
 801b778:	693b      	ldr	r3, [r7, #16]
 801b77a:	69ba      	ldr	r2, [r7, #24]
 801b77c:	4413      	add	r3, r2
 801b77e:	61bb      	str	r3, [r7, #24]
 801b780:	4b28      	ldr	r3, [pc, #160]	; (801b824 <x509_info_cert_type+0x230>)
 801b782:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 801b784:	79fb      	ldrb	r3, [r7, #7]
 801b786:	f003 0302 	and.w	r3, r3, #2
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d019      	beq.n	801b7c2 <x509_info_cert_type+0x1ce>
 801b78e:	697b      	ldr	r3, [r7, #20]
 801b790:	4a2a      	ldr	r2, [pc, #168]	; (801b83c <x509_info_cert_type+0x248>)
 801b792:	69f9      	ldr	r1, [r7, #28]
 801b794:	69b8      	ldr	r0, [r7, #24]
 801b796:	f002 fe89 	bl	801e4ac <sniprintf>
 801b79a:	6138      	str	r0, [r7, #16]
 801b79c:	693b      	ldr	r3, [r7, #16]
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	db03      	blt.n	801b7aa <x509_info_cert_type+0x1b6>
 801b7a2:	693b      	ldr	r3, [r7, #16]
 801b7a4:	69fa      	ldr	r2, [r7, #28]
 801b7a6:	429a      	cmp	r2, r3
 801b7a8:	d801      	bhi.n	801b7ae <x509_info_cert_type+0x1ba>
 801b7aa:	4b1d      	ldr	r3, [pc, #116]	; (801b820 <x509_info_cert_type+0x22c>)
 801b7ac:	e02f      	b.n	801b80e <x509_info_cert_type+0x21a>
 801b7ae:	693b      	ldr	r3, [r7, #16]
 801b7b0:	69fa      	ldr	r2, [r7, #28]
 801b7b2:	1ad3      	subs	r3, r2, r3
 801b7b4:	61fb      	str	r3, [r7, #28]
 801b7b6:	693b      	ldr	r3, [r7, #16]
 801b7b8:	69ba      	ldr	r2, [r7, #24]
 801b7ba:	4413      	add	r3, r2
 801b7bc:	61bb      	str	r3, [r7, #24]
 801b7be:	4b19      	ldr	r3, [pc, #100]	; (801b824 <x509_info_cert_type+0x230>)
 801b7c0:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 801b7c2:	79fb      	ldrb	r3, [r7, #7]
 801b7c4:	f003 0301 	and.w	r3, r3, #1
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d019      	beq.n	801b800 <x509_info_cert_type+0x20c>
 801b7cc:	697b      	ldr	r3, [r7, #20]
 801b7ce:	4a1c      	ldr	r2, [pc, #112]	; (801b840 <x509_info_cert_type+0x24c>)
 801b7d0:	69f9      	ldr	r1, [r7, #28]
 801b7d2:	69b8      	ldr	r0, [r7, #24]
 801b7d4:	f002 fe6a 	bl	801e4ac <sniprintf>
 801b7d8:	6138      	str	r0, [r7, #16]
 801b7da:	693b      	ldr	r3, [r7, #16]
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	db03      	blt.n	801b7e8 <x509_info_cert_type+0x1f4>
 801b7e0:	693b      	ldr	r3, [r7, #16]
 801b7e2:	69fa      	ldr	r2, [r7, #28]
 801b7e4:	429a      	cmp	r2, r3
 801b7e6:	d801      	bhi.n	801b7ec <x509_info_cert_type+0x1f8>
 801b7e8:	4b0d      	ldr	r3, [pc, #52]	; (801b820 <x509_info_cert_type+0x22c>)
 801b7ea:	e010      	b.n	801b80e <x509_info_cert_type+0x21a>
 801b7ec:	693b      	ldr	r3, [r7, #16]
 801b7ee:	69fa      	ldr	r2, [r7, #28]
 801b7f0:	1ad3      	subs	r3, r2, r3
 801b7f2:	61fb      	str	r3, [r7, #28]
 801b7f4:	693b      	ldr	r3, [r7, #16]
 801b7f6:	69ba      	ldr	r2, [r7, #24]
 801b7f8:	4413      	add	r3, r2
 801b7fa:	61bb      	str	r3, [r7, #24]
 801b7fc:	4b09      	ldr	r3, [pc, #36]	; (801b824 <x509_info_cert_type+0x230>)
 801b7fe:	617b      	str	r3, [r7, #20]

    *size = n;
 801b800:	68bb      	ldr	r3, [r7, #8]
 801b802:	69fa      	ldr	r2, [r7, #28]
 801b804:	601a      	str	r2, [r3, #0]
    *buf = p;
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	69ba      	ldr	r2, [r7, #24]
 801b80a:	601a      	str	r2, [r3, #0]

    return( 0 );
 801b80c:	2300      	movs	r3, #0
}
 801b80e:	4618      	mov	r0, r3
 801b810:	3720      	adds	r7, #32
 801b812:	46bd      	mov	sp, r7
 801b814:	bd80      	pop	{r7, pc}
 801b816:	bf00      	nop
 801b818:	08023cfc 	.word	0x08023cfc
 801b81c:	08023d04 	.word	0x08023d04
 801b820:	ffffd680 	.word	0xffffd680
 801b824:	08023d00 	.word	0x08023d00
 801b828:	08023d14 	.word	0x08023d14
 801b82c:	08023d24 	.word	0x08023d24
 801b830:	08023d2c 	.word	0x08023d2c
 801b834:	08023d40 	.word	0x08023d40
 801b838:	08023d4c 	.word	0x08023d4c
 801b83c:	08023d58 	.word	0x08023d58
 801b840:	08023d64 	.word	0x08023d64

0801b844 <x509_info_key_usage>:
    if( key_usage & code )      \
        PRINT_ITEM( name );

static int x509_info_key_usage( char **buf, size_t *size,
                                unsigned int key_usage )
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b088      	sub	sp, #32
 801b848:	af00      	add	r7, sp, #0
 801b84a:	60f8      	str	r0, [r7, #12]
 801b84c:	60b9      	str	r1, [r7, #8]
 801b84e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t n = *size;
 801b850:	68bb      	ldr	r3, [r7, #8]
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	61fb      	str	r3, [r7, #28]
    char *p = *buf;
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	61bb      	str	r3, [r7, #24]
    const char *sep = "";
 801b85c:	4b87      	ldr	r3, [pc, #540]	; (801ba7c <x509_info_key_usage+0x238>)
 801b85e:	617b      	str	r3, [r7, #20]

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b866:	2b00      	cmp	r3, #0
 801b868:	d019      	beq.n	801b89e <x509_info_key_usage+0x5a>
 801b86a:	697b      	ldr	r3, [r7, #20]
 801b86c:	4a84      	ldr	r2, [pc, #528]	; (801ba80 <x509_info_key_usage+0x23c>)
 801b86e:	69f9      	ldr	r1, [r7, #28]
 801b870:	69b8      	ldr	r0, [r7, #24]
 801b872:	f002 fe1b 	bl	801e4ac <sniprintf>
 801b876:	6138      	str	r0, [r7, #16]
 801b878:	693b      	ldr	r3, [r7, #16]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	db03      	blt.n	801b886 <x509_info_key_usage+0x42>
 801b87e:	693b      	ldr	r3, [r7, #16]
 801b880:	69fa      	ldr	r2, [r7, #28]
 801b882:	429a      	cmp	r2, r3
 801b884:	d801      	bhi.n	801b88a <x509_info_key_usage+0x46>
 801b886:	4b7f      	ldr	r3, [pc, #508]	; (801ba84 <x509_info_key_usage+0x240>)
 801b888:	e121      	b.n	801bace <x509_info_key_usage+0x28a>
 801b88a:	693b      	ldr	r3, [r7, #16]
 801b88c:	69fa      	ldr	r2, [r7, #28]
 801b88e:	1ad3      	subs	r3, r2, r3
 801b890:	61fb      	str	r3, [r7, #28]
 801b892:	693b      	ldr	r3, [r7, #16]
 801b894:	69ba      	ldr	r2, [r7, #24]
 801b896:	4413      	add	r3, r2
 801b898:	61bb      	str	r3, [r7, #24]
 801b89a:	4b7b      	ldr	r3, [pc, #492]	; (801ba88 <x509_info_key_usage+0x244>)
 801b89c:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d019      	beq.n	801b8dc <x509_info_key_usage+0x98>
 801b8a8:	697b      	ldr	r3, [r7, #20]
 801b8aa:	4a78      	ldr	r2, [pc, #480]	; (801ba8c <x509_info_key_usage+0x248>)
 801b8ac:	69f9      	ldr	r1, [r7, #28]
 801b8ae:	69b8      	ldr	r0, [r7, #24]
 801b8b0:	f002 fdfc 	bl	801e4ac <sniprintf>
 801b8b4:	6138      	str	r0, [r7, #16]
 801b8b6:	693b      	ldr	r3, [r7, #16]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	db03      	blt.n	801b8c4 <x509_info_key_usage+0x80>
 801b8bc:	693b      	ldr	r3, [r7, #16]
 801b8be:	69fa      	ldr	r2, [r7, #28]
 801b8c0:	429a      	cmp	r2, r3
 801b8c2:	d801      	bhi.n	801b8c8 <x509_info_key_usage+0x84>
 801b8c4:	4b6f      	ldr	r3, [pc, #444]	; (801ba84 <x509_info_key_usage+0x240>)
 801b8c6:	e102      	b.n	801bace <x509_info_key_usage+0x28a>
 801b8c8:	693b      	ldr	r3, [r7, #16]
 801b8ca:	69fa      	ldr	r2, [r7, #28]
 801b8cc:	1ad3      	subs	r3, r2, r3
 801b8ce:	61fb      	str	r3, [r7, #28]
 801b8d0:	693b      	ldr	r3, [r7, #16]
 801b8d2:	69ba      	ldr	r2, [r7, #24]
 801b8d4:	4413      	add	r3, r2
 801b8d6:	61bb      	str	r3, [r7, #24]
 801b8d8:	4b6b      	ldr	r3, [pc, #428]	; (801ba88 <x509_info_key_usage+0x244>)
 801b8da:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	f003 0320 	and.w	r3, r3, #32
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d019      	beq.n	801b91a <x509_info_key_usage+0xd6>
 801b8e6:	697b      	ldr	r3, [r7, #20]
 801b8e8:	4a69      	ldr	r2, [pc, #420]	; (801ba90 <x509_info_key_usage+0x24c>)
 801b8ea:	69f9      	ldr	r1, [r7, #28]
 801b8ec:	69b8      	ldr	r0, [r7, #24]
 801b8ee:	f002 fddd 	bl	801e4ac <sniprintf>
 801b8f2:	6138      	str	r0, [r7, #16]
 801b8f4:	693b      	ldr	r3, [r7, #16]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	db03      	blt.n	801b902 <x509_info_key_usage+0xbe>
 801b8fa:	693b      	ldr	r3, [r7, #16]
 801b8fc:	69fa      	ldr	r2, [r7, #28]
 801b8fe:	429a      	cmp	r2, r3
 801b900:	d801      	bhi.n	801b906 <x509_info_key_usage+0xc2>
 801b902:	4b60      	ldr	r3, [pc, #384]	; (801ba84 <x509_info_key_usage+0x240>)
 801b904:	e0e3      	b.n	801bace <x509_info_key_usage+0x28a>
 801b906:	693b      	ldr	r3, [r7, #16]
 801b908:	69fa      	ldr	r2, [r7, #28]
 801b90a:	1ad3      	subs	r3, r2, r3
 801b90c:	61fb      	str	r3, [r7, #28]
 801b90e:	693b      	ldr	r3, [r7, #16]
 801b910:	69ba      	ldr	r2, [r7, #24]
 801b912:	4413      	add	r3, r2
 801b914:	61bb      	str	r3, [r7, #24]
 801b916:	4b5c      	ldr	r3, [pc, #368]	; (801ba88 <x509_info_key_usage+0x244>)
 801b918:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	f003 0310 	and.w	r3, r3, #16
 801b920:	2b00      	cmp	r3, #0
 801b922:	d019      	beq.n	801b958 <x509_info_key_usage+0x114>
 801b924:	697b      	ldr	r3, [r7, #20]
 801b926:	4a5b      	ldr	r2, [pc, #364]	; (801ba94 <x509_info_key_usage+0x250>)
 801b928:	69f9      	ldr	r1, [r7, #28]
 801b92a:	69b8      	ldr	r0, [r7, #24]
 801b92c:	f002 fdbe 	bl	801e4ac <sniprintf>
 801b930:	6138      	str	r0, [r7, #16]
 801b932:	693b      	ldr	r3, [r7, #16]
 801b934:	2b00      	cmp	r3, #0
 801b936:	db03      	blt.n	801b940 <x509_info_key_usage+0xfc>
 801b938:	693b      	ldr	r3, [r7, #16]
 801b93a:	69fa      	ldr	r2, [r7, #28]
 801b93c:	429a      	cmp	r2, r3
 801b93e:	d801      	bhi.n	801b944 <x509_info_key_usage+0x100>
 801b940:	4b50      	ldr	r3, [pc, #320]	; (801ba84 <x509_info_key_usage+0x240>)
 801b942:	e0c4      	b.n	801bace <x509_info_key_usage+0x28a>
 801b944:	693b      	ldr	r3, [r7, #16]
 801b946:	69fa      	ldr	r2, [r7, #28]
 801b948:	1ad3      	subs	r3, r2, r3
 801b94a:	61fb      	str	r3, [r7, #28]
 801b94c:	693b      	ldr	r3, [r7, #16]
 801b94e:	69ba      	ldr	r2, [r7, #24]
 801b950:	4413      	add	r3, r2
 801b952:	61bb      	str	r3, [r7, #24]
 801b954:	4b4c      	ldr	r3, [pc, #304]	; (801ba88 <x509_info_key_usage+0x244>)
 801b956:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	f003 0308 	and.w	r3, r3, #8
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d019      	beq.n	801b996 <x509_info_key_usage+0x152>
 801b962:	697b      	ldr	r3, [r7, #20]
 801b964:	4a4c      	ldr	r2, [pc, #304]	; (801ba98 <x509_info_key_usage+0x254>)
 801b966:	69f9      	ldr	r1, [r7, #28]
 801b968:	69b8      	ldr	r0, [r7, #24]
 801b96a:	f002 fd9f 	bl	801e4ac <sniprintf>
 801b96e:	6138      	str	r0, [r7, #16]
 801b970:	693b      	ldr	r3, [r7, #16]
 801b972:	2b00      	cmp	r3, #0
 801b974:	db03      	blt.n	801b97e <x509_info_key_usage+0x13a>
 801b976:	693b      	ldr	r3, [r7, #16]
 801b978:	69fa      	ldr	r2, [r7, #28]
 801b97a:	429a      	cmp	r2, r3
 801b97c:	d801      	bhi.n	801b982 <x509_info_key_usage+0x13e>
 801b97e:	4b41      	ldr	r3, [pc, #260]	; (801ba84 <x509_info_key_usage+0x240>)
 801b980:	e0a5      	b.n	801bace <x509_info_key_usage+0x28a>
 801b982:	693b      	ldr	r3, [r7, #16]
 801b984:	69fa      	ldr	r2, [r7, #28]
 801b986:	1ad3      	subs	r3, r2, r3
 801b988:	61fb      	str	r3, [r7, #28]
 801b98a:	693b      	ldr	r3, [r7, #16]
 801b98c:	69ba      	ldr	r2, [r7, #24]
 801b98e:	4413      	add	r3, r2
 801b990:	61bb      	str	r3, [r7, #24]
 801b992:	4b3d      	ldr	r3, [pc, #244]	; (801ba88 <x509_info_key_usage+0x244>)
 801b994:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	f003 0304 	and.w	r3, r3, #4
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d019      	beq.n	801b9d4 <x509_info_key_usage+0x190>
 801b9a0:	697b      	ldr	r3, [r7, #20]
 801b9a2:	4a3e      	ldr	r2, [pc, #248]	; (801ba9c <x509_info_key_usage+0x258>)
 801b9a4:	69f9      	ldr	r1, [r7, #28]
 801b9a6:	69b8      	ldr	r0, [r7, #24]
 801b9a8:	f002 fd80 	bl	801e4ac <sniprintf>
 801b9ac:	6138      	str	r0, [r7, #16]
 801b9ae:	693b      	ldr	r3, [r7, #16]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	db03      	blt.n	801b9bc <x509_info_key_usage+0x178>
 801b9b4:	693b      	ldr	r3, [r7, #16]
 801b9b6:	69fa      	ldr	r2, [r7, #28]
 801b9b8:	429a      	cmp	r2, r3
 801b9ba:	d801      	bhi.n	801b9c0 <x509_info_key_usage+0x17c>
 801b9bc:	4b31      	ldr	r3, [pc, #196]	; (801ba84 <x509_info_key_usage+0x240>)
 801b9be:	e086      	b.n	801bace <x509_info_key_usage+0x28a>
 801b9c0:	693b      	ldr	r3, [r7, #16]
 801b9c2:	69fa      	ldr	r2, [r7, #28]
 801b9c4:	1ad3      	subs	r3, r2, r3
 801b9c6:	61fb      	str	r3, [r7, #28]
 801b9c8:	693b      	ldr	r3, [r7, #16]
 801b9ca:	69ba      	ldr	r2, [r7, #24]
 801b9cc:	4413      	add	r3, r2
 801b9ce:	61bb      	str	r3, [r7, #24]
 801b9d0:	4b2d      	ldr	r3, [pc, #180]	; (801ba88 <x509_info_key_usage+0x244>)
 801b9d2:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	f003 0302 	and.w	r3, r3, #2
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d019      	beq.n	801ba12 <x509_info_key_usage+0x1ce>
 801b9de:	697b      	ldr	r3, [r7, #20]
 801b9e0:	4a2f      	ldr	r2, [pc, #188]	; (801baa0 <x509_info_key_usage+0x25c>)
 801b9e2:	69f9      	ldr	r1, [r7, #28]
 801b9e4:	69b8      	ldr	r0, [r7, #24]
 801b9e6:	f002 fd61 	bl	801e4ac <sniprintf>
 801b9ea:	6138      	str	r0, [r7, #16]
 801b9ec:	693b      	ldr	r3, [r7, #16]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	db03      	blt.n	801b9fa <x509_info_key_usage+0x1b6>
 801b9f2:	693b      	ldr	r3, [r7, #16]
 801b9f4:	69fa      	ldr	r2, [r7, #28]
 801b9f6:	429a      	cmp	r2, r3
 801b9f8:	d801      	bhi.n	801b9fe <x509_info_key_usage+0x1ba>
 801b9fa:	4b22      	ldr	r3, [pc, #136]	; (801ba84 <x509_info_key_usage+0x240>)
 801b9fc:	e067      	b.n	801bace <x509_info_key_usage+0x28a>
 801b9fe:	693b      	ldr	r3, [r7, #16]
 801ba00:	69fa      	ldr	r2, [r7, #28]
 801ba02:	1ad3      	subs	r3, r2, r3
 801ba04:	61fb      	str	r3, [r7, #28]
 801ba06:	693b      	ldr	r3, [r7, #16]
 801ba08:	69ba      	ldr	r2, [r7, #24]
 801ba0a:	4413      	add	r3, r2
 801ba0c:	61bb      	str	r3, [r7, #24]
 801ba0e:	4b1e      	ldr	r3, [pc, #120]	; (801ba88 <x509_info_key_usage+0x244>)
 801ba10:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	f003 0301 	and.w	r3, r3, #1
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d019      	beq.n	801ba50 <x509_info_key_usage+0x20c>
 801ba1c:	697b      	ldr	r3, [r7, #20]
 801ba1e:	4a21      	ldr	r2, [pc, #132]	; (801baa4 <x509_info_key_usage+0x260>)
 801ba20:	69f9      	ldr	r1, [r7, #28]
 801ba22:	69b8      	ldr	r0, [r7, #24]
 801ba24:	f002 fd42 	bl	801e4ac <sniprintf>
 801ba28:	6138      	str	r0, [r7, #16]
 801ba2a:	693b      	ldr	r3, [r7, #16]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	db03      	blt.n	801ba38 <x509_info_key_usage+0x1f4>
 801ba30:	693b      	ldr	r3, [r7, #16]
 801ba32:	69fa      	ldr	r2, [r7, #28]
 801ba34:	429a      	cmp	r2, r3
 801ba36:	d801      	bhi.n	801ba3c <x509_info_key_usage+0x1f8>
 801ba38:	4b12      	ldr	r3, [pc, #72]	; (801ba84 <x509_info_key_usage+0x240>)
 801ba3a:	e048      	b.n	801bace <x509_info_key_usage+0x28a>
 801ba3c:	693b      	ldr	r3, [r7, #16]
 801ba3e:	69fa      	ldr	r2, [r7, #28]
 801ba40:	1ad3      	subs	r3, r2, r3
 801ba42:	61fb      	str	r3, [r7, #28]
 801ba44:	693b      	ldr	r3, [r7, #16]
 801ba46:	69ba      	ldr	r2, [r7, #24]
 801ba48:	4413      	add	r3, r2
 801ba4a:	61bb      	str	r3, [r7, #24]
 801ba4c:	4b0e      	ldr	r3, [pc, #56]	; (801ba88 <x509_info_key_usage+0x244>)
 801ba4e:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d032      	beq.n	801bac0 <x509_info_key_usage+0x27c>
 801ba5a:	697b      	ldr	r3, [r7, #20]
 801ba5c:	4a12      	ldr	r2, [pc, #72]	; (801baa8 <x509_info_key_usage+0x264>)
 801ba5e:	69f9      	ldr	r1, [r7, #28]
 801ba60:	69b8      	ldr	r0, [r7, #24]
 801ba62:	f002 fd23 	bl	801e4ac <sniprintf>
 801ba66:	6138      	str	r0, [r7, #16]
 801ba68:	693b      	ldr	r3, [r7, #16]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	db03      	blt.n	801ba76 <x509_info_key_usage+0x232>
 801ba6e:	693b      	ldr	r3, [r7, #16]
 801ba70:	69fa      	ldr	r2, [r7, #28]
 801ba72:	429a      	cmp	r2, r3
 801ba74:	d81a      	bhi.n	801baac <x509_info_key_usage+0x268>
 801ba76:	4b03      	ldr	r3, [pc, #12]	; (801ba84 <x509_info_key_usage+0x240>)
 801ba78:	e029      	b.n	801bace <x509_info_key_usage+0x28a>
 801ba7a:	bf00      	nop
 801ba7c:	08023cfc 	.word	0x08023cfc
 801ba80:	08023d78 	.word	0x08023d78
 801ba84:	ffffd680 	.word	0xffffd680
 801ba88:	08023d00 	.word	0x08023d00
 801ba8c:	08023d8c 	.word	0x08023d8c
 801ba90:	08023da0 	.word	0x08023da0
 801ba94:	08023db4 	.word	0x08023db4
 801ba98:	08023dc8 	.word	0x08023dc8
 801ba9c:	08023dd8 	.word	0x08023dd8
 801baa0:	08023de8 	.word	0x08023de8
 801baa4:	08023df4 	.word	0x08023df4
 801baa8:	08023e04 	.word	0x08023e04
 801baac:	693b      	ldr	r3, [r7, #16]
 801baae:	69fa      	ldr	r2, [r7, #28]
 801bab0:	1ad3      	subs	r3, r2, r3
 801bab2:	61fb      	str	r3, [r7, #28]
 801bab4:	693b      	ldr	r3, [r7, #16]
 801bab6:	69ba      	ldr	r2, [r7, #24]
 801bab8:	4413      	add	r3, r2
 801baba:	61bb      	str	r3, [r7, #24]
 801babc:	4b06      	ldr	r3, [pc, #24]	; (801bad8 <x509_info_key_usage+0x294>)
 801babe:	617b      	str	r3, [r7, #20]

    *size = n;
 801bac0:	68bb      	ldr	r3, [r7, #8]
 801bac2:	69fa      	ldr	r2, [r7, #28]
 801bac4:	601a      	str	r2, [r3, #0]
    *buf = p;
 801bac6:	68fb      	ldr	r3, [r7, #12]
 801bac8:	69ba      	ldr	r2, [r7, #24]
 801baca:	601a      	str	r2, [r3, #0]

    return( 0 );
 801bacc:	2300      	movs	r3, #0
}
 801bace:	4618      	mov	r0, r3
 801bad0:	3720      	adds	r7, #32
 801bad2:	46bd      	mov	sp, r7
 801bad4:	bd80      	pop	{r7, pc}
 801bad6:	bf00      	nop
 801bad8:	08023d00 	.word	0x08023d00

0801badc <x509_info_ext_key_usage>:

static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
 801badc:	b580      	push	{r7, lr}
 801bade:	b08c      	sub	sp, #48	; 0x30
 801bae0:	af02      	add	r7, sp, #8
 801bae2:	60f8      	str	r0, [r7, #12]
 801bae4:	60b9      	str	r1, [r7, #8]
 801bae6:	607a      	str	r2, [r7, #4]
    int ret;
    const char *desc;
    size_t n = *size;
 801bae8:	68bb      	ldr	r3, [r7, #8]
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	627b      	str	r3, [r7, #36]	; 0x24
    char *p = *buf;
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	623b      	str	r3, [r7, #32]
    const mbedtls_x509_sequence *cur = extended_key_usage;
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	61fb      	str	r3, [r7, #28]
    const char *sep = "";
 801baf8:	4b1d      	ldr	r3, [pc, #116]	; (801bb70 <x509_info_ext_key_usage+0x94>)
 801bafa:	61bb      	str	r3, [r7, #24]

    while( cur != NULL )
 801bafc:	e02a      	b.n	801bb54 <x509_info_ext_key_usage+0x78>
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 801bafe:	69fb      	ldr	r3, [r7, #28]
 801bb00:	f107 0210 	add.w	r2, r7, #16
 801bb04:	4611      	mov	r1, r2
 801bb06:	4618      	mov	r0, r3
 801bb08:	f7f2 fe90 	bl	800e82c <mbedtls_oid_get_extended_key_usage>
 801bb0c:	4603      	mov	r3, r0
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d001      	beq.n	801bb16 <x509_info_ext_key_usage+0x3a>
            desc = "???";
 801bb12:	4b18      	ldr	r3, [pc, #96]	; (801bb74 <x509_info_ext_key_usage+0x98>)
 801bb14:	613b      	str	r3, [r7, #16]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 801bb16:	693b      	ldr	r3, [r7, #16]
 801bb18:	9300      	str	r3, [sp, #0]
 801bb1a:	69bb      	ldr	r3, [r7, #24]
 801bb1c:	4a16      	ldr	r2, [pc, #88]	; (801bb78 <x509_info_ext_key_usage+0x9c>)
 801bb1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bb20:	6a38      	ldr	r0, [r7, #32]
 801bb22:	f002 fcc3 	bl	801e4ac <sniprintf>
 801bb26:	6178      	str	r0, [r7, #20]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	db03      	blt.n	801bb36 <x509_info_ext_key_usage+0x5a>
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bb32:	429a      	cmp	r2, r3
 801bb34:	d801      	bhi.n	801bb3a <x509_info_ext_key_usage+0x5e>
 801bb36:	4b11      	ldr	r3, [pc, #68]	; (801bb7c <x509_info_ext_key_usage+0xa0>)
 801bb38:	e016      	b.n	801bb68 <x509_info_ext_key_usage+0x8c>
 801bb3a:	697b      	ldr	r3, [r7, #20]
 801bb3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bb3e:	1ad3      	subs	r3, r2, r3
 801bb40:	627b      	str	r3, [r7, #36]	; 0x24
 801bb42:	697b      	ldr	r3, [r7, #20]
 801bb44:	6a3a      	ldr	r2, [r7, #32]
 801bb46:	4413      	add	r3, r2
 801bb48:	623b      	str	r3, [r7, #32]

        sep = ", ";
 801bb4a:	4b0d      	ldr	r3, [pc, #52]	; (801bb80 <x509_info_ext_key_usage+0xa4>)
 801bb4c:	61bb      	str	r3, [r7, #24]

        cur = cur->next;
 801bb4e:	69fb      	ldr	r3, [r7, #28]
 801bb50:	68db      	ldr	r3, [r3, #12]
 801bb52:	61fb      	str	r3, [r7, #28]
    while( cur != NULL )
 801bb54:	69fb      	ldr	r3, [r7, #28]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d1d1      	bne.n	801bafe <x509_info_ext_key_usage+0x22>
    }

    *size = n;
 801bb5a:	68bb      	ldr	r3, [r7, #8]
 801bb5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bb5e:	601a      	str	r2, [r3, #0]
    *buf = p;
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	6a3a      	ldr	r2, [r7, #32]
 801bb64:	601a      	str	r2, [r3, #0]

    return( 0 );
 801bb66:	2300      	movs	r3, #0
}
 801bb68:	4618      	mov	r0, r3
 801bb6a:	3728      	adds	r7, #40	; 0x28
 801bb6c:	46bd      	mov	sp, r7
 801bb6e:	bd80      	pop	{r7, pc}
 801bb70:	08023cfc 	.word	0x08023cfc
 801bb74:	08023e14 	.word	0x08023e14
 801bb78:	08023e18 	.word	0x08023e18
 801bb7c:	ffffd680 	.word	0xffffd680
 801bb80:	08023d00 	.word	0x08023d00

0801bb84 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 801bb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb86:	b095      	sub	sp, #84	; 0x54
 801bb88:	af06      	add	r7, sp, #24
 801bb8a:	6178      	str	r0, [r7, #20]
 801bb8c:	6139      	str	r1, [r7, #16]
 801bb8e:	60fa      	str	r2, [r7, #12]
 801bb90:	60bb      	str	r3, [r7, #8]
    int ret;
    size_t n;
    char *p;
    char key_size_str[BEFORE_COLON];

    p = buf;
 801bb92:	697b      	ldr	r3, [r7, #20]
 801bb94:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = size;
 801bb96:	693b      	ldr	r3, [r7, #16]
 801bb98:	633b      	str	r3, [r7, #48]	; 0x30

    if( NULL == crt )
 801bb9a:	68bb      	ldr	r3, [r7, #8]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d11b      	bne.n	801bbd8 <mbedtls_x509_crt_info+0x54>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 801bba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bba4:	4a79      	ldr	r2, [pc, #484]	; (801bd8c <mbedtls_x509_crt_info+0x208>)
 801bba6:	4618      	mov	r0, r3
 801bba8:	f002 fc80 	bl	801e4ac <sniprintf>
 801bbac:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801bbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	db03      	blt.n	801bbbc <mbedtls_x509_crt_info+0x38>
 801bbb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbb8:	429a      	cmp	r2, r3
 801bbba:	d301      	bcc.n	801bbc0 <mbedtls_x509_crt_info+0x3c>
 801bbbc:	4b74      	ldr	r3, [pc, #464]	; (801bd90 <mbedtls_x509_crt_info+0x20c>)
 801bbbe:	e2d6      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbc4:	1ad3      	subs	r3, r2, r3
 801bbc6:	633b      	str	r3, [r7, #48]	; 0x30
 801bbc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbcc:	4413      	add	r3, r2
 801bbce:	62fb      	str	r3, [r7, #44]	; 0x2c

        return( (int) ( size - n ) );
 801bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbd2:	693a      	ldr	r2, [r7, #16]
 801bbd4:	1ad3      	subs	r3, r2, r3
 801bbd6:	e2ca      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 801bbd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bbda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bbdc:	68bb      	ldr	r3, [r7, #8]
 801bbde:	699b      	ldr	r3, [r3, #24]
 801bbe0:	9300      	str	r3, [sp, #0]
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	4a6b      	ldr	r2, [pc, #428]	; (801bd94 <mbedtls_x509_crt_info+0x210>)
 801bbe6:	f002 fc61 	bl	801e4ac <sniprintf>
 801bbea:	6378      	str	r0, [r7, #52]	; 0x34
                               prefix, crt->version );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	db03      	blt.n	801bbfa <mbedtls_x509_crt_info+0x76>
 801bbf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbf6:	429a      	cmp	r2, r3
 801bbf8:	d301      	bcc.n	801bbfe <mbedtls_x509_crt_info+0x7a>
 801bbfa:	4b65      	ldr	r3, [pc, #404]	; (801bd90 <mbedtls_x509_crt_info+0x20c>)
 801bbfc:	e2b7      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bbfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc02:	1ad3      	subs	r3, r2, r3
 801bc04:	633b      	str	r3, [r7, #48]	; 0x30
 801bc06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc0a:	4413      	add	r3, r2
 801bc0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 801bc0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bc10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	4a60      	ldr	r2, [pc, #384]	; (801bd98 <mbedtls_x509_crt_info+0x214>)
 801bc16:	f002 fc49 	bl	801e4ac <sniprintf>
 801bc1a:	6378      	str	r0, [r7, #52]	; 0x34
                               prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	db03      	blt.n	801bc2a <mbedtls_x509_crt_info+0xa6>
 801bc22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc26:	429a      	cmp	r2, r3
 801bc28:	d301      	bcc.n	801bc2e <mbedtls_x509_crt_info+0xaa>
 801bc2a:	4b59      	ldr	r3, [pc, #356]	; (801bd90 <mbedtls_x509_crt_info+0x20c>)
 801bc2c:	e29f      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bc2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bc30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc32:	1ad3      	subs	r3, r2, r3
 801bc34:	633b      	str	r3, [r7, #48]	; 0x30
 801bc36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc3a:	4413      	add	r3, r2
 801bc3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 801bc3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bc40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	331c      	adds	r3, #28
 801bc46:	461a      	mov	r2, r3
 801bc48:	f7fe fc18 	bl	801a47c <mbedtls_x509_serial_gets>
 801bc4c:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	db03      	blt.n	801bc5c <mbedtls_x509_crt_info+0xd8>
 801bc54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc58:	429a      	cmp	r2, r3
 801bc5a:	d301      	bcc.n	801bc60 <mbedtls_x509_crt_info+0xdc>
 801bc5c:	4b4c      	ldr	r3, [pc, #304]	; (801bd90 <mbedtls_x509_crt_info+0x20c>)
 801bc5e:	e286      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bc60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc64:	1ad3      	subs	r3, r2, r3
 801bc66:	633b      	str	r3, [r7, #48]	; 0x30
 801bc68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc6c:	4413      	add	r3, r2
 801bc6e:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 801bc70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bc72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	4a49      	ldr	r2, [pc, #292]	; (801bd9c <mbedtls_x509_crt_info+0x218>)
 801bc78:	f002 fc18 	bl	801e4ac <sniprintf>
 801bc7c:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	db03      	blt.n	801bc8c <mbedtls_x509_crt_info+0x108>
 801bc84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc88:	429a      	cmp	r2, r3
 801bc8a:	d301      	bcc.n	801bc90 <mbedtls_x509_crt_info+0x10c>
 801bc8c:	4b40      	ldr	r3, [pc, #256]	; (801bd90 <mbedtls_x509_crt_info+0x20c>)
 801bc8e:	e26e      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bc90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc94:	1ad3      	subs	r3, r2, r3
 801bc96:	633b      	str	r3, [r7, #48]	; 0x30
 801bc98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc9c:	4413      	add	r3, r2
 801bc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 801bca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bca4:	68bb      	ldr	r3, [r7, #8]
 801bca6:	334c      	adds	r3, #76	; 0x4c
 801bca8:	461a      	mov	r2, r3
 801bcaa:	f7fe fa9d 	bl	801a1e8 <mbedtls_x509_dn_gets>
 801bcae:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bcb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	db03      	blt.n	801bcbe <mbedtls_x509_crt_info+0x13a>
 801bcb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcba:	429a      	cmp	r2, r3
 801bcbc:	d301      	bcc.n	801bcc2 <mbedtls_x509_crt_info+0x13e>
 801bcbe:	4b34      	ldr	r3, [pc, #208]	; (801bd90 <mbedtls_x509_crt_info+0x20c>)
 801bcc0:	e255      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bcc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bcc6:	1ad3      	subs	r3, r2, r3
 801bcc8:	633b      	str	r3, [r7, #48]	; 0x30
 801bcca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bcce:	4413      	add	r3, r2
 801bcd0:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 801bcd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bcd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bcd6:	68fb      	ldr	r3, [r7, #12]
 801bcd8:	4a31      	ldr	r2, [pc, #196]	; (801bda0 <mbedtls_x509_crt_info+0x21c>)
 801bcda:	f002 fbe7 	bl	801e4ac <sniprintf>
 801bcde:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	db03      	blt.n	801bcee <mbedtls_x509_crt_info+0x16a>
 801bce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcea:	429a      	cmp	r2, r3
 801bcec:	d301      	bcc.n	801bcf2 <mbedtls_x509_crt_info+0x16e>
 801bcee:	4b28      	ldr	r3, [pc, #160]	; (801bd90 <mbedtls_x509_crt_info+0x20c>)
 801bcf0:	e23d      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bcf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bcf6:	1ad3      	subs	r3, r2, r3
 801bcf8:	633b      	str	r3, [r7, #48]	; 0x30
 801bcfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bcfe:	4413      	add	r3, r2
 801bd00:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 801bd02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bd04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bd06:	68bb      	ldr	r3, [r7, #8]
 801bd08:	336c      	adds	r3, #108	; 0x6c
 801bd0a:	461a      	mov	r2, r3
 801bd0c:	f7fe fa6c 	bl	801a1e8 <mbedtls_x509_dn_gets>
 801bd10:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	db03      	blt.n	801bd20 <mbedtls_x509_crt_info+0x19c>
 801bd18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd1c:	429a      	cmp	r2, r3
 801bd1e:	d301      	bcc.n	801bd24 <mbedtls_x509_crt_info+0x1a0>
 801bd20:	4b1b      	ldr	r3, [pc, #108]	; (801bd90 <mbedtls_x509_crt_info+0x20c>)
 801bd22:	e224      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd28:	1ad3      	subs	r3, r2, r3
 801bd2a:	633b      	str	r3, [r7, #48]	; 0x30
 801bd2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd30:	4413      	add	r3, r2
 801bd32:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 801bd34:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 801bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd38:	607b      	str	r3, [r7, #4]
 801bd3a:	68bb      	ldr	r3, [r7, #8]
 801bd3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bd40:	68ba      	ldr	r2, [r7, #8]
 801bd42:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 801bd46:	68b9      	ldr	r1, [r7, #8]
 801bd48:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 801bd4c:	68b8      	ldr	r0, [r7, #8]
 801bd4e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 801bd52:	68bc      	ldr	r4, [r7, #8]
 801bd54:	f8d4 409c 	ldr.w	r4, [r4, #156]	; 0x9c
 801bd58:	68bd      	ldr	r5, [r7, #8]
 801bd5a:	f8d5 50a0 	ldr.w	r5, [r5, #160]	; 0xa0
 801bd5e:	9505      	str	r5, [sp, #20]
 801bd60:	9404      	str	r4, [sp, #16]
 801bd62:	9003      	str	r0, [sp, #12]
 801bd64:	9102      	str	r1, [sp, #8]
 801bd66:	9201      	str	r2, [sp, #4]
 801bd68:	9300      	str	r3, [sp, #0]
 801bd6a:	68fb      	ldr	r3, [r7, #12]
 801bd6c:	4a0d      	ldr	r2, [pc, #52]	; (801bda4 <mbedtls_x509_crt_info+0x220>)
 801bd6e:	6879      	ldr	r1, [r7, #4]
 801bd70:	4630      	mov	r0, r6
 801bd72:	f002 fb9b 	bl	801e4ac <sniprintf>
 801bd76:	6378      	str	r0, [r7, #52]	; 0x34
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	db03      	blt.n	801bd86 <mbedtls_x509_crt_info+0x202>
 801bd7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd82:	429a      	cmp	r2, r3
 801bd84:	d310      	bcc.n	801bda8 <mbedtls_x509_crt_info+0x224>
 801bd86:	4b02      	ldr	r3, [pc, #8]	; (801bd90 <mbedtls_x509_crt_info+0x20c>)
 801bd88:	e1f1      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bd8a:	bf00      	nop
 801bd8c:	08023e20 	.word	0x08023e20
 801bd90:	ffffd680 	.word	0xffffd680
 801bd94:	08023e40 	.word	0x08023e40
 801bd98:	08023e5c 	.word	0x08023e5c
 801bd9c:	08023e74 	.word	0x08023e74
 801bda0:	08023e8c 	.word	0x08023e8c
 801bda4:	08023ea4 	.word	0x08023ea4
 801bda8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdac:	1ad3      	subs	r3, r2, r3
 801bdae:	633b      	str	r3, [r7, #48]	; 0x30
 801bdb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdb4:	4413      	add	r3, r2
 801bdb6:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 801bdb8:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 801bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdbc:	607b      	str	r3, [r7, #4]
 801bdbe:	68bb      	ldr	r3, [r7, #8]
 801bdc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801bdc4:	68ba      	ldr	r2, [r7, #8]
 801bdc6:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 801bdca:	68b9      	ldr	r1, [r7, #8]
 801bdcc:	f8d1 10ac 	ldr.w	r1, [r1, #172]	; 0xac
 801bdd0:	68b8      	ldr	r0, [r7, #8]
 801bdd2:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 801bdd6:	68bc      	ldr	r4, [r7, #8]
 801bdd8:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
 801bddc:	68bd      	ldr	r5, [r7, #8]
 801bdde:	f8d5 50b8 	ldr.w	r5, [r5, #184]	; 0xb8
 801bde2:	9505      	str	r5, [sp, #20]
 801bde4:	9404      	str	r4, [sp, #16]
 801bde6:	9003      	str	r0, [sp, #12]
 801bde8:	9102      	str	r1, [sp, #8]
 801bdea:	9201      	str	r2, [sp, #4]
 801bdec:	9300      	str	r3, [sp, #0]
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	4a8c      	ldr	r2, [pc, #560]	; (801c024 <mbedtls_x509_crt_info+0x4a0>)
 801bdf2:	6879      	ldr	r1, [r7, #4]
 801bdf4:	4630      	mov	r0, r6
 801bdf6:	f002 fb59 	bl	801e4ac <sniprintf>
 801bdfa:	6378      	str	r0, [r7, #52]	; 0x34
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	db03      	blt.n	801be0a <mbedtls_x509_crt_info+0x286>
 801be02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be06:	429a      	cmp	r2, r3
 801be08:	d301      	bcc.n	801be0e <mbedtls_x509_crt_info+0x28a>
 801be0a:	4b87      	ldr	r3, [pc, #540]	; (801c028 <mbedtls_x509_crt_info+0x4a4>)
 801be0c:	e1af      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801be0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be12:	1ad3      	subs	r3, r2, r3
 801be14:	633b      	str	r3, [r7, #48]	; 0x30
 801be16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be1a:	4413      	add	r3, r2
 801be1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 801be1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801be20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	4a81      	ldr	r2, [pc, #516]	; (801c02c <mbedtls_x509_crt_info+0x4a8>)
 801be26:	f002 fb41 	bl	801e4ac <sniprintf>
 801be2a:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801be2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be2e:	2b00      	cmp	r3, #0
 801be30:	db03      	blt.n	801be3a <mbedtls_x509_crt_info+0x2b6>
 801be32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be36:	429a      	cmp	r2, r3
 801be38:	d301      	bcc.n	801be3e <mbedtls_x509_crt_info+0x2ba>
 801be3a:	4b7b      	ldr	r3, [pc, #492]	; (801c028 <mbedtls_x509_crt_info+0x4a4>)
 801be3c:	e197      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801be3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be42:	1ad3      	subs	r3, r2, r3
 801be44:	633b      	str	r3, [r7, #48]	; 0x30
 801be46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be4a:	4413      	add	r3, r2
 801be4c:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 801be4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801be50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801be52:	68bb      	ldr	r3, [r7, #8]
 801be54:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801be58:	68bb      	ldr	r3, [r7, #8]
 801be5a:	f893 5129 	ldrb.w	r5, [r3, #297]	; 0x129
 801be5e:	68bb      	ldr	r3, [r7, #8]
 801be60:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                             crt->sig_md, crt->sig_opts );
 801be64:	68ba      	ldr	r2, [r7, #8]
 801be66:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 801be6a:	9201      	str	r2, [sp, #4]
 801be6c:	9300      	str	r3, [sp, #0]
 801be6e:	462b      	mov	r3, r5
 801be70:	4622      	mov	r2, r4
 801be72:	f7fe fb83 	bl	801a57c <mbedtls_x509_sig_alg_gets>
 801be76:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801be78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	db03      	blt.n	801be86 <mbedtls_x509_crt_info+0x302>
 801be7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be82:	429a      	cmp	r2, r3
 801be84:	d301      	bcc.n	801be8a <mbedtls_x509_crt_info+0x306>
 801be86:	4b68      	ldr	r3, [pc, #416]	; (801c028 <mbedtls_x509_crt_info+0x4a4>)
 801be88:	e171      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801be8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be8e:	1ad3      	subs	r3, r2, r3
 801be90:	633b      	str	r3, [r7, #48]	; 0x30
 801be92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be96:	4413      	add	r3, r2
 801be98:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 801be9a:	68bb      	ldr	r3, [r7, #8]
 801be9c:	33bc      	adds	r3, #188	; 0xbc
 801be9e:	4618      	mov	r0, r3
 801bea0:	f7f3 f8b4 	bl	800f00c <mbedtls_pk_get_name>
 801bea4:	4602      	mov	r2, r0
 801bea6:	f107 0318 	add.w	r3, r7, #24
 801beaa:	2112      	movs	r1, #18
 801beac:	4618      	mov	r0, r3
 801beae:	f7fe fba9 	bl	801a604 <mbedtls_x509_key_size_helper>
 801beb2:	6378      	str	r0, [r7, #52]	; 0x34
 801beb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d001      	beq.n	801bebe <mbedtls_x509_crt_info+0x33a>
                                      mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
    {
        return( ret );
 801beba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bebc:	e157      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 801bebe:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 801bec0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 801bec2:	68bb      	ldr	r3, [r7, #8]
 801bec4:	33bc      	adds	r3, #188	; 0xbc
 801bec6:	4618      	mov	r0, r3
 801bec8:	f7f3 f860 	bl	800ef8c <mbedtls_pk_get_bitlen>
 801becc:	4603      	mov	r3, r0
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 801bece:	9301      	str	r3, [sp, #4]
 801bed0:	f107 0318 	add.w	r3, r7, #24
 801bed4:	9300      	str	r3, [sp, #0]
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	4a55      	ldr	r2, [pc, #340]	; (801c030 <mbedtls_x509_crt_info+0x4ac>)
 801beda:	4629      	mov	r1, r5
 801bedc:	4620      	mov	r0, r4
 801bede:	f002 fae5 	bl	801e4ac <sniprintf>
 801bee2:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	db03      	blt.n	801bef2 <mbedtls_x509_crt_info+0x36e>
 801beea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801beee:	429a      	cmp	r2, r3
 801bef0:	d301      	bcc.n	801bef6 <mbedtls_x509_crt_info+0x372>
 801bef2:	4b4d      	ldr	r3, [pc, #308]	; (801c028 <mbedtls_x509_crt_info+0x4a4>)
 801bef4:	e13b      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801befa:	1ad3      	subs	r3, r2, r3
 801befc:	633b      	str	r3, [r7, #48]	; 0x30
 801befe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf02:	4413      	add	r3, r2
 801bf04:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 801bf06:	68bb      	ldr	r3, [r7, #8]
 801bf08:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801bf0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d040      	beq.n	801bf96 <mbedtls_x509_crt_info+0x412>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 801bf14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bf16:	6b39      	ldr	r1, [r7, #48]	; 0x30
                        crt->ca_istrue ? "true" : "false" );
 801bf18:	68bb      	ldr	r3, [r7, #8]
 801bf1a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d001      	beq.n	801bf26 <mbedtls_x509_crt_info+0x3a2>
 801bf22:	4b44      	ldr	r3, [pc, #272]	; (801c034 <mbedtls_x509_crt_info+0x4b0>)
 801bf24:	e000      	b.n	801bf28 <mbedtls_x509_crt_info+0x3a4>
 801bf26:	4b44      	ldr	r3, [pc, #272]	; (801c038 <mbedtls_x509_crt_info+0x4b4>)
 801bf28:	9300      	str	r3, [sp, #0]
 801bf2a:	68fb      	ldr	r3, [r7, #12]
 801bf2c:	4a43      	ldr	r2, [pc, #268]	; (801c03c <mbedtls_x509_crt_info+0x4b8>)
 801bf2e:	f002 fabd 	bl	801e4ac <sniprintf>
 801bf32:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801bf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	db03      	blt.n	801bf42 <mbedtls_x509_crt_info+0x3be>
 801bf3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	d301      	bcc.n	801bf46 <mbedtls_x509_crt_info+0x3c2>
 801bf42:	4b39      	ldr	r3, [pc, #228]	; (801c028 <mbedtls_x509_crt_info+0x4a4>)
 801bf44:	e113      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bf46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf4a:	1ad3      	subs	r3, r2, r3
 801bf4c:	633b      	str	r3, [r7, #48]	; 0x30
 801bf4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf52:	4413      	add	r3, r2
 801bf54:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( crt->max_pathlen > 0 )
 801bf56:	68bb      	ldr	r3, [r7, #8]
 801bf58:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	dd1a      	ble.n	801bf96 <mbedtls_x509_crt_info+0x412>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 801bf60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bf62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bf64:	68bb      	ldr	r3, [r7, #8]
 801bf66:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801bf6a:	3b01      	subs	r3, #1
 801bf6c:	4a34      	ldr	r2, [pc, #208]	; (801c040 <mbedtls_x509_crt_info+0x4bc>)
 801bf6e:	f002 fa9d 	bl	801e4ac <sniprintf>
 801bf72:	6378      	str	r0, [r7, #52]	; 0x34
            MBEDTLS_X509_SAFE_SNPRINTF;
 801bf74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	db03      	blt.n	801bf82 <mbedtls_x509_crt_info+0x3fe>
 801bf7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf7e:	429a      	cmp	r2, r3
 801bf80:	d301      	bcc.n	801bf86 <mbedtls_x509_crt_info+0x402>
 801bf82:	4b29      	ldr	r3, [pc, #164]	; (801c028 <mbedtls_x509_crt_info+0x4a4>)
 801bf84:	e0f3      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bf86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf8a:	1ad3      	subs	r3, r2, r3
 801bf8c:	633b      	str	r3, [r7, #48]	; 0x30
 801bf8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf92:	4413      	add	r3, r2
 801bf94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 801bf96:	68bb      	ldr	r3, [r7, #8]
 801bf98:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801bf9c:	f003 0320 	and.w	r3, r3, #32
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d027      	beq.n	801bff4 <mbedtls_x509_crt_info+0x470>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 801bfa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bfa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	4a26      	ldr	r2, [pc, #152]	; (801c044 <mbedtls_x509_crt_info+0x4c0>)
 801bfac:	f002 fa7e 	bl	801e4ac <sniprintf>
 801bfb0:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801bfb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	db03      	blt.n	801bfc0 <mbedtls_x509_crt_info+0x43c>
 801bfb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfbc:	429a      	cmp	r2, r3
 801bfbe:	d301      	bcc.n	801bfc4 <mbedtls_x509_crt_info+0x440>
 801bfc0:	4b19      	ldr	r3, [pc, #100]	; (801c028 <mbedtls_x509_crt_info+0x4a4>)
 801bfc2:	e0d4      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801bfc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bfc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfc8:	1ad3      	subs	r3, r2, r3
 801bfca:	633b      	str	r3, [r7, #48]	; 0x30
 801bfcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfd0:	4413      	add	r3, r2
 801bfd2:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 801bfd4:	68bb      	ldr	r3, [r7, #8]
 801bfd6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 801bfda:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801bfde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bfe2:	4618      	mov	r0, r3
 801bfe4:	f7ff fa9a 	bl	801b51c <x509_info_subject_alt_name>
 801bfe8:	6378      	str	r0, [r7, #52]	; 0x34
 801bfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d001      	beq.n	801bff4 <mbedtls_x509_crt_info+0x470>
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
 801bff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bff2:	e0bc      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 801bff4:	68bb      	ldr	r3, [r7, #8]
 801bff6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801bffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d03c      	beq.n	801c07c <mbedtls_x509_crt_info+0x4f8>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 801c002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	4a0f      	ldr	r2, [pc, #60]	; (801c048 <mbedtls_x509_crt_info+0x4c4>)
 801c00a:	f002 fa4f 	bl	801e4ac <sniprintf>
 801c00e:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c012:	2b00      	cmp	r3, #0
 801c014:	db03      	blt.n	801c01e <mbedtls_x509_crt_info+0x49a>
 801c016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c01a:	429a      	cmp	r2, r3
 801c01c:	d316      	bcc.n	801c04c <mbedtls_x509_crt_info+0x4c8>
 801c01e:	4b02      	ldr	r3, [pc, #8]	; (801c028 <mbedtls_x509_crt_info+0x4a4>)
 801c020:	e0a5      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801c022:	bf00      	nop
 801c024:	08023edc 	.word	0x08023edc
 801c028:	ffffd680 	.word	0xffffd680
 801c02c:	08023f14 	.word	0x08023f14
 801c030:	08023f2c 	.word	0x08023f2c
 801c034:	08023f40 	.word	0x08023f40
 801c038:	08023f48 	.word	0x08023f48
 801c03c:	08023f50 	.word	0x08023f50
 801c040:	08023f70 	.word	0x08023f70
 801c044:	08023f84 	.word	0x08023f84
 801c048:	08023f9c 	.word	0x08023f9c
 801c04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c050:	1ad3      	subs	r3, r2, r3
 801c052:	633b      	str	r3, [r7, #48]	; 0x30
 801c054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c058:	4413      	add	r3, r2
 801c05a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 801c05c:	68bb      	ldr	r3, [r7, #8]
 801c05e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801c062:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801c066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c06a:	4618      	mov	r0, r3
 801c06c:	f7ff fac2 	bl	801b5f4 <x509_info_cert_type>
 801c070:	6378      	str	r0, [r7, #52]	; 0x34
 801c072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c074:	2b00      	cmp	r3, #0
 801c076:	d001      	beq.n	801c07c <mbedtls_x509_crt_info+0x4f8>
            return( ret );
 801c078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c07a:	e078      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 801c07c:	68bb      	ldr	r3, [r7, #8]
 801c07e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801c082:	f003 0304 	and.w	r3, r3, #4
 801c086:	2b00      	cmp	r3, #0
 801c088:	d027      	beq.n	801c0da <mbedtls_x509_crt_info+0x556>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 801c08a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c08c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	4a39      	ldr	r2, [pc, #228]	; (801c178 <mbedtls_x509_crt_info+0x5f4>)
 801c092:	f002 fa0b 	bl	801e4ac <sniprintf>
 801c096:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801c098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	db03      	blt.n	801c0a6 <mbedtls_x509_crt_info+0x522>
 801c09e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0a2:	429a      	cmp	r2, r3
 801c0a4:	d301      	bcc.n	801c0aa <mbedtls_x509_crt_info+0x526>
 801c0a6:	4b35      	ldr	r3, [pc, #212]	; (801c17c <mbedtls_x509_crt_info+0x5f8>)
 801c0a8:	e061      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801c0aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0ae:	1ad3      	subs	r3, r2, r3
 801c0b0:	633b      	str	r3, [r7, #48]	; 0x30
 801c0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0b6:	4413      	add	r3, r2
 801c0b8:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 801c0ba:	68bb      	ldr	r3, [r7, #8]
 801c0bc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 801c0c0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801c0c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f7ff fbbb 	bl	801b844 <x509_info_key_usage>
 801c0ce:	6378      	str	r0, [r7, #52]	; 0x34
 801c0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d001      	beq.n	801c0da <mbedtls_x509_crt_info+0x556>
            return( ret );
 801c0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0d8:	e049      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 801c0da:	68bb      	ldr	r3, [r7, #8]
 801c0dc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801c0e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d027      	beq.n	801c138 <mbedtls_x509_crt_info+0x5b4>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 801c0e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c0ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	4a24      	ldr	r2, [pc, #144]	; (801c180 <mbedtls_x509_crt_info+0x5fc>)
 801c0f0:	f002 f9dc 	bl	801e4ac <sniprintf>
 801c0f4:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801c0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	db03      	blt.n	801c104 <mbedtls_x509_crt_info+0x580>
 801c0fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c100:	429a      	cmp	r2, r3
 801c102:	d301      	bcc.n	801c108 <mbedtls_x509_crt_info+0x584>
 801c104:	4b1d      	ldr	r3, [pc, #116]	; (801c17c <mbedtls_x509_crt_info+0x5f8>)
 801c106:	e032      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801c108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c10c:	1ad3      	subs	r3, r2, r3
 801c10e:	633b      	str	r3, [r7, #48]	; 0x30
 801c110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c114:	4413      	add	r3, r2
 801c116:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 801c118:	68bb      	ldr	r3, [r7, #8]
 801c11a:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801c11e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801c122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c126:	4618      	mov	r0, r3
 801c128:	f7ff fcd8 	bl	801badc <x509_info_ext_key_usage>
 801c12c:	6378      	str	r0, [r7, #52]	; 0x34
 801c12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c130:	2b00      	cmp	r3, #0
 801c132:	d001      	beq.n	801c138 <mbedtls_x509_crt_info+0x5b4>
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
 801c134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c136:	e01a      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 801c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c13a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c13c:	4a11      	ldr	r2, [pc, #68]	; (801c184 <mbedtls_x509_crt_info+0x600>)
 801c13e:	4618      	mov	r0, r3
 801c140:	f002 f9b4 	bl	801e4ac <sniprintf>
 801c144:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801c146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c148:	2b00      	cmp	r3, #0
 801c14a:	db03      	blt.n	801c154 <mbedtls_x509_crt_info+0x5d0>
 801c14c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c150:	429a      	cmp	r2, r3
 801c152:	d301      	bcc.n	801c158 <mbedtls_x509_crt_info+0x5d4>
 801c154:	4b09      	ldr	r3, [pc, #36]	; (801c17c <mbedtls_x509_crt_info+0x5f8>)
 801c156:	e00a      	b.n	801c16e <mbedtls_x509_crt_info+0x5ea>
 801c158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c15c:	1ad3      	subs	r3, r2, r3
 801c15e:	633b      	str	r3, [r7, #48]	; 0x30
 801c160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c164:	4413      	add	r3, r2
 801c166:	62fb      	str	r3, [r7, #44]	; 0x2c

    return( (int) ( size - n ) );
 801c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c16a:	693a      	ldr	r2, [r7, #16]
 801c16c:	1ad3      	subs	r3, r2, r3
}
 801c16e:	4618      	mov	r0, r3
 801c170:	373c      	adds	r7, #60	; 0x3c
 801c172:	46bd      	mov	sp, r7
 801c174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c176:	bf00      	nop
 801c178:	08023fb4 	.word	0x08023fb4
 801c17c:	ffffd680 	.word	0xffffd680
 801c180:	08023fcc 	.word	0x08023fcc
 801c184:	08023fe4 	.word	0x08023fe4

0801c188 <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 801c188:	b480      	push	{r7}
 801c18a:	b089      	sub	sp, #36	; 0x24
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	60f8      	str	r0, [r7, #12]
 801c190:	60b9      	str	r1, [r7, #8]
 801c192:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	61bb      	str	r3, [r7, #24]
 801c198:	68bb      	ldr	r3, [r7, #8]
 801c19a:	617b      	str	r3, [r7, #20]

    for( i = 0; i < len; i++ )
 801c19c:	2300      	movs	r3, #0
 801c19e:	61fb      	str	r3, [r7, #28]
 801c1a0:	e030      	b.n	801c204 <x509_memcasecmp+0x7c>
    {
        diff = n1[i] ^ n2[i];
 801c1a2:	69ba      	ldr	r2, [r7, #24]
 801c1a4:	69fb      	ldr	r3, [r7, #28]
 801c1a6:	4413      	add	r3, r2
 801c1a8:	781a      	ldrb	r2, [r3, #0]
 801c1aa:	6979      	ldr	r1, [r7, #20]
 801c1ac:	69fb      	ldr	r3, [r7, #28]
 801c1ae:	440b      	add	r3, r1
 801c1b0:	781b      	ldrb	r3, [r3, #0]
 801c1b2:	4053      	eors	r3, r2
 801c1b4:	74fb      	strb	r3, [r7, #19]

        if( diff == 0 )
 801c1b6:	7cfb      	ldrb	r3, [r7, #19]
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d01d      	beq.n	801c1f8 <x509_memcasecmp+0x70>
            continue;

        if( diff == 32 &&
 801c1bc:	7cfb      	ldrb	r3, [r7, #19]
 801c1be:	2b20      	cmp	r3, #32
 801c1c0:	d117      	bne.n	801c1f2 <x509_memcasecmp+0x6a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801c1c2:	69ba      	ldr	r2, [r7, #24]
 801c1c4:	69fb      	ldr	r3, [r7, #28]
 801c1c6:	4413      	add	r3, r2
 801c1c8:	781b      	ldrb	r3, [r3, #0]
        if( diff == 32 &&
 801c1ca:	2b60      	cmp	r3, #96	; 0x60
 801c1cc:	d905      	bls.n	801c1da <x509_memcasecmp+0x52>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801c1ce:	69ba      	ldr	r2, [r7, #24]
 801c1d0:	69fb      	ldr	r3, [r7, #28]
 801c1d2:	4413      	add	r3, r2
 801c1d4:	781b      	ldrb	r3, [r3, #0]
 801c1d6:	2b7a      	cmp	r3, #122	; 0x7a
 801c1d8:	d910      	bls.n	801c1fc <x509_memcasecmp+0x74>
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
 801c1da:	69ba      	ldr	r2, [r7, #24]
 801c1dc:	69fb      	ldr	r3, [r7, #28]
 801c1de:	4413      	add	r3, r2
 801c1e0:	781b      	ldrb	r3, [r3, #0]
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801c1e2:	2b40      	cmp	r3, #64	; 0x40
 801c1e4:	d905      	bls.n	801c1f2 <x509_memcasecmp+0x6a>
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
 801c1e6:	69ba      	ldr	r2, [r7, #24]
 801c1e8:	69fb      	ldr	r3, [r7, #28]
 801c1ea:	4413      	add	r3, r2
 801c1ec:	781b      	ldrb	r3, [r3, #0]
 801c1ee:	2b5a      	cmp	r3, #90	; 0x5a
 801c1f0:	d904      	bls.n	801c1fc <x509_memcasecmp+0x74>
        {
            continue;
        }

        return( -1 );
 801c1f2:	f04f 33ff 	mov.w	r3, #4294967295
 801c1f6:	e00a      	b.n	801c20e <x509_memcasecmp+0x86>
            continue;
 801c1f8:	bf00      	nop
 801c1fa:	e000      	b.n	801c1fe <x509_memcasecmp+0x76>
            continue;
 801c1fc:	bf00      	nop
    for( i = 0; i < len; i++ )
 801c1fe:	69fb      	ldr	r3, [r7, #28]
 801c200:	3301      	adds	r3, #1
 801c202:	61fb      	str	r3, [r7, #28]
 801c204:	69fa      	ldr	r2, [r7, #28]
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	429a      	cmp	r2, r3
 801c20a:	d3ca      	bcc.n	801c1a2 <x509_memcasecmp+0x1a>
    }

    return( 0 );
 801c20c:	2300      	movs	r3, #0
}
 801c20e:	4618      	mov	r0, r3
 801c210:	3724      	adds	r7, #36	; 0x24
 801c212:	46bd      	mov	sp, r7
 801c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c218:	4770      	bx	lr

0801c21a <x509_check_wildcard>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 801c21a:	b580      	push	{r7, lr}
 801c21c:	b086      	sub	sp, #24
 801c21e:	af00      	add	r7, sp, #0
 801c220:	6078      	str	r0, [r7, #4]
 801c222:	6039      	str	r1, [r7, #0]
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 801c224:	2300      	movs	r3, #0
 801c226:	613b      	str	r3, [r7, #16]
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	f7e3 ffd1 	bl	80001d0 <strlen>
 801c22e:	60f8      	str	r0, [r7, #12]

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 801c230:	683b      	ldr	r3, [r7, #0]
 801c232:	685b      	ldr	r3, [r3, #4]
 801c234:	2b02      	cmp	r3, #2
 801c236:	d90a      	bls.n	801c24e <x509_check_wildcard+0x34>
 801c238:	683b      	ldr	r3, [r7, #0]
 801c23a:	689b      	ldr	r3, [r3, #8]
 801c23c:	781b      	ldrb	r3, [r3, #0]
 801c23e:	2b2a      	cmp	r3, #42	; 0x2a
 801c240:	d105      	bne.n	801c24e <x509_check_wildcard+0x34>
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	689b      	ldr	r3, [r3, #8]
 801c246:	3301      	adds	r3, #1
 801c248:	781b      	ldrb	r3, [r3, #0]
 801c24a:	2b2e      	cmp	r3, #46	; 0x2e
 801c24c:	d001      	beq.n	801c252 <x509_check_wildcard+0x38>
        return( 0 );
 801c24e:	2300      	movs	r3, #0
 801c250:	e033      	b.n	801c2ba <x509_check_wildcard+0xa0>

    for( i = 0; i < cn_len; ++i )
 801c252:	2300      	movs	r3, #0
 801c254:	617b      	str	r3, [r7, #20]
 801c256:	e00b      	b.n	801c270 <x509_check_wildcard+0x56>
    {
        if( cn[i] == '.' )
 801c258:	687a      	ldr	r2, [r7, #4]
 801c25a:	697b      	ldr	r3, [r7, #20]
 801c25c:	4413      	add	r3, r2
 801c25e:	781b      	ldrb	r3, [r3, #0]
 801c260:	2b2e      	cmp	r3, #46	; 0x2e
 801c262:	d102      	bne.n	801c26a <x509_check_wildcard+0x50>
        {
            cn_idx = i;
 801c264:	697b      	ldr	r3, [r7, #20]
 801c266:	613b      	str	r3, [r7, #16]
            break;
 801c268:	e006      	b.n	801c278 <x509_check_wildcard+0x5e>
    for( i = 0; i < cn_len; ++i )
 801c26a:	697b      	ldr	r3, [r7, #20]
 801c26c:	3301      	adds	r3, #1
 801c26e:	617b      	str	r3, [r7, #20]
 801c270:	697a      	ldr	r2, [r7, #20]
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	429a      	cmp	r2, r3
 801c276:	d3ef      	bcc.n	801c258 <x509_check_wildcard+0x3e>
        }
    }

    if( cn_idx == 0 )
 801c278:	693b      	ldr	r3, [r7, #16]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d102      	bne.n	801c284 <x509_check_wildcard+0x6a>
        return( -1 );
 801c27e:	f04f 33ff 	mov.w	r3, #4294967295
 801c282:	e01a      	b.n	801c2ba <x509_check_wildcard+0xa0>

    if( cn_len - cn_idx == name->len - 1 &&
 801c284:	68fa      	ldr	r2, [r7, #12]
 801c286:	693b      	ldr	r3, [r7, #16]
 801c288:	1ad2      	subs	r2, r2, r3
 801c28a:	683b      	ldr	r3, [r7, #0]
 801c28c:	685b      	ldr	r3, [r3, #4]
 801c28e:	3b01      	subs	r3, #1
 801c290:	429a      	cmp	r2, r3
 801c292:	d110      	bne.n	801c2b6 <x509_check_wildcard+0x9c>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 801c294:	683b      	ldr	r3, [r7, #0]
 801c296:	689b      	ldr	r3, [r3, #8]
 801c298:	1c58      	adds	r0, r3, #1
 801c29a:	687a      	ldr	r2, [r7, #4]
 801c29c:	693b      	ldr	r3, [r7, #16]
 801c29e:	18d1      	adds	r1, r2, r3
 801c2a0:	683b      	ldr	r3, [r7, #0]
 801c2a2:	685b      	ldr	r3, [r3, #4]
 801c2a4:	3b01      	subs	r3, #1
 801c2a6:	461a      	mov	r2, r3
 801c2a8:	f7ff ff6e 	bl	801c188 <x509_memcasecmp>
 801c2ac:	4603      	mov	r3, r0
    if( cn_len - cn_idx == name->len - 1 &&
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d101      	bne.n	801c2b6 <x509_check_wildcard+0x9c>
    {
        return( 0 );
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	e001      	b.n	801c2ba <x509_check_wildcard+0xa0>
    }

    return( -1 );
 801c2b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	3718      	adds	r7, #24
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	bd80      	pop	{r7, pc}

0801c2c2 <x509_string_cmp>:
 * variations (but not all).
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
 801c2c2:	b580      	push	{r7, lr}
 801c2c4:	b082      	sub	sp, #8
 801c2c6:	af00      	add	r7, sp, #0
 801c2c8:	6078      	str	r0, [r7, #4]
 801c2ca:	6039      	str	r1, [r7, #0]
    if( a->tag == b->tag &&
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	681a      	ldr	r2, [r3, #0]
 801c2d0:	683b      	ldr	r3, [r7, #0]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	429a      	cmp	r2, r3
 801c2d6:	d113      	bne.n	801c300 <x509_string_cmp+0x3e>
        a->len == b->len &&
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	685a      	ldr	r2, [r3, #4]
 801c2dc:	683b      	ldr	r3, [r7, #0]
 801c2de:	685b      	ldr	r3, [r3, #4]
    if( a->tag == b->tag &&
 801c2e0:	429a      	cmp	r2, r3
 801c2e2:	d10d      	bne.n	801c300 <x509_string_cmp+0x3e>
        memcmp( a->p, b->p, b->len ) == 0 )
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	6898      	ldr	r0, [r3, #8]
 801c2e8:	683b      	ldr	r3, [r7, #0]
 801c2ea:	6899      	ldr	r1, [r3, #8]
 801c2ec:	683b      	ldr	r3, [r7, #0]
 801c2ee:	685b      	ldr	r3, [r3, #4]
 801c2f0:	461a      	mov	r2, r3
 801c2f2:	f001 fe9b 	bl	801e02c <memcmp>
 801c2f6:	4603      	mov	r3, r0
        a->len == b->len &&
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d101      	bne.n	801c300 <x509_string_cmp+0x3e>
    {
        return( 0 );
 801c2fc:	2300      	movs	r3, #0
 801c2fe:	e025      	b.n	801c34c <x509_string_cmp+0x8a>
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	2b0c      	cmp	r3, #12
 801c306:	d003      	beq.n	801c310 <x509_string_cmp+0x4e>
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	2b13      	cmp	r3, #19
 801c30e:	d11b      	bne.n	801c348 <x509_string_cmp+0x86>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c310:	683b      	ldr	r3, [r7, #0]
 801c312:	681b      	ldr	r3, [r3, #0]
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c314:	2b0c      	cmp	r3, #12
 801c316:	d003      	beq.n	801c320 <x509_string_cmp+0x5e>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c318:	683b      	ldr	r3, [r7, #0]
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	2b13      	cmp	r3, #19
 801c31e:	d113      	bne.n	801c348 <x509_string_cmp+0x86>
        a->len == b->len &&
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	685a      	ldr	r2, [r3, #4]
 801c324:	683b      	ldr	r3, [r7, #0]
 801c326:	685b      	ldr	r3, [r3, #4]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c328:	429a      	cmp	r2, r3
 801c32a:	d10d      	bne.n	801c348 <x509_string_cmp+0x86>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	6898      	ldr	r0, [r3, #8]
 801c330:	683b      	ldr	r3, [r7, #0]
 801c332:	6899      	ldr	r1, [r3, #8]
 801c334:	683b      	ldr	r3, [r7, #0]
 801c336:	685b      	ldr	r3, [r3, #4]
 801c338:	461a      	mov	r2, r3
 801c33a:	f7ff ff25 	bl	801c188 <x509_memcasecmp>
 801c33e:	4603      	mov	r3, r0
        a->len == b->len &&
 801c340:	2b00      	cmp	r3, #0
 801c342:	d101      	bne.n	801c348 <x509_string_cmp+0x86>
    {
        return( 0 );
 801c344:	2300      	movs	r3, #0
 801c346:	e001      	b.n	801c34c <x509_string_cmp+0x8a>
    }

    return( -1 );
 801c348:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c34c:	4618      	mov	r0, r3
 801c34e:	3708      	adds	r7, #8
 801c350:	46bd      	mov	sp, r7
 801c352:	bd80      	pop	{r7, pc}

0801c354 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 801c354:	b580      	push	{r7, lr}
 801c356:	b082      	sub	sp, #8
 801c358:	af00      	add	r7, sp, #0
 801c35a:	6078      	str	r0, [r7, #4]
 801c35c:	6039      	str	r1, [r7, #0]
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 801c35e:	e041      	b.n	801c3e4 <x509_name_cmp+0x90>
    {
        if( a == NULL || b == NULL )
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d002      	beq.n	801c36c <x509_name_cmp+0x18>
 801c366:	683b      	ldr	r3, [r7, #0]
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d102      	bne.n	801c372 <x509_name_cmp+0x1e>
            return( -1 );
 801c36c:	f04f 33ff 	mov.w	r3, #4294967295
 801c370:	e03f      	b.n	801c3f2 <x509_name_cmp+0x9e>

        /* type */
        if( a->oid.tag != b->oid.tag ||
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	681a      	ldr	r2, [r3, #0]
 801c376:	683b      	ldr	r3, [r7, #0]
 801c378:	681b      	ldr	r3, [r3, #0]
 801c37a:	429a      	cmp	r2, r3
 801c37c:	d111      	bne.n	801c3a2 <x509_name_cmp+0x4e>
            a->oid.len != b->oid.len ||
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	685a      	ldr	r2, [r3, #4]
 801c382:	683b      	ldr	r3, [r7, #0]
 801c384:	685b      	ldr	r3, [r3, #4]
        if( a->oid.tag != b->oid.tag ||
 801c386:	429a      	cmp	r2, r3
 801c388:	d10b      	bne.n	801c3a2 <x509_name_cmp+0x4e>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	6898      	ldr	r0, [r3, #8]
 801c38e:	683b      	ldr	r3, [r7, #0]
 801c390:	6899      	ldr	r1, [r3, #8]
 801c392:	683b      	ldr	r3, [r7, #0]
 801c394:	685b      	ldr	r3, [r3, #4]
 801c396:	461a      	mov	r2, r3
 801c398:	f001 fe48 	bl	801e02c <memcmp>
 801c39c:	4603      	mov	r3, r0
            a->oid.len != b->oid.len ||
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d002      	beq.n	801c3a8 <x509_name_cmp+0x54>
        {
            return( -1 );
 801c3a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c3a6:	e024      	b.n	801c3f2 <x509_name_cmp+0x9e>
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	f103 020c 	add.w	r2, r3, #12
 801c3ae:	683b      	ldr	r3, [r7, #0]
 801c3b0:	330c      	adds	r3, #12
 801c3b2:	4619      	mov	r1, r3
 801c3b4:	4610      	mov	r0, r2
 801c3b6:	f7ff ff84 	bl	801c2c2 <x509_string_cmp>
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d002      	beq.n	801c3c6 <x509_name_cmp+0x72>
            return( -1 );
 801c3c0:	f04f 33ff 	mov.w	r3, #4294967295
 801c3c4:	e015      	b.n	801c3f2 <x509_name_cmp+0x9e>

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	7f1a      	ldrb	r2, [r3, #28]
 801c3ca:	683b      	ldr	r3, [r7, #0]
 801c3cc:	7f1b      	ldrb	r3, [r3, #28]
 801c3ce:	429a      	cmp	r2, r3
 801c3d0:	d002      	beq.n	801c3d8 <x509_name_cmp+0x84>
            return( -1 );
 801c3d2:	f04f 33ff 	mov.w	r3, #4294967295
 801c3d6:	e00c      	b.n	801c3f2 <x509_name_cmp+0x9e>

        a = a->next;
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	699b      	ldr	r3, [r3, #24]
 801c3dc:	607b      	str	r3, [r7, #4]
        b = b->next;
 801c3de:	683b      	ldr	r3, [r7, #0]
 801c3e0:	699b      	ldr	r3, [r3, #24]
 801c3e2:	603b      	str	r3, [r7, #0]
    while( a != NULL || b != NULL )
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d1ba      	bne.n	801c360 <x509_name_cmp+0xc>
 801c3ea:	683b      	ldr	r3, [r7, #0]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d1b7      	bne.n	801c360 <x509_name_cmp+0xc>
    }

    /* a == NULL == b */
    return( 0 );
 801c3f0:	2300      	movs	r3, #0
}
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	3708      	adds	r7, #8
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	bd80      	pop	{r7, pc}

0801c3fa <x509_crt_check_parent>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 801c3fa:	b580      	push	{r7, lr}
 801c3fc:	b086      	sub	sp, #24
 801c3fe:	af00      	add	r7, sp, #0
 801c400:	60f8      	str	r0, [r7, #12]
 801c402:	60b9      	str	r1, [r7, #8]
 801c404:	607a      	str	r2, [r7, #4]
 801c406:	603b      	str	r3, [r7, #0]
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801c40e:	68bb      	ldr	r3, [r7, #8]
 801c410:	336c      	adds	r3, #108	; 0x6c
 801c412:	4619      	mov	r1, r3
 801c414:	4610      	mov	r0, r2
 801c416:	f7ff ff9d 	bl	801c354 <x509_name_cmp>
 801c41a:	4603      	mov	r3, r0
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d002      	beq.n	801c426 <x509_crt_check_parent+0x2c>
        return( -1 );
 801c420:	f04f 33ff 	mov.w	r3, #4294967295
 801c424:	e030      	b.n	801c488 <x509_crt_check_parent+0x8e>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;
 801c426:	2301      	movs	r3, #1
 801c428:	617b      	str	r3, [r7, #20]

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d005      	beq.n	801c43c <x509_crt_check_parent+0x42>
 801c430:	68bb      	ldr	r3, [r7, #8]
 801c432:	699b      	ldr	r3, [r3, #24]
 801c434:	2b02      	cmp	r3, #2
 801c436:	dc01      	bgt.n	801c43c <x509_crt_check_parent+0x42>
        need_ca_bit = 0;
 801c438:	2300      	movs	r3, #0
 801c43a:	617b      	str	r3, [r7, #20]

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d016      	beq.n	801c470 <x509_crt_check_parent+0x76>
 801c442:	683b      	ldr	r3, [r7, #0]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d013      	beq.n	801c470 <x509_crt_check_parent+0x76>
        child->raw.len == parent->raw.len &&
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	685a      	ldr	r2, [r3, #4]
 801c44c:	68bb      	ldr	r3, [r7, #8]
 801c44e:	685b      	ldr	r3, [r3, #4]
    if( top && bottom &&
 801c450:	429a      	cmp	r2, r3
 801c452:	d10d      	bne.n	801c470 <x509_crt_check_parent+0x76>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	6898      	ldr	r0, [r3, #8]
 801c458:	68bb      	ldr	r3, [r7, #8]
 801c45a:	6899      	ldr	r1, [r3, #8]
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	685b      	ldr	r3, [r3, #4]
 801c460:	461a      	mov	r2, r3
 801c462:	f001 fde3 	bl	801e02c <memcmp>
 801c466:	4603      	mov	r3, r0
        child->raw.len == parent->raw.len &&
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d101      	bne.n	801c470 <x509_crt_check_parent+0x76>
    {
        need_ca_bit = 0;
 801c46c:	2300      	movs	r3, #0
 801c46e:	617b      	str	r3, [r7, #20]
    }

    if( need_ca_bit && ! parent->ca_istrue )
 801c470:	697b      	ldr	r3, [r7, #20]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d007      	beq.n	801c486 <x509_crt_check_parent+0x8c>
 801c476:	68bb      	ldr	r3, [r7, #8]
 801c478:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d102      	bne.n	801c486 <x509_crt_check_parent+0x8c>
        return( -1 );
 801c480:	f04f 33ff 	mov.w	r3, #4294967295
 801c484:	e000      	b.n	801c488 <x509_crt_check_parent+0x8e>
    {
        return( -1 );
    }
#endif

    return( 0 );
 801c486:	2300      	movs	r3, #0
}
 801c488:	4618      	mov	r0, r3
 801c48a:	3718      	adds	r7, #24
 801c48c:	46bd      	mov	sp, r7
 801c48e:	bd80      	pop	{r7, pc}

0801c490 <x509_crt_verify_top>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 801c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c494:	b096      	sub	sp, #88	; 0x58
 801c496:	af04      	add	r7, sp, #16
 801c498:	60f8      	str	r0, [r7, #12]
 801c49a:	60b9      	str	r1, [r7, #8]
 801c49c:	607a      	str	r2, [r7, #4]
 801c49e:	603b      	str	r3, [r7, #0]
    int ret;
    uint32_t ca_flags = 0;
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	637b      	str	r3, [r7, #52]	; 0x34
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	643b      	str	r3, [r7, #64]	; 0x40

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	33a4      	adds	r3, #164	; 0xa4
 801c4ac:	4618      	mov	r0, r3
 801c4ae:	f7fe f8d5 	bl	801a65c <mbedtls_x509_time_is_past>
 801c4b2:	4603      	mov	r3, r0
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d005      	beq.n	801c4c4 <x509_crt_verify_top+0x34>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801c4b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	f043 0201 	orr.w	r2, r3, #1
 801c4c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c4c2:	601a      	str	r2, [r3, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	338c      	adds	r3, #140	; 0x8c
 801c4c8:	4618      	mov	r0, r3
 801c4ca:	f7fe f8d2 	bl	801a672 <mbedtls_x509_time_is_future>
 801c4ce:	4603      	mov	r3, r0
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d005      	beq.n	801c4e0 <x509_crt_verify_top+0x50>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 801c4d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801c4dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c4de:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801c4e6:	4619      	mov	r1, r3
 801c4e8:	6838      	ldr	r0, [r7, #0]
 801c4ea:	f7fe f8e6 	bl	801a6ba <x509_profile_check_md_alg>
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d005      	beq.n	801c500 <x509_crt_verify_top+0x70>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 801c4f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801c4fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c4fe:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801c506:	4619      	mov	r1, r3
 801c508:	6838      	ldr	r0, [r7, #0]
 801c50a:	f7fe f8f0 	bl	801a6ee <x509_profile_check_pk_alg>
 801c50e:	4603      	mov	r3, r0
 801c510:	2b00      	cmp	r3, #0
 801c512:	d005      	beq.n	801c520 <x509_crt_verify_top+0x90>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 801c514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801c51c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c51e:	601a      	str	r2, [r3, #0]

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801c520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	f043 0208 	orr.w	r2, r3, #8
 801c528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c52a:	601a      	str	r2, [r3, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801c532:	4618      	mov	r0, r3
 801c534:	f7f1 fdc6 	bl	800e0c4 <mbedtls_md_info_from_type>
 801c538:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( md_info == NULL )
 801c53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d102      	bne.n	801c546 <x509_crt_verify_top+0xb6>
    {
        /*
         * Cannot check 'unknown', no need to try any CA
         */
        trust_ca = NULL;
 801c540:	2300      	movs	r3, #0
 801c542:	60bb      	str	r3, [r7, #8]
 801c544:	e083      	b.n	801c64e <x509_crt_verify_top+0x1be>
    }
    else
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	6959      	ldr	r1, [r3, #20]
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	691a      	ldr	r2, [r3, #16]
 801c54e:	f107 0314 	add.w	r3, r7, #20
 801c552:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c554:	f7f1 fe50 	bl	800e1f8 <mbedtls_md>

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 801c558:	e079      	b.n	801c64e <x509_crt_verify_top+0x1be>
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 801c55a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	bf0c      	ite	eq
 801c560:	2301      	moveq	r3, #1
 801c562:	2300      	movne	r3, #0
 801c564:	b2db      	uxtb	r3, r3
 801c566:	2201      	movs	r2, #1
 801c568:	68b9      	ldr	r1, [r7, #8]
 801c56a:	68f8      	ldr	r0, [r7, #12]
 801c56c:	f7ff ff45 	bl	801c3fa <x509_crt_check_parent>
 801c570:	4603      	mov	r3, r0
 801c572:	2b00      	cmp	r3, #0
 801c574:	d160      	bne.n	801c638 <x509_crt_verify_top+0x1a8>
            continue;

        check_path_cnt = path_cnt + 1;
 801c576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c578:	3301      	adds	r3, #1
 801c57a:	647b      	str	r3, [r7, #68]	; 0x44

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c580:	68bb      	ldr	r3, [r7, #8]
 801c582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c584:	429a      	cmp	r2, r3
 801c586:	d10e      	bne.n	801c5a6 <x509_crt_verify_top+0x116>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801c58c:	68bb      	ldr	r3, [r7, #8]
 801c58e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c594:	461a      	mov	r2, r3
 801c596:	f001 fd49 	bl	801e02c <memcmp>
 801c59a:	4603      	mov	r3, r0
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d102      	bne.n	801c5a6 <x509_crt_verify_top+0x116>
                            child->issuer_raw.len ) == 0 )
        {
            check_path_cnt--;
 801c5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c5a2:	3b01      	subs	r3, #1
 801c5a4:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 801c5a6:	68bb      	ldr	r3, [r7, #8]
 801c5a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	dd07      	ble.n	801c5c0 <x509_crt_verify_top+0x130>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
 801c5b0:	68bb      	ldr	r3, [r7, #8]
 801c5b2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 801c5b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c5b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c5ba:	1acb      	subs	r3, r1, r3
        if( trust_ca->max_pathlen > 0 &&
 801c5bc:	429a      	cmp	r2, r3
 801c5be:	db3d      	blt.n	801c63c <x509_crt_verify_top+0x1ac>
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	f893 4129 	ldrb.w	r4, [r3, #297]	; 0x129
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
 801c5cc:	68bb      	ldr	r3, [r7, #8]
 801c5ce:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	f893 8128 	ldrb.w	r8, [r3, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 801c5d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c5da:	f7f1 ffb1 	bl	800e540 <mbedtls_md_get_size>
 801c5de:	4603      	mov	r3, r0
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 801c5e0:	4619      	mov	r1, r3
                           child->sig.p, child->sig.len ) != 0 )
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 801c5e8:	68fa      	ldr	r2, [r7, #12]
 801c5ea:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 801c5ee:	9203      	str	r2, [sp, #12]
 801c5f0:	9302      	str	r3, [sp, #8]
 801c5f2:	9101      	str	r1, [sp, #4]
 801c5f4:	f107 0314 	add.w	r3, r7, #20
 801c5f8:	9300      	str	r3, [sp, #0]
 801c5fa:	4643      	mov	r3, r8
 801c5fc:	4632      	mov	r2, r6
 801c5fe:	4629      	mov	r1, r5
 801c600:	4620      	mov	r0, r4
 801c602:	f7f2 fc19 	bl	800ee38 <mbedtls_pk_verify_ext>
 801c606:	4603      	mov	r3, r0
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d119      	bne.n	801c640 <x509_crt_verify_top+0x1b0>
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 801c60c:	68bb      	ldr	r3, [r7, #8]
 801c60e:	33a4      	adds	r3, #164	; 0xa4
 801c610:	4618      	mov	r0, r3
 801c612:	f7fe f823 	bl	801a65c <mbedtls_x509_time_is_past>
 801c616:	4603      	mov	r3, r0
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d107      	bne.n	801c62c <x509_crt_verify_top+0x19c>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 801c61c:	68bb      	ldr	r3, [r7, #8]
 801c61e:	338c      	adds	r3, #140	; 0x8c
 801c620:	4618      	mov	r0, r3
 801c622:	f7fe f826 	bl	801a672 <mbedtls_x509_time_is_future>
 801c626:	4603      	mov	r3, r0
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d014      	beq.n	801c656 <x509_crt_verify_top+0x1c6>
        {
            if ( future_past_ca == NULL )
 801c62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d108      	bne.n	801c644 <x509_crt_verify_top+0x1b4>
                future_past_ca = trust_ca;
 801c632:	68bb      	ldr	r3, [r7, #8]
 801c634:	643b      	str	r3, [r7, #64]	; 0x40

            continue;
 801c636:	e005      	b.n	801c644 <x509_crt_verify_top+0x1b4>
            continue;
 801c638:	bf00      	nop
 801c63a:	e004      	b.n	801c646 <x509_crt_verify_top+0x1b6>
            continue;
 801c63c:	bf00      	nop
 801c63e:	e002      	b.n	801c646 <x509_crt_verify_top+0x1b6>
            continue;
 801c640:	bf00      	nop
 801c642:	e000      	b.n	801c646 <x509_crt_verify_top+0x1b6>
            continue;
 801c644:	bf00      	nop
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 801c646:	68bb      	ldr	r3, [r7, #8]
 801c648:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c64c:	60bb      	str	r3, [r7, #8]
 801c64e:	68bb      	ldr	r3, [r7, #8]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d182      	bne.n	801c55a <x509_crt_verify_top+0xca>
 801c654:	e000      	b.n	801c658 <x509_crt_verify_top+0x1c8>
        }

        break;
 801c656:	bf00      	nop
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 801c658:	68bb      	ldr	r3, [r7, #8]
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d104      	bne.n	801c668 <x509_crt_verify_top+0x1d8>
 801c65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c660:	60bb      	str	r3, [r7, #8]
 801c662:	68bb      	ldr	r3, [r7, #8]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d017      	beq.n	801c698 <x509_crt_verify_top+0x208>
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801c668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	f023 0208 	bic.w	r2, r3, #8
 801c670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c672:	601a      	str	r2, [r3, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 801c67a:	68bb      	ldr	r3, [r7, #8]
 801c67c:	33bc      	adds	r3, #188	; 0xbc
 801c67e:	461a      	mov	r2, r3
 801c680:	6838      	ldr	r0, [r7, #0]
 801c682:	f7fe f84e 	bl	801a722 <x509_profile_check_key>
 801c686:	4603      	mov	r3, r0
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d005      	beq.n	801c698 <x509_crt_verify_top+0x208>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801c68c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801c694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c696:	601a      	str	r2, [r3, #0]
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 801c698:	68bb      	ldr	r3, [r7, #8]
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d03a      	beq.n	801c714 <x509_crt_verify_top+0x284>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 801c69e:	68fb      	ldr	r3, [r7, #12]
 801c6a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c6a2:	68bb      	ldr	r3, [r7, #8]
 801c6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    if( trust_ca != NULL &&
 801c6a6:	429a      	cmp	r2, r3
 801c6a8:	d10b      	bne.n	801c6c2 <x509_crt_verify_top+0x232>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801c6ae:	68bb      	ldr	r3, [r7, #8]
 801c6b0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6b6:	461a      	mov	r2, r3
 801c6b8:	f001 fcb8 	bl	801e02c <memcmp>
 801c6bc:	4603      	mov	r3, r0
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d028      	beq.n	801c714 <x509_crt_verify_top+0x284>
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 801c6c2:	68bb      	ldr	r3, [r7, #8]
 801c6c4:	33a4      	adds	r3, #164	; 0xa4
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	f7fd ffc8 	bl	801a65c <mbedtls_x509_time_is_past>
 801c6cc:	4603      	mov	r3, r0
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d003      	beq.n	801c6da <x509_crt_verify_top+0x24a>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801c6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c6d4:	f043 0301 	orr.w	r3, r3, #1
 801c6d8:	637b      	str	r3, [r7, #52]	; 0x34

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 801c6da:	68bb      	ldr	r3, [r7, #8]
 801c6dc:	338c      	adds	r3, #140	; 0x8c
 801c6de:	4618      	mov	r0, r3
 801c6e0:	f7fd ffc7 	bl	801a672 <mbedtls_x509_time_is_future>
 801c6e4:	4603      	mov	r3, r0
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d003      	beq.n	801c6f2 <x509_crt_verify_top+0x262>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 801c6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c6ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c6f0:	637b      	str	r3, [r7, #52]	; 0x34

        if( NULL != f_vrfy )
 801c6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d00d      	beq.n	801c714 <x509_crt_verify_top+0x284>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 801c6f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c6fa:	1c5a      	adds	r2, r3, #1
 801c6fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c700:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801c702:	68b9      	ldr	r1, [r7, #8]
 801c704:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801c706:	47a0      	blx	r4
 801c708:	63b8      	str	r0, [r7, #56]	; 0x38
 801c70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d001      	beq.n	801c714 <x509_crt_verify_top+0x284>
                                &ca_flags ) ) != 0 )
            {
                return( ret );
 801c710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c712:	e015      	b.n	801c740 <x509_crt_verify_top+0x2b0>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 801c714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c716:	2b00      	cmp	r3, #0
 801c718:	d00b      	beq.n	801c732 <x509_crt_verify_top+0x2a2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 801c71a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801c71c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c71e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c720:	68f9      	ldr	r1, [r7, #12]
 801c722:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801c724:	47a0      	blx	r4
 801c726:	63b8      	str	r0, [r7, #56]	; 0x38
 801c728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d001      	beq.n	801c732 <x509_crt_verify_top+0x2a2>
            return( ret );
 801c72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c730:	e006      	b.n	801c740 <x509_crt_verify_top+0x2b0>
    }

    *flags |= ca_flags;
 801c732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c734:	681a      	ldr	r2, [r3, #0]
 801c736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c738:	431a      	orrs	r2, r3
 801c73a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c73c:	601a      	str	r2, [r3, #0]

    return( 0 );
 801c73e:	2300      	movs	r3, #0
}
 801c740:	4618      	mov	r0, r3
 801c742:	3748      	adds	r7, #72	; 0x48
 801c744:	46bd      	mov	sp, r7
 801c746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801c74c <x509_crt_verify_child>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 801c74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c750:	b096      	sub	sp, #88	; 0x58
 801c752:	af06      	add	r7, sp, #24
 801c754:	60f8      	str	r0, [r7, #12]
 801c756:	60b9      	str	r1, [r7, #8]
 801c758:	607a      	str	r2, [r7, #4]
 801c75a:	603b      	str	r3, [r7, #0]
    int ret;
    uint32_t parent_flags = 0;
 801c75c:	2300      	movs	r3, #0
 801c75e:	633b      	str	r3, [r7, #48]	; 0x30
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 801c760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c762:	2b00      	cmp	r3, #0
 801c764:	d00e      	beq.n	801c784 <x509_crt_verify_child+0x38>
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	336c      	adds	r3, #108	; 0x6c
 801c770:	4619      	mov	r1, r3
 801c772:	4610      	mov	r0, r2
 801c774:	f7ff fdee 	bl	801c354 <x509_name_cmp>
 801c778:	4603      	mov	r3, r0
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d102      	bne.n	801c784 <x509_crt_verify_child+0x38>
        self_cnt++;
 801c77e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c780:	3301      	adds	r3, #1
 801c782:	663b      	str	r3, [r7, #96]	; 0x60

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 801c784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c786:	2b07      	cmp	r3, #7
 801c788:	dd01      	ble.n	801c78e <x509_crt_verify_child+0x42>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 801c78a:	4b96      	ldr	r3, [pc, #600]	; (801c9e4 <x509_crt_verify_child+0x298>)
 801c78c:	e142      	b.n	801ca14 <x509_crt_verify_child+0x2c8>
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	33a4      	adds	r3, #164	; 0xa4
 801c792:	4618      	mov	r0, r3
 801c794:	f7fd ff62 	bl	801a65c <mbedtls_x509_time_is_past>
 801c798:	4603      	mov	r3, r0
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d005      	beq.n	801c7aa <x509_crt_verify_child+0x5e>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801c79e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	f043 0201 	orr.w	r2, r3, #1
 801c7a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7a8:	601a      	str	r2, [r3, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	338c      	adds	r3, #140	; 0x8c
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	f7fd ff5f 	bl	801a672 <mbedtls_x509_time_is_future>
 801c7b4:	4603      	mov	r3, r0
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d005      	beq.n	801c7c6 <x509_crt_verify_child+0x7a>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 801c7ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801c7c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7c4:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801c7cc:	4619      	mov	r1, r3
 801c7ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c7d0:	f7fd ff73 	bl	801a6ba <x509_profile_check_md_alg>
 801c7d4:	4603      	mov	r3, r0
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d005      	beq.n	801c7e6 <x509_crt_verify_child+0x9a>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 801c7da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801c7e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7e4:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801c7ec:	4619      	mov	r1, r3
 801c7ee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c7f0:	f7fd ff7d 	bl	801a6ee <x509_profile_check_pk_alg>
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d005      	beq.n	801c806 <x509_crt_verify_child+0xba>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 801c7fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801c802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c804:	601a      	str	r2, [r3, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801c80c:	4618      	mov	r0, r3
 801c80e:	f7f1 fc59 	bl	800e0c4 <mbedtls_md_info_from_type>
 801c812:	63b8      	str	r0, [r7, #56]	; 0x38
    if( md_info == NULL )
 801c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c816:	2b00      	cmp	r3, #0
 801c818:	d106      	bne.n	801c828 <x509_crt_verify_child+0xdc>
    {
        /*
         * Cannot check 'unknown' hash
         */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801c81a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	f043 0208 	orr.w	r2, r3, #8
 801c822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c824:	601a      	str	r2, [r3, #0]
 801c826:	e046      	b.n	801c8b6 <x509_crt_verify_child+0x16a>
    }
    else
    {
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	6959      	ldr	r1, [r3, #20]
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	691a      	ldr	r2, [r3, #16]
 801c830:	f107 0310 	add.w	r3, r7, #16
 801c834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c836:	f7f1 fcdf 	bl	800e1f8 <mbedtls_md>

        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 801c840:	68bb      	ldr	r3, [r7, #8]
 801c842:	33bc      	adds	r3, #188	; 0xbc
 801c844:	461a      	mov	r2, r3
 801c846:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c848:	f7fd ff6b 	bl	801a722 <x509_profile_check_key>
 801c84c:	4603      	mov	r3, r0
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d005      	beq.n	801c85e <x509_crt_verify_child+0x112>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801c852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801c85a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c85c:	601a      	str	r2, [r3, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	f893 4129 	ldrb.w	r4, [r3, #297]	; 0x129
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
 801c86a:	68bb      	ldr	r3, [r7, #8]
 801c86c:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	f893 8128 	ldrb.w	r8, [r3, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 801c876:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c878:	f7f1 fe62 	bl	800e540 <mbedtls_md_get_size>
 801c87c:	4603      	mov	r3, r0
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801c87e:	4619      	mov	r1, r3
                           child->sig.p, child->sig.len ) != 0 )
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801c886:	68fa      	ldr	r2, [r7, #12]
 801c888:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 801c88c:	9203      	str	r2, [sp, #12]
 801c88e:	9302      	str	r3, [sp, #8]
 801c890:	9101      	str	r1, [sp, #4]
 801c892:	f107 0310 	add.w	r3, r7, #16
 801c896:	9300      	str	r3, [sp, #0]
 801c898:	4643      	mov	r3, r8
 801c89a:	4632      	mov	r2, r6
 801c89c:	4629      	mov	r1, r5
 801c89e:	4620      	mov	r0, r4
 801c8a0:	f7f2 faca 	bl	800ee38 <mbedtls_pk_verify_ext>
 801c8a4:	4603      	mov	r3, r0
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d005      	beq.n	801c8b6 <x509_crt_verify_child+0x16a>
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801c8aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	f043 0208 	orr.w	r2, r3, #8
 801c8b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c8b4:	601a      	str	r2, [r3, #0]
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c8ba:	e011      	b.n	801c8e0 <x509_crt_verify_child+0x194>
         grandparent != NULL;
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 801c8bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	bf0c      	ite	eq
 801c8c2:	2301      	moveq	r3, #1
 801c8c4:	2300      	movne	r3, #0
 801c8c6:	b2db      	uxtb	r3, r3
 801c8c8:	2200      	movs	r2, #0
 801c8ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c8cc:	68b8      	ldr	r0, [r7, #8]
 801c8ce:	f7ff fd94 	bl	801c3fa <x509_crt_check_parent>
 801c8d2:	4603      	mov	r3, r0
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d007      	beq.n	801c8e8 <x509_crt_verify_child+0x19c>
         grandparent = grandparent->next )
 801c8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8da:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c8de:	63fb      	str	r3, [r7, #60]	; 0x3c
    for( grandparent = trust_ca;
 801c8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d1ea      	bne.n	801c8bc <x509_crt_verify_child+0x170>
 801c8e6:	e000      	b.n	801c8ea <x509_crt_verify_child+0x19e>
                                   0, path_cnt == 0 ) == 0 )
            break;
 801c8e8:	bf00      	nop
    }

    if( grandparent != NULL )
 801c8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d017      	beq.n	801c920 <x509_crt_verify_child+0x1d4>
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 801c8f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c8f2:	3301      	adds	r3, #1
 801c8f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c8f6:	9204      	str	r2, [sp, #16]
 801c8f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c8fa:	9203      	str	r2, [sp, #12]
 801c8fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c900:	9202      	str	r2, [sp, #8]
 801c902:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c904:	9201      	str	r2, [sp, #4]
 801c906:	9300      	str	r3, [sp, #0]
 801c908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c90a:	683a      	ldr	r2, [r7, #0]
 801c90c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c90e:	68b8      	ldr	r0, [r7, #8]
 801c910:	f7ff fdbe 	bl	801c490 <x509_crt_verify_top>
 801c914:	6378      	str	r0, [r7, #52]	; 0x34
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
        if( ret != 0 )
 801c916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d065      	beq.n	801c9e8 <x509_crt_verify_child+0x29c>
            return( ret );
 801c91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c91e:	e079      	b.n	801ca14 <x509_crt_verify_child+0x2c8>
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 801c920:	68bb      	ldr	r3, [r7, #8]
 801c922:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c926:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c928:	e021      	b.n	801c96e <x509_crt_verify_child+0x222>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 801c92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c92c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801c930:	2b00      	cmp	r3, #0
 801c932:	dd08      	ble.n	801c946 <x509_crt_verify_child+0x1fa>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 801c934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c936:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 801c93a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c93c:	1c99      	adds	r1, r3, #2
 801c93e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c940:	1acb      	subs	r3, r1, r3
            if( grandparent->max_pathlen > 0 &&
 801c942:	429a      	cmp	r2, r3
 801c944:	db0e      	blt.n	801c964 <x509_crt_verify_child+0x218>
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 801c946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c948:	2b00      	cmp	r3, #0
 801c94a:	bf0c      	ite	eq
 801c94c:	2301      	moveq	r3, #1
 801c94e:	2300      	movne	r3, #0
 801c950:	b2db      	uxtb	r3, r3
 801c952:	2200      	movs	r2, #0
 801c954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c956:	68b8      	ldr	r0, [r7, #8]
 801c958:	f7ff fd4f 	bl	801c3fa <x509_crt_check_parent>
 801c95c:	4603      	mov	r3, r0
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d009      	beq.n	801c976 <x509_crt_verify_child+0x22a>
 801c962:	e000      	b.n	801c966 <x509_crt_verify_child+0x21a>
                continue;
 801c964:	bf00      	nop
             grandparent = grandparent->next )
 801c966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c968:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( grandparent = parent->next;
 801c96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c970:	2b00      	cmp	r3, #0
 801c972:	d1da      	bne.n	801c92a <x509_crt_verify_child+0x1de>
 801c974:	e000      	b.n	801c978 <x509_crt_verify_child+0x22c>
                                       0, path_cnt == 0 ) == 0 )
                break;
 801c976:	bf00      	nop
        }

        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
 801c978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d019      	beq.n	801c9b2 <x509_crt_verify_child+0x266>
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
 801c97e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c980:	3301      	adds	r3, #1
 801c982:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c984:	9205      	str	r2, [sp, #20]
 801c986:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c988:	9204      	str	r2, [sp, #16]
 801c98a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c98e:	9203      	str	r2, [sp, #12]
 801c990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c992:	9202      	str	r2, [sp, #8]
 801c994:	9301      	str	r3, [sp, #4]
 801c996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c998:	9300      	str	r3, [sp, #0]
 801c99a:	683b      	ldr	r3, [r7, #0]
 801c99c:	687a      	ldr	r2, [r7, #4]
 801c99e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c9a0:	68b8      	ldr	r0, [r7, #8]
 801c9a2:	f7ff fed3 	bl	801c74c <x509_crt_verify_child>
 801c9a6:	6378      	str	r0, [r7, #52]	; 0x34
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
            if( ret != 0 )
 801c9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d01c      	beq.n	801c9e8 <x509_crt_verify_child+0x29c>
                return( ret );
 801c9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9b0:	e030      	b.n	801ca14 <x509_crt_verify_child+0x2c8>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 801c9b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c9b4:	3301      	adds	r3, #1
 801c9b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c9b8:	9204      	str	r2, [sp, #16]
 801c9ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c9bc:	9203      	str	r2, [sp, #12]
 801c9be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c9c2:	9202      	str	r2, [sp, #8]
 801c9c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c9c6:	9201      	str	r2, [sp, #4]
 801c9c8:	9300      	str	r3, [sp, #0]
 801c9ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c9cc:	683a      	ldr	r2, [r7, #0]
 801c9ce:	6879      	ldr	r1, [r7, #4]
 801c9d0:	68b8      	ldr	r0, [r7, #8]
 801c9d2:	f7ff fd5d 	bl	801c490 <x509_crt_verify_top>
 801c9d6:	6378      	str	r0, [r7, #52]	; 0x34
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
            if( ret != 0 )
 801c9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d004      	beq.n	801c9e8 <x509_crt_verify_child+0x29c>
                return( ret );
 801c9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9e0:	e018      	b.n	801ca14 <x509_crt_verify_child+0x2c8>
 801c9e2:	bf00      	nop
 801c9e4:	ffffd000 	.word	0xffffd000
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 801c9e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d00b      	beq.n	801ca06 <x509_crt_verify_child+0x2ba>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 801c9ee:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801c9f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c9f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c9f4:	68f9      	ldr	r1, [r7, #12]
 801c9f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c9f8:	47a0      	blx	r4
 801c9fa:	6378      	str	r0, [r7, #52]	; 0x34
 801c9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d001      	beq.n	801ca06 <x509_crt_verify_child+0x2ba>
            return( ret );
 801ca02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca04:	e006      	b.n	801ca14 <x509_crt_verify_child+0x2c8>

    *flags |= parent_flags;
 801ca06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca08:	681a      	ldr	r2, [r3, #0]
 801ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca0c:	431a      	orrs	r2, r3
 801ca0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca10:	601a      	str	r2, [r3, #0]

    return( 0 );
 801ca12:	2300      	movs	r3, #0
}
 801ca14:	4618      	mov	r0, r3
 801ca16:	3740      	adds	r7, #64	; 0x40
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca1e:	bf00      	nop

0801ca20 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b092      	sub	sp, #72	; 0x48
 801ca24:	af06      	add	r7, sp, #24
 801ca26:	60f8      	str	r0, [r7, #12]
 801ca28:	60b9      	str	r1, [r7, #8]
 801ca2a:	607a      	str	r2, [r7, #4]
 801ca2c:	603b      	str	r3, [r7, #0]
    size_t cn_len;
    int ret;
    int pathlen = 0, selfsigned = 0;
 801ca2e:	2300      	movs	r3, #0
 801ca30:	61fb      	str	r3, [r7, #28]
 801ca32:	2300      	movs	r3, #0
 801ca34:	61bb      	str	r3, [r7, #24]
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
 801ca36:	2300      	movs	r3, #0
 801ca38:	623b      	str	r3, [r7, #32]
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 801ca3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca3c:	2200      	movs	r2, #0
 801ca3e:	601a      	str	r2, [r3, #0]

    if( profile == NULL )
 801ca40:	683b      	ldr	r3, [r7, #0]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d102      	bne.n	801ca4c <mbedtls_x509_crt_verify_with_profile+0x2c>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 801ca46:	4b95      	ldr	r3, [pc, #596]	; (801cc9c <mbedtls_x509_crt_verify_with_profile+0x27c>)
 801ca48:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
 801ca4a:	e141      	b.n	801ccd0 <mbedtls_x509_crt_verify_with_profile+0x2b0>
    }

    if( cn != NULL )
 801ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	f000 8098 	beq.w	801cb84 <mbedtls_x509_crt_verify_with_profile+0x164>
    {
        name = &crt->subject;
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	336c      	adds	r3, #108	; 0x6c
 801ca58:	627b      	str	r3, [r7, #36]	; 0x24
        cn_len = strlen( cn );
 801ca5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ca5c:	f7e3 fbb8 	bl	80001d0 <strlen>
 801ca60:	6178      	str	r0, [r7, #20]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 801ca62:	68fb      	ldr	r3, [r7, #12]
 801ca64:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801ca68:	f003 0320 	and.w	r3, r3, #32
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d079      	beq.n	801cb64 <mbedtls_x509_crt_verify_with_profile+0x144>
        {
            cur = &crt->subject_alt_names;
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	33e8      	adds	r3, #232	; 0xe8
 801ca74:	623b      	str	r3, [r7, #32]

            while( cur != NULL )
 801ca76:	e027      	b.n	801cac8 <mbedtls_x509_crt_verify_with_profile+0xa8>
            {
                if( cur->buf.len == cn_len &&
 801ca78:	6a3b      	ldr	r3, [r7, #32]
 801ca7a:	685b      	ldr	r3, [r3, #4]
 801ca7c:	697a      	ldr	r2, [r7, #20]
 801ca7e:	429a      	cmp	r2, r3
 801ca80:	d109      	bne.n	801ca96 <mbedtls_x509_crt_verify_with_profile+0x76>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 801ca82:	6a3b      	ldr	r3, [r7, #32]
 801ca84:	689b      	ldr	r3, [r3, #8]
 801ca86:	697a      	ldr	r2, [r7, #20]
 801ca88:	4619      	mov	r1, r3
 801ca8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ca8c:	f7ff fb7c 	bl	801c188 <x509_memcasecmp>
 801ca90:	4603      	mov	r3, r0
                if( cur->buf.len == cn_len &&
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d01c      	beq.n	801cad0 <mbedtls_x509_crt_verify_with_profile+0xb0>
                    break;

                if( cur->buf.len > 2 &&
 801ca96:	6a3b      	ldr	r3, [r7, #32]
 801ca98:	685b      	ldr	r3, [r3, #4]
 801ca9a:	2b02      	cmp	r3, #2
 801ca9c:	d911      	bls.n	801cac2 <mbedtls_x509_crt_verify_with_profile+0xa2>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 801ca9e:	6a3b      	ldr	r3, [r7, #32]
 801caa0:	689b      	ldr	r3, [r3, #8]
 801caa2:	2202      	movs	r2, #2
 801caa4:	497e      	ldr	r1, [pc, #504]	; (801cca0 <mbedtls_x509_crt_verify_with_profile+0x280>)
 801caa6:	4618      	mov	r0, r3
 801caa8:	f001 fac0 	bl	801e02c <memcmp>
 801caac:	4603      	mov	r3, r0
                if( cur->buf.len > 2 &&
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d107      	bne.n	801cac2 <mbedtls_x509_crt_verify_with_profile+0xa2>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 801cab2:	6a3b      	ldr	r3, [r7, #32]
 801cab4:	4619      	mov	r1, r3
 801cab6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cab8:	f7ff fbaf 	bl	801c21a <x509_check_wildcard>
 801cabc:	4603      	mov	r3, r0
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d008      	beq.n	801cad4 <mbedtls_x509_crt_verify_with_profile+0xb4>
                {
                    break;
                }

                cur = cur->next;
 801cac2:	6a3b      	ldr	r3, [r7, #32]
 801cac4:	68db      	ldr	r3, [r3, #12]
 801cac6:	623b      	str	r3, [r7, #32]
            while( cur != NULL )
 801cac8:	6a3b      	ldr	r3, [r7, #32]
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d1d4      	bne.n	801ca78 <mbedtls_x509_crt_verify_with_profile+0x58>
 801cace:	e002      	b.n	801cad6 <mbedtls_x509_crt_verify_with_profile+0xb6>
                    break;
 801cad0:	bf00      	nop
 801cad2:	e000      	b.n	801cad6 <mbedtls_x509_crt_verify_with_profile+0xb6>
                    break;
 801cad4:	bf00      	nop
            }

            if( cur == NULL )
 801cad6:	6a3b      	ldr	r3, [r7, #32]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d153      	bne.n	801cb84 <mbedtls_x509_crt_verify_with_profile+0x164>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 801cadc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	f043 0204 	orr.w	r2, r3, #4
 801cae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cae6:	601a      	str	r2, [r3, #0]
 801cae8:	e04c      	b.n	801cb84 <mbedtls_x509_crt_verify_with_profile+0x164>
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 801caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caec:	685b      	ldr	r3, [r3, #4]
 801caee:	2b03      	cmp	r3, #3
 801caf0:	d10a      	bne.n	801cb08 <mbedtls_x509_crt_verify_with_profile+0xe8>
 801caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caf4:	6899      	ldr	r1, [r3, #8]
 801caf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caf8:	685b      	ldr	r3, [r3, #4]
 801cafa:	461a      	mov	r2, r3
 801cafc:	4869      	ldr	r0, [pc, #420]	; (801cca4 <mbedtls_x509_crt_verify_with_profile+0x284>)
 801cafe:	f001 fa95 	bl	801e02c <memcmp>
 801cb02:	4603      	mov	r3, r0
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d001      	beq.n	801cb0c <mbedtls_x509_crt_verify_with_profile+0xec>
 801cb08:	2301      	movs	r3, #1
 801cb0a:	e000      	b.n	801cb0e <mbedtls_x509_crt_verify_with_profile+0xee>
 801cb0c:	2300      	movs	r3, #0
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d125      	bne.n	801cb5e <mbedtls_x509_crt_verify_with_profile+0x13e>
                {
                    if( name->val.len == cn_len &&
 801cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb14:	691b      	ldr	r3, [r3, #16]
 801cb16:	697a      	ldr	r2, [r7, #20]
 801cb18:	429a      	cmp	r2, r3
 801cb1a:	d109      	bne.n	801cb30 <mbedtls_x509_crt_verify_with_profile+0x110>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 801cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb1e:	695b      	ldr	r3, [r3, #20]
 801cb20:	697a      	ldr	r2, [r7, #20]
 801cb22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cb24:	4618      	mov	r0, r3
 801cb26:	f7ff fb2f 	bl	801c188 <x509_memcasecmp>
 801cb2a:	4603      	mov	r3, r0
                    if( name->val.len == cn_len &&
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d01d      	beq.n	801cb6c <mbedtls_x509_crt_verify_with_profile+0x14c>
                        break;

                    if( name->val.len > 2 &&
 801cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb32:	691b      	ldr	r3, [r3, #16]
 801cb34:	2b02      	cmp	r3, #2
 801cb36:	d912      	bls.n	801cb5e <mbedtls_x509_crt_verify_with_profile+0x13e>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 801cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb3a:	695b      	ldr	r3, [r3, #20]
 801cb3c:	2202      	movs	r2, #2
 801cb3e:	4958      	ldr	r1, [pc, #352]	; (801cca0 <mbedtls_x509_crt_verify_with_profile+0x280>)
 801cb40:	4618      	mov	r0, r3
 801cb42:	f001 fa73 	bl	801e02c <memcmp>
 801cb46:	4603      	mov	r3, r0
                    if( name->val.len > 2 &&
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d108      	bne.n	801cb5e <mbedtls_x509_crt_verify_with_profile+0x13e>
                        x509_check_wildcard( cn, &name->val ) == 0 )
 801cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb4e:	330c      	adds	r3, #12
 801cb50:	4619      	mov	r1, r3
 801cb52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cb54:	f7ff fb61 	bl	801c21a <x509_check_wildcard>
 801cb58:	4603      	mov	r3, r0
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d008      	beq.n	801cb70 <mbedtls_x509_crt_verify_with_profile+0x150>
                        break;
                }

                name = name->next;
 801cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb60:	699b      	ldr	r3, [r3, #24]
 801cb62:	627b      	str	r3, [r7, #36]	; 0x24
            while( name != NULL )
 801cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d1bf      	bne.n	801caea <mbedtls_x509_crt_verify_with_profile+0xca>
 801cb6a:	e002      	b.n	801cb72 <mbedtls_x509_crt_verify_with_profile+0x152>
                        break;
 801cb6c:	bf00      	nop
 801cb6e:	e000      	b.n	801cb72 <mbedtls_x509_crt_verify_with_profile+0x152>
                        break;
 801cb70:	bf00      	nop
            }

            if( name == NULL )
 801cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d105      	bne.n	801cb84 <mbedtls_x509_crt_verify_with_profile+0x164>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 801cb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	f043 0204 	orr.w	r2, r3, #4
 801cb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb82:	601a      	str	r2, [r3, #0]
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	33bc      	adds	r3, #188	; 0xbc
 801cb88:	4618      	mov	r0, r3
 801cb8a:	f7f2 fa57 	bl	800f03c <mbedtls_pk_get_type>
 801cb8e:	4603      	mov	r3, r0
 801cb90:	74fb      	strb	r3, [r7, #19]

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
 801cb92:	7cfb      	ldrb	r3, [r7, #19]
 801cb94:	4619      	mov	r1, r3
 801cb96:	6838      	ldr	r0, [r7, #0]
 801cb98:	f7fd fda9 	bl	801a6ee <x509_profile_check_pk_alg>
 801cb9c:	4603      	mov	r3, r0
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d005      	beq.n	801cbae <mbedtls_x509_crt_verify_with_profile+0x18e>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 801cba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801cbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbac:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 801cbb4:	7cfb      	ldrb	r3, [r7, #19]
 801cbb6:	4619      	mov	r1, r3
 801cbb8:	6838      	ldr	r0, [r7, #0]
 801cbba:	f7fd fdb2 	bl	801a722 <x509_profile_check_key>
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d005      	beq.n	801cbd0 <mbedtls_x509_crt_verify_with_profile+0x1b0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801cbc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801cbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbce:	601a      	str	r2, [r3, #0]

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 801cbd0:	68bb      	ldr	r3, [r7, #8]
 801cbd2:	62bb      	str	r3, [r7, #40]	; 0x28
 801cbd4:	e011      	b.n	801cbfa <mbedtls_x509_crt_verify_with_profile+0x1da>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 801cbd6:	69fb      	ldr	r3, [r7, #28]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	bf0c      	ite	eq
 801cbdc:	2301      	moveq	r3, #1
 801cbde:	2300      	movne	r3, #0
 801cbe0:	b2db      	uxtb	r3, r3
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cbe6:	68f8      	ldr	r0, [r7, #12]
 801cbe8:	f7ff fc07 	bl	801c3fa <x509_crt_check_parent>
 801cbec:	4603      	mov	r3, r0
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d007      	beq.n	801cc02 <mbedtls_x509_crt_verify_with_profile+0x1e2>
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 801cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbf4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801cbf8:	62bb      	str	r3, [r7, #40]	; 0x28
 801cbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d1ea      	bne.n	801cbd6 <mbedtls_x509_crt_verify_with_profile+0x1b6>
 801cc00:	e000      	b.n	801cc04 <mbedtls_x509_crt_verify_with_profile+0x1e4>
            break;
 801cc02:	bf00      	nop
    }

    if( parent != NULL )
 801cc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d013      	beq.n	801cc32 <mbedtls_x509_crt_verify_with_profile+0x212>
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 801cc0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc0c:	9304      	str	r3, [sp, #16]
 801cc0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cc10:	9303      	str	r3, [sp, #12]
 801cc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc14:	9302      	str	r3, [sp, #8]
 801cc16:	69bb      	ldr	r3, [r7, #24]
 801cc18:	9301      	str	r3, [sp, #4]
 801cc1a:	69fb      	ldr	r3, [r7, #28]
 801cc1c:	9300      	str	r3, [sp, #0]
 801cc1e:	683b      	ldr	r3, [r7, #0]
 801cc20:	687a      	ldr	r2, [r7, #4]
 801cc22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cc24:	68f8      	ldr	r0, [r7, #12]
 801cc26:	f7ff fc33 	bl	801c490 <x509_crt_verify_top>
 801cc2a:	62f8      	str	r0, [r7, #44]	; 0x2c
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
        if( ret != 0 )
 801cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	e04e      	b.n	801ccd0 <mbedtls_x509_crt_verify_with_profile+0x2b0>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801cc38:	62bb      	str	r3, [r7, #40]	; 0x28
 801cc3a:	e011      	b.n	801cc60 <mbedtls_x509_crt_verify_with_profile+0x240>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 801cc3c:	69fb      	ldr	r3, [r7, #28]
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	bf0c      	ite	eq
 801cc42:	2301      	moveq	r3, #1
 801cc44:	2300      	movne	r3, #0
 801cc46:	b2db      	uxtb	r3, r3
 801cc48:	2200      	movs	r2, #0
 801cc4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cc4c:	68f8      	ldr	r0, [r7, #12]
 801cc4e:	f7ff fbd4 	bl	801c3fa <x509_crt_check_parent>
 801cc52:	4603      	mov	r3, r0
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d007      	beq.n	801cc68 <mbedtls_x509_crt_verify_with_profile+0x248>
        for( parent = crt->next; parent != NULL; parent = parent->next )
 801cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc5a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
 801cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d1ea      	bne.n	801cc3c <mbedtls_x509_crt_verify_with_profile+0x21c>
 801cc66:	e000      	b.n	801cc6a <mbedtls_x509_crt_verify_with_profile+0x24a>
                break;
 801cc68:	bf00      	nop

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
 801cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d01b      	beq.n	801cca8 <mbedtls_x509_crt_verify_with_profile+0x288>
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
 801cc70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc72:	9305      	str	r3, [sp, #20]
 801cc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cc76:	9304      	str	r3, [sp, #16]
 801cc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc7a:	9303      	str	r3, [sp, #12]
 801cc7c:	69bb      	ldr	r3, [r7, #24]
 801cc7e:	9302      	str	r3, [sp, #8]
 801cc80:	69fb      	ldr	r3, [r7, #28]
 801cc82:	9301      	str	r3, [sp, #4]
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	9300      	str	r3, [sp, #0]
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	68ba      	ldr	r2, [r7, #8]
 801cc8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cc8e:	68f8      	ldr	r0, [r7, #12]
 801cc90:	f7ff fd5c 	bl	801c74c <x509_crt_verify_child>
 801cc94:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
            if( ret != 0 )
 801cc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	e019      	b.n	801ccd0 <mbedtls_x509_crt_verify_with_profile+0x2b0>
 801cc9c:	ffffd800 	.word	0xffffd800
 801cca0:	08024424 	.word	0x08024424
 801cca4:	08024428 	.word	0x08024428
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 801cca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ccaa:	9304      	str	r3, [sp, #16]
 801ccac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ccae:	9303      	str	r3, [sp, #12]
 801ccb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ccb2:	9302      	str	r3, [sp, #8]
 801ccb4:	69bb      	ldr	r3, [r7, #24]
 801ccb6:	9301      	str	r3, [sp, #4]
 801ccb8:	69fb      	ldr	r3, [r7, #28]
 801ccba:	9300      	str	r3, [sp, #0]
 801ccbc:	683b      	ldr	r3, [r7, #0]
 801ccbe:	687a      	ldr	r2, [r7, #4]
 801ccc0:	68b9      	ldr	r1, [r7, #8]
 801ccc2:	68f8      	ldr	r0, [r7, #12]
 801ccc4:	f7ff fbe4 	bl	801c490 <x509_crt_verify_top>
 801ccc8:	62f8      	str	r0, [r7, #44]	; 0x2c
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
            if( ret != 0 )
 801ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cccc:	2b00      	cmp	r3, #0
                goto exit;
        }
    }

exit:
 801ccce:	bf00      	nop
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 801ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccd2:	f513 5f1c 	cmn.w	r3, #9984	; 0x2700
 801ccd6:	d101      	bne.n	801ccdc <mbedtls_x509_crt_verify_with_profile+0x2bc>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 801ccd8:	4b0a      	ldr	r3, [pc, #40]	; (801cd04 <mbedtls_x509_crt_verify_with_profile+0x2e4>)
 801ccda:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ret != 0 )
 801ccdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d005      	beq.n	801ccee <mbedtls_x509_crt_verify_with_profile+0x2ce>
    {
        *flags = (uint32_t) -1;
 801cce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cce4:	f04f 32ff 	mov.w	r2, #4294967295
 801cce8:	601a      	str	r2, [r3, #0]
        return( ret );
 801ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccec:	e006      	b.n	801ccfc <mbedtls_x509_crt_verify_with_profile+0x2dc>
    }

    if( *flags != 0 )
 801ccee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ccf0:	681b      	ldr	r3, [r3, #0]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d001      	beq.n	801ccfa <mbedtls_x509_crt_verify_with_profile+0x2da>
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 801ccf6:	4b04      	ldr	r3, [pc, #16]	; (801cd08 <mbedtls_x509_crt_verify_with_profile+0x2e8>)
 801ccf8:	e000      	b.n	801ccfc <mbedtls_x509_crt_verify_with_profile+0x2dc>

    return( 0 );
 801ccfa:	2300      	movs	r3, #0
}
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	3730      	adds	r7, #48	; 0x30
 801cd00:	46bd      	mov	sp, r7
 801cd02:	bd80      	pop	{r7, pc}
 801cd04:	ffffd000 	.word	0xffffd000
 801cd08:	ffffd900 	.word	0xffffd900

0801cd0c <mbedtls_x509_crt_init>:

/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b082      	sub	sp, #8
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	6078      	str	r0, [r7, #4]
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 801cd14:	f44f 729a 	mov.w	r2, #308	; 0x134
 801cd18:	2100      	movs	r1, #0
 801cd1a:	6878      	ldr	r0, [r7, #4]
 801cd1c:	f001 f9be 	bl	801e09c <memset>
}
 801cd20:	bf00      	nop
 801cd22:	3708      	adds	r7, #8
 801cd24:	46bd      	mov	sp, r7
 801cd26:	bd80      	pop	{r7, pc}

0801cd28 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b088      	sub	sp, #32
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	6078      	str	r0, [r7, #4]
    mbedtls_x509_crt *cert_cur = crt;
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	61fb      	str	r3, [r7, #28]
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	f000 8084 	beq.w	801ce44 <mbedtls_x509_crt_free+0x11c>
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 801cd3c:	69fb      	ldr	r3, [r7, #28]
 801cd3e:	33bc      	adds	r3, #188	; 0xbc
 801cd40:	4618      	mov	r0, r3
 801cd42:	f7f1 ffaa 	bl	800ec9a <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 801cd46:	69fb      	ldr	r3, [r7, #28]
 801cd48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cd4a:	61bb      	str	r3, [r7, #24]
        while( name_cur != NULL )
 801cd4c:	e00b      	b.n	801cd66 <mbedtls_x509_crt_free+0x3e>
        {
            name_prv = name_cur;
 801cd4e:	69bb      	ldr	r3, [r7, #24]
 801cd50:	60bb      	str	r3, [r7, #8]
            name_cur = name_cur->next;
 801cd52:	69bb      	ldr	r3, [r7, #24]
 801cd54:	699b      	ldr	r3, [r3, #24]
 801cd56:	61bb      	str	r3, [r7, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 801cd58:	2120      	movs	r1, #32
 801cd5a:	68b8      	ldr	r0, [r7, #8]
 801cd5c:	f7fd fc94 	bl	801a688 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 801cd60:	68b8      	ldr	r0, [r7, #8]
 801cd62:	f001 f95b 	bl	801e01c <free>
        while( name_cur != NULL )
 801cd66:	69bb      	ldr	r3, [r7, #24]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d1f0      	bne.n	801cd4e <mbedtls_x509_crt_free+0x26>
        }

        name_cur = cert_cur->subject.next;
 801cd6c:	69fb      	ldr	r3, [r7, #28]
 801cd6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cd72:	61bb      	str	r3, [r7, #24]
        while( name_cur != NULL )
 801cd74:	e00b      	b.n	801cd8e <mbedtls_x509_crt_free+0x66>
        {
            name_prv = name_cur;
 801cd76:	69bb      	ldr	r3, [r7, #24]
 801cd78:	60bb      	str	r3, [r7, #8]
            name_cur = name_cur->next;
 801cd7a:	69bb      	ldr	r3, [r7, #24]
 801cd7c:	699b      	ldr	r3, [r3, #24]
 801cd7e:	61bb      	str	r3, [r7, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 801cd80:	2120      	movs	r1, #32
 801cd82:	68b8      	ldr	r0, [r7, #8]
 801cd84:	f7fd fc80 	bl	801a688 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 801cd88:	68b8      	ldr	r0, [r7, #8]
 801cd8a:	f001 f947 	bl	801e01c <free>
        while( name_cur != NULL )
 801cd8e:	69bb      	ldr	r3, [r7, #24]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d1f0      	bne.n	801cd76 <mbedtls_x509_crt_free+0x4e>
        }

        seq_cur = cert_cur->ext_key_usage.next;
 801cd94:	69fb      	ldr	r3, [r7, #28]
 801cd96:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801cd9a:	617b      	str	r3, [r7, #20]
        while( seq_cur != NULL )
 801cd9c:	e00b      	b.n	801cdb6 <mbedtls_x509_crt_free+0x8e>
        {
            seq_prv = seq_cur;
 801cd9e:	697b      	ldr	r3, [r7, #20]
 801cda0:	60fb      	str	r3, [r7, #12]
            seq_cur = seq_cur->next;
 801cda2:	697b      	ldr	r3, [r7, #20]
 801cda4:	68db      	ldr	r3, [r3, #12]
 801cda6:	617b      	str	r3, [r7, #20]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 801cda8:	2110      	movs	r1, #16
 801cdaa:	68f8      	ldr	r0, [r7, #12]
 801cdac:	f7fd fc6c 	bl	801a688 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 801cdb0:	68f8      	ldr	r0, [r7, #12]
 801cdb2:	f001 f933 	bl	801e01c <free>
        while( seq_cur != NULL )
 801cdb6:	697b      	ldr	r3, [r7, #20]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d1f0      	bne.n	801cd9e <mbedtls_x509_crt_free+0x76>
        }

        seq_cur = cert_cur->subject_alt_names.next;
 801cdbc:	69fb      	ldr	r3, [r7, #28]
 801cdbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801cdc2:	617b      	str	r3, [r7, #20]
        while( seq_cur != NULL )
 801cdc4:	e00b      	b.n	801cdde <mbedtls_x509_crt_free+0xb6>
        {
            seq_prv = seq_cur;
 801cdc6:	697b      	ldr	r3, [r7, #20]
 801cdc8:	60fb      	str	r3, [r7, #12]
            seq_cur = seq_cur->next;
 801cdca:	697b      	ldr	r3, [r7, #20]
 801cdcc:	68db      	ldr	r3, [r3, #12]
 801cdce:	617b      	str	r3, [r7, #20]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 801cdd0:	2110      	movs	r1, #16
 801cdd2:	68f8      	ldr	r0, [r7, #12]
 801cdd4:	f7fd fc58 	bl	801a688 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 801cdd8:	68f8      	ldr	r0, [r7, #12]
 801cdda:	f001 f91f 	bl	801e01c <free>
        while( seq_cur != NULL )
 801cdde:	697b      	ldr	r3, [r7, #20]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d1f0      	bne.n	801cdc6 <mbedtls_x509_crt_free+0x9e>
        }

        if( cert_cur->raw.p != NULL )
 801cde4:	69fb      	ldr	r3, [r7, #28]
 801cde6:	689b      	ldr	r3, [r3, #8]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d00c      	beq.n	801ce06 <mbedtls_x509_crt_free+0xde>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 801cdec:	69fb      	ldr	r3, [r7, #28]
 801cdee:	689a      	ldr	r2, [r3, #8]
 801cdf0:	69fb      	ldr	r3, [r7, #28]
 801cdf2:	685b      	ldr	r3, [r3, #4]
 801cdf4:	4619      	mov	r1, r3
 801cdf6:	4610      	mov	r0, r2
 801cdf8:	f7fd fc46 	bl	801a688 <mbedtls_zeroize>
            mbedtls_free( cert_cur->raw.p );
 801cdfc:	69fb      	ldr	r3, [r7, #28]
 801cdfe:	689b      	ldr	r3, [r3, #8]
 801ce00:	4618      	mov	r0, r3
 801ce02:	f001 f90b 	bl	801e01c <free>
        }

        cert_cur = cert_cur->next;
 801ce06:	69fb      	ldr	r3, [r7, #28]
 801ce08:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801ce0c:	61fb      	str	r3, [r7, #28]
    }
    while( cert_cur != NULL );
 801ce0e:	69fb      	ldr	r3, [r7, #28]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d193      	bne.n	801cd3c <mbedtls_x509_crt_free+0x14>

    cert_cur = crt;
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	61fb      	str	r3, [r7, #28]
    do
    {
        cert_prv = cert_cur;
 801ce18:	69fb      	ldr	r3, [r7, #28]
 801ce1a:	613b      	str	r3, [r7, #16]
        cert_cur = cert_cur->next;
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801ce22:	61fb      	str	r3, [r7, #28]

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 801ce24:	f44f 719a 	mov.w	r1, #308	; 0x134
 801ce28:	6938      	ldr	r0, [r7, #16]
 801ce2a:	f7fd fc2d 	bl	801a688 <mbedtls_zeroize>
        if( cert_prv != crt )
 801ce2e:	693a      	ldr	r2, [r7, #16]
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	429a      	cmp	r2, r3
 801ce34:	d002      	beq.n	801ce3c <mbedtls_x509_crt_free+0x114>
            mbedtls_free( cert_prv );
 801ce36:	6938      	ldr	r0, [r7, #16]
 801ce38:	f001 f8f0 	bl	801e01c <free>
    }
    while( cert_cur != NULL );
 801ce3c:	69fb      	ldr	r3, [r7, #28]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d1ea      	bne.n	801ce18 <mbedtls_x509_crt_free+0xf0>
 801ce42:	e000      	b.n	801ce46 <mbedtls_x509_crt_free+0x11e>
        return;
 801ce44:	bf00      	nop
}
 801ce46:	3720      	adds	r7, #32
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	bd80      	pop	{r7, pc}

0801ce4c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b084      	sub	sp, #16
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 801ce54:	4b22      	ldr	r3, [pc, #136]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ce56:	68db      	ldr	r3, [r3, #12]
 801ce58:	4798      	blx	r3
   WIZCHIP.CS._select();
 801ce5a:	4b21      	ldr	r3, [pc, #132]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ce5c:	695b      	ldr	r3, [r3, #20]
 801ce5e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801ce60:	4b1f      	ldr	r3, [pc, #124]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ce62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d003      	beq.n	801ce70 <WIZCHIP_READ+0x24>
 801ce68:	4b1d      	ldr	r3, [pc, #116]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ce6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d114      	bne.n	801ce9a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801ce70:	4b1b      	ldr	r3, [pc, #108]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ce72:	6a1b      	ldr	r3, [r3, #32]
 801ce74:	687a      	ldr	r2, [r7, #4]
 801ce76:	0c12      	lsrs	r2, r2, #16
 801ce78:	b2d2      	uxtb	r2, r2
 801ce7a:	4610      	mov	r0, r2
 801ce7c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801ce7e:	4b18      	ldr	r3, [pc, #96]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ce80:	6a1b      	ldr	r3, [r3, #32]
 801ce82:	687a      	ldr	r2, [r7, #4]
 801ce84:	0a12      	lsrs	r2, r2, #8
 801ce86:	b2d2      	uxtb	r2, r2
 801ce88:	4610      	mov	r0, r2
 801ce8a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801ce8c:	4b14      	ldr	r3, [pc, #80]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ce8e:	6a1b      	ldr	r3, [r3, #32]
 801ce90:	687a      	ldr	r2, [r7, #4]
 801ce92:	b2d2      	uxtb	r2, r2
 801ce94:	4610      	mov	r0, r2
 801ce96:	4798      	blx	r3
 801ce98:	e011      	b.n	801cebe <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	0c1b      	lsrs	r3, r3, #16
 801ce9e:	b2db      	uxtb	r3, r3
 801cea0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	0a1b      	lsrs	r3, r3, #8
 801cea6:	b2db      	uxtb	r3, r3
 801cea8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	b2db      	uxtb	r3, r3
 801ceae:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801ceb0:	4b0b      	ldr	r3, [pc, #44]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ceb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ceb4:	f107 020c 	add.w	r2, r7, #12
 801ceb8:	2103      	movs	r1, #3
 801ceba:	4610      	mov	r0, r2
 801cebc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 801cebe:	4b08      	ldr	r3, [pc, #32]	; (801cee0 <WIZCHIP_READ+0x94>)
 801cec0:	69db      	ldr	r3, [r3, #28]
 801cec2:	4798      	blx	r3
 801cec4:	4603      	mov	r3, r0
 801cec6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 801cec8:	4b05      	ldr	r3, [pc, #20]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ceca:	699b      	ldr	r3, [r3, #24]
 801cecc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801cece:	4b04      	ldr	r3, [pc, #16]	; (801cee0 <WIZCHIP_READ+0x94>)
 801ced0:	691b      	ldr	r3, [r3, #16]
 801ced2:	4798      	blx	r3
   return ret;
 801ced4:	7bfb      	ldrb	r3, [r7, #15]
}
 801ced6:	4618      	mov	r0, r3
 801ced8:	3710      	adds	r7, #16
 801ceda:	46bd      	mov	sp, r7
 801cedc:	bd80      	pop	{r7, pc}
 801cede:	bf00      	nop
 801cee0:	20000044 	.word	0x20000044

0801cee4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 801cee4:	b580      	push	{r7, lr}
 801cee6:	b084      	sub	sp, #16
 801cee8:	af00      	add	r7, sp, #0
 801ceea:	6078      	str	r0, [r7, #4]
 801ceec:	460b      	mov	r3, r1
 801ceee:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 801cef0:	4b22      	ldr	r3, [pc, #136]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cef2:	68db      	ldr	r3, [r3, #12]
 801cef4:	4798      	blx	r3
   WIZCHIP.CS._select();
 801cef6:	4b21      	ldr	r3, [pc, #132]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cef8:	695b      	ldr	r3, [r3, #20]
 801cefa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	f043 0304 	orr.w	r3, r3, #4
 801cf02:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801cf04:	4b1d      	ldr	r3, [pc, #116]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cf06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d119      	bne.n	801cf40 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801cf0c:	4b1b      	ldr	r3, [pc, #108]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cf0e:	6a1b      	ldr	r3, [r3, #32]
 801cf10:	687a      	ldr	r2, [r7, #4]
 801cf12:	0c12      	lsrs	r2, r2, #16
 801cf14:	b2d2      	uxtb	r2, r2
 801cf16:	4610      	mov	r0, r2
 801cf18:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801cf1a:	4b18      	ldr	r3, [pc, #96]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cf1c:	6a1b      	ldr	r3, [r3, #32]
 801cf1e:	687a      	ldr	r2, [r7, #4]
 801cf20:	0a12      	lsrs	r2, r2, #8
 801cf22:	b2d2      	uxtb	r2, r2
 801cf24:	4610      	mov	r0, r2
 801cf26:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801cf28:	4b14      	ldr	r3, [pc, #80]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cf2a:	6a1b      	ldr	r3, [r3, #32]
 801cf2c:	687a      	ldr	r2, [r7, #4]
 801cf2e:	b2d2      	uxtb	r2, r2
 801cf30:	4610      	mov	r0, r2
 801cf32:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 801cf34:	4b11      	ldr	r3, [pc, #68]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cf36:	6a1b      	ldr	r3, [r3, #32]
 801cf38:	78fa      	ldrb	r2, [r7, #3]
 801cf3a:	4610      	mov	r0, r2
 801cf3c:	4798      	blx	r3
 801cf3e:	e013      	b.n	801cf68 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	0c1b      	lsrs	r3, r3, #16
 801cf44:	b2db      	uxtb	r3, r3
 801cf46:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	0a1b      	lsrs	r3, r3, #8
 801cf4c:	b2db      	uxtb	r3, r3
 801cf4e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	b2db      	uxtb	r3, r3
 801cf54:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 801cf56:	78fb      	ldrb	r3, [r7, #3]
 801cf58:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 801cf5a:	4b08      	ldr	r3, [pc, #32]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf5e:	f107 020c 	add.w	r2, r7, #12
 801cf62:	2104      	movs	r1, #4
 801cf64:	4610      	mov	r0, r2
 801cf66:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801cf68:	4b04      	ldr	r3, [pc, #16]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cf6a:	699b      	ldr	r3, [r3, #24]
 801cf6c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801cf6e:	4b03      	ldr	r3, [pc, #12]	; (801cf7c <WIZCHIP_WRITE+0x98>)
 801cf70:	691b      	ldr	r3, [r3, #16]
 801cf72:	4798      	blx	r3
}
 801cf74:	bf00      	nop
 801cf76:	3710      	adds	r7, #16
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	bd80      	pop	{r7, pc}
 801cf7c:	20000044 	.word	0x20000044

0801cf80 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801cf80:	b590      	push	{r4, r7, lr}
 801cf82:	b087      	sub	sp, #28
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	60f8      	str	r0, [r7, #12]
 801cf88:	60b9      	str	r1, [r7, #8]
 801cf8a:	4613      	mov	r3, r2
 801cf8c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801cf8e:	4b2b      	ldr	r3, [pc, #172]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801cf90:	68db      	ldr	r3, [r3, #12]
 801cf92:	4798      	blx	r3
   WIZCHIP.CS._select();
 801cf94:	4b29      	ldr	r3, [pc, #164]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801cf96:	695b      	ldr	r3, [r3, #20]
 801cf98:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801cf9a:	4b28      	ldr	r3, [pc, #160]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801cf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d003      	beq.n	801cfaa <WIZCHIP_READ_BUF+0x2a>
 801cfa2:	4b26      	ldr	r3, [pc, #152]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801cfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d126      	bne.n	801cff8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801cfaa:	4b24      	ldr	r3, [pc, #144]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801cfac:	6a1b      	ldr	r3, [r3, #32]
 801cfae:	68fa      	ldr	r2, [r7, #12]
 801cfb0:	0c12      	lsrs	r2, r2, #16
 801cfb2:	b2d2      	uxtb	r2, r2
 801cfb4:	4610      	mov	r0, r2
 801cfb6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801cfb8:	4b20      	ldr	r3, [pc, #128]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801cfba:	6a1b      	ldr	r3, [r3, #32]
 801cfbc:	68fa      	ldr	r2, [r7, #12]
 801cfbe:	0a12      	lsrs	r2, r2, #8
 801cfc0:	b2d2      	uxtb	r2, r2
 801cfc2:	4610      	mov	r0, r2
 801cfc4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801cfc6:	4b1d      	ldr	r3, [pc, #116]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801cfc8:	6a1b      	ldr	r3, [r3, #32]
 801cfca:	68fa      	ldr	r2, [r7, #12]
 801cfcc:	b2d2      	uxtb	r2, r2
 801cfce:	4610      	mov	r0, r2
 801cfd0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	82fb      	strh	r3, [r7, #22]
 801cfd6:	e00a      	b.n	801cfee <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 801cfd8:	4b18      	ldr	r3, [pc, #96]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801cfda:	69db      	ldr	r3, [r3, #28]
 801cfdc:	8afa      	ldrh	r2, [r7, #22]
 801cfde:	68b9      	ldr	r1, [r7, #8]
 801cfe0:	188c      	adds	r4, r1, r2
 801cfe2:	4798      	blx	r3
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 801cfe8:	8afb      	ldrh	r3, [r7, #22]
 801cfea:	3301      	adds	r3, #1
 801cfec:	82fb      	strh	r3, [r7, #22]
 801cfee:	8afa      	ldrh	r2, [r7, #22]
 801cff0:	88fb      	ldrh	r3, [r7, #6]
 801cff2:	429a      	cmp	r2, r3
 801cff4:	d3f0      	bcc.n	801cfd8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801cff6:	e017      	b.n	801d028 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	0c1b      	lsrs	r3, r3, #16
 801cffc:	b2db      	uxtb	r3, r3
 801cffe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	0a1b      	lsrs	r3, r3, #8
 801d004:	b2db      	uxtb	r3, r3
 801d006:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	b2db      	uxtb	r3, r3
 801d00c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801d00e:	4b0b      	ldr	r3, [pc, #44]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801d010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d012:	f107 0210 	add.w	r2, r7, #16
 801d016:	2103      	movs	r1, #3
 801d018:	4610      	mov	r0, r2
 801d01a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 801d01c:	4b07      	ldr	r3, [pc, #28]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801d01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d020:	88fa      	ldrh	r2, [r7, #6]
 801d022:	4611      	mov	r1, r2
 801d024:	68b8      	ldr	r0, [r7, #8]
 801d026:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801d028:	4b04      	ldr	r3, [pc, #16]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801d02a:	699b      	ldr	r3, [r3, #24]
 801d02c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801d02e:	4b03      	ldr	r3, [pc, #12]	; (801d03c <WIZCHIP_READ_BUF+0xbc>)
 801d030:	691b      	ldr	r3, [r3, #16]
 801d032:	4798      	blx	r3
}
 801d034:	bf00      	nop
 801d036:	371c      	adds	r7, #28
 801d038:	46bd      	mov	sp, r7
 801d03a:	bd90      	pop	{r4, r7, pc}
 801d03c:	20000044 	.word	0x20000044

0801d040 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b086      	sub	sp, #24
 801d044:	af00      	add	r7, sp, #0
 801d046:	60f8      	str	r0, [r7, #12]
 801d048:	60b9      	str	r1, [r7, #8]
 801d04a:	4613      	mov	r3, r2
 801d04c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801d04e:	4b2b      	ldr	r3, [pc, #172]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d050:	68db      	ldr	r3, [r3, #12]
 801d052:	4798      	blx	r3
   WIZCHIP.CS._select();
 801d054:	4b29      	ldr	r3, [pc, #164]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d056:	695b      	ldr	r3, [r3, #20]
 801d058:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	f043 0304 	orr.w	r3, r3, #4
 801d060:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801d062:	4b26      	ldr	r3, [pc, #152]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d066:	2b00      	cmp	r3, #0
 801d068:	d126      	bne.n	801d0b8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801d06a:	4b24      	ldr	r3, [pc, #144]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d06c:	6a1b      	ldr	r3, [r3, #32]
 801d06e:	68fa      	ldr	r2, [r7, #12]
 801d070:	0c12      	lsrs	r2, r2, #16
 801d072:	b2d2      	uxtb	r2, r2
 801d074:	4610      	mov	r0, r2
 801d076:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801d078:	4b20      	ldr	r3, [pc, #128]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d07a:	6a1b      	ldr	r3, [r3, #32]
 801d07c:	68fa      	ldr	r2, [r7, #12]
 801d07e:	0a12      	lsrs	r2, r2, #8
 801d080:	b2d2      	uxtb	r2, r2
 801d082:	4610      	mov	r0, r2
 801d084:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801d086:	4b1d      	ldr	r3, [pc, #116]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d088:	6a1b      	ldr	r3, [r3, #32]
 801d08a:	68fa      	ldr	r2, [r7, #12]
 801d08c:	b2d2      	uxtb	r2, r2
 801d08e:	4610      	mov	r0, r2
 801d090:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801d092:	2300      	movs	r3, #0
 801d094:	82fb      	strh	r3, [r7, #22]
 801d096:	e00a      	b.n	801d0ae <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 801d098:	4b18      	ldr	r3, [pc, #96]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d09a:	6a1b      	ldr	r3, [r3, #32]
 801d09c:	8afa      	ldrh	r2, [r7, #22]
 801d09e:	68b9      	ldr	r1, [r7, #8]
 801d0a0:	440a      	add	r2, r1
 801d0a2:	7812      	ldrb	r2, [r2, #0]
 801d0a4:	4610      	mov	r0, r2
 801d0a6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801d0a8:	8afb      	ldrh	r3, [r7, #22]
 801d0aa:	3301      	adds	r3, #1
 801d0ac:	82fb      	strh	r3, [r7, #22]
 801d0ae:	8afa      	ldrh	r2, [r7, #22]
 801d0b0:	88fb      	ldrh	r3, [r7, #6]
 801d0b2:	429a      	cmp	r2, r3
 801d0b4:	d3f0      	bcc.n	801d098 <WIZCHIP_WRITE_BUF+0x58>
 801d0b6:	e017      	b.n	801d0e8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	0c1b      	lsrs	r3, r3, #16
 801d0bc:	b2db      	uxtb	r3, r3
 801d0be:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	0a1b      	lsrs	r3, r3, #8
 801d0c4:	b2db      	uxtb	r3, r3
 801d0c6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	b2db      	uxtb	r3, r3
 801d0cc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801d0ce:	4b0b      	ldr	r3, [pc, #44]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0d2:	f107 0210 	add.w	r2, r7, #16
 801d0d6:	2103      	movs	r1, #3
 801d0d8:	4610      	mov	r0, r2
 801d0da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 801d0dc:	4b07      	ldr	r3, [pc, #28]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0e0:	88fa      	ldrh	r2, [r7, #6]
 801d0e2:	4611      	mov	r1, r2
 801d0e4:	68b8      	ldr	r0, [r7, #8]
 801d0e6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801d0e8:	4b04      	ldr	r3, [pc, #16]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d0ea:	699b      	ldr	r3, [r3, #24]
 801d0ec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801d0ee:	4b03      	ldr	r3, [pc, #12]	; (801d0fc <WIZCHIP_WRITE_BUF+0xbc>)
 801d0f0:	691b      	ldr	r3, [r3, #16]
 801d0f2:	4798      	blx	r3
}
 801d0f4:	bf00      	nop
 801d0f6:	3718      	adds	r7, #24
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	bd80      	pop	{r7, pc}
 801d0fc:	20000044 	.word	0x20000044

0801d100 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 801d100:	b590      	push	{r4, r7, lr}
 801d102:	b085      	sub	sp, #20
 801d104:	af00      	add	r7, sp, #0
 801d106:	4603      	mov	r3, r0
 801d108:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 801d10a:	2300      	movs	r3, #0
 801d10c:	81fb      	strh	r3, [r7, #14]
 801d10e:	2300      	movs	r3, #0
 801d110:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 801d112:	79fb      	ldrb	r3, [r7, #7]
 801d114:	009b      	lsls	r3, r3, #2
 801d116:	3301      	adds	r3, #1
 801d118:	00db      	lsls	r3, r3, #3
 801d11a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801d11e:	4618      	mov	r0, r3
 801d120:	f7ff fe94 	bl	801ce4c <WIZCHIP_READ>
 801d124:	4603      	mov	r3, r0
 801d126:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801d128:	89bb      	ldrh	r3, [r7, #12]
 801d12a:	021b      	lsls	r3, r3, #8
 801d12c:	b29c      	uxth	r4, r3
 801d12e:	79fb      	ldrb	r3, [r7, #7]
 801d130:	009b      	lsls	r3, r3, #2
 801d132:	3301      	adds	r3, #1
 801d134:	00db      	lsls	r3, r3, #3
 801d136:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801d13a:	4618      	mov	r0, r3
 801d13c:	f7ff fe86 	bl	801ce4c <WIZCHIP_READ>
 801d140:	4603      	mov	r3, r0
 801d142:	b29b      	uxth	r3, r3
 801d144:	4423      	add	r3, r4
 801d146:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 801d148:	89bb      	ldrh	r3, [r7, #12]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d01a      	beq.n	801d184 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 801d14e:	79fb      	ldrb	r3, [r7, #7]
 801d150:	009b      	lsls	r3, r3, #2
 801d152:	3301      	adds	r3, #1
 801d154:	00db      	lsls	r3, r3, #3
 801d156:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801d15a:	4618      	mov	r0, r3
 801d15c:	f7ff fe76 	bl	801ce4c <WIZCHIP_READ>
 801d160:	4603      	mov	r3, r0
 801d162:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801d164:	89fb      	ldrh	r3, [r7, #14]
 801d166:	021b      	lsls	r3, r3, #8
 801d168:	b29c      	uxth	r4, r3
 801d16a:	79fb      	ldrb	r3, [r7, #7]
 801d16c:	009b      	lsls	r3, r3, #2
 801d16e:	3301      	adds	r3, #1
 801d170:	00db      	lsls	r3, r3, #3
 801d172:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801d176:	4618      	mov	r0, r3
 801d178:	f7ff fe68 	bl	801ce4c <WIZCHIP_READ>
 801d17c:	4603      	mov	r3, r0
 801d17e:	b29b      	uxth	r3, r3
 801d180:	4423      	add	r3, r4
 801d182:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 801d184:	89fa      	ldrh	r2, [r7, #14]
 801d186:	89bb      	ldrh	r3, [r7, #12]
 801d188:	429a      	cmp	r2, r3
 801d18a:	d1c2      	bne.n	801d112 <getSn_TX_FSR+0x12>
   return val;
 801d18c:	89fb      	ldrh	r3, [r7, #14]
}
 801d18e:	4618      	mov	r0, r3
 801d190:	3714      	adds	r7, #20
 801d192:	46bd      	mov	sp, r7
 801d194:	bd90      	pop	{r4, r7, pc}

0801d196 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 801d196:	b590      	push	{r4, r7, lr}
 801d198:	b085      	sub	sp, #20
 801d19a:	af00      	add	r7, sp, #0
 801d19c:	4603      	mov	r3, r0
 801d19e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 801d1a0:	2300      	movs	r3, #0
 801d1a2:	81fb      	strh	r3, [r7, #14]
 801d1a4:	2300      	movs	r3, #0
 801d1a6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 801d1a8:	79fb      	ldrb	r3, [r7, #7]
 801d1aa:	009b      	lsls	r3, r3, #2
 801d1ac:	3301      	adds	r3, #1
 801d1ae:	00db      	lsls	r3, r3, #3
 801d1b0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 801d1b4:	4618      	mov	r0, r3
 801d1b6:	f7ff fe49 	bl	801ce4c <WIZCHIP_READ>
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801d1be:	89bb      	ldrh	r3, [r7, #12]
 801d1c0:	021b      	lsls	r3, r3, #8
 801d1c2:	b29c      	uxth	r4, r3
 801d1c4:	79fb      	ldrb	r3, [r7, #7]
 801d1c6:	009b      	lsls	r3, r3, #2
 801d1c8:	3301      	adds	r3, #1
 801d1ca:	00db      	lsls	r3, r3, #3
 801d1cc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	f7ff fe3b 	bl	801ce4c <WIZCHIP_READ>
 801d1d6:	4603      	mov	r3, r0
 801d1d8:	b29b      	uxth	r3, r3
 801d1da:	4423      	add	r3, r4
 801d1dc:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 801d1de:	89bb      	ldrh	r3, [r7, #12]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d01a      	beq.n	801d21a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 801d1e4:	79fb      	ldrb	r3, [r7, #7]
 801d1e6:	009b      	lsls	r3, r3, #2
 801d1e8:	3301      	adds	r3, #1
 801d1ea:	00db      	lsls	r3, r3, #3
 801d1ec:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 801d1f0:	4618      	mov	r0, r3
 801d1f2:	f7ff fe2b 	bl	801ce4c <WIZCHIP_READ>
 801d1f6:	4603      	mov	r3, r0
 801d1f8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801d1fa:	89fb      	ldrh	r3, [r7, #14]
 801d1fc:	021b      	lsls	r3, r3, #8
 801d1fe:	b29c      	uxth	r4, r3
 801d200:	79fb      	ldrb	r3, [r7, #7]
 801d202:	009b      	lsls	r3, r3, #2
 801d204:	3301      	adds	r3, #1
 801d206:	00db      	lsls	r3, r3, #3
 801d208:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 801d20c:	4618      	mov	r0, r3
 801d20e:	f7ff fe1d 	bl	801ce4c <WIZCHIP_READ>
 801d212:	4603      	mov	r3, r0
 801d214:	b29b      	uxth	r3, r3
 801d216:	4423      	add	r3, r4
 801d218:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 801d21a:	89fa      	ldrh	r2, [r7, #14]
 801d21c:	89bb      	ldrh	r3, [r7, #12]
 801d21e:	429a      	cmp	r2, r3
 801d220:	d1c2      	bne.n	801d1a8 <getSn_RX_RSR+0x12>
   return val;
 801d222:	89fb      	ldrh	r3, [r7, #14]
}
 801d224:	4618      	mov	r0, r3
 801d226:	3714      	adds	r7, #20
 801d228:	46bd      	mov	sp, r7
 801d22a:	bd90      	pop	{r4, r7, pc}

0801d22c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 801d22c:	b590      	push	{r4, r7, lr}
 801d22e:	b085      	sub	sp, #20
 801d230:	af00      	add	r7, sp, #0
 801d232:	4603      	mov	r3, r0
 801d234:	6039      	str	r1, [r7, #0]
 801d236:	71fb      	strb	r3, [r7, #7]
 801d238:	4613      	mov	r3, r2
 801d23a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 801d23c:	2300      	movs	r3, #0
 801d23e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 801d240:	2300      	movs	r3, #0
 801d242:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 801d244:	88bb      	ldrh	r3, [r7, #4]
 801d246:	2b00      	cmp	r3, #0
 801d248:	d048      	beq.n	801d2dc <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 801d24a:	79fb      	ldrb	r3, [r7, #7]
 801d24c:	009b      	lsls	r3, r3, #2
 801d24e:	3301      	adds	r3, #1
 801d250:	00db      	lsls	r3, r3, #3
 801d252:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 801d256:	4618      	mov	r0, r3
 801d258:	f7ff fdf8 	bl	801ce4c <WIZCHIP_READ>
 801d25c:	4603      	mov	r3, r0
 801d25e:	b29b      	uxth	r3, r3
 801d260:	021b      	lsls	r3, r3, #8
 801d262:	b29c      	uxth	r4, r3
 801d264:	79fb      	ldrb	r3, [r7, #7]
 801d266:	009b      	lsls	r3, r3, #2
 801d268:	3301      	adds	r3, #1
 801d26a:	00db      	lsls	r3, r3, #3
 801d26c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 801d270:	4618      	mov	r0, r3
 801d272:	f7ff fdeb 	bl	801ce4c <WIZCHIP_READ>
 801d276:	4603      	mov	r3, r0
 801d278:	b29b      	uxth	r3, r3
 801d27a:	4423      	add	r3, r4
 801d27c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 801d27e:	89fb      	ldrh	r3, [r7, #14]
 801d280:	021b      	lsls	r3, r3, #8
 801d282:	79fa      	ldrb	r2, [r7, #7]
 801d284:	0092      	lsls	r2, r2, #2
 801d286:	3202      	adds	r2, #2
 801d288:	00d2      	lsls	r2, r2, #3
 801d28a:	4413      	add	r3, r2
 801d28c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 801d28e:	88bb      	ldrh	r3, [r7, #4]
 801d290:	461a      	mov	r2, r3
 801d292:	6839      	ldr	r1, [r7, #0]
 801d294:	68b8      	ldr	r0, [r7, #8]
 801d296:	f7ff fed3 	bl	801d040 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 801d29a:	89fa      	ldrh	r2, [r7, #14]
 801d29c:	88bb      	ldrh	r3, [r7, #4]
 801d29e:	4413      	add	r3, r2
 801d2a0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 801d2a2:	79fb      	ldrb	r3, [r7, #7]
 801d2a4:	009b      	lsls	r3, r3, #2
 801d2a6:	3301      	adds	r3, #1
 801d2a8:	00db      	lsls	r3, r3, #3
 801d2aa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 801d2ae:	461a      	mov	r2, r3
 801d2b0:	89fb      	ldrh	r3, [r7, #14]
 801d2b2:	0a1b      	lsrs	r3, r3, #8
 801d2b4:	b29b      	uxth	r3, r3
 801d2b6:	b2db      	uxtb	r3, r3
 801d2b8:	4619      	mov	r1, r3
 801d2ba:	4610      	mov	r0, r2
 801d2bc:	f7ff fe12 	bl	801cee4 <WIZCHIP_WRITE>
 801d2c0:	79fb      	ldrb	r3, [r7, #7]
 801d2c2:	009b      	lsls	r3, r3, #2
 801d2c4:	3301      	adds	r3, #1
 801d2c6:	00db      	lsls	r3, r3, #3
 801d2c8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 801d2cc:	461a      	mov	r2, r3
 801d2ce:	89fb      	ldrh	r3, [r7, #14]
 801d2d0:	b2db      	uxtb	r3, r3
 801d2d2:	4619      	mov	r1, r3
 801d2d4:	4610      	mov	r0, r2
 801d2d6:	f7ff fe05 	bl	801cee4 <WIZCHIP_WRITE>
 801d2da:	e000      	b.n	801d2de <wiz_send_data+0xb2>
   if(len == 0)  return;
 801d2dc:	bf00      	nop
}
 801d2de:	3714      	adds	r7, #20
 801d2e0:	46bd      	mov	sp, r7
 801d2e2:	bd90      	pop	{r4, r7, pc}

0801d2e4 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 801d2e4:	b590      	push	{r4, r7, lr}
 801d2e6:	b085      	sub	sp, #20
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	4603      	mov	r3, r0
 801d2ec:	6039      	str	r1, [r7, #0]
 801d2ee:	71fb      	strb	r3, [r7, #7]
 801d2f0:	4613      	mov	r3, r2
 801d2f2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 801d2f4:	2300      	movs	r3, #0
 801d2f6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 801d2fc:	88bb      	ldrh	r3, [r7, #4]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d048      	beq.n	801d394 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 801d302:	79fb      	ldrb	r3, [r7, #7]
 801d304:	009b      	lsls	r3, r3, #2
 801d306:	3301      	adds	r3, #1
 801d308:	00db      	lsls	r3, r3, #3
 801d30a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801d30e:	4618      	mov	r0, r3
 801d310:	f7ff fd9c 	bl	801ce4c <WIZCHIP_READ>
 801d314:	4603      	mov	r3, r0
 801d316:	b29b      	uxth	r3, r3
 801d318:	021b      	lsls	r3, r3, #8
 801d31a:	b29c      	uxth	r4, r3
 801d31c:	79fb      	ldrb	r3, [r7, #7]
 801d31e:	009b      	lsls	r3, r3, #2
 801d320:	3301      	adds	r3, #1
 801d322:	00db      	lsls	r3, r3, #3
 801d324:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 801d328:	4618      	mov	r0, r3
 801d32a:	f7ff fd8f 	bl	801ce4c <WIZCHIP_READ>
 801d32e:	4603      	mov	r3, r0
 801d330:	b29b      	uxth	r3, r3
 801d332:	4423      	add	r3, r4
 801d334:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 801d336:	89fb      	ldrh	r3, [r7, #14]
 801d338:	021b      	lsls	r3, r3, #8
 801d33a:	79fa      	ldrb	r2, [r7, #7]
 801d33c:	0092      	lsls	r2, r2, #2
 801d33e:	3203      	adds	r2, #3
 801d340:	00d2      	lsls	r2, r2, #3
 801d342:	4413      	add	r3, r2
 801d344:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 801d346:	88bb      	ldrh	r3, [r7, #4]
 801d348:	461a      	mov	r2, r3
 801d34a:	6839      	ldr	r1, [r7, #0]
 801d34c:	68b8      	ldr	r0, [r7, #8]
 801d34e:	f7ff fe17 	bl	801cf80 <WIZCHIP_READ_BUF>
   ptr += len;
 801d352:	89fa      	ldrh	r2, [r7, #14]
 801d354:	88bb      	ldrh	r3, [r7, #4]
 801d356:	4413      	add	r3, r2
 801d358:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 801d35a:	79fb      	ldrb	r3, [r7, #7]
 801d35c:	009b      	lsls	r3, r3, #2
 801d35e:	3301      	adds	r3, #1
 801d360:	00db      	lsls	r3, r3, #3
 801d362:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801d366:	461a      	mov	r2, r3
 801d368:	89fb      	ldrh	r3, [r7, #14]
 801d36a:	0a1b      	lsrs	r3, r3, #8
 801d36c:	b29b      	uxth	r3, r3
 801d36e:	b2db      	uxtb	r3, r3
 801d370:	4619      	mov	r1, r3
 801d372:	4610      	mov	r0, r2
 801d374:	f7ff fdb6 	bl	801cee4 <WIZCHIP_WRITE>
 801d378:	79fb      	ldrb	r3, [r7, #7]
 801d37a:	009b      	lsls	r3, r3, #2
 801d37c:	3301      	adds	r3, #1
 801d37e:	00db      	lsls	r3, r3, #3
 801d380:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 801d384:	461a      	mov	r2, r3
 801d386:	89fb      	ldrh	r3, [r7, #14]
 801d388:	b2db      	uxtb	r3, r3
 801d38a:	4619      	mov	r1, r3
 801d38c:	4610      	mov	r0, r2
 801d38e:	f7ff fda9 	bl	801cee4 <WIZCHIP_WRITE>
 801d392:	e000      	b.n	801d396 <wiz_recv_data+0xb2>
   if(len == 0) return;
 801d394:	bf00      	nop
}
 801d396:	3714      	adds	r7, #20
 801d398:	46bd      	mov	sp, r7
 801d39a:	bd90      	pop	{r4, r7, pc}

0801d39c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 801d39c:	b590      	push	{r4, r7, lr}
 801d39e:	b085      	sub	sp, #20
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	4604      	mov	r4, r0
 801d3a4:	4608      	mov	r0, r1
 801d3a6:	4611      	mov	r1, r2
 801d3a8:	461a      	mov	r2, r3
 801d3aa:	4623      	mov	r3, r4
 801d3ac:	71fb      	strb	r3, [r7, #7]
 801d3ae:	4603      	mov	r3, r0
 801d3b0:	71bb      	strb	r3, [r7, #6]
 801d3b2:	460b      	mov	r3, r1
 801d3b4:	80bb      	strh	r3, [r7, #4]
 801d3b6:	4613      	mov	r3, r2
 801d3b8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 801d3ba:	79fb      	ldrb	r3, [r7, #7]
 801d3bc:	2b08      	cmp	r3, #8
 801d3be:	d902      	bls.n	801d3c6 <socket+0x2a>
 801d3c0:	f04f 33ff 	mov.w	r3, #4294967295
 801d3c4:	e0f2      	b.n	801d5ac <socket+0x210>
	switch(protocol)
 801d3c6:	79bb      	ldrb	r3, [r7, #6]
 801d3c8:	2b01      	cmp	r3, #1
 801d3ca:	d005      	beq.n	801d3d8 <socket+0x3c>
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	dd11      	ble.n	801d3f4 <socket+0x58>
 801d3d0:	3b02      	subs	r3, #2
 801d3d2:	2b02      	cmp	r3, #2
 801d3d4:	d80e      	bhi.n	801d3f4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 801d3d6:	e011      	b.n	801d3fc <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 801d3d8:	f107 030c 	add.w	r3, r7, #12
 801d3dc:	2204      	movs	r2, #4
 801d3de:	4619      	mov	r1, r3
 801d3e0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801d3e4:	f7ff fdcc 	bl	801cf80 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 801d3e8:	68fb      	ldr	r3, [r7, #12]
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d105      	bne.n	801d3fa <socket+0x5e>
 801d3ee:	f06f 0302 	mvn.w	r3, #2
 801d3f2:	e0db      	b.n	801d5ac <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 801d3f4:	f06f 0304 	mvn.w	r3, #4
 801d3f8:	e0d8      	b.n	801d5ac <socket+0x210>
	    break;
 801d3fa:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 801d3fc:	78fb      	ldrb	r3, [r7, #3]
 801d3fe:	f003 0304 	and.w	r3, r3, #4
 801d402:	2b00      	cmp	r3, #0
 801d404:	d002      	beq.n	801d40c <socket+0x70>
 801d406:	f06f 0305 	mvn.w	r3, #5
 801d40a:	e0cf      	b.n	801d5ac <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 801d40c:	78fb      	ldrb	r3, [r7, #3]
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d025      	beq.n	801d45e <socket+0xc2>
	{
   	switch(protocol)
 801d412:	79bb      	ldrb	r3, [r7, #6]
 801d414:	2b01      	cmp	r3, #1
 801d416:	d002      	beq.n	801d41e <socket+0x82>
 801d418:	2b02      	cmp	r3, #2
 801d41a:	d008      	beq.n	801d42e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 801d41c:	e024      	b.n	801d468 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 801d41e:	78fb      	ldrb	r3, [r7, #3]
 801d420:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801d424:	2b00      	cmp	r3, #0
 801d426:	d11c      	bne.n	801d462 <socket+0xc6>
 801d428:	f06f 0305 	mvn.w	r3, #5
 801d42c:	e0be      	b.n	801d5ac <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 801d42e:	78fb      	ldrb	r3, [r7, #3]
 801d430:	f003 0320 	and.w	r3, r3, #32
 801d434:	2b00      	cmp	r3, #0
 801d436:	d006      	beq.n	801d446 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 801d438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	db02      	blt.n	801d446 <socket+0xaa>
 801d440:	f06f 0305 	mvn.w	r3, #5
 801d444:	e0b2      	b.n	801d5ac <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 801d446:	78fb      	ldrb	r3, [r7, #3]
 801d448:	f003 0310 	and.w	r3, r3, #16
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d00a      	beq.n	801d466 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 801d450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d454:	2b00      	cmp	r3, #0
 801d456:	db06      	blt.n	801d466 <socket+0xca>
 801d458:	f06f 0305 	mvn.w	r3, #5
 801d45c:	e0a6      	b.n	801d5ac <socket+0x210>
   	}
   }
 801d45e:	bf00      	nop
 801d460:	e002      	b.n	801d468 <socket+0xcc>
   	      break;
 801d462:	bf00      	nop
 801d464:	e000      	b.n	801d468 <socket+0xcc>
   	      break;
 801d466:	bf00      	nop
	close(sn);
 801d468:	79fb      	ldrb	r3, [r7, #7]
 801d46a:	4618      	mov	r0, r3
 801d46c:	f000 f8ac 	bl	801d5c8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 801d470:	79fb      	ldrb	r3, [r7, #7]
 801d472:	009b      	lsls	r3, r3, #2
 801d474:	3301      	adds	r3, #1
 801d476:	00db      	lsls	r3, r3, #3
 801d478:	4618      	mov	r0, r3
 801d47a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d47e:	f023 030f 	bic.w	r3, r3, #15
 801d482:	b25a      	sxtb	r2, r3
 801d484:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801d488:	4313      	orrs	r3, r2
 801d48a:	b25b      	sxtb	r3, r3
 801d48c:	b2db      	uxtb	r3, r3
 801d48e:	4619      	mov	r1, r3
 801d490:	f7ff fd28 	bl	801cee4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 801d494:	88bb      	ldrh	r3, [r7, #4]
 801d496:	2b00      	cmp	r3, #0
 801d498:	d110      	bne.n	801d4bc <socket+0x120>
	{
	   port = sock_any_port++;
 801d49a:	4b46      	ldr	r3, [pc, #280]	; (801d5b4 <socket+0x218>)
 801d49c:	881b      	ldrh	r3, [r3, #0]
 801d49e:	1c5a      	adds	r2, r3, #1
 801d4a0:	b291      	uxth	r1, r2
 801d4a2:	4a44      	ldr	r2, [pc, #272]	; (801d5b4 <socket+0x218>)
 801d4a4:	8011      	strh	r1, [r2, #0]
 801d4a6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 801d4a8:	4b42      	ldr	r3, [pc, #264]	; (801d5b4 <socket+0x218>)
 801d4aa:	881b      	ldrh	r3, [r3, #0]
 801d4ac:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801d4b0:	4293      	cmp	r3, r2
 801d4b2:	d103      	bne.n	801d4bc <socket+0x120>
 801d4b4:	4b3f      	ldr	r3, [pc, #252]	; (801d5b4 <socket+0x218>)
 801d4b6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801d4ba:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 801d4bc:	79fb      	ldrb	r3, [r7, #7]
 801d4be:	009b      	lsls	r3, r3, #2
 801d4c0:	3301      	adds	r3, #1
 801d4c2:	00db      	lsls	r3, r3, #3
 801d4c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d4c8:	461a      	mov	r2, r3
 801d4ca:	88bb      	ldrh	r3, [r7, #4]
 801d4cc:	0a1b      	lsrs	r3, r3, #8
 801d4ce:	b29b      	uxth	r3, r3
 801d4d0:	b2db      	uxtb	r3, r3
 801d4d2:	4619      	mov	r1, r3
 801d4d4:	4610      	mov	r0, r2
 801d4d6:	f7ff fd05 	bl	801cee4 <WIZCHIP_WRITE>
 801d4da:	79fb      	ldrb	r3, [r7, #7]
 801d4dc:	009b      	lsls	r3, r3, #2
 801d4de:	3301      	adds	r3, #1
 801d4e0:	00db      	lsls	r3, r3, #3
 801d4e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801d4e6:	461a      	mov	r2, r3
 801d4e8:	88bb      	ldrh	r3, [r7, #4]
 801d4ea:	b2db      	uxtb	r3, r3
 801d4ec:	4619      	mov	r1, r3
 801d4ee:	4610      	mov	r0, r2
 801d4f0:	f7ff fcf8 	bl	801cee4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 801d4f4:	79fb      	ldrb	r3, [r7, #7]
 801d4f6:	009b      	lsls	r3, r3, #2
 801d4f8:	3301      	adds	r3, #1
 801d4fa:	00db      	lsls	r3, r3, #3
 801d4fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d500:	2101      	movs	r1, #1
 801d502:	4618      	mov	r0, r3
 801d504:	f7ff fcee 	bl	801cee4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801d508:	bf00      	nop
 801d50a:	79fb      	ldrb	r3, [r7, #7]
 801d50c:	009b      	lsls	r3, r3, #2
 801d50e:	3301      	adds	r3, #1
 801d510:	00db      	lsls	r3, r3, #3
 801d512:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d516:	4618      	mov	r0, r3
 801d518:	f7ff fc98 	bl	801ce4c <WIZCHIP_READ>
 801d51c:	4603      	mov	r3, r0
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d1f3      	bne.n	801d50a <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 801d522:	79fb      	ldrb	r3, [r7, #7]
 801d524:	2201      	movs	r2, #1
 801d526:	fa02 f303 	lsl.w	r3, r2, r3
 801d52a:	b21b      	sxth	r3, r3
 801d52c:	43db      	mvns	r3, r3
 801d52e:	b21a      	sxth	r2, r3
 801d530:	4b21      	ldr	r3, [pc, #132]	; (801d5b8 <socket+0x21c>)
 801d532:	881b      	ldrh	r3, [r3, #0]
 801d534:	b21b      	sxth	r3, r3
 801d536:	4013      	ands	r3, r2
 801d538:	b21b      	sxth	r3, r3
 801d53a:	b29a      	uxth	r2, r3
 801d53c:	4b1e      	ldr	r3, [pc, #120]	; (801d5b8 <socket+0x21c>)
 801d53e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 801d540:	78fb      	ldrb	r3, [r7, #3]
 801d542:	f003 0201 	and.w	r2, r3, #1
 801d546:	79fb      	ldrb	r3, [r7, #7]
 801d548:	fa02 f303 	lsl.w	r3, r2, r3
 801d54c:	b21a      	sxth	r2, r3
 801d54e:	4b1a      	ldr	r3, [pc, #104]	; (801d5b8 <socket+0x21c>)
 801d550:	881b      	ldrh	r3, [r3, #0]
 801d552:	b21b      	sxth	r3, r3
 801d554:	4313      	orrs	r3, r2
 801d556:	b21b      	sxth	r3, r3
 801d558:	b29a      	uxth	r2, r3
 801d55a:	4b17      	ldr	r3, [pc, #92]	; (801d5b8 <socket+0x21c>)
 801d55c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 801d55e:	79fb      	ldrb	r3, [r7, #7]
 801d560:	2201      	movs	r2, #1
 801d562:	fa02 f303 	lsl.w	r3, r2, r3
 801d566:	b21b      	sxth	r3, r3
 801d568:	43db      	mvns	r3, r3
 801d56a:	b21a      	sxth	r2, r3
 801d56c:	4b13      	ldr	r3, [pc, #76]	; (801d5bc <socket+0x220>)
 801d56e:	881b      	ldrh	r3, [r3, #0]
 801d570:	b21b      	sxth	r3, r3
 801d572:	4013      	ands	r3, r2
 801d574:	b21b      	sxth	r3, r3
 801d576:	b29a      	uxth	r2, r3
 801d578:	4b10      	ldr	r3, [pc, #64]	; (801d5bc <socket+0x220>)
 801d57a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 801d57c:	79fb      	ldrb	r3, [r7, #7]
 801d57e:	4a10      	ldr	r2, [pc, #64]	; (801d5c0 <socket+0x224>)
 801d580:	2100      	movs	r1, #0
 801d582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 801d586:	79fb      	ldrb	r3, [r7, #7]
 801d588:	4a0e      	ldr	r2, [pc, #56]	; (801d5c4 <socket+0x228>)
 801d58a:	2100      	movs	r1, #0
 801d58c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 801d58e:	bf00      	nop
 801d590:	79fb      	ldrb	r3, [r7, #7]
 801d592:	009b      	lsls	r3, r3, #2
 801d594:	3301      	adds	r3, #1
 801d596:	00db      	lsls	r3, r3, #3
 801d598:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d59c:	4618      	mov	r0, r3
 801d59e:	f7ff fc55 	bl	801ce4c <WIZCHIP_READ>
 801d5a2:	4603      	mov	r3, r0
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d0f3      	beq.n	801d590 <socket+0x1f4>
   return (int8_t)sn;
 801d5a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	3714      	adds	r7, #20
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	bd90      	pop	{r4, r7, pc}
 801d5b4:	20000040 	.word	0x20000040
 801d5b8:	200030e0 	.word	0x200030e0
 801d5bc:	200030e2 	.word	0x200030e2
 801d5c0:	200030e4 	.word	0x200030e4
 801d5c4:	200030f4 	.word	0x200030f4

0801d5c8 <close>:

int8_t close(uint8_t sn)
{
 801d5c8:	b580      	push	{r7, lr}
 801d5ca:	b082      	sub	sp, #8
 801d5cc:	af00      	add	r7, sp, #0
 801d5ce:	4603      	mov	r3, r0
 801d5d0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 801d5d2:	79fb      	ldrb	r3, [r7, #7]
 801d5d4:	2b08      	cmp	r3, #8
 801d5d6:	d902      	bls.n	801d5de <close+0x16>
 801d5d8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5dc:	e055      	b.n	801d68a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 801d5de:	79fb      	ldrb	r3, [r7, #7]
 801d5e0:	009b      	lsls	r3, r3, #2
 801d5e2:	3301      	adds	r3, #1
 801d5e4:	00db      	lsls	r3, r3, #3
 801d5e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d5ea:	2110      	movs	r1, #16
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f7ff fc79 	bl	801cee4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 801d5f2:	bf00      	nop
 801d5f4:	79fb      	ldrb	r3, [r7, #7]
 801d5f6:	009b      	lsls	r3, r3, #2
 801d5f8:	3301      	adds	r3, #1
 801d5fa:	00db      	lsls	r3, r3, #3
 801d5fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d600:	4618      	mov	r0, r3
 801d602:	f7ff fc23 	bl	801ce4c <WIZCHIP_READ>
 801d606:	4603      	mov	r3, r0
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d1f3      	bne.n	801d5f4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 801d60c:	79fb      	ldrb	r3, [r7, #7]
 801d60e:	009b      	lsls	r3, r3, #2
 801d610:	3301      	adds	r3, #1
 801d612:	00db      	lsls	r3, r3, #3
 801d614:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d618:	211f      	movs	r1, #31
 801d61a:	4618      	mov	r0, r3
 801d61c:	f7ff fc62 	bl	801cee4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 801d620:	79fb      	ldrb	r3, [r7, #7]
 801d622:	2201      	movs	r2, #1
 801d624:	fa02 f303 	lsl.w	r3, r2, r3
 801d628:	b21b      	sxth	r3, r3
 801d62a:	43db      	mvns	r3, r3
 801d62c:	b21a      	sxth	r2, r3
 801d62e:	4b19      	ldr	r3, [pc, #100]	; (801d694 <close+0xcc>)
 801d630:	881b      	ldrh	r3, [r3, #0]
 801d632:	b21b      	sxth	r3, r3
 801d634:	4013      	ands	r3, r2
 801d636:	b21b      	sxth	r3, r3
 801d638:	b29a      	uxth	r2, r3
 801d63a:	4b16      	ldr	r3, [pc, #88]	; (801d694 <close+0xcc>)
 801d63c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 801d63e:	79fb      	ldrb	r3, [r7, #7]
 801d640:	2201      	movs	r2, #1
 801d642:	fa02 f303 	lsl.w	r3, r2, r3
 801d646:	b21b      	sxth	r3, r3
 801d648:	43db      	mvns	r3, r3
 801d64a:	b21a      	sxth	r2, r3
 801d64c:	4b12      	ldr	r3, [pc, #72]	; (801d698 <close+0xd0>)
 801d64e:	881b      	ldrh	r3, [r3, #0]
 801d650:	b21b      	sxth	r3, r3
 801d652:	4013      	ands	r3, r2
 801d654:	b21b      	sxth	r3, r3
 801d656:	b29a      	uxth	r2, r3
 801d658:	4b0f      	ldr	r3, [pc, #60]	; (801d698 <close+0xd0>)
 801d65a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 801d65c:	79fb      	ldrb	r3, [r7, #7]
 801d65e:	4a0f      	ldr	r2, [pc, #60]	; (801d69c <close+0xd4>)
 801d660:	2100      	movs	r1, #0
 801d662:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 801d666:	79fb      	ldrb	r3, [r7, #7]
 801d668:	4a0d      	ldr	r2, [pc, #52]	; (801d6a0 <close+0xd8>)
 801d66a:	2100      	movs	r1, #0
 801d66c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801d66e:	bf00      	nop
 801d670:	79fb      	ldrb	r3, [r7, #7]
 801d672:	009b      	lsls	r3, r3, #2
 801d674:	3301      	adds	r3, #1
 801d676:	00db      	lsls	r3, r3, #3
 801d678:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d67c:	4618      	mov	r0, r3
 801d67e:	f7ff fbe5 	bl	801ce4c <WIZCHIP_READ>
 801d682:	4603      	mov	r3, r0
 801d684:	2b00      	cmp	r3, #0
 801d686:	d1f3      	bne.n	801d670 <close+0xa8>
	return SOCK_OK;
 801d688:	2301      	movs	r3, #1
}
 801d68a:	4618      	mov	r0, r3
 801d68c:	3708      	adds	r7, #8
 801d68e:	46bd      	mov	sp, r7
 801d690:	bd80      	pop	{r7, pc}
 801d692:	bf00      	nop
 801d694:	200030e0 	.word	0x200030e0
 801d698:	200030e2 	.word	0x200030e2
 801d69c:	200030e4 	.word	0x200030e4
 801d6a0:	200030f4 	.word	0x200030f4

0801d6a4 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 801d6a4:	b580      	push	{r7, lr}
 801d6a6:	b084      	sub	sp, #16
 801d6a8:	af00      	add	r7, sp, #0
 801d6aa:	4603      	mov	r3, r0
 801d6ac:	6039      	str	r1, [r7, #0]
 801d6ae:	71fb      	strb	r3, [r7, #7]
 801d6b0:	4613      	mov	r3, r2
 801d6b2:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 801d6b4:	79fb      	ldrb	r3, [r7, #7]
 801d6b6:	2b08      	cmp	r3, #8
 801d6b8:	d902      	bls.n	801d6c0 <connect+0x1c>
 801d6ba:	f04f 33ff 	mov.w	r3, #4294967295
 801d6be:	e0c6      	b.n	801d84e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801d6c0:	79fb      	ldrb	r3, [r7, #7]
 801d6c2:	009b      	lsls	r3, r3, #2
 801d6c4:	3301      	adds	r3, #1
 801d6c6:	00db      	lsls	r3, r3, #3
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	f7ff fbbf 	bl	801ce4c <WIZCHIP_READ>
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	f003 030f 	and.w	r3, r3, #15
 801d6d4:	2b01      	cmp	r3, #1
 801d6d6:	d002      	beq.n	801d6de <connect+0x3a>
 801d6d8:	f06f 0304 	mvn.w	r3, #4
 801d6dc:	e0b7      	b.n	801d84e <connect+0x1aa>
   CHECK_SOCKINIT();
 801d6de:	79fb      	ldrb	r3, [r7, #7]
 801d6e0:	009b      	lsls	r3, r3, #2
 801d6e2:	3301      	adds	r3, #1
 801d6e4:	00db      	lsls	r3, r3, #3
 801d6e6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	f7ff fbae 	bl	801ce4c <WIZCHIP_READ>
 801d6f0:	4603      	mov	r3, r0
 801d6f2:	2b13      	cmp	r3, #19
 801d6f4:	d002      	beq.n	801d6fc <connect+0x58>
 801d6f6:	f06f 0302 	mvn.w	r3, #2
 801d6fa:	e0a8      	b.n	801d84e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 801d6fc:	683b      	ldr	r3, [r7, #0]
 801d6fe:	781b      	ldrb	r3, [r3, #0]
 801d700:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	021b      	lsls	r3, r3, #8
 801d706:	683a      	ldr	r2, [r7, #0]
 801d708:	3201      	adds	r2, #1
 801d70a:	7812      	ldrb	r2, [r2, #0]
 801d70c:	4413      	add	r3, r2
 801d70e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	021b      	lsls	r3, r3, #8
 801d714:	683a      	ldr	r2, [r7, #0]
 801d716:	3202      	adds	r2, #2
 801d718:	7812      	ldrb	r2, [r2, #0]
 801d71a:	4413      	add	r3, r2
 801d71c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	021b      	lsls	r3, r3, #8
 801d722:	683a      	ldr	r2, [r7, #0]
 801d724:	3203      	adds	r2, #3
 801d726:	7812      	ldrb	r2, [r2, #0]
 801d728:	4413      	add	r3, r2
 801d72a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d732:	d002      	beq.n	801d73a <connect+0x96>
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	2b00      	cmp	r3, #0
 801d738:	d102      	bne.n	801d740 <connect+0x9c>
 801d73a:	f06f 030b 	mvn.w	r3, #11
 801d73e:	e086      	b.n	801d84e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 801d740:	88bb      	ldrh	r3, [r7, #4]
 801d742:	2b00      	cmp	r3, #0
 801d744:	d102      	bne.n	801d74c <connect+0xa8>
 801d746:	f06f 030a 	mvn.w	r3, #10
 801d74a:	e080      	b.n	801d84e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 801d74c:	79fb      	ldrb	r3, [r7, #7]
 801d74e:	009b      	lsls	r3, r3, #2
 801d750:	3301      	adds	r3, #1
 801d752:	00db      	lsls	r3, r3, #3
 801d754:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801d758:	2204      	movs	r2, #4
 801d75a:	6839      	ldr	r1, [r7, #0]
 801d75c:	4618      	mov	r0, r3
 801d75e:	f7ff fc6f 	bl	801d040 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 801d762:	79fb      	ldrb	r3, [r7, #7]
 801d764:	009b      	lsls	r3, r3, #2
 801d766:	3301      	adds	r3, #1
 801d768:	00db      	lsls	r3, r3, #3
 801d76a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d76e:	461a      	mov	r2, r3
 801d770:	88bb      	ldrh	r3, [r7, #4]
 801d772:	0a1b      	lsrs	r3, r3, #8
 801d774:	b29b      	uxth	r3, r3
 801d776:	b2db      	uxtb	r3, r3
 801d778:	4619      	mov	r1, r3
 801d77a:	4610      	mov	r0, r2
 801d77c:	f7ff fbb2 	bl	801cee4 <WIZCHIP_WRITE>
 801d780:	79fb      	ldrb	r3, [r7, #7]
 801d782:	009b      	lsls	r3, r3, #2
 801d784:	3301      	adds	r3, #1
 801d786:	00db      	lsls	r3, r3, #3
 801d788:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 801d78c:	461a      	mov	r2, r3
 801d78e:	88bb      	ldrh	r3, [r7, #4]
 801d790:	b2db      	uxtb	r3, r3
 801d792:	4619      	mov	r1, r3
 801d794:	4610      	mov	r0, r2
 801d796:	f7ff fba5 	bl	801cee4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 801d79a:	79fb      	ldrb	r3, [r7, #7]
 801d79c:	009b      	lsls	r3, r3, #2
 801d79e:	3301      	adds	r3, #1
 801d7a0:	00db      	lsls	r3, r3, #3
 801d7a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d7a6:	2104      	movs	r1, #4
 801d7a8:	4618      	mov	r0, r3
 801d7aa:	f7ff fb9b 	bl	801cee4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801d7ae:	bf00      	nop
 801d7b0:	79fb      	ldrb	r3, [r7, #7]
 801d7b2:	009b      	lsls	r3, r3, #2
 801d7b4:	3301      	adds	r3, #1
 801d7b6:	00db      	lsls	r3, r3, #3
 801d7b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d7bc:	4618      	mov	r0, r3
 801d7be:	f7ff fb45 	bl	801ce4c <WIZCHIP_READ>
 801d7c2:	4603      	mov	r3, r0
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d1f3      	bne.n	801d7b0 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801d7c8:	4b23      	ldr	r3, [pc, #140]	; (801d858 <connect+0x1b4>)
 801d7ca:	881b      	ldrh	r3, [r3, #0]
 801d7cc:	461a      	mov	r2, r3
 801d7ce:	79fb      	ldrb	r3, [r7, #7]
 801d7d0:	fa42 f303 	asr.w	r3, r2, r3
 801d7d4:	f003 0301 	and.w	r3, r3, #1
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	d02b      	beq.n	801d834 <connect+0x190>
 801d7dc:	2300      	movs	r3, #0
 801d7de:	e036      	b.n	801d84e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801d7e0:	79fb      	ldrb	r3, [r7, #7]
 801d7e2:	009b      	lsls	r3, r3, #2
 801d7e4:	3301      	adds	r3, #1
 801d7e6:	00db      	lsls	r3, r3, #3
 801d7e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d7ec:	4618      	mov	r0, r3
 801d7ee:	f7ff fb2d 	bl	801ce4c <WIZCHIP_READ>
 801d7f2:	4603      	mov	r3, r0
 801d7f4:	f003 0308 	and.w	r3, r3, #8
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d00c      	beq.n	801d816 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 801d7fc:	79fb      	ldrb	r3, [r7, #7]
 801d7fe:	009b      	lsls	r3, r3, #2
 801d800:	3301      	adds	r3, #1
 801d802:	00db      	lsls	r3, r3, #3
 801d804:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d808:	2108      	movs	r1, #8
 801d80a:	4618      	mov	r0, r3
 801d80c:	f7ff fb6a 	bl	801cee4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 801d810:	f06f 030c 	mvn.w	r3, #12
 801d814:	e01b      	b.n	801d84e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 801d816:	79fb      	ldrb	r3, [r7, #7]
 801d818:	009b      	lsls	r3, r3, #2
 801d81a:	3301      	adds	r3, #1
 801d81c:	00db      	lsls	r3, r3, #3
 801d81e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d822:	4618      	mov	r0, r3
 801d824:	f7ff fb12 	bl	801ce4c <WIZCHIP_READ>
 801d828:	4603      	mov	r3, r0
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	d102      	bne.n	801d834 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 801d82e:	f06f 0303 	mvn.w	r3, #3
 801d832:	e00c      	b.n	801d84e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 801d834:	79fb      	ldrb	r3, [r7, #7]
 801d836:	009b      	lsls	r3, r3, #2
 801d838:	3301      	adds	r3, #1
 801d83a:	00db      	lsls	r3, r3, #3
 801d83c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d840:	4618      	mov	r0, r3
 801d842:	f7ff fb03 	bl	801ce4c <WIZCHIP_READ>
 801d846:	4603      	mov	r3, r0
 801d848:	2b17      	cmp	r3, #23
 801d84a:	d1c9      	bne.n	801d7e0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 801d84c:	2301      	movs	r3, #1
}
 801d84e:	4618      	mov	r0, r3
 801d850:	3710      	adds	r7, #16
 801d852:	46bd      	mov	sp, r7
 801d854:	bd80      	pop	{r7, pc}
 801d856:	bf00      	nop
 801d858:	200030e0 	.word	0x200030e0

0801d85c <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801d85c:	b580      	push	{r7, lr}
 801d85e:	b084      	sub	sp, #16
 801d860:	af00      	add	r7, sp, #0
 801d862:	4603      	mov	r3, r0
 801d864:	6039      	str	r1, [r7, #0]
 801d866:	71fb      	strb	r3, [r7, #7]
 801d868:	4613      	mov	r3, r2
 801d86a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 801d86c:	2300      	movs	r3, #0
 801d86e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 801d870:	2300      	movs	r3, #0
 801d872:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 801d874:	79fb      	ldrb	r3, [r7, #7]
 801d876:	2b08      	cmp	r3, #8
 801d878:	d902      	bls.n	801d880 <send+0x24>
 801d87a:	f04f 33ff 	mov.w	r3, #4294967295
 801d87e:	e0de      	b.n	801da3e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801d880:	79fb      	ldrb	r3, [r7, #7]
 801d882:	009b      	lsls	r3, r3, #2
 801d884:	3301      	adds	r3, #1
 801d886:	00db      	lsls	r3, r3, #3
 801d888:	4618      	mov	r0, r3
 801d88a:	f7ff fadf 	bl	801ce4c <WIZCHIP_READ>
 801d88e:	4603      	mov	r3, r0
 801d890:	f003 030f 	and.w	r3, r3, #15
 801d894:	2b01      	cmp	r3, #1
 801d896:	d002      	beq.n	801d89e <send+0x42>
 801d898:	f06f 0304 	mvn.w	r3, #4
 801d89c:	e0cf      	b.n	801da3e <send+0x1e2>
   CHECK_SOCKDATA();
 801d89e:	88bb      	ldrh	r3, [r7, #4]
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d102      	bne.n	801d8aa <send+0x4e>
 801d8a4:	f06f 030d 	mvn.w	r3, #13
 801d8a8:	e0c9      	b.n	801da3e <send+0x1e2>
   tmp = getSn_SR(sn);
 801d8aa:	79fb      	ldrb	r3, [r7, #7]
 801d8ac:	009b      	lsls	r3, r3, #2
 801d8ae:	3301      	adds	r3, #1
 801d8b0:	00db      	lsls	r3, r3, #3
 801d8b2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	f7ff fac8 	bl	801ce4c <WIZCHIP_READ>
 801d8bc:	4603      	mov	r3, r0
 801d8be:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 801d8c0:	7bfb      	ldrb	r3, [r7, #15]
 801d8c2:	2b17      	cmp	r3, #23
 801d8c4:	d005      	beq.n	801d8d2 <send+0x76>
 801d8c6:	7bfb      	ldrb	r3, [r7, #15]
 801d8c8:	2b1c      	cmp	r3, #28
 801d8ca:	d002      	beq.n	801d8d2 <send+0x76>
 801d8cc:	f06f 0306 	mvn.w	r3, #6
 801d8d0:	e0b5      	b.n	801da3e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 801d8d2:	4b5d      	ldr	r3, [pc, #372]	; (801da48 <send+0x1ec>)
 801d8d4:	881b      	ldrh	r3, [r3, #0]
 801d8d6:	461a      	mov	r2, r3
 801d8d8:	79fb      	ldrb	r3, [r7, #7]
 801d8da:	fa42 f303 	asr.w	r3, r2, r3
 801d8de:	f003 0301 	and.w	r3, r3, #1
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d039      	beq.n	801d95a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 801d8e6:	79fb      	ldrb	r3, [r7, #7]
 801d8e8:	009b      	lsls	r3, r3, #2
 801d8ea:	3301      	adds	r3, #1
 801d8ec:	00db      	lsls	r3, r3, #3
 801d8ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d8f2:	4618      	mov	r0, r3
 801d8f4:	f7ff faaa 	bl	801ce4c <WIZCHIP_READ>
 801d8f8:	4603      	mov	r3, r0
 801d8fa:	f003 031f 	and.w	r3, r3, #31
 801d8fe:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 801d900:	7bfb      	ldrb	r3, [r7, #15]
 801d902:	f003 0310 	and.w	r3, r3, #16
 801d906:	2b00      	cmp	r3, #0
 801d908:	d019      	beq.n	801d93e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 801d90a:	79fb      	ldrb	r3, [r7, #7]
 801d90c:	009b      	lsls	r3, r3, #2
 801d90e:	3301      	adds	r3, #1
 801d910:	00db      	lsls	r3, r3, #3
 801d912:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d916:	2110      	movs	r1, #16
 801d918:	4618      	mov	r0, r3
 801d91a:	f7ff fae3 	bl	801cee4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 801d91e:	79fb      	ldrb	r3, [r7, #7]
 801d920:	2201      	movs	r2, #1
 801d922:	fa02 f303 	lsl.w	r3, r2, r3
 801d926:	b21b      	sxth	r3, r3
 801d928:	43db      	mvns	r3, r3
 801d92a:	b21a      	sxth	r2, r3
 801d92c:	4b46      	ldr	r3, [pc, #280]	; (801da48 <send+0x1ec>)
 801d92e:	881b      	ldrh	r3, [r3, #0]
 801d930:	b21b      	sxth	r3, r3
 801d932:	4013      	ands	r3, r2
 801d934:	b21b      	sxth	r3, r3
 801d936:	b29a      	uxth	r2, r3
 801d938:	4b43      	ldr	r3, [pc, #268]	; (801da48 <send+0x1ec>)
 801d93a:	801a      	strh	r2, [r3, #0]
 801d93c:	e00d      	b.n	801d95a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 801d93e:	7bfb      	ldrb	r3, [r7, #15]
 801d940:	f003 0308 	and.w	r3, r3, #8
 801d944:	2b00      	cmp	r3, #0
 801d946:	d006      	beq.n	801d956 <send+0xfa>
      {
         close(sn);
 801d948:	79fb      	ldrb	r3, [r7, #7]
 801d94a:	4618      	mov	r0, r3
 801d94c:	f7ff fe3c 	bl	801d5c8 <close>
         return SOCKERR_TIMEOUT;
 801d950:	f06f 030c 	mvn.w	r3, #12
 801d954:	e073      	b.n	801da3e <send+0x1e2>
      }
      else return SOCK_BUSY;
 801d956:	2300      	movs	r3, #0
 801d958:	e071      	b.n	801da3e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 801d95a:	79fb      	ldrb	r3, [r7, #7]
 801d95c:	009b      	lsls	r3, r3, #2
 801d95e:	3301      	adds	r3, #1
 801d960:	00db      	lsls	r3, r3, #3
 801d962:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801d966:	4618      	mov	r0, r3
 801d968:	f7ff fa70 	bl	801ce4c <WIZCHIP_READ>
 801d96c:	4603      	mov	r3, r0
 801d96e:	b29b      	uxth	r3, r3
 801d970:	029b      	lsls	r3, r3, #10
 801d972:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 801d974:	88ba      	ldrh	r2, [r7, #4]
 801d976:	89bb      	ldrh	r3, [r7, #12]
 801d978:	429a      	cmp	r2, r3
 801d97a:	d901      	bls.n	801d980 <send+0x124>
 801d97c:	89bb      	ldrh	r3, [r7, #12]
 801d97e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 801d980:	79fb      	ldrb	r3, [r7, #7]
 801d982:	4618      	mov	r0, r3
 801d984:	f7ff fbbc 	bl	801d100 <getSn_TX_FSR>
 801d988:	4603      	mov	r3, r0
 801d98a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 801d98c:	79fb      	ldrb	r3, [r7, #7]
 801d98e:	009b      	lsls	r3, r3, #2
 801d990:	3301      	adds	r3, #1
 801d992:	00db      	lsls	r3, r3, #3
 801d994:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d998:	4618      	mov	r0, r3
 801d99a:	f7ff fa57 	bl	801ce4c <WIZCHIP_READ>
 801d99e:	4603      	mov	r3, r0
 801d9a0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 801d9a2:	7bfb      	ldrb	r3, [r7, #15]
 801d9a4:	2b17      	cmp	r3, #23
 801d9a6:	d009      	beq.n	801d9bc <send+0x160>
 801d9a8:	7bfb      	ldrb	r3, [r7, #15]
 801d9aa:	2b1c      	cmp	r3, #28
 801d9ac:	d006      	beq.n	801d9bc <send+0x160>
      {
         close(sn);
 801d9ae:	79fb      	ldrb	r3, [r7, #7]
 801d9b0:	4618      	mov	r0, r3
 801d9b2:	f7ff fe09 	bl	801d5c8 <close>
         return SOCKERR_SOCKSTATUS;
 801d9b6:	f06f 0306 	mvn.w	r3, #6
 801d9ba:	e040      	b.n	801da3e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801d9bc:	4b23      	ldr	r3, [pc, #140]	; (801da4c <send+0x1f0>)
 801d9be:	881b      	ldrh	r3, [r3, #0]
 801d9c0:	461a      	mov	r2, r3
 801d9c2:	79fb      	ldrb	r3, [r7, #7]
 801d9c4:	fa42 f303 	asr.w	r3, r2, r3
 801d9c8:	f003 0301 	and.w	r3, r3, #1
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d005      	beq.n	801d9dc <send+0x180>
 801d9d0:	88ba      	ldrh	r2, [r7, #4]
 801d9d2:	89bb      	ldrh	r3, [r7, #12]
 801d9d4:	429a      	cmp	r2, r3
 801d9d6:	d901      	bls.n	801d9dc <send+0x180>
 801d9d8:	2300      	movs	r3, #0
 801d9da:	e030      	b.n	801da3e <send+0x1e2>
      if(len <= freesize) break;
 801d9dc:	88ba      	ldrh	r2, [r7, #4]
 801d9de:	89bb      	ldrh	r3, [r7, #12]
 801d9e0:	429a      	cmp	r2, r3
 801d9e2:	d900      	bls.n	801d9e6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 801d9e4:	e7cc      	b.n	801d980 <send+0x124>
      if(len <= freesize) break;
 801d9e6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 801d9e8:	88ba      	ldrh	r2, [r7, #4]
 801d9ea:	79fb      	ldrb	r3, [r7, #7]
 801d9ec:	6839      	ldr	r1, [r7, #0]
 801d9ee:	4618      	mov	r0, r3
 801d9f0:	f7ff fc1c 	bl	801d22c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 801d9f4:	79fb      	ldrb	r3, [r7, #7]
 801d9f6:	009b      	lsls	r3, r3, #2
 801d9f8:	3301      	adds	r3, #1
 801d9fa:	00db      	lsls	r3, r3, #3
 801d9fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801da00:	2120      	movs	r1, #32
 801da02:	4618      	mov	r0, r3
 801da04:	f7ff fa6e 	bl	801cee4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 801da08:	bf00      	nop
 801da0a:	79fb      	ldrb	r3, [r7, #7]
 801da0c:	009b      	lsls	r3, r3, #2
 801da0e:	3301      	adds	r3, #1
 801da10:	00db      	lsls	r3, r3, #3
 801da12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801da16:	4618      	mov	r0, r3
 801da18:	f7ff fa18 	bl	801ce4c <WIZCHIP_READ>
 801da1c:	4603      	mov	r3, r0
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d1f3      	bne.n	801da0a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 801da22:	79fb      	ldrb	r3, [r7, #7]
 801da24:	2201      	movs	r2, #1
 801da26:	fa02 f303 	lsl.w	r3, r2, r3
 801da2a:	b21a      	sxth	r2, r3
 801da2c:	4b06      	ldr	r3, [pc, #24]	; (801da48 <send+0x1ec>)
 801da2e:	881b      	ldrh	r3, [r3, #0]
 801da30:	b21b      	sxth	r3, r3
 801da32:	4313      	orrs	r3, r2
 801da34:	b21b      	sxth	r3, r3
 801da36:	b29a      	uxth	r2, r3
 801da38:	4b03      	ldr	r3, [pc, #12]	; (801da48 <send+0x1ec>)
 801da3a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801da3c:	88bb      	ldrh	r3, [r7, #4]
}
 801da3e:	4618      	mov	r0, r3
 801da40:	3710      	adds	r7, #16
 801da42:	46bd      	mov	sp, r7
 801da44:	bd80      	pop	{r7, pc}
 801da46:	bf00      	nop
 801da48:	200030e2 	.word	0x200030e2
 801da4c:	200030e0 	.word	0x200030e0

0801da50 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801da50:	b590      	push	{r4, r7, lr}
 801da52:	b085      	sub	sp, #20
 801da54:	af00      	add	r7, sp, #0
 801da56:	4603      	mov	r3, r0
 801da58:	6039      	str	r1, [r7, #0]
 801da5a:	71fb      	strb	r3, [r7, #7]
 801da5c:	4613      	mov	r3, r2
 801da5e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 801da60:	2300      	movs	r3, #0
 801da62:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 801da64:	2300      	movs	r3, #0
 801da66:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 801da68:	79fb      	ldrb	r3, [r7, #7]
 801da6a:	2b08      	cmp	r3, #8
 801da6c:	d902      	bls.n	801da74 <recv+0x24>
 801da6e:	f04f 33ff 	mov.w	r3, #4294967295
 801da72:	e09c      	b.n	801dbae <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801da74:	79fb      	ldrb	r3, [r7, #7]
 801da76:	009b      	lsls	r3, r3, #2
 801da78:	3301      	adds	r3, #1
 801da7a:	00db      	lsls	r3, r3, #3
 801da7c:	4618      	mov	r0, r3
 801da7e:	f7ff f9e5 	bl	801ce4c <WIZCHIP_READ>
 801da82:	4603      	mov	r3, r0
 801da84:	f003 030f 	and.w	r3, r3, #15
 801da88:	2b01      	cmp	r3, #1
 801da8a:	d002      	beq.n	801da92 <recv+0x42>
 801da8c:	f06f 0304 	mvn.w	r3, #4
 801da90:	e08d      	b.n	801dbae <recv+0x15e>
   CHECK_SOCKDATA();
 801da92:	88bb      	ldrh	r3, [r7, #4]
 801da94:	2b00      	cmp	r3, #0
 801da96:	d102      	bne.n	801da9e <recv+0x4e>
 801da98:	f06f 030d 	mvn.w	r3, #13
 801da9c:	e087      	b.n	801dbae <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 801da9e:	79fb      	ldrb	r3, [r7, #7]
 801daa0:	009b      	lsls	r3, r3, #2
 801daa2:	3301      	adds	r3, #1
 801daa4:	00db      	lsls	r3, r3, #3
 801daa6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801daaa:	4618      	mov	r0, r3
 801daac:	f7ff f9ce 	bl	801ce4c <WIZCHIP_READ>
 801dab0:	4603      	mov	r3, r0
 801dab2:	b29b      	uxth	r3, r3
 801dab4:	029b      	lsls	r3, r3, #10
 801dab6:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 801dab8:	89ba      	ldrh	r2, [r7, #12]
 801daba:	88bb      	ldrh	r3, [r7, #4]
 801dabc:	429a      	cmp	r2, r3
 801dabe:	d201      	bcs.n	801dac4 <recv+0x74>
 801dac0:	89bb      	ldrh	r3, [r7, #12]
 801dac2:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 801dac4:	79fb      	ldrb	r3, [r7, #7]
 801dac6:	4618      	mov	r0, r3
 801dac8:	f7ff fb65 	bl	801d196 <getSn_RX_RSR>
 801dacc:	4603      	mov	r3, r0
 801dace:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 801dad0:	79fb      	ldrb	r3, [r7, #7]
 801dad2:	009b      	lsls	r3, r3, #2
 801dad4:	3301      	adds	r3, #1
 801dad6:	00db      	lsls	r3, r3, #3
 801dad8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801dadc:	4618      	mov	r0, r3
 801dade:	f7ff f9b5 	bl	801ce4c <WIZCHIP_READ>
 801dae2:	4603      	mov	r3, r0
 801dae4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 801dae6:	7bfb      	ldrb	r3, [r7, #15]
 801dae8:	2b17      	cmp	r3, #23
 801daea:	d026      	beq.n	801db3a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 801daec:	7bfb      	ldrb	r3, [r7, #15]
 801daee:	2b1c      	cmp	r3, #28
 801daf0:	d11c      	bne.n	801db2c <recv+0xdc>
            {
               if(recvsize != 0) break;
 801daf2:	89bb      	ldrh	r3, [r7, #12]
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d133      	bne.n	801db60 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 801daf8:	79fb      	ldrb	r3, [r7, #7]
 801dafa:	4618      	mov	r0, r3
 801dafc:	f7ff fb00 	bl	801d100 <getSn_TX_FSR>
 801db00:	4603      	mov	r3, r0
 801db02:	461c      	mov	r4, r3
 801db04:	79fb      	ldrb	r3, [r7, #7]
 801db06:	009b      	lsls	r3, r3, #2
 801db08:	3301      	adds	r3, #1
 801db0a:	00db      	lsls	r3, r3, #3
 801db0c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801db10:	4618      	mov	r0, r3
 801db12:	f7ff f99b 	bl	801ce4c <WIZCHIP_READ>
 801db16:	4603      	mov	r3, r0
 801db18:	029b      	lsls	r3, r3, #10
 801db1a:	429c      	cmp	r4, r3
 801db1c:	d10d      	bne.n	801db3a <recv+0xea>
               {
                  close(sn);
 801db1e:	79fb      	ldrb	r3, [r7, #7]
 801db20:	4618      	mov	r0, r3
 801db22:	f7ff fd51 	bl	801d5c8 <close>
                  return SOCKERR_SOCKSTATUS;
 801db26:	f06f 0306 	mvn.w	r3, #6
 801db2a:	e040      	b.n	801dbae <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 801db2c:	79fb      	ldrb	r3, [r7, #7]
 801db2e:	4618      	mov	r0, r3
 801db30:	f7ff fd4a 	bl	801d5c8 <close>
               return SOCKERR_SOCKSTATUS;
 801db34:	f06f 0306 	mvn.w	r3, #6
 801db38:	e039      	b.n	801dbae <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801db3a:	4b1f      	ldr	r3, [pc, #124]	; (801dbb8 <recv+0x168>)
 801db3c:	881b      	ldrh	r3, [r3, #0]
 801db3e:	461a      	mov	r2, r3
 801db40:	79fb      	ldrb	r3, [r7, #7]
 801db42:	fa42 f303 	asr.w	r3, r2, r3
 801db46:	f003 0301 	and.w	r3, r3, #1
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d004      	beq.n	801db58 <recv+0x108>
 801db4e:	89bb      	ldrh	r3, [r7, #12]
 801db50:	2b00      	cmp	r3, #0
 801db52:	d101      	bne.n	801db58 <recv+0x108>
 801db54:	2300      	movs	r3, #0
 801db56:	e02a      	b.n	801dbae <recv+0x15e>
         if(recvsize != 0) break;
 801db58:	89bb      	ldrh	r3, [r7, #12]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d102      	bne.n	801db64 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 801db5e:	e7b1      	b.n	801dac4 <recv+0x74>
               if(recvsize != 0) break;
 801db60:	bf00      	nop
 801db62:	e000      	b.n	801db66 <recv+0x116>
         if(recvsize != 0) break;
 801db64:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 801db66:	89ba      	ldrh	r2, [r7, #12]
 801db68:	88bb      	ldrh	r3, [r7, #4]
 801db6a:	429a      	cmp	r2, r3
 801db6c:	d201      	bcs.n	801db72 <recv+0x122>
 801db6e:	89bb      	ldrh	r3, [r7, #12]
 801db70:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 801db72:	88ba      	ldrh	r2, [r7, #4]
 801db74:	79fb      	ldrb	r3, [r7, #7]
 801db76:	6839      	ldr	r1, [r7, #0]
 801db78:	4618      	mov	r0, r3
 801db7a:	f7ff fbb3 	bl	801d2e4 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 801db7e:	79fb      	ldrb	r3, [r7, #7]
 801db80:	009b      	lsls	r3, r3, #2
 801db82:	3301      	adds	r3, #1
 801db84:	00db      	lsls	r3, r3, #3
 801db86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801db8a:	2140      	movs	r1, #64	; 0x40
 801db8c:	4618      	mov	r0, r3
 801db8e:	f7ff f9a9 	bl	801cee4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801db92:	bf00      	nop
 801db94:	79fb      	ldrb	r3, [r7, #7]
 801db96:	009b      	lsls	r3, r3, #2
 801db98:	3301      	adds	r3, #1
 801db9a:	00db      	lsls	r3, r3, #3
 801db9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801dba0:	4618      	mov	r0, r3
 801dba2:	f7ff f953 	bl	801ce4c <WIZCHIP_READ>
 801dba6:	4603      	mov	r3, r0
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	d1f3      	bne.n	801db94 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801dbac:	88bb      	ldrh	r3, [r7, #4]
}
 801dbae:	4618      	mov	r0, r3
 801dbb0:	3714      	adds	r7, #20
 801dbb2:	46bd      	mov	sp, r7
 801dbb4:	bd90      	pop	{r4, r7, pc}
 801dbb6:	bf00      	nop
 801dbb8:	200030e0 	.word	0x200030e0

0801dbbc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 801dbbc:	b480      	push	{r7}
 801dbbe:	af00      	add	r7, sp, #0
 801dbc0:	bf00      	nop
 801dbc2:	46bd      	mov	sp, r7
 801dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbc8:	4770      	bx	lr

0801dbca <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 801dbca:	b480      	push	{r7}
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	bf00      	nop
 801dbd0:	46bd      	mov	sp, r7
 801dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbd6:	4770      	bx	lr

0801dbd8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 801dbd8:	b480      	push	{r7}
 801dbda:	af00      	add	r7, sp, #0
 801dbdc:	bf00      	nop
 801dbde:	46bd      	mov	sp, r7
 801dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbe4:	4770      	bx	lr

0801dbe6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 801dbe6:	b480      	push	{r7}
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	bf00      	nop
 801dbec:	46bd      	mov	sp, r7
 801dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbf2:	4770      	bx	lr

0801dbf4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 801dbf4:	b480      	push	{r7}
 801dbf6:	b083      	sub	sp, #12
 801dbf8:	af00      	add	r7, sp, #0
 801dbfa:	6078      	str	r0, [r7, #4]
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	781b      	ldrb	r3, [r3, #0]
 801dc00:	b2db      	uxtb	r3, r3
 801dc02:	4618      	mov	r0, r3
 801dc04:	370c      	adds	r7, #12
 801dc06:	46bd      	mov	sp, r7
 801dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc0c:	4770      	bx	lr

0801dc0e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 801dc0e:	b480      	push	{r7}
 801dc10:	b083      	sub	sp, #12
 801dc12:	af00      	add	r7, sp, #0
 801dc14:	6078      	str	r0, [r7, #4]
 801dc16:	460b      	mov	r3, r1
 801dc18:	70fb      	strb	r3, [r7, #3]
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	78fa      	ldrb	r2, [r7, #3]
 801dc1e:	701a      	strb	r2, [r3, #0]
 801dc20:	bf00      	nop
 801dc22:	370c      	adds	r7, #12
 801dc24:	46bd      	mov	sp, r7
 801dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc2a:	4770      	bx	lr

0801dc2c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 801dc2c:	b480      	push	{r7}
 801dc2e:	af00      	add	r7, sp, #0
 801dc30:	2300      	movs	r3, #0
 801dc32:	4618      	mov	r0, r3
 801dc34:	46bd      	mov	sp, r7
 801dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc3a:	4770      	bx	lr

0801dc3c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 801dc3c:	b480      	push	{r7}
 801dc3e:	b083      	sub	sp, #12
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	4603      	mov	r3, r0
 801dc44:	71fb      	strb	r3, [r7, #7]
 801dc46:	bf00      	nop
 801dc48:	370c      	adds	r7, #12
 801dc4a:	46bd      	mov	sp, r7
 801dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc50:	4770      	bx	lr
	...

0801dc54 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 801dc54:	b480      	push	{r7}
 801dc56:	b083      	sub	sp, #12
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	6078      	str	r0, [r7, #4]
 801dc5c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d002      	beq.n	801dc6a <reg_wizchip_cs_cbfunc+0x16>
 801dc64:	683b      	ldr	r3, [r7, #0]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d106      	bne.n	801dc78 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 801dc6a:	4b0a      	ldr	r3, [pc, #40]	; (801dc94 <reg_wizchip_cs_cbfunc+0x40>)
 801dc6c:	4a0a      	ldr	r2, [pc, #40]	; (801dc98 <reg_wizchip_cs_cbfunc+0x44>)
 801dc6e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 801dc70:	4b08      	ldr	r3, [pc, #32]	; (801dc94 <reg_wizchip_cs_cbfunc+0x40>)
 801dc72:	4a0a      	ldr	r2, [pc, #40]	; (801dc9c <reg_wizchip_cs_cbfunc+0x48>)
 801dc74:	619a      	str	r2, [r3, #24]
 801dc76:	e006      	b.n	801dc86 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 801dc78:	4a06      	ldr	r2, [pc, #24]	; (801dc94 <reg_wizchip_cs_cbfunc+0x40>)
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 801dc7e:	4a05      	ldr	r2, [pc, #20]	; (801dc94 <reg_wizchip_cs_cbfunc+0x40>)
 801dc80:	683b      	ldr	r3, [r7, #0]
 801dc82:	6193      	str	r3, [r2, #24]
   }
}
 801dc84:	bf00      	nop
 801dc86:	bf00      	nop
 801dc88:	370c      	adds	r7, #12
 801dc8a:	46bd      	mov	sp, r7
 801dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc90:	4770      	bx	lr
 801dc92:	bf00      	nop
 801dc94:	20000044 	.word	0x20000044
 801dc98:	0801dbd9 	.word	0x0801dbd9
 801dc9c:	0801dbe7 	.word	0x0801dbe7

0801dca0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 801dca0:	b480      	push	{r7}
 801dca2:	b083      	sub	sp, #12
 801dca4:	af00      	add	r7, sp, #0
 801dca6:	6078      	str	r0, [r7, #4]
 801dca8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 801dcaa:	bf00      	nop
 801dcac:	4b0f      	ldr	r3, [pc, #60]	; (801dcec <reg_wizchip_spi_cbfunc+0x4c>)
 801dcae:	881b      	ldrh	r3, [r3, #0]
 801dcb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d0f9      	beq.n	801dcac <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d002      	beq.n	801dcc4 <reg_wizchip_spi_cbfunc+0x24>
 801dcbe:	683b      	ldr	r3, [r7, #0]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d106      	bne.n	801dcd2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801dcc4:	4b09      	ldr	r3, [pc, #36]	; (801dcec <reg_wizchip_spi_cbfunc+0x4c>)
 801dcc6:	4a0a      	ldr	r2, [pc, #40]	; (801dcf0 <reg_wizchip_spi_cbfunc+0x50>)
 801dcc8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 801dcca:	4b08      	ldr	r3, [pc, #32]	; (801dcec <reg_wizchip_spi_cbfunc+0x4c>)
 801dccc:	4a09      	ldr	r2, [pc, #36]	; (801dcf4 <reg_wizchip_spi_cbfunc+0x54>)
 801dcce:	621a      	str	r2, [r3, #32]
 801dcd0:	e006      	b.n	801dce0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 801dcd2:	4a06      	ldr	r2, [pc, #24]	; (801dcec <reg_wizchip_spi_cbfunc+0x4c>)
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 801dcd8:	4a04      	ldr	r2, [pc, #16]	; (801dcec <reg_wizchip_spi_cbfunc+0x4c>)
 801dcda:	683b      	ldr	r3, [r7, #0]
 801dcdc:	6213      	str	r3, [r2, #32]
   }
}
 801dcde:	bf00      	nop
 801dce0:	bf00      	nop
 801dce2:	370c      	adds	r7, #12
 801dce4:	46bd      	mov	sp, r7
 801dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcea:	4770      	bx	lr
 801dcec:	20000044 	.word	0x20000044
 801dcf0:	0801dc2d 	.word	0x0801dc2d
 801dcf4:	0801dc3d 	.word	0x0801dc3d

0801dcf8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 801dcf8:	b580      	push	{r7, lr}
 801dcfa:	b086      	sub	sp, #24
 801dcfc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801dcfe:	1d3b      	adds	r3, r7, #4
 801dd00:	2206      	movs	r2, #6
 801dd02:	4619      	mov	r1, r3
 801dd04:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801dd08:	f7ff f93a 	bl	801cf80 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801dd0c:	f107 0314 	add.w	r3, r7, #20
 801dd10:	2204      	movs	r2, #4
 801dd12:	4619      	mov	r1, r3
 801dd14:	f44f 7080 	mov.w	r0, #256	; 0x100
 801dd18:	f7ff f932 	bl	801cf80 <WIZCHIP_READ_BUF>
 801dd1c:	f107 0310 	add.w	r3, r7, #16
 801dd20:	2204      	movs	r2, #4
 801dd22:	4619      	mov	r1, r3
 801dd24:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801dd28:	f7ff f92a 	bl	801cf80 <WIZCHIP_READ_BUF>
 801dd2c:	f107 030c 	add.w	r3, r7, #12
 801dd30:	2204      	movs	r2, #4
 801dd32:	4619      	mov	r1, r3
 801dd34:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801dd38:	f7ff f922 	bl	801cf80 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801dd3c:	2180      	movs	r1, #128	; 0x80
 801dd3e:	2000      	movs	r0, #0
 801dd40:	f7ff f8d0 	bl	801cee4 <WIZCHIP_WRITE>
   getMR(); // for delay
 801dd44:	2000      	movs	r0, #0
 801dd46:	f7ff f881 	bl	801ce4c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801dd4a:	1d3b      	adds	r3, r7, #4
 801dd4c:	2206      	movs	r2, #6
 801dd4e:	4619      	mov	r1, r3
 801dd50:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801dd54:	f7ff f974 	bl	801d040 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801dd58:	f107 0314 	add.w	r3, r7, #20
 801dd5c:	2204      	movs	r2, #4
 801dd5e:	4619      	mov	r1, r3
 801dd60:	f44f 7080 	mov.w	r0, #256	; 0x100
 801dd64:	f7ff f96c 	bl	801d040 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801dd68:	f107 0310 	add.w	r3, r7, #16
 801dd6c:	2204      	movs	r2, #4
 801dd6e:	4619      	mov	r1, r3
 801dd70:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801dd74:	f7ff f964 	bl	801d040 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801dd78:	f107 030c 	add.w	r3, r7, #12
 801dd7c:	2204      	movs	r2, #4
 801dd7e:	4619      	mov	r1, r3
 801dd80:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801dd84:	f7ff f95c 	bl	801d040 <WIZCHIP_WRITE_BUF>
}
 801dd88:	bf00      	nop
 801dd8a:	3718      	adds	r7, #24
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd80      	pop	{r7, pc}

0801dd90 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801dd90:	b580      	push	{r7, lr}
 801dd92:	b084      	sub	sp, #16
 801dd94:	af00      	add	r7, sp, #0
 801dd96:	6078      	str	r0, [r7, #4]
 801dd98:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 801dd9a:	2300      	movs	r3, #0
 801dd9c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 801dd9e:	f7ff ffab 	bl	801dcf8 <wizchip_sw_reset>
   if(txsize)
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d03b      	beq.n	801de20 <wizchip_init+0x90>
   {
      tmp = 0;
 801dda8:	2300      	movs	r3, #0
 801ddaa:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801ddac:	2300      	movs	r3, #0
 801ddae:	73fb      	strb	r3, [r7, #15]
 801ddb0:	e015      	b.n	801ddde <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 801ddb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ddb6:	687a      	ldr	r2, [r7, #4]
 801ddb8:	4413      	add	r3, r2
 801ddba:	781a      	ldrb	r2, [r3, #0]
 801ddbc:	7bbb      	ldrb	r3, [r7, #14]
 801ddbe:	4413      	add	r3, r2
 801ddc0:	b2db      	uxtb	r3, r3
 801ddc2:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801ddc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ddc8:	2b10      	cmp	r3, #16
 801ddca:	dd02      	ble.n	801ddd2 <wizchip_init+0x42>
 801ddcc:	f04f 33ff 	mov.w	r3, #4294967295
 801ddd0:	e066      	b.n	801dea0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801ddd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ddd6:	b2db      	uxtb	r3, r3
 801ddd8:	3301      	adds	r3, #1
 801ddda:	b2db      	uxtb	r3, r3
 801dddc:	73fb      	strb	r3, [r7, #15]
 801ddde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dde2:	2b07      	cmp	r3, #7
 801dde4:	dde5      	ble.n	801ddb2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801dde6:	2300      	movs	r3, #0
 801dde8:	73fb      	strb	r3, [r7, #15]
 801ddea:	e015      	b.n	801de18 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801ddec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ddf0:	009b      	lsls	r3, r3, #2
 801ddf2:	3301      	adds	r3, #1
 801ddf4:	00db      	lsls	r3, r3, #3
 801ddf6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de00:	687a      	ldr	r2, [r7, #4]
 801de02:	4413      	add	r3, r2
 801de04:	781b      	ldrb	r3, [r3, #0]
 801de06:	4619      	mov	r1, r3
 801de08:	f7ff f86c 	bl	801cee4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801de0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de10:	b2db      	uxtb	r3, r3
 801de12:	3301      	adds	r3, #1
 801de14:	b2db      	uxtb	r3, r3
 801de16:	73fb      	strb	r3, [r7, #15]
 801de18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de1c:	2b07      	cmp	r3, #7
 801de1e:	dde5      	ble.n	801ddec <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801de20:	683b      	ldr	r3, [r7, #0]
 801de22:	2b00      	cmp	r3, #0
 801de24:	d03b      	beq.n	801de9e <wizchip_init+0x10e>
   {
      tmp = 0;
 801de26:	2300      	movs	r3, #0
 801de28:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801de2a:	2300      	movs	r3, #0
 801de2c:	73fb      	strb	r3, [r7, #15]
 801de2e:	e015      	b.n	801de5c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801de30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de34:	683a      	ldr	r2, [r7, #0]
 801de36:	4413      	add	r3, r2
 801de38:	781a      	ldrb	r2, [r3, #0]
 801de3a:	7bbb      	ldrb	r3, [r7, #14]
 801de3c:	4413      	add	r3, r2
 801de3e:	b2db      	uxtb	r3, r3
 801de40:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801de42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801de46:	2b10      	cmp	r3, #16
 801de48:	dd02      	ble.n	801de50 <wizchip_init+0xc0>
 801de4a:	f04f 33ff 	mov.w	r3, #4294967295
 801de4e:	e027      	b.n	801dea0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801de50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de54:	b2db      	uxtb	r3, r3
 801de56:	3301      	adds	r3, #1
 801de58:	b2db      	uxtb	r3, r3
 801de5a:	73fb      	strb	r3, [r7, #15]
 801de5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de60:	2b07      	cmp	r3, #7
 801de62:	dde5      	ble.n	801de30 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801de64:	2300      	movs	r3, #0
 801de66:	73fb      	strb	r3, [r7, #15]
 801de68:	e015      	b.n	801de96 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801de6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de6e:	009b      	lsls	r3, r3, #2
 801de70:	3301      	adds	r3, #1
 801de72:	00db      	lsls	r3, r3, #3
 801de74:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801de78:	4618      	mov	r0, r3
 801de7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de7e:	683a      	ldr	r2, [r7, #0]
 801de80:	4413      	add	r3, r2
 801de82:	781b      	ldrb	r3, [r3, #0]
 801de84:	4619      	mov	r1, r3
 801de86:	f7ff f82d 	bl	801cee4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801de8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de8e:	b2db      	uxtb	r3, r3
 801de90:	3301      	adds	r3, #1
 801de92:	b2db      	uxtb	r3, r3
 801de94:	73fb      	strb	r3, [r7, #15]
 801de96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de9a:	2b07      	cmp	r3, #7
 801de9c:	dde5      	ble.n	801de6a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801de9e:	2300      	movs	r3, #0
}
 801dea0:	4618      	mov	r0, r3
 801dea2:	3710      	adds	r7, #16
 801dea4:	46bd      	mov	sp, r7
 801dea6:	bd80      	pop	{r7, pc}

0801dea8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801dea8:	b580      	push	{r7, lr}
 801deaa:	b082      	sub	sp, #8
 801deac:	af00      	add	r7, sp, #0
 801deae:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	2206      	movs	r2, #6
 801deb4:	4619      	mov	r1, r3
 801deb6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801deba:	f7ff f8c1 	bl	801d040 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	330e      	adds	r3, #14
 801dec2:	2204      	movs	r2, #4
 801dec4:	4619      	mov	r1, r3
 801dec6:	f44f 7080 	mov.w	r0, #256	; 0x100
 801deca:	f7ff f8b9 	bl	801d040 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	330a      	adds	r3, #10
 801ded2:	2204      	movs	r2, #4
 801ded4:	4619      	mov	r1, r3
 801ded6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801deda:	f7ff f8b1 	bl	801d040 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801dede:	687b      	ldr	r3, [r7, #4]
 801dee0:	3306      	adds	r3, #6
 801dee2:	2204      	movs	r2, #4
 801dee4:	4619      	mov	r1, r3
 801dee6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801deea:	f7ff f8a9 	bl	801d040 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	7c9a      	ldrb	r2, [r3, #18]
 801def2:	4b0b      	ldr	r3, [pc, #44]	; (801df20 <wizchip_setnetinfo+0x78>)
 801def4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	7cda      	ldrb	r2, [r3, #19]
 801defa:	4b09      	ldr	r3, [pc, #36]	; (801df20 <wizchip_setnetinfo+0x78>)
 801defc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	7d1a      	ldrb	r2, [r3, #20]
 801df02:	4b07      	ldr	r3, [pc, #28]	; (801df20 <wizchip_setnetinfo+0x78>)
 801df04:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	7d5a      	ldrb	r2, [r3, #21]
 801df0a:	4b05      	ldr	r3, [pc, #20]	; (801df20 <wizchip_setnetinfo+0x78>)
 801df0c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	7d9a      	ldrb	r2, [r3, #22]
 801df12:	4b04      	ldr	r3, [pc, #16]	; (801df24 <wizchip_setnetinfo+0x7c>)
 801df14:	701a      	strb	r2, [r3, #0]
}
 801df16:	bf00      	nop
 801df18:	3708      	adds	r7, #8
 801df1a:	46bd      	mov	sp, r7
 801df1c:	bd80      	pop	{r7, pc}
 801df1e:	bf00      	nop
 801df20:	200030fc 	.word	0x200030fc
 801df24:	20003100 	.word	0x20003100

0801df28 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801df28:	b580      	push	{r7, lr}
 801df2a:	b082      	sub	sp, #8
 801df2c:	af00      	add	r7, sp, #0
 801df2e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	2206      	movs	r2, #6
 801df34:	4619      	mov	r1, r3
 801df36:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801df3a:	f7ff f821 	bl	801cf80 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	330e      	adds	r3, #14
 801df42:	2204      	movs	r2, #4
 801df44:	4619      	mov	r1, r3
 801df46:	f44f 7080 	mov.w	r0, #256	; 0x100
 801df4a:	f7ff f819 	bl	801cf80 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	330a      	adds	r3, #10
 801df52:	2204      	movs	r2, #4
 801df54:	4619      	mov	r1, r3
 801df56:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801df5a:	f7ff f811 	bl	801cf80 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	3306      	adds	r3, #6
 801df62:	2204      	movs	r2, #4
 801df64:	4619      	mov	r1, r3
 801df66:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801df6a:	f7ff f809 	bl	801cf80 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801df6e:	4b0c      	ldr	r3, [pc, #48]	; (801dfa0 <wizchip_getnetinfo+0x78>)
 801df70:	781a      	ldrb	r2, [r3, #0]
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801df76:	4b0a      	ldr	r3, [pc, #40]	; (801dfa0 <wizchip_getnetinfo+0x78>)
 801df78:	785a      	ldrb	r2, [r3, #1]
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801df7e:	4b08      	ldr	r3, [pc, #32]	; (801dfa0 <wizchip_getnetinfo+0x78>)
 801df80:	789a      	ldrb	r2, [r3, #2]
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801df86:	4b06      	ldr	r3, [pc, #24]	; (801dfa0 <wizchip_getnetinfo+0x78>)
 801df88:	78da      	ldrb	r2, [r3, #3]
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801df8e:	4b05      	ldr	r3, [pc, #20]	; (801dfa4 <wizchip_getnetinfo+0x7c>)
 801df90:	781a      	ldrb	r2, [r3, #0]
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	759a      	strb	r2, [r3, #22]
}
 801df96:	bf00      	nop
 801df98:	3708      	adds	r7, #8
 801df9a:	46bd      	mov	sp, r7
 801df9c:	bd80      	pop	{r7, pc}
 801df9e:	bf00      	nop
 801dfa0:	200030fc 	.word	0x200030fc
 801dfa4:	20003100 	.word	0x20003100

0801dfa8 <calloc>:
 801dfa8:	4b02      	ldr	r3, [pc, #8]	; (801dfb4 <calloc+0xc>)
 801dfaa:	460a      	mov	r2, r1
 801dfac:	4601      	mov	r1, r0
 801dfae:	6818      	ldr	r0, [r3, #0]
 801dfb0:	f000 b87c 	b.w	801e0ac <_calloc_r>
 801dfb4:	20000070 	.word	0x20000070

0801dfb8 <__errno>:
 801dfb8:	4b01      	ldr	r3, [pc, #4]	; (801dfc0 <__errno+0x8>)
 801dfba:	6818      	ldr	r0, [r3, #0]
 801dfbc:	4770      	bx	lr
 801dfbe:	bf00      	nop
 801dfc0:	20000070 	.word	0x20000070

0801dfc4 <__libc_init_array>:
 801dfc4:	b570      	push	{r4, r5, r6, lr}
 801dfc6:	4d0d      	ldr	r5, [pc, #52]	; (801dffc <__libc_init_array+0x38>)
 801dfc8:	4c0d      	ldr	r4, [pc, #52]	; (801e000 <__libc_init_array+0x3c>)
 801dfca:	1b64      	subs	r4, r4, r5
 801dfcc:	10a4      	asrs	r4, r4, #2
 801dfce:	2600      	movs	r6, #0
 801dfd0:	42a6      	cmp	r6, r4
 801dfd2:	d109      	bne.n	801dfe8 <__libc_init_array+0x24>
 801dfd4:	4d0b      	ldr	r5, [pc, #44]	; (801e004 <__libc_init_array+0x40>)
 801dfd6:	4c0c      	ldr	r4, [pc, #48]	; (801e008 <__libc_init_array+0x44>)
 801dfd8:	f001 fb82 	bl	801f6e0 <_init>
 801dfdc:	1b64      	subs	r4, r4, r5
 801dfde:	10a4      	asrs	r4, r4, #2
 801dfe0:	2600      	movs	r6, #0
 801dfe2:	42a6      	cmp	r6, r4
 801dfe4:	d105      	bne.n	801dff2 <__libc_init_array+0x2e>
 801dfe6:	bd70      	pop	{r4, r5, r6, pc}
 801dfe8:	f855 3b04 	ldr.w	r3, [r5], #4
 801dfec:	4798      	blx	r3
 801dfee:	3601      	adds	r6, #1
 801dff0:	e7ee      	b.n	801dfd0 <__libc_init_array+0xc>
 801dff2:	f855 3b04 	ldr.w	r3, [r5], #4
 801dff6:	4798      	blx	r3
 801dff8:	3601      	adds	r6, #1
 801dffa:	e7f2      	b.n	801dfe2 <__libc_init_array+0x1e>
 801dffc:	08025444 	.word	0x08025444
 801e000:	08025444 	.word	0x08025444
 801e004:	08025444 	.word	0x08025444
 801e008:	08025448 	.word	0x08025448

0801e00c <malloc>:
 801e00c:	4b02      	ldr	r3, [pc, #8]	; (801e018 <malloc+0xc>)
 801e00e:	4601      	mov	r1, r0
 801e010:	6818      	ldr	r0, [r3, #0]
 801e012:	f000 b8cd 	b.w	801e1b0 <_malloc_r>
 801e016:	bf00      	nop
 801e018:	20000070 	.word	0x20000070

0801e01c <free>:
 801e01c:	4b02      	ldr	r3, [pc, #8]	; (801e028 <free+0xc>)
 801e01e:	4601      	mov	r1, r0
 801e020:	6818      	ldr	r0, [r3, #0]
 801e022:	f000 b859 	b.w	801e0d8 <_free_r>
 801e026:	bf00      	nop
 801e028:	20000070 	.word	0x20000070

0801e02c <memcmp>:
 801e02c:	b510      	push	{r4, lr}
 801e02e:	3901      	subs	r1, #1
 801e030:	4402      	add	r2, r0
 801e032:	4290      	cmp	r0, r2
 801e034:	d101      	bne.n	801e03a <memcmp+0xe>
 801e036:	2000      	movs	r0, #0
 801e038:	e005      	b.n	801e046 <memcmp+0x1a>
 801e03a:	7803      	ldrb	r3, [r0, #0]
 801e03c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e040:	42a3      	cmp	r3, r4
 801e042:	d001      	beq.n	801e048 <memcmp+0x1c>
 801e044:	1b18      	subs	r0, r3, r4
 801e046:	bd10      	pop	{r4, pc}
 801e048:	3001      	adds	r0, #1
 801e04a:	e7f2      	b.n	801e032 <memcmp+0x6>

0801e04c <memcpy>:
 801e04c:	440a      	add	r2, r1
 801e04e:	4291      	cmp	r1, r2
 801e050:	f100 33ff 	add.w	r3, r0, #4294967295
 801e054:	d100      	bne.n	801e058 <memcpy+0xc>
 801e056:	4770      	bx	lr
 801e058:	b510      	push	{r4, lr}
 801e05a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e05e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e062:	4291      	cmp	r1, r2
 801e064:	d1f9      	bne.n	801e05a <memcpy+0xe>
 801e066:	bd10      	pop	{r4, pc}

0801e068 <memmove>:
 801e068:	4288      	cmp	r0, r1
 801e06a:	b510      	push	{r4, lr}
 801e06c:	eb01 0402 	add.w	r4, r1, r2
 801e070:	d902      	bls.n	801e078 <memmove+0x10>
 801e072:	4284      	cmp	r4, r0
 801e074:	4623      	mov	r3, r4
 801e076:	d807      	bhi.n	801e088 <memmove+0x20>
 801e078:	1e43      	subs	r3, r0, #1
 801e07a:	42a1      	cmp	r1, r4
 801e07c:	d008      	beq.n	801e090 <memmove+0x28>
 801e07e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e082:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e086:	e7f8      	b.n	801e07a <memmove+0x12>
 801e088:	4402      	add	r2, r0
 801e08a:	4601      	mov	r1, r0
 801e08c:	428a      	cmp	r2, r1
 801e08e:	d100      	bne.n	801e092 <memmove+0x2a>
 801e090:	bd10      	pop	{r4, pc}
 801e092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e09a:	e7f7      	b.n	801e08c <memmove+0x24>

0801e09c <memset>:
 801e09c:	4402      	add	r2, r0
 801e09e:	4603      	mov	r3, r0
 801e0a0:	4293      	cmp	r3, r2
 801e0a2:	d100      	bne.n	801e0a6 <memset+0xa>
 801e0a4:	4770      	bx	lr
 801e0a6:	f803 1b01 	strb.w	r1, [r3], #1
 801e0aa:	e7f9      	b.n	801e0a0 <memset+0x4>

0801e0ac <_calloc_r>:
 801e0ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e0ae:	fba1 2402 	umull	r2, r4, r1, r2
 801e0b2:	b94c      	cbnz	r4, 801e0c8 <_calloc_r+0x1c>
 801e0b4:	4611      	mov	r1, r2
 801e0b6:	9201      	str	r2, [sp, #4]
 801e0b8:	f000 f87a 	bl	801e1b0 <_malloc_r>
 801e0bc:	9a01      	ldr	r2, [sp, #4]
 801e0be:	4605      	mov	r5, r0
 801e0c0:	b930      	cbnz	r0, 801e0d0 <_calloc_r+0x24>
 801e0c2:	4628      	mov	r0, r5
 801e0c4:	b003      	add	sp, #12
 801e0c6:	bd30      	pop	{r4, r5, pc}
 801e0c8:	220c      	movs	r2, #12
 801e0ca:	6002      	str	r2, [r0, #0]
 801e0cc:	2500      	movs	r5, #0
 801e0ce:	e7f8      	b.n	801e0c2 <_calloc_r+0x16>
 801e0d0:	4621      	mov	r1, r4
 801e0d2:	f7ff ffe3 	bl	801e09c <memset>
 801e0d6:	e7f4      	b.n	801e0c2 <_calloc_r+0x16>

0801e0d8 <_free_r>:
 801e0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e0da:	2900      	cmp	r1, #0
 801e0dc:	d044      	beq.n	801e168 <_free_r+0x90>
 801e0de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e0e2:	9001      	str	r0, [sp, #4]
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	f1a1 0404 	sub.w	r4, r1, #4
 801e0ea:	bfb8      	it	lt
 801e0ec:	18e4      	addlt	r4, r4, r3
 801e0ee:	f000 fd71 	bl	801ebd4 <__malloc_lock>
 801e0f2:	4a1e      	ldr	r2, [pc, #120]	; (801e16c <_free_r+0x94>)
 801e0f4:	9801      	ldr	r0, [sp, #4]
 801e0f6:	6813      	ldr	r3, [r2, #0]
 801e0f8:	b933      	cbnz	r3, 801e108 <_free_r+0x30>
 801e0fa:	6063      	str	r3, [r4, #4]
 801e0fc:	6014      	str	r4, [r2, #0]
 801e0fe:	b003      	add	sp, #12
 801e100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e104:	f000 bd6c 	b.w	801ebe0 <__malloc_unlock>
 801e108:	42a3      	cmp	r3, r4
 801e10a:	d908      	bls.n	801e11e <_free_r+0x46>
 801e10c:	6825      	ldr	r5, [r4, #0]
 801e10e:	1961      	adds	r1, r4, r5
 801e110:	428b      	cmp	r3, r1
 801e112:	bf01      	itttt	eq
 801e114:	6819      	ldreq	r1, [r3, #0]
 801e116:	685b      	ldreq	r3, [r3, #4]
 801e118:	1949      	addeq	r1, r1, r5
 801e11a:	6021      	streq	r1, [r4, #0]
 801e11c:	e7ed      	b.n	801e0fa <_free_r+0x22>
 801e11e:	461a      	mov	r2, r3
 801e120:	685b      	ldr	r3, [r3, #4]
 801e122:	b10b      	cbz	r3, 801e128 <_free_r+0x50>
 801e124:	42a3      	cmp	r3, r4
 801e126:	d9fa      	bls.n	801e11e <_free_r+0x46>
 801e128:	6811      	ldr	r1, [r2, #0]
 801e12a:	1855      	adds	r5, r2, r1
 801e12c:	42a5      	cmp	r5, r4
 801e12e:	d10b      	bne.n	801e148 <_free_r+0x70>
 801e130:	6824      	ldr	r4, [r4, #0]
 801e132:	4421      	add	r1, r4
 801e134:	1854      	adds	r4, r2, r1
 801e136:	42a3      	cmp	r3, r4
 801e138:	6011      	str	r1, [r2, #0]
 801e13a:	d1e0      	bne.n	801e0fe <_free_r+0x26>
 801e13c:	681c      	ldr	r4, [r3, #0]
 801e13e:	685b      	ldr	r3, [r3, #4]
 801e140:	6053      	str	r3, [r2, #4]
 801e142:	4421      	add	r1, r4
 801e144:	6011      	str	r1, [r2, #0]
 801e146:	e7da      	b.n	801e0fe <_free_r+0x26>
 801e148:	d902      	bls.n	801e150 <_free_r+0x78>
 801e14a:	230c      	movs	r3, #12
 801e14c:	6003      	str	r3, [r0, #0]
 801e14e:	e7d6      	b.n	801e0fe <_free_r+0x26>
 801e150:	6825      	ldr	r5, [r4, #0]
 801e152:	1961      	adds	r1, r4, r5
 801e154:	428b      	cmp	r3, r1
 801e156:	bf04      	itt	eq
 801e158:	6819      	ldreq	r1, [r3, #0]
 801e15a:	685b      	ldreq	r3, [r3, #4]
 801e15c:	6063      	str	r3, [r4, #4]
 801e15e:	bf04      	itt	eq
 801e160:	1949      	addeq	r1, r1, r5
 801e162:	6021      	streq	r1, [r4, #0]
 801e164:	6054      	str	r4, [r2, #4]
 801e166:	e7ca      	b.n	801e0fe <_free_r+0x26>
 801e168:	b003      	add	sp, #12
 801e16a:	bd30      	pop	{r4, r5, pc}
 801e16c:	20003104 	.word	0x20003104

0801e170 <sbrk_aligned>:
 801e170:	b570      	push	{r4, r5, r6, lr}
 801e172:	4e0e      	ldr	r6, [pc, #56]	; (801e1ac <sbrk_aligned+0x3c>)
 801e174:	460c      	mov	r4, r1
 801e176:	6831      	ldr	r1, [r6, #0]
 801e178:	4605      	mov	r5, r0
 801e17a:	b911      	cbnz	r1, 801e182 <sbrk_aligned+0x12>
 801e17c:	f000 f986 	bl	801e48c <_sbrk_r>
 801e180:	6030      	str	r0, [r6, #0]
 801e182:	4621      	mov	r1, r4
 801e184:	4628      	mov	r0, r5
 801e186:	f000 f981 	bl	801e48c <_sbrk_r>
 801e18a:	1c43      	adds	r3, r0, #1
 801e18c:	d00a      	beq.n	801e1a4 <sbrk_aligned+0x34>
 801e18e:	1cc4      	adds	r4, r0, #3
 801e190:	f024 0403 	bic.w	r4, r4, #3
 801e194:	42a0      	cmp	r0, r4
 801e196:	d007      	beq.n	801e1a8 <sbrk_aligned+0x38>
 801e198:	1a21      	subs	r1, r4, r0
 801e19a:	4628      	mov	r0, r5
 801e19c:	f000 f976 	bl	801e48c <_sbrk_r>
 801e1a0:	3001      	adds	r0, #1
 801e1a2:	d101      	bne.n	801e1a8 <sbrk_aligned+0x38>
 801e1a4:	f04f 34ff 	mov.w	r4, #4294967295
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	bd70      	pop	{r4, r5, r6, pc}
 801e1ac:	20003108 	.word	0x20003108

0801e1b0 <_malloc_r>:
 801e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1b4:	1ccd      	adds	r5, r1, #3
 801e1b6:	f025 0503 	bic.w	r5, r5, #3
 801e1ba:	3508      	adds	r5, #8
 801e1bc:	2d0c      	cmp	r5, #12
 801e1be:	bf38      	it	cc
 801e1c0:	250c      	movcc	r5, #12
 801e1c2:	2d00      	cmp	r5, #0
 801e1c4:	4607      	mov	r7, r0
 801e1c6:	db01      	blt.n	801e1cc <_malloc_r+0x1c>
 801e1c8:	42a9      	cmp	r1, r5
 801e1ca:	d905      	bls.n	801e1d8 <_malloc_r+0x28>
 801e1cc:	230c      	movs	r3, #12
 801e1ce:	603b      	str	r3, [r7, #0]
 801e1d0:	2600      	movs	r6, #0
 801e1d2:	4630      	mov	r0, r6
 801e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1d8:	4e2e      	ldr	r6, [pc, #184]	; (801e294 <_malloc_r+0xe4>)
 801e1da:	f000 fcfb 	bl	801ebd4 <__malloc_lock>
 801e1de:	6833      	ldr	r3, [r6, #0]
 801e1e0:	461c      	mov	r4, r3
 801e1e2:	bb34      	cbnz	r4, 801e232 <_malloc_r+0x82>
 801e1e4:	4629      	mov	r1, r5
 801e1e6:	4638      	mov	r0, r7
 801e1e8:	f7ff ffc2 	bl	801e170 <sbrk_aligned>
 801e1ec:	1c43      	adds	r3, r0, #1
 801e1ee:	4604      	mov	r4, r0
 801e1f0:	d14d      	bne.n	801e28e <_malloc_r+0xde>
 801e1f2:	6834      	ldr	r4, [r6, #0]
 801e1f4:	4626      	mov	r6, r4
 801e1f6:	2e00      	cmp	r6, #0
 801e1f8:	d140      	bne.n	801e27c <_malloc_r+0xcc>
 801e1fa:	6823      	ldr	r3, [r4, #0]
 801e1fc:	4631      	mov	r1, r6
 801e1fe:	4638      	mov	r0, r7
 801e200:	eb04 0803 	add.w	r8, r4, r3
 801e204:	f000 f942 	bl	801e48c <_sbrk_r>
 801e208:	4580      	cmp	r8, r0
 801e20a:	d13a      	bne.n	801e282 <_malloc_r+0xd2>
 801e20c:	6821      	ldr	r1, [r4, #0]
 801e20e:	3503      	adds	r5, #3
 801e210:	1a6d      	subs	r5, r5, r1
 801e212:	f025 0503 	bic.w	r5, r5, #3
 801e216:	3508      	adds	r5, #8
 801e218:	2d0c      	cmp	r5, #12
 801e21a:	bf38      	it	cc
 801e21c:	250c      	movcc	r5, #12
 801e21e:	4629      	mov	r1, r5
 801e220:	4638      	mov	r0, r7
 801e222:	f7ff ffa5 	bl	801e170 <sbrk_aligned>
 801e226:	3001      	adds	r0, #1
 801e228:	d02b      	beq.n	801e282 <_malloc_r+0xd2>
 801e22a:	6823      	ldr	r3, [r4, #0]
 801e22c:	442b      	add	r3, r5
 801e22e:	6023      	str	r3, [r4, #0]
 801e230:	e00e      	b.n	801e250 <_malloc_r+0xa0>
 801e232:	6822      	ldr	r2, [r4, #0]
 801e234:	1b52      	subs	r2, r2, r5
 801e236:	d41e      	bmi.n	801e276 <_malloc_r+0xc6>
 801e238:	2a0b      	cmp	r2, #11
 801e23a:	d916      	bls.n	801e26a <_malloc_r+0xba>
 801e23c:	1961      	adds	r1, r4, r5
 801e23e:	42a3      	cmp	r3, r4
 801e240:	6025      	str	r5, [r4, #0]
 801e242:	bf18      	it	ne
 801e244:	6059      	strne	r1, [r3, #4]
 801e246:	6863      	ldr	r3, [r4, #4]
 801e248:	bf08      	it	eq
 801e24a:	6031      	streq	r1, [r6, #0]
 801e24c:	5162      	str	r2, [r4, r5]
 801e24e:	604b      	str	r3, [r1, #4]
 801e250:	4638      	mov	r0, r7
 801e252:	f104 060b 	add.w	r6, r4, #11
 801e256:	f000 fcc3 	bl	801ebe0 <__malloc_unlock>
 801e25a:	f026 0607 	bic.w	r6, r6, #7
 801e25e:	1d23      	adds	r3, r4, #4
 801e260:	1af2      	subs	r2, r6, r3
 801e262:	d0b6      	beq.n	801e1d2 <_malloc_r+0x22>
 801e264:	1b9b      	subs	r3, r3, r6
 801e266:	50a3      	str	r3, [r4, r2]
 801e268:	e7b3      	b.n	801e1d2 <_malloc_r+0x22>
 801e26a:	6862      	ldr	r2, [r4, #4]
 801e26c:	42a3      	cmp	r3, r4
 801e26e:	bf0c      	ite	eq
 801e270:	6032      	streq	r2, [r6, #0]
 801e272:	605a      	strne	r2, [r3, #4]
 801e274:	e7ec      	b.n	801e250 <_malloc_r+0xa0>
 801e276:	4623      	mov	r3, r4
 801e278:	6864      	ldr	r4, [r4, #4]
 801e27a:	e7b2      	b.n	801e1e2 <_malloc_r+0x32>
 801e27c:	4634      	mov	r4, r6
 801e27e:	6876      	ldr	r6, [r6, #4]
 801e280:	e7b9      	b.n	801e1f6 <_malloc_r+0x46>
 801e282:	230c      	movs	r3, #12
 801e284:	603b      	str	r3, [r7, #0]
 801e286:	4638      	mov	r0, r7
 801e288:	f000 fcaa 	bl	801ebe0 <__malloc_unlock>
 801e28c:	e7a1      	b.n	801e1d2 <_malloc_r+0x22>
 801e28e:	6025      	str	r5, [r4, #0]
 801e290:	e7de      	b.n	801e250 <_malloc_r+0xa0>
 801e292:	bf00      	nop
 801e294:	20003104 	.word	0x20003104

0801e298 <iprintf>:
 801e298:	b40f      	push	{r0, r1, r2, r3}
 801e29a:	4b0a      	ldr	r3, [pc, #40]	; (801e2c4 <iprintf+0x2c>)
 801e29c:	b513      	push	{r0, r1, r4, lr}
 801e29e:	681c      	ldr	r4, [r3, #0]
 801e2a0:	b124      	cbz	r4, 801e2ac <iprintf+0x14>
 801e2a2:	69a3      	ldr	r3, [r4, #24]
 801e2a4:	b913      	cbnz	r3, 801e2ac <iprintf+0x14>
 801e2a6:	4620      	mov	r0, r4
 801e2a8:	f000 fb7c 	bl	801e9a4 <__sinit>
 801e2ac:	ab05      	add	r3, sp, #20
 801e2ae:	9a04      	ldr	r2, [sp, #16]
 801e2b0:	68a1      	ldr	r1, [r4, #8]
 801e2b2:	9301      	str	r3, [sp, #4]
 801e2b4:	4620      	mov	r0, r4
 801e2b6:	f000 fe1f 	bl	801eef8 <_vfiprintf_r>
 801e2ba:	b002      	add	sp, #8
 801e2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2c0:	b004      	add	sp, #16
 801e2c2:	4770      	bx	lr
 801e2c4:	20000070 	.word	0x20000070

0801e2c8 <_puts_r>:
 801e2c8:	b570      	push	{r4, r5, r6, lr}
 801e2ca:	460e      	mov	r6, r1
 801e2cc:	4605      	mov	r5, r0
 801e2ce:	b118      	cbz	r0, 801e2d8 <_puts_r+0x10>
 801e2d0:	6983      	ldr	r3, [r0, #24]
 801e2d2:	b90b      	cbnz	r3, 801e2d8 <_puts_r+0x10>
 801e2d4:	f000 fb66 	bl	801e9a4 <__sinit>
 801e2d8:	69ab      	ldr	r3, [r5, #24]
 801e2da:	68ac      	ldr	r4, [r5, #8]
 801e2dc:	b913      	cbnz	r3, 801e2e4 <_puts_r+0x1c>
 801e2de:	4628      	mov	r0, r5
 801e2e0:	f000 fb60 	bl	801e9a4 <__sinit>
 801e2e4:	4b2c      	ldr	r3, [pc, #176]	; (801e398 <_puts_r+0xd0>)
 801e2e6:	429c      	cmp	r4, r3
 801e2e8:	d120      	bne.n	801e32c <_puts_r+0x64>
 801e2ea:	686c      	ldr	r4, [r5, #4]
 801e2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e2ee:	07db      	lsls	r3, r3, #31
 801e2f0:	d405      	bmi.n	801e2fe <_puts_r+0x36>
 801e2f2:	89a3      	ldrh	r3, [r4, #12]
 801e2f4:	0598      	lsls	r0, r3, #22
 801e2f6:	d402      	bmi.n	801e2fe <_puts_r+0x36>
 801e2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e2fa:	f000 fc03 	bl	801eb04 <__retarget_lock_acquire_recursive>
 801e2fe:	89a3      	ldrh	r3, [r4, #12]
 801e300:	0719      	lsls	r1, r3, #28
 801e302:	d51d      	bpl.n	801e340 <_puts_r+0x78>
 801e304:	6923      	ldr	r3, [r4, #16]
 801e306:	b1db      	cbz	r3, 801e340 <_puts_r+0x78>
 801e308:	3e01      	subs	r6, #1
 801e30a:	68a3      	ldr	r3, [r4, #8]
 801e30c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e310:	3b01      	subs	r3, #1
 801e312:	60a3      	str	r3, [r4, #8]
 801e314:	bb39      	cbnz	r1, 801e366 <_puts_r+0x9e>
 801e316:	2b00      	cmp	r3, #0
 801e318:	da38      	bge.n	801e38c <_puts_r+0xc4>
 801e31a:	4622      	mov	r2, r4
 801e31c:	210a      	movs	r1, #10
 801e31e:	4628      	mov	r0, r5
 801e320:	f000 f948 	bl	801e5b4 <__swbuf_r>
 801e324:	3001      	adds	r0, #1
 801e326:	d011      	beq.n	801e34c <_puts_r+0x84>
 801e328:	250a      	movs	r5, #10
 801e32a:	e011      	b.n	801e350 <_puts_r+0x88>
 801e32c:	4b1b      	ldr	r3, [pc, #108]	; (801e39c <_puts_r+0xd4>)
 801e32e:	429c      	cmp	r4, r3
 801e330:	d101      	bne.n	801e336 <_puts_r+0x6e>
 801e332:	68ac      	ldr	r4, [r5, #8]
 801e334:	e7da      	b.n	801e2ec <_puts_r+0x24>
 801e336:	4b1a      	ldr	r3, [pc, #104]	; (801e3a0 <_puts_r+0xd8>)
 801e338:	429c      	cmp	r4, r3
 801e33a:	bf08      	it	eq
 801e33c:	68ec      	ldreq	r4, [r5, #12]
 801e33e:	e7d5      	b.n	801e2ec <_puts_r+0x24>
 801e340:	4621      	mov	r1, r4
 801e342:	4628      	mov	r0, r5
 801e344:	f000 f988 	bl	801e658 <__swsetup_r>
 801e348:	2800      	cmp	r0, #0
 801e34a:	d0dd      	beq.n	801e308 <_puts_r+0x40>
 801e34c:	f04f 35ff 	mov.w	r5, #4294967295
 801e350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e352:	07da      	lsls	r2, r3, #31
 801e354:	d405      	bmi.n	801e362 <_puts_r+0x9a>
 801e356:	89a3      	ldrh	r3, [r4, #12]
 801e358:	059b      	lsls	r3, r3, #22
 801e35a:	d402      	bmi.n	801e362 <_puts_r+0x9a>
 801e35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e35e:	f000 fbd2 	bl	801eb06 <__retarget_lock_release_recursive>
 801e362:	4628      	mov	r0, r5
 801e364:	bd70      	pop	{r4, r5, r6, pc}
 801e366:	2b00      	cmp	r3, #0
 801e368:	da04      	bge.n	801e374 <_puts_r+0xac>
 801e36a:	69a2      	ldr	r2, [r4, #24]
 801e36c:	429a      	cmp	r2, r3
 801e36e:	dc06      	bgt.n	801e37e <_puts_r+0xb6>
 801e370:	290a      	cmp	r1, #10
 801e372:	d004      	beq.n	801e37e <_puts_r+0xb6>
 801e374:	6823      	ldr	r3, [r4, #0]
 801e376:	1c5a      	adds	r2, r3, #1
 801e378:	6022      	str	r2, [r4, #0]
 801e37a:	7019      	strb	r1, [r3, #0]
 801e37c:	e7c5      	b.n	801e30a <_puts_r+0x42>
 801e37e:	4622      	mov	r2, r4
 801e380:	4628      	mov	r0, r5
 801e382:	f000 f917 	bl	801e5b4 <__swbuf_r>
 801e386:	3001      	adds	r0, #1
 801e388:	d1bf      	bne.n	801e30a <_puts_r+0x42>
 801e38a:	e7df      	b.n	801e34c <_puts_r+0x84>
 801e38c:	6823      	ldr	r3, [r4, #0]
 801e38e:	250a      	movs	r5, #10
 801e390:	1c5a      	adds	r2, r3, #1
 801e392:	6022      	str	r2, [r4, #0]
 801e394:	701d      	strb	r5, [r3, #0]
 801e396:	e7db      	b.n	801e350 <_puts_r+0x88>
 801e398:	080253c8 	.word	0x080253c8
 801e39c:	080253e8 	.word	0x080253e8
 801e3a0:	080253a8 	.word	0x080253a8

0801e3a4 <puts>:
 801e3a4:	4b02      	ldr	r3, [pc, #8]	; (801e3b0 <puts+0xc>)
 801e3a6:	4601      	mov	r1, r0
 801e3a8:	6818      	ldr	r0, [r3, #0]
 801e3aa:	f7ff bf8d 	b.w	801e2c8 <_puts_r>
 801e3ae:	bf00      	nop
 801e3b0:	20000070 	.word	0x20000070

0801e3b4 <srand>:
 801e3b4:	b538      	push	{r3, r4, r5, lr}
 801e3b6:	4b10      	ldr	r3, [pc, #64]	; (801e3f8 <srand+0x44>)
 801e3b8:	681d      	ldr	r5, [r3, #0]
 801e3ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e3bc:	4604      	mov	r4, r0
 801e3be:	b9b3      	cbnz	r3, 801e3ee <srand+0x3a>
 801e3c0:	2018      	movs	r0, #24
 801e3c2:	f7ff fe23 	bl	801e00c <malloc>
 801e3c6:	4602      	mov	r2, r0
 801e3c8:	63a8      	str	r0, [r5, #56]	; 0x38
 801e3ca:	b920      	cbnz	r0, 801e3d6 <srand+0x22>
 801e3cc:	4b0b      	ldr	r3, [pc, #44]	; (801e3fc <srand+0x48>)
 801e3ce:	480c      	ldr	r0, [pc, #48]	; (801e400 <srand+0x4c>)
 801e3d0:	2142      	movs	r1, #66	; 0x42
 801e3d2:	f000 f9af 	bl	801e734 <__assert_func>
 801e3d6:	490b      	ldr	r1, [pc, #44]	; (801e404 <srand+0x50>)
 801e3d8:	4b0b      	ldr	r3, [pc, #44]	; (801e408 <srand+0x54>)
 801e3da:	e9c0 1300 	strd	r1, r3, [r0]
 801e3de:	4b0b      	ldr	r3, [pc, #44]	; (801e40c <srand+0x58>)
 801e3e0:	6083      	str	r3, [r0, #8]
 801e3e2:	230b      	movs	r3, #11
 801e3e4:	8183      	strh	r3, [r0, #12]
 801e3e6:	2100      	movs	r1, #0
 801e3e8:	2001      	movs	r0, #1
 801e3ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e3ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e3f0:	2200      	movs	r2, #0
 801e3f2:	611c      	str	r4, [r3, #16]
 801e3f4:	615a      	str	r2, [r3, #20]
 801e3f6:	bd38      	pop	{r3, r4, r5, pc}
 801e3f8:	20000070 	.word	0x20000070
 801e3fc:	080252f8 	.word	0x080252f8
 801e400:	0802530f 	.word	0x0802530f
 801e404:	abcd330e 	.word	0xabcd330e
 801e408:	e66d1234 	.word	0xe66d1234
 801e40c:	0005deec 	.word	0x0005deec

0801e410 <rand>:
 801e410:	4b16      	ldr	r3, [pc, #88]	; (801e46c <rand+0x5c>)
 801e412:	b510      	push	{r4, lr}
 801e414:	681c      	ldr	r4, [r3, #0]
 801e416:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e418:	b9b3      	cbnz	r3, 801e448 <rand+0x38>
 801e41a:	2018      	movs	r0, #24
 801e41c:	f7ff fdf6 	bl	801e00c <malloc>
 801e420:	63a0      	str	r0, [r4, #56]	; 0x38
 801e422:	b928      	cbnz	r0, 801e430 <rand+0x20>
 801e424:	4602      	mov	r2, r0
 801e426:	4b12      	ldr	r3, [pc, #72]	; (801e470 <rand+0x60>)
 801e428:	4812      	ldr	r0, [pc, #72]	; (801e474 <rand+0x64>)
 801e42a:	214e      	movs	r1, #78	; 0x4e
 801e42c:	f000 f982 	bl	801e734 <__assert_func>
 801e430:	4a11      	ldr	r2, [pc, #68]	; (801e478 <rand+0x68>)
 801e432:	4b12      	ldr	r3, [pc, #72]	; (801e47c <rand+0x6c>)
 801e434:	e9c0 2300 	strd	r2, r3, [r0]
 801e438:	4b11      	ldr	r3, [pc, #68]	; (801e480 <rand+0x70>)
 801e43a:	6083      	str	r3, [r0, #8]
 801e43c:	230b      	movs	r3, #11
 801e43e:	8183      	strh	r3, [r0, #12]
 801e440:	2201      	movs	r2, #1
 801e442:	2300      	movs	r3, #0
 801e444:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e448:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801e44a:	4a0e      	ldr	r2, [pc, #56]	; (801e484 <rand+0x74>)
 801e44c:	6920      	ldr	r0, [r4, #16]
 801e44e:	6963      	ldr	r3, [r4, #20]
 801e450:	490d      	ldr	r1, [pc, #52]	; (801e488 <rand+0x78>)
 801e452:	4342      	muls	r2, r0
 801e454:	fb01 2203 	mla	r2, r1, r3, r2
 801e458:	fba0 0101 	umull	r0, r1, r0, r1
 801e45c:	1c43      	adds	r3, r0, #1
 801e45e:	eb42 0001 	adc.w	r0, r2, r1
 801e462:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801e466:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e46a:	bd10      	pop	{r4, pc}
 801e46c:	20000070 	.word	0x20000070
 801e470:	080252f8 	.word	0x080252f8
 801e474:	0802530f 	.word	0x0802530f
 801e478:	abcd330e 	.word	0xabcd330e
 801e47c:	e66d1234 	.word	0xe66d1234
 801e480:	0005deec 	.word	0x0005deec
 801e484:	5851f42d 	.word	0x5851f42d
 801e488:	4c957f2d 	.word	0x4c957f2d

0801e48c <_sbrk_r>:
 801e48c:	b538      	push	{r3, r4, r5, lr}
 801e48e:	4d06      	ldr	r5, [pc, #24]	; (801e4a8 <_sbrk_r+0x1c>)
 801e490:	2300      	movs	r3, #0
 801e492:	4604      	mov	r4, r0
 801e494:	4608      	mov	r0, r1
 801e496:	602b      	str	r3, [r5, #0]
 801e498:	f7e2 ff56 	bl	8001348 <_sbrk>
 801e49c:	1c43      	adds	r3, r0, #1
 801e49e:	d102      	bne.n	801e4a6 <_sbrk_r+0x1a>
 801e4a0:	682b      	ldr	r3, [r5, #0]
 801e4a2:	b103      	cbz	r3, 801e4a6 <_sbrk_r+0x1a>
 801e4a4:	6023      	str	r3, [r4, #0]
 801e4a6:	bd38      	pop	{r3, r4, r5, pc}
 801e4a8:	20003110 	.word	0x20003110

0801e4ac <sniprintf>:
 801e4ac:	b40c      	push	{r2, r3}
 801e4ae:	b530      	push	{r4, r5, lr}
 801e4b0:	4b17      	ldr	r3, [pc, #92]	; (801e510 <sniprintf+0x64>)
 801e4b2:	1e0c      	subs	r4, r1, #0
 801e4b4:	681d      	ldr	r5, [r3, #0]
 801e4b6:	b09d      	sub	sp, #116	; 0x74
 801e4b8:	da08      	bge.n	801e4cc <sniprintf+0x20>
 801e4ba:	238b      	movs	r3, #139	; 0x8b
 801e4bc:	602b      	str	r3, [r5, #0]
 801e4be:	f04f 30ff 	mov.w	r0, #4294967295
 801e4c2:	b01d      	add	sp, #116	; 0x74
 801e4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e4c8:	b002      	add	sp, #8
 801e4ca:	4770      	bx	lr
 801e4cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e4d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e4d4:	bf14      	ite	ne
 801e4d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e4da:	4623      	moveq	r3, r4
 801e4dc:	9304      	str	r3, [sp, #16]
 801e4de:	9307      	str	r3, [sp, #28]
 801e4e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e4e4:	9002      	str	r0, [sp, #8]
 801e4e6:	9006      	str	r0, [sp, #24]
 801e4e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e4ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e4ee:	ab21      	add	r3, sp, #132	; 0x84
 801e4f0:	a902      	add	r1, sp, #8
 801e4f2:	4628      	mov	r0, r5
 801e4f4:	9301      	str	r3, [sp, #4]
 801e4f6:	f000 fbd5 	bl	801eca4 <_svfiprintf_r>
 801e4fa:	1c43      	adds	r3, r0, #1
 801e4fc:	bfbc      	itt	lt
 801e4fe:	238b      	movlt	r3, #139	; 0x8b
 801e500:	602b      	strlt	r3, [r5, #0]
 801e502:	2c00      	cmp	r4, #0
 801e504:	d0dd      	beq.n	801e4c2 <sniprintf+0x16>
 801e506:	9b02      	ldr	r3, [sp, #8]
 801e508:	2200      	movs	r2, #0
 801e50a:	701a      	strb	r2, [r3, #0]
 801e50c:	e7d9      	b.n	801e4c2 <sniprintf+0x16>
 801e50e:	bf00      	nop
 801e510:	20000070 	.word	0x20000070

0801e514 <strstr>:
 801e514:	780a      	ldrb	r2, [r1, #0]
 801e516:	b570      	push	{r4, r5, r6, lr}
 801e518:	b96a      	cbnz	r2, 801e536 <strstr+0x22>
 801e51a:	bd70      	pop	{r4, r5, r6, pc}
 801e51c:	429a      	cmp	r2, r3
 801e51e:	d109      	bne.n	801e534 <strstr+0x20>
 801e520:	460c      	mov	r4, r1
 801e522:	4605      	mov	r5, r0
 801e524:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801e528:	2b00      	cmp	r3, #0
 801e52a:	d0f6      	beq.n	801e51a <strstr+0x6>
 801e52c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801e530:	429e      	cmp	r6, r3
 801e532:	d0f7      	beq.n	801e524 <strstr+0x10>
 801e534:	3001      	adds	r0, #1
 801e536:	7803      	ldrb	r3, [r0, #0]
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d1ef      	bne.n	801e51c <strstr+0x8>
 801e53c:	4618      	mov	r0, r3
 801e53e:	e7ec      	b.n	801e51a <strstr+0x6>

0801e540 <_vsniprintf_r>:
 801e540:	b530      	push	{r4, r5, lr}
 801e542:	4614      	mov	r4, r2
 801e544:	2c00      	cmp	r4, #0
 801e546:	b09b      	sub	sp, #108	; 0x6c
 801e548:	4605      	mov	r5, r0
 801e54a:	461a      	mov	r2, r3
 801e54c:	da05      	bge.n	801e55a <_vsniprintf_r+0x1a>
 801e54e:	238b      	movs	r3, #139	; 0x8b
 801e550:	6003      	str	r3, [r0, #0]
 801e552:	f04f 30ff 	mov.w	r0, #4294967295
 801e556:	b01b      	add	sp, #108	; 0x6c
 801e558:	bd30      	pop	{r4, r5, pc}
 801e55a:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e55e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e562:	bf14      	ite	ne
 801e564:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e568:	4623      	moveq	r3, r4
 801e56a:	9302      	str	r3, [sp, #8]
 801e56c:	9305      	str	r3, [sp, #20]
 801e56e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e572:	9100      	str	r1, [sp, #0]
 801e574:	9104      	str	r1, [sp, #16]
 801e576:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e57a:	4669      	mov	r1, sp
 801e57c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e57e:	f000 fb91 	bl	801eca4 <_svfiprintf_r>
 801e582:	1c43      	adds	r3, r0, #1
 801e584:	bfbc      	itt	lt
 801e586:	238b      	movlt	r3, #139	; 0x8b
 801e588:	602b      	strlt	r3, [r5, #0]
 801e58a:	2c00      	cmp	r4, #0
 801e58c:	d0e3      	beq.n	801e556 <_vsniprintf_r+0x16>
 801e58e:	9b00      	ldr	r3, [sp, #0]
 801e590:	2200      	movs	r2, #0
 801e592:	701a      	strb	r2, [r3, #0]
 801e594:	e7df      	b.n	801e556 <_vsniprintf_r+0x16>
	...

0801e598 <vsniprintf>:
 801e598:	b507      	push	{r0, r1, r2, lr}
 801e59a:	9300      	str	r3, [sp, #0]
 801e59c:	4613      	mov	r3, r2
 801e59e:	460a      	mov	r2, r1
 801e5a0:	4601      	mov	r1, r0
 801e5a2:	4803      	ldr	r0, [pc, #12]	; (801e5b0 <vsniprintf+0x18>)
 801e5a4:	6800      	ldr	r0, [r0, #0]
 801e5a6:	f7ff ffcb 	bl	801e540 <_vsniprintf_r>
 801e5aa:	b003      	add	sp, #12
 801e5ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801e5b0:	20000070 	.word	0x20000070

0801e5b4 <__swbuf_r>:
 801e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5b6:	460e      	mov	r6, r1
 801e5b8:	4614      	mov	r4, r2
 801e5ba:	4605      	mov	r5, r0
 801e5bc:	b118      	cbz	r0, 801e5c6 <__swbuf_r+0x12>
 801e5be:	6983      	ldr	r3, [r0, #24]
 801e5c0:	b90b      	cbnz	r3, 801e5c6 <__swbuf_r+0x12>
 801e5c2:	f000 f9ef 	bl	801e9a4 <__sinit>
 801e5c6:	4b21      	ldr	r3, [pc, #132]	; (801e64c <__swbuf_r+0x98>)
 801e5c8:	429c      	cmp	r4, r3
 801e5ca:	d12b      	bne.n	801e624 <__swbuf_r+0x70>
 801e5cc:	686c      	ldr	r4, [r5, #4]
 801e5ce:	69a3      	ldr	r3, [r4, #24]
 801e5d0:	60a3      	str	r3, [r4, #8]
 801e5d2:	89a3      	ldrh	r3, [r4, #12]
 801e5d4:	071a      	lsls	r2, r3, #28
 801e5d6:	d52f      	bpl.n	801e638 <__swbuf_r+0x84>
 801e5d8:	6923      	ldr	r3, [r4, #16]
 801e5da:	b36b      	cbz	r3, 801e638 <__swbuf_r+0x84>
 801e5dc:	6923      	ldr	r3, [r4, #16]
 801e5de:	6820      	ldr	r0, [r4, #0]
 801e5e0:	1ac0      	subs	r0, r0, r3
 801e5e2:	6963      	ldr	r3, [r4, #20]
 801e5e4:	b2f6      	uxtb	r6, r6
 801e5e6:	4283      	cmp	r3, r0
 801e5e8:	4637      	mov	r7, r6
 801e5ea:	dc04      	bgt.n	801e5f6 <__swbuf_r+0x42>
 801e5ec:	4621      	mov	r1, r4
 801e5ee:	4628      	mov	r0, r5
 801e5f0:	f000 f944 	bl	801e87c <_fflush_r>
 801e5f4:	bb30      	cbnz	r0, 801e644 <__swbuf_r+0x90>
 801e5f6:	68a3      	ldr	r3, [r4, #8]
 801e5f8:	3b01      	subs	r3, #1
 801e5fa:	60a3      	str	r3, [r4, #8]
 801e5fc:	6823      	ldr	r3, [r4, #0]
 801e5fe:	1c5a      	adds	r2, r3, #1
 801e600:	6022      	str	r2, [r4, #0]
 801e602:	701e      	strb	r6, [r3, #0]
 801e604:	6963      	ldr	r3, [r4, #20]
 801e606:	3001      	adds	r0, #1
 801e608:	4283      	cmp	r3, r0
 801e60a:	d004      	beq.n	801e616 <__swbuf_r+0x62>
 801e60c:	89a3      	ldrh	r3, [r4, #12]
 801e60e:	07db      	lsls	r3, r3, #31
 801e610:	d506      	bpl.n	801e620 <__swbuf_r+0x6c>
 801e612:	2e0a      	cmp	r6, #10
 801e614:	d104      	bne.n	801e620 <__swbuf_r+0x6c>
 801e616:	4621      	mov	r1, r4
 801e618:	4628      	mov	r0, r5
 801e61a:	f000 f92f 	bl	801e87c <_fflush_r>
 801e61e:	b988      	cbnz	r0, 801e644 <__swbuf_r+0x90>
 801e620:	4638      	mov	r0, r7
 801e622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e624:	4b0a      	ldr	r3, [pc, #40]	; (801e650 <__swbuf_r+0x9c>)
 801e626:	429c      	cmp	r4, r3
 801e628:	d101      	bne.n	801e62e <__swbuf_r+0x7a>
 801e62a:	68ac      	ldr	r4, [r5, #8]
 801e62c:	e7cf      	b.n	801e5ce <__swbuf_r+0x1a>
 801e62e:	4b09      	ldr	r3, [pc, #36]	; (801e654 <__swbuf_r+0xa0>)
 801e630:	429c      	cmp	r4, r3
 801e632:	bf08      	it	eq
 801e634:	68ec      	ldreq	r4, [r5, #12]
 801e636:	e7ca      	b.n	801e5ce <__swbuf_r+0x1a>
 801e638:	4621      	mov	r1, r4
 801e63a:	4628      	mov	r0, r5
 801e63c:	f000 f80c 	bl	801e658 <__swsetup_r>
 801e640:	2800      	cmp	r0, #0
 801e642:	d0cb      	beq.n	801e5dc <__swbuf_r+0x28>
 801e644:	f04f 37ff 	mov.w	r7, #4294967295
 801e648:	e7ea      	b.n	801e620 <__swbuf_r+0x6c>
 801e64a:	bf00      	nop
 801e64c:	080253c8 	.word	0x080253c8
 801e650:	080253e8 	.word	0x080253e8
 801e654:	080253a8 	.word	0x080253a8

0801e658 <__swsetup_r>:
 801e658:	4b32      	ldr	r3, [pc, #200]	; (801e724 <__swsetup_r+0xcc>)
 801e65a:	b570      	push	{r4, r5, r6, lr}
 801e65c:	681d      	ldr	r5, [r3, #0]
 801e65e:	4606      	mov	r6, r0
 801e660:	460c      	mov	r4, r1
 801e662:	b125      	cbz	r5, 801e66e <__swsetup_r+0x16>
 801e664:	69ab      	ldr	r3, [r5, #24]
 801e666:	b913      	cbnz	r3, 801e66e <__swsetup_r+0x16>
 801e668:	4628      	mov	r0, r5
 801e66a:	f000 f99b 	bl	801e9a4 <__sinit>
 801e66e:	4b2e      	ldr	r3, [pc, #184]	; (801e728 <__swsetup_r+0xd0>)
 801e670:	429c      	cmp	r4, r3
 801e672:	d10f      	bne.n	801e694 <__swsetup_r+0x3c>
 801e674:	686c      	ldr	r4, [r5, #4]
 801e676:	89a3      	ldrh	r3, [r4, #12]
 801e678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e67c:	0719      	lsls	r1, r3, #28
 801e67e:	d42c      	bmi.n	801e6da <__swsetup_r+0x82>
 801e680:	06dd      	lsls	r5, r3, #27
 801e682:	d411      	bmi.n	801e6a8 <__swsetup_r+0x50>
 801e684:	2309      	movs	r3, #9
 801e686:	6033      	str	r3, [r6, #0]
 801e688:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e68c:	81a3      	strh	r3, [r4, #12]
 801e68e:	f04f 30ff 	mov.w	r0, #4294967295
 801e692:	e03e      	b.n	801e712 <__swsetup_r+0xba>
 801e694:	4b25      	ldr	r3, [pc, #148]	; (801e72c <__swsetup_r+0xd4>)
 801e696:	429c      	cmp	r4, r3
 801e698:	d101      	bne.n	801e69e <__swsetup_r+0x46>
 801e69a:	68ac      	ldr	r4, [r5, #8]
 801e69c:	e7eb      	b.n	801e676 <__swsetup_r+0x1e>
 801e69e:	4b24      	ldr	r3, [pc, #144]	; (801e730 <__swsetup_r+0xd8>)
 801e6a0:	429c      	cmp	r4, r3
 801e6a2:	bf08      	it	eq
 801e6a4:	68ec      	ldreq	r4, [r5, #12]
 801e6a6:	e7e6      	b.n	801e676 <__swsetup_r+0x1e>
 801e6a8:	0758      	lsls	r0, r3, #29
 801e6aa:	d512      	bpl.n	801e6d2 <__swsetup_r+0x7a>
 801e6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e6ae:	b141      	cbz	r1, 801e6c2 <__swsetup_r+0x6a>
 801e6b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e6b4:	4299      	cmp	r1, r3
 801e6b6:	d002      	beq.n	801e6be <__swsetup_r+0x66>
 801e6b8:	4630      	mov	r0, r6
 801e6ba:	f7ff fd0d 	bl	801e0d8 <_free_r>
 801e6be:	2300      	movs	r3, #0
 801e6c0:	6363      	str	r3, [r4, #52]	; 0x34
 801e6c2:	89a3      	ldrh	r3, [r4, #12]
 801e6c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e6c8:	81a3      	strh	r3, [r4, #12]
 801e6ca:	2300      	movs	r3, #0
 801e6cc:	6063      	str	r3, [r4, #4]
 801e6ce:	6923      	ldr	r3, [r4, #16]
 801e6d0:	6023      	str	r3, [r4, #0]
 801e6d2:	89a3      	ldrh	r3, [r4, #12]
 801e6d4:	f043 0308 	orr.w	r3, r3, #8
 801e6d8:	81a3      	strh	r3, [r4, #12]
 801e6da:	6923      	ldr	r3, [r4, #16]
 801e6dc:	b94b      	cbnz	r3, 801e6f2 <__swsetup_r+0x9a>
 801e6de:	89a3      	ldrh	r3, [r4, #12]
 801e6e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e6e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e6e8:	d003      	beq.n	801e6f2 <__swsetup_r+0x9a>
 801e6ea:	4621      	mov	r1, r4
 801e6ec:	4630      	mov	r0, r6
 801e6ee:	f000 fa31 	bl	801eb54 <__smakebuf_r>
 801e6f2:	89a0      	ldrh	r0, [r4, #12]
 801e6f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e6f8:	f010 0301 	ands.w	r3, r0, #1
 801e6fc:	d00a      	beq.n	801e714 <__swsetup_r+0xbc>
 801e6fe:	2300      	movs	r3, #0
 801e700:	60a3      	str	r3, [r4, #8]
 801e702:	6963      	ldr	r3, [r4, #20]
 801e704:	425b      	negs	r3, r3
 801e706:	61a3      	str	r3, [r4, #24]
 801e708:	6923      	ldr	r3, [r4, #16]
 801e70a:	b943      	cbnz	r3, 801e71e <__swsetup_r+0xc6>
 801e70c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e710:	d1ba      	bne.n	801e688 <__swsetup_r+0x30>
 801e712:	bd70      	pop	{r4, r5, r6, pc}
 801e714:	0781      	lsls	r1, r0, #30
 801e716:	bf58      	it	pl
 801e718:	6963      	ldrpl	r3, [r4, #20]
 801e71a:	60a3      	str	r3, [r4, #8]
 801e71c:	e7f4      	b.n	801e708 <__swsetup_r+0xb0>
 801e71e:	2000      	movs	r0, #0
 801e720:	e7f7      	b.n	801e712 <__swsetup_r+0xba>
 801e722:	bf00      	nop
 801e724:	20000070 	.word	0x20000070
 801e728:	080253c8 	.word	0x080253c8
 801e72c:	080253e8 	.word	0x080253e8
 801e730:	080253a8 	.word	0x080253a8

0801e734 <__assert_func>:
 801e734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e736:	4614      	mov	r4, r2
 801e738:	461a      	mov	r2, r3
 801e73a:	4b09      	ldr	r3, [pc, #36]	; (801e760 <__assert_func+0x2c>)
 801e73c:	681b      	ldr	r3, [r3, #0]
 801e73e:	4605      	mov	r5, r0
 801e740:	68d8      	ldr	r0, [r3, #12]
 801e742:	b14c      	cbz	r4, 801e758 <__assert_func+0x24>
 801e744:	4b07      	ldr	r3, [pc, #28]	; (801e764 <__assert_func+0x30>)
 801e746:	9100      	str	r1, [sp, #0]
 801e748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e74c:	4906      	ldr	r1, [pc, #24]	; (801e768 <__assert_func+0x34>)
 801e74e:	462b      	mov	r3, r5
 801e750:	f000 f9a6 	bl	801eaa0 <fiprintf>
 801e754:	f000 feea 	bl	801f52c <abort>
 801e758:	4b04      	ldr	r3, [pc, #16]	; (801e76c <__assert_func+0x38>)
 801e75a:	461c      	mov	r4, r3
 801e75c:	e7f3      	b.n	801e746 <__assert_func+0x12>
 801e75e:	bf00      	nop
 801e760:	20000070 	.word	0x20000070
 801e764:	0802536a 	.word	0x0802536a
 801e768:	08025377 	.word	0x08025377
 801e76c:	080253a5 	.word	0x080253a5

0801e770 <__sflush_r>:
 801e770:	898a      	ldrh	r2, [r1, #12]
 801e772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e776:	4605      	mov	r5, r0
 801e778:	0710      	lsls	r0, r2, #28
 801e77a:	460c      	mov	r4, r1
 801e77c:	d458      	bmi.n	801e830 <__sflush_r+0xc0>
 801e77e:	684b      	ldr	r3, [r1, #4]
 801e780:	2b00      	cmp	r3, #0
 801e782:	dc05      	bgt.n	801e790 <__sflush_r+0x20>
 801e784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e786:	2b00      	cmp	r3, #0
 801e788:	dc02      	bgt.n	801e790 <__sflush_r+0x20>
 801e78a:	2000      	movs	r0, #0
 801e78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e792:	2e00      	cmp	r6, #0
 801e794:	d0f9      	beq.n	801e78a <__sflush_r+0x1a>
 801e796:	2300      	movs	r3, #0
 801e798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e79c:	682f      	ldr	r7, [r5, #0]
 801e79e:	602b      	str	r3, [r5, #0]
 801e7a0:	d032      	beq.n	801e808 <__sflush_r+0x98>
 801e7a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e7a4:	89a3      	ldrh	r3, [r4, #12]
 801e7a6:	075a      	lsls	r2, r3, #29
 801e7a8:	d505      	bpl.n	801e7b6 <__sflush_r+0x46>
 801e7aa:	6863      	ldr	r3, [r4, #4]
 801e7ac:	1ac0      	subs	r0, r0, r3
 801e7ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e7b0:	b10b      	cbz	r3, 801e7b6 <__sflush_r+0x46>
 801e7b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e7b4:	1ac0      	subs	r0, r0, r3
 801e7b6:	2300      	movs	r3, #0
 801e7b8:	4602      	mov	r2, r0
 801e7ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e7bc:	6a21      	ldr	r1, [r4, #32]
 801e7be:	4628      	mov	r0, r5
 801e7c0:	47b0      	blx	r6
 801e7c2:	1c43      	adds	r3, r0, #1
 801e7c4:	89a3      	ldrh	r3, [r4, #12]
 801e7c6:	d106      	bne.n	801e7d6 <__sflush_r+0x66>
 801e7c8:	6829      	ldr	r1, [r5, #0]
 801e7ca:	291d      	cmp	r1, #29
 801e7cc:	d82c      	bhi.n	801e828 <__sflush_r+0xb8>
 801e7ce:	4a2a      	ldr	r2, [pc, #168]	; (801e878 <__sflush_r+0x108>)
 801e7d0:	40ca      	lsrs	r2, r1
 801e7d2:	07d6      	lsls	r6, r2, #31
 801e7d4:	d528      	bpl.n	801e828 <__sflush_r+0xb8>
 801e7d6:	2200      	movs	r2, #0
 801e7d8:	6062      	str	r2, [r4, #4]
 801e7da:	04d9      	lsls	r1, r3, #19
 801e7dc:	6922      	ldr	r2, [r4, #16]
 801e7de:	6022      	str	r2, [r4, #0]
 801e7e0:	d504      	bpl.n	801e7ec <__sflush_r+0x7c>
 801e7e2:	1c42      	adds	r2, r0, #1
 801e7e4:	d101      	bne.n	801e7ea <__sflush_r+0x7a>
 801e7e6:	682b      	ldr	r3, [r5, #0]
 801e7e8:	b903      	cbnz	r3, 801e7ec <__sflush_r+0x7c>
 801e7ea:	6560      	str	r0, [r4, #84]	; 0x54
 801e7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e7ee:	602f      	str	r7, [r5, #0]
 801e7f0:	2900      	cmp	r1, #0
 801e7f2:	d0ca      	beq.n	801e78a <__sflush_r+0x1a>
 801e7f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e7f8:	4299      	cmp	r1, r3
 801e7fa:	d002      	beq.n	801e802 <__sflush_r+0x92>
 801e7fc:	4628      	mov	r0, r5
 801e7fe:	f7ff fc6b 	bl	801e0d8 <_free_r>
 801e802:	2000      	movs	r0, #0
 801e804:	6360      	str	r0, [r4, #52]	; 0x34
 801e806:	e7c1      	b.n	801e78c <__sflush_r+0x1c>
 801e808:	6a21      	ldr	r1, [r4, #32]
 801e80a:	2301      	movs	r3, #1
 801e80c:	4628      	mov	r0, r5
 801e80e:	47b0      	blx	r6
 801e810:	1c41      	adds	r1, r0, #1
 801e812:	d1c7      	bne.n	801e7a4 <__sflush_r+0x34>
 801e814:	682b      	ldr	r3, [r5, #0]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d0c4      	beq.n	801e7a4 <__sflush_r+0x34>
 801e81a:	2b1d      	cmp	r3, #29
 801e81c:	d001      	beq.n	801e822 <__sflush_r+0xb2>
 801e81e:	2b16      	cmp	r3, #22
 801e820:	d101      	bne.n	801e826 <__sflush_r+0xb6>
 801e822:	602f      	str	r7, [r5, #0]
 801e824:	e7b1      	b.n	801e78a <__sflush_r+0x1a>
 801e826:	89a3      	ldrh	r3, [r4, #12]
 801e828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e82c:	81a3      	strh	r3, [r4, #12]
 801e82e:	e7ad      	b.n	801e78c <__sflush_r+0x1c>
 801e830:	690f      	ldr	r7, [r1, #16]
 801e832:	2f00      	cmp	r7, #0
 801e834:	d0a9      	beq.n	801e78a <__sflush_r+0x1a>
 801e836:	0793      	lsls	r3, r2, #30
 801e838:	680e      	ldr	r6, [r1, #0]
 801e83a:	bf08      	it	eq
 801e83c:	694b      	ldreq	r3, [r1, #20]
 801e83e:	600f      	str	r7, [r1, #0]
 801e840:	bf18      	it	ne
 801e842:	2300      	movne	r3, #0
 801e844:	eba6 0807 	sub.w	r8, r6, r7
 801e848:	608b      	str	r3, [r1, #8]
 801e84a:	f1b8 0f00 	cmp.w	r8, #0
 801e84e:	dd9c      	ble.n	801e78a <__sflush_r+0x1a>
 801e850:	6a21      	ldr	r1, [r4, #32]
 801e852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e854:	4643      	mov	r3, r8
 801e856:	463a      	mov	r2, r7
 801e858:	4628      	mov	r0, r5
 801e85a:	47b0      	blx	r6
 801e85c:	2800      	cmp	r0, #0
 801e85e:	dc06      	bgt.n	801e86e <__sflush_r+0xfe>
 801e860:	89a3      	ldrh	r3, [r4, #12]
 801e862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e866:	81a3      	strh	r3, [r4, #12]
 801e868:	f04f 30ff 	mov.w	r0, #4294967295
 801e86c:	e78e      	b.n	801e78c <__sflush_r+0x1c>
 801e86e:	4407      	add	r7, r0
 801e870:	eba8 0800 	sub.w	r8, r8, r0
 801e874:	e7e9      	b.n	801e84a <__sflush_r+0xda>
 801e876:	bf00      	nop
 801e878:	20400001 	.word	0x20400001

0801e87c <_fflush_r>:
 801e87c:	b538      	push	{r3, r4, r5, lr}
 801e87e:	690b      	ldr	r3, [r1, #16]
 801e880:	4605      	mov	r5, r0
 801e882:	460c      	mov	r4, r1
 801e884:	b913      	cbnz	r3, 801e88c <_fflush_r+0x10>
 801e886:	2500      	movs	r5, #0
 801e888:	4628      	mov	r0, r5
 801e88a:	bd38      	pop	{r3, r4, r5, pc}
 801e88c:	b118      	cbz	r0, 801e896 <_fflush_r+0x1a>
 801e88e:	6983      	ldr	r3, [r0, #24]
 801e890:	b90b      	cbnz	r3, 801e896 <_fflush_r+0x1a>
 801e892:	f000 f887 	bl	801e9a4 <__sinit>
 801e896:	4b14      	ldr	r3, [pc, #80]	; (801e8e8 <_fflush_r+0x6c>)
 801e898:	429c      	cmp	r4, r3
 801e89a:	d11b      	bne.n	801e8d4 <_fflush_r+0x58>
 801e89c:	686c      	ldr	r4, [r5, #4]
 801e89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d0ef      	beq.n	801e886 <_fflush_r+0xa>
 801e8a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e8a8:	07d0      	lsls	r0, r2, #31
 801e8aa:	d404      	bmi.n	801e8b6 <_fflush_r+0x3a>
 801e8ac:	0599      	lsls	r1, r3, #22
 801e8ae:	d402      	bmi.n	801e8b6 <_fflush_r+0x3a>
 801e8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e8b2:	f000 f927 	bl	801eb04 <__retarget_lock_acquire_recursive>
 801e8b6:	4628      	mov	r0, r5
 801e8b8:	4621      	mov	r1, r4
 801e8ba:	f7ff ff59 	bl	801e770 <__sflush_r>
 801e8be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e8c0:	07da      	lsls	r2, r3, #31
 801e8c2:	4605      	mov	r5, r0
 801e8c4:	d4e0      	bmi.n	801e888 <_fflush_r+0xc>
 801e8c6:	89a3      	ldrh	r3, [r4, #12]
 801e8c8:	059b      	lsls	r3, r3, #22
 801e8ca:	d4dd      	bmi.n	801e888 <_fflush_r+0xc>
 801e8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e8ce:	f000 f91a 	bl	801eb06 <__retarget_lock_release_recursive>
 801e8d2:	e7d9      	b.n	801e888 <_fflush_r+0xc>
 801e8d4:	4b05      	ldr	r3, [pc, #20]	; (801e8ec <_fflush_r+0x70>)
 801e8d6:	429c      	cmp	r4, r3
 801e8d8:	d101      	bne.n	801e8de <_fflush_r+0x62>
 801e8da:	68ac      	ldr	r4, [r5, #8]
 801e8dc:	e7df      	b.n	801e89e <_fflush_r+0x22>
 801e8de:	4b04      	ldr	r3, [pc, #16]	; (801e8f0 <_fflush_r+0x74>)
 801e8e0:	429c      	cmp	r4, r3
 801e8e2:	bf08      	it	eq
 801e8e4:	68ec      	ldreq	r4, [r5, #12]
 801e8e6:	e7da      	b.n	801e89e <_fflush_r+0x22>
 801e8e8:	080253c8 	.word	0x080253c8
 801e8ec:	080253e8 	.word	0x080253e8
 801e8f0:	080253a8 	.word	0x080253a8

0801e8f4 <std>:
 801e8f4:	2300      	movs	r3, #0
 801e8f6:	b510      	push	{r4, lr}
 801e8f8:	4604      	mov	r4, r0
 801e8fa:	e9c0 3300 	strd	r3, r3, [r0]
 801e8fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e902:	6083      	str	r3, [r0, #8]
 801e904:	8181      	strh	r1, [r0, #12]
 801e906:	6643      	str	r3, [r0, #100]	; 0x64
 801e908:	81c2      	strh	r2, [r0, #14]
 801e90a:	6183      	str	r3, [r0, #24]
 801e90c:	4619      	mov	r1, r3
 801e90e:	2208      	movs	r2, #8
 801e910:	305c      	adds	r0, #92	; 0x5c
 801e912:	f7ff fbc3 	bl	801e09c <memset>
 801e916:	4b05      	ldr	r3, [pc, #20]	; (801e92c <std+0x38>)
 801e918:	6263      	str	r3, [r4, #36]	; 0x24
 801e91a:	4b05      	ldr	r3, [pc, #20]	; (801e930 <std+0x3c>)
 801e91c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e91e:	4b05      	ldr	r3, [pc, #20]	; (801e934 <std+0x40>)
 801e920:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e922:	4b05      	ldr	r3, [pc, #20]	; (801e938 <std+0x44>)
 801e924:	6224      	str	r4, [r4, #32]
 801e926:	6323      	str	r3, [r4, #48]	; 0x30
 801e928:	bd10      	pop	{r4, pc}
 801e92a:	bf00      	nop
 801e92c:	0801f481 	.word	0x0801f481
 801e930:	0801f4a3 	.word	0x0801f4a3
 801e934:	0801f4db 	.word	0x0801f4db
 801e938:	0801f4ff 	.word	0x0801f4ff

0801e93c <_cleanup_r>:
 801e93c:	4901      	ldr	r1, [pc, #4]	; (801e944 <_cleanup_r+0x8>)
 801e93e:	f000 b8c1 	b.w	801eac4 <_fwalk_reent>
 801e942:	bf00      	nop
 801e944:	0801e87d 	.word	0x0801e87d

0801e948 <__sfmoreglue>:
 801e948:	b570      	push	{r4, r5, r6, lr}
 801e94a:	2268      	movs	r2, #104	; 0x68
 801e94c:	1e4d      	subs	r5, r1, #1
 801e94e:	4355      	muls	r5, r2
 801e950:	460e      	mov	r6, r1
 801e952:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e956:	f7ff fc2b 	bl	801e1b0 <_malloc_r>
 801e95a:	4604      	mov	r4, r0
 801e95c:	b140      	cbz	r0, 801e970 <__sfmoreglue+0x28>
 801e95e:	2100      	movs	r1, #0
 801e960:	e9c0 1600 	strd	r1, r6, [r0]
 801e964:	300c      	adds	r0, #12
 801e966:	60a0      	str	r0, [r4, #8]
 801e968:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e96c:	f7ff fb96 	bl	801e09c <memset>
 801e970:	4620      	mov	r0, r4
 801e972:	bd70      	pop	{r4, r5, r6, pc}

0801e974 <__sfp_lock_acquire>:
 801e974:	4801      	ldr	r0, [pc, #4]	; (801e97c <__sfp_lock_acquire+0x8>)
 801e976:	f000 b8c5 	b.w	801eb04 <__retarget_lock_acquire_recursive>
 801e97a:	bf00      	nop
 801e97c:	2000310d 	.word	0x2000310d

0801e980 <__sfp_lock_release>:
 801e980:	4801      	ldr	r0, [pc, #4]	; (801e988 <__sfp_lock_release+0x8>)
 801e982:	f000 b8c0 	b.w	801eb06 <__retarget_lock_release_recursive>
 801e986:	bf00      	nop
 801e988:	2000310d 	.word	0x2000310d

0801e98c <__sinit_lock_acquire>:
 801e98c:	4801      	ldr	r0, [pc, #4]	; (801e994 <__sinit_lock_acquire+0x8>)
 801e98e:	f000 b8b9 	b.w	801eb04 <__retarget_lock_acquire_recursive>
 801e992:	bf00      	nop
 801e994:	2000310e 	.word	0x2000310e

0801e998 <__sinit_lock_release>:
 801e998:	4801      	ldr	r0, [pc, #4]	; (801e9a0 <__sinit_lock_release+0x8>)
 801e99a:	f000 b8b4 	b.w	801eb06 <__retarget_lock_release_recursive>
 801e99e:	bf00      	nop
 801e9a0:	2000310e 	.word	0x2000310e

0801e9a4 <__sinit>:
 801e9a4:	b510      	push	{r4, lr}
 801e9a6:	4604      	mov	r4, r0
 801e9a8:	f7ff fff0 	bl	801e98c <__sinit_lock_acquire>
 801e9ac:	69a3      	ldr	r3, [r4, #24]
 801e9ae:	b11b      	cbz	r3, 801e9b8 <__sinit+0x14>
 801e9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9b4:	f7ff bff0 	b.w	801e998 <__sinit_lock_release>
 801e9b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e9bc:	6523      	str	r3, [r4, #80]	; 0x50
 801e9be:	4b13      	ldr	r3, [pc, #76]	; (801ea0c <__sinit+0x68>)
 801e9c0:	4a13      	ldr	r2, [pc, #76]	; (801ea10 <__sinit+0x6c>)
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	62a2      	str	r2, [r4, #40]	; 0x28
 801e9c6:	42a3      	cmp	r3, r4
 801e9c8:	bf04      	itt	eq
 801e9ca:	2301      	moveq	r3, #1
 801e9cc:	61a3      	streq	r3, [r4, #24]
 801e9ce:	4620      	mov	r0, r4
 801e9d0:	f000 f820 	bl	801ea14 <__sfp>
 801e9d4:	6060      	str	r0, [r4, #4]
 801e9d6:	4620      	mov	r0, r4
 801e9d8:	f000 f81c 	bl	801ea14 <__sfp>
 801e9dc:	60a0      	str	r0, [r4, #8]
 801e9de:	4620      	mov	r0, r4
 801e9e0:	f000 f818 	bl	801ea14 <__sfp>
 801e9e4:	2200      	movs	r2, #0
 801e9e6:	60e0      	str	r0, [r4, #12]
 801e9e8:	2104      	movs	r1, #4
 801e9ea:	6860      	ldr	r0, [r4, #4]
 801e9ec:	f7ff ff82 	bl	801e8f4 <std>
 801e9f0:	68a0      	ldr	r0, [r4, #8]
 801e9f2:	2201      	movs	r2, #1
 801e9f4:	2109      	movs	r1, #9
 801e9f6:	f7ff ff7d 	bl	801e8f4 <std>
 801e9fa:	68e0      	ldr	r0, [r4, #12]
 801e9fc:	2202      	movs	r2, #2
 801e9fe:	2112      	movs	r1, #18
 801ea00:	f7ff ff78 	bl	801e8f4 <std>
 801ea04:	2301      	movs	r3, #1
 801ea06:	61a3      	str	r3, [r4, #24]
 801ea08:	e7d2      	b.n	801e9b0 <__sinit+0xc>
 801ea0a:	bf00      	nop
 801ea0c:	080252f4 	.word	0x080252f4
 801ea10:	0801e93d 	.word	0x0801e93d

0801ea14 <__sfp>:
 801ea14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea16:	4607      	mov	r7, r0
 801ea18:	f7ff ffac 	bl	801e974 <__sfp_lock_acquire>
 801ea1c:	4b1e      	ldr	r3, [pc, #120]	; (801ea98 <__sfp+0x84>)
 801ea1e:	681e      	ldr	r6, [r3, #0]
 801ea20:	69b3      	ldr	r3, [r6, #24]
 801ea22:	b913      	cbnz	r3, 801ea2a <__sfp+0x16>
 801ea24:	4630      	mov	r0, r6
 801ea26:	f7ff ffbd 	bl	801e9a4 <__sinit>
 801ea2a:	3648      	adds	r6, #72	; 0x48
 801ea2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ea30:	3b01      	subs	r3, #1
 801ea32:	d503      	bpl.n	801ea3c <__sfp+0x28>
 801ea34:	6833      	ldr	r3, [r6, #0]
 801ea36:	b30b      	cbz	r3, 801ea7c <__sfp+0x68>
 801ea38:	6836      	ldr	r6, [r6, #0]
 801ea3a:	e7f7      	b.n	801ea2c <__sfp+0x18>
 801ea3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ea40:	b9d5      	cbnz	r5, 801ea78 <__sfp+0x64>
 801ea42:	4b16      	ldr	r3, [pc, #88]	; (801ea9c <__sfp+0x88>)
 801ea44:	60e3      	str	r3, [r4, #12]
 801ea46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ea4a:	6665      	str	r5, [r4, #100]	; 0x64
 801ea4c:	f000 f859 	bl	801eb02 <__retarget_lock_init_recursive>
 801ea50:	f7ff ff96 	bl	801e980 <__sfp_lock_release>
 801ea54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ea58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ea5c:	6025      	str	r5, [r4, #0]
 801ea5e:	61a5      	str	r5, [r4, #24]
 801ea60:	2208      	movs	r2, #8
 801ea62:	4629      	mov	r1, r5
 801ea64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ea68:	f7ff fb18 	bl	801e09c <memset>
 801ea6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ea70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ea74:	4620      	mov	r0, r4
 801ea76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea78:	3468      	adds	r4, #104	; 0x68
 801ea7a:	e7d9      	b.n	801ea30 <__sfp+0x1c>
 801ea7c:	2104      	movs	r1, #4
 801ea7e:	4638      	mov	r0, r7
 801ea80:	f7ff ff62 	bl	801e948 <__sfmoreglue>
 801ea84:	4604      	mov	r4, r0
 801ea86:	6030      	str	r0, [r6, #0]
 801ea88:	2800      	cmp	r0, #0
 801ea8a:	d1d5      	bne.n	801ea38 <__sfp+0x24>
 801ea8c:	f7ff ff78 	bl	801e980 <__sfp_lock_release>
 801ea90:	230c      	movs	r3, #12
 801ea92:	603b      	str	r3, [r7, #0]
 801ea94:	e7ee      	b.n	801ea74 <__sfp+0x60>
 801ea96:	bf00      	nop
 801ea98:	080252f4 	.word	0x080252f4
 801ea9c:	ffff0001 	.word	0xffff0001

0801eaa0 <fiprintf>:
 801eaa0:	b40e      	push	{r1, r2, r3}
 801eaa2:	b503      	push	{r0, r1, lr}
 801eaa4:	4601      	mov	r1, r0
 801eaa6:	ab03      	add	r3, sp, #12
 801eaa8:	4805      	ldr	r0, [pc, #20]	; (801eac0 <fiprintf+0x20>)
 801eaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801eaae:	6800      	ldr	r0, [r0, #0]
 801eab0:	9301      	str	r3, [sp, #4]
 801eab2:	f000 fa21 	bl	801eef8 <_vfiprintf_r>
 801eab6:	b002      	add	sp, #8
 801eab8:	f85d eb04 	ldr.w	lr, [sp], #4
 801eabc:	b003      	add	sp, #12
 801eabe:	4770      	bx	lr
 801eac0:	20000070 	.word	0x20000070

0801eac4 <_fwalk_reent>:
 801eac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eac8:	4606      	mov	r6, r0
 801eaca:	4688      	mov	r8, r1
 801eacc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ead0:	2700      	movs	r7, #0
 801ead2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ead6:	f1b9 0901 	subs.w	r9, r9, #1
 801eada:	d505      	bpl.n	801eae8 <_fwalk_reent+0x24>
 801eadc:	6824      	ldr	r4, [r4, #0]
 801eade:	2c00      	cmp	r4, #0
 801eae0:	d1f7      	bne.n	801ead2 <_fwalk_reent+0xe>
 801eae2:	4638      	mov	r0, r7
 801eae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eae8:	89ab      	ldrh	r3, [r5, #12]
 801eaea:	2b01      	cmp	r3, #1
 801eaec:	d907      	bls.n	801eafe <_fwalk_reent+0x3a>
 801eaee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801eaf2:	3301      	adds	r3, #1
 801eaf4:	d003      	beq.n	801eafe <_fwalk_reent+0x3a>
 801eaf6:	4629      	mov	r1, r5
 801eaf8:	4630      	mov	r0, r6
 801eafa:	47c0      	blx	r8
 801eafc:	4307      	orrs	r7, r0
 801eafe:	3568      	adds	r5, #104	; 0x68
 801eb00:	e7e9      	b.n	801ead6 <_fwalk_reent+0x12>

0801eb02 <__retarget_lock_init_recursive>:
 801eb02:	4770      	bx	lr

0801eb04 <__retarget_lock_acquire_recursive>:
 801eb04:	4770      	bx	lr

0801eb06 <__retarget_lock_release_recursive>:
 801eb06:	4770      	bx	lr

0801eb08 <__swhatbuf_r>:
 801eb08:	b570      	push	{r4, r5, r6, lr}
 801eb0a:	460e      	mov	r6, r1
 801eb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb10:	2900      	cmp	r1, #0
 801eb12:	b096      	sub	sp, #88	; 0x58
 801eb14:	4614      	mov	r4, r2
 801eb16:	461d      	mov	r5, r3
 801eb18:	da08      	bge.n	801eb2c <__swhatbuf_r+0x24>
 801eb1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801eb1e:	2200      	movs	r2, #0
 801eb20:	602a      	str	r2, [r5, #0]
 801eb22:	061a      	lsls	r2, r3, #24
 801eb24:	d410      	bmi.n	801eb48 <__swhatbuf_r+0x40>
 801eb26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801eb2a:	e00e      	b.n	801eb4a <__swhatbuf_r+0x42>
 801eb2c:	466a      	mov	r2, sp
 801eb2e:	f000 fd15 	bl	801f55c <_fstat_r>
 801eb32:	2800      	cmp	r0, #0
 801eb34:	dbf1      	blt.n	801eb1a <__swhatbuf_r+0x12>
 801eb36:	9a01      	ldr	r2, [sp, #4]
 801eb38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801eb3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801eb40:	425a      	negs	r2, r3
 801eb42:	415a      	adcs	r2, r3
 801eb44:	602a      	str	r2, [r5, #0]
 801eb46:	e7ee      	b.n	801eb26 <__swhatbuf_r+0x1e>
 801eb48:	2340      	movs	r3, #64	; 0x40
 801eb4a:	2000      	movs	r0, #0
 801eb4c:	6023      	str	r3, [r4, #0]
 801eb4e:	b016      	add	sp, #88	; 0x58
 801eb50:	bd70      	pop	{r4, r5, r6, pc}
	...

0801eb54 <__smakebuf_r>:
 801eb54:	898b      	ldrh	r3, [r1, #12]
 801eb56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eb58:	079d      	lsls	r5, r3, #30
 801eb5a:	4606      	mov	r6, r0
 801eb5c:	460c      	mov	r4, r1
 801eb5e:	d507      	bpl.n	801eb70 <__smakebuf_r+0x1c>
 801eb60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eb64:	6023      	str	r3, [r4, #0]
 801eb66:	6123      	str	r3, [r4, #16]
 801eb68:	2301      	movs	r3, #1
 801eb6a:	6163      	str	r3, [r4, #20]
 801eb6c:	b002      	add	sp, #8
 801eb6e:	bd70      	pop	{r4, r5, r6, pc}
 801eb70:	ab01      	add	r3, sp, #4
 801eb72:	466a      	mov	r2, sp
 801eb74:	f7ff ffc8 	bl	801eb08 <__swhatbuf_r>
 801eb78:	9900      	ldr	r1, [sp, #0]
 801eb7a:	4605      	mov	r5, r0
 801eb7c:	4630      	mov	r0, r6
 801eb7e:	f7ff fb17 	bl	801e1b0 <_malloc_r>
 801eb82:	b948      	cbnz	r0, 801eb98 <__smakebuf_r+0x44>
 801eb84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb88:	059a      	lsls	r2, r3, #22
 801eb8a:	d4ef      	bmi.n	801eb6c <__smakebuf_r+0x18>
 801eb8c:	f023 0303 	bic.w	r3, r3, #3
 801eb90:	f043 0302 	orr.w	r3, r3, #2
 801eb94:	81a3      	strh	r3, [r4, #12]
 801eb96:	e7e3      	b.n	801eb60 <__smakebuf_r+0xc>
 801eb98:	4b0d      	ldr	r3, [pc, #52]	; (801ebd0 <__smakebuf_r+0x7c>)
 801eb9a:	62b3      	str	r3, [r6, #40]	; 0x28
 801eb9c:	89a3      	ldrh	r3, [r4, #12]
 801eb9e:	6020      	str	r0, [r4, #0]
 801eba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eba4:	81a3      	strh	r3, [r4, #12]
 801eba6:	9b00      	ldr	r3, [sp, #0]
 801eba8:	6163      	str	r3, [r4, #20]
 801ebaa:	9b01      	ldr	r3, [sp, #4]
 801ebac:	6120      	str	r0, [r4, #16]
 801ebae:	b15b      	cbz	r3, 801ebc8 <__smakebuf_r+0x74>
 801ebb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebb4:	4630      	mov	r0, r6
 801ebb6:	f000 fce3 	bl	801f580 <_isatty_r>
 801ebba:	b128      	cbz	r0, 801ebc8 <__smakebuf_r+0x74>
 801ebbc:	89a3      	ldrh	r3, [r4, #12]
 801ebbe:	f023 0303 	bic.w	r3, r3, #3
 801ebc2:	f043 0301 	orr.w	r3, r3, #1
 801ebc6:	81a3      	strh	r3, [r4, #12]
 801ebc8:	89a0      	ldrh	r0, [r4, #12]
 801ebca:	4305      	orrs	r5, r0
 801ebcc:	81a5      	strh	r5, [r4, #12]
 801ebce:	e7cd      	b.n	801eb6c <__smakebuf_r+0x18>
 801ebd0:	0801e93d 	.word	0x0801e93d

0801ebd4 <__malloc_lock>:
 801ebd4:	4801      	ldr	r0, [pc, #4]	; (801ebdc <__malloc_lock+0x8>)
 801ebd6:	f7ff bf95 	b.w	801eb04 <__retarget_lock_acquire_recursive>
 801ebda:	bf00      	nop
 801ebdc:	2000310c 	.word	0x2000310c

0801ebe0 <__malloc_unlock>:
 801ebe0:	4801      	ldr	r0, [pc, #4]	; (801ebe8 <__malloc_unlock+0x8>)
 801ebe2:	f7ff bf90 	b.w	801eb06 <__retarget_lock_release_recursive>
 801ebe6:	bf00      	nop
 801ebe8:	2000310c 	.word	0x2000310c

0801ebec <__ssputs_r>:
 801ebec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ebf0:	688e      	ldr	r6, [r1, #8]
 801ebf2:	429e      	cmp	r6, r3
 801ebf4:	4682      	mov	sl, r0
 801ebf6:	460c      	mov	r4, r1
 801ebf8:	4690      	mov	r8, r2
 801ebfa:	461f      	mov	r7, r3
 801ebfc:	d838      	bhi.n	801ec70 <__ssputs_r+0x84>
 801ebfe:	898a      	ldrh	r2, [r1, #12]
 801ec00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ec04:	d032      	beq.n	801ec6c <__ssputs_r+0x80>
 801ec06:	6825      	ldr	r5, [r4, #0]
 801ec08:	6909      	ldr	r1, [r1, #16]
 801ec0a:	eba5 0901 	sub.w	r9, r5, r1
 801ec0e:	6965      	ldr	r5, [r4, #20]
 801ec10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ec18:	3301      	adds	r3, #1
 801ec1a:	444b      	add	r3, r9
 801ec1c:	106d      	asrs	r5, r5, #1
 801ec1e:	429d      	cmp	r5, r3
 801ec20:	bf38      	it	cc
 801ec22:	461d      	movcc	r5, r3
 801ec24:	0553      	lsls	r3, r2, #21
 801ec26:	d531      	bpl.n	801ec8c <__ssputs_r+0xa0>
 801ec28:	4629      	mov	r1, r5
 801ec2a:	f7ff fac1 	bl	801e1b0 <_malloc_r>
 801ec2e:	4606      	mov	r6, r0
 801ec30:	b950      	cbnz	r0, 801ec48 <__ssputs_r+0x5c>
 801ec32:	230c      	movs	r3, #12
 801ec34:	f8ca 3000 	str.w	r3, [sl]
 801ec38:	89a3      	ldrh	r3, [r4, #12]
 801ec3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec3e:	81a3      	strh	r3, [r4, #12]
 801ec40:	f04f 30ff 	mov.w	r0, #4294967295
 801ec44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec48:	6921      	ldr	r1, [r4, #16]
 801ec4a:	464a      	mov	r2, r9
 801ec4c:	f7ff f9fe 	bl	801e04c <memcpy>
 801ec50:	89a3      	ldrh	r3, [r4, #12]
 801ec52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ec56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec5a:	81a3      	strh	r3, [r4, #12]
 801ec5c:	6126      	str	r6, [r4, #16]
 801ec5e:	6165      	str	r5, [r4, #20]
 801ec60:	444e      	add	r6, r9
 801ec62:	eba5 0509 	sub.w	r5, r5, r9
 801ec66:	6026      	str	r6, [r4, #0]
 801ec68:	60a5      	str	r5, [r4, #8]
 801ec6a:	463e      	mov	r6, r7
 801ec6c:	42be      	cmp	r6, r7
 801ec6e:	d900      	bls.n	801ec72 <__ssputs_r+0x86>
 801ec70:	463e      	mov	r6, r7
 801ec72:	6820      	ldr	r0, [r4, #0]
 801ec74:	4632      	mov	r2, r6
 801ec76:	4641      	mov	r1, r8
 801ec78:	f7ff f9f6 	bl	801e068 <memmove>
 801ec7c:	68a3      	ldr	r3, [r4, #8]
 801ec7e:	1b9b      	subs	r3, r3, r6
 801ec80:	60a3      	str	r3, [r4, #8]
 801ec82:	6823      	ldr	r3, [r4, #0]
 801ec84:	4433      	add	r3, r6
 801ec86:	6023      	str	r3, [r4, #0]
 801ec88:	2000      	movs	r0, #0
 801ec8a:	e7db      	b.n	801ec44 <__ssputs_r+0x58>
 801ec8c:	462a      	mov	r2, r5
 801ec8e:	f000 fc99 	bl	801f5c4 <_realloc_r>
 801ec92:	4606      	mov	r6, r0
 801ec94:	2800      	cmp	r0, #0
 801ec96:	d1e1      	bne.n	801ec5c <__ssputs_r+0x70>
 801ec98:	6921      	ldr	r1, [r4, #16]
 801ec9a:	4650      	mov	r0, sl
 801ec9c:	f7ff fa1c 	bl	801e0d8 <_free_r>
 801eca0:	e7c7      	b.n	801ec32 <__ssputs_r+0x46>
	...

0801eca4 <_svfiprintf_r>:
 801eca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eca8:	4698      	mov	r8, r3
 801ecaa:	898b      	ldrh	r3, [r1, #12]
 801ecac:	061b      	lsls	r3, r3, #24
 801ecae:	b09d      	sub	sp, #116	; 0x74
 801ecb0:	4607      	mov	r7, r0
 801ecb2:	460d      	mov	r5, r1
 801ecb4:	4614      	mov	r4, r2
 801ecb6:	d50e      	bpl.n	801ecd6 <_svfiprintf_r+0x32>
 801ecb8:	690b      	ldr	r3, [r1, #16]
 801ecba:	b963      	cbnz	r3, 801ecd6 <_svfiprintf_r+0x32>
 801ecbc:	2140      	movs	r1, #64	; 0x40
 801ecbe:	f7ff fa77 	bl	801e1b0 <_malloc_r>
 801ecc2:	6028      	str	r0, [r5, #0]
 801ecc4:	6128      	str	r0, [r5, #16]
 801ecc6:	b920      	cbnz	r0, 801ecd2 <_svfiprintf_r+0x2e>
 801ecc8:	230c      	movs	r3, #12
 801ecca:	603b      	str	r3, [r7, #0]
 801eccc:	f04f 30ff 	mov.w	r0, #4294967295
 801ecd0:	e0d1      	b.n	801ee76 <_svfiprintf_r+0x1d2>
 801ecd2:	2340      	movs	r3, #64	; 0x40
 801ecd4:	616b      	str	r3, [r5, #20]
 801ecd6:	2300      	movs	r3, #0
 801ecd8:	9309      	str	r3, [sp, #36]	; 0x24
 801ecda:	2320      	movs	r3, #32
 801ecdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ece0:	f8cd 800c 	str.w	r8, [sp, #12]
 801ece4:	2330      	movs	r3, #48	; 0x30
 801ece6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ee90 <_svfiprintf_r+0x1ec>
 801ecea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ecee:	f04f 0901 	mov.w	r9, #1
 801ecf2:	4623      	mov	r3, r4
 801ecf4:	469a      	mov	sl, r3
 801ecf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ecfa:	b10a      	cbz	r2, 801ed00 <_svfiprintf_r+0x5c>
 801ecfc:	2a25      	cmp	r2, #37	; 0x25
 801ecfe:	d1f9      	bne.n	801ecf4 <_svfiprintf_r+0x50>
 801ed00:	ebba 0b04 	subs.w	fp, sl, r4
 801ed04:	d00b      	beq.n	801ed1e <_svfiprintf_r+0x7a>
 801ed06:	465b      	mov	r3, fp
 801ed08:	4622      	mov	r2, r4
 801ed0a:	4629      	mov	r1, r5
 801ed0c:	4638      	mov	r0, r7
 801ed0e:	f7ff ff6d 	bl	801ebec <__ssputs_r>
 801ed12:	3001      	adds	r0, #1
 801ed14:	f000 80aa 	beq.w	801ee6c <_svfiprintf_r+0x1c8>
 801ed18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ed1a:	445a      	add	r2, fp
 801ed1c:	9209      	str	r2, [sp, #36]	; 0x24
 801ed1e:	f89a 3000 	ldrb.w	r3, [sl]
 801ed22:	2b00      	cmp	r3, #0
 801ed24:	f000 80a2 	beq.w	801ee6c <_svfiprintf_r+0x1c8>
 801ed28:	2300      	movs	r3, #0
 801ed2a:	f04f 32ff 	mov.w	r2, #4294967295
 801ed2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ed32:	f10a 0a01 	add.w	sl, sl, #1
 801ed36:	9304      	str	r3, [sp, #16]
 801ed38:	9307      	str	r3, [sp, #28]
 801ed3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ed3e:	931a      	str	r3, [sp, #104]	; 0x68
 801ed40:	4654      	mov	r4, sl
 801ed42:	2205      	movs	r2, #5
 801ed44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed48:	4851      	ldr	r0, [pc, #324]	; (801ee90 <_svfiprintf_r+0x1ec>)
 801ed4a:	f7e1 fa49 	bl	80001e0 <memchr>
 801ed4e:	9a04      	ldr	r2, [sp, #16]
 801ed50:	b9d8      	cbnz	r0, 801ed8a <_svfiprintf_r+0xe6>
 801ed52:	06d0      	lsls	r0, r2, #27
 801ed54:	bf44      	itt	mi
 801ed56:	2320      	movmi	r3, #32
 801ed58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ed5c:	0711      	lsls	r1, r2, #28
 801ed5e:	bf44      	itt	mi
 801ed60:	232b      	movmi	r3, #43	; 0x2b
 801ed62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ed66:	f89a 3000 	ldrb.w	r3, [sl]
 801ed6a:	2b2a      	cmp	r3, #42	; 0x2a
 801ed6c:	d015      	beq.n	801ed9a <_svfiprintf_r+0xf6>
 801ed6e:	9a07      	ldr	r2, [sp, #28]
 801ed70:	4654      	mov	r4, sl
 801ed72:	2000      	movs	r0, #0
 801ed74:	f04f 0c0a 	mov.w	ip, #10
 801ed78:	4621      	mov	r1, r4
 801ed7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ed7e:	3b30      	subs	r3, #48	; 0x30
 801ed80:	2b09      	cmp	r3, #9
 801ed82:	d94e      	bls.n	801ee22 <_svfiprintf_r+0x17e>
 801ed84:	b1b0      	cbz	r0, 801edb4 <_svfiprintf_r+0x110>
 801ed86:	9207      	str	r2, [sp, #28]
 801ed88:	e014      	b.n	801edb4 <_svfiprintf_r+0x110>
 801ed8a:	eba0 0308 	sub.w	r3, r0, r8
 801ed8e:	fa09 f303 	lsl.w	r3, r9, r3
 801ed92:	4313      	orrs	r3, r2
 801ed94:	9304      	str	r3, [sp, #16]
 801ed96:	46a2      	mov	sl, r4
 801ed98:	e7d2      	b.n	801ed40 <_svfiprintf_r+0x9c>
 801ed9a:	9b03      	ldr	r3, [sp, #12]
 801ed9c:	1d19      	adds	r1, r3, #4
 801ed9e:	681b      	ldr	r3, [r3, #0]
 801eda0:	9103      	str	r1, [sp, #12]
 801eda2:	2b00      	cmp	r3, #0
 801eda4:	bfbb      	ittet	lt
 801eda6:	425b      	neglt	r3, r3
 801eda8:	f042 0202 	orrlt.w	r2, r2, #2
 801edac:	9307      	strge	r3, [sp, #28]
 801edae:	9307      	strlt	r3, [sp, #28]
 801edb0:	bfb8      	it	lt
 801edb2:	9204      	strlt	r2, [sp, #16]
 801edb4:	7823      	ldrb	r3, [r4, #0]
 801edb6:	2b2e      	cmp	r3, #46	; 0x2e
 801edb8:	d10c      	bne.n	801edd4 <_svfiprintf_r+0x130>
 801edba:	7863      	ldrb	r3, [r4, #1]
 801edbc:	2b2a      	cmp	r3, #42	; 0x2a
 801edbe:	d135      	bne.n	801ee2c <_svfiprintf_r+0x188>
 801edc0:	9b03      	ldr	r3, [sp, #12]
 801edc2:	1d1a      	adds	r2, r3, #4
 801edc4:	681b      	ldr	r3, [r3, #0]
 801edc6:	9203      	str	r2, [sp, #12]
 801edc8:	2b00      	cmp	r3, #0
 801edca:	bfb8      	it	lt
 801edcc:	f04f 33ff 	movlt.w	r3, #4294967295
 801edd0:	3402      	adds	r4, #2
 801edd2:	9305      	str	r3, [sp, #20]
 801edd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801eea0 <_svfiprintf_r+0x1fc>
 801edd8:	7821      	ldrb	r1, [r4, #0]
 801edda:	2203      	movs	r2, #3
 801eddc:	4650      	mov	r0, sl
 801edde:	f7e1 f9ff 	bl	80001e0 <memchr>
 801ede2:	b140      	cbz	r0, 801edf6 <_svfiprintf_r+0x152>
 801ede4:	2340      	movs	r3, #64	; 0x40
 801ede6:	eba0 000a 	sub.w	r0, r0, sl
 801edea:	fa03 f000 	lsl.w	r0, r3, r0
 801edee:	9b04      	ldr	r3, [sp, #16]
 801edf0:	4303      	orrs	r3, r0
 801edf2:	3401      	adds	r4, #1
 801edf4:	9304      	str	r3, [sp, #16]
 801edf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801edfa:	4826      	ldr	r0, [pc, #152]	; (801ee94 <_svfiprintf_r+0x1f0>)
 801edfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ee00:	2206      	movs	r2, #6
 801ee02:	f7e1 f9ed 	bl	80001e0 <memchr>
 801ee06:	2800      	cmp	r0, #0
 801ee08:	d038      	beq.n	801ee7c <_svfiprintf_r+0x1d8>
 801ee0a:	4b23      	ldr	r3, [pc, #140]	; (801ee98 <_svfiprintf_r+0x1f4>)
 801ee0c:	bb1b      	cbnz	r3, 801ee56 <_svfiprintf_r+0x1b2>
 801ee0e:	9b03      	ldr	r3, [sp, #12]
 801ee10:	3307      	adds	r3, #7
 801ee12:	f023 0307 	bic.w	r3, r3, #7
 801ee16:	3308      	adds	r3, #8
 801ee18:	9303      	str	r3, [sp, #12]
 801ee1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee1c:	4433      	add	r3, r6
 801ee1e:	9309      	str	r3, [sp, #36]	; 0x24
 801ee20:	e767      	b.n	801ecf2 <_svfiprintf_r+0x4e>
 801ee22:	fb0c 3202 	mla	r2, ip, r2, r3
 801ee26:	460c      	mov	r4, r1
 801ee28:	2001      	movs	r0, #1
 801ee2a:	e7a5      	b.n	801ed78 <_svfiprintf_r+0xd4>
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	3401      	adds	r4, #1
 801ee30:	9305      	str	r3, [sp, #20]
 801ee32:	4619      	mov	r1, r3
 801ee34:	f04f 0c0a 	mov.w	ip, #10
 801ee38:	4620      	mov	r0, r4
 801ee3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ee3e:	3a30      	subs	r2, #48	; 0x30
 801ee40:	2a09      	cmp	r2, #9
 801ee42:	d903      	bls.n	801ee4c <_svfiprintf_r+0x1a8>
 801ee44:	2b00      	cmp	r3, #0
 801ee46:	d0c5      	beq.n	801edd4 <_svfiprintf_r+0x130>
 801ee48:	9105      	str	r1, [sp, #20]
 801ee4a:	e7c3      	b.n	801edd4 <_svfiprintf_r+0x130>
 801ee4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ee50:	4604      	mov	r4, r0
 801ee52:	2301      	movs	r3, #1
 801ee54:	e7f0      	b.n	801ee38 <_svfiprintf_r+0x194>
 801ee56:	ab03      	add	r3, sp, #12
 801ee58:	9300      	str	r3, [sp, #0]
 801ee5a:	462a      	mov	r2, r5
 801ee5c:	4b0f      	ldr	r3, [pc, #60]	; (801ee9c <_svfiprintf_r+0x1f8>)
 801ee5e:	a904      	add	r1, sp, #16
 801ee60:	4638      	mov	r0, r7
 801ee62:	f3af 8000 	nop.w
 801ee66:	1c42      	adds	r2, r0, #1
 801ee68:	4606      	mov	r6, r0
 801ee6a:	d1d6      	bne.n	801ee1a <_svfiprintf_r+0x176>
 801ee6c:	89ab      	ldrh	r3, [r5, #12]
 801ee6e:	065b      	lsls	r3, r3, #25
 801ee70:	f53f af2c 	bmi.w	801eccc <_svfiprintf_r+0x28>
 801ee74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee76:	b01d      	add	sp, #116	; 0x74
 801ee78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee7c:	ab03      	add	r3, sp, #12
 801ee7e:	9300      	str	r3, [sp, #0]
 801ee80:	462a      	mov	r2, r5
 801ee82:	4b06      	ldr	r3, [pc, #24]	; (801ee9c <_svfiprintf_r+0x1f8>)
 801ee84:	a904      	add	r1, sp, #16
 801ee86:	4638      	mov	r0, r7
 801ee88:	f000 f9d4 	bl	801f234 <_printf_i>
 801ee8c:	e7eb      	b.n	801ee66 <_svfiprintf_r+0x1c2>
 801ee8e:	bf00      	nop
 801ee90:	08025408 	.word	0x08025408
 801ee94:	08025412 	.word	0x08025412
 801ee98:	00000000 	.word	0x00000000
 801ee9c:	0801ebed 	.word	0x0801ebed
 801eea0:	0802540e 	.word	0x0802540e

0801eea4 <__sfputc_r>:
 801eea4:	6893      	ldr	r3, [r2, #8]
 801eea6:	3b01      	subs	r3, #1
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	b410      	push	{r4}
 801eeac:	6093      	str	r3, [r2, #8]
 801eeae:	da08      	bge.n	801eec2 <__sfputc_r+0x1e>
 801eeb0:	6994      	ldr	r4, [r2, #24]
 801eeb2:	42a3      	cmp	r3, r4
 801eeb4:	db01      	blt.n	801eeba <__sfputc_r+0x16>
 801eeb6:	290a      	cmp	r1, #10
 801eeb8:	d103      	bne.n	801eec2 <__sfputc_r+0x1e>
 801eeba:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eebe:	f7ff bb79 	b.w	801e5b4 <__swbuf_r>
 801eec2:	6813      	ldr	r3, [r2, #0]
 801eec4:	1c58      	adds	r0, r3, #1
 801eec6:	6010      	str	r0, [r2, #0]
 801eec8:	7019      	strb	r1, [r3, #0]
 801eeca:	4608      	mov	r0, r1
 801eecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eed0:	4770      	bx	lr

0801eed2 <__sfputs_r>:
 801eed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eed4:	4606      	mov	r6, r0
 801eed6:	460f      	mov	r7, r1
 801eed8:	4614      	mov	r4, r2
 801eeda:	18d5      	adds	r5, r2, r3
 801eedc:	42ac      	cmp	r4, r5
 801eede:	d101      	bne.n	801eee4 <__sfputs_r+0x12>
 801eee0:	2000      	movs	r0, #0
 801eee2:	e007      	b.n	801eef4 <__sfputs_r+0x22>
 801eee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eee8:	463a      	mov	r2, r7
 801eeea:	4630      	mov	r0, r6
 801eeec:	f7ff ffda 	bl	801eea4 <__sfputc_r>
 801eef0:	1c43      	adds	r3, r0, #1
 801eef2:	d1f3      	bne.n	801eedc <__sfputs_r+0xa>
 801eef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eef8 <_vfiprintf_r>:
 801eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eefc:	460d      	mov	r5, r1
 801eefe:	b09d      	sub	sp, #116	; 0x74
 801ef00:	4614      	mov	r4, r2
 801ef02:	4698      	mov	r8, r3
 801ef04:	4606      	mov	r6, r0
 801ef06:	b118      	cbz	r0, 801ef10 <_vfiprintf_r+0x18>
 801ef08:	6983      	ldr	r3, [r0, #24]
 801ef0a:	b90b      	cbnz	r3, 801ef10 <_vfiprintf_r+0x18>
 801ef0c:	f7ff fd4a 	bl	801e9a4 <__sinit>
 801ef10:	4b89      	ldr	r3, [pc, #548]	; (801f138 <_vfiprintf_r+0x240>)
 801ef12:	429d      	cmp	r5, r3
 801ef14:	d11b      	bne.n	801ef4e <_vfiprintf_r+0x56>
 801ef16:	6875      	ldr	r5, [r6, #4]
 801ef18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef1a:	07d9      	lsls	r1, r3, #31
 801ef1c:	d405      	bmi.n	801ef2a <_vfiprintf_r+0x32>
 801ef1e:	89ab      	ldrh	r3, [r5, #12]
 801ef20:	059a      	lsls	r2, r3, #22
 801ef22:	d402      	bmi.n	801ef2a <_vfiprintf_r+0x32>
 801ef24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef26:	f7ff fded 	bl	801eb04 <__retarget_lock_acquire_recursive>
 801ef2a:	89ab      	ldrh	r3, [r5, #12]
 801ef2c:	071b      	lsls	r3, r3, #28
 801ef2e:	d501      	bpl.n	801ef34 <_vfiprintf_r+0x3c>
 801ef30:	692b      	ldr	r3, [r5, #16]
 801ef32:	b9eb      	cbnz	r3, 801ef70 <_vfiprintf_r+0x78>
 801ef34:	4629      	mov	r1, r5
 801ef36:	4630      	mov	r0, r6
 801ef38:	f7ff fb8e 	bl	801e658 <__swsetup_r>
 801ef3c:	b1c0      	cbz	r0, 801ef70 <_vfiprintf_r+0x78>
 801ef3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef40:	07dc      	lsls	r4, r3, #31
 801ef42:	d50e      	bpl.n	801ef62 <_vfiprintf_r+0x6a>
 801ef44:	f04f 30ff 	mov.w	r0, #4294967295
 801ef48:	b01d      	add	sp, #116	; 0x74
 801ef4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef4e:	4b7b      	ldr	r3, [pc, #492]	; (801f13c <_vfiprintf_r+0x244>)
 801ef50:	429d      	cmp	r5, r3
 801ef52:	d101      	bne.n	801ef58 <_vfiprintf_r+0x60>
 801ef54:	68b5      	ldr	r5, [r6, #8]
 801ef56:	e7df      	b.n	801ef18 <_vfiprintf_r+0x20>
 801ef58:	4b79      	ldr	r3, [pc, #484]	; (801f140 <_vfiprintf_r+0x248>)
 801ef5a:	429d      	cmp	r5, r3
 801ef5c:	bf08      	it	eq
 801ef5e:	68f5      	ldreq	r5, [r6, #12]
 801ef60:	e7da      	b.n	801ef18 <_vfiprintf_r+0x20>
 801ef62:	89ab      	ldrh	r3, [r5, #12]
 801ef64:	0598      	lsls	r0, r3, #22
 801ef66:	d4ed      	bmi.n	801ef44 <_vfiprintf_r+0x4c>
 801ef68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef6a:	f7ff fdcc 	bl	801eb06 <__retarget_lock_release_recursive>
 801ef6e:	e7e9      	b.n	801ef44 <_vfiprintf_r+0x4c>
 801ef70:	2300      	movs	r3, #0
 801ef72:	9309      	str	r3, [sp, #36]	; 0x24
 801ef74:	2320      	movs	r3, #32
 801ef76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ef7a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ef7e:	2330      	movs	r3, #48	; 0x30
 801ef80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f144 <_vfiprintf_r+0x24c>
 801ef84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ef88:	f04f 0901 	mov.w	r9, #1
 801ef8c:	4623      	mov	r3, r4
 801ef8e:	469a      	mov	sl, r3
 801ef90:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef94:	b10a      	cbz	r2, 801ef9a <_vfiprintf_r+0xa2>
 801ef96:	2a25      	cmp	r2, #37	; 0x25
 801ef98:	d1f9      	bne.n	801ef8e <_vfiprintf_r+0x96>
 801ef9a:	ebba 0b04 	subs.w	fp, sl, r4
 801ef9e:	d00b      	beq.n	801efb8 <_vfiprintf_r+0xc0>
 801efa0:	465b      	mov	r3, fp
 801efa2:	4622      	mov	r2, r4
 801efa4:	4629      	mov	r1, r5
 801efa6:	4630      	mov	r0, r6
 801efa8:	f7ff ff93 	bl	801eed2 <__sfputs_r>
 801efac:	3001      	adds	r0, #1
 801efae:	f000 80aa 	beq.w	801f106 <_vfiprintf_r+0x20e>
 801efb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801efb4:	445a      	add	r2, fp
 801efb6:	9209      	str	r2, [sp, #36]	; 0x24
 801efb8:	f89a 3000 	ldrb.w	r3, [sl]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	f000 80a2 	beq.w	801f106 <_vfiprintf_r+0x20e>
 801efc2:	2300      	movs	r3, #0
 801efc4:	f04f 32ff 	mov.w	r2, #4294967295
 801efc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801efcc:	f10a 0a01 	add.w	sl, sl, #1
 801efd0:	9304      	str	r3, [sp, #16]
 801efd2:	9307      	str	r3, [sp, #28]
 801efd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801efd8:	931a      	str	r3, [sp, #104]	; 0x68
 801efda:	4654      	mov	r4, sl
 801efdc:	2205      	movs	r2, #5
 801efde:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efe2:	4858      	ldr	r0, [pc, #352]	; (801f144 <_vfiprintf_r+0x24c>)
 801efe4:	f7e1 f8fc 	bl	80001e0 <memchr>
 801efe8:	9a04      	ldr	r2, [sp, #16]
 801efea:	b9d8      	cbnz	r0, 801f024 <_vfiprintf_r+0x12c>
 801efec:	06d1      	lsls	r1, r2, #27
 801efee:	bf44      	itt	mi
 801eff0:	2320      	movmi	r3, #32
 801eff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eff6:	0713      	lsls	r3, r2, #28
 801eff8:	bf44      	itt	mi
 801effa:	232b      	movmi	r3, #43	; 0x2b
 801effc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f000:	f89a 3000 	ldrb.w	r3, [sl]
 801f004:	2b2a      	cmp	r3, #42	; 0x2a
 801f006:	d015      	beq.n	801f034 <_vfiprintf_r+0x13c>
 801f008:	9a07      	ldr	r2, [sp, #28]
 801f00a:	4654      	mov	r4, sl
 801f00c:	2000      	movs	r0, #0
 801f00e:	f04f 0c0a 	mov.w	ip, #10
 801f012:	4621      	mov	r1, r4
 801f014:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f018:	3b30      	subs	r3, #48	; 0x30
 801f01a:	2b09      	cmp	r3, #9
 801f01c:	d94e      	bls.n	801f0bc <_vfiprintf_r+0x1c4>
 801f01e:	b1b0      	cbz	r0, 801f04e <_vfiprintf_r+0x156>
 801f020:	9207      	str	r2, [sp, #28]
 801f022:	e014      	b.n	801f04e <_vfiprintf_r+0x156>
 801f024:	eba0 0308 	sub.w	r3, r0, r8
 801f028:	fa09 f303 	lsl.w	r3, r9, r3
 801f02c:	4313      	orrs	r3, r2
 801f02e:	9304      	str	r3, [sp, #16]
 801f030:	46a2      	mov	sl, r4
 801f032:	e7d2      	b.n	801efda <_vfiprintf_r+0xe2>
 801f034:	9b03      	ldr	r3, [sp, #12]
 801f036:	1d19      	adds	r1, r3, #4
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	9103      	str	r1, [sp, #12]
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	bfbb      	ittet	lt
 801f040:	425b      	neglt	r3, r3
 801f042:	f042 0202 	orrlt.w	r2, r2, #2
 801f046:	9307      	strge	r3, [sp, #28]
 801f048:	9307      	strlt	r3, [sp, #28]
 801f04a:	bfb8      	it	lt
 801f04c:	9204      	strlt	r2, [sp, #16]
 801f04e:	7823      	ldrb	r3, [r4, #0]
 801f050:	2b2e      	cmp	r3, #46	; 0x2e
 801f052:	d10c      	bne.n	801f06e <_vfiprintf_r+0x176>
 801f054:	7863      	ldrb	r3, [r4, #1]
 801f056:	2b2a      	cmp	r3, #42	; 0x2a
 801f058:	d135      	bne.n	801f0c6 <_vfiprintf_r+0x1ce>
 801f05a:	9b03      	ldr	r3, [sp, #12]
 801f05c:	1d1a      	adds	r2, r3, #4
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	9203      	str	r2, [sp, #12]
 801f062:	2b00      	cmp	r3, #0
 801f064:	bfb8      	it	lt
 801f066:	f04f 33ff 	movlt.w	r3, #4294967295
 801f06a:	3402      	adds	r4, #2
 801f06c:	9305      	str	r3, [sp, #20]
 801f06e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f154 <_vfiprintf_r+0x25c>
 801f072:	7821      	ldrb	r1, [r4, #0]
 801f074:	2203      	movs	r2, #3
 801f076:	4650      	mov	r0, sl
 801f078:	f7e1 f8b2 	bl	80001e0 <memchr>
 801f07c:	b140      	cbz	r0, 801f090 <_vfiprintf_r+0x198>
 801f07e:	2340      	movs	r3, #64	; 0x40
 801f080:	eba0 000a 	sub.w	r0, r0, sl
 801f084:	fa03 f000 	lsl.w	r0, r3, r0
 801f088:	9b04      	ldr	r3, [sp, #16]
 801f08a:	4303      	orrs	r3, r0
 801f08c:	3401      	adds	r4, #1
 801f08e:	9304      	str	r3, [sp, #16]
 801f090:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f094:	482c      	ldr	r0, [pc, #176]	; (801f148 <_vfiprintf_r+0x250>)
 801f096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f09a:	2206      	movs	r2, #6
 801f09c:	f7e1 f8a0 	bl	80001e0 <memchr>
 801f0a0:	2800      	cmp	r0, #0
 801f0a2:	d03f      	beq.n	801f124 <_vfiprintf_r+0x22c>
 801f0a4:	4b29      	ldr	r3, [pc, #164]	; (801f14c <_vfiprintf_r+0x254>)
 801f0a6:	bb1b      	cbnz	r3, 801f0f0 <_vfiprintf_r+0x1f8>
 801f0a8:	9b03      	ldr	r3, [sp, #12]
 801f0aa:	3307      	adds	r3, #7
 801f0ac:	f023 0307 	bic.w	r3, r3, #7
 801f0b0:	3308      	adds	r3, #8
 801f0b2:	9303      	str	r3, [sp, #12]
 801f0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0b6:	443b      	add	r3, r7
 801f0b8:	9309      	str	r3, [sp, #36]	; 0x24
 801f0ba:	e767      	b.n	801ef8c <_vfiprintf_r+0x94>
 801f0bc:	fb0c 3202 	mla	r2, ip, r2, r3
 801f0c0:	460c      	mov	r4, r1
 801f0c2:	2001      	movs	r0, #1
 801f0c4:	e7a5      	b.n	801f012 <_vfiprintf_r+0x11a>
 801f0c6:	2300      	movs	r3, #0
 801f0c8:	3401      	adds	r4, #1
 801f0ca:	9305      	str	r3, [sp, #20]
 801f0cc:	4619      	mov	r1, r3
 801f0ce:	f04f 0c0a 	mov.w	ip, #10
 801f0d2:	4620      	mov	r0, r4
 801f0d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f0d8:	3a30      	subs	r2, #48	; 0x30
 801f0da:	2a09      	cmp	r2, #9
 801f0dc:	d903      	bls.n	801f0e6 <_vfiprintf_r+0x1ee>
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	d0c5      	beq.n	801f06e <_vfiprintf_r+0x176>
 801f0e2:	9105      	str	r1, [sp, #20]
 801f0e4:	e7c3      	b.n	801f06e <_vfiprintf_r+0x176>
 801f0e6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f0ea:	4604      	mov	r4, r0
 801f0ec:	2301      	movs	r3, #1
 801f0ee:	e7f0      	b.n	801f0d2 <_vfiprintf_r+0x1da>
 801f0f0:	ab03      	add	r3, sp, #12
 801f0f2:	9300      	str	r3, [sp, #0]
 801f0f4:	462a      	mov	r2, r5
 801f0f6:	4b16      	ldr	r3, [pc, #88]	; (801f150 <_vfiprintf_r+0x258>)
 801f0f8:	a904      	add	r1, sp, #16
 801f0fa:	4630      	mov	r0, r6
 801f0fc:	f3af 8000 	nop.w
 801f100:	4607      	mov	r7, r0
 801f102:	1c78      	adds	r0, r7, #1
 801f104:	d1d6      	bne.n	801f0b4 <_vfiprintf_r+0x1bc>
 801f106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f108:	07d9      	lsls	r1, r3, #31
 801f10a:	d405      	bmi.n	801f118 <_vfiprintf_r+0x220>
 801f10c:	89ab      	ldrh	r3, [r5, #12]
 801f10e:	059a      	lsls	r2, r3, #22
 801f110:	d402      	bmi.n	801f118 <_vfiprintf_r+0x220>
 801f112:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f114:	f7ff fcf7 	bl	801eb06 <__retarget_lock_release_recursive>
 801f118:	89ab      	ldrh	r3, [r5, #12]
 801f11a:	065b      	lsls	r3, r3, #25
 801f11c:	f53f af12 	bmi.w	801ef44 <_vfiprintf_r+0x4c>
 801f120:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f122:	e711      	b.n	801ef48 <_vfiprintf_r+0x50>
 801f124:	ab03      	add	r3, sp, #12
 801f126:	9300      	str	r3, [sp, #0]
 801f128:	462a      	mov	r2, r5
 801f12a:	4b09      	ldr	r3, [pc, #36]	; (801f150 <_vfiprintf_r+0x258>)
 801f12c:	a904      	add	r1, sp, #16
 801f12e:	4630      	mov	r0, r6
 801f130:	f000 f880 	bl	801f234 <_printf_i>
 801f134:	e7e4      	b.n	801f100 <_vfiprintf_r+0x208>
 801f136:	bf00      	nop
 801f138:	080253c8 	.word	0x080253c8
 801f13c:	080253e8 	.word	0x080253e8
 801f140:	080253a8 	.word	0x080253a8
 801f144:	08025408 	.word	0x08025408
 801f148:	08025412 	.word	0x08025412
 801f14c:	00000000 	.word	0x00000000
 801f150:	0801eed3 	.word	0x0801eed3
 801f154:	0802540e 	.word	0x0802540e

0801f158 <_printf_common>:
 801f158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f15c:	4616      	mov	r6, r2
 801f15e:	4699      	mov	r9, r3
 801f160:	688a      	ldr	r2, [r1, #8]
 801f162:	690b      	ldr	r3, [r1, #16]
 801f164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f168:	4293      	cmp	r3, r2
 801f16a:	bfb8      	it	lt
 801f16c:	4613      	movlt	r3, r2
 801f16e:	6033      	str	r3, [r6, #0]
 801f170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f174:	4607      	mov	r7, r0
 801f176:	460c      	mov	r4, r1
 801f178:	b10a      	cbz	r2, 801f17e <_printf_common+0x26>
 801f17a:	3301      	adds	r3, #1
 801f17c:	6033      	str	r3, [r6, #0]
 801f17e:	6823      	ldr	r3, [r4, #0]
 801f180:	0699      	lsls	r1, r3, #26
 801f182:	bf42      	ittt	mi
 801f184:	6833      	ldrmi	r3, [r6, #0]
 801f186:	3302      	addmi	r3, #2
 801f188:	6033      	strmi	r3, [r6, #0]
 801f18a:	6825      	ldr	r5, [r4, #0]
 801f18c:	f015 0506 	ands.w	r5, r5, #6
 801f190:	d106      	bne.n	801f1a0 <_printf_common+0x48>
 801f192:	f104 0a19 	add.w	sl, r4, #25
 801f196:	68e3      	ldr	r3, [r4, #12]
 801f198:	6832      	ldr	r2, [r6, #0]
 801f19a:	1a9b      	subs	r3, r3, r2
 801f19c:	42ab      	cmp	r3, r5
 801f19e:	dc26      	bgt.n	801f1ee <_printf_common+0x96>
 801f1a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f1a4:	1e13      	subs	r3, r2, #0
 801f1a6:	6822      	ldr	r2, [r4, #0]
 801f1a8:	bf18      	it	ne
 801f1aa:	2301      	movne	r3, #1
 801f1ac:	0692      	lsls	r2, r2, #26
 801f1ae:	d42b      	bmi.n	801f208 <_printf_common+0xb0>
 801f1b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f1b4:	4649      	mov	r1, r9
 801f1b6:	4638      	mov	r0, r7
 801f1b8:	47c0      	blx	r8
 801f1ba:	3001      	adds	r0, #1
 801f1bc:	d01e      	beq.n	801f1fc <_printf_common+0xa4>
 801f1be:	6823      	ldr	r3, [r4, #0]
 801f1c0:	68e5      	ldr	r5, [r4, #12]
 801f1c2:	6832      	ldr	r2, [r6, #0]
 801f1c4:	f003 0306 	and.w	r3, r3, #6
 801f1c8:	2b04      	cmp	r3, #4
 801f1ca:	bf08      	it	eq
 801f1cc:	1aad      	subeq	r5, r5, r2
 801f1ce:	68a3      	ldr	r3, [r4, #8]
 801f1d0:	6922      	ldr	r2, [r4, #16]
 801f1d2:	bf0c      	ite	eq
 801f1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f1d8:	2500      	movne	r5, #0
 801f1da:	4293      	cmp	r3, r2
 801f1dc:	bfc4      	itt	gt
 801f1de:	1a9b      	subgt	r3, r3, r2
 801f1e0:	18ed      	addgt	r5, r5, r3
 801f1e2:	2600      	movs	r6, #0
 801f1e4:	341a      	adds	r4, #26
 801f1e6:	42b5      	cmp	r5, r6
 801f1e8:	d11a      	bne.n	801f220 <_printf_common+0xc8>
 801f1ea:	2000      	movs	r0, #0
 801f1ec:	e008      	b.n	801f200 <_printf_common+0xa8>
 801f1ee:	2301      	movs	r3, #1
 801f1f0:	4652      	mov	r2, sl
 801f1f2:	4649      	mov	r1, r9
 801f1f4:	4638      	mov	r0, r7
 801f1f6:	47c0      	blx	r8
 801f1f8:	3001      	adds	r0, #1
 801f1fa:	d103      	bne.n	801f204 <_printf_common+0xac>
 801f1fc:	f04f 30ff 	mov.w	r0, #4294967295
 801f200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f204:	3501      	adds	r5, #1
 801f206:	e7c6      	b.n	801f196 <_printf_common+0x3e>
 801f208:	18e1      	adds	r1, r4, r3
 801f20a:	1c5a      	adds	r2, r3, #1
 801f20c:	2030      	movs	r0, #48	; 0x30
 801f20e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f212:	4422      	add	r2, r4
 801f214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f21c:	3302      	adds	r3, #2
 801f21e:	e7c7      	b.n	801f1b0 <_printf_common+0x58>
 801f220:	2301      	movs	r3, #1
 801f222:	4622      	mov	r2, r4
 801f224:	4649      	mov	r1, r9
 801f226:	4638      	mov	r0, r7
 801f228:	47c0      	blx	r8
 801f22a:	3001      	adds	r0, #1
 801f22c:	d0e6      	beq.n	801f1fc <_printf_common+0xa4>
 801f22e:	3601      	adds	r6, #1
 801f230:	e7d9      	b.n	801f1e6 <_printf_common+0x8e>
	...

0801f234 <_printf_i>:
 801f234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f238:	7e0f      	ldrb	r7, [r1, #24]
 801f23a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f23c:	2f78      	cmp	r7, #120	; 0x78
 801f23e:	4691      	mov	r9, r2
 801f240:	4680      	mov	r8, r0
 801f242:	460c      	mov	r4, r1
 801f244:	469a      	mov	sl, r3
 801f246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f24a:	d807      	bhi.n	801f25c <_printf_i+0x28>
 801f24c:	2f62      	cmp	r7, #98	; 0x62
 801f24e:	d80a      	bhi.n	801f266 <_printf_i+0x32>
 801f250:	2f00      	cmp	r7, #0
 801f252:	f000 80d8 	beq.w	801f406 <_printf_i+0x1d2>
 801f256:	2f58      	cmp	r7, #88	; 0x58
 801f258:	f000 80a3 	beq.w	801f3a2 <_printf_i+0x16e>
 801f25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f264:	e03a      	b.n	801f2dc <_printf_i+0xa8>
 801f266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f26a:	2b15      	cmp	r3, #21
 801f26c:	d8f6      	bhi.n	801f25c <_printf_i+0x28>
 801f26e:	a101      	add	r1, pc, #4	; (adr r1, 801f274 <_printf_i+0x40>)
 801f270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f274:	0801f2cd 	.word	0x0801f2cd
 801f278:	0801f2e1 	.word	0x0801f2e1
 801f27c:	0801f25d 	.word	0x0801f25d
 801f280:	0801f25d 	.word	0x0801f25d
 801f284:	0801f25d 	.word	0x0801f25d
 801f288:	0801f25d 	.word	0x0801f25d
 801f28c:	0801f2e1 	.word	0x0801f2e1
 801f290:	0801f25d 	.word	0x0801f25d
 801f294:	0801f25d 	.word	0x0801f25d
 801f298:	0801f25d 	.word	0x0801f25d
 801f29c:	0801f25d 	.word	0x0801f25d
 801f2a0:	0801f3ed 	.word	0x0801f3ed
 801f2a4:	0801f311 	.word	0x0801f311
 801f2a8:	0801f3cf 	.word	0x0801f3cf
 801f2ac:	0801f25d 	.word	0x0801f25d
 801f2b0:	0801f25d 	.word	0x0801f25d
 801f2b4:	0801f40f 	.word	0x0801f40f
 801f2b8:	0801f25d 	.word	0x0801f25d
 801f2bc:	0801f311 	.word	0x0801f311
 801f2c0:	0801f25d 	.word	0x0801f25d
 801f2c4:	0801f25d 	.word	0x0801f25d
 801f2c8:	0801f3d7 	.word	0x0801f3d7
 801f2cc:	682b      	ldr	r3, [r5, #0]
 801f2ce:	1d1a      	adds	r2, r3, #4
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	602a      	str	r2, [r5, #0]
 801f2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f2d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f2dc:	2301      	movs	r3, #1
 801f2de:	e0a3      	b.n	801f428 <_printf_i+0x1f4>
 801f2e0:	6820      	ldr	r0, [r4, #0]
 801f2e2:	6829      	ldr	r1, [r5, #0]
 801f2e4:	0606      	lsls	r6, r0, #24
 801f2e6:	f101 0304 	add.w	r3, r1, #4
 801f2ea:	d50a      	bpl.n	801f302 <_printf_i+0xce>
 801f2ec:	680e      	ldr	r6, [r1, #0]
 801f2ee:	602b      	str	r3, [r5, #0]
 801f2f0:	2e00      	cmp	r6, #0
 801f2f2:	da03      	bge.n	801f2fc <_printf_i+0xc8>
 801f2f4:	232d      	movs	r3, #45	; 0x2d
 801f2f6:	4276      	negs	r6, r6
 801f2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f2fc:	485e      	ldr	r0, [pc, #376]	; (801f478 <_printf_i+0x244>)
 801f2fe:	230a      	movs	r3, #10
 801f300:	e019      	b.n	801f336 <_printf_i+0x102>
 801f302:	680e      	ldr	r6, [r1, #0]
 801f304:	602b      	str	r3, [r5, #0]
 801f306:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f30a:	bf18      	it	ne
 801f30c:	b236      	sxthne	r6, r6
 801f30e:	e7ef      	b.n	801f2f0 <_printf_i+0xbc>
 801f310:	682b      	ldr	r3, [r5, #0]
 801f312:	6820      	ldr	r0, [r4, #0]
 801f314:	1d19      	adds	r1, r3, #4
 801f316:	6029      	str	r1, [r5, #0]
 801f318:	0601      	lsls	r1, r0, #24
 801f31a:	d501      	bpl.n	801f320 <_printf_i+0xec>
 801f31c:	681e      	ldr	r6, [r3, #0]
 801f31e:	e002      	b.n	801f326 <_printf_i+0xf2>
 801f320:	0646      	lsls	r6, r0, #25
 801f322:	d5fb      	bpl.n	801f31c <_printf_i+0xe8>
 801f324:	881e      	ldrh	r6, [r3, #0]
 801f326:	4854      	ldr	r0, [pc, #336]	; (801f478 <_printf_i+0x244>)
 801f328:	2f6f      	cmp	r7, #111	; 0x6f
 801f32a:	bf0c      	ite	eq
 801f32c:	2308      	moveq	r3, #8
 801f32e:	230a      	movne	r3, #10
 801f330:	2100      	movs	r1, #0
 801f332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f336:	6865      	ldr	r5, [r4, #4]
 801f338:	60a5      	str	r5, [r4, #8]
 801f33a:	2d00      	cmp	r5, #0
 801f33c:	bfa2      	ittt	ge
 801f33e:	6821      	ldrge	r1, [r4, #0]
 801f340:	f021 0104 	bicge.w	r1, r1, #4
 801f344:	6021      	strge	r1, [r4, #0]
 801f346:	b90e      	cbnz	r6, 801f34c <_printf_i+0x118>
 801f348:	2d00      	cmp	r5, #0
 801f34a:	d04d      	beq.n	801f3e8 <_printf_i+0x1b4>
 801f34c:	4615      	mov	r5, r2
 801f34e:	fbb6 f1f3 	udiv	r1, r6, r3
 801f352:	fb03 6711 	mls	r7, r3, r1, r6
 801f356:	5dc7      	ldrb	r7, [r0, r7]
 801f358:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f35c:	4637      	mov	r7, r6
 801f35e:	42bb      	cmp	r3, r7
 801f360:	460e      	mov	r6, r1
 801f362:	d9f4      	bls.n	801f34e <_printf_i+0x11a>
 801f364:	2b08      	cmp	r3, #8
 801f366:	d10b      	bne.n	801f380 <_printf_i+0x14c>
 801f368:	6823      	ldr	r3, [r4, #0]
 801f36a:	07de      	lsls	r6, r3, #31
 801f36c:	d508      	bpl.n	801f380 <_printf_i+0x14c>
 801f36e:	6923      	ldr	r3, [r4, #16]
 801f370:	6861      	ldr	r1, [r4, #4]
 801f372:	4299      	cmp	r1, r3
 801f374:	bfde      	ittt	le
 801f376:	2330      	movle	r3, #48	; 0x30
 801f378:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f37c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f380:	1b52      	subs	r2, r2, r5
 801f382:	6122      	str	r2, [r4, #16]
 801f384:	f8cd a000 	str.w	sl, [sp]
 801f388:	464b      	mov	r3, r9
 801f38a:	aa03      	add	r2, sp, #12
 801f38c:	4621      	mov	r1, r4
 801f38e:	4640      	mov	r0, r8
 801f390:	f7ff fee2 	bl	801f158 <_printf_common>
 801f394:	3001      	adds	r0, #1
 801f396:	d14c      	bne.n	801f432 <_printf_i+0x1fe>
 801f398:	f04f 30ff 	mov.w	r0, #4294967295
 801f39c:	b004      	add	sp, #16
 801f39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3a2:	4835      	ldr	r0, [pc, #212]	; (801f478 <_printf_i+0x244>)
 801f3a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f3a8:	6829      	ldr	r1, [r5, #0]
 801f3aa:	6823      	ldr	r3, [r4, #0]
 801f3ac:	f851 6b04 	ldr.w	r6, [r1], #4
 801f3b0:	6029      	str	r1, [r5, #0]
 801f3b2:	061d      	lsls	r5, r3, #24
 801f3b4:	d514      	bpl.n	801f3e0 <_printf_i+0x1ac>
 801f3b6:	07df      	lsls	r7, r3, #31
 801f3b8:	bf44      	itt	mi
 801f3ba:	f043 0320 	orrmi.w	r3, r3, #32
 801f3be:	6023      	strmi	r3, [r4, #0]
 801f3c0:	b91e      	cbnz	r6, 801f3ca <_printf_i+0x196>
 801f3c2:	6823      	ldr	r3, [r4, #0]
 801f3c4:	f023 0320 	bic.w	r3, r3, #32
 801f3c8:	6023      	str	r3, [r4, #0]
 801f3ca:	2310      	movs	r3, #16
 801f3cc:	e7b0      	b.n	801f330 <_printf_i+0xfc>
 801f3ce:	6823      	ldr	r3, [r4, #0]
 801f3d0:	f043 0320 	orr.w	r3, r3, #32
 801f3d4:	6023      	str	r3, [r4, #0]
 801f3d6:	2378      	movs	r3, #120	; 0x78
 801f3d8:	4828      	ldr	r0, [pc, #160]	; (801f47c <_printf_i+0x248>)
 801f3da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f3de:	e7e3      	b.n	801f3a8 <_printf_i+0x174>
 801f3e0:	0659      	lsls	r1, r3, #25
 801f3e2:	bf48      	it	mi
 801f3e4:	b2b6      	uxthmi	r6, r6
 801f3e6:	e7e6      	b.n	801f3b6 <_printf_i+0x182>
 801f3e8:	4615      	mov	r5, r2
 801f3ea:	e7bb      	b.n	801f364 <_printf_i+0x130>
 801f3ec:	682b      	ldr	r3, [r5, #0]
 801f3ee:	6826      	ldr	r6, [r4, #0]
 801f3f0:	6961      	ldr	r1, [r4, #20]
 801f3f2:	1d18      	adds	r0, r3, #4
 801f3f4:	6028      	str	r0, [r5, #0]
 801f3f6:	0635      	lsls	r5, r6, #24
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	d501      	bpl.n	801f400 <_printf_i+0x1cc>
 801f3fc:	6019      	str	r1, [r3, #0]
 801f3fe:	e002      	b.n	801f406 <_printf_i+0x1d2>
 801f400:	0670      	lsls	r0, r6, #25
 801f402:	d5fb      	bpl.n	801f3fc <_printf_i+0x1c8>
 801f404:	8019      	strh	r1, [r3, #0]
 801f406:	2300      	movs	r3, #0
 801f408:	6123      	str	r3, [r4, #16]
 801f40a:	4615      	mov	r5, r2
 801f40c:	e7ba      	b.n	801f384 <_printf_i+0x150>
 801f40e:	682b      	ldr	r3, [r5, #0]
 801f410:	1d1a      	adds	r2, r3, #4
 801f412:	602a      	str	r2, [r5, #0]
 801f414:	681d      	ldr	r5, [r3, #0]
 801f416:	6862      	ldr	r2, [r4, #4]
 801f418:	2100      	movs	r1, #0
 801f41a:	4628      	mov	r0, r5
 801f41c:	f7e0 fee0 	bl	80001e0 <memchr>
 801f420:	b108      	cbz	r0, 801f426 <_printf_i+0x1f2>
 801f422:	1b40      	subs	r0, r0, r5
 801f424:	6060      	str	r0, [r4, #4]
 801f426:	6863      	ldr	r3, [r4, #4]
 801f428:	6123      	str	r3, [r4, #16]
 801f42a:	2300      	movs	r3, #0
 801f42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f430:	e7a8      	b.n	801f384 <_printf_i+0x150>
 801f432:	6923      	ldr	r3, [r4, #16]
 801f434:	462a      	mov	r2, r5
 801f436:	4649      	mov	r1, r9
 801f438:	4640      	mov	r0, r8
 801f43a:	47d0      	blx	sl
 801f43c:	3001      	adds	r0, #1
 801f43e:	d0ab      	beq.n	801f398 <_printf_i+0x164>
 801f440:	6823      	ldr	r3, [r4, #0]
 801f442:	079b      	lsls	r3, r3, #30
 801f444:	d413      	bmi.n	801f46e <_printf_i+0x23a>
 801f446:	68e0      	ldr	r0, [r4, #12]
 801f448:	9b03      	ldr	r3, [sp, #12]
 801f44a:	4298      	cmp	r0, r3
 801f44c:	bfb8      	it	lt
 801f44e:	4618      	movlt	r0, r3
 801f450:	e7a4      	b.n	801f39c <_printf_i+0x168>
 801f452:	2301      	movs	r3, #1
 801f454:	4632      	mov	r2, r6
 801f456:	4649      	mov	r1, r9
 801f458:	4640      	mov	r0, r8
 801f45a:	47d0      	blx	sl
 801f45c:	3001      	adds	r0, #1
 801f45e:	d09b      	beq.n	801f398 <_printf_i+0x164>
 801f460:	3501      	adds	r5, #1
 801f462:	68e3      	ldr	r3, [r4, #12]
 801f464:	9903      	ldr	r1, [sp, #12]
 801f466:	1a5b      	subs	r3, r3, r1
 801f468:	42ab      	cmp	r3, r5
 801f46a:	dcf2      	bgt.n	801f452 <_printf_i+0x21e>
 801f46c:	e7eb      	b.n	801f446 <_printf_i+0x212>
 801f46e:	2500      	movs	r5, #0
 801f470:	f104 0619 	add.w	r6, r4, #25
 801f474:	e7f5      	b.n	801f462 <_printf_i+0x22e>
 801f476:	bf00      	nop
 801f478:	08025419 	.word	0x08025419
 801f47c:	0802542a 	.word	0x0802542a

0801f480 <__sread>:
 801f480:	b510      	push	{r4, lr}
 801f482:	460c      	mov	r4, r1
 801f484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f488:	f000 f8cc 	bl	801f624 <_read_r>
 801f48c:	2800      	cmp	r0, #0
 801f48e:	bfab      	itete	ge
 801f490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f492:	89a3      	ldrhlt	r3, [r4, #12]
 801f494:	181b      	addge	r3, r3, r0
 801f496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f49a:	bfac      	ite	ge
 801f49c:	6563      	strge	r3, [r4, #84]	; 0x54
 801f49e:	81a3      	strhlt	r3, [r4, #12]
 801f4a0:	bd10      	pop	{r4, pc}

0801f4a2 <__swrite>:
 801f4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4a6:	461f      	mov	r7, r3
 801f4a8:	898b      	ldrh	r3, [r1, #12]
 801f4aa:	05db      	lsls	r3, r3, #23
 801f4ac:	4605      	mov	r5, r0
 801f4ae:	460c      	mov	r4, r1
 801f4b0:	4616      	mov	r6, r2
 801f4b2:	d505      	bpl.n	801f4c0 <__swrite+0x1e>
 801f4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4b8:	2302      	movs	r3, #2
 801f4ba:	2200      	movs	r2, #0
 801f4bc:	f000 f870 	bl	801f5a0 <_lseek_r>
 801f4c0:	89a3      	ldrh	r3, [r4, #12]
 801f4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f4c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f4ca:	81a3      	strh	r3, [r4, #12]
 801f4cc:	4632      	mov	r2, r6
 801f4ce:	463b      	mov	r3, r7
 801f4d0:	4628      	mov	r0, r5
 801f4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f4d6:	f000 b817 	b.w	801f508 <_write_r>

0801f4da <__sseek>:
 801f4da:	b510      	push	{r4, lr}
 801f4dc:	460c      	mov	r4, r1
 801f4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4e2:	f000 f85d 	bl	801f5a0 <_lseek_r>
 801f4e6:	1c43      	adds	r3, r0, #1
 801f4e8:	89a3      	ldrh	r3, [r4, #12]
 801f4ea:	bf15      	itete	ne
 801f4ec:	6560      	strne	r0, [r4, #84]	; 0x54
 801f4ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f4f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f4f6:	81a3      	strheq	r3, [r4, #12]
 801f4f8:	bf18      	it	ne
 801f4fa:	81a3      	strhne	r3, [r4, #12]
 801f4fc:	bd10      	pop	{r4, pc}

0801f4fe <__sclose>:
 801f4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f502:	f000 b81b 	b.w	801f53c <_close_r>
	...

0801f508 <_write_r>:
 801f508:	b538      	push	{r3, r4, r5, lr}
 801f50a:	4d07      	ldr	r5, [pc, #28]	; (801f528 <_write_r+0x20>)
 801f50c:	4604      	mov	r4, r0
 801f50e:	4608      	mov	r0, r1
 801f510:	4611      	mov	r1, r2
 801f512:	2200      	movs	r2, #0
 801f514:	602a      	str	r2, [r5, #0]
 801f516:	461a      	mov	r2, r3
 801f518:	f7e1 f8b8 	bl	800068c <_write>
 801f51c:	1c43      	adds	r3, r0, #1
 801f51e:	d102      	bne.n	801f526 <_write_r+0x1e>
 801f520:	682b      	ldr	r3, [r5, #0]
 801f522:	b103      	cbz	r3, 801f526 <_write_r+0x1e>
 801f524:	6023      	str	r3, [r4, #0]
 801f526:	bd38      	pop	{r3, r4, r5, pc}
 801f528:	20003110 	.word	0x20003110

0801f52c <abort>:
 801f52c:	b508      	push	{r3, lr}
 801f52e:	2006      	movs	r0, #6
 801f530:	f000 f8b2 	bl	801f698 <raise>
 801f534:	2001      	movs	r0, #1
 801f536:	f7e1 feab 	bl	8001290 <_exit>
	...

0801f53c <_close_r>:
 801f53c:	b538      	push	{r3, r4, r5, lr}
 801f53e:	4d06      	ldr	r5, [pc, #24]	; (801f558 <_close_r+0x1c>)
 801f540:	2300      	movs	r3, #0
 801f542:	4604      	mov	r4, r0
 801f544:	4608      	mov	r0, r1
 801f546:	602b      	str	r3, [r5, #0]
 801f548:	f7e1 fec9 	bl	80012de <_close>
 801f54c:	1c43      	adds	r3, r0, #1
 801f54e:	d102      	bne.n	801f556 <_close_r+0x1a>
 801f550:	682b      	ldr	r3, [r5, #0]
 801f552:	b103      	cbz	r3, 801f556 <_close_r+0x1a>
 801f554:	6023      	str	r3, [r4, #0]
 801f556:	bd38      	pop	{r3, r4, r5, pc}
 801f558:	20003110 	.word	0x20003110

0801f55c <_fstat_r>:
 801f55c:	b538      	push	{r3, r4, r5, lr}
 801f55e:	4d07      	ldr	r5, [pc, #28]	; (801f57c <_fstat_r+0x20>)
 801f560:	2300      	movs	r3, #0
 801f562:	4604      	mov	r4, r0
 801f564:	4608      	mov	r0, r1
 801f566:	4611      	mov	r1, r2
 801f568:	602b      	str	r3, [r5, #0]
 801f56a:	f7e1 fec4 	bl	80012f6 <_fstat>
 801f56e:	1c43      	adds	r3, r0, #1
 801f570:	d102      	bne.n	801f578 <_fstat_r+0x1c>
 801f572:	682b      	ldr	r3, [r5, #0]
 801f574:	b103      	cbz	r3, 801f578 <_fstat_r+0x1c>
 801f576:	6023      	str	r3, [r4, #0]
 801f578:	bd38      	pop	{r3, r4, r5, pc}
 801f57a:	bf00      	nop
 801f57c:	20003110 	.word	0x20003110

0801f580 <_isatty_r>:
 801f580:	b538      	push	{r3, r4, r5, lr}
 801f582:	4d06      	ldr	r5, [pc, #24]	; (801f59c <_isatty_r+0x1c>)
 801f584:	2300      	movs	r3, #0
 801f586:	4604      	mov	r4, r0
 801f588:	4608      	mov	r0, r1
 801f58a:	602b      	str	r3, [r5, #0]
 801f58c:	f7e1 fec3 	bl	8001316 <_isatty>
 801f590:	1c43      	adds	r3, r0, #1
 801f592:	d102      	bne.n	801f59a <_isatty_r+0x1a>
 801f594:	682b      	ldr	r3, [r5, #0]
 801f596:	b103      	cbz	r3, 801f59a <_isatty_r+0x1a>
 801f598:	6023      	str	r3, [r4, #0]
 801f59a:	bd38      	pop	{r3, r4, r5, pc}
 801f59c:	20003110 	.word	0x20003110

0801f5a0 <_lseek_r>:
 801f5a0:	b538      	push	{r3, r4, r5, lr}
 801f5a2:	4d07      	ldr	r5, [pc, #28]	; (801f5c0 <_lseek_r+0x20>)
 801f5a4:	4604      	mov	r4, r0
 801f5a6:	4608      	mov	r0, r1
 801f5a8:	4611      	mov	r1, r2
 801f5aa:	2200      	movs	r2, #0
 801f5ac:	602a      	str	r2, [r5, #0]
 801f5ae:	461a      	mov	r2, r3
 801f5b0:	f7e1 febc 	bl	800132c <_lseek>
 801f5b4:	1c43      	adds	r3, r0, #1
 801f5b6:	d102      	bne.n	801f5be <_lseek_r+0x1e>
 801f5b8:	682b      	ldr	r3, [r5, #0]
 801f5ba:	b103      	cbz	r3, 801f5be <_lseek_r+0x1e>
 801f5bc:	6023      	str	r3, [r4, #0]
 801f5be:	bd38      	pop	{r3, r4, r5, pc}
 801f5c0:	20003110 	.word	0x20003110

0801f5c4 <_realloc_r>:
 801f5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5c8:	4680      	mov	r8, r0
 801f5ca:	4614      	mov	r4, r2
 801f5cc:	460e      	mov	r6, r1
 801f5ce:	b921      	cbnz	r1, 801f5da <_realloc_r+0x16>
 801f5d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f5d4:	4611      	mov	r1, r2
 801f5d6:	f7fe bdeb 	b.w	801e1b0 <_malloc_r>
 801f5da:	b92a      	cbnz	r2, 801f5e8 <_realloc_r+0x24>
 801f5dc:	f7fe fd7c 	bl	801e0d8 <_free_r>
 801f5e0:	4625      	mov	r5, r4
 801f5e2:	4628      	mov	r0, r5
 801f5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f5e8:	f000 f872 	bl	801f6d0 <_malloc_usable_size_r>
 801f5ec:	4284      	cmp	r4, r0
 801f5ee:	4607      	mov	r7, r0
 801f5f0:	d802      	bhi.n	801f5f8 <_realloc_r+0x34>
 801f5f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f5f6:	d812      	bhi.n	801f61e <_realloc_r+0x5a>
 801f5f8:	4621      	mov	r1, r4
 801f5fa:	4640      	mov	r0, r8
 801f5fc:	f7fe fdd8 	bl	801e1b0 <_malloc_r>
 801f600:	4605      	mov	r5, r0
 801f602:	2800      	cmp	r0, #0
 801f604:	d0ed      	beq.n	801f5e2 <_realloc_r+0x1e>
 801f606:	42bc      	cmp	r4, r7
 801f608:	4622      	mov	r2, r4
 801f60a:	4631      	mov	r1, r6
 801f60c:	bf28      	it	cs
 801f60e:	463a      	movcs	r2, r7
 801f610:	f7fe fd1c 	bl	801e04c <memcpy>
 801f614:	4631      	mov	r1, r6
 801f616:	4640      	mov	r0, r8
 801f618:	f7fe fd5e 	bl	801e0d8 <_free_r>
 801f61c:	e7e1      	b.n	801f5e2 <_realloc_r+0x1e>
 801f61e:	4635      	mov	r5, r6
 801f620:	e7df      	b.n	801f5e2 <_realloc_r+0x1e>
	...

0801f624 <_read_r>:
 801f624:	b538      	push	{r3, r4, r5, lr}
 801f626:	4d07      	ldr	r5, [pc, #28]	; (801f644 <_read_r+0x20>)
 801f628:	4604      	mov	r4, r0
 801f62a:	4608      	mov	r0, r1
 801f62c:	4611      	mov	r1, r2
 801f62e:	2200      	movs	r2, #0
 801f630:	602a      	str	r2, [r5, #0]
 801f632:	461a      	mov	r2, r3
 801f634:	f7e1 fe36 	bl	80012a4 <_read>
 801f638:	1c43      	adds	r3, r0, #1
 801f63a:	d102      	bne.n	801f642 <_read_r+0x1e>
 801f63c:	682b      	ldr	r3, [r5, #0]
 801f63e:	b103      	cbz	r3, 801f642 <_read_r+0x1e>
 801f640:	6023      	str	r3, [r4, #0]
 801f642:	bd38      	pop	{r3, r4, r5, pc}
 801f644:	20003110 	.word	0x20003110

0801f648 <_raise_r>:
 801f648:	291f      	cmp	r1, #31
 801f64a:	b538      	push	{r3, r4, r5, lr}
 801f64c:	4604      	mov	r4, r0
 801f64e:	460d      	mov	r5, r1
 801f650:	d904      	bls.n	801f65c <_raise_r+0x14>
 801f652:	2316      	movs	r3, #22
 801f654:	6003      	str	r3, [r0, #0]
 801f656:	f04f 30ff 	mov.w	r0, #4294967295
 801f65a:	bd38      	pop	{r3, r4, r5, pc}
 801f65c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f65e:	b112      	cbz	r2, 801f666 <_raise_r+0x1e>
 801f660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f664:	b94b      	cbnz	r3, 801f67a <_raise_r+0x32>
 801f666:	4620      	mov	r0, r4
 801f668:	f000 f830 	bl	801f6cc <_getpid_r>
 801f66c:	462a      	mov	r2, r5
 801f66e:	4601      	mov	r1, r0
 801f670:	4620      	mov	r0, r4
 801f672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f676:	f000 b817 	b.w	801f6a8 <_kill_r>
 801f67a:	2b01      	cmp	r3, #1
 801f67c:	d00a      	beq.n	801f694 <_raise_r+0x4c>
 801f67e:	1c59      	adds	r1, r3, #1
 801f680:	d103      	bne.n	801f68a <_raise_r+0x42>
 801f682:	2316      	movs	r3, #22
 801f684:	6003      	str	r3, [r0, #0]
 801f686:	2001      	movs	r0, #1
 801f688:	e7e7      	b.n	801f65a <_raise_r+0x12>
 801f68a:	2400      	movs	r4, #0
 801f68c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f690:	4628      	mov	r0, r5
 801f692:	4798      	blx	r3
 801f694:	2000      	movs	r0, #0
 801f696:	e7e0      	b.n	801f65a <_raise_r+0x12>

0801f698 <raise>:
 801f698:	4b02      	ldr	r3, [pc, #8]	; (801f6a4 <raise+0xc>)
 801f69a:	4601      	mov	r1, r0
 801f69c:	6818      	ldr	r0, [r3, #0]
 801f69e:	f7ff bfd3 	b.w	801f648 <_raise_r>
 801f6a2:	bf00      	nop
 801f6a4:	20000070 	.word	0x20000070

0801f6a8 <_kill_r>:
 801f6a8:	b538      	push	{r3, r4, r5, lr}
 801f6aa:	4d07      	ldr	r5, [pc, #28]	; (801f6c8 <_kill_r+0x20>)
 801f6ac:	2300      	movs	r3, #0
 801f6ae:	4604      	mov	r4, r0
 801f6b0:	4608      	mov	r0, r1
 801f6b2:	4611      	mov	r1, r2
 801f6b4:	602b      	str	r3, [r5, #0]
 801f6b6:	f7e1 fddb 	bl	8001270 <_kill>
 801f6ba:	1c43      	adds	r3, r0, #1
 801f6bc:	d102      	bne.n	801f6c4 <_kill_r+0x1c>
 801f6be:	682b      	ldr	r3, [r5, #0]
 801f6c0:	b103      	cbz	r3, 801f6c4 <_kill_r+0x1c>
 801f6c2:	6023      	str	r3, [r4, #0]
 801f6c4:	bd38      	pop	{r3, r4, r5, pc}
 801f6c6:	bf00      	nop
 801f6c8:	20003110 	.word	0x20003110

0801f6cc <_getpid_r>:
 801f6cc:	f7e1 bdc8 	b.w	8001260 <_getpid>

0801f6d0 <_malloc_usable_size_r>:
 801f6d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f6d4:	1f18      	subs	r0, r3, #4
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	bfbc      	itt	lt
 801f6da:	580b      	ldrlt	r3, [r1, r0]
 801f6dc:	18c0      	addlt	r0, r0, r3
 801f6de:	4770      	bx	lr

0801f6e0 <_init>:
 801f6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6e2:	bf00      	nop
 801f6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f6e6:	bc08      	pop	{r3}
 801f6e8:	469e      	mov	lr, r3
 801f6ea:	4770      	bx	lr

0801f6ec <_fini>:
 801f6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6ee:	bf00      	nop
 801f6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f6f2:	bc08      	pop	{r3}
 801f6f4:	469e      	mov	lr, r3
 801f6f6:	4770      	bx	lr
