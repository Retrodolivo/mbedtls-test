
mbedtls_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fbec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005e1c  0801fd80  0801fd80  0002fd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025b9c  08025b9c  0004010c  2**0
                  CONTENTS
  4 .ARM          00000008  08025b9c  08025b9c  00035b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025ba4  08025ba4  0004010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025ba4  08025ba4  00035ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025ba8  08025ba8  00035ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08025bac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004010c  2**0
                  CONTENTS
 10 .bss          00003858  2000010c  2000010c  0004010c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003964  20003964  0004010c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c133  00000000  00000000  0004013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006be5  00000000  00000000  0006c26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002240  00000000  00000000  00072e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fa8  00000000  00000000  00075098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf96  00000000  00000000  00077040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f8da  00000000  00000000  000a3fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2b2f  00000000  00000000  000d38b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c63df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c28  00000000  00000000  001c6430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fd64 	.word	0x0801fd64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	0801fd64 	.word	0x0801fd64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <char2hex>:
#include "main.h"
#include <stdio.h>

//char to hex function
char char2hex(unsigned char data, unsigned char *r_data)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
	unsigned char temp_data = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	72fb      	strb	r3, [r7, #11]
	int i;
	for(i = 0; i < 2; i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	e01d      	b.n	80005f6 <char2hex+0x52>
	{
		temp_data = (data >> (i*4)) & 0x0F;
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	fa42 f303 	asr.w	r3, r2, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 030f 	and.w	r3, r3, #15
 80005ca:	72fb      	strb	r3, [r7, #11]
		if(temp_data < 0x0a)
 80005cc:	7afb      	ldrb	r3, [r7, #11]
 80005ce:	2b09      	cmp	r3, #9
 80005d0:	d807      	bhi.n	80005e2 <char2hex+0x3e>
		{
			r_data[i] = '0' + temp_data;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	7afa      	ldrb	r2, [r7, #11]
 80005da:	3230      	adds	r2, #48	; 0x30
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	e006      	b.n	80005f0 <char2hex+0x4c>
		}
		else
		{
			r_data[i] = 'A' + temp_data - 0x0a;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	7afa      	ldrb	r2, [r7, #11]
 80005ea:	3237      	adds	r2, #55	; 0x37
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	ddde      	ble.n	80005ba <char2hex+0x16>
		}
	}
	if((r_data[0] < '0')||(r_data[1] < '0'))
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b2f      	cmp	r3, #47	; 0x2f
 8000602:	d904      	bls.n	800060e <char2hex+0x6a>
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b2f      	cmp	r3, #47	; 0x2f
 800060c:	d801      	bhi.n	8000612 <char2hex+0x6e>
		return 1;
 800060e:	2301      	movs	r3, #1
 8000610:	e000      	b.n	8000614 <char2hex+0x70>
	return 0;
 8000612:	2300      	movs	r3, #0

}
 8000614:	4618      	mov	r0, r3
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <string_print_Hex>:

//hex debug print function
char string_print_Hex(unsigned char *buf, unsigned int len)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	unsigned int temp_len = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
	unsigned char temp_data[2], temp_buf;
	for(temp_len = 0; temp_len < len; temp_len++)
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e029      	b.n	8000688 <string_print_Hex+0x68>
	{
		temp_buf = buf[temp_len];
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	4413      	add	r3, r2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	72fb      	strb	r3, [r7, #11]
		if(char2hex(temp_buf, temp_data) != 0)
 800063e:	f107 0208 	add.w	r2, r7, #8
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ffac 	bl	80005a4 <char2hex>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d004      	beq.n	800065c <string_print_Hex+0x3c>
		{
			printf("trans hex faill len[%d] \r\n", temp_len);
 8000652:	68f9      	ldr	r1, [r7, #12]
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <string_print_Hex+0x80>)
 8000656:	f01e f8e3 	bl	801e820 <iprintf>
			continue;
 800065a:	e012      	b.n	8000682 <string_print_Hex+0x62>
		}
		printf("%c%c ",temp_data[1],temp_data[0]);
 800065c:	7a7b      	ldrb	r3, [r7, #9]
 800065e:	4619      	mov	r1, r3
 8000660:	7a3b      	ldrb	r3, [r7, #8]
 8000662:	461a      	mov	r2, r3
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <string_print_Hex+0x84>)
 8000666:	f01e f8db 	bl	801e820 <iprintf>
		if((((temp_len + 1) % 16) == 0)&&(temp_len != 0))
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	2b00      	cmp	r3, #0
 8000674:	d105      	bne.n	8000682 <string_print_Hex+0x62>
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <string_print_Hex+0x62>
			printf("\r\n");
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <string_print_Hex+0x88>)
 800067e:	f01e f96b 	bl	801e958 <puts>
	for(temp_len = 0; temp_len < len; temp_len++)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3301      	adds	r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d3d1      	bcc.n	8000634 <string_print_Hex+0x14>
	}
	printf("\r\n");
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <string_print_Hex+0x88>)
 8000692:	f01e f961 	bl	801e958 <puts>
	return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	0801fd80 	.word	0x0801fd80
 80006a4:	0801fd9c 	.word	0x0801fd9c
 80006a8:	0801fda4 	.word	0x0801fda4

080006ac <httpc_init>:
uint16_t get_httpc_any_port(void);

/* Public & Private functions ------------------------------------------------*/

uint8_t httpc_init(uint8_t sock, uint8_t * ip, uint16_t port, uint8_t * sbuf, uint8_t * rbuf)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4603      	mov	r3, r0
 80006b8:	73fb      	strb	r3, [r7, #15]
 80006ba:	4613      	mov	r3, r2
 80006bc:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = HTTPC_FALSE;
 80006be:	2300      	movs	r3, #0
 80006c0:	75fb      	strb	r3, [r7, #23]

	if(sock <= _WIZCHIP_SOCK_NUM_)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	d81e      	bhi.n	8000706 <httpc_init+0x5a>
	{
		// Hardware socket number for HTTP client (0 ~ 7)
		httpsock = sock;
 80006c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <httpc_init+0x68>)
 80006ce:	701a      	strb	r2, [r3, #0]

		// Shared buffers: HTTP Send / Recevice
		httpc_send_buf = sbuf;
 80006d0:	4a11      	ldr	r2, [pc, #68]	; (8000718 <httpc_init+0x6c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
		httpc_recv_buf = rbuf;
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <httpc_init+0x70>)
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	6013      	str	r3, [r2, #0]

		// Destination IP address and Port number
		// (Destination = HTTP server)
		dest_ip[0] = ip[0];
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <httpc_init+0x74>)
 80006e2:	701a      	strb	r2, [r3, #0]
		dest_ip[1] = ip[1];
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	785a      	ldrb	r2, [r3, #1]
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <httpc_init+0x74>)
 80006ea:	705a      	strb	r2, [r3, #1]
		dest_ip[2] = ip[2];
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	789a      	ldrb	r2, [r3, #2]
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <httpc_init+0x74>)
 80006f2:	709a      	strb	r2, [r3, #2]
		dest_ip[3] = ip[3];
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	78da      	ldrb	r2, [r3, #3]
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <httpc_init+0x74>)
 80006fa:	70da      	strb	r2, [r3, #3]
		dest_port = port;
 80006fc:	4a09      	ldr	r2, [pc, #36]	; (8000724 <httpc_init+0x78>)
 80006fe:	89bb      	ldrh	r3, [r7, #12]
 8000700:	8013      	strh	r3, [r2, #0]

		ret = HTTPC_TRUE;
 8000702:	2301      	movs	r3, #1
 8000704:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8000706:	7dfb      	ldrb	r3, [r7, #23]
}
 8000708:	4618      	mov	r0, r3
 800070a:	371c      	adds	r7, #28
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	20000130 	.word	0x20000130
 8000718:	20000128 	.word	0x20000128
 800071c:	2000012c 	.word	0x2000012c
 8000720:	20000134 	.word	0x20000134
 8000724:	20000138 	.word	0x20000138

08000728 <httpc_connection_handler>:


// return: true / false
uint8_t httpc_connection_handler()
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b087      	sub	sp, #28
 800072c:	af02      	add	r7, sp, #8
	uint8_t ret = HTTPC_FALSE;
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]

	uint16_t source_port;

#ifdef _HTTPCLIENT_DEBUG_
	uint8_t destip[4] = {0, };
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	80fb      	strh	r3, [r7, #6]
#endif

	uint8_t state = getSn_SR(httpsock);
 800073a:	4b6d      	ldr	r3, [pc, #436]	; (80008f0 <httpc_connection_handler+0x1c8>)
 800073c:	f993 3000 	ldrsb.w	r3, [r3]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	3301      	adds	r3, #1
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800074a:	4618      	mov	r0, r3
 800074c:	f01c fcb4 	bl	801d0b8 <WIZCHIP_READ>
 8000750:	4603      	mov	r3, r0
 8000752:	73bb      	strb	r3, [r7, #14]
	switch(state)
 8000754:	7bbb      	ldrb	r3, [r7, #14]
 8000756:	2b1c      	cmp	r3, #28
 8000758:	f200 80c2 	bhi.w	80008e0 <httpc_connection_handler+0x1b8>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <httpc_connection_handler+0x3c>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	0800088d 	.word	0x0800088d
 8000768:	080008e1 	.word	0x080008e1
 800076c:	080008e1 	.word	0x080008e1
 8000770:	080008e1 	.word	0x080008e1
 8000774:	080008e1 	.word	0x080008e1
 8000778:	080008e1 	.word	0x080008e1
 800077c:	080008e1 	.word	0x080008e1
 8000780:	080008e1 	.word	0x080008e1
 8000784:	080008e1 	.word	0x080008e1
 8000788:	080008e1 	.word	0x080008e1
 800078c:	080008e1 	.word	0x080008e1
 8000790:	080008e1 	.word	0x080008e1
 8000794:	080008e1 	.word	0x080008e1
 8000798:	080008e1 	.word	0x080008e1
 800079c:	080008e1 	.word	0x080008e1
 80007a0:	080008e1 	.word	0x080008e1
 80007a4:	080008e1 	.word	0x080008e1
 80007a8:	080008e1 	.word	0x080008e1
 80007ac:	080008e1 	.word	0x080008e1
 80007b0:	080007d9 	.word	0x080007d9
 80007b4:	080008e1 	.word	0x080008e1
 80007b8:	080008e1 	.word	0x080008e1
 80007bc:	080008e1 	.word	0x080008e1
 80007c0:	080007df 	.word	0x080007df
 80007c4:	0800088d 	.word	0x0800088d
 80007c8:	080008e1 	.word	0x080008e1
 80007cc:	080008e1 	.word	0x080008e1
 80007d0:	080008e1 	.word	0x080008e1
 80007d4:	0800087d 	.word	0x0800087d
	{
		case SOCK_INIT:
			// state: connect
			ret = HTTPC_TRUE;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
			break;
 80007dc:	e083      	b.n	80008e6 <httpc_connection_handler+0x1be>

		case SOCK_ESTABLISHED:
			if(getSn_IR(httpsock) & Sn_IR_CON)
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <httpc_connection_handler+0x1c8>)
 80007e0:	f993 3000 	ldrsb.w	r3, [r3]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	3301      	adds	r3, #1
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80007ee:	4618      	mov	r0, r3
 80007f0:	f01c fc62 	bl	801d0b8 <WIZCHIP_READ>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d030      	beq.n	8000860 <httpc_connection_handler+0x138>
			{
#ifdef _HTTPCLIENT_DEBUG_
				// Serial debug message printout
				getsockopt(httpsock, SO_DESTIP, &destip);
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <httpc_connection_handler+0x1c8>)
 8000800:	f993 3000 	ldrsb.w	r3, [r3]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f107 0208 	add.w	r2, r7, #8
 800080a:	2104      	movs	r1, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f01d fb81 	bl	801df14 <getsockopt>
				getsockopt(httpsock, SO_DESTPORT, &destport);
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <httpc_connection_handler+0x1c8>)
 8000814:	f993 3000 	ldrsb.w	r3, [r3]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	1dba      	adds	r2, r7, #6
 800081c:	2105      	movs	r1, #5
 800081e:	4618      	mov	r0, r3
 8000820:	f01d fb78 	bl	801df14 <getsockopt>
				printf(" > HTTP CLIENT: CONNECTED TO - %d.%d.%d.%d : %d\r\n",destip[0], destip[1], destip[2], destip[3], destport);
 8000824:	7a3b      	ldrb	r3, [r7, #8]
 8000826:	4619      	mov	r1, r3
 8000828:	7a7b      	ldrb	r3, [r7, #9]
 800082a:	4618      	mov	r0, r3
 800082c:	7abb      	ldrb	r3, [r7, #10]
 800082e:	461c      	mov	r4, r3
 8000830:	7afb      	ldrb	r3, [r7, #11]
 8000832:	88fa      	ldrh	r2, [r7, #6]
 8000834:	9201      	str	r2, [sp, #4]
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	4623      	mov	r3, r4
 800083a:	4602      	mov	r2, r0
 800083c:	482d      	ldr	r0, [pc, #180]	; (80008f4 <httpc_connection_handler+0x1cc>)
 800083e:	f01d ffef 	bl	801e820 <iprintf>
#endif
				httpc_isConnected = HTTPC_TRUE;
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <httpc_connection_handler+0x1d0>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]

				setSn_IR(httpsock, Sn_IR_CON);
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <httpc_connection_handler+0x1c8>)
 800084a:	f993 3000 	ldrsb.w	r3, [r3]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	3301      	adds	r3, #1
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000858:	2101      	movs	r1, #1
 800085a:	4618      	mov	r0, r3
 800085c:	f01c fc78 	bl	801d150 <WIZCHIP_WRITE>
			}

			httpc_isReceived = getSn_RX_RSR(httpsock);
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <httpc_connection_handler+0x1c8>)
 8000862:	f993 3000 	ldrsb.w	r3, [r3]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f01c fdca 	bl	801d402 <getSn_RX_RSR>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <httpc_connection_handler+0x1d4>)
 8000874:	801a      	strh	r2, [r3, #0]
			ret = HTTPC_CONNECTED;
 8000876:	2302      	movs	r3, #2
 8000878:	73fb      	strb	r3, [r7, #15]
			break;
 800087a:	e034      	b.n	80008e6 <httpc_connection_handler+0x1be>

		case SOCK_CLOSE_WAIT:
			disconnect(httpsock);
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <httpc_connection_handler+0x1c8>)
 800087e:	f993 3000 	ldrsb.w	r3, [r3]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f01d f91f 	bl	801dac8 <disconnect>
			break;
 800088a:	e02c      	b.n	80008e6 <httpc_connection_handler+0x1be>

		case SOCK_FIN_WAIT:
		case SOCK_CLOSED:
			httpc_isSockOpen = HTTPC_FALSE;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <httpc_connection_handler+0x1d8>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
			httpc_isConnected = HTTPC_FALSE;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <httpc_connection_handler+0x1d0>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]

			source_port = get_httpc_any_port();
 8000898:	f000 f96a 	bl	8000b70 <get_httpc_any_port>
 800089c:	4603      	mov	r3, r0
 800089e:	81bb      	strh	r3, [r7, #12]
#ifdef _HTTPCLIENT_DEBUG_
			printf(" > HTTP CLIENT: source_port = %d\r\n", source_port);
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4817      	ldr	r0, [pc, #92]	; (8000904 <httpc_connection_handler+0x1dc>)
 80008a6:	f01d ffbb 	bl	801e820 <iprintf>
#endif

			if(socket(httpsock, Sn_MR_TCP, source_port, Sn_MR_ND) == httpsock)
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <httpc_connection_handler+0x1c8>)
 80008ac:	f993 3000 	ldrsb.w	r3, [r3]
 80008b0:	b2d8      	uxtb	r0, r3
 80008b2:	89ba      	ldrh	r2, [r7, #12]
 80008b4:	2320      	movs	r3, #32
 80008b6:	2101      	movs	r1, #1
 80008b8:	f01c fea6 	bl	801d608 <socket>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <httpc_connection_handler+0x1c8>)
 80008c2:	f993 3000 	ldrsb.w	r3, [r3]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d10c      	bne.n	80008e4 <httpc_connection_handler+0x1bc>
			{
				if(httpc_isSockOpen == HTTPC_FALSE)
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <httpc_connection_handler+0x1d8>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d108      	bne.n	80008e4 <httpc_connection_handler+0x1bc>
				{
#ifdef _HTTPCLIENT_DEBUG_
					printf(" > HTTP CLIENT: SOCKOPEN\r\n");
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <httpc_connection_handler+0x1e0>)
 80008d4:	f01e f840 	bl	801e958 <puts>
#endif
					httpc_isSockOpen = HTTPC_TRUE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <httpc_connection_handler+0x1d8>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
				}
			}


			break;
 80008de:	e001      	b.n	80008e4 <httpc_connection_handler+0x1bc>

		default:
			break;
 80008e0:	bf00      	nop
 80008e2:	e000      	b.n	80008e6 <httpc_connection_handler+0x1be>
			break;
 80008e4:	bf00      	nop
	}

	return ret;
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	20000130 	.word	0x20000130
 80008f4:	0801fdb8 	.word	0x0801fdb8
 80008f8:	2000013d 	.word	0x2000013d
 80008fc:	2000013e 	.word	0x2000013e
 8000900:	2000013c 	.word	0x2000013c
 8000904:	0801fdec 	.word	0x0801fdec
 8000908:	0801fe10 	.word	0x0801fe10

0800090c <httpc_connect>:


// return: socket status
uint8_t httpc_connect(wiz_tls_context* tlsContext)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint8_t ret = HTTPC_FALSE;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]

	if(httpsock >= 0)
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <httpc_connect+0x44>)
 800091a:	f993 3000 	ldrsb.w	r3, [r3]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db11      	blt.n	8000946 <httpc_connect+0x3a>
	{
		if(httpc_isSockOpen == HTTPC_TRUE)
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <httpc_connect+0x48>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d10d      	bne.n	8000946 <httpc_connect+0x3a>
		{
			// TCP connect
			ret = wiz_tls_connect(tlsContext, dest_port, dest_ip);//connect(httpsock, dest_ip, dest_port);
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <httpc_connect+0x4c>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <httpc_connect+0x50>)
 8000930:	4619      	mov	r1, r3
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f004 fa86 	bl	8004e44 <wiz_tls_connect>
 8000938:	4603      	mov	r3, r0
 800093a:	73fb      	strb	r3, [r7, #15]
			if(ret == SOCK_OK) ret = HTTPC_TRUE;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d101      	bne.n	8000946 <httpc_connect+0x3a>
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
		}
	}

	return ret;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000130 	.word	0x20000130
 8000954:	2000013c 	.word	0x2000013c
 8000958:	20000138 	.word	0x20000138
 800095c:	20000134 	.word	0x20000134

08000960 <httpc_send>:
}


// return: sent data length
uint16_t httpc_send(wiz_tls_context* tlsContext, HttpRequest * req, uint8_t * buf, uint8_t * body, uint16_t content_len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
	uint16_t i;
	uint16_t len;
	uint8_t http_header_generated = HTTPC_FAILED;
 800096e:	2300      	movs	r3, #0
 8000970:	74fb      	strb	r3, [r7, #19]

	if(httpc_isConnected == HTTPC_TRUE)
 8000972:	4b61      	ldr	r3, [pc, #388]	; (8000af8 <httpc_send+0x198>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	f040 80b6 	bne.w	8000ae8 <httpc_send+0x188>
	{
		do
		{
			memset(buf, 0x00, DATA_BUF_SIZE);
 800097c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f01d fe4e 	bl	801e624 <memset>

			/* HTTP request header */
			len = sprintf((char *)buf, "%s %s HTTP/1.1\r\n", req->method, req->uri);
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	495a      	ldr	r1, [pc, #360]	; (8000afc <httpc_send+0x19c>)
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f01e f898 	bl	801eac8 <siprintf>
 8000998:	4603      	mov	r3, r0
 800099a:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Host: %s\r\n", req->host);
 800099c:	8abb      	ldrh	r3, [r7, #20]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	18d0      	adds	r0, r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	461a      	mov	r2, r3
 80009a8:	4955      	ldr	r1, [pc, #340]	; (8000b00 <httpc_send+0x1a0>)
 80009aa:	f01e f88d 	bl	801eac8 <siprintf>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	8abb      	ldrh	r3, [r7, #20]
 80009b4:	4413      	add	r3, r2
 80009b6:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Connection: %s\r\n", req->connection);
 80009b8:	8abb      	ldrh	r3, [r7, #20]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	18d0      	adds	r0, r2, r3
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	461a      	mov	r2, r3
 80009c4:	494f      	ldr	r1, [pc, #316]	; (8000b04 <httpc_send+0x1a4>)
 80009c6:	f01e f87f 	bl	801eac8 <siprintf>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	8abb      	ldrh	r3, [r7, #20]
 80009d0:	4413      	add	r3, r2
 80009d2:	82bb      	strh	r3, [r7, #20]

			// HTTP content type: POST / PUT only
			if(content_len > 0)
 80009d4:	8c3b      	ldrh	r3, [r7, #32]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d032      	beq.n	8000a40 <httpc_send+0xe0>
			{
				len += sprintf((char *)buf+len, "Content-Length: %d\r\n", content_len);
 80009da:	8abb      	ldrh	r3, [r7, #20]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	4413      	add	r3, r2
 80009e0:	8c3a      	ldrh	r2, [r7, #32]
 80009e2:	4949      	ldr	r1, [pc, #292]	; (8000b08 <httpc_send+0x1a8>)
 80009e4:	4618      	mov	r0, r3
 80009e6:	f01e f86f 	bl	801eac8 <siprintf>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	8abb      	ldrh	r3, [r7, #20]
 80009f0:	4413      	add	r3, r2
 80009f2:	82bb      	strh	r3, [r7, #20]

				if(strcmp((char *)req->content_type, HTTP_CTYPE_MULTIPART_FORM) == 0)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	4944      	ldr	r1, [pc, #272]	; (8000b0c <httpc_send+0x1ac>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fbe8 	bl	80001d0 <strcmp>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10e      	bne.n	8000a24 <httpc_send+0xc4>
				{
					// HTTP content type: multipart/form-data
					len += sprintf((char *)buf+len, "Content-Type: %s; boundary=%s\r\n", req->content_type, formDataBoundary);
 8000a06:	8abb      	ldrh	r3, [r7, #20]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	18d0      	adds	r0, r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	4b3f      	ldr	r3, [pc, #252]	; (8000b10 <httpc_send+0x1b0>)
 8000a12:	4940      	ldr	r1, [pc, #256]	; (8000b14 <httpc_send+0x1b4>)
 8000a14:	f01e f858 	bl	801eac8 <siprintf>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	8abb      	ldrh	r3, [r7, #20]
 8000a1e:	4413      	add	r3, r2
 8000a20:	82bb      	strh	r3, [r7, #20]
 8000a22:	e00d      	b.n	8000a40 <httpc_send+0xe0>
				}
				else
				{
					// HTTP content type: others
					len += sprintf((char *)buf+len, "Content-Type: %s\r\n", req->content_type); // HTTP content type: others
 8000a24:	8abb      	ldrh	r3, [r7, #20]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	18d0      	adds	r0, r2, r3
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4939      	ldr	r1, [pc, #228]	; (8000b18 <httpc_send+0x1b8>)
 8000a32:	f01e f849 	bl	801eac8 <siprintf>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	8abb      	ldrh	r3, [r7, #20]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	82bb      	strh	r3, [r7, #20]
				}
			}
			len += sprintf((char *)buf+len, "\r\n");
 8000a40:	8abb      	ldrh	r3, [r7, #20]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4935      	ldr	r1, [pc, #212]	; (8000b1c <httpc_send+0x1bc>)
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f01e f83d 	bl	801eac8 <siprintf>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	8abb      	ldrh	r3, [r7, #20]
 8000a54:	4413      	add	r3, r2
 8000a56:	82bb      	strh	r3, [r7, #20]

			// Avoiding buffer overflow
			if((len + content_len) > DATA_BUF_SIZE) {
 8000a58:	8aba      	ldrh	r2, [r7, #20]
 8000a5a:	8c3b      	ldrh	r3, [r7, #32]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a62:	dd04      	ble.n	8000a6e <httpc_send+0x10e>
				content_len = DATA_BUF_SIZE - len; // HTTP request header re-generation (do-while)
 8000a64:	8abb      	ldrh	r3, [r7, #20]
 8000a66:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000a6a:	843b      	strh	r3, [r7, #32]
 8000a6c:	e001      	b.n	8000a72 <httpc_send+0x112>
				//http_header_generated = FAILED;
			} else {
				http_header_generated = HTTPC_SUCCESS;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	74fb      	strb	r3, [r7, #19]
			}
		} while(http_header_generated != HTTPC_SUCCESS);
 8000a72:	7cfb      	ldrb	r3, [r7, #19]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d181      	bne.n	800097c <httpc_send+0x1c>

		/* HTTP request body */
		for(i = 0; i < content_len; i++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	82fb      	strh	r3, [r7, #22]
 8000a7c:	e00d      	b.n	8000a9a <httpc_send+0x13a>
		{
			buf[len++] = body[i];
 8000a7e:	8afb      	ldrh	r3, [r7, #22]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	441a      	add	r2, r3
 8000a84:	8abb      	ldrh	r3, [r7, #20]
 8000a86:	1c59      	adds	r1, r3, #1
 8000a88:	82b9      	strh	r1, [r7, #20]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	440b      	add	r3, r1
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < content_len; i++)
 8000a94:	8afb      	ldrh	r3, [r7, #22]
 8000a96:	3301      	adds	r3, #1
 8000a98:	82fb      	strh	r3, [r7, #22]
 8000a9a:	8afa      	ldrh	r2, [r7, #22]
 8000a9c:	8c3b      	ldrh	r3, [r7, #32]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d3ed      	bcc.n	8000a7e <httpc_send+0x11e>
		}

//#ifdef _HTTPCLIENT_DEBUG_
		printf(" >> HTTP Request - Method: %s, URI: %s, Content-Length: %d\r\n", req->method, req->uri, content_len);
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	6819      	ldr	r1, [r3, #0]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	8c3b      	ldrh	r3, [r7, #32]
 8000aac:	481c      	ldr	r0, [pc, #112]	; (8000b20 <httpc_send+0x1c0>)
 8000aae:	f01d feb7 	bl	801e820 <iprintf>
		for(i = 0; i < len; i++) printf("%c", buf[i]);
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	82fb      	strh	r3, [r7, #22]
 8000ab6:	e009      	b.n	8000acc <httpc_send+0x16c>
 8000ab8:	8afb      	ldrh	r3, [r7, #22]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f01d fec5 	bl	801e850 <putchar>
 8000ac6:	8afb      	ldrh	r3, [r7, #22]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	82fb      	strh	r3, [r7, #22]
 8000acc:	8afa      	ldrh	r2, [r7, #22]
 8000ace:	8abb      	ldrh	r3, [r7, #20]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d3f1      	bcc.n	8000ab8 <httpc_send+0x158>
		printf("\r\n");
 8000ad4:	4813      	ldr	r0, [pc, #76]	; (8000b24 <httpc_send+0x1c4>)
 8000ad6:	f01d ff3f 	bl	801e958 <puts>
//#endif
		wiz_tls_write(tlsContext, buf, len);//send(httpsock, buf, len);
 8000ada:	8abb      	ldrh	r3, [r7, #20]
 8000adc:	461a      	mov	r2, r3
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f004 fa5d 	bl	8004fa0 <wiz_tls_write>
 8000ae6:	e001      	b.n	8000aec <httpc_send+0x18c>
	}
	else
	{
		len = HTTPC_FAILED;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	82bb      	strh	r3, [r7, #20]
	}

	return len;
 8000aec:	8abb      	ldrh	r3, [r7, #20]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000013d 	.word	0x2000013d
 8000afc:	0801fe44 	.word	0x0801fe44
 8000b00:	0801fe58 	.word	0x0801fe58
 8000b04:	0801fe64 	.word	0x0801fe64
 8000b08:	0801fe78 	.word	0x0801fe78
 8000b0c:	0801fe90 	.word	0x0801fe90
 8000b10:	0801fea4 	.word	0x0801fea4
 8000b14:	0801fecc 	.word	0x0801fecc
 8000b18:	0801feec 	.word	0x0801feec
 8000b1c:	0801ff04 	.word	0x0801ff04
 8000b20:	0801ff68 	.word	0x0801ff68
 8000b24:	0801ff64 	.word	0x0801ff64

08000b28 <httpc_recv>:


// return: received data length
uint16_t httpc_recv(wiz_tls_context* tlsContext, uint8_t * buf, uint16_t len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	4613      	mov	r3, r2
 8000b34:	80fb      	strh	r3, [r7, #6]
	uint16_t recvlen;

	if(httpc_isConnected == HTTPC_TRUE)
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <httpc_recv+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d10f      	bne.n	8000b5e <httpc_recv+0x36>
	{
		if(len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b44:	d902      	bls.n	8000b4c <httpc_recv+0x24>
 8000b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b4a:	80fb      	strh	r3, [r7, #6]
		recvlen = wiz_tls_read(tlsContext, buf, len);//recv(httpsock, buf, len);
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f004 fa12 	bl	8004f7c <wiz_tls_read>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	82fb      	strh	r3, [r7, #22]
 8000b5c:	e001      	b.n	8000b62 <httpc_recv+0x3a>
	}
	else
	{
		recvlen = HTTPC_FAILED;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	82fb      	strh	r3, [r7, #22]
	}

	return recvlen;
 8000b62:	8afb      	ldrh	r3, [r7, #22]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000013d 	.word	0x2000013d

08000b70 <get_httpc_any_port>:
}


// return: source port number for tcp client
uint16_t get_httpc_any_port(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	if(httpc_any_port)
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <get_httpc_any_port+0x74>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d014      	beq.n	8000ba6 <get_httpc_any_port+0x36>
	{
		if((httpc_any_port >= HTTP_CLIENT_PORT_MIN) && (httpc_any_port < HTTP_CLIENT_PORT_MAX)) {
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <get_httpc_any_port+0x74>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 8000b84:	d30c      	bcc.n	8000ba0 <get_httpc_any_port+0x30>
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <get_httpc_any_port+0x74>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d006      	beq.n	8000ba0 <get_httpc_any_port+0x30>
			httpc_any_port++;
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <get_httpc_any_port+0x74>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <get_httpc_any_port+0x74>)
 8000b9c:	801a      	strh	r2, [r3, #0]
 8000b9e:	e002      	b.n	8000ba6 <get_httpc_any_port+0x36>
		} else {
			httpc_any_port = 0;
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <get_httpc_any_port+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	801a      	strh	r2, [r3, #0]
		}
	}

	if(httpc_any_port < HTTP_CLIENT_PORT_MIN)
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <get_httpc_any_port+0x74>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 8000bae:	d214      	bcs.n	8000bda <get_httpc_any_port+0x6a>
	{
		// todo: get random seed value
		httpc_any_port = (rand() % 10000) + 46000; // 46000 ~ 55999
 8000bb0:	f01d ff08 	bl	801e9c4 <rand>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <get_httpc_any_port+0x78>)
 8000bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbc:	1311      	asrs	r1, r2, #12
 8000bbe:	17da      	asrs	r2, r3, #31
 8000bc0:	1a8a      	subs	r2, r1, r2
 8000bc2:	f242 7110 	movw	r1, #10000	; 0x2710
 8000bc6:	fb01 f202 	mul.w	r2, r1, r2
 8000bca:	1a9a      	subs	r2, r3, r2
 8000bcc:	b293      	uxth	r3, r2
 8000bce:	f5a3 4398 	sub.w	r3, r3, #19456	; 0x4c00
 8000bd2:	3b50      	subs	r3, #80	; 0x50
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <get_httpc_any_port+0x74>)
 8000bd8:	801a      	strh	r2, [r3, #0]
	}

	return httpc_any_port;
 8000bda:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <get_httpc_any_port+0x74>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000013a 	.word	0x2000013a
 8000be8:	68db8bad 	.word	0x68db8bad

08000bec <_write>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void print_network_information(void);

int _write(int fd, char *str, int len)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e00b      	b.n	8000c16 <_write+0x2a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	18d1      	adds	r1, r2, r3
 8000c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <_write+0x3c>)
 8000c0c:	f003 fc9b 	bl	8004546 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	dbef      	blt.n	8000bfe <_write+0x12>
	}
	return len;
 8000c1e:	687b      	ldr	r3, [r7, #4]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000294 	.word	0x20000294

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int len, server_fd = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  unsigned int ret = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3a:	f000 ff85 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3e:	f000 f895 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c42:	f000 fa05 	bl	8001050 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c46:	f000 f90f 	bl	8000e68 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000c4a:	f000 f93b 	bl	8000ec4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000c4e:	f000 f969 	bl	8000f24 <MX_SPI1_Init>
  MX_CRC_Init();
 8000c52:	f000 f8f5 	bl	8000e40 <MX_CRC_Init>
  MX_SPI2_Init();
 8000c56:	f000 f99b 	bl	8000f90 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000c5a:	f000 f9cf 	bl	8000ffc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  w5500_init(&w5500);
 8000c5e:	4834      	ldr	r0, [pc, #208]	; (8000d30 <main+0x104>)
 8000c60:	f000 feda 	bl	8001a18 <w5500_init>
  print_network_information();
 8000c64:	f000 fb34 	bl	80012d0 <print_network_information>
  httpc_init(0, Domain_IP, 4443, g_send_buf, g_recv_buf);
 8000c68:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <main+0x108>)
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <main+0x10c>)
 8000c6e:	f241 125b 	movw	r2, #4443	; 0x115b
 8000c72:	4932      	ldr	r1, [pc, #200]	; (8000d3c <main+0x110>)
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fd19 	bl	80006ac <httpc_init>
  /*  initialize ssl context  */
//  printf("FIRST: %d\n", HAL_GetTick());
  ret = wiz_tls_init(&tlsContext, &server_fd);
 8000c7a:	f107 0210 	add.w	r2, r7, #16
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f004 f82c 	bl	8004ce0 <wiz_tls_init>
 8000c88:	61b8      	str	r0, [r7, #24]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  httpc_connection_handler();
 8000c8a:	f7ff fd4d 	bl	8000728 <httpc_connection_handler>
	  if(httpc_isSockOpen)
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <main+0x114>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <main+0x72>
	  {
		  httpc_connect(&tlsContext);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fe37 	bl	800090c <httpc_connect>
	  }
	  // HTTP client example
	  if(httpc_isConnected)
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <main+0x118>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d013      	beq.n	8000cce <main+0xa2>
	  {
		  // Send: HTTP request
		  request.method = (uint8_t *)HTTP_GET;
 8000ca6:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <main+0x11c>)
 8000ca8:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <main+0x120>)
 8000caa:	601a      	str	r2, [r3, #0]
		  request.uri = (uint8_t *)URI;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <main+0x11c>)
 8000cae:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <main+0x124>)
 8000cb0:	605a      	str	r2, [r3, #4]
		  request.host = (uint8_t *)Domain_name;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <main+0x11c>)
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <main+0x128>)
 8000cb6:	609a      	str	r2, [r3, #8]

		  // HTTP client example #1: Function for send HTTP request (header and body fields are integrated)
		  {
			  httpc_send(&tlsContext, &request, g_recv_buf, g_send_buf, 0);
 8000cb8:	4638      	mov	r0, r7
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <main+0x10c>)
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <main+0x108>)
 8000cc2:	4921      	ldr	r1, [pc, #132]	; (8000d48 <main+0x11c>)
 8000cc4:	f7ff fe4c 	bl	8000960 <httpc_send>
			  //httpc_add_customHeader_field(tmpbuf, "Key", "auth_key_string"); // custom header field extended - example #2
			  //httpc_send_header(&request, g_recv_buf, tmpbuf, len);
			  //httpc_send_body(g_send_buf, len);
		  }

		  flag_sent_http_request = ENABLE;
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <main+0x12c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
	  }
	  // Recv: HTTP response
	  if(httpc_isReceived > 0)
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <main+0x130>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d026      	beq.n	8000d24 <main+0xf8>
	  {
		  len = httpc_recv(&tlsContext, g_recv_buf, httpc_isReceived);
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <main+0x130>)
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4915      	ldr	r1, [pc, #84]	; (8000d34 <main+0x108>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff22 	bl	8000b28 <httpc_recv>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	617b      	str	r3, [r7, #20]

		  printf(" >> HTTP Response - Received len: %d\r\n", len);
 8000ce8:	6979      	ldr	r1, [r7, #20]
 8000cea:	481d      	ldr	r0, [pc, #116]	; (8000d60 <main+0x134>)
 8000cec:	f01d fd98 	bl	801e820 <iprintf>
		  printf("======================================================\r\n");
 8000cf0:	481c      	ldr	r0, [pc, #112]	; (8000d64 <main+0x138>)
 8000cf2:	f01d fe31 	bl	801e958 <puts>
		  for(int i = 0; i < len; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	e009      	b.n	8000d10 <main+0xe4>
			  printf("%c", g_recv_buf[i]);
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <main+0x108>)
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f01d fda3 	bl	801e850 <putchar>
		  for(int i = 0; i < len; i++)
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
 8000d10:	69fa      	ldr	r2, [r7, #28]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf1      	blt.n	8000cfc <main+0xd0>
		  printf("\r\n");
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <main+0x13c>)
 8000d1a:	f01d fe1d 	bl	801e958 <puts>
		  printf("======================================================\r\n");
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <main+0x138>)
 8000d20:	f01d fe1a 	bl	801e958 <puts>
	  }
	  HAL_Delay(2000);
 8000d24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d28:	f000 ff80 	bl	8001c2c <HAL_Delay>
	  httpc_connection_handler();
 8000d2c:	e7ad      	b.n	8000c8a <main+0x5e>
 8000d2e:	bf00      	nop
 8000d30:	200002d8 	.word	0x200002d8
 8000d34:	20000af8 	.word	0x20000af8
 8000d38:	200002f8 	.word	0x200002f8
 8000d3c:	20000018 	.word	0x20000018
 8000d40:	2000013c 	.word	0x2000013c
 8000d44:	2000013d 	.word	0x2000013d
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	0801ffec 	.word	0x0801ffec
 8000d50:	2000002c 	.word	0x2000002c
 8000d54:	2000001c 	.word	0x2000001c
 8000d58:	200002f7 	.word	0x200002f7
 8000d5c:	2000013e 	.word	0x2000013e
 8000d60:	0801fff0 	.word	0x0801fff0
 8000d64:	08020018 	.word	0x08020018
 8000d68:	08020050 	.word	0x08020050

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f01d fc52 	bl	801e624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 ffda 	bl	8002dac <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfe:	f000 fad3 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2105      	movs	r1, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fa3b 	bl	800329c <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e2c:	f000 fabc 	bl	80013a8 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_CRC_Init+0x20>)
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <MX_CRC_Init+0x24>)
 8000e48:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_CRC_Init+0x20>)
 8000e4c:	f000 fff7 	bl	8001e3e <HAL_CRC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e56:	f000 faa7 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000140 	.word	0x20000140
 8000e64:	40023000 	.word	0x40023000

08000e68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <MX_I2C1_Init+0x54>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_I2C1_Init+0x58>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea6:	f001 f99d 	bl	80021e4 <HAL_I2C_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eb0:	f000 fa7a 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000148 	.word	0x20000148
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	000186a0 	.word	0x000186a0

08000ec4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <MX_I2S3_Init+0x58>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <MX_I2S3_Init+0x5c>)
 8000eee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_I2S3_Init+0x54>)
 8000f04:	f001 fab2 	bl	800246c <HAL_I2S_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f0e:	f000 fa4b 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000019c 	.word	0x2000019c
 8000f1c:	40003c00 	.word	0x40003c00
 8000f20:	00017700 	.word	0x00017700

08000f24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f2a:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <MX_SPI1_Init+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f70:	220a      	movs	r2, #10
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f76:	f002 fcf1 	bl	800395c <HAL_SPI_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f80:	f000 fa12 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200001e4 	.word	0x200001e4
 8000f8c:	40013000 	.word	0x40013000

08000f90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <MX_SPI2_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fc4:	2218      	movs	r2, #24
 8000fc6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fdc:	220a      	movs	r2, #10
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_SPI2_Init+0x64>)
 8000fe2:	f002 fcbb 	bl	800395c <HAL_SPI_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fec:	f000 f9dc 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000023c 	.word	0x2000023c
 8000ff8:	40003800 	.word	0x40003800

08000ffc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_USART2_UART_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001034:	f003 fa3a 	bl	80044ac <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800103e:	f000 f9b3 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000294 	.word	0x20000294
 800104c:	40004400 	.word	0x40004400

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	4b93      	ldr	r3, [pc, #588]	; (80012b8 <MX_GPIO_Init+0x268>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a92      	ldr	r2, [pc, #584]	; (80012b8 <MX_GPIO_Init+0x268>)
 8001070:	f043 0310 	orr.w	r3, r3, #16
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b90      	ldr	r3, [pc, #576]	; (80012b8 <MX_GPIO_Init+0x268>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	4b8c      	ldr	r3, [pc, #560]	; (80012b8 <MX_GPIO_Init+0x268>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a8b      	ldr	r2, [pc, #556]	; (80012b8 <MX_GPIO_Init+0x268>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <MX_GPIO_Init+0x268>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b85      	ldr	r3, [pc, #532]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a84      	ldr	r2, [pc, #528]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b82      	ldr	r3, [pc, #520]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b7e      	ldr	r3, [pc, #504]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a7d      	ldr	r2, [pc, #500]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b7b      	ldr	r3, [pc, #492]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b77      	ldr	r3, [pc, #476]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a76      	ldr	r2, [pc, #472]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b74      	ldr	r3, [pc, #464]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b70      	ldr	r3, [pc, #448]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a6f      	ldr	r2, [pc, #444]	; (80012b8 <MX_GPIO_Init+0x268>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b6d      	ldr	r3, [pc, #436]	; (80012b8 <MX_GPIO_Init+0x268>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2108      	movs	r1, #8
 8001112:	486a      	ldr	r0, [pc, #424]	; (80012bc <MX_GPIO_Init+0x26c>)
 8001114:	f001 f84c 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2101      	movs	r1, #1
 800111c:	4868      	ldr	r0, [pc, #416]	; (80012c0 <MX_GPIO_Init+0x270>)
 800111e:	f001 f847 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin|W5500_RST_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001128:	4866      	ldr	r0, [pc, #408]	; (80012c4 <MX_GPIO_Init+0x274>)
 800112a:	f001 f841 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800112e:	2200      	movs	r2, #0
 8001130:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001134:	4864      	ldr	r0, [pc, #400]	; (80012c8 <MX_GPIO_Init+0x278>)
 8001136:	f001 f83b 	bl	80021b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800113a:	2308      	movs	r3, #8
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	485a      	ldr	r0, [pc, #360]	; (80012bc <MX_GPIO_Init+0x26c>)
 8001152:	f000 fe91 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001156:	2301      	movs	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4854      	ldr	r0, [pc, #336]	; (80012c0 <MX_GPIO_Init+0x270>)
 800116e:	f000 fe83 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001172:	2308      	movs	r3, #8
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001182:	2305      	movs	r3, #5
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	484c      	ldr	r0, [pc, #304]	; (80012c0 <MX_GPIO_Init+0x270>)
 800118e:	f000 fe73 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001196:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4849      	ldr	r0, [pc, #292]	; (80012cc <MX_GPIO_Init+0x27c>)
 80011a8:	f000 fe66 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80011ac:	2304      	movs	r3, #4
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4841      	ldr	r0, [pc, #260]	; (80012c4 <MX_GPIO_Init+0x274>)
 80011c0:	f000 fe5a 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80011c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d6:	2305      	movs	r3, #5
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4838      	ldr	r0, [pc, #224]	; (80012c4 <MX_GPIO_Init+0x274>)
 80011e2:	f000 fe49 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2302      	movs	r3, #2
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4831      	ldr	r0, [pc, #196]	; (80012c4 <MX_GPIO_Init+0x274>)
 8001200:	f000 fe3a 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8001204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4829      	ldr	r0, [pc, #164]	; (80012c4 <MX_GPIO_Init+0x274>)
 800121e:	f000 fe2b 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001222:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001226:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4823      	ldr	r0, [pc, #140]	; (80012c8 <MX_GPIO_Init+0x278>)
 800123c:	f000 fe1c 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	481d      	ldr	r0, [pc, #116]	; (80012cc <MX_GPIO_Init+0x27c>)
 8001256:	f000 fe0f 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800125a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800126c:	230a      	movs	r3, #10
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	4815      	ldr	r0, [pc, #84]	; (80012cc <MX_GPIO_Init+0x27c>)
 8001278:	f000 fdfe 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800127c:	2320      	movs	r3, #32
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <MX_GPIO_Init+0x278>)
 8001290:	f000 fdf2 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001294:	2302      	movs	r3, #2
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001298:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_GPIO_Init+0x26c>)
 80012aa:	f000 fde5 	bl	8001e78 <HAL_GPIO_Init>

}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	; 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40020000 	.word	0x40020000

080012d0 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af04      	add	r7, sp, #16
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", w5500.netinfo.mac[0], w5500.netinfo.mac[1], w5500.netinfo.mac[2], w5500.netinfo.mac[3], w5500.netinfo.mac[4], w5500.netinfo.mac[5]);
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <print_network_information+0xc0>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <print_network_information+0xc0>)
 80012de:	785b      	ldrb	r3, [r3, #1]
 80012e0:	461c      	mov	r4, r3
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <print_network_information+0xc0>)
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	461d      	mov	r5, r3
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <print_network_information+0xc0>)
 80012ea:	78db      	ldrb	r3, [r3, #3]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <print_network_information+0xc0>)
 80012f0:	791b      	ldrb	r3, [r3, #4]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <print_network_information+0xc0>)
 80012f6:	795b      	ldrb	r3, [r3, #5]
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	9101      	str	r1, [sp, #4]
 80012fc:	9200      	str	r2, [sp, #0]
 80012fe:	462b      	mov	r3, r5
 8001300:	4622      	mov	r2, r4
 8001302:	4601      	mov	r1, r0
 8001304:	4823      	ldr	r0, [pc, #140]	; (8001394 <print_network_information+0xc4>)
 8001306:	f01d fa8b 	bl	801e820 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r", w5500.netinfo.ip[0], w5500.netinfo.ip[1], w5500.netinfo.ip[2], w5500.netinfo.ip[3]);
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <print_network_information+0xc0>)
 800130c:	799b      	ldrb	r3, [r3, #6]
 800130e:	4619      	mov	r1, r3
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <print_network_information+0xc0>)
 8001312:	79db      	ldrb	r3, [r3, #7]
 8001314:	461a      	mov	r2, r3
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <print_network_information+0xc0>)
 8001318:	7a1b      	ldrb	r3, [r3, #8]
 800131a:	4618      	mov	r0, r3
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <print_network_information+0xc0>)
 800131e:	7a5b      	ldrb	r3, [r3, #9]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4603      	mov	r3, r0
 8001324:	481c      	ldr	r0, [pc, #112]	; (8001398 <print_network_information+0xc8>)
 8001326:	f01d fa7b 	bl	801e820 <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r", w5500.netinfo.sn[0], w5500.netinfo.sn[1], w5500.netinfo.sn[2], w5500.netinfo.sn[3]);
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <print_network_information+0xc0>)
 800132c:	7a9b      	ldrb	r3, [r3, #10]
 800132e:	4619      	mov	r1, r3
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <print_network_information+0xc0>)
 8001332:	7adb      	ldrb	r3, [r3, #11]
 8001334:	461a      	mov	r2, r3
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <print_network_information+0xc0>)
 8001338:	7b1b      	ldrb	r3, [r3, #12]
 800133a:	4618      	mov	r0, r3
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <print_network_information+0xc0>)
 800133e:	7b5b      	ldrb	r3, [r3, #13]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	4603      	mov	r3, r0
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <print_network_information+0xcc>)
 8001346:	f01d fa6b 	bl	801e820 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r", w5500.netinfo.gw[0], w5500.netinfo.gw[1], w5500.netinfo.gw[2], w5500.netinfo.gw[3]);
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <print_network_information+0xc0>)
 800134c:	7b9b      	ldrb	r3, [r3, #14]
 800134e:	4619      	mov	r1, r3
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <print_network_information+0xc0>)
 8001352:	7bdb      	ldrb	r3, [r3, #15]
 8001354:	461a      	mov	r2, r3
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <print_network_information+0xc0>)
 8001358:	7c1b      	ldrb	r3, [r3, #16]
 800135a:	4618      	mov	r0, r3
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <print_network_information+0xc0>)
 800135e:	7c5b      	ldrb	r3, [r3, #17]
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	4603      	mov	r3, r0
 8001364:	480e      	ldr	r0, [pc, #56]	; (80013a0 <print_network_information+0xd0>)
 8001366:	f01d fa5b 	bl	801e820 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r", w5500.netinfo.dns[0], w5500.netinfo.dns[1], w5500.netinfo.dns[2], w5500.netinfo.dns[3]);
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <print_network_information+0xc0>)
 800136c:	7c9b      	ldrb	r3, [r3, #18]
 800136e:	4619      	mov	r1, r3
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <print_network_information+0xc0>)
 8001372:	7cdb      	ldrb	r3, [r3, #19]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <print_network_information+0xc0>)
 8001378:	7d1b      	ldrb	r3, [r3, #20]
 800137a:	4618      	mov	r0, r3
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <print_network_information+0xc0>)
 800137e:	7d5b      	ldrb	r3, [r3, #21]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	4603      	mov	r3, r0
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <print_network_information+0xd4>)
 8001386:	f01d fa4b 	bl	801e820 <iprintf>
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	200002d8 	.word	0x200002d8
 8001394:	08020054 	.word	0x08020054
 8001398:	08020084 	.word	0x08020084
 800139c:	080200a0 	.word	0x080200a0
 80013a0:	080200bc 	.word	0x080200bc
 80013a4:	080200d8 	.word	0x080200d8

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <Error_Handler+0x8>
	...

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <HAL_MspInit+0x4c>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_MspInit+0x4c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_MspInit+0x4c>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013f2:	2007      	movs	r0, #7
 80013f4:	f000 fcf0 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_CRC_MspInit+0x3c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10d      	bne.n	8001432 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_CRC_MspInit+0x40>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a09      	ldr	r2, [pc, #36]	; (8001444 <HAL_CRC_MspInit+0x40>)
 8001420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <HAL_CRC_MspInit+0x40>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023000 	.word	0x40023000
 8001444:	40023800 	.word	0x40023800

08001448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <HAL_I2C_MspInit+0x84>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12c      	bne.n	80014c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_I2C_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_I2C_MspInit+0x88>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_I2C_MspInit+0x88>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001486:	f44f 7310 	mov.w	r3, #576	; 0x240
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148c:	2312      	movs	r3, #18
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001490:	2301      	movs	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001498:	2304      	movs	r3, #4
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480c      	ldr	r0, [pc, #48]	; (80014d4 <HAL_I2C_MspInit+0x8c>)
 80014a4:	f000 fce8 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_I2C_MspInit+0x88>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_I2C_MspInit+0x88>)
 80014b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_I2C_MspInit+0x88>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40005400 	.word	0x40005400
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020400 	.word	0x40020400

080014d8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a31      	ldr	r2, [pc, #196]	; (80015c8 <HAL_I2S_MspInit+0xf0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d15a      	bne.n	80015be <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001508:	2301      	movs	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800150c:	23c0      	movs	r3, #192	; 0xc0
 800150e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001510:	2302      	movs	r3, #2
 8001512:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4618      	mov	r0, r3
 800151a:	f002 f8df 	bl	80036dc <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001524:	f7ff ff40 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_I2S_MspInit+0xf4>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a26      	ldr	r2, [pc, #152]	; (80015cc <HAL_I2S_MspInit+0xf4>)
 8001532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_I2S_MspInit+0xf4>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_I2S_MspInit+0xf4>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_I2S_MspInit+0xf4>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6313      	str	r3, [r2, #48]	; 0x30
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_I2S_MspInit+0xf4>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_I2S_MspInit+0xf4>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_I2S_MspInit+0xf4>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6313      	str	r3, [r2, #48]	; 0x30
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_I2S_MspInit+0xf4>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800157c:	2310      	movs	r3, #16
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800158c:	2306      	movs	r3, #6
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	480e      	ldr	r0, [pc, #56]	; (80015d0 <HAL_I2S_MspInit+0xf8>)
 8001598:	f000 fc6e 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800159c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ae:	2306      	movs	r3, #6
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	4806      	ldr	r0, [pc, #24]	; (80015d4 <HAL_I2S_MspInit+0xfc>)
 80015ba:	f000 fc5d 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3738      	adds	r7, #56	; 0x38
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40003c00 	.word	0x40003c00
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020800 	.word	0x40020800

080015d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a41      	ldr	r2, [pc, #260]	; (80016fc <HAL_SPI_MspInit+0x124>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <HAL_SPI_MspInit+0x128>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a3f      	ldr	r2, [pc, #252]	; (8001700 <HAL_SPI_MspInit+0x128>)
 8001604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_SPI_MspInit+0x128>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <HAL_SPI_MspInit+0x128>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a38      	ldr	r2, [pc, #224]	; (8001700 <HAL_SPI_MspInit+0x128>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_SPI_MspInit+0x128>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001632:	23e0      	movs	r3, #224	; 0xe0
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001642:	2305      	movs	r3, #5
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	482d      	ldr	r0, [pc, #180]	; (8001704 <HAL_SPI_MspInit+0x12c>)
 800164e:	f000 fc13 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001652:	e04f      	b.n	80016f4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2b      	ldr	r2, [pc, #172]	; (8001708 <HAL_SPI_MspInit+0x130>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d14a      	bne.n	80016f4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_SPI_MspInit+0x128>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a26      	ldr	r2, [pc, #152]	; (8001700 <HAL_SPI_MspInit+0x128>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_SPI_MspInit+0x128>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_SPI_MspInit+0x128>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_SPI_MspInit+0x128>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_SPI_MspInit+0x128>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_SPI_MspInit+0x128>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <HAL_SPI_MspInit+0x128>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_SPI_MspInit+0x128>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = W5500_MISO_Pin;
 80016b2:	2304      	movs	r3, #4
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c2:	2305      	movs	r3, #5
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(W5500_MISO_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <HAL_SPI_MspInit+0x134>)
 80016ce:	f000 fbd3 	bl	8001e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MOSI_Pin;
 80016d2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e4:	2305      	movs	r3, #5
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <HAL_SPI_MspInit+0x138>)
 80016f0:	f000 fbc2 	bl	8001e78 <HAL_GPIO_Init>
}
 80016f4:	bf00      	nop
 80016f6:	3730      	adds	r7, #48	; 0x30
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40013000 	.word	0x40013000
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000
 8001708:	40003800 	.word	0x40003800
 800170c:	40020800 	.word	0x40020800
 8001710:	40020400 	.word	0x40020400

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_UART_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12b      	bne.n	800178e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_UART_MspInit+0x88>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_UART_MspInit+0x88>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_UART_MspInit+0x88>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_UART_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_UART_MspInit+0x88>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_UART_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PRINT_TX_Pin|PRINT_RX_Pin;
 800176e:	230c      	movs	r3, #12
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177e:	2307      	movs	r3, #7
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_UART_MspInit+0x8c>)
 800178a:	f000 fb75 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40004400 	.word	0x40004400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler+0x4>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <MemManage_Handler+0x4>

080017b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f9fc 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
	return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_kill>:

int _kill(int pid, int sig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001812:	f01c fe95 	bl	801e540 <__errno>
 8001816:	4603      	mov	r3, r0
 8001818:	2216      	movs	r2, #22
 800181a:	601a      	str	r2, [r3, #0]
	return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_exit>:

void _exit (int status)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffe7 	bl	8001808 <_kill>
	while (1) {}		/* Make sure we hang here */
 800183a:	e7fe      	b.n	800183a <_exit+0x12>

0800183c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
	}

return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189e:	605a      	str	r2, [r3, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_isatty>:

int _isatty(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	return 1;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f01c fe16 	bl	801e540 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20020000 	.word	0x20020000
 8001940:	00000400 	.word	0x00000400
 8001944:	200012f8 	.word	0x200012f8
 8001948:	20003968 	.word	0x20003968

0800194c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <w5500_select>:
#include "wizchip.h"
#include "string.h"


static void w5500_select(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	4802      	ldr	r0, [pc, #8]	; (8001984 <w5500_select+0x14>)
 800197c:	f000 fc18 	bl	80021b0 <HAL_GPIO_WritePin>
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020400 	.word	0x40020400

08001988 <w5500_unselect>:

static void w5500_unselect(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001992:	4802      	ldr	r0, [pc, #8]	; (800199c <w5500_unselect+0x14>)
 8001994:	f000 fc0c 	bl	80021b0 <HAL_GPIO_WritePin>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40020400 	.word	0x40020400

080019a0 <w5500_read_byte>:

static uint8_t w5500_read_byte(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
    uint8_t rb;
    HAL_SPI_Receive(W5500_SPI_PORT, &rb, 1, HAL_MAX_DELAY);
 80019a6:	1df9      	adds	r1, r7, #7
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	2201      	movs	r2, #1
 80019ae:	4804      	ldr	r0, [pc, #16]	; (80019c0 <w5500_read_byte+0x20>)
 80019b0:	f002 f999 	bl	8003ce6 <HAL_SPI_Receive>
    return rb;
 80019b4:	79fb      	ldrb	r3, [r7, #7]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000023c 	.word	0x2000023c

080019c4 <w5500_write_byte>:

static void w5500_write_byte(uint8_t wb)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(W5500_SPI_PORT, &wb, 1, HAL_MAX_DELAY);
 80019ce:	1df9      	adds	r1, r7, #7
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	2201      	movs	r2, #1
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <w5500_write_byte+0x20>)
 80019d8:	f002 f849 	bl	8003a6e <HAL_SPI_Transmit>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000023c 	.word	0x2000023c

080019e8 <w5500_hw_reset>:

static void w5500_hw_reset(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f2:	4808      	ldr	r0, [pc, #32]	; (8001a14 <w5500_hw_reset+0x2c>)
 80019f4:	f000 fbdc 	bl	80021b0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80019f8:	200a      	movs	r0, #10
 80019fa:	f000 f917 	bl	8001c2c <HAL_Delay>
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <w5500_hw_reset+0x2c>)
 8001a06:	f000 fbd3 	bl	80021b0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f000 f90e 	bl	8001c2c <HAL_Delay>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40020400 	.word	0x40020400

08001a18 <w5500_init>:

void w5500_init(w5500chip_t *chip)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	/*link up architecture based spi cntrl funcs to lib funcs*/
	reg_wizchip_cs_cbfunc(w5500_select, w5500_unselect);
 8001a20:	492c      	ldr	r1, [pc, #176]	; (8001ad4 <w5500_init+0xbc>)
 8001a22:	482d      	ldr	r0, [pc, #180]	; (8001ad8 <w5500_init+0xc0>)
 8001a24:	f01c fbda 	bl	801e1dc <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(w5500_read_byte, w5500_write_byte);
 8001a28:	492c      	ldr	r1, [pc, #176]	; (8001adc <w5500_init+0xc4>)
 8001a2a:	482d      	ldr	r0, [pc, #180]	; (8001ae0 <w5500_init+0xc8>)
 8001a2c:	f01c fbfc 	bl	801e228 <reg_wizchip_spi_cbfunc>
	w5500_hw_reset();
 8001a30:	f7ff ffda 	bl	80019e8 <w5500_hw_reset>
	/*split up rxtx buffer among sockets*/
	chip->rxtx_buff[SOCK_0] = 16;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2210      	movs	r2, #16
 8001a38:	75da      	strb	r2, [r3, #23]
	chip->rxtx_buff[SOCK_1] = 0;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	761a      	strb	r2, [r3, #24]
	chip->rxtx_buff[SOCK_2] = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	765a      	strb	r2, [r3, #25]
	chip->rxtx_buff[SOCK_3] = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	769a      	strb	r2, [r3, #26]
	chip->rxtx_buff[SOCK_4] = 0;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	76da      	strb	r2, [r3, #27]
	chip->rxtx_buff[SOCK_5] = 0;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
	chip->rxtx_buff[SOCK_6] = 0;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	775a      	strb	r2, [r3, #29]
	chip->rxtx_buff[SOCK_7] = 0;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	779a      	strb	r2, [r3, #30]

	uint8_t mac[6] = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef};
 8001a64:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <w5500_init+0xcc>)
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a6e:	6018      	str	r0, [r3, #0]
 8001a70:	3304      	adds	r3, #4
 8001a72:	8019      	strh	r1, [r3, #0]
	memcpy(chip->netinfo.mac, mac, 6);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	6010      	str	r0, [r2, #0]
 8001a80:	889b      	ldrh	r3, [r3, #4]
 8001a82:	8093      	strh	r3, [r2, #4]

	uint8_t ip[4] = {192, 168, 0, 3};
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <w5500_init+0xd0>)
 8001a86:	617b      	str	r3, [r7, #20]
	memcpy(chip->netinfo.ip, ip, 4);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3306      	adds	r3, #6
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]

	/*setting subnet mask*/
	uint8_t sn[4] = {255, 255, 252, 0};
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <w5500_init+0xd4>)
 8001a92:	613b      	str	r3, [r7, #16]
	memcpy(chip->netinfo.sn, sn, 4);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	330a      	adds	r3, #10
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	601a      	str	r2, [r3, #0]

	/*setting gateway*/
	uint8_t gw[4] = {192, 168, 0, 2};
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <w5500_init+0xd8>)
 8001a9e:	60fb      	str	r3, [r7, #12]
	memcpy(chip->netinfo.gw, gw, 4);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	330e      	adds	r3, #14
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	601a      	str	r2, [r3, #0]

	wizchip_init(chip->rxtx_buff, chip->rxtx_buff);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f103 0217 	add.w	r2, r3, #23
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3317      	adds	r3, #23
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	f01c fc2f 	bl	801e318 <wizchip_init>
	wizchip_setnetinfo(&chip->netinfo);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f01c fcb7 	bl	801e430 <wizchip_setnetinfo>
	/*after wizchip_getnetinfo() netinfo struct should stay the same*/
	wizchip_getnetinfo(&chip->netinfo);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f01c fcf3 	bl	801e4b0 <wizchip_getnetinfo>
}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	08001989 	.word	0x08001989
 8001ad8:	08001971 	.word	0x08001971
 8001adc:	080019c5 	.word	0x080019c5
 8001ae0:	080019a1 	.word	0x080019a1
 8001ae4:	080200f4 	.word	0x080200f4
 8001ae8:	0300a8c0 	.word	0x0300a8c0
 8001aec:	00fcffff 	.word	0x00fcffff
 8001af0:	0200a8c0 	.word	0x0200a8c0

08001af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001afa:	490e      	ldr	r1, [pc, #56]	; (8001b34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b10:	4c0b      	ldr	r4, [pc, #44]	; (8001b40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b1e:	f7ff ff15 	bl	800194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b22:	f01c fd13 	bl	801e54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b26:	f7ff f881 	bl	8000c2c <main>
  bx  lr    
 8001b2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001b38:	08025bac 	.word	0x08025bac
  ldr r2, =_sbss
 8001b3c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001b40:	20003964 	.word	0x20003964

08001b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <HAL_Init+0x40>)
 8001b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_Init+0x40>)
 8001b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_Init+0x40>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f000 f931 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f000 f808 	bl	8001b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7c:	f7ff fc1a 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x54>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_InitTick+0x58>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f93b 	bl	8001e26 <HAL_SYSTICK_Config>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00e      	b.n	8001bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d80a      	bhi.n	8001bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f000 f911 	bl	8001dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bcc:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <HAL_InitTick+0x5c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000038 	.word	0x20000038
 8001be4:	20000040 	.word	0x20000040
 8001be8:	2000003c 	.word	0x2000003c

08001bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x20>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_IncTick+0x24>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_IncTick+0x24>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000040 	.word	0x20000040
 8001c10:	200012fc 	.word	0x200012fc

08001c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return uwTick;
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_GetTick+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	200012fc 	.word	0x200012fc

08001c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff ffee 	bl	8001c14 <HAL_GetTick>
 8001c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d005      	beq.n	8001c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_Delay+0x44>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c52:	bf00      	nop
 8001c54:	f7ff ffde 	bl	8001c14 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d8f7      	bhi.n	8001c54 <HAL_Delay+0x28>
  {
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000040 	.word	0x20000040

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff8e 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff47 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff5c 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff8e 	bl	8001d2c <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5d 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffb0 	bl	8001d94 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e00e      	b.n	8001e6e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	795b      	ldrb	r3, [r3, #5]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff facf 	bl	8001404 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e16b      	b.n	800216c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 815a 	bne.w	8002166 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80b4 	beq.w	8002166 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_GPIO_Init+0x30c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a5f      	ldr	r2, [pc, #380]	; (8002184 <HAL_GPIO_Init+0x30c>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_GPIO_Init+0x30c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201a:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <HAL_GPIO_Init+0x310>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_GPIO_Init+0x314>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <HAL_GPIO_Init+0x226>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a51      	ldr	r2, [pc, #324]	; (8002190 <HAL_GPIO_Init+0x318>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x222>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a50      	ldr	r2, [pc, #320]	; (8002194 <HAL_GPIO_Init+0x31c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x21e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4f      	ldr	r2, [pc, #316]	; (8002198 <HAL_GPIO_Init+0x320>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x21a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4e      	ldr	r2, [pc, #312]	; (800219c <HAL_GPIO_Init+0x324>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x216>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4d      	ldr	r2, [pc, #308]	; (80021a0 <HAL_GPIO_Init+0x328>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x212>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4c      	ldr	r2, [pc, #304]	; (80021a4 <HAL_GPIO_Init+0x32c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x20e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4b      	ldr	r2, [pc, #300]	; (80021a8 <HAL_GPIO_Init+0x330>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x20a>
 800207e:	2307      	movs	r3, #7
 8002080:	e00e      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 8002082:	2308      	movs	r3, #8
 8002084:	e00c      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 8002086:	2306      	movs	r3, #6
 8002088:	e00a      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 800208a:	2305      	movs	r3, #5
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 800208e:	2304      	movs	r3, #4
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x228>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <HAL_GPIO_Init+0x310>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_GPIO_Init+0x334>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e2:	4a32      	ldr	r2, [pc, #200]	; (80021ac <HAL_GPIO_Init+0x334>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_GPIO_Init+0x334>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_GPIO_Init+0x334>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_GPIO_Init+0x334>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_GPIO_Init+0x334>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_GPIO_Init+0x334>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002160:	4a12      	ldr	r2, [pc, #72]	; (80021ac <HAL_GPIO_Init+0x334>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f ae90 	bls.w	8001e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40021400 	.word	0x40021400
 80021a4:	40021800 	.word	0x40021800
 80021a8:	40021c00 	.word	0x40021c00
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e12b      	b.n	800244e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff f91c 	bl	8001448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	; 0x24
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002248:	f001 fa20 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 800224c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4a81      	ldr	r2, [pc, #516]	; (8002458 <HAL_I2C_Init+0x274>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d807      	bhi.n	8002268 <HAL_I2C_Init+0x84>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a80      	ldr	r2, [pc, #512]	; (800245c <HAL_I2C_Init+0x278>)
 800225c:	4293      	cmp	r3, r2
 800225e:	bf94      	ite	ls
 8002260:	2301      	movls	r3, #1
 8002262:	2300      	movhi	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e006      	b.n	8002276 <HAL_I2C_Init+0x92>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4a7d      	ldr	r2, [pc, #500]	; (8002460 <HAL_I2C_Init+0x27c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	bf94      	ite	ls
 8002270:	2301      	movls	r3, #1
 8002272:	2300      	movhi	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0e7      	b.n	800244e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a78      	ldr	r2, [pc, #480]	; (8002464 <HAL_I2C_Init+0x280>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9b      	lsrs	r3, r3, #18
 8002288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a6a      	ldr	r2, [pc, #424]	; (8002458 <HAL_I2C_Init+0x274>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d802      	bhi.n	80022b8 <HAL_I2C_Init+0xd4>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3301      	adds	r3, #1
 80022b6:	e009      	b.n	80022cc <HAL_I2C_Init+0xe8>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	4a69      	ldr	r2, [pc, #420]	; (8002468 <HAL_I2C_Init+0x284>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	099b      	lsrs	r3, r3, #6
 80022ca:	3301      	adds	r3, #1
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	495c      	ldr	r1, [pc, #368]	; (8002458 <HAL_I2C_Init+0x274>)
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d819      	bhi.n	8002320 <HAL_I2C_Init+0x13c>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e59      	subs	r1, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022fa:	1c59      	adds	r1, r3, #1
 80022fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002300:	400b      	ands	r3, r1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_I2C_Init+0x138>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e59      	subs	r1, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fbb1 f3f3 	udiv	r3, r1, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231a:	e051      	b.n	80023c0 <HAL_I2C_Init+0x1dc>
 800231c:	2304      	movs	r3, #4
 800231e:	e04f      	b.n	80023c0 <HAL_I2C_Init+0x1dc>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d111      	bne.n	800234c <HAL_I2C_Init+0x168>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1e58      	subs	r0, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e012      	b.n	8002372 <HAL_I2C_Init+0x18e>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e58      	subs	r0, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	0099      	lsls	r1, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Init+0x196>
 8002376:	2301      	movs	r3, #1
 8002378:	e022      	b.n	80023c0 <HAL_I2C_Init+0x1dc>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10e      	bne.n	80023a0 <HAL_I2C_Init+0x1bc>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e58      	subs	r0, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	440b      	add	r3, r1
 8002390:	fbb0 f3f3 	udiv	r3, r0, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239e:	e00f      	b.n	80023c0 <HAL_I2C_Init+0x1dc>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	0099      	lsls	r1, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	6809      	ldr	r1, [r1, #0]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6911      	ldr	r1, [r2, #16]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68d2      	ldr	r2, [r2, #12]
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	430b      	orrs	r3, r1
 8002402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	000186a0 	.word	0x000186a0
 800245c:	001e847f 	.word	0x001e847f
 8002460:	003d08ff 	.word	0x003d08ff
 8002464:	431bde83 	.word	0x431bde83
 8002468:	10624dd3 	.word	0x10624dd3

0800246c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e128      	b.n	80026d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a90      	ldr	r2, [pc, #576]	; (80026d8 <HAL_I2S_Init+0x26c>)
 8002496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff f81d 	bl	80014d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024b4:	f023 030f 	bic.w	r3, r3, #15
 80024b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2202      	movs	r2, #2
 80024c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d060      	beq.n	800258c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80024d2:	2310      	movs	r3, #16
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	e001      	b.n	80024dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d802      	bhi.n	80024ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f001 f9d8 	bl	80038a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80024f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024fa:	d125      	bne.n	8002548 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d010      	beq.n	8002526 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	fbb2 f2f3 	udiv	r2, r2, r3
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	3305      	adds	r3, #5
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e01f      	b.n	8002566 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002542:	3305      	adds	r3, #5
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	e00e      	b.n	8002566 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	3305      	adds	r3, #5
 8002564:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4a5c      	ldr	r2, [pc, #368]	; (80026dc <HAL_I2S_Init+0x270>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e003      	b.n	8002594 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800258c:	2302      	movs	r3, #2
 800258e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d902      	bls.n	80025a0 <HAL_I2S_Init+0x134>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	2bff      	cmp	r3, #255	; 0xff
 800259e:	d907      	bls.n	80025b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	f043 0210 	orr.w	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e08f      	b.n	80026d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	ea42 0103 	orr.w	r1, r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025ce:	f023 030f 	bic.w	r3, r3, #15
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6851      	ldr	r1, [r2, #4]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6892      	ldr	r2, [r2, #8]
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68d2      	ldr	r2, [r2, #12]
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6992      	ldr	r2, [r2, #24]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d161      	bne.n	80026c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a38      	ldr	r2, [pc, #224]	; (80026e0 <HAL_I2S_Init+0x274>)
 8002600:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a37      	ldr	r2, [pc, #220]	; (80026e4 <HAL_I2S_Init+0x278>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_I2S_Init+0x1a4>
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_I2S_Init+0x27c>)
 800260e:	e001      	b.n	8002614 <HAL_I2S_Init+0x1a8>
 8002610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	4932      	ldr	r1, [pc, #200]	; (80026e4 <HAL_I2S_Init+0x278>)
 800261c:	428a      	cmp	r2, r1
 800261e:	d101      	bne.n	8002624 <HAL_I2S_Init+0x1b8>
 8002620:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <HAL_I2S_Init+0x27c>)
 8002622:	e001      	b.n	8002628 <HAL_I2S_Init+0x1bc>
 8002624:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002628:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800262c:	f023 030f 	bic.w	r3, r3, #15
 8002630:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <HAL_I2S_Init+0x278>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_I2S_Init+0x1d4>
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_I2S_Init+0x27c>)
 800263e:	e001      	b.n	8002644 <HAL_I2S_Init+0x1d8>
 8002640:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002644:	2202      	movs	r2, #2
 8002646:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <HAL_I2S_Init+0x278>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_I2S_Init+0x1ea>
 8002652:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_I2S_Init+0x27c>)
 8002654:	e001      	b.n	800265a <HAL_I2S_Init+0x1ee>
 8002656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002666:	d003      	beq.n	8002670 <HAL_I2S_Init+0x204>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e001      	b.n	800267c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002686:	4313      	orrs	r3, r2
 8002688:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002690:	4313      	orrs	r3, r2
 8002692:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800269a:	4313      	orrs	r3, r2
 800269c:	b29a      	uxth	r2, r3
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <HAL_I2S_Init+0x278>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_I2S_Init+0x24c>
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_I2S_Init+0x27c>)
 80026b6:	e001      	b.n	80026bc <HAL_I2S_Init+0x250>
 80026b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026bc:	897a      	ldrh	r2, [r7, #10]
 80026be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	080027e3 	.word	0x080027e3
 80026dc:	cccccccd 	.word	0xcccccccd
 80026e0:	080028f9 	.word	0x080028f9
 80026e4:	40003800 	.word	0x40003800
 80026e8:	40003400 	.word	0x40003400

080026ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	1c9a      	adds	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10e      	bne.n	800277c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800276c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ffb8 	bl	80026ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	b292      	uxth	r2, r2
 8002798:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	1c9a      	adds	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10e      	bne.n	80027da <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ff93 	bl	8002700 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d13a      	bne.n	8002874 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d109      	bne.n	800281c <I2S_IRQHandler+0x3a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	d102      	bne.n	800281c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ffb4 	bl	8002784 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d126      	bne.n	8002874 <I2S_IRQHandler+0x92>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b20      	cmp	r3, #32
 8002832:	d11f      	bne.n	8002874 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002842:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f043 0202 	orr.w	r2, r3, #2
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff50 	bl	8002714 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d136      	bne.n	80028ee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	d109      	bne.n	800289e <I2S_IRQHandler+0xbc>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d102      	bne.n	800289e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff45 	bl	8002728 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d122      	bne.n	80028ee <I2S_IRQHandler+0x10c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d11b      	bne.n	80028ee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028c4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	f043 0204 	orr.w	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff13 	bl	8002714 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a92      	ldr	r2, [pc, #584]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002912:	4b92      	ldr	r3, [pc, #584]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002914:	e001      	b.n	800291a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a8b      	ldr	r2, [pc, #556]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002930:	4b8a      	ldr	r3, [pc, #552]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002932:	e001      	b.n	8002938 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002944:	d004      	beq.n	8002950 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 8099 	bne.w	8002a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b02      	cmp	r3, #2
 8002958:	d107      	bne.n	800296a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f925 	bl	8002bb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f9c8 	bl	8002d14 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d13a      	bne.n	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d035      	beq.n	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a6e      	ldr	r2, [pc, #440]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80029a2:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029a4:	e001      	b.n	80029aa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80029a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4969      	ldr	r1, [pc, #420]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029b2:	428b      	cmp	r3, r1
 80029b4:	d101      	bne.n	80029ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80029b6:	4b69      	ldr	r3, [pc, #420]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029b8:	e001      	b.n	80029be <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80029ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029c2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f043 0202 	orr.w	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff fe88 	bl	8002714 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	f040 80c3 	bne.w	8002b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80bd 	beq.w	8002b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a49      	ldr	r2, [pc, #292]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a36:	4b49      	ldr	r3, [pc, #292]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a38:	e001      	b.n	8002a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4944      	ldr	r1, [pc, #272]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a46:	428b      	cmp	r3, r1
 8002a48:	d101      	bne.n	8002a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a4a:	4b44      	ldr	r3, [pc, #272]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a4c:	e001      	b.n	8002a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fe4a 	bl	8002714 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a80:	e089      	b.n	8002b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d107      	bne.n	8002a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8be 	bl	8002c18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f8fd 	bl	8002cb0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d12f      	bne.n	8002b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02a      	beq.n	8002b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ad8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ae6:	e001      	b.n	8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4919      	ldr	r1, [pc, #100]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002af4:	428b      	cmp	r3, r1
 8002af6:	d101      	bne.n	8002afc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002afa:	e001      	b.n	8002b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fdfa 	bl	8002714 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d136      	bne.n	8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d031      	beq.n	8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b40:	e001      	b.n	8002b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4902      	ldr	r1, [pc, #8]	; (8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b4e:	428b      	cmp	r3, r1
 8002b50:	d106      	bne.n	8002b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002b52:	4b02      	ldr	r3, [pc, #8]	; (8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b54:	e006      	b.n	8002b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002b56:	bf00      	nop
 8002b58:	40003800 	.word	0x40003800
 8002b5c:	40003400 	.word	0x40003400
 8002b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b68:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f043 0204 	orr.w	r2, r3, #4
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fdc0 	bl	8002714 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b94:	e000      	b.n	8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b96:	bf00      	nop
}
 8002b98:	bf00      	nop
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	1c99      	adds	r1, r3, #2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6251      	str	r1, [r2, #36]	; 0x24
 8002bc6:	881a      	ldrh	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d113      	bne.n	8002c0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bf4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffc9 	bl	8002ba0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	1c99      	adds	r1, r3, #2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6251      	str	r1, [r2, #36]	; 0x24
 8002c2a:	8819      	ldrh	r1, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <I2SEx_TxISR_I2SExt+0x90>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <I2SEx_TxISR_I2SExt+0x22>
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <I2SEx_TxISR_I2SExt+0x94>)
 8002c38:	e001      	b.n	8002c3e <I2SEx_TxISR_I2SExt+0x26>
 8002c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3e:	460a      	mov	r2, r1
 8002c40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d121      	bne.n	8002c9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <I2SEx_TxISR_I2SExt+0x90>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <I2SEx_TxISR_I2SExt+0x50>
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <I2SEx_TxISR_I2SExt+0x94>)
 8002c66:	e001      	b.n	8002c6c <I2SEx_TxISR_I2SExt+0x54>
 8002c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	490d      	ldr	r1, [pc, #52]	; (8002ca8 <I2SEx_TxISR_I2SExt+0x90>)
 8002c74:	428b      	cmp	r3, r1
 8002c76:	d101      	bne.n	8002c7c <I2SEx_TxISR_I2SExt+0x64>
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <I2SEx_TxISR_I2SExt+0x94>)
 8002c7a:	e001      	b.n	8002c80 <I2SEx_TxISR_I2SExt+0x68>
 8002c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff81 	bl	8002ba0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40003800 	.word	0x40003800
 8002cac:	40003400 	.word	0x40003400

08002cb0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68d8      	ldr	r0, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	1c99      	adds	r1, r3, #2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002cc8:	b282      	uxth	r2, r0
 8002cca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d113      	bne.n	8002d0c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cf2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ff4a 	bl	8002ba0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a20      	ldr	r2, [pc, #128]	; (8002da4 <I2SEx_RxISR_I2SExt+0x90>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <I2SEx_RxISR_I2SExt+0x16>
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <I2SEx_RxISR_I2SExt+0x94>)
 8002d28:	e001      	b.n	8002d2e <I2SEx_RxISR_I2SExt+0x1a>
 8002d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2e:	68d8      	ldr	r0, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	1c99      	adds	r1, r3, #2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d3a:	b282      	uxth	r2, r0
 8002d3c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d121      	bne.n	8002d9a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <I2SEx_RxISR_I2SExt+0x90>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <I2SEx_RxISR_I2SExt+0x50>
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <I2SEx_RxISR_I2SExt+0x94>)
 8002d62:	e001      	b.n	8002d68 <I2SEx_RxISR_I2SExt+0x54>
 8002d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	490d      	ldr	r1, [pc, #52]	; (8002da4 <I2SEx_RxISR_I2SExt+0x90>)
 8002d70:	428b      	cmp	r3, r1
 8002d72:	d101      	bne.n	8002d78 <I2SEx_RxISR_I2SExt+0x64>
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <I2SEx_RxISR_I2SExt+0x94>)
 8002d76:	e001      	b.n	8002d7c <I2SEx_RxISR_I2SExt+0x68>
 8002d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d80:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff03 	bl	8002ba0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40003800 	.word	0x40003800
 8002da8:	40003400 	.word	0x40003400

08002dac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e267      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d075      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dca:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd6:	4b85      	ldr	r3, [pc, #532]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d112      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b82      	ldr	r3, [pc, #520]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dee:	d10b      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	4b7e      	ldr	r3, [pc, #504]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d05b      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x108>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d157      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e242      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e10:	d106      	bne.n	8002e20 <HAL_RCC_OscConfig+0x74>
 8002e12:	4b76      	ldr	r3, [pc, #472]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a75      	ldr	r2, [pc, #468]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e01d      	b.n	8002e5c <HAL_RCC_OscConfig+0xb0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x98>
 8002e2a:	4b70      	ldr	r3, [pc, #448]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6f      	ldr	r2, [pc, #444]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6c      	ldr	r2, [pc, #432]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0xb0>
 8002e44:	4b69      	ldr	r3, [pc, #420]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a68      	ldr	r2, [pc, #416]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b66      	ldr	r3, [pc, #408]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a65      	ldr	r2, [pc, #404]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe fed6 	bl	8001c14 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fed2 	bl	8001c14 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e207      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xc0>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fec2 	bl	8001c14 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe febe 	bl	8001c14 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1f3      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b51      	ldr	r3, [pc, #324]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0xe8>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec2:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d11c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eda:	4b44      	ldr	r3, [pc, #272]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	4b41      	ldr	r3, [pc, #260]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x152>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e1c7      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4937      	ldr	r1, [pc, #220]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	e03a      	b.n	8002f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1c:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_RCC_OscConfig+0x244>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe fe77 	bl	8001c14 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fe fe73 	bl	8001c14 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e1a8      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b28      	ldr	r3, [pc, #160]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4925      	ldr	r1, [pc, #148]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_OscConfig+0x244>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fe56 	bl	8001c14 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fe52 	bl	8001c14 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e187      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d036      	beq.n	8003004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_RCC_OscConfig+0x248>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe fe36 	bl	8001c14 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fe fe32 	bl	8001c14 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e167      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x200>
 8002fca:	e01b      	b.n	8003004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_OscConfig+0x248>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fe1f 	bl	8001c14 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	e00e      	b.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fda:	f7fe fe1b 	bl	8001c14 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d907      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e150      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	42470000 	.word	0x42470000
 8002ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	4b88      	ldr	r3, [pc, #544]	; (800321c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ea      	bne.n	8002fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8097 	beq.w	8003140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003016:	4b81      	ldr	r3, [pc, #516]	; (800321c <HAL_RCC_OscConfig+0x470>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	4b7d      	ldr	r3, [pc, #500]	; (800321c <HAL_RCC_OscConfig+0x470>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a7c      	ldr	r2, [pc, #496]	; (800321c <HAL_RCC_OscConfig+0x470>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b7a      	ldr	r3, [pc, #488]	; (800321c <HAL_RCC_OscConfig+0x470>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	4b77      	ldr	r3, [pc, #476]	; (8003220 <HAL_RCC_OscConfig+0x474>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d118      	bne.n	8003080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304e:	4b74      	ldr	r3, [pc, #464]	; (8003220 <HAL_RCC_OscConfig+0x474>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a73      	ldr	r2, [pc, #460]	; (8003220 <HAL_RCC_OscConfig+0x474>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305a:	f7fe fddb 	bl	8001c14 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003062:	f7fe fdd7 	bl	8001c14 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e10c      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	4b6a      	ldr	r3, [pc, #424]	; (8003220 <HAL_RCC_OscConfig+0x474>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x2ea>
 8003088:	4b64      	ldr	r3, [pc, #400]	; (800321c <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a63      	ldr	r2, [pc, #396]	; (800321c <HAL_RCC_OscConfig+0x470>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
 8003094:	e01c      	b.n	80030d0 <HAL_RCC_OscConfig+0x324>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b05      	cmp	r3, #5
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x30c>
 800309e:	4b5f      	ldr	r3, [pc, #380]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a5e      	ldr	r2, [pc, #376]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
 80030aa:	4b5c      	ldr	r3, [pc, #368]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a5b      	ldr	r2, [pc, #364]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0x324>
 80030b8:	4b58      	ldr	r3, [pc, #352]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a57      	ldr	r2, [pc, #348]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
 80030c4:	4b55      	ldr	r3, [pc, #340]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a54      	ldr	r2, [pc, #336]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe fd9c 	bl	8001c14 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fe fd98 	bl	8001c14 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0cb      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	4b49      	ldr	r3, [pc, #292]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0ee      	beq.n	80030e0 <HAL_RCC_OscConfig+0x334>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003104:	f7fe fd86 	bl	8001c14 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310a:	e00a      	b.n	8003122 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe fd82 	bl	8001c14 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0b5      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ee      	bne.n	800310c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003134:	4b39      	ldr	r3, [pc, #228]	; (800321c <HAL_RCC_OscConfig+0x470>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	4a38      	ldr	r2, [pc, #224]	; (800321c <HAL_RCC_OscConfig+0x470>)
 800313a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a1 	beq.w	800328c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800314a:	4b34      	ldr	r3, [pc, #208]	; (800321c <HAL_RCC_OscConfig+0x470>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b08      	cmp	r3, #8
 8003154:	d05c      	beq.n	8003210 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d141      	bne.n	80031e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe fd56 	bl	8001c14 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fd52 	bl	8001c14 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e087      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_RCC_OscConfig+0x470>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	3b01      	subs	r3, #1
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	491b      	ldr	r1, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fe fd2b 	bl	8001c14 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe fd27 	bl	8001c14 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e05c      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_OscConfig+0x470>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x416>
 80031e0:	e054      	b.n	800328c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fd14 	bl	8001c14 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fd10 	bl	8001c14 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e045      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCC_OscConfig+0x470>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x444>
 800320e:	e03d      	b.n	800328c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e038      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
 800321c:	40023800 	.word	0x40023800
 8003220:	40007000 	.word	0x40007000
 8003224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x4ec>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d028      	beq.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d121      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d11a      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800325e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003260:	4293      	cmp	r3, r2
 8003262:	d111      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	3b01      	subs	r3, #1
 8003272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d107      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800

0800329c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0cc      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b68      	ldr	r3, [pc, #416]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d90c      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b65      	ldr	r3, [pc, #404]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b63      	ldr	r3, [pc, #396]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0b8      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f0:	4b59      	ldr	r3, [pc, #356]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a58      	ldr	r2, [pc, #352]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a52      	ldr	r2, [pc, #328]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003314:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	494d      	ldr	r1, [pc, #308]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d044      	beq.n	80033bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d119      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e07f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d003      	beq.n	800335a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003356:	2b03      	cmp	r3, #3
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e067      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337a:	4b37      	ldr	r3, [pc, #220]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4934      	ldr	r1, [pc, #208]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800338c:	f7fe fc42 	bl	8001c14 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe fc3e 	bl	8001c14 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 020c 	and.w	r2, r3, #12
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1eb      	bne.n	8003394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b25      	ldr	r3, [pc, #148]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d20c      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b22      	ldr	r3, [pc, #136]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b20      	ldr	r3, [pc, #128]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e032      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4916      	ldr	r1, [pc, #88]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	490e      	ldr	r1, [pc, #56]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003422:	f000 f821 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8003426:	4602      	mov	r2, r0
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	490a      	ldr	r1, [pc, #40]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	5ccb      	ldrb	r3, [r1, r3]
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fba2 	bl	8001b8c <HAL_InitTick>

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023c00 	.word	0x40023c00
 8003458:	40023800 	.word	0x40023800
 800345c:	08024d14 	.word	0x08024d14
 8003460:	20000038 	.word	0x20000038
 8003464:	2000003c 	.word	0x2000003c

08003468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800346c:	b094      	sub	sp, #80	; 0x50
 800346e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	647b      	str	r3, [r7, #68]	; 0x44
 8003474:	2300      	movs	r3, #0
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003478:	2300      	movs	r3, #0
 800347a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003480:	4b79      	ldr	r3, [pc, #484]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b08      	cmp	r3, #8
 800348a:	d00d      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x40>
 800348c:	2b08      	cmp	r3, #8
 800348e:	f200 80e1 	bhi.w	8003654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x34>
 8003496:	2b04      	cmp	r3, #4
 8003498:	d003      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800349a:	e0db      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b73      	ldr	r3, [pc, #460]	; (800366c <HAL_RCC_GetSysClockFreq+0x204>)
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034a0:	e0db      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034a2:	4b73      	ldr	r3, [pc, #460]	; (8003670 <HAL_RCC_GetSysClockFreq+0x208>)
 80034a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a6:	e0d8      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a8:	4b6f      	ldr	r3, [pc, #444]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b2:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
 80034d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	f04f 0000 	mov.w	r0, #0
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ec:	0150      	lsls	r0, r2, #5
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4621      	mov	r1, r4
 80034f4:	1a51      	subs	r1, r2, r1
 80034f6:	6139      	str	r1, [r7, #16]
 80034f8:	4629      	mov	r1, r5
 80034fa:	eb63 0301 	sbc.w	r3, r3, r1
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800350c:	4659      	mov	r1, fp
 800350e:	018b      	lsls	r3, r1, #6
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003516:	4651      	mov	r1, sl
 8003518:	018a      	lsls	r2, r1, #6
 800351a:	4651      	mov	r1, sl
 800351c:	ebb2 0801 	subs.w	r8, r2, r1
 8003520:	4659      	mov	r1, fp
 8003522:	eb63 0901 	sbc.w	r9, r3, r1
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353a:	4690      	mov	r8, r2
 800353c:	4699      	mov	r9, r3
 800353e:	4623      	mov	r3, r4
 8003540:	eb18 0303 	adds.w	r3, r8, r3
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	462b      	mov	r3, r5
 8003548:	eb49 0303 	adc.w	r3, r9, r3
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800355a:	4629      	mov	r1, r5
 800355c:	024b      	lsls	r3, r1, #9
 800355e:	4621      	mov	r1, r4
 8003560:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003564:	4621      	mov	r1, r4
 8003566:	024a      	lsls	r2, r1, #9
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356e:	2200      	movs	r2, #0
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
 8003572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003578:	f7fc fe92 	bl	80002a0 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4613      	mov	r3, r2
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003584:	e058      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003586:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	2200      	movs	r2, #0
 800358e:	4618      	mov	r0, r3
 8003590:	4611      	mov	r1, r2
 8003592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
 800359c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	f04f 0000 	mov.w	r0, #0
 80035a8:	f04f 0100 	mov.w	r1, #0
 80035ac:	0159      	lsls	r1, r3, #5
 80035ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b2:	0150      	lsls	r0, r2, #5
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4641      	mov	r1, r8
 80035ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80035be:	4649      	mov	r1, r9
 80035c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035d8:	ebb2 040a 	subs.w	r4, r2, sl
 80035dc:	eb63 050b 	sbc.w	r5, r3, fp
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	00eb      	lsls	r3, r5, #3
 80035ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ee:	00e2      	lsls	r2, r4, #3
 80035f0:	4614      	mov	r4, r2
 80035f2:	461d      	mov	r5, r3
 80035f4:	4643      	mov	r3, r8
 80035f6:	18e3      	adds	r3, r4, r3
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	464b      	mov	r3, r9
 80035fc:	eb45 0303 	adc.w	r3, r5, r3
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360e:	4629      	mov	r1, r5
 8003610:	028b      	lsls	r3, r1, #10
 8003612:	4621      	mov	r1, r4
 8003614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003618:	4621      	mov	r1, r4
 800361a:	028a      	lsls	r2, r1, #10
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003622:	2200      	movs	r2, #0
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	61fa      	str	r2, [r7, #28]
 8003628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362c:	f7fc fe38 	bl	80002a0 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4613      	mov	r3, r2
 8003636:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	3301      	adds	r3, #1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003648:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800364a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCC_GetSysClockFreq+0x204>)
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800365c:	4618      	mov	r0, r3
 800365e:	3750      	adds	r7, #80	; 0x50
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	00f42400 	.word	0x00f42400
 8003670:	007a1200 	.word	0x007a1200

08003674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_RCC_GetHCLKFreq+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000038 	.word	0x20000038

0800368c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003690:	f7ff fff0 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4903      	ldr	r1, [pc, #12]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40023800 	.word	0x40023800
 80036b0:	08024d24 	.word	0x08024d24

080036b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036b8:	f7ff ffdc 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0b5b      	lsrs	r3, r3, #13
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08024d24 	.word	0x08024d24

080036dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d105      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003700:	2b00      	cmp	r3, #0
 8003702:	d035      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003704:	4b62      	ldr	r3, [pc, #392]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800370a:	f7fe fa83 	bl	8001c14 <HAL_GetTick>
 800370e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003712:	f7fe fa7f 	bl	8001c14 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e0b0      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003724:	4b5b      	ldr	r3, [pc, #364]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	019a      	lsls	r2, r3, #6
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	071b      	lsls	r3, r3, #28
 800373c:	4955      	ldr	r1, [pc, #340]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003744:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800374a:	f7fe fa63 	bl	8001c14 <HAL_GetTick>
 800374e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003752:	f7fe fa5f 	bl	8001c14 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e090      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003764:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8083 	beq.w	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	4b44      	ldr	r3, [pc, #272]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	4a43      	ldr	r2, [pc, #268]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378c:	6413      	str	r3, [r2, #64]	; 0x40
 800378e:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800379a:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3e      	ldr	r2, [pc, #248]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037a6:	f7fe fa35 	bl	8001c14 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fe fa31 	bl	8001c14 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e062      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037c0:	4b35      	ldr	r3, [pc, #212]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02f      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d028      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ea:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037f4:	4b29      	ldr	r3, [pc, #164]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037fa:	4b28      	ldr	r3, [pc, #160]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003800:	4a24      	ldr	r2, [pc, #144]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d114      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe f9ff 	bl	8001c14 <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	e00a      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7fe f9fb 	bl	8001c14 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f241 3288 	movw	r2, #5000	; 0x1388
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e02a      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ee      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003848:	d10d      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800385a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385e:	490d      	ldr	r1, [pc, #52]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]
 8003864:	e005      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800386c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003870:	6093      	str	r3, [r2, #8]
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003874:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	4905      	ldr	r1, [pc, #20]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003880:	4313      	orrs	r3, r2
 8003882:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	42470068 	.word	0x42470068
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000
 800389c:	42470e40 	.word	0x42470e40

080038a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d13e      	bne.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d12f      	bne.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80038d4:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80038d6:	617b      	str	r3, [r7, #20]
          break;
 80038d8:	e02f      	b.n	800393a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80038da:	4b1c      	ldr	r3, [pc, #112]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e6:	d108      	bne.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80038e8:	4b18      	ldr	r3, [pc, #96]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f0:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	e007      	b.n	800390a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80038fa:	4b14      	ldr	r3, [pc, #80]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003902:	4a15      	ldr	r2, [pc, #84]	; (8003958 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003924:	0f1b      	lsrs	r3, r3, #28
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
          break;
 8003932:	e002      	b.n	800393a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
          break;
 8003938:	bf00      	nop
        }
      }
      break;
 800393a:	bf00      	nop
    }
  }
  return frequency;
 800393c:	697b      	ldr	r3, [r7, #20]
}
 800393e:	4618      	mov	r0, r3
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	00bb8000 	.word	0x00bb8000
 8003954:	007a1200 	.word	0x007a1200
 8003958:	00f42400 	.word	0x00f42400

0800395c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07b      	b.n	8003a66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	d108      	bne.n	8003988 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800397e:	d009      	beq.n	8003994 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	61da      	str	r2, [r3, #28]
 8003986:	e005      	b.n	8003994 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd fe12 	bl	80015d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	ea42 0103 	orr.w	r1, r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	f003 0104 	and.w	r1, r3, #4
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f003 0210 	and.w	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b088      	sub	sp, #32
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_SPI_Transmit+0x22>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e126      	b.n	8003cde <HAL_SPI_Transmit+0x270>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a98:	f7fe f8bc 	bl	8001c14 <HAL_GetTick>
 8003a9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ab2:	e10b      	b.n	8003ccc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_Transmit+0x52>
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ac4:	e102      	b.n	8003ccc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0c:	d10f      	bne.n	8003b2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d007      	beq.n	8003b4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b54:	d14b      	bne.n	8003bee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_SPI_Transmit+0xf6>
 8003b5e:	8afb      	ldrh	r3, [r7, #22]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d13e      	bne.n	8003be2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	1c9a      	adds	r2, r3, #2
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b88:	e02b      	b.n	8003be2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d112      	bne.n	8003bbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	881a      	ldrh	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	1c9a      	adds	r2, r3, #2
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bbc:	e011      	b.n	8003be2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bbe:	f7fe f829 	bl	8001c14 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d803      	bhi.n	8003bd6 <HAL_SPI_Transmit+0x168>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d102      	bne.n	8003bdc <HAL_SPI_Transmit+0x16e>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003be0:	e074      	b.n	8003ccc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ce      	bne.n	8003b8a <HAL_SPI_Transmit+0x11c>
 8003bec:	e04c      	b.n	8003c88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_Transmit+0x18e>
 8003bf6:	8afb      	ldrh	r3, [r7, #22]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d140      	bne.n	8003c7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	7812      	ldrb	r2, [r2, #0]
 8003c08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c22:	e02c      	b.n	8003c7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d113      	bne.n	8003c5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	7812      	ldrb	r2, [r2, #0]
 8003c3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c58:	e011      	b.n	8003c7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c5a:	f7fd ffdb 	bl	8001c14 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d803      	bhi.n	8003c72 <HAL_SPI_Transmit+0x204>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d102      	bne.n	8003c78 <HAL_SPI_Transmit+0x20a>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c7c:	e026      	b.n	8003ccc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1cd      	bne.n	8003c24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	6839      	ldr	r1, [r7, #0]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fbcb 	bl	8004428 <SPI_EndRxTxTransaction>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e000      	b.n	8003ccc <HAL_SPI_Transmit+0x25e>
  }

error:
 8003cca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b088      	sub	sp, #32
 8003cea:	af02      	add	r7, sp, #8
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d02:	d112      	bne.n	8003d2a <HAL_SPI_Receive+0x44>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10e      	bne.n	8003d2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d14:	88fa      	ldrh	r2, [r7, #6]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8f1 	bl	8003f08 <HAL_SPI_TransmitReceive>
 8003d26:	4603      	mov	r3, r0
 8003d28:	e0ea      	b.n	8003f00 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_SPI_Receive+0x52>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0e3      	b.n	8003f00 <HAL_SPI_Receive+0x21a>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d40:	f7fd ff68 	bl	8001c14 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d002      	beq.n	8003d58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
 8003d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d56:	e0ca      	b.n	8003eee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_SPI_Receive+0x7e>
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d68:	e0c1      	b.n	8003eee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db0:	d10f      	bne.n	8003dd2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d007      	beq.n	8003df0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d162      	bne.n	8003ebe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003df8:	e02e      	b.n	8003e58 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d115      	bne.n	8003e34 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f103 020c 	add.w	r2, r3, #12
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e32:	e011      	b.n	8003e58 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e34:	f7fd feee 	bl	8001c14 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d803      	bhi.n	8003e4c <HAL_SPI_Receive+0x166>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d102      	bne.n	8003e52 <HAL_SPI_Receive+0x16c>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e56:	e04a      	b.n	8003eee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1cb      	bne.n	8003dfa <HAL_SPI_Receive+0x114>
 8003e62:	e031      	b.n	8003ec8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d113      	bne.n	8003e9a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	b292      	uxth	r2, r2
 8003e7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	1c9a      	adds	r2, r3, #2
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e98:	e011      	b.n	8003ebe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e9a:	f7fd febb 	bl	8001c14 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d803      	bhi.n	8003eb2 <HAL_SPI_Receive+0x1cc>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d102      	bne.n	8003eb8 <HAL_SPI_Receive+0x1d2>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ebc:	e017      	b.n	8003eee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1cd      	bne.n	8003e64 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	6839      	ldr	r1, [r7, #0]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fa45 	bl	800435c <SPI_EndRxTransaction>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
 8003eea:	e000      	b.n	8003eee <HAL_SPI_Receive+0x208>
  }

error :
 8003eec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08c      	sub	sp, #48	; 0x30
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f16:	2301      	movs	r3, #1
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_SPI_TransmitReceive+0x26>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e18a      	b.n	8004244 <HAL_SPI_TransmitReceive+0x33c>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f36:	f7fd fe6d 	bl	8001c14 <HAL_GetTick>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f4c:	887b      	ldrh	r3, [r7, #2]
 8003f4e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d00f      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x70>
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5e:	d107      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d103      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x68>
 8003f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d003      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f76:	e15b      	b.n	8004230 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x82>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x82>
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f90:	e14e      	b.n	8004230 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d003      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	887a      	ldrh	r2, [r7, #2]
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	887a      	ldrh	r2, [r7, #2]
 8003fce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d007      	beq.n	8003ffa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004002:	d178      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_SPI_TransmitReceive+0x10a>
 800400c:	8b7b      	ldrh	r3, [r7, #26]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d166      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	881a      	ldrh	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	1c9a      	adds	r2, r3, #2
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004036:	e053      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d11b      	bne.n	800407e <HAL_SPI_TransmitReceive+0x176>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d016      	beq.n	800407e <HAL_SPI_TransmitReceive+0x176>
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d113      	bne.n	800407e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	881a      	ldrh	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	1c9a      	adds	r2, r3, #2
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d119      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x1b8>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d014      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	b292      	uxth	r2, r2
 80040a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040bc:	2301      	movs	r3, #1
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040c0:	f7fd fda8 	bl	8001c14 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d807      	bhi.n	80040e0 <HAL_SPI_TransmitReceive+0x1d8>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d003      	beq.n	80040e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040de:	e0a7      	b.n	8004230 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1a6      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x130>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1a1      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x130>
 80040f4:	e07c      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x1fc>
 80040fe:	8b7b      	ldrh	r3, [r7, #26]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d16b      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800412a:	e057      	b.n	80041dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d11c      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x26c>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d017      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x26c>
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d114      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d119      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x2ae>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d014      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041b2:	2301      	movs	r3, #1
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041b6:	f7fd fd2d 	bl	8001c14 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d803      	bhi.n	80041ce <HAL_SPI_TransmitReceive+0x2c6>
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d102      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x2cc>
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d103      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041da:	e029      	b.n	8004230 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1a2      	bne.n	800412c <HAL_SPI_TransmitReceive+0x224>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d19d      	bne.n	800412c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f917 	bl	8004428 <SPI_EndRxTxTransaction>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d006      	beq.n	800420e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800420c:	e010      	b.n	8004230 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10b      	bne.n	800422e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	e000      	b.n	8004230 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800422e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004244:	4618      	mov	r0, r3
 8004246:	3730      	adds	r7, #48	; 0x30
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	4613      	mov	r3, r2
 800425a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800425c:	f7fd fcda 	bl	8001c14 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	4413      	add	r3, r2
 800426a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800426c:	f7fd fcd2 	bl	8001c14 <HAL_GetTick>
 8004270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004272:	4b39      	ldr	r3, [pc, #228]	; (8004358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	015b      	lsls	r3, r3, #5
 8004278:	0d1b      	lsrs	r3, r3, #20
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004282:	e054      	b.n	800432e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d050      	beq.n	800432e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800428c:	f7fd fcc2 	bl	8001c14 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	429a      	cmp	r2, r3
 800429a:	d902      	bls.n	80042a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d13d      	bne.n	800431e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ba:	d111      	bne.n	80042e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c4:	d004      	beq.n	80042d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ce:	d107      	bne.n	80042e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e8:	d10f      	bne.n	800430a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e017      	b.n	800434e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3b01      	subs	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4013      	ands	r3, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	bf0c      	ite	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	2300      	movne	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	429a      	cmp	r2, r3
 800434a:	d19b      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000038 	.word	0x20000038

0800435c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004370:	d111      	bne.n	8004396 <SPI_EndRxTransaction+0x3a>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437a:	d004      	beq.n	8004386 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d107      	bne.n	8004396 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439e:	d12a      	bne.n	80043f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a8:	d012      	beq.n	80043d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2180      	movs	r1, #128	; 0x80
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff ff49 	bl	800424c <SPI_WaitFlagStateUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d02d      	beq.n	800441c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e026      	b.n	800441e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2200      	movs	r2, #0
 80043d8:	2101      	movs	r1, #1
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff ff36 	bl	800424c <SPI_WaitFlagStateUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01a      	beq.n	800441c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e013      	b.n	800441e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2101      	movs	r1, #1
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff ff23 	bl	800424c <SPI_WaitFlagStateUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e000      	b.n	800441e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <SPI_EndRxTxTransaction+0x7c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1b      	ldr	r2, [pc, #108]	; (80044a8 <SPI_EndRxTxTransaction+0x80>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	0d5b      	lsrs	r3, r3, #21
 8004440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004444:	fb02 f303 	mul.w	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004452:	d112      	bne.n	800447a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2200      	movs	r2, #0
 800445c:	2180      	movs	r1, #128	; 0x80
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff fef4 	bl	800424c <SPI_WaitFlagStateUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	f043 0220 	orr.w	r2, r3, #32
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e00f      	b.n	800449a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	3b01      	subs	r3, #1
 8004484:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d0f2      	beq.n	800447a <SPI_EndRxTxTransaction+0x52>
 8004494:	e000      	b.n	8004498 <SPI_EndRxTxTransaction+0x70>
        break;
 8004496:	bf00      	nop
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000038 	.word	0x20000038
 80044a8:	165e9f81 	.word	0x165e9f81

080044ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e03f      	b.n	800453e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fd f91e 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f929 	bl	8004748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b08a      	sub	sp, #40	; 0x28
 800454a:	af02      	add	r7, sp, #8
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b20      	cmp	r3, #32
 8004564:	d17c      	bne.n	8004660 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_UART_Transmit+0x2c>
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e075      	b.n	8004662 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_UART_Transmit+0x3e>
 8004580:	2302      	movs	r3, #2
 8004582:	e06e      	b.n	8004662 <HAL_UART_Transmit+0x11c>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2221      	movs	r2, #33	; 0x21
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800459a:	f7fd fb3b 	bl	8001c14 <HAL_GetTick>
 800459e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	88fa      	ldrh	r2, [r7, #6]
 80045a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b4:	d108      	bne.n	80045c8 <HAL_UART_Transmit+0x82>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d104      	bne.n	80045c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	e003      	b.n	80045d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045d8:	e02a      	b.n	8004630 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	2180      	movs	r1, #128	; 0x80
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f840 	bl	800466a <UART_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e036      	b.n	8004662 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	3302      	adds	r3, #2
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	e007      	b.n	8004622 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	3301      	adds	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1cf      	bne.n	80045da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2200      	movs	r2, #0
 8004642:	2140      	movs	r1, #64	; 0x40
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f810 	bl	800466a <UART_WaitOnFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e006      	b.n	8004662 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e000      	b.n	8004662 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b090      	sub	sp, #64	; 0x40
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	4613      	mov	r3, r2
 8004678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467a:	e050      	b.n	800471e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d04c      	beq.n	800471e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <UART_WaitOnFlagUntilTimeout+0x30>
 800468a:	f7fd fac3 	bl	8001c14 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004696:	429a      	cmp	r2, r3
 8004698:	d241      	bcs.n	800471e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046ba:	637a      	str	r2, [r7, #52]	; 0x34
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	613b      	str	r3, [r7, #16]
   return(result);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ee:	623a      	str	r2, [r7, #32]
 80046f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	69f9      	ldr	r1, [r7, #28]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e5      	bne.n	80046ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e00f      	b.n	800473e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4013      	ands	r3, r2
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	429a      	cmp	r2, r3
 800473a:	d09f      	beq.n	800467c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3740      	adds	r7, #64	; 0x40
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800474c:	b0c0      	sub	sp, #256	; 0x100
 800474e:	af00      	add	r7, sp, #0
 8004750:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	68d9      	ldr	r1, [r3, #12]
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	ea40 0301 	orr.w	r3, r0, r1
 8004770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	431a      	orrs	r2, r3
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	431a      	orrs	r2, r3
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047a0:	f021 010c 	bic.w	r1, r1, #12
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ae:	430b      	orrs	r3, r1
 80047b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	6999      	ldr	r1, [r3, #24]
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	ea40 0301 	orr.w	r3, r0, r1
 80047ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b8f      	ldr	r3, [pc, #572]	; (8004a14 <UART_SetConfig+0x2cc>)
 80047d8:	429a      	cmp	r2, r3
 80047da:	d005      	beq.n	80047e8 <UART_SetConfig+0xa0>
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b8d      	ldr	r3, [pc, #564]	; (8004a18 <UART_SetConfig+0x2d0>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d104      	bne.n	80047f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fe ff64 	bl	80036b4 <HAL_RCC_GetPCLK2Freq>
 80047ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047f0:	e003      	b.n	80047fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f2:	f7fe ff4b 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 80047f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	f040 810c 	bne.w	8004a20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004812:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	1891      	adds	r1, r2, r2
 8004820:	65b9      	str	r1, [r7, #88]	; 0x58
 8004822:	415b      	adcs	r3, r3
 8004824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800482a:	4621      	mov	r1, r4
 800482c:	eb12 0801 	adds.w	r8, r2, r1
 8004830:	4629      	mov	r1, r5
 8004832:	eb43 0901 	adc.w	r9, r3, r1
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800484a:	4690      	mov	r8, r2
 800484c:	4699      	mov	r9, r3
 800484e:	4623      	mov	r3, r4
 8004850:	eb18 0303 	adds.w	r3, r8, r3
 8004854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004858:	462b      	mov	r3, r5
 800485a:	eb49 0303 	adc.w	r3, r9, r3
 800485e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800486e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004876:	460b      	mov	r3, r1
 8004878:	18db      	adds	r3, r3, r3
 800487a:	653b      	str	r3, [r7, #80]	; 0x50
 800487c:	4613      	mov	r3, r2
 800487e:	eb42 0303 	adc.w	r3, r2, r3
 8004882:	657b      	str	r3, [r7, #84]	; 0x54
 8004884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800488c:	f7fb fd08 	bl	80002a0 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4b61      	ldr	r3, [pc, #388]	; (8004a1c <UART_SetConfig+0x2d4>)
 8004896:	fba3 2302 	umull	r2, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	011c      	lsls	r4, r3, #4
 800489e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80048b8:	415b      	adcs	r3, r3
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048c0:	4641      	mov	r1, r8
 80048c2:	eb12 0a01 	adds.w	sl, r2, r1
 80048c6:	4649      	mov	r1, r9
 80048c8:	eb43 0b01 	adc.w	fp, r3, r1
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e0:	4692      	mov	sl, r2
 80048e2:	469b      	mov	fp, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	eb1a 0303 	adds.w	r3, sl, r3
 80048ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ee:	464b      	mov	r3, r9
 80048f0:	eb4b 0303 	adc.w	r3, fp, r3
 80048f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004904:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800490c:	460b      	mov	r3, r1
 800490e:	18db      	adds	r3, r3, r3
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
 8004912:	4613      	mov	r3, r2
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	647b      	str	r3, [r7, #68]	; 0x44
 800491a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800491e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004922:	f7fb fcbd 	bl	80002a0 <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4611      	mov	r1, r2
 800492c:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <UART_SetConfig+0x2d4>)
 800492e:	fba3 2301 	umull	r2, r3, r3, r1
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2264      	movs	r2, #100	; 0x64
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	1acb      	subs	r3, r1, r3
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004942:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <UART_SetConfig+0x2d4>)
 8004944:	fba3 2302 	umull	r2, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004950:	441c      	add	r4, r3
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800495c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	1891      	adds	r1, r2, r2
 800496a:	63b9      	str	r1, [r7, #56]	; 0x38
 800496c:	415b      	adcs	r3, r3
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004974:	4641      	mov	r1, r8
 8004976:	1851      	adds	r1, r2, r1
 8004978:	6339      	str	r1, [r7, #48]	; 0x30
 800497a:	4649      	mov	r1, r9
 800497c:	414b      	adcs	r3, r1
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800498c:	4659      	mov	r1, fp
 800498e:	00cb      	lsls	r3, r1, #3
 8004990:	4651      	mov	r1, sl
 8004992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004996:	4651      	mov	r1, sl
 8004998:	00ca      	lsls	r2, r1, #3
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	4642      	mov	r2, r8
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049a8:	464b      	mov	r3, r9
 80049aa:	460a      	mov	r2, r1
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049c8:	460b      	mov	r3, r1
 80049ca:	18db      	adds	r3, r3, r3
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ce:	4613      	mov	r3, r2
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049de:	f7fb fc5f 	bl	80002a0 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <UART_SetConfig+0x2d4>)
 80049e8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	2164      	movs	r1, #100	; 0x64
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	3332      	adds	r3, #50	; 0x32
 80049fa:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <UART_SetConfig+0x2d4>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	f003 0207 	and.w	r2, r3, #7
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4422      	add	r2, r4
 8004a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a10:	e105      	b.n	8004c1e <UART_SetConfig+0x4d6>
 8004a12:	bf00      	nop
 8004a14:	40011000 	.word	0x40011000
 8004a18:	40011400 	.word	0x40011400
 8004a1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a32:	4642      	mov	r2, r8
 8004a34:	464b      	mov	r3, r9
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	6239      	str	r1, [r7, #32]
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a42:	4641      	mov	r1, r8
 8004a44:	1854      	adds	r4, r2, r1
 8004a46:	4649      	mov	r1, r9
 8004a48:	eb43 0501 	adc.w	r5, r3, r1
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	00eb      	lsls	r3, r5, #3
 8004a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5a:	00e2      	lsls	r2, r4, #3
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	461d      	mov	r5, r3
 8004a60:	4643      	mov	r3, r8
 8004a62:	18e3      	adds	r3, r4, r3
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a68:	464b      	mov	r3, r9
 8004a6a:	eb45 0303 	adc.w	r3, r5, r3
 8004a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a8e:	4629      	mov	r1, r5
 8004a90:	008b      	lsls	r3, r1, #2
 8004a92:	4621      	mov	r1, r4
 8004a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a98:	4621      	mov	r1, r4
 8004a9a:	008a      	lsls	r2, r1, #2
 8004a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aa0:	f7fb fbfe 	bl	80002a0 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4b60      	ldr	r3, [pc, #384]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	011c      	lsls	r4, r3, #4
 8004ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004abc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	61b9      	str	r1, [r7, #24]
 8004acc:	415b      	adcs	r3, r3
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	1851      	adds	r1, r2, r1
 8004ad8:	6139      	str	r1, [r7, #16]
 8004ada:	4649      	mov	r1, r9
 8004adc:	414b      	adcs	r3, r1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aec:	4659      	mov	r1, fp
 8004aee:	00cb      	lsls	r3, r1, #3
 8004af0:	4651      	mov	r1, sl
 8004af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af6:	4651      	mov	r1, sl
 8004af8:	00ca      	lsls	r2, r1, #3
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	4642      	mov	r2, r8
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b08:	464b      	mov	r3, r9
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	eb42 0303 	adc.w	r3, r2, r3
 8004b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	008b      	lsls	r3, r1, #2
 8004b30:	4641      	mov	r1, r8
 8004b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b36:	4641      	mov	r1, r8
 8004b38:	008a      	lsls	r2, r1, #2
 8004b3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b3e:	f7fb fbaf 	bl	80002a0 <__aeabi_uldivmod>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004b48:	fba3 1302 	umull	r1, r3, r3, r2
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	2164      	movs	r1, #100	; 0x64
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	3332      	adds	r3, #50	; 0x32
 8004b5a:	4a34      	ldr	r2, [pc, #208]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b66:	441c      	add	r4, r3
 8004b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b70:	677a      	str	r2, [r7, #116]	; 0x74
 8004b72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b76:	4642      	mov	r2, r8
 8004b78:	464b      	mov	r3, r9
 8004b7a:	1891      	adds	r1, r2, r2
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	415b      	adcs	r3, r3
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b86:	4641      	mov	r1, r8
 8004b88:	1851      	adds	r1, r2, r1
 8004b8a:	6039      	str	r1, [r7, #0]
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	414b      	adcs	r3, r1
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b9e:	4659      	mov	r1, fp
 8004ba0:	00cb      	lsls	r3, r1, #3
 8004ba2:	4651      	mov	r1, sl
 8004ba4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba8:	4651      	mov	r1, sl
 8004baa:	00ca      	lsls	r2, r1, #3
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4642      	mov	r2, r8
 8004bb4:	189b      	adds	r3, r3, r2
 8004bb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb8:	464b      	mov	r3, r9
 8004bba:	460a      	mov	r2, r1
 8004bbc:	eb42 0303 	adc.w	r3, r2, r3
 8004bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	663b      	str	r3, [r7, #96]	; 0x60
 8004bcc:	667a      	str	r2, [r7, #100]	; 0x64
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bda:	4649      	mov	r1, r9
 8004bdc:	008b      	lsls	r3, r1, #2
 8004bde:	4641      	mov	r1, r8
 8004be0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be4:	4641      	mov	r1, r8
 8004be6:	008a      	lsls	r2, r1, #2
 8004be8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bec:	f7fb fb58 	bl	80002a0 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	2164      	movs	r1, #100	; 0x64
 8004bfe:	fb01 f303 	mul.w	r3, r1, r3
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	3332      	adds	r3, #50	; 0x32
 8004c08:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <UART_SetConfig+0x4e4>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	f003 020f 	and.w	r2, r3, #15
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4422      	add	r2, r4
 8004c1c:	609a      	str	r2, [r3, #8]
}
 8004c1e:	bf00      	nop
 8004c20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	51eb851f 	.word	0x51eb851f

08004c30 <WIZnetRecv>:

//todo Add udp functions, ex) sendto recvfrom

/*Shell for mbedtls recv function*/
int WIZnetRecv(void *ctx, unsigned char *buf, unsigned int len )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
	int32_t ret;
	ret = recv(*((int *)ctx),buf,len);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	b292      	uxth	r2, r2
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f019 f8ad 	bl	801dda8 <recv>
 8004c4e:	6178      	str	r0, [r7, #20]
	printf("Port:[%d]/Recv(%d)[%d]: \r\n",*((int *)ctx) ,len, (unsigned int)ret);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4805      	ldr	r0, [pc, #20]	; (8004c70 <WIZnetRecv+0x40>)
 8004c5a:	f019 fde1 	bl	801e820 <iprintf>
	string_print_Hex(buf, len);
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	68b8      	ldr	r0, [r7, #8]
 8004c62:	f7fb fcdd 	bl	8000620 <string_print_Hex>
    //return (recv(*((int *)ctx),buf,len));
	return ret;
 8004c66:	697b      	ldr	r3, [r7, #20]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	080200fc 	.word	0x080200fc

08004c74 <WIZnetSend>:

/*Shell for mbedtls send function*/
int WIZnetSend(void *ctx, const unsigned char *buf, unsigned int len )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
	printf("Port:[%d]/Send(%d) : \r\n",*((int *)ctx) ,len);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4619      	mov	r1, r3
 8004c88:	480a      	ldr	r0, [pc, #40]	; (8004cb4 <WIZnetSend+0x40>)
 8004c8a:	f019 fdc9 	bl	801e820 <iprintf>
	string_print_Hex(buf, len);
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	68b8      	ldr	r0, [r7, #8]
 8004c92:	f7fb fcc5 	bl	8000620 <string_print_Hex>
    return (send(*((int *)ctx),buf,len));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f018 ff86 	bl	801dbb4 <send>
 8004ca8:	4603      	mov	r3, r0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08020118 	.word	0x08020118

08004cb8 <WIZnetDebugCB>:

/*Shell for mbedtls debug function.
 *DEBUG_LEBEL can be changed from 0 to 3*/
#ifdef MBEDTLS_DEBUG_C
void WIZnetDebugCB(void *ctx, int level, const char *file, int line, const char *str)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
    if(level <= DEBUG_LEVEL)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	dc03      	bgt.n	8004cd4 <WIZnetDebugCB+0x1c>
    {
       printf("%s\r\n",str);
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	4803      	ldr	r0, [pc, #12]	; (8004cdc <WIZnetDebugCB+0x24>)
 8004cd0:	f019 fda6 	bl	801e820 <iprintf>
    }
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	08020130 	.word	0x08020130

08004ce0 <wiz_tls_init>:
#endif

/* SSL context intialization
 * */
unsigned int wiz_tls_init(wiz_tls_context* tlsContext, int* socket_fd)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b09e      	sub	sp, #120	; 0x78
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
	int ret = 1;
 8004cea:	2301      	movs	r3, #1
 8004cec:	66fb      	str	r3, [r7, #108]	; 0x6c
	char error_buf[100];
#endif


#if defined (MBEDTLS_DEBUG_C)
	debug_set_threshold(DEBUG_LEVEL);
 8004cee:	2002      	movs	r0, #2
 8004cf0:	f006 ffdc 	bl	800bcac <mbedtls_debug_set_threshold>
#if defined (MBEDTLS_ENTROPY_C)
	tlsContext->entropy = malloc(sizeof(mbedtls_entropy_context));
	mbedtls_entropy_init( tlsContext->entropy);
#endif

	tlsContext->ctr_drbg = malloc(sizeof(mbedtls_ctr_drbg_context));
 8004cf4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8004cf8:	f019 fc4c 	bl	801e594 <malloc>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	601a      	str	r2, [r3, #0]
	tlsContext->ssl = malloc(sizeof(mbedtls_ssl_context));
 8004d04:	20b4      	movs	r0, #180	; 0xb4
 8004d06:	f019 fc45 	bl	801e594 <malloc>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	605a      	str	r2, [r3, #4]
	tlsContext->conf = malloc(sizeof(mbedtls_ssl_config));
 8004d12:	2054      	movs	r0, #84	; 0x54
 8004d14:	f019 fc3e 	bl	801e594 <malloc>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	609a      	str	r2, [r3, #8]
	tlsContext->cacert = malloc(sizeof(mbedtls_x509_crt));
 8004d20:	f44f 709a 	mov.w	r0, #308	; 0x134
 8004d24:	f019 fc36 	bl	801e594 <malloc>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]

	mbedtls_ctr_drbg_init(tlsContext->ctr_drbg);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f006 ffaa 	bl	800bc8e <mbedtls_ctr_drbg_init>
	mbedtls_x509_crt_init(tlsContext->cacert);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f018 f91a 	bl	801cf78 <mbedtls_x509_crt_init>
	mbedtls_ssl_init(tlsContext->ssl);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f014 fa51 	bl	80191f0 <mbedtls_ssl_init>
	mbedtls_ssl_config_init(tlsContext->conf);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f014 feb0 	bl	8019ab8 <mbedtls_ssl_config_init>
	*/

#if defined (MBEDTLS_X509_CRT_PARSE_C)

#if defined (MBEDTLS_DEBUG_C)
	printf(" Loading the CA root certificate \r\n");
 8004d58:	482f      	ldr	r0, [pc, #188]	; (8004e18 <wiz_tls_init+0x138>)
 8004d5a:	f019 fdfd 	bl	801e958 <puts>
#endif
	mbedtls_ssl_config_defaults((tlsContext->conf),
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6898      	ldr	r0, [r3, #8]
 8004d62:	2300      	movs	r3, #0
 8004d64:	2200      	movs	r2, #0
 8004d66:	2100      	movs	r1, #0
 8004d68:	f014 feb4 	bl	8019ad4 <mbedtls_ssl_config_defaults>
								MBEDTLS_SSL_IS_CLIENT,
								MBEDTLS_SSL_TRANSPORT_STREAM,
								MBEDTLS_SSL_PRESET_DEFAULT);
	ret=mbedtls_ssl_setup(tlsContext->ssl, tlsContext->conf);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f014 fa48 	bl	801920c <mbedtls_ssl_setup>
 8004d7c:	66f8      	str	r0, [r7, #108]	; 0x6c
	printf("mbedtls_ssl_setup : %d\r\n", ret);
 8004d7e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004d80:	4826      	ldr	r0, [pc, #152]	; (8004e1c <wiz_tls_init+0x13c>)
 8004d82:	f019 fd4d 	bl	801e820 <iprintf>
	mbedtls_ssl_set_hostname(tlsContext->ssl, sslHostName);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4925      	ldr	r1, [pc, #148]	; (8004e20 <wiz_tls_init+0x140>)
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f014 fb5f 	bl	8019450 <mbedtls_ssl_set_hostname>

#if defined (MBEDTLS_CERTS_C)
	printf("cert size[%d] = [%s]\r\n", strlen(CERTIFICATE), CERTIFICATE);
 8004d92:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <wiz_tls_init+0x144>)
 8004d94:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8004d98:	4823      	ldr	r0, [pc, #140]	; (8004e28 <wiz_tls_init+0x148>)
 8004d9a:	f019 fd41 	bl	801e820 <iprintf>
	ret = mbedtls_x509_crt_parse((tlsContext->cacert),(unsigned char *)CERTIFICATE, strlen(CERTIFICATE));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8004da6:	491f      	ldr	r1, [pc, #124]	; (8004e24 <wiz_tls_init+0x144>)
 8004da8:	4618      	mov	r0, r3
 8004daa:	f016 fc39 	bl	801b620 <mbedtls_x509_crt_parse>
 8004dae:	66f8      	str	r0, [r7, #108]	; 0x6c
#if defined (MBEDTLS_DEBUG_C)
	printf("SSL_CERTS_C not define .\r\n");
#endif
#endif
#endif
	if(ret < 0)
 8004db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	da03      	bge.n	8004dbe <wiz_tls_init+0xde>
	{
#if defined (MBEDTLS_CERTS_C)
		printf("x509_crt_parse failed.%x \r\n",ret);
 8004db6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004db8:	481c      	ldr	r0, [pc, #112]	; (8004e2c <wiz_tls_init+0x14c>)
 8004dba:	f019 fd31 	bl	801e820 <iprintf>
	}
	/*
		set ssl session param
	*/

	mbedtls_ssl_conf_ca_chain(tlsContext->conf, tlsContext->cacert, NULL);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6898      	ldr	r0, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f014 fb2e 	bl	801942a <mbedtls_ssl_conf_ca_chain>
	//mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_REQUIRED);//This option is for server certificate verification
	mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_NONE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f014 fad5 	bl	8019384 <mbedtls_ssl_conf_authmode>
	mbedtls_ssl_conf_rng(tlsContext->conf,SSLRandomCB,tlsContext->ctr_drbg);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6898      	ldr	r0, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	4912      	ldr	r1, [pc, #72]	; (8004e30 <wiz_tls_init+0x150>)
 8004de6:	f014 fae3 	bl	80193b0 <mbedtls_ssl_conf_rng>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ssl_conf_dbg(tlsContext->conf, WIZnetDebugCB, stdout);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6898      	ldr	r0, [r3, #8]
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <wiz_tls_init+0x154>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	461a      	mov	r2, r3
 8004df6:	4910      	ldr	r1, [pc, #64]	; (8004e38 <wiz_tls_init+0x158>)
 8004df8:	f014 faec 	bl	80193d4 <mbedtls_ssl_conf_dbg>
#endif
	mbedtls_ssl_set_bio(tlsContext->ssl, socket_fd, SSLSendCB, SSLRecvCB, SSLRecvTimeOutCB);		 //set client's socket send and receive functions
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6858      	ldr	r0, [r3, #4]
 8004e00:	2300      	movs	r3, #0
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <wiz_tls_init+0x15c>)
 8004e06:	4a0e      	ldr	r2, [pc, #56]	; (8004e40 <wiz_tls_init+0x160>)
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	f014 faf5 	bl	80193f8 <mbedtls_ssl_set_bio>

	return 1;
 8004e0e:	2301      	movs	r3, #1
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3770      	adds	r7, #112	; 0x70
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	08020138 	.word	0x08020138
 8004e1c:	0802015c 	.word	0x0802015c
 8004e20:	20000044 	.word	0x20000044
 8004e24:	08024d2c 	.word	0x08024d2c
 8004e28:	08020178 	.word	0x08020178
 8004e2c:	08020190 	.word	0x08020190
 8004e30:	08004fc5 	.word	0x08004fc5
 8004e34:	200000a8 	.word	0x200000a8
 8004e38:	08004cb9 	.word	0x08004cb9
 8004e3c:	08004c31 	.word	0x08004c31
 8004e40:	08004c75 	.word	0x08004c75

08004e44 <wiz_tls_connect>:
	free(tlsContext->cacert);
}

/* SSL handshake */
unsigned int wiz_tls_connect(wiz_tls_context* tlsContext, unsigned short port, uint8_t * addr)
{
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b089      	sub	sp, #36	; 0x24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	817b      	strh	r3, [r7, #10]
    int ret;

    memset(tempBuf,0,1024);
 8004e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e56:	2100      	movs	r1, #0
 8004e58:	4840      	ldr	r0, [pc, #256]	; (8004f5c <wiz_tls_connect+0x118>)
 8004e5a:	f019 fbe3 	bl	801e624 <memset>

	/*socket open*/
    printf("socket open port : %d \r\n",*((uint8_t*)(tlsContext->ssl->p_bio)));
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	4619      	mov	r1, r3
 8004e68:	483d      	ldr	r0, [pc, #244]	; (8004f60 <wiz_tls_connect+0x11c>)
 8004e6a:	f019 fcd9 	bl	801e820 <iprintf>
	ret = socket(*((uint8_t*)(tlsContext->ssl->p_bio)), Sn_MR_TCP, 0, 0x00);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	7818      	ldrb	r0, [r3, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	f018 fbc4 	bl	801d608 <socket>
 8004e80:	4603      	mov	r3, r0
 8004e82:	617b      	str	r3, [r7, #20]
	printf("socket[%d] \r\n", ret);
 8004e84:	6979      	ldr	r1, [r7, #20]
 8004e86:	4837      	ldr	r0, [pc, #220]	; (8004f64 <wiz_tls_connect+0x120>)
 8004e88:	f019 fcca 	bl	801e820 <iprintf>
	if(ret != *((uint8_t*)(tlsContext->ssl->p_bio)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d001      	beq.n	8004ea0 <wiz_tls_connect+0x5c>
		return ret;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	e058      	b.n	8004f52 <wiz_tls_connect+0x10e>

	/*Connect to the target*/
	printf("server ip : %d.%d.%d.%d port : %d \r\n", addr[0], addr[1], addr[2], addr[3], port);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	461c      	mov	r4, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3303      	adds	r3, #3
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	897b      	ldrh	r3, [r7, #10]
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	9200      	str	r2, [sp, #0]
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	4827      	ldr	r0, [pc, #156]	; (8004f68 <wiz_tls_connect+0x124>)
 8004eca:	f019 fca9 	bl	801e820 <iprintf>
	ret = connect(*((uint8_t*)tlsContext->ssl->p_bio), addr, port);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	897a      	ldrh	r2, [r7, #10]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f018 fd18 	bl	801d910 <connect>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	617b      	str	r3, [r7, #20]
	printf("init connect[%d] \r\n", ret);
 8004ee4:	6979      	ldr	r1, [r7, #20]
 8004ee6:	4821      	ldr	r0, [pc, #132]	; (8004f6c <wiz_tls_connect+0x128>)
 8004ee8:	f019 fc9a 	bl	801e820 <iprintf>
	if(ret != SOCK_OK)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d001      	beq.n	8004ef6 <wiz_tls_connect+0xb2>
		return ret;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	e02d      	b.n	8004f52 <wiz_tls_connect+0x10e>

#if defined(MBEDTLS_DEBUG_C)
    printf( "  . Performing the SSL/TLS handshake..." );
 8004ef6:	481e      	ldr	r0, [pc, #120]	; (8004f70 <wiz_tls_connect+0x12c>)
 8004ef8:	f019 fc92 	bl	801e820 <iprintf>
#endif

    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 8004efc:	e015      	b.n	8004f2a <wiz_tls_connect+0xe6>
    {
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8004f04:	d011      	beq.n	8004f2a <wiz_tls_connect+0xe6>
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f513 4fd1 	cmn.w	r3, #26752	; 0x6880
 8004f0c:	d00d      	beq.n	8004f2a <wiz_tls_connect+0xe6>
        {
#if defined(MBEDTLS_ERROR_C)
            mbedtls_strerror( ret, (char *) tempBuf, DEBUG_BUFFER_SIZE );
 8004f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f12:	4912      	ldr	r1, [pc, #72]	; (8004f5c <wiz_tls_connect+0x118>)
 8004f14:	6978      	ldr	r0, [r7, #20]
 8004f16:	f007 fca7 	bl	800c868 <mbedtls_strerror>
            printf( " failed\n\r  ! mbedtls_ssl_handshake returned %d: %s\n\r", ret, tempBuf );
 8004f1a:	4a10      	ldr	r2, [pc, #64]	; (8004f5c <wiz_tls_connect+0x118>)
 8004f1c:	6979      	ldr	r1, [r7, #20]
 8004f1e:	4815      	ldr	r0, [pc, #84]	; (8004f74 <wiz_tls_connect+0x130>)
 8004f20:	f019 fc7e 	bl	801e820 <iprintf>
#endif
            return( -1 );
 8004f24:	f04f 33ff 	mov.w	r3, #4294967295
 8004f28:	e013      	b.n	8004f52 <wiz_tls_connect+0x10e>
    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f014 fb2e 	bl	8019590 <mbedtls_ssl_handshake>
 8004f34:	6178      	str	r0, [r7, #20]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e0      	bne.n	8004efe <wiz_tls_connect+0xba>
        }
    }

#if defined(MBEDTLS_DEBUG_C)
    printf( "ok\n\r    [ Ciphersuite is %s ]\n\r",
            mbedtls_ssl_get_ciphersuite( tlsContext->ssl ) );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685b      	ldr	r3, [r3, #4]
    printf( "ok\n\r    [ Ciphersuite is %s ]\n\r",
 8004f40:	4618      	mov	r0, r3
 8004f42:	f014 fae3 	bl	801950c <mbedtls_ssl_get_ciphersuite>
 8004f46:	4603      	mov	r3, r0
 8004f48:	4619      	mov	r1, r3
 8004f4a:	480b      	ldr	r0, [pc, #44]	; (8004f78 <wiz_tls_connect+0x134>)
 8004f4c:	f019 fc68 	bl	801e820 <iprintf>
#endif

    return( 0 );
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd90      	pop	{r4, r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20001300 	.word	0x20001300
 8004f60:	080201ac 	.word	0x080201ac
 8004f64:	080201c8 	.word	0x080201c8
 8004f68:	080201d8 	.word	0x080201d8
 8004f6c:	08020200 	.word	0x08020200
 8004f70:	08020214 	.word	0x08020214
 8004f74:	0802023c 	.word	0x0802023c
 8004f78:	08020274 	.word	0x08020274

08004f7c <wiz_tls_read>:

unsigned int wiz_tls_read(wiz_tls_context* tlsContext, unsigned char* readbuf, unsigned int len)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
	return mbedtls_ssl_read( tlsContext->ssl, readbuf, len );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f014 fb39 	bl	8019608 <mbedtls_ssl_read>
 8004f96:	4603      	mov	r3, r0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <wiz_tls_write>:

unsigned int wiz_tls_write(wiz_tls_context* tlsContext, unsigned char* writebuf, unsigned int len)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
	return mbedtls_ssl_write( tlsContext->ssl, writebuf, len );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f014 fcd9 	bl	801996c <mbedtls_ssl_write>
 8004fba:	4603      	mov	r3, r0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <SSLRandomCB>:
{
	srand(randSeed);
}

int SSLRandomCB( void *p_rng, unsigned char *output, size_t output_len )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
    int i;

	if(output_len <= 0)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <SSLRandomCB+0x16>
	{
         return (1);
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e023      	b.n	8005022 <SSLRandomCB+0x5e>
	}
    for(i = 0;i < output_len;i++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e015      	b.n	800500c <SSLRandomCB+0x48>
    {
       *output++ = rand() % 0xff;
 8004fe0:	f019 fcf0 	bl	801e9c4 <rand>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <SSLRandomCB+0x68>)
 8004fe8:	fb83 1302 	smull	r1, r3, r3, r2
 8004fec:	4413      	add	r3, r2
 8004fee:	11d9      	asrs	r1, r3, #7
 8004ff0:	17d3      	asrs	r3, r2, #31
 8004ff2:	1ac9      	subs	r1, r1, r3
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	1a5b      	subs	r3, r3, r1
 8004ffa:	1ad1      	subs	r1, r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	60ba      	str	r2, [r7, #8]
 8005002:	b2ca      	uxtb	r2, r1
 8005004:	701a      	strb	r2, [r3, #0]
    for(i = 0;i < output_len;i++)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	3301      	adds	r3, #1
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d8e5      	bhi.n	8004fe0 <SSLRandomCB+0x1c>
	}
    srand(rand());
 8005014:	f019 fcd6 	bl	801e9c4 <rand>
 8005018:	4603      	mov	r3, r0
 800501a:	4618      	mov	r0, r3
 800501c:	f019 fca4 	bl	801e968 <srand>
	return (0);
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	80808081 	.word	0x80808081

08005030 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e004      	b.n	800504a <mbedtls_zeroize+0x1a>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	60fa      	str	r2, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	1e5a      	subs	r2, r3, #1
 800504e:	603a      	str	r2, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f5      	bne.n	8005040 <mbedtls_zeroize+0x10>
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <aes_gen_tables>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8005064:	b480      	push	{r7}
 8005066:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 800506a:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005072:	2301      	movs	r3, #1
 8005074:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8005078:	e02b      	b.n	80050d2 <aes_gen_tables+0x6e>
    {
        pow[i] = x;
 800507a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800507e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005082:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8005086:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800508a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 800508e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005092:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8005096:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 800509a:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 800509e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80050a2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80050ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80050b0:	2a00      	cmp	r2, #0
 80050b2:	d001      	beq.n	80050b8 <aes_gen_tables+0x54>
 80050b4:	221b      	movs	r2, #27
 80050b6:	e000      	b.n	80050ba <aes_gen_tables+0x56>
 80050b8:	2200      	movs	r2, #0
 80050ba:	405a      	eors	r2, r3
 80050bc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80050c0:	4053      	eors	r3, r2
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 256; i++ )
 80050c8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80050cc:	3301      	adds	r3, #1
 80050ce:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 80050d2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80050d6:	2bff      	cmp	r3, #255	; 0xff
 80050d8:	ddcf      	ble.n	800507a <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80050da:	2300      	movs	r3, #0
 80050dc:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 80050e0:	2301      	movs	r3, #1
 80050e2:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80050e6:	e01b      	b.n	8005120 <aes_gen_tables+0xbc>
    {
        RCON[i] = (uint32_t) x;
 80050e8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80050ec:	49cc      	ldr	r1, [pc, #816]	; (8005420 <aes_gen_tables+0x3bc>)
 80050ee:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80050f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME( x ) & 0xFF;
 80050f6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005100:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005104:	2a00      	cmp	r2, #0
 8005106:	d001      	beq.n	800510c <aes_gen_tables+0xa8>
 8005108:	221b      	movs	r2, #27
 800510a:	e000      	b.n	800510e <aes_gen_tables+0xaa>
 800510c:	2200      	movs	r2, #0
 800510e:	4053      	eors	r3, r2
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8005116:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800511a:	3301      	adds	r3, #1
 800511c:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005120:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005124:	2b09      	cmp	r3, #9
 8005126:	dddf      	ble.n	80050e8 <aes_gen_tables+0x84>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8005128:	4bbe      	ldr	r3, [pc, #760]	; (8005424 <aes_gen_tables+0x3c0>)
 800512a:	2263      	movs	r2, #99	; 0x63
 800512c:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 800512e:	4bbe      	ldr	r3, [pc, #760]	; (8005428 <aes_gen_tables+0x3c4>)
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 8005136:	2301      	movs	r3, #1
 8005138:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800513c:	e072      	b.n	8005224 <aes_gen_tables+0x1c0>
    {
        x = pow[255 - log[i]];
 800513e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005142:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8005146:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 800514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514e:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8005152:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005156:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800515a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515e:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8005162:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005166:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800516a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800516e:	005a      	lsls	r2, r3, #1
 8005170:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005174:	11db      	asrs	r3, r3, #7
 8005176:	4313      	orrs	r3, r2
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800517e:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005182:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005186:	4053      	eors	r3, r2
 8005188:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 800518c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005190:	005a      	lsls	r2, r3, #1
 8005192:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005196:	11db      	asrs	r3, r3, #7
 8005198:	4313      	orrs	r3, r2
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80051a0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80051a4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80051a8:	4053      	eors	r3, r2
 80051aa:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80051ae:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80051b2:	005a      	lsls	r2, r3, #1
 80051b4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80051b8:	11db      	asrs	r3, r3, #7
 80051ba:	4313      	orrs	r3, r2
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80051c2:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80051c6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80051ca:	4053      	eors	r3, r2
 80051cc:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80051d0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80051d4:	005a      	lsls	r2, r3, #1
 80051d6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80051da:	11db      	asrs	r3, r3, #7
 80051dc:	4313      	orrs	r3, r2
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y ^ 0x63;
 80051e4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80051e8:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 80051ec:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80051f0:	4053      	eors	r3, r2
 80051f2:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        FSb[i] = (unsigned char) x;
 80051f6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80051fa:	b2d9      	uxtb	r1, r3
 80051fc:	4a89      	ldr	r2, [pc, #548]	; (8005424 <aes_gen_tables+0x3c0>)
 80051fe:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005202:	4413      	add	r3, r2
 8005204:	460a      	mov	r2, r1
 8005206:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8005208:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800520c:	b2d9      	uxtb	r1, r3
 800520e:	4a86      	ldr	r2, [pc, #536]	; (8005428 <aes_gen_tables+0x3c4>)
 8005210:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005214:	4413      	add	r3, r2
 8005216:	460a      	mov	r2, r1
 8005218:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 800521a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800521e:	3301      	adds	r3, #1
 8005220:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005224:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005228:	2bff      	cmp	r3, #255	; 0xff
 800522a:	dd88      	ble.n	800513e <aes_gen_tables+0xda>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 800522c:	2300      	movs	r3, #0
 800522e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005232:	e136      	b.n	80054a2 <aes_gen_tables+0x43e>
    {
        x = FSb[i];
 8005234:	4a7b      	ldr	r2, [pc, #492]	; (8005424 <aes_gen_tables+0x3c0>)
 8005236:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800523a:	4413      	add	r3, r2
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
        y = XTIME( x ) & 0xFF;
 8005242:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 800524c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005250:	2a00      	cmp	r2, #0
 8005252:	d001      	beq.n	8005258 <aes_gen_tables+0x1f4>
 8005254:	221b      	movs	r2, #27
 8005256:	e000      	b.n	800525a <aes_gen_tables+0x1f6>
 8005258:	2200      	movs	r2, #0
 800525a:	4053      	eors	r3, r2
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        z =  ( y ^ x ) & 0xFF;
 8005262:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8005266:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800526a:	4053      	eors	r3, r2
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8005272:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005276:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 8005278:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800527c:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 800527e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005282:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8005284:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 8005286:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800528a:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 800528c:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 800528e:	4967      	ldr	r1, [pc, #412]	; (800542c <aes_gen_tables+0x3c8>)
 8005290:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 8005298:	4a64      	ldr	r2, [pc, #400]	; (800542c <aes_gen_tables+0x3c8>)
 800529a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800529e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80052a6:	4962      	ldr	r1, [pc, #392]	; (8005430 <aes_gen_tables+0x3cc>)
 80052a8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80052ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80052b0:	4a5f      	ldr	r2, [pc, #380]	; (8005430 <aes_gen_tables+0x3cc>)
 80052b2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80052b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ba:	ea4f 6233 	mov.w	r2, r3, ror #24
 80052be:	495d      	ldr	r1, [pc, #372]	; (8005434 <aes_gen_tables+0x3d0>)
 80052c0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80052c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 80052c8:	4a5a      	ldr	r2, [pc, #360]	; (8005434 <aes_gen_tables+0x3d0>)
 80052ca:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80052ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80052d6:	4958      	ldr	r1, [pc, #352]	; (8005438 <aes_gen_tables+0x3d4>)
 80052d8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80052dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        x = RSb[i];
 80052e0:	4a51      	ldr	r2, [pc, #324]	; (8005428 <aes_gen_tables+0x3c4>)
 80052e2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80052e6:	4413      	add	r3, r2
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80052ee:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d020      	beq.n	8005338 <aes_gen_tables+0x2d4>
 80052f6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80052fa:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80052fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005300:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005304:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8005308:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800530c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005310:	441a      	add	r2, r3
 8005312:	4b4a      	ldr	r3, [pc, #296]	; (800543c <aes_gen_tables+0x3d8>)
 8005314:	fb83 1302 	smull	r1, r3, r3, r2
 8005318:	4413      	add	r3, r2
 800531a:	11d9      	asrs	r1, r3, #7
 800531c:	17d3      	asrs	r3, r2, #31
 800531e:	1ac9      	subs	r1, r1, r3
 8005320:	460b      	mov	r3, r1
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	1a5b      	subs	r3, r3, r1
 8005326:	1ad1      	subs	r1, r2, r3
 8005328:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800532c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005330:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005334:	4618      	mov	r0, r3
 8005336:	e000      	b.n	800533a <aes_gen_tables+0x2d6>
 8005338:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800533a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800533e:	2b00      	cmp	r3, #0
 8005340:	d020      	beq.n	8005384 <aes_gen_tables+0x320>
 8005342:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005346:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800534a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800534c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005350:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8005354:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8005358:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800535c:	441a      	add	r2, r3
 800535e:	4b37      	ldr	r3, [pc, #220]	; (800543c <aes_gen_tables+0x3d8>)
 8005360:	fb83 1302 	smull	r1, r3, r3, r2
 8005364:	4413      	add	r3, r2
 8005366:	11d9      	asrs	r1, r3, #7
 8005368:	17d3      	asrs	r3, r2, #31
 800536a:	1ac9      	subs	r1, r1, r3
 800536c:	460b      	mov	r3, r1
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	1a5b      	subs	r3, r3, r1
 8005372:	1ad1      	subs	r1, r2, r3
 8005374:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005378:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800537c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	e000      	b.n	8005386 <aes_gen_tables+0x322>
 8005384:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8005386:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8005388:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800538c:	2b00      	cmp	r3, #0
 800538e:	d020      	beq.n	80053d2 <aes_gen_tables+0x36e>
 8005390:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005394:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8005398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800539a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800539e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80053a2:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 80053a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80053aa:	441a      	add	r2, r3
 80053ac:	4b23      	ldr	r3, [pc, #140]	; (800543c <aes_gen_tables+0x3d8>)
 80053ae:	fb83 1302 	smull	r1, r3, r3, r2
 80053b2:	4413      	add	r3, r2
 80053b4:	11d9      	asrs	r1, r3, #7
 80053b6:	17d3      	asrs	r3, r2, #31
 80053b8:	1ac9      	subs	r1, r1, r3
 80053ba:	460b      	mov	r3, r1
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	1a5b      	subs	r3, r3, r1
 80053c0:	1ad1      	subs	r1, r2, r3
 80053c2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80053c6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80053ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	e000      	b.n	80053d4 <aes_gen_tables+0x370>
 80053d2:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80053d4:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80053d6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d030      	beq.n	8005440 <aes_gen_tables+0x3dc>
 80053de:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80053e2:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80053e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80053ec:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80053f0:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 80053f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80053f8:	441a      	add	r2, r3
 80053fa:	4b10      	ldr	r3, [pc, #64]	; (800543c <aes_gen_tables+0x3d8>)
 80053fc:	fb83 1302 	smull	r1, r3, r3, r2
 8005400:	4413      	add	r3, r2
 8005402:	11d9      	asrs	r1, r3, #7
 8005404:	17d3      	asrs	r3, r2, #31
 8005406:	1ac9      	subs	r1, r1, r3
 8005408:	460b      	mov	r3, r1
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	1a5b      	subs	r3, r3, r1
 800540e:	1ad1      	subs	r1, r2, r3
 8005410:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005414:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	e010      	b.n	8005442 <aes_gen_tables+0x3de>
 8005420:	20003900 	.word	0x20003900
 8005424:	20001700 	.word	0x20001700
 8005428:	20002800 	.word	0x20002800
 800542c:	20001800 	.word	0x20001800
 8005430:	20001c00 	.word	0x20001c00
 8005434:	20002000 	.word	0x20002000
 8005438:	20002400 	.word	0x20002400
 800543c:	80808081 	.word	0x80808081
 8005440:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8005442:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8005446:	491d      	ldr	r1, [pc, #116]	; (80054bc <aes_gen_tables+0x458>)
 8005448:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800544c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        RT1[i] = ROTL8( RT0[i] );
 8005450:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <aes_gen_tables+0x458>)
 8005452:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800545e:	4918      	ldr	r1, [pc, #96]	; (80054c0 <aes_gen_tables+0x45c>)
 8005460:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8005468:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <aes_gen_tables+0x45c>)
 800546a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800546e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005472:	ea4f 6233 	mov.w	r2, r3, ror #24
 8005476:	4913      	ldr	r1, [pc, #76]	; (80054c4 <aes_gen_tables+0x460>)
 8005478:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800547c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8005480:	4a10      	ldr	r2, [pc, #64]	; (80054c4 <aes_gen_tables+0x460>)
 8005482:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800548e:	490e      	ldr	r1, [pc, #56]	; (80054c8 <aes_gen_tables+0x464>)
 8005490:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 8005498:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800549c:	3301      	adds	r3, #1
 800549e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 80054a2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80054a6:	2bff      	cmp	r3, #255	; 0xff
 80054a8:	f77f aec4 	ble.w	8005234 <aes_gen_tables+0x1d0>
    }
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	f607 0714 	addw	r7, r7, #2068	; 0x814
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	20002900 	.word	0x20002900
 80054c0:	20002d00 	.word	0x20002d00
 80054c4:	20003100 	.word	0x20003100
 80054c8:	20003500 	.word	0x20003500

080054cc <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 80054d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80054d8:	2100      	movs	r1, #0
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f019 f8a2 	bl	801e624 <memset>
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 80054f6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fd98 	bl	8005030 <mbedtls_zeroize>
 8005500:	e000      	b.n	8005504 <mbedtls_aes_free+0x1c>
        return;
 8005502:	bf00      	nop
}
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8005518:	4b97      	ldr	r3, [pc, #604]	; (8005778 <mbedtls_aes_setkey_enc+0x26c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d104      	bne.n	800552a <mbedtls_aes_setkey_enc+0x1e>
    {
        aes_gen_tables();
 8005520:	f7ff fda0 	bl	8005064 <aes_gen_tables>
        aes_init_done = 1;
 8005524:	4b94      	ldr	r3, [pc, #592]	; (8005778 <mbedtls_aes_setkey_enc+0x26c>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]

    }
#endif

    switch( keybits )
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005530:	d012      	beq.n	8005558 <mbedtls_aes_setkey_enc+0x4c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005538:	d812      	bhi.n	8005560 <mbedtls_aes_setkey_enc+0x54>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d003      	beq.n	8005548 <mbedtls_aes_setkey_enc+0x3c>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2bc0      	cmp	r3, #192	; 0xc0
 8005544:	d004      	beq.n	8005550 <mbedtls_aes_setkey_enc+0x44>
 8005546:	e00b      	b.n	8005560 <mbedtls_aes_setkey_enc+0x54>
    {
        case 128: ctx->nr = 10; break;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	220a      	movs	r2, #10
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e00a      	b.n	8005566 <mbedtls_aes_setkey_enc+0x5a>
        case 192: ctx->nr = 12; break;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	220c      	movs	r2, #12
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e006      	b.n	8005566 <mbedtls_aes_setkey_enc+0x5a>
        case 256: ctx->nr = 14; break;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	220e      	movs	r2, #14
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e002      	b.n	8005566 <mbedtls_aes_setkey_enc+0x5a>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8005560:	f06f 031f 	mvn.w	r3, #31
 8005564:	e1aa      	b.n	80058bc <mbedtls_aes_setkey_enc+0x3b0>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3308      	adds	r3, #8
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	e027      	b.n	80055c8 <mbedtls_aes_setkey_enc+0xbc>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	4413      	add	r3, r2
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	3301      	adds	r3, #1
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	4413      	add	r3, r2
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	ea41 0203 	orr.w	r2, r1, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	3302      	adds	r3, #2
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	440b      	add	r3, r1
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	041b      	lsls	r3, r3, #16
 80055a4:	ea42 0103 	orr.w	r1, r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	3303      	adds	r3, #3
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	061a      	lsls	r2, r3, #24
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	4403      	add	r3, r0
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	3301      	adds	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d3d2      	bcc.n	8005578 <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b0e      	cmp	r3, #14
 80055d8:	f000 80ca 	beq.w	8005770 <mbedtls_aes_setkey_enc+0x264>
 80055dc:	2b0e      	cmp	r3, #14
 80055de:	f300 816c 	bgt.w	80058ba <mbedtls_aes_setkey_enc+0x3ae>
 80055e2:	2b0a      	cmp	r3, #10
 80055e4:	d002      	beq.n	80055ec <mbedtls_aes_setkey_enc+0xe0>
 80055e6:	2b0c      	cmp	r3, #12
 80055e8:	d057      	beq.n	800569a <mbedtls_aes_setkey_enc+0x18e>
 80055ea:	e166      	b.n	80058ba <mbedtls_aes_setkey_enc+0x3ae>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	e04f      	b.n	8005692 <mbedtls_aes_setkey_enc+0x186>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4961      	ldr	r1, [pc, #388]	; (800577c <mbedtls_aes_setkey_enc+0x270>)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055fe:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	320c      	adds	r2, #12
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	0a12      	lsrs	r2, r2, #8
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	495d      	ldr	r1, [pc, #372]	; (8005780 <mbedtls_aes_setkey_enc+0x274>)
 800560c:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 800560e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	330c      	adds	r3, #12
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	b2db      	uxtb	r3, r3
 800561a:	4959      	ldr	r1, [pc, #356]	; (8005780 <mbedtls_aes_setkey_enc+0x274>)
 800561c:	5ccb      	ldrb	r3, [r1, r3]
 800561e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8005620:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	330c      	adds	r3, #12
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	0e1b      	lsrs	r3, r3, #24
 800562a:	4955      	ldr	r1, [pc, #340]	; (8005780 <mbedtls_aes_setkey_enc+0x274>)
 800562c:	5ccb      	ldrb	r3, [r1, r3]
 800562e:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8005630:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	330c      	adds	r3, #12
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	4a50      	ldr	r2, [pc, #320]	; (8005780 <mbedtls_aes_setkey_enc+0x274>)
 800563e:	5cd3      	ldrb	r3, [r2, r3]
 8005640:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8005646:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8005648:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3304      	adds	r3, #4
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	3310      	adds	r3, #16
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3314      	adds	r3, #20
 800565a:	404a      	eors	r2, r1
 800565c:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3308      	adds	r3, #8
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3314      	adds	r3, #20
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3318      	adds	r3, #24
 800566e:	404a      	eors	r2, r1
 8005670:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	330c      	adds	r3, #12
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3318      	adds	r3, #24
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	331c      	adds	r3, #28
 8005682:	404a      	eors	r2, r1
 8005684:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	3301      	adds	r3, #1
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	3310      	adds	r3, #16
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b09      	cmp	r3, #9
 8005696:	d9ac      	bls.n	80055f2 <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 8005698:	e10f      	b.n	80058ba <mbedtls_aes_setkey_enc+0x3ae>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e063      	b.n	8005768 <mbedtls_aes_setkey_enc+0x25c>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	4935      	ldr	r1, [pc, #212]	; (800577c <mbedtls_aes_setkey_enc+0x270>)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056ac:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	3214      	adds	r2, #20
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	0a12      	lsrs	r2, r2, #8
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	4931      	ldr	r1, [pc, #196]	; (8005780 <mbedtls_aes_setkey_enc+0x274>)
 80056ba:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 80056bc:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3314      	adds	r3, #20
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	492d      	ldr	r1, [pc, #180]	; (8005780 <mbedtls_aes_setkey_enc+0x274>)
 80056ca:	5ccb      	ldrb	r3, [r1, r3]
 80056cc:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80056ce:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	3314      	adds	r3, #20
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	0e1b      	lsrs	r3, r3, #24
 80056d8:	4929      	ldr	r1, [pc, #164]	; (8005780 <mbedtls_aes_setkey_enc+0x274>)
 80056da:	5ccb      	ldrb	r3, [r1, r3]
 80056dc:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80056de:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	3314      	adds	r3, #20
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	4a25      	ldr	r2, [pc, #148]	; (8005780 <mbedtls_aes_setkey_enc+0x274>)
 80056ec:	5cd3      	ldrb	r3, [r2, r3]
 80056ee:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80056f4:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 80056f6:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	3304      	adds	r3, #4
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	3318      	adds	r3, #24
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	331c      	adds	r3, #28
 8005708:	404a      	eors	r2, r1
 800570a:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	3308      	adds	r3, #8
 8005710:	6819      	ldr	r1, [r3, #0]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	331c      	adds	r3, #28
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	3320      	adds	r3, #32
 800571c:	404a      	eors	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	330c      	adds	r3, #12
 8005724:	6819      	ldr	r1, [r3, #0]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3320      	adds	r3, #32
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	3324      	adds	r3, #36	; 0x24
 8005730:	404a      	eors	r2, r1
 8005732:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	3310      	adds	r3, #16
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	3324      	adds	r3, #36	; 0x24
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3328      	adds	r3, #40	; 0x28
 8005744:	404a      	eors	r2, r1
 8005746:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	3314      	adds	r3, #20
 800574c:	6819      	ldr	r1, [r3, #0]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3328      	adds	r3, #40	; 0x28
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	332c      	adds	r3, #44	; 0x2c
 8005758:	404a      	eors	r2, r1
 800575a:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3301      	adds	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	3318      	adds	r3, #24
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b07      	cmp	r3, #7
 800576c:	d998      	bls.n	80056a0 <mbedtls_aes_setkey_enc+0x194>
            }
            break;
 800576e:	e0a4      	b.n	80058ba <mbedtls_aes_setkey_enc+0x3ae>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e09c      	b.n	80058b0 <mbedtls_aes_setkey_enc+0x3a4>
 8005776:	bf00      	nop
 8005778:	20003928 	.word	0x20003928
 800577c:	20003900 	.word	0x20003900
 8005780:	20001700 	.word	0x20001700
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	494e      	ldr	r1, [pc, #312]	; (80058c4 <mbedtls_aes_setkey_enc+0x3b8>)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005790:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	321c      	adds	r2, #28
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	0a12      	lsrs	r2, r2, #8
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	494a      	ldr	r1, [pc, #296]	; (80058c8 <mbedtls_aes_setkey_enc+0x3bc>)
 800579e:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 80057a0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	331c      	adds	r3, #28
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	0c1b      	lsrs	r3, r3, #16
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	4946      	ldr	r1, [pc, #280]	; (80058c8 <mbedtls_aes_setkey_enc+0x3bc>)
 80057ae:	5ccb      	ldrb	r3, [r1, r3]
 80057b0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80057b2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	331c      	adds	r3, #28
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	0e1b      	lsrs	r3, r3, #24
 80057bc:	4942      	ldr	r1, [pc, #264]	; (80058c8 <mbedtls_aes_setkey_enc+0x3bc>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80057c2:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	331c      	adds	r3, #28
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	4a3e      	ldr	r2, [pc, #248]	; (80058c8 <mbedtls_aes_setkey_enc+0x3bc>)
 80057d0:	5cd3      	ldrb	r3, [r2, r3]
 80057d2:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80057d8:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 80057da:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	3304      	adds	r3, #4
 80057e0:	6819      	ldr	r1, [r3, #0]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3320      	adds	r3, #32
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	3324      	adds	r3, #36	; 0x24
 80057ec:	404a      	eors	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	3308      	adds	r3, #8
 80057f4:	6819      	ldr	r1, [r3, #0]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3324      	adds	r3, #36	; 0x24
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3328      	adds	r3, #40	; 0x28
 8005800:	404a      	eors	r2, r1
 8005802:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	330c      	adds	r3, #12
 8005808:	6819      	ldr	r1, [r3, #0]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3328      	adds	r3, #40	; 0x28
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	332c      	adds	r3, #44	; 0x2c
 8005814:	404a      	eors	r2, r1
 8005816:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	3310      	adds	r3, #16
 800581c:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	322c      	adds	r2, #44	; 0x2c
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	4928      	ldr	r1, [pc, #160]	; (80058c8 <mbedtls_aes_setkey_enc+0x3bc>)
 8005828:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 800582a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	332c      	adds	r3, #44	; 0x2c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	0a1b      	lsrs	r3, r3, #8
 8005834:	b2db      	uxtb	r3, r3
 8005836:	4924      	ldr	r1, [pc, #144]	; (80058c8 <mbedtls_aes_setkey_enc+0x3bc>)
 8005838:	5ccb      	ldrb	r3, [r1, r3]
 800583a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800583c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	332c      	adds	r3, #44	; 0x2c
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	b2db      	uxtb	r3, r3
 8005848:	491f      	ldr	r1, [pc, #124]	; (80058c8 <mbedtls_aes_setkey_enc+0x3bc>)
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800584e:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	332c      	adds	r3, #44	; 0x2c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	0e1b      	lsrs	r3, r3, #24
 800585a:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <mbedtls_aes_setkey_enc+0x3bc>)
 800585c:	5cd3      	ldrb	r3, [r2, r3]
 800585e:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3330      	adds	r3, #48	; 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8005864:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8005866:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	3314      	adds	r3, #20
 800586c:	6819      	ldr	r1, [r3, #0]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	3330      	adds	r3, #48	; 0x30
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	3334      	adds	r3, #52	; 0x34
 8005878:	404a      	eors	r2, r1
 800587a:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	3318      	adds	r3, #24
 8005880:	6819      	ldr	r1, [r3, #0]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	3334      	adds	r3, #52	; 0x34
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	3338      	adds	r3, #56	; 0x38
 800588c:	404a      	eors	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	331c      	adds	r3, #28
 8005894:	6819      	ldr	r1, [r3, #0]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	3338      	adds	r3, #56	; 0x38
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	333c      	adds	r3, #60	; 0x3c
 80058a0:	404a      	eors	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	3301      	adds	r3, #1
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	3320      	adds	r3, #32
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	f67f af66 	bls.w	8005784 <mbedtls_aes_setkey_enc+0x278>
            }
            break;
 80058b8:	bf00      	nop
    }

    return( 0 );
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20003900 	.word	0x20003900
 80058c8:	20001700 	.word	0x20001700

080058cc <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b0d0      	sub	sp, #320	; 0x140
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80058da:	6018      	str	r0, [r3, #0]
 80058dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058e0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80058e4:	6019      	str	r1, [r3, #0]
 80058e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058ee:	601a      	str	r2, [r3, #0]
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 80058f0:	f107 0314 	add.w	r3, r7, #20
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fde9 	bl	80054cc <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80058fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3308      	adds	r3, #8
 8005906:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800590a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800590e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005918:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800591a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800591e:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8005922:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005926:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800592a:	f107 0014 	add.w	r0, r7, #20
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	6819      	ldr	r1, [r3, #0]
 8005932:	f7ff fdeb 	bl	800550c <mbedtls_aes_setkey_enc>
 8005936:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800593a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 80dd 	bne.w	8005afe <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 8005944:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005952:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 800595a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800595e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	4413      	add	r3, r2
 8005972:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    *RK++ = *SK++;
 8005976:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800597a:	1d13      	adds	r3, r2, #4
 800597c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005980:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005984:	1d19      	adds	r1, r3, #4
 8005986:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800598e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005992:	1d13      	adds	r3, r2, #4
 8005994:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005998:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800599c:	1d19      	adds	r1, r3, #4
 800599e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80059a6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80059aa:	1d13      	adds	r3, r2, #4
 80059ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80059b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059b4:	1d19      	adds	r1, r3, #4
 80059b6:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80059be:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80059c2:	1d13      	adds	r3, r2, #4
 80059c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80059c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059cc:	1d19      	adds	r1, r3, #4
 80059ce:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80059d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80059da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80059e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059ec:	3b20      	subs	r3, #32
 80059ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80059f2:	e04f      	b.n	8005a94 <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 80059f4:	2300      	movs	r3, #0
 80059f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80059fa:	e03d      	b.n	8005a78 <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 80059fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4a44      	ldr	r2, [pc, #272]	; (8005b18 <mbedtls_aes_setkey_dec+0x24c>)
 8005a06:	5cd3      	ldrb	r3, [r2, r3]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4b44      	ldr	r3, [pc, #272]	; (8005b1c <mbedtls_aes_setkey_dec+0x250>)
 8005a0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 8005a10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	493f      	ldr	r1, [pc, #252]	; (8005b18 <mbedtls_aes_setkey_dec+0x24c>)
 8005a1c:	5ccb      	ldrb	r3, [r1, r3]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4b3f      	ldr	r3, [pc, #252]	; (8005b20 <mbedtls_aes_setkey_dec+0x254>)
 8005a22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8005a26:	405a      	eors	r2, r3
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8005a28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	4939      	ldr	r1, [pc, #228]	; (8005b18 <mbedtls_aes_setkey_dec+0x24c>)
 8005a34:	5ccb      	ldrb	r3, [r1, r3]
 8005a36:	4619      	mov	r1, r3
 8005a38:	4b3a      	ldr	r3, [pc, #232]	; (8005b24 <mbedtls_aes_setkey_dec+0x258>)
 8005a3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 8005a3e:	ea82 0103 	eor.w	r1, r2, r3
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 8005a42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	0e1b      	lsrs	r3, r3, #24
 8005a4a:	4a33      	ldr	r2, [pc, #204]	; (8005b18 <mbedtls_aes_setkey_dec+0x24c>)
 8005a4c:	5cd3      	ldrb	r3, [r2, r3]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4b35      	ldr	r3, [pc, #212]	; (8005b28 <mbedtls_aes_setkey_dec+0x25c>)
 8005a52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8005a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a5a:	1d18      	adds	r0, r3, #4
 8005a5c:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8005a60:	404a      	eors	r2, r1
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8005a62:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 8005a64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005a6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a72:	3304      	adds	r3, #4
 8005a74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005a78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	ddbd      	ble.n	80059fc <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8005a80:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005a84:	3b01      	subs	r3, #1
 8005a86:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005a8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a8e:	3b20      	subs	r3, #32
 8005a90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005a94:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	dcab      	bgt.n	80059f4 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8005a9c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005aa0:	1d13      	adds	r3, r2, #4
 8005aa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005aa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005aaa:	1d19      	adds	r1, r3, #4
 8005aac:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005ab4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005ab8:	1d13      	adds	r3, r2, #4
 8005aba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005abe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ac2:	1d19      	adds	r1, r3, #4
 8005ac4:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005acc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005ad0:	1d13      	adds	r3, r2, #4
 8005ad2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005ad6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ada:	1d19      	adds	r1, r3, #4
 8005adc:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005ae4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005ae8:	1d13      	adds	r3, r2, #4
 8005aea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005aee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005af2:	1d19      	adds	r1, r3, #4
 8005af4:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	e000      	b.n	8005b00 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 8005afe:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8005b00:	f107 0314 	add.w	r3, r7, #20
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff fcef 	bl	80054e8 <mbedtls_aes_free>

    return( ret );
 8005b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20001700 	.word	0x20001700
 8005b1c:	20002900 	.word	0x20002900
 8005b20:	20002d00 	.word	0x20002d00
 8005b24:	20003100 	.word	0x20003100
 8005b28:	20003500 	.word	0x20003500

08005b2c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b08f      	sub	sp, #60	; 0x3c
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	3301      	adds	r3, #1
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	3302      	adds	r3, #2
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	061b      	lsls	r3, r3, #24
 8005b60:	4313      	orrs	r3, r2
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	1d1a      	adds	r2, r3, #4
 8005b68:	633a      	str	r2, [r7, #48]	; 0x30
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b6e:	4053      	eors	r3, r2
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3304      	adds	r3, #4
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	3305      	adds	r3, #5
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	431a      	orrs	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	3306      	adds	r3, #6
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3307      	adds	r3, #7
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	061b      	lsls	r3, r3, #24
 8005b96:	4313      	orrs	r3, r2
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	1d1a      	adds	r2, r3, #4
 8005b9e:	633a      	str	r2, [r7, #48]	; 0x30
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba4:	4053      	eors	r3, r2
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	3308      	adds	r3, #8
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	3309      	adds	r3, #9
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	330a      	adds	r3, #10
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	330b      	adds	r3, #11
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	061b      	lsls	r3, r3, #24
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	633a      	str	r2, [r7, #48]	; 0x30
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bda:	4053      	eors	r3, r2
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	330c      	adds	r3, #12
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	330d      	adds	r3, #13
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	330e      	adds	r3, #14
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	330f      	adds	r3, #15
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	4313      	orrs	r3, r2
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	1d1a      	adds	r2, r3, #4
 8005c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	4053      	eors	r3, r2
 8005c12:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	105b      	asrs	r3, r3, #1
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1e:	e0fa      	b.n	8005e16 <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	1d1a      	adds	r2, r3, #4
 8005c24:	633a      	str	r2, [r7, #48]	; 0x30
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	49ab      	ldr	r1, [pc, #684]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005c2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c32:	405a      	eors	r2, r3
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	49a9      	ldr	r1, [pc, #676]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005c3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c40:	405a      	eors	r2, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	0c1b      	lsrs	r3, r3, #16
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	49a6      	ldr	r1, [pc, #664]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005c4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c4e:	405a      	eors	r2, r3
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	0e1b      	lsrs	r3, r3, #24
 8005c54:	49a4      	ldr	r1, [pc, #656]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005c56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c5a:	4053      	eors	r3, r2
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	1d1a      	adds	r2, r3, #4
 8005c62:	633a      	str	r2, [r7, #48]	; 0x30
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	499c      	ldr	r1, [pc, #624]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c70:	405a      	eors	r2, r3
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	0a1b      	lsrs	r3, r3, #8
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	4999      	ldr	r1, [pc, #612]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005c7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c7e:	405a      	eors	r2, r3
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	0c1b      	lsrs	r3, r3, #16
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	4997      	ldr	r1, [pc, #604]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005c88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c8c:	405a      	eors	r2, r3
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	0e1b      	lsrs	r3, r3, #24
 8005c92:	4995      	ldr	r1, [pc, #596]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005c94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c98:	4053      	eors	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	1d1a      	adds	r2, r3, #4
 8005ca0:	633a      	str	r2, [r7, #48]	; 0x30
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	498c      	ldr	r1, [pc, #560]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005caa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cae:	405a      	eors	r2, r3
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	498a      	ldr	r1, [pc, #552]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005cb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cbc:	405a      	eors	r2, r3
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4987      	ldr	r1, [pc, #540]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005cc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cca:	405a      	eors	r2, r3
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	0e1b      	lsrs	r3, r3, #24
 8005cd0:	4985      	ldr	r1, [pc, #532]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005cd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cd6:	4053      	eors	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	1d1a      	adds	r2, r3, #4
 8005cde:	633a      	str	r2, [r7, #48]	; 0x30
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	497d      	ldr	r1, [pc, #500]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cec:	405a      	eors	r2, r3
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	497a      	ldr	r1, [pc, #488]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005cf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cfa:	405a      	eors	r2, r3
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	0c1b      	lsrs	r3, r3, #16
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	4978      	ldr	r1, [pc, #480]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005d04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d08:	405a      	eors	r2, r3
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	0e1b      	lsrs	r3, r3, #24
 8005d0e:	4976      	ldr	r1, [pc, #472]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005d10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d14:	4053      	eors	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	1d1a      	adds	r2, r3, #4
 8005d1c:	633a      	str	r2, [r7, #48]	; 0x30
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	496d      	ldr	r1, [pc, #436]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005d26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d2a:	405a      	eors	r2, r3
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	496b      	ldr	r1, [pc, #428]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005d34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d38:	405a      	eors	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	4968      	ldr	r1, [pc, #416]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005d42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d46:	405a      	eors	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	0e1b      	lsrs	r3, r3, #24
 8005d4c:	4966      	ldr	r1, [pc, #408]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005d4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d52:	4053      	eors	r3, r2
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	1d1a      	adds	r2, r3, #4
 8005d5a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	495e      	ldr	r1, [pc, #376]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005d64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d68:	405a      	eors	r2, r3
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	0a1b      	lsrs	r3, r3, #8
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	495b      	ldr	r1, [pc, #364]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005d72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d76:	405a      	eors	r2, r3
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	0c1b      	lsrs	r3, r3, #16
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	4959      	ldr	r1, [pc, #356]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005d80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d84:	405a      	eors	r2, r3
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	0e1b      	lsrs	r3, r3, #24
 8005d8a:	4957      	ldr	r1, [pc, #348]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d90:	4053      	eors	r3, r2
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	1d1a      	adds	r2, r3, #4
 8005d98:	633a      	str	r2, [r7, #48]	; 0x30
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	494e      	ldr	r1, [pc, #312]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005da2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005da6:	405a      	eors	r2, r3
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	494c      	ldr	r1, [pc, #304]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005db0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005db4:	405a      	eors	r2, r3
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	4949      	ldr	r1, [pc, #292]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005dbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dc2:	405a      	eors	r2, r3
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	0e1b      	lsrs	r3, r3, #24
 8005dc8:	4947      	ldr	r1, [pc, #284]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005dca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dce:	4053      	eors	r3, r2
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	1d1a      	adds	r2, r3, #4
 8005dd6:	633a      	str	r2, [r7, #48]	; 0x30
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	493f      	ldr	r1, [pc, #252]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005de0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005de4:	405a      	eors	r2, r3
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	493c      	ldr	r1, [pc, #240]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005dee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005df2:	405a      	eors	r2, r3
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	0c1b      	lsrs	r3, r3, #16
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	493a      	ldr	r1, [pc, #232]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005dfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e00:	405a      	eors	r2, r3
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	0e1b      	lsrs	r3, r3, #24
 8005e06:	4938      	ldr	r1, [pc, #224]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005e08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e0c:	4053      	eors	r3, r2
 8005e0e:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	3b01      	subs	r3, #1
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f73f af01 	bgt.w	8005c20 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	1d1a      	adds	r2, r3, #4
 8005e22:	633a      	str	r2, [r7, #48]	; 0x30
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	492c      	ldr	r1, [pc, #176]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005e2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e30:	405a      	eors	r2, r3
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	0a1b      	lsrs	r3, r3, #8
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	4929      	ldr	r1, [pc, #164]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005e3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e3e:	405a      	eors	r2, r3
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	4927      	ldr	r1, [pc, #156]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005e48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e4c:	405a      	eors	r2, r3
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	0e1b      	lsrs	r3, r3, #24
 8005e52:	4925      	ldr	r1, [pc, #148]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005e54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e58:	4053      	eors	r3, r2
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	633a      	str	r2, [r7, #48]	; 0x30
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	491c      	ldr	r1, [pc, #112]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005e6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e6e:	405a      	eors	r2, r3
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	491a      	ldr	r1, [pc, #104]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005e78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e7c:	405a      	eors	r2, r3
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	4917      	ldr	r1, [pc, #92]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005e86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e8a:	405a      	eors	r2, r3
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	0e1b      	lsrs	r3, r3, #24
 8005e90:	4915      	ldr	r1, [pc, #84]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005e92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e96:	4053      	eors	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	1d1a      	adds	r2, r3, #4
 8005e9e:	633a      	str	r2, [r7, #48]	; 0x30
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	490d      	ldr	r1, [pc, #52]	; (8005edc <mbedtls_internal_aes_encrypt+0x3b0>)
 8005ea8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005eac:	405a      	eors	r2, r3
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	0a1b      	lsrs	r3, r3, #8
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	490a      	ldr	r1, [pc, #40]	; (8005ee0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005eb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005eba:	405a      	eors	r2, r3
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	0c1b      	lsrs	r3, r3, #16
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	4908      	ldr	r1, [pc, #32]	; (8005ee4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005ec4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ec8:	405a      	eors	r2, r3
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	0e1b      	lsrs	r3, r3, #24
 8005ece:	4906      	ldr	r1, [pc, #24]	; (8005ee8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005ed0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ed4:	4053      	eors	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	e007      	b.n	8005eec <mbedtls_internal_aes_encrypt+0x3c0>
 8005edc:	20001800 	.word	0x20001800
 8005ee0:	20001c00 	.word	0x20001c00
 8005ee4:	20002000 	.word	0x20002000
 8005ee8:	20002400 	.word	0x20002400
 8005eec:	1d1a      	adds	r2, r3, #4
 8005eee:	633a      	str	r2, [r7, #48]	; 0x30
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	4979      	ldr	r1, [pc, #484]	; (80060dc <mbedtls_internal_aes_encrypt+0x5b0>)
 8005ef8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005efc:	405a      	eors	r2, r3
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	0a1b      	lsrs	r3, r3, #8
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	4976      	ldr	r1, [pc, #472]	; (80060e0 <mbedtls_internal_aes_encrypt+0x5b4>)
 8005f06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f0a:	405a      	eors	r2, r3
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	0c1b      	lsrs	r3, r3, #16
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	4974      	ldr	r1, [pc, #464]	; (80060e4 <mbedtls_internal_aes_encrypt+0x5b8>)
 8005f14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f18:	405a      	eors	r2, r3
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	0e1b      	lsrs	r3, r3, #24
 8005f1e:	4972      	ldr	r1, [pc, #456]	; (80060e8 <mbedtls_internal_aes_encrypt+0x5bc>)
 8005f20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f24:	4053      	eors	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	1d1a      	adds	r2, r3, #4
 8005f2c:	633a      	str	r2, [r7, #48]	; 0x30
 8005f2e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	496d      	ldr	r1, [pc, #436]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005f36:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8005f38:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	0a1b      	lsrs	r3, r3, #8
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	496a      	ldr	r1, [pc, #424]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8005f46:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	4967      	ldr	r1, [pc, #412]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005f50:	5ccb      	ldrb	r3, [r1, r3]
 8005f52:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005f54:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	0e1b      	lsrs	r3, r3, #24
 8005f5a:	4964      	ldr	r1, [pc, #400]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005f5c:	5ccb      	ldrb	r3, [r1, r3]
 8005f5e:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8005f60:	4053      	eors	r3, r2
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	1d1a      	adds	r2, r3, #4
 8005f68:	633a      	str	r2, [r7, #48]	; 0x30
 8005f6a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	495e      	ldr	r1, [pc, #376]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005f72:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8005f74:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	495b      	ldr	r1, [pc, #364]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005f7e:	5ccb      	ldrb	r3, [r1, r3]
 8005f80:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8005f82:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	0c1b      	lsrs	r3, r3, #16
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	4958      	ldr	r1, [pc, #352]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005f8c:	5ccb      	ldrb	r3, [r1, r3]
 8005f8e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005f90:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	0e1b      	lsrs	r3, r3, #24
 8005f96:	4955      	ldr	r1, [pc, #340]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005f98:	5ccb      	ldrb	r3, [r1, r3]
 8005f9a:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8005f9c:	4053      	eors	r3, r2
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	1d1a      	adds	r2, r3, #4
 8005fa4:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	494f      	ldr	r1, [pc, #316]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005fae:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8005fb0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	494c      	ldr	r1, [pc, #304]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005fba:	5ccb      	ldrb	r3, [r1, r3]
 8005fbc:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8005fbe:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4949      	ldr	r1, [pc, #292]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005fc8:	5ccb      	ldrb	r3, [r1, r3]
 8005fca:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8005fcc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	0e1b      	lsrs	r3, r3, #24
 8005fd2:	4946      	ldr	r1, [pc, #280]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005fd4:	5ccb      	ldrb	r3, [r1, r3]
 8005fd6:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8005fd8:	4053      	eors	r3, r2
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	1d1a      	adds	r2, r3, #4
 8005fe0:	633a      	str	r2, [r7, #48]	; 0x30
 8005fe2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	4940      	ldr	r1, [pc, #256]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005fea:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8005fec:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	0a1b      	lsrs	r3, r3, #8
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	493d      	ldr	r1, [pc, #244]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8005ffa:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	b2db      	uxtb	r3, r3
 8006002:	493a      	ldr	r1, [pc, #232]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8006004:	5ccb      	ldrb	r3, [r1, r3]
 8006006:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8006008:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	0e1b      	lsrs	r3, r3, #24
 800600e:	4937      	ldr	r1, [pc, #220]	; (80060ec <mbedtls_internal_aes_encrypt+0x5c0>)
 8006010:	5ccb      	ldrb	r3, [r1, r3]
 8006012:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8006014:	4053      	eors	r3, r2
 8006016:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	b2da      	uxtb	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	0a1a      	lsrs	r2, r3, #8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3301      	adds	r3, #1
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	0c1a      	lsrs	r2, r3, #16
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3302      	adds	r3, #2
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	0e1a      	lsrs	r2, r3, #24
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3303      	adds	r3, #3
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	0a1a      	lsrs	r2, r3, #8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3305      	adds	r3, #5
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	0c1a      	lsrs	r2, r3, #16
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3306      	adds	r3, #6
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	0e1a      	lsrs	r2, r3, #24
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3307      	adds	r3, #7
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3308      	adds	r3, #8
 8006076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	0a1a      	lsrs	r2, r3, #8
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3309      	adds	r3, #9
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	0c1a      	lsrs	r2, r3, #16
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	330a      	adds	r3, #10
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	0e1a      	lsrs	r2, r3, #24
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	330b      	adds	r3, #11
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	330c      	adds	r3, #12
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	0a1a      	lsrs	r2, r3, #8
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	330d      	adds	r3, #13
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	0c1a      	lsrs	r2, r3, #16
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	330e      	adds	r3, #14
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	0e1a      	lsrs	r2, r3, #24
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	330f      	adds	r3, #15
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]

    return( 0 );
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	373c      	adds	r7, #60	; 0x3c
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20001800 	.word	0x20001800
 80060e0:	20001c00 	.word	0x20001c00
 80060e4:	20002000 	.word	0x20002000
 80060e8:	20002400 	.word	0x20002400
 80060ec:	20001700 	.word	0x20001700

080060f0 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80060f0:	b480      	push	{r7}
 80060f2:	b08f      	sub	sp, #60	; 0x3c
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	3301      	adds	r3, #1
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	431a      	orrs	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3302      	adds	r3, #2
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	3303      	adds	r3, #3
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	061b      	lsls	r3, r3, #24
 8006124:	4313      	orrs	r3, r2
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	1d1a      	adds	r2, r3, #4
 800612c:	633a      	str	r2, [r7, #48]	; 0x30
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006132:	4053      	eors	r3, r2
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	3304      	adds	r3, #4
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3305      	adds	r3, #5
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	431a      	orrs	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	3306      	adds	r3, #6
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	041b      	lsls	r3, r3, #16
 8006150:	431a      	orrs	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3307      	adds	r3, #7
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	061b      	lsls	r3, r3, #24
 800615a:	4313      	orrs	r3, r2
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	1d1a      	adds	r2, r3, #4
 8006162:	633a      	str	r2, [r7, #48]	; 0x30
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006168:	4053      	eors	r3, r2
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	3308      	adds	r3, #8
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	3309      	adds	r3, #9
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	431a      	orrs	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	330a      	adds	r3, #10
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	041b      	lsls	r3, r3, #16
 8006186:	431a      	orrs	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	330b      	adds	r3, #11
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	4313      	orrs	r3, r2
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	633a      	str	r2, [r7, #48]	; 0x30
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619e:	4053      	eors	r3, r2
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	330c      	adds	r3, #12
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	330d      	adds	r3, #13
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	431a      	orrs	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	330e      	adds	r3, #14
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	431a      	orrs	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	330f      	adds	r3, #15
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	061b      	lsls	r3, r3, #24
 80061c6:	4313      	orrs	r3, r2
 80061c8:	623b      	str	r3, [r7, #32]
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	1d1a      	adds	r2, r3, #4
 80061ce:	633a      	str	r2, [r7, #48]	; 0x30
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a3a      	ldr	r2, [r7, #32]
 80061d4:	4053      	eors	r3, r2
 80061d6:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	105b      	asrs	r3, r3, #1
 80061de:	3b01      	subs	r3, #1
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
 80061e2:	e0fa      	b.n	80063da <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	1d1a      	adds	r2, r3, #4
 80061e8:	633a      	str	r2, [r7, #48]	; 0x30
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	49ab      	ldr	r1, [pc, #684]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 80061f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061f6:	405a      	eors	r2, r3
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	0a1b      	lsrs	r3, r3, #8
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	49a9      	ldr	r1, [pc, #676]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8006200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006204:	405a      	eors	r2, r3
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	b2db      	uxtb	r3, r3
 800620c:	49a6      	ldr	r1, [pc, #664]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 800620e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006212:	405a      	eors	r2, r3
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	0e1b      	lsrs	r3, r3, #24
 8006218:	49a4      	ldr	r1, [pc, #656]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 800621a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800621e:	4053      	eors	r3, r2
 8006220:	61fb      	str	r3, [r7, #28]
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	1d1a      	adds	r2, r3, #4
 8006226:	633a      	str	r2, [r7, #48]	; 0x30
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	b2db      	uxtb	r3, r3
 800622e:	499c      	ldr	r1, [pc, #624]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8006230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006234:	405a      	eors	r2, r3
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	0a1b      	lsrs	r3, r3, #8
 800623a:	b2db      	uxtb	r3, r3
 800623c:	4999      	ldr	r1, [pc, #612]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 800623e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006242:	405a      	eors	r2, r3
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	0c1b      	lsrs	r3, r3, #16
 8006248:	b2db      	uxtb	r3, r3
 800624a:	4997      	ldr	r1, [pc, #604]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 800624c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006250:	405a      	eors	r2, r3
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	0e1b      	lsrs	r3, r3, #24
 8006256:	4995      	ldr	r1, [pc, #596]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 8006258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800625c:	4053      	eors	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	1d1a      	adds	r2, r3, #4
 8006264:	633a      	str	r2, [r7, #48]	; 0x30
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	b2db      	uxtb	r3, r3
 800626c:	498c      	ldr	r1, [pc, #560]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 800626e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006272:	405a      	eors	r2, r3
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	b2db      	uxtb	r3, r3
 800627a:	498a      	ldr	r1, [pc, #552]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 800627c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006280:	405a      	eors	r2, r3
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	0c1b      	lsrs	r3, r3, #16
 8006286:	b2db      	uxtb	r3, r3
 8006288:	4987      	ldr	r1, [pc, #540]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 800628a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800628e:	405a      	eors	r2, r3
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	0e1b      	lsrs	r3, r3, #24
 8006294:	4985      	ldr	r1, [pc, #532]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 8006296:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800629a:	4053      	eors	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	1d1a      	adds	r2, r3, #4
 80062a2:	633a      	str	r2, [r7, #48]	; 0x30
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	497d      	ldr	r1, [pc, #500]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 80062ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062b0:	405a      	eors	r2, r3
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	497a      	ldr	r1, [pc, #488]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 80062ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062be:	405a      	eors	r2, r3
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	0c1b      	lsrs	r3, r3, #16
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	4978      	ldr	r1, [pc, #480]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 80062c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062cc:	405a      	eors	r2, r3
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	0e1b      	lsrs	r3, r3, #24
 80062d2:	4976      	ldr	r1, [pc, #472]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 80062d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062d8:	4053      	eors	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	1d1a      	adds	r2, r3, #4
 80062e0:	633a      	str	r2, [r7, #48]	; 0x30
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	496d      	ldr	r1, [pc, #436]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 80062ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062ee:	405a      	eors	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	496b      	ldr	r1, [pc, #428]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 80062f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062fc:	405a      	eors	r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	b2db      	uxtb	r3, r3
 8006304:	4968      	ldr	r1, [pc, #416]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8006306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800630a:	405a      	eors	r2, r3
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	0e1b      	lsrs	r3, r3, #24
 8006310:	4966      	ldr	r1, [pc, #408]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 8006312:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006316:	4053      	eors	r3, r2
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	1d1a      	adds	r2, r3, #4
 800631e:	633a      	str	r2, [r7, #48]	; 0x30
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	495e      	ldr	r1, [pc, #376]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8006328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800632c:	405a      	eors	r2, r3
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	0a1b      	lsrs	r3, r3, #8
 8006332:	b2db      	uxtb	r3, r3
 8006334:	495b      	ldr	r1, [pc, #364]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8006336:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800633a:	405a      	eors	r2, r3
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	0c1b      	lsrs	r3, r3, #16
 8006340:	b2db      	uxtb	r3, r3
 8006342:	4959      	ldr	r1, [pc, #356]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8006344:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006348:	405a      	eors	r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	0e1b      	lsrs	r3, r3, #24
 800634e:	4957      	ldr	r1, [pc, #348]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 8006350:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006354:	4053      	eors	r3, r2
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	1d1a      	adds	r2, r3, #4
 800635c:	633a      	str	r2, [r7, #48]	; 0x30
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	494e      	ldr	r1, [pc, #312]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8006366:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800636a:	405a      	eors	r2, r3
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	b2db      	uxtb	r3, r3
 8006372:	494c      	ldr	r1, [pc, #304]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8006374:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006378:	405a      	eors	r2, r3
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	b2db      	uxtb	r3, r3
 8006380:	4949      	ldr	r1, [pc, #292]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8006382:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006386:	405a      	eors	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	0e1b      	lsrs	r3, r3, #24
 800638c:	4947      	ldr	r1, [pc, #284]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 800638e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006392:	4053      	eors	r3, r2
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	1d1a      	adds	r2, r3, #4
 800639a:	633a      	str	r2, [r7, #48]	; 0x30
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	493f      	ldr	r1, [pc, #252]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 80063a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80063a8:	405a      	eors	r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	0a1b      	lsrs	r3, r3, #8
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	493c      	ldr	r1, [pc, #240]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 80063b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80063b6:	405a      	eors	r2, r3
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	0c1b      	lsrs	r3, r3, #16
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	493a      	ldr	r1, [pc, #232]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 80063c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80063c4:	405a      	eors	r2, r3
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	0e1b      	lsrs	r3, r3, #24
 80063ca:	4938      	ldr	r1, [pc, #224]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 80063cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80063d0:	4053      	eors	r3, r2
 80063d2:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	3b01      	subs	r3, #1
 80063d8:	637b      	str	r3, [r7, #52]	; 0x34
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f73f af01 	bgt.w	80061e4 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	1d1a      	adds	r2, r3, #4
 80063e6:	633a      	str	r2, [r7, #48]	; 0x30
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	492c      	ldr	r1, [pc, #176]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 80063f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80063f4:	405a      	eors	r2, r3
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	0a1b      	lsrs	r3, r3, #8
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	4929      	ldr	r1, [pc, #164]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 80063fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006402:	405a      	eors	r2, r3
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	0c1b      	lsrs	r3, r3, #16
 8006408:	b2db      	uxtb	r3, r3
 800640a:	4927      	ldr	r1, [pc, #156]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 800640c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006410:	405a      	eors	r2, r3
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	0e1b      	lsrs	r3, r3, #24
 8006416:	4925      	ldr	r1, [pc, #148]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 8006418:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800641c:	4053      	eors	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	633a      	str	r2, [r7, #48]	; 0x30
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	b2db      	uxtb	r3, r3
 800642c:	491c      	ldr	r1, [pc, #112]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 800642e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006432:	405a      	eors	r2, r3
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	0a1b      	lsrs	r3, r3, #8
 8006438:	b2db      	uxtb	r3, r3
 800643a:	491a      	ldr	r1, [pc, #104]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 800643c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006440:	405a      	eors	r2, r3
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	0c1b      	lsrs	r3, r3, #16
 8006446:	b2db      	uxtb	r3, r3
 8006448:	4917      	ldr	r1, [pc, #92]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 800644a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800644e:	405a      	eors	r2, r3
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	0e1b      	lsrs	r3, r3, #24
 8006454:	4915      	ldr	r1, [pc, #84]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 8006456:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800645a:	4053      	eors	r3, r2
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	1d1a      	adds	r2, r3, #4
 8006462:	633a      	str	r2, [r7, #48]	; 0x30
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	b2db      	uxtb	r3, r3
 800646a:	490d      	ldr	r1, [pc, #52]	; (80064a0 <mbedtls_internal_aes_decrypt+0x3b0>)
 800646c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006470:	405a      	eors	r2, r3
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	0a1b      	lsrs	r3, r3, #8
 8006476:	b2db      	uxtb	r3, r3
 8006478:	490a      	ldr	r1, [pc, #40]	; (80064a4 <mbedtls_internal_aes_decrypt+0x3b4>)
 800647a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800647e:	405a      	eors	r2, r3
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	b2db      	uxtb	r3, r3
 8006486:	4908      	ldr	r1, [pc, #32]	; (80064a8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8006488:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800648c:	405a      	eors	r2, r3
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	0e1b      	lsrs	r3, r3, #24
 8006492:	4906      	ldr	r1, [pc, #24]	; (80064ac <mbedtls_internal_aes_decrypt+0x3bc>)
 8006494:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006498:	4053      	eors	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	e007      	b.n	80064b0 <mbedtls_internal_aes_decrypt+0x3c0>
 80064a0:	20002900 	.word	0x20002900
 80064a4:	20002d00 	.word	0x20002d00
 80064a8:	20003100 	.word	0x20003100
 80064ac:	20003500 	.word	0x20003500
 80064b0:	1d1a      	adds	r2, r3, #4
 80064b2:	633a      	str	r2, [r7, #48]	; 0x30
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	4979      	ldr	r1, [pc, #484]	; (80066a0 <mbedtls_internal_aes_decrypt+0x5b0>)
 80064bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80064c0:	405a      	eors	r2, r3
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	4976      	ldr	r1, [pc, #472]	; (80066a4 <mbedtls_internal_aes_decrypt+0x5b4>)
 80064ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80064ce:	405a      	eors	r2, r3
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	0c1b      	lsrs	r3, r3, #16
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	4974      	ldr	r1, [pc, #464]	; (80066a8 <mbedtls_internal_aes_decrypt+0x5b8>)
 80064d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80064dc:	405a      	eors	r2, r3
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	0e1b      	lsrs	r3, r3, #24
 80064e2:	4972      	ldr	r1, [pc, #456]	; (80066ac <mbedtls_internal_aes_decrypt+0x5bc>)
 80064e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80064e8:	4053      	eors	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	1d1a      	adds	r2, r3, #4
 80064f0:	633a      	str	r2, [r7, #48]	; 0x30
 80064f2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	496d      	ldr	r1, [pc, #436]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 80064fa:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 80064fc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	0a1b      	lsrs	r3, r3, #8
 8006502:	b2db      	uxtb	r3, r3
 8006504:	496a      	ldr	r1, [pc, #424]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006506:	5ccb      	ldrb	r3, [r1, r3]
 8006508:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800650a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	0c1b      	lsrs	r3, r3, #16
 8006510:	b2db      	uxtb	r3, r3
 8006512:	4967      	ldr	r1, [pc, #412]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006514:	5ccb      	ldrb	r3, [r1, r3]
 8006516:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8006518:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	0e1b      	lsrs	r3, r3, #24
 800651e:	4964      	ldr	r1, [pc, #400]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006520:	5ccb      	ldrb	r3, [r1, r3]
 8006522:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8006524:	4053      	eors	r3, r2
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	633a      	str	r2, [r7, #48]	; 0x30
 800652e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	495e      	ldr	r1, [pc, #376]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006536:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8006538:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	0a1b      	lsrs	r3, r3, #8
 800653e:	b2db      	uxtb	r3, r3
 8006540:	495b      	ldr	r1, [pc, #364]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006542:	5ccb      	ldrb	r3, [r1, r3]
 8006544:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8006546:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	0c1b      	lsrs	r3, r3, #16
 800654c:	b2db      	uxtb	r3, r3
 800654e:	4958      	ldr	r1, [pc, #352]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006550:	5ccb      	ldrb	r3, [r1, r3]
 8006552:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8006554:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	0e1b      	lsrs	r3, r3, #24
 800655a:	4955      	ldr	r1, [pc, #340]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 800655c:	5ccb      	ldrb	r3, [r1, r3]
 800655e:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8006560:	4053      	eors	r3, r2
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	633a      	str	r2, [r7, #48]	; 0x30
 800656a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	494f      	ldr	r1, [pc, #316]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006572:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8006574:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	b2db      	uxtb	r3, r3
 800657c:	494c      	ldr	r1, [pc, #304]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 800657e:	5ccb      	ldrb	r3, [r1, r3]
 8006580:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8006582:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	0c1b      	lsrs	r3, r3, #16
 8006588:	b2db      	uxtb	r3, r3
 800658a:	4949      	ldr	r1, [pc, #292]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 800658c:	5ccb      	ldrb	r3, [r1, r3]
 800658e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8006590:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	0e1b      	lsrs	r3, r3, #24
 8006596:	4946      	ldr	r1, [pc, #280]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006598:	5ccb      	ldrb	r3, [r1, r3]
 800659a:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 800659c:	4053      	eors	r3, r2
 800659e:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	633a      	str	r2, [r7, #48]	; 0x30
 80065a6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	4940      	ldr	r1, [pc, #256]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 80065ae:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 80065b0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	0a1b      	lsrs	r3, r3, #8
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	493d      	ldr	r1, [pc, #244]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 80065ba:	5ccb      	ldrb	r3, [r1, r3]
 80065bc:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80065be:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	0c1b      	lsrs	r3, r3, #16
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	493a      	ldr	r1, [pc, #232]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 80065c8:	5ccb      	ldrb	r3, [r1, r3]
 80065ca:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80065cc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	0e1b      	lsrs	r3, r3, #24
 80065d2:	4937      	ldr	r1, [pc, #220]	; (80066b0 <mbedtls_internal_aes_decrypt+0x5c0>)
 80065d4:	5ccb      	ldrb	r3, [r1, r3]
 80065d6:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 80065d8:	4053      	eors	r3, r2
 80065da:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	0a1a      	lsrs	r2, r3, #8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3301      	adds	r3, #1
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	0c1a      	lsrs	r2, r3, #16
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3302      	adds	r3, #2
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	0e1a      	lsrs	r2, r3, #24
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3303      	adds	r3, #3
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	0a1a      	lsrs	r2, r3, #8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3305      	adds	r3, #5
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	0c1a      	lsrs	r2, r3, #16
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3306      	adds	r3, #6
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	0e1a      	lsrs	r2, r3, #24
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3307      	adds	r3, #7
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3308      	adds	r3, #8
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	0a1a      	lsrs	r2, r3, #8
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3309      	adds	r3, #9
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	0c1a      	lsrs	r2, r3, #16
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	330a      	adds	r3, #10
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	0e1a      	lsrs	r2, r3, #24
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	330b      	adds	r3, #11
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	330c      	adds	r3, #12
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	0a1a      	lsrs	r2, r3, #8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	330d      	adds	r3, #13
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	0c1a      	lsrs	r2, r3, #16
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	330e      	adds	r3, #14
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	0e1a      	lsrs	r2, r3, #24
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	330f      	adds	r3, #15
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	373c      	adds	r7, #60	; 0x3c
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	20002900 	.word	0x20002900
 80066a4:	20002d00 	.word	0x20002d00
 80066a8:	20003100 	.word	0x20003100
 80066ac:	20003500 	.word	0x20003500
 80066b0:	20002800 	.word	0x20002800

080066b4 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d106      	bne.n	80066d6 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff fa2d 	bl	8005b2c <mbedtls_internal_aes_encrypt>
 80066d2:	4603      	mov	r3, r0
 80066d4:	e005      	b.n	80066e2 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7ff fd08 	bl	80060f0 <mbedtls_internal_aes_decrypt>
 80066e0:	4603      	mov	r3, r0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 80066ea:	b5b0      	push	{r4, r5, r7, lr}
 80066ec:	b08a      	sub	sp, #40	; 0x28
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	603b      	str	r3, [r7, #0]
    int i;
    unsigned char temp[16];

    if( length % 16 )
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 8006702:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8006706:	e06d      	b.n	80067e4 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d166      	bne.n	80067dc <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 800670e:	e036      	b.n	800677e <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	f107 0414 	add.w	r4, r7, #20
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 8006720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff ffc4 	bl	80066b4 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 800672c:	2300      	movs	r3, #0
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
 8006730:	e010      	b.n	8006754 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006736:	4413      	add	r3, r2
 8006738:	7819      	ldrb	r1, [r3, #0]
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	4413      	add	r3, r2
 8006740:	781a      	ldrb	r2, [r3, #0]
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006746:	4403      	add	r3, r0
 8006748:	404a      	eors	r2, r1
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	3301      	adds	r3, #1
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	2b0f      	cmp	r3, #15
 8006758:	ddeb      	ble.n	8006732 <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	461d      	mov	r5, r3
 800675e:	f107 0414 	add.w	r4, r7, #20
 8006762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006764:	6028      	str	r0, [r5, #0]
 8006766:	6069      	str	r1, [r5, #4]
 8006768:	60aa      	str	r2, [r5, #8]
 800676a:	60eb      	str	r3, [r5, #12]

            input  += 16;
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	3310      	adds	r3, #16
 8006770:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 8006772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006774:	3310      	adds	r3, #16
 8006776:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3b10      	subs	r3, #16
 800677c:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1c5      	bne.n	8006710 <mbedtls_aes_crypt_cbc+0x26>
 8006784:	e02d      	b.n	80067e2 <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 8006786:	2300      	movs	r3, #0
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
 800678a:	e010      	b.n	80067ae <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006790:	4413      	add	r3, r2
 8006792:	7819      	ldrb	r1, [r3, #0]
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4413      	add	r3, r2
 800679a:	781a      	ldrb	r2, [r3, #0]
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067a0:	4403      	add	r3, r0
 80067a2:	404a      	eors	r2, r1
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	3301      	adds	r3, #1
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	2b0f      	cmp	r3, #15
 80067b2:	ddeb      	ble.n	800678c <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 80067b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f7ff ff7a 	bl	80066b4 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 80067c0:	2210      	movs	r2, #16
 80067c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067c4:	6838      	ldr	r0, [r7, #0]
 80067c6:	f017 ff05 	bl	801e5d4 <memcpy>

            input  += 16;
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	3310      	adds	r3, #16
 80067ce:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 80067d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d2:	3310      	adds	r3, #16
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3b10      	subs	r3, #16
 80067da:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1d1      	bne.n	8006786 <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3728      	adds	r7, #40	; 0x28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bdb0      	pop	{r4, r5, r7, pc}

080067ec <mbedtls_zeroize>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e004      	b.n	8006806 <mbedtls_zeroize+0x1a>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	60fa      	str	r2, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	1e5a      	subs	r2, r3, #1
 800680a:	603a      	str	r2, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f5      	bne.n	80067fc <mbedtls_zeroize+0x10>
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
    if( ( end - *p ) < 1 )
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	dc02      	bgt.n	800683e <mbedtls_asn1_get_len+0x1e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006838:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 800683c:	e0ac      	b.n	8006998 <mbedtls_asn1_get_len+0x178>

    if( ( **p & 0x80 ) == 0 )
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	b25b      	sxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	db09      	blt.n	800685e <mbedtls_asn1_get_len+0x3e>
        *len = *(*p)++;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	1c59      	adds	r1, r3, #1
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	6011      	str	r1, [r2, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	e090      	b.n	8006980 <mbedtls_asn1_get_len+0x160>
    else
    {
        switch( **p & 0x7F )
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006868:	3b01      	subs	r3, #1
 800686a:	2b03      	cmp	r3, #3
 800686c:	f200 8085 	bhi.w	800697a <mbedtls_asn1_get_len+0x15a>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <mbedtls_asn1_get_len+0x58>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	08006889 	.word	0x08006889
 800687c:	080068b5 	.word	0x080068b5
 8006880:	080068eb 	.word	0x080068eb
 8006884:	0800692d 	.word	0x0800692d
        {
        case 1:
            if( ( end - *p ) < 2 )
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	dc02      	bgt.n	800689a <mbedtls_asn1_get_len+0x7a>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006894:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8006898:	e07e      	b.n	8006998 <mbedtls_asn1_get_len+0x178>

            *len = (*p)[1];
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3301      	adds	r3, #1
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]
            (*p) += 2;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	1c9a      	adds	r2, r3, #2
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	601a      	str	r2, [r3, #0]
            break;
 80068b2:	e065      	b.n	8006980 <mbedtls_asn1_get_len+0x160>

        case 2:
            if( ( end - *p ) < 3 )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	dc02      	bgt.n	80068c6 <mbedtls_asn1_get_len+0xa6>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80068c0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80068c4:	e068      	b.n	8006998 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3301      	adds	r3, #1
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	3202      	adds	r2, #2
 80068d6:	7812      	ldrb	r2, [r2, #0]
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	601a      	str	r2, [r3, #0]
            (*p) += 3;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	1cda      	adds	r2, r3, #3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	601a      	str	r2, [r3, #0]
            break;
 80068e8:	e04a      	b.n	8006980 <mbedtls_asn1_get_len+0x160>

        case 3:
            if( ( end - *p ) < 4 )
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	dc02      	bgt.n	80068fc <mbedtls_asn1_get_len+0xdc>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80068f6:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80068fa:	e04d      	b.n	8006998 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 16 ) |
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	041a      	lsls	r2, r3, #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3302      	adds	r3, #2
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8006910:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	3203      	adds	r2, #3
 8006918:	7812      	ldrb	r2, [r2, #0]
 800691a:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 16 ) |
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	601a      	str	r2, [r3, #0]
            (*p) += 4;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	1d1a      	adds	r2, r3, #4
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	601a      	str	r2, [r3, #0]
            break;
 800692a:	e029      	b.n	8006980 <mbedtls_asn1_get_len+0x160>

        case 4:
            if( ( end - *p ) < 5 )
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b04      	cmp	r3, #4
 8006936:	dc02      	bgt.n	800693e <mbedtls_asn1_get_len+0x11e>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006938:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 800693c:	e02c      	b.n	8006998 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	061a      	lsls	r2, r3, #24
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3302      	adds	r3, #2
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	431a      	orrs	r2, r3
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3303      	adds	r3, #3
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800695e:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	3204      	adds	r2, #4
 8006966:	7812      	ldrb	r2, [r2, #0]
 8006968:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	601a      	str	r2, [r3, #0]
            (*p) += 5;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	1d5a      	adds	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	601a      	str	r2, [r3, #0]
            break;
 8006978:	e002      	b.n	8006980 <mbedtls_asn1_get_len+0x160>

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800697a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800697e:	e00b      	b.n	8006998 <mbedtls_asn1_get_len+0x178>
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	6812      	ldr	r2, [r2, #0]
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	1a8a      	subs	r2, r1, r2
 800698c:	4293      	cmp	r3, r2
 800698e:	d902      	bls.n	8006996 <mbedtls_asn1_get_len+0x176>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006990:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8006994:	e000      	b.n	8006998 <mbedtls_asn1_get_len+0x178>

    return( 0 );
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
    if( ( end - *p ) < 1 )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	dc02      	bgt.n	80069c4 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80069be:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80069c2:	e014      	b.n	80069ee <mbedtls_asn1_get_tag+0x4a>

    if( **p != tag )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d002      	beq.n	80069d8 <mbedtls_asn1_get_tag+0x34>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80069d2:	f06f 0361 	mvn.w	r3, #97	; 0x61
 80069d6:	e00a      	b.n	80069ee <mbedtls_asn1_get_tag+0x4a>

    (*p)++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	601a      	str	r2, [r3, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff ff1a 	bl	8006820 <mbedtls_asn1_get_len>
 80069ec:	4603      	mov	r3, r0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8006a02:	f107 0210 	add.w	r2, r7, #16
 8006a06:	2301      	movs	r3, #1
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7ff ffca 	bl	80069a4 <mbedtls_asn1_get_tag>
 8006a10:	6178      	str	r0, [r7, #20]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <mbedtls_asn1_get_bool+0x26>
        return( ret );
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	e016      	b.n	8006a4a <mbedtls_asn1_get_bool+0x54>

    if( len != 1 )
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d002      	beq.n	8006a28 <mbedtls_asn1_get_bool+0x32>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8006a22:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006a26:	e010      	b.n	8006a4a <mbedtls_asn1_get_bool+0x54>

    *val = ( **p != 0 ) ? 1 : 0;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bf14      	ite	ne
 8006a32:	2301      	movne	r3, #1
 8006a34:	2300      	moveq	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
    (*p)++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	601a      	str	r2, [r3, #0]

    return( 0 );
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b086      	sub	sp, #24
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8006a5e:	f107 0210 	add.w	r2, r7, #16
 8006a62:	2302      	movs	r3, #2
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff ff9c 	bl	80069a4 <mbedtls_asn1_get_tag>
 8006a6c:	6178      	str	r0, [r7, #20]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <mbedtls_asn1_get_int+0x26>
        return( ret );
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	e026      	b.n	8006ac6 <mbedtls_asn1_get_int+0x74>

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d008      	beq.n	8006a90 <mbedtls_asn1_get_int+0x3e>
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d805      	bhi.n	8006a90 <mbedtls_asn1_get_int+0x3e>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b25b      	sxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da02      	bge.n	8006a96 <mbedtls_asn1_get_int+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8006a90:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006a94:	e017      	b.n	8006ac6 <mbedtls_asn1_get_int+0x74>

    *val = 0;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

    while( len-- > 0 )
 8006a9c:	e00d      	b.n	8006aba <mbedtls_asn1_get_int+0x68>
    {
        *val = ( *val << 8 ) | **p;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	7812      	ldrb	r2, [r2, #0]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	601a      	str	r2, [r3, #0]
        (*p)++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	601a      	str	r2, [r3, #0]
    while( len-- > 0 )
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1e5a      	subs	r2, r3, #1
 8006abe:	613a      	str	r2, [r7, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1ec      	bne.n	8006a9e <mbedtls_asn1_get_int+0x4c>
    }

    return( 0 );
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <mbedtls_asn1_get_bitstring>:
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b086      	sub	sp, #24
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	607a      	str	r2, [r7, #4]
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	2303      	movs	r3, #3
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7ff ff5f 	bl	80069a4 <mbedtls_asn1_get_tag>
 8006ae6:	6178      	str	r0, [r7, #20]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <mbedtls_asn1_get_bitstring+0x24>
        return( ret );
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	e030      	b.n	8006b54 <mbedtls_asn1_get_bitstring+0x86>

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d102      	bne.n	8006b00 <mbedtls_asn1_get_bitstring+0x32>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006afa:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8006afe:	e029      	b.n	8006b54 <mbedtls_asn1_get_bitstring+0x86>
    bs->len -= 1;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	1e5a      	subs	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	601a      	str	r2, [r3, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	781a      	ldrb	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	711a      	strb	r2, [r3, #4]
    if( bs->unused_bits > 7 )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	791b      	ldrb	r3, [r3, #4]
 8006b18:	2b07      	cmp	r3, #7
 8006b1a:	d902      	bls.n	8006b22 <mbedtls_asn1_get_bitstring+0x54>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8006b1c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006b20:	e018      	b.n	8006b54 <mbedtls_asn1_get_bitstring+0x86>
    (*p)++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

    /* Get actual bitstring */
    bs->p = *p;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	609a      	str	r2, [r3, #8]
    *p += bs->len;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	441a      	add	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]

    if( *p != end )
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d002      	beq.n	8006b52 <mbedtls_asn1_get_bitstring+0x84>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8006b4c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006b50:	e000      	b.n	8006b54 <mbedtls_asn1_get_bitstring+0x86>

    return( 0 );
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8006b68:	2303      	movs	r3, #3
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff ff18 	bl	80069a4 <mbedtls_asn1_get_tag>
 8006b74:	6178      	str	r0, [r7, #20]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <mbedtls_asn1_get_bitstring_null+0x24>
        return( ret );
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	e012      	b.n	8006ba6 <mbedtls_asn1_get_bitstring_null+0x4a>

    if( (*len)-- < 2 || *(*p)++ != 0 )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	1e59      	subs	r1, r3, #1
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6011      	str	r1, [r2, #0]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d907      	bls.n	8006b9e <mbedtls_asn1_get_bitstring_null+0x42>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	1c59      	adds	r1, r3, #1
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	6011      	str	r1, [r2, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <mbedtls_asn1_get_bitstring_null+0x48>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8006b9e:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8006ba2:	e000      	b.n	8006ba6 <mbedtls_asn1_get_bitstring_null+0x4a>

    return( 0 );
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b088      	sub	sp, #32
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8006bbc:	f107 0214 	add.w	r2, r7, #20
 8006bc0:	2330      	movs	r3, #48	; 0x30
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff feed 	bl	80069a4 <mbedtls_asn1_get_tag>
 8006bca:	61f8      	str	r0, [r7, #28]
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <mbedtls_asn1_get_sequence_of+0x28>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	e051      	b.n	8006c7a <mbedtls_asn1_get_sequence_of+0xcc>

    if( *p + len != end )
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4413      	add	r3, r2
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d039      	beq.n	8006c58 <mbedtls_asn1_get_sequence_of+0xaa>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8006be4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006be8:	e047      	b.n	8006c7a <mbedtls_asn1_get_sequence_of+0xcc>

    while( *p < end )
    {
        buf = &(cur->buf);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	61bb      	str	r3, [r7, #24]
        buf->tag = **p;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	601a      	str	r2, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	1d1a      	adds	r2, r3, #4
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7ff fece 	bl	80069a4 <mbedtls_asn1_get_tag>
 8006c08:	61f8      	str	r0, [r7, #28]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <mbedtls_asn1_get_sequence_of+0x66>
            return( ret );
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	e032      	b.n	8006c7a <mbedtls_asn1_get_sequence_of+0xcc>

        buf->p = *p;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	609a      	str	r2, [r3, #8]
        *p += buf->len;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	441a      	add	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	601a      	str	r2, [r3, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d911      	bls.n	8006c58 <mbedtls_asn1_get_sequence_of+0xaa>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 8006c34:	2110      	movs	r1, #16
 8006c36:	2001      	movs	r0, #1
 8006c38:	f017 fc7a 	bl	801e530 <calloc>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	461a      	mov	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60da      	str	r2, [r3, #12]
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <mbedtls_asn1_get_sequence_of+0xa4>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8006c4c:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8006c50:	e013      	b.n	8006c7a <mbedtls_asn1_get_sequence_of+0xcc>

            cur = cur->next;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	607b      	str	r3, [r7, #4]
    while( *p < end )
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d8c3      	bhi.n	8006bea <mbedtls_asn1_get_sequence_of+0x3c>
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	60da      	str	r2, [r3, #12]

    if( *p != end )
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d002      	beq.n	8006c78 <mbedtls_asn1_get_sequence_of+0xca>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8006c72:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006c76:	e000      	b.n	8006c7a <mbedtls_asn1_get_sequence_of+0xcc>

    return( 0 );
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3720      	adds	r7, #32
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b086      	sub	sp, #24
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8006c90:	f107 0210 	add.w	r2, r7, #16
 8006c94:	2330      	movs	r3, #48	; 0x30
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7ff fe83 	bl	80069a4 <mbedtls_asn1_get_tag>
 8006c9e:	6178      	str	r0, [r7, #20]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <mbedtls_asn1_get_alg+0x28>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	e062      	b.n	8006d70 <mbedtls_asn1_get_alg+0xee>

    if( ( end - *p ) < 1 )
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dc02      	bgt.n	8006cbc <mbedtls_asn1_get_alg+0x3a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006cb6:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8006cba:	e059      	b.n	8006d70 <mbedtls_asn1_get_alg+0xee>

    alg->tag = **p;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	601a      	str	r2, [r3, #0]
    end = *p + len;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4413      	add	r3, r2
 8006cd0:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	1d1a      	adds	r2, r3, #4
 8006cd6:	2306      	movs	r3, #6
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7ff fe62 	bl	80069a4 <mbedtls_asn1_get_tag>
 8006ce0:	6178      	str	r0, [r7, #20]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <mbedtls_asn1_get_alg+0x6a>
        return( ret );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	e041      	b.n	8006d70 <mbedtls_asn1_get_alg+0xee>

    alg->p = *p;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	609a      	str	r2, [r3, #8]
    *p += alg->len;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	601a      	str	r2, [r3, #0]

    if( *p == end )
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d105      	bne.n	8006d18 <mbedtls_asn1_get_alg+0x96>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
 8006d0c:	210c      	movs	r1, #12
 8006d0e:	6838      	ldr	r0, [r7, #0]
 8006d10:	f7ff fd6c 	bl	80067ec <mbedtls_zeroize>
        return( 0 );
 8006d14:	2300      	movs	r3, #0
 8006d16:	e02b      	b.n	8006d70 <mbedtls_asn1_get_alg+0xee>
    }

    params->tag = **p;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	601a      	str	r2, [r3, #0]
    (*p)++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	3304      	adds	r3, #4
 8006d32:	461a      	mov	r2, r3
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fd72 	bl	8006820 <mbedtls_asn1_get_len>
 8006d3c:	6178      	str	r0, [r7, #20]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <mbedtls_asn1_get_alg+0xc6>
        return( ret );
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	e013      	b.n	8006d70 <mbedtls_asn1_get_alg+0xee>

    params->p = *p;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	609a      	str	r2, [r3, #8]
    *p += params->len;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	441a      	add	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]

    if( *p != end )
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d002      	beq.n	8006d6e <mbedtls_asn1_get_alg+0xec>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8006d68:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006d6c:	e000      	b.n	8006d70 <mbedtls_asn1_get_alg+0xee>

    return( 0 );
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b08b      	sub	sp, #44	; 0x2c
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	623b      	str	r3, [r7, #32]
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
 8006d92:	e06f      	b.n	8006e74 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 8006d98:	e005      	b.n	8006da6 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	3301      	adds	r3, #1
 8006da4:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d205      	bcs.n	8006dba <mbedtls_base64_decode+0x42>
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	4413      	add	r3, r2
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d0ef      	beq.n	8006d9a <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 8006dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d05d      	beq.n	8006e7e <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 8006dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d90c      	bls.n	8006de6 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	4413      	add	r3, r2
 8006dd2:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 8006dd4:	2b0d      	cmp	r3, #13
 8006dd6:	d106      	bne.n	8006de6 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	3301      	adds	r3, #1
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	4413      	add	r3, r2
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b0a      	cmp	r3, #10
 8006de4:	d040      	beq.n	8006e68 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	4413      	add	r3, r2
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b0a      	cmp	r3, #10
 8006df0:	d03c      	beq.n	8006e6c <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8006df8:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8006dfc:	e0d0      	b.n	8006fa0 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	4413      	add	r3, r2
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b3d      	cmp	r3, #61	; 0x3d
 8006e08:	d108      	bne.n	8006e1c <mbedtls_base64_decode+0xa4>
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d902      	bls.n	8006e1c <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8006e16:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8006e1a:	e0c1      	b.n	8006fa0 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	4413      	add	r3, r2
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	b25b      	sxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	db08      	blt.n	8006e3c <mbedtls_base64_decode+0xc4>
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	4413      	add	r3, r2
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	4b5d      	ldr	r3, [pc, #372]	; (8006fac <mbedtls_base64_decode+0x234>)
 8006e36:	5c9b      	ldrb	r3, [r3, r2]
 8006e38:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3a:	d102      	bne.n	8006e42 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8006e3c:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8006e40:	e0ae      	b.n	8006fa0 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	4413      	add	r3, r2
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4b57      	ldr	r3, [pc, #348]	; (8006fac <mbedtls_base64_decode+0x234>)
 8006e4e:	5c9b      	ldrb	r3, [r3, r2]
 8006e50:	2b3f      	cmp	r3, #63	; 0x3f
 8006e52:	d805      	bhi.n	8006e60 <mbedtls_base64_decode+0xe8>
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8006e5a:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8006e5e:	e09f      	b.n	8006fa0 <mbedtls_base64_decode+0x228>

        n++;
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	3301      	adds	r3, #1
 8006e64:	623b      	str	r3, [r7, #32]
 8006e66:	e002      	b.n	8006e6e <mbedtls_base64_decode+0xf6>
            continue;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <mbedtls_base64_decode+0xf6>
            continue;
 8006e6c:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	3301      	adds	r3, #1
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
 8006e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d38b      	bcc.n	8006d94 <mbedtls_base64_decode+0x1c>
 8006e7c:	e000      	b.n	8006e80 <mbedtls_base64_decode+0x108>
            break;
 8006e7e:	bf00      	nop
    }

    if( n == 0 )
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d104      	bne.n	8006e90 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
        return( 0 );
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e087      	b.n	8006fa0 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	08da      	lsrs	r2, r3, #3
 8006e94:	4613      	mov	r3, r2
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	4413      	add	r3, r2
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	f003 0207 	and.w	r2, r3, #7
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	4413      	add	r3, r2
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	3307      	adds	r3, #7
 8006eae:	08db      	lsrs	r3, r3, #3
 8006eb0:	440b      	add	r3, r1
 8006eb2:	623b      	str	r3, [r7, #32]
    n -= j;
 8006eb4:	6a3a      	ldr	r2, [r7, #32]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <mbedtls_base64_decode+0x152>
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d205      	bcs.n	8006ed6 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a3a      	ldr	r2, [r7, #32]
 8006ece:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8006ed0:	f06f 0329 	mvn.w	r3, #41	; 0x29
 8006ed4:	e064      	b.n	8006fa0 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	623b      	str	r3, [r7, #32]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	e051      	b.n	8006f8c <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b0d      	cmp	r3, #13
 8006eee:	d046      	beq.n	8006f7e <mbedtls_base64_decode+0x206>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b0a      	cmp	r3, #10
 8006ef6:	d042      	beq.n	8006f7e <mbedtls_base64_decode+0x206>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d03e      	beq.n	8006f7e <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	4b29      	ldr	r3, [pc, #164]	; (8006fac <mbedtls_base64_decode+0x234>)
 8006f08:	5c9b      	ldrb	r3, [r3, r2]
 8006f0a:	2b40      	cmp	r3, #64	; 0x40
 8006f0c:	bf0c      	ite	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	2300      	movne	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	019a      	lsls	r2, r3, #6
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	4b21      	ldr	r3, [pc, #132]	; (8006fac <mbedtls_base64_decode+0x234>)
 8006f28:	5c5b      	ldrb	r3, [r3, r1]
 8006f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	3301      	adds	r3, #1
 8006f36:	623b      	str	r3, [r7, #32]
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d120      	bne.n	8006f80 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d006      	beq.n	8006f56 <mbedtls_base64_decode+0x1de>
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	0c19      	lsrs	r1, r3, #16
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	617a      	str	r2, [r7, #20]
 8006f52:	b2ca      	uxtb	r2, r1
 8006f54:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d906      	bls.n	8006f6a <mbedtls_base64_decode+0x1f2>
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	0a19      	lsrs	r1, r3, #8
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	617a      	str	r2, [r7, #20]
 8006f66:	b2ca      	uxtb	r2, r1
 8006f68:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d907      	bls.n	8006f80 <mbedtls_base64_decode+0x208>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	617a      	str	r2, [r7, #20]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e000      	b.n	8006f80 <mbedtls_base64_decode+0x208>
            continue;
 8006f7e:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	3b01      	subs	r3, #1
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1aa      	bne.n	8006ee8 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	601a      	str	r2, [r3, #0]

    return( 0 );
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	372c      	adds	r7, #44	; 0x2c
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	080251f8 	.word	0x080251f8

08006fb0 <mbedtls_mpi_zeroize>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e004      	b.n	8006fca <mbedtls_mpi_zeroize+0x1a>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	1d1a      	adds	r2, r3, #4
 8006fc4:	60fa      	str	r2, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	1e5a      	subs	r2, r3, #1
 8006fce:	603a      	str	r2, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f5      	bne.n	8006fc0 <mbedtls_mpi_zeroize+0x10>
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <mbedtls_zeroize>:

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e004      	b.n	8006ffc <mbedtls_zeroize+0x1a>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	60fa      	str	r2, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	1e5a      	subs	r2, r3, #1
 8007000:	603a      	str	r2, [r7, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f5      	bne.n	8006ff2 <mbedtls_zeroize+0x10>
}
 8007006:	bf00      	nop
 8007008:	bf00      	nop
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <mbedtls_mpi_init+0x22>
        return;

    X->s = 1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	601a      	str	r2, [r3, #0]
    X->n = 0;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	e000      	b.n	8007038 <mbedtls_mpi_init+0x24>
        return;
 8007036:	bf00      	nop
}
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01a      	beq.n	8007086 <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00c      	beq.n	8007072 <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	4619      	mov	r1, r3
 8007062:	4610      	mov	r0, r2
 8007064:	f7ff ffa4 	bl	8006fb0 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4618      	mov	r0, r3
 800706e:	f017 fa99 	bl	801e5a4 <free>
    }

    X->s = 1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
    X->n = 0;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	609a      	str	r2, [r3, #8]
 8007084:	e000      	b.n	8007088 <mbedtls_mpi_free+0x46>
        return;
 8007086:	bf00      	nop
}
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	f242 7210 	movw	r2, #10000	; 0x2710
 800709e:	4293      	cmp	r3, r2
 80070a0:	d902      	bls.n	80070a8 <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80070a2:	f06f 030f 	mvn.w	r3, #15
 80070a6:	e031      	b.n	800710c <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d92b      	bls.n	800710a <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80070b2:	2104      	movs	r1, #4
 80070b4:	6838      	ldr	r0, [r7, #0]
 80070b6:	f017 fa3b 	bl	801e530 <calloc>
 80070ba:	4603      	mov	r3, r0
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80070c4:	f06f 030f 	mvn.w	r3, #15
 80070c8:	e020      	b.n	800710c <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d015      	beq.n	80070fe <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6899      	ldr	r1, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	461a      	mov	r2, r3
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f017 fa78 	bl	801e5d4 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7ff ff5e 	bl	8006fb0 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f017 fa53 	bl	801e5a4 <free>
        }

        X->n = nblimbs;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	605a      	str	r2, [r3, #4]
        X->p = p;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i;

    if( X == Y )
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d101      	bne.n	800712a <mbedtls_mpi_copy+0x16>
        return( 0 );
 8007126:	2300      	movs	r3, #0
 8007128:	e041      	b.n	80071ae <mbedtls_mpi_copy+0x9a>

    if( Y->p == NULL )
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <mbedtls_mpi_copy+0x28>
    {
        mbedtls_mpi_free( X );
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff ff85 	bl	8007042 <mbedtls_mpi_free>
        return( 0 );
 8007138:	2300      	movs	r3, #0
 800713a:	e038      	b.n	80071ae <mbedtls_mpi_copy+0x9a>
    }

    for( i = Y->n - 1; i > 0; i-- )
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	3b01      	subs	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e00a      	b.n	800715c <mbedtls_mpi_copy+0x48>
        if( Y->p[i] != 0 )
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <mbedtls_mpi_copy+0x50>
    for( i = Y->n - 1; i > 0; i-- )
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3b01      	subs	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f1      	bne.n	8007146 <mbedtls_mpi_copy+0x32>
 8007162:	e000      	b.n	8007166 <mbedtls_mpi_copy+0x52>
            break;
 8007164:	bf00      	nop
    i++;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3301      	adds	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]

    X->s = Y->s;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8007174:	68f9      	ldr	r1, [r7, #12]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff ff89 	bl	800708e <mbedtls_mpi_grow>
 800717c:	60b8      	str	r0, [r7, #8]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d112      	bne.n	80071aa <mbedtls_mpi_copy+0x96>

    memset( X->p, 0, X->n * ciL );
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6898      	ldr	r0, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	461a      	mov	r2, r3
 8007190:	2100      	movs	r1, #0
 8007192:	f017 fa47 	bl	801e624 <memset>
    memcpy( X->p, Y->p, i * ciL );
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6898      	ldr	r0, [r3, #8]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6899      	ldr	r1, [r3, #8]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	461a      	mov	r2, r3
 80071a4:	f017 fa16 	bl	801e5d4 <memcpy>
 80071a8:	e000      	b.n	80071ac <mbedtls_mpi_copy+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 80071aa:	bf00      	nop

cleanup:

    return( ret );
 80071ac:	68bb      	ldr	r3, [r7, #8]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80071c0:	2101      	movs	r1, #1
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff ff63 	bl	800708e <mbedtls_mpi_grow>
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11a      	bne.n	8007206 <mbedtls_mpi_lset+0x50>
    memset( X->p, 0, X->n * ciL );
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6898      	ldr	r0, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	461a      	mov	r2, r3
 80071dc:	2100      	movs	r1, #0
 80071de:	f017 fa21 	bl	801e624 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80071e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	da02      	bge.n	80071fe <mbedtls_mpi_lset+0x48>
 80071f8:	f04f 32ff 	mov.w	r2, #4294967295
 80071fc:	e000      	b.n	8007200 <mbedtls_mpi_lset+0x4a>
 80071fe:	2201      	movs	r2, #1
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e000      	b.n	8007208 <mbedtls_mpi_lset+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8007206:	bf00      	nop

cleanup:

    return( ret );
 8007208:	68fb      	ldr	r3, [r7, #12]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
    if( X->n * biL <= pos )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	015b      	lsls	r3, r3, #5
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d301      	bcc.n	800722c <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 8007228:	2300      	movs	r3, #0
 800722a:	e00d      	b.n	8007248 <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	fa22 f303 	lsr.w	r3, r2, r3
 8007244:	f003 0301 	and.w	r3, r3, #1
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

    for( i = 0; i < X->n; i++ )
 8007260:	2300      	movs	r3, #0
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	e01d      	b.n	80072a2 <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	e014      	b.n	8007296 <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	fa22 f303 	lsr.w	r3, r2, r3
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <mbedtls_mpi_lsb+0x36>
                return( count );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	e011      	b.n	80072ae <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3301      	adds	r3, #1
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3301      	adds	r3, #1
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b1f      	cmp	r3, #31
 800729a:	d9e7      	bls.n	800726c <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	3301      	adds	r3, #1
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d3dc      	bcc.n	8007266 <mbedtls_mpi_lsb+0x12>

    return( 0 );
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 80072c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072c6:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	e00a      	b.n	80072e4 <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <mbedtls_clz+0x32>

        mask >>= 1;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b1f      	cmp	r3, #31
 80072e8:	d9f1      	bls.n	80072ce <mbedtls_clz+0x14>
 80072ea:	e000      	b.n	80072ee <mbedtls_clz+0x34>
        if( x & mask ) break;
 80072ec:	bf00      	nop
    }

    return j;
 80072ee:	68fb      	ldr	r3, [r7, #12]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 800730c:	2300      	movs	r3, #0
 800730e:	e025      	b.n	800735c <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	3b01      	subs	r3, #1
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e00a      	b.n	8007330 <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3b01      	subs	r3, #1
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f1      	bne.n	800731a <mbedtls_mpi_bitlen+0x1e>
 8007336:	e000      	b.n	800733a <mbedtls_mpi_bitlen+0x3e>
            break;
 8007338:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff ffb7 	bl	80072ba <mbedtls_clz>
 800734c:	4603      	mov	r3, r0
 800734e:	f1c3 0320 	rsb	r3, r3, #32
 8007352:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4413      	add	r3, r2
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff ffc5 	bl	80072fc <mbedtls_mpi_bitlen>
 8007372:	4603      	mov	r3, r0
 8007374:	3307      	adds	r3, #7
 8007376:	08db      	lsrs	r3, r3, #3
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	089b      	lsrs	r3, r3, #2
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	f002 0203 	and.w	r2, r2, #3
 8007396:	2a00      	cmp	r2, #0
 8007398:	bf14      	ite	ne
 800739a:	2201      	movne	r2, #1
 800739c:	2200      	moveq	r2, #0
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	4413      	add	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d00d      	beq.n	80073ca <mbedtls_mpi_read_binary+0x4a>
    {
        mbedtls_mpi_free( X );
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fe47 	bl	8007042 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f7ff fe2d 	bl	8007014 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80073ba:	6939      	ldr	r1, [r7, #16]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7ff fe66 	bl	800708e <mbedtls_mpi_grow>
 80073c2:	61f8      	str	r0, [r7, #28]
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d130      	bne.n	800742c <mbedtls_mpi_read_binary+0xac>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80073ca:	2100      	movs	r1, #0
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f7ff fef2 	bl	80071b6 <mbedtls_mpi_lset>
 80073d2:	61f8      	str	r0, [r7, #28]
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d12a      	bne.n	8007430 <mbedtls_mpi_read_binary+0xb0>

    for( i = buflen, j = 0; i > 0; i--, j++ )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	e01f      	b.n	8007424 <mbedtls_mpi_read_binary+0xa4>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f023 0303 	bic.w	r3, r3, #3
 80073ee:	4413      	add	r3, r2
 80073f0:	6819      	ldr	r1, [r3, #0]
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	4413      	add	r3, r2
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	f003 0318 	and.w	r3, r3, #24
 8007406:	409a      	lsls	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6898      	ldr	r0, [r3, #8]
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f023 0303 	bic.w	r3, r3, #3
 8007412:	4403      	add	r3, r0
 8007414:	430a      	orrs	r2, r1
 8007416:	601a      	str	r2, [r3, #0]
    for( i = buflen, j = 0; i > 0; i--, j++ )
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	3b01      	subs	r3, #1
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	3301      	adds	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1dc      	bne.n	80073e4 <mbedtls_mpi_read_binary+0x64>

cleanup:
 800742a:	e002      	b.n	8007432 <mbedtls_mpi_read_binary+0xb2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <mbedtls_mpi_read_binary+0xb2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8007430:	bf00      	nop

    return( ret );
 8007432:	69fb      	ldr	r3, [r7, #28]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3720      	adds	r7, #32
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7ff ff8b 	bl	8007364 <mbedtls_mpi_size>
 800744e:	6178      	str	r0, [r7, #20]

    if( buflen < n )
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	429a      	cmp	r2, r3
 8007456:	d202      	bcs.n	800745e <mbedtls_mpi_write_binary+0x22>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8007458:	f06f 0307 	mvn.w	r3, #7
 800745c:	e029      	b.n	80074b2 <mbedtls_mpi_write_binary+0x76>

    memset( buf, 0, buflen );
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	2100      	movs	r1, #0
 8007462:	68b8      	ldr	r0, [r7, #8]
 8007464:	f017 f8de 	bl	801e624 <memset>

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3b01      	subs	r3, #1
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	e01a      	b.n	80074aa <mbedtls_mpi_write_binary+0x6e>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f023 0303 	bic.w	r3, r3, #3
 800747e:	4413      	add	r3, r2
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	f003 0318 	and.w	r3, r3, #24
 800748a:	fa22 f103 	lsr.w	r1, r2, r3
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	b2ca      	uxtb	r2, r1
 8007496:	701a      	strb	r2, [r3, #0]
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	3b01      	subs	r3, #1
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	3301      	adds	r3, #1
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e1      	bne.n	8007474 <mbedtls_mpi_write_binary+0x38>

    return( 0 );
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3720      	adds	r7, #32
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b088      	sub	sp, #32
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]

    v0 = count / (biL    );
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f003 031f 	and.w	r3, r3, #31
 80074d4:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff ff10 	bl	80072fc <mbedtls_mpi_bitlen>
 80074dc:	4602      	mov	r2, r0
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	4413      	add	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	015b      	lsls	r3, r3, #5
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d912      	bls.n	8007516 <mbedtls_mpi_shift_l+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	f002 021f 	and.w	r2, r2, #31
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	bf14      	ite	ne
 80074fe:	2201      	movne	r2, #1
 8007500:	2200      	moveq	r2, #0
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	4413      	add	r3, r2
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fdc0 	bl	800708e <mbedtls_mpi_grow>
 800750e:	61f8      	str	r0, [r7, #28]
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d16e      	bne.n	80075f4 <mbedtls_mpi_shift_l+0x13a>

    ret = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d02f      	beq.n	8007580 <mbedtls_mpi_shift_l+0xc6>
    {
        for( i = X->n; i > v0; i-- )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	e016      	b.n	8007556 <mbedtls_mpi_shift_l+0x9c>
            X->p[i - 1] = X->p[i - v0 - 1];
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	69b9      	ldr	r1, [r7, #24]
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1acb      	subs	r3, r1, r3
 8007532:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007536:	3b01      	subs	r3, #1
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6899      	ldr	r1, [r3, #8]
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007546:	3b01      	subs	r3, #1
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	6812      	ldr	r2, [r2, #0]
 800754e:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	3b01      	subs	r3, #1
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	429a      	cmp	r2, r3
 800755c:	d8e4      	bhi.n	8007528 <mbedtls_mpi_shift_l+0x6e>

        for( ; i > 0; i-- )
 800755e:	e00c      	b.n	800757a <mbedtls_mpi_shift_l+0xc0>
            X->p[i - 1] = 0;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800756a:	3b01      	subs	r3, #1
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	3b01      	subs	r3, #1
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1ef      	bne.n	8007560 <mbedtls_mpi_shift_l+0xa6>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d038      	beq.n	80075f8 <mbedtls_mpi_shift_l+0x13e>
    {
        for( i = v0; i < X->n; i++ )
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	61bb      	str	r3, [r7, #24]
 800758a:	e02d      	b.n	80075e8 <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f1c3 0320 	rsb	r3, r3, #32
 800759e:	fa22 f303 	lsr.w	r3, r2, r3
 80075a2:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	fa01 f202 	lsl.w	r2, r1, r2
 80075c0:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	6819      	ldr	r1, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	430a      	orrs	r2, r1
 80075dc:	601a      	str	r2, [r3, #0]
            r0 = r1;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	3301      	adds	r3, #1
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d3cc      	bcc.n	800758c <mbedtls_mpi_shift_l+0xd2>
        }
    }

cleanup:
 80075f2:	e001      	b.n	80075f8 <mbedtls_mpi_shift_l+0x13e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80075f4:	bf00      	nop
 80075f6:	e000      	b.n	80075fa <mbedtls_mpi_shift_l+0x140>
cleanup:
 80075f8:	bf00      	nop

    return( ret );
 80075fa:	69fb      	ldr	r3, [r7, #28]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3720      	adds	r7, #32
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 800760e:	2300      	movs	r3, #0
 8007610:	61bb      	str	r3, [r7, #24]

    v0 = count /  biL;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f003 031f 	and.w	r3, r3, #31
 800761e:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	429a      	cmp	r2, r3
 8007628:	d807      	bhi.n	800763a <mbedtls_mpi_shift_r+0x36>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	429a      	cmp	r2, r3
 8007632:	d108      	bne.n	8007646 <mbedtls_mpi_shift_r+0x42>
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 800763a:	2100      	movs	r1, #0
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fdba 	bl	80071b6 <mbedtls_mpi_lset>
 8007642:	4603      	mov	r3, r0
 8007644:	e075      	b.n	8007732 <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d02a      	beq.n	80076a2 <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	e010      	b.n	8007674 <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	69f9      	ldr	r1, [r7, #28]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	440b      	add	r3, r1
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	441a      	add	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6899      	ldr	r1, [r3, #8]
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	440b      	add	r3, r1
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	3301      	adds	r3, #1
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	429a      	cmp	r2, r3
 8007680:	d3e7      	bcc.n	8007652 <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 8007682:	e009      	b.n	8007698 <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	3301      	adds	r3, #1
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d3f0      	bcc.n	8007684 <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d043      	beq.n	8007730 <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	e03c      	b.n	800772a <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076ba:	3b01      	subs	r3, #1
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f1c3 0320 	rsb	r3, r3, #32
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076d8:	3b01      	subs	r3, #1
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	6819      	ldr	r1, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076ea:	3b01      	subs	r3, #1
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	fa21 f202 	lsr.w	r2, r1, r2
 80076f6:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007702:	3b01      	subs	r3, #1
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	6819      	ldr	r1, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007714:	3b01      	subs	r3, #1
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	430a      	orrs	r2, r1
 800771e:	601a      	str	r2, [r3, #0]
            r0 = r1;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	3b01      	subs	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1bf      	bne.n	80076b0 <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3720      	adds	r7, #32
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	e00d      	b.n	8007768 <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007756:	3b01      	subs	r3, #1
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3b01      	subs	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1ee      	bne.n	800774c <mbedtls_mpi_cmp_abs+0x12>
 800776e:	e000      	b.n	8007772 <mbedtls_mpi_cmp_abs+0x38>
            break;
 8007770:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	e00d      	b.n	8007796 <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007784:	3b01      	subs	r3, #1
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	3b01      	subs	r3, #1
 8007794:	60bb      	str	r3, [r7, #8]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1ee      	bne.n	800777a <mbedtls_mpi_cmp_abs+0x40>
 800779c:	e000      	b.n	80077a0 <mbedtls_mpi_cmp_abs+0x66>
            break;
 800779e:	bf00      	nop

    if( i == 0 && j == 0 )
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <mbedtls_mpi_cmp_abs+0x76>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 80077ac:	2300      	movs	r3, #0
 80077ae:	e040      	b.n	8007832 <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d901      	bls.n	80077bc <mbedtls_mpi_cmp_abs+0x82>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e03a      	b.n	8007832 <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d932      	bls.n	800782a <mbedtls_mpi_cmp_abs+0xf0>
 80077c4:	f04f 33ff 	mov.w	r3, #4294967295
 80077c8:	e033      	b.n	8007832 <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077d4:	3b01      	subs	r3, #1
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	6899      	ldr	r1, [r3, #8]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077e6:	3b01      	subs	r3, #1
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	440b      	add	r3, r1
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d901      	bls.n	80077f6 <mbedtls_mpi_cmp_abs+0xbc>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e01d      	b.n	8007832 <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007800:	3b01      	subs	r3, #1
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	6899      	ldr	r1, [r3, #8]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007812:	3b01      	subs	r3, #1
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d202      	bcs.n	8007824 <mbedtls_mpi_cmp_abs+0xea>
 800781e:	f04f 33ff 	mov.w	r3, #4294967295
 8007822:	e006      	b.n	8007832 <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3b01      	subs	r3, #1
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1cc      	bne.n	80077ca <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	6039      	str	r1, [r7, #0]
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	e00d      	b.n	800786c <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800785a:	3b01      	subs	r3, #1
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3b01      	subs	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1ee      	bne.n	8007850 <mbedtls_mpi_cmp_mpi+0x12>
 8007872:	e000      	b.n	8007876 <mbedtls_mpi_cmp_mpi+0x38>
            break;
 8007874:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	60bb      	str	r3, [r7, #8]
 800787c:	e00d      	b.n	800789a <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007888:	3b01      	subs	r3, #1
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	3b01      	subs	r3, #1
 8007898:	60bb      	str	r3, [r7, #8]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1ee      	bne.n	800787e <mbedtls_mpi_cmp_mpi+0x40>
 80078a0:	e000      	b.n	80078a4 <mbedtls_mpi_cmp_mpi+0x66>
            break;
 80078a2:	bf00      	nop

    if( i == 0 && j == 0 )
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <mbedtls_mpi_cmp_mpi+0x76>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 80078b0:	2300      	movs	r3, #0
 80078b2:	e059      	b.n	8007968 <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d902      	bls.n	80078c2 <mbedtls_mpi_cmp_mpi+0x84>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	e052      	b.n	8007968 <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d903      	bls.n	80078d2 <mbedtls_mpi_cmp_mpi+0x94>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	425b      	negs	r3, r3
 80078d0:	e04a      	b.n	8007968 <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dd05      	ble.n	80078e6 <mbedtls_mpi_cmp_mpi+0xa8>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	da01      	bge.n	80078e6 <mbedtls_mpi_cmp_mpi+0xa8>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e040      	b.n	8007968 <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dd38      	ble.n	8007960 <mbedtls_mpi_cmp_mpi+0x122>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	da34      	bge.n	8007960 <mbedtls_mpi_cmp_mpi+0x122>
 80078f6:	f04f 33ff 	mov.w	r3, #4294967295
 80078fa:	e035      	b.n	8007968 <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007906:	3b01      	subs	r3, #1
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	6899      	ldr	r1, [r3, #8]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007918:	3b01      	subs	r3, #1
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d902      	bls.n	800792a <mbedtls_mpi_cmp_mpi+0xec>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	e01e      	b.n	8007968 <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007934:	3b01      	subs	r3, #1
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	6899      	ldr	r1, [r3, #8]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007946:	3b01      	subs	r3, #1
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d203      	bcs.n	800795a <mbedtls_mpi_cmp_mpi+0x11c>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	425b      	negs	r3, r3
 8007958:	e006      	b.n	8007968 <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3b01      	subs	r3, #1
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1ca      	bne.n	80078fc <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	bfb8      	it	lt
 8007984:	425b      	neglt	r3, r3
 8007986:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	da02      	bge.n	8007994 <mbedtls_mpi_cmp_int+0x20>
 800798e:	f04f 33ff 	mov.w	r3, #4294967295
 8007992:	e000      	b.n	8007996 <mbedtls_mpi_cmp_int+0x22>
 8007994:	2301      	movs	r3, #1
 8007996:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 8007998:	2301      	movs	r3, #1
 800799a:	613b      	str	r3, [r7, #16]
    Y.p = p;
 800799c:	f107 0308 	add.w	r3, r7, #8
 80079a0:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff ff48 	bl	800783e <mbedtls_mpi_cmp_mpi>
 80079ae:	4603      	mov	r3, r0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08c      	sub	sp, #48	; 0x30
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d105      	bne.n	80079d8 <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	60bb      	str	r3, [r7, #8]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d008      	beq.n	80079f2 <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7ff fb96 	bl	8007114 <mbedtls_mpi_copy>
 80079e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f040 808d 	bne.w	8007b0c <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
 80079fe:	e00d      	b.n	8007a1c <mbedtls_mpi_add_abs+0x64>
        if( B->p[j - 1] != 0 )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <mbedtls_mpi_add_abs+0x6c>
    for( j = B->n; j > 0; j-- )
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1ee      	bne.n	8007a00 <mbedtls_mpi_add_abs+0x48>
 8007a22:	e000      	b.n	8007a26 <mbedtls_mpi_add_abs+0x6e>
            break;
 8007a24:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8007a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f7ff fb30 	bl	800708e <mbedtls_mpi_grow>
 8007a2e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d16c      	bne.n	8007b10 <mbedtls_mpi_add_abs+0x158>

    o = B->p; p = X->p; c = 0;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	623b      	str	r3, [r7, #32]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	61fb      	str	r3, [r7, #28]
 8007a42:	2300      	movs	r3, #0
 8007a44:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 8007a46:	2300      	movs	r3, #0
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a4a:	e02c      	b.n	8007aa6 <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	441a      	add	r2, r3
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	bf8c      	ite	hi
 8007a68:	2301      	movhi	r3, #1
 8007a6a:	2300      	movls	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	441a      	add	r2, r3
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	bf8c      	ite	hi
 8007a86:	2301      	movhi	r3, #1
 8007a88:	2300      	movls	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	4413      	add	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	3301      	adds	r3, #1
 8007a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	623b      	str	r3, [r7, #32]
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	61fb      	str	r3, [r7, #28]
 8007aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d3ce      	bcc.n	8007a4c <mbedtls_mpi_add_abs+0x94>
    }

    while( c != 0 )
 8007aae:	e029      	b.n	8007b04 <mbedtls_mpi_add_abs+0x14c>
    {
        if( i >= X->n )
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d30f      	bcc.n	8007ada <mbedtls_mpi_add_abs+0x122>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	3301      	adds	r3, #1
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff fae4 	bl	800708e <mbedtls_mpi_grow>
 8007ac6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d122      	bne.n	8007b14 <mbedtls_mpi_add_abs+0x15c>
            p = X->p + i;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	bf8c      	ite	hi
 8007af0:	2301      	movhi	r3, #1
 8007af2:	2300      	movls	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	61bb      	str	r3, [r7, #24]
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	3301      	adds	r3, #1
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	3304      	adds	r3, #4
 8007b02:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1d2      	bne.n	8007ab0 <mbedtls_mpi_add_abs+0xf8>
    }

cleanup:
 8007b0a:	e004      	b.n	8007b16 <mbedtls_mpi_add_abs+0x15e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8007b0c:	bf00      	nop
 8007b0e:	e002      	b.n	8007b16 <mbedtls_mpi_add_abs+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8007b10:	bf00      	nop
 8007b12:	e000      	b.n	8007b16 <mbedtls_mpi_add_abs+0x15e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8007b14:	bf00      	nop

    return( ret );
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3730      	adds	r7, #48	; 0x30
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 8007b20:	b480      	push	{r7}
 8007b22:	b089      	sub	sp, #36	; 0x24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	2300      	movs	r3, #0
 8007b32:	61fb      	str	r3, [r7, #28]
 8007b34:	e02b      	b.n	8007b8e <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	bf8c      	ite	hi
 8007b40:	2301      	movhi	r3, #1
 8007b42:	2300      	movls	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	bf34      	ite	cc
 8007b60:	2301      	movcc	r3, #1
 8007b62:	2300      	movcs	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	61fb      	str	r3, [r7, #28]
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	3304      	adds	r3, #4
 8007b86:	60bb      	str	r3, [r7, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	607b      	str	r3, [r7, #4]
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d3cf      	bcc.n	8007b36 <mpi_sub_hlp+0x16>
    }

    while( c != 0 )
 8007b96:	e016      	b.n	8007bc6 <mpi_sub_hlp+0xa6>
    {
        z = ( *d < c ); *d -= c;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	bf8c      	ite	hi
 8007ba2:	2301      	movhi	r3, #1
 8007ba4:	2300      	movls	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
        c = z; i++; d++;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	61bb      	str	r3, [r7, #24]
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	61fb      	str	r3, [r7, #28]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e5      	bne.n	8007b98 <mpi_sub_hlp+0x78>
    }
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	3724      	adds	r7, #36	; 0x24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b08a      	sub	sp, #40	; 0x28
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	68b8      	ldr	r0, [r7, #8]
 8007bea:	f7ff fda6 	bl	800773a <mbedtls_mpi_cmp_abs>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	da02      	bge.n	8007bfa <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8007bf4:	f06f 0309 	mvn.w	r3, #9
 8007bf8:	e04f      	b.n	8007c9a <mbedtls_mpi_sub_abs+0xc0>

    mbedtls_mpi_init( &TB );
 8007bfa:	f107 0314 	add.w	r3, r7, #20
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff fa08 	bl	8007014 <mbedtls_mpi_init>

    if( X == B )
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d10c      	bne.n	8007c26 <mbedtls_mpi_sub_abs+0x4c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8007c0c:	f107 0314 	add.w	r3, r7, #20
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff fa7e 	bl	8007114 <mbedtls_mpi_copy>
 8007c18:	6278      	str	r0, [r7, #36]	; 0x24
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d133      	bne.n	8007c88 <mbedtls_mpi_sub_abs+0xae>
        B = &TB;
 8007c20:	f107 0314 	add.w	r3, r7, #20
 8007c24:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d007      	beq.n	8007c3e <mbedtls_mpi_sub_abs+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff fa6f 	bl	8007114 <mbedtls_mpi_copy>
 8007c36:	6278      	str	r0, [r7, #36]	; 0x24
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d126      	bne.n	8007c8c <mbedtls_mpi_sub_abs+0xb2>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

    ret = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24

    for( n = B->n; n > 0; n-- )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	623b      	str	r3, [r7, #32]
 8007c4e:	e00d      	b.n	8007c6c <mbedtls_mpi_sub_abs+0x92>
        if( B->p[n - 1] != 0 )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d106      	bne.n	8007c74 <mbedtls_mpi_sub_abs+0x9a>
    for( n = B->n; n > 0; n-- )
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	623b      	str	r3, [r7, #32]
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1ee      	bne.n	8007c50 <mbedtls_mpi_sub_abs+0x76>
 8007c72:	e000      	b.n	8007c76 <mbedtls_mpi_sub_abs+0x9c>
            break;
 8007c74:	bf00      	nop

    mpi_sub_hlp( n, B->p, X->p );
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6899      	ldr	r1, [r3, #8]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6a38      	ldr	r0, [r7, #32]
 8007c82:	f7ff ff4d 	bl	8007b20 <mpi_sub_hlp>
 8007c86:	e002      	b.n	8007c8e <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8007c88:	bf00      	nop
 8007c8a:	e000      	b.n	8007c8e <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8007c8c:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB );
 8007c8e:	f107 0314 	add.w	r3, r7, #20
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff f9d5 	bl	8007042 <mbedtls_mpi_free>

    return( ret );
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3728      	adds	r7, #40	; 0x28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b086      	sub	sp, #24
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
    int ret, s = A->s;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	613b      	str	r3, [r7, #16]

    if( A->s * B->s < 0 )
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6812      	ldr	r2, [r2, #0]
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	da21      	bge.n	8007d08 <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	68b8      	ldr	r0, [r7, #8]
 8007cc8:	f7ff fd37 	bl	800773a <mbedtls_mpi_cmp_abs>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	db0c      	blt.n	8007cec <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7ff ff7f 	bl	8007bda <mbedtls_mpi_sub_abs>
 8007cdc:	6178      	str	r0, [r7, #20]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d11e      	bne.n	8007d22 <mbedtls_mpi_add_mpi+0x80>
            X->s =  s;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	e01f      	b.n	8007d2c <mbedtls_mpi_add_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f7ff ff72 	bl	8007bda <mbedtls_mpi_sub_abs>
 8007cf6:	6178      	str	r0, [r7, #20]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d113      	bne.n	8007d26 <mbedtls_mpi_add_mpi+0x84>
            X->s = -s;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	425a      	negs	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	e011      	b.n	8007d2c <mbedtls_mpi_add_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff fe53 	bl	80079b8 <mbedtls_mpi_add_abs>
 8007d12:	6178      	str	r0, [r7, #20]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d107      	bne.n	8007d2a <mbedtls_mpi_add_mpi+0x88>
        X->s = s;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	e004      	b.n	8007d2c <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8007d22:	bf00      	nop
 8007d24:	e002      	b.n	8007d2c <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8007d26:	bf00      	nop
 8007d28:	e000      	b.n	8007d2c <mbedtls_mpi_add_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8007d2a:	bf00      	nop
    }

cleanup:

    return( ret );
 8007d2c:	697b      	ldr	r3, [r7, #20]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
    int ret, s = A->s;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	613b      	str	r3, [r7, #16]

    if( A->s * B->s > 0 )
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	fb02 f303 	mul.w	r3, r2, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	dd21      	ble.n	8007d9c <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	68b8      	ldr	r0, [r7, #8]
 8007d5c:	f7ff fced 	bl	800773a <mbedtls_mpi_cmp_abs>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	db0c      	blt.n	8007d80 <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff ff35 	bl	8007bda <mbedtls_mpi_sub_abs>
 8007d70:	6178      	str	r0, [r7, #20]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11e      	bne.n	8007db6 <mbedtls_mpi_sub_mpi+0x80>
            X->s =  s;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e01f      	b.n	8007dc0 <mbedtls_mpi_sub_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff ff28 	bl	8007bda <mbedtls_mpi_sub_abs>
 8007d8a:	6178      	str	r0, [r7, #20]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d113      	bne.n	8007dba <mbedtls_mpi_sub_mpi+0x84>
            X->s = -s;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	425a      	negs	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	e011      	b.n	8007dc0 <mbedtls_mpi_sub_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff fe09 	bl	80079b8 <mbedtls_mpi_add_abs>
 8007da6:	6178      	str	r0, [r7, #20]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d107      	bne.n	8007dbe <mbedtls_mpi_sub_mpi+0x88>
        X->s = s;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	e004      	b.n	8007dc0 <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8007db6:	bf00      	nop
 8007db8:	e002      	b.n	8007dc0 <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8007dba:	bf00      	nop
 8007dbc:	e000      	b.n	8007dc0 <mbedtls_mpi_sub_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8007dbe:	bf00      	nop
    }

cleanup:

    return( ret );
 8007dc0:	697b      	ldr	r3, [r7, #20]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b088      	sub	sp, #32
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bfb8      	it	lt
 8007ddc:	425b      	neglt	r3, r3
 8007dde:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	da02      	bge.n	8007dec <mbedtls_mpi_add_int+0x22>
 8007de6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dea:	e000      	b.n	8007dee <mbedtls_mpi_add_int+0x24>
 8007dec:	2301      	movs	r3, #1
 8007dee:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8007df0:	2301      	movs	r3, #1
 8007df2:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 8007dfa:	f107 0314 	add.w	r3, r7, #20
 8007dfe:	461a      	mov	r2, r3
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff ff4d 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 8007e08:	4603      	mov	r3, r0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3720      	adds	r7, #32
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b088      	sub	sp, #32
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bfb8      	it	lt
 8007e24:	425b      	neglt	r3, r3
 8007e26:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	da02      	bge.n	8007e34 <mbedtls_mpi_sub_int+0x22>
 8007e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e32:	e000      	b.n	8007e36 <mbedtls_mpi_sub_int+0x24>
 8007e34:	2301      	movs	r3, #1
 8007e36:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8007e3c:	f107 0310 	add.w	r3, r7, #16
 8007e40:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 8007e42:	f107 0314 	add.w	r3, r7, #20
 8007e46:	461a      	mov	r2, r3
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff ff73 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 8007e50:	4603      	mov	r3, r0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 8007e5a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007e5e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007e68:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8007e6c:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8007e70:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    mbedtls_mpi_uint c = 0, t = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8007e80:	f000 bfe7 	b.w	8008e52 <mpi_mul_hlp+0xff8>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8007e84:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007e88:	1d13      	adds	r3, r2, #4
 8007e8a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007e8e:	6813      	ldr	r3, [r2, #0]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8007e96:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 8007e9a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8007ea4:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8007ea8:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 8007eac:	460b      	mov	r3, r1
 8007eae:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8007eb2:	fb02 f203 	mul.w	r2, r2, r3
 8007eb6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007eba:	e9c7 018e 	strd	r0, r1, [r7, #568]	; 0x238
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007eca:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8007ece:	fba2 1201 	umull	r1, r2, r2, r1
 8007ed2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8007ed6:	460a      	mov	r2, r1
 8007ed8:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8007edc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8007ee6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8007eea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007eee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007ef2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007ef6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007efa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007efe:	f04f 0000 	mov.w	r0, #0
 8007f02:	f04f 0100 	mov.w	r1, #0
 8007f06:	0018      	movs	r0, r3
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007f10:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007f14:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007f18:	4413      	add	r3, r2
 8007f1a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007f1e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007f22:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007f26:	429a      	cmp	r2, r3
 8007f28:	bf34      	ite	cc
 8007f2a:	2301      	movcc	r3, #1
 8007f2c:	2300      	movcs	r3, #0
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	461a      	mov	r2, r3
 8007f32:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007f36:	4413      	add	r3, r2
 8007f38:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007f3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007f46:	4413      	add	r3, r2
 8007f48:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007f4c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007f56:	4293      	cmp	r3, r2
 8007f58:	bf34      	ite	cc
 8007f5a:	2301      	movcc	r3, #1
 8007f5c:	2300      	movcs	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	461a      	mov	r2, r3
 8007f62:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007f66:	4413      	add	r3, r2
 8007f68:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007f6c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007f70:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007f74:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007f78:	1d13      	adds	r3, r2, #4
 8007f7a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007f7e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007f88:	1d13      	adds	r3, r2, #4
 8007f8a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8007f96:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8007f9a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8007fa4:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8007fa8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8007fac:	460b      	mov	r3, r1
 8007fae:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8007fb2:	fb02 f203 	mul.w	r2, r2, r3
 8007fb6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8007fba:	e9c7 018a 	strd	r0, r1, [r7, #552]	; 0x228
 8007fbe:	4601      	mov	r1, r0
 8007fc0:	fb01 f303 	mul.w	r3, r1, r3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8007fca:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007fce:	fba2 1201 	umull	r1, r2, r2, r1
 8007fd2:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8007fdc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8007fe6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8007fea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007fee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007ff2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007ff6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007ffa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007ffe:	f04f 0000 	mov.w	r0, #0
 8008002:	f04f 0100 	mov.w	r1, #0
 8008006:	0018      	movs	r0, r3
 8008008:	2100      	movs	r1, #0
 800800a:	4603      	mov	r3, r0
 800800c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008010:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008014:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008018:	4413      	add	r3, r2
 800801a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800801e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008022:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008026:	429a      	cmp	r2, r3
 8008028:	bf34      	ite	cc
 800802a:	2301      	movcc	r3, #1
 800802c:	2300      	movcs	r3, #0
 800802e:	b2db      	uxtb	r3, r3
 8008030:	461a      	mov	r2, r3
 8008032:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008036:	4413      	add	r3, r2
 8008038:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800803c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008046:	4413      	add	r3, r2
 8008048:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800804c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008056:	4293      	cmp	r3, r2
 8008058:	bf34      	ite	cc
 800805a:	2301      	movcc	r3, #1
 800805c:	2300      	movcs	r3, #0
 800805e:	b2db      	uxtb	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008066:	4413      	add	r3, r2
 8008068:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800806c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008070:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008074:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008078:	1d13      	adds	r3, r2, #4
 800807a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800807e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008082:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008084:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008088:	1d13      	adds	r3, r2, #4
 800808a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800808e:	6813      	ldr	r3, [r2, #0]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8008096:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800809a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80080a4:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 80080a8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80080ac:	460b      	mov	r3, r1
 80080ae:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80080b2:	fb02 f203 	mul.w	r2, r2, r3
 80080b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80080ba:	e9c7 0186 	strd	r0, r1, [r7, #536]	; 0x218
 80080be:	4601      	mov	r1, r0
 80080c0:	fb01 f303 	mul.w	r3, r1, r3
 80080c4:	4413      	add	r3, r2
 80080c6:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80080ca:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80080ce:	fba2 1201 	umull	r1, r2, r2, r1
 80080d2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80080d6:	460a      	mov	r2, r1
 80080d8:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 80080dc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80080e0:	4413      	add	r3, r2
 80080e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80080e6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80080ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80080ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80080f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80080f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80080fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80080fe:	f04f 0000 	mov.w	r0, #0
 8008102:	f04f 0100 	mov.w	r1, #0
 8008106:	0018      	movs	r0, r3
 8008108:	2100      	movs	r1, #0
 800810a:	4603      	mov	r3, r0
 800810c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008110:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008114:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008118:	4413      	add	r3, r2
 800811a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800811e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008122:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008126:	429a      	cmp	r2, r3
 8008128:	bf34      	ite	cc
 800812a:	2301      	movcc	r3, #1
 800812c:	2300      	movcs	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	461a      	mov	r2, r3
 8008132:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008136:	4413      	add	r3, r2
 8008138:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800813c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008146:	4413      	add	r3, r2
 8008148:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800814c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008156:	4293      	cmp	r3, r2
 8008158:	bf34      	ite	cc
 800815a:	2301      	movcc	r3, #1
 800815c:	2300      	movcs	r3, #0
 800815e:	b2db      	uxtb	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008166:	4413      	add	r3, r2
 8008168:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800816c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008170:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008174:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008178:	1d13      	adds	r3, r2, #4
 800817a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800817e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008188:	1d13      	adds	r3, r2, #4
 800818a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800818e:	6813      	ldr	r3, [r2, #0]
 8008190:	2200      	movs	r2, #0
 8008192:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8008196:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 800819a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80081a4:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80081a8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80081ac:	460b      	mov	r3, r1
 80081ae:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 80081b2:	fb02 f203 	mul.w	r2, r2, r3
 80081b6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80081ba:	e9c7 0182 	strd	r0, r1, [r7, #520]	; 0x208
 80081be:	4601      	mov	r1, r0
 80081c0:	fb01 f303 	mul.w	r3, r1, r3
 80081c4:	4413      	add	r3, r2
 80081c6:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80081ca:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 80081ce:	fba2 1201 	umull	r1, r2, r2, r1
 80081d2:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80081d6:	460a      	mov	r2, r1
 80081d8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80081dc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80081e0:	4413      	add	r3, r2
 80081e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80081e6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80081ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80081ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80081f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80081f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80081fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80081fe:	f04f 0000 	mov.w	r0, #0
 8008202:	f04f 0100 	mov.w	r1, #0
 8008206:	0018      	movs	r0, r3
 8008208:	2100      	movs	r1, #0
 800820a:	4603      	mov	r3, r0
 800820c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008210:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008214:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008218:	4413      	add	r3, r2
 800821a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800821e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008222:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008226:	429a      	cmp	r2, r3
 8008228:	bf34      	ite	cc
 800822a:	2301      	movcc	r3, #1
 800822c:	2300      	movcs	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008236:	4413      	add	r3, r2
 8008238:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800823c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008246:	4413      	add	r3, r2
 8008248:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800824c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008256:	4293      	cmp	r3, r2
 8008258:	bf34      	ite	cc
 800825a:	2301      	movcc	r3, #1
 800825c:	2300      	movcs	r3, #0
 800825e:	b2db      	uxtb	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008266:	4413      	add	r3, r2
 8008268:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800826c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008270:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008274:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008278:	1d13      	adds	r3, r2, #4
 800827a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800827e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008282:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008284:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008288:	1d13      	adds	r3, r2, #4
 800828a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800828e:	6813      	ldr	r3, [r2, #0]
 8008290:	2200      	movs	r2, #0
 8008292:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8008296:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 800829a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80082a4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80082a8:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80082ac:	460b      	mov	r3, r1
 80082ae:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80082b2:	fb02 f203 	mul.w	r2, r2, r3
 80082b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80082ba:	e9c7 017e 	strd	r0, r1, [r7, #504]	; 0x1f8
 80082be:	4601      	mov	r1, r0
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	4413      	add	r3, r2
 80082c6:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80082ca:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 80082ce:	fba2 1201 	umull	r1, r2, r2, r1
 80082d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80082d6:	460a      	mov	r2, r1
 80082d8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80082dc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80082e0:	4413      	add	r3, r2
 80082e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80082e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80082ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80082ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80082f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80082f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80082fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80082fe:	f04f 0000 	mov.w	r0, #0
 8008302:	f04f 0100 	mov.w	r1, #0
 8008306:	0018      	movs	r0, r3
 8008308:	2100      	movs	r1, #0
 800830a:	4603      	mov	r3, r0
 800830c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008310:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008314:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008318:	4413      	add	r3, r2
 800831a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800831e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008322:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008326:	429a      	cmp	r2, r3
 8008328:	bf34      	ite	cc
 800832a:	2301      	movcc	r3, #1
 800832c:	2300      	movcs	r3, #0
 800832e:	b2db      	uxtb	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008336:	4413      	add	r3, r2
 8008338:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800833c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008346:	4413      	add	r3, r2
 8008348:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800834c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008356:	4293      	cmp	r3, r2
 8008358:	bf34      	ite	cc
 800835a:	2301      	movcc	r3, #1
 800835c:	2300      	movcs	r3, #0
 800835e:	b2db      	uxtb	r3, r3
 8008360:	461a      	mov	r2, r3
 8008362:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008366:	4413      	add	r3, r2
 8008368:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800836c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008370:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008374:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008378:	1d13      	adds	r3, r2, #4
 800837a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800837e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008388:	1d13      	adds	r3, r2, #4
 800838a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800838e:	6813      	ldr	r3, [r2, #0]
 8008390:	2200      	movs	r2, #0
 8008392:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008396:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 800839a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80083a4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80083a8:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80083ac:	460b      	mov	r3, r1
 80083ae:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80083b2:	fb02 f203 	mul.w	r2, r2, r3
 80083b6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80083ba:	e9c7 017a 	strd	r0, r1, [r7, #488]	; 0x1e8
 80083be:	4601      	mov	r1, r0
 80083c0:	fb01 f303 	mul.w	r3, r1, r3
 80083c4:	4413      	add	r3, r2
 80083c6:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80083ca:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 80083ce:	fba2 1201 	umull	r1, r2, r2, r1
 80083d2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 80083d6:	460a      	mov	r2, r1
 80083d8:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80083dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80083e0:	4413      	add	r3, r2
 80083e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80083e6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80083ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80083ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80083f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80083f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80083fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80083fe:	f04f 0000 	mov.w	r0, #0
 8008402:	f04f 0100 	mov.w	r1, #0
 8008406:	0018      	movs	r0, r3
 8008408:	2100      	movs	r1, #0
 800840a:	4603      	mov	r3, r0
 800840c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008410:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008414:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008418:	4413      	add	r3, r2
 800841a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800841e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008422:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008426:	429a      	cmp	r2, r3
 8008428:	bf34      	ite	cc
 800842a:	2301      	movcc	r3, #1
 800842c:	2300      	movcs	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	461a      	mov	r2, r3
 8008432:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008436:	4413      	add	r3, r2
 8008438:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800843c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008446:	4413      	add	r3, r2
 8008448:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800844c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008456:	4293      	cmp	r3, r2
 8008458:	bf34      	ite	cc
 800845a:	2301      	movcc	r3, #1
 800845c:	2300      	movcs	r3, #0
 800845e:	b2db      	uxtb	r3, r3
 8008460:	461a      	mov	r2, r3
 8008462:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008466:	4413      	add	r3, r2
 8008468:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800846c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008470:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008474:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008478:	1d13      	adds	r3, r2, #4
 800847a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800847e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008482:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008484:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008488:	1d13      	adds	r3, r2, #4
 800848a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800848e:	6813      	ldr	r3, [r2, #0]
 8008490:	2200      	movs	r2, #0
 8008492:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8008496:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800849a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80084a4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 80084a8:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80084ac:	460b      	mov	r3, r1
 80084ae:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80084b2:	fb02 f203 	mul.w	r2, r2, r3
 80084b6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80084ba:	e9c7 0176 	strd	r0, r1, [r7, #472]	; 0x1d8
 80084be:	4601      	mov	r1, r0
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	4413      	add	r3, r2
 80084c6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80084ca:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80084ce:	fba2 1201 	umull	r1, r2, r2, r1
 80084d2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80084d6:	460a      	mov	r2, r1
 80084d8:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80084dc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80084e0:	4413      	add	r3, r2
 80084e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80084e6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80084ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80084ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80084f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80084f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80084fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80084fe:	f04f 0000 	mov.w	r0, #0
 8008502:	f04f 0100 	mov.w	r1, #0
 8008506:	0018      	movs	r0, r3
 8008508:	2100      	movs	r1, #0
 800850a:	4603      	mov	r3, r0
 800850c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008510:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008514:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008518:	4413      	add	r3, r2
 800851a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800851e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008522:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008526:	429a      	cmp	r2, r3
 8008528:	bf34      	ite	cc
 800852a:	2301      	movcc	r3, #1
 800852c:	2300      	movcs	r3, #0
 800852e:	b2db      	uxtb	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008536:	4413      	add	r3, r2
 8008538:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800853c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008546:	4413      	add	r3, r2
 8008548:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800854c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008556:	4293      	cmp	r3, r2
 8008558:	bf34      	ite	cc
 800855a:	2301      	movcc	r3, #1
 800855c:	2300      	movcs	r3, #0
 800855e:	b2db      	uxtb	r3, r3
 8008560:	461a      	mov	r2, r3
 8008562:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008566:	4413      	add	r3, r2
 8008568:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800856c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008570:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008574:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008578:	1d13      	adds	r3, r2, #4
 800857a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800857e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008588:	1d13      	adds	r3, r2, #4
 800858a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800858e:	6813      	ldr	r3, [r2, #0]
 8008590:	2200      	movs	r2, #0
 8008592:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008596:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800859a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80085a4:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80085a8:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 80085ac:	460b      	mov	r3, r1
 80085ae:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80085b2:	fb02 f203 	mul.w	r2, r2, r3
 80085b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80085ba:	e9c7 0172 	strd	r0, r1, [r7, #456]	; 0x1c8
 80085be:	4601      	mov	r1, r0
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	4413      	add	r3, r2
 80085c6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80085ca:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80085ce:	fba2 1201 	umull	r1, r2, r2, r1
 80085d2:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80085d6:	460a      	mov	r2, r1
 80085d8:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80085dc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80085e0:	4413      	add	r3, r2
 80085e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085e6:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80085ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80085ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80085f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80085f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80085fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80085fe:	f04f 0000 	mov.w	r0, #0
 8008602:	f04f 0100 	mov.w	r1, #0
 8008606:	0018      	movs	r0, r3
 8008608:	2100      	movs	r1, #0
 800860a:	4603      	mov	r3, r0
 800860c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008610:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008614:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008618:	4413      	add	r3, r2
 800861a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800861e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008622:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008626:	429a      	cmp	r2, r3
 8008628:	bf34      	ite	cc
 800862a:	2301      	movcc	r3, #1
 800862c:	2300      	movcs	r3, #0
 800862e:	b2db      	uxtb	r3, r3
 8008630:	461a      	mov	r2, r3
 8008632:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008636:	4413      	add	r3, r2
 8008638:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800863c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008646:	4413      	add	r3, r2
 8008648:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800864c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008656:	4293      	cmp	r3, r2
 8008658:	bf34      	ite	cc
 800865a:	2301      	movcc	r3, #1
 800865c:	2300      	movcs	r3, #0
 800865e:	b2db      	uxtb	r3, r3
 8008660:	461a      	mov	r2, r3
 8008662:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008666:	4413      	add	r3, r2
 8008668:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800866c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008670:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008674:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008678:	1d13      	adds	r3, r2, #4
 800867a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800867e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008682:	6013      	str	r3, [r2, #0]

        MULADDC_CORE   MULADDC_CORE
 8008684:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008688:	1d13      	adds	r3, r2, #4
 800868a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800868e:	6813      	ldr	r3, [r2, #0]
 8008690:	2200      	movs	r2, #0
 8008692:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008696:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800869a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80086a4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80086a8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80086ac:	460b      	mov	r3, r1
 80086ae:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80086b2:	fb02 f203 	mul.w	r2, r2, r3
 80086b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80086ba:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
 80086be:	4601      	mov	r1, r0
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	4413      	add	r3, r2
 80086c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80086ca:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80086ce:	fba2 1201 	umull	r1, r2, r2, r1
 80086d2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80086d6:	460a      	mov	r2, r1
 80086d8:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80086dc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80086e0:	4413      	add	r3, r2
 80086e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086e6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80086ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80086ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80086f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80086f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80086fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80086fe:	f04f 0000 	mov.w	r0, #0
 8008702:	f04f 0100 	mov.w	r1, #0
 8008706:	0018      	movs	r0, r3
 8008708:	2100      	movs	r1, #0
 800870a:	4603      	mov	r3, r0
 800870c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008710:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008714:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008718:	4413      	add	r3, r2
 800871a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800871e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008722:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008726:	429a      	cmp	r2, r3
 8008728:	bf34      	ite	cc
 800872a:	2301      	movcc	r3, #1
 800872c:	2300      	movcs	r3, #0
 800872e:	b2db      	uxtb	r3, r3
 8008730:	461a      	mov	r2, r3
 8008732:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008736:	4413      	add	r3, r2
 8008738:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800873c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008746:	4413      	add	r3, r2
 8008748:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800874c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008756:	4293      	cmp	r3, r2
 8008758:	bf34      	ite	cc
 800875a:	2301      	movcc	r3, #1
 800875c:	2300      	movcs	r3, #0
 800875e:	b2db      	uxtb	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008766:	4413      	add	r3, r2
 8008768:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800876c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008770:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008774:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008778:	1d13      	adds	r3, r2, #4
 800877a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800877e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008788:	1d13      	adds	r3, r2, #4
 800878a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800878e:	6813      	ldr	r3, [r2, #0]
 8008790:	2200      	movs	r2, #0
 8008792:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008796:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800879a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80087a4:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 80087a8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80087ac:	460b      	mov	r3, r1
 80087ae:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80087b2:	fb02 f203 	mul.w	r2, r2, r3
 80087b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80087ba:	e9c7 016a 	strd	r0, r1, [r7, #424]	; 0x1a8
 80087be:	4601      	mov	r1, r0
 80087c0:	fb01 f303 	mul.w	r3, r1, r3
 80087c4:	4413      	add	r3, r2
 80087c6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80087ca:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80087ce:	fba2 1201 	umull	r1, r2, r2, r1
 80087d2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80087d6:	460a      	mov	r2, r1
 80087d8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80087dc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80087e0:	4413      	add	r3, r2
 80087e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80087e6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80087ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80087ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80087f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80087f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80087fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80087fe:	f04f 0000 	mov.w	r0, #0
 8008802:	f04f 0100 	mov.w	r1, #0
 8008806:	0018      	movs	r0, r3
 8008808:	2100      	movs	r1, #0
 800880a:	4603      	mov	r3, r0
 800880c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008810:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008814:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008818:	4413      	add	r3, r2
 800881a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800881e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008822:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008826:	429a      	cmp	r2, r3
 8008828:	bf34      	ite	cc
 800882a:	2301      	movcc	r3, #1
 800882c:	2300      	movcs	r3, #0
 800882e:	b2db      	uxtb	r3, r3
 8008830:	461a      	mov	r2, r3
 8008832:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008836:	4413      	add	r3, r2
 8008838:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800883c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008846:	4413      	add	r3, r2
 8008848:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800884c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008856:	4293      	cmp	r3, r2
 8008858:	bf34      	ite	cc
 800885a:	2301      	movcc	r3, #1
 800885c:	2300      	movcs	r3, #0
 800885e:	b2db      	uxtb	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008866:	4413      	add	r3, r2
 8008868:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800886c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008870:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008874:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008878:	1d13      	adds	r3, r2, #4
 800887a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800887e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008882:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008884:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008888:	1d13      	adds	r3, r2, #4
 800888a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800888e:	6813      	ldr	r3, [r2, #0]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8008896:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800889a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800889e:	2200      	movs	r2, #0
 80088a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80088a4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80088a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80088ac:	460b      	mov	r3, r1
 80088ae:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80088b2:	fb02 f203 	mul.w	r2, r2, r3
 80088b6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80088ba:	e9c7 0166 	strd	r0, r1, [r7, #408]	; 0x198
 80088be:	4601      	mov	r1, r0
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
 80088c4:	4413      	add	r3, r2
 80088c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80088ca:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 80088ce:	fba2 1201 	umull	r1, r2, r2, r1
 80088d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80088d6:	460a      	mov	r2, r1
 80088d8:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80088dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80088e0:	4413      	add	r3, r2
 80088e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088e6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80088ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80088ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80088f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80088f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80088fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80088fe:	f04f 0000 	mov.w	r0, #0
 8008902:	f04f 0100 	mov.w	r1, #0
 8008906:	0018      	movs	r0, r3
 8008908:	2100      	movs	r1, #0
 800890a:	4603      	mov	r3, r0
 800890c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008910:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008914:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008918:	4413      	add	r3, r2
 800891a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800891e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008922:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008926:	429a      	cmp	r2, r3
 8008928:	bf34      	ite	cc
 800892a:	2301      	movcc	r3, #1
 800892c:	2300      	movcs	r3, #0
 800892e:	b2db      	uxtb	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008936:	4413      	add	r3, r2
 8008938:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800893c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008946:	4413      	add	r3, r2
 8008948:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800894c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008956:	4293      	cmp	r3, r2
 8008958:	bf34      	ite	cc
 800895a:	2301      	movcc	r3, #1
 800895c:	2300      	movcs	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	461a      	mov	r2, r3
 8008962:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008966:	4413      	add	r3, r2
 8008968:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800896c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008970:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008974:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008978:	1d13      	adds	r3, r2, #4
 800897a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800897e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008988:	1d13      	adds	r3, r2, #4
 800898a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800898e:	6813      	ldr	r3, [r2, #0]
 8008990:	2200      	movs	r2, #0
 8008992:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008996:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800899a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80089a4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80089a8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80089ac:	460b      	mov	r3, r1
 80089ae:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80089b2:	fb02 f203 	mul.w	r2, r2, r3
 80089b6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80089ba:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
 80089be:	4601      	mov	r1, r0
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	4413      	add	r3, r2
 80089c6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80089ca:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 80089ce:	fba2 1201 	umull	r1, r2, r2, r1
 80089d2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80089d6:	460a      	mov	r2, r1
 80089d8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80089dc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80089e0:	4413      	add	r3, r2
 80089e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089e6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80089ea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80089ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 80089f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80089f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80089fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80089fe:	f04f 0000 	mov.w	r0, #0
 8008a02:	f04f 0100 	mov.w	r1, #0
 8008a06:	0018      	movs	r0, r3
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008a10:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008a14:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008a18:	4413      	add	r3, r2
 8008a1a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008a1e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008a22:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008a26:	429a      	cmp	r2, r3
 8008a28:	bf34      	ite	cc
 8008a2a:	2301      	movcc	r3, #1
 8008a2c:	2300      	movcs	r3, #0
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	461a      	mov	r2, r3
 8008a32:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008a36:	4413      	add	r3, r2
 8008a38:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008a3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008a46:	4413      	add	r3, r2
 8008a48:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008a4c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008a56:	4293      	cmp	r3, r2
 8008a58:	bf34      	ite	cc
 8008a5a:	2301      	movcc	r3, #1
 8008a5c:	2300      	movcs	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008a66:	4413      	add	r3, r2
 8008a68:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008a6c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008a70:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008a74:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008a78:	1d13      	adds	r3, r2, #4
 8008a7a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008a7e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008a82:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008a84:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008a88:	1d13      	adds	r3, r2, #4
 8008a8a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8008a96:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008a9a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8008aa4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8008aa8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8008aac:	460b      	mov	r3, r1
 8008aae:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8008ab2:	fb02 f203 	mul.w	r2, r2, r3
 8008ab6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008aba:	e9c7 015e 	strd	r0, r1, [r7, #376]	; 0x178
 8008abe:	4601      	mov	r1, r0
 8008ac0:	fb01 f303 	mul.w	r3, r1, r3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008aca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008ace:	fba2 1201 	umull	r1, r2, r2, r1
 8008ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ad6:	460a      	mov	r2, r1
 8008ad8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8008adc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ae6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8008aea:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8008aee:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8008af2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8008af6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008afa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8008afe:	f04f 0000 	mov.w	r0, #0
 8008b02:	f04f 0100 	mov.w	r1, #0
 8008b06:	0018      	movs	r0, r3
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008b10:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008b14:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008b18:	4413      	add	r3, r2
 8008b1a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008b1e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008b22:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008b26:	429a      	cmp	r2, r3
 8008b28:	bf34      	ite	cc
 8008b2a:	2301      	movcc	r3, #1
 8008b2c:	2300      	movcs	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008b36:	4413      	add	r3, r2
 8008b38:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008b3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008b46:	4413      	add	r3, r2
 8008b48:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008b4c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008b56:	4293      	cmp	r3, r2
 8008b58:	bf34      	ite	cc
 8008b5a:	2301      	movcc	r3, #1
 8008b5c:	2300      	movcs	r3, #0
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008b66:	4413      	add	r3, r2
 8008b68:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008b6c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008b70:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008b74:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008b78:	1d13      	adds	r3, r2, #4
 8008b7a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008b7e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008b88:	1d13      	adds	r3, r2, #4
 8008b8a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8008b96:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8008b9a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8008ba4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8008ba8:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8008bac:	460b      	mov	r3, r1
 8008bae:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8008bb2:	fb02 f203 	mul.w	r2, r2, r3
 8008bb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008bba:	e9c7 015a 	strd	r0, r1, [r7, #360]	; 0x168
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	fb01 f303 	mul.w	r3, r1, r3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008bca:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8008bce:	fba2 ab01 	umull	sl, fp, r2, r1
 8008bd2:	445b      	add	r3, fp
 8008bd4:	469b      	mov	fp, r3
 8008bd6:	e9c7 ab96 	strd	sl, fp, [r7, #600]	; 0x258
 8008bda:	e9c7 ab96 	strd	sl, fp, [r7, #600]	; 0x258
 8008bde:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8008be2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008be6:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8008bea:	f04f 0000 	mov.w	r0, #0
 8008bee:	f04f 0100 	mov.w	r1, #0
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008bfc:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008c00:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008c04:	4413      	add	r3, r2
 8008c06:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008c0a:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008c0e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008c12:	429a      	cmp	r2, r3
 8008c14:	bf34      	ite	cc
 8008c16:	2301      	movcc	r3, #1
 8008c18:	2300      	movcs	r3, #0
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008c22:	4413      	add	r3, r2
 8008c24:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008c28:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008c32:	4413      	add	r3, r2
 8008c34:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008c38:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008c42:	4293      	cmp	r3, r2
 8008c44:	bf34      	ite	cc
 8008c46:	2301      	movcc	r3, #1
 8008c48:	2300      	movcs	r3, #0
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008c52:	4413      	add	r3, r2
 8008c54:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008c58:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008c5c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008c60:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008c64:	1d13      	adds	r3, r2, #4
 8008c66:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008c6a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008c6e:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008c70:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008c74:	1d13      	adds	r3, r2, #4
 8008c76:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008c7a:	6813      	ldr	r3, [r2, #0]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008c82:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8008c86:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008c90:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008c94:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8008c98:	460b      	mov	r3, r1
 8008c9a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008c9e:	fb02 f203 	mul.w	r2, r2, r3
 8008ca2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008ca6:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
 8008caa:	4601      	mov	r1, r0
 8008cac:	fb01 f303 	mul.w	r3, r1, r3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8008cb6:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008cba:	fba2 8901 	umull	r8, r9, r2, r1
 8008cbe:	444b      	add	r3, r9
 8008cc0:	4699      	mov	r9, r3
 8008cc2:	e9c7 8996 	strd	r8, r9, [r7, #600]	; 0x258
 8008cc6:	e9c7 8996 	strd	r8, r9, [r7, #600]	; 0x258
 8008cca:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8008cce:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008cd2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8008cd6:	f04f 0000 	mov.w	r0, #0
 8008cda:	f04f 0100 	mov.w	r1, #0
 8008cde:	0018      	movs	r0, r3
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008ce8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008cec:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008cf6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008cfa:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	bf34      	ite	cc
 8008d02:	2301      	movcc	r3, #1
 8008d04:	2300      	movcs	r3, #0
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008d0e:	4413      	add	r3, r2
 8008d10:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008d14:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008d1e:	4413      	add	r3, r2
 8008d20:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008d24:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	bf34      	ite	cc
 8008d32:	2301      	movcc	r3, #1
 8008d34:	2300      	movcs	r3, #0
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008d3e:	4413      	add	r3, r2
 8008d40:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008d44:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008d48:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008d4c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008d50:	1d13      	adds	r3, r2, #4
 8008d52:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008d56:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008d60:	1d13      	adds	r3, r2, #4
 8008d62:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008d6e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008d72:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008d7c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008d80:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8008d84:	460b      	mov	r3, r1
 8008d86:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008d8a:	fb02 f203 	mul.w	r2, r2, r3
 8008d8e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008d92:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
 8008d96:	4601      	mov	r1, r0
 8008d98:	fb01 f303 	mul.w	r3, r1, r3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008da2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008da6:	fba2 4501 	umull	r4, r5, r2, r1
 8008daa:	442b      	add	r3, r5
 8008dac:	461d      	mov	r5, r3
 8008dae:	e9c7 4596 	strd	r4, r5, [r7, #600]	; 0x258
 8008db2:	e9c7 4596 	strd	r4, r5, [r7, #600]	; 0x258
 8008db6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8008dba:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008dbe:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f04f 0100 	mov.w	r1, #0
 8008dca:	0018      	movs	r0, r3
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008dd4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008dd8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008ddc:	4413      	add	r3, r2
 8008dde:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008de2:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008de6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008dea:	429a      	cmp	r2, r3
 8008dec:	bf34      	ite	cc
 8008dee:	2301      	movcc	r3, #1
 8008df0:	2300      	movcs	r3, #0
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008e00:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008e10:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bf34      	ite	cc
 8008e1e:	2301      	movcc	r3, #1
 8008e20:	2300      	movcs	r3, #0
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008e30:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008e34:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008e38:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008e3c:	1d13      	adds	r3, r2, #4
 8008e3e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008e42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008e46:	6013      	str	r3, [r2, #0]
    for( ; i >= 16; i -= 16 )
 8008e48:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e4c:	3b10      	subs	r3, #16
 8008e4e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008e52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e56:	2b0f      	cmp	r3, #15
 8008e58:	f63f a814 	bhi.w	8007e84 <mpi_mul_hlp+0x2a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8008e5c:	e3c8      	b.n	80095f0 <mpi_mul_hlp+0x1796>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8008e5e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008e62:	1d13      	adds	r3, r2, #4
 8008e64:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008e68:	6813      	ldr	r3, [r2, #0]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e74:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e7e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008e82:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8008e86:	462b      	mov	r3, r5
 8008e88:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8008e8c:	4642      	mov	r2, r8
 8008e8e:	fb02 f203 	mul.w	r2, r2, r3
 8008e92:	464b      	mov	r3, r9
 8008e94:	4621      	mov	r1, r4
 8008e96:	fb01 f303 	mul.w	r3, r1, r3
 8008e9a:	4413      	add	r3, r2
 8008e9c:	4622      	mov	r2, r4
 8008e9e:	4641      	mov	r1, r8
 8008ea0:	fba2 1201 	umull	r1, r2, r2, r1
 8008ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ea8:	460a      	mov	r2, r1
 8008eaa:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8008eae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008eb8:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8008ebc:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008ec0:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008ec4:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008ec8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008ecc:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008ed0:	f04f 0000 	mov.w	r0, #0
 8008ed4:	f04f 0100 	mov.w	r1, #0
 8008ed8:	0018      	movs	r0, r3
 8008eda:	2100      	movs	r1, #0
 8008edc:	4603      	mov	r3, r0
 8008ede:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008ee2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008ee6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008eea:	4413      	add	r3, r2
 8008eec:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008ef0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008ef4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	bf34      	ite	cc
 8008efc:	2301      	movcc	r3, #1
 8008efe:	2300      	movcs	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	461a      	mov	r2, r3
 8008f04:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008f08:	4413      	add	r3, r2
 8008f0a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008f0e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008f18:	4413      	add	r3, r2
 8008f1a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008f1e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	bf34      	ite	cc
 8008f2c:	2301      	movcc	r3, #1
 8008f2e:	2300      	movcs	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008f38:	4413      	add	r3, r2
 8008f3a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008f3e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008f42:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008f46:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008f4a:	1d13      	adds	r3, r2, #4
 8008f4c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008f50:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008f5a:	1d13      	adds	r3, r2, #4
 8008f5c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008f60:	6813      	ldr	r3, [r2, #0]
 8008f62:	2200      	movs	r2, #0
 8008f64:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f68:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8008f70:	677a      	str	r2, [r7, #116]	; 0x74
 8008f72:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008f76:	462b      	mov	r3, r5
 8008f78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f7c:	4642      	mov	r2, r8
 8008f7e:	fb02 f203 	mul.w	r2, r2, r3
 8008f82:	464b      	mov	r3, r9
 8008f84:	4621      	mov	r1, r4
 8008f86:	fb01 f303 	mul.w	r3, r1, r3
 8008f8a:	4413      	add	r3, r2
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	4641      	mov	r1, r8
 8008f90:	fba2 1201 	umull	r1, r2, r2, r1
 8008f94:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8008f98:	460a      	mov	r2, r1
 8008f9a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8008f9e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fa8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8008fac:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008fb0:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008fb4:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008fb8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008fbc:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008fc0:	f04f 0000 	mov.w	r0, #0
 8008fc4:	f04f 0100 	mov.w	r1, #0
 8008fc8:	0018      	movs	r0, r3
 8008fca:	2100      	movs	r1, #0
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008fd2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008fd6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008fda:	4413      	add	r3, r2
 8008fdc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008fe0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008fe4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	bf34      	ite	cc
 8008fec:	2301      	movcc	r3, #1
 8008fee:	2300      	movcs	r3, #0
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008ffe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009008:	4413      	add	r3, r2
 800900a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800900e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009018:	4293      	cmp	r3, r2
 800901a:	bf34      	ite	cc
 800901c:	2301      	movcc	r3, #1
 800901e:	2300      	movcs	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	461a      	mov	r2, r3
 8009024:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009028:	4413      	add	r3, r2
 800902a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800902e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009032:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009036:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800903a:	1d13      	adds	r3, r2, #4
 800903c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8009040:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009044:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8009046:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800904a:	1d13      	adds	r3, r2, #4
 800904c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8009050:	6813      	ldr	r3, [r2, #0]
 8009052:	2200      	movs	r2, #0
 8009054:	66bb      	str	r3, [r7, #104]	; 0x68
 8009056:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009058:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800905c:	2200      	movs	r2, #0
 800905e:	663b      	str	r3, [r7, #96]	; 0x60
 8009060:	667a      	str	r2, [r7, #100]	; 0x64
 8009062:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8009066:	462b      	mov	r3, r5
 8009068:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800906c:	4642      	mov	r2, r8
 800906e:	fb02 f203 	mul.w	r2, r2, r3
 8009072:	464b      	mov	r3, r9
 8009074:	4621      	mov	r1, r4
 8009076:	fb01 f303 	mul.w	r3, r1, r3
 800907a:	4413      	add	r3, r2
 800907c:	4622      	mov	r2, r4
 800907e:	4641      	mov	r1, r8
 8009080:	fba2 1201 	umull	r1, r2, r2, r1
 8009084:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009088:	460a      	mov	r2, r1
 800908a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800908e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009092:	4413      	add	r3, r2
 8009094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009098:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800909c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 80090a0:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 80090a4:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80090a8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80090ac:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80090b0:	f04f 0000 	mov.w	r0, #0
 80090b4:	f04f 0100 	mov.w	r1, #0
 80090b8:	0018      	movs	r0, r3
 80090ba:	2100      	movs	r1, #0
 80090bc:	4603      	mov	r3, r0
 80090be:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80090c2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80090c6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80090ca:	4413      	add	r3, r2
 80090cc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80090d0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80090d4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80090d8:	429a      	cmp	r2, r3
 80090da:	bf34      	ite	cc
 80090dc:	2301      	movcc	r3, #1
 80090de:	2300      	movcs	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	461a      	mov	r2, r3
 80090e4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80090e8:	4413      	add	r3, r2
 80090ea:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80090ee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80090f8:	4413      	add	r3, r2
 80090fa:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80090fe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009108:	4293      	cmp	r3, r2
 800910a:	bf34      	ite	cc
 800910c:	2301      	movcc	r3, #1
 800910e:	2300      	movcs	r3, #0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	461a      	mov	r2, r3
 8009114:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009118:	4413      	add	r3, r2
 800911a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800911e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009122:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009126:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800912a:	1d13      	adds	r3, r2, #4
 800912c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8009130:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800913a:	1d13      	adds	r3, r2, #4
 800913c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8009140:	6813      	ldr	r3, [r2, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	65bb      	str	r3, [r7, #88]	; 0x58
 8009146:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009148:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800914c:	2200      	movs	r2, #0
 800914e:	653b      	str	r3, [r7, #80]	; 0x50
 8009150:	657a      	str	r2, [r7, #84]	; 0x54
 8009152:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8009156:	462b      	mov	r3, r5
 8009158:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800915c:	4642      	mov	r2, r8
 800915e:	fb02 f203 	mul.w	r2, r2, r3
 8009162:	464b      	mov	r3, r9
 8009164:	4621      	mov	r1, r4
 8009166:	fb01 f303 	mul.w	r3, r1, r3
 800916a:	4413      	add	r3, r2
 800916c:	4622      	mov	r2, r4
 800916e:	4641      	mov	r1, r8
 8009170:	fba2 1201 	umull	r1, r2, r2, r1
 8009174:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009178:	460a      	mov	r2, r1
 800917a:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800917e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009182:	4413      	add	r3, r2
 8009184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009188:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800918c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009190:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009194:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8009198:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800919c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80091a0:	f04f 0000 	mov.w	r0, #0
 80091a4:	f04f 0100 	mov.w	r1, #0
 80091a8:	0018      	movs	r0, r3
 80091aa:	2100      	movs	r1, #0
 80091ac:	4603      	mov	r3, r0
 80091ae:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80091b2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80091b6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80091ba:	4413      	add	r3, r2
 80091bc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80091c0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80091c4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80091c8:	429a      	cmp	r2, r3
 80091ca:	bf34      	ite	cc
 80091cc:	2301      	movcc	r3, #1
 80091ce:	2300      	movcs	r3, #0
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	461a      	mov	r2, r3
 80091d4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80091d8:	4413      	add	r3, r2
 80091da:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80091de:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80091e8:	4413      	add	r3, r2
 80091ea:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80091ee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80091f8:	4293      	cmp	r3, r2
 80091fa:	bf34      	ite	cc
 80091fc:	2301      	movcc	r3, #1
 80091fe:	2300      	movcs	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	461a      	mov	r2, r3
 8009204:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009208:	4413      	add	r3, r2
 800920a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800920e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009212:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009216:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800921a:	1d13      	adds	r3, r2, #4
 800921c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8009220:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009224:	6013      	str	r3, [r2, #0]

        MULADDC_CORE   MULADDC_CORE
 8009226:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800922a:	1d13      	adds	r3, r2, #4
 800922c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8009230:	6813      	ldr	r3, [r2, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	64bb      	str	r3, [r7, #72]	; 0x48
 8009236:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009238:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800923c:	2200      	movs	r2, #0
 800923e:	643b      	str	r3, [r7, #64]	; 0x40
 8009240:	647a      	str	r2, [r7, #68]	; 0x44
 8009242:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8009246:	462b      	mov	r3, r5
 8009248:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800924c:	4642      	mov	r2, r8
 800924e:	fb02 f203 	mul.w	r2, r2, r3
 8009252:	464b      	mov	r3, r9
 8009254:	4621      	mov	r1, r4
 8009256:	fb01 f303 	mul.w	r3, r1, r3
 800925a:	4413      	add	r3, r2
 800925c:	4622      	mov	r2, r4
 800925e:	4641      	mov	r1, r8
 8009260:	fba2 1201 	umull	r1, r2, r2, r1
 8009264:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8009268:	460a      	mov	r2, r1
 800926a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800926e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009272:	4413      	add	r3, r2
 8009274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009278:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800927c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009280:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009284:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8009288:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800928c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8009290:	f04f 0000 	mov.w	r0, #0
 8009294:	f04f 0100 	mov.w	r1, #0
 8009298:	0018      	movs	r0, r3
 800929a:	2100      	movs	r1, #0
 800929c:	4603      	mov	r3, r0
 800929e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80092a2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80092a6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80092aa:	4413      	add	r3, r2
 80092ac:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80092b0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80092b4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80092b8:	429a      	cmp	r2, r3
 80092ba:	bf34      	ite	cc
 80092bc:	2301      	movcc	r3, #1
 80092be:	2300      	movcs	r3, #0
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	461a      	mov	r2, r3
 80092c4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80092c8:	4413      	add	r3, r2
 80092ca:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80092ce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80092d8:	4413      	add	r3, r2
 80092da:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80092de:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80092e8:	4293      	cmp	r3, r2
 80092ea:	bf34      	ite	cc
 80092ec:	2301      	movcc	r3, #1
 80092ee:	2300      	movcs	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	461a      	mov	r2, r3
 80092f4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80092f8:	4413      	add	r3, r2
 80092fa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80092fe:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009302:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009306:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800930a:	1d13      	adds	r3, r2, #4
 800930c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8009310:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800931a:	1d13      	adds	r3, r2, #4
 800931c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8009320:	6813      	ldr	r3, [r2, #0]
 8009322:	2200      	movs	r2, #0
 8009324:	63bb      	str	r3, [r7, #56]	; 0x38
 8009326:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009328:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800932c:	2200      	movs	r2, #0
 800932e:	633b      	str	r3, [r7, #48]	; 0x30
 8009330:	637a      	str	r2, [r7, #52]	; 0x34
 8009332:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8009336:	462b      	mov	r3, r5
 8009338:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800933c:	4642      	mov	r2, r8
 800933e:	fb02 f203 	mul.w	r2, r2, r3
 8009342:	464b      	mov	r3, r9
 8009344:	4621      	mov	r1, r4
 8009346:	fb01 f303 	mul.w	r3, r1, r3
 800934a:	4413      	add	r3, r2
 800934c:	4622      	mov	r2, r4
 800934e:	4641      	mov	r1, r8
 8009350:	fba2 1201 	umull	r1, r2, r2, r1
 8009354:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009358:	460a      	mov	r2, r1
 800935a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800935e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009362:	4413      	add	r3, r2
 8009364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009368:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800936c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009370:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009374:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8009378:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800937c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8009380:	f04f 0000 	mov.w	r0, #0
 8009384:	f04f 0100 	mov.w	r1, #0
 8009388:	0018      	movs	r0, r3
 800938a:	2100      	movs	r1, #0
 800938c:	4603      	mov	r3, r0
 800938e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8009392:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8009396:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800939a:	4413      	add	r3, r2
 800939c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80093a0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80093a4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80093a8:	429a      	cmp	r2, r3
 80093aa:	bf34      	ite	cc
 80093ac:	2301      	movcc	r3, #1
 80093ae:	2300      	movcs	r3, #0
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	461a      	mov	r2, r3
 80093b4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80093b8:	4413      	add	r3, r2
 80093ba:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80093be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80093c8:	4413      	add	r3, r2
 80093ca:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80093ce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80093d8:	4293      	cmp	r3, r2
 80093da:	bf34      	ite	cc
 80093dc:	2301      	movcc	r3, #1
 80093de:	2300      	movcs	r3, #0
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	461a      	mov	r2, r3
 80093e4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80093e8:	4413      	add	r3, r2
 80093ea:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80093ee:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80093f2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80093f6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80093fa:	1d13      	adds	r3, r2, #4
 80093fc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8009400:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009404:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8009406:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800940a:	1d13      	adds	r3, r2, #4
 800940c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8009410:	6813      	ldr	r3, [r2, #0]
 8009412:	2200      	movs	r2, #0
 8009414:	62bb      	str	r3, [r7, #40]	; 0x28
 8009416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009418:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800941c:	2200      	movs	r2, #0
 800941e:	623b      	str	r3, [r7, #32]
 8009420:	627a      	str	r2, [r7, #36]	; 0x24
 8009422:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8009426:	462b      	mov	r3, r5
 8009428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800942c:	4642      	mov	r2, r8
 800942e:	fb02 f203 	mul.w	r2, r2, r3
 8009432:	464b      	mov	r3, r9
 8009434:	4621      	mov	r1, r4
 8009436:	fb01 f303 	mul.w	r3, r1, r3
 800943a:	4413      	add	r3, r2
 800943c:	4622      	mov	r2, r4
 800943e:	4641      	mov	r1, r8
 8009440:	fba2 1201 	umull	r1, r2, r2, r1
 8009444:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009448:	460a      	mov	r2, r1
 800944a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800944e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009452:	4413      	add	r3, r2
 8009454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009458:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800945c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009460:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009464:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8009468:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800946c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8009470:	f04f 0000 	mov.w	r0, #0
 8009474:	f04f 0100 	mov.w	r1, #0
 8009478:	0018      	movs	r0, r3
 800947a:	2100      	movs	r1, #0
 800947c:	4603      	mov	r3, r0
 800947e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8009482:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8009486:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800948a:	4413      	add	r3, r2
 800948c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8009490:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8009494:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009498:	429a      	cmp	r2, r3
 800949a:	bf34      	ite	cc
 800949c:	2301      	movcc	r3, #1
 800949e:	2300      	movcs	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80094a8:	4413      	add	r3, r2
 80094aa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80094ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80094b8:	4413      	add	r3, r2
 80094ba:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80094be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80094c8:	4293      	cmp	r3, r2
 80094ca:	bf34      	ite	cc
 80094cc:	2301      	movcc	r3, #1
 80094ce:	2300      	movcs	r3, #0
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	461a      	mov	r2, r3
 80094d4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80094d8:	4413      	add	r3, r2
 80094da:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80094de:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80094e2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80094e6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80094ea:	1d13      	adds	r3, r2, #4
 80094ec:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80094f0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80094fa:	1d13      	adds	r3, r2, #4
 80094fc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8009500:	6813      	ldr	r3, [r2, #0]
 8009502:	2200      	movs	r2, #0
 8009504:	61bb      	str	r3, [r7, #24]
 8009506:	61fa      	str	r2, [r7, #28]
 8009508:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800950c:	2200      	movs	r2, #0
 800950e:	613b      	str	r3, [r7, #16]
 8009510:	617a      	str	r2, [r7, #20]
 8009512:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8009516:	462b      	mov	r3, r5
 8009518:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800951c:	4642      	mov	r2, r8
 800951e:	fb02 f203 	mul.w	r2, r2, r3
 8009522:	464b      	mov	r3, r9
 8009524:	4621      	mov	r1, r4
 8009526:	fb01 f303 	mul.w	r3, r1, r3
 800952a:	4413      	add	r3, r2
 800952c:	4622      	mov	r2, r4
 800952e:	4641      	mov	r1, r8
 8009530:	fba2 1201 	umull	r1, r2, r2, r1
 8009534:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009538:	460a      	mov	r2, r1
 800953a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800953e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009542:	4413      	add	r3, r2
 8009544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009548:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800954c:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009550:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8009554:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8009558:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800955c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8009560:	f04f 0000 	mov.w	r0, #0
 8009564:	f04f 0100 	mov.w	r1, #0
 8009568:	0018      	movs	r0, r3
 800956a:	2100      	movs	r1, #0
 800956c:	4603      	mov	r3, r0
 800956e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8009572:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8009576:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800957a:	4413      	add	r3, r2
 800957c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8009580:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8009584:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009588:	429a      	cmp	r2, r3
 800958a:	bf34      	ite	cc
 800958c:	2301      	movcc	r3, #1
 800958e:	2300      	movcs	r3, #0
 8009590:	b2db      	uxtb	r3, r3
 8009592:	461a      	mov	r2, r3
 8009594:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009598:	4413      	add	r3, r2
 800959a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800959e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80095a8:	4413      	add	r3, r2
 80095aa:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80095ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80095b8:	4293      	cmp	r3, r2
 80095ba:	bf34      	ite	cc
 80095bc:	2301      	movcc	r3, #1
 80095be:	2300      	movcs	r3, #0
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	461a      	mov	r2, r3
 80095c4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80095c8:	4413      	add	r3, r2
 80095ca:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80095ce:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80095d2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80095d6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80095da:	1d13      	adds	r3, r2, #4
 80095dc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80095e0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80095e4:	6013      	str	r3, [r2, #0]
    for( ; i >= 8; i -= 8 )
 80095e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095ea:	3b08      	subs	r3, #8
 80095ec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80095f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095f4:	2b07      	cmp	r3, #7
 80095f6:	f63f ac32 	bhi.w	8008e5e <mpi_mul_hlp+0x1004>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80095fa:	e07c      	b.n	80096f6 <mpi_mul_hlp+0x189c>
    {
        MULADDC_INIT
        MULADDC_CORE
 80095fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009600:	1d1a      	adds	r2, r3, #4
 8009602:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2200      	movs	r2, #0
 800960a:	60bb      	str	r3, [r7, #8]
 800960c:	60fa      	str	r2, [r7, #12]
 800960e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8009612:	2200      	movs	r2, #0
 8009614:	603b      	str	r3, [r7, #0]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800961c:	462b      	mov	r3, r5
 800961e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8009622:	4642      	mov	r2, r8
 8009624:	fb02 f203 	mul.w	r2, r2, r3
 8009628:	464b      	mov	r3, r9
 800962a:	4621      	mov	r1, r4
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	4413      	add	r3, r2
 8009632:	4622      	mov	r2, r4
 8009634:	4641      	mov	r1, r8
 8009636:	fba2 1201 	umull	r1, r2, r2, r1
 800963a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800963e:	460a      	mov	r2, r1
 8009640:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009644:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009648:	4413      	add	r3, r2
 800964a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800964e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8009652:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
 8009656:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
 800965a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800965e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8009662:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009666:	f04f 0200 	mov.w	r2, #0
 800966a:	f04f 0300 	mov.w	r3, #0
 800966e:	000a      	movs	r2, r1
 8009670:	2300      	movs	r3, #0
 8009672:	4613      	mov	r3, r2
 8009674:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8009678:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800967c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009680:	4413      	add	r3, r2
 8009682:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8009686:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800968a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800968e:	429a      	cmp	r2, r3
 8009690:	bf34      	ite	cc
 8009692:	2301      	movcc	r3, #1
 8009694:	2300      	movcs	r3, #0
 8009696:	b2db      	uxtb	r3, r3
 8009698:	461a      	mov	r2, r3
 800969a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800969e:	4413      	add	r3, r2
 80096a0:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 80096a4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80096ae:	4413      	add	r3, r2
 80096b0:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80096b4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80096be:	429a      	cmp	r2, r3
 80096c0:	bf34      	ite	cc
 80096c2:	2301      	movcc	r3, #1
 80096c4:	2300      	movcs	r3, #0
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	461a      	mov	r2, r3
 80096ca:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80096ce:	4413      	add	r3, r2
 80096d0:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 80096d4:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80096d8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80096dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80096e0:	1d1a      	adds	r2, r3, #4
 80096e2:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80096e6:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80096ea:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 80096ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096f0:	3b01      	subs	r3, #1
 80096f2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80096f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f47f af7e 	bne.w	80095fc <mpi_mul_hlp+0x17a2>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 8009700:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8009704:	3301      	adds	r3, #1
 8009706:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

    do {
        *d += c; c = ( *d < c ); d++;
 800970a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009714:	441a      	add	r2, r3
 8009716:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8009726:	429a      	cmp	r2, r3
 8009728:	bf8c      	ite	hi
 800972a:	2301      	movhi	r3, #1
 800972c:	2300      	movls	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009734:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009738:	3304      	adds	r3, #4
 800973a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    }
    while( c != 0 );
 800973e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e1      	bne.n	800970a <mpi_mul_hlp+0x18b0>
}
 8009746:	bf00      	nop
 8009748:	bf00      	nop
 800974a:	f507 7723 	add.w	r7, r7, #652	; 0x28c
 800974e:	46bd      	mov	sp, r7
 8009750:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009754:	4770      	bx	lr

08009756 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8009756:	b590      	push	{r4, r7, lr}
 8009758:	b08f      	sub	sp, #60	; 0x3c
 800975a:	af00      	add	r7, sp, #0
 800975c:	60f8      	str	r0, [r7, #12]
 800975e:	60b9      	str	r1, [r7, #8]
 8009760:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 8009762:	f107 0320 	add.w	r3, r7, #32
 8009766:	4618      	mov	r0, r3
 8009768:	f7fd fc54 	bl	8007014 <mbedtls_mpi_init>
 800976c:	f107 0314 	add.w	r3, r7, #20
 8009770:	4618      	mov	r0, r3
 8009772:	f7fd fc4f 	bl	8007014 <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	429a      	cmp	r2, r3
 800977c:	d10c      	bne.n	8009798 <mbedtls_mpi_mul_mpi+0x42>
 800977e:	f107 0320 	add.w	r3, r7, #32
 8009782:	68b9      	ldr	r1, [r7, #8]
 8009784:	4618      	mov	r0, r3
 8009786:	f7fd fcc5 	bl	8007114 <mbedtls_mpi_copy>
 800978a:	6378      	str	r0, [r7, #52]	; 0x34
 800978c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978e:	2b00      	cmp	r3, #0
 8009790:	d17f      	bne.n	8009892 <mbedtls_mpi_mul_mpi+0x13c>
 8009792:	f107 0320 	add.w	r3, r7, #32
 8009796:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	429a      	cmp	r2, r3
 800979e:	d10c      	bne.n	80097ba <mbedtls_mpi_mul_mpi+0x64>
 80097a0:	f107 0314 	add.w	r3, r7, #20
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fd fcb4 	bl	8007114 <mbedtls_mpi_copy>
 80097ac:	6378      	str	r0, [r7, #52]	; 0x34
 80097ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d170      	bne.n	8009896 <mbedtls_mpi_mul_mpi+0x140>
 80097b4:	f107 0314 	add.w	r3, r7, #20
 80097b8:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	633b      	str	r3, [r7, #48]	; 0x30
 80097c0:	e00d      	b.n	80097de <mbedtls_mpi_mul_mpi+0x88>
        if( A->p[i - 1] != 0 )
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097cc:	3b01      	subs	r3, #1
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d106      	bne.n	80097e6 <mbedtls_mpi_mul_mpi+0x90>
    for( i = A->n; i > 0; i-- )
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	3b01      	subs	r3, #1
 80097dc:	633b      	str	r3, [r7, #48]	; 0x30
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1ee      	bne.n	80097c2 <mbedtls_mpi_mul_mpi+0x6c>
 80097e4:	e000      	b.n	80097e8 <mbedtls_mpi_mul_mpi+0x92>
            break;
 80097e6:	bf00      	nop

    for( j = B->n; j > 0; j-- )
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097ee:	e00d      	b.n	800980c <mbedtls_mpi_mul_mpi+0xb6>
        if( B->p[j - 1] != 0 )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097fa:	3b01      	subs	r3, #1
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <mbedtls_mpi_mul_mpi+0xbe>
    for( j = B->n; j > 0; j-- )
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	3b01      	subs	r3, #1
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1ee      	bne.n	80097f0 <mbedtls_mpi_mul_mpi+0x9a>
 8009812:	e000      	b.n	8009816 <mbedtls_mpi_mul_mpi+0xc0>
            break;
 8009814:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8009816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981a:	4413      	add	r3, r2
 800981c:	4619      	mov	r1, r3
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7fd fc35 	bl	800708e <mbedtls_mpi_grow>
 8009824:	6378      	str	r0, [r7, #52]	; 0x34
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	2b00      	cmp	r3, #0
 800982a:	d136      	bne.n	800989a <mbedtls_mpi_mul_mpi+0x144>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800982c:	2100      	movs	r1, #0
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7fd fcc1 	bl	80071b6 <mbedtls_mpi_lset>
 8009834:	6378      	str	r0, [r7, #52]	; 0x34
 8009836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009838:	2b00      	cmp	r3, #0
 800983a:	d130      	bne.n	800989e <mbedtls_mpi_mul_mpi+0x148>

    for( i++; j > 0; j-- )
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	3301      	adds	r3, #1
 8009840:	633b      	str	r3, [r7, #48]	; 0x30
 8009842:	e01a      	b.n	800987a <mbedtls_mpi_mul_mpi+0x124>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 8009844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009846:	1e58      	subs	r0, r3, #1
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	6899      	ldr	r1, [r3, #8]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009856:	3b01      	subs	r3, #1
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	18d4      	adds	r4, r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689a      	ldr	r2, [r3, #8]
 8009860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009862:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009866:	3b01      	subs	r3, #1
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4622      	mov	r2, r4
 8009870:	f7fe faf3 	bl	8007e5a <mpi_mul_hlp>
    for( i++; j > 0; j-- )
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	3b01      	subs	r3, #1
 8009878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e1      	bne.n	8009844 <mbedtls_mpi_mul_mpi+0xee>

    X->s = A->s * B->s;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	6812      	ldr	r2, [r2, #0]
 8009888:	fb03 f202 	mul.w	r2, r3, r2
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	601a      	str	r2, [r3, #0]
 8009890:	e006      	b.n	80098a0 <mbedtls_mpi_mul_mpi+0x14a>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8009892:	bf00      	nop
 8009894:	e004      	b.n	80098a0 <mbedtls_mpi_mul_mpi+0x14a>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8009896:	bf00      	nop
 8009898:	e002      	b.n	80098a0 <mbedtls_mpi_mul_mpi+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800989a:	bf00      	nop
 800989c:	e000      	b.n	80098a0 <mbedtls_mpi_mul_mpi+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800989e:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 80098a0:	f107 0314 	add.w	r3, r7, #20
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fd fbcc 	bl	8007042 <mbedtls_mpi_free>
 80098aa:	f107 0320 	add.w	r3, r7, #32
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fd fbc7 	bl	8007042 <mbedtls_mpi_free>

    return( ret );
 80098b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	373c      	adds	r7, #60	; 0x3c
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd90      	pop	{r4, r7, pc}

080098be <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b088      	sub	sp, #32
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 80098ca:	2301      	movs	r3, #1
 80098cc:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 80098ce:	2301      	movs	r3, #1
 80098d0:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 80098d2:	f107 0310 	add.w	r3, r7, #16
 80098d6:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80098dc:	f107 0314 	add.w	r3, r7, #20
 80098e0:	461a      	mov	r2, r3
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f7ff ff36 	bl	8009756 <mbedtls_mpi_mul_mpi>
 80098ea:	4603      	mov	r3, r0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3720      	adds	r7, #32
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 80098f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098f8:	b08a      	sub	sp, #40	; 0x28
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6178      	str	r0, [r7, #20]
 80098fe:	6139      	str	r1, [r7, #16]
 8009900:	60fa      	str	r2, [r7, #12]
 8009902:	60bb      	str	r3, [r7, #8]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <mbedtls_int_div_int+0x1e>
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	429a      	cmp	r2, r3
 8009910:	d309      	bcc.n	8009926 <mbedtls_int_div_int+0x32>
    {
        if (r != NULL) *r = ~0;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d003      	beq.n	8009920 <mbedtls_int_div_int+0x2c>
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f04f 32ff 	mov.w	r2, #4294967295
 800991e:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 8009920:	f04f 33ff 	mov.w	r3, #4294967295
 8009924:	e03b      	b.n	800999e <mbedtls_int_div_int+0xaa>
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2200      	movs	r2, #0
 800992a:	469a      	mov	sl, r3
 800992c:	4693      	mov	fp, r2
 800992e:	f04f 0200 	mov.w	r2, #0
 8009932:	f04f 0300 	mov.w	r3, #0
 8009936:	4653      	mov	r3, sl
 8009938:	2200      	movs	r2, #0
 800993a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    dividend |= (mbedtls_t_udbl) u0;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2200      	movs	r2, #0
 8009942:	461c      	mov	r4, r3
 8009944:	4615      	mov	r5, r2
 8009946:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800994a:	ea42 0804 	orr.w	r8, r2, r4
 800994e:	ea43 0905 	orr.w	r9, r3, r5
 8009952:	e9c7 8906 	strd	r8, r9, [r7, #24]
    quotient = dividend / d;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	607a      	str	r2, [r7, #4]
 800995e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009962:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009966:	f7f6 fc9b 	bl	80002a0 <__aeabi_uldivmod>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
 8009972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d305      	bcc.n	8009986 <mbedtls_int_div_int+0x92>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
 800997a:	f04f 32ff 	mov.w	r2, #4294967295
 800997e:	f04f 0300 	mov.w	r3, #0
 8009982:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if( r != NULL )
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d007      	beq.n	800999c <mbedtls_int_div_int+0xa8>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	68f9      	ldr	r1, [r7, #12]
 8009992:	fb01 f303 	mul.w	r3, r1, r3
 8009996:	1ad2      	subs	r2, r2, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	601a      	str	r2, [r3, #0]

    return (mbedtls_mpi_uint) quotient;
 800999c:	6a3b      	ldr	r3, [r7, #32]

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3728      	adds	r7, #40	; 0x28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080099a8 <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80099a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099aa:	b099      	sub	sp, #100	; 0x64
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80099b6:	2100      	movs	r1, #0
 80099b8:	6838      	ldr	r0, [r7, #0]
 80099ba:	f7fd ffdb 	bl	8007974 <mbedtls_mpi_cmp_int>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d102      	bne.n	80099ca <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 80099c4:	f06f 030b 	mvn.w	r3, #11
 80099c8:	e2bd      	b.n	8009f46 <mbedtls_mpi_div_mpi+0x59e>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 80099ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fd fb20 	bl	8007014 <mbedtls_mpi_init>
 80099d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fd fb1b 	bl	8007014 <mbedtls_mpi_init>
 80099de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fd fb16 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 80099e8:	f107 031c 	add.w	r3, r7, #28
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fd fb11 	bl	8007014 <mbedtls_mpi_init>
 80099f2:	f107 0310 	add.w	r3, r7, #16
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fd fb0c 	bl	8007014 <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fd fe9b 	bl	800773a <mbedtls_mpi_cmp_abs>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	da19      	bge.n	8009a3e <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d008      	beq.n	8009a22 <mbedtls_mpi_div_mpi+0x7a>
 8009a10:	2100      	movs	r1, #0
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7fd fbcf 	bl	80071b6 <mbedtls_mpi_lset>
 8009a18:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f040 8247 	bne.w	8009eb0 <mbedtls_mpi_div_mpi+0x508>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d008      	beq.n	8009a3a <mbedtls_mpi_div_mpi+0x92>
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	68b8      	ldr	r0, [r7, #8]
 8009a2c:	f7fd fb72 	bl	8007114 <mbedtls_mpi_copy>
 8009a30:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f040 823d 	bne.w	8009eb4 <mbedtls_mpi_div_mpi+0x50c>
        return( 0 );
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e283      	b.n	8009f46 <mbedtls_mpi_div_mpi+0x59e>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8009a3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a42:	6879      	ldr	r1, [r7, #4]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fd fb65 	bl	8007114 <mbedtls_mpi_copy>
 8009a4a:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f040 8232 	bne.w	8009eb8 <mbedtls_mpi_div_mpi+0x510>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8009a54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fd fb5a 	bl	8007114 <mbedtls_mpi_copy>
 8009a60:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f040 8229 	bne.w	8009ebc <mbedtls_mpi_div_mpi+0x514>
    X.s = Y.s = 1;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a70:	643b      	str	r3, [r7, #64]	; 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	1c9a      	adds	r2, r3, #2
 8009a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fd fb05 	bl	800708e <mbedtls_mpi_grow>
 8009a84:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f040 8219 	bne.w	8009ec0 <mbedtls_mpi_div_mpi+0x518>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8009a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a92:	2100      	movs	r1, #0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fd fb8e 	bl	80071b6 <mbedtls_mpi_lset>
 8009a9a:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f040 8210 	bne.w	8009ec4 <mbedtls_mpi_div_mpi+0x51c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8009aa4:	f107 031c 	add.w	r3, r7, #28
 8009aa8:	2102      	movs	r1, #2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fd faef 	bl	800708e <mbedtls_mpi_grow>
 8009ab0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f040 8207 	bne.w	8009ec8 <mbedtls_mpi_div_mpi+0x520>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8009aba:	f107 0310 	add.w	r3, r7, #16
 8009abe:	2103      	movs	r1, #3
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fd fae4 	bl	800708e <mbedtls_mpi_grow>
 8009ac6:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f040 81fe 	bne.w	8009ecc <mbedtls_mpi_div_mpi+0x524>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 8009ad0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fd fc11 	bl	80072fc <mbedtls_mpi_bitlen>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f003 031f 	and.w	r3, r3, #31
 8009ae0:	657b      	str	r3, [r7, #84]	; 0x54
    if( k < biL - 1 )
 8009ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ae4:	2b1e      	cmp	r3, #30
 8009ae6:	d819      	bhi.n	8009b1c <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 8009ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aea:	f1c3 031f 	rsb	r3, r3, #31
 8009aee:	657b      	str	r3, [r7, #84]	; 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8009af0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fd fcdf 	bl	80074ba <mbedtls_mpi_shift_l>
 8009afc:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 81e5 	bne.w	8009ed0 <mbedtls_mpi_div_mpi+0x528>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 8009b06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fd fcd4 	bl	80074ba <mbedtls_mpi_shift_l>
 8009b12:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <mbedtls_mpi_div_mpi+0x178>
 8009b1a:	e1fa      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    }
    else k = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	657b      	str	r3, [r7, #84]	; 0x54

    n = X.n - 1;
 8009b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b22:	3b01      	subs	r3, #1
 8009b24:	653b      	str	r3, [r7, #80]	; 0x50
    t = Y.n - 1;
 8009b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8009b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	015a      	lsls	r2, r3, #5
 8009b34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fd fcbd 	bl	80074ba <mbedtls_mpi_shift_l>
 8009b40:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f040 81c5 	bne.w	8009ed4 <mbedtls_mpi_div_mpi+0x52c>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8009b4a:	e016      	b.n	8009b7a <mbedtls_mpi_div_mpi+0x1d2>
    {
        Z.p[n - t]++;
 8009b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b52:	1acb      	subs	r3, r1, r3
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	3201      	adds	r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8009b5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009b62:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8009b66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe f8e3 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 8009b70:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f040 81af 	bne.w	8009ed8 <mbedtls_mpi_div_mpi+0x530>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8009b7a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009b7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b82:	4611      	mov	r1, r2
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fd fe5a 	bl	800783e <mbedtls_mpi_cmp_mpi>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dadd      	bge.n	8009b4c <mbedtls_mpi_div_mpi+0x1a4>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8009b90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fd fd30 	bl	8007604 <mbedtls_mpi_shift_r>
 8009ba4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f040 8197 	bne.w	8009edc <mbedtls_mpi_div_mpi+0x534>

    for( i = n; i > t ; i-- )
 8009bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bb2:	e13e      	b.n	8009e32 <mbedtls_mpi_div_mpi+0x48a>
    {
        if( X.p[i] >= Y.p[t] )
 8009bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d30c      	bcc.n	8009be6 <mbedtls_mpi_div_mpi+0x23e>
            Z.p[i - t - 1] = ~0;
 8009bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd2:	1acb      	subs	r3, r1, r3
 8009bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	f04f 32ff 	mov.w	r2, #4294967295
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	e021      	b.n	8009c2a <mbedtls_mpi_div_mpi+0x282>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8009be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 8009c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8009c08:	681e      	ldr	r6, [r3, #0]
 8009c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c10:	1acb      	subs	r3, r1, r3
 8009c12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c16:	3b01      	subs	r3, #1
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	18d4      	adds	r4, r2, r3
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4632      	mov	r2, r6
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7ff fe67 	bl	80098f4 <mbedtls_int_div_int>
 8009c26:	4603      	mov	r3, r0
 8009c28:	6023      	str	r3, [r4, #0]
        }

        Z.p[i - t - 1]++;
 8009c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c30:	1acb      	subs	r3, r1, r3
 8009c32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c36:	3b01      	subs	r3, #1
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	3201      	adds	r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 8009c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c48:	1acb      	subs	r3, r1, r3
 8009c4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	3a01      	subs	r2, #1
 8009c58:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8009c5a:	f107 031c 	add.w	r3, r7, #28
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fd faa8 	bl	80071b6 <mbedtls_mpi_lset>
 8009c66:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f040 8138 	bne.w	8009ee0 <mbedtls_mpi_div_mpi+0x538>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8009c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d008      	beq.n	8009c88 <mbedtls_mpi_div_mpi+0x2e0>
 8009c76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	e000      	b.n	8009c8a <mbedtls_mpi_div_mpi+0x2e2>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c8c:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 8009c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	441a      	add	r2, r3
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	3304      	adds	r3, #4
 8009c9a:	6812      	ldr	r2, [r2, #0]
 8009c9c:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8009c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ca0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca4:	1acb      	subs	r3, r1, r3
 8009ca6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009caa:	3b01      	subs	r3, #1
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	f107 011c 	add.w	r1, r7, #28
 8009cb6:	f107 031c 	add.w	r3, r7, #28
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff fdff 	bl	80098be <mbedtls_mpi_mul_int>
 8009cc0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f040 810d 	bne.w	8009ee4 <mbedtls_mpi_div_mpi+0x53c>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8009cca:	f107 0310 	add.w	r3, r7, #16
 8009cce:	2100      	movs	r1, #0
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fd fa70 	bl	80071b6 <mbedtls_mpi_lset>
 8009cd6:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f040 8104 	bne.w	8009ee8 <mbedtls_mpi_div_mpi+0x540>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8009ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d908      	bls.n	8009cf8 <mbedtls_mpi_div_mpi+0x350>
 8009ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cee:	3b02      	subs	r3, #2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	e000      	b.n	8009cfa <mbedtls_mpi_div_mpi+0x352>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	69ba      	ldr	r2, [r7, #24]
 8009cfc:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8009cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d008      	beq.n	8009d16 <mbedtls_mpi_div_mpi+0x36e>
 8009d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	e000      	b.n	8009d18 <mbedtls_mpi_div_mpi+0x370>
 8009d16:	2300      	movs	r3, #0
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	3204      	adds	r2, #4
 8009d1c:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 8009d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	441a      	add	r2, r3
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	6812      	ldr	r2, [r2, #0]
 8009d2c:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 8009d2e:	f107 0210 	add.w	r2, r7, #16
 8009d32:	f107 031c 	add.w	r3, r7, #28
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fd fd80 	bl	800783e <mbedtls_mpi_cmp_mpi>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f73f af7e 	bgt.w	8009c42 <mbedtls_mpi_div_mpi+0x29a>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8009d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d4c:	1acb      	subs	r3, r1, r3
 8009d4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d52:	3b01      	subs	r3, #1
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009d5e:	f107 031c 	add.w	r3, r7, #28
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7ff fdab 	bl	80098be <mbedtls_mpi_mul_int>
 8009d68:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f040 80bd 	bne.w	8009eec <mbedtls_mpi_div_mpi+0x544>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8009d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	f107 031c 	add.w	r3, r7, #28
 8009d80:	4611      	mov	r1, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fd fb99 	bl	80074ba <mbedtls_mpi_shift_l>
 8009d88:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f040 80af 	bne.w	8009ef0 <mbedtls_mpi_div_mpi+0x548>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8009d92:	f107 021c 	add.w	r2, r7, #28
 8009d96:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8009d9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fd ffc9 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 8009da4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f040 80a3 	bne.w	8009ef4 <mbedtls_mpi_div_mpi+0x54c>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 8009dae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009db2:	2100      	movs	r1, #0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fd fddd 	bl	8007974 <mbedtls_mpi_cmp_int>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	da35      	bge.n	8009e2c <mbedtls_mpi_div_mpi+0x484>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8009dc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009dc4:	f107 031c 	add.w	r3, r7, #28
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fd f9a2 	bl	8007114 <mbedtls_mpi_copy>
 8009dd0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 808f 	bne.w	8009ef8 <mbedtls_mpi_div_mpi+0x550>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8009dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	3b01      	subs	r3, #1
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	f107 031c 	add.w	r3, r7, #28
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fd fb65 	bl	80074ba <mbedtls_mpi_shift_l>
 8009df0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f040 8081 	bne.w	8009efc <mbedtls_mpi_div_mpi+0x554>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 8009dfa:	f107 021c 	add.w	r2, r7, #28
 8009dfe:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8009e02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fd ff4b 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 8009e0c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d175      	bne.n	8009f00 <mbedtls_mpi_div_mpi+0x558>
            Z.p[i - t - 1]--;
 8009e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e1a:	1acb      	subs	r3, r1, r3
 8009e1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e20:	3b01      	subs	r3, #1
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	3a01      	subs	r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 8009e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e36:	429a      	cmp	r2, r3
 8009e38:	f63f aebc 	bhi.w	8009bb4 <mbedtls_mpi_div_mpi+0x20c>
        }
    }

    if( Q != NULL )
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d011      	beq.n	8009e66 <mbedtls_mpi_div_mpi+0x4be>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8009e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e46:	4619      	mov	r1, r3
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f7fd f963 	bl	8007114 <mbedtls_mpi_copy>
 8009e4e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d156      	bne.n	8009f04 <mbedtls_mpi_div_mpi+0x55c>
        Q->s = A->s * B->s;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	6812      	ldr	r2, [r2, #0]
 8009e5e:	fb03 f202 	mul.w	r2, r3, r2
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d04d      	beq.n	8009f08 <mbedtls_mpi_div_mpi+0x560>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 8009e6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fd fbc6 	bl	8007604 <mbedtls_mpi_shift_r>
 8009e78:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d145      	bne.n	8009f0c <mbedtls_mpi_div_mpi+0x564>
        X.s = A->s;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	643b      	str	r3, [r7, #64]	; 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8009e86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	68b8      	ldr	r0, [r7, #8]
 8009e8e:	f7fd f941 	bl	8007114 <mbedtls_mpi_copy>
 8009e92:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d13a      	bne.n	8009f10 <mbedtls_mpi_div_mpi+0x568>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	68b8      	ldr	r0, [r7, #8]
 8009e9e:	f7fd fd69 	bl	8007974 <mbedtls_mpi_cmp_int>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d12f      	bne.n	8009f08 <mbedtls_mpi_div_mpi+0x560>
            R->s = 1;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	e030      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8009eb0:	bf00      	nop
 8009eb2:	e02e      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8009eb4:	bf00      	nop
 8009eb6:	e02c      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8009eb8:	bf00      	nop
 8009eba:	e02a      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8009ebc:	bf00      	nop
 8009ebe:	e028      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8009ec0:	bf00      	nop
 8009ec2:	e026      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8009ec4:	bf00      	nop
 8009ec6:	e024      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8009ec8:	bf00      	nop
 8009eca:	e022      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8009ecc:	bf00      	nop
 8009ece:	e020      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8009ed0:	bf00      	nop
 8009ed2:	e01e      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8009ed4:	bf00      	nop
 8009ed6:	e01c      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8009ed8:	bf00      	nop
 8009eda:	e01a      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8009edc:	bf00      	nop
 8009ede:	e018      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8009ee0:	bf00      	nop
 8009ee2:	e016      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8009ee4:	bf00      	nop
 8009ee6:	e014      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8009ee8:	bf00      	nop
 8009eea:	e012      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8009eec:	bf00      	nop
 8009eee:	e010      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8009ef0:	bf00      	nop
 8009ef2:	e00e      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8009ef4:	bf00      	nop
 8009ef6:	e00c      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8009ef8:	bf00      	nop
 8009efa:	e00a      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8009efc:	bf00      	nop
 8009efe:	e008      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 8009f00:	bf00      	nop
 8009f02:	e006      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8009f04:	bf00      	nop
 8009f06:	e004      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
    }

cleanup:
 8009f08:	bf00      	nop
 8009f0a:	e002      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 8009f0c:	bf00      	nop
 8009f0e:	e000      	b.n	8009f12 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8009f10:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8009f12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fd f893 	bl	8007042 <mbedtls_mpi_free>
 8009f1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fd f88e 	bl	8007042 <mbedtls_mpi_free>
 8009f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fd f889 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8009f30:	f107 031c 	add.w	r3, r7, #28
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fd f884 	bl	8007042 <mbedtls_mpi_free>
 8009f3a:	f107 0310 	add.w	r3, r7, #16
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fd f87f 	bl	8007042 <mbedtls_mpi_free>

    return( ret );
 8009f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3764      	adds	r7, #100	; 0x64
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f4e <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b086      	sub	sp, #24
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	607a      	str	r2, [r7, #4]
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7fd fd09 	bl	8007974 <mbedtls_mpi_cmp_int>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	da02      	bge.n	8009f6e <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8009f68:	f06f 0309 	mvn.w	r3, #9
 8009f6c:	e032      	b.n	8009fd4 <mbedtls_mpi_mod_mpi+0x86>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	68f9      	ldr	r1, [r7, #12]
 8009f74:	2000      	movs	r0, #0
 8009f76:	f7ff fd17 	bl	80099a8 <mbedtls_mpi_div_mpi>
 8009f7a:	6178      	str	r0, [r7, #20]
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d122      	bne.n	8009fc8 <mbedtls_mpi_mod_mpi+0x7a>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8009f82:	e008      	b.n	8009f96 <mbedtls_mpi_mod_mpi+0x48>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	68f9      	ldr	r1, [r7, #12]
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f7fd fe8a 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 8009f8e:	6178      	str	r0, [r7, #20]
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d11a      	bne.n	8009fcc <mbedtls_mpi_mod_mpi+0x7e>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8009f96:	2100      	movs	r1, #0
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7fd fceb 	bl	8007974 <mbedtls_mpi_cmp_int>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	dbef      	blt.n	8009f84 <mbedtls_mpi_mod_mpi+0x36>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8009fa4:	e008      	b.n	8009fb8 <mbedtls_mpi_mod_mpi+0x6a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	68f9      	ldr	r1, [r7, #12]
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7fd fec3 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 8009fb0:	6178      	str	r0, [r7, #20]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10b      	bne.n	8009fd0 <mbedtls_mpi_mod_mpi+0x82>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7fd fc3f 	bl	800783e <mbedtls_mpi_cmp_mpi>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	daef      	bge.n	8009fa6 <mbedtls_mpi_mod_mpi+0x58>

cleanup:
 8009fc6:	e004      	b.n	8009fd2 <mbedtls_mpi_mod_mpi+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8009fc8:	bf00      	nop
 8009fca:	e002      	b.n	8009fd2 <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8009fcc:	bf00      	nop
 8009fce:	e000      	b.n	8009fd2 <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8009fd0:	bf00      	nop

    return( ret );
 8009fd2:	697b      	ldr	r3, [r7, #20]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint x, m0 = N->p[0];
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	60fb      	str	r3, [r7, #12]
    unsigned int i;

    x  = m0;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	617b      	str	r3, [r7, #20]
    x += ( ( m0 + 2 ) & 4 ) << 1;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3302      	adds	r3, #2
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	4413      	add	r3, r2
 800a000:	617b      	str	r3, [r7, #20]

    for( i = biL; i >= 8; i /= 2 )
 800a002:	2320      	movs	r3, #32
 800a004:	613b      	str	r3, [r7, #16]
 800a006:	e00c      	b.n	800a022 <mpi_montg_init+0x46>
        x *= ( 2 - ( m0 * x ) );
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	fb02 f303 	mul.w	r3, r2, r3
 800a010:	f1c3 0202 	rsb	r2, r3, #2
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	fb02 f303 	mul.w	r3, r2, r3
 800a01a:	617b      	str	r3, [r7, #20]
    for( i = biL; i >= 8; i /= 2 )
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	085b      	lsrs	r3, r3, #1
 800a020:	613b      	str	r3, [r7, #16]
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	2b07      	cmp	r3, #7
 800a026:	d8ef      	bhi.n	800a008 <mpi_montg_init+0x2c>

    *mm = ~x + 1;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	425a      	negs	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	601a      	str	r2, [r3, #0]
}
 800a030:	bf00      	nop
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	; 0x28
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	3301      	adds	r3, #1
 800a054:	429a      	cmp	r2, r3
 800a056:	d303      	bcc.n	800a060 <mpi_montmul+0x24>
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <mpi_montmul+0x2a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a060:	f06f 0303 	mvn.w	r3, #3
 800a064:	e06f      	b.n	800a146 <mpi_montmul+0x10a>

    memset( T->p, 0, T->n * ciL );
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	6898      	ldr	r0, [r3, #8]
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	461a      	mov	r2, r3
 800a072:	2100      	movs	r1, #0
 800a074:	f014 fad6 	bl	801e624 <memset>

    d = T->p;
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	623b      	str	r3, [r7, #32]
    n = N->n;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	61fb      	str	r3, [r7, #28]
    m = ( B->n < n ) ? B->n : n;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	69fa      	ldr	r2, [r7, #28]
 800a08a:	4293      	cmp	r3, r2
 800a08c:	bf28      	it	cs
 800a08e:	4613      	movcs	r3, r2
 800a090:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < n; i++ )
 800a092:	2300      	movs	r3, #0
 800a094:	627b      	str	r3, [r7, #36]	; 0x24
 800a096:	e030      	b.n	800a0fa <mpi_montmul+0xbe>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689a      	ldr	r2, [r3, #8]
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	617b      	str	r3, [r7, #20]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6979      	ldr	r1, [r7, #20]
 800a0b2:	fb01 f303 	mul.w	r3, r1, r3
 800a0b6:	441a      	add	r2, r3
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	fb02 f303 	mul.w	r3, r2, r3
 800a0be:	613b      	str	r3, [r7, #16]

        mpi_mul_hlp( m, B->p, d, u0 );
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	6899      	ldr	r1, [r3, #8]
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	6a3a      	ldr	r2, [r7, #32]
 800a0c8:	69b8      	ldr	r0, [r7, #24]
 800a0ca:	f7fd fec6 	bl	8007e5a <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6899      	ldr	r1, [r3, #8]
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	6a3a      	ldr	r2, [r7, #32]
 800a0d6:	69f8      	ldr	r0, [r7, #28]
 800a0d8:	f7fd febf 	bl	8007e5a <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	1d1a      	adds	r2, r3, #4
 800a0e0:	623a      	str	r2, [r7, #32]
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	6a3a      	ldr	r2, [r7, #32]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]
    for( i = 0; i < n; i++ )
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d3ca      	bcc.n	800a098 <mpi_montmul+0x5c>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6898      	ldr	r0, [r3, #8]
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	3301      	adds	r3, #1
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	461a      	mov	r2, r3
 800a10e:	6a39      	ldr	r1, [r7, #32]
 800a110:	f014 fa60 	bl	801e5d4 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7fd fb0f 	bl	800773a <mbedtls_mpi_cmp_abs>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	db08      	blt.n	800a134 <mpi_montmul+0xf8>
        mpi_sub_hlp( n, N->p, A->p );
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6899      	ldr	r1, [r3, #8]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	461a      	mov	r2, r3
 800a12c:	69f8      	ldr	r0, [r7, #28]
 800a12e:	f7fd fcf7 	bl	8007b20 <mpi_sub_hlp>
 800a132:	e007      	b.n	800a144 <mpi_montmul+0x108>
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6899      	ldr	r1, [r3, #8]
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	461a      	mov	r2, r3
 800a13e:	69f8      	ldr	r0, [r7, #28]
 800a140:	f7fd fcee 	bl	8007b20 <mpi_sub_hlp>

    return( 0 );
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3728      	adds	r7, #40	; 0x28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <mpi_montred>:

/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b08a      	sub	sp, #40	; 0x28
 800a152:	af02      	add	r7, sp, #8
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint z = 1;
 800a15c:	2301      	movs	r3, #1
 800a15e:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	613b      	str	r3, [r7, #16]
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	617b      	str	r3, [r7, #20]
    U.p = &z;
 800a168:	f107 031c 	add.w	r3, r7, #28
 800a16c:	61bb      	str	r3, [r7, #24]

    return( mpi_montmul( A, &U, N, mm, T ) );
 800a16e:	f107 0110 	add.w	r1, r7, #16
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f7ff ff5e 	bl	800a03c <mpi_montmul>
 800a180:	4603      	mov	r3, r0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3720      	adds	r7, #32
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 800a18a:	b590      	push	{r4, r7, lr}
 800a18c:	f2ad 6d74 	subw	sp, sp, #1652	; 0x674
 800a190:	af02      	add	r7, sp, #8
 800a192:	f507 64cd 	add.w	r4, r7, #1640	; 0x668
 800a196:	f2a4 645c 	subw	r4, r4, #1628	; 0x65c
 800a19a:	6020      	str	r0, [r4, #0]
 800a19c:	f507 60cd 	add.w	r0, r7, #1640	; 0x668
 800a1a0:	f5a0 60cc 	sub.w	r0, r0, #1632	; 0x660
 800a1a4:	6001      	str	r1, [r0, #0]
 800a1a6:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 800a1aa:	f2a1 6164 	subw	r1, r1, #1636	; 0x664
 800a1ae:	600a      	str	r2, [r1, #0]
 800a1b0:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 800a1b4:	f5a2 62cd 	sub.w	r2, r2, #1640	; 0x668
 800a1b8:	6013      	str	r3, [r2, #0]
    int ret;
    size_t wbits, wsize, one = 1;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 800a1c0:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a1c4:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	f7fd fbd2 	bl	8007974 <mbedtls_mpi_cmp_int>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dd0a      	ble.n	800a1ec <mbedtls_mpi_exp_mod+0x62>
 800a1d6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a1da:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d103      	bne.n	800a1f4 <mbedtls_mpi_exp_mod+0x6a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a1ec:	f06f 0303 	mvn.w	r3, #3
 800a1f0:	f000 bc71 	b.w	800aad6 <mbedtls_mpi_exp_mod+0x94c>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 800a1f4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a1f8:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	6818      	ldr	r0, [r3, #0]
 800a200:	f7fd fbb8 	bl	8007974 <mbedtls_mpi_cmp_int>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	da03      	bge.n	800a212 <mbedtls_mpi_exp_mod+0x88>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a20a:	f06f 0303 	mvn.w	r3, #3
 800a20e:	f000 bc62 	b.w	800aad6 <mbedtls_mpi_exp_mod+0x94c>

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
 800a212:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a216:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a21a:	f207 6234 	addw	r2, r7, #1588	; 0x634
 800a21e:	6819      	ldr	r1, [r3, #0]
 800a220:	4610      	mov	r0, r2
 800a222:	f7ff fedb 	bl	8009fdc <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
 800a226:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fc fef2 	bl	8007014 <mbedtls_mpi_init>
 800a230:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a234:	4618      	mov	r0, r3
 800a236:	f7fc feed 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
 800a23a:	f107 0310 	add.w	r3, r7, #16
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fc fee8 	bl	8007014 <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
 800a244:	f107 031c 	add.w	r3, r7, #28
 800a248:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a24c:	2100      	movs	r1, #0
 800a24e:	4618      	mov	r0, r3
 800a250:	f014 f9e8 	bl	801e624 <memset>

    i = mbedtls_mpi_bitlen( E );
 800a254:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a258:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a25c:	6818      	ldr	r0, [r3, #0]
 800a25e:	f7fd f84d 	bl	80072fc <mbedtls_mpi_bitlen>
 800a262:	f8c7 0658 	str.w	r0, [r7, #1624]	; 0x658

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800a266:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a26a:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 800a26e:	d213      	bcs.n	800a298 <mbedtls_mpi_exp_mod+0x10e>
 800a270:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a274:	2bef      	cmp	r3, #239	; 0xef
 800a276:	d80d      	bhi.n	800a294 <mbedtls_mpi_exp_mod+0x10a>
 800a278:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a27c:	2b4f      	cmp	r3, #79	; 0x4f
 800a27e:	d807      	bhi.n	800a290 <mbedtls_mpi_exp_mod+0x106>
 800a280:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a284:	2b17      	cmp	r3, #23
 800a286:	d901      	bls.n	800a28c <mbedtls_mpi_exp_mod+0x102>
 800a288:	2303      	movs	r3, #3
 800a28a:	e006      	b.n	800a29a <mbedtls_mpi_exp_mod+0x110>
 800a28c:	2301      	movs	r3, #1
 800a28e:	e004      	b.n	800a29a <mbedtls_mpi_exp_mod+0x110>
 800a290:	2304      	movs	r3, #4
 800a292:	e002      	b.n	800a29a <mbedtls_mpi_exp_mod+0x110>
 800a294:	2305      	movs	r3, #5
 800a296:	e000      	b.n	800a29a <mbedtls_mpi_exp_mod+0x110>
 800a298:	2306      	movs	r3, #6
 800a29a:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
 800a29e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a2a2:	2b06      	cmp	r3, #6
 800a2a4:	d902      	bls.n	800a2ac <mbedtls_mpi_exp_mod+0x122>
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
 800a2a6:	2306      	movs	r3, #6
 800a2a8:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c

    j = N->n + 1;
 800a2ac:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a2b0:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800a2be:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a2c2:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800a2c6:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 800a2ca:	6818      	ldr	r0, [r3, #0]
 800a2cc:	f7fc fedf 	bl	800708e <mbedtls_mpi_grow>
 800a2d0:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a2d4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f040 838a 	bne.w	800a9f2 <mbedtls_mpi_exp_mod+0x868>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800a2de:	f107 031c 	add.w	r3, r7, #28
 800a2e2:	330c      	adds	r3, #12
 800a2e4:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fc fed0 	bl	800708e <mbedtls_mpi_grow>
 800a2ee:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a2f2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f040 837d 	bne.w	800a9f6 <mbedtls_mpi_exp_mod+0x86c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800a2fc:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 800a300:	005a      	lsls	r2, r3, #1
 800a302:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a306:	4611      	mov	r1, r2
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fc fec0 	bl	800708e <mbedtls_mpi_grow>
 800a30e:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a312:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a316:	2b00      	cmp	r3, #0
 800a318:	f040 836f 	bne.w	800a9fa <mbedtls_mpi_exp_mod+0x870>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 800a31c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a320:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32c:	bf0c      	ite	eq
 800a32e:	2301      	moveq	r3, #1
 800a330:	2300      	movne	r3, #0
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
    if( neg )
 800a338:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01d      	beq.n	800a37c <mbedtls_mpi_exp_mod+0x1f2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 800a340:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a344:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800a348:	f107 0210 	add.w	r2, r7, #16
 800a34c:	6819      	ldr	r1, [r3, #0]
 800a34e:	4610      	mov	r0, r2
 800a350:	f7fc fee0 	bl	8007114 <mbedtls_mpi_copy>
 800a354:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a358:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f040 834e 	bne.w	800a9fe <mbedtls_mpi_exp_mod+0x874>
        Apos.s = 1;
 800a362:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a366:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 800a36a:	2201      	movs	r2, #1
 800a36c:	601a      	str	r2, [r3, #0]
        A = &Apos;
 800a36e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a372:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800a376:	f107 0210 	add.w	r2, r7, #16
 800a37a:	601a      	str	r2, [r3, #0]
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 800a37c:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <mbedtls_mpi_exp_mod+0x204>
 800a384:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d13f      	bne.n	800a40e <mbedtls_mpi_exp_mod+0x284>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 800a38e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800a392:	2101      	movs	r1, #1
 800a394:	4618      	mov	r0, r3
 800a396:	f7fc ff0e 	bl	80071b6 <mbedtls_mpi_lset>
 800a39a:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a39e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f040 832d 	bne.w	800aa02 <mbedtls_mpi_exp_mod+0x878>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 800a3a8:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a3ac:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	019a      	lsls	r2, r3, #6
 800a3b6:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fd f87c 	bl	80074ba <mbedtls_mpi_shift_l>
 800a3c2:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a3c6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f040 831b 	bne.w	800aa06 <mbedtls_mpi_exp_mod+0x87c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 800a3d0:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a3d4:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a3d8:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 800a3dc:	f507 60c5 	add.w	r0, r7, #1576	; 0x628
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	f7ff fdb4 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 800a3e6:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a3ea:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f040 830b 	bne.w	800aa0a <mbedtls_mpi_exp_mod+0x880>

        if( _RR != NULL )
 800a3f4:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d010      	beq.n	800a41e <mbedtls_mpi_exp_mod+0x294>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 800a3fc:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800a400:	220c      	movs	r2, #12
 800a402:	4619      	mov	r1, r3
 800a404:	f8d7 0678 	ldr.w	r0, [r7, #1656]	; 0x678
 800a408:	f014 f8e4 	bl	801e5d4 <memcpy>
        if( _RR != NULL )
 800a40c:	e007      	b.n	800a41e <mbedtls_mpi_exp_mod+0x294>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 800a40e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800a412:	220c      	movs	r2, #12
 800a414:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 800a418:	4618      	mov	r0, r3
 800a41a:	f014 f8db 	bl	801e5d4 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 800a41e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a422:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a426:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a42a:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800a42e:	6811      	ldr	r1, [r2, #0]
 800a430:	6818      	ldr	r0, [r3, #0]
 800a432:	f7fd fa04 	bl	800783e <mbedtls_mpi_cmp_mpi>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	db16      	blt.n	800a46a <mbedtls_mpi_exp_mod+0x2e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 800a43c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a440:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a444:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a448:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800a44c:	f107 011c 	add.w	r1, r7, #28
 800a450:	f101 000c 	add.w	r0, r1, #12
 800a454:	6812      	ldr	r2, [r2, #0]
 800a456:	6819      	ldr	r1, [r3, #0]
 800a458:	f7ff fd79 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 800a45c:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a460:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a464:	2b00      	cmp	r3, #0
 800a466:	d012      	beq.n	800a48e <mbedtls_mpi_exp_mod+0x304>
 800a468:	e2f0      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 800a46a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a46e:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800a472:	f107 021c 	add.w	r2, r7, #28
 800a476:	320c      	adds	r2, #12
 800a478:	6819      	ldr	r1, [r3, #0]
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7fc fe4a 	bl	8007114 <mbedtls_mpi_copy>
 800a480:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a484:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f040 82c0 	bne.w	800aa0e <mbedtls_mpi_exp_mod+0x884>

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800a48e:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a492:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a496:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a49a:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 800a49e:	f107 031c 	add.w	r3, r7, #28
 800a4a2:	f103 000c 	add.w	r0, r3, #12
 800a4a6:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	6812      	ldr	r2, [r2, #0]
 800a4b0:	f7ff fdc4 	bl	800a03c <mpi_montmul>
 800a4b4:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a4b8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f040 82a8 	bne.w	800aa12 <mbedtls_mpi_exp_mod+0x888>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 800a4c2:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 800a4c6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a4ca:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f7fc fe1f 	bl	8007114 <mbedtls_mpi_copy>
 800a4d6:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a4da:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f040 8299 	bne.w	800aa16 <mbedtls_mpi_exp_mod+0x88c>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800a4e4:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 800a4e8:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a4ec:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 800a4f0:	f5a1 61cd 	sub.w	r1, r1, #1640	; 0x668
 800a4f4:	f507 60cd 	add.w	r0, r7, #1640	; 0x668
 800a4f8:	f2a0 605c 	subw	r0, r0, #1628	; 0x65c
 800a4fc:	6809      	ldr	r1, [r1, #0]
 800a4fe:	6800      	ldr	r0, [r0, #0]
 800a500:	f7ff fe25 	bl	800a14e <mpi_montred>
 800a504:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a508:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f040 8284 	bne.w	800aa1a <mbedtls_mpi_exp_mod+0x890>

    if( wsize > 1 )
 800a512:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a516:	2b01      	cmp	r3, #1
 800a518:	f240 80df 	bls.w	800a6da <mbedtls_mpi_exp_mod+0x550>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 800a51c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a520:	3b01      	subs	r3, #1
 800a522:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a526:	fa02 f303 	lsl.w	r3, r2, r3
 800a52a:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800a52e:	f107 011c 	add.w	r1, r7, #28
 800a532:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 800a536:	4613      	mov	r3, r2
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	4413      	add	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	18ca      	adds	r2, r1, r3
 800a540:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a544:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	3301      	adds	r3, #1
 800a54e:	4619      	mov	r1, r3
 800a550:	4610      	mov	r0, r2
 800a552:	f7fc fd9c 	bl	800708e <mbedtls_mpi_grow>
 800a556:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a55a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f040 825d 	bne.w	800aa1e <mbedtls_mpi_exp_mod+0x894>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800a564:	f107 011c 	add.w	r1, r7, #28
 800a568:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 800a56c:	4613      	mov	r3, r2
 800a56e:	005b      	lsls	r3, r3, #1
 800a570:	4413      	add	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	18ca      	adds	r2, r1, r3
 800a576:	f107 031c 	add.w	r3, r7, #28
 800a57a:	330c      	adds	r3, #12
 800a57c:	4619      	mov	r1, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	f7fc fdc8 	bl	8007114 <mbedtls_mpi_copy>
 800a584:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a588:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 8248 	bne.w	800aa22 <mbedtls_mpi_exp_mod+0x898>

        for( i = 0; i < wsize - 1; i++ )
 800a592:	2300      	movs	r3, #0
 800a594:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a598:	e02a      	b.n	800a5f0 <mbedtls_mpi_exp_mod+0x466>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800a59a:	f107 011c 	add.w	r1, r7, #28
 800a59e:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	4413      	add	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	18c8      	adds	r0, r1, r3
 800a5ac:	f107 011c 	add.w	r1, r7, #28
 800a5b0:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4419      	add	r1, r3
 800a5be:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a5c2:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a5c6:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a5ca:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	4623      	mov	r3, r4
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	f7ff fd32 	bl	800a03c <mpi_montmul>
 800a5d8:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a5dc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f040 8220 	bne.w	800aa26 <mbedtls_mpi_exp_mod+0x89c>
        for( i = 0; i < wsize - 1; i++ )
 800a5e6:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a5f0:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d3cd      	bcc.n	800a59a <mbedtls_mpi_exp_mod+0x410>

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 800a5fe:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 800a602:	3301      	adds	r3, #1
 800a604:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a608:	e05d      	b.n	800a6c6 <mbedtls_mpi_exp_mod+0x53c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800a60a:	f107 011c 	add.w	r1, r7, #28
 800a60e:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a612:	4613      	mov	r3, r2
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4413      	add	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	18ca      	adds	r2, r1, r3
 800a61c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a620:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	3301      	adds	r3, #1
 800a62a:	4619      	mov	r1, r3
 800a62c:	4610      	mov	r0, r2
 800a62e:	f7fc fd2e 	bl	800708e <mbedtls_mpi_grow>
 800a632:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a636:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f040 81f5 	bne.w	800aa2a <mbedtls_mpi_exp_mod+0x8a0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800a640:	f107 011c 	add.w	r1, r7, #28
 800a644:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a648:	4613      	mov	r3, r2
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	4413      	add	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	18c8      	adds	r0, r1, r3
 800a652:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a656:	1e5a      	subs	r2, r3, #1
 800a658:	f107 011c 	add.w	r1, r7, #28
 800a65c:	4613      	mov	r3, r2
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	4413      	add	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	440b      	add	r3, r1
 800a666:	4619      	mov	r1, r3
 800a668:	f7fc fd54 	bl	8007114 <mbedtls_mpi_copy>
 800a66c:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a670:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a674:	2b00      	cmp	r3, #0
 800a676:	f040 81da 	bne.w	800aa2e <mbedtls_mpi_exp_mod+0x8a4>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800a67a:	f107 011c 	add.w	r1, r7, #28
 800a67e:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a682:	4613      	mov	r3, r2
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	18c8      	adds	r0, r1, r3
 800a68c:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a690:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a694:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a698:	f107 031c 	add.w	r3, r7, #28
 800a69c:	f103 010c 	add.w	r1, r3, #12
 800a6a0:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	4623      	mov	r3, r4
 800a6a8:	6812      	ldr	r2, [r2, #0]
 800a6aa:	f7ff fcc7 	bl	800a03c <mpi_montmul>
 800a6ae:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a6b2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f040 81bb 	bne.w	800aa32 <mbedtls_mpi_exp_mod+0x8a8>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800a6bc:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a6c6:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a6ca:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d2:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d397      	bcc.n	800a60a <mbedtls_mpi_exp_mod+0x480>
        }
    }

    nblimbs = E->n;
 800a6da:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a6de:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    bufsize = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
    nbits   = 0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
    wbits   = 0;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
    state   = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

    while( 1 )
    {
        if( bufsize == 0 )
 800a702:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10c      	bne.n	800a724 <mbedtls_mpi_exp_mod+0x59a>
        {
            if( nblimbs == 0 )
 800a70a:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 80ca 	beq.w	800a8a8 <mbedtls_mpi_exp_mod+0x71e>
                break;

            nblimbs--;
 800a714:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a718:	3b01      	subs	r3, #1
 800a71a:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 800a71e:	2320      	movs	r3, #32
 800a720:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
        }

        bufsize--;
 800a724:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a728:	3b01      	subs	r3, #1
 800a72a:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650

        ei = (E->p[nblimbs] >> bufsize) & 1;
 800a72e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a732:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689a      	ldr	r2, [r3, #8]
 800a73a:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a748:	fa22 f303 	lsr.w	r3, r2, r3
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 800a754:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d104      	bne.n	800a766 <mbedtls_mpi_exp_mod+0x5dc>
 800a75c:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 809d 	beq.w	800a8a0 <mbedtls_mpi_exp_mod+0x716>
            continue;

        if( ei == 0 && state == 1 )
 800a766:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d121      	bne.n	800a7b2 <mbedtls_mpi_exp_mod+0x628>
 800a76e:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800a772:	2b01      	cmp	r3, #1
 800a774:	d11d      	bne.n	800a7b2 <mbedtls_mpi_exp_mod+0x628>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a776:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a77a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a77e:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a782:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a786:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 800a78a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a78e:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a792:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	4623      	mov	r3, r4
 800a79a:	6812      	ldr	r2, [r2, #0]
 800a79c:	6809      	ldr	r1, [r1, #0]
 800a79e:	6800      	ldr	r0, [r0, #0]
 800a7a0:	f7ff fc4c 	bl	800a03c <mpi_montmul>
 800a7a4:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a7a8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d079      	beq.n	800a8a4 <mbedtls_mpi_exp_mod+0x71a>
 800a7b0:	e14c      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
        }

        /*
         * add ei to current window
         */
        state = 2;
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

        nbits++;
 800a7b8:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800a7bc:	3301      	adds	r3, #1
 800a7be:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
        wbits |= ( ei << ( wsize - nbits ) );
 800a7c2:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800a7c6:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 800a7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d4:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660

        if( nbits == wsize )
 800a7de:	f8d7 264c 	ldr.w	r2, [r7, #1612]	; 0x64c
 800a7e2:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d18b      	bne.n	800a702 <mbedtls_mpi_exp_mod+0x578>
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a7f0:	e022      	b.n	800a838 <mbedtls_mpi_exp_mod+0x6ae>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a7f2:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a7f6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a7fa:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a7fe:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a802:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 800a806:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a80a:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a80e:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	4623      	mov	r3, r4
 800a816:	6812      	ldr	r2, [r2, #0]
 800a818:	6809      	ldr	r1, [r1, #0]
 800a81a:	6800      	ldr	r0, [r0, #0]
 800a81c:	f7ff fc0e 	bl	800a03c <mpi_montmul>
 800a820:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a824:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f040 8104 	bne.w	800aa36 <mbedtls_mpi_exp_mod+0x8ac>
            for( i = 0; i < wsize; i++ )
 800a82e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a832:	3301      	adds	r3, #1
 800a834:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a838:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a83c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a840:	429a      	cmp	r2, r3
 800a842:	d3d6      	bcc.n	800a7f2 <mbedtls_mpi_exp_mod+0x668>

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800a844:	f107 011c 	add.w	r1, r7, #28
 800a848:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800a84c:	4613      	mov	r3, r2
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	4413      	add	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4419      	add	r1, r3
 800a856:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a85a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a85e:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a862:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a866:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a86a:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	4623      	mov	r3, r4
 800a872:	6812      	ldr	r2, [r2, #0]
 800a874:	6800      	ldr	r0, [r0, #0]
 800a876:	f7ff fbe1 	bl	800a03c <mpi_montmul>
 800a87a:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a87e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a882:	2b00      	cmp	r3, #0
 800a884:	f040 80d9 	bne.w	800aa3a <mbedtls_mpi_exp_mod+0x8b0>

            state--;
 800a888:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800a88c:	3b01      	subs	r3, #1
 800a88e:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
            nbits = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
            wbits = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 800a89e:	e730      	b.n	800a702 <mbedtls_mpi_exp_mod+0x578>
            continue;
 800a8a0:	bf00      	nop
 800a8a2:	e72e      	b.n	800a702 <mbedtls_mpi_exp_mod+0x578>
            continue;
 800a8a4:	bf00      	nop
        if( bufsize == 0 )
 800a8a6:	e72c      	b.n	800a702 <mbedtls_mpi_exp_mod+0x578>
                break;
 800a8a8:	bf00      	nop
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a8b0:	e04d      	b.n	800a94e <mbedtls_mpi_exp_mod+0x7c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a8b2:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a8b6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a8ba:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a8be:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a8c2:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 800a8c6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a8ca:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a8ce:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	6812      	ldr	r2, [r2, #0]
 800a8d8:	6809      	ldr	r1, [r1, #0]
 800a8da:	6800      	ldr	r0, [r0, #0]
 800a8dc:	f7ff fbae 	bl	800a03c <mpi_montmul>
 800a8e0:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a8e4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f040 80a8 	bne.w	800aa3e <mbedtls_mpi_exp_mod+0x8b4>

        wbits <<= 1;
 800a8ee:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660

        if( ( wbits & ( one << wsize ) ) != 0 )
 800a8f8:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a8fc:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a900:	409a      	lsls	r2, r3
 800a902:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800a906:	4013      	ands	r3, r2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d01b      	beq.n	800a944 <mbedtls_mpi_exp_mod+0x7ba>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800a90c:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a910:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a914:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a918:	f107 031c 	add.w	r3, r7, #28
 800a91c:	f103 010c 	add.w	r1, r3, #12
 800a920:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a924:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a928:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	4623      	mov	r3, r4
 800a930:	6812      	ldr	r2, [r2, #0]
 800a932:	6800      	ldr	r0, [r0, #0]
 800a934:	f7ff fb82 	bl	800a03c <mpi_montmul>
 800a938:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a93c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a940:	2b00      	cmp	r3, #0
 800a942:	d17e      	bne.n	800aa42 <mbedtls_mpi_exp_mod+0x8b8>
    for( i = 0; i < nbits; i++ )
 800a944:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a948:	3301      	adds	r3, #1
 800a94a:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a94e:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a952:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800a956:	429a      	cmp	r2, r3
 800a958:	d3ab      	bcc.n	800a8b2 <mbedtls_mpi_exp_mod+0x728>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800a95a:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 800a95e:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a962:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 800a966:	f5a1 61cd 	sub.w	r1, r1, #1640	; 0x668
 800a96a:	f507 60cd 	add.w	r0, r7, #1640	; 0x668
 800a96e:	f2a0 605c 	subw	r0, r0, #1628	; 0x65c
 800a972:	6809      	ldr	r1, [r1, #0]
 800a974:	6800      	ldr	r0, [r0, #0]
 800a976:	f7ff fbea 	bl	800a14e <mpi_montred>
 800a97a:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a97e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a982:	2b00      	cmp	r3, #0
 800a984:	d15f      	bne.n	800aa46 <mbedtls_mpi_exp_mod+0x8bc>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 800a986:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d05d      	beq.n	800aa4a <mbedtls_mpi_exp_mod+0x8c0>
 800a98e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a992:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d055      	beq.n	800aa4a <mbedtls_mpi_exp_mod+0x8c0>
 800a99e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a9a2:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d04a      	beq.n	800aa4a <mbedtls_mpi_exp_mod+0x8c0>
    {
        X->s = -1;
 800a9b4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a9b8:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c2:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 800a9c4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a9c8:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 800a9cc:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a9d0:	f5a3 61cd 	sub.w	r1, r3, #1640	; 0x668
 800a9d4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a9d8:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800a9dc:	6812      	ldr	r2, [r2, #0]
 800a9de:	6809      	ldr	r1, [r1, #0]
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	f7fd f95e 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 800a9e6:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a9ea:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a9ee:	2b00      	cmp	r3, #0
    }

cleanup:
 800a9f0:	e02b      	b.n	800aa4a <mbedtls_mpi_exp_mod+0x8c0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800a9f2:	bf00      	nop
 800a9f4:	e02a      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800a9f6:	bf00      	nop
 800a9f8:	e028      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800a9fa:	bf00      	nop
 800a9fc:	e026      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 800a9fe:	bf00      	nop
 800aa00:	e024      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 800aa02:	bf00      	nop
 800aa04:	e022      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 800aa06:	bf00      	nop
 800aa08:	e020      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 800aa0a:	bf00      	nop
 800aa0c:	e01e      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 800aa0e:	bf00      	nop
 800aa10:	e01c      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800aa12:	bf00      	nop
 800aa14:	e01a      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 800aa16:	bf00      	nop
 800aa18:	e018      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800aa1a:	bf00      	nop
 800aa1c:	e016      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800aa1e:	bf00      	nop
 800aa20:	e014      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800aa22:	bf00      	nop
 800aa24:	e012      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800aa26:	bf00      	nop
 800aa28:	e010      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800aa2a:	bf00      	nop
 800aa2c:	e00e      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800aa2e:	bf00      	nop
 800aa30:	e00c      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800aa32:	bf00      	nop
 800aa34:	e00a      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800aa36:	bf00      	nop
 800aa38:	e008      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800aa3a:	bf00      	nop
 800aa3c:	e006      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800aa3e:	bf00      	nop
 800aa40:	e004      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800aa42:	bf00      	nop
 800aa44:	e002      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800aa46:	bf00      	nop
 800aa48:	e000      	b.n	800aa4c <mbedtls_mpi_exp_mod+0x8c2>
cleanup:
 800aa4a:	bf00      	nop

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800aa4c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800aa50:	3b01      	subs	r3, #1
 800aa52:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800aa56:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5a:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800aa5e:	e010      	b.n	800aa82 <mbedtls_mpi_exp_mod+0x8f8>
        mbedtls_mpi_free( &W[i] );
 800aa60:	f107 011c 	add.w	r1, r7, #28
 800aa64:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800aa68:	4613      	mov	r3, r2
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	4413      	add	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	440b      	add	r3, r1
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fc fae5 	bl	8007042 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800aa78:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800aa82:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800aa86:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800aa8a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8e:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d3e4      	bcc.n	800aa60 <mbedtls_mpi_exp_mod+0x8d6>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 800aa96:	f107 031c 	add.w	r3, r7, #28
 800aa9a:	330c      	adds	r3, #12
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fc fad0 	bl	8007042 <mbedtls_mpi_free>
 800aaa2:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fc facb 	bl	8007042 <mbedtls_mpi_free>
 800aaac:	f107 0310 	add.w	r3, r7, #16
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fc fac6 	bl	8007042 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 800aab6:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d004      	beq.n	800aac8 <mbedtls_mpi_exp_mod+0x93e>
 800aabe:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d104      	bne.n	800aad2 <mbedtls_mpi_exp_mod+0x948>
        mbedtls_mpi_free( &RR );
 800aac8:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fc fab8 	bl	8007042 <mbedtls_mpi_free>

    return( ret );
 800aad2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	f207 676c 	addw	r7, r7, #1644	; 0x66c
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd90      	pop	{r4, r7, pc}

0800aae0 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b090      	sub	sp, #64	; 0x40
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
    int ret;
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800aaec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fc fa8f 	bl	8007014 <mbedtls_mpi_init>
 800aaf6:	f107 031c 	add.w	r3, r7, #28
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fc fa8a 	bl	8007014 <mbedtls_mpi_init>
 800ab00:	f107 0310 	add.w	r3, r7, #16
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fc fa85 	bl	8007014 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800ab0a:	f107 031c 	add.w	r3, r7, #28
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fc faff 	bl	8007114 <mbedtls_mpi_copy>
 800ab16:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ab18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f040 80af 	bne.w	800ac7e <mbedtls_mpi_gcd+0x19e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800ab20:	f107 0310 	add.w	r3, r7, #16
 800ab24:	6879      	ldr	r1, [r7, #4]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fc faf4 	bl	8007114 <mbedtls_mpi_copy>
 800ab2c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f040 80a6 	bne.w	800ac82 <mbedtls_mpi_gcd+0x1a2>

    lz = mbedtls_mpi_lsb( &TA );
 800ab36:	f107 031c 	add.w	r3, r7, #28
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fc fb8a 	bl	8007254 <mbedtls_mpi_lsb>
 800ab40:	63b8      	str	r0, [r7, #56]	; 0x38
    lzt = mbedtls_mpi_lsb( &TB );
 800ab42:	f107 0310 	add.w	r3, r7, #16
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fc fb84 	bl	8007254 <mbedtls_mpi_lsb>
 800ab4c:	6378      	str	r0, [r7, #52]	; 0x34

    if( lzt < lz )
 800ab4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d201      	bcs.n	800ab5a <mbedtls_mpi_gcd+0x7a>
        lz = lzt;
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	63bb      	str	r3, [r7, #56]	; 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800ab5a:	f107 031c 	add.w	r3, r7, #28
 800ab5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fc fd4f 	bl	8007604 <mbedtls_mpi_shift_r>
 800ab66:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ab68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f040 808b 	bne.w	800ac86 <mbedtls_mpi_gcd+0x1a6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800ab70:	f107 0310 	add.w	r3, r7, #16
 800ab74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fc fd44 	bl	8007604 <mbedtls_mpi_shift_r>
 800ab7c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ab7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f040 8082 	bne.w	800ac8a <mbedtls_mpi_gcd+0x1aa>

    TA.s = TB.s = 1;
 800ab86:	2301      	movs	r3, #1
 800ab88:	613b      	str	r3, [r7, #16]
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	61fb      	str	r3, [r7, #28]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800ab8e:	e059      	b.n	800ac44 <mbedtls_mpi_gcd+0x164>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800ab90:	f107 031c 	add.w	r3, r7, #28
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fc fb5d 	bl	8007254 <mbedtls_mpi_lsb>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	f107 031c 	add.w	r3, r7, #28
 800aba0:	4611      	mov	r1, r2
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fc fd2e 	bl	8007604 <mbedtls_mpi_shift_r>
 800aba8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800abaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d16e      	bne.n	800ac8e <mbedtls_mpi_gcd+0x1ae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800abb0:	f107 0310 	add.w	r3, r7, #16
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fc fb4d 	bl	8007254 <mbedtls_mpi_lsb>
 800abba:	4602      	mov	r2, r0
 800abbc:	f107 0310 	add.w	r3, r7, #16
 800abc0:	4611      	mov	r1, r2
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fc fd1e 	bl	8007604 <mbedtls_mpi_shift_r>
 800abc8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800abca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d160      	bne.n	800ac92 <mbedtls_mpi_gcd+0x1b2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800abd0:	f107 0210 	add.w	r2, r7, #16
 800abd4:	f107 031c 	add.w	r3, r7, #28
 800abd8:	4611      	mov	r1, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fc fe2f 	bl	800783e <mbedtls_mpi_cmp_mpi>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	db17      	blt.n	800ac16 <mbedtls_mpi_gcd+0x136>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800abe6:	f107 0210 	add.w	r2, r7, #16
 800abea:	f107 011c 	add.w	r1, r7, #28
 800abee:	f107 031c 	add.w	r3, r7, #28
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fc fff1 	bl	8007bda <mbedtls_mpi_sub_abs>
 800abf8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800abfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d14a      	bne.n	800ac96 <mbedtls_mpi_gcd+0x1b6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800ac00:	f107 031c 	add.w	r3, r7, #28
 800ac04:	2101      	movs	r1, #1
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fc fcfc 	bl	8007604 <mbedtls_mpi_shift_r>
 800ac0c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ac0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d017      	beq.n	800ac44 <mbedtls_mpi_gcd+0x164>
 800ac14:	e046      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800ac16:	f107 021c 	add.w	r2, r7, #28
 800ac1a:	f107 0110 	add.w	r1, r7, #16
 800ac1e:	f107 0310 	add.w	r3, r7, #16
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fc ffd9 	bl	8007bda <mbedtls_mpi_sub_abs>
 800ac28:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ac2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d134      	bne.n	800ac9a <mbedtls_mpi_gcd+0x1ba>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800ac30:	f107 0310 	add.w	r3, r7, #16
 800ac34:	2101      	movs	r1, #1
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fc fce4 	bl	8007604 <mbedtls_mpi_shift_r>
 800ac3c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ac3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d12c      	bne.n	800ac9e <mbedtls_mpi_gcd+0x1be>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800ac44:	f107 031c 	add.w	r3, r7, #28
 800ac48:	2100      	movs	r1, #0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fc fe92 	bl	8007974 <mbedtls_mpi_cmp_int>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d19c      	bne.n	800ab90 <mbedtls_mpi_gcd+0xb0>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800ac56:	f107 0310 	add.w	r3, r7, #16
 800ac5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fc fc2c 	bl	80074ba <mbedtls_mpi_shift_l>
 800ac62:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ac64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d11b      	bne.n	800aca2 <mbedtls_mpi_gcd+0x1c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800ac6a:	f107 0310 	add.w	r3, r7, #16
 800ac6e:	4619      	mov	r1, r3
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f7fc fa4f 	bl	8007114 <mbedtls_mpi_copy>
 800ac76:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ac78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7a:	2b00      	cmp	r3, #0

cleanup:
 800ac7c:	e012      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800ac7e:	bf00      	nop
 800ac80:	e010      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800ac82:	bf00      	nop
 800ac84:	e00e      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800ac86:	bf00      	nop
 800ac88:	e00c      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800ac8a:	bf00      	nop
 800ac8c:	e00a      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800ac8e:	bf00      	nop
 800ac90:	e008      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800ac92:	bf00      	nop
 800ac94:	e006      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800ac96:	bf00      	nop
 800ac98:	e004      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800ac9a:	bf00      	nop
 800ac9c:	e002      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800ac9e:	bf00      	nop
 800aca0:	e000      	b.n	800aca4 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800aca2:	bf00      	nop

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800aca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fc f9ca 	bl	8007042 <mbedtls_mpi_free>
 800acae:	f107 031c 	add.w	r3, r7, #28
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fc f9c5 	bl	8007042 <mbedtls_mpi_free>
 800acb8:	f107 0310 	add.w	r3, r7, #16
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fc f9c0 	bl	8007042 <mbedtls_mpi_free>

    return( ret );
 800acc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3740      	adds	r7, #64	; 0x40
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800accc:	b590      	push	{r4, r7, lr}
 800acce:	b0c7      	sub	sp, #284	; 0x11c
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800acd6:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800acda:	6020      	str	r0, [r4, #0]
 800acdc:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800ace0:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 800ace4:	6001      	str	r1, [r0, #0]
 800ace6:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800acea:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800acee:	600a      	str	r2, [r1, #0]
 800acf0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800acf4:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800acf8:	6013      	str	r3, [r2, #0]
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 800acfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800acfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad08:	d902      	bls.n	800ad10 <mbedtls_mpi_fill_random+0x44>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800ad0a:	f06f 0303 	mvn.w	r3, #3
 800ad0e:	e035      	b.n	800ad7c <mbedtls_mpi_fill_random+0xb0>

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800ad10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ad14:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800ad18:	f107 0114 	add.w	r1, r7, #20
 800ad1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ad20:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 800ad24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ad28:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6812      	ldr	r2, [r2, #0]
 800ad30:	6800      	ldr	r0, [r0, #0]
 800ad32:	4798      	blx	r3
 800ad34:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800ad38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d113      	bne.n	800ad68 <mbedtls_mpi_fill_random+0x9c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 800ad40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ad44:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800ad48:	f107 0114 	add.w	r1, r7, #20
 800ad4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ad50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ad54:	6812      	ldr	r2, [r2, #0]
 800ad56:	6818      	ldr	r0, [r3, #0]
 800ad58:	f7fc fb12 	bl	8007380 <mbedtls_mpi_read_binary>
 800ad5c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800ad60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad64:	2b00      	cmp	r3, #0

cleanup:
 800ad66:	e000      	b.n	800ad6a <mbedtls_mpi_fill_random+0x9e>
    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800ad68:	bf00      	nop
    mbedtls_zeroize( buf, sizeof( buf ) );
 800ad6a:	f107 0314 	add.w	r3, r7, #20
 800ad6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fc f935 	bl	8006fe2 <mbedtls_zeroize>
    return( ret );
 800ad78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd90      	pop	{r4, r7, pc}

0800ad86 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b0a0      	sub	sp, #128	; 0x80
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800ad92:	2101      	movs	r1, #1
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7fc fded 	bl	8007974 <mbedtls_mpi_cmp_int>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dc02      	bgt.n	800ada6 <mbedtls_mpi_inv_mod+0x20>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800ada0:	f06f 0303 	mvn.w	r3, #3
 800ada4:	e23e      	b.n	800b224 <mbedtls_mpi_inv_mod+0x49e>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 800ada6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fc f932 	bl	8007014 <mbedtls_mpi_init>
 800adb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fc f92d 	bl	8007014 <mbedtls_mpi_init>
 800adba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fc f928 	bl	8007014 <mbedtls_mpi_init>
 800adc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fc f923 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 800adce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800add2:	4618      	mov	r0, r3
 800add4:	f7fc f91e 	bl	8007014 <mbedtls_mpi_init>
 800add8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800addc:	4618      	mov	r0, r3
 800adde:	f7fc f919 	bl	8007014 <mbedtls_mpi_init>
 800ade2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fc f914 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 800adec:	f107 031c 	add.w	r3, r7, #28
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fc f90f 	bl	8007014 <mbedtls_mpi_init>
 800adf6:	f107 0310 	add.w	r3, r7, #16
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fc f90a 	bl	8007014 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800ae00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff fe69 	bl	800aae0 <mbedtls_mpi_gcd>
 800ae0e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ae10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f040 81a5 	bne.w	800b162 <mbedtls_mpi_inv_mod+0x3dc>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800ae18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fc fda8 	bl	8007974 <mbedtls_mpi_cmp_int>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <mbedtls_mpi_inv_mod+0xac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800ae2a:	f06f 030d 	mvn.w	r3, #13
 800ae2e:	67fb      	str	r3, [r7, #124]	; 0x7c
        goto cleanup;
 800ae30:	e1ca      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800ae32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	68b9      	ldr	r1, [r7, #8]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff f887 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 800ae40:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ae42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f040 818e 	bne.w	800b166 <mbedtls_mpi_inv_mod+0x3e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800ae4a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ae4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae52:	4611      	mov	r1, r2
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fc f95d 	bl	8007114 <mbedtls_mpi_copy>
 800ae5a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ae5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f040 8183 	bne.w	800b16a <mbedtls_mpi_inv_mod+0x3e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800ae64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fc f952 	bl	8007114 <mbedtls_mpi_copy>
 800ae70:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ae72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f040 817a 	bne.w	800b16e <mbedtls_mpi_inv_mod+0x3e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800ae7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fc f947 	bl	8007114 <mbedtls_mpi_copy>
 800ae86:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ae88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f040 8171 	bne.w	800b172 <mbedtls_mpi_inv_mod+0x3ec>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800ae90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ae94:	2101      	movs	r1, #1
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fc f98d 	bl	80071b6 <mbedtls_mpi_lset>
 800ae9c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ae9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f040 8168 	bne.w	800b176 <mbedtls_mpi_inv_mod+0x3f0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800aea6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aeaa:	2100      	movs	r1, #0
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fc f982 	bl	80071b6 <mbedtls_mpi_lset>
 800aeb2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aeb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f040 815f 	bne.w	800b17a <mbedtls_mpi_inv_mod+0x3f4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800aebc:	f107 031c 	add.w	r3, r7, #28
 800aec0:	2100      	movs	r1, #0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fc f977 	bl	80071b6 <mbedtls_mpi_lset>
 800aec8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aeca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f040 8156 	bne.w	800b17e <mbedtls_mpi_inv_mod+0x3f8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800aed2:	f107 0310 	add.w	r3, r7, #16
 800aed6:	2101      	movs	r1, #1
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fc f96c 	bl	80071b6 <mbedtls_mpi_lset>
 800aede:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aee0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f040 814d 	bne.w	800b182 <mbedtls_mpi_inv_mod+0x3fc>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 800aee8:	e048      	b.n	800af7c <mbedtls_mpi_inv_mod+0x1f6>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800aeea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aeee:	2101      	movs	r1, #1
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fc fb87 	bl	8007604 <mbedtls_mpi_shift_r>
 800aef6:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aef8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f040 8143 	bne.w	800b186 <mbedtls_mpi_inv_mod+0x400>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800af00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d105      	bne.n	800af18 <mbedtls_mpi_inv_mod+0x192>
 800af0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0301 	and.w	r3, r3, #1
 800af14:	2b00      	cmp	r3, #0
 800af16:	d01b      	beq.n	800af50 <mbedtls_mpi_inv_mod+0x1ca>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800af18:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800af1c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800af20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800af24:	4618      	mov	r0, r3
 800af26:	f7fc febc 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 800af2a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800af2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f040 812b 	bne.w	800b18a <mbedtls_mpi_inv_mod+0x404>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800af34:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800af38:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800af3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af40:	4618      	mov	r0, r3
 800af42:	f7fc fef8 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 800af46:	67f8      	str	r0, [r7, #124]	; 0x7c
 800af48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f040 811f 	bne.w	800b18e <mbedtls_mpi_inv_mod+0x408>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800af50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800af54:	2101      	movs	r1, #1
 800af56:	4618      	mov	r0, r3
 800af58:	f7fc fb54 	bl	8007604 <mbedtls_mpi_shift_r>
 800af5c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800af5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af60:	2b00      	cmp	r3, #0
 800af62:	f040 8116 	bne.w	800b192 <mbedtls_mpi_inv_mod+0x40c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800af66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af6a:	2101      	movs	r1, #1
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fc fb49 	bl	8007604 <mbedtls_mpi_shift_r>
 800af72:	67f8      	str	r0, [r7, #124]	; 0x7c
 800af74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af76:	2b00      	cmp	r3, #0
 800af78:	f040 810d 	bne.w	800b196 <mbedtls_mpi_inv_mod+0x410>
        while( ( TU.p[0] & 1 ) == 0 )
 800af7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0b0      	beq.n	800aeea <mbedtls_mpi_inv_mod+0x164>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 800af88:	e048      	b.n	800b01c <mbedtls_mpi_inv_mod+0x296>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800af8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af8e:	2101      	movs	r1, #1
 800af90:	4618      	mov	r0, r3
 800af92:	f7fc fb37 	bl	8007604 <mbedtls_mpi_shift_r>
 800af96:	67f8      	str	r0, [r7, #124]	; 0x7c
 800af98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f040 80fd 	bne.w	800b19a <mbedtls_mpi_inv_mod+0x414>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d105      	bne.n	800afb8 <mbedtls_mpi_inv_mod+0x232>
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01b      	beq.n	800aff0 <mbedtls_mpi_inv_mod+0x26a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800afb8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800afbc:	f107 011c 	add.w	r1, r7, #28
 800afc0:	f107 031c 	add.w	r3, r7, #28
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fc fe6c 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 800afca:	67f8      	str	r0, [r7, #124]	; 0x7c
 800afcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f040 80e5 	bne.w	800b19e <mbedtls_mpi_inv_mod+0x418>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800afd4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800afd8:	f107 0110 	add.w	r1, r7, #16
 800afdc:	f107 0310 	add.w	r3, r7, #16
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fc fea8 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 800afe6:	67f8      	str	r0, [r7, #124]	; 0x7c
 800afe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afea:	2b00      	cmp	r3, #0
 800afec:	f040 80d9 	bne.w	800b1a2 <mbedtls_mpi_inv_mod+0x41c>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800aff0:	f107 031c 	add.w	r3, r7, #28
 800aff4:	2101      	movs	r1, #1
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fc fb04 	bl	8007604 <mbedtls_mpi_shift_r>
 800affc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800affe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b000:	2b00      	cmp	r3, #0
 800b002:	f040 80d0 	bne.w	800b1a6 <mbedtls_mpi_inv_mod+0x420>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800b006:	f107 0310 	add.w	r3, r7, #16
 800b00a:	2101      	movs	r1, #1
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fc faf9 	bl	8007604 <mbedtls_mpi_shift_r>
 800b012:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b016:	2b00      	cmp	r3, #0
 800b018:	f040 80c7 	bne.w	800b1aa <mbedtls_mpi_inv_mod+0x424>
        while( ( TV.p[0] & 1 ) == 0 )
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0301 	and.w	r3, r3, #1
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0b0      	beq.n	800af8a <mbedtls_mpi_inv_mod+0x204>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800b028:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b02c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b030:	4611      	mov	r1, r2
 800b032:	4618      	mov	r0, r3
 800b034:	f7fc fc03 	bl	800783e <mbedtls_mpi_cmp_mpi>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	db29      	blt.n	800b092 <mbedtls_mpi_inv_mod+0x30c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800b03e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b042:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b046:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fc fe73 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 800b050:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b054:	2b00      	cmp	r3, #0
 800b056:	f040 80aa 	bne.w	800b1ae <mbedtls_mpi_inv_mod+0x428>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800b05a:	f107 021c 	add.w	r2, r7, #28
 800b05e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800b062:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b066:	4618      	mov	r0, r3
 800b068:	f7fc fe65 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 800b06c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b06e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b070:	2b00      	cmp	r3, #0
 800b072:	f040 809e 	bne.w	800b1b2 <mbedtls_mpi_inv_mod+0x42c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800b076:	f107 0210 	add.w	r2, r7, #16
 800b07a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b07e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b082:	4618      	mov	r0, r3
 800b084:	f7fc fe57 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 800b088:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b08a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d028      	beq.n	800b0e2 <mbedtls_mpi_inv_mod+0x35c>
 800b090:	e09a      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800b092:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b096:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b09a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fc fe49 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 800b0a4:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b0a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f040 8084 	bne.w	800b1b6 <mbedtls_mpi_inv_mod+0x430>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800b0ae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b0b2:	f107 011c 	add.w	r1, r7, #28
 800b0b6:	f107 031c 	add.w	r3, r7, #28
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fc fe3b 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 800b0c0:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b0c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d178      	bne.n	800b1ba <mbedtls_mpi_inv_mod+0x434>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800b0c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b0cc:	f107 0110 	add.w	r1, r7, #16
 800b0d0:	f107 0310 	add.w	r3, r7, #16
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fc fe2e 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 800b0da:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b0dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d16d      	bne.n	800b1be <mbedtls_mpi_inv_mod+0x438>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800b0e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fc fc43 	bl	8007974 <mbedtls_mpi_cmp_int>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f47f af43 	bne.w	800af7c <mbedtls_mpi_inv_mod+0x1f6>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800b0f6:	e00b      	b.n	800b110 <mbedtls_mpi_inv_mod+0x38a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800b0f8:	f107 011c 	add.w	r1, r7, #28
 800b0fc:	f107 031c 	add.w	r3, r7, #28
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4618      	mov	r0, r3
 800b104:	f7fc fdcd 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 800b108:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b10a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d158      	bne.n	800b1c2 <mbedtls_mpi_inv_mod+0x43c>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800b110:	f107 031c 	add.w	r3, r7, #28
 800b114:	2100      	movs	r1, #0
 800b116:	4618      	mov	r0, r3
 800b118:	f7fc fc2c 	bl	8007974 <mbedtls_mpi_cmp_int>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	dbea      	blt.n	800b0f8 <mbedtls_mpi_inv_mod+0x372>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800b122:	e00b      	b.n	800b13c <mbedtls_mpi_inv_mod+0x3b6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800b124:	f107 011c 	add.w	r1, r7, #28
 800b128:	f107 031c 	add.w	r3, r7, #28
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fc fe01 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 800b134:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d144      	bne.n	800b1c6 <mbedtls_mpi_inv_mod+0x440>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800b13c:	f107 031c 	add.w	r3, r7, #28
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	4618      	mov	r0, r3
 800b144:	f7fc fb7b 	bl	800783e <mbedtls_mpi_cmp_mpi>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	daea      	bge.n	800b124 <mbedtls_mpi_inv_mod+0x39e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800b14e:	f107 031c 	add.w	r3, r7, #28
 800b152:	4619      	mov	r1, r3
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f7fb ffdd 	bl	8007114 <mbedtls_mpi_copy>
 800b15a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b15c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b15e:	2b00      	cmp	r3, #0

cleanup:
 800b160:	e032      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800b162:	bf00      	nop
 800b164:	e030      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800b166:	bf00      	nop
 800b168:	e02e      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800b16a:	bf00      	nop
 800b16c:	e02c      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800b16e:	bf00      	nop
 800b170:	e02a      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800b172:	bf00      	nop
 800b174:	e028      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800b176:	bf00      	nop
 800b178:	e026      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800b17a:	bf00      	nop
 800b17c:	e024      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800b17e:	bf00      	nop
 800b180:	e022      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800b182:	bf00      	nop
 800b184:	e020      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800b186:	bf00      	nop
 800b188:	e01e      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800b18a:	bf00      	nop
 800b18c:	e01c      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800b18e:	bf00      	nop
 800b190:	e01a      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800b192:	bf00      	nop
 800b194:	e018      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800b196:	bf00      	nop
 800b198:	e016      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800b19a:	bf00      	nop
 800b19c:	e014      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800b19e:	bf00      	nop
 800b1a0:	e012      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800b1a2:	bf00      	nop
 800b1a4:	e010      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800b1a6:	bf00      	nop
 800b1a8:	e00e      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800b1aa:	bf00      	nop
 800b1ac:	e00c      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800b1ae:	bf00      	nop
 800b1b0:	e00a      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800b1b2:	bf00      	nop
 800b1b4:	e008      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800b1b6:	bf00      	nop
 800b1b8:	e006      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800b1ba:	bf00      	nop
 800b1bc:	e004      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800b1be:	bf00      	nop
 800b1c0:	e002      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800b1c2:	bf00      	nop
 800b1c4:	e000      	b.n	800b1c8 <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800b1c6:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800b1c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fb ff38 	bl	8007042 <mbedtls_mpi_free>
 800b1d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fb ff33 	bl	8007042 <mbedtls_mpi_free>
 800b1dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fb ff2e 	bl	8007042 <mbedtls_mpi_free>
 800b1e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fb ff29 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800b1f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fb ff24 	bl	8007042 <mbedtls_mpi_free>
 800b1fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fb ff1f 	bl	8007042 <mbedtls_mpi_free>
 800b204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fb ff1a 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800b20e:	f107 031c 	add.w	r3, r7, #28
 800b212:	4618      	mov	r0, r3
 800b214:	f7fb ff15 	bl	8007042 <mbedtls_mpi_free>
 800b218:	f107 0310 	add.w	r3, r7, #16
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fb ff10 	bl	8007042 <mbedtls_mpi_free>

    return( ret );
 800b222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 800b224:	4618      	mov	r0, r3
 800b226:	3780      	adds	r7, #128	; 0x80
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <mbedtls_cipher_get_block_size>:
 *
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <mbedtls_cipher_get_block_size+0x16>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <mbedtls_cipher_get_block_size+0x1a>
        return 0;
 800b242:	2300      	movs	r3, #0
 800b244:	e002      	b.n	800b24c <mbedtls_cipher_get_block_size+0x20>

    return ctx->cipher_info->block_size;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	695b      	ldr	r3, [r3, #20]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <mbedtls_cipher_get_iv_size>:
 * \return      <ul><li>If no IV has been set: the recommended IV size.
 *              0 for ciphers not using IV or nonce.</li>
 *              <li>If IV has already been set: the actual size.</li></ul>
 */
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <mbedtls_cipher_get_iv_size+0x16>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <mbedtls_cipher_get_iv_size+0x1a>
        return 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	e009      	b.n	800b286 <mbedtls_cipher_get_iv_size+0x2e>

    if( ctx->iv_size != 0 )
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b276:	2b00      	cmp	r3, #0
 800b278:	d002      	beq.n	800b280 <mbedtls_cipher_get_iv_size+0x28>
        return (int) ctx->iv_size;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27e:	e002      	b.n	800b286 <mbedtls_cipher_get_iv_size+0x2e>

    return (int) ctx->cipher_info->iv_size;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68db      	ldr	r3, [r3, #12]
}
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <mbedtls_zeroize>:
#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800b292:	b480      	push	{r7}
 800b294:	b085      	sub	sp, #20
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e004      	b.n	800b2ac <mbedtls_zeroize+0x1a>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	1c5a      	adds	r2, r3, #1
 800b2a6:	60fa      	str	r2, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	701a      	strb	r2, [r3, #0]
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	1e5a      	subs	r2, r3, #1
 800b2b0:	603a      	str	r2, [r7, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1f5      	bne.n	800b2a2 <mbedtls_zeroize+0x10>
}
 800b2b6:	bf00      	nop
 800b2b8:	bf00      	nop
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	71fb      	strb	r3, [r7, #7]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b2ce:	4b0c      	ldr	r3, [pc, #48]	; (800b300 <mbedtls_cipher_info_from_type+0x3c>)
 800b2d0:	60fb      	str	r3, [r7, #12]
 800b2d2:	e00a      	b.n	800b2ea <mbedtls_cipher_info_from_type+0x26>
        if( def->type == cipher_type )
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	79fa      	ldrb	r2, [r7, #7]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d102      	bne.n	800b2e4 <mbedtls_cipher_info_from_type+0x20>
            return( def->info );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	e007      	b.n	800b2f4 <mbedtls_cipher_info_from_type+0x30>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1f0      	bne.n	800b2d4 <mbedtls_cipher_info_from_type+0x10>

    return( NULL );
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	080253ac 	.word	0x080253ac

0800b304 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	4603      	mov	r3, r0
 800b30c:	6039      	str	r1, [r7, #0]
 800b30e:	71fb      	strb	r3, [r7, #7]
 800b310:	4613      	mov	r3, r2
 800b312:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b314:	4b13      	ldr	r3, [pc, #76]	; (800b364 <mbedtls_cipher_info_from_values+0x60>)
 800b316:	60fb      	str	r3, [r7, #12]
 800b318:	e018      	b.n	800b34c <mbedtls_cipher_info_from_values+0x48>
        if( def->info->base->cipher == cipher_id &&
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	79fa      	ldrb	r2, [r7, #7]
 800b324:	429a      	cmp	r2, r3
 800b326:	d10e      	bne.n	800b346 <mbedtls_cipher_info_from_values+0x42>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	683b      	ldr	r3, [r7, #0]
        if( def->info->base->cipher == cipher_id &&
 800b330:	429a      	cmp	r2, r3
 800b332:	d108      	bne.n	800b346 <mbedtls_cipher_info_from_values+0x42>
            def->info->mode == mode )
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	785b      	ldrb	r3, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800b33a:	79ba      	ldrb	r2, [r7, #6]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d102      	bne.n	800b346 <mbedtls_cipher_info_from_values+0x42>
            return( def->info );
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	e007      	b.n	800b356 <mbedtls_cipher_info_from_values+0x52>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3308      	adds	r3, #8
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1e2      	bne.n	800b31a <mbedtls_cipher_info_from_values+0x16>

    return( NULL );
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	080253ac 	.word	0x080253ac

0800b368 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800b370:	2240      	movs	r2, #64	; 0x40
 800b372:	2100      	movs	r1, #0
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f013 f955 	bl	801e624 <memset>
}
 800b37a:	bf00      	nop
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <mbedtls_cipher_free>:

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b082      	sub	sp, #8
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d010      	beq.n	800b3b2 <mbedtls_cipher_free+0x30>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d007      	beq.n	800b3a8 <mbedtls_cipher_free+0x26>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	4798      	blx	r3

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800b3a8:	2140      	movs	r1, #64	; 0x40
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7ff ff71 	bl	800b292 <mbedtls_zeroize>
 800b3b0:	e000      	b.n	800b3b4 <mbedtls_cipher_free+0x32>
        return;
 800b3b2:	bf00      	nop
}
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
    if( NULL == cipher_info || NULL == ctx )
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <mbedtls_cipher_setup+0x16>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <mbedtls_cipher_setup+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b3d2:	4b10      	ldr	r3, [pc, #64]	; (800b414 <mbedtls_cipher_setup+0x58>)
 800b3d4:	e019      	b.n	800b40a <mbedtls_cipher_setup+0x4e>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800b3d6:	2240      	movs	r2, #64	; 0x40
 800b3d8:	2100      	movs	r1, #0
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f013 f922 	bl	801e624 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	4798      	blx	r3
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	63da      	str	r2, [r3, #60]	; 0x3c
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <mbedtls_cipher_setup+0x3e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 800b3f6:	4b08      	ldr	r3, [pc, #32]	; (800b418 <mbedtls_cipher_setup+0x5c>)
 800b3f8:	e007      	b.n	800b40a <mbedtls_cipher_setup+0x4e>

    ctx->cipher_info = cipher_info;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	601a      	str	r2, [r3, #0]
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 800b400:	2104      	movs	r1, #4
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 face 	bl	800b9a4 <mbedtls_cipher_set_padding_mode>
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	ffff9f00 	.word	0xffff9f00
 800b418:	ffff9e80 	.word	0xffff9e80

0800b41c <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	70fb      	strb	r3, [r7, #3]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d003      	beq.n	800b438 <mbedtls_cipher_setkey+0x1c>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <mbedtls_cipher_setkey+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b438:	4b23      	ldr	r3, [pc, #140]	; (800b4c8 <mbedtls_cipher_setkey+0xac>)
 800b43a:	e040      	b.n	800b4be <mbedtls_cipher_setkey+0xa2>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	f003 0302 	and.w	r3, r3, #2
 800b446:	2b00      	cmp	r3, #0
 800b448:	d108      	bne.n	800b45c <mbedtls_cipher_setkey+0x40>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	461a      	mov	r2, r3
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4293      	cmp	r3, r2
 800b456:	d001      	beq.n	800b45c <mbedtls_cipher_setkey+0x40>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b458:	4b1b      	ldr	r3, [pc, #108]	; (800b4c8 <mbedtls_cipher_setkey+0xac>)
 800b45a:	e030      	b.n	800b4be <mbedtls_cipher_setkey+0xa2>
    }

    ctx->key_bitlen = key_bitlen;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	78fa      	ldrb	r2, [r7, #3]
 800b466:	721a      	strb	r2, [r3, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 800b468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d009      	beq.n	800b484 <mbedtls_cipher_setkey+0x68>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 800b476:	2b03      	cmp	r3, #3
 800b478:	d004      	beq.n	800b484 <mbedtls_cipher_setkey+0x68>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b480:	2b05      	cmp	r3, #5
 800b482:	d10b      	bne.n	800b49c <mbedtls_cipher_setkey+0x80>
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                ctx->key_bitlen );
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	6852      	ldr	r2, [r2, #4]
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800b494:	68b9      	ldr	r1, [r7, #8]
 800b496:	4798      	blx	r3
 800b498:	4603      	mov	r3, r0
 800b49a:	e010      	b.n	800b4be <mbedtls_cipher_setkey+0xa2>
    }

    if( MBEDTLS_DECRYPT == operation )
 800b49c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10b      	bne.n	800b4bc <mbedtls_cipher_setkey+0xa0>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	699b      	ldr	r3, [r3, #24]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                ctx->key_bitlen );
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	6852      	ldr	r2, [r2, #4]
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800b4b4:	68b9      	ldr	r1, [r7, #8]
 800b4b6:	4798      	blx	r3
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	e000      	b.n	800b4be <mbedtls_cipher_setkey+0xa2>

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b4bc:	4b02      	ldr	r3, [pc, #8]	; (800b4c8 <mbedtls_cipher_setkey+0xac>)
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	ffff9f00 	.word	0xffff9f00

0800b4cc <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d006      	beq.n	800b4ec <mbedtls_cipher_set_iv+0x20>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <mbedtls_cipher_set_iv+0x20>
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <mbedtls_cipher_set_iv+0x24>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b4ec:	4b14      	ldr	r3, [pc, #80]	; (800b540 <mbedtls_cipher_set_iv+0x74>)
 800b4ee:	e023      	b.n	800b538 <mbedtls_cipher_set_iv+0x6c>

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b10      	cmp	r3, #16
 800b4f4:	d901      	bls.n	800b4fa <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b4f6:	4b13      	ldr	r3, [pc, #76]	; (800b544 <mbedtls_cipher_set_iv+0x78>)
 800b4f8:	e01e      	b.n	800b538 <mbedtls_cipher_set_iv+0x6c>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	f003 0301 	and.w	r3, r3, #1
 800b504:	2b00      	cmp	r3, #0
 800b506:	d002      	beq.n	800b50e <mbedtls_cipher_set_iv+0x42>
        actual_iv_size = iv_len;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	617b      	str	r3, [r7, #20]
 800b50c:	e009      	b.n	800b522 <mbedtls_cipher_set_iv+0x56>
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	617b      	str	r3, [r7, #20]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d901      	bls.n	800b522 <mbedtls_cipher_set_iv+0x56>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b51e:	4b08      	ldr	r3, [pc, #32]	; (800b540 <mbedtls_cipher_set_iv+0x74>)
 800b520:	e00a      	b.n	800b538 <mbedtls_cipher_set_iv+0x6c>
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	3328      	adds	r3, #40	; 0x28
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	68b9      	ldr	r1, [r7, #8]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f013 f852 	bl	801e5d4 <memcpy>
    ctx->iv_size = actual_iv_size;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	639a      	str	r2, [r3, #56]	; 0x38

    return( 0 );
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	ffff9f00 	.word	0xffff9f00
 800b544:	ffff9f80 	.word	0xffff9f80

0800b548 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <mbedtls_cipher_reset+0x16>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <mbedtls_cipher_reset+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b55e:	4b06      	ldr	r3, [pc, #24]	; (800b578 <mbedtls_cipher_reset+0x30>)
 800b560:	e003      	b.n	800b56a <mbedtls_cipher_reset+0x22>

    ctx->unprocessed_len = 0;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	625a      	str	r2, [r3, #36]	; 0x24

    return( 0 );
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	370c      	adds	r7, #12
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	ffff9f00 	.word	0xffff9f00

0800b57c <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 800b57c:	b5b0      	push	{r4, r5, r7, lr}
 800b57e:	b08a      	sub	sp, #40	; 0x28
 800b580:	af02      	add	r7, sp, #8
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
    int ret;
    size_t block_size = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	61bb      	str	r3, [r7, #24]

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d006      	beq.n	800b5a2 <mbedtls_cipher_update+0x26>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <mbedtls_cipher_update+0x26>
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <mbedtls_cipher_update+0x2a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b5a2:	4b90      	ldr	r3, [pc, #576]	; (800b7e4 <mbedtls_cipher_update+0x268>)
 800b5a4:	e125      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
    }

    *olen = 0;
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7ff fe3d 	bl	800b22c <mbedtls_cipher_get_block_size>
 800b5b2:	61b8      	str	r0, [r7, #24]

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	785b      	ldrb	r3, [r3, #1]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d11c      	bne.n	800b5f8 <mbedtls_cipher_update+0x7c>
    {
        if( ilen != block_size )
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d001      	beq.n	800b5ca <mbedtls_cipher_update+0x4e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b5c6:	4b88      	ldr	r3, [pc, #544]	; (800b7e8 <mbedtls_cipher_update+0x26c>)
 800b5c8:	e113      	b.n	800b7f2 <mbedtls_cipher_update+0x276>

        *olen = ilen;
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	601a      	str	r2, [r3, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	685c      	ldr	r4, [r3, #4]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	47a0      	blx	r4
 800b5e8:	6178      	str	r0, [r7, #20]
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <mbedtls_cipher_update+0x78>
                    ctx->operation, input, output ) ) )
        {
            return( ret );
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	e0fe      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
        }

        return( 0 );
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	e0fc      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	785b      	ldrb	r3, [r3, #1]
 800b5fe:	2b06      	cmp	r3, #6
 800b600:	d10b      	bne.n	800b61a <mbedtls_cipher_update+0x9e>
    {
        *olen = ilen;
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	601a      	str	r2, [r3, #0]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	f002 fce8 	bl	800dfe6 <mbedtls_gcm_update>
 800b616:	4603      	mov	r3, r0
 800b618:	e0eb      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
                           output );
    }
#endif

    if ( 0 == block_size )
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <mbedtls_cipher_update+0xa8>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 800b620:	4b72      	ldr	r3, [pc, #456]	; (800b7ec <mbedtls_cipher_update+0x270>)
 800b622:	e0e6      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
    }

    if( input == output &&
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d10f      	bne.n	800b64c <mbedtls_cipher_update+0xd0>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if( input == output &&
 800b630:	2b00      	cmp	r3, #0
 800b632:	d109      	bne.n	800b648 <mbedtls_cipher_update+0xcc>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	69ba      	ldr	r2, [r7, #24]
 800b638:	fbb3 f2f2 	udiv	r2, r3, r2
 800b63c:	69b9      	ldr	r1, [r7, #24]
 800b63e:	fb01 f202 	mul.w	r2, r1, r2
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <mbedtls_cipher_update+0xd0>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b648:	4b66      	ldr	r3, [pc, #408]	; (800b7e4 <mbedtls_cipher_update+0x268>)
 800b64a:	e0d2      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	785b      	ldrb	r3, [r3, #1]
 800b652:	2b02      	cmp	r3, #2
 800b654:	f040 80cc 	bne.w	800b7f0 <mbedtls_cipher_update+0x274>
    {
        size_t copy_len = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d106      	bne.n	800b674 <mbedtls_cipher_update+0xf8>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	1ad3      	subs	r3, r2, r3
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	429a      	cmp	r2, r3
 800b672:	d90b      	bls.n	800b68c <mbedtls_cipher_update+0x110>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen <= block_size - ctx->unprocessed_len ) ||
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d119      	bne.n	800b6b2 <mbedtls_cipher_update+0x136>
                ilen < block_size - ctx->unprocessed_len ) )
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b682:	69ba      	ldr	r2, [r7, #24]
 800b684:	1ad3      	subs	r3, r2, r3
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d212      	bcs.n	800b6b2 <mbedtls_cipher_update+0x136>
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	3310      	adds	r3, #16
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4413      	add	r3, r2
 800b696:	3304      	adds	r3, #4
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	68b9      	ldr	r1, [r7, #8]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f012 ff99 	bl	801e5d4 <memcpy>
                    ilen );

            ctx->unprocessed_len += ilen;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	441a      	add	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	625a      	str	r2, [r3, #36]	; 0x24
            return( 0 );
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e09f      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d03e      	beq.n	800b738 <mbedtls_cipher_update+0x1bc>
        {
            copy_len = block_size - ctx->unprocessed_len;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	69ba      	ldr	r2, [r7, #24]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	61fb      	str	r3, [r7, #28]

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	3310      	adds	r3, #16
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	69fa      	ldr	r2, [r7, #28]
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f012 ff7d 	bl	801e5d4 <memcpy>
                    copy_len );

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	689c      	ldr	r4, [r3, #8]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, block_size, ctx->iv,
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f103 0528 	add.w	r5, r3, #40	; 0x28
                    ctx->unprocessed_data, output ) ) )
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	3314      	adds	r3, #20
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	9201      	str	r2, [sp, #4]
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	47a0      	blx	r4
 800b702:	6178      	str	r0, [r7, #20]
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <mbedtls_cipher_update+0x192>
            {
                return( ret );
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	e071      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
            }

            *olen += block_size;
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	441a      	add	r2, r3
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	601a      	str	r2, [r3, #0]
            output += block_size;
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	4413      	add	r3, r2
 800b720:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	625a      	str	r2, [r3, #36]	; 0x24

            input += copy_len;
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	4413      	add	r3, r2
 800b72e:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d02d      	beq.n	800b79a <mbedtls_cipher_update+0x21e>
        {
            if( 0 == block_size )
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d101      	bne.n	800b748 <mbedtls_cipher_update+0x1cc>
            {
                return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 800b744:	4b29      	ldr	r3, [pc, #164]	; (800b7ec <mbedtls_cipher_update+0x270>)
 800b746:	e054      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
            }

            copy_len = ilen % block_size;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b750:	69b9      	ldr	r1, [r7, #24]
 800b752:	fb01 f202 	mul.w	r2, r1, r2
 800b756:	1a9b      	subs	r3, r3, r2
 800b758:	61fb      	str	r3, [r7, #28]
            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d106      	bne.n	800b76e <mbedtls_cipher_update+0x1f2>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <mbedtls_cipher_update+0x1f2>
                copy_len = block_size;
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	61fb      	str	r3, [r7, #28]

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f103 0014 	add.w	r0, r3, #20
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	4413      	add	r3, r2
 800b77e:	69fa      	ldr	r2, [r7, #28]
 800b780:	4619      	mov	r1, r3
 800b782:	f012 ff27 	bl	801e5d4 <memcpy>
                    copy_len );

            ctx->unprocessed_len += copy_len;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	441a      	add	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	625a      	str	r2, [r3, #36]	; 0x24
            ilen -= copy_len;
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d01e      	beq.n	800b7de <mbedtls_cipher_update+0x262>
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	689c      	ldr	r4, [r3, #8]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f103 0228 	add.w	r2, r3, #40	; 0x28
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	47a0      	blx	r4
 800b7c6:	6178      	str	r0, [r7, #20]
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <mbedtls_cipher_update+0x256>
            {
                return( ret );
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	e00f      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
            }

            *olen += ilen;
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	441a      	add	r2, r3
 800b7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7dc:	601a      	str	r2, [r3, #0]
        }

        return( 0 );
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e007      	b.n	800b7f2 <mbedtls_cipher_update+0x276>
 800b7e2:	bf00      	nop
 800b7e4:	ffff9f00 	.word	0xffff9f00
 800b7e8:	ffff9d80 	.word	0xffff9d80
 800b7ec:	ffff9c80 	.word	0xffff9c80

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b7f0:	4b02      	ldr	r3, [pc, #8]	; (800b7fc <mbedtls_cipher_update+0x280>)
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3720      	adds	r7, #32
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	ffff9f80 	.word	0xffff9f80

0800b800 <get_no_padding>:
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
    if( NULL == input || NULL == data_len )
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d002      	beq.n	800b818 <get_no_padding+0x18>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <get_no_padding+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b818:	4b05      	ldr	r3, [pc, #20]	; (800b830 <get_no_padding+0x30>)
 800b81a:	e003      	b.n	800b824 <get_no_padding+0x24>

    *data_len = input_len;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	601a      	str	r2, [r3, #0]

    return( 0 );
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	ffff9f00 	.word	0xffff9f00

0800b834 <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 800b834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b836:	b089      	sub	sp, #36	; 0x24
 800b838:	af02      	add	r7, sp, #8
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d006      	beq.n	800b854 <mbedtls_cipher_finish+0x20>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <mbedtls_cipher_finish+0x20>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d101      	bne.n	800b858 <mbedtls_cipher_finish+0x24>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b854:	4b50      	ldr	r3, [pc, #320]	; (800b998 <mbedtls_cipher_finish+0x164>)
 800b856:	e09a      	b.n	800b98e <mbedtls_cipher_finish+0x15a>

    *olen = 0;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	785b      	ldrb	r3, [r3, #1]
 800b864:	2b03      	cmp	r3, #3
 800b866:	d00e      	beq.n	800b886 <mbedtls_cipher_finish+0x52>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b86e:	2b05      	cmp	r3, #5
 800b870:	d009      	beq.n	800b886 <mbedtls_cipher_finish+0x52>
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
 800b878:	2b06      	cmp	r3, #6
 800b87a:	d004      	beq.n	800b886 <mbedtls_cipher_finish+0x52>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 800b882:	2b07      	cmp	r3, #7
 800b884:	d101      	bne.n	800b88a <mbedtls_cipher_finish+0x56>
    {
        return( 0 );
 800b886:	2300      	movs	r3, #0
 800b888:	e081      	b.n	800b98e <mbedtls_cipher_finish+0x15a>
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	785b      	ldrb	r3, [r3, #1]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d107      	bne.n	800b8a4 <mbedtls_cipher_finish+0x70>
    {
        if( ctx->unprocessed_len != 0 )
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <mbedtls_cipher_finish+0x6c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b89c:	4b3f      	ldr	r3, [pc, #252]	; (800b99c <mbedtls_cipher_finish+0x168>)
 800b89e:	e076      	b.n	800b98e <mbedtls_cipher_finish+0x15a>

        return( 0 );
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	e074      	b.n	800b98e <mbedtls_cipher_finish+0x15a>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	785b      	ldrb	r3, [r3, #1]
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d16e      	bne.n	800b98c <mbedtls_cipher_finish+0x158>
    {
        int ret = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	617b      	str	r3, [r7, #20]

        if( MBEDTLS_ENCRYPT == ctx->operation )
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d11b      	bne.n	800b8f4 <mbedtls_cipher_finish+0xc0>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d107      	bne.n	800b8d4 <mbedtls_cipher_finish+0xa0>
            {
                if( 0 != ctx->unprocessed_len )
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <mbedtls_cipher_finish+0x9c>
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b8cc:	4b33      	ldr	r3, [pc, #204]	; (800b99c <mbedtls_cipher_finish+0x168>)
 800b8ce:	e05e      	b.n	800b98e <mbedtls_cipher_finish+0x15a>

                return( 0 );
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	e05c      	b.n	800b98e <mbedtls_cipher_finish+0x15a>
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	68dc      	ldr	r4, [r3, #12]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f103 0514 	add.w	r5, r3, #20
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff fcba 	bl	800b258 <mbedtls_cipher_get_iv_size>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	47a0      	blx	r4
 800b8f2:	e013      	b.n	800b91c <mbedtls_cipher_finish+0xe8>
                    ctx->unprocessed_len );
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff fc99 	bl	800b22c <mbedtls_cipher_get_block_size>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b900:	429a      	cmp	r2, r3
 800b902:	d00b      	beq.n	800b91c <mbedtls_cipher_finish+0xe8>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d105      	bne.n	800b918 <mbedtls_cipher_finish+0xe4>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <mbedtls_cipher_finish+0xe4>
                return( 0 );
 800b914:	2300      	movs	r3, #0
 800b916:	e03a      	b.n	800b98e <mbedtls_cipher_finish+0x15a>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b918:	4b20      	ldr	r3, [pc, #128]	; (800b99c <mbedtls_cipher_finish+0x168>)
 800b91a:	e038      	b.n	800b98e <mbedtls_cipher_finish+0x15a>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	699b      	ldr	r3, [r3, #24]
 800b922:	689c      	ldr	r4, [r3, #8]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f993 6008 	ldrsb.w	r6, [r3, #8]
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f7ff fc7c 	bl	800b22c <mbedtls_cipher_get_block_size>
                ctx->operation, mbedtls_cipher_get_block_size( ctx ), ctx->iv,
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f103 0128 	add.w	r1, r3, #40	; 0x28
                ctx->unprocessed_data, output ) ) )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3314      	adds	r3, #20
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	9201      	str	r2, [sp, #4]
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	460b      	mov	r3, r1
 800b946:	4602      	mov	r2, r0
 800b948:	4631      	mov	r1, r6
 800b94a:	4628      	mov	r0, r5
 800b94c:	47a0      	blx	r4
 800b94e:	6178      	str	r0, [r7, #20]
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d001      	beq.n	800b95a <mbedtls_cipher_finish+0x126>
        {
            return( ret );
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	e019      	b.n	800b98e <mbedtls_cipher_finish+0x15a>
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10b      	bne.n	800b97c <mbedtls_cipher_finish+0x148>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	691c      	ldr	r4, [r3, #16]
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7ff fc5f 	bl	800b22c <mbedtls_cipher_get_block_size>
 800b96e:	4603      	mov	r3, r0
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	4619      	mov	r1, r3
 800b974:	68b8      	ldr	r0, [r7, #8]
 800b976:	47a0      	blx	r4
 800b978:	4603      	mov	r3, r0
 800b97a:	e008      	b.n	800b98e <mbedtls_cipher_finish+0x15a>
                                     olen );

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f7ff fc55 	bl	800b22c <mbedtls_cipher_get_block_size>
 800b982:	4602      	mov	r2, r0
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	601a      	str	r2, [r3, #0]
        return( 0 );
 800b988:	2300      	movs	r3, #0
 800b98a:	e000      	b.n	800b98e <mbedtls_cipher_finish+0x15a>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b98c:	4b04      	ldr	r3, [pc, #16]	; (800b9a0 <mbedtls_cipher_finish+0x16c>)
}
 800b98e:	4618      	mov	r0, r3
 800b990:	371c      	adds	r7, #28
 800b992:	46bd      	mov	sp, r7
 800b994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b996:	bf00      	nop
 800b998:	ffff9f00 	.word	0xffff9f00
 800b99c:	ffff9d80 	.word	0xffff9d80
 800b9a0:	ffff9f80 	.word	0xffff9f80

0800b9a4 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	70fb      	strb	r3, [r7, #3]
    if( NULL == ctx ||
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d004      	beq.n	800b9c0 <mbedtls_cipher_set_padding_mode+0x1c>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	785b      	ldrb	r3, [r3, #1]
    if( NULL == ctx ||
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d001      	beq.n	800b9c4 <mbedtls_cipher_set_padding_mode+0x20>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <mbedtls_cipher_set_padding_mode+0x48>)
 800b9c2:	e00c      	b.n	800b9de <mbedtls_cipher_set_padding_mode+0x3a>
    }

    switch( mode )
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	2b04      	cmp	r3, #4
 800b9c8:	d108      	bne.n	800b9dc <mbedtls_cipher_set_padding_mode+0x38>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_no_padding;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a07      	ldr	r2, [pc, #28]	; (800b9f0 <mbedtls_cipher_set_padding_mode+0x4c>)
 800b9d4:	611a      	str	r2, [r3, #16]
        break;
 800b9d6:	bf00      	nop

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e000      	b.n	800b9de <mbedtls_cipher_set_padding_mode+0x3a>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <mbedtls_cipher_set_padding_mode+0x50>)
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	ffff9f00 	.word	0xffff9f00
 800b9f0:	0800b801 	.word	0x0800b801
 800b9f4:	ffff9f80 	.word	0xffff9f80

0800b9f8 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b088      	sub	sp, #32
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	68b9      	ldr	r1, [r7, #8]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f7ff fd5e 	bl	800b4cc <mbedtls_cipher_set_iv>
 800ba10:	6178      	str	r0, [r7, #20]
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d001      	beq.n	800ba1c <mbedtls_cipher_crypt+0x24>
        return( ret );
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	e02d      	b.n	800ba78 <mbedtls_cipher_crypt+0x80>

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f7ff fd93 	bl	800b548 <mbedtls_cipher_reset>
 800ba22:	6178      	str	r0, [r7, #20]
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <mbedtls_cipher_crypt+0x36>
        return( ret );
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	e024      	b.n	800ba78 <mbedtls_cipher_crypt+0x80>

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 800ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	6a3a      	ldr	r2, [r7, #32]
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f7ff fd9f 	bl	800b57c <mbedtls_cipher_update>
 800ba3e:	6178      	str	r0, [r7, #20]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <mbedtls_cipher_crypt+0x52>
        return( ret );
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	e016      	b.n	800ba78 <mbedtls_cipher_crypt+0x80>

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 800ba4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba50:	4413      	add	r3, r2
 800ba52:	f107 0210 	add.w	r2, r7, #16
 800ba56:	4619      	mov	r1, r3
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f7ff feeb 	bl	800b834 <mbedtls_cipher_finish>
 800ba5e:	6178      	str	r0, [r7, #20]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <mbedtls_cipher_crypt+0x72>
        return( ret );
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	e006      	b.n	800ba78 <mbedtls_cipher_crypt+0x80>

    *olen += finish_olen;
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	441a      	add	r2, r3
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	601a      	str	r2, [r3, #0]

    return( 0 );
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3718      	adds	r7, #24
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b08c      	sub	sp, #48	; 0x30
 800ba84:	af08      	add	r7, sp, #32
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
 800ba8c:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	785b      	ldrb	r3, [r3, #1]
 800ba94:	2b06      	cmp	r3, #6
 800ba96:	d119      	bne.n	800bacc <mbedtls_cipher_auth_encrypt+0x4c>
    {
        *olen = ilen;
 800ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9a:	6a3a      	ldr	r2, [r7, #32]
 800ba9c:	601a      	str	r2, [r3, #0]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	9306      	str	r3, [sp, #24]
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	9305      	str	r3, [sp, #20]
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	9304      	str	r3, [sp, #16]
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	9303      	str	r3, [sp, #12]
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	9302      	str	r3, [sp, #8]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	9301      	str	r3, [sp, #4]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	6a3a      	ldr	r2, [r7, #32]
 800bac2:	2101      	movs	r1, #1
 800bac4:	f002 fcac 	bl	800e420 <mbedtls_gcm_crypt_and_tag>
 800bac8:	4603      	mov	r3, r0
 800baca:	e000      	b.n	800bace <mbedtls_cipher_auth_encrypt+0x4e>
                                     iv, iv_len, ad, ad_len, input, output,
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800bacc:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <mbedtls_cipher_auth_encrypt+0x58>)
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	ffff9f80 	.word	0xffff9f80

0800badc <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08c      	sub	sp, #48	; 0x30
 800bae0:	af06      	add	r7, sp, #24
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	785b      	ldrb	r3, [r3, #1]
 800baf0:	2b06      	cmp	r3, #6
 800baf2:	d11e      	bne.n	800bb32 <mbedtls_cipher_auth_decrypt+0x56>
    {
        int ret;

        *olen = ilen;
 800baf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baf8:	601a      	str	r2, [r3, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	9303      	str	r3, [sp, #12]
 800bb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0c:	9302      	str	r3, [sp, #8]
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	9301      	str	r3, [sp, #4]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb1c:	f002 fcb3 	bl	800e486 <mbedtls_gcm_auth_decrypt>
 800bb20:	6178      	str	r0, [r7, #20]
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f113 0f12 	cmn.w	r3, #18
 800bb28:	d101      	bne.n	800bb2e <mbedtls_cipher_auth_decrypt+0x52>
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 800bb2a:	4b04      	ldr	r3, [pc, #16]	; (800bb3c <mbedtls_cipher_auth_decrypt+0x60>)
 800bb2c:	617b      	str	r3, [r7, #20]

        return( ret );
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	e000      	b.n	800bb34 <mbedtls_cipher_auth_decrypt+0x58>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800bb32:	4b03      	ldr	r3, [pc, #12]	; (800bb40 <mbedtls_cipher_auth_decrypt+0x64>)
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	ffff9d00 	.word	0xffff9d00
 800bb40:	ffff9f80 	.word	0xffff9f80

0800bb44 <gcm_ctx_alloc>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 800bb4a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800bb4e:	2001      	movs	r0, #1
 800bb50:	f012 fcee 	bl	801e530 <calloc>
 800bb54:	4603      	mov	r3, r0
 800bb56:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f001 fd65 	bl	800d62e <mbedtls_gcm_init>

    return( ctx );
 800bb64:	687b      	ldr	r3, [r7, #4]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <gcm_ctx_free>:

static void gcm_ctx_free( void *ctx )
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b082      	sub	sp, #8
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free( ctx );
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f002 fcd1 	bl	800e51e <mbedtls_gcm_free>
    mbedtls_free( ctx );
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f012 fd11 	bl	801e5a4 <free>
}
 800bb82:	bf00      	nop
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
 800bb96:	460b      	mov	r3, r1
 800bb98:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800bb9a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f7fa fd86 	bl	80066b4 <mbedtls_aes_crypt_ecb>
 800bba8:	4603      	mov	r3, r0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b086      	sub	sp, #24
 800bbb6:	af02      	add	r7, sp, #8
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	603b      	str	r3, [r7, #0]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 800bbc2:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f7fa fd89 	bl	80066ea <mbedtls_aes_crypt_cbc>
 800bbd8:	4603      	mov	r3, r0
                          output );
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <aes_setkey_dec_wrap>:
}
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	68b9      	ldr	r1, [r7, #8]
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7f9 fe6a 	bl	80058cc <mbedtls_aes_setkey_dec>
 800bbf8:	4603      	mov	r3, r0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	68b9      	ldr	r1, [r7, #8]
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f7f9 fc7a 	bl	800550c <mbedtls_aes_setkey_enc>
 800bc18:	4603      	mov	r3, r0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <aes_ctx_alloc>:

static void * aes_ctx_alloc( void )
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 800bc28:	f44f 718c 	mov.w	r1, #280	; 0x118
 800bc2c:	2001      	movs	r0, #1
 800bc2e:	f012 fc7f 	bl	801e530 <calloc>
 800bc32:	4603      	mov	r3, r0
 800bc34:	607b      	str	r3, [r7, #4]

    if( aes == NULL )
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d101      	bne.n	800bc40 <aes_ctx_alloc+0x1e>
        return( NULL );
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	e003      	b.n	800bc48 <aes_ctx_alloc+0x26>

    mbedtls_aes_init( aes );
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7f9 fc43 	bl	80054cc <mbedtls_aes_init>

    return( aes );
 800bc46:	687b      	ldr	r3, [r7, #4]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <aes_ctx_free>:

static void aes_ctx_free( void *ctx )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7f9 fc45 	bl	80054e8 <mbedtls_aes_free>
    mbedtls_free( ctx );
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f012 fca0 	bl	801e5a4 <free>
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	2102      	movs	r1, #2
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f001 fe5d 	bl	800d93e <mbedtls_gcm_setkey>
 800bc84:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b082      	sub	sp, #8
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800bc96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f012 fcc1 	bl	801e624 <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 800bca2:	bf00      	nop
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <mbedtls_debug_set_threshold>:
#define DEBUG_BUF_SIZE      512

static int debug_threshold = 0;

void mbedtls_debug_set_threshold( int threshold )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
    debug_threshold = threshold;
 800bcb4:	4a04      	ldr	r2, [pc, #16]	; (800bcc8 <mbedtls_debug_set_threshold+0x1c>)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6013      	str	r3, [r2, #0]
}
 800bcba:	bf00      	nop
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	2000392c 	.word	0x2000392c

0800bccc <debug_send_line>:
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
                                    const char *file, int line,
                                    const char *str )
{
 800bccc:	b590      	push	{r4, r7, lr}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	691c      	ldr	r4, [r3, #16]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6958      	ldr	r0, [r3, #20]
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	68b9      	ldr	r1, [r7, #8]
 800bcf0:	47a0      	blx	r4
#endif
}
 800bcf2:	bf00      	nop
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd90      	pop	{r4, r7, pc}
	...

0800bcfc <mbedtls_debug_print_msg>:

void mbedtls_debug_print_msg( const mbedtls_ssl_context *ssl, int level,
                              const char *file, int line,
                              const char *format, ... )
{
 800bcfc:	b590      	push	{r4, r7, lr}
 800bcfe:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800bd02:	af02      	add	r7, sp, #8
 800bd04:	f507 7406 	add.w	r4, r7, #536	; 0x218
 800bd08:	f5a4 7403 	sub.w	r4, r4, #524	; 0x20c
 800bd0c:	6020      	str	r0, [r4, #0]
 800bd0e:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800bd12:	f5a0 7004 	sub.w	r0, r0, #528	; 0x210
 800bd16:	6001      	str	r1, [r0, #0]
 800bd18:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800bd1c:	f5a1 7105 	sub.w	r1, r1, #532	; 0x214
 800bd20:	600a      	str	r2, [r1, #0]
 800bd22:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800bd26:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800bd2a:	6013      	str	r3, [r2, #0]
    va_list argp;
    char str[DEBUG_BUF_SIZE];
    int ret;

    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 800bd2c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bd30:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d05e      	beq.n	800bdf8 <mbedtls_debug_print_msg+0xfc>
 800bd3a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bd3e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d056      	beq.n	800bdf8 <mbedtls_debug_print_msg+0xfc>
 800bd4a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bd4e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d04d      	beq.n	800bdf8 <mbedtls_debug_print_msg+0xfc>
 800bd5c:	4b29      	ldr	r3, [pc, #164]	; (800be04 <mbedtls_debug_print_msg+0x108>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800bd64:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800bd68:	6812      	ldr	r2, [r2, #0]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	dc44      	bgt.n	800bdf8 <mbedtls_debug_print_msg+0xfc>
        return;

    va_start( argp, format );
 800bd6e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800bd72:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
        str[DEBUG_BUF_SIZE-1] = '\0';
        ret = -1;
    }
#endif
#else
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 800bd76:	f107 0010 	add.w	r0, r7, #16
 800bd7a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bd7e:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800bd82:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bd86:	f012 ff01 	bl	801eb8c <vsniprintf>
 800bd8a:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
#endif
    va_end( argp );

    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 800bd8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db16      	blt.n	800bdc4 <mbedtls_debug_print_msg+0xc8>
 800bd96:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bd9a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800bd9e:	dc11      	bgt.n	800bdc4 <mbedtls_debug_print_msg+0xc8>
    {
        str[ret]     = '\n';
 800bda0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bda4:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800bda8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bdac:	4413      	add	r3, r2
 800bdae:	220a      	movs	r2, #10
 800bdb0:	701a      	strb	r2, [r3, #0]
        str[ret + 1] = '\0';
 800bdb2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800bdbc:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	54d1      	strb	r1, [r2, r3]
    }

    debug_send_line( ssl, level, file, line, str );
 800bdc4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bdc8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bdcc:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800bdd0:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800bdd4:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800bdd8:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800bddc:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800bde0:	f5a0 7003 	sub.w	r0, r0, #524	; 0x20c
 800bde4:	f107 0410 	add.w	r4, r7, #16
 800bde8:	9400      	str	r4, [sp, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6812      	ldr	r2, [r2, #0]
 800bdee:	6809      	ldr	r1, [r1, #0]
 800bdf0:	6800      	ldr	r0, [r0, #0]
 800bdf2:	f7ff ff6b 	bl	800bccc <debug_send_line>
 800bdf6:	e000      	b.n	800bdfa <mbedtls_debug_print_msg+0xfe>
        return;
 800bdf8:	bf00      	nop
}
 800bdfa:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd90      	pop	{r4, r7, pc}
 800be02:	bf00      	nop
 800be04:	2000392c 	.word	0x2000392c

0800be08 <mbedtls_debug_print_ret>:

void mbedtls_debug_print_ret( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, int ret )
{
 800be08:	b590      	push	{r4, r7, lr}
 800be0a:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800be0e:	af02      	add	r7, sp, #8
 800be10:	f507 7404 	add.w	r4, r7, #528	; 0x210
 800be14:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 800be18:	6020      	str	r0, [r4, #0]
 800be1a:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800be1e:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 800be22:	6001      	str	r1, [r0, #0]
 800be24:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800be28:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 800be2c:	600a      	str	r2, [r1, #0]
 800be2e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800be32:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800be36:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 800be38:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800be3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d040      	beq.n	800beca <mbedtls_debug_print_ret+0xc2>
 800be48:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800be4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d037      	beq.n	800beca <mbedtls_debug_print_ret+0xc2>
 800be5a:	4b1f      	ldr	r3, [pc, #124]	; (800bed8 <mbedtls_debug_print_ret+0xd0>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800be62:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800be66:	6812      	ldr	r2, [r2, #0]
 800be68:	429a      	cmp	r2, r3
 800be6a:	dc2e      	bgt.n	800beca <mbedtls_debug_print_ret+0xc2>
    /*
     * With non-blocking I/O and examples that just retry immediately,
     * the logs would be quickly flooded with WANT_READ, so ignore that.
     * Don't ignore WANT_WRITE however, since is is usually rare.
     */
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 800be6c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800be70:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 800be74:	d02b      	beq.n	800bece <mbedtls_debug_print_ret+0xc6>
        return;

    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 800be76:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800be7a:	425b      	negs	r3, r3
 800be7c:	f107 0010 	add.w	r0, r7, #16
 800be80:	9301      	str	r3, [sp, #4]
 800be82:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800be8c:	4a13      	ldr	r2, [pc, #76]	; (800bedc <mbedtls_debug_print_ret+0xd4>)
 800be8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800be92:	f012 fde5 	bl	801ea60 <sniprintf>
              text, ret, -ret );

    debug_send_line( ssl, level, file, line, str );
 800be96:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800be9a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800be9e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800bea2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 800bea6:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800beaa:	f5a1 7102 	sub.w	r1, r1, #520	; 0x208
 800beae:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800beb2:	f5a0 7001 	sub.w	r0, r0, #516	; 0x204
 800beb6:	f107 0410 	add.w	r4, r7, #16
 800beba:	9400      	str	r4, [sp, #0]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6812      	ldr	r2, [r2, #0]
 800bec0:	6809      	ldr	r1, [r1, #0]
 800bec2:	6800      	ldr	r0, [r0, #0]
 800bec4:	f7ff ff02 	bl	800bccc <debug_send_line>
 800bec8:	e002      	b.n	800bed0 <mbedtls_debug_print_ret+0xc8>
        return;
 800beca:	bf00      	nop
 800becc:	e000      	b.n	800bed0 <mbedtls_debug_print_ret+0xc8>
        return;
 800bece:	bf00      	nop
}
 800bed0:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd90      	pop	{r4, r7, pc}
 800bed8:	2000392c 	.word	0x2000392c
 800bedc:	08020348 	.word	0x08020348

0800bee0 <mbedtls_debug_print_buf>:

void mbedtls_debug_print_buf( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line, const char *text,
                      const unsigned char *buf, size_t len )
{
 800bee0:	b590      	push	{r4, r7, lr}
 800bee2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800bee6:	af02      	add	r7, sp, #8
 800bee8:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800beec:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 800bef0:	6020      	str	r0, [r4, #0]
 800bef2:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800bef6:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 800befa:	6001      	str	r1, [r0, #0]
 800befc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800bf00:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 800bf04:	600a      	str	r2, [r1, #0]
 800bf06:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800bf0a:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 800bf0e:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    char txt[17];
    size_t i, idx = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 800bf16:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bf1a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f000 8136 	beq.w	800c194 <mbedtls_debug_print_buf+0x2b4>
 800bf28:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bf2c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 812c 	beq.w	800c194 <mbedtls_debug_print_buf+0x2b4>
 800bf3c:	4b98      	ldr	r3, [pc, #608]	; (800c1a0 <mbedtls_debug_print_buf+0x2c0>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800bf44:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800bf48:	6812      	ldr	r2, [r2, #0]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	f300 8122 	bgt.w	800c194 <mbedtls_debug_print_buf+0x2b4>
        return;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 800bf50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bf54:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bf58:	18d0      	adds	r0, r2, r3
 800bf5a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bf5e:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800bf62:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800bf6c:	4a8d      	ldr	r2, [pc, #564]	; (800c1a4 <mbedtls_debug_print_buf+0x2c4>)
 800bf6e:	f012 fd77 	bl	801ea60 <sniprintf>
              text, (unsigned int) len );

    debug_send_line( ssl, level, file, line, str );
 800bf72:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bf76:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bf7a:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800bf7e:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800bf82:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800bf86:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800bf8a:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800bf8e:	f5a0 7009 	sub.w	r0, r0, #548	; 0x224
 800bf92:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bf96:	9400      	str	r4, [sp, #0]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6812      	ldr	r2, [r2, #0]
 800bf9c:	6809      	ldr	r1, [r1, #0]
 800bf9e:	6800      	ldr	r0, [r0, #0]
 800bfa0:	f7ff fe94 	bl	800bccc <debug_send_line>

    idx = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    memset( txt, 0, sizeof( txt ) );
 800bfaa:	f107 0314 	add.w	r3, r7, #20
 800bfae:	2211      	movs	r2, #17
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f012 fb36 	bl	801e624 <memset>
    for( i = 0; i < len; i++ )
 800bfb8:	2300      	movs	r3, #0
 800bfba:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bfbe:	e094      	b.n	800c0ea <mbedtls_debug_print_buf+0x20a>
    {
        if( i >= 4096 )
 800bfc0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bfc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc8:	f080 8097 	bcs.w	800c0fa <mbedtls_debug_print_buf+0x21a>
            break;

        if( i % 16 == 0 )
 800bfcc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bfd0:	f003 030f 	and.w	r3, r3, #15
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d149      	bne.n	800c06c <mbedtls_debug_print_buf+0x18c>
        {
            if( i > 0 )
 800bfd8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d030      	beq.n	800c042 <mbedtls_debug_print_buf+0x162>
            {
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 800bfe0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bfe4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bfe8:	18d0      	adds	r0, r2, r3
 800bfea:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bfee:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800bff2:	f107 0314 	add.w	r3, r7, #20
 800bff6:	4a6c      	ldr	r2, [pc, #432]	; (800c1a8 <mbedtls_debug_print_buf+0x2c8>)
 800bff8:	f012 fd32 	bl	801ea60 <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 800bffc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c000:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800c004:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c008:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800c00c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800c010:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800c014:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800c018:	f5a0 7009 	sub.w	r0, r0, #548	; 0x224
 800c01c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c020:	9400      	str	r4, [sp, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6812      	ldr	r2, [r2, #0]
 800c026:	6809      	ldr	r1, [r1, #0]
 800c028:	6800      	ldr	r0, [r0, #0]
 800c02a:	f7ff fe4f 	bl	800bccc <debug_send_line>

                idx = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
                memset( txt, 0, sizeof( txt ) );
 800c034:	f107 0314 	add.w	r3, r7, #20
 800c038:	2211      	movs	r2, #17
 800c03a:	2100      	movs	r1, #0
 800c03c:	4618      	mov	r0, r3
 800c03e:	f012 faf1 	bl	801e624 <memset>
            }

            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 800c042:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c046:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c04a:	18d0      	adds	r0, r2, r3
 800c04c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c050:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800c054:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800c058:	4a54      	ldr	r2, [pc, #336]	; (800c1ac <mbedtls_debug_print_buf+0x2cc>)
 800c05a:	f012 fd01 	bl	801ea60 <sniprintf>
 800c05e:	4603      	mov	r3, r0
 800c060:	461a      	mov	r2, r3
 800c062:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c066:	4413      	add	r3, r2
 800c068:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
                             (unsigned int) i );

        }

        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 800c06c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c070:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c074:	18d0      	adds	r0, r2, r3
 800c076:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c07a:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
                         (unsigned int) buf[i] );
 800c07e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800c082:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800c086:	4413      	add	r3, r2
 800c088:	781b      	ldrb	r3, [r3, #0]
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 800c08a:	4a49      	ldr	r2, [pc, #292]	; (800c1b0 <mbedtls_debug_print_buf+0x2d0>)
 800c08c:	f012 fce8 	bl	801ea60 <sniprintf>
 800c090:	4603      	mov	r3, r0
 800c092:	461a      	mov	r2, r3
 800c094:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c098:	4413      	add	r3, r2
 800c09a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 800c09e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800c0a2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800c0a6:	4413      	add	r3, r2
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b1f      	cmp	r3, #31
 800c0ac:	d90e      	bls.n	800c0cc <mbedtls_debug_print_buf+0x1ec>
 800c0ae:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800c0b2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800c0b6:	4413      	add	r3, r2
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	2b7e      	cmp	r3, #126	; 0x7e
 800c0bc:	d806      	bhi.n	800c0cc <mbedtls_debug_print_buf+0x1ec>
 800c0be:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800c0c2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800c0c6:	4413      	add	r3, r2
 800c0c8:	7819      	ldrb	r1, [r3, #0]
 800c0ca:	e000      	b.n	800c0ce <mbedtls_debug_print_buf+0x1ee>
 800c0cc:	212e      	movs	r1, #46	; 0x2e
 800c0ce:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800c0d2:	f003 030f 	and.w	r3, r3, #15
 800c0d6:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c0da:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 800c0de:	54d1      	strb	r1, [r2, r3]
    for( i = 0; i < len; i++ )
 800c0e0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800c0ea:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800c0ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	f4ff af64 	bcc.w	800bfc0 <mbedtls_debug_print_buf+0xe0>
 800c0f8:	e000      	b.n	800c0fc <mbedtls_debug_print_buf+0x21c>
            break;
 800c0fa:	bf00      	nop
    }

    if( len > 0 )
 800c0fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c100:	2b00      	cmp	r3, #0
 800c102:	d048      	beq.n	800c196 <mbedtls_debug_print_buf+0x2b6>
    {
        for( /* i = i */; i % 16 != 0; i++ )
 800c104:	e018      	b.n	800c138 <mbedtls_debug_print_buf+0x258>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 800c106:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c10a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c10e:	18d0      	adds	r0, r2, r3
 800c110:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c114:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c118:	4a26      	ldr	r2, [pc, #152]	; (800c1b4 <mbedtls_debug_print_buf+0x2d4>)
 800c11a:	4619      	mov	r1, r3
 800c11c:	f012 fca0 	bl	801ea60 <sniprintf>
 800c120:	4603      	mov	r3, r0
 800c122:	461a      	mov	r2, r3
 800c124:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c128:	4413      	add	r3, r2
 800c12a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
        for( /* i = i */; i % 16 != 0; i++ )
 800c12e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800c132:	3301      	adds	r3, #1
 800c134:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800c138:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800c13c:	f003 030f 	and.w	r3, r3, #15
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1e0      	bne.n	800c106 <mbedtls_debug_print_buf+0x226>

        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 800c144:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c148:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c14c:	18d0      	adds	r0, r2, r3
 800c14e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800c152:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800c156:	f107 0314 	add.w	r3, r7, #20
 800c15a:	4a13      	ldr	r2, [pc, #76]	; (800c1a8 <mbedtls_debug_print_buf+0x2c8>)
 800c15c:	f012 fc80 	bl	801ea60 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 800c160:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c164:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800c168:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c16c:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800c170:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800c174:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800c178:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800c17c:	f5a0 7009 	sub.w	r0, r0, #548	; 0x224
 800c180:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c184:	9400      	str	r4, [sp, #0]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6812      	ldr	r2, [r2, #0]
 800c18a:	6809      	ldr	r1, [r1, #0]
 800c18c:	6800      	ldr	r0, [r0, #0]
 800c18e:	f7ff fd9d 	bl	800bccc <debug_send_line>
 800c192:	e000      	b.n	800c196 <mbedtls_debug_print_buf+0x2b6>
        return;
 800c194:	bf00      	nop
    }
}
 800c196:	f507 770d 	add.w	r7, r7, #564	; 0x234
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd90      	pop	{r4, r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	2000392c 	.word	0x2000392c
 800c1a4:	08020364 	.word	0x08020364
 800c1a8:	08020380 	.word	0x08020380
 800c1ac:	08020388 	.word	0x08020388
 800c1b0:	08020390 	.word	0x08020390
 800c1b4:	08020398 	.word	0x08020398

0800c1b8 <mbedtls_debug_print_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_mpi *X )
{
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800c1be:	af02      	add	r7, sp, #8
 800c1c0:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800c1c4:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800c1c8:	6020      	str	r0, [r4, #0]
 800c1ca:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800c1ce:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800c1d2:	6001      	str	r1, [r0, #0]
 800c1d4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800c1d8:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 800c1dc:	600a      	str	r2, [r1, #0]
 800c1de:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800c1e2:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800c1e6:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    int j, k, zeros = 1;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    size_t i, n, idx = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 800c1f4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c1f8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 8172 	beq.w	800c4ea <mbedtls_debug_print_mpi+0x332>
 800c206:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c20a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 8168 	beq.w	800c4ea <mbedtls_debug_print_mpi+0x332>
 800c21a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f000 8163 	beq.w	800c4ea <mbedtls_debug_print_mpi+0x332>
 800c224:	4bb3      	ldr	r3, [pc, #716]	; (800c4f4 <mbedtls_debug_print_mpi+0x33c>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800c22c:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 800c230:	6812      	ldr	r2, [r2, #0]
 800c232:	429a      	cmp	r2, r3
 800c234:	f300 8159 	bgt.w	800c4ea <mbedtls_debug_print_mpi+0x332>
        return;

    for( n = X->n - 1; n > 0; n-- )
 800c238:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	3b01      	subs	r3, #1
 800c240:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800c244:	e00e      	b.n	800c264 <mbedtls_debug_print_mpi+0xac>
        if( X->p[n] != 0 )
 800c246:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800c24a:	689a      	ldr	r2, [r3, #8]
 800c24c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d109      	bne.n	800c26e <mbedtls_debug_print_mpi+0xb6>
    for( n = X->n - 1; n > 0; n-- )
 800c25a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c25e:	3b01      	subs	r3, #1
 800c260:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800c264:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1ec      	bne.n	800c246 <mbedtls_debug_print_mpi+0x8e>
 800c26c:	e000      	b.n	800c270 <mbedtls_debug_print_mpi+0xb8>
            break;
 800c26e:	bf00      	nop

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 800c270:	231f      	movs	r3, #31
 800c272:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800c276:	e014      	b.n	800c2a2 <mbedtls_debug_print_mpi+0xea>
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 800c278:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800c27c:	689a      	ldr	r2, [r3, #8]
 800c27e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c28c:	fa22 f303 	lsr.w	r3, r2, r3
 800c290:	f003 0301 	and.w	r3, r3, #1
 800c294:	2b00      	cmp	r3, #0
 800c296:	d109      	bne.n	800c2ac <mbedtls_debug_print_mpi+0xf4>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 800c298:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c29c:	3b01      	subs	r3, #1
 800c29e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800c2a2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	dae6      	bge.n	800c278 <mbedtls_debug_print_mpi+0xc0>
 800c2aa:	e000      	b.n	800c2ae <mbedtls_debug_print_mpi+0xf6>
            break;
 800c2ac:	bf00      	nop

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 800c2ae:	f107 0210 	add.w	r2, r7, #16
 800c2b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c2b6:	18d0      	adds	r0, r2, r3
 800c2b8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c2bc:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 800c2c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c2c4:	015a      	lsls	r2, r3, #5
 800c2c6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c2ca:	4413      	add	r3, r2
 800c2cc:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c2d4:	4a88      	ldr	r2, [pc, #544]	; (800c4f8 <mbedtls_debug_print_mpi+0x340>)
 800c2d6:	f012 fbc3 	bl	801ea60 <sniprintf>

    debug_send_line( ssl, level, file, line, str );
 800c2da:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c2de:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c2e2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800c2e6:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800c2ea:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800c2ee:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800c2f2:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800c2f6:	f5a0 7007 	sub.w	r0, r0, #540	; 0x21c
 800c2fa:	f107 0410 	add.w	r4, r7, #16
 800c2fe:	9400      	str	r4, [sp, #0]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6812      	ldr	r2, [r2, #0]
 800c304:	6809      	ldr	r1, [r1, #0]
 800c306:	6800      	ldr	r0, [r0, #0]
 800c308:	f7ff fce0 	bl	800bccc <debug_send_line>

    idx = 0;
 800c30c:	2300      	movs	r3, #0
 800c30e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    for( i = n + 1, j = 0; i > 0; i-- )
 800c312:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c316:	3301      	adds	r3, #1
 800c318:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c31c:	2300      	movs	r3, #0
 800c31e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800c322:	e09e      	b.n	800c462 <mbedtls_debug_print_mpi+0x2aa>
    {
        if( zeros && X->p[i - 1] == 0 )
 800c324:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00d      	beq.n	800c348 <mbedtls_debug_print_mpi+0x190>
 800c32c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800c330:	689a      	ldr	r2, [r3, #8]
 800c332:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c336:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c33a:	3b01      	subs	r3, #1
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	f000 8087 	beq.w	800c456 <mbedtls_debug_print_mpi+0x29e>
            continue;

        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 800c348:	2303      	movs	r3, #3
 800c34a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800c34e:	e07c      	b.n	800c44a <mbedtls_debug_print_mpi+0x292>
        {
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 800c350:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800c354:	2b00      	cmp	r3, #0
 800c356:	d012      	beq.n	800c37e <mbedtls_debug_print_mpi+0x1c6>
 800c358:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800c35c:	689a      	ldr	r2, [r3, #8]
 800c35e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c366:	3b01      	subs	r3, #1
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	fa22 f303 	lsr.w	r3, r2, r3
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d05f      	beq.n	800c43e <mbedtls_debug_print_mpi+0x286>
                continue;
            else
                zeros = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

            if( j % 16 == 0 )
 800c384:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c388:	f003 030f 	and.w	r3, r3, #15
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d12c      	bne.n	800c3ea <mbedtls_debug_print_mpi+0x232>
            {
                if( j > 0 )
 800c390:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c394:	2b00      	cmp	r3, #0
 800c396:	dd28      	ble.n	800c3ea <mbedtls_debug_print_mpi+0x232>
                {
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 800c398:	f107 0210 	add.w	r2, r7, #16
 800c39c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c3a0:	18d0      	adds	r0, r2, r3
 800c3a2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c3a6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c3aa:	4a54      	ldr	r2, [pc, #336]	; (800c4fc <mbedtls_debug_print_mpi+0x344>)
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	f012 fb57 	bl	801ea60 <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 800c3b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c3b6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c3ba:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800c3be:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800c3c2:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800c3c6:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800c3ca:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800c3ce:	f5a0 7007 	sub.w	r0, r0, #540	; 0x21c
 800c3d2:	f107 0410 	add.w	r4, r7, #16
 800c3d6:	9400      	str	r4, [sp, #0]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	6812      	ldr	r2, [r2, #0]
 800c3dc:	6809      	ldr	r1, [r1, #0]
 800c3de:	6800      	ldr	r0, [r0, #0]
 800c3e0:	f7ff fc74 	bl	800bccc <debug_send_line>
                    idx = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                }
            }

            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 800c3ea:	f107 0210 	add.w	r2, r7, #16
 800c3ee:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c3f2:	18d0      	adds	r0, r2, r3
 800c3f4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c3f8:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 800c3fc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800c400:	689a      	ldr	r2, [r3, #8]
 800c402:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c406:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c40a:	3b01      	subs	r3, #1
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800c416:	00db      	lsls	r3, r3, #3
 800c418:	fa22 f303 	lsr.w	r3, r2, r3
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	4a38      	ldr	r2, [pc, #224]	; (800c500 <mbedtls_debug_print_mpi+0x348>)
 800c420:	f012 fb1e 	bl	801ea60 <sniprintf>
 800c424:	4603      	mov	r3, r0
 800c426:	461a      	mov	r2, r3
 800c428:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c42c:	4413      	add	r3, r2
 800c42e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

            j++;
 800c432:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c436:	3301      	adds	r3, #1
 800c438:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800c43c:	e000      	b.n	800c440 <mbedtls_debug_print_mpi+0x288>
                continue;
 800c43e:	bf00      	nop
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 800c440:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800c444:	3b01      	subs	r3, #1
 800c446:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800c44a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f6bf af7e 	bge.w	800c350 <mbedtls_debug_print_mpi+0x198>
 800c454:	e000      	b.n	800c458 <mbedtls_debug_print_mpi+0x2a0>
            continue;
 800c456:	bf00      	nop
    for( i = n + 1, j = 0; i > 0; i-- )
 800c458:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c45c:	3b01      	subs	r3, #1
 800c45e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c462:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c466:	2b00      	cmp	r3, #0
 800c468:	f47f af5c 	bne.w	800c324 <mbedtls_debug_print_mpi+0x16c>
        }

    }

    if( zeros == 1 )
 800c46c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800c470:	2b01      	cmp	r3, #1
 800c472:	d113      	bne.n	800c49c <mbedtls_debug_print_mpi+0x2e4>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 800c474:	f107 0210 	add.w	r2, r7, #16
 800c478:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c47c:	18d0      	adds	r0, r2, r3
 800c47e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c482:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c486:	4a1f      	ldr	r2, [pc, #124]	; (800c504 <mbedtls_debug_print_mpi+0x34c>)
 800c488:	4619      	mov	r1, r3
 800c48a:	f012 fae9 	bl	801ea60 <sniprintf>
 800c48e:	4603      	mov	r3, r0
 800c490:	461a      	mov	r2, r3
 800c492:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c496:	4413      	add	r3, r2
 800c498:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 800c49c:	f107 0210 	add.w	r2, r7, #16
 800c4a0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c4a4:	18d0      	adds	r0, r2, r3
 800c4a6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c4aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c4ae:	4a13      	ldr	r2, [pc, #76]	; (800c4fc <mbedtls_debug_print_mpi+0x344>)
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	f012 fad5 	bl	801ea60 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 800c4b6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c4ba:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c4be:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800c4c2:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800c4c6:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800c4ca:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800c4ce:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800c4d2:	f5a0 7007 	sub.w	r0, r0, #540	; 0x21c
 800c4d6:	f107 0410 	add.w	r4, r7, #16
 800c4da:	9400      	str	r4, [sp, #0]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6812      	ldr	r2, [r2, #0]
 800c4e0:	6809      	ldr	r1, [r1, #0]
 800c4e2:	6800      	ldr	r0, [r0, #0]
 800c4e4:	f7ff fbf2 	bl	800bccc <debug_send_line>
 800c4e8:	e000      	b.n	800c4ec <mbedtls_debug_print_mpi+0x334>
        return;
 800c4ea:	bf00      	nop
}
 800c4ec:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd90      	pop	{r4, r7, pc}
 800c4f4:	2000392c 	.word	0x2000392c
 800c4f8:	0802039c 	.word	0x0802039c
 800c4fc:	080203bc 	.word	0x080203bc
 800c500:	08020390 	.word	0x08020390
 800c504:	080203c0 	.word	0x080203c0

0800c508 <debug_print_pk>:

#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void debug_print_pk( const mbedtls_ssl_context *ssl, int level,
                            const char *file, int line,
                            const char *text, const mbedtls_pk_context *pk )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b094      	sub	sp, #80	; 0x50
 800c50c:	af02      	add	r7, sp, #8
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
 800c514:	603b      	str	r3, [r7, #0]
    size_t i;
    mbedtls_pk_debug_item items[MBEDTLS_PK_DEBUG_MAX_ITEMS];
    char name[16];

    memset( items, 0, sizeof( items ) );
 800c516:	f107 0320 	add.w	r3, r7, #32
 800c51a:	2224      	movs	r2, #36	; 0x24
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f012 f880 	bl	801e624 <memset>

    if( mbedtls_pk_debug( pk, items ) != 0 )
 800c524:	f107 0320 	add.w	r3, r7, #32
 800c528:	4619      	mov	r1, r3
 800c52a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c52c:	f002 ffa0 	bl	800f470 <mbedtls_pk_debug>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d008      	beq.n	800c548 <debug_print_pk+0x40>
    {
        debug_send_line( ssl, level, file, line,
 800c536:	4b2e      	ldr	r3, [pc, #184]	; (800c5f0 <debug_print_pk+0xe8>)
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	68b9      	ldr	r1, [r7, #8]
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f7ff fbc3 	bl	800bccc <debug_send_line>
                          "invalid PK context\n" );
        return;
 800c546:	e04f      	b.n	800c5e8 <debug_print_pk+0xe0>
    }

    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 800c548:	2300      	movs	r3, #0
 800c54a:	647b      	str	r3, [r7, #68]	; 0x44
 800c54c:	e047      	b.n	800c5de <debug_print_pk+0xd6>
    {
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 800c54e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c550:	4613      	mov	r3, r2
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	4413      	add	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	3348      	adds	r3, #72	; 0x48
 800c55a:	443b      	add	r3, r7
 800c55c:	3b28      	subs	r3, #40	; 0x28
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d040      	beq.n	800c5e6 <debug_print_pk+0xde>
            return;

        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 800c564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c566:	4613      	mov	r3, r2
 800c568:	005b      	lsls	r3, r3, #1
 800c56a:	4413      	add	r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	3348      	adds	r3, #72	; 0x48
 800c570:	443b      	add	r3, r7
 800c572:	3b24      	subs	r3, #36	; 0x24
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f107 0010 	add.w	r0, r7, #16
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c57e:	4a1d      	ldr	r2, [pc, #116]	; (800c5f4 <debug_print_pk+0xec>)
 800c580:	2110      	movs	r1, #16
 800c582:	f012 fa6d 	bl	801ea60 <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 800c586:	2300      	movs	r3, #0
 800c588:	77fb      	strb	r3, [r7, #31]

        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 800c58a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c58c:	4613      	mov	r3, r2
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	4413      	add	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	3348      	adds	r3, #72	; 0x48
 800c596:	443b      	add	r3, r7
 800c598:	3b28      	subs	r3, #40	; 0x28
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d113      	bne.n	800c5c8 <debug_print_pk+0xc0>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 800c5a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	005b      	lsls	r3, r3, #1
 800c5a6:	4413      	add	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	3348      	adds	r3, #72	; 0x48
 800c5ac:	443b      	add	r3, r7
 800c5ae:	3b20      	subs	r3, #32
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	9301      	str	r3, [sp, #4]
 800c5b4:	f107 0310 	add.w	r3, r7, #16
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	68b9      	ldr	r1, [r7, #8]
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f7ff fdf9 	bl	800c1b8 <mbedtls_debug_print_mpi>
 800c5c6:	e007      	b.n	800c5d8 <debug_print_pk+0xd0>
#if defined(MBEDTLS_ECP_C)
        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )
            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );
        else
#endif
            debug_send_line( ssl, level, file, line,
 800c5c8:	4b0b      	ldr	r3, [pc, #44]	; (800c5f8 <debug_print_pk+0xf0>)
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	68b9      	ldr	r1, [r7, #8]
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f7ff fb7a 	bl	800bccc <debug_send_line>
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 800c5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5da:	3301      	adds	r3, #1
 800c5dc:	647b      	str	r3, [r7, #68]	; 0x44
 800c5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5e0:	2b02      	cmp	r3, #2
 800c5e2:	d9b4      	bls.n	800c54e <debug_print_pk+0x46>
 800c5e4:	e000      	b.n	800c5e8 <debug_print_pk+0xe0>
            return;
 800c5e6:	bf00      	nop
                              "should not happen\n" );
    }
}
 800c5e8:	3748      	adds	r7, #72	; 0x48
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	080203c4 	.word	0x080203c4
 800c5f4:	080203d8 	.word	0x080203d8
 800c5f8:	080203e0 	.word	0x080203e0

0800c5fc <debug_print_line_by_line>:

static void debug_print_line_by_line( const mbedtls_ssl_context *ssl, int level,
                                      const char *file, int line, const char *text )
{
 800c5fc:	b590      	push	{r4, r7, lr}
 800c5fe:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800c602:	af02      	add	r7, sp, #8
 800c604:	f507 7408 	add.w	r4, r7, #544	; 0x220
 800c608:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 800c60c:	6020      	str	r0, [r4, #0]
 800c60e:	f507 7008 	add.w	r0, r7, #544	; 0x220
 800c612:	f5a0 7006 	sub.w	r0, r0, #536	; 0x218
 800c616:	6001      	str	r1, [r0, #0]
 800c618:	f507 7108 	add.w	r1, r7, #544	; 0x220
 800c61c:	f5a1 7107 	sub.w	r1, r1, #540	; 0x21c
 800c620:	600a      	str	r2, [r1, #0]
 800c622:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800c626:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 800c62a:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    const char *start, *cur;

    start = text;
 800c62c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800c630:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    for( cur = text; *cur != '\0'; cur++ )
 800c634:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800c638:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c63c:	e04a      	b.n	800c6d4 <debug_print_line_by_line+0xd8>
    {
        if( *cur == '\n' )
 800c63e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	2b0a      	cmp	r3, #10
 800c646:	d140      	bne.n	800c6ca <debug_print_line_by_line+0xce>
        {
            size_t len = cur - start + 1;
 800c648:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800c64c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	3301      	adds	r3, #1
 800c654:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
            if( len > DEBUG_BUF_SIZE - 1 )
 800c658:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c660:	d303      	bcc.n	800c66a <debug_print_line_by_line+0x6e>
                len = DEBUG_BUF_SIZE - 1;
 800c662:	f240 13ff 	movw	r3, #511	; 0x1ff
 800c666:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

            memcpy( str, start, len );
 800c66a:	f107 0314 	add.w	r3, r7, #20
 800c66e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800c672:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800c676:	4618      	mov	r0, r3
 800c678:	f011 ffac 	bl	801e5d4 <memcpy>
            str[len] = '\0';
 800c67c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c680:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800c684:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c688:	4413      	add	r3, r2
 800c68a:	2200      	movs	r2, #0
 800c68c:	701a      	strb	r2, [r3, #0]

            debug_send_line( ssl, level, file, line, str );
 800c68e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c692:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800c696:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800c69a:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 800c69e:	f507 7108 	add.w	r1, r7, #544	; 0x220
 800c6a2:	f5a1 7106 	sub.w	r1, r1, #536	; 0x218
 800c6a6:	f507 7008 	add.w	r0, r7, #544	; 0x220
 800c6aa:	f5a0 7005 	sub.w	r0, r0, #532	; 0x214
 800c6ae:	f107 0414 	add.w	r4, r7, #20
 800c6b2:	9400      	str	r4, [sp, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6812      	ldr	r2, [r2, #0]
 800c6b8:	6809      	ldr	r1, [r1, #0]
 800c6ba:	6800      	ldr	r0, [r0, #0]
 800c6bc:	f7ff fb06 	bl	800bccc <debug_send_line>

            start = cur + 1;
 800c6c0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    for( cur = text; *cur != '\0'; cur++ )
 800c6ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c6d4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1af      	bne.n	800c63e <debug_print_line_by_line+0x42>
        }
    }
}
 800c6de:	bf00      	nop
 800c6e0:	bf00      	nop
 800c6e2:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd90      	pop	{r4, r7, pc}
	...

0800c6ec <mbedtls_debug_print_crt>:

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 800c6ec:	b590      	push	{r4, r7, lr}
 800c6ee:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 800c6f2:	af02      	add	r7, sp, #8
 800c6f4:	f507 64c3 	add.w	r4, r7, #1560	; 0x618
 800c6f8:	f2a4 640c 	subw	r4, r4, #1548	; 0x60c
 800c6fc:	6020      	str	r0, [r4, #0]
 800c6fe:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c702:	f5a0 60c2 	sub.w	r0, r0, #1552	; 0x610
 800c706:	6001      	str	r1, [r0, #0]
 800c708:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c70c:	f2a1 6114 	subw	r1, r1, #1556	; 0x614
 800c710:	600a      	str	r2, [r1, #0]
 800c712:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c716:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 800c71a:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    int i = 0;
 800c71c:	2300      	movs	r3, #0
 800c71e:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 800c722:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c726:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f000 808c 	beq.w	800c84c <mbedtls_debug_print_crt+0x160>
 800c734:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c738:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8082 	beq.w	800c84c <mbedtls_debug_print_crt+0x160>
 800c748:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d07d      	beq.n	800c84c <mbedtls_debug_print_crt+0x160>
 800c750:	4b41      	ldr	r3, [pc, #260]	; (800c858 <mbedtls_debug_print_crt+0x16c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c758:	f5a2 62c2 	sub.w	r2, r2, #1552	; 0x610
 800c75c:	6812      	ldr	r2, [r2, #0]
 800c75e:	429a      	cmp	r2, r3
 800c760:	dc74      	bgt.n	800c84c <mbedtls_debug_print_crt+0x160>
        return;

    while( crt != NULL )
 800c762:	e06e      	b.n	800c842 <mbedtls_debug_print_crt+0x156>
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 800c764:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c768:	3301      	adds	r3, #1
 800c76a:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800c76e:	f207 4014 	addw	r0, r7, #1044	; 0x414
 800c772:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c77c:	4a37      	ldr	r2, [pc, #220]	; (800c85c <mbedtls_debug_print_crt+0x170>)
 800c77e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c782:	f012 f96d 	bl	801ea60 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 800c786:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c78a:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800c78e:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c792:	f2a2 6214 	subw	r2, r2, #1556	; 0x614
 800c796:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c79a:	f5a1 61c2 	sub.w	r1, r1, #1552	; 0x610
 800c79e:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c7a2:	f2a0 600c 	subw	r0, r0, #1548	; 0x60c
 800c7a6:	f207 4414 	addw	r4, r7, #1044	; 0x414
 800c7aa:	9400      	str	r4, [sp, #0]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6812      	ldr	r2, [r2, #0]
 800c7b0:	6809      	ldr	r1, [r1, #0]
 800c7b2:	6800      	ldr	r0, [r0, #0]
 800c7b4:	f7ff fa8a 	bl	800bccc <debug_send_line>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 800c7b8:	f107 0014 	add.w	r0, r7, #20
 800c7bc:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c7c0:	4a27      	ldr	r2, [pc, #156]	; (800c860 <mbedtls_debug_print_crt+0x174>)
 800c7c2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c7c6:	f00f fb13 	bl	801bdf0 <mbedtls_x509_crt_info>
        debug_print_line_by_line( ssl, level, file, line, buf );
 800c7ca:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c7ce:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800c7d2:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c7d6:	f2a2 6214 	subw	r2, r2, #1556	; 0x614
 800c7da:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c7de:	f5a1 61c2 	sub.w	r1, r1, #1552	; 0x610
 800c7e2:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c7e6:	f2a0 600c 	subw	r0, r0, #1548	; 0x60c
 800c7ea:	f107 0414 	add.w	r4, r7, #20
 800c7ee:	9400      	str	r4, [sp, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	6812      	ldr	r2, [r2, #0]
 800c7f4:	6809      	ldr	r1, [r1, #0]
 800c7f6:	6800      	ldr	r0, [r0, #0]
 800c7f8:	f7ff ff00 	bl	800c5fc <debug_print_line_by_line>

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );
 800c7fc:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c800:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 800c804:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c808:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800c80c:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c810:	f2a2 6214 	subw	r2, r2, #1556	; 0x614
 800c814:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c818:	f5a1 61c2 	sub.w	r1, r1, #1552	; 0x610
 800c81c:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c820:	f2a0 600c 	subw	r0, r0, #1548	; 0x60c
 800c824:	9401      	str	r4, [sp, #4]
 800c826:	4c0f      	ldr	r4, [pc, #60]	; (800c864 <mbedtls_debug_print_crt+0x178>)
 800c828:	9400      	str	r4, [sp, #0]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6812      	ldr	r2, [r2, #0]
 800c82e:	6809      	ldr	r1, [r1, #0]
 800c830:	6800      	ldr	r0, [r0, #0]
 800c832:	f7ff fe69 	bl	800c508 <debug_print_pk>

        crt = crt->next;
 800c836:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c83a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c83e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
    while( crt != NULL )
 800c842:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d18c      	bne.n	800c764 <mbedtls_debug_print_crt+0x78>
 800c84a:	e000      	b.n	800c84e <mbedtls_debug_print_crt+0x162>
        return;
 800c84c:	bf00      	nop
    }
}
 800c84e:	f207 671c 	addw	r7, r7, #1564	; 0x61c
 800c852:	46bd      	mov	sp, r7
 800c854:	bd90      	pop	{r4, r7, pc}
 800c856:	bf00      	nop
 800c858:	2000392c 	.word	0x2000392c
 800c85c:	080203f4 	.word	0x080203f4
 800c860:	08020400 	.word	0x08020400
 800c864:	08020404 	.word	0x08020404

0800c868 <mbedtls_strerror>:
#include "mbedtls/xtea.h"
#endif


void mbedtls_strerror( int ret, char *buf, size_t buflen )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
    size_t len;
    int use_ret;

    if( buflen == 0 )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 8683 	beq.w	800d582 <mbedtls_strerror+0xd1a>
        return;

    memset( buf, 0x00, buflen );
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	2100      	movs	r1, #0
 800c880:	68b8      	ldr	r0, [r7, #8]
 800c882:	f011 fecf 	bl	801e624 <memset>

    if( ret < 0 )
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	da02      	bge.n	800c892 <mbedtls_strerror+0x2a>
        ret = -ret;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	425b      	negs	r3, r3
 800c890:	60fb      	str	r3, [r7, #12]

    if( ret & 0xFF80 )
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	f64f 7380 	movw	r3, #65408	; 0xff80
 800c898:	4013      	ands	r3, r2
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 8504 	beq.w	800d2a8 <mbedtls_strerror+0xa40>
    {
        use_ret = ret & 0xFF80;
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	f64f 7380 	movw	r3, #65408	; 0xff80
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	617b      	str	r3, [r7, #20]

        // High level error codes
        //
        // BEGIN generated code
#if defined(MBEDTLS_CIPHER_C)
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE) )
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f5b3 4fc1 	cmp.w	r3, #24704	; 0x6080
 800c8b0:	d104      	bne.n	800c8bc <mbedtls_strerror+0x54>
            mbedtls_snprintf( buf, buflen, "CIPHER - The selected feature is not available" );
 800c8b2:	4a97      	ldr	r2, [pc, #604]	; (800cb10 <mbedtls_strerror+0x2a8>)
 800c8b4:	6879      	ldr	r1, [r7, #4]
 800c8b6:	68b8      	ldr	r0, [r7, #8]
 800c8b8:	f012 f8d2 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA) )
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 800c8c2:	d104      	bne.n	800c8ce <mbedtls_strerror+0x66>
            mbedtls_snprintf( buf, buflen, "CIPHER - Bad input parameters" );
 800c8c4:	4a93      	ldr	r2, [pc, #588]	; (800cb14 <mbedtls_strerror+0x2ac>)
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	68b8      	ldr	r0, [r7, #8]
 800c8ca:	f012 f8c9 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED) )
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 800c8d4:	d104      	bne.n	800c8e0 <mbedtls_strerror+0x78>
            mbedtls_snprintf( buf, buflen, "CIPHER - Failed to allocate memory" );
 800c8d6:	4a90      	ldr	r2, [pc, #576]	; (800cb18 <mbedtls_strerror+0x2b0>)
 800c8d8:	6879      	ldr	r1, [r7, #4]
 800c8da:	68b8      	ldr	r0, [r7, #8]
 800c8dc:	f012 f8c0 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_PADDING) )
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 800c8e6:	d104      	bne.n	800c8f2 <mbedtls_strerror+0x8a>
            mbedtls_snprintf( buf, buflen, "CIPHER - Input data contains invalid padding and is rejected" );
 800c8e8:	4a8c      	ldr	r2, [pc, #560]	; (800cb1c <mbedtls_strerror+0x2b4>)
 800c8ea:	6879      	ldr	r1, [r7, #4]
 800c8ec:	68b8      	ldr	r0, [r7, #8]
 800c8ee:	f012 f8b7 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED) )
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 800c8f8:	d104      	bne.n	800c904 <mbedtls_strerror+0x9c>
            mbedtls_snprintf( buf, buflen, "CIPHER - Decryption of block requires a full block" );
 800c8fa:	4a89      	ldr	r2, [pc, #548]	; (800cb20 <mbedtls_strerror+0x2b8>)
 800c8fc:	6879      	ldr	r1, [r7, #4]
 800c8fe:	68b8      	ldr	r0, [r7, #8]
 800c900:	f012 f8ae 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_AUTH_FAILED) )
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 800c90a:	d104      	bne.n	800c916 <mbedtls_strerror+0xae>
            mbedtls_snprintf( buf, buflen, "CIPHER - Authentication failed (for AEAD modes)" );
 800c90c:	4a85      	ldr	r2, [pc, #532]	; (800cb24 <mbedtls_strerror+0x2bc>)
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	68b8      	ldr	r0, [r7, #8]
 800c912:	f012 f8a5 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT) )
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	f5b3 4fc7 	cmp.w	r3, #25472	; 0x6380
 800c91c:	d104      	bne.n	800c928 <mbedtls_strerror+0xc0>
            mbedtls_snprintf( buf, buflen, "CIPHER - The context is invalid. For example, because it was freed" );
 800c91e:	4a82      	ldr	r2, [pc, #520]	; (800cb28 <mbedtls_strerror+0x2c0>)
 800c920:	6879      	ldr	r1, [r7, #4]
 800c922:	68b8      	ldr	r0, [r7, #8]
 800c924:	f012 f89c 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED) )
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 800c92e:	d104      	bne.n	800c93a <mbedtls_strerror+0xd2>
            mbedtls_snprintf( buf, buflen, "CIPHER - Cipher hardware accelerator failed" );
 800c930:	4a7e      	ldr	r2, [pc, #504]	; (800cb2c <mbedtls_strerror+0x2c4>)
 800c932:	6879      	ldr	r1, [r7, #4]
 800c934:	68b8      	ldr	r0, [r7, #8]
 800c936:	f012 f893 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_HW_ACCEL_FAILED) )
            mbedtls_snprintf( buf, buflen, "ECP - ECP hardware accelerator failed" );
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_MD_C)
        if( use_ret == -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE) )
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	f5b3 4fa1 	cmp.w	r3, #20608	; 0x5080
 800c940:	d104      	bne.n	800c94c <mbedtls_strerror+0xe4>
            mbedtls_snprintf( buf, buflen, "MD - The selected feature is not available" );
 800c942:	4a7b      	ldr	r2, [pc, #492]	; (800cb30 <mbedtls_strerror+0x2c8>)
 800c944:	6879      	ldr	r1, [r7, #4]
 800c946:	68b8      	ldr	r0, [r7, #8]
 800c948:	f012 f88a 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_BAD_INPUT_DATA) )
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	f5b3 4fa2 	cmp.w	r3, #20736	; 0x5100
 800c952:	d104      	bne.n	800c95e <mbedtls_strerror+0xf6>
            mbedtls_snprintf( buf, buflen, "MD - Bad input parameters to function" );
 800c954:	4a77      	ldr	r2, [pc, #476]	; (800cb34 <mbedtls_strerror+0x2cc>)
 800c956:	6879      	ldr	r1, [r7, #4]
 800c958:	68b8      	ldr	r0, [r7, #8]
 800c95a:	f012 f881 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_ALLOC_FAILED) )
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	f5b3 4fa3 	cmp.w	r3, #20864	; 0x5180
 800c964:	d104      	bne.n	800c970 <mbedtls_strerror+0x108>
            mbedtls_snprintf( buf, buflen, "MD - Failed to allocate memory" );
 800c966:	4a74      	ldr	r2, [pc, #464]	; (800cb38 <mbedtls_strerror+0x2d0>)
 800c968:	6879      	ldr	r1, [r7, #4]
 800c96a:	68b8      	ldr	r0, [r7, #8]
 800c96c:	f012 f878 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_FILE_IO_ERROR) )
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800c976:	d104      	bne.n	800c982 <mbedtls_strerror+0x11a>
            mbedtls_snprintf( buf, buflen, "MD - Opening or reading of file failed" );
 800c978:	4a70      	ldr	r2, [pc, #448]	; (800cb3c <mbedtls_strerror+0x2d4>)
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	68b8      	ldr	r0, [r7, #8]
 800c97e:	f012 f86f 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_HW_ACCEL_FAILED) )
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f5b3 4fa5 	cmp.w	r3, #21120	; 0x5280
 800c988:	d104      	bne.n	800c994 <mbedtls_strerror+0x12c>
            mbedtls_snprintf( buf, buflen, "MD - MD hardware accelerator failed" );
 800c98a:	4a6d      	ldr	r2, [pc, #436]	; (800cb40 <mbedtls_strerror+0x2d8>)
 800c98c:	6879      	ldr	r1, [r7, #4]
 800c98e:	68b8      	ldr	r0, [r7, #8]
 800c990:	f012 f866 	bl	801ea60 <sniprintf>
#endif /* MBEDTLS_MD_C */

#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)
        if( use_ret == -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) )
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800c99a:	d104      	bne.n	800c9a6 <mbedtls_strerror+0x13e>
            mbedtls_snprintf( buf, buflen, "PEM - No PEM header or footer found" );
 800c99c:	4a69      	ldr	r2, [pc, #420]	; (800cb44 <mbedtls_strerror+0x2dc>)
 800c99e:	6879      	ldr	r1, [r7, #4]
 800c9a0:	68b8      	ldr	r0, [r7, #8]
 800c9a2:	f012 f85d 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_DATA) )
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 800c9ac:	d104      	bne.n	800c9b8 <mbedtls_strerror+0x150>
            mbedtls_snprintf( buf, buflen, "PEM - PEM string is not as expected" );
 800c9ae:	4a66      	ldr	r2, [pc, #408]	; (800cb48 <mbedtls_strerror+0x2e0>)
 800c9b0:	6879      	ldr	r1, [r7, #4]
 800c9b2:	68b8      	ldr	r0, [r7, #8]
 800c9b4:	f012 f854 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_ALLOC_FAILED) )
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 800c9be:	d104      	bne.n	800c9ca <mbedtls_strerror+0x162>
            mbedtls_snprintf( buf, buflen, "PEM - Failed to allocate memory" );
 800c9c0:	4a62      	ldr	r2, [pc, #392]	; (800cb4c <mbedtls_strerror+0x2e4>)
 800c9c2:	6879      	ldr	r1, [r7, #4]
 800c9c4:	68b8      	ldr	r0, [r7, #8]
 800c9c6:	f012 f84b 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_ENC_IV) )
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800c9d0:	d104      	bne.n	800c9dc <mbedtls_strerror+0x174>
            mbedtls_snprintf( buf, buflen, "PEM - RSA IV is not in hex-format" );
 800c9d2:	4a5f      	ldr	r2, [pc, #380]	; (800cb50 <mbedtls_strerror+0x2e8>)
 800c9d4:	6879      	ldr	r1, [r7, #4]
 800c9d6:	68b8      	ldr	r0, [r7, #8]
 800c9d8:	f012 f842 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG) )
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800c9e2:	d104      	bne.n	800c9ee <mbedtls_strerror+0x186>
            mbedtls_snprintf( buf, buflen, "PEM - Unsupported key encryption algorithm" );
 800c9e4:	4a5b      	ldr	r2, [pc, #364]	; (800cb54 <mbedtls_strerror+0x2ec>)
 800c9e6:	6879      	ldr	r1, [r7, #4]
 800c9e8:	68b8      	ldr	r0, [r7, #8]
 800c9ea:	f012 f839 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED) )
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 800c9f4:	d104      	bne.n	800ca00 <mbedtls_strerror+0x198>
            mbedtls_snprintf( buf, buflen, "PEM - Private key password can't be empty" );
 800c9f6:	4a58      	ldr	r2, [pc, #352]	; (800cb58 <mbedtls_strerror+0x2f0>)
 800c9f8:	6879      	ldr	r1, [r7, #4]
 800c9fa:	68b8      	ldr	r0, [r7, #8]
 800c9fc:	f012 f830 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH) )
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	f5b3 5f9c 	cmp.w	r3, #4992	; 0x1380
 800ca06:	d104      	bne.n	800ca12 <mbedtls_strerror+0x1aa>
            mbedtls_snprintf( buf, buflen, "PEM - Given private key password does not allow for correct decryption" );
 800ca08:	4a54      	ldr	r2, [pc, #336]	; (800cb5c <mbedtls_strerror+0x2f4>)
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	68b8      	ldr	r0, [r7, #8]
 800ca0e:	f012 f827 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE) )
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ca18:	d104      	bne.n	800ca24 <mbedtls_strerror+0x1bc>
            mbedtls_snprintf( buf, buflen, "PEM - Unavailable feature, e.g. hashing/encryption combination" );
 800ca1a:	4a51      	ldr	r2, [pc, #324]	; (800cb60 <mbedtls_strerror+0x2f8>)
 800ca1c:	6879      	ldr	r1, [r7, #4]
 800ca1e:	68b8      	ldr	r0, [r7, #8]
 800ca20:	f012 f81e 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA) )
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	f5b3 5fa4 	cmp.w	r3, #5248	; 0x1480
 800ca2a:	d104      	bne.n	800ca36 <mbedtls_strerror+0x1ce>
            mbedtls_snprintf( buf, buflen, "PEM - Bad input parameters to function" );
 800ca2c:	4a4d      	ldr	r2, [pc, #308]	; (800cb64 <mbedtls_strerror+0x2fc>)
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	68b8      	ldr	r0, [r7, #8]
 800ca32:	f012 f815 	bl	801ea60 <sniprintf>
#endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */

#if defined(MBEDTLS_PK_C)
        if( use_ret == -(MBEDTLS_ERR_PK_ALLOC_FAILED) )
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
 800ca3c:	d104      	bne.n	800ca48 <mbedtls_strerror+0x1e0>
            mbedtls_snprintf( buf, buflen, "PK - Memory allocation failed" );
 800ca3e:	4a4a      	ldr	r2, [pc, #296]	; (800cb68 <mbedtls_strerror+0x300>)
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	68b8      	ldr	r0, [r7, #8]
 800ca44:	f012 f80c 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_TYPE_MISMATCH) )
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800ca4e:	d104      	bne.n	800ca5a <mbedtls_strerror+0x1f2>
            mbedtls_snprintf( buf, buflen, "PK - Type mismatch, eg attempt to encrypt with an ECDSA key" );
 800ca50:	4a46      	ldr	r2, [pc, #280]	; (800cb6c <mbedtls_strerror+0x304>)
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	68b8      	ldr	r0, [r7, #8]
 800ca56:	f012 f803 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_BAD_INPUT_DATA) )
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800ca60:	d104      	bne.n	800ca6c <mbedtls_strerror+0x204>
            mbedtls_snprintf( buf, buflen, "PK - Bad input parameters to function" );
 800ca62:	4a43      	ldr	r2, [pc, #268]	; (800cb70 <mbedtls_strerror+0x308>)
 800ca64:	6879      	ldr	r1, [r7, #4]
 800ca66:	68b8      	ldr	r0, [r7, #8]
 800ca68:	f011 fffa 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_FILE_IO_ERROR) )
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 800ca72:	d104      	bne.n	800ca7e <mbedtls_strerror+0x216>
            mbedtls_snprintf( buf, buflen, "PK - Read/write of file failed" );
 800ca74:	4a3f      	ldr	r2, [pc, #252]	; (800cb74 <mbedtls_strerror+0x30c>)
 800ca76:	6879      	ldr	r1, [r7, #4]
 800ca78:	68b8      	ldr	r0, [r7, #8]
 800ca7a:	f011 fff1 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION) )
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	f5b3 5f76 	cmp.w	r3, #15744	; 0x3d80
 800ca84:	d104      	bne.n	800ca90 <mbedtls_strerror+0x228>
            mbedtls_snprintf( buf, buflen, "PK - Unsupported key version" );
 800ca86:	4a3c      	ldr	r2, [pc, #240]	; (800cb78 <mbedtls_strerror+0x310>)
 800ca88:	6879      	ldr	r1, [r7, #4]
 800ca8a:	68b8      	ldr	r0, [r7, #8]
 800ca8c:	f011 ffe8 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT) )
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	f5b3 5f74 	cmp.w	r3, #15616	; 0x3d00
 800ca96:	d104      	bne.n	800caa2 <mbedtls_strerror+0x23a>
            mbedtls_snprintf( buf, buflen, "PK - Invalid key tag or value" );
 800ca98:	4a38      	ldr	r2, [pc, #224]	; (800cb7c <mbedtls_strerror+0x314>)
 800ca9a:	6879      	ldr	r1, [r7, #4]
 800ca9c:	68b8      	ldr	r0, [r7, #8]
 800ca9e:	f011 ffdf 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG) )
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	f5b3 5f72 	cmp.w	r3, #15488	; 0x3c80
 800caa8:	d104      	bne.n	800cab4 <mbedtls_strerror+0x24c>
            mbedtls_snprintf( buf, buflen, "PK - Key algorithm is unsupported (only RSA and EC are supported)" );
 800caaa:	4a35      	ldr	r2, [pc, #212]	; (800cb80 <mbedtls_strerror+0x318>)
 800caac:	6879      	ldr	r1, [r7, #4]
 800caae:	68b8      	ldr	r0, [r7, #8]
 800cab0:	f011 ffd6 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED) )
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800caba:	d104      	bne.n	800cac6 <mbedtls_strerror+0x25e>
            mbedtls_snprintf( buf, buflen, "PK - Private key password can't be empty" );
 800cabc:	4a31      	ldr	r2, [pc, #196]	; (800cb84 <mbedtls_strerror+0x31c>)
 800cabe:	6879      	ldr	r1, [r7, #4]
 800cac0:	68b8      	ldr	r0, [r7, #8]
 800cac2:	f011 ffcd 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH) )
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f5b3 5f6e 	cmp.w	r3, #15232	; 0x3b80
 800cacc:	d104      	bne.n	800cad8 <mbedtls_strerror+0x270>
            mbedtls_snprintf( buf, buflen, "PK - Given private key password does not allow for correct decryption" );
 800cace:	4a2e      	ldr	r2, [pc, #184]	; (800cb88 <mbedtls_strerror+0x320>)
 800cad0:	6879      	ldr	r1, [r7, #4]
 800cad2:	68b8      	ldr	r0, [r7, #8]
 800cad4:	f011 ffc4 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_PUBKEY) )
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	f5b3 5f6c 	cmp.w	r3, #15104	; 0x3b00
 800cade:	d104      	bne.n	800caea <mbedtls_strerror+0x282>
            mbedtls_snprintf( buf, buflen, "PK - The pubkey tag or value is invalid (only RSA and EC are supported)" );
 800cae0:	4a2a      	ldr	r2, [pc, #168]	; (800cb8c <mbedtls_strerror+0x324>)
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	68b8      	ldr	r0, [r7, #8]
 800cae6:	f011 ffbb 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_ALG) )
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f5b3 5f6a 	cmp.w	r3, #14976	; 0x3a80
 800caf0:	d104      	bne.n	800cafc <mbedtls_strerror+0x294>
            mbedtls_snprintf( buf, buflen, "PK - The algorithm tag or value is invalid" );
 800caf2:	4a27      	ldr	r2, [pc, #156]	; (800cb90 <mbedtls_strerror+0x328>)
 800caf4:	6879      	ldr	r1, [r7, #4]
 800caf6:	68b8      	ldr	r0, [r7, #8]
 800caf8:	f011 ffb2 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE) )
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 800cb02:	d149      	bne.n	800cb98 <mbedtls_strerror+0x330>
            mbedtls_snprintf( buf, buflen, "PK - Elliptic curve is unsupported (only NIST curves are supported)" );
 800cb04:	4a23      	ldr	r2, [pc, #140]	; (800cb94 <mbedtls_strerror+0x32c>)
 800cb06:	6879      	ldr	r1, [r7, #4]
 800cb08:	68b8      	ldr	r0, [r7, #8]
 800cb0a:	f011 ffa9 	bl	801ea60 <sniprintf>
 800cb0e:	e043      	b.n	800cb98 <mbedtls_strerror+0x330>
 800cb10:	0802040c 	.word	0x0802040c
 800cb14:	0802043c 	.word	0x0802043c
 800cb18:	0802045c 	.word	0x0802045c
 800cb1c:	08020480 	.word	0x08020480
 800cb20:	080204c0 	.word	0x080204c0
 800cb24:	080204f4 	.word	0x080204f4
 800cb28:	08020524 	.word	0x08020524
 800cb2c:	08020568 	.word	0x08020568
 800cb30:	08020594 	.word	0x08020594
 800cb34:	080205c0 	.word	0x080205c0
 800cb38:	080205e8 	.word	0x080205e8
 800cb3c:	08020608 	.word	0x08020608
 800cb40:	08020630 	.word	0x08020630
 800cb44:	08020654 	.word	0x08020654
 800cb48:	08020678 	.word	0x08020678
 800cb4c:	0802069c 	.word	0x0802069c
 800cb50:	080206bc 	.word	0x080206bc
 800cb54:	080206e0 	.word	0x080206e0
 800cb58:	0802070c 	.word	0x0802070c
 800cb5c:	08020738 	.word	0x08020738
 800cb60:	08020780 	.word	0x08020780
 800cb64:	080207c0 	.word	0x080207c0
 800cb68:	080207e8 	.word	0x080207e8
 800cb6c:	08020808 	.word	0x08020808
 800cb70:	08020844 	.word	0x08020844
 800cb74:	0802086c 	.word	0x0802086c
 800cb78:	0802088c 	.word	0x0802088c
 800cb7c:	080208ac 	.word	0x080208ac
 800cb80:	080208cc 	.word	0x080208cc
 800cb84:	08020910 	.word	0x08020910
 800cb88:	0802093c 	.word	0x0802093c
 800cb8c:	08020984 	.word	0x08020984
 800cb90:	080209cc 	.word	0x080209cc
 800cb94:	080209f8 	.word	0x080209f8
        if( use_ret == -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE) )
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 800cb9e:	d104      	bne.n	800cbaa <mbedtls_strerror+0x342>
            mbedtls_snprintf( buf, buflen, "PK - Unavailable feature, e.g. RSA disabled for RSA key" );
 800cba0:	4a80      	ldr	r2, [pc, #512]	; (800cda4 <mbedtls_strerror+0x53c>)
 800cba2:	6879      	ldr	r1, [r7, #4]
 800cba4:	68b8      	ldr	r0, [r7, #8]
 800cba6:	f011 ff5b 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH) )
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f5b3 5f64 	cmp.w	r3, #14592	; 0x3900
 800cbb0:	d104      	bne.n	800cbbc <mbedtls_strerror+0x354>
            mbedtls_snprintf( buf, buflen, "PK - The signature is valid but its length is less than expected" );
 800cbb2:	4a7d      	ldr	r2, [pc, #500]	; (800cda8 <mbedtls_strerror+0x540>)
 800cbb4:	6879      	ldr	r1, [r7, #4]
 800cbb6:	68b8      	ldr	r0, [r7, #8]
 800cbb8:	f011 ff52 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_HW_ACCEL_FAILED) )
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	f5b3 5f62 	cmp.w	r3, #14464	; 0x3880
 800cbc2:	d104      	bne.n	800cbce <mbedtls_strerror+0x366>
            mbedtls_snprintf( buf, buflen, "PK - PK hardware accelerator failed" );
 800cbc4:	4a79      	ldr	r2, [pc, #484]	; (800cdac <mbedtls_strerror+0x544>)
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	68b8      	ldr	r0, [r7, #8]
 800cbca:	f011 ff49 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH) )
            mbedtls_snprintf( buf, buflen, "PKCS5 - Given private key password does not allow for correct decryption" );
#endif /* MBEDTLS_PKCS5_C */

#if defined(MBEDTLS_RSA_C)
        if( use_ret == -(MBEDTLS_ERR_RSA_BAD_INPUT_DATA) )
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f5b3 4f81 	cmp.w	r3, #16512	; 0x4080
 800cbd4:	d104      	bne.n	800cbe0 <mbedtls_strerror+0x378>
            mbedtls_snprintf( buf, buflen, "RSA - Bad input parameters to function" );
 800cbd6:	4a76      	ldr	r2, [pc, #472]	; (800cdb0 <mbedtls_strerror+0x548>)
 800cbd8:	6879      	ldr	r1, [r7, #4]
 800cbda:	68b8      	ldr	r0, [r7, #8]
 800cbdc:	f011 ff40 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_INVALID_PADDING) )
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	f5b3 4f82 	cmp.w	r3, #16640	; 0x4100
 800cbe6:	d104      	bne.n	800cbf2 <mbedtls_strerror+0x38a>
            mbedtls_snprintf( buf, buflen, "RSA - Input data contains invalid padding and is rejected" );
 800cbe8:	4a72      	ldr	r2, [pc, #456]	; (800cdb4 <mbedtls_strerror+0x54c>)
 800cbea:	6879      	ldr	r1, [r7, #4]
 800cbec:	68b8      	ldr	r0, [r7, #8]
 800cbee:	f011 ff37 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_GEN_FAILED) )
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f5b3 4f83 	cmp.w	r3, #16768	; 0x4180
 800cbf8:	d104      	bne.n	800cc04 <mbedtls_strerror+0x39c>
            mbedtls_snprintf( buf, buflen, "RSA - Something failed during generation of a key" );
 800cbfa:	4a6f      	ldr	r2, [pc, #444]	; (800cdb8 <mbedtls_strerror+0x550>)
 800cbfc:	6879      	ldr	r1, [r7, #4]
 800cbfe:	68b8      	ldr	r0, [r7, #8]
 800cc00:	f011 ff2e 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_CHECK_FAILED) )
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 800cc0a:	d104      	bne.n	800cc16 <mbedtls_strerror+0x3ae>
            mbedtls_snprintf( buf, buflen, "RSA - Key failed to pass the validity check of the library" );
 800cc0c:	4a6b      	ldr	r2, [pc, #428]	; (800cdbc <mbedtls_strerror+0x554>)
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	68b8      	ldr	r0, [r7, #8]
 800cc12:	f011 ff25 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_PUBLIC_FAILED) )
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	f5b3 4f85 	cmp.w	r3, #17024	; 0x4280
 800cc1c:	d104      	bne.n	800cc28 <mbedtls_strerror+0x3c0>
            mbedtls_snprintf( buf, buflen, "RSA - The public key operation failed" );
 800cc1e:	4a68      	ldr	r2, [pc, #416]	; (800cdc0 <mbedtls_strerror+0x558>)
 800cc20:	6879      	ldr	r1, [r7, #4]
 800cc22:	68b8      	ldr	r0, [r7, #8]
 800cc24:	f011 ff1c 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_PRIVATE_FAILED) )
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 800cc2e:	d104      	bne.n	800cc3a <mbedtls_strerror+0x3d2>
            mbedtls_snprintf( buf, buflen, "RSA - The private key operation failed" );
 800cc30:	4a64      	ldr	r2, [pc, #400]	; (800cdc4 <mbedtls_strerror+0x55c>)
 800cc32:	6879      	ldr	r1, [r7, #4]
 800cc34:	68b8      	ldr	r0, [r7, #8]
 800cc36:	f011 ff13 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_VERIFY_FAILED) )
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f5b3 4f87 	cmp.w	r3, #17280	; 0x4380
 800cc40:	d104      	bne.n	800cc4c <mbedtls_strerror+0x3e4>
            mbedtls_snprintf( buf, buflen, "RSA - The PKCS#1 verification failed" );
 800cc42:	4a61      	ldr	r2, [pc, #388]	; (800cdc8 <mbedtls_strerror+0x560>)
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	68b8      	ldr	r0, [r7, #8]
 800cc48:	f011 ff0a 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE) )
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800cc52:	d104      	bne.n	800cc5e <mbedtls_strerror+0x3f6>
            mbedtls_snprintf( buf, buflen, "RSA - The output buffer for decryption is not large enough" );
 800cc54:	4a5d      	ldr	r2, [pc, #372]	; (800cdcc <mbedtls_strerror+0x564>)
 800cc56:	6879      	ldr	r1, [r7, #4]
 800cc58:	68b8      	ldr	r0, [r7, #8]
 800cc5a:	f011 ff01 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_RNG_FAILED) )
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	f5b3 4f89 	cmp.w	r3, #17536	; 0x4480
 800cc64:	d104      	bne.n	800cc70 <mbedtls_strerror+0x408>
            mbedtls_snprintf( buf, buflen, "RSA - The random generator failed to generate non-zeros" );
 800cc66:	4a5a      	ldr	r2, [pc, #360]	; (800cdd0 <mbedtls_strerror+0x568>)
 800cc68:	6879      	ldr	r1, [r7, #4]
 800cc6a:	68b8      	ldr	r0, [r7, #8]
 800cc6c:	f011 fef8 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION) )
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	f5b3 4f8a 	cmp.w	r3, #17664	; 0x4500
 800cc76:	d104      	bne.n	800cc82 <mbedtls_strerror+0x41a>
            mbedtls_snprintf( buf, buflen, "RSA - The implementation does not offer the requested operation, for example, because of security violations or lack of functionality" );
 800cc78:	4a56      	ldr	r2, [pc, #344]	; (800cdd4 <mbedtls_strerror+0x56c>)
 800cc7a:	6879      	ldr	r1, [r7, #4]
 800cc7c:	68b8      	ldr	r0, [r7, #8]
 800cc7e:	f011 feef 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_HW_ACCEL_FAILED) )
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	f5b3 4f8b 	cmp.w	r3, #17792	; 0x4580
 800cc88:	d104      	bne.n	800cc94 <mbedtls_strerror+0x42c>
            mbedtls_snprintf( buf, buflen, "RSA - RSA hardware accelerator failed" );
 800cc8a:	4a53      	ldr	r2, [pc, #332]	; (800cdd8 <mbedtls_strerror+0x570>)
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	68b8      	ldr	r0, [r7, #8]
 800cc90:	f011 fee6 	bl	801ea60 <sniprintf>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_SSL_TLS_C)
        if( use_ret == -(MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE) )
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
 800cc9a:	d104      	bne.n	800cca6 <mbedtls_strerror+0x43e>
            mbedtls_snprintf( buf, buflen, "SSL - The requested feature is not available" );
 800cc9c:	4a4f      	ldr	r2, [pc, #316]	; (800cddc <mbedtls_strerror+0x574>)
 800cc9e:	6879      	ldr	r1, [r7, #4]
 800cca0:	68b8      	ldr	r0, [r7, #8]
 800cca2:	f011 fedd 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_INPUT_DATA) )
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f5b3 4fe2 	cmp.w	r3, #28928	; 0x7100
 800ccac:	d104      	bne.n	800ccb8 <mbedtls_strerror+0x450>
            mbedtls_snprintf( buf, buflen, "SSL - Bad input parameters to function" );
 800ccae:	4a4c      	ldr	r2, [pc, #304]	; (800cde0 <mbedtls_strerror+0x578>)
 800ccb0:	6879      	ldr	r1, [r7, #4]
 800ccb2:	68b8      	ldr	r0, [r7, #8]
 800ccb4:	f011 fed4 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_MAC) )
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	f5b3 4fe3 	cmp.w	r3, #29056	; 0x7180
 800ccbe:	d104      	bne.n	800ccca <mbedtls_strerror+0x462>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of the message MAC failed" );
 800ccc0:	4a48      	ldr	r2, [pc, #288]	; (800cde4 <mbedtls_strerror+0x57c>)
 800ccc2:	6879      	ldr	r1, [r7, #4]
 800ccc4:	68b8      	ldr	r0, [r7, #8]
 800ccc6:	f011 fecb 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_RECORD) )
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 800ccd0:	d104      	bne.n	800ccdc <mbedtls_strerror+0x474>
            mbedtls_snprintf( buf, buflen, "SSL - An invalid SSL record was received" );
 800ccd2:	4a45      	ldr	r2, [pc, #276]	; (800cde8 <mbedtls_strerror+0x580>)
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	68b8      	ldr	r0, [r7, #8]
 800ccd8:	f011 fec2 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CONN_EOF) )
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	f5b3 4fe5 	cmp.w	r3, #29312	; 0x7280
 800cce2:	d104      	bne.n	800ccee <mbedtls_strerror+0x486>
            mbedtls_snprintf( buf, buflen, "SSL - The connection indicated an EOF" );
 800cce4:	4a41      	ldr	r2, [pc, #260]	; (800cdec <mbedtls_strerror+0x584>)
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	68b8      	ldr	r0, [r7, #8]
 800ccea:	f011 feb9 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_CIPHER) )
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 800ccf4:	d104      	bne.n	800cd00 <mbedtls_strerror+0x498>
            mbedtls_snprintf( buf, buflen, "SSL - An unknown cipher was received" );
 800ccf6:	4a3e      	ldr	r2, [pc, #248]	; (800cdf0 <mbedtls_strerror+0x588>)
 800ccf8:	6879      	ldr	r1, [r7, #4]
 800ccfa:	68b8      	ldr	r0, [r7, #8]
 800ccfc:	f011 feb0 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN) )
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f5b3 4fe7 	cmp.w	r3, #29568	; 0x7380
 800cd06:	d104      	bne.n	800cd12 <mbedtls_strerror+0x4aa>
            mbedtls_snprintf( buf, buflen, "SSL - The server has no ciphersuites in common with the client" );
 800cd08:	4a3a      	ldr	r2, [pc, #232]	; (800cdf4 <mbedtls_strerror+0x58c>)
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	68b8      	ldr	r0, [r7, #8]
 800cd0e:	f011 fea7 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_RNG) )
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f5b3 4fe8 	cmp.w	r3, #29696	; 0x7400
 800cd18:	d104      	bne.n	800cd24 <mbedtls_strerror+0x4bc>
            mbedtls_snprintf( buf, buflen, "SSL - No RNG was provided to the SSL module" );
 800cd1a:	4a37      	ldr	r2, [pc, #220]	; (800cdf8 <mbedtls_strerror+0x590>)
 800cd1c:	6879      	ldr	r1, [r7, #4]
 800cd1e:	68b8      	ldr	r0, [r7, #8]
 800cd20:	f011 fe9e 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE) )
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	f5b3 4fe9 	cmp.w	r3, #29824	; 0x7480
 800cd2a:	d104      	bne.n	800cd36 <mbedtls_strerror+0x4ce>
            mbedtls_snprintf( buf, buflen, "SSL - No client certification received from the client, but required by the authentication mode" );
 800cd2c:	4a33      	ldr	r2, [pc, #204]	; (800cdfc <mbedtls_strerror+0x594>)
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	68b8      	ldr	r0, [r7, #8]
 800cd32:	f011 fe95 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE) )
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f5b3 4fea 	cmp.w	r3, #29952	; 0x7500
 800cd3c:	d104      	bne.n	800cd48 <mbedtls_strerror+0x4e0>
            mbedtls_snprintf( buf, buflen, "SSL - Our own certificate(s) is/are too large to send in an SSL message" );
 800cd3e:	4a30      	ldr	r2, [pc, #192]	; (800ce00 <mbedtls_strerror+0x598>)
 800cd40:	6879      	ldr	r1, [r7, #4]
 800cd42:	68b8      	ldr	r0, [r7, #8]
 800cd44:	f011 fe8c 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED) )
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f5b3 4feb 	cmp.w	r3, #30080	; 0x7580
 800cd4e:	d104      	bne.n	800cd5a <mbedtls_strerror+0x4f2>
            mbedtls_snprintf( buf, buflen, "SSL - The own certificate is not set, but needed by the server" );
 800cd50:	4a2c      	ldr	r2, [pc, #176]	; (800ce04 <mbedtls_strerror+0x59c>)
 800cd52:	6879      	ldr	r1, [r7, #4]
 800cd54:	68b8      	ldr	r0, [r7, #8]
 800cd56:	f011 fe83 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED) )
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	f5b3 4fec 	cmp.w	r3, #30208	; 0x7600
 800cd60:	d104      	bne.n	800cd6c <mbedtls_strerror+0x504>
            mbedtls_snprintf( buf, buflen, "SSL - The own private key or pre-shared key is not set, but needed" );
 800cd62:	4a29      	ldr	r2, [pc, #164]	; (800ce08 <mbedtls_strerror+0x5a0>)
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	68b8      	ldr	r0, [r7, #8]
 800cd68:	f011 fe7a 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED) )
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	f5b3 4fed 	cmp.w	r3, #30336	; 0x7680
 800cd72:	d104      	bne.n	800cd7e <mbedtls_strerror+0x516>
            mbedtls_snprintf( buf, buflen, "SSL - No CA Chain is set, but required to operate" );
 800cd74:	4a25      	ldr	r2, [pc, #148]	; (800ce0c <mbedtls_strerror+0x5a4>)
 800cd76:	6879      	ldr	r1, [r7, #4]
 800cd78:	68b8      	ldr	r0, [r7, #8]
 800cd7a:	f011 fe71 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE) )
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f5b3 4fee 	cmp.w	r3, #30464	; 0x7700
 800cd84:	d104      	bne.n	800cd90 <mbedtls_strerror+0x528>
            mbedtls_snprintf( buf, buflen, "SSL - An unexpected message was received from our peer" );
 800cd86:	4a22      	ldr	r2, [pc, #136]	; (800ce10 <mbedtls_strerror+0x5a8>)
 800cd88:	6879      	ldr	r1, [r7, #4]
 800cd8a:	68b8      	ldr	r0, [r7, #8]
 800cd8c:	f011 fe68 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE) )
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	f5b3 4fef 	cmp.w	r3, #30592	; 0x7780
 800cd96:	d13f      	bne.n	800ce18 <mbedtls_strerror+0x5b0>
        {
            mbedtls_snprintf( buf, buflen, "SSL - A fatal alert message was received from our peer" );
 800cd98:	4a1e      	ldr	r2, [pc, #120]	; (800ce14 <mbedtls_strerror+0x5ac>)
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	68b8      	ldr	r0, [r7, #8]
 800cd9e:	f011 fe5f 	bl	801ea60 <sniprintf>
            return;
 800cda2:	e3f5      	b.n	800d590 <mbedtls_strerror+0xd28>
 800cda4:	08020a3c 	.word	0x08020a3c
 800cda8:	08020a74 	.word	0x08020a74
 800cdac:	08020ab8 	.word	0x08020ab8
 800cdb0:	08020adc 	.word	0x08020adc
 800cdb4:	08020b04 	.word	0x08020b04
 800cdb8:	08020b40 	.word	0x08020b40
 800cdbc:	08020b74 	.word	0x08020b74
 800cdc0:	08020bb0 	.word	0x08020bb0
 800cdc4:	08020bd8 	.word	0x08020bd8
 800cdc8:	08020c00 	.word	0x08020c00
 800cdcc:	08020c28 	.word	0x08020c28
 800cdd0:	08020c64 	.word	0x08020c64
 800cdd4:	08020c9c 	.word	0x08020c9c
 800cdd8:	08020d24 	.word	0x08020d24
 800cddc:	08020d4c 	.word	0x08020d4c
 800cde0:	08020d7c 	.word	0x08020d7c
 800cde4:	08020da4 	.word	0x08020da4
 800cde8:	08020dd4 	.word	0x08020dd4
 800cdec:	08020e00 	.word	0x08020e00
 800cdf0:	08020e28 	.word	0x08020e28
 800cdf4:	08020e50 	.word	0x08020e50
 800cdf8:	08020e90 	.word	0x08020e90
 800cdfc:	08020ebc 	.word	0x08020ebc
 800ce00:	08020f1c 	.word	0x08020f1c
 800ce04:	08020f64 	.word	0x08020f64
 800ce08:	08020fa4 	.word	0x08020fa4
 800ce0c:	08020fe8 	.word	0x08020fe8
 800ce10:	0802101c 	.word	0x0802101c
 800ce14:	08021054 	.word	0x08021054
        }
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED) )
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800ce1e:	d104      	bne.n	800ce2a <mbedtls_strerror+0x5c2>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of our peer failed" );
 800ce20:	4a97      	ldr	r2, [pc, #604]	; (800d080 <mbedtls_strerror+0x818>)
 800ce22:	6879      	ldr	r1, [r7, #4]
 800ce24:	68b8      	ldr	r0, [r7, #8]
 800ce26:	f011 fe1b 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY) )
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	f5b3 4ff1 	cmp.w	r3, #30848	; 0x7880
 800ce30:	d104      	bne.n	800ce3c <mbedtls_strerror+0x5d4>
            mbedtls_snprintf( buf, buflen, "SSL - The peer notified us that the connection is going to be closed" );
 800ce32:	4a94      	ldr	r2, [pc, #592]	; (800d084 <mbedtls_strerror+0x81c>)
 800ce34:	6879      	ldr	r1, [r7, #4]
 800ce36:	68b8      	ldr	r0, [r7, #8]
 800ce38:	f011 fe12 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO) )
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f5b3 4ff2 	cmp.w	r3, #30976	; 0x7900
 800ce42:	d104      	bne.n	800ce4e <mbedtls_strerror+0x5e6>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientHello handshake message failed" );
 800ce44:	4a90      	ldr	r2, [pc, #576]	; (800d088 <mbedtls_strerror+0x820>)
 800ce46:	6879      	ldr	r1, [r7, #4]
 800ce48:	68b8      	ldr	r0, [r7, #8]
 800ce4a:	f011 fe09 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO) )
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	f5b3 4ff3 	cmp.w	r3, #31104	; 0x7980
 800ce54:	d104      	bne.n	800ce60 <mbedtls_strerror+0x5f8>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHello handshake message failed" );
 800ce56:	4a8d      	ldr	r2, [pc, #564]	; (800d08c <mbedtls_strerror+0x824>)
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	68b8      	ldr	r0, [r7, #8]
 800ce5c:	f011 fe00 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE) )
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f5b3 4ff4 	cmp.w	r3, #31232	; 0x7a00
 800ce66:	d104      	bne.n	800ce72 <mbedtls_strerror+0x60a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Certificate handshake message failed" );
 800ce68:	4a89      	ldr	r2, [pc, #548]	; (800d090 <mbedtls_strerror+0x828>)
 800ce6a:	6879      	ldr	r1, [r7, #4]
 800ce6c:	68b8      	ldr	r0, [r7, #8]
 800ce6e:	f011 fdf7 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST) )
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	f5b3 4ff5 	cmp.w	r3, #31360	; 0x7a80
 800ce78:	d104      	bne.n	800ce84 <mbedtls_strerror+0x61c>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateRequest handshake message failed" );
 800ce7a:	4a86      	ldr	r2, [pc, #536]	; (800d094 <mbedtls_strerror+0x82c>)
 800ce7c:	6879      	ldr	r1, [r7, #4]
 800ce7e:	68b8      	ldr	r0, [r7, #8]
 800ce80:	f011 fdee 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE) )
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	f5b3 4ff6 	cmp.w	r3, #31488	; 0x7b00
 800ce8a:	d104      	bne.n	800ce96 <mbedtls_strerror+0x62e>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerKeyExchange handshake message failed" );
 800ce8c:	4a82      	ldr	r2, [pc, #520]	; (800d098 <mbedtls_strerror+0x830>)
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	68b8      	ldr	r0, [r7, #8]
 800ce92:	f011 fde5 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE) )
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	f5b3 4ff7 	cmp.w	r3, #31616	; 0x7b80
 800ce9c:	d104      	bne.n	800cea8 <mbedtls_strerror+0x640>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHelloDone handshake message failed" );
 800ce9e:	4a7f      	ldr	r2, [pc, #508]	; (800d09c <mbedtls_strerror+0x834>)
 800cea0:	6879      	ldr	r1, [r7, #4]
 800cea2:	68b8      	ldr	r0, [r7, #8]
 800cea4:	f011 fddc 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE) )
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 800ceae:	d104      	bne.n	800ceba <mbedtls_strerror+0x652>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed" );
 800ceb0:	4a7b      	ldr	r2, [pc, #492]	; (800d0a0 <mbedtls_strerror+0x838>)
 800ceb2:	6879      	ldr	r1, [r7, #4]
 800ceb4:	68b8      	ldr	r0, [r7, #8]
 800ceb6:	f011 fdd3 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP) )
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f5b3 4ff9 	cmp.w	r3, #31872	; 0x7c80
 800cec0:	d104      	bne.n	800cecc <mbedtls_strerror+0x664>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public" );
 800cec2:	4a78      	ldr	r2, [pc, #480]	; (800d0a4 <mbedtls_strerror+0x83c>)
 800cec4:	6879      	ldr	r1, [r7, #4]
 800cec6:	68b8      	ldr	r0, [r7, #8]
 800cec8:	f011 fdca 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS) )
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800ced2:	d104      	bne.n	800cede <mbedtls_strerror+0x676>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret" );
 800ced4:	4a74      	ldr	r2, [pc, #464]	; (800d0a8 <mbedtls_strerror+0x840>)
 800ced6:	6879      	ldr	r1, [r7, #4]
 800ced8:	68b8      	ldr	r0, [r7, #8]
 800ceda:	f011 fdc1 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY) )
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f5b3 4ffb 	cmp.w	r3, #32128	; 0x7d80
 800cee4:	d104      	bne.n	800cef0 <mbedtls_strerror+0x688>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateVerify handshake message failed" );
 800cee6:	4a71      	ldr	r2, [pc, #452]	; (800d0ac <mbedtls_strerror+0x844>)
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	68b8      	ldr	r0, [r7, #8]
 800ceec:	f011 fdb8 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC) )
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 800cef6:	d104      	bne.n	800cf02 <mbedtls_strerror+0x69a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ChangeCipherSpec handshake message failed" );
 800cef8:	4a6d      	ldr	r2, [pc, #436]	; (800d0b0 <mbedtls_strerror+0x848>)
 800cefa:	6879      	ldr	r1, [r7, #4]
 800cefc:	68b8      	ldr	r0, [r7, #8]
 800cefe:	f011 fdaf 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_FINISHED) )
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	f5b3 4ffd 	cmp.w	r3, #32384	; 0x7e80
 800cf08:	d104      	bne.n	800cf14 <mbedtls_strerror+0x6ac>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Finished handshake message failed" );
 800cf0a:	4a6a      	ldr	r2, [pc, #424]	; (800d0b4 <mbedtls_strerror+0x84c>)
 800cf0c:	6879      	ldr	r1, [r7, #4]
 800cf0e:	68b8      	ldr	r0, [r7, #8]
 800cf10:	f011 fda6 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_ALLOC_FAILED) )
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 800cf1a:	d104      	bne.n	800cf26 <mbedtls_strerror+0x6be>
            mbedtls_snprintf( buf, buflen, "SSL - Memory allocation failed" );
 800cf1c:	4a66      	ldr	r2, [pc, #408]	; (800d0b8 <mbedtls_strerror+0x850>)
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	68b8      	ldr	r0, [r7, #8]
 800cf22:	f011 fd9d 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FAILED) )
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f5b3 4fff 	cmp.w	r3, #32640	; 0x7f80
 800cf2c:	d104      	bne.n	800cf38 <mbedtls_strerror+0x6d0>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function returned with error" );
 800cf2e:	4a63      	ldr	r2, [pc, #396]	; (800d0bc <mbedtls_strerror+0x854>)
 800cf30:	6879      	ldr	r1, [r7, #4]
 800cf32:	68b8      	ldr	r0, [r7, #8]
 800cf34:	f011 fd94 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH) )
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	f5b3 4fdf 	cmp.w	r3, #28544	; 0x6f80
 800cf3e:	d104      	bne.n	800cf4a <mbedtls_strerror+0x6e2>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function skipped / left alone data" );
 800cf40:	4a5f      	ldr	r2, [pc, #380]	; (800d0c0 <mbedtls_strerror+0x858>)
 800cf42:	6879      	ldr	r1, [r7, #4]
 800cf44:	68b8      	ldr	r0, [r7, #8]
 800cf46:	f011 fd8b 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_COMPRESSION_FAILED) )
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f5b3 4fde 	cmp.w	r3, #28416	; 0x6f00
 800cf50:	d104      	bne.n	800cf5c <mbedtls_strerror+0x6f4>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the compression / decompression failed" );
 800cf52:	4a5c      	ldr	r2, [pc, #368]	; (800d0c4 <mbedtls_strerror+0x85c>)
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	68b8      	ldr	r0, [r7, #8]
 800cf58:	f011 fd82 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION) )
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	f5b3 4fdd 	cmp.w	r3, #28288	; 0x6e80
 800cf62:	d104      	bne.n	800cf6e <mbedtls_strerror+0x706>
            mbedtls_snprintf( buf, buflen, "SSL - Handshake protocol not within min/max boundaries" );
 800cf64:	4a58      	ldr	r2, [pc, #352]	; (800d0c8 <mbedtls_strerror+0x860>)
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	68b8      	ldr	r0, [r7, #8]
 800cf6a:	f011 fd79 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET) )
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f5b3 4fdc 	cmp.w	r3, #28160	; 0x6e00
 800cf74:	d104      	bne.n	800cf80 <mbedtls_strerror+0x718>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the NewSessionTicket handshake message failed" );
 800cf76:	4a55      	ldr	r2, [pc, #340]	; (800d0cc <mbedtls_strerror+0x864>)
 800cf78:	6879      	ldr	r1, [r7, #4]
 800cf7a:	68b8      	ldr	r0, [r7, #8]
 800cf7c:	f011 fd70 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED) )
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	f5b3 4fdb 	cmp.w	r3, #28032	; 0x6d80
 800cf86:	d104      	bne.n	800cf92 <mbedtls_strerror+0x72a>
            mbedtls_snprintf( buf, buflen, "SSL - Session ticket has expired" );
 800cf88:	4a51      	ldr	r2, [pc, #324]	; (800d0d0 <mbedtls_strerror+0x868>)
 800cf8a:	6879      	ldr	r1, [r7, #4]
 800cf8c:	68b8      	ldr	r0, [r7, #8]
 800cf8e:	f011 fd67 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH) )
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f5b3 4fda 	cmp.w	r3, #27904	; 0x6d00
 800cf98:	d104      	bne.n	800cfa4 <mbedtls_strerror+0x73c>
            mbedtls_snprintf( buf, buflen, "SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)" );
 800cf9a:	4a4e      	ldr	r2, [pc, #312]	; (800d0d4 <mbedtls_strerror+0x86c>)
 800cf9c:	6879      	ldr	r1, [r7, #4]
 800cf9e:	68b8      	ldr	r0, [r7, #8]
 800cfa0:	f011 fd5e 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY) )
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	f5b3 4fd9 	cmp.w	r3, #27776	; 0x6c80
 800cfaa:	d104      	bne.n	800cfb6 <mbedtls_strerror+0x74e>
            mbedtls_snprintf( buf, buflen, "SSL - Unknown identity received (eg, PSK identity)" );
 800cfac:	4a4a      	ldr	r2, [pc, #296]	; (800d0d8 <mbedtls_strerror+0x870>)
 800cfae:	6879      	ldr	r1, [r7, #4]
 800cfb0:	68b8      	ldr	r0, [r7, #8]
 800cfb2:	f011 fd55 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INTERNAL_ERROR) )
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	f5b3 4fd8 	cmp.w	r3, #27648	; 0x6c00
 800cfbc:	d104      	bne.n	800cfc8 <mbedtls_strerror+0x760>
            mbedtls_snprintf( buf, buflen, "SSL - Internal error (eg, unexpected failure in lower-level module)" );
 800cfbe:	4a47      	ldr	r2, [pc, #284]	; (800d0dc <mbedtls_strerror+0x874>)
 800cfc0:	6879      	ldr	r1, [r7, #4]
 800cfc2:	68b8      	ldr	r0, [r7, #8]
 800cfc4:	f011 fd4c 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_COUNTER_WRAPPING) )
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	f5b3 4fd7 	cmp.w	r3, #27520	; 0x6b80
 800cfce:	d104      	bne.n	800cfda <mbedtls_strerror+0x772>
            mbedtls_snprintf( buf, buflen, "SSL - A counter would wrap (eg, too many messages exchanged)" );
 800cfd0:	4a43      	ldr	r2, [pc, #268]	; (800d0e0 <mbedtls_strerror+0x878>)
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	68b8      	ldr	r0, [r7, #8]
 800cfd6:	f011 fd43 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO) )
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	f5b3 4fd6 	cmp.w	r3, #27392	; 0x6b00
 800cfe0:	d104      	bne.n	800cfec <mbedtls_strerror+0x784>
            mbedtls_snprintf( buf, buflen, "SSL - Unexpected message at ServerHello in renegotiation" );
 800cfe2:	4a40      	ldr	r2, [pc, #256]	; (800d0e4 <mbedtls_strerror+0x87c>)
 800cfe4:	6879      	ldr	r1, [r7, #4]
 800cfe6:	68b8      	ldr	r0, [r7, #8]
 800cfe8:	f011 fd3a 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED) )
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	f5b3 4fd5 	cmp.w	r3, #27264	; 0x6a80
 800cff2:	d104      	bne.n	800cffe <mbedtls_strerror+0x796>
            mbedtls_snprintf( buf, buflen, "SSL - DTLS client must retry for hello verification" );
 800cff4:	4a3c      	ldr	r2, [pc, #240]	; (800d0e8 <mbedtls_strerror+0x880>)
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	68b8      	ldr	r0, [r7, #8]
 800cffa:	f011 fd31 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL) )
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f5b3 4fd4 	cmp.w	r3, #27136	; 0x6a00
 800d004:	d104      	bne.n	800d010 <mbedtls_strerror+0x7a8>
            mbedtls_snprintf( buf, buflen, "SSL - A buffer is too small to receive or write a message" );
 800d006:	4a39      	ldr	r2, [pc, #228]	; (800d0ec <mbedtls_strerror+0x884>)
 800d008:	6879      	ldr	r1, [r7, #4]
 800d00a:	68b8      	ldr	r0, [r7, #8]
 800d00c:	f011 fd28 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE) )
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	f5b3 4fd3 	cmp.w	r3, #27008	; 0x6980
 800d016:	d104      	bne.n	800d022 <mbedtls_strerror+0x7ba>
            mbedtls_snprintf( buf, buflen, "SSL - None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages)" );
 800d018:	4a35      	ldr	r2, [pc, #212]	; (800d0f0 <mbedtls_strerror+0x888>)
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	68b8      	ldr	r0, [r7, #8]
 800d01e:	f011 fd1f 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_READ) )
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f5b3 4fd2 	cmp.w	r3, #26880	; 0x6900
 800d028:	d104      	bne.n	800d034 <mbedtls_strerror+0x7cc>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a read call" );
 800d02a:	4a32      	ldr	r2, [pc, #200]	; (800d0f4 <mbedtls_strerror+0x88c>)
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	68b8      	ldr	r0, [r7, #8]
 800d030:	f011 fd16 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_WRITE) )
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f5b3 4fd1 	cmp.w	r3, #26752	; 0x6880
 800d03a:	d104      	bne.n	800d046 <mbedtls_strerror+0x7de>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a write call" );
 800d03c:	4a2e      	ldr	r2, [pc, #184]	; (800d0f8 <mbedtls_strerror+0x890>)
 800d03e:	6879      	ldr	r1, [r7, #4]
 800d040:	68b8      	ldr	r0, [r7, #8]
 800d042:	f011 fd0d 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_TIMEOUT) )
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
 800d04c:	d104      	bne.n	800d058 <mbedtls_strerror+0x7f0>
            mbedtls_snprintf( buf, buflen, "SSL - The operation timed out" );
 800d04e:	4a2b      	ldr	r2, [pc, #172]	; (800d0fc <mbedtls_strerror+0x894>)
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	68b8      	ldr	r0, [r7, #8]
 800d054:	f011 fd04 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CLIENT_RECONNECT) )
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	f5b3 4fcf 	cmp.w	r3, #26496	; 0x6780
 800d05e:	d104      	bne.n	800d06a <mbedtls_strerror+0x802>
            mbedtls_snprintf( buf, buflen, "SSL - The client initiated a reconnect from the same port" );
 800d060:	4a27      	ldr	r2, [pc, #156]	; (800d100 <mbedtls_strerror+0x898>)
 800d062:	6879      	ldr	r1, [r7, #4]
 800d064:	68b8      	ldr	r0, [r7, #8]
 800d066:	f011 fcfb 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_RECORD) )
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	f5b3 4fce 	cmp.w	r3, #26368	; 0x6700
 800d070:	d14a      	bne.n	800d108 <mbedtls_strerror+0x8a0>
            mbedtls_snprintf( buf, buflen, "SSL - Record header looks valid but is not expected" );
 800d072:	4a24      	ldr	r2, [pc, #144]	; (800d104 <mbedtls_strerror+0x89c>)
 800d074:	6879      	ldr	r1, [r7, #4]
 800d076:	68b8      	ldr	r0, [r7, #8]
 800d078:	f011 fcf2 	bl	801ea60 <sniprintf>
 800d07c:	e044      	b.n	800d108 <mbedtls_strerror+0x8a0>
 800d07e:	bf00      	nop
 800d080:	0802108c 	.word	0x0802108c
 800d084:	080210b4 	.word	0x080210b4
 800d088:	080210fc 	.word	0x080210fc
 800d08c:	0802113c 	.word	0x0802113c
 800d090:	0802117c 	.word	0x0802117c
 800d094:	080211bc 	.word	0x080211bc
 800d098:	08021200 	.word	0x08021200
 800d09c:	08021244 	.word	0x08021244
 800d0a0:	08021288 	.word	0x08021288
 800d0a4:	080212cc 	.word	0x080212cc
 800d0a8:	0802132c 	.word	0x0802132c
 800d0ac:	08021390 	.word	0x08021390
 800d0b0:	080213d4 	.word	0x080213d4
 800d0b4:	08021418 	.word	0x08021418
 800d0b8:	08021454 	.word	0x08021454
 800d0bc:	08021474 	.word	0x08021474
 800d0c0:	080214b0 	.word	0x080214b0
 800d0c4:	080214f0 	.word	0x080214f0
 800d0c8:	0802152c 	.word	0x0802152c
 800d0cc:	08021564 	.word	0x08021564
 800d0d0:	080215a8 	.word	0x080215a8
 800d0d4:	080215cc 	.word	0x080215cc
 800d0d8:	08021624 	.word	0x08021624
 800d0dc:	08021658 	.word	0x08021658
 800d0e0:	0802169c 	.word	0x0802169c
 800d0e4:	080216dc 	.word	0x080216dc
 800d0e8:	08021718 	.word	0x08021718
 800d0ec:	0802174c 	.word	0x0802174c
 800d0f0:	08021788 	.word	0x08021788
 800d0f4:	080217ec 	.word	0x080217ec
 800d0f8:	08021814 	.word	0x08021814
 800d0fc:	0802183c 	.word	0x0802183c
 800d100:	0802185c 	.word	0x0802185c
 800d104:	08021898 	.word	0x08021898
        if( use_ret == -(MBEDTLS_ERR_SSL_NON_FATAL) )
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f5b3 4fcd 	cmp.w	r3, #26240	; 0x6680
 800d10e:	d104      	bne.n	800d11a <mbedtls_strerror+0x8b2>
            mbedtls_snprintf( buf, buflen, "SSL - The alert message received indicates a non-fatal error" );
 800d110:	4a97      	ldr	r2, [pc, #604]	; (800d370 <mbedtls_strerror+0xb08>)
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	68b8      	ldr	r0, [r7, #8]
 800d116:	f011 fca3 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH) )
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f5b3 4fcc 	cmp.w	r3, #26112	; 0x6600
 800d120:	d104      	bne.n	800d12c <mbedtls_strerror+0x8c4>
            mbedtls_snprintf( buf, buflen, "SSL - Couldn't set the hash for verifying CertificateVerify" );
 800d122:	4a94      	ldr	r2, [pc, #592]	; (800d374 <mbedtls_strerror+0xb0c>)
 800d124:	6879      	ldr	r1, [r7, #4]
 800d126:	68b8      	ldr	r0, [r7, #8]
 800d128:	f011 fc9a 	bl	801ea60 <sniprintf>
#endif /* MBEDTLS_SSL_TLS_C */

#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)
        if( use_ret == -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE) )
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	f5b3 5f02 	cmp.w	r3, #8320	; 0x2080
 800d132:	d104      	bne.n	800d13e <mbedtls_strerror+0x8d6>
            mbedtls_snprintf( buf, buflen, "X509 - Unavailable feature, e.g. RSA hashing/encryption combination" );
 800d134:	4a90      	ldr	r2, [pc, #576]	; (800d378 <mbedtls_strerror+0xb10>)
 800d136:	6879      	ldr	r1, [r7, #4]
 800d138:	68b8      	ldr	r0, [r7, #8]
 800d13a:	f011 fc91 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_OID) )
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
 800d144:	d104      	bne.n	800d150 <mbedtls_strerror+0x8e8>
            mbedtls_snprintf( buf, buflen, "X509 - Requested OID is unknown" );
 800d146:	4a8d      	ldr	r2, [pc, #564]	; (800d37c <mbedtls_strerror+0xb14>)
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	68b8      	ldr	r0, [r7, #8]
 800d14c:	f011 fc88 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_FORMAT) )
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 800d156:	d104      	bne.n	800d162 <mbedtls_strerror+0x8fa>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected" );
 800d158:	4a89      	ldr	r2, [pc, #548]	; (800d380 <mbedtls_strerror+0xb18>)
 800d15a:	6879      	ldr	r1, [r7, #4]
 800d15c:	68b8      	ldr	r0, [r7, #8]
 800d15e:	f011 fc7f 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_VERSION) )
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 800d168:	d104      	bne.n	800d174 <mbedtls_strerror+0x90c>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR version element is invalid" );
 800d16a:	4a86      	ldr	r2, [pc, #536]	; (800d384 <mbedtls_strerror+0xb1c>)
 800d16c:	6879      	ldr	r1, [r7, #4]
 800d16e:	68b8      	ldr	r0, [r7, #8]
 800d170:	f011 fc76 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SERIAL) )
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
 800d17a:	d104      	bne.n	800d186 <mbedtls_strerror+0x91e>
            mbedtls_snprintf( buf, buflen, "X509 - The serial tag or value is invalid" );
 800d17c:	4a82      	ldr	r2, [pc, #520]	; (800d388 <mbedtls_strerror+0xb20>)
 800d17e:	6879      	ldr	r1, [r7, #4]
 800d180:	68b8      	ldr	r0, [r7, #8]
 800d182:	f011 fc6d 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_ALG) )
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800d18c:	d104      	bne.n	800d198 <mbedtls_strerror+0x930>
            mbedtls_snprintf( buf, buflen, "X509 - The algorithm tag or value is invalid" );
 800d18e:	4a7f      	ldr	r2, [pc, #508]	; (800d38c <mbedtls_strerror+0xb24>)
 800d190:	6879      	ldr	r1, [r7, #4]
 800d192:	68b8      	ldr	r0, [r7, #8]
 800d194:	f011 fc64 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_NAME) )
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 800d19e:	d104      	bne.n	800d1aa <mbedtls_strerror+0x942>
            mbedtls_snprintf( buf, buflen, "X509 - The name tag or value is invalid" );
 800d1a0:	4a7b      	ldr	r2, [pc, #492]	; (800d390 <mbedtls_strerror+0xb28>)
 800d1a2:	6879      	ldr	r1, [r7, #4]
 800d1a4:	68b8      	ldr	r0, [r7, #8]
 800d1a6:	f011 fc5b 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_DATE) )
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800d1b0:	d104      	bne.n	800d1bc <mbedtls_strerror+0x954>
            mbedtls_snprintf( buf, buflen, "X509 - The date tag or value is invalid" );
 800d1b2:	4a78      	ldr	r2, [pc, #480]	; (800d394 <mbedtls_strerror+0xb2c>)
 800d1b4:	6879      	ldr	r1, [r7, #4]
 800d1b6:	68b8      	ldr	r0, [r7, #8]
 800d1b8:	f011 fc52 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SIGNATURE) )
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	f5b3 5f12 	cmp.w	r3, #9344	; 0x2480
 800d1c2:	d104      	bne.n	800d1ce <mbedtls_strerror+0x966>
            mbedtls_snprintf( buf, buflen, "X509 - The signature tag or value invalid" );
 800d1c4:	4a74      	ldr	r2, [pc, #464]	; (800d398 <mbedtls_strerror+0xb30>)
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	68b8      	ldr	r0, [r7, #8]
 800d1ca:	f011 fc49 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS) )
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 800d1d4:	d104      	bne.n	800d1e0 <mbedtls_strerror+0x978>
            mbedtls_snprintf( buf, buflen, "X509 - The extension tag or value is invalid" );
 800d1d6:	4a71      	ldr	r2, [pc, #452]	; (800d39c <mbedtls_strerror+0xb34>)
 800d1d8:	6879      	ldr	r1, [r7, #4]
 800d1da:	68b8      	ldr	r0, [r7, #8]
 800d1dc:	f011 fc40 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_VERSION) )
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800d1e6:	d104      	bne.n	800d1f2 <mbedtls_strerror+0x98a>
            mbedtls_snprintf( buf, buflen, "X509 - CRT/CRL/CSR has an unsupported version number" );
 800d1e8:	4a6d      	ldr	r2, [pc, #436]	; (800d3a0 <mbedtls_strerror+0xb38>)
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	68b8      	ldr	r0, [r7, #8]
 800d1ee:	f011 fc37 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG) )
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 800d1f8:	d104      	bne.n	800d204 <mbedtls_strerror+0x99c>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithm (oid) is unsupported" );
 800d1fa:	4a6a      	ldr	r2, [pc, #424]	; (800d3a4 <mbedtls_strerror+0xb3c>)
 800d1fc:	6879      	ldr	r1, [r7, #4]
 800d1fe:	68b8      	ldr	r0, [r7, #8]
 800d200:	f011 fc2e 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_SIG_MISMATCH) )
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	f5b3 5f1a 	cmp.w	r3, #9856	; 0x2680
 800d20a:	d104      	bne.n	800d216 <mbedtls_strerror+0x9ae>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithms do not match. (see \\c ::mbedtls_x509_crt sig_oid)" );
 800d20c:	4a66      	ldr	r2, [pc, #408]	; (800d3a8 <mbedtls_strerror+0xb40>)
 800d20e:	6879      	ldr	r1, [r7, #4]
 800d210:	68b8      	ldr	r0, [r7, #8]
 800d212:	f011 fc25 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) )
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	f5b3 5f1c 	cmp.w	r3, #9984	; 0x2700
 800d21c:	d104      	bne.n	800d228 <mbedtls_strerror+0x9c0>
            mbedtls_snprintf( buf, buflen, "X509 - Certificate verification failed, e.g. CRL, CA or signature check failed" );
 800d21e:	4a63      	ldr	r2, [pc, #396]	; (800d3ac <mbedtls_strerror+0xb44>)
 800d220:	6879      	ldr	r1, [r7, #4]
 800d222:	68b8      	ldr	r0, [r7, #8]
 800d224:	f011 fc1c 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT) )
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	f5b3 5f1e 	cmp.w	r3, #10112	; 0x2780
 800d22e:	d104      	bne.n	800d23a <mbedtls_strerror+0x9d2>
            mbedtls_snprintf( buf, buflen, "X509 - Format not recognized as DER or PEM" );
 800d230:	4a5f      	ldr	r2, [pc, #380]	; (800d3b0 <mbedtls_strerror+0xb48>)
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	68b8      	ldr	r0, [r7, #8]
 800d236:	f011 fc13 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_BAD_INPUT_DATA) )
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d240:	d104      	bne.n	800d24c <mbedtls_strerror+0x9e4>
            mbedtls_snprintf( buf, buflen, "X509 - Input invalid" );
 800d242:	4a5c      	ldr	r2, [pc, #368]	; (800d3b4 <mbedtls_strerror+0xb4c>)
 800d244:	6879      	ldr	r1, [r7, #4]
 800d246:	68b8      	ldr	r0, [r7, #8]
 800d248:	f011 fc0a 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_ALLOC_FAILED) )
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f5b3 5f22 	cmp.w	r3, #10368	; 0x2880
 800d252:	d104      	bne.n	800d25e <mbedtls_strerror+0x9f6>
            mbedtls_snprintf( buf, buflen, "X509 - Allocation of memory failed" );
 800d254:	4a58      	ldr	r2, [pc, #352]	; (800d3b8 <mbedtls_strerror+0xb50>)
 800d256:	6879      	ldr	r1, [r7, #4]
 800d258:	68b8      	ldr	r0, [r7, #8]
 800d25a:	f011 fc01 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FILE_IO_ERROR) )
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
 800d264:	d104      	bne.n	800d270 <mbedtls_strerror+0xa08>
            mbedtls_snprintf( buf, buflen, "X509 - Read/write of file failed" );
 800d266:	4a55      	ldr	r2, [pc, #340]	; (800d3bc <mbedtls_strerror+0xb54>)
 800d268:	6879      	ldr	r1, [r7, #4]
 800d26a:	68b8      	ldr	r0, [r7, #8]
 800d26c:	f011 fbf8 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f5b3 5f26 	cmp.w	r3, #10624	; 0x2980
 800d276:	d104      	bne.n	800d282 <mbedtls_strerror+0xa1a>
            mbedtls_snprintf( buf, buflen, "X509 - Destination buffer is too small" );
 800d278:	4a51      	ldr	r2, [pc, #324]	; (800d3c0 <mbedtls_strerror+0xb58>)
 800d27a:	6879      	ldr	r1, [r7, #4]
 800d27c:	68b8      	ldr	r0, [r7, #8]
 800d27e:	f011 fbef 	bl	801ea60 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d288:	d104      	bne.n	800d294 <mbedtls_strerror+0xa2c>
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
 800d28a:	4a4e      	ldr	r2, [pc, #312]	; (800d3c4 <mbedtls_strerror+0xb5c>)
 800d28c:	6879      	ldr	r1, [r7, #4]
 800d28e:	68b8      	ldr	r0, [r7, #8]
 800d290:	f011 fbe6 	bl	801ea60 <sniprintf>
#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */
        // END generated code

        if( strlen( buf ) == 0 )
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d105      	bne.n	800d2a8 <mbedtls_strerror+0xa40>
            mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	4a4a      	ldr	r2, [pc, #296]	; (800d3c8 <mbedtls_strerror+0xb60>)
 800d2a0:	6879      	ldr	r1, [r7, #4]
 800d2a2:	68b8      	ldr	r0, [r7, #8]
 800d2a4:	f011 fbdc 	bl	801ea60 <sniprintf>
    }

    use_ret = ret & ~0xFF80;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d2ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2b2:	617b      	str	r3, [r7, #20]

    if( use_ret == 0 )
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f000 8165 	beq.w	800d586 <mbedtls_strerror+0xd1e>
        return;

    // If high level code is present, make a concatenation between both
    // error strings.
    //
    len = strlen( buf );
 800d2bc:	68b8      	ldr	r0, [r7, #8]
 800d2be:	f7f2 ff91 	bl	80001e4 <strlen>
 800d2c2:	6138      	str	r0, [r7, #16]

    if( len > 0 )
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d019      	beq.n	800d2fe <mbedtls_strerror+0xa96>
    {
        if( buflen - len < 5 )
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	2b04      	cmp	r3, #4
 800d2d2:	f240 815a 	bls.w	800d58a <mbedtls_strerror+0xd22>
            return;

        mbedtls_snprintf( buf + len, buflen - len, " : " );
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	18d0      	adds	r0, r2, r3
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	4a3a      	ldr	r2, [pc, #232]	; (800d3cc <mbedtls_strerror+0xb64>)
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	f011 fbbb 	bl	801ea60 <sniprintf>

        buf += len + 3;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	3303      	adds	r3, #3
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	60bb      	str	r3, [r7, #8]
        buflen -= len + 3;
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	3b03      	subs	r3, #3
 800d2fc:	607b      	str	r3, [r7, #4]

    // Low level error codes
    //
    // BEGIN generated code
#if defined(MBEDTLS_AES_C)
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH) )
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	2b20      	cmp	r3, #32
 800d302:	d104      	bne.n	800d30e <mbedtls_strerror+0xaa6>
        mbedtls_snprintf( buf, buflen, "AES - Invalid key length" );
 800d304:	4a32      	ldr	r2, [pc, #200]	; (800d3d0 <mbedtls_strerror+0xb68>)
 800d306:	6879      	ldr	r1, [r7, #4]
 800d308:	68b8      	ldr	r0, [r7, #8]
 800d30a:	f011 fba9 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH) )
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2b22      	cmp	r3, #34	; 0x22
 800d312:	d104      	bne.n	800d31e <mbedtls_strerror+0xab6>
        mbedtls_snprintf( buf, buflen, "AES - Invalid data input length" );
 800d314:	4a2f      	ldr	r2, [pc, #188]	; (800d3d4 <mbedtls_strerror+0xb6c>)
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	68b8      	ldr	r0, [r7, #8]
 800d31a:	f011 fba1 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE) )
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	2b23      	cmp	r3, #35	; 0x23
 800d322:	d104      	bne.n	800d32e <mbedtls_strerror+0xac6>
        mbedtls_snprintf( buf, buflen, "AES - Feature not available. For example, an unsupported AES key size" );
 800d324:	4a2c      	ldr	r2, [pc, #176]	; (800d3d8 <mbedtls_strerror+0xb70>)
 800d326:	6879      	ldr	r1, [r7, #4]
 800d328:	68b8      	ldr	r0, [r7, #8]
 800d32a:	f011 fb99 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_HW_ACCEL_FAILED) )
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2b25      	cmp	r3, #37	; 0x25
 800d332:	d104      	bne.n	800d33e <mbedtls_strerror+0xad6>
        mbedtls_snprintf( buf, buflen, "AES - AES hardware accelerator failed" );
 800d334:	4a29      	ldr	r2, [pc, #164]	; (800d3dc <mbedtls_strerror+0xb74>)
 800d336:	6879      	ldr	r1, [r7, #4]
 800d338:	68b8      	ldr	r0, [r7, #8]
 800d33a:	f011 fb91 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ARC4_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "ARC4 - ARC4 hardware accelerator failed" );
#endif /* MBEDTLS_ARC4_C */

#if defined(MBEDTLS_ASN1_PARSE_C)
    if( use_ret == -(MBEDTLS_ERR_ASN1_OUT_OF_DATA) )
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	2b60      	cmp	r3, #96	; 0x60
 800d342:	d104      	bne.n	800d34e <mbedtls_strerror+0xae6>
        mbedtls_snprintf( buf, buflen, "ASN1 - Out of data when parsing an ASN1 data structure" );
 800d344:	4a26      	ldr	r2, [pc, #152]	; (800d3e0 <mbedtls_strerror+0xb78>)
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	68b8      	ldr	r0, [r7, #8]
 800d34a:	f011 fb89 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) )
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	2b62      	cmp	r3, #98	; 0x62
 800d352:	d104      	bne.n	800d35e <mbedtls_strerror+0xaf6>
        mbedtls_snprintf( buf, buflen, "ASN1 - ASN1 tag was of an unexpected value" );
 800d354:	4a23      	ldr	r2, [pc, #140]	; (800d3e4 <mbedtls_strerror+0xb7c>)
 800d356:	6879      	ldr	r1, [r7, #4]
 800d358:	68b8      	ldr	r0, [r7, #8]
 800d35a:	f011 fb81 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_LENGTH) )
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2b64      	cmp	r3, #100	; 0x64
 800d362:	d143      	bne.n	800d3ec <mbedtls_strerror+0xb84>
        mbedtls_snprintf( buf, buflen, "ASN1 - Error when trying to determine the length or invalid length" );
 800d364:	4a20      	ldr	r2, [pc, #128]	; (800d3e8 <mbedtls_strerror+0xb80>)
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	68b8      	ldr	r0, [r7, #8]
 800d36a:	f011 fb79 	bl	801ea60 <sniprintf>
 800d36e:	e03d      	b.n	800d3ec <mbedtls_strerror+0xb84>
 800d370:	080218cc 	.word	0x080218cc
 800d374:	0802190c 	.word	0x0802190c
 800d378:	08021948 	.word	0x08021948
 800d37c:	0802198c 	.word	0x0802198c
 800d380:	080219ac 	.word	0x080219ac
 800d384:	080219f4 	.word	0x080219f4
 800d388:	08021a28 	.word	0x08021a28
 800d38c:	08021a54 	.word	0x08021a54
 800d390:	08021a84 	.word	0x08021a84
 800d394:	08021aac 	.word	0x08021aac
 800d398:	08021ad4 	.word	0x08021ad4
 800d39c:	08021b00 	.word	0x08021b00
 800d3a0:	08021b30 	.word	0x08021b30
 800d3a4:	08021b68 	.word	0x08021b68
 800d3a8:	08021b98 	.word	0x08021b98
 800d3ac:	08021be8 	.word	0x08021be8
 800d3b0:	08021c38 	.word	0x08021c38
 800d3b4:	08021c64 	.word	0x08021c64
 800d3b8:	08021c7c 	.word	0x08021c7c
 800d3bc:	08021ca0 	.word	0x08021ca0
 800d3c0:	08021cc4 	.word	0x08021cc4
 800d3c4:	08021cec 	.word	0x08021cec
 800d3c8:	08021d40 	.word	0x08021d40
 800d3cc:	08021d5c 	.word	0x08021d5c
 800d3d0:	08021d60 	.word	0x08021d60
 800d3d4:	08021d7c 	.word	0x08021d7c
 800d3d8:	08021d9c 	.word	0x08021d9c
 800d3dc:	08021de4 	.word	0x08021de4
 800d3e0:	08021e0c 	.word	0x08021e0c
 800d3e4:	08021e44 	.word	0x08021e44
 800d3e8:	08021e70 	.word	0x08021e70
    if( use_ret == -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH) )
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	2b66      	cmp	r3, #102	; 0x66
 800d3f0:	d104      	bne.n	800d3fc <mbedtls_strerror+0xb94>
        mbedtls_snprintf( buf, buflen, "ASN1 - Actual length differs from expected length" );
 800d3f2:	4a69      	ldr	r2, [pc, #420]	; (800d598 <mbedtls_strerror+0xd30>)
 800d3f4:	6879      	ldr	r1, [r7, #4]
 800d3f6:	68b8      	ldr	r0, [r7, #8]
 800d3f8:	f011 fb32 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_DATA) )
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	2b68      	cmp	r3, #104	; 0x68
 800d400:	d104      	bne.n	800d40c <mbedtls_strerror+0xba4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Data is invalid. (not used)" );
 800d402:	4a66      	ldr	r2, [pc, #408]	; (800d59c <mbedtls_strerror+0xd34>)
 800d404:	6879      	ldr	r1, [r7, #4]
 800d406:	68b8      	ldr	r0, [r7, #8]
 800d408:	f011 fb2a 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_ALLOC_FAILED) )
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	2b6a      	cmp	r3, #106	; 0x6a
 800d410:	d104      	bne.n	800d41c <mbedtls_strerror+0xbb4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Memory allocation failed" );
 800d412:	4a63      	ldr	r2, [pc, #396]	; (800d5a0 <mbedtls_strerror+0xd38>)
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	68b8      	ldr	r0, [r7, #8]
 800d418:	f011 fb22 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL) )
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2b6c      	cmp	r3, #108	; 0x6c
 800d420:	d104      	bne.n	800d42c <mbedtls_strerror+0xbc4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Buffer too small when writing ASN.1 data structure" );
 800d422:	4a60      	ldr	r2, [pc, #384]	; (800d5a4 <mbedtls_strerror+0xd3c>)
 800d424:	6879      	ldr	r1, [r7, #4]
 800d426:	68b8      	ldr	r0, [r7, #8]
 800d428:	f011 fb1a 	bl	801ea60 <sniprintf>
#endif /* MBEDTLS_ASN1_PARSE_C */

#if defined(MBEDTLS_BASE64_C)
    if( use_ret == -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL) )
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	2b2a      	cmp	r3, #42	; 0x2a
 800d430:	d104      	bne.n	800d43c <mbedtls_strerror+0xbd4>
        mbedtls_snprintf( buf, buflen, "BASE64 - Output buffer too small" );
 800d432:	4a5d      	ldr	r2, [pc, #372]	; (800d5a8 <mbedtls_strerror+0xd40>)
 800d434:	6879      	ldr	r1, [r7, #4]
 800d436:	68b8      	ldr	r0, [r7, #8]
 800d438:	f011 fb12 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER) )
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	2b2c      	cmp	r3, #44	; 0x2c
 800d440:	d104      	bne.n	800d44c <mbedtls_strerror+0xbe4>
        mbedtls_snprintf( buf, buflen, "BASE64 - Invalid character in input" );
 800d442:	4a5a      	ldr	r2, [pc, #360]	; (800d5ac <mbedtls_strerror+0xd44>)
 800d444:	6879      	ldr	r1, [r7, #4]
 800d446:	68b8      	ldr	r0, [r7, #8]
 800d448:	f011 fb0a 	bl	801ea60 <sniprintf>
#endif /* MBEDTLS_BASE64_C */

#if defined(MBEDTLS_BIGNUM_C)
    if( use_ret == -(MBEDTLS_ERR_MPI_FILE_IO_ERROR) )
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d104      	bne.n	800d45c <mbedtls_strerror+0xbf4>
        mbedtls_snprintf( buf, buflen, "BIGNUM - An error occurred while reading from or writing to a file" );
 800d452:	4a57      	ldr	r2, [pc, #348]	; (800d5b0 <mbedtls_strerror+0xd48>)
 800d454:	6879      	ldr	r1, [r7, #4]
 800d456:	68b8      	ldr	r0, [r7, #8]
 800d458:	f011 fb02 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA) )
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	2b04      	cmp	r3, #4
 800d460:	d104      	bne.n	800d46c <mbedtls_strerror+0xc04>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Bad input parameters to function" );
 800d462:	4a54      	ldr	r2, [pc, #336]	; (800d5b4 <mbedtls_strerror+0xd4c>)
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	68b8      	ldr	r0, [r7, #8]
 800d468:	f011 fafa 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_INVALID_CHARACTER) )
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	2b06      	cmp	r3, #6
 800d470:	d104      	bne.n	800d47c <mbedtls_strerror+0xc14>
        mbedtls_snprintf( buf, buflen, "BIGNUM - There is an invalid character in the digit string" );
 800d472:	4a51      	ldr	r2, [pc, #324]	; (800d5b8 <mbedtls_strerror+0xd50>)
 800d474:	6879      	ldr	r1, [r7, #4]
 800d476:	68b8      	ldr	r0, [r7, #8]
 800d478:	f011 faf2 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL) )
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	2b08      	cmp	r3, #8
 800d480:	d104      	bne.n	800d48c <mbedtls_strerror+0xc24>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The buffer is too small to write to" );
 800d482:	4a4e      	ldr	r2, [pc, #312]	; (800d5bc <mbedtls_strerror+0xd54>)
 800d484:	6879      	ldr	r1, [r7, #4]
 800d486:	68b8      	ldr	r0, [r7, #8]
 800d488:	f011 faea 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE) )
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b0a      	cmp	r3, #10
 800d490:	d104      	bne.n	800d49c <mbedtls_strerror+0xc34>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are negative or result in illegal output" );
 800d492:	4a4b      	ldr	r2, [pc, #300]	; (800d5c0 <mbedtls_strerror+0xd58>)
 800d494:	6879      	ldr	r1, [r7, #4]
 800d496:	68b8      	ldr	r0, [r7, #8]
 800d498:	f011 fae2 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO) )
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b0c      	cmp	r3, #12
 800d4a0:	d104      	bne.n	800d4ac <mbedtls_strerror+0xc44>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input argument for division is zero, which is not allowed" );
 800d4a2:	4a48      	ldr	r2, [pc, #288]	; (800d5c4 <mbedtls_strerror+0xd5c>)
 800d4a4:	6879      	ldr	r1, [r7, #4]
 800d4a6:	68b8      	ldr	r0, [r7, #8]
 800d4a8:	f011 fada 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE) )
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	2b0e      	cmp	r3, #14
 800d4b0:	d104      	bne.n	800d4bc <mbedtls_strerror+0xc54>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are not acceptable" );
 800d4b2:	4a45      	ldr	r2, [pc, #276]	; (800d5c8 <mbedtls_strerror+0xd60>)
 800d4b4:	6879      	ldr	r1, [r7, #4]
 800d4b6:	68b8      	ldr	r0, [r7, #8]
 800d4b8:	f011 fad2 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_ALLOC_FAILED) )
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	2b10      	cmp	r3, #16
 800d4c0:	d104      	bne.n	800d4cc <mbedtls_strerror+0xc64>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Memory allocation failed" );
 800d4c2:	4a42      	ldr	r2, [pc, #264]	; (800d5cc <mbedtls_strerror+0xd64>)
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	68b8      	ldr	r0, [r7, #8]
 800d4c8:	f011 faca 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CMAC_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "CMAC - CMAC hardware accelerator failed" );
#endif /* MBEDTLS_CMAC_C */

#if defined(MBEDTLS_CTR_DRBG_C)
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED) )
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	2b34      	cmp	r3, #52	; 0x34
 800d4d0:	d104      	bne.n	800d4dc <mbedtls_strerror+0xc74>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The entropy source failed" );
 800d4d2:	4a3f      	ldr	r2, [pc, #252]	; (800d5d0 <mbedtls_strerror+0xd68>)
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	68b8      	ldr	r0, [r7, #8]
 800d4d8:	f011 fac2 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG) )
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	2b36      	cmp	r3, #54	; 0x36
 800d4e0:	d104      	bne.n	800d4ec <mbedtls_strerror+0xc84>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The requested random buffer length is too big" );
 800d4e2:	4a3c      	ldr	r2, [pc, #240]	; (800d5d4 <mbedtls_strerror+0xd6c>)
 800d4e4:	6879      	ldr	r1, [r7, #4]
 800d4e6:	68b8      	ldr	r0, [r7, #8]
 800d4e8:	f011 faba 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG) )
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	2b38      	cmp	r3, #56	; 0x38
 800d4f0:	d104      	bne.n	800d4fc <mbedtls_strerror+0xc94>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The input (entropy + additional data) is too large" );
 800d4f2:	4a39      	ldr	r2, [pc, #228]	; (800d5d8 <mbedtls_strerror+0xd70>)
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	68b8      	ldr	r0, [r7, #8]
 800d4f8:	f011 fab2 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR) )
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2b3a      	cmp	r3, #58	; 0x3a
 800d500:	d104      	bne.n	800d50c <mbedtls_strerror+0xca4>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - Read or write error in file" );
 800d502:	4a36      	ldr	r2, [pc, #216]	; (800d5dc <mbedtls_strerror+0xd74>)
 800d504:	6879      	ldr	r1, [r7, #4]
 800d506:	68b8      	ldr	r0, [r7, #8]
 800d508:	f011 faaa 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR) )
        mbedtls_snprintf( buf, buflen, "ENTROPY - Read/write error in file" );
#endif /* MBEDTLS_ENTROPY_C */

#if defined(MBEDTLS_GCM_C)
    if( use_ret == -(MBEDTLS_ERR_GCM_AUTH_FAILED) )
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	2b12      	cmp	r3, #18
 800d510:	d104      	bne.n	800d51c <mbedtls_strerror+0xcb4>
        mbedtls_snprintf( buf, buflen, "GCM - Authenticated decryption failed" );
 800d512:	4a33      	ldr	r2, [pc, #204]	; (800d5e0 <mbedtls_strerror+0xd78>)
 800d514:	6879      	ldr	r1, [r7, #4]
 800d516:	68b8      	ldr	r0, [r7, #8]
 800d518:	f011 faa2 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_GCM_HW_ACCEL_FAILED) )
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	2b13      	cmp	r3, #19
 800d520:	d104      	bne.n	800d52c <mbedtls_strerror+0xcc4>
        mbedtls_snprintf( buf, buflen, "GCM - GCM hardware accelerator failed" );
 800d522:	4a30      	ldr	r2, [pc, #192]	; (800d5e4 <mbedtls_strerror+0xd7c>)
 800d524:	6879      	ldr	r1, [r7, #4]
 800d526:	68b8      	ldr	r0, [r7, #8]
 800d528:	f011 fa9a 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_GCM_BAD_INPUT) )
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	2b14      	cmp	r3, #20
 800d530:	d104      	bne.n	800d53c <mbedtls_strerror+0xcd4>
        mbedtls_snprintf( buf, buflen, "GCM - Bad input parameters to function" );
 800d532:	4a2d      	ldr	r2, [pc, #180]	; (800d5e8 <mbedtls_strerror+0xd80>)
 800d534:	6879      	ldr	r1, [r7, #4]
 800d536:	68b8      	ldr	r0, [r7, #8]
 800d538:	f011 fa92 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_NET_INVALID_CONTEXT) )
        mbedtls_snprintf( buf, buflen, "NET - The context is invalid, eg because it was free()ed" );
#endif /* MBEDTLS_NET_C */

#if defined(MBEDTLS_OID_C)
    if( use_ret == -(MBEDTLS_ERR_OID_NOT_FOUND) )
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	2b2e      	cmp	r3, #46	; 0x2e
 800d540:	d104      	bne.n	800d54c <mbedtls_strerror+0xce4>
        mbedtls_snprintf( buf, buflen, "OID - OID is not found" );
 800d542:	4a2a      	ldr	r2, [pc, #168]	; (800d5ec <mbedtls_strerror+0xd84>)
 800d544:	6879      	ldr	r1, [r7, #4]
 800d546:	68b8      	ldr	r0, [r7, #8]
 800d548:	f011 fa8a 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_OID_BUF_TOO_SMALL) )
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	2b0b      	cmp	r3, #11
 800d550:	d104      	bne.n	800d55c <mbedtls_strerror+0xcf4>
        mbedtls_snprintf( buf, buflen, "OID - output buffer is too small" );
 800d552:	4a27      	ldr	r2, [pc, #156]	; (800d5f0 <mbedtls_strerror+0xd88>)
 800d554:	6879      	ldr	r1, [r7, #4]
 800d556:	68b8      	ldr	r0, [r7, #8]
 800d558:	f011 fa82 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_SHA1_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "SHA1 - SHA-1 hardware accelerator failed" );
#endif /* MBEDTLS_SHA1_C */

#if defined(MBEDTLS_SHA256_C)
    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	2b37      	cmp	r3, #55	; 0x37
 800d560:	d104      	bne.n	800d56c <mbedtls_strerror+0xd04>
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 hardware accelerator failed" );
 800d562:	4a24      	ldr	r2, [pc, #144]	; (800d5f4 <mbedtls_strerror+0xd8c>)
 800d564:	6879      	ldr	r1, [r7, #4]
 800d566:	68b8      	ldr	r0, [r7, #8]
 800d568:	f011 fa7a 	bl	801ea60 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "XTEA - XTEA hardware accelerator failed" );
#endif /* MBEDTLS_XTEA_C */
    // END generated code

    if( strlen( buf ) != 0 )
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d10c      	bne.n	800d58e <mbedtls_strerror+0xd26>
        return;

    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	4a20      	ldr	r2, [pc, #128]	; (800d5f8 <mbedtls_strerror+0xd90>)
 800d578:	6879      	ldr	r1, [r7, #4]
 800d57a:	68b8      	ldr	r0, [r7, #8]
 800d57c:	f011 fa70 	bl	801ea60 <sniprintf>
 800d580:	e006      	b.n	800d590 <mbedtls_strerror+0xd28>
        return;
 800d582:	bf00      	nop
 800d584:	e004      	b.n	800d590 <mbedtls_strerror+0xd28>
        return;
 800d586:	bf00      	nop
 800d588:	e002      	b.n	800d590 <mbedtls_strerror+0xd28>
            return;
 800d58a:	bf00      	nop
 800d58c:	e000      	b.n	800d590 <mbedtls_strerror+0xd28>
        return;
 800d58e:	bf00      	nop
}
 800d590:	3718      	adds	r7, #24
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	08021eb4 	.word	0x08021eb4
 800d59c:	08021ee8 	.word	0x08021ee8
 800d5a0:	08021f0c 	.word	0x08021f0c
 800d5a4:	08021f2c 	.word	0x08021f2c
 800d5a8:	08021f68 	.word	0x08021f68
 800d5ac:	08021f8c 	.word	0x08021f8c
 800d5b0:	08021fb0 	.word	0x08021fb0
 800d5b4:	08021ff4 	.word	0x08021ff4
 800d5b8:	08022020 	.word	0x08022020
 800d5bc:	0802205c 	.word	0x0802205c
 800d5c0:	0802208c 	.word	0x0802208c
 800d5c4:	080220d4 	.word	0x080220d4
 800d5c8:	0802211c 	.word	0x0802211c
 800d5cc:	0802214c 	.word	0x0802214c
 800d5d0:	08022170 	.word	0x08022170
 800d5d4:	08022198 	.word	0x08022198
 800d5d8:	080221d4 	.word	0x080221d4
 800d5dc:	08022214 	.word	0x08022214
 800d5e0:	0802223c 	.word	0x0802223c
 800d5e4:	08022264 	.word	0x08022264
 800d5e8:	0802228c 	.word	0x0802228c
 800d5ec:	080222b4 	.word	0x080222b4
 800d5f0:	080222cc 	.word	0x080222cc
 800d5f4:	080222f0 	.word	0x080222f0
 800d5f8:	08021d40 	.word	0x08021d40

0800d5fc <mbedtls_zeroize>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	60fb      	str	r3, [r7, #12]
 800d60a:	e004      	b.n	800d616 <mbedtls_zeroize+0x1a>
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	1c5a      	adds	r2, r3, #1
 800d610:	60fa      	str	r2, [r7, #12]
 800d612:	2200      	movs	r2, #0
 800d614:	701a      	strb	r2, [r3, #0]
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	1e5a      	subs	r2, r3, #1
 800d61a:	603a      	str	r2, [r7, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1f5      	bne.n	800d60c <mbedtls_zeroize+0x10>
}
 800d620:	bf00      	nop
 800d622:	bf00      	nop
 800d624:	3714      	adds	r7, #20
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr

0800d62e <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b082      	sub	sp, #8
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 800d636:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800d63a:	2100      	movs	r1, #0
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f010 fff1 	bl	801e624 <memset>
}
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table( mbedtls_gcm_context *ctx )
{
 800d64a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d64e:	b0a8      	sub	sp, #160	; 0xa0
 800d650:	af02      	add	r7, sp, #8
 800d652:	6478      	str	r0, [r7, #68]	; 0x44
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 800d654:	2300      	movs	r3, #0
 800d656:	64bb      	str	r3, [r7, #72]	; 0x48

    memset( h, 0, 16 );
 800d658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d65c:	2210      	movs	r2, #16
 800d65e:	2100      	movs	r1, #0
 800d660:	4618      	mov	r0, r3
 800d662:	f010 ffdf 	bl	801e624 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 800d666:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d668:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d66c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800d670:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	4613      	mov	r3, r2
 800d678:	2210      	movs	r2, #16
 800d67a:	f7fd ff7f 	bl	800b57c <mbedtls_cipher_update>
 800d67e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800d680:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <gcm_gen_table+0x40>
        return( ret );
 800d686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d688:	e154      	b.n	800d934 <gcm_gen_table+0x2ea>

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
 800d68a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d68e:	061a      	lsls	r2, r3, #24
 800d690:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d694:	041b      	lsls	r3, r3, #16
 800d696:	431a      	orrs	r2, r3
 800d698:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d69c:	021b      	lsls	r3, r3, #8
 800d69e:	431a      	orrs	r2, r3
 800d6a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	4698      	mov	r8, r3
 800d6aa:	4691      	mov	r9, r2
 800d6ac:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
    GET_UINT32_BE( lo, h,  4  );
 800d6b0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d6b4:	061a      	lsls	r2, r3, #24
 800d6b6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800d6ba:	041b      	lsls	r3, r3, #16
 800d6bc:	431a      	orrs	r2, r3
 800d6be:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800d6c2:	021b      	lsls	r3, r3, #8
 800d6c4:	431a      	orrs	r2, r3
 800d6c6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	623b      	str	r3, [r7, #32]
 800d6d0:	627a      	str	r2, [r7, #36]	; 0x24
 800d6d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d6d6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    vh = (uint64_t) hi << 32 | lo;
 800d6da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d6de:	f04f 0000 	mov.w	r0, #0
 800d6e2:	f04f 0100 	mov.w	r1, #0
 800d6e6:	0011      	movs	r1, r2
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d6ee:	ea42 0400 	orr.w	r4, r2, r0
 800d6f2:	ea43 0501 	orr.w	r5, r3, r1
 800d6f6:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80

    GET_UINT32_BE( hi, h,  8  );
 800d6fa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d6fe:	061a      	lsls	r2, r3, #24
 800d700:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800d704:	041b      	lsls	r3, r3, #16
 800d706:	431a      	orrs	r2, r3
 800d708:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800d70c:	021b      	lsls	r3, r3, #8
 800d70e:	431a      	orrs	r2, r3
 800d710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d714:	4313      	orrs	r3, r2
 800d716:	2200      	movs	r2, #0
 800d718:	61bb      	str	r3, [r7, #24]
 800d71a:	61fa      	str	r2, [r7, #28]
 800d71c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d720:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    GET_UINT32_BE( lo, h,  12 );
 800d724:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800d728:	061a      	lsls	r2, r3, #24
 800d72a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800d72e:	041b      	lsls	r3, r3, #16
 800d730:	431a      	orrs	r2, r3
 800d732:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800d736:	021b      	lsls	r3, r3, #8
 800d738:	431a      	orrs	r2, r3
 800d73a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d73e:	4313      	orrs	r3, r2
 800d740:	2200      	movs	r2, #0
 800d742:	613b      	str	r3, [r7, #16]
 800d744:	617a      	str	r2, [r7, #20]
 800d746:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d74a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    vl = (uint64_t) hi << 32 | lo;
 800d74e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d752:	f04f 0000 	mov.w	r0, #0
 800d756:	f04f 0100 	mov.w	r1, #0
 800d75a:	0011      	movs	r1, r2
 800d75c:	2000      	movs	r0, #0
 800d75e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d762:	ea42 0a00 	orr.w	sl, r2, r0
 800d766:	ea43 0b01 	orr.w	fp, r3, r1
 800d76a:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 800d76e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d770:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d774:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    ctx->HH[8] = vh;
 800d778:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d77a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d77e:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 800d782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d784:	f04f 0200 	mov.w	r2, #0
 800d788:	f04f 0300 	mov.w	r3, #0
 800d78c:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    ctx->HL[0] = 0;
 800d790:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d792:	f04f 0200 	mov.w	r2, #0
 800d796:	f04f 0300 	mov.w	r3, #0
 800d79a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    for( i = 4; i > 0; i >>= 1 )
 800d79e:	2304      	movs	r3, #4
 800d7a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d7a4:	e05b      	b.n	800d85e <gcm_gen_table+0x214>
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 800d7a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d7aa:	f003 0201 	and.w	r2, r3, #1
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	0152      	lsls	r2, r2, #5
 800d7b2:	1a9b      	subs	r3, r3, r2
 800d7b4:	061b      	lsls	r3, r3, #24
 800d7b6:	65fb      	str	r3, [r7, #92]	; 0x5c
        vl  = ( vh << 63 ) | ( vl >> 1 );
 800d7b8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d7bc:	f04f 0400 	mov.w	r4, #0
 800d7c0:	f04f 0500 	mov.w	r5, #0
 800d7c4:	07d5      	lsls	r5, r2, #31
 800d7c6:	2400      	movs	r4, #0
 800d7c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d7cc:	f04f 0000 	mov.w	r0, #0
 800d7d0:	f04f 0100 	mov.w	r1, #0
 800d7d4:	0850      	lsrs	r0, r2, #1
 800d7d6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d7da:	0859      	lsrs	r1, r3, #1
 800d7dc:	ea44 0300 	orr.w	r3, r4, r0
 800d7e0:	60bb      	str	r3, [r7, #8]
 800d7e2:	ea45 0301 	orr.w	r3, r5, r1
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d7ec:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 800d7f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d7f4:	f04f 0000 	mov.w	r0, #0
 800d7f8:	f04f 0100 	mov.w	r1, #0
 800d7fc:	0850      	lsrs	r0, r2, #1
 800d7fe:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d802:	0859      	lsrs	r1, r3, #1
 800d804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d806:	2200      	movs	r2, #0
 800d808:	63bb      	str	r3, [r7, #56]	; 0x38
 800d80a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d80c:	f04f 0200 	mov.w	r2, #0
 800d810:	f04f 0300 	mov.w	r3, #0
 800d814:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d816:	0023      	movs	r3, r4
 800d818:	2200      	movs	r2, #0
 800d81a:	ea80 0402 	eor.w	r4, r0, r2
 800d81e:	603c      	str	r4, [r7, #0]
 800d820:	404b      	eors	r3, r1
 800d822:	607b      	str	r3, [r7, #4]
 800d824:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d828:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

        ctx->HL[i] = vl;
 800d82c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d82e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d832:	3308      	adds	r3, #8
 800d834:	00db      	lsls	r3, r3, #3
 800d836:	18d1      	adds	r1, r2, r3
 800d838:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d83c:	e9c1 2300 	strd	r2, r3, [r1]
        ctx->HH[i] = vh;
 800d840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d842:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d846:	3318      	adds	r3, #24
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	18d1      	adds	r1, r2, r3
 800d84c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d850:	e9c1 2300 	strd	r2, r3, [r1]
    for( i = 4; i > 0; i >>= 1 )
 800d854:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d858:	105b      	asrs	r3, r3, #1
 800d85a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d85e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d862:	2b00      	cmp	r3, #0
 800d864:	dc9f      	bgt.n	800d7a6 <gcm_gen_table+0x15c>
    }

    for( i = 2; i <= 8; i *= 2 )
 800d866:	2302      	movs	r3, #2
 800d868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d86c:	e05d      	b.n	800d92a <gcm_gen_table+0x2e0>
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 800d86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d870:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800d874:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d878:	00db      	lsls	r3, r3, #3
 800d87a:	4413      	add	r3, r2
 800d87c:	667b      	str	r3, [r7, #100]	; 0x64
 800d87e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d880:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800d884:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d888:	00db      	lsls	r3, r3, #3
 800d88a:	4413      	add	r3, r2
 800d88c:	663b      	str	r3, [r7, #96]	; 0x60
        vh = *HiH;
 800d88e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d894:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
        vl = *HiL;
 800d898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        for( j = 1; j < i; j++ )
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d8a8:	e034      	b.n	800d914 <gcm_gen_table+0x2ca>
        {
            HiH[j] = vh ^ ctx->HH[j];
 800d8aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8b0:	3318      	adds	r3, #24
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	4413      	add	r3, r2
 800d8b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8be:	00db      	lsls	r3, r3, #3
 800d8c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8c2:	18d4      	adds	r4, r2, r3
 800d8c4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d8c8:	ea80 0502 	eor.w	r5, r0, r2
 800d8cc:	633d      	str	r5, [r7, #48]	; 0x30
 800d8ce:	404b      	eors	r3, r1
 800d8d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d8d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d8d6:	e9c4 2300 	strd	r2, r3, [r4]
            HiL[j] = vl ^ ctx->HL[j];
 800d8da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	00db      	lsls	r3, r3, #3
 800d8e4:	4413      	add	r3, r2
 800d8e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8ee:	00db      	lsls	r3, r3, #3
 800d8f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d8f2:	18d4      	adds	r4, r2, r3
 800d8f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d8f8:	ea80 0502 	eor.w	r5, r0, r2
 800d8fc:	62bd      	str	r5, [r7, #40]	; 0x28
 800d8fe:	404b      	eors	r3, r1
 800d900:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d906:	e9c4 2300 	strd	r2, r3, [r4]
        for( j = 1; j < i; j++ )
 800d90a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d90e:	3301      	adds	r3, #1
 800d910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d914:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d918:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d91c:	429a      	cmp	r2, r3
 800d91e:	dbc4      	blt.n	800d8aa <gcm_gen_table+0x260>
    for( i = 2; i <= 8; i *= 2 )
 800d920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d92a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d92e:	2b08      	cmp	r3, #8
 800d930:	dd9d      	ble.n	800d86e <gcm_gen_table+0x224>
        }
    }

    return( 0 );
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3798      	adds	r7, #152	; 0x98
 800d938:	46bd      	mov	sp, r7
 800d93a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d93e <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 800d93e:	b580      	push	{r7, lr}
 800d940:	b086      	sub	sp, #24
 800d942:	af00      	add	r7, sp, #0
 800d944:	60f8      	str	r0, [r7, #12]
 800d946:	607a      	str	r2, [r7, #4]
 800d948:	603b      	str	r3, [r7, #0]
 800d94a:	460b      	mov	r3, r1
 800d94c:	72fb      	strb	r3, [r7, #11]
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	7afb      	ldrb	r3, [r7, #11]
 800d952:	2201      	movs	r2, #1
 800d954:	4618      	mov	r0, r3
 800d956:	f7fd fcd5 	bl	800b304 <mbedtls_cipher_info_from_values>
 800d95a:	6178      	str	r0, [r7, #20]
    if( cipher_info == NULL )
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d102      	bne.n	800d968 <mbedtls_gcm_setkey+0x2a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d962:	f06f 0313 	mvn.w	r3, #19
 800d966:	e02b      	b.n	800d9c0 <mbedtls_gcm_setkey+0x82>

    if( cipher_info->block_size != 16 )
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	695b      	ldr	r3, [r3, #20]
 800d96c:	2b10      	cmp	r3, #16
 800d96e:	d002      	beq.n	800d976 <mbedtls_gcm_setkey+0x38>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d970:	f06f 0313 	mvn.w	r3, #19
 800d974:	e024      	b.n	800d9c0 <mbedtls_gcm_setkey+0x82>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fd fd02 	bl	800b382 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	6979      	ldr	r1, [r7, #20]
 800d982:	4618      	mov	r0, r3
 800d984:	f7fd fd1a 	bl	800b3bc <mbedtls_cipher_setup>
 800d988:	6138      	str	r0, [r7, #16]
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <mbedtls_gcm_setkey+0x56>
        return( ret );
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	e015      	b.n	800d9c0 <mbedtls_gcm_setkey+0x82>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	2301      	movs	r3, #1
 800d99a:	6879      	ldr	r1, [r7, #4]
 800d99c:	f7fd fd3e 	bl	800b41c <mbedtls_cipher_setkey>
 800d9a0:	6138      	str	r0, [r7, #16]
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d001      	beq.n	800d9ac <mbedtls_gcm_setkey+0x6e>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	e009      	b.n	800d9c0 <mbedtls_gcm_setkey+0x82>
    }

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f7ff fe4c 	bl	800d64a <gcm_gen_table>
 800d9b2:	6138      	str	r0, [r7, #16]
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <mbedtls_gcm_setkey+0x80>
        return( ret );
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	e000      	b.n	800d9c0 <mbedtls_gcm_setkey+0x82>

    return( 0 );
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3718      	adds	r7, #24
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 800d9c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d9cc:	b099      	sub	sp, #100	; 0x64
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d9d2:	63b9      	str	r1, [r7, #56]	; 0x38
 800d9d4:	637a      	str	r2, [r7, #52]	; 0x34
    int i = 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	330f      	adds	r3, #15
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	f003 030f 	and.w	r3, r3, #15
 800d9e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    zh = ctx->HH[lo];
 800d9e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d9ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9ee:	3318      	adds	r3, #24
 800d9f0:	00db      	lsls	r3, r3, #3
 800d9f2:	4413      	add	r3, r2
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    zl = ctx->HL[lo];
 800d9fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800da00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da02:	3308      	adds	r3, #8
 800da04:	00db      	lsls	r3, r3, #3
 800da06:	4413      	add	r3, r2
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    for( i = 15; i >= 0; i-- )
 800da10:	230f      	movs	r3, #15
 800da12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da14:	e0e6      	b.n	800dbe4 <gcm_mult+0x21c>
    {
        lo = x[i] & 0xf;
 800da16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1a:	4413      	add	r3, r2
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	f003 030f 	and.w	r3, r3, #15
 800da22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        hi = x[i] >> 4;
 800da26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2a:	4413      	add	r3, r2
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	091b      	lsrs	r3, r3, #4
 800da30:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        if( i != 15 )
 800da34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da36:	2b0f      	cmp	r3, #15
 800da38:	d068      	beq.n	800db0c <gcm_mult+0x144>
        {
            rem = (unsigned char) zl & 0xf;
 800da3a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800da3e:	f003 030f 	and.w	r3, r3, #15
 800da42:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            zl = ( zh << 60 ) | ( zl >> 4 );
 800da46:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800da4a:	f04f 0400 	mov.w	r4, #0
 800da4e:	f04f 0500 	mov.w	r5, #0
 800da52:	0715      	lsls	r5, r2, #28
 800da54:	2400      	movs	r4, #0
 800da56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800da5a:	f04f 0000 	mov.w	r0, #0
 800da5e:	f04f 0100 	mov.w	r1, #0
 800da62:	0910      	lsrs	r0, r2, #4
 800da64:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800da68:	0919      	lsrs	r1, r3, #4
 800da6a:	ea44 0300 	orr.w	r3, r4, r0
 800da6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800da70:	ea45 0301 	orr.w	r3, r5, r1
 800da74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da76:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800da7a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
            zh = ( zh >> 4 );
 800da7e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800da82:	f04f 0000 	mov.w	r0, #0
 800da86:	f04f 0100 	mov.w	r1, #0
 800da8a:	0910      	lsrs	r0, r2, #4
 800da8c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800da90:	0919      	lsrs	r1, r3, #4
 800da92:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
            zh ^= (uint64_t) last4[rem] << 48;
 800da96:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800da9a:	4ab6      	ldr	r2, [pc, #728]	; (800dd74 <gcm_mult+0x3ac>)
 800da9c:	00db      	lsls	r3, r3, #3
 800da9e:	4413      	add	r3, r2
 800daa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa4:	f04f 0000 	mov.w	r0, #0
 800daa8:	f04f 0100 	mov.w	r1, #0
 800daac:	0411      	lsls	r1, r2, #16
 800daae:	2000      	movs	r0, #0
 800dab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dab4:	ea82 0400 	eor.w	r4, r2, r0
 800dab8:	623c      	str	r4, [r7, #32]
 800daba:	404b      	eors	r3, r1
 800dabc:	627b      	str	r3, [r7, #36]	; 0x24
 800dabe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dac2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zh ^= ctx->HH[lo];
 800dac6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800daca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dacc:	3318      	adds	r3, #24
 800dace:	00db      	lsls	r3, r3, #3
 800dad0:	4413      	add	r3, r2
 800dad2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dad6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dada:	ea82 0400 	eor.w	r4, r2, r0
 800dade:	61bc      	str	r4, [r7, #24]
 800dae0:	404b      	eors	r3, r1
 800dae2:	61fb      	str	r3, [r7, #28]
 800dae4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dae8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zl ^= ctx->HL[lo];
 800daec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800daf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daf2:	3308      	adds	r3, #8
 800daf4:	00db      	lsls	r3, r3, #3
 800daf6:	4413      	add	r3, r2
 800daf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dafc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800db00:	ea82 0800 	eor.w	r8, r2, r0
 800db04:	ea83 0901 	eor.w	r9, r3, r1
 800db08:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48

        }

        rem = (unsigned char) zl & 0xf;
 800db0c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800db10:	f003 030f 	and.w	r3, r3, #15
 800db14:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        zl = ( zh << 60 ) | ( zl >> 4 );
 800db18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800db1c:	f04f 0400 	mov.w	r4, #0
 800db20:	f04f 0500 	mov.w	r5, #0
 800db24:	0715      	lsls	r5, r2, #28
 800db26:	2400      	movs	r4, #0
 800db28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800db2c:	f04f 0000 	mov.w	r0, #0
 800db30:	f04f 0100 	mov.w	r1, #0
 800db34:	0910      	lsrs	r0, r2, #4
 800db36:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800db3a:	0919      	lsrs	r1, r3, #4
 800db3c:	ea44 0300 	orr.w	r3, r4, r0
 800db40:	613b      	str	r3, [r7, #16]
 800db42:	ea45 0301 	orr.w	r3, r5, r1
 800db46:	617b      	str	r3, [r7, #20]
 800db48:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800db4c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        zh = ( zh >> 4 );
 800db50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800db54:	f04f 0000 	mov.w	r0, #0
 800db58:	f04f 0100 	mov.w	r1, #0
 800db5c:	0910      	lsrs	r0, r2, #4
 800db5e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800db62:	0919      	lsrs	r1, r3, #4
 800db64:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
        zh ^= (uint64_t) last4[rem] << 48;
 800db68:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800db6c:	4a81      	ldr	r2, [pc, #516]	; (800dd74 <gcm_mult+0x3ac>)
 800db6e:	00db      	lsls	r3, r3, #3
 800db70:	4413      	add	r3, r2
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	f04f 0000 	mov.w	r0, #0
 800db7a:	f04f 0100 	mov.w	r1, #0
 800db7e:	0411      	lsls	r1, r2, #16
 800db80:	2000      	movs	r0, #0
 800db82:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800db86:	ea82 0400 	eor.w	r4, r2, r0
 800db8a:	60bc      	str	r4, [r7, #8]
 800db8c:	404b      	eors	r3, r1
 800db8e:	60fb      	str	r3, [r7, #12]
 800db90:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800db94:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zh ^= ctx->HH[hi];
 800db98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800db9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db9e:	3318      	adds	r3, #24
 800dba0:	00db      	lsls	r3, r3, #3
 800dba2:	4413      	add	r3, r2
 800dba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dbac:	ea82 0400 	eor.w	r4, r2, r0
 800dbb0:	603c      	str	r4, [r7, #0]
 800dbb2:	404b      	eors	r3, r1
 800dbb4:	607b      	str	r3, [r7, #4]
 800dbb6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dbba:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zl ^= ctx->HL[hi];
 800dbbe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dbc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbc4:	3308      	adds	r3, #8
 800dbc6:	00db      	lsls	r3, r3, #3
 800dbc8:	4413      	add	r3, r2
 800dbca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dbd2:	ea82 0a00 	eor.w	sl, r2, r0
 800dbd6:	ea83 0b01 	eor.w	fp, r3, r1
 800dbda:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
    for( i = 15; i >= 0; i-- )
 800dbde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f6bf af15 	bge.w	800da16 <gcm_mult+0x4e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 800dbec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800dbf0:	f04f 0200 	mov.w	r2, #0
 800dbf4:	f04f 0300 	mov.w	r3, #0
 800dbf8:	0e0a      	lsrs	r2, r1, #24
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	b2d2      	uxtb	r2, r2
 800dbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc00:	701a      	strb	r2, [r3, #0]
 800dc02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800dc06:	f04f 0200 	mov.w	r2, #0
 800dc0a:	f04f 0300 	mov.w	r3, #0
 800dc0e:	0c0a      	lsrs	r2, r1, #16
 800dc10:	2300      	movs	r3, #0
 800dc12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc14:	3101      	adds	r1, #1
 800dc16:	b2d3      	uxtb	r3, r2
 800dc18:	700b      	strb	r3, [r1, #0]
 800dc1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800dc1e:	f04f 0200 	mov.w	r2, #0
 800dc22:	f04f 0300 	mov.w	r3, #0
 800dc26:	0a0a      	lsrs	r2, r1, #8
 800dc28:	2300      	movs	r3, #0
 800dc2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc2c:	3102      	adds	r1, #2
 800dc2e:	b2d3      	uxtb	r3, r2
 800dc30:	700b      	strb	r3, [r1, #0]
 800dc32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800dc36:	f04f 0200 	mov.w	r2, #0
 800dc3a:	f04f 0300 	mov.w	r3, #0
 800dc3e:	000a      	movs	r2, r1
 800dc40:	2300      	movs	r3, #0
 800dc42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc44:	3103      	adds	r1, #3
 800dc46:	b2d3      	uxtb	r3, r2
 800dc48:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zh, output, 4 );
 800dc4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800dc4e:	f04f 0200 	mov.w	r2, #0
 800dc52:	f04f 0300 	mov.w	r3, #0
 800dc56:	0e02      	lsrs	r2, r0, #24
 800dc58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dc5c:	0e0b      	lsrs	r3, r1, #24
 800dc5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc60:	3104      	adds	r1, #4
 800dc62:	b2d3      	uxtb	r3, r2
 800dc64:	700b      	strb	r3, [r1, #0]
 800dc66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800dc6a:	f04f 0200 	mov.w	r2, #0
 800dc6e:	f04f 0300 	mov.w	r3, #0
 800dc72:	0c02      	lsrs	r2, r0, #16
 800dc74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dc78:	0c0b      	lsrs	r3, r1, #16
 800dc7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc7c:	3105      	adds	r1, #5
 800dc7e:	b2d3      	uxtb	r3, r2
 800dc80:	700b      	strb	r3, [r1, #0]
 800dc82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800dc86:	f04f 0200 	mov.w	r2, #0
 800dc8a:	f04f 0300 	mov.w	r3, #0
 800dc8e:	0a02      	lsrs	r2, r0, #8
 800dc90:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800dc94:	0a0b      	lsrs	r3, r1, #8
 800dc96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc98:	3106      	adds	r1, #6
 800dc9a:	b2d3      	uxtb	r3, r2
 800dc9c:	700b      	strb	r3, [r1, #0]
 800dc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca0:	3307      	adds	r3, #7
 800dca2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dca6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 800dca8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800dcac:	f04f 0200 	mov.w	r2, #0
 800dcb0:	f04f 0300 	mov.w	r3, #0
 800dcb4:	0e0a      	lsrs	r2, r1, #24
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcba:	3108      	adds	r1, #8
 800dcbc:	b2d3      	uxtb	r3, r2
 800dcbe:	700b      	strb	r3, [r1, #0]
 800dcc0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800dcc4:	f04f 0200 	mov.w	r2, #0
 800dcc8:	f04f 0300 	mov.w	r3, #0
 800dccc:	0c0a      	lsrs	r2, r1, #16
 800dcce:	2300      	movs	r3, #0
 800dcd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcd2:	3109      	adds	r1, #9
 800dcd4:	b2d3      	uxtb	r3, r2
 800dcd6:	700b      	strb	r3, [r1, #0]
 800dcd8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800dcdc:	f04f 0200 	mov.w	r2, #0
 800dce0:	f04f 0300 	mov.w	r3, #0
 800dce4:	0a0a      	lsrs	r2, r1, #8
 800dce6:	2300      	movs	r3, #0
 800dce8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcea:	310a      	adds	r1, #10
 800dcec:	b2d3      	uxtb	r3, r2
 800dcee:	700b      	strb	r3, [r1, #0]
 800dcf0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800dcf4:	f04f 0200 	mov.w	r2, #0
 800dcf8:	f04f 0300 	mov.w	r3, #0
 800dcfc:	000a      	movs	r2, r1
 800dcfe:	2300      	movs	r3, #0
 800dd00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd02:	310b      	adds	r1, #11
 800dd04:	b2d3      	uxtb	r3, r2
 800dd06:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zl, output, 12 );
 800dd08:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800dd0c:	f04f 0200 	mov.w	r2, #0
 800dd10:	f04f 0300 	mov.w	r3, #0
 800dd14:	0e02      	lsrs	r2, r0, #24
 800dd16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dd1a:	0e0b      	lsrs	r3, r1, #24
 800dd1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd1e:	310c      	adds	r1, #12
 800dd20:	b2d3      	uxtb	r3, r2
 800dd22:	700b      	strb	r3, [r1, #0]
 800dd24:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800dd28:	f04f 0200 	mov.w	r2, #0
 800dd2c:	f04f 0300 	mov.w	r3, #0
 800dd30:	0c02      	lsrs	r2, r0, #16
 800dd32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dd36:	0c0b      	lsrs	r3, r1, #16
 800dd38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd3a:	310d      	adds	r1, #13
 800dd3c:	b2d3      	uxtb	r3, r2
 800dd3e:	700b      	strb	r3, [r1, #0]
 800dd40:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800dd44:	f04f 0200 	mov.w	r2, #0
 800dd48:	f04f 0300 	mov.w	r3, #0
 800dd4c:	0a02      	lsrs	r2, r0, #8
 800dd4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800dd52:	0a0b      	lsrs	r3, r1, #8
 800dd54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd56:	310e      	adds	r1, #14
 800dd58:	b2d3      	uxtb	r3, r2
 800dd5a:	700b      	strb	r3, [r1, #0]
 800dd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd5e:	330f      	adds	r3, #15
 800dd60:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800dd64:	701a      	strb	r2, [r3, #0]
}
 800dd66:	bf00      	nop
 800dd68:	3764      	adds	r7, #100	; 0x64
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	08025400 	.word	0x08025400

0800dd78 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 800dd78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd7c:	b090      	sub	sp, #64	; 0x40
 800dd7e:	af02      	add	r7, sp, #8
 800dd80:	60f8      	str	r0, [r7, #12]
 800dd82:	60b9      	str	r1, [r7, #8]
 800dd84:	607a      	str	r2, [r7, #4]
 800dd86:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	617b      	str	r3, [r7, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d019      	beq.n	800ddc6 <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	2200      	movs	r2, #0
 800dd96:	469a      	mov	sl, r3
 800dd98:	4693      	mov	fp, r2
 800dd9a:	f04f 0200 	mov.w	r2, #0
 800dd9e:	f04f 0300 	mov.w	r3, #0
 800dda2:	ea4f 725b 	mov.w	r2, fp, lsr #29
 800dda6:	2300      	movs	r3, #0
    if( iv_len == 0 ||
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	d10c      	bne.n	800ddc6 <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) add_len ) >> 61 != 0 )
 800ddac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddae:	2200      	movs	r2, #0
 800ddb0:	4698      	mov	r8, r3
 800ddb2:	4691      	mov	r9, r2
 800ddb4:	f04f 0200 	mov.w	r2, #0
 800ddb8:	f04f 0300 	mov.w	r3, #0
 800ddbc:	ea4f 7259 	mov.w	r2, r9, lsr #29
 800ddc0:	2300      	movs	r3, #0
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	d002      	beq.n	800ddcc <mbedtls_gcm_starts+0x54>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800ddc6:	f06f 0313 	mvn.w	r3, #19
 800ddca:	e107      	b.n	800dfdc <mbedtls_gcm_starts+0x264>
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ddd2:	2210      	movs	r2, #16
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f010 fc24 	bl	801e624 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dde2:	2210      	movs	r2, #16
 800dde4:	2100      	movs	r1, #0
 800dde6:	4618      	mov	r0, r3
 800dde8:	f010 fc1c 	bl	801e624 <memset>

    ctx->mode = mode;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ctx->len = 0;
 800ddf4:	68f9      	ldr	r1, [r7, #12]
 800ddf6:	f04f 0200 	mov.w	r2, #0
 800ddfa:	f04f 0300 	mov.w	r3, #0
 800ddfe:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    ctx->add_len = 0;
 800de02:	68f9      	ldr	r1, [r7, #12]
 800de04:	f04f 0200 	mov.w	r2, #0
 800de08:	f04f 0300 	mov.w	r3, #0
 800de0c:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148

    if( iv_len == 12 )
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	2b0c      	cmp	r3, #12
 800de14:	d10c      	bne.n	800de30 <mbedtls_gcm_starts+0xb8>
    {
        memcpy( ctx->y, iv, iv_len );
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800de1c:	683a      	ldr	r2, [r7, #0]
 800de1e:	6879      	ldr	r1, [r7, #4]
 800de20:	4618      	mov	r0, r3
 800de22:	f010 fbd7 	bl	801e5d4 <memcpy>
        ctx->y[15] = 1;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2201      	movs	r2, #1
 800de2a:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 800de2e:	e07f      	b.n	800df30 <mbedtls_gcm_starts+0x1b8>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 800de30:	f107 0318 	add.w	r3, r7, #24
 800de34:	2210      	movs	r2, #16
 800de36:	2100      	movs	r1, #0
 800de38:	4618      	mov	r0, r3
 800de3a:	f010 fbf3 	bl	801e624 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	00db      	lsls	r3, r3, #3
 800de42:	0e1b      	lsrs	r3, r3, #24
 800de44:	b2db      	uxtb	r3, r3
 800de46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	00db      	lsls	r3, r3, #3
 800de4e:	0c1b      	lsrs	r3, r3, #16
 800de50:	b2db      	uxtb	r3, r3
 800de52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	00db      	lsls	r3, r3, #3
 800de5a:	0a1b      	lsrs	r3, r3, #8
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	b2db      	uxtb	r3, r3
 800de66:	00db      	lsls	r3, r3, #3
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        p = iv;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 800de72:	e033      	b.n	800dedc <mbedtls_gcm_starts+0x164>
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	2b10      	cmp	r3, #16
 800de78:	bf28      	it	cs
 800de7a:	2310      	movcs	r3, #16
 800de7c:	62fb      	str	r3, [r7, #44]	; 0x2c

            for( i = 0; i < use_len; i++ )
 800de7e:	2300      	movs	r3, #0
 800de80:	637b      	str	r3, [r7, #52]	; 0x34
 800de82:	e015      	b.n	800deb0 <mbedtls_gcm_starts+0x138>
                ctx->y[i] ^= p[i];
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de88:	4413      	add	r3, r2
 800de8a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800de8e:	781a      	ldrb	r2, [r3, #0]
 800de90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de94:	440b      	add	r3, r1
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	4053      	eors	r3, r2
 800de9a:	b2d9      	uxtb	r1, r3
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dea0:	4413      	add	r3, r2
 800dea2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800dea6:	460a      	mov	r2, r1
 800dea8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < use_len; i++ )
 800deaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deac:	3301      	adds	r3, #1
 800deae:	637b      	str	r3, [r7, #52]	; 0x34
 800deb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800deb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d3e5      	bcc.n	800de84 <mbedtls_gcm_starts+0x10c>

            gcm_mult( ctx, ctx->y, ctx->y );
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800dec4:	461a      	mov	r2, r3
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	f7ff fd7e 	bl	800d9c8 <gcm_mult>

            iv_len -= use_len;
 800decc:	683a      	ldr	r2, [r7, #0]
 800dece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	603b      	str	r3, [r7, #0]
            p += use_len;
 800ded4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ded6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded8:	4413      	add	r3, r2
 800deda:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1c8      	bne.n	800de74 <mbedtls_gcm_starts+0xfc>
        }

        for( i = 0; i < 16; i++ )
 800dee2:	2300      	movs	r3, #0
 800dee4:	637b      	str	r3, [r7, #52]	; 0x34
 800dee6:	e016      	b.n	800df16 <mbedtls_gcm_starts+0x19e>
            ctx->y[i] ^= work_buf[i];
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deec:	4413      	add	r3, r2
 800deee:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800def2:	781a      	ldrb	r2, [r3, #0]
 800def4:	f107 0118 	add.w	r1, r7, #24
 800def8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defa:	440b      	add	r3, r1
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	4053      	eors	r3, r2
 800df00:	b2d9      	uxtb	r1, r3
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df06:	4413      	add	r3, r2
 800df08:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800df0c:	460a      	mov	r2, r1
 800df0e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800df10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df12:	3301      	adds	r3, #1
 800df14:	637b      	str	r3, [r7, #52]	; 0x34
 800df16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df18:	2b0f      	cmp	r3, #15
 800df1a:	d9e5      	bls.n	800dee8 <mbedtls_gcm_starts+0x170>

        gcm_mult( ctx, ctx->y, ctx->y );
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800df28:	461a      	mov	r2, r3
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7ff fd4c 	bl	800d9c8 <gcm_mult>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 800df3e:	f107 0314 	add.w	r3, r7, #20
 800df42:	9300      	str	r3, [sp, #0]
 800df44:	4613      	mov	r3, r2
 800df46:	2210      	movs	r2, #16
 800df48:	f7fd fb18 	bl	800b57c <mbedtls_cipher_update>
 800df4c:	62b8      	str	r0, [r7, #40]	; 0x28
 800df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <mbedtls_gcm_starts+0x1e0>
                             &olen ) ) != 0 )
    {
        return( ret );
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	e041      	b.n	800dfdc <mbedtls_gcm_starts+0x264>
    }

    ctx->add_len = add_len;
 800df58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df5a:	2200      	movs	r2, #0
 800df5c:	461c      	mov	r4, r3
 800df5e:	4615      	mov	r5, r2
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	e9c3 4552 	strd	r4, r5, [r3, #328]	; 0x148
    p = add;
 800df66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df68:	633b      	str	r3, [r7, #48]	; 0x30
    while( add_len > 0 )
 800df6a:	e033      	b.n	800dfd4 <mbedtls_gcm_starts+0x25c>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 800df6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df6e:	2b10      	cmp	r3, #16
 800df70:	bf28      	it	cs
 800df72:	2310      	movcs	r3, #16
 800df74:	62fb      	str	r3, [r7, #44]	; 0x2c

        for( i = 0; i < use_len; i++ )
 800df76:	2300      	movs	r3, #0
 800df78:	637b      	str	r3, [r7, #52]	; 0x34
 800df7a:	e015      	b.n	800dfa8 <mbedtls_gcm_starts+0x230>
            ctx->buf[i] ^= p[i];
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df80:	4413      	add	r3, r2
 800df82:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800df86:	781a      	ldrb	r2, [r3, #0]
 800df88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df8c:	440b      	add	r3, r1
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	4053      	eors	r3, r2
 800df92:	b2d9      	uxtb	r1, r3
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df98:	4413      	add	r3, r2
 800df9a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800df9e:	460a      	mov	r2, r1
 800dfa0:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 800dfa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	637b      	str	r3, [r7, #52]	; 0x34
 800dfa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d3e5      	bcc.n	800df7c <mbedtls_gcm_starts+0x204>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f7ff fd02 	bl	800d9c8 <gcm_mult>

        add_len -= use_len;
 800dfc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	65fb      	str	r3, [r7, #92]	; 0x5c
        p += use_len;
 800dfcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd0:	4413      	add	r3, r2
 800dfd2:	633b      	str	r3, [r7, #48]	; 0x30
    while( add_len > 0 )
 800dfd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1c8      	bne.n	800df6c <mbedtls_gcm_starts+0x1f4>
    }

    return( 0 );
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3738      	adds	r7, #56	; 0x38
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dfe6 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 800dfe6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dfea:	b096      	sub	sp, #88	; 0x58
 800dfec:	af02      	add	r7, sp, #8
 800dfee:	6278      	str	r0, [r7, #36]	; 0x24
 800dff0:	6239      	str	r1, [r7, #32]
 800dff2:	61fa      	str	r2, [r7, #28]
 800dff4:	61bb      	str	r3, [r7, #24]
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	647b      	str	r3, [r7, #68]	; 0x44
    size_t use_len, olen = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	62bb      	str	r3, [r7, #40]	; 0x28

    if( output > input && (size_t) ( output - input ) < length )
 800dffe:	69ba      	ldr	r2, [r7, #24]
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	429a      	cmp	r2, r3
 800e004:	d909      	bls.n	800e01a <mbedtls_gcm_update+0x34>
 800e006:	69ba      	ldr	r2, [r7, #24]
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	1ad3      	subs	r3, r2, r3
 800e00c:	461a      	mov	r2, r3
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	4293      	cmp	r3, r2
 800e012:	d902      	bls.n	800e01a <mbedtls_gcm_update+0x34>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800e014:	f06f 0313 	mvn.w	r3, #19
 800e018:	e0d8      	b.n	800e1cc <mbedtls_gcm_update+0x1e6>

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 800e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01c:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800e020:	6a39      	ldr	r1, [r7, #32]
 800e022:	2000      	movs	r0, #0
 800e024:	6139      	str	r1, [r7, #16]
 800e026:	6178      	str	r0, [r7, #20]
 800e028:	6939      	ldr	r1, [r7, #16]
 800e02a:	eb12 0801 	adds.w	r8, r2, r1
 800e02e:	6979      	ldr	r1, [r7, #20]
 800e030:	eb43 0901 	adc.w	r9, r3, r1
 800e034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e036:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800e03a:	4590      	cmp	r8, r2
 800e03c:	eb79 0303 	sbcs.w	r3, r9, r3
 800e040:	d313      	bcc.n	800e06a <mbedtls_gcm_update+0x84>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800e048:	6a39      	ldr	r1, [r7, #32]
 800e04a:	2000      	movs	r0, #0
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800e054:	4641      	mov	r1, r8
 800e056:	1854      	adds	r4, r2, r1
 800e058:	4649      	mov	r1, r9
 800e05a:	eb43 0101 	adc.w	r1, r3, r1
 800e05e:	460d      	mov	r5, r1
    if( ctx->len + length < ctx->len ||
 800e060:	f114 0f1f 	cmn.w	r4, #31
 800e064:	f175 030f 	sbcs.w	r3, r5, #15
 800e068:	d302      	bcc.n	800e070 <mbedtls_gcm_update+0x8a>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800e06a:	f06f 0313 	mvn.w	r3, #19
 800e06e:	e0ad      	b.n	800e1cc <mbedtls_gcm_update+0x1e6>
    }

    ctx->len += length;
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800e076:	6a39      	ldr	r1, [r7, #32]
 800e078:	2000      	movs	r0, #0
 800e07a:	468a      	mov	sl, r1
 800e07c:	4683      	mov	fp, r0
 800e07e:	eb12 010a 	adds.w	r1, r2, sl
 800e082:	6039      	str	r1, [r7, #0]
 800e084:	eb43 030b 	adc.w	r3, r3, fp
 800e088:	607b      	str	r3, [r7, #4]
 800e08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e090:	e9c3 1250 	strd	r1, r2, [r3, #320]	; 0x140

    p = input;
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	64bb      	str	r3, [r7, #72]	; 0x48
    while( length > 0 )
 800e098:	e093      	b.n	800e1c2 <mbedtls_gcm_update+0x1dc>
    {
        use_len = ( length < 16 ) ? length : 16;
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	2b10      	cmp	r3, #16
 800e09e:	bf28      	it	cs
 800e0a0:	2310      	movcs	r3, #16
 800e0a2:	643b      	str	r3, [r7, #64]	; 0x40

        for( i = 16; i > 12; i-- )
 800e0a4:	2310      	movs	r3, #16
 800e0a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0a8:	e014      	b.n	800e0d4 <mbedtls_gcm_update+0xee>
            if( ++ctx->y[i - 1] != 0 )
 800e0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b0:	441a      	add	r2, r3
 800e0b2:	f892 2160 	ldrb.w	r2, [r2, #352]	; 0x160
 800e0b6:	3201      	adds	r2, #1
 800e0b8:	b2d1      	uxtb	r1, r2
 800e0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0bc:	441a      	add	r2, r3
 800e0be:	f882 1160 	strb.w	r1, [r2, #352]	; 0x160
 800e0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0c4:	4413      	add	r3, r2
 800e0c6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d106      	bne.n	800e0dc <mbedtls_gcm_update+0xf6>
        for( i = 16; i > 12; i-- )
 800e0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0d6:	2b0c      	cmp	r3, #12
 800e0d8:	d8e7      	bhi.n	800e0aa <mbedtls_gcm_update+0xc4>
 800e0da:	e000      	b.n	800e0de <mbedtls_gcm_update+0xf8>
                break;
 800e0dc:	bf00      	nop

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 800e0de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e2:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800e0e6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e0ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	2210      	movs	r2, #16
 800e0f4:	f7fd fa42 	bl	800b57c <mbedtls_cipher_update>
 800e0f8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <mbedtls_gcm_update+0x11e>
                                   &olen ) ) != 0 )
        {
            return( ret );
 800e100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e102:	e063      	b.n	800e1cc <mbedtls_gcm_update+0x1e6>
        }

        for( i = 0; i < use_len; i++ )
 800e104:	2300      	movs	r3, #0
 800e106:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e108:	e041      	b.n	800e18e <mbedtls_gcm_update+0x1a8>
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800e110:	2b00      	cmp	r3, #0
 800e112:	d112      	bne.n	800e13a <mbedtls_gcm_update+0x154>
                ctx->buf[i] ^= p[i];
 800e114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e118:	4413      	add	r3, r2
 800e11a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e11e:	781a      	ldrb	r2, [r3, #0]
 800e120:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e124:	440b      	add	r3, r1
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	4053      	eors	r3, r2
 800e12a:	b2d9      	uxtb	r1, r3
 800e12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e130:	4413      	add	r3, r2
 800e132:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e136:	460a      	mov	r2, r1
 800e138:	701a      	strb	r2, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 800e13a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e13e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e140:	4413      	add	r3, r2
 800e142:	7819      	ldrb	r1, [r3, #0]
 800e144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e148:	4413      	add	r3, r2
 800e14a:	781a      	ldrb	r2, [r3, #0]
 800e14c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e150:	4403      	add	r3, r0
 800e152:	404a      	eors	r2, r1
 800e154:	b2d2      	uxtb	r2, r2
 800e156:	701a      	strb	r2, [r3, #0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 800e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d112      	bne.n	800e188 <mbedtls_gcm_update+0x1a2>
                ctx->buf[i] ^= out_p[i];
 800e162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e166:	4413      	add	r3, r2
 800e168:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e16c:	781a      	ldrb	r2, [r3, #0]
 800e16e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e172:	440b      	add	r3, r1
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	4053      	eors	r3, r2
 800e178:	b2d9      	uxtb	r1, r3
 800e17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e17c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e17e:	4413      	add	r3, r2
 800e180:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e184:	460a      	mov	r2, r1
 800e186:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 800e188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e18a:	3301      	adds	r3, #1
 800e18c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e18e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e192:	429a      	cmp	r2, r3
 800e194:	d3b9      	bcc.n	800e10a <mbedtls_gcm_update+0x124>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800e196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e198:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 800e19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1a6:	f7ff fc0f 	bl	800d9c8 <gcm_mult>

        length -= use_len;
 800e1aa:	6a3a      	ldr	r2, [r7, #32]
 800e1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	623b      	str	r3, [r7, #32]
        p += use_len;
 800e1b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1b6:	4413      	add	r3, r2
 800e1b8:	64bb      	str	r3, [r7, #72]	; 0x48
        out_p += use_len;
 800e1ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1be:	4413      	add	r3, r2
 800e1c0:	647b      	str	r3, [r7, #68]	; 0x44
    while( length > 0 )
 800e1c2:	6a3b      	ldr	r3, [r7, #32]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f47f af68 	bne.w	800e09a <mbedtls_gcm_update+0xb4>
    }

    return( 0 );
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3750      	adds	r7, #80	; 0x50
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e1d6 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b08e      	sub	sp, #56	; 0x38
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	60f8      	str	r0, [r7, #12]
 800e1de:	60b9      	str	r1, [r7, #8]
 800e1e0:	607a      	str	r2, [r7, #4]
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800e1e8:	f04f 0200 	mov.w	r2, #0
 800e1ec:	f04f 0300 	mov.w	r3, #0
 800e1f0:	00cb      	lsls	r3, r1, #3
 800e1f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e1f6:	00c2      	lsls	r2, r0, #3
 800e1f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    uint64_t orig_add_len = ctx->add_len * 8;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	; 0x148
 800e202:	f04f 0200 	mov.w	r2, #0
 800e206:	f04f 0300 	mov.w	r3, #0
 800e20a:	00cb      	lsls	r3, r1, #3
 800e20c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e210:	00c2      	lsls	r2, r0, #3
 800e212:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if( tag_len > 16 || tag_len < 4 )
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b10      	cmp	r3, #16
 800e21a:	d802      	bhi.n	800e222 <mbedtls_gcm_finish+0x4c>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b03      	cmp	r3, #3
 800e220:	d802      	bhi.n	800e228 <mbedtls_gcm_finish+0x52>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800e222:	f06f 0313 	mvn.w	r3, #19
 800e226:	e0f7      	b.n	800e418 <mbedtls_gcm_finish+0x242>

    memcpy( tag, ctx->base_ectr, tag_len );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	4619      	mov	r1, r3
 800e232:	68b8      	ldr	r0, [r7, #8]
 800e234:	f010 f9ce 	bl	801e5d4 <memcpy>

    if( orig_len || orig_add_len )
 800e238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e23c:	4313      	orrs	r3, r2
 800e23e:	d104      	bne.n	800e24a <mbedtls_gcm_finish+0x74>
 800e240:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e244:	4313      	orrs	r3, r2
 800e246:	f000 80e6 	beq.w	800e416 <mbedtls_gcm_finish+0x240>
    {
        memset( work_buf, 0x00, 16 );
 800e24a:	f107 0310 	add.w	r3, r7, #16
 800e24e:	2210      	movs	r2, #16
 800e250:	2100      	movs	r1, #0
 800e252:	4618      	mov	r0, r3
 800e254:	f010 f9e6 	bl	801e624 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 800e258:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e25c:	f04f 0200 	mov.w	r2, #0
 800e260:	f04f 0300 	mov.w	r3, #0
 800e264:	0e0a      	lsrs	r2, r1, #24
 800e266:	2300      	movs	r3, #0
 800e268:	b2d3      	uxtb	r3, r2
 800e26a:	743b      	strb	r3, [r7, #16]
 800e26c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e270:	f04f 0200 	mov.w	r2, #0
 800e274:	f04f 0300 	mov.w	r3, #0
 800e278:	0c0a      	lsrs	r2, r1, #16
 800e27a:	2300      	movs	r3, #0
 800e27c:	b2d3      	uxtb	r3, r2
 800e27e:	747b      	strb	r3, [r7, #17]
 800e280:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e284:	f04f 0200 	mov.w	r2, #0
 800e288:	f04f 0300 	mov.w	r3, #0
 800e28c:	0a0a      	lsrs	r2, r1, #8
 800e28e:	2300      	movs	r3, #0
 800e290:	b2d3      	uxtb	r3, r2
 800e292:	74bb      	strb	r3, [r7, #18]
 800e294:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e298:	f04f 0200 	mov.w	r2, #0
 800e29c:	f04f 0300 	mov.w	r3, #0
 800e2a0:	000a      	movs	r2, r1
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	b2d3      	uxtb	r3, r2
 800e2a6:	74fb      	strb	r3, [r7, #19]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 800e2a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e2ac:	f04f 0200 	mov.w	r2, #0
 800e2b0:	f04f 0300 	mov.w	r3, #0
 800e2b4:	0e02      	lsrs	r2, r0, #24
 800e2b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e2ba:	0e0b      	lsrs	r3, r1, #24
 800e2bc:	b2d3      	uxtb	r3, r2
 800e2be:	753b      	strb	r3, [r7, #20]
 800e2c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e2c4:	f04f 0200 	mov.w	r2, #0
 800e2c8:	f04f 0300 	mov.w	r3, #0
 800e2cc:	0c02      	lsrs	r2, r0, #16
 800e2ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e2d2:	0c0b      	lsrs	r3, r1, #16
 800e2d4:	b2d3      	uxtb	r3, r2
 800e2d6:	757b      	strb	r3, [r7, #21]
 800e2d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e2dc:	f04f 0200 	mov.w	r2, #0
 800e2e0:	f04f 0300 	mov.w	r3, #0
 800e2e4:	0a02      	lsrs	r2, r0, #8
 800e2e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e2ea:	0a0b      	lsrs	r3, r1, #8
 800e2ec:	b2d3      	uxtb	r3, r2
 800e2ee:	75bb      	strb	r3, [r7, #22]
 800e2f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2f4:	75fb      	strb	r3, [r7, #23]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 800e2f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e2fa:	f04f 0200 	mov.w	r2, #0
 800e2fe:	f04f 0300 	mov.w	r3, #0
 800e302:	0e0a      	lsrs	r2, r1, #24
 800e304:	2300      	movs	r3, #0
 800e306:	b2d3      	uxtb	r3, r2
 800e308:	763b      	strb	r3, [r7, #24]
 800e30a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e30e:	f04f 0200 	mov.w	r2, #0
 800e312:	f04f 0300 	mov.w	r3, #0
 800e316:	0c0a      	lsrs	r2, r1, #16
 800e318:	2300      	movs	r3, #0
 800e31a:	b2d3      	uxtb	r3, r2
 800e31c:	767b      	strb	r3, [r7, #25]
 800e31e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e322:	f04f 0200 	mov.w	r2, #0
 800e326:	f04f 0300 	mov.w	r3, #0
 800e32a:	0a0a      	lsrs	r2, r1, #8
 800e32c:	2300      	movs	r3, #0
 800e32e:	b2d3      	uxtb	r3, r2
 800e330:	76bb      	strb	r3, [r7, #26]
 800e332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e336:	f04f 0200 	mov.w	r2, #0
 800e33a:	f04f 0300 	mov.w	r3, #0
 800e33e:	000a      	movs	r2, r1
 800e340:	2300      	movs	r3, #0
 800e342:	b2d3      	uxtb	r3, r2
 800e344:	76fb      	strb	r3, [r7, #27]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 800e346:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e34a:	f04f 0200 	mov.w	r2, #0
 800e34e:	f04f 0300 	mov.w	r3, #0
 800e352:	0e02      	lsrs	r2, r0, #24
 800e354:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e358:	0e0b      	lsrs	r3, r1, #24
 800e35a:	b2d3      	uxtb	r3, r2
 800e35c:	773b      	strb	r3, [r7, #28]
 800e35e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e362:	f04f 0200 	mov.w	r2, #0
 800e366:	f04f 0300 	mov.w	r3, #0
 800e36a:	0c02      	lsrs	r2, r0, #16
 800e36c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e370:	0c0b      	lsrs	r3, r1, #16
 800e372:	b2d3      	uxtb	r3, r2
 800e374:	777b      	strb	r3, [r7, #29]
 800e376:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e37a:	f04f 0200 	mov.w	r2, #0
 800e37e:	f04f 0300 	mov.w	r3, #0
 800e382:	0a02      	lsrs	r2, r0, #8
 800e384:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e388:	0a0b      	lsrs	r3, r1, #8
 800e38a:	b2d3      	uxtb	r3, r2
 800e38c:	77bb      	strb	r3, [r7, #30]
 800e38e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e392:	77fb      	strb	r3, [r7, #31]

        for( i = 0; i < 16; i++ )
 800e394:	2300      	movs	r3, #0
 800e396:	637b      	str	r3, [r7, #52]	; 0x34
 800e398:	e016      	b.n	800e3c8 <mbedtls_gcm_finish+0x1f2>
            ctx->buf[i] ^= work_buf[i];
 800e39a:	68fa      	ldr	r2, [r7, #12]
 800e39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e39e:	4413      	add	r3, r2
 800e3a0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e3a4:	781a      	ldrb	r2, [r3, #0]
 800e3a6:	f107 0110 	add.w	r1, r7, #16
 800e3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ac:	440b      	add	r3, r1
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	4053      	eors	r3, r2
 800e3b2:	b2d9      	uxtb	r1, r3
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b8:	4413      	add	r3, r2
 800e3ba:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e3be:	460a      	mov	r2, r1
 800e3c0:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800e3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800e3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ca:	2b0f      	cmp	r3, #15
 800e3cc:	d9e5      	bls.n	800e39a <mbedtls_gcm_finish+0x1c4>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e3da:	461a      	mov	r2, r3
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f7ff faf3 	bl	800d9c8 <gcm_mult>

        for( i = 0; i < tag_len; i++ )
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800e3e6:	e012      	b.n	800e40e <mbedtls_gcm_finish+0x238>
            tag[i] ^= ctx->buf[i];
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ec:	4413      	add	r3, r2
 800e3ee:	7819      	ldrb	r1, [r3, #0]
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f4:	4413      	add	r3, r2
 800e3f6:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e3fa:	781a      	ldrb	r2, [r3, #0]
 800e3fc:	68b8      	ldr	r0, [r7, #8]
 800e3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e400:	4403      	add	r3, r0
 800e402:	404a      	eors	r2, r1
 800e404:	b2d2      	uxtb	r2, r2
 800e406:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < tag_len; i++ )
 800e408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e40a:	3301      	adds	r3, #1
 800e40c:	637b      	str	r3, [r7, #52]	; 0x34
 800e40e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	429a      	cmp	r2, r3
 800e414:	d3e8      	bcc.n	800e3e8 <mbedtls_gcm_finish+0x212>
    }

    return( 0 );
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3738      	adds	r7, #56	; 0x38
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b088      	sub	sp, #32
 800e424:	af02      	add	r7, sp, #8
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	607a      	str	r2, [r7, #4]
 800e42c:	603b      	str	r3, [r7, #0]
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 800e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e430:	9301      	str	r3, [sp, #4]
 800e432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	6a3b      	ldr	r3, [r7, #32]
 800e438:	683a      	ldr	r2, [r7, #0]
 800e43a:	68b9      	ldr	r1, [r7, #8]
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f7ff fc9b 	bl	800dd78 <mbedtls_gcm_starts>
 800e442:	6178      	str	r0, [r7, #20]
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d001      	beq.n	800e44e <mbedtls_gcm_crypt_and_tag+0x2e>
        return( ret );
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	e017      	b.n	800e47e <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 800e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e452:	6879      	ldr	r1, [r7, #4]
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f7ff fdc6 	bl	800dfe6 <mbedtls_gcm_update>
 800e45a:	6178      	str	r0, [r7, #20]
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d001      	beq.n	800e466 <mbedtls_gcm_crypt_and_tag+0x46>
        return( ret );
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	e00b      	b.n	800e47e <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 800e466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e468:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff feb3 	bl	800e1d6 <mbedtls_gcm_finish>
 800e470:	6178      	str	r0, [r7, #20]
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d001      	beq.n	800e47c <mbedtls_gcm_crypt_and_tag+0x5c>
        return( ret );
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	e000      	b.n	800e47e <mbedtls_gcm_crypt_and_tag+0x5e>

    return( 0 );
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3718      	adds	r7, #24
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b094      	sub	sp, #80	; 0x50
 800e48a:	af08      	add	r7, sp, #32
 800e48c:	60f8      	str	r0, [r7, #12]
 800e48e:	60b9      	str	r1, [r7, #8]
 800e490:	607a      	str	r2, [r7, #4]
 800e492:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 800e494:	f107 0314 	add.w	r3, r7, #20
 800e498:	9306      	str	r3, [sp, #24]
 800e49a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e49c:	9305      	str	r3, [sp, #20]
 800e49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4a0:	9304      	str	r3, [sp, #16]
 800e4a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4a4:	9303      	str	r3, [sp, #12]
 800e4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a8:	9302      	str	r3, [sp, #8]
 800e4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ac:	9301      	str	r3, [sp, #4]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	68f8      	ldr	r0, [r7, #12]
 800e4ba:	f7ff ffb1 	bl	800e420 <mbedtls_gcm_crypt_and_tag>
 800e4be:	6278      	str	r0, [r7, #36]	; 0x24
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <mbedtls_gcm_auth_decrypt+0x44>
                                   iv, iv_len, add, add_len,
                                   input, output, tag_len, check_tag ) ) != 0 )
    {
        return( ret );
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	e025      	b.n	800e516 <mbedtls_gcm_auth_decrypt+0x90>
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4d2:	e011      	b.n	800e4f8 <mbedtls_gcm_auth_decrypt+0x72>
        diff |= tag[i] ^ check_tag[i];
 800e4d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	4413      	add	r3, r2
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	f107 0114 	add.w	r1, r7, #20
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	440b      	add	r3, r1
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	4053      	eors	r3, r2
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	62bb      	str	r3, [r7, #40]	; 0x28
    for( diff = 0, i = 0; i < tag_len; i++ )
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d3e9      	bcc.n	800e4d4 <mbedtls_gcm_auth_decrypt+0x4e>

    if( diff != 0 )
 800e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e502:	2b00      	cmp	r3, #0
 800e504:	d006      	beq.n	800e514 <mbedtls_gcm_auth_decrypt+0x8e>
    {
        mbedtls_zeroize( output, length );
 800e506:	68b9      	ldr	r1, [r7, #8]
 800e508:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e50a:	f7ff f877 	bl	800d5fc <mbedtls_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 800e50e:	f06f 0311 	mvn.w	r3, #17
 800e512:	e000      	b.n	800e516 <mbedtls_gcm_auth_decrypt+0x90>
    }

    return( 0 );
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3730      	adds	r7, #48	; 0x30
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 800e51e:	b580      	push	{r7, lr}
 800e520:	b082      	sub	sp, #8
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fc ff2a 	bl	800b382 <mbedtls_cipher_free>
    mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 800e52e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7ff f862 	bl	800d5fc <mbedtls_zeroize>
}
 800e538:	bf00      	nop
 800e53a:	3708      	adds	r7, #8
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <mbedtls_zeroize>:
#if defined(MBEDTLS_FS_IO)
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	60fb      	str	r3, [r7, #12]
 800e54e:	e004      	b.n	800e55a <mbedtls_zeroize+0x1a>
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	60fa      	str	r2, [r7, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	701a      	strb	r2, [r3, #0]
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	1e5a      	subs	r2, r3, #1
 800e55e:	603a      	str	r2, [r7, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1f5      	bne.n	800e550 <mbedtls_zeroize+0x10>
}
 800e564:	bf00      	nop
 800e566:	bf00      	nop
 800e568:	3714      	adds	r7, #20
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr
	...

0800e574 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	71fb      	strb	r3, [r7, #7]
    switch( md_type )
 800e57e:	79fb      	ldrb	r3, [r7, #7]
 800e580:	2b05      	cmp	r3, #5
 800e582:	d002      	beq.n	800e58a <mbedtls_md_info_from_type+0x16>
 800e584:	2b06      	cmp	r3, #6
 800e586:	d002      	beq.n	800e58e <mbedtls_md_info_from_type+0x1a>
 800e588:	e003      	b.n	800e592 <mbedtls_md_info_from_type+0x1e>
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
 800e58a:	4b05      	ldr	r3, [pc, #20]	; (800e5a0 <mbedtls_md_info_from_type+0x2c>)
 800e58c:	e002      	b.n	800e594 <mbedtls_md_info_from_type+0x20>
        case MBEDTLS_MD_SHA256:
            return( &mbedtls_sha256_info );
 800e58e:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <mbedtls_md_info_from_type+0x30>)
 800e590:	e000      	b.n	800e594 <mbedtls_md_info_from_type+0x20>
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 800e592:	2300      	movs	r3, #0
    }
}
 800e594:	4618      	mov	r0, r3
 800e596:	370c      	adds	r7, #12
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr
 800e5a0:	08025480 	.word	0x08025480
 800e5a4:	080254b0 	.word	0x080254b0

0800e5a8 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 800e5b0:	220c      	movs	r2, #12
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f010 f835 	bl	801e624 <memset>
}
 800e5ba:	bf00      	nop
 800e5bc:	3708      	adds	r7, #8
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b082      	sub	sp, #8
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->md_info == NULL )
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d026      	beq.n	800e61e <mbedtls_md_free+0x5c>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d022      	beq.n	800e61e <mbedtls_md_free+0x5c>
        return;

    if( ctx->md_ctx != NULL )
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d006      	beq.n	800e5ee <mbedtls_md_free+0x2c>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	6852      	ldr	r2, [r2, #4]
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00e      	beq.n	800e614 <mbedtls_md_free+0x52>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	689a      	ldr	r2, [r3, #8]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	005b      	lsls	r3, r3, #1
 800e602:	4619      	mov	r1, r3
 800e604:	4610      	mov	r0, r2
 800e606:	f7ff ff9b 	bl	800e540 <mbedtls_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	4618      	mov	r0, r3
 800e610:	f00f ffc8 	bl	801e5a4 <free>
    }

    mbedtls_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 800e614:	210c      	movs	r1, #12
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f7ff ff92 	bl	800e540 <mbedtls_zeroize>
 800e61c:	e000      	b.n	800e620 <mbedtls_md_free+0x5e>
        return;
 800e61e:	bf00      	nop
}
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
	...

0800e628 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
    if( md_info == NULL || ctx == NULL )
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d002      	beq.n	800e640 <mbedtls_md_setup+0x18>
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <mbedtls_md_setup+0x1c>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e640:	4b17      	ldr	r3, [pc, #92]	; (800e6a0 <mbedtls_md_setup+0x78>)
 800e642:	e028      	b.n	800e696 <mbedtls_md_setup+0x6e>

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	6a1b      	ldr	r3, [r3, #32]
 800e648:	4798      	blx	r3
 800e64a:	4602      	mov	r2, r0
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	605a      	str	r2, [r3, #4]
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d101      	bne.n	800e65c <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800e658:	4b12      	ldr	r3, [pc, #72]	; (800e6a4 <mbedtls_md_setup+0x7c>)
 800e65a:	e01c      	b.n	800e696 <mbedtls_md_setup+0x6e>

    if( hmac != 0 )
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d015      	beq.n	800e68e <mbedtls_md_setup+0x66>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	4619      	mov	r1, r3
 800e668:	2002      	movs	r0, #2
 800e66a:	f00f ff61 	bl	801e530 <calloc>
 800e66e:	4603      	mov	r3, r0
 800e670:	461a      	mov	r2, r3
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	609a      	str	r2, [r3, #8]
        if( ctx->hmac_ctx == NULL )
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d107      	bne.n	800e68e <mbedtls_md_setup+0x66>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	6852      	ldr	r2, [r2, #4]
 800e686:	4610      	mov	r0, r2
 800e688:	4798      	blx	r3
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800e68a:	4b06      	ldr	r3, [pc, #24]	; (800e6a4 <mbedtls_md_setup+0x7c>)
 800e68c:	e003      	b.n	800e696 <mbedtls_md_setup+0x6e>
        }
    }

    ctx->md_info = md_info;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	601a      	str	r2, [r3, #0]

    return( 0 );
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	ffffaf00 	.word	0xffffaf00
 800e6a4:	ffffae80 	.word	0xffffae80

0800e6a8 <mbedtls_md>:
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	603b      	str	r3, [r7, #0]
    if( md_info == NULL )
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <mbedtls_md+0x18>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e6bc:	4b06      	ldr	r3, [pc, #24]	; (800e6d8 <mbedtls_md+0x30>)
 800e6be:	e006      	b.n	800e6ce <mbedtls_md+0x26>

    return( md_info->digest_func( input, ilen, output ) );
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	69db      	ldr	r3, [r3, #28]
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	6879      	ldr	r1, [r7, #4]
 800e6c8:	68b8      	ldr	r0, [r7, #8]
 800e6ca:	4798      	blx	r3
 800e6cc:	4603      	mov	r3, r0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	ffffaf00 	.word	0xffffaf00

0800e6dc <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b090      	sub	sp, #64	; 0x40
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d007      	beq.n	800e6fe <mbedtls_md_hmac_starts+0x22>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d003      	beq.n	800e6fe <mbedtls_md_hmac_starts+0x22>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d101      	bne.n	800e702 <mbedtls_md_hmac_starts+0x26>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e6fe:	4b4f      	ldr	r3, [pc, #316]	; (800e83c <mbedtls_md_hmac_starts+0x160>)
 800e700:	e098      	b.n	800e834 <mbedtls_md_hmac_starts+0x158>

    if( keylen > (size_t) ctx->md_info->block_size )
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	461a      	mov	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d92a      	bls.n	800e766 <mbedtls_md_hmac_starts+0x8a>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	691b      	ldr	r3, [r3, #16]
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	6852      	ldr	r2, [r2, #4]
 800e71a:	4610      	mov	r0, r2
 800e71c:	4798      	blx	r3
 800e71e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e722:	2b00      	cmp	r3, #0
 800e724:	d178      	bne.n	800e818 <mbedtls_md_hmac_starts+0x13c>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	695b      	ldr	r3, [r3, #20]
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	6850      	ldr	r0, [r2, #4]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	68b9      	ldr	r1, [r7, #8]
 800e734:	4798      	blx	r3
 800e736:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d16e      	bne.n	800e81c <mbedtls_md_hmac_starts+0x140>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	68fa      	ldr	r2, [r7, #12]
 800e746:	6852      	ldr	r2, [r2, #4]
 800e748:	f107 0110 	add.w	r1, r7, #16
 800e74c:	4610      	mov	r0, r2
 800e74e:	4798      	blx	r3
 800e750:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e754:	2b00      	cmp	r3, #0
 800e756:	d163      	bne.n	800e820 <mbedtls_md_hmac_starts+0x144>
            goto cleanup;

        keylen = ctx->md_info->size;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	607b      	str	r3, [r7, #4]
        key = sum;
 800e760:	f107 0310 	add.w	r3, r7, #16
 800e764:	60bb      	str	r3, [r7, #8]
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	637b      	str	r3, [r7, #52]	; 0x34
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	6812      	ldr	r2, [r2, #0]
 800e774:	68d2      	ldr	r2, [r2, #12]
 800e776:	4413      	add	r3, r2
 800e778:	633b      	str	r3, [r7, #48]	; 0x30

    memset( ipad, 0x36, ctx->md_info->block_size );
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	461a      	mov	r2, r3
 800e782:	2136      	movs	r1, #54	; 0x36
 800e784:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e786:	f00f ff4d 	bl	801e624 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	461a      	mov	r2, r3
 800e792:	215c      	movs	r1, #92	; 0x5c
 800e794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e796:	f00f ff45 	bl	801e624 <memset>

    for( i = 0; i < keylen; i++ )
 800e79a:	2300      	movs	r3, #0
 800e79c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e79e:	e01e      	b.n	800e7de <mbedtls_md_hmac_starts+0x102>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800e7a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a4:	4413      	add	r3, r2
 800e7a6:	7819      	ldrb	r1, [r3, #0]
 800e7a8:	68ba      	ldr	r2, [r7, #8]
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ac:	4413      	add	r3, r2
 800e7ae:	781a      	ldrb	r2, [r3, #0]
 800e7b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b4:	4403      	add	r3, r0
 800e7b6:	404a      	eors	r2, r1
 800e7b8:	b2d2      	uxtb	r2, r2
 800e7ba:	701a      	strb	r2, [r3, #0]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800e7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c0:	4413      	add	r3, r2
 800e7c2:	7819      	ldrb	r1, [r3, #0]
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c8:	4413      	add	r3, r2
 800e7ca:	781a      	ldrb	r2, [r3, #0]
 800e7cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	4403      	add	r3, r0
 800e7d2:	404a      	eors	r2, r1
 800e7d4:	b2d2      	uxtb	r2, r2
 800e7d6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < keylen; i++ )
 800e7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7da:	3301      	adds	r3, #1
 800e7dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d3dc      	bcc.n	800e7a0 <mbedtls_md_hmac_starts+0xc4>
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	6852      	ldr	r2, [r2, #4]
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	4798      	blx	r3
 800e7f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d113      	bne.n	800e824 <mbedtls_md_hmac_starts+0x148>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	6850      	ldr	r0, [r2, #4]
                                           ctx->md_info->block_size ) ) != 0 )
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	6812      	ldr	r2, [r2, #0]
 800e80a:	68d2      	ldr	r2, [r2, #12]
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e80c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e80e:	4798      	blx	r3
 800e810:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e814:	2b00      	cmp	r3, #0
        goto cleanup;

cleanup:
 800e816:	e006      	b.n	800e826 <mbedtls_md_hmac_starts+0x14a>
            goto cleanup;
 800e818:	bf00      	nop
 800e81a:	e004      	b.n	800e826 <mbedtls_md_hmac_starts+0x14a>
            goto cleanup;
 800e81c:	bf00      	nop
 800e81e:	e002      	b.n	800e826 <mbedtls_md_hmac_starts+0x14a>
            goto cleanup;
 800e820:	bf00      	nop
 800e822:	e000      	b.n	800e826 <mbedtls_md_hmac_starts+0x14a>
        goto cleanup;
 800e824:	bf00      	nop
    mbedtls_zeroize( sum, sizeof( sum ) );
 800e826:	f107 0310 	add.w	r3, r7, #16
 800e82a:	2120      	movs	r1, #32
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7ff fe87 	bl	800e540 <mbedtls_zeroize>

    return( ret );
 800e832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e834:	4618      	mov	r0, r3
 800e836:	3740      	adds	r7, #64	; 0x40
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	ffffaf00 	.word	0xffffaf00

0800e840 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d007      	beq.n	800e862 <mbedtls_md_hmac_update+0x22>
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d003      	beq.n	800e862 <mbedtls_md_hmac_update+0x22>
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d101      	bne.n	800e866 <mbedtls_md_hmac_update+0x26>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e862:	4b07      	ldr	r3, [pc, #28]	; (800e880 <mbedtls_md_hmac_update+0x40>)
 800e864:	e008      	b.n	800e878 <mbedtls_md_hmac_update+0x38>

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	695b      	ldr	r3, [r3, #20]
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	6850      	ldr	r0, [r2, #4]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	68b9      	ldr	r1, [r7, #8]
 800e874:	4798      	blx	r3
 800e876:	4603      	mov	r3, r0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3710      	adds	r7, #16
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	ffffaf00 	.word	0xffffaf00

0800e884 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b08c      	sub	sp, #48	; 0x30
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d007      	beq.n	800e8a4 <mbedtls_md_hmac_finish+0x20>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d003      	beq.n	800e8a4 <mbedtls_md_hmac_finish+0x20>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	689b      	ldr	r3, [r3, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d101      	bne.n	800e8a8 <mbedtls_md_hmac_finish+0x24>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e8a4:	4b29      	ldr	r3, [pc, #164]	; (800e94c <mbedtls_md_hmac_finish+0xc8>)
 800e8a6:	e04c      	b.n	800e942 <mbedtls_md_hmac_finish+0xbe>

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	687a      	ldr	r2, [r7, #4]
 800e8ae:	6812      	ldr	r2, [r2, #0]
 800e8b0:	68d2      	ldr	r2, [r2, #12]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	699b      	ldr	r3, [r3, #24]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	6852      	ldr	r2, [r2, #4]
 800e8c0:	f107 0108 	add.w	r1, r7, #8
 800e8c4:	4610      	mov	r0, r2
 800e8c6:	4798      	blx	r3
 800e8c8:	62b8      	str	r0, [r7, #40]	; 0x28
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d001      	beq.n	800e8d4 <mbedtls_md_hmac_finish+0x50>
        return( ret );
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	e036      	b.n	800e942 <mbedtls_md_hmac_finish+0xbe>
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	691b      	ldr	r3, [r3, #16]
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	6852      	ldr	r2, [r2, #4]
 800e8de:	4610      	mov	r0, r2
 800e8e0:	4798      	blx	r3
 800e8e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d001      	beq.n	800e8ee <mbedtls_md_hmac_finish+0x6a>
        return( ret );
 800e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ec:	e029      	b.n	800e942 <mbedtls_md_hmac_finish+0xbe>
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	695b      	ldr	r3, [r3, #20]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	6850      	ldr	r0, [r2, #4]
                                           ctx->md_info->block_size ) ) != 0 )
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	6812      	ldr	r2, [r2, #0]
 800e8fc:	68d2      	ldr	r2, [r2, #12]
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 800e8fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e900:	4798      	blx	r3
 800e902:	62b8      	str	r0, [r7, #40]	; 0x28
 800e904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e906:	2b00      	cmp	r3, #0
 800e908:	d001      	beq.n	800e90e <mbedtls_md_hmac_finish+0x8a>
        return( ret );
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	e019      	b.n	800e942 <mbedtls_md_hmac_finish+0xbe>
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	695b      	ldr	r3, [r3, #20]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	6850      	ldr	r0, [r2, #4]
                                           ctx->md_info->size ) ) != 0 )
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	6812      	ldr	r2, [r2, #0]
 800e91c:	6892      	ldr	r2, [r2, #8]
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 800e91e:	f107 0108 	add.w	r1, r7, #8
 800e922:	4798      	blx	r3
 800e924:	62b8      	str	r0, [r7, #40]	; 0x28
 800e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d001      	beq.n	800e930 <mbedtls_md_hmac_finish+0xac>
        return( ret );
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	e008      	b.n	800e942 <mbedtls_md_hmac_finish+0xbe>
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	699b      	ldr	r3, [r3, #24]
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	6852      	ldr	r2, [r2, #4]
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	4610      	mov	r0, r2
 800e93e:	4798      	blx	r3
 800e940:	4603      	mov	r3, r0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3730      	adds	r7, #48	; 0x30
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	ffffaf00 	.word	0xffffaf00

0800e950 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d007      	beq.n	800e96e <mbedtls_md_hmac_reset+0x1e>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <mbedtls_md_hmac_reset+0x1e>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d101      	bne.n	800e972 <mbedtls_md_hmac_reset+0x22>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e96e:	4b10      	ldr	r3, [pc, #64]	; (800e9b0 <mbedtls_md_hmac_reset+0x60>)
 800e970:	e01a      	b.n	800e9a8 <mbedtls_md_hmac_reset+0x58>

    ipad = (unsigned char *) ctx->hmac_ctx;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	60fb      	str	r3, [r7, #12]

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	691b      	ldr	r3, [r3, #16]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	6852      	ldr	r2, [r2, #4]
 800e982:	4610      	mov	r0, r2
 800e984:	4798      	blx	r3
 800e986:	60b8      	str	r0, [r7, #8]
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <mbedtls_md_hmac_reset+0x42>
        return( ret );
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	e00a      	b.n	800e9a8 <mbedtls_md_hmac_reset+0x58>
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	695b      	ldr	r3, [r3, #20]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	6850      	ldr	r0, [r2, #4]
                                       ctx->md_info->block_size ) );
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	6812      	ldr	r2, [r2, #0]
 800e9a0:	68d2      	ldr	r2, [r2, #12]
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e9a2:	68f9      	ldr	r1, [r7, #12]
 800e9a4:	4798      	blx	r3
 800e9a6:	4603      	mov	r3, r0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	ffffaf00 	.word	0xffffaf00

0800e9b4 <mbedtls_md_process>:

    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
    if( ctx == NULL || ctx->md_info == NULL )
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d003      	beq.n	800e9cc <mbedtls_md_process+0x18>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d101      	bne.n	800e9d0 <mbedtls_md_process+0x1c>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e9cc:	4b07      	ldr	r3, [pc, #28]	; (800e9ec <mbedtls_md_process+0x38>)
 800e9ce:	e008      	b.n	800e9e2 <mbedtls_md_process+0x2e>

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	6852      	ldr	r2, [r2, #4]
 800e9da:	6839      	ldr	r1, [r7, #0]
 800e9dc:	4610      	mov	r0, r2
 800e9de:	4798      	blx	r3
 800e9e0:	4603      	mov	r3, r0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	ffffaf00 	.word	0xffffaf00

0800e9f0 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
    if( md_info == NULL )
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <mbedtls_md_get_size+0x12>
        return( 0 );
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e002      	b.n	800ea08 <mbedtls_md_get_size+0x18>

    return md_info->size;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	b2db      	uxtb	r3, r3
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <sha224_starts_wrap>:
 * Wrappers for generic message digests
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 800ea1c:	2101      	movs	r1, #1
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f003 f8f6 	bl	8011c10 <mbedtls_sha256_starts_ret>
 800ea24:	4603      	mov	r3, r0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <sha224_update_wrap>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b084      	sub	sp, #16
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	60f8      	str	r0, [r7, #12]
 800ea36:	60b9      	str	r1, [r7, #8]
 800ea38:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	68b9      	ldr	r1, [r7, #8]
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f004 fe9a 	bl	8013778 <mbedtls_sha256_update_ret>
 800ea44:	4603      	mov	r3, r0
                                       input, ilen ) );
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <sha224_finish_wrap>:

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b082      	sub	sp, #8
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 800ea58:	6839      	ldr	r1, [r7, #0]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f004 ff02 	bl	8013864 <mbedtls_sha256_finish_ret>
 800ea60:	4603      	mov	r3, r0
                                       output ) );
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <sha224_wrap>:

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b084      	sub	sp, #16
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	60b9      	str	r1, [r7, #8]
 800ea74:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 800ea76:	2301      	movs	r3, #1
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	68b9      	ldr	r1, [r7, #8]
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f005 f82b 	bl	8013ad8 <mbedtls_sha256_ret>
 800ea82:	4603      	mov	r3, r0
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <sha224_ctx_alloc>:

static void *sha224_ctx_alloc( void )
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b082      	sub	sp, #8
 800ea90:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 800ea92:	216c      	movs	r1, #108	; 0x6c
 800ea94:	2001      	movs	r0, #1
 800ea96:	f00f fd4b 	bl	801e530 <calloc>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <sha224_ctx_alloc+0x1e>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f003 f885 	bl	8011bb4 <mbedtls_sha256_init>

    return( ctx );
 800eaaa:	687b      	ldr	r3, [r7, #4]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <sha224_ctx_free>:

static void sha224_ctx_free( void *ctx )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f003 f886 	bl	8011bce <mbedtls_sha256_free>
    mbedtls_free( ctx );
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f00f fd6e 	bl	801e5a4 <free>
}
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <sha224_clone_wrap>:

static void sha224_clone_wrap( void *dst, const void *src )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 800eada:	6839      	ldr	r1, [r7, #0]
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f003 f886 	bl	8011bee <mbedtls_sha256_clone>
                    (const mbedtls_sha256_context *) src );
}
 800eae2:	bf00      	nop
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <sha224_process_wrap>:

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b082      	sub	sp, #8
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	6039      	str	r1, [r7, #0]
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 800eaf4:	6839      	ldr	r1, [r7, #0]
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f003 f8f4 	bl	8011ce4 <mbedtls_internal_sha256_process>
 800eafc:	4603      	mov	r3, r0
                                             data ) );
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <sha256_starts_wrap>:
    sha224_clone_wrap,
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b082      	sub	sp, #8
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 800eb0e:	2100      	movs	r1, #0
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f003 f87d 	bl	8011c10 <mbedtls_sha256_starts_ret>
 800eb16:	4603      	mov	r3, r0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3708      	adds	r7, #8
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <sha256_wrap>:

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	68b9      	ldr	r1, [r7, #8]
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f004 ffd0 	bl	8013ad8 <mbedtls_sha256_ret>
 800eb38:	4603      	mov	r3, r0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
	...

0800eb44 <oid_x520_attr_from_asn1>:
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	4b16      	ldr	r3, [pc, #88]	; (800eba8 <oid_x520_attr_from_asn1+0x64>)
 800eb4e:	60fb      	str	r3, [r7, #12]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	60bb      	str	r3, [r7, #8]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d002      	beq.n	800eb60 <oid_x520_attr_from_asn1+0x1c>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d11a      	bne.n	800eb96 <oid_x520_attr_from_asn1+0x52>
 800eb60:	2300      	movs	r3, #0
 800eb62:	e01d      	b.n	800eba0 <oid_x520_attr_from_asn1+0x5c>
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d10d      	bne.n	800eb8c <oid_x520_attr_from_asn1+0x48>
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	6818      	ldr	r0, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6899      	ldr	r1, [r3, #8]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	f00f fd19 	bl	801e5b4 <memcmp>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <oid_x520_attr_from_asn1+0x48>
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	e009      	b.n	800eba0 <oid_x520_attr_from_asn1+0x5c>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	3314      	adds	r3, #20
 800eb90:	60fb      	str	r3, [r7, #12]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	60bb      	str	r3, [r7, #8]
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1e2      	bne.n	800eb64 <oid_x520_attr_from_asn1+0x20>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	080254e0 	.word	0x080254e0

0800ebac <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7ff ffc4 	bl	800eb44 <oid_x520_attr_from_asn1>
 800ebbc:	60f8      	str	r0, [r7, #12]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d102      	bne.n	800ebca <mbedtls_oid_get_attr_short_name+0x1e>
 800ebc4:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800ebc8:	e004      	b.n	800ebd4 <mbedtls_oid_get_attr_short_name+0x28>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	691a      	ldr	r2, [r3, #16]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <oid_x509_ext_from_asn1>:
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	4b16      	ldr	r3, [pc, #88]	; (800ec40 <oid_x509_ext_from_asn1+0x64>)
 800ebe6:	60fb      	str	r3, [r7, #12]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	60bb      	str	r3, [r7, #8]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d002      	beq.n	800ebf8 <oid_x509_ext_from_asn1+0x1c>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d11a      	bne.n	800ec2e <oid_x509_ext_from_asn1+0x52>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	e01d      	b.n	800ec38 <oid_x509_ext_from_asn1+0x5c>
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	685a      	ldr	r2, [r3, #4]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d10d      	bne.n	800ec24 <oid_x509_ext_from_asn1+0x48>
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	6818      	ldr	r0, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6899      	ldr	r1, [r3, #8]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	461a      	mov	r2, r3
 800ec16:	f00f fccd 	bl	801e5b4 <memcmp>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d101      	bne.n	800ec24 <oid_x509_ext_from_asn1+0x48>
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	e009      	b.n	800ec38 <oid_x509_ext_from_asn1+0x5c>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	3314      	adds	r3, #20
 800ec28:	60fb      	str	r3, [r7, #12]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	60bb      	str	r3, [r7, #8]
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1e2      	bne.n	800ebfc <oid_x509_ext_from_asn1+0x20>
 800ec36:	2300      	movs	r3, #0
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	08025670 	.word	0x08025670

0800ec44 <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7ff ffc4 	bl	800ebdc <oid_x509_ext_from_asn1>
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d102      	bne.n	800ec62 <mbedtls_oid_get_x509_ext_type+0x1e>
 800ec5c:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800ec60:	e004      	b.n	800ec6c <mbedtls_oid_get_x509_ext_type+0x28>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	691a      	ldr	r2, [r3, #16]
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	601a      	str	r2, [r3, #0]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3710      	adds	r7, #16
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <oid_ext_key_usage_from_asn1>:
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	4b16      	ldr	r3, [pc, #88]	; (800ecd8 <oid_ext_key_usage_from_asn1+0x64>)
 800ec7e:	60fb      	str	r3, [r7, #12]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	60bb      	str	r3, [r7, #8]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d002      	beq.n	800ec90 <oid_ext_key_usage_from_asn1+0x1c>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d11a      	bne.n	800ecc6 <oid_ext_key_usage_from_asn1+0x52>
 800ec90:	2300      	movs	r3, #0
 800ec92:	e01d      	b.n	800ecd0 <oid_ext_key_usage_from_asn1+0x5c>
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	685a      	ldr	r2, [r3, #4]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d10d      	bne.n	800ecbc <oid_ext_key_usage_from_asn1+0x48>
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	6818      	ldr	r0, [r3, #0]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6899      	ldr	r1, [r3, #8]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	461a      	mov	r2, r3
 800ecae:	f00f fc81 	bl	801e5b4 <memcmp>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d101      	bne.n	800ecbc <oid_ext_key_usage_from_asn1+0x48>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	e009      	b.n	800ecd0 <oid_ext_key_usage_from_asn1+0x5c>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3310      	adds	r3, #16
 800ecc0:	60fb      	str	r3, [r7, #12]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	60bb      	str	r3, [r7, #8]
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1e2      	bne.n	800ec94 <oid_ext_key_usage_from_asn1+0x20>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	080256e8 	.word	0x080256e8

0800ecdc <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7ff ffc4 	bl	800ec74 <oid_ext_key_usage_from_asn1>
 800ecec:	60f8      	str	r0, [r7, #12]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d102      	bne.n	800ecfa <mbedtls_oid_get_extended_key_usage+0x1e>
 800ecf4:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800ecf8:	e004      	b.n	800ed04 <mbedtls_oid_get_extended_key_usage+0x28>
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	68da      	ldr	r2, [r3, #12]
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	601a      	str	r2, [r3, #0]
 800ed02:	2300      	movs	r3, #0
 800ed04:	4618      	mov	r0, r3
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <oid_sig_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	4b16      	ldr	r3, [pc, #88]	; (800ed70 <oid_sig_alg_from_asn1+0x64>)
 800ed16:	60fb      	str	r3, [r7, #12]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	60bb      	str	r3, [r7, #8]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d002      	beq.n	800ed28 <oid_sig_alg_from_asn1+0x1c>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d11a      	bne.n	800ed5e <oid_sig_alg_from_asn1+0x52>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	e01d      	b.n	800ed68 <oid_sig_alg_from_asn1+0x5c>
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	685a      	ldr	r2, [r3, #4]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d10d      	bne.n	800ed54 <oid_sig_alg_from_asn1+0x48>
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	6818      	ldr	r0, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6899      	ldr	r1, [r3, #8]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	461a      	mov	r2, r3
 800ed46:	f00f fc35 	bl	801e5b4 <memcmp>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d101      	bne.n	800ed54 <oid_sig_alg_from_asn1+0x48>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	e009      	b.n	800ed68 <oid_sig_alg_from_asn1+0x5c>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3314      	adds	r3, #20
 800ed58:	60fb      	str	r3, [r7, #12]
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	60bb      	str	r3, [r7, #8]
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d1e2      	bne.n	800ed2c <oid_sig_alg_from_asn1+0x20>
 800ed66:	2300      	movs	r3, #0
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	08025758 	.word	0x08025758

0800ed74 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7ff ffc4 	bl	800ed0c <oid_sig_alg_from_asn1>
 800ed84:	60f8      	str	r0, [r7, #12]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d102      	bne.n	800ed92 <mbedtls_oid_get_sig_alg_desc+0x1e>
 800ed8c:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800ed90:	e004      	b.n	800ed9c <mbedtls_oid_get_sig_alg_desc+0x28>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	68da      	ldr	r2, [r3, #12]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	601a      	str	r2, [r3, #0]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f7ff ffab 	bl	800ed0c <oid_sig_alg_from_asn1>
 800edb6:	6178      	str	r0, [r7, #20]
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d102      	bne.n	800edc4 <mbedtls_oid_get_sig_alg+0x20>
 800edbe:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800edc2:	e008      	b.n	800edd6 <mbedtls_oid_get_sig_alg+0x32>
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	7c1a      	ldrb	r2, [r3, #16]
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	701a      	strb	r2, [r3, #0]
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	7c5a      	ldrb	r2, [r3, #17]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	701a      	strb	r2, [r3, #0]
 800edd4:	2300      	movs	r3, #0
 800edd6:	4618      	mov	r0, r3
 800edd8:	3718      	adds	r7, #24
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
	...

0800ede0 <oid_pk_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	4b16      	ldr	r3, [pc, #88]	; (800ee44 <oid_pk_alg_from_asn1+0x64>)
 800edea:	60fb      	str	r3, [r7, #12]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	60bb      	str	r3, [r7, #8]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d002      	beq.n	800edfc <oid_pk_alg_from_asn1+0x1c>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d11a      	bne.n	800ee32 <oid_pk_alg_from_asn1+0x52>
 800edfc:	2300      	movs	r3, #0
 800edfe:	e01d      	b.n	800ee3c <oid_pk_alg_from_asn1+0x5c>
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	685a      	ldr	r2, [r3, #4]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d10d      	bne.n	800ee28 <oid_pk_alg_from_asn1+0x48>
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	6818      	ldr	r0, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6899      	ldr	r1, [r3, #8]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	461a      	mov	r2, r3
 800ee1a:	f00f fbcb 	bl	801e5b4 <memcmp>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d101      	bne.n	800ee28 <oid_pk_alg_from_asn1+0x48>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	e009      	b.n	800ee3c <oid_pk_alg_from_asn1+0x5c>
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	3314      	adds	r3, #20
 800ee2c:	60fb      	str	r3, [r7, #12]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	60bb      	str	r3, [r7, #8]
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d1e2      	bne.n	800ee00 <oid_pk_alg_from_asn1+0x20>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	080257a8 	.word	0x080257a8

0800ee48 <mbedtls_oid_get_pk_alg>:
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7ff ffc4 	bl	800ede0 <oid_pk_alg_from_asn1>
 800ee58:	60f8      	str	r0, [r7, #12]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d102      	bne.n	800ee66 <mbedtls_oid_get_pk_alg+0x1e>
 800ee60:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800ee64:	e004      	b.n	800ee70 <mbedtls_oid_get_pk_alg+0x28>
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	7c1a      	ldrb	r2, [r3, #16]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	701a      	strb	r2, [r3, #0]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	4618      	mov	r0, r3
 800ee72:	3710      	adds	r7, #16
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 800ee78:	b480      	push	{r7}
 800ee7a:	b087      	sub	sp, #28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	4603      	mov	r3, r0
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
 800ee84:	73fb      	strb	r3, [r7, #15]
 800ee86:	4b10      	ldr	r3, [pc, #64]	; (800eec8 <mbedtls_oid_get_oid_by_md+0x50>)
 800ee88:	617b      	str	r3, [r7, #20]
 800ee8a:	e011      	b.n	800eeb0 <mbedtls_oid_get_oid_by_md+0x38>
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	7c1b      	ldrb	r3, [r3, #16]
 800ee90:	7bfa      	ldrb	r2, [r7, #15]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d109      	bne.n	800eeaa <mbedtls_oid_get_oid_by_md+0x32>
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	601a      	str	r2, [r3, #0]
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	685a      	ldr	r2, [r3, #4]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	601a      	str	r2, [r3, #0]
 800eea6:	2300      	movs	r3, #0
 800eea8:	e008      	b.n	800eebc <mbedtls_oid_get_oid_by_md+0x44>
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	3314      	adds	r3, #20
 800eeae:	617b      	str	r3, [r7, #20]
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1e9      	bne.n	800ee8c <mbedtls_oid_get_oid_by_md+0x14>
 800eeb8:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800eebc:	4618      	mov	r0, r3
 800eebe:	371c      	adds	r7, #28
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr
 800eec8:	080257f8 	.word	0x080257f8

0800eecc <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800eecc:	b480      	push	{r7}
 800eece:	b085      	sub	sp, #20
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	60fb      	str	r3, [r7, #12]
 800eeda:	e004      	b.n	800eee6 <mbedtls_zeroize+0x1a>
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	1c5a      	adds	r2, r3, #1
 800eee0:	60fa      	str	r2, [r7, #12]
 800eee2:	2200      	movs	r2, #0
 800eee4:	701a      	strb	r2, [r3, #0]
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	1e5a      	subs	r2, r3, #1
 800eeea:	603a      	str	r2, [r7, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1f5      	bne.n	800eedc <mbedtls_zeroize+0x10>
}
 800eef0:	bf00      	nop
 800eef2:	bf00      	nop
 800eef4:	3714      	adds	r7, #20
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr

0800eefe <mbedtls_pem_init>:

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b082      	sub	sp, #8
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 800ef06:	220c      	movs	r2, #12
 800ef08:	2100      	movs	r1, #0
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f00f fb8a 	bl	801e624 <memset>
}
 800ef10:	bf00      	nop
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b08e      	sub	sp, #56	; 0x38
 800ef1c:	af02      	add	r7, sp, #8
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
 800ef24:	603b      	str	r3, [r7, #0]
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d101      	bne.n	800ef30 <mbedtls_pem_read_buffer+0x18>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 800ef2c:	4b63      	ldr	r3, [pc, #396]	; (800f0bc <mbedtls_pem_read_buffer+0x1a4>)
 800ef2e:	e0c0      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>

    s1 = (unsigned char *) strstr( (const char *) data, header );
 800ef30:	68b9      	ldr	r1, [r7, #8]
 800ef32:	6838      	ldr	r0, [r7, #0]
 800ef34:	f00f fde8 	bl	801eb08 <strstr>
 800ef38:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( s1 == NULL )
 800ef3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d101      	bne.n	800ef44 <mbedtls_pem_read_buffer+0x2c>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800ef40:	4b5f      	ldr	r3, [pc, #380]	; (800f0c0 <mbedtls_pem_read_buffer+0x1a8>)
 800ef42:	e0b6      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 800ef44:	6879      	ldr	r1, [r7, #4]
 800ef46:	6838      	ldr	r0, [r7, #0]
 800ef48:	f00f fdde 	bl	801eb08 <strstr>
 800ef4c:	6278      	str	r0, [r7, #36]	; 0x24

    if( s2 == NULL || s2 <= s1 )
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d003      	beq.n	800ef5c <mbedtls_pem_read_buffer+0x44>
 800ef54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d801      	bhi.n	800ef60 <mbedtls_pem_read_buffer+0x48>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800ef5c:	4b58      	ldr	r3, [pc, #352]	; (800f0c0 <mbedtls_pem_read_buffer+0x1a8>)
 800ef5e:	e0a8      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>

    s1 += strlen( header );
 800ef60:	68b8      	ldr	r0, [r7, #8]
 800ef62:	f7f1 f93f 	bl	80001e4 <strlen>
 800ef66:	4602      	mov	r2, r0
 800ef68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6a:	4413      	add	r3, r2
 800ef6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == ' '  ) s1++;
 800ef6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	2b20      	cmp	r3, #32
 800ef74:	d102      	bne.n	800ef7c <mbedtls_pem_read_buffer+0x64>
 800ef76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef78:	3301      	adds	r3, #1
 800ef7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == '\r' ) s1++;
 800ef7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	2b0d      	cmp	r3, #13
 800ef82:	d102      	bne.n	800ef8a <mbedtls_pem_read_buffer+0x72>
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	3301      	adds	r3, #1
 800ef88:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == '\n' ) s1++;
 800ef8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	2b0a      	cmp	r3, #10
 800ef90:	d110      	bne.n	800efb4 <mbedtls_pem_read_buffer+0x9c>
 800ef92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef94:	3301      	adds	r3, #1
 800ef96:	62fb      	str	r3, [r7, #44]	; 0x2c
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
 800ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9a:	62bb      	str	r3, [r7, #40]	; 0x28
    end += strlen( footer );
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7f1 f921 	bl	80001e4 <strlen>
 800efa2:	4602      	mov	r2, r0
 800efa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa6:	4413      	add	r3, r2
 800efa8:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == ' '  ) end++;
 800efaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	2b20      	cmp	r3, #32
 800efb0:	d105      	bne.n	800efbe <mbedtls_pem_read_buffer+0xa6>
 800efb2:	e001      	b.n	800efb8 <mbedtls_pem_read_buffer+0xa0>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800efb4:	4b42      	ldr	r3, [pc, #264]	; (800f0c0 <mbedtls_pem_read_buffer+0x1a8>)
 800efb6:	e07c      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>
    if( *end == ' '  ) end++;
 800efb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efba:	3301      	adds	r3, #1
 800efbc:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == '\r' ) end++;
 800efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	2b0d      	cmp	r3, #13
 800efc4:	d102      	bne.n	800efcc <mbedtls_pem_read_buffer+0xb4>
 800efc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc8:	3301      	adds	r3, #1
 800efca:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == '\n' ) end++;
 800efcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b0a      	cmp	r3, #10
 800efd2:	d102      	bne.n	800efda <mbedtls_pem_read_buffer+0xc2>
 800efd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd6:	3301      	adds	r3, #1
 800efd8:	62bb      	str	r3, [r7, #40]	; 0x28
    *use_len = end - data;
 800efda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	461a      	mov	r2, r3
 800efe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efe4:	601a      	str	r2, [r3, #0]

    enc = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	623b      	str	r3, [r7, #32]

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 800efea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	2b15      	cmp	r3, #21
 800eff2:	dd09      	ble.n	800f008 <mbedtls_pem_read_buffer+0xf0>
 800eff4:	2216      	movs	r2, #22
 800eff6:	4933      	ldr	r1, [pc, #204]	; (800f0c4 <mbedtls_pem_read_buffer+0x1ac>)
 800eff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800effa:	f00f fadb 	bl	801e5b4 <memcmp>
 800effe:	4603      	mov	r3, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	d101      	bne.n	800f008 <mbedtls_pem_read_buffer+0xf0>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 800f004:	4b30      	ldr	r3, [pc, #192]	; (800f0c8 <mbedtls_pem_read_buffer+0x1b0>)
 800f006:	e054      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 800f008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d301      	bcc.n	800f014 <mbedtls_pem_read_buffer+0xfc>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 800f010:	4b2e      	ldr	r3, [pc, #184]	; (800f0cc <mbedtls_pem_read_buffer+0x1b4>)
 800f012:	e04e      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 800f014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	f107 0214 	add.w	r2, r7, #20
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	2100      	movs	r1, #0
 800f024:	2000      	movs	r0, #0
 800f026:	f7f7 fea7 	bl	8006d78 <mbedtls_base64_decode>
 800f02a:	61f8      	str	r0, [r7, #28]

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	f113 0f2c 	cmn.w	r3, #44	; 0x2c
 800f032:	d103      	bne.n	800f03c <mbedtls_pem_read_buffer+0x124>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800f03a:	e03a      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	4619      	mov	r1, r3
 800f040:	2001      	movs	r0, #1
 800f042:	f00f fa75 	bl	801e530 <calloc>
 800f046:	4603      	mov	r3, r0
 800f048:	61bb      	str	r3, [r7, #24]
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d101      	bne.n	800f054 <mbedtls_pem_read_buffer+0x13c>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 800f050:	4b1f      	ldr	r3, [pc, #124]	; (800f0d0 <mbedtls_pem_read_buffer+0x1b8>)
 800f052:	e02e      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 800f054:	6979      	ldr	r1, [r7, #20]
 800f056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	1ad3      	subs	r3, r2, r3
 800f05c:	f107 0214 	add.w	r2, r7, #20
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f064:	69b8      	ldr	r0, [r7, #24]
 800f066:	f7f7 fe87 	bl	8006d78 <mbedtls_base64_decode>
 800f06a:	61f8      	str	r0, [r7, #28]
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00b      	beq.n	800f08a <mbedtls_pem_read_buffer+0x172>
    {
        mbedtls_zeroize( buf, len );
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	4619      	mov	r1, r3
 800f076:	69b8      	ldr	r0, [r7, #24]
 800f078:	f7ff ff28 	bl	800eecc <mbedtls_zeroize>
        mbedtls_free( buf );
 800f07c:	69b8      	ldr	r0, [r7, #24]
 800f07e:	f00f fa91 	bl	801e5a4 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 800f082:	69fb      	ldr	r3, [r7, #28]
 800f084:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800f088:	e013      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>
    }

    if( enc != 0 )
 800f08a:	6a3b      	ldr	r3, [r7, #32]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d009      	beq.n	800f0a4 <mbedtls_pem_read_buffer+0x18c>
            mbedtls_zeroize( buf, len );
            mbedtls_free( buf );
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
        }
#else
        mbedtls_zeroize( buf, len );
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	4619      	mov	r1, r3
 800f094:	69b8      	ldr	r0, [r7, #24]
 800f096:	f7ff ff19 	bl	800eecc <mbedtls_zeroize>
        mbedtls_free( buf );
 800f09a:	69b8      	ldr	r0, [r7, #24]
 800f09c:	f00f fa82 	bl	801e5a4 <free>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 800f0a0:	4b09      	ldr	r3, [pc, #36]	; (800f0c8 <mbedtls_pem_read_buffer+0x1b0>)
 800f0a2:	e006      	b.n	800f0b2 <mbedtls_pem_read_buffer+0x19a>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	69ba      	ldr	r2, [r7, #24]
 800f0a8:	601a      	str	r2, [r3, #0]
    ctx->buflen = len;
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	605a      	str	r2, [r3, #4]

    return( 0 );
 800f0b0:	2300      	movs	r3, #0
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3730      	adds	r7, #48	; 0x30
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	ffffeb80 	.word	0xffffeb80
 800f0c0:	ffffef80 	.word	0xffffef80
 800f0c4:	08022ab8 	.word	0x08022ab8
 800f0c8:	ffffec00 	.word	0xffffec00
 800f0cc:	ffffef00 	.word	0xffffef00
 800f0d0:	ffffee80 	.word	0xffffee80

0800f0d4 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
    if( ctx->buf != NULL )
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d007      	beq.n	800f0f4 <mbedtls_pem_free+0x20>
        mbedtls_zeroize( ctx->buf, ctx->buflen );
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	f7ff feec 	bl	800eecc <mbedtls_zeroize>
    mbedtls_free( ctx->buf );
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f00f fa53 	bl	801e5a4 <free>
    mbedtls_free( ctx->info );
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	4618      	mov	r0, r3
 800f104:	f00f fa4e 	bl	801e5a4 <free>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 800f108:	210c      	movs	r1, #12
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f7ff fede 	bl	800eecc <mbedtls_zeroize>
}
 800f110:	bf00      	nop
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <mbedtls_zeroize>:

#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	60fb      	str	r3, [r7, #12]
 800f126:	e004      	b.n	800f132 <mbedtls_zeroize+0x1a>
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	1c5a      	adds	r2, r3, #1
 800f12c:	60fa      	str	r2, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	701a      	strb	r2, [r3, #0]
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	1e5a      	subs	r2, r3, #1
 800f136:	603a      	str	r2, [r7, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1f5      	bne.n	800f128 <mbedtls_zeroize+0x10>
}
 800f13c:	bf00      	nop
 800f13e:	bf00      	nop
 800f140:	3714      	adds	r7, #20
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr

0800f14a <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b082      	sub	sp, #8
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00f      	beq.n	800f178 <mbedtls_pk_free+0x2e>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00b      	beq.n	800f178 <mbedtls_pk_free+0x2e>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	6852      	ldr	r2, [r2, #4]
 800f16a:	4610      	mov	r0, r2
 800f16c:	4798      	blx	r3

    mbedtls_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 800f16e:	2108      	movs	r1, #8
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f7ff ffd1 	bl	800f118 <mbedtls_zeroize>
 800f176:	e000      	b.n	800f17a <mbedtls_pk_free+0x30>
        return;
 800f178:	bf00      	nop
}
 800f17a:	3708      	adds	r7, #8
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 800f180:	b480      	push	{r7}
 800f182:	b083      	sub	sp, #12
 800f184:	af00      	add	r7, sp, #0
 800f186:	4603      	mov	r3, r0
 800f188:	71fb      	strb	r3, [r7, #7]
    switch( pk_type ) {
 800f18a:	79fb      	ldrb	r3, [r7, #7]
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d101      	bne.n	800f194 <mbedtls_pk_info_from_type+0x14>
#if defined(MBEDTLS_RSA_C)
        case MBEDTLS_PK_RSA:
            return( &mbedtls_rsa_info );
 800f190:	4b04      	ldr	r3, [pc, #16]	; (800f1a4 <mbedtls_pk_info_from_type+0x24>)
 800f192:	e000      	b.n	800f196 <mbedtls_pk_info_from_type+0x16>
        case MBEDTLS_PK_ECDSA:
            return( &mbedtls_ecdsa_info );
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
 800f194:	2300      	movs	r3, #0
    }
}
 800f196:	4618      	mov	r0, r3
 800f198:	370c      	adds	r7, #12
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	08025834 	.word	0x08025834

0800f1a8 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d006      	beq.n	800f1c6 <mbedtls_pk_setup+0x1e>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d003      	beq.n	800f1c6 <mbedtls_pk_setup+0x1e>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d001      	beq.n	800f1ca <mbedtls_pk_setup+0x22>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800f1c6:	4b0b      	ldr	r3, [pc, #44]	; (800f1f4 <mbedtls_pk_setup+0x4c>)
 800f1c8:	e00f      	b.n	800f1ea <mbedtls_pk_setup+0x42>

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ce:	4798      	blx	r3
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	605a      	str	r2, [r3, #4]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d101      	bne.n	800f1e2 <mbedtls_pk_setup+0x3a>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 800f1de:	4b06      	ldr	r3, [pc, #24]	; (800f1f8 <mbedtls_pk_setup+0x50>)
 800f1e0:	e003      	b.n	800f1ea <mbedtls_pk_setup+0x42>

    ctx->pk_info = info;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	683a      	ldr	r2, [r7, #0]
 800f1e6:	601a      	str	r2, [r3, #0]

    return( 0 );
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3708      	adds	r7, #8
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	ffffc180 	.word	0xffffc180
 800f1f8:	ffffc080 	.word	0xffffc080

0800f1fc <mbedtls_pk_can_do>:

/*
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	460b      	mov	r3, r1
 800f206:	70fb      	strb	r3, [r7, #3]
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d003      	beq.n	800f216 <mbedtls_pk_can_do+0x1a>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d101      	bne.n	800f21a <mbedtls_pk_can_do+0x1e>
        return( 0 );
 800f216:	2300      	movs	r3, #0
 800f218:	e006      	b.n	800f228 <mbedtls_pk_can_do+0x2c>

    return( ctx->pk_info->can_do( type ) );
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	78fa      	ldrb	r2, [r7, #3]
 800f222:	4610      	mov	r0, r2
 800f224:	4798      	blx	r3
 800f226:	4603      	mov	r3, r0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3708      	adds	r7, #8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <pk_hashlen_helper>:

/*
 * Helper for mbedtls_pk_sign and mbedtls_pk_verify
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	4603      	mov	r3, r0
 800f238:	6039      	str	r1, [r7, #0]
 800f23a:	71fb      	strb	r3, [r7, #7]
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <pk_hashlen_helper+0x18>
        return( 0 );
 800f244:	2300      	movs	r3, #0
 800f246:	e012      	b.n	800f26e <pk_hashlen_helper+0x3e>

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 800f248:	79fb      	ldrb	r3, [r7, #7]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff f992 	bl	800e574 <mbedtls_md_info_from_type>
 800f250:	60f8      	str	r0, [r7, #12]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d102      	bne.n	800f25e <pk_hashlen_helper+0x2e>
        return( -1 );
 800f258:	f04f 33ff 	mov.w	r3, #4294967295
 800f25c:	e007      	b.n	800f26e <pk_hashlen_helper+0x3e>

    *hash_len = mbedtls_md_get_size( md_info );
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7ff fbc6 	bl	800e9f0 <mbedtls_md_get_size>
 800f264:	4603      	mov	r3, r0
 800f266:	461a      	mov	r2, r3
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	601a      	str	r2, [r3, #0]
    return( 0 );
 800f26c:	2300      	movs	r3, #0
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
	...

0800f278 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 800f278:	b590      	push	{r4, r7, lr}
 800f27a:	b087      	sub	sp, #28
 800f27c:	af02      	add	r7, sp, #8
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	607a      	str	r2, [r7, #4]
 800f282:	603b      	str	r3, [r7, #0]
 800f284:	460b      	mov	r3, r1
 800f286:	72fb      	strb	r3, [r7, #11]
    if( ctx == NULL || ctx->pk_info == NULL ||
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d00c      	beq.n	800f2a8 <mbedtls_pk_verify+0x30>
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d008      	beq.n	800f2a8 <mbedtls_pk_verify+0x30>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
 800f296:	463a      	mov	r2, r7
 800f298:	7afb      	ldrb	r3, [r7, #11]
 800f29a:	4611      	mov	r1, r2
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7ff ffc7 	bl	800f230 <pk_hashlen_helper>
 800f2a2:	4603      	mov	r3, r0
    if( ctx == NULL || ctx->pk_info == NULL ||
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d001      	beq.n	800f2ac <mbedtls_pk_verify+0x34>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800f2a8:	4b0d      	ldr	r3, [pc, #52]	; (800f2e0 <mbedtls_pk_verify+0x68>)
 800f2aa:	e015      	b.n	800f2d8 <mbedtls_pk_verify+0x60>

    if( ctx->pk_info->verify_func == NULL )
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	691b      	ldr	r3, [r3, #16]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d101      	bne.n	800f2ba <mbedtls_pk_verify+0x42>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800f2b6:	4b0b      	ldr	r3, [pc, #44]	; (800f2e4 <mbedtls_pk_verify+0x6c>)
 800f2b8:	e00e      	b.n	800f2d8 <mbedtls_pk_verify+0x60>

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	691c      	ldr	r4, [r3, #16]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6858      	ldr	r0, [r3, #4]
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	7af9      	ldrb	r1, [r7, #11]
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	9301      	str	r3, [sp, #4]
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	47a0      	blx	r4
 800f2d6:	4603      	mov	r3, r0
                                       sig, sig_len ) );
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3714      	adds	r7, #20
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd90      	pop	{r4, r7, pc}
 800f2e0:	ffffc180 	.word	0xffffc180
 800f2e4:	ffffc100 	.word	0xffffc100

0800f2e8 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b086      	sub	sp, #24
 800f2ec:	af02      	add	r7, sp, #8
 800f2ee:	60b9      	str	r1, [r7, #8]
 800f2f0:	607a      	str	r2, [r7, #4]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	73fb      	strb	r3, [r7, #15]
 800f2f8:	4613      	mov	r3, r2
 800f2fa:	73bb      	strb	r3, [r7, #14]
    if( ctx == NULL || ctx->pk_info == NULL )
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d003      	beq.n	800f30a <mbedtls_pk_verify_ext+0x22>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d101      	bne.n	800f30e <mbedtls_pk_verify_ext+0x26>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800f30a:	4b12      	ldr	r3, [pc, #72]	; (800f354 <mbedtls_pk_verify_ext+0x6c>)
 800f30c:	e01e      	b.n	800f34c <mbedtls_pk_verify_ext+0x64>

    if( ! mbedtls_pk_can_do( ctx, type ) )
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff ff72 	bl	800f1fc <mbedtls_pk_can_do>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d101      	bne.n	800f322 <mbedtls_pk_verify_ext+0x3a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800f31e:	4b0e      	ldr	r3, [pc, #56]	; (800f358 <mbedtls_pk_verify_ext+0x70>)
 800f320:	e014      	b.n	800f34c <mbedtls_pk_verify_ext+0x64>

    if( type == MBEDTLS_PK_RSASSA_PSS )
 800f322:	7bfb      	ldrb	r3, [r7, #15]
 800f324:	2b06      	cmp	r3, #6
 800f326:	d101      	bne.n	800f32c <mbedtls_pk_verify_ext+0x44>
        if( sig_len > mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
#else
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 800f328:	4b0c      	ldr	r3, [pc, #48]	; (800f35c <mbedtls_pk_verify_ext+0x74>)
 800f32a:	e00f      	b.n	800f34c <mbedtls_pk_verify_ext+0x64>
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d001      	beq.n	800f336 <mbedtls_pk_verify_ext+0x4e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800f332:	4b08      	ldr	r3, [pc, #32]	; (800f354 <mbedtls_pk_verify_ext+0x6c>)
 800f334:	e00a      	b.n	800f34c <mbedtls_pk_verify_ext+0x64>

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 800f336:	7bb9      	ldrb	r1, [r7, #14]
 800f338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33a:	9301      	str	r3, [sp, #4]
 800f33c:	6a3b      	ldr	r3, [r7, #32]
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	69ba      	ldr	r2, [r7, #24]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7ff ff97 	bl	800f278 <mbedtls_pk_verify>
 800f34a:	4603      	mov	r3, r0
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	ffffc180 	.word	0xffffc180
 800f358:	ffffc100 	.word	0xffffc100
 800f35c:	ffffc680 	.word	0xffffc680

0800f360 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f360:	b590      	push	{r4, r7, lr}
 800f362:	b089      	sub	sp, #36	; 0x24
 800f364:	af04      	add	r7, sp, #16
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	607a      	str	r2, [r7, #4]
 800f36a:	603b      	str	r3, [r7, #0]
 800f36c:	460b      	mov	r3, r1
 800f36e:	72fb      	strb	r3, [r7, #11]
    if( ctx == NULL || ctx->pk_info == NULL ||
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00c      	beq.n	800f390 <mbedtls_pk_sign+0x30>
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d008      	beq.n	800f390 <mbedtls_pk_sign+0x30>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
 800f37e:	463a      	mov	r2, r7
 800f380:	7afb      	ldrb	r3, [r7, #11]
 800f382:	4611      	mov	r1, r2
 800f384:	4618      	mov	r0, r3
 800f386:	f7ff ff53 	bl	800f230 <pk_hashlen_helper>
 800f38a:	4603      	mov	r3, r0
    if( ctx == NULL || ctx->pk_info == NULL ||
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d001      	beq.n	800f394 <mbedtls_pk_sign+0x34>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800f390:	4b0f      	ldr	r3, [pc, #60]	; (800f3d0 <mbedtls_pk_sign+0x70>)
 800f392:	e019      	b.n	800f3c8 <mbedtls_pk_sign+0x68>

    if( ctx->pk_info->sign_func == NULL )
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	695b      	ldr	r3, [r3, #20]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d101      	bne.n	800f3a2 <mbedtls_pk_sign+0x42>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800f39e:	4b0d      	ldr	r3, [pc, #52]	; (800f3d4 <mbedtls_pk_sign+0x74>)
 800f3a0:	e012      	b.n	800f3c8 <mbedtls_pk_sign+0x68>

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	695c      	ldr	r4, [r3, #20]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6858      	ldr	r0, [r3, #4]
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	7af9      	ldrb	r1, [r7, #11]
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	9303      	str	r3, [sp, #12]
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	9302      	str	r3, [sp, #8]
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ba:	9301      	str	r3, [sp, #4]
 800f3bc:	6a3b      	ldr	r3, [r7, #32]
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	47a0      	blx	r4
 800f3c6:	4603      	mov	r3, r0
                                     sig, sig_len, f_rng, p_rng ) );
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3714      	adds	r7, #20
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd90      	pop	{r4, r7, pc}
 800f3d0:	ffffc180 	.word	0xffffc180
 800f3d4:	ffffc100 	.word	0xffffc100

0800f3d8 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f3d8:	b590      	push	{r4, r7, lr}
 800f3da:	b089      	sub	sp, #36	; 0x24
 800f3dc:	af04      	add	r7, sp, #16
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
 800f3e4:	603b      	str	r3, [r7, #0]
    if( ctx == NULL || ctx->pk_info == NULL )
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d003      	beq.n	800f3f4 <mbedtls_pk_encrypt+0x1c>
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d101      	bne.n	800f3f8 <mbedtls_pk_encrypt+0x20>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800f3f4:	4b0f      	ldr	r3, [pc, #60]	; (800f434 <mbedtls_pk_encrypt+0x5c>)
 800f3f6:	e018      	b.n	800f42a <mbedtls_pk_encrypt+0x52>

    if( ctx->pk_info->encrypt_func == NULL )
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	69db      	ldr	r3, [r3, #28]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d101      	bne.n	800f406 <mbedtls_pk_encrypt+0x2e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800f402:	4b0d      	ldr	r3, [pc, #52]	; (800f438 <mbedtls_pk_encrypt+0x60>)
 800f404:	e011      	b.n	800f42a <mbedtls_pk_encrypt+0x52>

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	69dc      	ldr	r4, [r3, #28]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6858      	ldr	r0, [r3, #4]
 800f410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f412:	9303      	str	r3, [sp, #12]
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	9302      	str	r3, [sp, #8]
 800f418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41a:	9301      	str	r3, [sp, #4]
 800f41c:	6a3b      	ldr	r3, [r7, #32]
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	68b9      	ldr	r1, [r7, #8]
 800f426:	47a0      	blx	r4
 800f428:	4603      	mov	r3, r0
                output, olen, osize, f_rng, p_rng ) );
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd90      	pop	{r4, r7, pc}
 800f432:	bf00      	nop
 800f434:	ffffc180 	.word	0xffffc180
 800f438:	ffffc100 	.word	0xffffc100

0800f43c <mbedtls_pk_get_bitlen>:

/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <mbedtls_pk_get_bitlen+0x16>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d101      	bne.n	800f456 <mbedtls_pk_get_bitlen+0x1a>
        return( 0 );
 800f452:	2300      	movs	r3, #0
 800f454:	e007      	b.n	800f466 <mbedtls_pk_get_bitlen+0x2a>

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	689b      	ldr	r3, [r3, #8]
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	6852      	ldr	r2, [r2, #4]
 800f460:	4610      	mov	r0, r2
 800f462:	4798      	blx	r3
 800f464:	4603      	mov	r3, r0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
	...

0800f470 <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
    if( ctx == NULL || ctx->pk_info == NULL )
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d003      	beq.n	800f488 <mbedtls_pk_debug+0x18>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d101      	bne.n	800f48c <mbedtls_pk_debug+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800f488:	4b0a      	ldr	r3, [pc, #40]	; (800f4b4 <mbedtls_pk_debug+0x44>)
 800f48a:	e00f      	b.n	800f4ac <mbedtls_pk_debug+0x3c>

    if( ctx->pk_info->debug_func == NULL )
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f492:	2b00      	cmp	r3, #0
 800f494:	d101      	bne.n	800f49a <mbedtls_pk_debug+0x2a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800f496:	4b08      	ldr	r3, [pc, #32]	; (800f4b8 <mbedtls_pk_debug+0x48>)
 800f498:	e008      	b.n	800f4ac <mbedtls_pk_debug+0x3c>

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	6852      	ldr	r2, [r2, #4]
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	4610      	mov	r0, r2
 800f4a8:	4798      	blx	r3
    return( 0 );
 800f4aa:	2300      	movs	r3, #0
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	ffffc180 	.word	0xffffc180
 800f4b8:	ffffc100 	.word	0xffffc100

0800f4bc <mbedtls_pk_get_name>:

/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d003      	beq.n	800f4d2 <mbedtls_pk_get_name+0x16>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d101      	bne.n	800f4d6 <mbedtls_pk_get_name+0x1a>
        return( "invalid PK" );
 800f4d2:	4b05      	ldr	r3, [pc, #20]	; (800f4e8 <mbedtls_pk_get_name+0x2c>)
 800f4d4:	e002      	b.n	800f4dc <mbedtls_pk_get_name+0x20>

    return( ctx->pk_info->name );
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	685b      	ldr	r3, [r3, #4]
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr
 800f4e8:	08022ad0 	.word	0x08022ad0

0800f4ec <mbedtls_pk_get_type>:

/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d003      	beq.n	800f502 <mbedtls_pk_get_type+0x16>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d101      	bne.n	800f506 <mbedtls_pk_get_type+0x1a>
        return( MBEDTLS_PK_NONE );
 800f502:	2300      	movs	r3, #0
 800f504:	e002      	b.n	800f50c <mbedtls_pk_get_type+0x20>

    return( ctx->pk_info->type );
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	781b      	ldrb	r3, [r3, #0]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	370c      	adds	r7, #12
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <rsa_can_do>:
}
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	4603      	mov	r3, r0
 800f520:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_RSA ||
 800f522:	79fb      	ldrb	r3, [r7, #7]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d002      	beq.n	800f52e <rsa_can_do+0x16>
 800f528:	79fb      	ldrb	r3, [r7, #7]
 800f52a:	2b06      	cmp	r3, #6
 800f52c:	d101      	bne.n	800f532 <rsa_can_do+0x1a>
 800f52e:	2301      	movs	r3, #1
 800f530:	e000      	b.n	800f534 <rsa_can_do+0x1c>
 800f532:	2300      	movs	r3, #0
            type == MBEDTLS_PK_RSASSA_PSS );
}
 800f534:	4618      	mov	r0, r3
 800f536:	370c      	adds	r7, #12
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <rsa_get_bitlen>:

static size_t rsa_get_bitlen( const void *ctx )
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	60fb      	str	r3, [r7, #12]
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	f000 fd09 	bl	800ff64 <mbedtls_rsa_get_len>
 800f552:	4603      	mov	r3, r0
 800f554:	00db      	lsls	r3, r3, #3
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
	...

0800f560 <rsa_verify_wrap>:

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b08c      	sub	sp, #48	; 0x30
 800f564:	af04      	add	r7, sp, #16
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	607a      	str	r2, [r7, #4]
 800f56a:	603b      	str	r3, [r7, #0]
 800f56c:	460b      	mov	r3, r1
 800f56e:	72fb      	strb	r3, [r7, #11]
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	61fb      	str	r3, [r7, #28]
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 800f574:	69f8      	ldr	r0, [r7, #28]
 800f576:	f000 fcf5 	bl	800ff64 <mbedtls_rsa_get_len>
 800f57a:	61b8      	str	r0, [r7, #24]
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 800f57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	429a      	cmp	r2, r3
 800f582:	d201      	bcs.n	800f588 <rsa_verify_wrap+0x28>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 800f584:	4b10      	ldr	r3, [pc, #64]	; (800f5c8 <rsa_verify_wrap+0x68>)
 800f586:	e01a      	b.n	800f5be <rsa_verify_wrap+0x5e>

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	9303      	str	r3, [sp, #12]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	9302      	str	r3, [sp, #8]
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	9301      	str	r3, [sp, #4]
 800f594:	7afb      	ldrb	r3, [r7, #11]
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	2300      	movs	r3, #0
 800f59a:	2200      	movs	r2, #0
 800f59c:	2100      	movs	r1, #0
 800f59e:	69f8      	ldr	r0, [r7, #28]
 800f5a0:	f001 fde8 	bl	8011174 <mbedtls_rsa_pkcs1_verify>
 800f5a4:	6178      	str	r0, [r7, #20]
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d001      	beq.n	800f5b0 <rsa_verify_wrap+0x50>
                                  MBEDTLS_RSA_PUBLIC, md_alg,
                                  (unsigned int) hash_len, hash, sig ) ) != 0 )
        return( ret );
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	e006      	b.n	800f5be <rsa_verify_wrap+0x5e>

    if( sig_len > rsa_len )
 800f5b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d901      	bls.n	800f5bc <rsa_verify_wrap+0x5c>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 800f5b8:	4b04      	ldr	r3, [pc, #16]	; (800f5cc <rsa_verify_wrap+0x6c>)
 800f5ba:	e000      	b.n	800f5be <rsa_verify_wrap+0x5e>

    return( 0 );
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3720      	adds	r7, #32
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	ffffbc80 	.word	0xffffbc80
 800f5cc:	ffffc700 	.word	0xffffc700

0800f5d0 <rsa_sign_wrap>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b08a      	sub	sp, #40	; 0x28
 800f5d4:	af04      	add	r7, sp, #16
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	607a      	str	r2, [r7, #4]
 800f5da:	603b      	str	r3, [r7, #0]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	72fb      	strb	r3, [r7, #11]
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	617b      	str	r3, [r7, #20]
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 800f5e4:	6978      	ldr	r0, [r7, #20]
 800f5e6:	f000 fcbd 	bl	800ff64 <mbedtls_rsa_get_len>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ee:	601a      	str	r2, [r3, #0]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 800f5f0:	6a3b      	ldr	r3, [r7, #32]
 800f5f2:	9303      	str	r3, [sp, #12]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	9302      	str	r3, [sp, #8]
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	9301      	str	r3, [sp, #4]
 800f5fc:	7afb      	ldrb	r3, [r7, #11]
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	2301      	movs	r3, #1
 800f602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f606:	6978      	ldr	r0, [r7, #20]
 800f608:	f001 fd0e 	bl	8011028 <mbedtls_rsa_pkcs1_sign>
 800f60c:	4603      	mov	r3, r0
                md_alg, (unsigned int) hash_len, hash, sig ) );
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3718      	adds	r7, #24
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
	...

0800f618 <rsa_decrypt_wrap>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b08a      	sub	sp, #40	; 0x28
 800f61c:	af04      	add	r7, sp, #16
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
 800f624:	603b      	str	r3, [r7, #0]
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	617b      	str	r3, [r7, #20]

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 800f62a:	6978      	ldr	r0, [r7, #20]
 800f62c:	f000 fc9a 	bl	800ff64 <mbedtls_rsa_get_len>
 800f630:	4602      	mov	r2, r0
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4293      	cmp	r3, r2
 800f636:	d001      	beq.n	800f63c <rsa_decrypt_wrap+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f638:	4b0a      	ldr	r3, [pc, #40]	; (800f664 <rsa_decrypt_wrap+0x4c>)
 800f63a:	e00e      	b.n	800f65a <rsa_decrypt_wrap+0x42>

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 800f63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63e:	9303      	str	r3, [sp, #12]
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	9302      	str	r3, [sp, #8]
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	9301      	str	r3, [sp, #4]
 800f648:	6a3b      	ldr	r3, [r7, #32]
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	2301      	movs	r3, #1
 800f64e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f652:	6978      	ldr	r0, [r7, #20]
 800f654:	f001 fb4a 	bl	8010cec <mbedtls_rsa_pkcs1_decrypt>
 800f658:	4603      	mov	r3, r0
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3718      	adds	r7, #24
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	ffffbf80 	.word	0xffffbf80

0800f668 <rsa_encrypt_wrap>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08a      	sub	sp, #40	; 0x28
 800f66c:	af04      	add	r7, sp, #16
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
 800f674:	603b      	str	r3, [r7, #0]
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	617b      	str	r3, [r7, #20]
    *olen = mbedtls_rsa_get_len( rsa );
 800f67a:	6978      	ldr	r0, [r7, #20]
 800f67c:	f000 fc72 	bl	800ff64 <mbedtls_rsa_get_len>
 800f680:	4602      	mov	r2, r0
 800f682:	6a3b      	ldr	r3, [r7, #32]
 800f684:	601a      	str	r2, [r3, #0]

    if( *olen > osize )
 800f686:	6a3b      	ldr	r3, [r7, #32]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d201      	bcs.n	800f694 <rsa_encrypt_wrap+0x2c>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );
 800f690:	4b09      	ldr	r3, [pc, #36]	; (800f6b8 <rsa_encrypt_wrap+0x50>)
 800f692:	e00c      	b.n	800f6ae <rsa_encrypt_wrap+0x46>

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	9302      	str	r3, [sp, #8]
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	9301      	str	r3, [sp, #4]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	9300      	str	r3, [sp, #0]
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6a6:	6978      	ldr	r0, [r7, #20]
 800f6a8:	f001 f96a 	bl	8010980 <mbedtls_rsa_pkcs1_encrypt>
 800f6ac:	4603      	mov	r3, r0
                                       ilen, input, output ) );
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3718      	adds	r7, #24
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	ffffbc00 	.word	0xffffbc00

0800f6bc <rsa_check_pair_wrap>:

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 800f6c6:	6839      	ldr	r1, [r7, #0]
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f000 fce7 	bl	801009c <mbedtls_rsa_check_pub_priv>
 800f6ce:	4603      	mov	r3, r0
                                (const mbedtls_rsa_context *) prv ) );
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <rsa_alloc_wrap>:

static void *rsa_alloc_wrap( void )
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 800f6de:	21ac      	movs	r1, #172	; 0xac
 800f6e0:	2001      	movs	r0, #1
 800f6e2:	f00e ff25 	bl	801e530 <calloc>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d004      	beq.n	800f6fa <rsa_alloc_wrap+0x22>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 fc0d 	bl	800ff14 <mbedtls_rsa_init>

    return( ctx );
 800f6fa:	687b      	ldr	r3, [r7, #4]
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <rsa_free_wrap>:

static void rsa_free_wrap( void *ctx )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f001 fd55 	bl	80111bc <mbedtls_rsa_free>
    mbedtls_free( ctx );
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f00e ff46 	bl	801e5a4 <free>
}
 800f718:	bf00      	nop
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <rsa_debug>:

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
    items->type = MBEDTLS_PK_DEBUG_MPI;
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2201      	movs	r2, #1
 800f72e:	701a      	strb	r2, [r3, #0]
    items->name = "rsa.N";
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	4a0d      	ldr	r2, [pc, #52]	; (800f768 <rsa_debug+0x48>)
 800f734:	605a      	str	r2, [r3, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f103 0208 	add.w	r2, r3, #8
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	609a      	str	r2, [r3, #8]

    items++;
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	330c      	adds	r3, #12
 800f744:	603b      	str	r3, [r7, #0]

    items->type = MBEDTLS_PK_DEBUG_MPI;
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	2201      	movs	r2, #1
 800f74a:	701a      	strb	r2, [r3, #0]
    items->name = "rsa.E";
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	4a07      	ldr	r2, [pc, #28]	; (800f76c <rsa_debug+0x4c>)
 800f750:	605a      	str	r2, [r3, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f103 0214 	add.w	r2, r3, #20
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	609a      	str	r2, [r3, #8]
}
 800f75c:	bf00      	nop
 800f75e:	370c      	adds	r7, #12
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr
 800f768:	08022adc 	.word	0x08022adc
 800f76c:	08022ae4 	.word	0x08022ae4

0800f770 <mbedtls_pk_rsa>:
 *
 * \warning You must make sure the PK context actually holds an RSA context
 * before using this function!
 */
static inline mbedtls_rsa_context *mbedtls_pk_rsa( const mbedtls_pk_context pk )
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	463b      	mov	r3, r7
 800f778:	e883 0003 	stmia.w	r3, {r0, r1}
    return( (mbedtls_rsa_context *) (pk).pk_ctx );
 800f77c:	687b      	ldr	r3, [r7, #4]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
	...

0800f78c <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08e      	sub	sp, #56	; 0x38
 800f790:	af08      	add	r7, sp, #32
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800f798:	f107 0210 	add.w	r2, r7, #16
 800f79c:	2330      	movs	r3, #48	; 0x30
 800f79e:	68b9      	ldr	r1, [r7, #8]
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	f7f7 f8ff 	bl	80069a4 <mbedtls_asn1_get_tag>
 800f7a6:	6178      	str	r0, [r7, #20]
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d003      	beq.n	800f7b6 <pk_get_rsapubkey+0x2a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f7b4:	e07e      	b.n	800f8b4 <pk_get_rsapubkey+0x128>

    if( *p + len != end )
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	4413      	add	r3, r2
 800f7be:	68ba      	ldr	r2, [r7, #8]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d001      	beq.n	800f7c8 <pk_get_rsapubkey+0x3c>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 800f7c4:	4b3d      	ldr	r3, [pc, #244]	; (800f8bc <pk_get_rsapubkey+0x130>)
 800f7c6:	e075      	b.n	800f8b4 <pk_get_rsapubkey+0x128>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800f7c8:	f107 0210 	add.w	r2, r7, #16
 800f7cc:	2302      	movs	r3, #2
 800f7ce:	68b9      	ldr	r1, [r7, #8]
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f7f7 f8e7 	bl	80069a4 <mbedtls_asn1_get_tag>
 800f7d6:	6178      	str	r0, [r7, #20]
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d003      	beq.n	800f7e6 <pk_get_rsapubkey+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f7e4:	e066      	b.n	800f8b4 <pk_get_rsapubkey+0x128>

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6819      	ldr	r1, [r3, #0]
 800f7ea:	693a      	ldr	r2, [r7, #16]
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	9306      	str	r3, [sp, #24]
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	9305      	str	r3, [sp, #20]
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	9304      	str	r3, [sp, #16]
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	9303      	str	r3, [sp, #12]
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	9302      	str	r3, [sp, #8]
 800f800:	2300      	movs	r3, #0
 800f802:	9301      	str	r3, [sp, #4]
 800f804:	2300      	movs	r3, #0
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	2300      	movs	r3, #0
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 f961 	bl	800fad2 <mbedtls_rsa_import_raw>
 800f810:	6178      	str	r0, [r7, #20]
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d001      	beq.n	800f81c <pk_get_rsapubkey+0x90>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 800f818:	4b29      	ldr	r3, [pc, #164]	; (800f8c0 <pk_get_rsapubkey+0x134>)
 800f81a:	e04b      	b.n	800f8b4 <pk_get_rsapubkey+0x128>

    *p += len;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	441a      	add	r2, r3
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	601a      	str	r2, [r3, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800f828:	f107 0210 	add.w	r2, r7, #16
 800f82c:	2302      	movs	r3, #2
 800f82e:	68b9      	ldr	r1, [r7, #8]
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f7f7 f8b7 	bl	80069a4 <mbedtls_asn1_get_tag>
 800f836:	6178      	str	r0, [r7, #20]
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d003      	beq.n	800f846 <pk_get_rsapubkey+0xba>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f844:	e036      	b.n	800f8b4 <pk_get_rsapubkey+0x128>

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	693a      	ldr	r2, [r7, #16]
 800f84c:	9206      	str	r2, [sp, #24]
 800f84e:	9305      	str	r3, [sp, #20]
 800f850:	2300      	movs	r3, #0
 800f852:	9304      	str	r3, [sp, #16]
 800f854:	2300      	movs	r3, #0
 800f856:	9303      	str	r3, [sp, #12]
 800f858:	2300      	movs	r3, #0
 800f85a:	9302      	str	r3, [sp, #8]
 800f85c:	2300      	movs	r3, #0
 800f85e:	9301      	str	r3, [sp, #4]
 800f860:	2300      	movs	r3, #0
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	2300      	movs	r3, #0
 800f866:	2200      	movs	r2, #0
 800f868:	2100      	movs	r1, #0
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 f931 	bl	800fad2 <mbedtls_rsa_import_raw>
 800f870:	6178      	str	r0, [r7, #20]
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <pk_get_rsapubkey+0xf0>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 800f878:	4b11      	ldr	r3, [pc, #68]	; (800f8c0 <pk_get_rsapubkey+0x134>)
 800f87a:	e01b      	b.n	800f8b4 <pk_get_rsapubkey+0x128>

    *p += len;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	441a      	add	r2, r3
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	601a      	str	r2, [r3, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fa1b 	bl	800fcc4 <mbedtls_rsa_complete>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d105      	bne.n	800f8a0 <pk_get_rsapubkey+0x114>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f000 fb71 	bl	800ff7c <mbedtls_rsa_check_pubkey>
 800f89a:	4603      	mov	r3, r0
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d001      	beq.n	800f8a4 <pk_get_rsapubkey+0x118>
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 800f8a0:	4b07      	ldr	r3, [pc, #28]	; (800f8c0 <pk_get_rsapubkey+0x134>)
 800f8a2:	e007      	b.n	800f8b4 <pk_get_rsapubkey+0x128>
    }

    if( *p != end )
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d001      	beq.n	800f8b2 <pk_get_rsapubkey+0x126>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 800f8ae:	4b03      	ldr	r3, [pc, #12]	; (800f8bc <pk_get_rsapubkey+0x130>)
 800f8b0:	e000      	b.n	800f8b4 <pk_get_rsapubkey+0x128>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 800f8b2:	2300      	movs	r3, #0
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3718      	adds	r7, #24
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	ffffc49a 	.word	0xffffc49a
 800f8c0:	ffffc500 	.word	0xffffc500

0800f8c4 <pk_get_pk_alg>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b088      	sub	sp, #32
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	607a      	str	r2, [r7, #4]
 800f8d0:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 800f8d2:	220c      	movs	r2, #12
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	6838      	ldr	r0, [r7, #0]
 800f8d8:	f00e fea4 	bl	801e624 <memset>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 800f8dc:	f107 0210 	add.w	r2, r7, #16
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	68b9      	ldr	r1, [r7, #8]
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f7f7 f9cc 	bl	8006c82 <mbedtls_asn1_get_alg>
 800f8ea:	61f8      	str	r0, [r7, #28]
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d003      	beq.n	800f8fa <pk_get_pk_alg+0x36>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	f5a3 536a 	sub.w	r3, r3, #14976	; 0x3a80
 800f8f8:	e01d      	b.n	800f936 <pk_get_pk_alg+0x72>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 800f8fa:	f107 0310 	add.w	r3, r7, #16
 800f8fe:	6879      	ldr	r1, [r7, #4]
 800f900:	4618      	mov	r0, r3
 800f902:	f7ff faa1 	bl	800ee48 <mbedtls_oid_get_pk_alg>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d001      	beq.n	800f910 <pk_get_pk_alg+0x4c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 800f90c:	4b0c      	ldr	r3, [pc, #48]	; (800f940 <pk_get_pk_alg+0x7c>)
 800f90e:	e012      	b.n	800f936 <pk_get_pk_alg+0x72>

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	2b01      	cmp	r3, #1
 800f916:	d10d      	bne.n	800f934 <pk_get_pk_alg+0x70>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	681b      	ldr	r3, [r3, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 800f91c:	2b05      	cmp	r3, #5
 800f91e:	d003      	beq.n	800f928 <pk_get_pk_alg+0x64>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d103      	bne.n	800f930 <pk_get_pk_alg+0x6c>
                params->len != 0 ) )
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	685b      	ldr	r3, [r3, #4]
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <pk_get_pk_alg+0x70>
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 800f930:	4b04      	ldr	r3, [pc, #16]	; (800f944 <pk_get_pk_alg+0x80>)
 800f932:	e000      	b.n	800f936 <pk_get_pk_alg+0x72>
    }

    return( 0 );
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3720      	adds	r7, #32
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	ffffc380 	.word	0xffffc380
 800f944:	ffffc580 	.word	0xffffc580

0800f948 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b08c      	sub	sp, #48	; 0x30
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 800f954:	2300      	movs	r3, #0
 800f956:	75fb      	strb	r3, [r7, #23]
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800f958:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f95c:	2330      	movs	r3, #48	; 0x30
 800f95e:	68b9      	ldr	r1, [r7, #8]
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	f7f7 f81f 	bl	80069a4 <mbedtls_asn1_get_tag>
 800f966:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d003      	beq.n	800f976 <mbedtls_pk_parse_subpubkey+0x2e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 800f96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f970:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 800f974:	e061      	b.n	800fa3a <mbedtls_pk_parse_subpubkey+0xf2>
    }

    end = *p + len;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97c:	4413      	add	r3, r2
 800f97e:	60bb      	str	r3, [r7, #8]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 800f980:	f107 0318 	add.w	r3, r7, #24
 800f984:	f107 0217 	add.w	r2, r7, #23
 800f988:	68b9      	ldr	r1, [r7, #8]
 800f98a:	68f8      	ldr	r0, [r7, #12]
 800f98c:	f7ff ff9a 	bl	800f8c4 <pk_get_pk_alg>
 800f990:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f994:	2b00      	cmp	r3, #0
 800f996:	d001      	beq.n	800f99c <mbedtls_pk_parse_subpubkey+0x54>
        return( ret );
 800f998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99a:	e04e      	b.n	800fa3a <mbedtls_pk_parse_subpubkey+0xf2>

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 800f99c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	68b9      	ldr	r1, [r7, #8]
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f7f7 f8d9 	bl	8006b5c <mbedtls_asn1_get_bitstring_null>
 800f9aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d003      	beq.n	800f9ba <mbedtls_pk_parse_subpubkey+0x72>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b4:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f9b8:	e03f      	b.n	800fa3a <mbedtls_pk_parse_subpubkey+0xf2>

    if( *p + len != end )
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c0:	4413      	add	r3, r2
 800f9c2:	68ba      	ldr	r2, [r7, #8]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d001      	beq.n	800f9cc <mbedtls_pk_parse_subpubkey+0x84>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 800f9c8:	4b1e      	ldr	r3, [pc, #120]	; (800fa44 <mbedtls_pk_parse_subpubkey+0xfc>)
 800f9ca:	e036      	b.n	800fa3a <mbedtls_pk_parse_subpubkey+0xf2>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 800f9cc:	7dfb      	ldrb	r3, [r7, #23]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff fbd6 	bl	800f180 <mbedtls_pk_info_from_type>
 800f9d4:	62b8      	str	r0, [r7, #40]	; 0x28
 800f9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d101      	bne.n	800f9e0 <mbedtls_pk_parse_subpubkey+0x98>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 800f9dc:	4b1a      	ldr	r3, [pc, #104]	; (800fa48 <mbedtls_pk_parse_subpubkey+0x100>)
 800f9de:	e02c      	b.n	800fa3a <mbedtls_pk_parse_subpubkey+0xf2>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 800f9e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7ff fbe0 	bl	800f1a8 <mbedtls_pk_setup>
 800f9e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <mbedtls_pk_parse_subpubkey+0xac>
        return( ret );
 800f9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f2:	e022      	b.n	800fa3a <mbedtls_pk_parse_subpubkey+0xf2>

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 800f9f4:	7dfb      	ldrb	r3, [r7, #23]
 800f9f6:	2b01      	cmp	r3, #1
 800f9f8:	d10c      	bne.n	800fa14 <mbedtls_pk_parse_subpubkey+0xcc>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fa00:	f7ff feb6 	bl	800f770 <mbedtls_pk_rsa>
 800fa04:	4603      	mov	r3, r0
 800fa06:	461a      	mov	r2, r3
 800fa08:	68b9      	ldr	r1, [r7, #8]
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f7ff febe 	bl	800f78c <pk_get_rsapubkey>
 800fa10:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fa12:	e001      	b.n	800fa18 <mbedtls_pk_parse_subpubkey+0xd0>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 800fa14:	4b0c      	ldr	r3, [pc, #48]	; (800fa48 <mbedtls_pk_parse_subpubkey+0x100>)
 800fa16:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ret == 0 && *p != end )
 800fa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d106      	bne.n	800fa2c <mbedtls_pk_parse_subpubkey+0xe4>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	68ba      	ldr	r2, [r7, #8]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d001      	beq.n	800fa2c <mbedtls_pk_parse_subpubkey+0xe4>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 800fa28:	4b06      	ldr	r3, [pc, #24]	; (800fa44 <mbedtls_pk_parse_subpubkey+0xfc>)
 800fa2a:	62fb      	str	r3, [r7, #44]	; 0x2c
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;

    if( ret != 0 )
 800fa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d002      	beq.n	800fa38 <mbedtls_pk_parse_subpubkey+0xf0>
        mbedtls_pk_free( pk );
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f7ff fb89 	bl	800f14a <mbedtls_pk_free>

    return( ret );
 800fa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3730      	adds	r7, #48	; 0x30
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	ffffc49a 	.word	0xffffc49a
 800fa48:	ffffc380 	.word	0xffffc380

0800fa4c <mbedtls_zeroize>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800fa4c:	b480      	push	{r7}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	60fb      	str	r3, [r7, #12]
 800fa5a:	e004      	b.n	800fa66 <mbedtls_zeroize+0x1a>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	1c5a      	adds	r2, r3, #1
 800fa60:	60fa      	str	r2, [r7, #12]
 800fa62:	2200      	movs	r2, #0
 800fa64:	701a      	strb	r2, [r3, #0]
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	1e5a      	subs	r2, r3, #1
 800fa6a:	603a      	str	r2, [r7, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1f5      	bne.n	800fa5c <mbedtls_zeroize+0x10>
}
 800fa70:	bf00      	nop
 800fa72:	bf00      	nop
 800fa74:	3714      	adds	r7, #20
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr

0800fa7e <mbedtls_safer_memcmp>:

/* constant-time buffer comparison */
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
 800fa7e:	b480      	push	{r7}
 800fa80:	b089      	sub	sp, #36	; 0x24
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	60f8      	str	r0, [r7, #12]
 800fa86:	60b9      	str	r1, [r7, #8]
 800fa88:	607a      	str	r2, [r7, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	617b      	str	r3, [r7, #20]
    const unsigned char *B = (const unsigned char *) b;
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	613b      	str	r3, [r7, #16]
    unsigned char diff = 0;
 800fa92:	2300      	movs	r3, #0
 800fa94:	76fb      	strb	r3, [r7, #27]

    for( i = 0; i < n; i++ )
 800fa96:	2300      	movs	r3, #0
 800fa98:	61fb      	str	r3, [r7, #28]
 800fa9a:	e00f      	b.n	800fabc <mbedtls_safer_memcmp+0x3e>
        diff |= A[i] ^ B[i];
 800fa9c:	697a      	ldr	r2, [r7, #20]
 800fa9e:	69fb      	ldr	r3, [r7, #28]
 800faa0:	4413      	add	r3, r2
 800faa2:	781a      	ldrb	r2, [r3, #0]
 800faa4:	6939      	ldr	r1, [r7, #16]
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	440b      	add	r3, r1
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	4053      	eors	r3, r2
 800faae:	b2da      	uxtb	r2, r3
 800fab0:	7efb      	ldrb	r3, [r7, #27]
 800fab2:	4313      	orrs	r3, r2
 800fab4:	76fb      	strb	r3, [r7, #27]
    for( i = 0; i < n; i++ )
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	3301      	adds	r3, #1
 800faba:	61fb      	str	r3, [r7, #28]
 800fabc:	69fa      	ldr	r2, [r7, #28]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d3eb      	bcc.n	800fa9c <mbedtls_safer_memcmp+0x1e>

    return( diff );
 800fac4:	7efb      	ldrb	r3, [r7, #27]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3724      	adds	r7, #36	; 0x24
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr

0800fad2 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b086      	sub	sp, #24
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	60f8      	str	r0, [r7, #12]
 800fada:	60b9      	str	r1, [r7, #8]
 800fadc:	607a      	str	r2, [r7, #4]
 800fade:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800fae0:	2300      	movs	r3, #0
 800fae2:	617b      	str	r3, [r7, #20]

    if( N != NULL )
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d012      	beq.n	800fb10 <mbedtls_rsa_import_raw+0x3e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	3308      	adds	r3, #8
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	68b9      	ldr	r1, [r7, #8]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7f7 fc44 	bl	8007380 <mbedtls_mpi_read_binary>
 800faf8:	6178      	str	r0, [r7, #20]
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d13f      	bne.n	800fb80 <mbedtls_rsa_import_raw+0xae>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	3308      	adds	r3, #8
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7f7 fc2d 	bl	8007364 <mbedtls_mpi_size>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	605a      	str	r2, [r3, #4]
    }

    if( P != NULL )
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d00a      	beq.n	800fb2c <mbedtls_rsa_import_raw+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	332c      	adds	r3, #44	; 0x2c
 800fb1a:	6a3a      	ldr	r2, [r7, #32]
 800fb1c:	6839      	ldr	r1, [r7, #0]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7f7 fc2e 	bl	8007380 <mbedtls_mpi_read_binary>
 800fb24:	6178      	str	r0, [r7, #20]
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d12b      	bne.n	800fb84 <mbedtls_rsa_import_raw+0xb2>

    if( Q != NULL )
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d00a      	beq.n	800fb48 <mbedtls_rsa_import_raw+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	3338      	adds	r3, #56	; 0x38
 800fb36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7f7 fc20 	bl	8007380 <mbedtls_mpi_read_binary>
 800fb40:	6178      	str	r0, [r7, #20]
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d11f      	bne.n	800fb88 <mbedtls_rsa_import_raw+0xb6>

    if( D != NULL )
 800fb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00a      	beq.n	800fb64 <mbedtls_rsa_import_raw+0x92>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3320      	adds	r3, #32
 800fb52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7f7 fc12 	bl	8007380 <mbedtls_mpi_read_binary>
 800fb5c:	6178      	str	r0, [r7, #20]
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d113      	bne.n	800fb8c <mbedtls_rsa_import_raw+0xba>

    if( E != NULL )
 800fb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d012      	beq.n	800fb90 <mbedtls_rsa_import_raw+0xbe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	3314      	adds	r3, #20
 800fb6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7f7 fc04 	bl	8007380 <mbedtls_mpi_read_binary>
 800fb78:	6178      	str	r0, [r7, #20]
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	2b00      	cmp	r3, #0

cleanup:
 800fb7e:	e007      	b.n	800fb90 <mbedtls_rsa_import_raw+0xbe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 800fb80:	bf00      	nop
 800fb82:	e006      	b.n	800fb92 <mbedtls_rsa_import_raw+0xc0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 800fb84:	bf00      	nop
 800fb86:	e004      	b.n	800fb92 <mbedtls_rsa_import_raw+0xc0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 800fb88:	bf00      	nop
 800fb8a:	e002      	b.n	800fb92 <mbedtls_rsa_import_raw+0xc0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 800fb8c:	bf00      	nop
 800fb8e:	e000      	b.n	800fb92 <mbedtls_rsa_import_raw+0xc0>
cleanup:
 800fb90:	bf00      	nop

    if( ret != 0 )
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d003      	beq.n	800fba0 <mbedtls_rsa_import_raw+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800fb9e:	e000      	b.n	800fba2 <mbedtls_rsa_import_raw+0xd0>

    return( 0 );
 800fba0:	2300      	movs	r3, #0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3718      	adds	r7, #24
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
	...

0800fbac <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
 800fbac:	b590      	push	{r4, r7, lr}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	685c      	ldr	r4, [r3, #4]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	3308      	adds	r3, #8
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f7 fbcf 	bl	8007364 <mbedtls_mpi_size>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	429c      	cmp	r4, r3
 800fbca:	d104      	bne.n	800fbd6 <rsa_check_context+0x2a>
        ctx->len > MBEDTLS_MPI_MAX_SIZE )
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	685b      	ldr	r3, [r3, #4]
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 800fbd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbd4:	d901      	bls.n	800fbda <rsa_check_context+0x2e>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fbd6:	4b3a      	ldr	r3, [pc, #232]	; (800fcc0 <rsa_check_context+0x114>)
 800fbd8:	e06d      	b.n	800fcb6 <rsa_check_context+0x10a>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	3308      	adds	r3, #8
 800fbde:	2100      	movs	r1, #0
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7f7 fec7 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	dd08      	ble.n	800fbfe <rsa_check_context+0x52>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3308      	adds	r3, #8
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7f7 fb0d 	bl	8007212 <mbedtls_mpi_get_bit>
 800fbf8:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d101      	bne.n	800fc02 <rsa_check_context+0x56>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fbfe:	4b30      	ldr	r3, [pc, #192]	; (800fcc0 <rsa_check_context+0x114>)
 800fc00:	e059      	b.n	800fcb6 <rsa_check_context+0x10a>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d025      	beq.n	800fc54 <rsa_check_context+0xa8>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	332c      	adds	r3, #44	; 0x2c
 800fc0c:	2100      	movs	r1, #0
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7f7 feb0 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fc14:	4603      	mov	r3, r0
    if( is_priv &&
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	dd1a      	ble.n	800fc50 <rsa_check_context+0xa4>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	332c      	adds	r3, #44	; 0x2c
 800fc1e:	2100      	movs	r1, #0
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7f7 faf6 	bl	8007212 <mbedtls_mpi_get_bit>
 800fc26:	4603      	mov	r3, r0
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d011      	beq.n	800fc50 <rsa_check_context+0xa4>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	3338      	adds	r3, #56	; 0x38
 800fc30:	2100      	movs	r1, #0
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7f7 fe9e 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fc38:	4603      	mov	r3, r0
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	dd08      	ble.n	800fc50 <rsa_check_context+0xa4>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	3338      	adds	r3, #56	; 0x38
 800fc42:	2100      	movs	r1, #0
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7f7 fae4 	bl	8007212 <mbedtls_mpi_get_bit>
 800fc4a:	4603      	mov	r3, r0
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d101      	bne.n	800fc54 <rsa_check_context+0xa8>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fc50:	4b1b      	ldr	r3, [pc, #108]	; (800fcc0 <rsa_check_context+0x114>)
 800fc52:	e030      	b.n	800fcb6 <rsa_check_context+0x10a>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	3314      	adds	r3, #20
 800fc58:	2100      	movs	r1, #0
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7f7 fe8a 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	dc01      	bgt.n	800fc6a <rsa_check_context+0xbe>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fc66:	4b16      	ldr	r3, [pc, #88]	; (800fcc0 <rsa_check_context+0x114>)
 800fc68:	e025      	b.n	800fcb6 <rsa_check_context+0x10a>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d013      	beq.n	800fc98 <rsa_check_context+0xec>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	3344      	adds	r3, #68	; 0x44
 800fc74:	2100      	movs	r1, #0
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7f7 fe7c 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fc7c:	4603      	mov	r3, r0
    if( is_priv &&
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	dd08      	ble.n	800fc94 <rsa_check_context+0xe8>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	3350      	adds	r3, #80	; 0x50
 800fc86:	2100      	movs	r1, #0
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7f7 fe73 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fc8e:	4603      	mov	r3, r0
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	dc01      	bgt.n	800fc98 <rsa_check_context+0xec>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fc94:	4b0a      	ldr	r3, [pc, #40]	; (800fcc0 <rsa_check_context+0x114>)
 800fc96:	e00e      	b.n	800fcb6 <rsa_check_context+0x10a>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d00a      	beq.n	800fcb4 <rsa_check_context+0x108>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	335c      	adds	r3, #92	; 0x5c
 800fca2:	2100      	movs	r1, #0
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7f7 fe65 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fcaa:	4603      	mov	r3, r0
    if( is_priv &&
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	dc01      	bgt.n	800fcb4 <rsa_check_context+0x108>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fcb0:	4b03      	ldr	r3, [pc, #12]	; (800fcc0 <rsa_check_context+0x114>)
 800fcb2:	e000      	b.n	800fcb6 <rsa_check_context+0x10a>
    }
#endif

    return( 0 );
 800fcb4:	2300      	movs	r3, #0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd90      	pop	{r4, r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	ffffbf80 	.word	0xffffbf80

0800fcc4 <mbedtls_rsa_complete>:

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 800fcc4:	b5b0      	push	{r4, r5, r7, lr}
 800fcc6:	b090      	sub	sp, #64	; 0x40
 800fcc8:	af02      	add	r7, sp, #8
 800fcca:	6078      	str	r0, [r7, #4]
    int ret = 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	637b      	str	r3, [r7, #52]	; 0x34

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	3308      	adds	r3, #8
 800fcd4:	2100      	movs	r1, #0
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7f7 fe4c 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	bf14      	ite	ne
 800fce2:	2301      	movne	r3, #1
 800fce4:	2300      	moveq	r3, #0
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	633b      	str	r3, [r7, #48]	; 0x30
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	332c      	adds	r3, #44	; 0x2c
 800fcee:	2100      	movs	r1, #0
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7f7 fe3f 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	bf14      	ite	ne
 800fcfc:	2301      	movne	r3, #1
 800fcfe:	2300      	moveq	r3, #0
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	3338      	adds	r3, #56	; 0x38
 800fd08:	2100      	movs	r1, #0
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7f7 fe32 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	bf14      	ite	ne
 800fd16:	2301      	movne	r3, #1
 800fd18:	2300      	moveq	r3, #0
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	62bb      	str	r3, [r7, #40]	; 0x28
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	3320      	adds	r3, #32
 800fd22:	2100      	movs	r1, #0
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7f7 fe25 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	bf14      	ite	ne
 800fd30:	2301      	movne	r3, #1
 800fd32:	2300      	moveq	r3, #0
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	627b      	str	r3, [r7, #36]	; 0x24
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	3314      	adds	r3, #20
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7f7 fe18 	bl	8007974 <mbedtls_mpi_cmp_int>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	bf14      	ite	ne
 800fd4a:	2301      	movne	r3, #1
 800fd4c:	2300      	moveq	r3, #0
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	623b      	str	r3, [r7, #32]
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 800fd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00a      	beq.n	800fd6e <mbedtls_rsa_complete+0xaa>
 800fd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d007      	beq.n	800fd6e <mbedtls_rsa_complete+0xaa>
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d004      	beq.n	800fd6e <mbedtls_rsa_complete+0xaa>
 800fd64:	6a3b      	ldr	r3, [r7, #32]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d001      	beq.n	800fd6e <mbedtls_rsa_complete+0xaa>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e000      	b.n	800fd70 <mbedtls_rsa_complete+0xac>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	61fb      	str	r3, [r7, #28]
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 800fd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d00d      	beq.n	800fd94 <mbedtls_rsa_complete+0xd0>
 800fd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d10a      	bne.n	800fd94 <mbedtls_rsa_complete+0xd0>
 800fd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d107      	bne.n	800fd94 <mbedtls_rsa_complete+0xd0>
 800fd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d004      	beq.n	800fd94 <mbedtls_rsa_complete+0xd0>
 800fd8a:	6a3b      	ldr	r3, [r7, #32]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d001      	beq.n	800fd94 <mbedtls_rsa_complete+0xd0>
 800fd90:	2301      	movs	r3, #1
 800fd92:	e000      	b.n	800fd96 <mbedtls_rsa_complete+0xd2>
 800fd94:	2300      	movs	r3, #0
 800fd96:	61bb      	str	r3, [r7, #24]
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 800fd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00a      	beq.n	800fdb4 <mbedtls_rsa_complete+0xf0>
 800fd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d007      	beq.n	800fdb4 <mbedtls_rsa_complete+0xf0>
 800fda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d104      	bne.n	800fdb4 <mbedtls_rsa_complete+0xf0>
 800fdaa:	6a3b      	ldr	r3, [r7, #32]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <mbedtls_rsa_complete+0xf0>
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	e000      	b.n	800fdb6 <mbedtls_rsa_complete+0xf2>
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	617b      	str	r3, [r7, #20]
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 800fdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00d      	beq.n	800fdda <mbedtls_rsa_complete+0x116>
 800fdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d10a      	bne.n	800fdda <mbedtls_rsa_complete+0x116>
 800fdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d107      	bne.n	800fdda <mbedtls_rsa_complete+0x116>
 800fdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d104      	bne.n	800fdda <mbedtls_rsa_complete+0x116>
 800fdd0:	6a3b      	ldr	r3, [r7, #32]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d001      	beq.n	800fdda <mbedtls_rsa_complete+0x116>
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e000      	b.n	800fddc <mbedtls_rsa_complete+0x118>
 800fdda:	2300      	movs	r3, #0
 800fddc:	613b      	str	r3, [r7, #16]

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d105      	bne.n	800fdf0 <mbedtls_rsa_complete+0x12c>
 800fde4:	69bb      	ldr	r3, [r7, #24]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d102      	bne.n	800fdf0 <mbedtls_rsa_complete+0x12c>
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d001      	beq.n	800fdf4 <mbedtls_rsa_complete+0x130>
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	e000      	b.n	800fdf6 <mbedtls_rsa_complete+0x132>
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	60fb      	str	r3, [r7, #12]

    if( !is_priv && !is_pub )
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d104      	bne.n	800fe08 <mbedtls_rsa_complete+0x144>
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d101      	bne.n	800fe08 <mbedtls_rsa_complete+0x144>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fe04:	4b42      	ldr	r3, [pc, #264]	; (800ff10 <mbedtls_rsa_complete+0x24c>)
 800fe06:	e07f      	b.n	800ff08 <mbedtls_rsa_complete+0x244>

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 800fe08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d120      	bne.n	800fe50 <mbedtls_rsa_complete+0x18c>
 800fe0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d01d      	beq.n	800fe50 <mbedtls_rsa_complete+0x18c>
 800fe14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d01a      	beq.n	800fe50 <mbedtls_rsa_complete+0x18c>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f103 0008 	add.w	r0, r3, #8
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f103 012c 	add.w	r1, r3, #44	; 0x2c
                                         &ctx->Q ) ) != 0 )
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	3338      	adds	r3, #56	; 0x38
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	f7f9 fc93 	bl	8009756 <mbedtls_mpi_mul_mpi>
 800fe30:	6378      	str	r0, [r7, #52]	; 0x34
 800fe32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d003      	beq.n	800fe40 <mbedtls_rsa_complete+0x17c>
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800fe38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe3a:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800fe3e:	e063      	b.n	800ff08 <mbedtls_rsa_complete+0x244>
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	3308      	adds	r3, #8
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7f7 fa8d 	bl	8007364 <mbedtls_mpi_size>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	605a      	str	r2, [r3, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d019      	beq.n	800fe8a <mbedtls_rsa_complete+0x1c6>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f103 0008 	add.w	r0, r3, #8
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f103 0114 	add.w	r1, r3, #20
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f103 0220 	add.w	r2, r3, #32
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	3338      	adds	r3, #56	; 0x38
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	4623      	mov	r3, r4
 800fe76:	f001 f9eb 	bl	8011250 <mbedtls_rsa_deduce_primes>
 800fe7a:	6378      	str	r0, [r7, #52]	; 0x34
                                         &ctx->P, &ctx->Q );
        if( ret != 0 )
 800fe7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d01b      	beq.n	800feba <mbedtls_rsa_complete+0x1f6>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800fe82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe84:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800fe88:	e03e      	b.n	800ff08 <mbedtls_rsa_complete+0x244>

    }
    else if( d_missing )
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d014      	beq.n	800feba <mbedtls_rsa_complete+0x1f6>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f103 002c 	add.w	r0, r3, #44	; 0x2c
                                                         &ctx->Q,
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f103 0138 	add.w	r1, r3, #56	; 0x38
                                                         &ctx->E,
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f103 0214 	add.w	r2, r3, #20
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	3320      	adds	r3, #32
 800fea6:	f001 fb57 	bl	8011558 <mbedtls_rsa_deduce_private_exponent>
 800feaa:	6378      	str	r0, [r7, #52]	; 0x34
 800feac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d003      	beq.n	800feba <mbedtls_rsa_complete+0x1f6>
                                                         &ctx->D ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800feb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feb4:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800feb8:	e026      	b.n	800ff08 <mbedtls_rsa_complete+0x244>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d01d      	beq.n	800fefc <mbedtls_rsa_complete+0x238>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f103 0420 	add.w	r4, r3, #32
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f103 0544 	add.w	r5, r3, #68	; 0x44
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	3350      	adds	r3, #80	; 0x50
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	325c      	adds	r2, #92	; 0x5c
 800fee0:	9201      	str	r2, [sp, #4]
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	462b      	mov	r3, r5
 800fee6:	4622      	mov	r2, r4
 800fee8:	f001 fdec 	bl	8011ac4 <mbedtls_rsa_deduce_crt>
 800feec:	6378      	str	r0, [r7, #52]	; 0x34
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
        if( ret != 0 )
 800feee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d003      	beq.n	800fefc <mbedtls_rsa_complete+0x238>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800fef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef6:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800fefa:	e005      	b.n	800ff08 <mbedtls_rsa_complete+0x244>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 800fefc:	2201      	movs	r2, #1
 800fefe:	68f9      	ldr	r1, [r7, #12]
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7ff fe53 	bl	800fbac <rsa_check_context>
 800ff06:	4603      	mov	r3, r0
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3738      	adds	r7, #56	; 0x38
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ff10:	ffffbf80 	.word	0xffffbf80

0800ff14 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	60f8      	str	r0, [r7, #12]
 800ff1c:	60b9      	str	r1, [r7, #8]
 800ff1e:	607a      	str	r2, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 800ff20:	22ac      	movs	r2, #172	; 0xac
 800ff22:	2100      	movs	r1, #0
 800ff24:	68f8      	ldr	r0, [r7, #12]
 800ff26:	f00e fb7d 	bl	801e624 <memset>

    mbedtls_rsa_set_padding( ctx, padding, hash_id );
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	68b9      	ldr	r1, [r7, #8]
 800ff2e:	68f8      	ldr	r0, [r7, #12]
 800ff30:	f000 f804 	bl	800ff3c <mbedtls_rsa_set_padding>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 800ff34:	bf00      	nop
 800ff36:	3710      	adds	r7, #16
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <mbedtls_rsa_set_padding>:

/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	607a      	str	r2, [r7, #4]
    ctx->padding = padding;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	68ba      	ldr	r2, [r7, #8]
 800ff4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    ctx->hash_id = hash_id;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	687a      	ldr	r2, [r7, #4]
 800ff54:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800ff58:	bf00      	nop
 800ff5a:	3714      	adds	r7, #20
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <mbedtls_rsa_get_len>:
/*
 * Get length in bytes of RSA modulus
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
    return( ctx->len );
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	685b      	ldr	r3, [r3, #4]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 800ff84:	2200      	movs	r2, #0
 800ff86:	2100      	movs	r1, #0
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff fe0f 	bl	800fbac <rsa_check_context>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d001      	beq.n	800ff98 <mbedtls_rsa_check_pubkey+0x1c>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800ff94:	4b17      	ldr	r3, [pc, #92]	; (800fff4 <mbedtls_rsa_check_pubkey+0x78>)
 800ff96:	e029      	b.n	800ffec <mbedtls_rsa_check_pubkey+0x70>

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	3308      	adds	r3, #8
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7f7 f9ad 	bl	80072fc <mbedtls_mpi_bitlen>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	2b7f      	cmp	r3, #127	; 0x7f
 800ffa6:	d801      	bhi.n	800ffac <mbedtls_rsa_check_pubkey+0x30>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800ffa8:	4b12      	ldr	r3, [pc, #72]	; (800fff4 <mbedtls_rsa_check_pubkey+0x78>)
 800ffaa:	e01f      	b.n	800ffec <mbedtls_rsa_check_pubkey+0x70>
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	3314      	adds	r3, #20
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7f7 f92d 	bl	8007212 <mbedtls_mpi_get_bit>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d013      	beq.n	800ffe6 <mbedtls_rsa_check_pubkey+0x6a>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	3314      	adds	r3, #20
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7f7 f99a 	bl	80072fc <mbedtls_mpi_bitlen>
 800ffc8:	4603      	mov	r3, r0
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d90b      	bls.n	800ffe6 <mbedtls_rsa_check_pubkey+0x6a>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f103 0214 	add.w	r2, r3, #20
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	3308      	adds	r3, #8
 800ffd8:	4619      	mov	r1, r3
 800ffda:	4610      	mov	r0, r2
 800ffdc:	f7f7 fc2f 	bl	800783e <mbedtls_mpi_cmp_mpi>
 800ffe0:	4603      	mov	r3, r0
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	db01      	blt.n	800ffea <mbedtls_rsa_check_pubkey+0x6e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800ffe6:	4b03      	ldr	r3, [pc, #12]	; (800fff4 <mbedtls_rsa_check_pubkey+0x78>)
 800ffe8:	e000      	b.n	800ffec <mbedtls_rsa_check_pubkey+0x70>
    }

    return( 0 );
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	ffffbe00 	.word	0xffffbe00

0800fff8 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 800fff8:	b5b0      	push	{r4, r5, r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af04      	add	r7, sp, #16
 800fffe:	6078      	str	r0, [r7, #4]
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff ffbb 	bl	800ff7c <mbedtls_rsa_check_pubkey>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	d107      	bne.n	801001c <mbedtls_rsa_check_privkey+0x24>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 801000c:	2201      	movs	r2, #1
 801000e:	2101      	movs	r1, #1
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f7ff fdcb 	bl	800fbac <rsa_check_context>
 8010016:	4603      	mov	r3, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8010018:	2b00      	cmp	r3, #0
 801001a:	d001      	beq.n	8010020 <mbedtls_rsa_check_privkey+0x28>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801001c:	4b1e      	ldr	r3, [pc, #120]	; (8010098 <mbedtls_rsa_check_privkey+0xa0>)
 801001e:	e036      	b.n	801008e <mbedtls_rsa_check_privkey+0x96>
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f103 0008 	add.w	r0, r3, #8
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f103 0420 	add.w	r4, r3, #32
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	3314      	adds	r3, #20
 801003c:	2500      	movs	r5, #0
 801003e:	9502      	str	r5, [sp, #8]
 8010040:	2500      	movs	r5, #0
 8010042:	9501      	str	r5, [sp, #4]
 8010044:	9300      	str	r3, [sp, #0]
 8010046:	4623      	mov	r3, r4
 8010048:	f001 fc12 	bl	8011870 <mbedtls_rsa_validate_params>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <mbedtls_rsa_check_privkey+0x5e>
                                     &ctx->D, &ctx->E, NULL, NULL ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8010052:	4b11      	ldr	r3, [pc, #68]	; (8010098 <mbedtls_rsa_check_privkey+0xa0>)
 8010054:	e01b      	b.n	801008e <mbedtls_rsa_check_privkey+0x96>
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f103 0420 	add.w	r4, r3, #32
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f103 0544 	add.w	r5, r3, #68	; 0x44
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	3350      	adds	r3, #80	; 0x50
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	325c      	adds	r2, #92	; 0x5c
 8010076:	9201      	str	r2, [sp, #4]
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	462b      	mov	r3, r5
 801007c:	4622      	mov	r2, r4
 801007e:	f001 fb01 	bl	8011684 <mbedtls_rsa_validate_crt>
 8010082:	4603      	mov	r3, r0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d001      	beq.n	801008c <mbedtls_rsa_check_privkey+0x94>
                                       &ctx->DP, &ctx->DQ, &ctx->QP ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8010088:	4b03      	ldr	r3, [pc, #12]	; (8010098 <mbedtls_rsa_check_privkey+0xa0>)
 801008a:	e000      	b.n	801008e <mbedtls_rsa_check_privkey+0x96>
    }
#endif

    return( 0 );
 801008c:	2300      	movs	r3, #0
}
 801008e:	4618      	mov	r0, r3
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bdb0      	pop	{r4, r5, r7, pc}
 8010096:	bf00      	nop
 8010098:	ffffbe00 	.word	0xffffbe00

0801009c <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f7ff ff68 	bl	800ff7c <mbedtls_rsa_check_pubkey>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d105      	bne.n	80100be <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 80100b2:	6838      	ldr	r0, [r7, #0]
 80100b4:	f7ff ffa0 	bl	800fff8 <mbedtls_rsa_check_privkey>
 80100b8:	4603      	mov	r3, r0
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d001      	beq.n	80100c2 <mbedtls_rsa_check_pub_priv+0x26>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80100be:	4b10      	ldr	r3, [pc, #64]	; (8010100 <mbedtls_rsa_check_pub_priv+0x64>)
 80100c0:	e01a      	b.n	80100f8 <mbedtls_rsa_check_pub_priv+0x5c>
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f103 0208 	add.w	r2, r3, #8
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	3308      	adds	r3, #8
 80100cc:	4619      	mov	r1, r3
 80100ce:	4610      	mov	r0, r2
 80100d0:	f7f7 fbb5 	bl	800783e <mbedtls_mpi_cmp_mpi>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d10b      	bne.n	80100f2 <mbedtls_rsa_check_pub_priv+0x56>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f103 0214 	add.w	r2, r3, #20
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	3314      	adds	r3, #20
 80100e4:	4619      	mov	r1, r3
 80100e6:	4610      	mov	r0, r2
 80100e8:	f7f7 fba9 	bl	800783e <mbedtls_mpi_cmp_mpi>
 80100ec:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d001      	beq.n	80100f6 <mbedtls_rsa_check_pub_priv+0x5a>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80100f2:	4b03      	ldr	r3, [pc, #12]	; (8010100 <mbedtls_rsa_check_pub_priv+0x64>)
 80100f4:	e000      	b.n	80100f8 <mbedtls_rsa_check_pub_priv+0x5c>
    }

    return( 0 );
 80100f6:	2300      	movs	r3, #0
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	ffffbe00 	.word	0xffffbe00

08010104 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8010104:	b590      	push	{r4, r7, lr}
 8010106:	b08d      	sub	sp, #52	; 0x34
 8010108:	af02      	add	r7, sp, #8
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8010110:	2200      	movs	r2, #0
 8010112:	2100      	movs	r1, #0
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f7ff fd49 	bl	800fbac <rsa_check_context>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d001      	beq.n	8010124 <mbedtls_rsa_public+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010120:	4b2c      	ldr	r3, [pc, #176]	; (80101d4 <mbedtls_rsa_public+0xd0>)
 8010122:	e052      	b.n	80101ca <mbedtls_rsa_public+0xc6>

    mbedtls_mpi_init( &T );
 8010124:	f107 0314 	add.w	r3, r7, #20
 8010128:	4618      	mov	r0, r3
 801012a:	f7f6 ff73 	bl	8007014 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	685a      	ldr	r2, [r3, #4]
 8010132:	f107 0314 	add.w	r3, r7, #20
 8010136:	68b9      	ldr	r1, [r7, #8]
 8010138:	4618      	mov	r0, r3
 801013a:	f7f7 f921 	bl	8007380 <mbedtls_mpi_read_binary>
 801013e:	6278      	str	r0, [r7, #36]	; 0x24
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	2b00      	cmp	r3, #0
 8010144:	d131      	bne.n	80101aa <mbedtls_rsa_public+0xa6>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f103 0208 	add.w	r2, r3, #8
 801014c:	f107 0314 	add.w	r3, r7, #20
 8010150:	4611      	mov	r1, r2
 8010152:	4618      	mov	r0, r3
 8010154:	f7f7 fb73 	bl	800783e <mbedtls_mpi_cmp_mpi>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	db03      	blt.n	8010166 <mbedtls_rsa_public+0x62>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 801015e:	f06f 0303 	mvn.w	r3, #3
 8010162:	627b      	str	r3, [r7, #36]	; 0x24
        goto cleanup;
 8010164:	e024      	b.n	80101b0 <mbedtls_rsa_public+0xac>
    }

    olen = ctx->len;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	623b      	str	r3, [r7, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f103 0214 	add.w	r2, r3, #20
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f103 0408 	add.w	r4, r3, #8
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	3368      	adds	r3, #104	; 0x68
 801017c:	f107 0114 	add.w	r1, r7, #20
 8010180:	f107 0014 	add.w	r0, r7, #20
 8010184:	9300      	str	r3, [sp, #0]
 8010186:	4623      	mov	r3, r4
 8010188:	f7f9 ffff 	bl	800a18a <mbedtls_mpi_exp_mod>
 801018c:	6278      	str	r0, [r7, #36]	; 0x24
 801018e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010190:	2b00      	cmp	r3, #0
 8010192:	d10c      	bne.n	80101ae <mbedtls_rsa_public+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8010194:	f107 0314 	add.w	r3, r7, #20
 8010198:	6a3a      	ldr	r2, [r7, #32]
 801019a:	6879      	ldr	r1, [r7, #4]
 801019c:	4618      	mov	r0, r3
 801019e:	f7f7 f94d 	bl	800743c <mbedtls_mpi_write_binary>
 80101a2:	6278      	str	r0, [r7, #36]	; 0x24
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	2b00      	cmp	r3, #0

cleanup:
 80101a8:	e002      	b.n	80101b0 <mbedtls_rsa_public+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80101aa:	bf00      	nop
 80101ac:	e000      	b.n	80101b0 <mbedtls_rsa_public+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80101ae:	bf00      	nop
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 80101b0:	f107 0314 	add.w	r3, r7, #20
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7f6 ff44 	bl	8007042 <mbedtls_mpi_free>

    if( ret != 0 )
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d003      	beq.n	80101c8 <mbedtls_rsa_public+0xc4>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	f5a3 4385 	sub.w	r3, r3, #17024	; 0x4280
 80101c6:	e000      	b.n	80101ca <mbedtls_rsa_public+0xc6>

    return( 0 );
 80101c8:	2300      	movs	r3, #0
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	372c      	adds	r7, #44	; 0x2c
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd90      	pop	{r4, r7, pc}
 80101d2:	bf00      	nop
 80101d4:	ffffbf80 	.word	0xffffbf80

080101d8 <rsa_prepare_blinding>:
 *  DSS, and other systems. In : Advances in Cryptology-CRYPTO'96. Springer
 *  Berlin Heidelberg, 1996. p. 104-113.
 */
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80101d8:	b590      	push	{r4, r7, lr}
 80101da:	b089      	sub	sp, #36	; 0x24
 80101dc:	af02      	add	r7, sp, #8
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
    int ret, count = 0;
 80101e4:	2300      	movs	r3, #0
 80101e6:	613b      	str	r3, [r7, #16]

    if( ctx->Vf.p != NULL )
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d03b      	beq.n	801026a <rsa_prepare_blinding+0x92>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	338c      	adds	r3, #140	; 0x8c
 8010202:	461a      	mov	r2, r3
 8010204:	f7f9 faa7 	bl	8009756 <mbedtls_mpi_mul_mpi>
 8010208:	6178      	str	r0, [r7, #20]
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d17e      	bne.n	801030e <rsa_prepare_blinding+0x136>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	3308      	adds	r3, #8
 8010220:	461a      	mov	r2, r3
 8010222:	f7f9 fe94 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 8010226:	6178      	str	r0, [r7, #20]
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d171      	bne.n	8010312 <rsa_prepare_blinding+0x13a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f103 0198 	add.w	r1, r3, #152	; 0x98
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	3398      	adds	r3, #152	; 0x98
 801023e:	461a      	mov	r2, r3
 8010240:	f7f9 fa89 	bl	8009756 <mbedtls_mpi_mul_mpi>
 8010244:	6178      	str	r0, [r7, #20]
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d164      	bne.n	8010316 <rsa_prepare_blinding+0x13e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	3308      	adds	r3, #8
 801025c:	461a      	mov	r2, r3
 801025e:	f7f9 fe76 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 8010262:	6178      	str	r0, [r7, #20]
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	2b00      	cmp	r3, #0

        goto cleanup;
 8010268:	e05c      	b.n	8010324 <rsa_prepare_blinding+0x14c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	1c5a      	adds	r2, r3, #1
 801026e:	613a      	str	r2, [r7, #16]
 8010270:	2b0a      	cmp	r3, #10
 8010272:	dd01      	ble.n	8010278 <rsa_prepare_blinding+0xa0>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8010274:	4b2e      	ldr	r3, [pc, #184]	; (8010330 <rsa_prepare_blinding+0x158>)
 8010276:	e056      	b.n	8010326 <rsa_prepare_blinding+0x14e>

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	1e59      	subs	r1, r3, #1
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	f7fa fd20 	bl	800accc <mbedtls_mpi_fill_random>
 801028c:	6178      	str	r0, [r7, #20]
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d142      	bne.n	801031a <rsa_prepare_blinding+0x142>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	f103 0198 	add.w	r1, r3, #152	; 0x98
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	3308      	adds	r3, #8
 80102a4:	461a      	mov	r2, r3
 80102a6:	f7fa fc1b 	bl	800aae0 <mbedtls_mpi_gcd>
 80102aa:	6178      	str	r0, [r7, #20]
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d135      	bne.n	801031e <rsa_prepare_blinding+0x146>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	338c      	adds	r3, #140	; 0x8c
 80102b6:	2101      	movs	r1, #1
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7f7 fb5b 	bl	8007974 <mbedtls_mpi_cmp_int>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d1d2      	bne.n	801026a <rsa_prepare_blinding+0x92>

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	f103 0198 	add.w	r1, r3, #152	; 0x98
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	3308      	adds	r3, #8
 80102d4:	461a      	mov	r2, r3
 80102d6:	f7fa fd56 	bl	800ad86 <mbedtls_mpi_inv_mod>
 80102da:	6178      	str	r0, [r7, #20]
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d11f      	bne.n	8010322 <rsa_prepare_blinding+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f103 0214 	add.w	r2, r3, #20
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f103 0408 	add.w	r4, r3, #8
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	3368      	adds	r3, #104	; 0x68
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	4623      	mov	r3, r4
 8010302:	f7f9 ff42 	bl	800a18a <mbedtls_mpi_exp_mod>
 8010306:	6178      	str	r0, [r7, #20]
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	2b00      	cmp	r3, #0


cleanup:
 801030c:	e00a      	b.n	8010324 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 801030e:	bf00      	nop
 8010310:	e008      	b.n	8010324 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8010312:	bf00      	nop
 8010314:	e006      	b.n	8010324 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 8010316:	bf00      	nop
 8010318:	e004      	b.n	8010324 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 801031a:	bf00      	nop
 801031c:	e002      	b.n	8010324 <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 801031e:	bf00      	nop
 8010320:	e000      	b.n	8010324 <rsa_prepare_blinding+0x14c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8010322:	bf00      	nop
    return( ret );
 8010324:	697b      	ldr	r3, [r7, #20]
}
 8010326:	4618      	mov	r0, r3
 8010328:	371c      	adds	r7, #28
 801032a:	46bd      	mov	sp, r7
 801032c:	bd90      	pop	{r4, r7, pc}
 801032e:	bf00      	nop
 8010330:	ffffbb80 	.word	0xffffbb80

08010334 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 8010334:	b590      	push	{r4, r7, lr}
 8010336:	b0a9      	sub	sp, #164	; 0xa4
 8010338:	af02      	add	r7, sp, #8
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	607a      	str	r2, [r7, #4]
 8010340:	603b      	str	r3, [r7, #0]
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	3344      	adds	r3, #68	; 0x44
 8010346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    mbedtls_mpi *DQ = &ctx->DQ;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	3350      	adds	r3, #80	; 0x50
 801034e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	2b00      	cmp	r3, #0
 8010356:	bf14      	ite	ne
 8010358:	2301      	movne	r3, #1
 801035a:	2300      	moveq	r3, #0
 801035c:	b2db      	uxtb	r3, r3
 801035e:	461a      	mov	r2, r3
 8010360:	2101      	movs	r1, #1
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7ff fc22 	bl	800fbac <rsa_check_context>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d001      	beq.n	8010372 <mbedtls_rsa_private+0x3e>
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801036e:	4b2b      	ldr	r3, [pc, #172]	; (801041c <mbedtls_rsa_private+0xe8>)
 8010370:	e263      	b.n	801083a <mbedtls_rsa_private+0x506>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 8010372:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010376:	4618      	mov	r0, r3
 8010378:	f7f6 fe4c 	bl	8007014 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 801037c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010380:	4618      	mov	r0, r3
 8010382:	f7f6 fe47 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 8010386:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801038a:	4618      	mov	r0, r3
 801038c:	f7f6 fe42 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 8010390:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010394:	4618      	mov	r0, r3
 8010396:	f7f6 fe3d 	bl	8007014 <mbedtls_mpi_init>

    if( f_rng != NULL )
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d009      	beq.n	80103b4 <mbedtls_rsa_private+0x80>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 80103a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7f6 fe35 	bl	8007014 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 80103aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7f6 fe30 	bl	8007014 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 80103b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7f6 fe2b 	bl	8007014 <mbedtls_mpi_init>
 80103be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7f6 fe26 	bl	8007014 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 80103c8:	f107 031c 	add.w	r3, r7, #28
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7f6 fe21 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 80103d2:	f107 0310 	add.w	r3, r7, #16
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7f6 fe1c 	bl	8007014 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	685a      	ldr	r2, [r3, #4]
 80103e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80103e4:	6839      	ldr	r1, [r7, #0]
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7f6 ffca 	bl	8007380 <mbedtls_mpi_read_binary>
 80103ec:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80103f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f040 81b4 	bne.w	8010762 <mbedtls_rsa_private+0x42e>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f103 0208 	add.w	r2, r3, #8
 8010400:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010404:	4611      	mov	r1, r2
 8010406:	4618      	mov	r0, r3
 8010408:	f7f7 fa19 	bl	800783e <mbedtls_mpi_cmp_mpi>
 801040c:	4603      	mov	r3, r0
 801040e:	2b00      	cmp	r3, #0
 8010410:	db06      	blt.n	8010420 <mbedtls_rsa_private+0xec>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8010412:	f06f 0303 	mvn.w	r3, #3
 8010416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        goto cleanup;
 801041a:	e1cf      	b.n	80107bc <mbedtls_rsa_private+0x488>
 801041c:	ffffbf80 	.word	0xffffbf80
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 8010420:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8010424:	f107 031c 	add.w	r3, r7, #28
 8010428:	4611      	mov	r1, r2
 801042a:	4618      	mov	r0, r3
 801042c:	f7f6 fe72 	bl	8007114 <mbedtls_mpi_copy>
 8010430:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010434:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010438:	2b00      	cmp	r3, #0
 801043a:	f040 8194 	bne.w	8010766 <mbedtls_rsa_private+0x432>

    if( f_rng != NULL )
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	2b00      	cmp	r3, #0
 8010442:	f000 80b4 	beq.w	80105ae <mbedtls_rsa_private+0x27a>
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 8010446:	687a      	ldr	r2, [r7, #4]
 8010448:	68b9      	ldr	r1, [r7, #8]
 801044a:	68f8      	ldr	r0, [r7, #12]
 801044c:	f7ff fec4 	bl	80101d8 <rsa_prepare_blinding>
 8010450:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010454:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010458:	2b00      	cmp	r3, #0
 801045a:	f040 8186 	bne.w	801076a <mbedtls_rsa_private+0x436>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8010464:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010468:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801046c:	4618      	mov	r0, r3
 801046e:	f7f9 f972 	bl	8009756 <mbedtls_mpi_mul_mpi>
 8010472:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801047a:	2b00      	cmp	r3, #0
 801047c:	f040 8177 	bne.w	801076e <mbedtls_rsa_private+0x43a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f103 0208 	add.w	r2, r3, #8
 8010486:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801048a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801048e:	4618      	mov	r0, r3
 8010490:	f7f9 fd5d 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 8010494:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010498:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801049c:	2b00      	cmp	r3, #0
 801049e:	f040 8168 	bne.w	8010772 <mbedtls_rsa_private+0x43e>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80104a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80104ac:	2201      	movs	r2, #1
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7f7 fcaf 	bl	8007e12 <mbedtls_mpi_sub_int>
 80104b4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80104b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104bc:	2b00      	cmp	r3, #0
 80104be:	f040 815a 	bne.w	8010776 <mbedtls_rsa_private+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80104c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80104cc:	2201      	movs	r2, #1
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7f7 fc9f 	bl	8007e12 <mbedtls_mpi_sub_int>
 80104d4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80104d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f040 814c 	bne.w	801077a <mbedtls_rsa_private+0x446>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80104e2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68ba      	ldr	r2, [r7, #8]
 80104ea:	211c      	movs	r1, #28
 80104ec:	f7fa fbee 	bl	800accc <mbedtls_mpi_fill_random>
 80104f0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80104f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	f040 8140 	bne.w	801077e <mbedtls_rsa_private+0x44a>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 80104fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010502:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8010506:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801050a:	4618      	mov	r0, r3
 801050c:	f7f9 f923 	bl	8009756 <mbedtls_mpi_mul_mpi>
 8010510:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010514:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010518:	2b00      	cmp	r3, #0
 801051a:	f040 8132 	bne.w	8010782 <mbedtls_rsa_private+0x44e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8010524:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8010528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801052c:	4618      	mov	r0, r3
 801052e:	f7f7 fbb8 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 8010532:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801053a:	2b00      	cmp	r3, #0
 801053c:	f040 8123 	bne.w	8010786 <mbedtls_rsa_private+0x452>
                    &ctx->DP ) );

        DP = &DP_blind;
 8010540:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010544:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8010548:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	68ba      	ldr	r2, [r7, #8]
 8010550:	211c      	movs	r1, #28
 8010552:	f7fa fbbb 	bl	800accc <mbedtls_mpi_fill_random>
 8010556:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801055a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801055e:	2b00      	cmp	r3, #0
 8010560:	f040 8113 	bne.w	801078a <mbedtls_rsa_private+0x456>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8010564:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010568:	f107 0164 	add.w	r1, r7, #100	; 0x64
 801056c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010570:	4618      	mov	r0, r3
 8010572:	f7f9 f8f0 	bl	8009756 <mbedtls_mpi_mul_mpi>
 8010576:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801057a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801057e:	2b00      	cmp	r3, #0
 8010580:	f040 8105 	bne.w	801078e <mbedtls_rsa_private+0x45a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f103 0250 	add.w	r2, r3, #80	; 0x50
 801058a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801058e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010592:	4618      	mov	r0, r3
 8010594:	f7f7 fb85 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 8010598:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801059c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f040 80f6 	bne.w	8010792 <mbedtls_rsa_private+0x45e>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 80105a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80105aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	3374      	adds	r3, #116	; 0x74
 80105b8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80105bc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80105c0:	9300      	str	r3, [sp, #0]
 80105c2:	4613      	mov	r3, r2
 80105c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80105c8:	f7f9 fddf 	bl	800a18a <mbedtls_mpi_exp_mod>
 80105cc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80105d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f040 80de 	bne.w	8010796 <mbedtls_rsa_private+0x462>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	3380      	adds	r3, #128	; 0x80
 80105e4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80105e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	4613      	mov	r3, r2
 80105f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80105f4:	f7f9 fdc9 	bl	800a18a <mbedtls_mpi_exp_mod>
 80105f8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80105fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010600:	2b00      	cmp	r3, #0
 8010602:	f040 80ca 	bne.w	801079a <mbedtls_rsa_private+0x466>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8010606:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801060a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 801060e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010612:	4618      	mov	r0, r3
 8010614:	f7f7 fb8f 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 8010618:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801061c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010620:	2b00      	cmp	r3, #0
 8010622:	f040 80bc 	bne.w	801079e <mbedtls_rsa_private+0x46a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801062c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010634:	4618      	mov	r0, r3
 8010636:	f7f9 f88e 	bl	8009756 <mbedtls_mpi_mul_mpi>
 801063a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801063e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010642:	2b00      	cmp	r3, #0
 8010644:	f040 80ad 	bne.w	80107a2 <mbedtls_rsa_private+0x46e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801064e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8010652:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010656:	4618      	mov	r0, r3
 8010658:	f7f9 fc79 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 801065c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010660:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010664:	2b00      	cmp	r3, #0
 8010666:	f040 809e 	bne.w	80107a6 <mbedtls_rsa_private+0x472>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010670:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010674:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010678:	4618      	mov	r0, r3
 801067a:	f7f9 f86c 	bl	8009756 <mbedtls_mpi_mul_mpi>
 801067e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010686:	2b00      	cmp	r3, #0
 8010688:	f040 808f 	bne.w	80107aa <mbedtls_rsa_private+0x476>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 801068c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010690:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010694:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010698:	4618      	mov	r0, r3
 801069a:	f7f7 fb02 	bl	8007ca2 <mbedtls_mpi_add_mpi>
 801069e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80106a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	f040 8081 	bne.w	80107ae <mbedtls_rsa_private+0x47a>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d01f      	beq.n	80106f2 <mbedtls_rsa_private+0x3be>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80106b8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80106bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7f9 f848 	bl	8009756 <mbedtls_mpi_mul_mpi>
 80106c6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80106ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d16f      	bne.n	80107b2 <mbedtls_rsa_private+0x47e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f103 0208 	add.w	r2, r3, #8
 80106d8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80106dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7f9 fc34 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 80106e6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80106ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d161      	bne.n	80107b6 <mbedtls_rsa_private+0x482>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f103 0214 	add.w	r2, r3, #20
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f103 0408 	add.w	r4, r3, #8
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	3368      	adds	r3, #104	; 0x68
 8010702:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010706:	f107 0010 	add.w	r0, r7, #16
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	4623      	mov	r3, r4
 801070e:	f7f9 fd3c 	bl	800a18a <mbedtls_mpi_exp_mod>
 8010712:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010716:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801071a:	2b00      	cmp	r3, #0
 801071c:	d14d      	bne.n	80107ba <mbedtls_rsa_private+0x486>
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 801071e:	f107 021c 	add.w	r2, r7, #28
 8010722:	f107 0310 	add.w	r3, r7, #16
 8010726:	4611      	mov	r1, r2
 8010728:	4618      	mov	r0, r3
 801072a:	f7f7 f888 	bl	800783e <mbedtls_mpi_cmp_mpi>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d003      	beq.n	801073c <mbedtls_rsa_private+0x408>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8010734:	4b43      	ldr	r3, [pc, #268]	; (8010844 <mbedtls_rsa_private+0x510>)
 8010736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        goto cleanup;
 801073a:	e03f      	b.n	80107bc <mbedtls_rsa_private+0x488>
    }

    olen = ctx->len;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8010744:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010748:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801074c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8010750:	4618      	mov	r0, r3
 8010752:	f7f6 fe73 	bl	800743c <mbedtls_mpi_write_binary>
 8010756:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801075a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801075e:	2b00      	cmp	r3, #0

cleanup:
 8010760:	e02c      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8010762:	bf00      	nop
 8010764:	e02a      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 8010766:	bf00      	nop
 8010768:	e028      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 801076a:	bf00      	nop
 801076c:	e026      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 801076e:	bf00      	nop
 8010770:	e024      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8010772:	bf00      	nop
 8010774:	e022      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8010776:	bf00      	nop
 8010778:	e020      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 801077a:	bf00      	nop
 801077c:	e01e      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 801077e:	bf00      	nop
 8010780:	e01c      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8010782:	bf00      	nop
 8010784:	e01a      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8010786:	bf00      	nop
 8010788:	e018      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 801078a:	bf00      	nop
 801078c:	e016      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 801078e:	bf00      	nop
 8010790:	e014      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8010792:	bf00      	nop
 8010794:	e012      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 8010796:	bf00      	nop
 8010798:	e010      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 801079a:	bf00      	nop
 801079c:	e00e      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 801079e:	bf00      	nop
 80107a0:	e00c      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 80107a2:	bf00      	nop
 80107a4:	e00a      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 80107a6:	bf00      	nop
 80107a8:	e008      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 80107aa:	bf00      	nop
 80107ac:	e006      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 80107ae:	bf00      	nop
 80107b0:	e004      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80107b2:	bf00      	nop
 80107b4:	e002      	b.n	80107bc <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80107b6:	bf00      	nop
 80107b8:	e000      	b.n	80107bc <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 80107ba:	bf00      	nop
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 80107bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7f6 fc3e 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80107c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7f6 fc39 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80107d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7f6 fc34 	bl	8007042 <mbedtls_mpi_free>

    if( f_rng != NULL )
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d009      	beq.n	80107f4 <mbedtls_rsa_private+0x4c0>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 80107e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7f6 fc2c 	bl	8007042 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 80107ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7f6 fc27 	bl	8007042 <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 80107f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7f6 fc22 	bl	8007042 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 80107fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010802:	4618      	mov	r0, r3
 8010804:	f7f6 fc1d 	bl	8007042 <mbedtls_mpi_free>
 8010808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801080c:	4618      	mov	r0, r3
 801080e:	f7f6 fc18 	bl	8007042 <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 8010812:	f107 0310 	add.w	r3, r7, #16
 8010816:	4618      	mov	r0, r3
 8010818:	f7f6 fc13 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 801081c:	f107 031c 	add.w	r3, r7, #28
 8010820:	4618      	mov	r0, r3
 8010822:	f7f6 fc0e 	bl	8007042 <mbedtls_mpi_free>

    if( ret != 0 )
 8010826:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801082a:	2b00      	cmp	r3, #0
 801082c:	d004      	beq.n	8010838 <mbedtls_rsa_private+0x504>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 801082e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010832:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
 8010836:	e000      	b.n	801083a <mbedtls_rsa_private+0x506>

    return( 0 );
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	379c      	adds	r7, #156	; 0x9c
 801083e:	46bd      	mov	sp, r7
 8010840:	bd90      	pop	{r4, r7, pc}
 8010842:	bf00      	nop
 8010844:	ffffbc80 	.word	0xffffbc80

08010848 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b08c      	sub	sp, #48	; 0x30
 801084c:	af02      	add	r7, sp, #8
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	603b      	str	r3, [r7, #0]
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;
 8010856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010858:	623b      	str	r3, [r7, #32]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b01      	cmp	r3, #1
 801085e:	d106      	bne.n	801086e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801086a:	4b44      	ldr	r3, [pc, #272]	; (801097c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x134>)
 801086c:	e081      	b.n	8010972 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d005      	beq.n	8010880 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x38>
 8010874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010876:	2b00      	cmp	r3, #0
 8010878:	d002      	beq.n	8010880 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x38>
 801087a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087c:	2b00      	cmp	r3, #0
 801087e:	d101      	bne.n	8010884 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010880:	4b3e      	ldr	r3, [pc, #248]	; (801097c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x134>)
 8010882:	e076      	b.n	8010972 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

    olen = ctx->len;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	61bb      	str	r3, [r7, #24]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	f113 0f0c 	cmn.w	r3, #12
 8010890:	d804      	bhi.n	801089c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x54>
 8010892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010894:	330b      	adds	r3, #11
 8010896:	69ba      	ldr	r2, [r7, #24]
 8010898:	429a      	cmp	r2, r3
 801089a:	d201      	bcs.n	80108a0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x58>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801089c:	4b37      	ldr	r3, [pc, #220]	; (801097c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x134>)
 801089e:	e068      	b.n	8010972 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

    nb_pad = olen - 3 - ilen;
 80108a0:	69ba      	ldr	r2, [r7, #24]
 80108a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a4:	1ad3      	subs	r3, r2, r3
 80108a6:	3b03      	subs	r3, #3
 80108a8:	627b      	str	r3, [r7, #36]	; 0x24

    *p++ = 0;
 80108aa:	6a3b      	ldr	r3, [r7, #32]
 80108ac:	1c5a      	adds	r2, r3, #1
 80108ae:	623a      	str	r2, [r7, #32]
 80108b0:	2200      	movs	r2, #0
 80108b2:	701a      	strb	r2, [r3, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d12d      	bne.n	8010916 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 80108ba:	6a3b      	ldr	r3, [r7, #32]
 80108bc:	1c5a      	adds	r2, r3, #1
 80108be:	623a      	str	r2, [r7, #32]
 80108c0:	2202      	movs	r2, #2
 80108c2:	701a      	strb	r2, [r3, #0]

        while( nb_pad-- > 0 )
 80108c4:	e021      	b.n	801090a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
        {
            int rng_dl = 100;
 80108c6:	2364      	movs	r3, #100	; 0x64
 80108c8:	61fb      	str	r3, [r7, #28]

            do {
                ret = f_rng( p_rng, p, 1 );
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	2201      	movs	r2, #1
 80108ce:	6a39      	ldr	r1, [r7, #32]
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	4798      	blx	r3
 80108d4:	6178      	str	r0, [r7, #20]
            } while( *p == 0 && --rng_dl && ret == 0 );
 80108d6:	6a3b      	ldr	r3, [r7, #32]
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d108      	bne.n	80108f0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa8>
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	3b01      	subs	r3, #1
 80108e2:	61fb      	str	r3, [r7, #28]
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d002      	beq.n	80108f0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa8>
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d0ec      	beq.n	80108ca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 80108f0:	69fb      	ldr	r3, [r7, #28]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d002      	beq.n	80108fc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb4>
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d003      	beq.n	8010904 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbc>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	f5a3 4389 	sub.w	r3, r3, #17536	; 0x4480
 8010902:	e036      	b.n	8010972 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

            p++;
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	3301      	adds	r3, #1
 8010908:	623b      	str	r3, [r7, #32]
        while( nb_pad-- > 0 )
 801090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090c:	1e5a      	subs	r2, r3, #1
 801090e:	627a      	str	r2, [r7, #36]	; 0x24
 8010910:	2b00      	cmp	r3, #0
 8010912:	d1d8      	bne.n	80108c6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7e>
 8010914:	e00f      	b.n	8010936 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xee>
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 8010916:	6a3b      	ldr	r3, [r7, #32]
 8010918:	1c5a      	adds	r2, r3, #1
 801091a:	623a      	str	r2, [r7, #32]
 801091c:	2201      	movs	r2, #1
 801091e:	701a      	strb	r2, [r3, #0]

        while( nb_pad-- > 0 )
 8010920:	e004      	b.n	801092c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe4>
            *p++ = 0xFF;
 8010922:	6a3b      	ldr	r3, [r7, #32]
 8010924:	1c5a      	adds	r2, r3, #1
 8010926:	623a      	str	r2, [r7, #32]
 8010928:	22ff      	movs	r2, #255	; 0xff
 801092a:	701a      	strb	r2, [r3, #0]
        while( nb_pad-- > 0 )
 801092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092e:	1e5a      	subs	r2, r3, #1
 8010930:	627a      	str	r2, [r7, #36]	; 0x24
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1f5      	bne.n	8010922 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
    }

    *p++ = 0;
 8010936:	6a3b      	ldr	r3, [r7, #32]
 8010938:	1c5a      	adds	r2, r3, #1
 801093a:	623a      	str	r2, [r7, #32]
 801093c:	2200      	movs	r2, #0
 801093e:	701a      	strb	r2, [r3, #0]
    memcpy( p, input, ilen );
 8010940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010942:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010944:	6a38      	ldr	r0, [r7, #32]
 8010946:	f00d fe45 	bl	801e5d4 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d106      	bne.n	801095e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x116>
            ? mbedtls_rsa_public(  ctx, output, output )
 8010950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	f7ff fbd5 	bl	8010104 <mbedtls_rsa_public>
 801095a:	4603      	mov	r3, r0
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 801095c:	e008      	b.n	8010970 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x128>
 801095e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010960:	9300      	str	r3, [sp, #0]
 8010962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	68b9      	ldr	r1, [r7, #8]
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	f7ff fce3 	bl	8010334 <mbedtls_rsa_private>
 801096e:	4603      	mov	r3, r0
 8010970:	bf00      	nop
}
 8010972:	4618      	mov	r0, r3
 8010974:	3728      	adds	r7, #40	; 0x28
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	ffffbf80 	.word	0xffffbf80

08010980 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b088      	sub	sp, #32
 8010984:	af04      	add	r7, sp, #16
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	60b9      	str	r1, [r7, #8]
 801098a:	607a      	str	r2, [r7, #4]
 801098c:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010994:	2b00      	cmp	r3, #0
 8010996:	d10d      	bne.n	80109b4 <mbedtls_rsa_pkcs1_encrypt+0x34>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8010998:	6a3b      	ldr	r3, [r7, #32]
 801099a:	9302      	str	r3, [sp, #8]
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	69bb      	ldr	r3, [r7, #24]
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	68b9      	ldr	r1, [r7, #8]
 80109aa:	68f8      	ldr	r0, [r7, #12]
 80109ac:	f7ff ff4c 	bl	8010848 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
 80109b0:	4603      	mov	r3, r0
 80109b2:	e000      	b.n	80109b6 <mbedtls_rsa_pkcs1_encrypt+0x36>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80109b4:	4b02      	ldr	r3, [pc, #8]	; (80109c0 <mbedtls_rsa_pkcs1_encrypt+0x40>)
    }
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	ffffbf00 	.word	0xffffbf00

080109c4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 80109c4:	b590      	push	{r4, r7, lr}
 80109c6:	b0cd      	sub	sp, #308	; 0x134
 80109c8:	af02      	add	r7, sp, #8
 80109ca:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80109ce:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80109d2:	6020      	str	r0, [r4, #0]
 80109d4:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80109d8:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 80109dc:	6001      	str	r1, [r0, #0]
 80109de:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80109e2:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 80109e6:	600a      	str	r2, [r1, #0]
 80109e8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80109ec:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80109f0:	6013      	str	r3, [r2, #0]
    int ret;
    size_t ilen, pad_count = 0, i;
 80109f2:	2300      	movs	r3, #0
 80109f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    unsigned char *p, bad, pad_done = 0;
 80109f8:	2300      	movs	r3, #0
 80109fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80109fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010a02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d10a      	bne.n	8010a22 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5e>
 8010a0c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010a10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d001      	beq.n	8010a22 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010a1e:	4bb0      	ldr	r3, [pc, #704]	; (8010ce0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x31c>)
 8010a20:	e159      	b.n	8010cd6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x312>

    ilen = ctx->len;
 8010a22:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010a26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    if( ilen < 16 || ilen > sizeof( buf ) )
 8010a32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010a36:	2b0f      	cmp	r3, #15
 8010a38:	d904      	bls.n	8010a44 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x80>
 8010a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a42:	d901      	bls.n	8010a48 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010a44:	4ba6      	ldr	r3, [pc, #664]	; (8010ce0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x31c>)
 8010a46:	e146      	b.n	8010cd6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x312>

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8010a48:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010a4c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d10c      	bne.n	8010a70 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xac>
          ? mbedtls_rsa_public(  ctx, input, buf )
 8010a56:	f107 0210 	add.w	r2, r7, #16
 8010a5a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010a5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010a62:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8010a66:	6818      	ldr	r0, [r3, #0]
 8010a68:	f7ff fb4c 	bl	8010104 <mbedtls_rsa_public>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	e016      	b.n	8010a9e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xda>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8010a70:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010a74:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8010a78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010a7c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8010a80:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010a84:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8010a88:	f107 0310 	add.w	r3, r7, #16
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8010a92:	6812      	ldr	r2, [r2, #0]
 8010a94:	6809      	ldr	r1, [r1, #0]
 8010a96:	6800      	ldr	r0, [r0, #0]
 8010a98:	f7ff fc4c 	bl	8010334 <mbedtls_rsa_private>
 8010a9c:	4603      	mov	r3, r0
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 8010a9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    if( ret != 0 )
 8010aa2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	f040 810b 	bne.w	8010cc2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2fe>
        goto cleanup;

    p = buf;
 8010aac:	f107 0310 	add.w	r3, r7, #16
 8010ab0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bad = 0;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 8010aba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8010ac4:	781a      	ldrb	r2, [r3, #0]
 8010ac6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010aca:	4313      	orrs	r3, r2
 8010acc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8010ad0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010ad4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2b01      	cmp	r3, #1
 8010adc:	d15f      	bne.n	8010b9e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1da>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8010ade:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010ae2:	1c5a      	adds	r2, r3, #1
 8010ae4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	f083 0302 	eor.w	r3, r3, #2
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	b25a      	sxtb	r2, r3
 8010af2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8010af6:	4313      	orrs	r3, r2
 8010af8:	b25b      	sxtb	r3, r3
 8010afa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8010afe:	2300      	movs	r3, #0
 8010b00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010b04:	e031      	b.n	8010b6a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a6>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8010b06:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010b0e:	4413      	add	r3, r2
 8010b10:	781a      	ldrb	r2, [r3, #0]
 8010b12:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8010b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010b1a:	440b      	add	r3, r1
 8010b1c:	781b      	ldrb	r3, [r3, #0]
 8010b1e:	425b      	negs	r3, r3
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	4313      	orrs	r3, r2
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	09db      	lsrs	r3, r3, #7
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	f083 0301 	eor.w	r3, r3, #1
 8010b2e:	b2da      	uxtb	r2, r3
 8010b30:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8010b34:	4313      	orrs	r3, r2
 8010b36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8010b3a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8010b3e:	425b      	negs	r3, r3
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8010b46:	4313      	orrs	r3, r2
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	09db      	lsrs	r3, r3, #7
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	f083 0301 	eor.w	r3, r3, #1
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	461a      	mov	r2, r3
 8010b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b5a:	4413      	add	r3, r2
 8010b5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( i = 0; i < ilen - 3; i++ )
 8010b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010b64:	3301      	adds	r3, #1
 8010b66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010b6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010b6e:	3b03      	subs	r3, #3
 8010b70:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d3c6      	bcc.n	8010b06 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x142>
        }

        p += pad_count;
 8010b78:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010b7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b80:	4413      	add	r3, r2
 8010b82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        bad |= *p++; /* Must be zero */
 8010b86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010b8a:	1c5a      	adds	r2, r3, #1
 8010b8c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8010b90:	781a      	ldrb	r2, [r3, #0]
 8010b92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010b96:	4313      	orrs	r3, r2
 8010b98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8010b9c:	e050      	b.n	8010c40 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x27c>
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8010b9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010ba2:	1c5a      	adds	r2, r3, #1
 8010ba4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	f083 0301 	eor.w	r3, r3, #1
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	b25a      	sxtb	r2, r3
 8010bb2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8010bb6:	4313      	orrs	r3, r2
 8010bb8:	b25b      	sxtb	r3, r3
 8010bba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010bc4:	e023      	b.n	8010c0e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x24a>
        {
            pad_done |= ( p[i] != 0xFF );
 8010bc6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010bce:	4413      	add	r3, r2
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	2bff      	cmp	r3, #255	; 0xff
 8010bd4:	bf14      	ite	ne
 8010bd6:	2301      	movne	r3, #1
 8010bd8:	2300      	moveq	r3, #0
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	b25a      	sxtb	r2, r3
 8010bde:	f997 3116 	ldrsb.w	r3, [r7, #278]	; 0x116
 8010be2:	4313      	orrs	r3, r2
 8010be4:	b25b      	sxtb	r3, r3
 8010be6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
            pad_count += ( pad_done == 0 );
 8010bea:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	bf0c      	ite	eq
 8010bf2:	2301      	moveq	r3, #1
 8010bf4:	2300      	movne	r3, #0
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010bfe:	4413      	add	r3, r2
 8010c00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( i = 0; i < ilen - 3; i++ )
 8010c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010c08:	3301      	adds	r3, #1
 8010c0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010c0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010c12:	3b03      	subs	r3, #3
 8010c14:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d3d4      	bcc.n	8010bc6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x202>
        }

        p += pad_count;
 8010c1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010c20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010c24:	4413      	add	r3, r2
 8010c26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        bad |= *p++; /* Must be zero */
 8010c2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010c2e:	1c5a      	adds	r2, r3, #1
 8010c30:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8010c34:	781a      	ldrb	r2, [r3, #0]
 8010c36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    }

    bad |= ( pad_count < 8 );
 8010c40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010c44:	2b07      	cmp	r3, #7
 8010c46:	bf94      	ite	ls
 8010c48:	2301      	movls	r3, #1
 8010c4a:	2300      	movhi	r3, #0
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	b25a      	sxtb	r2, r3
 8010c50:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8010c54:	4313      	orrs	r3, r2
 8010c56:	b25b      	sxtb	r3, r3
 8010c58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    if( bad )
 8010c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d003      	beq.n	8010c6c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2a8>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8010c64:	4b1f      	ldr	r3, [pc, #124]	; (8010ce4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x320>)
 8010c66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        goto cleanup;
 8010c6a:	e02b      	b.n	8010cc4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x300>
    }

    if( ilen - ( p - buf ) > output_max_len )
 8010c6c:	f107 0310 	add.w	r3, r7, #16
 8010c70:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010c74:	1ad3      	subs	r3, r2, r3
 8010c76:	461a      	mov	r2, r3
 8010c78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010c7c:	1a9b      	subs	r3, r3, r2
 8010c7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d203      	bcs.n	8010c8e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2ca>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8010c86:	4b18      	ldr	r3, [pc, #96]	; (8010ce8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x324>)
 8010c88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        goto cleanup;
 8010c8c:	e01a      	b.n	8010cc4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x300>
    }

    *olen = ilen - (p - buf);
 8010c8e:	f107 0310 	add.w	r3, r7, #16
 8010c92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010c96:	1ad3      	subs	r3, r2, r3
 8010c98:	461a      	mov	r2, r3
 8010c9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010c9e:	1a9a      	subs	r2, r3, r2
 8010ca0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010ca4:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8010ca6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	461a      	mov	r2, r3
 8010cae:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8010cb2:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8010cb6:	f00d fc8d 	bl	801e5d4 <memcpy>
    ret = 0;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8010cc0:	e000      	b.n	8010cc4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x300>
        goto cleanup;
 8010cc2:	bf00      	nop

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8010cc4:	f107 0310 	add.w	r3, r7, #16
 8010cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fe febd 	bl	800fa4c <mbedtls_zeroize>

    return( ret );
 8010cd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd90      	pop	{r4, r7, pc}
 8010ce0:	ffffbf80 	.word	0xffffbf80
 8010ce4:	ffffbf00 	.word	0xffffbf00
 8010ce8:	ffffbc00 	.word	0xffffbc00

08010cec <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b088      	sub	sp, #32
 8010cf0:	af04      	add	r7, sp, #16
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	607a      	str	r2, [r7, #4]
 8010cf8:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d10f      	bne.n	8010d24 <mbedtls_rsa_pkcs1_decrypt+0x38>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 8010d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d06:	9303      	str	r3, [sp, #12]
 8010d08:	6a3b      	ldr	r3, [r7, #32]
 8010d0a:	9302      	str	r3, [sp, #8]
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	69bb      	ldr	r3, [r7, #24]
 8010d12:	9300      	str	r3, [sp, #0]
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	68b9      	ldr	r1, [r7, #8]
 8010d1a:	68f8      	ldr	r0, [r7, #12]
 8010d1c:	f7ff fe52 	bl	80109c4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
 8010d20:	4603      	mov	r3, r0
 8010d22:	e000      	b.n	8010d26 <mbedtls_rsa_pkcs1_decrypt+0x3a>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8010d24:	4b02      	ldr	r3, [pc, #8]	; (8010d30 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	ffffbf00 	.word	0xffffbf00

08010d34 <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b08a      	sub	sp, #40	; 0x28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60b9      	str	r1, [r7, #8]
 8010d3c:	607a      	str	r2, [r7, #4]
 8010d3e:	603b      	str	r3, [r7, #0]
 8010d40:	4603      	mov	r3, r0
 8010d42:	73fb      	strb	r3, [r7, #15]
    size_t oid_size  = 0;
 8010d44:	2300      	movs	r3, #0
 8010d46:	61bb      	str	r3, [r7, #24]
    size_t nb_pad    = dst_len;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char *p = dst;
 8010d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4e:	623b      	str	r3, [r7, #32]
    const char *oid  = NULL;
 8010d50:	2300      	movs	r3, #0
 8010d52:	617b      	str	r3, [r7, #20]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d041      	beq.n	8010dde <rsa_rsassa_pkcs1_v15_encode+0xaa>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8010d5a:	7bfb      	ldrb	r3, [r7, #15]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7fd fc09 	bl	800e574 <mbedtls_md_info_from_type>
 8010d62:	61f8      	str	r0, [r7, #28]
        if( md_info == NULL )
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <rsa_rsassa_pkcs1_v15_encode+0x3a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010d6a:	4b68      	ldr	r3, [pc, #416]	; (8010f0c <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010d6c:	e0c9      	b.n	8010f02 <rsa_rsassa_pkcs1_v15_encode+0x1ce>

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 8010d6e:	f107 0218 	add.w	r2, r7, #24
 8010d72:	f107 0114 	add.w	r1, r7, #20
 8010d76:	7bfb      	ldrb	r3, [r7, #15]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fe f87d 	bl	800ee78 <mbedtls_oid_get_oid_by_md>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d001      	beq.n	8010d88 <rsa_rsassa_pkcs1_v15_encode+0x54>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010d84:	4b61      	ldr	r3, [pc, #388]	; (8010f0c <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010d86:	e0bc      	b.n	8010f02 <rsa_rsassa_pkcs1_v15_encode+0x1ce>

        hashlen = mbedtls_md_get_size( md_info );
 8010d88:	69f8      	ldr	r0, [r7, #28]
 8010d8a:	f7fd fe31 	bl	800e9f0 <mbedtls_md_get_size>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	60bb      	str	r3, [r7, #8]

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8010d92:	69ba      	ldr	r2, [r7, #24]
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	4413      	add	r3, r2
 8010d98:	3308      	adds	r3, #8
 8010d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8010d9c:	d80c      	bhi.n	8010db8 <rsa_rsassa_pkcs1_v15_encode+0x84>
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	f113 0f0b 	cmn.w	r3, #11
 8010da4:	d808      	bhi.n	8010db8 <rsa_rsassa_pkcs1_v15_encode+0x84>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 8010da6:	69ba      	ldr	r2, [r7, #24]
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	4413      	add	r3, r2
 8010dac:	f103 020a 	add.w	r2, r3, #10
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	330a      	adds	r3, #10
            10 + hashlen            <  hashlen      ||
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d201      	bcs.n	8010dbc <rsa_rsassa_pkcs1_v15_encode+0x88>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010db8:	4b54      	ldr	r3, [pc, #336]	; (8010f0c <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010dba:	e0a2      	b.n	8010f02 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 8010dbc:	69ba      	ldr	r2, [r7, #24]
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	330a      	adds	r3, #10
 8010dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d201      	bcs.n	8010dce <rsa_rsassa_pkcs1_v15_encode+0x9a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010dca:	4b50      	ldr	r3, [pc, #320]	; (8010f0c <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010dcc:	e099      	b.n	8010f02 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
        nb_pad -= 10 + hashlen + oid_size;
 8010dce:	69ba      	ldr	r2, [r7, #24]
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	4413      	add	r3, r2
 8010dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dd6:	1ad3      	subs	r3, r2, r3
 8010dd8:	3b0a      	subs	r3, #10
 8010dda:	627b      	str	r3, [r7, #36]	; 0x24
 8010ddc:	e009      	b.n	8010df2 <rsa_rsassa_pkcs1_v15_encode+0xbe>
    }
    else
    {
        if( nb_pad < hashlen )
 8010dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d201      	bcs.n	8010dea <rsa_rsassa_pkcs1_v15_encode+0xb6>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010de6:	4b49      	ldr	r3, [pc, #292]	; (8010f0c <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010de8:	e08b      	b.n	8010f02 <rsa_rsassa_pkcs1_v15_encode+0x1ce>

        nb_pad -= hashlen;
 8010dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	1ad3      	subs	r3, r2, r3
 8010df0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8010df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df4:	2b0a      	cmp	r3, #10
 8010df6:	d801      	bhi.n	8010dfc <rsa_rsassa_pkcs1_v15_encode+0xc8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010df8:	4b44      	ldr	r3, [pc, #272]	; (8010f0c <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010dfa:	e082      	b.n	8010f02 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
    nb_pad -= 3;
 8010dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfe:	3b03      	subs	r3, #3
 8010e00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8010e02:	6a3b      	ldr	r3, [r7, #32]
 8010e04:	1c5a      	adds	r2, r3, #1
 8010e06:	623a      	str	r2, [r7, #32]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_RSA_SIGN;
 8010e0c:	6a3b      	ldr	r3, [r7, #32]
 8010e0e:	1c5a      	adds	r2, r3, #1
 8010e10:	623a      	str	r2, [r7, #32]
 8010e12:	2201      	movs	r2, #1
 8010e14:	701a      	strb	r2, [r3, #0]
    memset( p, 0xFF, nb_pad );
 8010e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e18:	21ff      	movs	r1, #255	; 0xff
 8010e1a:	6a38      	ldr	r0, [r7, #32]
 8010e1c:	f00d fc02 	bl	801e624 <memset>
    p += nb_pad;
 8010e20:	6a3a      	ldr	r2, [r7, #32]
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	4413      	add	r3, r2
 8010e26:	623b      	str	r3, [r7, #32]
    *p++ = 0;
 8010e28:	6a3b      	ldr	r3, [r7, #32]
 8010e2a:	1c5a      	adds	r2, r3, #1
 8010e2c:	623a      	str	r2, [r7, #32]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	701a      	strb	r2, [r3, #0]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
 8010e32:	7bfb      	ldrb	r3, [r7, #15]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d106      	bne.n	8010e46 <rsa_rsassa_pkcs1_v15_encode+0x112>
    {
        memcpy( p, hash, hashlen );
 8010e38:	68ba      	ldr	r2, [r7, #8]
 8010e3a:	6879      	ldr	r1, [r7, #4]
 8010e3c:	6a38      	ldr	r0, [r7, #32]
 8010e3e:	f00d fbc9 	bl	801e5d4 <memcpy>
        return( 0 );
 8010e42:	2300      	movs	r3, #0
 8010e44:	e05d      	b.n	8010f02 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8010e46:	6a3b      	ldr	r3, [r7, #32]
 8010e48:	1c5a      	adds	r2, r3, #1
 8010e4a:	623a      	str	r2, [r7, #32]
 8010e4c:	2230      	movs	r2, #48	; 0x30
 8010e4e:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8010e50:	69bb      	ldr	r3, [r7, #24]
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	4413      	add	r3, r2
 8010e5a:	b2da      	uxtb	r2, r3
 8010e5c:	6a3b      	ldr	r3, [r7, #32]
 8010e5e:	1c59      	adds	r1, r3, #1
 8010e60:	6239      	str	r1, [r7, #32]
 8010e62:	3208      	adds	r2, #8
 8010e64:	b2d2      	uxtb	r2, r2
 8010e66:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8010e68:	6a3b      	ldr	r3, [r7, #32]
 8010e6a:	1c5a      	adds	r2, r3, #1
 8010e6c:	623a      	str	r2, [r7, #32]
 8010e6e:	2230      	movs	r2, #48	; 0x30
 8010e70:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( 0x04 + oid_size );
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	b2da      	uxtb	r2, r3
 8010e76:	6a3b      	ldr	r3, [r7, #32]
 8010e78:	1c59      	adds	r1, r3, #1
 8010e7a:	6239      	str	r1, [r7, #32]
 8010e7c:	3204      	adds	r2, #4
 8010e7e:	b2d2      	uxtb	r2, r2
 8010e80:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_ASN1_OID;
 8010e82:	6a3b      	ldr	r3, [r7, #32]
 8010e84:	1c5a      	adds	r2, r3, #1
 8010e86:	623a      	str	r2, [r7, #32]
 8010e88:	2206      	movs	r2, #6
 8010e8a:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char) oid_size;
 8010e8c:	69b9      	ldr	r1, [r7, #24]
 8010e8e:	6a3b      	ldr	r3, [r7, #32]
 8010e90:	1c5a      	adds	r2, r3, #1
 8010e92:	623a      	str	r2, [r7, #32]
 8010e94:	b2ca      	uxtb	r2, r1
 8010e96:	701a      	strb	r2, [r3, #0]
    memcpy( p, oid, oid_size );
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	69ba      	ldr	r2, [r7, #24]
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	6a38      	ldr	r0, [r7, #32]
 8010ea0:	f00d fb98 	bl	801e5d4 <memcpy>
    p += oid_size;
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	6a3a      	ldr	r2, [r7, #32]
 8010ea8:	4413      	add	r3, r2
 8010eaa:	623b      	str	r3, [r7, #32]
    *p++ = MBEDTLS_ASN1_NULL;
 8010eac:	6a3b      	ldr	r3, [r7, #32]
 8010eae:	1c5a      	adds	r2, r3, #1
 8010eb0:	623a      	str	r2, [r7, #32]
 8010eb2:	2205      	movs	r2, #5
 8010eb4:	701a      	strb	r2, [r3, #0]
    *p++ = 0x00;
 8010eb6:	6a3b      	ldr	r3, [r7, #32]
 8010eb8:	1c5a      	adds	r2, r3, #1
 8010eba:	623a      	str	r2, [r7, #32]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	623a      	str	r2, [r7, #32]
 8010ec6:	2204      	movs	r2, #4
 8010ec8:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char) hashlen;
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	1c5a      	adds	r2, r3, #1
 8010ece:	623a      	str	r2, [r7, #32]
 8010ed0:	68ba      	ldr	r2, [r7, #8]
 8010ed2:	b2d2      	uxtb	r2, r2
 8010ed4:	701a      	strb	r2, [r3, #0]
    memcpy( p, hash, hashlen );
 8010ed6:	68ba      	ldr	r2, [r7, #8]
 8010ed8:	6879      	ldr	r1, [r7, #4]
 8010eda:	6a38      	ldr	r0, [r7, #32]
 8010edc:	f00d fb7a 	bl	801e5d4 <memcpy>
    p += hashlen;
 8010ee0:	6a3a      	ldr	r2, [r7, #32]
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	623b      	str	r3, [r7, #32]

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 8010ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	4413      	add	r3, r2
 8010eee:	6a3a      	ldr	r2, [r7, #32]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d005      	beq.n	8010f00 <rsa_rsassa_pkcs1_v15_encode+0x1cc>
    {
        mbedtls_zeroize( dst, dst_len );
 8010ef4:	6839      	ldr	r1, [r7, #0]
 8010ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ef8:	f7fe fda8 	bl	800fa4c <mbedtls_zeroize>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010efc:	4b03      	ldr	r3, [pc, #12]	; (8010f0c <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010efe:	e000      	b.n	8010f02 <rsa_rsassa_pkcs1_v15_encode+0x1ce>
    }

    return( 0 );
 8010f00:	2300      	movs	r3, #0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3728      	adds	r7, #40	; 0x28
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	ffffbf80 	.word	0xffffbf80

08010f10 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b08a      	sub	sp, #40	; 0x28
 8010f14:	af02      	add	r7, sp, #8
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	607a      	str	r2, [r7, #4]
 8010f1c:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	61bb      	str	r3, [r7, #24]
 8010f22:	2300      	movs	r3, #0
 8010f24:	617b      	str	r3, [r7, #20]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d106      	bne.n	8010f3a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x2a>
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d001      	beq.n	8010f3a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010f36:	4b3a      	ldr	r3, [pc, #232]	; (8011020 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x110>)
 8010f38:	e06d      	b.n	8011016 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8010f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	4613      	mov	r3, r2
 8010f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f4c:	f7ff fef2 	bl	8010d34 <rsa_rsassa_pkcs1_v15_encode>
 8010f50:	61f8      	str	r0, [r7, #28]
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d001      	beq.n	8010f5c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x4c>
                                             ctx->len, sig ) ) != 0 )
        return( ret );
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	e05c      	b.n	8011016 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d106      	bne.n	8010f70 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8010f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	f7ff f8cc 	bl	8010104 <mbedtls_rsa_public>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	e052      	b.n	8011016 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = mbedtls_calloc( 1, ctx->len );
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	4619      	mov	r1, r3
 8010f76:	2001      	movs	r0, #1
 8010f78:	f00d fada 	bl	801e530 <calloc>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	61bb      	str	r3, [r7, #24]
    if( sig_try == NULL )
 8010f80:	69bb      	ldr	r3, [r7, #24]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d102      	bne.n	8010f8c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x7c>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8010f86:	f06f 030f 	mvn.w	r3, #15
 8010f8a:	e044      	b.n	8011016 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>

    verif = mbedtls_calloc( 1, ctx->len );
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	4619      	mov	r1, r3
 8010f92:	2001      	movs	r0, #1
 8010f94:	f00d facc 	bl	801e530 <calloc>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	617b      	str	r3, [r7, #20]
    if( verif == NULL )
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d105      	bne.n	8010fae <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9e>
    {
        mbedtls_free( sig_try );
 8010fa2:	69b8      	ldr	r0, [r7, #24]
 8010fa4:	f00d fafe 	bl	801e5a4 <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8010fa8:	f06f 030f 	mvn.w	r3, #15
 8010fac:	e033      	b.n	8011016 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	9300      	str	r3, [sp, #0]
 8010fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	68b9      	ldr	r1, [r7, #8]
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f7ff f9bb 	bl	8010334 <mbedtls_rsa_private>
 8010fbe:	61f8      	str	r0, [r7, #28]
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d11d      	bne.n	8011002 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8010fc6:	697a      	ldr	r2, [r7, #20]
 8010fc8:	69b9      	ldr	r1, [r7, #24]
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f7ff f89a 	bl	8010104 <mbedtls_rsa_public>
 8010fd0:	61f8      	str	r0, [r7, #28]
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d116      	bne.n	8011006 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf6>

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	461a      	mov	r2, r3
 8010fde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010fe0:	6978      	ldr	r0, [r7, #20]
 8010fe2:	f7fe fd4c 	bl	800fa7e <mbedtls_safer_memcmp>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d002      	beq.n	8010ff2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xe2>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8010fec:	4b0d      	ldr	r3, [pc, #52]	; (8011024 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x114>)
 8010fee:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 8010ff0:	e00a      	b.n	8011008 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>
    }

    memcpy( sig, sig_try, ctx->len );
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	69b9      	ldr	r1, [r7, #24]
 8010ffa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ffc:	f00d faea 	bl	801e5d4 <memcpy>
 8011000:	e002      	b.n	8011008 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8011002:	bf00      	nop
 8011004:	e000      	b.n	8011008 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8011006:	bf00      	nop

cleanup:
    mbedtls_free( sig_try );
 8011008:	69b8      	ldr	r0, [r7, #24]
 801100a:	f00d facb 	bl	801e5a4 <free>
    mbedtls_free( verif );
 801100e:	6978      	ldr	r0, [r7, #20]
 8011010:	f00d fac8 	bl	801e5a4 <free>

    return( ret );
 8011014:	69fb      	ldr	r3, [r7, #28]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3720      	adds	r7, #32
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	ffffbf80 	.word	0xffffbf80
 8011024:	ffffbd00 	.word	0xffffbd00

08011028 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b088      	sub	sp, #32
 801102c:	af04      	add	r7, sp, #16
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
 8011034:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801103c:	2b00      	cmp	r3, #0
 801103e:	d10f      	bne.n	8011060 <mbedtls_rsa_pkcs1_sign+0x38>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8011040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011042:	9303      	str	r3, [sp, #12]
 8011044:	6a3b      	ldr	r3, [r7, #32]
 8011046:	9302      	str	r3, [sp, #8]
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	9301      	str	r3, [sp, #4]
 801104c:	7e3b      	ldrb	r3, [r7, #24]
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	68b9      	ldr	r1, [r7, #8]
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f7ff ff5a 	bl	8010f10 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
 801105c:	4603      	mov	r3, r0
 801105e:	e000      	b.n	8011062 <mbedtls_rsa_pkcs1_sign+0x3a>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8011060:	4b02      	ldr	r3, [pc, #8]	; (801106c <mbedtls_rsa_pkcs1_sign+0x44>)
    }
}
 8011062:	4618      	mov	r0, r3
 8011064:	3710      	adds	r7, #16
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	ffffbf00 	.word	0xffffbf00

08011070 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b08a      	sub	sp, #40	; 0x28
 8011074:	af02      	add	r7, sp, #8
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	607a      	str	r2, [r7, #4]
 801107c:	603b      	str	r3, [r7, #0]
    int ret = 0;
 801107e:	2300      	movs	r3, #0
 8011080:	61fb      	str	r3, [r7, #28]
    const size_t sig_len = ctx->len;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	617b      	str	r3, [r7, #20]
    unsigned char *encoded = NULL, *encoded_expected = NULL;
 8011088:	2300      	movs	r3, #0
 801108a:	613b      	str	r3, [r7, #16]
 801108c:	2300      	movs	r3, #0
 801108e:	61bb      	str	r3, [r7, #24]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	2b01      	cmp	r3, #1
 8011094:	d106      	bne.n	80110a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801109c:	2b00      	cmp	r3, #0
 801109e:	d001      	beq.n	80110a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80110a0:	4b32      	ldr	r3, [pc, #200]	; (801116c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xfc>)
 80110a2:	e05f      	b.n	8011164 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xf4>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 80110a4:	6979      	ldr	r1, [r7, #20]
 80110a6:	2001      	movs	r0, #1
 80110a8:	f00d fa42 	bl	801e530 <calloc>
 80110ac:	4603      	mov	r3, r0
 80110ae:	613b      	str	r3, [r7, #16]
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d008      	beq.n	80110c8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
        ( encoded_expected = mbedtls_calloc( 1, sig_len ) ) == NULL )
 80110b6:	6979      	ldr	r1, [r7, #20]
 80110b8:	2001      	movs	r0, #1
 80110ba:	f00d fa39 	bl	801e530 <calloc>
 80110be:	4603      	mov	r3, r0
 80110c0:	61bb      	str	r3, [r7, #24]
    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d103      	bne.n	80110d0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x60>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80110c8:	f06f 030f 	mvn.w	r3, #15
 80110cc:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 80110ce:	e034      	b.n	801113a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 80110d0:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	9300      	str	r3, [sp, #0]
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110de:	f7ff fe29 	bl	8010d34 <rsa_rsassa_pkcs1_v15_encode>
 80110e2:	61f8      	str	r0, [r7, #28]
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d122      	bne.n	8011130 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc0>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d106      	bne.n	80110fe <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8e>
          ? mbedtls_rsa_public(  ctx, sig, encoded )
 80110f0:	693a      	ldr	r2, [r7, #16]
 80110f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f7ff f805 	bl	8010104 <mbedtls_rsa_public>
 80110fa:	4603      	mov	r3, r0
 80110fc:	e008      	b.n	8011110 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011104:	687a      	ldr	r2, [r7, #4]
 8011106:	68b9      	ldr	r1, [r7, #8]
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	f7ff f913 	bl	8010334 <mbedtls_rsa_private>
 801110e:	4603      	mov	r3, r0
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 8011110:	61fb      	str	r3, [r7, #28]
    if( ret != 0 )
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d10d      	bne.n	8011134 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>

    /*
     * Compare
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
 8011118:	697a      	ldr	r2, [r7, #20]
 801111a:	69b9      	ldr	r1, [r7, #24]
 801111c:	6938      	ldr	r0, [r7, #16]
 801111e:	f7fe fcae 	bl	800fa7e <mbedtls_safer_memcmp>
 8011122:	61f8      	str	r0, [r7, #28]
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d006      	beq.n	8011138 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 801112a:	4b11      	ldr	r3, [pc, #68]	; (8011170 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x100>)
 801112c:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 801112e:	e004      	b.n	801113a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
        goto cleanup;
 8011130:	bf00      	nop
 8011132:	e002      	b.n	801113a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
        goto cleanup;
 8011134:	bf00      	nop
 8011136:	e000      	b.n	801113a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
    }

cleanup:
 8011138:	bf00      	nop

    if( encoded != NULL )
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d006      	beq.n	801114e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xde>
    {
        mbedtls_zeroize( encoded, sig_len );
 8011140:	6979      	ldr	r1, [r7, #20]
 8011142:	6938      	ldr	r0, [r7, #16]
 8011144:	f7fe fc82 	bl	800fa4c <mbedtls_zeroize>
        mbedtls_free( encoded );
 8011148:	6938      	ldr	r0, [r7, #16]
 801114a:	f00d fa2b 	bl	801e5a4 <free>
    }

    if( encoded_expected != NULL )
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d006      	beq.n	8011162 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xf2>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 8011154:	6979      	ldr	r1, [r7, #20]
 8011156:	69b8      	ldr	r0, [r7, #24]
 8011158:	f7fe fc78 	bl	800fa4c <mbedtls_zeroize>
        mbedtls_free( encoded_expected );
 801115c:	69b8      	ldr	r0, [r7, #24]
 801115e:	f00d fa21 	bl	801e5a4 <free>
    }

    return( ret );
 8011162:	69fb      	ldr	r3, [r7, #28]
}
 8011164:	4618      	mov	r0, r3
 8011166:	3720      	adds	r7, #32
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	ffffbf80 	.word	0xffffbf80
 8011170:	ffffbc80 	.word	0xffffbc80

08011174 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af04      	add	r7, sp, #16
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]
 8011180:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011188:	2b00      	cmp	r3, #0
 801118a:	d10f      	bne.n	80111ac <mbedtls_rsa_pkcs1_verify+0x38>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 801118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118e:	9303      	str	r3, [sp, #12]
 8011190:	6a3b      	ldr	r3, [r7, #32]
 8011192:	9302      	str	r3, [sp, #8]
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	9301      	str	r3, [sp, #4]
 8011198:	7e3b      	ldrb	r3, [r7, #24]
 801119a:	9300      	str	r3, [sp, #0]
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	687a      	ldr	r2, [r7, #4]
 80111a0:	68b9      	ldr	r1, [r7, #8]
 80111a2:	68f8      	ldr	r0, [r7, #12]
 80111a4:	f7ff ff64 	bl	8011070 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
 80111a8:	4603      	mov	r3, r0
 80111aa:	e000      	b.n	80111ae <mbedtls_rsa_pkcs1_verify+0x3a>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80111ac:	4b02      	ldr	r3, [pc, #8]	; (80111b8 <mbedtls_rsa_pkcs1_verify+0x44>)
    }
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3710      	adds	r7, #16
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	ffffbf00 	.word	0xffffbf00

080111bc <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	338c      	adds	r3, #140	; 0x8c
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7f5 ff3a 	bl	8007042 <mbedtls_mpi_free>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	3398      	adds	r3, #152	; 0x98
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7f5 ff35 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	3368      	adds	r3, #104	; 0x68
 80111dc:	4618      	mov	r0, r3
 80111de:	f7f5 ff30 	bl	8007042 <mbedtls_mpi_free>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	3320      	adds	r3, #32
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7f5 ff2b 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	3338      	adds	r3, #56	; 0x38
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7f5 ff26 	bl	8007042 <mbedtls_mpi_free>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	332c      	adds	r3, #44	; 0x2c
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7f5 ff21 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	3314      	adds	r3, #20
 8011204:	4618      	mov	r0, r3
 8011206:	f7f5 ff1c 	bl	8007042 <mbedtls_mpi_free>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	3308      	adds	r3, #8
 801120e:	4618      	mov	r0, r3
 8011210:	f7f5 ff17 	bl	8007042 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	3380      	adds	r3, #128	; 0x80
 8011218:	4618      	mov	r0, r3
 801121a:	f7f5 ff12 	bl	8007042 <mbedtls_mpi_free>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	3374      	adds	r3, #116	; 0x74
 8011222:	4618      	mov	r0, r3
 8011224:	f7f5 ff0d 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	335c      	adds	r3, #92	; 0x5c
 801122c:	4618      	mov	r0, r3
 801122e:	f7f5 ff08 	bl	8007042 <mbedtls_mpi_free>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	3350      	adds	r3, #80	; 0x50
 8011236:	4618      	mov	r0, r3
 8011238:	f7f5 ff03 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	3344      	adds	r3, #68	; 0x44
 8011240:	4618      	mov	r0, r3
 8011242:	f7f5 fefe 	bl	8007042 <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8011246:	bf00      	nop
 8011248:	3708      	adds	r7, #8
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
	...

08011250 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 8011250:	b5b0      	push	{r4, r5, r7, lr}
 8011252:	b09e      	sub	sp, #120	; 0x78
 8011254:	af02      	add	r7, sp, #8
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	60b9      	str	r1, [r7, #8]
 801125a:	607a      	str	r2, [r7, #4]
 801125c:	603b      	str	r3, [r7, #0]
    int ret = 0;
 801125e:	2300      	movs	r3, #0
 8011260:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 8011262:	4bb4      	ldr	r3, [pc, #720]	; (8011534 <mbedtls_rsa_deduce_primes+0x2e4>)
 8011264:	f107 0410 	add.w	r4, r7, #16
 8011268:	461d      	mov	r5, r3
 801126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801126e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011276:	e895 0003 	ldmia.w	r5, {r0, r1}
 801127a:	6020      	str	r0, [r4, #0]
 801127c:	3404      	adds	r4, #4
 801127e:	8021      	strh	r1, [r4, #0]
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );
 8011280:	2336      	movs	r3, #54	; 0x36
 8011282:	667b      	str	r3, [r7, #100]	; 0x64

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00c      	beq.n	80112a4 <mbedtls_rsa_deduce_primes+0x54>
 801128a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801128e:	2b00      	cmp	r3, #0
 8011290:	d008      	beq.n	80112a4 <mbedtls_rsa_deduce_primes+0x54>
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d104      	bne.n	80112a4 <mbedtls_rsa_deduce_primes+0x54>
 801129a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d002      	beq.n	80112aa <mbedtls_rsa_deduce_primes+0x5a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80112a4:	f06f 0303 	mvn.w	r3, #3
 80112a8:	e152      	b.n	8011550 <mbedtls_rsa_deduce_primes+0x300>

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80112aa:	2100      	movs	r1, #0
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f7f6 fb61 	bl	8007974 <mbedtls_mpi_cmp_int>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	dd1b      	ble.n	80112f0 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80112b8:	2101      	movs	r1, #1
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f7f6 fb5a 	bl	8007974 <mbedtls_mpi_cmp_int>
 80112c0:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	dd14      	ble.n	80112f0 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80112c6:	68f9      	ldr	r1, [r7, #12]
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f7f6 fab8 	bl	800783e <mbedtls_mpi_cmp_mpi>
 80112ce:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	da0d      	bge.n	80112f0 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80112d4:	2101      	movs	r1, #1
 80112d6:	68b8      	ldr	r0, [r7, #8]
 80112d8:	f7f6 fb4c 	bl	8007974 <mbedtls_mpi_cmp_int>
 80112dc:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80112de:	2b00      	cmp	r3, #0
 80112e0:	dd06      	ble.n	80112f0 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80112e2:	68f9      	ldr	r1, [r7, #12]
 80112e4:	68b8      	ldr	r0, [r7, #8]
 80112e6:	f7f6 faaa 	bl	800783e <mbedtls_mpi_cmp_mpi>
 80112ea:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	db02      	blt.n	80112f6 <mbedtls_rsa_deduce_primes+0xa6>
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80112f0:	f06f 0303 	mvn.w	r3, #3
 80112f4:	e12c      	b.n	8011550 <mbedtls_rsa_deduce_primes+0x300>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 80112f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7f5 fe8a 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 8011300:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011304:	4618      	mov	r0, r3
 8011306:	f7f5 fe85 	bl	8007014 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 801130a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801130e:	68ba      	ldr	r2, [r7, #8]
 8011310:	6879      	ldr	r1, [r7, #4]
 8011312:	4618      	mov	r0, r3
 8011314:	f7f8 fa1f 	bl	8009756 <mbedtls_mpi_mul_mpi>
 8011318:	66f8      	str	r0, [r7, #108]	; 0x6c
 801131a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801131c:	2b00      	cmp	r3, #0
 801131e:	f040 80f7 	bne.w	8011510 <mbedtls_rsa_deduce_primes+0x2c0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 8011322:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8011326:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801132a:	2201      	movs	r2, #1
 801132c:	4618      	mov	r0, r3
 801132e:	f7f6 fd70 	bl	8007e12 <mbedtls_mpi_sub_int>
 8011332:	66f8      	str	r0, [r7, #108]	; 0x6c
 8011334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011336:	2b00      	cmp	r3, #0
 8011338:	f040 80ec 	bne.w	8011514 <mbedtls_rsa_deduce_primes+0x2c4>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 801133c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011340:	4618      	mov	r0, r3
 8011342:	f7f5 ff87 	bl	8007254 <mbedtls_mpi_lsb>
 8011346:	4603      	mov	r3, r0
 8011348:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801134c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011350:	2b00      	cmp	r3, #0
 8011352:	d103      	bne.n	801135c <mbedtls_rsa_deduce_primes+0x10c>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8011354:	f06f 0303 	mvn.w	r3, #3
 8011358:	66fb      	str	r3, [r7, #108]	; 0x6c
        goto cleanup;
 801135a:	e0ee      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 801135c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8011360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011364:	4611      	mov	r1, r2
 8011366:	4618      	mov	r0, r3
 8011368:	f7f6 f94c 	bl	8007604 <mbedtls_mpi_shift_r>
 801136c:	66f8      	str	r0, [r7, #108]	; 0x6c
 801136e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011370:	2b00      	cmp	r3, #0
 8011372:	f040 80d1 	bne.w	8011518 <mbedtls_rsa_deduce_primes+0x2c8>
    /*
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
 8011376:	2300      	movs	r3, #0
 8011378:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    if( N->p[0] % 8 == 1 )
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	689b      	ldr	r3, [r3, #8]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f003 0307 	and.w	r3, r3, #7
 8011386:	2b01      	cmp	r3, #1
 8011388:	f040 80b6 	bne.w	80114f8 <mbedtls_rsa_deduce_primes+0x2a8>
        attempt = 1;
 801138c:	2301      	movs	r3, #1
 801138e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    for( ; attempt < num_primes; ++attempt )
 8011392:	e0b1      	b.n	80114f8 <mbedtls_rsa_deduce_primes+0x2a8>
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 8011394:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011398:	3370      	adds	r3, #112	; 0x70
 801139a:	443b      	add	r3, r7
 801139c:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80113a0:	461a      	mov	r2, r3
 80113a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80113a6:	4611      	mov	r1, r2
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7f5 ff04 	bl	80071b6 <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 80113ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80113b2:	68fa      	ldr	r2, [r7, #12]
 80113b4:	4619      	mov	r1, r3
 80113b6:	6838      	ldr	r0, [r7, #0]
 80113b8:	f7f9 fb92 	bl	800aae0 <mbedtls_mpi_gcd>
 80113bc:	66f8      	str	r0, [r7, #108]	; 0x6c
 80113be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f040 80ab 	bne.w	801151c <mbedtls_rsa_deduce_primes+0x2cc>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 80113c6:	2101      	movs	r1, #1
 80113c8:	6838      	ldr	r0, [r7, #0]
 80113ca:	f7f6 fad3 	bl	8007974 <mbedtls_mpi_cmp_int>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	f040 808b 	bne.w	80114ec <mbedtls_rsa_deduce_primes+0x29c>
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 80113d6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80113da:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80113de:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80113e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80113e6:	9300      	str	r3, [sp, #0]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f7f8 fece 	bl	800a18a <mbedtls_mpi_exp_mod>
 80113ee:	66f8      	str	r0, [r7, #108]	; 0x6c
 80113f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f040 8094 	bne.w	8011520 <mbedtls_rsa_deduce_primes+0x2d0>
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 80113f8:	2301      	movs	r3, #1
 80113fa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80113fe:	e063      	b.n	80114c8 <mbedtls_rsa_deduce_primes+0x278>
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 8011400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011404:	2101      	movs	r1, #1
 8011406:	4618      	mov	r0, r3
 8011408:	f7f6 fab4 	bl	8007974 <mbedtls_mpi_cmp_int>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d061      	beq.n	80114d6 <mbedtls_rsa_deduce_primes+0x286>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 8011412:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8011416:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801141a:	2201      	movs	r2, #1
 801141c:	4618      	mov	r0, r3
 801141e:	f7f6 fcd4 	bl	8007dca <mbedtls_mpi_add_int>
 8011422:	66f8      	str	r0, [r7, #108]	; 0x6c
 8011424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011426:	2b00      	cmp	r3, #0
 8011428:	d17c      	bne.n	8011524 <mbedtls_rsa_deduce_primes+0x2d4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 801142a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801142e:	68fa      	ldr	r2, [r7, #12]
 8011430:	4619      	mov	r1, r3
 8011432:	6838      	ldr	r0, [r7, #0]
 8011434:	f7f9 fb54 	bl	800aae0 <mbedtls_mpi_gcd>
 8011438:	66f8      	str	r0, [r7, #108]	; 0x6c
 801143a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801143c:	2b00      	cmp	r3, #0
 801143e:	d173      	bne.n	8011528 <mbedtls_rsa_deduce_primes+0x2d8>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8011440:	2101      	movs	r1, #1
 8011442:	6838      	ldr	r0, [r7, #0]
 8011444:	f7f6 fa96 	bl	8007974 <mbedtls_mpi_cmp_int>
 8011448:	4603      	mov	r3, r0
 801144a:	2b01      	cmp	r3, #1
 801144c:	d112      	bne.n	8011474 <mbedtls_rsa_deduce_primes+0x224>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 801144e:	68f9      	ldr	r1, [r7, #12]
 8011450:	6838      	ldr	r0, [r7, #0]
 8011452:	f7f6 f9f4 	bl	800783e <mbedtls_mpi_cmp_mpi>
 8011456:	4603      	mov	r3, r0
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8011458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801145c:	d10a      	bne.n	8011474 <mbedtls_rsa_deduce_primes+0x224>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	68fa      	ldr	r2, [r7, #12]
 8011462:	2100      	movs	r1, #0
 8011464:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011468:	f7f8 fa9e 	bl	80099a8 <mbedtls_mpi_div_mpi>
 801146c:	66f8      	str	r0, [r7, #108]	; 0x6c
 801146e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011470:	2b00      	cmp	r3, #0
                goto cleanup;
 8011472:	e062      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011474:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8011478:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801147c:	2201      	movs	r2, #1
 801147e:	4618      	mov	r0, r3
 8011480:	f7f6 fcc7 	bl	8007e12 <mbedtls_mpi_sub_int>
 8011484:	66f8      	str	r0, [r7, #108]	; 0x6c
 8011486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011488:	2b00      	cmp	r3, #0
 801148a:	d14f      	bne.n	801152c <mbedtls_rsa_deduce_primes+0x2dc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 801148c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011490:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8011494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011498:	4618      	mov	r0, r3
 801149a:	f7f8 f95c 	bl	8009756 <mbedtls_mpi_mul_mpi>
 801149e:	66f8      	str	r0, [r7, #108]	; 0x6c
 80114a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d144      	bne.n	8011530 <mbedtls_rsa_deduce_primes+0x2e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 80114a6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80114aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80114ae:	68fa      	ldr	r2, [r7, #12]
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7f8 fd4c 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 80114b6:	66f8      	str	r0, [r7, #108]	; 0x6c
 80114b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d13c      	bne.n	8011538 <mbedtls_rsa_deduce_primes+0x2e8>
        for( iter = 1; iter <= order; ++iter )
 80114be:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80114c2:	3301      	adds	r3, #1
 80114c4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80114c8:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80114cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d995      	bls.n	8011400 <mbedtls_rsa_deduce_primes+0x1b0>
 80114d4:	e000      	b.n	80114d8 <mbedtls_rsa_deduce_primes+0x288>
                break;
 80114d6:	bf00      	nop
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 80114d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80114dc:	2101      	movs	r1, #1
 80114de:	4618      	mov	r0, r3
 80114e0:	f7f6 fa48 	bl	8007974 <mbedtls_mpi_cmp_int>
 80114e4:	4603      	mov	r3, r0
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d10d      	bne.n	8011506 <mbedtls_rsa_deduce_primes+0x2b6>
 80114ea:	e000      	b.n	80114ee <mbedtls_rsa_deduce_primes+0x29e>
            continue;
 80114ec:	bf00      	nop
    for( ; attempt < num_primes; ++attempt )
 80114ee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80114f2:	3301      	adds	r3, #1
 80114f4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80114f8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80114fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80114fe:	429a      	cmp	r2, r3
 8011500:	f63f af48 	bhi.w	8011394 <mbedtls_rsa_deduce_primes+0x144>
 8011504:	e000      	b.n	8011508 <mbedtls_rsa_deduce_primes+0x2b8>
        {
            break;
 8011506:	bf00      	nop
        }
    }

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8011508:	f06f 0303 	mvn.w	r3, #3
 801150c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801150e:	e014      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 8011510:	bf00      	nop
 8011512:	e012      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 8011514:	bf00      	nop
 8011516:	e010      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 8011518:	bf00      	nop
 801151a:	e00e      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 801151c:	bf00      	nop
 801151e:	e00c      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 8011520:	bf00      	nop
 8011522:	e00a      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 8011524:	bf00      	nop
 8011526:	e008      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8011528:	bf00      	nop
 801152a:	e006      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 801152c:	bf00      	nop
 801152e:	e004      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 8011530:	bf00      	nop
 8011532:	e002      	b.n	801153a <mbedtls_rsa_deduce_primes+0x2ea>
 8011534:	08022af0 	.word	0x08022af0
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 8011538:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &K );
 801153a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801153e:	4618      	mov	r0, r3
 8011540:	f7f5 fd7f 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 8011544:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011548:	4618      	mov	r0, r3
 801154a:	f7f5 fd7a 	bl	8007042 <mbedtls_mpi_free>
    return( ret );
 801154e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8011550:	4618      	mov	r0, r3
 8011552:	3770      	adds	r7, #112	; 0x70
 8011554:	46bd      	mov	sp, r7
 8011556:	bdb0      	pop	{r4, r5, r7, pc}

08011558 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b08c      	sub	sp, #48	; 0x30
 801155c:	af00      	add	r7, sp, #0
 801155e:	60f8      	str	r0, [r7, #12]
 8011560:	60b9      	str	r1, [r7, #8]
 8011562:	607a      	str	r2, [r7, #4]
 8011564:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8011566:	2300      	movs	r3, #0
 8011568:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d006      	beq.n	801157e <mbedtls_rsa_deduce_private_exponent+0x26>
 8011570:	2100      	movs	r1, #0
 8011572:	6838      	ldr	r0, [r7, #0]
 8011574:	f7f6 f9fe 	bl	8007974 <mbedtls_mpi_cmp_int>
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d002      	beq.n	8011584 <mbedtls_rsa_deduce_private_exponent+0x2c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 801157e:	f06f 0303 	mvn.w	r3, #3
 8011582:	e07b      	b.n	801167c <mbedtls_rsa_deduce_private_exponent+0x124>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8011584:	2101      	movs	r1, #1
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	f7f6 f9f4 	bl	8007974 <mbedtls_mpi_cmp_int>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	dd0d      	ble.n	80115ae <mbedtls_rsa_deduce_private_exponent+0x56>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8011592:	2101      	movs	r1, #1
 8011594:	68b8      	ldr	r0, [r7, #8]
 8011596:	f7f6 f9ed 	bl	8007974 <mbedtls_mpi_cmp_int>
 801159a:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 801159c:	2b00      	cmp	r3, #0
 801159e:	dd06      	ble.n	80115ae <mbedtls_rsa_deduce_private_exponent+0x56>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 80115a0:	2100      	movs	r1, #0
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7f6 f9e6 	bl	8007974 <mbedtls_mpi_cmp_int>
 80115a8:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d102      	bne.n	80115b4 <mbedtls_rsa_deduce_private_exponent+0x5c>
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80115ae:	f06f 0303 	mvn.w	r3, #3
 80115b2:	e063      	b.n	801167c <mbedtls_rsa_deduce_private_exponent+0x124>
    }

    mbedtls_mpi_init( &K );
 80115b4:	f107 0320 	add.w	r3, r7, #32
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7f5 fd2b 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80115be:	f107 0314 	add.w	r3, r7, #20
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7f5 fd26 	bl	8007014 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80115c8:	f107 0320 	add.w	r3, r7, #32
 80115cc:	2201      	movs	r2, #1
 80115ce:	68f9      	ldr	r1, [r7, #12]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7f6 fc1e 	bl	8007e12 <mbedtls_mpi_sub_int>
 80115d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80115d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d13a      	bne.n	8011654 <mbedtls_rsa_deduce_private_exponent+0xfc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80115de:	f107 0314 	add.w	r3, r7, #20
 80115e2:	2201      	movs	r2, #1
 80115e4:	68b9      	ldr	r1, [r7, #8]
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7f6 fc13 	bl	8007e12 <mbedtls_mpi_sub_int>
 80115ec:	62f8      	str	r0, [r7, #44]	; 0x2c
 80115ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d131      	bne.n	8011658 <mbedtls_rsa_deduce_private_exponent+0x100>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 80115f4:	f107 0214 	add.w	r2, r7, #20
 80115f8:	f107 0320 	add.w	r3, r7, #32
 80115fc:	4619      	mov	r1, r3
 80115fe:	6838      	ldr	r0, [r7, #0]
 8011600:	f7f9 fa6e 	bl	800aae0 <mbedtls_mpi_gcd>
 8011604:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011608:	2b00      	cmp	r3, #0
 801160a:	d127      	bne.n	801165c <mbedtls_rsa_deduce_private_exponent+0x104>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 801160c:	f107 0214 	add.w	r2, r7, #20
 8011610:	f107 0120 	add.w	r1, r7, #32
 8011614:	f107 0320 	add.w	r3, r7, #32
 8011618:	4618      	mov	r0, r3
 801161a:	f7f8 f89c 	bl	8009756 <mbedtls_mpi_mul_mpi>
 801161e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	2b00      	cmp	r3, #0
 8011624:	d11c      	bne.n	8011660 <mbedtls_rsa_deduce_private_exponent+0x108>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 8011626:	f107 0220 	add.w	r2, r7, #32
 801162a:	f107 0020 	add.w	r0, r7, #32
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	2100      	movs	r1, #0
 8011632:	f7f8 f9b9 	bl	80099a8 <mbedtls_mpi_div_mpi>
 8011636:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163a:	2b00      	cmp	r3, #0
 801163c:	d112      	bne.n	8011664 <mbedtls_rsa_deduce_private_exponent+0x10c>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 801163e:	f107 0320 	add.w	r3, r7, #32
 8011642:	461a      	mov	r2, r3
 8011644:	6879      	ldr	r1, [r7, #4]
 8011646:	6838      	ldr	r0, [r7, #0]
 8011648:	f7f9 fb9d 	bl	800ad86 <mbedtls_mpi_inv_mod>
 801164c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011650:	2b00      	cmp	r3, #0

cleanup:
 8011652:	e008      	b.n	8011666 <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8011654:	bf00      	nop
 8011656:	e006      	b.n	8011666 <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8011658:	bf00      	nop
 801165a:	e004      	b.n	8011666 <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 801165c:	bf00      	nop
 801165e:	e002      	b.n	8011666 <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 8011660:	bf00      	nop
 8011662:	e000      	b.n	8011666 <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 8011664:	bf00      	nop

    mbedtls_mpi_free( &K );
 8011666:	f107 0320 	add.w	r3, r7, #32
 801166a:	4618      	mov	r0, r3
 801166c:	f7f5 fce9 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8011670:	f107 0314 	add.w	r3, r7, #20
 8011674:	4618      	mov	r0, r3
 8011676:	f7f5 fce4 	bl	8007042 <mbedtls_mpi_free>

    return( ret );
 801167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801167c:	4618      	mov	r0, r3
 801167e:	3730      	adds	r7, #48	; 0x30
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b08c      	sub	sp, #48	; 0x30
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	607a      	str	r2, [r7, #4]
 8011690:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	62fb      	str	r3, [r7, #44]	; 0x2c

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 8011696:	f107 0320 	add.w	r3, r7, #32
 801169a:	4618      	mov	r0, r3
 801169c:	f7f5 fcba 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80116a0:	f107 0314 	add.w	r3, r7, #20
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7f5 fcb5 	bl	8007014 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d037      	beq.n	8011720 <mbedtls_rsa_validate_crt+0x9c>
    {
        if( P == NULL )
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d102      	bne.n	80116bc <mbedtls_rsa_validate_crt+0x38>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 80116b6:	4b6c      	ldr	r3, [pc, #432]	; (8011868 <mbedtls_rsa_validate_crt+0x1e4>)
 80116b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80116ba:	e0b7      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80116bc:	f107 0320 	add.w	r3, r7, #32
 80116c0:	2201      	movs	r2, #1
 80116c2:	68f9      	ldr	r1, [r7, #12]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7f6 fba4 	bl	8007e12 <mbedtls_mpi_sub_int>
 80116ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 80116cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	f040 8099 	bne.w	8011806 <mbedtls_rsa_validate_crt+0x182>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 80116d4:	f107 0314 	add.w	r3, r7, #20
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	6839      	ldr	r1, [r7, #0]
 80116dc:	4618      	mov	r0, r3
 80116de:	f7f6 fb2a 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 80116e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80116e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f040 808f 	bne.w	801180a <mbedtls_rsa_validate_crt+0x186>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80116ec:	f107 0220 	add.w	r2, r7, #32
 80116f0:	f107 0114 	add.w	r1, r7, #20
 80116f4:	f107 0314 	add.w	r3, r7, #20
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7f8 fc28 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 80116fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011702:	2b00      	cmp	r3, #0
 8011704:	f040 8083 	bne.w	801180e <mbedtls_rsa_validate_crt+0x18a>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 8011708:	f107 0314 	add.w	r3, r7, #20
 801170c:	2100      	movs	r1, #0
 801170e:	4618      	mov	r0, r3
 8011710:	f7f6 f930 	bl	8007974 <mbedtls_mpi_cmp_int>
 8011714:	4603      	mov	r3, r0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d002      	beq.n	8011720 <mbedtls_rsa_validate_crt+0x9c>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801171a:	4b54      	ldr	r3, [pc, #336]	; (801186c <mbedtls_rsa_validate_crt+0x1e8>)
 801171c:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 801171e:	e085      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 8011720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011722:	2b00      	cmp	r3, #0
 8011724:	d034      	beq.n	8011790 <mbedtls_rsa_validate_crt+0x10c>
    {
        if( Q == NULL )
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d102      	bne.n	8011732 <mbedtls_rsa_validate_crt+0xae>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 801172c:	4b4e      	ldr	r3, [pc, #312]	; (8011868 <mbedtls_rsa_validate_crt+0x1e4>)
 801172e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011730:	e07c      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 8011732:	f107 0320 	add.w	r3, r7, #32
 8011736:	2201      	movs	r2, #1
 8011738:	68b9      	ldr	r1, [r7, #8]
 801173a:	4618      	mov	r0, r3
 801173c:	f7f6 fb69 	bl	8007e12 <mbedtls_mpi_sub_int>
 8011740:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011744:	2b00      	cmp	r3, #0
 8011746:	d164      	bne.n	8011812 <mbedtls_rsa_validate_crt+0x18e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 8011748:	f107 0314 	add.w	r3, r7, #20
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011750:	4618      	mov	r0, r3
 8011752:	f7f6 faf0 	bl	8007d36 <mbedtls_mpi_sub_mpi>
 8011756:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175a:	2b00      	cmp	r3, #0
 801175c:	d15b      	bne.n	8011816 <mbedtls_rsa_validate_crt+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 801175e:	f107 0220 	add.w	r2, r7, #32
 8011762:	f107 0114 	add.w	r1, r7, #20
 8011766:	f107 0314 	add.w	r3, r7, #20
 801176a:	4618      	mov	r0, r3
 801176c:	f7f8 fbef 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 8011770:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011774:	2b00      	cmp	r3, #0
 8011776:	d150      	bne.n	801181a <mbedtls_rsa_validate_crt+0x196>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 8011778:	f107 0314 	add.w	r3, r7, #20
 801177c:	2100      	movs	r1, #0
 801177e:	4618      	mov	r0, r3
 8011780:	f7f6 f8f8 	bl	8007974 <mbedtls_mpi_cmp_int>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d002      	beq.n	8011790 <mbedtls_rsa_validate_crt+0x10c>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801178a:	4b38      	ldr	r3, [pc, #224]	; (801186c <mbedtls_rsa_validate_crt+0x1e8>)
 801178c:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 801178e:	e04d      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 8011790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011792:	2b00      	cmp	r3, #0
 8011794:	d043      	beq.n	801181e <mbedtls_rsa_validate_crt+0x19a>
    {
        if( P == NULL || Q == NULL )
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d002      	beq.n	80117a2 <mbedtls_rsa_validate_crt+0x11e>
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d102      	bne.n	80117a8 <mbedtls_rsa_validate_crt+0x124>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 80117a2:	4b31      	ldr	r3, [pc, #196]	; (8011868 <mbedtls_rsa_validate_crt+0x1e4>)
 80117a4:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80117a6:	e041      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 80117a8:	f107 0320 	add.w	r3, r7, #32
 80117ac:	68ba      	ldr	r2, [r7, #8]
 80117ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7f7 ffd0 	bl	8009756 <mbedtls_mpi_mul_mpi>
 80117b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80117b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d131      	bne.n	8011822 <mbedtls_rsa_validate_crt+0x19e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80117be:	f107 0120 	add.w	r1, r7, #32
 80117c2:	f107 0320 	add.w	r3, r7, #32
 80117c6:	2201      	movs	r2, #1
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7f6 fb22 	bl	8007e12 <mbedtls_mpi_sub_int>
 80117ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 80117d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d127      	bne.n	8011826 <mbedtls_rsa_validate_crt+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 80117d6:	f107 0120 	add.w	r1, r7, #32
 80117da:	f107 0320 	add.w	r3, r7, #32
 80117de:	68fa      	ldr	r2, [r7, #12]
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7f8 fbb4 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 80117e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80117e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d11d      	bne.n	801182a <mbedtls_rsa_validate_crt+0x1a6>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80117ee:	f107 0320 	add.w	r3, r7, #32
 80117f2:	2100      	movs	r1, #0
 80117f4:	4618      	mov	r0, r3
 80117f6:	f7f6 f8bd 	bl	8007974 <mbedtls_mpi_cmp_int>
 80117fa:	4603      	mov	r3, r0
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d00e      	beq.n	801181e <mbedtls_rsa_validate_crt+0x19a>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011800:	4b1a      	ldr	r3, [pc, #104]	; (801186c <mbedtls_rsa_validate_crt+0x1e8>)
 8011802:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011804:	e012      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8011806:	bf00      	nop
 8011808:	e010      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 801180a:	bf00      	nop
 801180c:	e00e      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 801180e:	bf00      	nop
 8011810:	e00c      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 8011812:	bf00      	nop
 8011814:	e00a      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 8011816:	bf00      	nop
 8011818:	e008      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 801181a:	bf00      	nop
 801181c:	e006      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        }
    }

cleanup:
 801181e:	bf00      	nop
 8011820:	e004      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 8011822:	bf00      	nop
 8011824:	e002      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011826:	bf00      	nop
 8011828:	e000      	b.n	801182c <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 801182a:	bf00      	nop

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 801182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00b      	beq.n	801184a <mbedtls_rsa_validate_crt+0x1c6>
 8011832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011834:	f513 4f84 	cmn.w	r3, #16896	; 0x4200
 8011838:	d007      	beq.n	801184a <mbedtls_rsa_validate_crt+0x1c6>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 801183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801183c:	f513 4f81 	cmn.w	r3, #16512	; 0x4080
 8011840:	d003      	beq.n	801184a <mbedtls_rsa_validate_crt+0x1c6>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011844:	f5a3 4384 	sub.w	r3, r3, #16896	; 0x4200
 8011848:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    mbedtls_mpi_free( &K );
 801184a:	f107 0320 	add.w	r3, r7, #32
 801184e:	4618      	mov	r0, r3
 8011850:	f7f5 fbf7 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8011854:	f107 0314 	add.w	r3, r7, #20
 8011858:	4618      	mov	r0, r3
 801185a:	f7f5 fbf2 	bl	8007042 <mbedtls_mpi_free>

    return( ret );
 801185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011860:	4618      	mov	r0, r3
 8011862:	3730      	adds	r7, #48	; 0x30
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	ffffbf80 	.word	0xffffbf80
 801186c:	ffffbe00 	.word	0xffffbe00

08011870 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b08c      	sub	sp, #48	; 0x30
 8011874:	af00      	add	r7, sp, #0
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	607a      	str	r2, [r7, #4]
 801187c:	603b      	str	r3, [r7, #0]
    int ret = 0;
 801187e:	2300      	movs	r3, #0
 8011880:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 8011882:	f107 0320 	add.w	r3, r7, #32
 8011886:	4618      	mov	r0, r3
 8011888:	f7f5 fbc4 	bl	8007014 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 801188c:	f107 0314 	add.w	r3, r7, #20
 8011890:	4618      	mov	r0, r3
 8011892:	f7f5 fbbf 	bl	8007014 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d024      	beq.n	80118e6 <mbedtls_rsa_validate_params+0x76>
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d021      	beq.n	80118e6 <mbedtls_rsa_validate_params+0x76>
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d01e      	beq.n	80118e6 <mbedtls_rsa_validate_params+0x76>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 80118a8:	f107 0320 	add.w	r3, r7, #32
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	68b9      	ldr	r1, [r7, #8]
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7f7 ff50 	bl	8009756 <mbedtls_mpi_mul_mpi>
 80118b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80118b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	f040 80d2 	bne.w	8011a64 <mbedtls_rsa_validate_params+0x1f4>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80118c0:	2101      	movs	r1, #1
 80118c2:	68f8      	ldr	r0, [r7, #12]
 80118c4:	f7f6 f856 	bl	8007974 <mbedtls_mpi_cmp_int>
 80118c8:	4603      	mov	r3, r0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	dd08      	ble.n	80118e0 <mbedtls_rsa_validate_params+0x70>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 80118ce:	f107 0320 	add.w	r3, r7, #32
 80118d2:	68f9      	ldr	r1, [r7, #12]
 80118d4:	4618      	mov	r0, r3
 80118d6:	f7f5 ffb2 	bl	800783e <mbedtls_mpi_cmp_mpi>
 80118da:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d002      	beq.n	80118e6 <mbedtls_rsa_validate_params+0x76>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80118e0:	4b77      	ldr	r3, [pc, #476]	; (8011ac0 <mbedtls_rsa_validate_params+0x250>)
 80118e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80118e4:	e0d1      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d024      	beq.n	8011936 <mbedtls_rsa_validate_params+0xc6>
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d021      	beq.n	8011936 <mbedtls_rsa_validate_params+0xc6>
 80118f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d01e      	beq.n	8011936 <mbedtls_rsa_validate_params+0xc6>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80118f8:	2101      	movs	r1, #1
 80118fa:	6838      	ldr	r0, [r7, #0]
 80118fc:	f7f6 f83a 	bl	8007974 <mbedtls_mpi_cmp_int>
 8011900:	4603      	mov	r3, r0
 8011902:	2b00      	cmp	r3, #0
 8011904:	dd14      	ble.n	8011930 <mbedtls_rsa_validate_params+0xc0>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8011906:	2101      	movs	r1, #1
 8011908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801190a:	f7f6 f833 	bl	8007974 <mbedtls_mpi_cmp_int>
 801190e:	4603      	mov	r3, r0
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8011910:	2b00      	cmp	r3, #0
 8011912:	dd0d      	ble.n	8011930 <mbedtls_rsa_validate_params+0xc0>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8011914:	68f9      	ldr	r1, [r7, #12]
 8011916:	6838      	ldr	r0, [r7, #0]
 8011918:	f7f5 ff91 	bl	800783e <mbedtls_mpi_cmp_mpi>
 801191c:	4603      	mov	r3, r0
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 801191e:	2b00      	cmp	r3, #0
 8011920:	da06      	bge.n	8011930 <mbedtls_rsa_validate_params+0xc0>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8011922:	68f9      	ldr	r1, [r7, #12]
 8011924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011926:	f7f5 ff8a 	bl	800783e <mbedtls_mpi_cmp_mpi>
 801192a:	4603      	mov	r3, r0
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 801192c:	2b00      	cmp	r3, #0
 801192e:	db02      	blt.n	8011936 <mbedtls_rsa_validate_params+0xc6>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011930:	4b63      	ldr	r3, [pc, #396]	; (8011ac0 <mbedtls_rsa_validate_params+0x250>)
 8011932:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011934:	e0a9      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	2b00      	cmp	r3, #0
 801193a:	f000 8095 	beq.w	8011a68 <mbedtls_rsa_validate_params+0x1f8>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2b00      	cmp	r3, #0
 8011942:	f000 8091 	beq.w	8011a68 <mbedtls_rsa_validate_params+0x1f8>
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	f000 808d 	beq.w	8011a68 <mbedtls_rsa_validate_params+0x1f8>
 801194e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011950:	2b00      	cmp	r3, #0
 8011952:	f000 8089 	beq.w	8011a68 <mbedtls_rsa_validate_params+0x1f8>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8011956:	2101      	movs	r1, #1
 8011958:	68b8      	ldr	r0, [r7, #8]
 801195a:	f7f6 f80b 	bl	8007974 <mbedtls_mpi_cmp_int>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	dd06      	ble.n	8011972 <mbedtls_rsa_validate_params+0x102>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 8011964:	2101      	movs	r1, #1
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f7f6 f804 	bl	8007974 <mbedtls_mpi_cmp_int>
 801196c:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 801196e:	2b00      	cmp	r3, #0
 8011970:	dc02      	bgt.n	8011978 <mbedtls_rsa_validate_params+0x108>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011972:	4b53      	ldr	r3, [pc, #332]	; (8011ac0 <mbedtls_rsa_validate_params+0x250>)
 8011974:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011976:	e088      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8011978:	f107 0320 	add.w	r3, r7, #32
 801197c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801197e:	6839      	ldr	r1, [r7, #0]
 8011980:	4618      	mov	r0, r3
 8011982:	f7f7 fee8 	bl	8009756 <mbedtls_mpi_mul_mpi>
 8011986:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198a:	2b00      	cmp	r3, #0
 801198c:	d16e      	bne.n	8011a6c <mbedtls_rsa_validate_params+0x1fc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 801198e:	f107 0120 	add.w	r1, r7, #32
 8011992:	f107 0320 	add.w	r3, r7, #32
 8011996:	2201      	movs	r2, #1
 8011998:	4618      	mov	r0, r3
 801199a:	f7f6 fa3a 	bl	8007e12 <mbedtls_mpi_sub_int>
 801199e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80119a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d164      	bne.n	8011a70 <mbedtls_rsa_validate_params+0x200>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 80119a6:	f107 0314 	add.w	r3, r7, #20
 80119aa:	2201      	movs	r2, #1
 80119ac:	68b9      	ldr	r1, [r7, #8]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7f6 fa2f 	bl	8007e12 <mbedtls_mpi_sub_int>
 80119b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80119b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d15b      	bne.n	8011a74 <mbedtls_rsa_validate_params+0x204>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80119bc:	f107 0214 	add.w	r2, r7, #20
 80119c0:	f107 0120 	add.w	r1, r7, #32
 80119c4:	f107 0320 	add.w	r3, r7, #32
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7f8 fac0 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 80119ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 80119d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d150      	bne.n	8011a78 <mbedtls_rsa_validate_params+0x208>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80119d6:	f107 0320 	add.w	r3, r7, #32
 80119da:	2100      	movs	r1, #0
 80119dc:	4618      	mov	r0, r3
 80119de:	f7f5 ffc9 	bl	8007974 <mbedtls_mpi_cmp_int>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d002      	beq.n	80119ee <mbedtls_rsa_validate_params+0x17e>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80119e8:	4b35      	ldr	r3, [pc, #212]	; (8011ac0 <mbedtls_rsa_validate_params+0x250>)
 80119ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80119ec:	e04d      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80119ee:	f107 0320 	add.w	r3, r7, #32
 80119f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119f4:	6839      	ldr	r1, [r7, #0]
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7f7 fead 	bl	8009756 <mbedtls_mpi_mul_mpi>
 80119fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80119fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d13b      	bne.n	8011a7c <mbedtls_rsa_validate_params+0x20c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011a04:	f107 0120 	add.w	r1, r7, #32
 8011a08:	f107 0320 	add.w	r3, r7, #32
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7f6 f9ff 	bl	8007e12 <mbedtls_mpi_sub_int>
 8011a14:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d131      	bne.n	8011a80 <mbedtls_rsa_validate_params+0x210>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8011a1c:	f107 0314 	add.w	r3, r7, #20
 8011a20:	2201      	movs	r2, #1
 8011a22:	6879      	ldr	r1, [r7, #4]
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7f6 f9f4 	bl	8007e12 <mbedtls_mpi_sub_int>
 8011a2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d128      	bne.n	8011a84 <mbedtls_rsa_validate_params+0x214>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8011a32:	f107 0214 	add.w	r2, r7, #20
 8011a36:	f107 0120 	add.w	r1, r7, #32
 8011a3a:	f107 0320 	add.w	r3, r7, #32
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7f8 fa85 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 8011a44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d11d      	bne.n	8011a88 <mbedtls_rsa_validate_params+0x218>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8011a4c:	f107 0320 	add.w	r3, r7, #32
 8011a50:	2100      	movs	r1, #0
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7f5 ff8e 	bl	8007974 <mbedtls_mpi_cmp_int>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d004      	beq.n	8011a68 <mbedtls_rsa_validate_params+0x1f8>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011a5e:	4b18      	ldr	r3, [pc, #96]	; (8011ac0 <mbedtls_rsa_validate_params+0x250>)
 8011a60:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011a62:	e012      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 8011a64:	bf00      	nop
 8011a66:	e010      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        }
    }

cleanup:
 8011a68:	bf00      	nop
 8011a6a:	e00e      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8011a6c:	bf00      	nop
 8011a6e:	e00c      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011a70:	bf00      	nop
 8011a72:	e00a      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 8011a74:	bf00      	nop
 8011a76:	e008      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8011a78:	bf00      	nop
 8011a7a:	e006      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8011a7c:	bf00      	nop
 8011a7e:	e004      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011a80:	bf00      	nop
 8011a82:	e002      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8011a84:	bf00      	nop
 8011a86:	e000      	b.n	8011a8a <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8011a88:	bf00      	nop

    mbedtls_mpi_free( &K );
 8011a8a:	f107 0320 	add.w	r3, r7, #32
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7f5 fad7 	bl	8007042 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8011a94:	f107 0314 	add.w	r3, r7, #20
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7f5 fad2 	bl	8007042 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 8011a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d007      	beq.n	8011ab4 <mbedtls_rsa_validate_params+0x244>
 8011aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa6:	f513 4f84 	cmn.w	r3, #16896	; 0x4200
 8011aaa:	d003      	beq.n	8011ab4 <mbedtls_rsa_validate_params+0x244>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aae:	f5a3 4384 	sub.w	r3, r3, #16896	; 0x4200
 8011ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return( ret );
 8011ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3730      	adds	r7, #48	; 0x30
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	ffffbe00 	.word	0xffffbe00

08011ac4 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b088      	sub	sp, #32
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
 8011ad0:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 8011ad6:	f107 0310 	add.w	r3, r7, #16
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7f5 fa9a 	bl	8007014 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d015      	beq.n	8011b12 <mbedtls_rsa_deduce_crt+0x4e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 8011ae6:	f107 0310 	add.w	r3, r7, #16
 8011aea:	2201      	movs	r2, #1
 8011aec:	68f9      	ldr	r1, [r7, #12]
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7f6 f98f 	bl	8007e12 <mbedtls_mpi_sub_int>
 8011af4:	61f8      	str	r0, [r7, #28]
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d12f      	bne.n	8011b5c <mbedtls_rsa_deduce_crt+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 8011afc:	f107 0310 	add.w	r3, r7, #16
 8011b00:	461a      	mov	r2, r3
 8011b02:	6879      	ldr	r1, [r7, #4]
 8011b04:	6838      	ldr	r0, [r7, #0]
 8011b06:	f7f8 fa22 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 8011b0a:	61f8      	str	r0, [r7, #28]
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d126      	bne.n	8011b60 <mbedtls_rsa_deduce_crt+0x9c>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 8011b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d015      	beq.n	8011b44 <mbedtls_rsa_deduce_crt+0x80>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 8011b18:	f107 0310 	add.w	r3, r7, #16
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	68b9      	ldr	r1, [r7, #8]
 8011b20:	4618      	mov	r0, r3
 8011b22:	f7f6 f976 	bl	8007e12 <mbedtls_mpi_sub_int>
 8011b26:	61f8      	str	r0, [r7, #28]
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d11a      	bne.n	8011b64 <mbedtls_rsa_deduce_crt+0xa0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 8011b2e:	f107 0310 	add.w	r3, r7, #16
 8011b32:	461a      	mov	r2, r3
 8011b34:	6879      	ldr	r1, [r7, #4]
 8011b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b38:	f7f8 fa09 	bl	8009f4e <mbedtls_mpi_mod_mpi>
 8011b3c:	61f8      	str	r0, [r7, #28]
 8011b3e:	69fb      	ldr	r3, [r7, #28]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d111      	bne.n	8011b68 <mbedtls_rsa_deduce_crt+0xa4>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 8011b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d010      	beq.n	8011b6c <mbedtls_rsa_deduce_crt+0xa8>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	68b9      	ldr	r1, [r7, #8]
 8011b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b50:	f7f9 f919 	bl	800ad86 <mbedtls_mpi_inv_mod>
 8011b54:	61f8      	str	r0, [r7, #28]
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	2b00      	cmp	r3, #0
    }

cleanup:
 8011b5a:	e007      	b.n	8011b6c <mbedtls_rsa_deduce_crt+0xa8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 8011b5c:	bf00      	nop
 8011b5e:	e006      	b.n	8011b6e <mbedtls_rsa_deduce_crt+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 8011b60:	bf00      	nop
 8011b62:	e004      	b.n	8011b6e <mbedtls_rsa_deduce_crt+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 8011b64:	bf00      	nop
 8011b66:	e002      	b.n	8011b6e <mbedtls_rsa_deduce_crt+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 8011b68:	bf00      	nop
 8011b6a:	e000      	b.n	8011b6e <mbedtls_rsa_deduce_crt+0xaa>
cleanup:
 8011b6c:	bf00      	nop
    mbedtls_mpi_free( &K );
 8011b6e:	f107 0310 	add.w	r3, r7, #16
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7f5 fa65 	bl	8007042 <mbedtls_mpi_free>

    return( ret );
 8011b78:	69fb      	ldr	r3, [r7, #28]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3720      	adds	r7, #32
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8011b82:	b480      	push	{r7}
 8011b84:	b085      	sub	sp, #20
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
 8011b8a:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	60fb      	str	r3, [r7, #12]
 8011b90:	e004      	b.n	8011b9c <mbedtls_zeroize+0x1a>
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	1c5a      	adds	r2, r3, #1
 8011b96:	60fa      	str	r2, [r7, #12]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	701a      	strb	r2, [r3, #0]
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	1e5a      	subs	r2, r3, #1
 8011ba0:	603a      	str	r2, [r7, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d1f5      	bne.n	8011b92 <mbedtls_zeroize+0x10>
}
 8011ba6:	bf00      	nop
 8011ba8:	bf00      	nop
 8011baa:	3714      	adds	r7, #20
 8011bac:	46bd      	mov	sp, r7
 8011bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb2:	4770      	bx	lr

08011bb4 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8011bbc:	226c      	movs	r2, #108	; 0x6c
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f00c fd2f 	bl	801e624 <memset>
}
 8011bc6:	bf00      	nop
 8011bc8:	3708      	adds	r7, #8
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b082      	sub	sp, #8
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d004      	beq.n	8011be6 <mbedtls_sha256_free+0x18>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8011bdc:	216c      	movs	r1, #108	; 0x6c
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f7ff ffcf 	bl	8011b82 <mbedtls_zeroize>
 8011be4:	e000      	b.n	8011be8 <mbedtls_sha256_free+0x1a>
        return;
 8011be6:	bf00      	nop
}
 8011be8:	3708      	adds	r7, #8
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}

08011bee <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8011bee:	b580      	push	{r7, lr}
 8011bf0:	b082      	sub	sp, #8
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	6078      	str	r0, [r7, #4]
 8011bf6:	6039      	str	r1, [r7, #0]
    *dst = *src;
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	4610      	mov	r0, r2
 8011bfe:	4619      	mov	r1, r3
 8011c00:	236c      	movs	r3, #108	; 0x6c
 8011c02:	461a      	mov	r2, r3
 8011c04:	f00c fce6 	bl	801e5d4 <memcpy>
}
 8011c08:	bf00      	nop
 8011c0a:	3708      	adds	r7, #8
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
    ctx->total[0] = 0;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2200      	movs	r2, #0
 8011c24:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d118      	bne.n	8011c5e <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	4a1d      	ldr	r2, [pc, #116]	; (8011ca4 <mbedtls_sha256_starts_ret+0x94>)
 8011c30:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	4a1c      	ldr	r2, [pc, #112]	; (8011ca8 <mbedtls_sha256_starts_ret+0x98>)
 8011c36:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	4a1c      	ldr	r2, [pc, #112]	; (8011cac <mbedtls_sha256_starts_ret+0x9c>)
 8011c3c:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	4a1b      	ldr	r2, [pc, #108]	; (8011cb0 <mbedtls_sha256_starts_ret+0xa0>)
 8011c42:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	4a1b      	ldr	r2, [pc, #108]	; (8011cb4 <mbedtls_sha256_starts_ret+0xa4>)
 8011c48:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	4a1a      	ldr	r2, [pc, #104]	; (8011cb8 <mbedtls_sha256_starts_ret+0xa8>)
 8011c4e:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	4a1a      	ldr	r2, [pc, #104]	; (8011cbc <mbedtls_sha256_starts_ret+0xac>)
 8011c54:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	4a19      	ldr	r2, [pc, #100]	; (8011cc0 <mbedtls_sha256_starts_ret+0xb0>)
 8011c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8011c5c:	e017      	b.n	8011c8e <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	4a18      	ldr	r2, [pc, #96]	; (8011cc4 <mbedtls_sha256_starts_ret+0xb4>)
 8011c62:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	4a18      	ldr	r2, [pc, #96]	; (8011cc8 <mbedtls_sha256_starts_ret+0xb8>)
 8011c68:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	4a17      	ldr	r2, [pc, #92]	; (8011ccc <mbedtls_sha256_starts_ret+0xbc>)
 8011c6e:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	4a17      	ldr	r2, [pc, #92]	; (8011cd0 <mbedtls_sha256_starts_ret+0xc0>)
 8011c74:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	4a16      	ldr	r2, [pc, #88]	; (8011cd4 <mbedtls_sha256_starts_ret+0xc4>)
 8011c7a:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	4a16      	ldr	r2, [pc, #88]	; (8011cd8 <mbedtls_sha256_starts_ret+0xc8>)
 8011c80:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	4a15      	ldr	r2, [pc, #84]	; (8011cdc <mbedtls_sha256_starts_ret+0xcc>)
 8011c86:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	4a15      	ldr	r2, [pc, #84]	; (8011ce0 <mbedtls_sha256_starts_ret+0xd0>)
 8011c8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    ctx->is224 = is224;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	683a      	ldr	r2, [r7, #0]
 8011c92:	669a      	str	r2, [r3, #104]	; 0x68

    return( 0 );
 8011c94:	2300      	movs	r3, #0
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	370c      	adds	r7, #12
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop
 8011ca4:	6a09e667 	.word	0x6a09e667
 8011ca8:	bb67ae85 	.word	0xbb67ae85
 8011cac:	3c6ef372 	.word	0x3c6ef372
 8011cb0:	a54ff53a 	.word	0xa54ff53a
 8011cb4:	510e527f 	.word	0x510e527f
 8011cb8:	9b05688c 	.word	0x9b05688c
 8011cbc:	1f83d9ab 	.word	0x1f83d9ab
 8011cc0:	5be0cd19 	.word	0x5be0cd19
 8011cc4:	c1059ed8 	.word	0xc1059ed8
 8011cc8:	367cd507 	.word	0x367cd507
 8011ccc:	3070dd17 	.word	0x3070dd17
 8011cd0:	f70e5939 	.word	0xf70e5939
 8011cd4:	ffc00b31 	.word	0xffc00b31
 8011cd8:	68581511 	.word	0x68581511
 8011cdc:	64f98fa7 	.word	0x64f98fa7
 8011ce0:	befa4fa4 	.word	0xbefa4fa4

08011ce4 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8011ce4:	b490      	push	{r4, r7}
 8011ce6:	b0ce      	sub	sp, #312	; 0x138
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8011cf2:	6018      	str	r0, [r3, #0]
 8011cf4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cf8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011cfc:	6019      	str	r1, [r3, #0]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8011cfe:	2300      	movs	r3, #0
 8011d00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011d04:	e016      	b.n	8011d34 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 8011d06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d0a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011d14:	3202      	adds	r2, #2
 8011d16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d22:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8011d2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d2e:	3301      	adds	r3, #1
 8011d30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011d34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d38:	2b07      	cmp	r3, #7
 8011d3a:	d9e4      	bls.n	8011d06 <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011d42:	e03e      	b.n	8011dc2 <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8011d44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8011d4e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011d52:	6812      	ldr	r2, [r2, #0]
 8011d54:	4413      	add	r3, r2
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	061a      	lsls	r2, r3, #24
 8011d5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d5e:	009b      	lsls	r3, r3, #2
 8011d60:	3301      	adds	r3, #1
 8011d62:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8011d66:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8011d6a:	6809      	ldr	r1, [r1, #0]
 8011d6c:	440b      	add	r3, r1
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	041b      	lsls	r3, r3, #16
 8011d72:	431a      	orrs	r2, r3
 8011d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	3302      	adds	r3, #2
 8011d7c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8011d80:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8011d84:	6809      	ldr	r1, [r1, #0]
 8011d86:	440b      	add	r3, r1
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	021b      	lsls	r3, r3, #8
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011d92:	0092      	lsls	r2, r2, #2
 8011d94:	3203      	adds	r2, #3
 8011d96:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8011d9a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8011d9e:	6809      	ldr	r1, [r1, #0]
 8011da0:	440a      	add	r2, r1
 8011da2:	7812      	ldrb	r2, [r2, #0]
 8011da4:	ea43 0102 	orr.w	r1, r3, r2
 8011da8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011dac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011db0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8011db8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011dc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011dc6:	2b0f      	cmp	r3, #15
 8011dc8:	d9bc      	bls.n	8011d44 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 8011dca:	2300      	movs	r3, #0
 8011dcc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011dd0:	f000 bcba 	b.w	8012748 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8011dd4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ddc:	69da      	ldr	r2, [r3, #28]
 8011dde:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011de6:	691b      	ldr	r3, [r3, #16]
 8011de8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011dec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011df0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011df4:	691b      	ldr	r3, [r3, #16]
 8011df6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011dfa:	4059      	eors	r1, r3
 8011dfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e04:	691b      	ldr	r3, [r3, #16]
 8011e06:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011e0a:	404b      	eors	r3, r1
 8011e0c:	441a      	add	r2, r3
 8011e0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e16:	6999      	ldr	r1, [r3, #24]
 8011e18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e20:	6918      	ldr	r0, [r3, #16]
 8011e22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e2a:	695c      	ldr	r4, [r3, #20]
 8011e2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e34:	699b      	ldr	r3, [r3, #24]
 8011e36:	4063      	eors	r3, r4
 8011e38:	4003      	ands	r3, r0
 8011e3a:	404b      	eors	r3, r1
 8011e3c:	441a      	add	r2, r3
 8011e3e:	49e0      	ldr	r1, [pc, #896]	; (80121c0 <mbedtls_internal_sha256_process+0x4dc>)
 8011e40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011e48:	441a      	add	r2, r3
 8011e4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e52:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8011e56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011e60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011e6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011e7c:	405a      	eors	r2, r3
 8011e7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011e8c:	405a      	eors	r2, r3
 8011e8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e96:	6819      	ldr	r1, [r3, #0]
 8011e98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	4019      	ands	r1, r3
 8011ea4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011eac:	6898      	ldr	r0, [r3, #8]
 8011eae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011eb6:	681c      	ldr	r4, [r3, #0]
 8011eb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	4323      	orrs	r3, r4
 8011ec4:	4003      	ands	r3, r0
 8011ec6:	430b      	orrs	r3, r1
 8011ec8:	4413      	add	r3, r2
 8011eca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011ece:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ed6:	68da      	ldr	r2, [r3, #12]
 8011ed8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011edc:	441a      	add	r2, r3
 8011ede:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ee6:	60da      	str	r2, [r3, #12]
 8011ee8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011ef0:	441a      	add	r2, r3
 8011ef2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ef6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011efa:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8011efc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f04:	699a      	ldr	r2, [r3, #24]
 8011f06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f0e:	68db      	ldr	r3, [r3, #12]
 8011f10:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011f14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011f22:	4059      	eors	r1, r3
 8011f24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011f32:	404b      	eors	r3, r1
 8011f34:	441a      	add	r2, r3
 8011f36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f3e:	6959      	ldr	r1, [r3, #20]
 8011f40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f48:	68d8      	ldr	r0, [r3, #12]
 8011f4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f52:	691c      	ldr	r4, [r3, #16]
 8011f54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f5c:	695b      	ldr	r3, [r3, #20]
 8011f5e:	4063      	eors	r3, r4
 8011f60:	4003      	ands	r3, r0
 8011f62:	404b      	eors	r3, r1
 8011f64:	441a      	add	r2, r3
 8011f66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	4994      	ldr	r1, [pc, #592]	; (80121c0 <mbedtls_internal_sha256_process+0x4dc>)
 8011f6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011f72:	441a      	add	r2, r3
 8011f74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f78:	1c59      	adds	r1, r3, #1
 8011f7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f86:	4413      	add	r3, r2
 8011f88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011f8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f94:	69db      	ldr	r3, [r3, #28]
 8011f96:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011f9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fa2:	69db      	ldr	r3, [r3, #28]
 8011fa4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011fa8:	405a      	eors	r2, r3
 8011faa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fb2:	69db      	ldr	r3, [r3, #28]
 8011fb4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011fb8:	405a      	eors	r2, r3
 8011fba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fc2:	69d9      	ldr	r1, [r3, #28]
 8011fc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	4019      	ands	r1, r3
 8011fd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fd8:	6858      	ldr	r0, [r3, #4]
 8011fda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fe2:	69dc      	ldr	r4, [r3, #28]
 8011fe4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	4323      	orrs	r3, r4
 8011ff0:	4003      	ands	r3, r0
 8011ff2:	430b      	orrs	r3, r1
 8011ff4:	4413      	add	r3, r2
 8011ff6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011ffa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012002:	689a      	ldr	r2, [r3, #8]
 8012004:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012008:	441a      	add	r2, r3
 801200a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801200e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012012:	609a      	str	r2, [r3, #8]
 8012014:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801201c:	441a      	add	r2, r3
 801201e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012026:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8012028:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801202c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012030:	695a      	ldr	r2, [r3, #20]
 8012032:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012036:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801203a:	689b      	ldr	r3, [r3, #8]
 801203c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012040:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012048:	689b      	ldr	r3, [r3, #8]
 801204a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801204e:	4059      	eors	r1, r3
 8012050:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012054:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012058:	689b      	ldr	r3, [r3, #8]
 801205a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801205e:	404b      	eors	r3, r1
 8012060:	441a      	add	r2, r3
 8012062:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801206a:	6919      	ldr	r1, [r3, #16]
 801206c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012074:	6898      	ldr	r0, [r3, #8]
 8012076:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801207a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801207e:	68dc      	ldr	r4, [r3, #12]
 8012080:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012084:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012088:	691b      	ldr	r3, [r3, #16]
 801208a:	4063      	eors	r3, r4
 801208c:	4003      	ands	r3, r0
 801208e:	404b      	eors	r3, r1
 8012090:	441a      	add	r2, r3
 8012092:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012096:	3302      	adds	r3, #2
 8012098:	4949      	ldr	r1, [pc, #292]	; (80121c0 <mbedtls_internal_sha256_process+0x4dc>)
 801209a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801209e:	441a      	add	r2, r3
 80120a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80120a4:	1c99      	adds	r1, r3, #2
 80120a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80120ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80120b2:	4413      	add	r3, r2
 80120b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80120b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120c0:	699b      	ldr	r3, [r3, #24]
 80120c2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80120c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120ce:	699b      	ldr	r3, [r3, #24]
 80120d0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80120d4:	405a      	eors	r2, r3
 80120d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120de:	699b      	ldr	r3, [r3, #24]
 80120e0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80120e4:	405a      	eors	r2, r3
 80120e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120ee:	6999      	ldr	r1, [r3, #24]
 80120f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120f8:	69db      	ldr	r3, [r3, #28]
 80120fa:	4019      	ands	r1, r3
 80120fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012104:	6818      	ldr	r0, [r3, #0]
 8012106:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801210a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801210e:	699c      	ldr	r4, [r3, #24]
 8012110:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012118:	69db      	ldr	r3, [r3, #28]
 801211a:	4323      	orrs	r3, r4
 801211c:	4003      	ands	r3, r0
 801211e:	430b      	orrs	r3, r1
 8012120:	4413      	add	r3, r2
 8012122:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012126:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801212a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801212e:	685a      	ldr	r2, [r3, #4]
 8012130:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012134:	441a      	add	r2, r3
 8012136:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801213a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801213e:	605a      	str	r2, [r3, #4]
 8012140:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012148:	441a      	add	r2, r3
 801214a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801214e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012152:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8012154:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801215c:	691a      	ldr	r2, [r3, #16]
 801215e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801216c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801217a:	4059      	eors	r1, r3
 801217c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	ea4f 6373 	mov.w	r3, r3, ror #25
 801218a:	404b      	eors	r3, r1
 801218c:	441a      	add	r2, r3
 801218e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012196:	68d9      	ldr	r1, [r3, #12]
 8012198:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801219c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80121a0:	6858      	ldr	r0, [r3, #4]
 80121a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80121aa:	689c      	ldr	r4, [r3, #8]
 80121ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	4063      	eors	r3, r4
 80121b8:	4003      	ands	r3, r0
 80121ba:	404b      	eors	r3, r1
 80121bc:	441a      	add	r2, r3
 80121be:	e001      	b.n	80121c4 <mbedtls_internal_sha256_process+0x4e0>
 80121c0:	08025864 	.word	0x08025864
 80121c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80121c8:	3303      	adds	r3, #3
 80121ca:	49e0      	ldr	r1, [pc, #896]	; (801254c <mbedtls_internal_sha256_process+0x868>)
 80121cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80121d0:	441a      	add	r2, r3
 80121d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80121d6:	1cd9      	adds	r1, r3, #3
 80121d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80121e4:	4413      	add	r3, r2
 80121e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80121ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80121f2:	695b      	ldr	r3, [r3, #20]
 80121f4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80121f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012200:	695b      	ldr	r3, [r3, #20]
 8012202:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012206:	405a      	eors	r2, r3
 8012208:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801220c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012210:	695b      	ldr	r3, [r3, #20]
 8012212:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012216:	405a      	eors	r2, r3
 8012218:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801221c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012220:	6959      	ldr	r1, [r3, #20]
 8012222:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801222a:	699b      	ldr	r3, [r3, #24]
 801222c:	4019      	ands	r1, r3
 801222e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012236:	69d8      	ldr	r0, [r3, #28]
 8012238:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801223c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012240:	695c      	ldr	r4, [r3, #20]
 8012242:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012246:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801224a:	699b      	ldr	r3, [r3, #24]
 801224c:	4323      	orrs	r3, r4
 801224e:	4003      	ands	r3, r0
 8012250:	430b      	orrs	r3, r1
 8012252:	4413      	add	r3, r2
 8012254:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012258:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801225c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012266:	441a      	add	r2, r3
 8012268:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801226c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012270:	601a      	str	r2, [r3, #0]
 8012272:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801227a:	441a      	add	r2, r3
 801227c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012284:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8012286:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801228a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801228e:	68da      	ldr	r2, [r3, #12]
 8012290:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801229e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80122ac:	4059      	eors	r1, r3
 80122ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80122bc:	404b      	eors	r3, r1
 80122be:	441a      	add	r2, r3
 80122c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122c8:	6899      	ldr	r1, [r3, #8]
 80122ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122d2:	6818      	ldr	r0, [r3, #0]
 80122d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122dc:	685c      	ldr	r4, [r3, #4]
 80122de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122e6:	689b      	ldr	r3, [r3, #8]
 80122e8:	4063      	eors	r3, r4
 80122ea:	4003      	ands	r3, r0
 80122ec:	404b      	eors	r3, r1
 80122ee:	441a      	add	r2, r3
 80122f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80122f4:	3304      	adds	r3, #4
 80122f6:	4995      	ldr	r1, [pc, #596]	; (801254c <mbedtls_internal_sha256_process+0x868>)
 80122f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80122fc:	441a      	add	r2, r3
 80122fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012302:	1d19      	adds	r1, r3, #4
 8012304:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012308:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801230c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012310:	4413      	add	r3, r2
 8012312:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012316:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801231a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801231e:	691b      	ldr	r3, [r3, #16]
 8012320:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012324:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801232c:	691b      	ldr	r3, [r3, #16]
 801232e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012332:	405a      	eors	r2, r3
 8012334:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801233c:	691b      	ldr	r3, [r3, #16]
 801233e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012342:	405a      	eors	r2, r3
 8012344:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801234c:	6919      	ldr	r1, [r3, #16]
 801234e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012352:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012356:	695b      	ldr	r3, [r3, #20]
 8012358:	4019      	ands	r1, r3
 801235a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801235e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012362:	6998      	ldr	r0, [r3, #24]
 8012364:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012368:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801236c:	691c      	ldr	r4, [r3, #16]
 801236e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012372:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012376:	695b      	ldr	r3, [r3, #20]
 8012378:	4323      	orrs	r3, r4
 801237a:	4003      	ands	r3, r0
 801237c:	430b      	orrs	r3, r1
 801237e:	4413      	add	r3, r2
 8012380:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012384:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801238c:	69da      	ldr	r2, [r3, #28]
 801238e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012392:	441a      	add	r2, r3
 8012394:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801239c:	61da      	str	r2, [r3, #28]
 801239e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80123a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80123a6:	441a      	add	r2, r3
 80123a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80123b0:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80123b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80123ba:	689a      	ldr	r2, [r3, #8]
 80123bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80123c4:	69db      	ldr	r3, [r3, #28]
 80123c6:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80123ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80123d2:	69db      	ldr	r3, [r3, #28]
 80123d4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80123d8:	4059      	eors	r1, r3
 80123da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80123e2:	69db      	ldr	r3, [r3, #28]
 80123e4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80123e8:	404b      	eors	r3, r1
 80123ea:	441a      	add	r2, r3
 80123ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80123f4:	6859      	ldr	r1, [r3, #4]
 80123f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80123fe:	69d8      	ldr	r0, [r3, #28]
 8012400:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012408:	681c      	ldr	r4, [r3, #0]
 801240a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801240e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	4063      	eors	r3, r4
 8012416:	4003      	ands	r3, r0
 8012418:	404b      	eors	r3, r1
 801241a:	441a      	add	r2, r3
 801241c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012420:	3305      	adds	r3, #5
 8012422:	494a      	ldr	r1, [pc, #296]	; (801254c <mbedtls_internal_sha256_process+0x868>)
 8012424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012428:	441a      	add	r2, r3
 801242a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801242e:	1d59      	adds	r1, r3, #5
 8012430:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012434:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801243c:	4413      	add	r3, r2
 801243e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012442:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801244a:	68db      	ldr	r3, [r3, #12]
 801244c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012450:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	ea4f 3373 	mov.w	r3, r3, ror #13
 801245e:	405a      	eors	r2, r3
 8012460:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801246e:	405a      	eors	r2, r3
 8012470:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012478:	68d9      	ldr	r1, [r3, #12]
 801247a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801247e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012482:	691b      	ldr	r3, [r3, #16]
 8012484:	4019      	ands	r1, r3
 8012486:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801248a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801248e:	6958      	ldr	r0, [r3, #20]
 8012490:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012498:	68dc      	ldr	r4, [r3, #12]
 801249a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801249e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124a2:	691b      	ldr	r3, [r3, #16]
 80124a4:	4323      	orrs	r3, r4
 80124a6:	4003      	ands	r3, r0
 80124a8:	430b      	orrs	r3, r1
 80124aa:	4413      	add	r3, r2
 80124ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80124b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124b8:	699a      	ldr	r2, [r3, #24]
 80124ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80124be:	441a      	add	r2, r3
 80124c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124c8:	619a      	str	r2, [r3, #24]
 80124ca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80124ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124d2:	441a      	add	r2, r3
 80124d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124dc:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80124de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124e6:	685a      	ldr	r2, [r3, #4]
 80124e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124f0:	699b      	ldr	r3, [r3, #24]
 80124f2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80124f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124fe:	699b      	ldr	r3, [r3, #24]
 8012500:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012504:	4059      	eors	r1, r3
 8012506:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801250a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801250e:	699b      	ldr	r3, [r3, #24]
 8012510:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012514:	404b      	eors	r3, r1
 8012516:	441a      	add	r2, r3
 8012518:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801251c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012520:	6819      	ldr	r1, [r3, #0]
 8012522:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801252a:	6998      	ldr	r0, [r3, #24]
 801252c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012534:	69dc      	ldr	r4, [r3, #28]
 8012536:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801253a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	4063      	eors	r3, r4
 8012542:	4003      	ands	r3, r0
 8012544:	404b      	eors	r3, r1
 8012546:	441a      	add	r2, r3
 8012548:	e002      	b.n	8012550 <mbedtls_internal_sha256_process+0x86c>
 801254a:	bf00      	nop
 801254c:	08025864 	.word	0x08025864
 8012550:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012554:	3306      	adds	r3, #6
 8012556:	4981      	ldr	r1, [pc, #516]	; (801275c <mbedtls_internal_sha256_process+0xa78>)
 8012558:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801255c:	441a      	add	r2, r3
 801255e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012562:	1d99      	adds	r1, r3, #6
 8012564:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012568:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801256c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012570:	4413      	add	r3, r2
 8012572:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012576:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801257a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801257e:	689b      	ldr	r3, [r3, #8]
 8012580:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012584:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012588:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801258c:	689b      	ldr	r3, [r3, #8]
 801258e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012592:	405a      	eors	r2, r3
 8012594:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801259c:	689b      	ldr	r3, [r3, #8]
 801259e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80125a2:	405a      	eors	r2, r3
 80125a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80125ac:	6899      	ldr	r1, [r3, #8]
 80125ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	4019      	ands	r1, r3
 80125ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80125c2:	6918      	ldr	r0, [r3, #16]
 80125c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80125cc:	689c      	ldr	r4, [r3, #8]
 80125ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	4323      	orrs	r3, r4
 80125da:	4003      	ands	r3, r0
 80125dc:	430b      	orrs	r3, r1
 80125de:	4413      	add	r3, r2
 80125e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80125e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80125ec:	695a      	ldr	r2, [r3, #20]
 80125ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80125f2:	441a      	add	r2, r3
 80125f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80125fc:	615a      	str	r2, [r3, #20]
 80125fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012606:	441a      	add	r2, r3
 8012608:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801260c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012610:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8012612:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012624:	695b      	ldr	r3, [r3, #20]
 8012626:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801262a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801262e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012632:	695b      	ldr	r3, [r3, #20]
 8012634:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012638:	4059      	eors	r1, r3
 801263a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801263e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012642:	695b      	ldr	r3, [r3, #20]
 8012644:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012648:	404b      	eors	r3, r1
 801264a:	441a      	add	r2, r3
 801264c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012650:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012654:	69d9      	ldr	r1, [r3, #28]
 8012656:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801265a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801265e:	6958      	ldr	r0, [r3, #20]
 8012660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012668:	699c      	ldr	r4, [r3, #24]
 801266a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801266e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012672:	69db      	ldr	r3, [r3, #28]
 8012674:	4063      	eors	r3, r4
 8012676:	4003      	ands	r3, r0
 8012678:	404b      	eors	r3, r1
 801267a:	441a      	add	r2, r3
 801267c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012680:	3307      	adds	r3, #7
 8012682:	4936      	ldr	r1, [pc, #216]	; (801275c <mbedtls_internal_sha256_process+0xa78>)
 8012684:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012688:	441a      	add	r2, r3
 801268a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801268e:	1dd9      	adds	r1, r3, #7
 8012690:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012694:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012698:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801269c:	4413      	add	r3, r2
 801269e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80126a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80126b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	ea4f 3373 	mov.w	r3, r3, ror #13
 80126be:	405a      	eors	r2, r3
 80126c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80126ce:	405a      	eors	r2, r3
 80126d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126d8:	6859      	ldr	r1, [r3, #4]
 80126da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126e2:	689b      	ldr	r3, [r3, #8]
 80126e4:	4019      	ands	r1, r3
 80126e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126ee:	68d8      	ldr	r0, [r3, #12]
 80126f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126f8:	685c      	ldr	r4, [r3, #4]
 80126fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012702:	689b      	ldr	r3, [r3, #8]
 8012704:	4323      	orrs	r3, r4
 8012706:	4003      	ands	r3, r0
 8012708:	430b      	orrs	r3, r1
 801270a:	4413      	add	r3, r2
 801270c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012710:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012718:	691a      	ldr	r2, [r3, #16]
 801271a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801271e:	441a      	add	r2, r3
 8012720:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012728:	611a      	str	r2, [r3, #16]
 801272a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801272e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012732:	441a      	add	r2, r3
 8012734:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801273c:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 801273e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012742:	3308      	adds	r3, #8
 8012744:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8012748:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801274c:	2b0f      	cmp	r3, #15
 801274e:	f67f ab41 	bls.w	8011dd4 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 8012752:	2310      	movs	r3, #16
 8012754:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8012758:	f000 bfd5 	b.w	8013706 <mbedtls_internal_sha256_process+0x1a22>
 801275c:	08025864 	.word	0x08025864
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8012760:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012768:	69da      	ldr	r2, [r3, #28]
 801276a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801276e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012772:	691b      	ldr	r3, [r3, #16]
 8012774:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012778:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801277c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012780:	691b      	ldr	r3, [r3, #16]
 8012782:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012786:	4059      	eors	r1, r3
 8012788:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801278c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012790:	691b      	ldr	r3, [r3, #16]
 8012792:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012796:	404b      	eors	r3, r1
 8012798:	441a      	add	r2, r3
 801279a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801279e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80127a2:	6999      	ldr	r1, [r3, #24]
 80127a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80127ac:	6918      	ldr	r0, [r3, #16]
 80127ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80127b6:	695c      	ldr	r4, [r3, #20]
 80127b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80127c0:	699b      	ldr	r3, [r3, #24]
 80127c2:	4063      	eors	r3, r4
 80127c4:	4003      	ands	r3, r0
 80127c6:	404b      	eors	r3, r1
 80127c8:	441a      	add	r2, r3
 80127ca:	49ec      	ldr	r1, [pc, #944]	; (8012b7c <mbedtls_internal_sha256_process+0xe98>)
 80127cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80127d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80127d4:	441a      	add	r2, r3
 80127d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80127da:	1e99      	subs	r1, r3, #2
 80127dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80127e8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80127ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80127f0:	1e98      	subs	r0, r3, #2
 80127f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80127fe:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012802:	4059      	eors	r1, r3
 8012804:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012808:	1e98      	subs	r0, r3, #2
 801280a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801280e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012812:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012816:	0a9b      	lsrs	r3, r3, #10
 8012818:	4059      	eors	r1, r3
 801281a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801281e:	1fd8      	subs	r0, r3, #7
 8012820:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012824:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012828:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801282c:	4419      	add	r1, r3
 801282e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012832:	f1a3 000f 	sub.w	r0, r3, #15
 8012836:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801283a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801283e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012842:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012846:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801284a:	f1a3 040f 	sub.w	r4, r3, #15
 801284e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012852:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012856:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801285a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801285e:	4058      	eors	r0, r3
 8012860:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012864:	f1a3 040f 	sub.w	r4, r3, #15
 8012868:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801286c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012870:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012874:	08db      	lsrs	r3, r3, #3
 8012876:	4043      	eors	r3, r0
 8012878:	4419      	add	r1, r3
 801287a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801287e:	f1a3 0010 	sub.w	r0, r3, #16
 8012882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012886:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801288a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801288e:	18c8      	adds	r0, r1, r3
 8012890:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012894:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012898:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 801289c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 80128a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80128a8:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80128ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128b0:	4413      	add	r3, r2
 80128b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80128b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80128c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	ea4f 3373 	mov.w	r3, r3, ror #13
 80128d2:	405a      	eors	r2, r3
 80128d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80128e2:	405a      	eors	r2, r3
 80128e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128ec:	6819      	ldr	r1, [r3, #0]
 80128ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	4019      	ands	r1, r3
 80128fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012902:	6898      	ldr	r0, [r3, #8]
 8012904:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801290c:	681c      	ldr	r4, [r3, #0]
 801290e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	4323      	orrs	r3, r4
 801291a:	4003      	ands	r3, r0
 801291c:	430b      	orrs	r3, r1
 801291e:	4413      	add	r3, r2
 8012920:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012924:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801292c:	68da      	ldr	r2, [r3, #12]
 801292e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012932:	441a      	add	r2, r3
 8012934:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801293c:	60da      	str	r2, [r3, #12]
 801293e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012946:	441a      	add	r2, r3
 8012948:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801294c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012950:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8012952:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012956:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801295a:	699a      	ldr	r2, [r3, #24]
 801295c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801296a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801296e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012978:	4059      	eors	r1, r3
 801297a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801297e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012988:	404b      	eors	r3, r1
 801298a:	441a      	add	r2, r3
 801298c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012994:	6959      	ldr	r1, [r3, #20]
 8012996:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801299a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801299e:	68d8      	ldr	r0, [r3, #12]
 80129a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80129a8:	691c      	ldr	r4, [r3, #16]
 80129aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80129b2:	695b      	ldr	r3, [r3, #20]
 80129b4:	4063      	eors	r3, r4
 80129b6:	4003      	ands	r3, r0
 80129b8:	404b      	eors	r3, r1
 80129ba:	441a      	add	r2, r3
 80129bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129c0:	3301      	adds	r3, #1
 80129c2:	496e      	ldr	r1, [pc, #440]	; (8012b7c <mbedtls_internal_sha256_process+0xe98>)
 80129c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80129c8:	441a      	add	r2, r3
 80129ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129ce:	1e59      	subs	r1, r3, #1
 80129d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80129dc:	ea4f 4173 	mov.w	r1, r3, ror #17
 80129e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129e4:	1e58      	subs	r0, r3, #1
 80129e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80129f2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80129f6:	4059      	eors	r1, r3
 80129f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129fc:	1e58      	subs	r0, r3, #1
 80129fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012a0a:	0a9b      	lsrs	r3, r3, #10
 8012a0c:	4059      	eors	r1, r3
 8012a0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a12:	1f98      	subs	r0, r3, #6
 8012a14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012a20:	4419      	add	r1, r3
 8012a22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a26:	f1a3 000e 	sub.w	r0, r3, #14
 8012a2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012a36:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012a3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a3e:	f1a3 040e 	sub.w	r4, r3, #14
 8012a42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a4a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012a4e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012a52:	4058      	eors	r0, r3
 8012a54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a58:	f1a3 040e 	sub.w	r4, r3, #14
 8012a5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a64:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012a68:	08db      	lsrs	r3, r3, #3
 8012a6a:	4043      	eors	r3, r0
 8012a6c:	18c8      	adds	r0, r1, r3
 8012a6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a72:	f1a3 010f 	sub.w	r1, r3, #15
 8012a76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a7e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012a82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a86:	3301      	adds	r3, #1
 8012a88:	4408      	add	r0, r1
 8012a8a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012a8e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012a92:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012a96:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012a9a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012a9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012aa2:	4413      	add	r3, r2
 8012aa4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012aa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ab0:	69db      	ldr	r3, [r3, #28]
 8012ab2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012ab6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012abe:	69db      	ldr	r3, [r3, #28]
 8012ac0:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012ac4:	405a      	eors	r2, r3
 8012ac6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ace:	69db      	ldr	r3, [r3, #28]
 8012ad0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012ad4:	405a      	eors	r2, r3
 8012ad6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ade:	69d9      	ldr	r1, [r3, #28]
 8012ae0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	4019      	ands	r1, r3
 8012aec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012af4:	6858      	ldr	r0, [r3, #4]
 8012af6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012afe:	69dc      	ldr	r4, [r3, #28]
 8012b00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	4323      	orrs	r3, r4
 8012b0c:	4003      	ands	r3, r0
 8012b0e:	430b      	orrs	r3, r1
 8012b10:	4413      	add	r3, r2
 8012b12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012b16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b1e:	689a      	ldr	r2, [r3, #8]
 8012b20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012b24:	441a      	add	r2, r3
 8012b26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b2e:	609a      	str	r2, [r3, #8]
 8012b30:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012b38:	441a      	add	r2, r3
 8012b3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b42:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8012b44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b4c:	695a      	ldr	r2, [r3, #20]
 8012b4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b56:	689b      	ldr	r3, [r3, #8]
 8012b58:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012b5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b64:	689b      	ldr	r3, [r3, #8]
 8012b66:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012b6a:	4059      	eors	r1, r3
 8012b6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b74:	689b      	ldr	r3, [r3, #8]
 8012b76:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012b7a:	e001      	b.n	8012b80 <mbedtls_internal_sha256_process+0xe9c>
 8012b7c:	08025864 	.word	0x08025864
 8012b80:	404b      	eors	r3, r1
 8012b82:	441a      	add	r2, r3
 8012b84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b8c:	6919      	ldr	r1, [r3, #16]
 8012b8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b96:	6898      	ldr	r0, [r3, #8]
 8012b98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ba0:	68dc      	ldr	r4, [r3, #12]
 8012ba2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ba6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012baa:	691b      	ldr	r3, [r3, #16]
 8012bac:	4063      	eors	r3, r4
 8012bae:	4003      	ands	r3, r0
 8012bb0:	404b      	eors	r3, r1
 8012bb2:	441a      	add	r2, r3
 8012bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012bb8:	3302      	adds	r3, #2
 8012bba:	49ec      	ldr	r1, [pc, #944]	; (8012f6c <mbedtls_internal_sha256_process+0x1288>)
 8012bbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012bc0:	441a      	add	r2, r3
 8012bc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012bc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bca:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012bce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012bd2:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012bd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012bda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bde:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8012be2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012be6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012bea:	4059      	eors	r1, r3
 8012bec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012bf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bf4:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8012bf8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012bfc:	0a9b      	lsrs	r3, r3, #10
 8012bfe:	4059      	eors	r1, r3
 8012c00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c04:	1f58      	subs	r0, r3, #5
 8012c06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012c12:	4419      	add	r1, r3
 8012c14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c18:	f1a3 000d 	sub.w	r0, r3, #13
 8012c1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012c28:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012c2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c30:	f1a3 040d 	sub.w	r4, r3, #13
 8012c34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c3c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012c40:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012c44:	4058      	eors	r0, r3
 8012c46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c4a:	f1a3 040d 	sub.w	r4, r3, #13
 8012c4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012c5a:	08db      	lsrs	r3, r3, #3
 8012c5c:	4043      	eors	r3, r0
 8012c5e:	18c8      	adds	r0, r1, r3
 8012c60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c64:	f1a3 010e 	sub.w	r1, r3, #14
 8012c68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c70:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012c74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c78:	3302      	adds	r3, #2
 8012c7a:	4408      	add	r0, r1
 8012c7c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012c80:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012c84:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012c88:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012c8c:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012c90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012c94:	4413      	add	r3, r2
 8012c96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012c9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ca2:	699b      	ldr	r3, [r3, #24]
 8012ca4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012ca8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cb0:	699b      	ldr	r3, [r3, #24]
 8012cb2:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012cb6:	405a      	eors	r2, r3
 8012cb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cc0:	699b      	ldr	r3, [r3, #24]
 8012cc2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012cc6:	405a      	eors	r2, r3
 8012cc8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ccc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cd0:	6999      	ldr	r1, [r3, #24]
 8012cd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cda:	69db      	ldr	r3, [r3, #28]
 8012cdc:	4019      	ands	r1, r3
 8012cde:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ce6:	6818      	ldr	r0, [r3, #0]
 8012ce8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cf0:	699c      	ldr	r4, [r3, #24]
 8012cf2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cfa:	69db      	ldr	r3, [r3, #28]
 8012cfc:	4323      	orrs	r3, r4
 8012cfe:	4003      	ands	r3, r0
 8012d00:	430b      	orrs	r3, r1
 8012d02:	4413      	add	r3, r2
 8012d04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012d08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d10:	685a      	ldr	r2, [r3, #4]
 8012d12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012d16:	441a      	add	r2, r3
 8012d18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d20:	605a      	str	r2, [r3, #4]
 8012d22:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012d2a:	441a      	add	r2, r3
 8012d2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d34:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8012d36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d3e:	691a      	ldr	r2, [r3, #16]
 8012d40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012d4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012d5c:	4059      	eors	r1, r3
 8012d5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012d6c:	404b      	eors	r3, r1
 8012d6e:	441a      	add	r2, r3
 8012d70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d78:	68d9      	ldr	r1, [r3, #12]
 8012d7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d82:	6858      	ldr	r0, [r3, #4]
 8012d84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d8c:	689c      	ldr	r4, [r3, #8]
 8012d8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d96:	68db      	ldr	r3, [r3, #12]
 8012d98:	4063      	eors	r3, r4
 8012d9a:	4003      	ands	r3, r0
 8012d9c:	404b      	eors	r3, r1
 8012d9e:	441a      	add	r2, r3
 8012da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012da4:	3303      	adds	r3, #3
 8012da6:	4971      	ldr	r1, [pc, #452]	; (8012f6c <mbedtls_internal_sha256_process+0x1288>)
 8012da8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012dac:	441a      	add	r2, r3
 8012dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012db2:	1c59      	adds	r1, r3, #1
 8012db4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012db8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012dc0:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012dc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012dc8:	1c58      	adds	r0, r3, #1
 8012dca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012dce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dd2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012dd6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012dda:	4059      	eors	r1, r3
 8012ddc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012de0:	1c58      	adds	r0, r3, #1
 8012de2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012de6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012dee:	0a9b      	lsrs	r3, r3, #10
 8012df0:	4059      	eors	r1, r3
 8012df2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012df6:	1f18      	subs	r0, r3, #4
 8012df8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012dfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012e04:	4419      	add	r1, r3
 8012e06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012e0a:	f1a3 000c 	sub.w	r0, r3, #12
 8012e0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012e1a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012e1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012e22:	f1a3 040c 	sub.w	r4, r3, #12
 8012e26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012e32:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012e36:	4058      	eors	r0, r3
 8012e38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012e3c:	f1a3 040c 	sub.w	r4, r3, #12
 8012e40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e48:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012e4c:	08db      	lsrs	r3, r3, #3
 8012e4e:	4043      	eors	r3, r0
 8012e50:	18c8      	adds	r0, r1, r3
 8012e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012e56:	f1a3 010d 	sub.w	r1, r3, #13
 8012e5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e62:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012e66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012e6a:	3303      	adds	r3, #3
 8012e6c:	4408      	add	r0, r1
 8012e6e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012e72:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012e76:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012e7a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012e7e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012e82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012e86:	4413      	add	r3, r2
 8012e88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012e8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e94:	695b      	ldr	r3, [r3, #20]
 8012e96:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012e9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ea2:	695b      	ldr	r3, [r3, #20]
 8012ea4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012ea8:	405a      	eors	r2, r3
 8012eaa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012eb2:	695b      	ldr	r3, [r3, #20]
 8012eb4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012eb8:	405a      	eors	r2, r3
 8012eba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ec2:	6959      	ldr	r1, [r3, #20]
 8012ec4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ecc:	699b      	ldr	r3, [r3, #24]
 8012ece:	4019      	ands	r1, r3
 8012ed0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ed8:	69d8      	ldr	r0, [r3, #28]
 8012eda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ee2:	695c      	ldr	r4, [r3, #20]
 8012ee4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012eec:	699b      	ldr	r3, [r3, #24]
 8012eee:	4323      	orrs	r3, r4
 8012ef0:	4003      	ands	r3, r0
 8012ef2:	430b      	orrs	r3, r1
 8012ef4:	4413      	add	r3, r2
 8012ef6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012efa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012efe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012f08:	441a      	add	r2, r3
 8012f0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f12:	601a      	str	r2, [r3, #0]
 8012f14:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f1c:	441a      	add	r2, r3
 8012f1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f26:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8012f28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f30:	68da      	ldr	r2, [r3, #12]
 8012f32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012f40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012f4e:	4059      	eors	r1, r3
 8012f50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012f5e:	404b      	eors	r3, r1
 8012f60:	441a      	add	r2, r3
 8012f62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f6a:	e001      	b.n	8012f70 <mbedtls_internal_sha256_process+0x128c>
 8012f6c:	08025864 	.word	0x08025864
 8012f70:	6899      	ldr	r1, [r3, #8]
 8012f72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f7a:	6818      	ldr	r0, [r3, #0]
 8012f7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f84:	685c      	ldr	r4, [r3, #4]
 8012f86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f8e:	689b      	ldr	r3, [r3, #8]
 8012f90:	4063      	eors	r3, r4
 8012f92:	4003      	ands	r3, r0
 8012f94:	404b      	eors	r3, r1
 8012f96:	441a      	add	r2, r3
 8012f98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f9c:	3304      	adds	r3, #4
 8012f9e:	49ec      	ldr	r1, [pc, #944]	; (8013350 <mbedtls_internal_sha256_process+0x166c>)
 8012fa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012fa4:	441a      	add	r2, r3
 8012fa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012faa:	1c99      	adds	r1, r3, #2
 8012fac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012fb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012fb8:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012fbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012fc0:	1c98      	adds	r0, r3, #2
 8012fc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012fca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012fce:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012fd2:	4059      	eors	r1, r3
 8012fd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012fd8:	1c98      	adds	r0, r3, #2
 8012fda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012fe2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012fe6:	0a9b      	lsrs	r3, r3, #10
 8012fe8:	4059      	eors	r1, r3
 8012fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012fee:	1ed8      	subs	r0, r3, #3
 8012ff0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ff4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ff8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012ffc:	4419      	add	r1, r3
 8012ffe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013002:	f1a3 000b 	sub.w	r0, r3, #11
 8013006:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801300a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801300e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013012:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8013016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801301a:	f1a3 040b 	sub.w	r4, r3, #11
 801301e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013022:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013026:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801302a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801302e:	4058      	eors	r0, r3
 8013030:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013034:	f1a3 040b 	sub.w	r4, r3, #11
 8013038:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801303c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013040:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013044:	08db      	lsrs	r3, r3, #3
 8013046:	4043      	eors	r3, r0
 8013048:	18c8      	adds	r0, r1, r3
 801304a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801304e:	f1a3 010c 	sub.w	r1, r3, #12
 8013052:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013056:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801305a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801305e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013062:	3304      	adds	r3, #4
 8013064:	4408      	add	r0, r1
 8013066:	f507 719c 	add.w	r1, r7, #312	; 0x138
 801306a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801306e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8013072:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013076:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801307a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801307e:	4413      	add	r3, r2
 8013080:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8013084:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801308c:	691b      	ldr	r3, [r3, #16]
 801308e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013092:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801309a:	691b      	ldr	r3, [r3, #16]
 801309c:	ea4f 3373 	mov.w	r3, r3, ror #13
 80130a0:	405a      	eors	r2, r3
 80130a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130aa:	691b      	ldr	r3, [r3, #16]
 80130ac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80130b0:	405a      	eors	r2, r3
 80130b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130ba:	6919      	ldr	r1, [r3, #16]
 80130bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130c4:	695b      	ldr	r3, [r3, #20]
 80130c6:	4019      	ands	r1, r3
 80130c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130d0:	6998      	ldr	r0, [r3, #24]
 80130d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130da:	691c      	ldr	r4, [r3, #16]
 80130dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130e4:	695b      	ldr	r3, [r3, #20]
 80130e6:	4323      	orrs	r3, r4
 80130e8:	4003      	ands	r3, r0
 80130ea:	430b      	orrs	r3, r1
 80130ec:	4413      	add	r3, r2
 80130ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80130f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130fa:	69da      	ldr	r2, [r3, #28]
 80130fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013100:	441a      	add	r2, r3
 8013102:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801310a:	61da      	str	r2, [r3, #28]
 801310c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8013110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013114:	441a      	add	r2, r3
 8013116:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801311a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801311e:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8013120:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013128:	689a      	ldr	r2, [r3, #8]
 801312a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801312e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013132:	69db      	ldr	r3, [r3, #28]
 8013134:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013138:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801313c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013140:	69db      	ldr	r3, [r3, #28]
 8013142:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013146:	4059      	eors	r1, r3
 8013148:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801314c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013150:	69db      	ldr	r3, [r3, #28]
 8013152:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013156:	404b      	eors	r3, r1
 8013158:	441a      	add	r2, r3
 801315a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801315e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013162:	6859      	ldr	r1, [r3, #4]
 8013164:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801316c:	69d8      	ldr	r0, [r3, #28]
 801316e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013172:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013176:	681c      	ldr	r4, [r3, #0]
 8013178:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801317c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	4063      	eors	r3, r4
 8013184:	4003      	ands	r3, r0
 8013186:	404b      	eors	r3, r1
 8013188:	441a      	add	r2, r3
 801318a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801318e:	3305      	adds	r3, #5
 8013190:	496f      	ldr	r1, [pc, #444]	; (8013350 <mbedtls_internal_sha256_process+0x166c>)
 8013192:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013196:	441a      	add	r2, r3
 8013198:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801319c:	1cd9      	adds	r1, r3, #3
 801319e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80131a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80131aa:	ea4f 4173 	mov.w	r1, r3, ror #17
 80131ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80131b2:	1cd8      	adds	r0, r3, #3
 80131b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80131bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80131c0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80131c4:	4059      	eors	r1, r3
 80131c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80131ca:	1cd8      	adds	r0, r3, #3
 80131cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80131d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80131d8:	0a9b      	lsrs	r3, r3, #10
 80131da:	4059      	eors	r1, r3
 80131dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80131e0:	1e98      	subs	r0, r3, #2
 80131e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80131ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80131ee:	4419      	add	r1, r3
 80131f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80131f4:	f1a3 000a 	sub.w	r0, r3, #10
 80131f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80131fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013200:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013204:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8013208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801320c:	f1a3 040a 	sub.w	r4, r3, #10
 8013210:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013214:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013218:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801321c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8013220:	4058      	eors	r0, r3
 8013222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013226:	f1a3 040a 	sub.w	r4, r3, #10
 801322a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801322e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013232:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013236:	08db      	lsrs	r3, r3, #3
 8013238:	4043      	eors	r3, r0
 801323a:	18c8      	adds	r0, r1, r3
 801323c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013240:	f1a3 010b 	sub.w	r1, r3, #11
 8013244:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013248:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801324c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8013250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013254:	3305      	adds	r3, #5
 8013256:	4408      	add	r0, r1
 8013258:	f507 719c 	add.w	r1, r7, #312	; 0x138
 801325c:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8013260:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8013264:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013268:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801326c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013270:	4413      	add	r3, r2
 8013272:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8013276:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801327a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013284:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801328c:	68db      	ldr	r3, [r3, #12]
 801328e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013292:	405a      	eors	r2, r3
 8013294:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013298:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801329c:	68db      	ldr	r3, [r3, #12]
 801329e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80132a2:	405a      	eors	r2, r3
 80132a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80132a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132ac:	68d9      	ldr	r1, [r3, #12]
 80132ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80132b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132b6:	691b      	ldr	r3, [r3, #16]
 80132b8:	4019      	ands	r1, r3
 80132ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80132be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132c2:	6958      	ldr	r0, [r3, #20]
 80132c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80132c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132cc:	68dc      	ldr	r4, [r3, #12]
 80132ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80132d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132d6:	691b      	ldr	r3, [r3, #16]
 80132d8:	4323      	orrs	r3, r4
 80132da:	4003      	ands	r3, r0
 80132dc:	430b      	orrs	r3, r1
 80132de:	4413      	add	r3, r2
 80132e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80132e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80132e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132ec:	699a      	ldr	r2, [r3, #24]
 80132ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80132f2:	441a      	add	r2, r3
 80132f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80132f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132fc:	619a      	str	r2, [r3, #24]
 80132fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8013302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013306:	441a      	add	r2, r3
 8013308:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801330c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013310:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8013312:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801331a:	685a      	ldr	r2, [r3, #4]
 801331c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013324:	699b      	ldr	r3, [r3, #24]
 8013326:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801332a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801332e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013332:	699b      	ldr	r3, [r3, #24]
 8013334:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013338:	4059      	eors	r1, r3
 801333a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801333e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013342:	699b      	ldr	r3, [r3, #24]
 8013344:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013348:	404b      	eors	r3, r1
 801334a:	441a      	add	r2, r3
 801334c:	e002      	b.n	8013354 <mbedtls_internal_sha256_process+0x1670>
 801334e:	bf00      	nop
 8013350:	08025864 	.word	0x08025864
 8013354:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801335c:	6819      	ldr	r1, [r3, #0]
 801335e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013366:	6998      	ldr	r0, [r3, #24]
 8013368:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801336c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013370:	69dc      	ldr	r4, [r3, #28]
 8013372:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013376:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	4063      	eors	r3, r4
 801337e:	4003      	ands	r3, r0
 8013380:	404b      	eors	r3, r1
 8013382:	441a      	add	r2, r3
 8013384:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013388:	3306      	adds	r3, #6
 801338a:	49e3      	ldr	r1, [pc, #908]	; (8013718 <mbedtls_internal_sha256_process+0x1a34>)
 801338c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013390:	441a      	add	r2, r3
 8013392:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013396:	1d19      	adds	r1, r3, #4
 8013398:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801339c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80133a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80133a4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80133a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80133ac:	1d18      	adds	r0, r3, #4
 80133ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80133b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80133b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80133ba:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80133be:	4059      	eors	r1, r3
 80133c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80133c4:	1d18      	adds	r0, r3, #4
 80133c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80133ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80133ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80133d2:	0a9b      	lsrs	r3, r3, #10
 80133d4:	4059      	eors	r1, r3
 80133d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80133da:	1e58      	subs	r0, r3, #1
 80133dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80133e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80133e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80133e8:	4419      	add	r1, r3
 80133ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80133ee:	f1a3 0009 	sub.w	r0, r3, #9
 80133f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80133f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80133fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80133fe:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8013402:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013406:	f1a3 0409 	sub.w	r4, r3, #9
 801340a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801340e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013412:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013416:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801341a:	4058      	eors	r0, r3
 801341c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013420:	f1a3 0409 	sub.w	r4, r3, #9
 8013424:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013428:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801342c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013430:	08db      	lsrs	r3, r3, #3
 8013432:	4043      	eors	r3, r0
 8013434:	18c8      	adds	r0, r1, r3
 8013436:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801343a:	f1a3 010a 	sub.w	r1, r3, #10
 801343e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013442:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013446:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801344a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801344e:	3306      	adds	r3, #6
 8013450:	4408      	add	r0, r1
 8013452:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013456:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801345a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801345e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013462:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8013466:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801346a:	4413      	add	r3, r2
 801346c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8013470:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013478:	689b      	ldr	r3, [r3, #8]
 801347a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801347e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013482:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013486:	689b      	ldr	r3, [r3, #8]
 8013488:	ea4f 3373 	mov.w	r3, r3, ror #13
 801348c:	405a      	eors	r2, r3
 801348e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013496:	689b      	ldr	r3, [r3, #8]
 8013498:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801349c:	405a      	eors	r2, r3
 801349e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80134a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80134a6:	6899      	ldr	r1, [r3, #8]
 80134a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80134ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80134b0:	68db      	ldr	r3, [r3, #12]
 80134b2:	4019      	ands	r1, r3
 80134b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80134b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80134bc:	6918      	ldr	r0, [r3, #16]
 80134be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80134c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80134c6:	689c      	ldr	r4, [r3, #8]
 80134c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80134cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80134d0:	68db      	ldr	r3, [r3, #12]
 80134d2:	4323      	orrs	r3, r4
 80134d4:	4003      	ands	r3, r0
 80134d6:	430b      	orrs	r3, r1
 80134d8:	4413      	add	r3, r2
 80134da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80134de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80134e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80134e6:	695a      	ldr	r2, [r3, #20]
 80134e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80134ec:	441a      	add	r2, r3
 80134ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80134f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80134f6:	615a      	str	r2, [r3, #20]
 80134f8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80134fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013500:	441a      	add	r2, r3
 8013502:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801350a:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 801350c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013510:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801351a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801351e:	695b      	ldr	r3, [r3, #20]
 8013520:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013524:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801352c:	695b      	ldr	r3, [r3, #20]
 801352e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013532:	4059      	eors	r1, r3
 8013534:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013538:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801353c:	695b      	ldr	r3, [r3, #20]
 801353e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013542:	404b      	eors	r3, r1
 8013544:	441a      	add	r2, r3
 8013546:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801354a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801354e:	69d9      	ldr	r1, [r3, #28]
 8013550:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013558:	6958      	ldr	r0, [r3, #20]
 801355a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801355e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013562:	699c      	ldr	r4, [r3, #24]
 8013564:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801356c:	69db      	ldr	r3, [r3, #28]
 801356e:	4063      	eors	r3, r4
 8013570:	4003      	ands	r3, r0
 8013572:	404b      	eors	r3, r1
 8013574:	441a      	add	r2, r3
 8013576:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801357a:	3307      	adds	r3, #7
 801357c:	4966      	ldr	r1, [pc, #408]	; (8013718 <mbedtls_internal_sha256_process+0x1a34>)
 801357e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013582:	441a      	add	r2, r3
 8013584:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013588:	1d59      	adds	r1, r3, #5
 801358a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801358e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013592:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013596:	ea4f 4173 	mov.w	r1, r3, ror #17
 801359a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801359e:	1d58      	adds	r0, r3, #5
 80135a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80135a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80135a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80135ac:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80135b0:	4059      	eors	r1, r3
 80135b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80135b6:	1d58      	adds	r0, r3, #5
 80135b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80135bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80135c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80135c4:	0a9b      	lsrs	r3, r3, #10
 80135c6:	4059      	eors	r1, r3
 80135c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80135cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80135d0:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80135d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80135d8:	4419      	add	r1, r3
 80135da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80135de:	f1a3 0008 	sub.w	r0, r3, #8
 80135e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80135e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80135ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80135ee:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80135f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80135f6:	f1a3 0408 	sub.w	r4, r3, #8
 80135fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80135fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013602:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013606:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801360a:	4058      	eors	r0, r3
 801360c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013610:	f1a3 0408 	sub.w	r4, r3, #8
 8013614:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013618:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801361c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013620:	08db      	lsrs	r3, r3, #3
 8013622:	4043      	eors	r3, r0
 8013624:	18c8      	adds	r0, r1, r3
 8013626:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801362a:	f1a3 0109 	sub.w	r1, r3, #9
 801362e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013632:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013636:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801363a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801363e:	3307      	adds	r3, #7
 8013640:	4408      	add	r0, r1
 8013642:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013646:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801364a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801364e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013652:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8013656:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801365a:	4413      	add	r3, r2
 801365c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8013660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801366e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013672:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	ea4f 3373 	mov.w	r3, r3, ror #13
 801367c:	405a      	eors	r2, r3
 801367e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013686:	685b      	ldr	r3, [r3, #4]
 8013688:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801368c:	405a      	eors	r2, r3
 801368e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013696:	6859      	ldr	r1, [r3, #4]
 8013698:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801369c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80136a0:	689b      	ldr	r3, [r3, #8]
 80136a2:	4019      	ands	r1, r3
 80136a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80136a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80136ac:	68d8      	ldr	r0, [r3, #12]
 80136ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80136b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80136b6:	685c      	ldr	r4, [r3, #4]
 80136b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80136bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80136c0:	689b      	ldr	r3, [r3, #8]
 80136c2:	4323      	orrs	r3, r4
 80136c4:	4003      	ands	r3, r0
 80136c6:	430b      	orrs	r3, r1
 80136c8:	4413      	add	r3, r2
 80136ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80136ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80136d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80136d6:	691a      	ldr	r2, [r3, #16]
 80136d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80136dc:	441a      	add	r2, r3
 80136de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80136e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80136e6:	611a      	str	r2, [r3, #16]
 80136e8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80136ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80136f0:	441a      	add	r2, r3
 80136f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80136f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80136fa:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 80136fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013700:	3308      	adds	r3, #8
 8013702:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8013706:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801370a:	2b3f      	cmp	r3, #63	; 0x3f
 801370c:	f67f a828 	bls.w	8012760 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8013710:	2300      	movs	r3, #0
 8013712:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8013716:	e023      	b.n	8013760 <mbedtls_internal_sha256_process+0x1a7c>
 8013718:	08025864 	.word	0x08025864
        ctx->state[i] += A[i];
 801371c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013720:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801372a:	3202      	adds	r2, #2
 801372c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013730:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013738:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 801373c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013740:	18d1      	adds	r1, r2, r3
 8013742:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013746:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013750:	3202      	adds	r2, #2
 8013752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8013756:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801375a:	3301      	adds	r3, #1
 801375c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8013760:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013764:	2b07      	cmp	r3, #7
 8013766:	d9d9      	bls.n	801371c <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8013768:	2300      	movs	r3, #0
}
 801376a:	4618      	mov	r0, r3
 801376c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8013770:	46bd      	mov	sp, r7
 8013772:	bc90      	pop	{r4, r7}
 8013774:	4770      	bx	lr
 8013776:	bf00      	nop

08013778 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b088      	sub	sp, #32
 801377c:	af00      	add	r7, sp, #0
 801377e:	60f8      	str	r0, [r7, #12]
 8013780:	60b9      	str	r1, [r7, #8]
 8013782:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d101      	bne.n	801378e <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 801378a:	2300      	movs	r3, #0
 801378c:	e065      	b.n	801385a <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013796:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801379e:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	441a      	add	r2, r3
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	681a      	ldr	r2, [r3, #0]
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d904      	bls.n	80137c8 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	1c5a      	adds	r2, r3, #1
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d034      	beq.n	8013838 <mbedtls_sha256_update_ret+0xc0>
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d330      	bcc.n	8013838 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	4413      	add	r3, r2
 80137e0:	69ba      	ldr	r2, [r7, #24]
 80137e2:	68b9      	ldr	r1, [r7, #8]
 80137e4:	4618      	mov	r0, r3
 80137e6:	f00a fef5 	bl	801e5d4 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	3328      	adds	r3, #40	; 0x28
 80137ee:	4619      	mov	r1, r3
 80137f0:	68f8      	ldr	r0, [r7, #12]
 80137f2:	f7fe fa77 	bl	8011ce4 <mbedtls_internal_sha256_process>
 80137f6:	6178      	str	r0, [r7, #20]
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d001      	beq.n	8013802 <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	e02b      	b.n	801385a <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 8013802:	68ba      	ldr	r2, [r7, #8]
 8013804:	69bb      	ldr	r3, [r7, #24]
 8013806:	4413      	add	r3, r2
 8013808:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 801380a:	687a      	ldr	r2, [r7, #4]
 801380c:	69bb      	ldr	r3, [r7, #24]
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	607b      	str	r3, [r7, #4]
        left = 0;
 8013812:	2300      	movs	r3, #0
 8013814:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 8013816:	e00f      	b.n	8013838 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8013818:	68b9      	ldr	r1, [r7, #8]
 801381a:	68f8      	ldr	r0, [r7, #12]
 801381c:	f7fe fa62 	bl	8011ce4 <mbedtls_internal_sha256_process>
 8013820:	6178      	str	r0, [r7, #20]
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d001      	beq.n	801382c <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	e016      	b.n	801385a <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	3340      	adds	r3, #64	; 0x40
 8013830:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	3b40      	subs	r3, #64	; 0x40
 8013836:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2b3f      	cmp	r3, #63	; 0x3f
 801383c:	d8ec      	bhi.n	8013818 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d009      	beq.n	8013858 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	4413      	add	r3, r2
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	68b9      	ldr	r1, [r7, #8]
 8013852:	4618      	mov	r0, r3
 8013854:	f00a febe 	bl	801e5d4 <memcpy>

    return( 0 );
 8013858:	2300      	movs	r3, #0
}
 801385a:	4618      	mov	r0, r3
 801385c:	3720      	adds	r7, #32
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
	...

08013864 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b08a      	sub	sp, #40	; 0x28
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
    int ret;
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 801387a:	4313      	orrs	r3, r2
 801387c:	627b      	str	r3, [r7, #36]	; 0x24
    low  = ( ctx->total[0] <<  3 );
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	00db      	lsls	r3, r3, #3
 8013884:	623b      	str	r3, [r7, #32]

    PUT_UINT32_BE( high, msglen, 0 );
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013888:	0e1b      	lsrs	r3, r3, #24
 801388a:	b2db      	uxtb	r3, r3
 801388c:	733b      	strb	r3, [r7, #12]
 801388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013890:	0c1b      	lsrs	r3, r3, #16
 8013892:	b2db      	uxtb	r3, r3
 8013894:	737b      	strb	r3, [r7, #13]
 8013896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013898:	0a1b      	lsrs	r3, r3, #8
 801389a:	b2db      	uxtb	r3, r3
 801389c:	73bb      	strb	r3, [r7, #14]
 801389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a0:	b2db      	uxtb	r3, r3
 80138a2:	73fb      	strb	r3, [r7, #15]
    PUT_UINT32_BE( low,  msglen, 4 );
 80138a4:	6a3b      	ldr	r3, [r7, #32]
 80138a6:	0e1b      	lsrs	r3, r3, #24
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	743b      	strb	r3, [r7, #16]
 80138ac:	6a3b      	ldr	r3, [r7, #32]
 80138ae:	0c1b      	lsrs	r3, r3, #16
 80138b0:	b2db      	uxtb	r3, r3
 80138b2:	747b      	strb	r3, [r7, #17]
 80138b4:	6a3b      	ldr	r3, [r7, #32]
 80138b6:	0a1b      	lsrs	r3, r3, #8
 80138b8:	b2db      	uxtb	r3, r3
 80138ba:	74bb      	strb	r3, [r7, #18]
 80138bc:	6a3b      	ldr	r3, [r7, #32]
 80138be:	b2db      	uxtb	r3, r3
 80138c0:	74fb      	strb	r3, [r7, #19]

    last = ctx->total[0] & 0x3F;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138ca:	61fb      	str	r3, [r7, #28]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	2b37      	cmp	r3, #55	; 0x37
 80138d0:	d803      	bhi.n	80138da <mbedtls_sha256_finish_ret+0x76>
 80138d2:	69fb      	ldr	r3, [r7, #28]
 80138d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80138d8:	e002      	b.n	80138e0 <mbedtls_sha256_finish_ret+0x7c>
 80138da:	69fb      	ldr	r3, [r7, #28]
 80138dc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80138e0:	61bb      	str	r3, [r7, #24]

    if( ( ret = mbedtls_sha256_update_ret( ctx, sha256_padding, padn ) ) != 0 )
 80138e2:	69ba      	ldr	r2, [r7, #24]
 80138e4:	497b      	ldr	r1, [pc, #492]	; (8013ad4 <mbedtls_sha256_finish_ret+0x270>)
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ff ff46 	bl	8013778 <mbedtls_sha256_update_ret>
 80138ec:	6178      	str	r0, [r7, #20]
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d001      	beq.n	80138f8 <mbedtls_sha256_finish_ret+0x94>
        return( ret );
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	e0e8      	b.n	8013aca <mbedtls_sha256_finish_ret+0x266>

    if( ( ret = mbedtls_sha256_update_ret( ctx, msglen, 8 ) ) != 0 )
 80138f8:	f107 030c 	add.w	r3, r7, #12
 80138fc:	2208      	movs	r2, #8
 80138fe:	4619      	mov	r1, r3
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f7ff ff39 	bl	8013778 <mbedtls_sha256_update_ret>
 8013906:	6178      	str	r0, [r7, #20]
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d001      	beq.n	8013912 <mbedtls_sha256_finish_ret+0xae>
        return( ret );
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	e0db      	b.n	8013aca <mbedtls_sha256_finish_ret+0x266>

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	689b      	ldr	r3, [r3, #8]
 8013916:	0e1b      	lsrs	r3, r3, #24
 8013918:	b2da      	uxtb	r2, r3
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	701a      	strb	r2, [r3, #0]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	0c1a      	lsrs	r2, r3, #16
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	3301      	adds	r3, #1
 8013928:	b2d2      	uxtb	r2, r2
 801392a:	701a      	strb	r2, [r3, #0]
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	0a1a      	lsrs	r2, r3, #8
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	3302      	adds	r3, #2
 8013936:	b2d2      	uxtb	r2, r2
 8013938:	701a      	strb	r2, [r3, #0]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	689a      	ldr	r2, [r3, #8]
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	3303      	adds	r3, #3
 8013942:	b2d2      	uxtb	r2, r2
 8013944:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	68db      	ldr	r3, [r3, #12]
 801394a:	0e1a      	lsrs	r2, r3, #24
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	3304      	adds	r3, #4
 8013950:	b2d2      	uxtb	r2, r2
 8013952:	701a      	strb	r2, [r3, #0]
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	0c1a      	lsrs	r2, r3, #16
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	3305      	adds	r3, #5
 801395e:	b2d2      	uxtb	r2, r2
 8013960:	701a      	strb	r2, [r3, #0]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	0a1a      	lsrs	r2, r3, #8
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	3306      	adds	r3, #6
 801396c:	b2d2      	uxtb	r2, r2
 801396e:	701a      	strb	r2, [r3, #0]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	68da      	ldr	r2, [r3, #12]
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	3307      	adds	r3, #7
 8013978:	b2d2      	uxtb	r2, r2
 801397a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	691b      	ldr	r3, [r3, #16]
 8013980:	0e1a      	lsrs	r2, r3, #24
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	3308      	adds	r3, #8
 8013986:	b2d2      	uxtb	r2, r2
 8013988:	701a      	strb	r2, [r3, #0]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	691b      	ldr	r3, [r3, #16]
 801398e:	0c1a      	lsrs	r2, r3, #16
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	3309      	adds	r3, #9
 8013994:	b2d2      	uxtb	r2, r2
 8013996:	701a      	strb	r2, [r3, #0]
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	691b      	ldr	r3, [r3, #16]
 801399c:	0a1a      	lsrs	r2, r3, #8
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	330a      	adds	r3, #10
 80139a2:	b2d2      	uxtb	r2, r2
 80139a4:	701a      	strb	r2, [r3, #0]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	691a      	ldr	r2, [r3, #16]
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	330b      	adds	r3, #11
 80139ae:	b2d2      	uxtb	r2, r2
 80139b0:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	695b      	ldr	r3, [r3, #20]
 80139b6:	0e1a      	lsrs	r2, r3, #24
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	330c      	adds	r3, #12
 80139bc:	b2d2      	uxtb	r2, r2
 80139be:	701a      	strb	r2, [r3, #0]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	695b      	ldr	r3, [r3, #20]
 80139c4:	0c1a      	lsrs	r2, r3, #16
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	330d      	adds	r3, #13
 80139ca:	b2d2      	uxtb	r2, r2
 80139cc:	701a      	strb	r2, [r3, #0]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	695b      	ldr	r3, [r3, #20]
 80139d2:	0a1a      	lsrs	r2, r3, #8
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	330e      	adds	r3, #14
 80139d8:	b2d2      	uxtb	r2, r2
 80139da:	701a      	strb	r2, [r3, #0]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	695a      	ldr	r2, [r3, #20]
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	330f      	adds	r3, #15
 80139e4:	b2d2      	uxtb	r2, r2
 80139e6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	699b      	ldr	r3, [r3, #24]
 80139ec:	0e1a      	lsrs	r2, r3, #24
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	3310      	adds	r3, #16
 80139f2:	b2d2      	uxtb	r2, r2
 80139f4:	701a      	strb	r2, [r3, #0]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	699b      	ldr	r3, [r3, #24]
 80139fa:	0c1a      	lsrs	r2, r3, #16
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	3311      	adds	r3, #17
 8013a00:	b2d2      	uxtb	r2, r2
 8013a02:	701a      	strb	r2, [r3, #0]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	699b      	ldr	r3, [r3, #24]
 8013a08:	0a1a      	lsrs	r2, r3, #8
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	3312      	adds	r3, #18
 8013a0e:	b2d2      	uxtb	r2, r2
 8013a10:	701a      	strb	r2, [r3, #0]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	699a      	ldr	r2, [r3, #24]
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	3313      	adds	r3, #19
 8013a1a:	b2d2      	uxtb	r2, r2
 8013a1c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	69db      	ldr	r3, [r3, #28]
 8013a22:	0e1a      	lsrs	r2, r3, #24
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	3314      	adds	r3, #20
 8013a28:	b2d2      	uxtb	r2, r2
 8013a2a:	701a      	strb	r2, [r3, #0]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	69db      	ldr	r3, [r3, #28]
 8013a30:	0c1a      	lsrs	r2, r3, #16
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	3315      	adds	r3, #21
 8013a36:	b2d2      	uxtb	r2, r2
 8013a38:	701a      	strb	r2, [r3, #0]
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	69db      	ldr	r3, [r3, #28]
 8013a3e:	0a1a      	lsrs	r2, r3, #8
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	3316      	adds	r3, #22
 8013a44:	b2d2      	uxtb	r2, r2
 8013a46:	701a      	strb	r2, [r3, #0]
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	69da      	ldr	r2, [r3, #28]
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	3317      	adds	r3, #23
 8013a50:	b2d2      	uxtb	r2, r2
 8013a52:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6a1b      	ldr	r3, [r3, #32]
 8013a58:	0e1a      	lsrs	r2, r3, #24
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	3318      	adds	r3, #24
 8013a5e:	b2d2      	uxtb	r2, r2
 8013a60:	701a      	strb	r2, [r3, #0]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6a1b      	ldr	r3, [r3, #32]
 8013a66:	0c1a      	lsrs	r2, r3, #16
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	3319      	adds	r3, #25
 8013a6c:	b2d2      	uxtb	r2, r2
 8013a6e:	701a      	strb	r2, [r3, #0]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	6a1b      	ldr	r3, [r3, #32]
 8013a74:	0a1a      	lsrs	r2, r3, #8
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	331a      	adds	r3, #26
 8013a7a:	b2d2      	uxtb	r2, r2
 8013a7c:	701a      	strb	r2, [r3, #0]
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6a1a      	ldr	r2, [r3, #32]
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	331b      	adds	r3, #27
 8013a86:	b2d2      	uxtb	r2, r2
 8013a88:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d11a      	bne.n	8013ac8 <mbedtls_sha256_finish_ret+0x264>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a96:	0e1a      	lsrs	r2, r3, #24
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	331c      	adds	r3, #28
 8013a9c:	b2d2      	uxtb	r2, r2
 8013a9e:	701a      	strb	r2, [r3, #0]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa4:	0c1a      	lsrs	r2, r3, #16
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	331d      	adds	r3, #29
 8013aaa:	b2d2      	uxtb	r2, r2
 8013aac:	701a      	strb	r2, [r3, #0]
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ab2:	0a1a      	lsrs	r2, r3, #8
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	331e      	adds	r3, #30
 8013ab8:	b2d2      	uxtb	r2, r2
 8013aba:	701a      	strb	r2, [r3, #0]
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	331f      	adds	r3, #31
 8013ac4:	b2d2      	uxtb	r2, r2
 8013ac6:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8013ac8:	2300      	movs	r3, #0
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3728      	adds	r7, #40	; 0x28
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	08025964 	.word	0x08025964

08013ad8 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b0a0      	sub	sp, #128	; 0x80
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
 8013ae4:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 8013ae6:	f107 0310 	add.w	r3, r7, #16
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7fe f862 	bl	8011bb4 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8013af0:	f107 0310 	add.w	r3, r7, #16
 8013af4:	6839      	ldr	r1, [r7, #0]
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7fe f88a 	bl	8011c10 <mbedtls_sha256_starts_ret>
 8013afc:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d114      	bne.n	8013b2e <mbedtls_sha256_ret+0x56>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8013b04:	f107 0310 	add.w	r3, r7, #16
 8013b08:	68ba      	ldr	r2, [r7, #8]
 8013b0a:	68f9      	ldr	r1, [r7, #12]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7ff fe33 	bl	8013778 <mbedtls_sha256_update_ret>
 8013b12:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013b14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d10b      	bne.n	8013b32 <mbedtls_sha256_ret+0x5a>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 8013b1a:	f107 0310 	add.w	r3, r7, #16
 8013b1e:	6879      	ldr	r1, [r7, #4]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7ff fe9f 	bl	8013864 <mbedtls_sha256_finish_ret>
 8013b26:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013b28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b2a:	2b00      	cmp	r3, #0
        goto exit;

exit:
 8013b2c:	e002      	b.n	8013b34 <mbedtls_sha256_ret+0x5c>
        goto exit;
 8013b2e:	bf00      	nop
 8013b30:	e000      	b.n	8013b34 <mbedtls_sha256_ret+0x5c>
        goto exit;
 8013b32:	bf00      	nop
    mbedtls_sha256_free( &ctx );
 8013b34:	f107 0310 	add.w	r3, r7, #16
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7fe f848 	bl	8011bce <mbedtls_sha256_free>

    return( ret );
 8013b3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3780      	adds	r7, #128	; 0x80
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <mbedtls_ssl_list_ciphersuites>:
      0, 0, 0, 0, 0 }
};

#if defined(MBEDTLS_SSL_CIPHERSUITES)
const int *mbedtls_ssl_list_ciphersuites( void )
{
 8013b48:	b480      	push	{r7}
 8013b4a:	af00      	add	r7, sp, #0
    return( ciphersuite_preference );
 8013b4c:	4b02      	ldr	r3, [pc, #8]	; (8013b58 <mbedtls_ssl_list_ciphersuites+0x10>)
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr
 8013b58:	080259a4 	.word	0x080259a4

08013b5c <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b085      	sub	sp, #20
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 8013b64:	4b0b      	ldr	r3, [pc, #44]	; (8013b94 <mbedtls_ssl_ciphersuite_from_id+0x38>)
 8013b66:	60fb      	str	r3, [r7, #12]

    while( cur->id != 0 )
 8013b68:	e009      	b.n	8013b7e <mbedtls_ssl_ciphersuite_from_id+0x22>
    {
        if( cur->id == ciphersuite )
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	687a      	ldr	r2, [r7, #4]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d101      	bne.n	8013b78 <mbedtls_ssl_ciphersuite_from_id+0x1c>
            return( cur );
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	e007      	b.n	8013b88 <mbedtls_ssl_ciphersuite_from_id+0x2c>

        cur++;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	3320      	adds	r3, #32
 8013b7c:	60fb      	str	r3, [r7, #12]
    while( cur->id != 0 )
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d1f1      	bne.n	8013b6a <mbedtls_ssl_ciphersuite_from_id+0xe>
    }

    return( NULL );
 8013b86:	2300      	movs	r3, #0
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3714      	adds	r7, #20
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr
 8013b94:	080259b4 	.word	0x080259b4

08013b98 <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f7ff ffdb 	bl	8013b5c <mbedtls_ssl_ciphersuite_from_id>
 8013ba6:	60f8      	str	r0, [r7, #12]

    if( cur == NULL )
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d101      	bne.n	8013bb2 <mbedtls_ssl_get_ciphersuite_name+0x1a>
        return( "unknown" );
 8013bae:	4b04      	ldr	r3, [pc, #16]	; (8013bc0 <mbedtls_ssl_get_ciphersuite_name+0x28>)
 8013bb0:	e001      	b.n	8013bb6 <mbedtls_ssl_get_ciphersuite_name+0x1e>

    return( cur->name );
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	685b      	ldr	r3, [r3, #4]
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3710      	adds	r7, #16
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	08022b8c 	.word	0x08022b8c

08013bc4 <mbedtls_ssl_ciphersuite_cert_req_allowed>:
    }
}
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */

static inline int mbedtls_ssl_ciphersuite_cert_req_allowed( const mbedtls_ssl_ciphersuite_t *info )
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
    switch( info->key_exchange )
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	7a9b      	ldrb	r3, [r3, #10]
 8013bd0:	2b04      	cmp	r3, #4
 8013bd2:	dc02      	bgt.n	8013bda <mbedtls_ssl_ciphersuite_cert_req_allowed+0x16>
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	dc03      	bgt.n	8013be0 <mbedtls_ssl_ciphersuite_cert_req_allowed+0x1c>
 8013bd8:	e004      	b.n	8013be4 <mbedtls_ssl_ciphersuite_cert_req_allowed+0x20>
 8013bda:	3b09      	subs	r3, #9
 8013bdc:	2b01      	cmp	r3, #1
 8013bde:	d801      	bhi.n	8013be4 <mbedtls_ssl_ciphersuite_cert_req_allowed+0x20>
        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( 1 );
 8013be0:	2301      	movs	r3, #1
 8013be2:	e000      	b.n	8013be6 <mbedtls_ssl_ciphersuite_cert_req_allowed+0x22>

        default:
            return( 0 );
 8013be4:	2300      	movs	r3, #0
    }
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	370c      	adds	r7, #12
 8013bea:	46bd      	mov	sp, r7
 8013bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf0:	4770      	bx	lr

08013bf2 <mbedtls_ssl_own_key>:
                                mbedtls_md_type_t md );
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
 8013bf2:	b480      	push	{r7}
 8013bf4:	b085      	sub	sp, #20
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d009      	beq.n	8013c16 <mbedtls_ssl_own_key+0x24>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d004      	beq.n	8013c16 <mbedtls_ssl_own_key+0x24>
        key_cert = ssl->handshake->key_cert;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	60fb      	str	r3, [r7, #12]
 8013c14:	e003      	b.n	8013c1e <mbedtls_ssl_own_key+0x2c>
    else
        key_cert = ssl->conf->key_cert;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c1c:	60fb      	str	r3, [r7, #12]

    return( key_cert == NULL ? NULL : key_cert->key );
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d002      	beq.n	8013c2a <mbedtls_ssl_own_key+0x38>
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	e000      	b.n	8013c2c <mbedtls_ssl_own_key+0x3a>
 8013c2a:	2300      	movs	r3, #0
}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3714      	adds	r7, #20
 8013c30:	46bd      	mov	sp, r7
 8013c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c36:	4770      	bx	lr

08013c38 <mbedtls_ssl_own_cert>:

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
 8013c38:	b480      	push	{r7}
 8013c3a:	b085      	sub	sp, #20
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d009      	beq.n	8013c5c <mbedtls_ssl_own_cert+0x24>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d004      	beq.n	8013c5c <mbedtls_ssl_own_cert+0x24>
        key_cert = ssl->handshake->key_cert;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	60fb      	str	r3, [r7, #12]
 8013c5a:	e003      	b.n	8013c64 <mbedtls_ssl_own_cert+0x2c>
    else
        key_cert = ssl->conf->key_cert;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c62:	60fb      	str	r3, [r7, #12]

    return( key_cert == NULL ? NULL : key_cert->cert );
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d002      	beq.n	8013c70 <mbedtls_ssl_own_cert+0x38>
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	e000      	b.n	8013c72 <mbedtls_ssl_own_cert+0x3a>
 8013c70:	2300      	movs	r3, #0
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3714      	adds	r7, #20
 8013c76:	46bd      	mov	sp, r7
 8013c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7c:	4770      	bx	lr

08013c7e <mbedtls_ssl_hs_hdr_len>:
#endif
    return( 5 );
}

static inline size_t mbedtls_ssl_hs_hdr_len( const mbedtls_ssl_context *ssl )
{
 8013c7e:	b480      	push	{r7}
 8013c80:	b083      	sub	sp, #12
 8013c82:	af00      	add	r7, sp, #0
 8013c84:	6078      	str	r0, [r7, #4]
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        return( 12 );
#else
    ((void) ssl);
#endif
    return( 4 );
 8013c86:	2304      	movs	r3, #4
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr

08013c94 <ssl_write_signature_algorithms_ext>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
 8013c94:	b590      	push	{r4, r7, lr}
 8013c96:	b08d      	sub	sp, #52	; 0x34
 8013c98:	af02      	add	r7, sp, #8
 8013c9a:	60f8      	str	r0, [r7, #12]
 8013c9c:	60b9      	str	r1, [r7, #8]
 8013c9e:	607a      	str	r2, [r7, #4]
    unsigned char *p = buf;
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	61fb      	str	r3, [r7, #28]
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013cae:	61bb      	str	r3, [r7, #24]
    size_t sig_alg_len = 0;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	627b      	str	r3, [r7, #36]	; 0x24
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	3306      	adds	r3, #6
 8013cb8:	617b      	str	r3, [r7, #20]
#endif

    *olen = 0;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	601a      	str	r2, [r3, #0]

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013cc8:	2b03      	cmp	r3, #3
 8013cca:	d178      	bne.n	8013dbe <ssl_write_signature_algorithms_ext+0x12a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 8013ccc:	4b3e      	ldr	r3, [pc, #248]	; (8013dc8 <ssl_write_signature_algorithms_ext+0x134>)
 8013cce:	9300      	str	r3, [sp, #0]
 8013cd0:	23bd      	movs	r3, #189	; 0xbd
 8013cd2:	4a3e      	ldr	r2, [pc, #248]	; (8013dcc <ssl_write_signature_algorithms_ext+0x138>)
 8013cd4:	2103      	movs	r1, #3
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f7f8 f810 	bl	800bcfc <mbedtls_debug_print_msg>

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ce2:	623b      	str	r3, [r7, #32]
 8013ce4:	e005      	b.n	8013cf2 <ssl_write_signature_algorithms_ext+0x5e>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 8013ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce8:	3302      	adds	r3, #2
 8013cea:	627b      	str	r3, [r7, #36]	; 0x24
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8013cec:	6a3b      	ldr	r3, [r7, #32]
 8013cee:	3304      	adds	r3, #4
 8013cf0:	623b      	str	r3, [r7, #32]
 8013cf2:	6a3b      	ldr	r3, [r7, #32]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d1f5      	bne.n	8013ce6 <ssl_write_signature_algorithms_ext+0x52>
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 8013cfa:	69ba      	ldr	r2, [r7, #24]
 8013cfc:	69fb      	ldr	r3, [r7, #28]
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d307      	bcc.n	8013d12 <ssl_write_signature_algorithms_ext+0x7e>
 8013d02:	69ba      	ldr	r2, [r7, #24]
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	1ad3      	subs	r3, r2, r3
 8013d08:	461a      	mov	r2, r3
 8013d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0c:	3306      	adds	r3, #6
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d208      	bcs.n	8013d24 <ssl_write_signature_algorithms_ext+0x90>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 8013d12:	4b2f      	ldr	r3, [pc, #188]	; (8013dd0 <ssl_write_signature_algorithms_ext+0x13c>)
 8013d14:	9300      	str	r3, [sp, #0]
 8013d16:	23cb      	movs	r3, #203	; 0xcb
 8013d18:	4a2c      	ldr	r2, [pc, #176]	; (8013dcc <ssl_write_signature_algorithms_ext+0x138>)
 8013d1a:	2101      	movs	r1, #1
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	f7f7 ffed 	bl	800bcfc <mbedtls_debug_print_msg>
        return;
 8013d22:	e04d      	b.n	8013dc0 <ssl_write_signature_algorithms_ext+0x12c>
    }

    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;
 8013d24:	2300      	movs	r3, #0
 8013d26:	627b      	str	r3, [r7, #36]	; 0x24

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d2e:	623b      	str	r3, [r7, #32]
 8013d30:	e015      	b.n	8013d5e <ssl_write_signature_algorithms_ext+0xca>
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 8013d32:	6a3b      	ldr	r3, [r7, #32]
 8013d34:	6819      	ldr	r1, [r3, #0]
 8013d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d38:	1c5a      	adds	r2, r3, #1
 8013d3a:	627a      	str	r2, [r7, #36]	; 0x24
 8013d3c:	697a      	ldr	r2, [r7, #20]
 8013d3e:	18d4      	adds	r4, r2, r3
 8013d40:	4608      	mov	r0, r1
 8013d42:	f005 ff65 	bl	8019c10 <mbedtls_ssl_hash_from_md_alg>
 8013d46:	4603      	mov	r3, r0
 8013d48:	7023      	strb	r3, [r4, #0]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4c:	1c5a      	adds	r2, r3, #1
 8013d4e:	627a      	str	r2, [r7, #36]	; 0x24
 8013d50:	697a      	ldr	r2, [r7, #20]
 8013d52:	4413      	add	r3, r2
 8013d54:	2201      	movs	r2, #1
 8013d56:	701a      	strb	r2, [r3, #0]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8013d58:	6a3b      	ldr	r3, [r7, #32]
 8013d5a:	3304      	adds	r3, #4
 8013d5c:	623b      	str	r3, [r7, #32]
 8013d5e:	6a3b      	ldr	r3, [r7, #32]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d1e5      	bne.n	8013d32 <ssl_write_signature_algorithms_ext+0x9e>
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 8013d66:	69fb      	ldr	r3, [r7, #28]
 8013d68:	1c5a      	adds	r2, r3, #1
 8013d6a:	61fa      	str	r2, [r7, #28]
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 8013d70:	69fb      	ldr	r3, [r7, #28]
 8013d72:	1c5a      	adds	r2, r3, #1
 8013d74:	61fa      	str	r2, [r7, #28]
 8013d76:	220d      	movs	r2, #13
 8013d78:	701a      	strb	r2, [r3, #0]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	3302      	adds	r3, #2
 8013d7e:	0a19      	lsrs	r1, r3, #8
 8013d80:	69fb      	ldr	r3, [r7, #28]
 8013d82:	1c5a      	adds	r2, r3, #1
 8013d84:	61fa      	str	r2, [r7, #28]
 8013d86:	b2ca      	uxtb	r2, r1
 8013d88:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8c:	b2da      	uxtb	r2, r3
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	1c59      	adds	r1, r3, #1
 8013d92:	61f9      	str	r1, [r7, #28]
 8013d94:	3202      	adds	r2, #2
 8013d96:	b2d2      	uxtb	r2, r2
 8013d98:	701a      	strb	r2, [r3, #0]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 8013d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9c:	0a19      	lsrs	r1, r3, #8
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	1c5a      	adds	r2, r3, #1
 8013da2:	61fa      	str	r2, [r7, #28]
 8013da4:	b2ca      	uxtb	r2, r1
 8013da6:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	1c5a      	adds	r2, r3, #1
 8013dac:	61fa      	str	r2, [r7, #28]
 8013dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013db0:	b2d2      	uxtb	r2, r2
 8013db2:	701a      	strb	r2, [r3, #0]

    *olen = 6 + sig_alg_len;
 8013db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db6:	1d9a      	adds	r2, r3, #6
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	601a      	str	r2, [r3, #0]
 8013dbc:	e000      	b.n	8013dc0 <ssl_write_signature_algorithms_ext+0x12c>
        return;
 8013dbe:	bf00      	nop
}
 8013dc0:	372c      	adds	r7, #44	; 0x2c
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd90      	pop	{r4, r7, pc}
 8013dc6:	bf00      	nop
 8013dc8:	08022bc0 	.word	0x08022bc0
 8013dcc:	08022b94 	.word	0x08022b94
 8013dd0:	08022bf4 	.word	0x08022bf4

08013dd4 <ssl_generate_random>:

/*
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013de0:	3388      	adds	r3, #136	; 0x88
 8013de2:	60fb      	str	r3, [r7, #12]
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	699b      	ldr	r3, [r3, #24]
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	6812      	ldr	r2, [r2, #0]
 8013dee:	69d0      	ldr	r0, [r2, #28]
 8013df0:	2204      	movs	r2, #4
 8013df2:	68f9      	ldr	r1, [r7, #12]
 8013df4:	4798      	blx	r3
 8013df6:	60b8      	str	r0, [r7, #8]
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d001      	beq.n	8013e02 <ssl_generate_random+0x2e>
        return( ret );
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	e012      	b.n	8013e28 <ssl_generate_random+0x54>

    p += 4;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	3304      	adds	r3, #4
 8013e06:	60fb      	str	r3, [r7, #12]
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	699b      	ldr	r3, [r3, #24]
 8013e0e:	687a      	ldr	r2, [r7, #4]
 8013e10:	6812      	ldr	r2, [r2, #0]
 8013e12:	69d0      	ldr	r0, [r2, #28]
 8013e14:	221c      	movs	r2, #28
 8013e16:	68f9      	ldr	r1, [r7, #12]
 8013e18:	4798      	blx	r3
 8013e1a:	60b8      	str	r0, [r7, #8]
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d001      	beq.n	8013e26 <ssl_generate_random+0x52>
        return( ret );
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	e000      	b.n	8013e28 <ssl_generate_random+0x54>

    return( 0 );
 8013e26:	2300      	movs	r3, #0
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3710      	adds	r7, #16
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <ssl_write_client_hello>:

static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b092      	sub	sp, #72	; 0x48
 8013e34:	af04      	add	r7, sp, #16
 8013e36:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i, n, olen, ext_len = 0;
 8013e38:	2300      	movs	r3, #0
 8013e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    unsigned char *p, *q;
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 8013e3c:	4b98      	ldr	r3, [pc, #608]	; (80140a0 <ssl_write_client_hello+0x270>)
 8013e3e:	9300      	str	r3, [sp, #0]
 8013e40:	f240 23da 	movw	r3, #730	; 0x2da
 8013e44:	4a97      	ldr	r2, [pc, #604]	; (80140a4 <ssl_write_client_hello+0x274>)
 8013e46:	2102      	movs	r1, #2
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f7f7 ff57 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ssl->conf->f_rng == NULL )
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	699b      	ldr	r3, [r3, #24]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d10a      	bne.n	8013e6e <ssl_write_client_hello+0x3e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 8013e58:	4b93      	ldr	r3, [pc, #588]	; (80140a8 <ssl_write_client_hello+0x278>)
 8013e5a:	9300      	str	r3, [sp, #0]
 8013e5c:	f240 23de 	movw	r3, #734	; 0x2de
 8013e60:	4a90      	ldr	r2, [pc, #576]	; (80140a4 <ssl_write_client_hello+0x274>)
 8013e62:	2101      	movs	r1, #1
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f7f7 ff49 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_NO_RNG );
 8013e6a:	4b90      	ldr	r3, [pc, #576]	; (80140ac <ssl_write_client_hello+0x27c>)
 8013e6c:	e218      	b.n	80142a0 <ssl_write_client_hello+0x470>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013e76:	461a      	mov	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	609a      	str	r2, [r3, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8013e84:	461a      	mov	r2, r3
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	60da      	str	r2, [r3, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d10a      	bne.n	8013eac <ssl_write_client_hello+0x7c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 8013e96:	4b86      	ldr	r3, [pc, #536]	; (80140b0 <ssl_write_client_hello+0x280>)
 8013e98:	9300      	str	r3, [sp, #0]
 8013e9a:	f44f 733b 	mov.w	r3, #748	; 0x2ec
 8013e9e:	4a81      	ldr	r2, [pc, #516]	; (80140a4 <ssl_write_client_hello+0x274>)
 8013ea0:	2101      	movs	r1, #1
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f7f7 ff2a 	bl	800bcfc <mbedtls_debug_print_msg>
                            "consider using mbedtls_ssl_config_defaults()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8013ea8:	4b82      	ldr	r3, [pc, #520]	; (80140b4 <ssl_write_client_hello+0x284>)
 8013eaa:	e1f9      	b.n	80142a0 <ssl_write_client_hello+0x470>
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013eb2:	627b      	str	r3, [r7, #36]	; 0x24
    p = buf + 4;
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb6:	3304      	adds	r3, #4
 8013eb8:	62fb      	str	r3, [r7, #44]	; 0x2c

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013ecc:	4619      	mov	r1, r3
                       ssl->conf->transport, p );
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013ed6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8013eda:	b2db      	uxtb	r3, r3
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8013edc:	461a      	mov	r2, r3
 8013ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee0:	f005 febc 	bl	8019c5c <mbedtls_ssl_write_version>
    p += 2;
 8013ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee6:	3302      	adds	r3, #2
 8013ee8:	62fb      	str	r3, [r7, #44]	; 0x2c

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 8013eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eec:	3304      	adds	r3, #4
 8013eee:	781b      	ldrb	r3, [r3, #0]
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef4:	3305      	adds	r3, #5
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	9302      	str	r3, [sp, #8]
 8013efa:	9201      	str	r2, [sp, #4]
 8013efc:	4b6e      	ldr	r3, [pc, #440]	; (80140b8 <ssl_write_client_hello+0x288>)
 8013efe:	9300      	str	r3, [sp, #0]
 8013f00:	f240 23ff 	movw	r3, #767	; 0x2ff
 8013f04:	4a67      	ldr	r2, [pc, #412]	; (80140a4 <ssl_write_client_hello+0x274>)
 8013f06:	2103      	movs	r1, #3
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f7f7 fef7 	bl	800bcfc <mbedtls_debug_print_msg>
                   buf[4], buf[5] ) );

    if( ( ret = ssl_generate_random( ssl ) ) != 0 )
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7ff ff60 	bl	8013dd4 <ssl_generate_random>
 8013f14:	6238      	str	r0, [r7, #32]
 8013f16:	6a3b      	ldr	r3, [r7, #32]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d00c      	beq.n	8013f36 <ssl_write_client_hello+0x106>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 8013f1c:	6a3b      	ldr	r3, [r7, #32]
 8013f1e:	9301      	str	r3, [sp, #4]
 8013f20:	4b66      	ldr	r3, [pc, #408]	; (80140bc <ssl_write_client_hello+0x28c>)
 8013f22:	9300      	str	r3, [sp, #0]
 8013f24:	f44f 7341 	mov.w	r3, #772	; 0x304
 8013f28:	4a5e      	ldr	r2, [pc, #376]	; (80140a4 <ssl_write_client_hello+0x274>)
 8013f2a:	2101      	movs	r1, #1
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7f7 ff6b 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8013f32:	6a3b      	ldr	r3, [r7, #32]
 8013f34:	e1b4      	b.n	80142a0 <ssl_write_client_hello+0x470>
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f3a:	3388      	adds	r3, #136	; 0x88
 8013f3c:	2220      	movs	r2, #32
 8013f3e:	4619      	mov	r1, r3
 8013f40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f42:	f00a fb47 	bl	801e5d4 <memcpy>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 8013f46:	2320      	movs	r3, #32
 8013f48:	9302      	str	r3, [sp, #8]
 8013f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4c:	9301      	str	r3, [sp, #4]
 8013f4e:	4b5c      	ldr	r3, [pc, #368]	; (80140c0 <ssl_write_client_hello+0x290>)
 8013f50:	9300      	str	r3, [sp, #0]
 8013f52:	f240 3309 	movw	r3, #777	; 0x309
 8013f56:	4a53      	ldr	r2, [pc, #332]	; (80140a4 <ssl_write_client_hello+0x274>)
 8013f58:	2103      	movs	r1, #3
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f7f7 ffc0 	bl	800bee0 <mbedtls_debug_print_buf>
    p += 32;
 8013f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f62:	3320      	adds	r3, #32
 8013f64:	62fb      	str	r3, [r7, #44]	; 0x2c
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f6a:	689b      	ldr	r3, [r3, #8]
 8013f6c:	633b      	str	r3, [r7, #48]	; 0x30

    if( n < 16 || n > 32 ||
 8013f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f70:	2b0f      	cmp	r3, #15
 8013f72:	d908      	bls.n	8013f86 <ssl_write_client_hello+0x156>
 8013f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f76:	2b20      	cmp	r3, #32
 8013f78:	d805      	bhi.n	8013f86 <ssl_write_client_hello+0x156>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f7e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
    if( n < 16 || n > 32 ||
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d101      	bne.n	8013f8a <ssl_write_client_hello+0x15a>
    {
        n = 0;
 8013f86:	2300      	movs	r3, #0
 8013f88:	633b      	str	r3, [r7, #48]	; 0x30
            ssl->session_negotiate->id_len = n = 32;
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 8013f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f8c:	1c5a      	adds	r2, r3, #1
 8013f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f92:	b2d2      	uxtb	r2, r2
 8013f94:	701a      	strb	r2, [r3, #0]

    for( i = 0; i < n; i++ )
 8013f96:	2300      	movs	r3, #0
 8013f98:	637b      	str	r3, [r7, #52]	; 0x34
 8013f9a:	e00c      	b.n	8013fb6 <ssl_write_client_hello+0x186>
        *p++ = ssl->session_negotiate->id[i];
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa2:	1c5a      	adds	r2, r3, #1
 8013fa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fa8:	440a      	add	r2, r1
 8013faa:	320c      	adds	r2, #12
 8013fac:	7812      	ldrb	r2, [r2, #0]
 8013fae:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < n; i++ )
 8013fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fb2:	3301      	adds	r3, #1
 8013fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8013fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d3ee      	bcc.n	8013f9c <ssl_write_client_hello+0x16c>

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 8013fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc0:	9301      	str	r3, [sp, #4]
 8013fc2:	4b40      	ldr	r3, [pc, #256]	; (80140c4 <ssl_write_client_hello+0x294>)
 8013fc4:	9300      	str	r3, [sp, #0]
 8013fc6:	f240 333e 	movw	r3, #830	; 0x33e
 8013fca:	4a36      	ldr	r2, [pc, #216]	; (80140a4 <ssl_write_client_hello+0x274>)
 8013fcc:	2103      	movs	r1, #3
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f7f7 fe94 	bl	800bcfc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 8013fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd6:	3327      	adds	r3, #39	; 0x27
 8013fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fda:	9202      	str	r2, [sp, #8]
 8013fdc:	9301      	str	r3, [sp, #4]
 8013fde:	4b3a      	ldr	r3, [pc, #232]	; (80140c8 <ssl_write_client_hello+0x298>)
 8013fe0:	9300      	str	r3, [sp, #0]
 8013fe2:	f240 333f 	movw	r3, #831	; 0x33f
 8013fe6:	4a2f      	ldr	r2, [pc, #188]	; (80140a4 <ssl_write_client_hello+0x274>)
 8013fe8:	2103      	movs	r1, #3
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f7f7 ff78 	bl	800bee0 <mbedtls_debug_print_buf>
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	687a      	ldr	r2, [r7, #4]
 8013ff6:	68d2      	ldr	r2, [r2, #12]
 8013ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ffc:	61fb      	str	r3, [r7, #28]

    /* Skip writing ciphersuite length for now */
    n = 0;
 8013ffe:	2300      	movs	r3, #0
 8014000:	633b      	str	r3, [r7, #48]	; 0x30
    q = p;
 8014002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014004:	61bb      	str	r3, [r7, #24]
    p += 2;
 8014006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014008:	3302      	adds	r3, #2
 801400a:	62fb      	str	r3, [r7, #44]	; 0x2c

    for( i = 0; ciphersuites[i] != 0; i++ )
 801400c:	2300      	movs	r3, #0
 801400e:	637b      	str	r3, [r7, #52]	; 0x34
 8014010:	e062      	b.n	80140d8 <ssl_write_client_hello+0x2a8>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 8014012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014014:	009b      	lsls	r3, r3, #2
 8014016:	69fa      	ldr	r2, [r7, #28]
 8014018:	4413      	add	r3, r2
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	4618      	mov	r0, r3
 801401e:	f7ff fd9d 	bl	8013b5c <mbedtls_ssl_ciphersuite_from_id>
 8014022:	6138      	str	r0, [r7, #16]

        if( ciphersuite_info == NULL )
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d037      	beq.n	801409a <ssl_write_client_hello+0x26a>
            continue;

        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	691b      	ldr	r3, [r3, #16]
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	6812      	ldr	r2, [r2, #0]
 8014032:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 8014036:	4293      	cmp	r3, r2
 8014038:	dc4a      	bgt.n	80140d0 <ssl_write_client_hello+0x2a0>
            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	699b      	ldr	r3, [r3, #24]
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	6812      	ldr	r2, [r2, #0]
 8014042:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 8014046:	4293      	cmp	r3, r2
 8014048:	db42      	blt.n	80140d0 <ssl_write_client_hello+0x2a0>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&
            mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )
            continue;
#endif

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 801404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801404c:	009b      	lsls	r3, r3, #2
 801404e:	69fa      	ldr	r2, [r7, #28]
 8014050:	4413      	add	r3, r2
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	9301      	str	r3, [sp, #4]
 8014056:	4b1d      	ldr	r3, [pc, #116]	; (80140cc <ssl_write_client_hello+0x29c>)
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	f240 3381 	movw	r3, #897	; 0x381
 801405e:	4a11      	ldr	r2, [pc, #68]	; (80140a4 <ssl_write_client_hello+0x274>)
 8014060:	2103      	movs	r1, #3
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f7f7 fe4a 	bl	800bcfc <mbedtls_debug_print_msg>
                                    ciphersuites[i] ) );

        n++;
 8014068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801406a:	3301      	adds	r3, #1
 801406c:	633b      	str	r3, [r7, #48]	; 0x30
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 801406e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	69fa      	ldr	r2, [r7, #28]
 8014074:	4413      	add	r3, r2
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	1219      	asrs	r1, r3, #8
 801407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407c:	1c5a      	adds	r2, r3, #1
 801407e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014080:	b2ca      	uxtb	r2, r1
 8014082:	701a      	strb	r2, [r3, #0]
        *p++ = (unsigned char)( ciphersuites[i]      );
 8014084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	69fa      	ldr	r2, [r7, #28]
 801408a:	4413      	add	r3, r2
 801408c:	6819      	ldr	r1, [r3, #0]
 801408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014090:	1c5a      	adds	r2, r3, #1
 8014092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014094:	b2ca      	uxtb	r2, r1
 8014096:	701a      	strb	r2, [r3, #0]
 8014098:	e01b      	b.n	80140d2 <ssl_write_client_hello+0x2a2>
            continue;
 801409a:	bf00      	nop
 801409c:	e019      	b.n	80140d2 <ssl_write_client_hello+0x2a2>
 801409e:	bf00      	nop
 80140a0:	08022c08 	.word	0x08022c08
 80140a4:	08022b94 	.word	0x08022b94
 80140a8:	08022c20 	.word	0x08022c20
 80140ac:	ffff8c00 	.word	0xffff8c00
 80140b0:	08022c30 	.word	0x08022c30
 80140b4:	ffff8f00 	.word	0xffff8f00
 80140b8:	08022c88 	.word	0x08022c88
 80140bc:	08022cac 	.word	0x08022cac
 80140c0:	08022cc0 	.word	0x08022cc0
 80140c4:	08022cdc 	.word	0x08022cdc
 80140c8:	08022d00 	.word	0x08022d00
 80140cc:	08022d1c 	.word	0x08022d1c
            continue;
 80140d0:	bf00      	nop
    for( i = 0; ciphersuites[i] != 0; i++ )
 80140d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d4:	3301      	adds	r3, #1
 80140d6:	637b      	str	r3, [r7, #52]	; 0x34
 80140d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	69fa      	ldr	r2, [r7, #28]
 80140de:	4413      	add	r3, r2
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d195      	bne.n	8014012 <ssl_write_client_hello+0x1e2>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites (excluding SCSVs)", n ) );
 80140e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e8:	9301      	str	r3, [sp, #4]
 80140ea:	4b6f      	ldr	r3, [pc, #444]	; (80142a8 <ssl_write_client_hello+0x478>)
 80140ec:	9300      	str	r3, [sp, #0]
 80140ee:	f240 3389 	movw	r3, #905	; 0x389
 80140f2:	4a6e      	ldr	r2, [pc, #440]	; (80142ac <ssl_write_client_hello+0x47c>)
 80140f4:	2103      	movs	r1, #3
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f7f7 fe00 	bl	800bcfc <mbedtls_debug_print_msg>
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
 80140fc:	4b6c      	ldr	r3, [pc, #432]	; (80142b0 <ssl_write_client_hello+0x480>)
 80140fe:	9300      	str	r3, [sp, #0]
 8014100:	f240 3392 	movw	r3, #914	; 0x392
 8014104:	4a69      	ldr	r2, [pc, #420]	; (80142ac <ssl_write_client_hello+0x47c>)
 8014106:	2103      	movs	r1, #3
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7f7 fdf7 	bl	800bcfc <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 801410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014110:	1c5a      	adds	r2, r3, #1
 8014112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014114:	2200      	movs	r2, #0
 8014116:	701a      	strb	r2, [r3, #0]
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 8014118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411a:	1c5a      	adds	r2, r3, #1
 801411c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801411e:	22ff      	movs	r2, #255	; 0xff
 8014120:	701a      	strb	r2, [r3, #0]
        n++;
 8014122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014124:	3301      	adds	r3, #1
 8014126:	633b      	str	r3, [r7, #48]	; 0x30
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 8014128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412a:	09d9      	lsrs	r1, r3, #7
 801412c:	69bb      	ldr	r3, [r7, #24]
 801412e:	1c5a      	adds	r2, r3, #1
 8014130:	61ba      	str	r2, [r7, #24]
 8014132:	b2ca      	uxtb	r2, r1
 8014134:	701a      	strb	r2, [r3, #0]
    *q++ = (unsigned char)( n << 1 );
 8014136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014138:	b2da      	uxtb	r2, r3
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	1c59      	adds	r1, r3, #1
 801413e:	61b9      	str	r1, [r7, #24]
 8014140:	0052      	lsls	r2, r2, #1
 8014142:	b2d2      	uxtb	r2, r2
 8014144:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_ZLIB_SUPPORT)
    offer_compress = 1;
#else
    offer_compress = 0;
 8014146:	2300      	movs	r3, #0
 8014148:	75fb      	strb	r3, [r7, #23]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        offer_compress = 0;
#endif

    if( offer_compress )
 801414a:	7dfb      	ldrb	r3, [r7, #23]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d027      	beq.n	80141a0 <ssl_write_client_hello+0x370>
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 2 ) );
 8014150:	2302      	movs	r3, #2
 8014152:	9301      	str	r3, [sp, #4]
 8014154:	4b57      	ldr	r3, [pc, #348]	; (80142b4 <ssl_write_client_hello+0x484>)
 8014156:	9300      	str	r3, [sp, #0]
 8014158:	f240 33b9 	movw	r3, #953	; 0x3b9
 801415c:	4a53      	ldr	r2, [pc, #332]	; (80142ac <ssl_write_client_hello+0x47c>)
 801415e:	2103      	movs	r1, #3
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f7f7 fdcb 	bl	800bcfc <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d %d",
 8014166:	2300      	movs	r3, #0
 8014168:	9302      	str	r3, [sp, #8]
 801416a:	2301      	movs	r3, #1
 801416c:	9301      	str	r3, [sp, #4]
 801416e:	4b52      	ldr	r3, [pc, #328]	; (80142b8 <ssl_write_client_hello+0x488>)
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	f240 33ba 	movw	r3, #954	; 0x3ba
 8014176:	4a4d      	ldr	r2, [pc, #308]	; (80142ac <ssl_write_client_hello+0x47c>)
 8014178:	2103      	movs	r1, #3
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7f7 fdbe 	bl	800bcfc <mbedtls_debug_print_msg>
                            MBEDTLS_SSL_COMPRESS_DEFLATE, MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 2;
 8014180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014182:	1c5a      	adds	r2, r3, #1
 8014184:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014186:	2202      	movs	r2, #2
 8014188:	701a      	strb	r2, [r3, #0]
        *p++ = MBEDTLS_SSL_COMPRESS_DEFLATE;
 801418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418c:	1c5a      	adds	r2, r3, #1
 801418e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014190:	2201      	movs	r2, #1
 8014192:	701a      	strb	r2, [r3, #0]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 8014194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014196:	1c5a      	adds	r2, r3, #1
 8014198:	62fa      	str	r2, [r7, #44]	; 0x2c
 801419a:	2200      	movs	r2, #0
 801419c:	701a      	strb	r2, [r3, #0]
 801419e:	e01f      	b.n	80141e0 <ssl_write_client_hello+0x3b0>
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 80141a0:	2301      	movs	r3, #1
 80141a2:	9301      	str	r3, [sp, #4]
 80141a4:	4b43      	ldr	r3, [pc, #268]	; (80142b4 <ssl_write_client_hello+0x484>)
 80141a6:	9300      	str	r3, [sp, #0]
 80141a8:	f240 33c3 	movw	r3, #963	; 0x3c3
 80141ac:	4a3f      	ldr	r2, [pc, #252]	; (80142ac <ssl_write_client_hello+0x47c>)
 80141ae:	2103      	movs	r1, #3
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f7f7 fda3 	bl	800bcfc <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 80141b6:	2300      	movs	r3, #0
 80141b8:	9301      	str	r3, [sp, #4]
 80141ba:	4b40      	ldr	r3, [pc, #256]	; (80142bc <ssl_write_client_hello+0x48c>)
 80141bc:	9300      	str	r3, [sp, #0]
 80141be:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 80141c2:	4a3a      	ldr	r2, [pc, #232]	; (80142ac <ssl_write_client_hello+0x47c>)
 80141c4:	2103      	movs	r1, #3
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f7f7 fd98 	bl	800bcfc <mbedtls_debug_print_msg>
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 80141cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ce:	1c5a      	adds	r2, r3, #1
 80141d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80141d2:	2201      	movs	r2, #1
 80141d4:	701a      	strb	r2, [r3, #0]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 80141d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d8:	1c5a      	adds	r2, r3, #1
 80141da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80141dc:	2200      	movs	r2, #0
 80141de:	701a      	strb	r2, [r3, #0]
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 80141e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e2:	3302      	adds	r3, #2
 80141e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141e6:	4413      	add	r3, r2
 80141e8:	f107 020c 	add.w	r2, r7, #12
 80141ec:	4619      	mov	r1, r3
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f7ff fd50 	bl	8013c94 <ssl_write_signature_algorithms_ext>
    ext_len += olen;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141f8:	4413      	add	r3, r2
 80141fa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    /* olen unused if all extensions are disabled */
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 80141fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fe:	9301      	str	r3, [sp, #4]
 8014200:	4b2f      	ldr	r3, [pc, #188]	; (80142c0 <ssl_write_client_hello+0x490>)
 8014202:	9300      	str	r3, [sp, #0]
 8014204:	f240 430e 	movw	r3, #1038	; 0x40e
 8014208:	4a28      	ldr	r2, [pc, #160]	; (80142ac <ssl_write_client_hello+0x47c>)
 801420a:	2103      	movs	r1, #3
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f7f7 fd75 	bl	800bcfc <mbedtls_debug_print_msg>
                   ext_len ) );

    if( ext_len > 0 )
 8014212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014214:	2b00      	cmp	r3, #0
 8014216:	d010      	beq.n	801423a <ssl_write_client_hello+0x40a>
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 8014218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421a:	0a19      	lsrs	r1, r3, #8
 801421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421e:	1c5a      	adds	r2, r3, #1
 8014220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014222:	b2ca      	uxtb	r2, r1
 8014224:	701a      	strb	r2, [r3, #0]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 8014226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014228:	1c5a      	adds	r2, r3, #1
 801422a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801422c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801422e:	b2d2      	uxtb	r2, r2
 8014230:	701a      	strb	r2, [r3, #0]
        p += ext_len;
 8014232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014236:	4413      	add	r3, r2
 8014238:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    ssl->out_msglen  = p - buf;
 801423a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	461a      	mov	r2, r3
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2216      	movs	r2, #22
 801424c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014256:	2201      	movs	r2, #1
 8014258:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	1c5a      	adds	r2, r3, #1
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f003 fa13 	bl	8017690 <mbedtls_ssl_write_record>
 801426a:	6238      	str	r0, [r7, #32]
 801426c:	6a3b      	ldr	r3, [r7, #32]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d00c      	beq.n	801428c <ssl_write_client_hello+0x45c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8014272:	6a3b      	ldr	r3, [r7, #32]
 8014274:	9301      	str	r3, [sp, #4]
 8014276:	4b13      	ldr	r3, [pc, #76]	; (80142c4 <ssl_write_client_hello+0x494>)
 8014278:	9300      	str	r3, [sp, #0]
 801427a:	f240 4325 	movw	r3, #1061	; 0x425
 801427e:	4a0b      	ldr	r2, [pc, #44]	; (80142ac <ssl_write_client_hello+0x47c>)
 8014280:	2101      	movs	r1, #1
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f7f7 fdc0 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8014288:	6a3b      	ldr	r3, [r7, #32]
 801428a:	e009      	b.n	80142a0 <ssl_write_client_hello+0x470>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 801428c:	4b0e      	ldr	r3, [pc, #56]	; (80142c8 <ssl_write_client_hello+0x498>)
 801428e:	9300      	str	r3, [sp, #0]
 8014290:	f240 4329 	movw	r3, #1065	; 0x429
 8014294:	4a05      	ldr	r2, [pc, #20]	; (80142ac <ssl_write_client_hello+0x47c>)
 8014296:	2102      	movs	r1, #2
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f7f7 fd2f 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 801429e:	2300      	movs	r3, #0
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3738      	adds	r7, #56	; 0x38
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	08022d40 	.word	0x08022d40
 80142ac:	08022b94 	.word	0x08022b94
 80142b0:	08022d74 	.word	0x08022d74
 80142b4:	08022d9c 	.word	0x08022d9c
 80142b8:	08022dbc 	.word	0x08022dbc
 80142bc:	08022de0 	.word	0x08022de0
 80142c0:	08022e00 	.word	0x08022e00
 80142c4:	08022e2c 	.word	0x08022e2c
 80142c8:	08022e48 	.word	0x08022e48

080142cc <ssl_parse_renegotiation_info>:

static int ssl_parse_renegotiation_info( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b086      	sub	sp, #24
 80142d0:	af02      	add	r7, sp, #8
 80142d2:	60f8      	str	r0, [r7, #12]
 80142d4:	60b9      	str	r1, [r7, #8]
 80142d6:	607a      	str	r2, [r7, #4]
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2b01      	cmp	r3, #1
 80142dc:	d103      	bne.n	80142e6 <ssl_parse_renegotiation_info+0x1a>
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d00f      	beq.n	8014306 <ssl_parse_renegotiation_info+0x3a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 80142e6:	4b0c      	ldr	r3, [pc, #48]	; (8014318 <ssl_parse_renegotiation_info+0x4c>)
 80142e8:	9300      	str	r3, [sp, #0]
 80142ea:	f44f 6389 	mov.w	r3, #1096	; 0x448
 80142ee:	4a0b      	ldr	r2, [pc, #44]	; (801431c <ssl_parse_renegotiation_info+0x50>)
 80142f0:	2101      	movs	r1, #1
 80142f2:	68f8      	ldr	r0, [r7, #12]
 80142f4:	f7f7 fd02 	bl	800bcfc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80142f8:	2228      	movs	r2, #40	; 0x28
 80142fa:	2102      	movs	r1, #2
 80142fc:	68f8      	ldr	r0, [r7, #12]
 80142fe:	f003 fe71 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8014302:	4b07      	ldr	r3, [pc, #28]	; (8014320 <ssl_parse_renegotiation_info+0x54>)
 8014304:	e004      	b.n	8014310 <ssl_parse_renegotiation_info+0x44>
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	2201      	movs	r2, #1
 801430a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    return( 0 );
 801430e:	2300      	movs	r3, #0
}
 8014310:	4618      	mov	r0, r3
 8014312:	3710      	adds	r7, #16
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	08022e60 	.word	0x08022e60
 801431c:	08022b94 	.word	0x08022b94
 8014320:	ffff8680 	.word	0xffff8680

08014324 <ssl_parse_server_hello>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

static int ssl_parse_server_hello( mbedtls_ssl_context *ssl )
{
 8014324:	b5b0      	push	{r4, r5, r7, lr}
 8014326:	b096      	sub	sp, #88	; 0x58
 8014328:	af08      	add	r7, sp, #32
 801432a:	6078      	str	r0, [r7, #4]
    int accept_comp;
#endif
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    int renegotiation_info_seen = 0;
#endif
    int handshake_failure = 0;
 801432c:	2300      	movs	r3, #0
 801432e:	62bb      	str	r3, [r7, #40]	; 0x28
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 8014330:	4b87      	ldr	r3, [pc, #540]	; (8014550 <ssl_parse_server_hello+0x22c>)
 8014332:	9300      	str	r3, [sp, #0]
 8014334:	f240 53b2 	movw	r3, #1458	; 0x5b2
 8014338:	4a86      	ldr	r2, [pc, #536]	; (8014554 <ssl_parse_server_hello+0x230>)
 801433a:	2102      	movs	r1, #2
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f7f7 fcdd 	bl	800bcfc <mbedtls_debug_print_msg>

    buf = ssl->in_msg;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014346:	627b      	str	r3, [r7, #36]	; 0x24

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f003 fcaf 	bl	8017cac <mbedtls_ssl_read_record>
 801434e:	6238      	str	r0, [r7, #32]
 8014350:	6a3b      	ldr	r3, [r7, #32]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d00c      	beq.n	8014370 <ssl_parse_server_hello+0x4c>
    {
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8014356:	6a3b      	ldr	r3, [r7, #32]
 8014358:	9301      	str	r3, [sp, #4]
 801435a:	4b7f      	ldr	r3, [pc, #508]	; (8014558 <ssl_parse_server_hello+0x234>)
 801435c:	9300      	str	r3, [sp, #0]
 801435e:	f240 53b9 	movw	r3, #1465	; 0x5b9
 8014362:	4a7c      	ldr	r2, [pc, #496]	; (8014554 <ssl_parse_server_hello+0x230>)
 8014364:	2101      	movs	r1, #1
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f7f7 fd4e 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 801436c:	6a3b      	ldr	r3, [r7, #32]
 801436e:	e384      	b.n	8014a7a <ssl_parse_server_hello+0x756>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014374:	2b16      	cmp	r3, #22
 8014376:	d00f      	beq.n	8014398 <ssl_parse_server_hello+0x74>
            ssl->keep_current_message = 1;
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014378:	4b78      	ldr	r3, [pc, #480]	; (801455c <ssl_parse_server_hello+0x238>)
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	f240 53d3 	movw	r3, #1491	; 0x5d3
 8014380:	4a74      	ldr	r2, [pc, #464]	; (8014554 <ssl_parse_server_hello+0x230>)
 8014382:	2101      	movs	r1, #1
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f7f7 fcb9 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801438a:	220a      	movs	r2, #10
 801438c:	2102      	movs	r1, #2
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f003 fe28 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014394:	4b72      	ldr	r3, [pc, #456]	; (8014560 <ssl_parse_server_hello+0x23c>)
 8014396:	e370      	b.n	8014a7a <ssl_parse_server_hello+0x756>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f7ff fc6e 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 80143a2:	4603      	mov	r3, r0
 80143a4:	3326      	adds	r3, #38	; 0x26
 80143a6:	429c      	cmp	r4, r3
 80143a8:	d303      	bcc.n	80143b2 <ssl_parse_server_hello+0x8e>
        buf[0] != MBEDTLS_SSL_HS_SERVER_HELLO )
 80143aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ac:	781b      	ldrb	r3, [r3, #0]
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 80143ae:	2b02      	cmp	r3, #2
 80143b0:	d00f      	beq.n	80143d2 <ssl_parse_server_hello+0xae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80143b2:	4b6a      	ldr	r3, [pc, #424]	; (801455c <ssl_parse_server_hello+0x238>)
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	f240 53ef 	movw	r3, #1519	; 0x5ef
 80143ba:	4a66      	ldr	r2, [pc, #408]	; (8014554 <ssl_parse_server_hello+0x230>)
 80143bc:	2101      	movs	r1, #1
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f7f7 fc9c 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80143c4:	2232      	movs	r2, #50	; 0x32
 80143c6:	2102      	movs	r1, #2
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f003 fe0b 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80143ce:	4b65      	ldr	r3, [pc, #404]	; (8014564 <ssl_parse_server_hello+0x240>)
 80143d0:	e353      	b.n	8014a7a <ssl_parse_server_hello+0x756>
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f7ff fc53 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 80143d8:	4602      	mov	r2, r0
 80143da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143dc:	4413      	add	r3, r2
 80143de:	627b      	str	r3, [r7, #36]	; 0x24

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 80143e0:	2302      	movs	r3, #2
 80143e2:	9302      	str	r3, [sp, #8]
 80143e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e6:	9301      	str	r3, [sp, #4]
 80143e8:	4b5f      	ldr	r3, [pc, #380]	; (8014568 <ssl_parse_server_hello+0x244>)
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	f240 6302 	movw	r3, #1538	; 0x602
 80143f0:	4a58      	ldr	r2, [pc, #352]	; (8014554 <ssl_parse_server_hello+0x230>)
 80143f2:	2103      	movs	r1, #3
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f7f7 fd73 	bl	800bee0 <mbedtls_debug_print_buf>
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f103 0008 	add.w	r0, r3, #8
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f103 010c 	add.w	r1, r3, #12
                      ssl->conf->transport, buf + 0 );
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801440e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8014412:	b2db      	uxtb	r3, r3
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 8014414:	461a      	mov	r2, r3
 8014416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014418:	f005 fc36 	bl	8019c88 <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	689b      	ldr	r3, [r3, #8]
 8014420:	687a      	ldr	r2, [r7, #4]
 8014422:	6812      	ldr	r2, [r2, #0]
 8014424:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
 8014428:	4293      	cmp	r3, r2
 801442a:	db17      	blt.n	801445c <ssl_parse_server_hello+0x138>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	687a      	ldr	r2, [r7, #4]
 8014432:	6812      	ldr	r2, [r2, #0]
 8014434:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8014438:	4293      	cmp	r3, r2
 801443a:	db0f      	blt.n	801445c <ssl_parse_server_hello+0x138>
        ssl->major_ver > ssl->conf->max_major_ver ||
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	689b      	ldr	r3, [r3, #8]
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	6812      	ldr	r2, [r2, #0]
 8014444:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8014448:	4293      	cmp	r3, r2
 801444a:	dc07      	bgt.n	801445c <ssl_parse_server_hello+0x138>
        ssl->minor_ver > ssl->conf->max_minor_ver )
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	68db      	ldr	r3, [r3, #12]
 8014450:	687a      	ldr	r2, [r7, #4]
 8014452:	6812      	ldr	r2, [r2, #0]
 8014454:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
        ssl->major_ver > ssl->conf->max_major_ver ||
 8014458:	4293      	cmp	r3, r2
 801445a:	dd2c      	ble.n	80144b6 <ssl_parse_server_hello+0x192>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8014464:	4618      	mov	r0, r3
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 801446e:	461c      	mov	r4, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	689b      	ldr	r3, [r3, #8]
 8014474:	687a      	ldr	r2, [r7, #4]
 8014476:	68d2      	ldr	r2, [r2, #12]
 8014478:	6879      	ldr	r1, [r7, #4]
 801447a:	6809      	ldr	r1, [r1, #0]
 801447c:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
 8014480:	460d      	mov	r5, r1
 8014482:	6879      	ldr	r1, [r7, #4]
 8014484:	6809      	ldr	r1, [r1, #0]
 8014486:	f891 104d 	ldrb.w	r1, [r1, #77]	; 0x4d
 801448a:	9106      	str	r1, [sp, #24]
 801448c:	9505      	str	r5, [sp, #20]
 801448e:	9204      	str	r2, [sp, #16]
 8014490:	9303      	str	r3, [sp, #12]
 8014492:	9402      	str	r4, [sp, #8]
 8014494:	9001      	str	r0, [sp, #4]
 8014496:	4b35      	ldr	r3, [pc, #212]	; (801456c <ssl_parse_server_hello+0x248>)
 8014498:	9300      	str	r3, [sp, #0]
 801449a:	f240 630b 	movw	r3, #1547	; 0x60b
 801449e:	4a2d      	ldr	r2, [pc, #180]	; (8014554 <ssl_parse_server_hello+0x230>)
 80144a0:	2101      	movs	r1, #1
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7f7 fc2a 	bl	800bcfc <mbedtls_debug_print_msg>
                            " min: [%d:%d], server: [%d:%d], max: [%d:%d]",
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80144a8:	2246      	movs	r2, #70	; 0x46
 80144aa:	2102      	movs	r1, #2
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f003 fd99 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 80144b2:	4b2f      	ldr	r3, [pc, #188]	; (8014570 <ssl_parse_server_hello+0x24c>)
 80144b4:	e2e1      	b.n	8014a7a <ssl_parse_server_hello+0x756>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu",
 80144b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b8:	3302      	adds	r3, #2
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	061a      	lsls	r2, r3, #24
 80144be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c0:	3303      	adds	r3, #3
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	041b      	lsls	r3, r3, #16
 80144c6:	431a      	orrs	r2, r3
 80144c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ca:	3304      	adds	r3, #4
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	021b      	lsls	r3, r3, #8
 80144d0:	4313      	orrs	r3, r2
 80144d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144d4:	3205      	adds	r2, #5
 80144d6:	7812      	ldrb	r2, [r2, #0]
 80144d8:	4313      	orrs	r3, r2
 80144da:	9301      	str	r3, [sp, #4]
 80144dc:	4b25      	ldr	r3, [pc, #148]	; (8014574 <ssl_parse_server_hello+0x250>)
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	f240 6317 	movw	r3, #1559	; 0x617
 80144e4:	4a1b      	ldr	r2, [pc, #108]	; (8014554 <ssl_parse_server_hello+0x230>)
 80144e6:	2103      	movs	r1, #3
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f7f7 fc07 	bl	800bcfc <mbedtls_debug_print_msg>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144f2:	3388      	adds	r3, #136	; 0x88
 80144f4:	f103 0020 	add.w	r0, r3, #32
 80144f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fa:	3302      	adds	r3, #2
 80144fc:	2220      	movs	r2, #32
 80144fe:	4619      	mov	r1, r3
 8014500:	f00a f868 	bl	801e5d4 <memcpy>

    n = buf[34];
 8014504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014506:	3322      	adds	r3, #34	; 0x22
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	61fb      	str	r3, [r7, #28]

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 801450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450e:	3302      	adds	r3, #2
 8014510:	2220      	movs	r2, #32
 8014512:	9202      	str	r2, [sp, #8]
 8014514:	9301      	str	r3, [sp, #4]
 8014516:	4b18      	ldr	r3, [pc, #96]	; (8014578 <ssl_parse_server_hello+0x254>)
 8014518:	9300      	str	r3, [sp, #0]
 801451a:	f240 6321 	movw	r3, #1569	; 0x621
 801451e:	4a0d      	ldr	r2, [pc, #52]	; (8014554 <ssl_parse_server_hello+0x230>)
 8014520:	2103      	movs	r1, #3
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f7f7 fcdc 	bl	800bee0 <mbedtls_debug_print_buf>

    if( n > 32 )
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	2b20      	cmp	r3, #32
 801452c:	d926      	bls.n	801457c <ssl_parse_server_hello+0x258>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801452e:	4b0b      	ldr	r3, [pc, #44]	; (801455c <ssl_parse_server_hello+0x238>)
 8014530:	9300      	str	r3, [sp, #0]
 8014532:	f240 6325 	movw	r3, #1573	; 0x625
 8014536:	4a07      	ldr	r2, [pc, #28]	; (8014554 <ssl_parse_server_hello+0x230>)
 8014538:	2101      	movs	r1, #1
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f7f7 fbde 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014540:	2232      	movs	r2, #50	; 0x32
 8014542:	2102      	movs	r1, #2
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f003 fd4d 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801454a:	4b06      	ldr	r3, [pc, #24]	; (8014564 <ssl_parse_server_hello+0x240>)
 801454c:	e295      	b.n	8014a7a <ssl_parse_server_hello+0x756>
 801454e:	bf00      	nop
 8014550:	08022e84 	.word	0x08022e84
 8014554:	08022b94 	.word	0x08022b94
 8014558:	08022e9c 	.word	0x08022e9c
 801455c:	08022eb4 	.word	0x08022eb4
 8014560:	ffff8900 	.word	0xffff8900
 8014564:	ffff8680 	.word	0xffff8680
 8014568:	08022ed0 	.word	0x08022ed0
 801456c:	08022ee8 	.word	0x08022ee8
 8014570:	ffff9180 	.word	0xffff9180
 8014574:	08022f34 	.word	0x08022f34
 8014578:	08022f54 	.word	0x08022f54
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f7ff fb7c 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8014586:	4602      	mov	r2, r0
 8014588:	69fb      	ldr	r3, [r7, #28]
 801458a:	4413      	add	r3, r2
 801458c:	3327      	adds	r3, #39	; 0x27
 801458e:	429c      	cmp	r4, r3
 8014590:	d92f      	bls.n	80145f2 <ssl_parse_server_hello+0x2ce>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 8014592:	69fb      	ldr	r3, [r7, #28]
 8014594:	3326      	adds	r3, #38	; 0x26
 8014596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014598:	4413      	add	r3, r2
 801459a:	781b      	ldrb	r3, [r3, #0]
 801459c:	021b      	lsls	r3, r3, #8
                  | ( buf[39 + n]       ) );
 801459e:	69fa      	ldr	r2, [r7, #28]
 80145a0:	3227      	adds	r2, #39	; 0x27
 80145a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80145a4:	440a      	add	r2, r1
 80145a6:	7812      	ldrb	r2, [r2, #0]
 80145a8:	4313      	orrs	r3, r2
        ext_len = ( ( buf[38 + n] <<  8 )
 80145aa:	633b      	str	r3, [r7, #48]	; 0x30

        if( ( ext_len > 0 && ext_len < 4 ) ||
 80145ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d002      	beq.n	80145b8 <ssl_parse_server_hello+0x294>
 80145b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b4:	2b03      	cmp	r3, #3
 80145b6:	d90c      	bls.n	80145d2 <ssl_parse_server_hello+0x2ae>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f7ff fb5e 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 80145c2:	4602      	mov	r2, r0
 80145c4:	69fb      	ldr	r3, [r7, #28]
 80145c6:	441a      	add	r2, r3
 80145c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ca:	4413      	add	r3, r2
 80145cc:	3328      	adds	r3, #40	; 0x28
        if( ( ext_len > 0 && ext_len < 4 ) ||
 80145ce:	429c      	cmp	r4, r3
 80145d0:	d02d      	beq.n	801462e <ssl_parse_server_hello+0x30a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80145d2:	4b80      	ldr	r3, [pc, #512]	; (80147d4 <ssl_parse_server_hello+0x4b0>)
 80145d4:	9300      	str	r3, [sp, #0]
 80145d6:	f240 6333 	movw	r3, #1587	; 0x633
 80145da:	4a7f      	ldr	r2, [pc, #508]	; (80147d8 <ssl_parse_server_hello+0x4b4>)
 80145dc:	2101      	movs	r1, #1
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f7f7 fb8c 	bl	800bcfc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80145e4:	2232      	movs	r2, #50	; 0x32
 80145e6:	2102      	movs	r1, #2
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f003 fcfb 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80145ee:	4b7b      	ldr	r3, [pc, #492]	; (80147dc <ssl_parse_server_hello+0x4b8>)
 80145f0:	e243      	b.n	8014a7a <ssl_parse_server_hello+0x756>
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f7ff fb41 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 80145fc:	4602      	mov	r2, r0
 80145fe:	69fb      	ldr	r3, [r7, #28]
 8014600:	4413      	add	r3, r2
 8014602:	3326      	adds	r3, #38	; 0x26
 8014604:	429c      	cmp	r4, r3
 8014606:	d102      	bne.n	801460e <ssl_parse_server_hello+0x2ea>
    {
        ext_len = 0;
 8014608:	2300      	movs	r3, #0
 801460a:	633b      	str	r3, [r7, #48]	; 0x30
 801460c:	e00f      	b.n	801462e <ssl_parse_server_hello+0x30a>
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801460e:	4b71      	ldr	r3, [pc, #452]	; (80147d4 <ssl_parse_server_hello+0x4b0>)
 8014610:	9300      	str	r3, [sp, #0]
 8014612:	f240 633f 	movw	r3, #1599	; 0x63f
 8014616:	4a70      	ldr	r2, [pc, #448]	; (80147d8 <ssl_parse_server_hello+0x4b4>)
 8014618:	2101      	movs	r1, #1
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f7f7 fb6e 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014620:	2232      	movs	r2, #50	; 0x32
 8014622:	2102      	movs	r1, #2
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f003 fcdd 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801462a:	4b6c      	ldr	r3, [pc, #432]	; (80147dc <ssl_parse_server_hello+0x4b8>)
 801462c:	e225      	b.n	8014a7a <ssl_parse_server_hello+0x756>
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801462e:	69fb      	ldr	r3, [r7, #28]
 8014630:	3323      	adds	r3, #35	; 0x23
 8014632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014634:	4413      	add	r3, r2
 8014636:	781b      	ldrb	r3, [r3, #0]
 8014638:	021b      	lsls	r3, r3, #8
 801463a:	69fa      	ldr	r2, [r7, #28]
 801463c:	3224      	adds	r2, #36	; 0x24
 801463e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014640:	440a      	add	r2, r1
 8014642:	7812      	ldrb	r2, [r2, #0]
 8014644:	4313      	orrs	r3, r2
 8014646:	637b      	str	r3, [r7, #52]	; 0x34

    /*
     * Read and check compression
     */
    comp = buf[37 + n];
 8014648:	69fb      	ldr	r3, [r7, #28]
 801464a:	3325      	adds	r3, #37	; 0x25
 801464c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801464e:	4413      	add	r3, r2
 8014650:	781b      	ldrb	r3, [r3, #0]
 8014652:	76fb      	strb	r3, [r7, #27]
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 8014654:	7efb      	ldrb	r3, [r7, #27]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d011      	beq.n	801467e <ssl_parse_server_hello+0x35a>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 801465a:	7efb      	ldrb	r3, [r7, #27]
 801465c:	9301      	str	r3, [sp, #4]
 801465e:	4b60      	ldr	r3, [pc, #384]	; (80147e0 <ssl_parse_server_hello+0x4bc>)
 8014660:	9300      	str	r3, [sp, #0]
 8014662:	f240 635c 	movw	r3, #1628	; 0x65c
 8014666:	4a5c      	ldr	r2, [pc, #368]	; (80147d8 <ssl_parse_server_hello+0x4b4>)
 8014668:	2101      	movs	r1, #1
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f7f7 fb46 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014670:	222f      	movs	r2, #47	; 0x2f
 8014672:	2102      	movs	r1, #2
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f003 fcb5 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 801467a:	4b5a      	ldr	r3, [pc, #360]	; (80147e4 <ssl_parse_server_hello+0x4c0>)
 801467c:	e1fd      	b.n	8014a7a <ssl_parse_server_hello+0x756>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8014682:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014684:	f7ff fa6a 	bl	8013b5c <mbedtls_ssl_ciphersuite_from_id>
 8014688:	4603      	mov	r3, r0
 801468a:	6023      	str	r3, [r4, #0]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d111      	bne.n	80146ba <ssl_parse_server_hello+0x396>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 8014696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014698:	9301      	str	r3, [sp, #4]
 801469a:	4b53      	ldr	r3, [pc, #332]	; (80147e8 <ssl_parse_server_hello+0x4c4>)
 801469c:	9300      	str	r3, [sp, #0]
 801469e:	f240 6369 	movw	r3, #1641	; 0x669
 80146a2:	4a4d      	ldr	r2, [pc, #308]	; (80147d8 <ssl_parse_server_hello+0x4b4>)
 80146a4:	2101      	movs	r1, #1
 80146a6:	6878      	ldr	r0, [r7, #4]
 80146a8:	f7f7 fb28 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80146ac:	2250      	movs	r2, #80	; 0x50
 80146ae:	2102      	movs	r1, #2
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f003 fc97 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80146b6:	4b4d      	ldr	r3, [pc, #308]	; (80147ec <ssl_parse_server_hello+0x4c8>)
 80146b8:	e1df      	b.n	8014a7a <ssl_parse_server_hello+0x756>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	4619      	mov	r1, r3
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f004 f9ca 	bl	8018a5c <mbedtls_ssl_optimize_checksum>

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 80146c8:	69fb      	ldr	r3, [r7, #28]
 80146ca:	9301      	str	r3, [sp, #4]
 80146cc:	4b48      	ldr	r3, [pc, #288]	; (80147f0 <ssl_parse_server_hello+0x4cc>)
 80146ce:	9300      	str	r3, [sp, #0]
 80146d0:	f240 6371 	movw	r3, #1649	; 0x671
 80146d4:	4a40      	ldr	r2, [pc, #256]	; (80147d8 <ssl_parse_server_hello+0x4b4>)
 80146d6:	2103      	movs	r1, #3
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f7f7 fb0f 	bl	800bcfc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 80146de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e0:	3323      	adds	r3, #35	; 0x23
 80146e2:	69fa      	ldr	r2, [r7, #28]
 80146e4:	9202      	str	r2, [sp, #8]
 80146e6:	9301      	str	r3, [sp, #4]
 80146e8:	4b42      	ldr	r3, [pc, #264]	; (80147f4 <ssl_parse_server_hello+0x4d0>)
 80146ea:	9300      	str	r3, [sp, #0]
 80146ec:	f240 6372 	movw	r3, #1650	; 0x672
 80146f0:	4a39      	ldr	r2, [pc, #228]	; (80147d8 <ssl_parse_server_hello+0x4b4>)
 80146f2:	2103      	movs	r1, #3
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f7f7 fbf3 	bl	800bee0 <mbedtls_debug_print_buf>

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146fe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8014702:	2b00      	cmp	r3, #0
 8014704:	d021      	beq.n	801474a <ssl_parse_server_hello+0x426>
 8014706:	69fb      	ldr	r3, [r7, #28]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d01e      	beq.n	801474a <ssl_parse_server_hello+0x426>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014710:	681b      	ldr	r3, [r3, #0]
    if( ssl->handshake->resume == 0 || n == 0 ||
 8014712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014714:	429a      	cmp	r2, r3
 8014716:	d118      	bne.n	801474a <ssl_parse_server_hello+0x426>
        ssl->session_negotiate->compression != comp ||
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801471c:	685a      	ldr	r2, [r3, #4]
 801471e:	7efb      	ldrb	r3, [r7, #27]
        ssl->session_negotiate->ciphersuite != i ||
 8014720:	429a      	cmp	r2, r3
 8014722:	d112      	bne.n	801474a <ssl_parse_server_hello+0x426>
        ssl->session_negotiate->id_len != n ||
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014728:	689b      	ldr	r3, [r3, #8]
        ssl->session_negotiate->compression != comp ||
 801472a:	69fa      	ldr	r2, [r7, #28]
 801472c:	429a      	cmp	r2, r3
 801472e:	d10c      	bne.n	801474a <ssl_parse_server_hello+0x426>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014734:	f103 000c 	add.w	r0, r3, #12
 8014738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473a:	3323      	adds	r3, #35	; 0x23
 801473c:	69fa      	ldr	r2, [r7, #28]
 801473e:	4619      	mov	r1, r3
 8014740:	f009 ff38 	bl	801e5b4 <memcmp>
 8014744:	4603      	mov	r3, r0
        ssl->session_negotiate->id_len != n ||
 8014746:	2b00      	cmp	r3, #0
 8014748:	d020      	beq.n	801478c <ssl_parse_server_hello+0x468>
    {
        ssl->state++;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	685b      	ldr	r3, [r3, #4]
 801474e:	1c5a      	adds	r2, r3, #1
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	605a      	str	r2, [r3, #4]
        ssl->handshake->resume = 0;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014758:	2200      	movs	r2, #0
 801475a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014764:	601a      	str	r2, [r3, #0]
        ssl->session_negotiate->compression = comp;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801476a:	7efa      	ldrb	r2, [r7, #27]
 801476c:	605a      	str	r2, [r3, #4]
        ssl->session_negotiate->id_len = n;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014772:	69fa      	ldr	r2, [r7, #28]
 8014774:	609a      	str	r2, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801477a:	f103 000c 	add.w	r0, r3, #12
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	3323      	adds	r3, #35	; 0x23
 8014782:	69fa      	ldr	r2, [r7, #28]
 8014784:	4619      	mov	r1, r3
 8014786:	f009 ff25 	bl	801e5d4 <memcpy>
 801478a:	e01b      	b.n	80147c4 <ssl_parse_server_hello+0x4a0>
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	220c      	movs	r2, #12
 8014790:	605a      	str	r2, [r3, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f001 f9d2 	bl	8015b3c <mbedtls_ssl_derive_keys>
 8014798:	6238      	str	r0, [r7, #32]
 801479a:	6a3b      	ldr	r3, [r7, #32]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d011      	beq.n	80147c4 <ssl_parse_server_hello+0x4a0>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 80147a0:	6a3b      	ldr	r3, [r7, #32]
 80147a2:	9301      	str	r3, [sp, #4]
 80147a4:	4b14      	ldr	r3, [pc, #80]	; (80147f8 <ssl_parse_server_hello+0x4d4>)
 80147a6:	9300      	str	r3, [sp, #0]
 80147a8:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 80147ac:	4a0a      	ldr	r2, [pc, #40]	; (80147d8 <ssl_parse_server_hello+0x4b4>)
 80147ae:	2101      	movs	r1, #1
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f7f7 fb29 	bl	800be08 <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80147b6:	2250      	movs	r2, #80	; 0x50
 80147b8:	2102      	movs	r1, #2
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f003 fc12 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
            return( ret );
 80147c0:	6a3b      	ldr	r3, [r7, #32]
 80147c2:	e15a      	b.n	8014a7a <ssl_parse_server_hello+0x756>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147c8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d017      	beq.n	8014800 <ssl_parse_server_hello+0x4dc>
 80147d0:	4b0a      	ldr	r3, [pc, #40]	; (80147fc <ssl_parse_server_hello+0x4d8>)
 80147d2:	e016      	b.n	8014802 <ssl_parse_server_hello+0x4de>
 80147d4:	08022eb4 	.word	0x08022eb4
 80147d8:	08022b94 	.word	0x08022b94
 80147dc:	ffff8680 	.word	0xffff8680
 80147e0:	08022f70 	.word	0x08022f70
 80147e4:	ffff8f80 	.word	0xffff8f80
 80147e8:	08022f94 	.word	0x08022f94
 80147ec:	ffff8f00 	.word	0xffff8f00
 80147f0:	08022fb8 	.word	0x08022fb8
 80147f4:	08022fdc 	.word	0x08022fdc
 80147f8:	08022ff8 	.word	0x08022ff8
 80147fc:	08023010 	.word	0x08023010
 8014800:	4ba0      	ldr	r3, [pc, #640]	; (8014a84 <ssl_parse_server_hello+0x760>)
 8014802:	9301      	str	r3, [sp, #4]
 8014804:	4ba0      	ldr	r3, [pc, #640]	; (8014a88 <ssl_parse_server_hello+0x764>)
 8014806:	9300      	str	r3, [sp, #0]
 8014808:	f240 6397 	movw	r3, #1687	; 0x697
 801480c:	4a9f      	ldr	r2, [pc, #636]	; (8014a8c <ssl_parse_server_hello+0x768>)
 801480e:	2103      	movs	r1, #3
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7f7 fa73 	bl	800bcfc <mbedtls_debug_print_msg>
                   ssl->handshake->resume ? "a" : "no" ) );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 8014816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014818:	9301      	str	r3, [sp, #4]
 801481a:	4b9d      	ldr	r3, [pc, #628]	; (8014a90 <ssl_parse_server_hello+0x76c>)
 801481c:	9300      	str	r3, [sp, #0]
 801481e:	f240 639a 	movw	r3, #1690	; 0x69a
 8014822:	4a9a      	ldr	r2, [pc, #616]	; (8014a8c <ssl_parse_server_hello+0x768>)
 8014824:	2103      	movs	r1, #3
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f7f7 fa68 	bl	800bcfc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 801482c:	69fb      	ldr	r3, [r7, #28]
 801482e:	3325      	adds	r3, #37	; 0x25
 8014830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014832:	4413      	add	r3, r2
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	9301      	str	r3, [sp, #4]
 8014838:	4b96      	ldr	r3, [pc, #600]	; (8014a94 <ssl_parse_server_hello+0x770>)
 801483a:	9300      	str	r3, [sp, #0]
 801483c:	f240 639b 	movw	r3, #1691	; 0x69b
 8014840:	4a92      	ldr	r2, [pc, #584]	; (8014a8c <ssl_parse_server_hello+0x768>)
 8014842:	2103      	movs	r1, #3
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f7f7 fa59 	bl	800bcfc <mbedtls_debug_print_msg>

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	4618      	mov	r0, r3
 8014852:	f7ff f983 	bl	8013b5c <mbedtls_ssl_ciphersuite_from_id>
 8014856:	6178      	str	r0, [r7, #20]
    if( suite_info == NULL
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d10f      	bne.n	801487e <ssl_parse_server_hello+0x55a>
            || ( ssl->conf->arc4_disabled &&
                suite_info->cipher == MBEDTLS_CIPHER_ARC4_128 )
#endif
        )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801485e:	4b8e      	ldr	r3, [pc, #568]	; (8014a98 <ssl_parse_server_hello+0x774>)
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	f240 63a5 	movw	r3, #1701	; 0x6a5
 8014866:	4a89      	ldr	r2, [pc, #548]	; (8014a8c <ssl_parse_server_hello+0x768>)
 8014868:	2101      	movs	r1, #1
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f7f7 fa46 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014870:	222f      	movs	r2, #47	; 0x2f
 8014872:	2102      	movs	r1, #2
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f003 fbb5 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801487a:	4b88      	ldr	r3, [pc, #544]	; (8014a9c <ssl_parse_server_hello+0x778>)
 801487c:	e0fd      	b.n	8014a7a <ssl_parse_server_hello+0x756>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	9301      	str	r3, [sp, #4]
 8014884:	4b86      	ldr	r3, [pc, #536]	; (8014aa0 <ssl_parse_server_hello+0x77c>)
 8014886:	9300      	str	r3, [sp, #0]
 8014888:	f240 63ab 	movw	r3, #1707	; 0x6ab
 801488c:	4a7f      	ldr	r2, [pc, #508]	; (8014a8c <ssl_parse_server_hello+0x768>)
 801488e:	2103      	movs	r1, #3
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f7f7 fa33 	bl	800bcfc <mbedtls_debug_print_msg>

    i = 0;
 8014896:	2300      	movs	r3, #0
 8014898:	637b      	str	r3, [r7, #52]	; 0x34
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	68d2      	ldr	r2, [r2, #12]
 80148a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80148a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148a8:	009b      	lsls	r3, r3, #2
 80148aa:	4413      	add	r3, r2
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d10f      	bne.n	80148d2 <ssl_parse_server_hello+0x5ae>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80148b2:	4b79      	ldr	r3, [pc, #484]	; (8014a98 <ssl_parse_server_hello+0x774>)
 80148b4:	9300      	str	r3, [sp, #0]
 80148b6:	f240 63b2 	movw	r3, #1714	; 0x6b2
 80148ba:	4a74      	ldr	r2, [pc, #464]	; (8014a8c <ssl_parse_server_hello+0x768>)
 80148bc:	2101      	movs	r1, #1
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f7f7 fa1c 	bl	800bcfc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80148c4:	222f      	movs	r2, #47	; 0x2f
 80148c6:	2102      	movs	r1, #2
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f003 fb8b 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80148ce:	4b73      	ldr	r3, [pc, #460]	; (8014a9c <ssl_parse_server_hello+0x778>)
 80148d0:	e0d3      	b.n	8014a7a <ssl_parse_server_hello+0x756>
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	68d2      	ldr	r2, [r2, #12]
 80148da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80148de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148e0:	1c59      	adds	r1, r3, #1
 80148e2:	6379      	str	r1, [r7, #52]	; 0x34
 80148e4:	009b      	lsls	r3, r3, #2
 80148e6:	4413      	add	r3, r2
 80148e8:	681a      	ldr	r2, [r3, #0]
            ssl->session_negotiate->ciphersuite )
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ee:	681b      	ldr	r3, [r3, #0]
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d000      	beq.n	80148f6 <ssl_parse_server_hello+0x5d2>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 80148f4:	e7d1      	b.n	801489a <ssl_parse_server_hello+0x576>
        {
            break;
 80148f6:	bf00      	nop
        }
    }

    if( comp != MBEDTLS_SSL_COMPRESS_NULL
 80148f8:	7efb      	ldrb	r3, [r7, #27]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d00f      	beq.n	801491e <ssl_parse_server_hello+0x5fa>
#if defined(MBEDTLS_ZLIB_SUPPORT)
        && comp != MBEDTLS_SSL_COMPRESS_DEFLATE
#endif
      )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80148fe:	4b66      	ldr	r3, [pc, #408]	; (8014a98 <ssl_parse_server_hello+0x774>)
 8014900:	9300      	str	r3, [sp, #0]
 8014902:	f240 63c5 	movw	r3, #1733	; 0x6c5
 8014906:	4a61      	ldr	r2, [pc, #388]	; (8014a8c <ssl_parse_server_hello+0x768>)
 8014908:	2101      	movs	r1, #1
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f7f7 f9f6 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014910:	222f      	movs	r2, #47	; 0x2f
 8014912:	2102      	movs	r1, #2
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f003 fb65 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801491a:	4b60      	ldr	r3, [pc, #384]	; (8014a9c <ssl_parse_server_hello+0x778>)
 801491c:	e0ad      	b.n	8014a7a <ssl_parse_server_hello+0x756>
    }
    ssl->session_negotiate->compression = comp;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014922:	7efa      	ldrb	r2, [r7, #27]
 8014924:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 8014926:	69fb      	ldr	r3, [r7, #28]
 8014928:	3328      	adds	r3, #40	; 0x28
 801492a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801492c:	4413      	add	r3, r2
 801492e:	62fb      	str	r3, [r7, #44]	; 0x2c

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 8014930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014932:	9301      	str	r3, [sp, #4]
 8014934:	4b5b      	ldr	r3, [pc, #364]	; (8014aa4 <ssl_parse_server_hello+0x780>)
 8014936:	9300      	str	r3, [sp, #0]
 8014938:	f240 63ce 	movw	r3, #1742	; 0x6ce
 801493c:	4a53      	ldr	r2, [pc, #332]	; (8014a8c <ssl_parse_server_hello+0x768>)
 801493e:	2102      	movs	r1, #2
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f7f7 f9db 	bl	800bcfc <mbedtls_debug_print_msg>

    while( ext_len )
 8014946:	e068      	b.n	8014a1a <ssl_parse_server_hello+0x6f6>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 8014948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	021b      	lsls	r3, r3, #8
                                | ( ext[1]       ) );
 801494e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014950:	3201      	adds	r2, #1
 8014952:	7812      	ldrb	r2, [r2, #0]
 8014954:	4313      	orrs	r3, r2
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 8014956:	613b      	str	r3, [r7, #16]
        unsigned int ext_size = ( ( ext[2] <<  8 )
 8014958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801495a:	3302      	adds	r3, #2
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	021b      	lsls	r3, r3, #8
                                | ( ext[3]       ) );
 8014960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014962:	3203      	adds	r2, #3
 8014964:	7812      	ldrb	r2, [r2, #0]
 8014966:	4313      	orrs	r3, r2
        unsigned int ext_size = ( ( ext[2] <<  8 )
 8014968:	60fb      	str	r3, [r7, #12]

        if( ext_size + 4 > ext_len )
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	3304      	adds	r3, #4
 801496e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014970:	429a      	cmp	r2, r3
 8014972:	d20f      	bcs.n	8014994 <ssl_parse_server_hello+0x670>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014974:	4b48      	ldr	r3, [pc, #288]	; (8014a98 <ssl_parse_server_hello+0x774>)
 8014976:	9300      	str	r3, [sp, #0]
 8014978:	f240 63d9 	movw	r3, #1753	; 0x6d9
 801497c:	4a43      	ldr	r2, [pc, #268]	; (8014a8c <ssl_parse_server_hello+0x768>)
 801497e:	2101      	movs	r1, #1
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f7f7 f9bb 	bl	800bcfc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014986:	2232      	movs	r2, #50	; 0x32
 8014988:	2102      	movs	r1, #2
 801498a:	6878      	ldr	r0, [r7, #4]
 801498c:	f003 fb2a 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8014990:	4b42      	ldr	r3, [pc, #264]	; (8014a9c <ssl_parse_server_hello+0x778>)
 8014992:	e072      	b.n	8014a7a <ssl_parse_server_hello+0x756>
        }

        switch( ext_id )
 8014994:	693b      	ldr	r3, [r7, #16]
 8014996:	f64f 7201 	movw	r2, #65281	; 0xff01
 801499a:	4293      	cmp	r3, r2
 801499c:	d115      	bne.n	80149ca <ssl_parse_server_hello+0x6a6>
        {
        case MBEDTLS_TLS_EXT_RENEGOTIATION_INFO:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 801499e:	4b42      	ldr	r3, [pc, #264]	; (8014aa8 <ssl_parse_server_hello+0x784>)
 80149a0:	9300      	str	r3, [sp, #0]
 80149a2:	f240 63e2 	movw	r3, #1762	; 0x6e2
 80149a6:	4a39      	ldr	r2, [pc, #228]	; (8014a8c <ssl_parse_server_hello+0x768>)
 80149a8:	2103      	movs	r1, #3
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7f7 f9a6 	bl	800bcfc <mbedtls_debug_print_msg>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
            renegotiation_info_seen = 1;
#endif

            if( ( ret = ssl_parse_renegotiation_info( ssl, ext + 4,
 80149b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b2:	3304      	adds	r3, #4
 80149b4:	68fa      	ldr	r2, [r7, #12]
 80149b6:	4619      	mov	r1, r3
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f7ff fc87 	bl	80142cc <ssl_parse_renegotiation_info>
 80149be:	6238      	str	r0, [r7, #32]
 80149c0:	6a3b      	ldr	r3, [r7, #32]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d00d      	beq.n	80149e2 <ssl_parse_server_hello+0x6be>
                                                      ext_size ) ) != 0 )
                return( ret );
 80149c6:	6a3b      	ldr	r3, [r7, #32]
 80149c8:	e057      	b.n	8014a7a <ssl_parse_server_hello+0x756>

            break;
#endif /* MBEDTLS_SSL_ALPN */

        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	9301      	str	r3, [sp, #4]
 80149ce:	4b37      	ldr	r3, [pc, #220]	; (8014aac <ssl_parse_server_hello+0x788>)
 80149d0:	9300      	str	r3, [sp, #0]
 80149d2:	f240 7355 	movw	r3, #1877	; 0x755
 80149d6:	4a2d      	ldr	r2, [pc, #180]	; (8014a8c <ssl_parse_server_hello+0x768>)
 80149d8:	2103      	movs	r1, #3
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f7f7 f98e 	bl	800bcfc <mbedtls_debug_print_msg>
 80149e0:	e000      	b.n	80149e4 <ssl_parse_server_hello+0x6c0>
            break;
 80149e2:	bf00      	nop
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 80149e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	3b04      	subs	r3, #4
 80149ec:	633b      	str	r3, [r7, #48]	; 0x30
        ext += 4 + ext_size;
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	3304      	adds	r3, #4
 80149f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149f4:	4413      	add	r3, r2
 80149f6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ext_len > 0 && ext_len < 4 )
 80149f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d00d      	beq.n	8014a1a <ssl_parse_server_hello+0x6f6>
 80149fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a00:	2b03      	cmp	r3, #3
 8014a02:	d80a      	bhi.n	8014a1a <ssl_parse_server_hello+0x6f6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014a04:	4b24      	ldr	r3, [pc, #144]	; (8014a98 <ssl_parse_server_hello+0x774>)
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	f240 735e 	movw	r3, #1886	; 0x75e
 8014a0c:	4a1f      	ldr	r2, [pc, #124]	; (8014a8c <ssl_parse_server_hello+0x768>)
 8014a0e:	2101      	movs	r1, #1
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f7f7 f973 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8014a16:	4b21      	ldr	r3, [pc, #132]	; (8014a9c <ssl_parse_server_hello+0x778>)
 8014a18:	e02f      	b.n	8014a7a <ssl_parse_server_hello+0x756>
    while( ext_len )
 8014a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d193      	bne.n	8014948 <ssl_parse_server_hello+0x624>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d113      	bne.n	8014a52 <ssl_parse_server_hello+0x72e>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014a32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014a36:	b2db      	uxtb	r3, r3
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8014a38:	2b20      	cmp	r3, #32
 8014a3a:	d10a      	bne.n	8014a52 <ssl_parse_server_hello+0x72e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 8014a3c:	4b1c      	ldr	r3, [pc, #112]	; (8014ab0 <ssl_parse_server_hello+0x78c>)
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	f240 7369 	movw	r3, #1897	; 0x769
 8014a44:	4a11      	ldr	r2, [pc, #68]	; (8014a8c <ssl_parse_server_hello+0x768>)
 8014a46:	2101      	movs	r1, #1
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f7f7 f957 	bl	800bcfc <mbedtls_debug_print_msg>
        handshake_failure = 1;
 8014a4e:	2301      	movs	r3, #1
 8014a50:	62bb      	str	r3, [r7, #40]	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
        handshake_failure = 1;
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

    if( handshake_failure == 1 )
 8014a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a54:	2b01      	cmp	r3, #1
 8014a56:	d106      	bne.n	8014a66 <ssl_parse_server_hello+0x742>
    {
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014a58:	2228      	movs	r2, #40	; 0x28
 8014a5a:	2102      	movs	r1, #2
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f003 fac1 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8014a62:	4b0e      	ldr	r3, [pc, #56]	; (8014a9c <ssl_parse_server_hello+0x778>)
 8014a64:	e009      	b.n	8014a7a <ssl_parse_server_hello+0x756>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 8014a66:	4b13      	ldr	r3, [pc, #76]	; (8014ab4 <ssl_parse_server_hello+0x790>)
 8014a68:	9300      	str	r3, [sp, #0]
 8014a6a:	f240 738b 	movw	r3, #1931	; 0x78b
 8014a6e:	4a07      	ldr	r2, [pc, #28]	; (8014a8c <ssl_parse_server_hello+0x768>)
 8014a70:	2102      	movs	r1, #2
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f7f7 f942 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 8014a78:	2300      	movs	r3, #0
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	3738      	adds	r7, #56	; 0x38
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bdb0      	pop	{r4, r5, r7, pc}
 8014a82:	bf00      	nop
 8014a84:	08023014 	.word	0x08023014
 8014a88:	08023018 	.word	0x08023018
 8014a8c:	08022b94 	.word	0x08022b94
 8014a90:	08023034 	.word	0x08023034
 8014a94:	0802305c 	.word	0x0802305c
 8014a98:	08022eb4 	.word	0x08022eb4
 8014a9c:	ffff8680 	.word	0xffff8680
 8014aa0:	0802307c 	.word	0x0802307c
 8014aa4:	080230a4 	.word	0x080230a4
 8014aa8:	080230d0 	.word	0x080230d0
 8014aac:	080230f0 	.word	0x080230f0
 8014ab0:	08023118 	.word	0x08023118
 8014ab4:	08023148 	.word	0x08023148

08014ab8 <ssl_write_encrypted_pms>:
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
 8014ab8:	b5b0      	push	{r4, r5, r7, lr}
 8014aba:	b08c      	sub	sp, #48	; 0x30
 8014abc:	af04      	add	r7, sp, #16
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
 8014ac4:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	68db      	ldr	r3, [r3, #12]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d101      	bne.n	8014ad2 <ssl_write_encrypted_pms+0x1a>
 8014ace:	2300      	movs	r3, #0
 8014ad0:	e000      	b.n	8014ad4 <ssl_write_encrypted_pms+0x1c>
 8014ad2:	2302      	movs	r3, #2
 8014ad4:	61fb      	str	r3, [r7, #28]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ada:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	4413      	add	r3, r2
 8014ae2:	61bb      	str	r3, [r7, #24]

    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8014ae4:	68ba      	ldr	r2, [r7, #8]
 8014ae6:	69fb      	ldr	r3, [r7, #28]
 8014ae8:	4413      	add	r3, r2
 8014aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014aee:	d90a      	bls.n	8014b06 <ssl_write_encrypted_pms+0x4e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small for encrypted pms" ) );
 8014af0:	4b5e      	ldr	r3, [pc, #376]	; (8014c6c <ssl_write_encrypted_pms+0x1b4>)
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	f640 0338 	movw	r3, #2104	; 0x838
 8014af8:	4a5d      	ldr	r2, [pc, #372]	; (8014c70 <ssl_write_encrypted_pms+0x1b8>)
 8014afa:	2101      	movs	r1, #1
 8014afc:	68f8      	ldr	r0, [r7, #12]
 8014afe:	f7f7 f8fd 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
 8014b02:	4b5c      	ldr	r3, [pc, #368]	; (8014c74 <ssl_write_encrypted_pms+0x1bc>)
 8014b04:	e0ad      	b.n	8014c62 <ssl_write_encrypted_pms+0x1aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8014b0e:	4618      	mov	r0, r3
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8014b18:	4619      	mov	r1, r3
                       ssl->conf->transport, p );
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014b22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8014b26:	b2db      	uxtb	r3, r3
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8014b28:	461a      	mov	r2, r3
 8014b2a:	69bb      	ldr	r3, [r7, #24]
 8014b2c:	f005 f896 	bl	8019c5c <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	699b      	ldr	r3, [r3, #24]
 8014b36:	68fa      	ldr	r2, [r7, #12]
 8014b38:	6812      	ldr	r2, [r2, #0]
 8014b3a:	69d0      	ldr	r0, [r2, #28]
 8014b3c:	69ba      	ldr	r2, [r7, #24]
 8014b3e:	1c91      	adds	r1, r2, #2
 8014b40:	222e      	movs	r2, #46	; 0x2e
 8014b42:	4798      	blx	r3
 8014b44:	6178      	str	r0, [r7, #20]
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d00c      	beq.n	8014b66 <ssl_write_encrypted_pms+0xae>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	9301      	str	r3, [sp, #4]
 8014b50:	4b49      	ldr	r3, [pc, #292]	; (8014c78 <ssl_write_encrypted_pms+0x1c0>)
 8014b52:	9300      	str	r3, [sp, #0]
 8014b54:	f640 0348 	movw	r3, #2120	; 0x848
 8014b58:	4a45      	ldr	r2, [pc, #276]	; (8014c70 <ssl_write_encrypted_pms+0x1b8>)
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	68f8      	ldr	r0, [r7, #12]
 8014b5e:	f7f7 f953 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	e07d      	b.n	8014c62 <ssl_write_encrypted_pms+0x1aa>
    }

    ssl->handshake->pmslen = 48;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b6a:	2230      	movs	r2, #48	; 0x30
 8014b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if( ssl->session_negotiate->peer_cert == NULL )
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d10a      	bne.n	8014b90 <ssl_write_encrypted_pms+0xd8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 8014b7a:	4b40      	ldr	r3, [pc, #256]	; (8014c7c <ssl_write_encrypted_pms+0x1c4>)
 8014b7c:	9300      	str	r3, [sp, #0]
 8014b7e:	f44f 6305 	mov.w	r3, #2128	; 0x850
 8014b82:	4a3b      	ldr	r2, [pc, #236]	; (8014c70 <ssl_write_encrypted_pms+0x1b8>)
 8014b84:	2102      	movs	r1, #2
 8014b86:	68f8      	ldr	r0, [r7, #12]
 8014b88:	f7f7 f8b8 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014b8c:	4b3c      	ldr	r3, [pc, #240]	; (8014c80 <ssl_write_encrypted_pms+0x1c8>)
 8014b8e:	e068      	b.n	8014c62 <ssl_write_encrypted_pms+0x1aa>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014b96:	33bc      	adds	r3, #188	; 0xbc
 8014b98:	2101      	movs	r1, #1
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7fa fb2e 	bl	800f1fc <mbedtls_pk_can_do>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d10a      	bne.n	8014bbc <ssl_write_encrypted_pms+0x104>
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 8014ba6:	4b37      	ldr	r3, [pc, #220]	; (8014c84 <ssl_write_encrypted_pms+0x1cc>)
 8014ba8:	9300      	str	r3, [sp, #0]
 8014baa:	f640 035a 	movw	r3, #2138	; 0x85a
 8014bae:	4a30      	ldr	r2, [pc, #192]	; (8014c70 <ssl_write_encrypted_pms+0x1b8>)
 8014bb0:	2101      	movs	r1, #1
 8014bb2:	68f8      	ldr	r0, [r7, #12]
 8014bb4:	f7f7 f8a2 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 8014bb8:	4b33      	ldr	r3, [pc, #204]	; (8014c88 <ssl_write_encrypted_pms+0x1d0>)
 8014bba:	e052      	b.n	8014c62 <ssl_write_encrypted_pms+0x1aa>
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014bc2:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
                            p, ssl->handshake->pmslen,
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014bca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
                            ssl->out_msg + offset + len_bytes, olen,
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014bd4:	68b9      	ldr	r1, [r7, #8]
 8014bd6:	69fb      	ldr	r3, [r7, #28]
 8014bd8:	440b      	add	r3, r1
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014bda:	18d5      	adds	r5, r2, r3
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
 8014bdc:	68ba      	ldr	r2, [r7, #8]
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	4413      	add	r3, r2
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014be2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8014be6:	68fa      	ldr	r2, [r7, #12]
 8014be8:	6812      	ldr	r2, [r2, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014bea:	6992      	ldr	r2, [r2, #24]
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8014bec:	68f9      	ldr	r1, [r7, #12]
 8014bee:	6809      	ldr	r1, [r1, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014bf0:	69c9      	ldr	r1, [r1, #28]
 8014bf2:	9103      	str	r1, [sp, #12]
 8014bf4:	9202      	str	r2, [sp, #8]
 8014bf6:	9301      	str	r3, [sp, #4]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	9300      	str	r3, [sp, #0]
 8014bfc:	462b      	mov	r3, r5
 8014bfe:	4622      	mov	r2, r4
 8014c00:	69b9      	ldr	r1, [r7, #24]
 8014c02:	f7fa fbe9 	bl	800f3d8 <mbedtls_pk_encrypt>
 8014c06:	6178      	str	r0, [r7, #20]
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d00c      	beq.n	8014c28 <ssl_write_encrypted_pms+0x170>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	9301      	str	r3, [sp, #4]
 8014c12:	4b1e      	ldr	r3, [pc, #120]	; (8014c8c <ssl_write_encrypted_pms+0x1d4>)
 8014c14:	9300      	str	r3, [sp, #0]
 8014c16:	f640 0364 	movw	r3, #2148	; 0x864
 8014c1a:	4a15      	ldr	r2, [pc, #84]	; (8014c70 <ssl_write_encrypted_pms+0x1b8>)
 8014c1c:	2101      	movs	r1, #1
 8014c1e:	68f8      	ldr	r0, [r7, #12]
 8014c20:	f7f7 f8f2 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	e01c      	b.n	8014c62 <ssl_write_encrypted_pms+0x1aa>
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 8014c28:	69fb      	ldr	r3, [r7, #28]
 8014c2a:	2b02      	cmp	r3, #2
 8014c2c:	d118      	bne.n	8014c60 <ssl_write_encrypted_pms+0x1a8>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	0a19      	lsrs	r1, r3, #8
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	4413      	add	r3, r2
 8014c3e:	b2ca      	uxtb	r2, r1
 8014c40:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6819      	ldr	r1, [r3, #0]
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	3301      	adds	r3, #1
 8014c50:	4413      	add	r3, r2
 8014c52:	b2ca      	uxtb	r2, r1
 8014c54:	701a      	strb	r2, [r3, #0]
        *olen += 2;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	1c9a      	adds	r2, r3, #2
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	601a      	str	r2, [r3, #0]
    }
#endif

    return( 0 );
 8014c60:	2300      	movs	r3, #0
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3720      	adds	r7, #32
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bdb0      	pop	{r4, r5, r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	08023160 	.word	0x08023160
 8014c70:	08022b94 	.word	0x08022b94
 8014c74:	ffff9600 	.word	0xffff9600
 8014c78:	08023184 	.word	0x08023184
 8014c7c:	0802318c 	.word	0x0802318c
 8014c80:	ffff8900 	.word	0xffff8900
 8014c84:	080231a4 	.word	0x080231a4
 8014c88:	ffff9300 	.word	0xffff9300
 8014c8c:	080231c4 	.word	0x080231c4

08014c90 <ssl_parse_server_key_exchange>:
}
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
 8014c90:	b590      	push	{r4, r7, lr}
 8014c92:	b08b      	sub	sp, #44	; 0x2c
 8014c94:	af04      	add	r7, sp, #16
 8014c96:	6078      	str	r0, [r7, #4]
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	617b      	str	r3, [r7, #20]
    unsigned char *p = NULL, *end = NULL;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	613b      	str	r3, [r7, #16]
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	60fb      	str	r3, [r7, #12]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 8014ca8:	4b50      	ldr	r3, [pc, #320]	; (8014dec <ssl_parse_server_key_exchange+0x15c>)
 8014caa:	9300      	str	r3, [sp, #0]
 8014cac:	f640 03e6 	movw	r3, #2278	; 0x8e6
 8014cb0:	4a4f      	ldr	r2, [pc, #316]	; (8014df0 <ssl_parse_server_key_exchange+0x160>)
 8014cb2:	2102      	movs	r1, #2
 8014cb4:	6878      	ldr	r0, [r7, #4]
 8014cb6:	f7f7 f821 	bl	800bcfc <mbedtls_debug_print_msg>

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 8014cba:	697b      	ldr	r3, [r7, #20]
 8014cbc:	7a9b      	ldrb	r3, [r3, #10]
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	d10f      	bne.n	8014ce2 <ssl_parse_server_key_exchange+0x52>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 8014cc2:	4b4c      	ldr	r3, [pc, #304]	; (8014df4 <ssl_parse_server_key_exchange+0x164>)
 8014cc4:	9300      	str	r3, [sp, #0]
 8014cc6:	f640 03eb 	movw	r3, #2283	; 0x8eb
 8014cca:	4a49      	ldr	r2, [pc, #292]	; (8014df0 <ssl_parse_server_key_exchange+0x160>)
 8014ccc:	2102      	movs	r1, #2
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f7f7 f814 	bl	800bcfc <mbedtls_debug_print_msg>
        ssl->state++;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	685b      	ldr	r3, [r3, #4]
 8014cd8:	1c5a      	adds	r2, r3, #1
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	605a      	str	r2, [r3, #4]
        return( 0 );
 8014cde:	2300      	movs	r3, #0
 8014ce0:	e080      	b.n	8014de4 <ssl_parse_server_key_exchange+0x154>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f002 ffe2 	bl	8017cac <mbedtls_ssl_read_record>
 8014ce8:	60b8      	str	r0, [r7, #8]
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d00c      	beq.n	8014d0a <ssl_parse_server_key_exchange+0x7a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	9301      	str	r3, [sp, #4]
 8014cf4:	4b40      	ldr	r3, [pc, #256]	; (8014df8 <ssl_parse_server_key_exchange+0x168>)
 8014cf6:	9300      	str	r3, [sp, #0]
 8014cf8:	f640 130b 	movw	r3, #2315	; 0x90b
 8014cfc:	4a3c      	ldr	r2, [pc, #240]	; (8014df0 <ssl_parse_server_key_exchange+0x160>)
 8014cfe:	2101      	movs	r1, #1
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f7f7 f881 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8014d06:	68bb      	ldr	r3, [r7, #8]
 8014d08:	e06c      	b.n	8014de4 <ssl_parse_server_key_exchange+0x154>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d0e:	2b16      	cmp	r3, #22
 8014d10:	d00f      	beq.n	8014d32 <ssl_parse_server_key_exchange+0xa2>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8014d12:	4b3a      	ldr	r3, [pc, #232]	; (8014dfc <ssl_parse_server_key_exchange+0x16c>)
 8014d14:	9300      	str	r3, [sp, #0]
 8014d16:	f640 1311 	movw	r3, #2321	; 0x911
 8014d1a:	4a35      	ldr	r2, [pc, #212]	; (8014df0 <ssl_parse_server_key_exchange+0x160>)
 8014d1c:	2101      	movs	r1, #1
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f7f6 ffec 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014d24:	220a      	movs	r2, #10
 8014d26:	2102      	movs	r1, #2
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f003 f95b 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014d2e:	4b34      	ldr	r3, [pc, #208]	; (8014e00 <ssl_parse_server_key_exchange+0x170>)
 8014d30:	e058      	b.n	8014de4 <ssl_parse_server_key_exchange+0x154>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014d36:	781b      	ldrb	r3, [r3, #0]
 8014d38:	2b0c      	cmp	r3, #12
 8014d3a:	d02c      	beq.n	8014d96 <ssl_parse_server_key_exchange+0x106>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	7a9b      	ldrb	r3, [r3, #10]
 8014d40:	2b05      	cmp	r3, #5
 8014d42:	d003      	beq.n	8014d4c <ssl_parse_server_key_exchange+0xbc>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	7a9b      	ldrb	r3, [r3, #10]
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8014d48:	2b07      	cmp	r3, #7
 8014d4a:	d114      	bne.n	8014d76 <ssl_parse_server_key_exchange+0xe6>
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	2201      	movs	r2, #1
 8014d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            goto exit;
 8014d54:	bf00      	nop
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	685b      	ldr	r3, [r3, #4]
 8014d5a:	1c5a      	adds	r2, r3, #1
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	605a      	str	r2, [r3, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 8014d60:	4b28      	ldr	r3, [pc, #160]	; (8014e04 <ssl_parse_server_key_exchange+0x174>)
 8014d62:	9300      	str	r3, [sp, #0]
 8014d64:	f640 2314 	movw	r3, #2580	; 0xa14
 8014d68:	4a21      	ldr	r2, [pc, #132]	; (8014df0 <ssl_parse_server_key_exchange+0x160>)
 8014d6a:	2102      	movs	r1, #2
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f7f6 ffc5 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 8014d72:	2300      	movs	r3, #0
 8014d74:	e036      	b.n	8014de4 <ssl_parse_server_key_exchange+0x154>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 8014d76:	4b24      	ldr	r3, [pc, #144]	; (8014e08 <ssl_parse_server_key_exchange+0x178>)
 8014d78:	9300      	str	r3, [sp, #0]
 8014d7a:	f640 1326 	movw	r3, #2342	; 0x926
 8014d7e:	4a1c      	ldr	r2, [pc, #112]	; (8014df0 <ssl_parse_server_key_exchange+0x160>)
 8014d80:	2101      	movs	r1, #1
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f7f6 ffba 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014d88:	220a      	movs	r2, #10
 8014d8a:	2102      	movs	r1, #2
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f003 f929 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014d92:	4b1b      	ldr	r3, [pc, #108]	; (8014e00 <ssl_parse_server_key_exchange+0x170>)
 8014d94:	e026      	b.n	8014de4 <ssl_parse_server_key_exchange+0x154>
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f7fe ff6f 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8014da0:	4603      	mov	r3, r0
 8014da2:	4423      	add	r3, r4
 8014da4:	613b      	str	r3, [r7, #16]
    end = ssl->in_msg + ssl->in_hslen;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014dae:	4413      	add	r3, r2
 8014db0:	60fb      	str	r3, [r7, #12]
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 8014db2:	68fa      	ldr	r2, [r7, #12]
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	1ad3      	subs	r3, r2, r3
 8014db8:	9302      	str	r3, [sp, #8]
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	9301      	str	r3, [sp, #4]
 8014dbe:	4b13      	ldr	r3, [pc, #76]	; (8014e0c <ssl_parse_server_key_exchange+0x17c>)
 8014dc0:	9300      	str	r3, [sp, #0]
 8014dc2:	f44f 6313 	mov.w	r3, #2352	; 0x930
 8014dc6:	4a0a      	ldr	r2, [pc, #40]	; (8014df0 <ssl_parse_server_key_exchange+0x160>)
 8014dc8:	2103      	movs	r1, #3
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f7f7 f888 	bl	800bee0 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8014dd0:	4b0f      	ldr	r3, [pc, #60]	; (8014e10 <ssl_parse_server_key_exchange+0x180>)
 8014dd2:	9300      	str	r3, [sp, #0]
 8014dd4:	f640 137d 	movw	r3, #2429	; 0x97d
 8014dd8:	4a05      	ldr	r2, [pc, #20]	; (8014df0 <ssl_parse_server_key_exchange+0x160>)
 8014dda:	2101      	movs	r1, #1
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f7f6 ff8d 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8014de2:	4b0c      	ldr	r3, [pc, #48]	; (8014e14 <ssl_parse_server_key_exchange+0x184>)
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	371c      	adds	r7, #28
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd90      	pop	{r4, r7, pc}
 8014dec:	080231e0 	.word	0x080231e0
 8014df0:	08022b94 	.word	0x08022b94
 8014df4:	08023200 	.word	0x08023200
 8014df8:	08022e9c 	.word	0x08022e9c
 8014dfc:	08023224 	.word	0x08023224
 8014e00:	ffff8900 	.word	0xffff8900
 8014e04:	0802329c 	.word	0x0802329c
 8014e08:	08023244 	.word	0x08023244
 8014e0c:	08023274 	.word	0x08023274
 8014e10:	08023288 	.word	0x08023288
 8014e14:	ffff9400 	.word	0xffff9400

08014e18 <ssl_parse_certificate_request>:
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
}
#else /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */
static int ssl_parse_certificate_request( mbedtls_ssl_context *ssl )
{
 8014e18:	b590      	push	{r4, r7, lr}
 8014e1a:	b091      	sub	sp, #68	; 0x44
 8014e1c:	af04      	add	r7, sp, #16
 8014e1e:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *buf;
    size_t n = 0;
 8014e20:	2300      	movs	r3, #0
 8014e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t cert_type_len = 0, dn_len = 0;
 8014e24:	2300      	movs	r3, #0
 8014e26:	627b      	str	r3, [r7, #36]	; 0x24
 8014e28:	2300      	movs	r3, #0
 8014e2a:	623b      	str	r3, [r7, #32]
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	61fb      	str	r3, [r7, #28]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 8014e34:	4ba2      	ldr	r3, [pc, #648]	; (80150c0 <ssl_parse_certificate_request+0x2a8>)
 8014e36:	9300      	str	r3, [sp, #0]
 8014e38:	f640 2335 	movw	r3, #2613	; 0xa35
 8014e3c:	4aa1      	ldr	r2, [pc, #644]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 8014e3e:	2102      	movs	r1, #2
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7f6 ff5b 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
 8014e46:	69f8      	ldr	r0, [r7, #28]
 8014e48:	f7fe febc 	bl	8013bc4 <mbedtls_ssl_ciphersuite_cert_req_allowed>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d10f      	bne.n	8014e72 <ssl_parse_certificate_request+0x5a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 8014e52:	4b9d      	ldr	r3, [pc, #628]	; (80150c8 <ssl_parse_certificate_request+0x2b0>)
 8014e54:	9300      	str	r3, [sp, #0]
 8014e56:	f640 2339 	movw	r3, #2617	; 0xa39
 8014e5a:	4a9a      	ldr	r2, [pc, #616]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 8014e5c:	2102      	movs	r1, #2
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f7f6 ff4c 	bl	800bcfc <mbedtls_debug_print_msg>
        ssl->state++;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	685b      	ldr	r3, [r3, #4]
 8014e68:	1c5a      	adds	r2, r3, #1
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	605a      	str	r2, [r3, #4]
        return( 0 );
 8014e6e:	2300      	movs	r3, #0
 8014e70:	e121      	b.n	80150b6 <ssl_parse_certificate_request+0x29e>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f002 ff1a 	bl	8017cac <mbedtls_ssl_read_record>
 8014e78:	61b8      	str	r0, [r7, #24]
 8014e7a:	69bb      	ldr	r3, [r7, #24]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d00c      	beq.n	8014e9a <ssl_parse_certificate_request+0x82>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8014e80:	69bb      	ldr	r3, [r7, #24]
 8014e82:	9301      	str	r3, [sp, #4]
 8014e84:	4b91      	ldr	r3, [pc, #580]	; (80150cc <ssl_parse_certificate_request+0x2b4>)
 8014e86:	9300      	str	r3, [sp, #0]
 8014e88:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 8014e8c:	4a8d      	ldr	r2, [pc, #564]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 8014e8e:	2101      	movs	r1, #1
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7f6 ffb9 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8014e96:	69bb      	ldr	r3, [r7, #24]
 8014e98:	e10d      	b.n	80150b6 <ssl_parse_certificate_request+0x29e>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e9e:	2b16      	cmp	r3, #22
 8014ea0:	d00f      	beq.n	8014ec2 <ssl_parse_certificate_request+0xaa>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8014ea2:	4b8b      	ldr	r3, [pc, #556]	; (80150d0 <ssl_parse_certificate_request+0x2b8>)
 8014ea4:	9300      	str	r3, [sp, #0]
 8014ea6:	f640 2346 	movw	r3, #2630	; 0xa46
 8014eaa:	4a86      	ldr	r2, [pc, #536]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 8014eac:	2101      	movs	r1, #1
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7f6 ff24 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014eb4:	220a      	movs	r2, #10
 8014eb6:	2102      	movs	r1, #2
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f003 f893 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014ebe:	4b85      	ldr	r3, [pc, #532]	; (80150d4 <ssl_parse_certificate_request+0x2bc>)
 8014ec0:	e0f9      	b.n	80150b6 <ssl_parse_certificate_request+0x29e>
    }

    ssl->state++;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	1c5a      	adds	r2, r3, #1
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	605a      	str	r2, [r3, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	2b0d      	cmp	r3, #13
 8014ed4:	bf0c      	ite	eq
 8014ed6:	2301      	moveq	r3, #1
 8014ed8:	2300      	movne	r3, #0
 8014eda:	b2db      	uxtb	r3, r3
 8014edc:	461a      	mov	r2, r3
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d001      	beq.n	8014ef2 <ssl_parse_certificate_request+0xda>
 8014eee:	4b7a      	ldr	r3, [pc, #488]	; (80150d8 <ssl_parse_certificate_request+0x2c0>)
 8014ef0:	e000      	b.n	8014ef4 <ssl_parse_certificate_request+0xdc>
 8014ef2:	4b7a      	ldr	r3, [pc, #488]	; (80150dc <ssl_parse_certificate_request+0x2c4>)
 8014ef4:	9301      	str	r3, [sp, #4]
 8014ef6:	4b7a      	ldr	r3, [pc, #488]	; (80150e0 <ssl_parse_certificate_request+0x2c8>)
 8014ef8:	9300      	str	r3, [sp, #0]
 8014efa:	f640 234f 	movw	r3, #2639	; 0xa4f
 8014efe:	4a71      	ldr	r2, [pc, #452]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 8014f00:	2103      	movs	r1, #3
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f7f6 fefa 	bl	800bcfc <mbedtls_debug_print_msg>
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d104      	bne.n	8014f1c <ssl_parse_certificate_request+0x104>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2201      	movs	r2, #1
 8014f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        goto exit;
 8014f1a:	e0c2      	b.n	80150a2 <ssl_parse_certificate_request+0x28a>
     *  write_certificate_verify), so let's just use what we have.
     *
     *  However, we still minimally parse the message to check it is at least
     *  superficially sane.
     */
    buf = ssl->in_msg;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014f20:	617b      	str	r3, [r7, #20]

    /* certificate_types */
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f7fe feab 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	627b      	str	r3, [r7, #36]	; 0x24
    n = cert_type_len;
 8014f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f34:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f7fe fe9f 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8014f40:	4602      	mov	r2, r0
 8014f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f44:	4413      	add	r3, r2
 8014f46:	3302      	adds	r3, #2
 8014f48:	429c      	cmp	r4, r3
 8014f4a:	d20f      	bcs.n	8014f6c <ssl_parse_certificate_request+0x154>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8014f4c:	4b60      	ldr	r3, [pc, #384]	; (80150d0 <ssl_parse_certificate_request+0x2b8>)
 8014f4e:	9300      	str	r3, [sp, #0]
 8014f50:	f640 2379 	movw	r3, #2681	; 0xa79
 8014f54:	4a5b      	ldr	r2, [pc, #364]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 8014f56:	2101      	movs	r1, #1
 8014f58:	6878      	ldr	r0, [r7, #4]
 8014f5a:	f7f6 fecf 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014f5e:	2232      	movs	r2, #50	; 0x32
 8014f60:	2102      	movs	r1, #2
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f003 f83e 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8014f68:	4b5e      	ldr	r3, [pc, #376]	; (80150e4 <ssl_parse_certificate_request+0x2cc>)
 8014f6a:	e0a4      	b.n	80150b6 <ssl_parse_certificate_request+0x29e>
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	68db      	ldr	r3, [r3, #12]
 8014f70:	2b03      	cmp	r3, #3
 8014f72:	d15f      	bne.n	8015034 <ssl_parse_certificate_request+0x21c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f7fe fe82 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8014f7a:	4602      	mov	r2, r0
 8014f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f7e:	4413      	add	r3, r2
 8014f80:	3301      	adds	r3, #1
 8014f82:	697a      	ldr	r2, [r7, #20]
 8014f84:	4413      	add	r3, r2
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	021c      	lsls	r4, r3, #8
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f7fe fe77 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8014f90:	4602      	mov	r2, r0
 8014f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f94:	4413      	add	r3, r2
 8014f96:	3302      	adds	r3, #2
 8014f98:	697a      	ldr	r2, [r7, #20]
 8014f9a:	4413      	add	r3, r2
 8014f9c:	781b      	ldrb	r3, [r3, #0]
 8014f9e:	4323      	orrs	r3, r4
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8014fa0:	613b      	str	r3, [r7, #16]
#if defined(MBEDTLS_DEBUG_C)
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f7fe fe6b 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8014fa8:	4602      	mov	r2, r0
 8014faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fac:	4413      	add	r3, r2
 8014fae:	3303      	adds	r3, #3
 8014fb0:	697a      	ldr	r2, [r7, #20]
 8014fb2:	4413      	add	r3, r2
 8014fb4:	60fb      	str	r3, [r7, #12]
        size_t i;

        for( i = 0; i < sig_alg_len; i += 2 )
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8014fba:	e017      	b.n	8014fec <ssl_parse_certificate_request+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 8014fbc:	68fa      	ldr	r2, [r7, #12]
 8014fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc0:	4413      	add	r3, r2
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	4619      	mov	r1, r3
 8014fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc8:	3301      	adds	r3, #1
 8014fca:	68fa      	ldr	r2, [r7, #12]
 8014fcc:	4413      	add	r3, r2
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	9302      	str	r3, [sp, #8]
 8014fd2:	9101      	str	r1, [sp, #4]
 8014fd4:	4b44      	ldr	r3, [pc, #272]	; (80150e8 <ssl_parse_certificate_request+0x2d0>)
 8014fd6:	9300      	str	r3, [sp, #0]
 8014fd8:	f640 238b 	movw	r3, #2699	; 0xa8b
 8014fdc:	4a39      	ldr	r2, [pc, #228]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 8014fde:	2103      	movs	r1, #3
 8014fe0:	6878      	ldr	r0, [r7, #4]
 8014fe2:	f7f6 fe8b 	bl	800bcfc <mbedtls_debug_print_msg>
        for( i = 0; i < sig_alg_len; i += 2 )
 8014fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe8:	3302      	adds	r3, #2
 8014fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8014fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fee:	693b      	ldr	r3, [r7, #16]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d3e3      	bcc.n	8014fbc <ssl_parse_certificate_request+0x1a4>
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 8014ff4:	693a      	ldr	r2, [r7, #16]
 8014ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff8:	4413      	add	r3, r2
 8014ffa:	3302      	adds	r3, #2
 8014ffc:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f7fe fe3b 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8015008:	4602      	mov	r2, r0
 801500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500c:	4413      	add	r3, r2
 801500e:	3302      	adds	r3, #2
 8015010:	429c      	cmp	r4, r3
 8015012:	d20f      	bcs.n	8015034 <ssl_parse_certificate_request+0x21c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8015014:	4b2e      	ldr	r3, [pc, #184]	; (80150d0 <ssl_parse_certificate_request+0x2b8>)
 8015016:	9300      	str	r3, [sp, #0]
 8015018:	f640 2394 	movw	r3, #2708	; 0xa94
 801501c:	4a29      	ldr	r2, [pc, #164]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 801501e:	2101      	movs	r1, #1
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f7f6 fe6b 	bl	800bcfc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8015026:	2232      	movs	r2, #50	; 0x32
 8015028:	2102      	movs	r1, #2
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f002 ffda 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8015030:	4b2c      	ldr	r3, [pc, #176]	; (80150e4 <ssl_parse_certificate_request+0x2cc>)
 8015032:	e040      	b.n	80150b6 <ssl_parse_certificate_request+0x29e>
        }
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f7fe fe22 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 801503a:	4602      	mov	r2, r0
 801503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801503e:	4413      	add	r3, r2
 8015040:	3301      	adds	r3, #1
 8015042:	697a      	ldr	r2, [r7, #20]
 8015044:	4413      	add	r3, r2
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	021c      	lsls	r4, r3, #8
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 801504a:	6878      	ldr	r0, [r7, #4]
 801504c:	f7fe fe17 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8015050:	4602      	mov	r2, r0
 8015052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015054:	4413      	add	r3, r2
 8015056:	3302      	adds	r3, #2
 8015058:	697a      	ldr	r2, [r7, #20]
 801505a:	4413      	add	r3, r2
 801505c:	781b      	ldrb	r3, [r3, #0]
 801505e:	4323      	orrs	r3, r4
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8015060:	623b      	str	r3, [r7, #32]

    n += dn_len;
 8015062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	4413      	add	r3, r2
 8015068:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f7fe fe05 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 8015074:	4602      	mov	r2, r0
 8015076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015078:	4413      	add	r3, r2
 801507a:	3303      	adds	r3, #3
 801507c:	429c      	cmp	r4, r3
 801507e:	d00f      	beq.n	80150a0 <ssl_parse_certificate_request+0x288>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8015080:	4b13      	ldr	r3, [pc, #76]	; (80150d0 <ssl_parse_certificate_request+0x2b8>)
 8015082:	9300      	str	r3, [sp, #0]
 8015084:	f640 23a3 	movw	r3, #2723	; 0xaa3
 8015088:	4a0e      	ldr	r2, [pc, #56]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 801508a:	2101      	movs	r1, #1
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f7f6 fe35 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8015092:	2232      	movs	r2, #50	; 0x32
 8015094:	2102      	movs	r1, #2
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f002 ffa4 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 801509c:	4b11      	ldr	r3, [pc, #68]	; (80150e4 <ssl_parse_certificate_request+0x2cc>)
 801509e:	e00a      	b.n	80150b6 <ssl_parse_certificate_request+0x29e>
    }

exit:
 80150a0:	bf00      	nop
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 80150a2:	4b12      	ldr	r3, [pc, #72]	; (80150ec <ssl_parse_certificate_request+0x2d4>)
 80150a4:	9300      	str	r3, [sp, #0]
 80150a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80150aa:	4a06      	ldr	r2, [pc, #24]	; (80150c4 <ssl_parse_certificate_request+0x2ac>)
 80150ac:	2102      	movs	r1, #2
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f7f6 fe24 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 80150b4:	2300      	movs	r3, #0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3734      	adds	r7, #52	; 0x34
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd90      	pop	{r4, r7, pc}
 80150be:	bf00      	nop
 80150c0:	080232bc 	.word	0x080232bc
 80150c4:	08022b94 	.word	0x08022b94
 80150c8:	080232dc 	.word	0x080232dc
 80150cc:	08022e9c 	.word	0x08022e9c
 80150d0:	08023300 	.word	0x08023300
 80150d4:	ffff8900 	.word	0xffff8900
 80150d8:	08023010 	.word	0x08023010
 80150dc:	08023014 	.word	0x08023014
 80150e0:	08023320 	.word	0x08023320
 80150e4:	ffff8580 	.word	0xffff8580
 80150e8:	0802333c 	.word	0x0802333c
 80150ec:	08023368 	.word	0x08023368

080150f0 <ssl_parse_server_hello_done>:
#endif /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */

static int ssl_parse_server_hello_done( mbedtls_ssl_context *ssl )
{
 80150f0:	b590      	push	{r4, r7, lr}
 80150f2:	b087      	sub	sp, #28
 80150f4:	af02      	add	r7, sp, #8
 80150f6:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 80150f8:	4b2d      	ldr	r3, [pc, #180]	; (80151b0 <ssl_parse_server_hello_done+0xc0>)
 80150fa:	9300      	str	r3, [sp, #0]
 80150fc:	f640 23b4 	movw	r3, #2740	; 0xab4
 8015100:	4a2c      	ldr	r2, [pc, #176]	; (80151b4 <ssl_parse_server_hello_done+0xc4>)
 8015102:	2102      	movs	r1, #2
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f7f6 fdf9 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f002 fdce 	bl	8017cac <mbedtls_ssl_read_record>
 8015110:	60f8      	str	r0, [r7, #12]
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d00c      	beq.n	8015132 <ssl_parse_server_hello_done+0x42>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	9301      	str	r3, [sp, #4]
 801511c:	4b26      	ldr	r3, [pc, #152]	; (80151b8 <ssl_parse_server_hello_done+0xc8>)
 801511e:	9300      	str	r3, [sp, #0]
 8015120:	f640 23b8 	movw	r3, #2744	; 0xab8
 8015124:	4a23      	ldr	r2, [pc, #140]	; (80151b4 <ssl_parse_server_hello_done+0xc4>)
 8015126:	2101      	movs	r1, #1
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f7f6 fe6d 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	e03a      	b.n	80151a8 <ssl_parse_server_hello_done+0xb8>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015136:	2b16      	cmp	r3, #22
 8015138:	d00a      	beq.n	8015150 <ssl_parse_server_hello_done+0x60>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801513a:	4b20      	ldr	r3, [pc, #128]	; (80151bc <ssl_parse_server_hello_done+0xcc>)
 801513c:	9300      	str	r3, [sp, #0]
 801513e:	f640 23be 	movw	r3, #2750	; 0xabe
 8015142:	4a1c      	ldr	r2, [pc, #112]	; (80151b4 <ssl_parse_server_hello_done+0xc4>)
 8015144:	2101      	movs	r1, #1
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f7f6 fdd8 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801514c:	4b1c      	ldr	r3, [pc, #112]	; (80151c0 <ssl_parse_server_hello_done+0xd0>)
 801514e:	e02b      	b.n	80151a8 <ssl_parse_server_hello_done+0xb8>
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f7fe fd92 	bl	8013c7e <mbedtls_ssl_hs_hdr_len>
 801515a:	4603      	mov	r3, r0
 801515c:	429c      	cmp	r4, r3
 801515e:	d104      	bne.n	801516a <ssl_parse_server_hello_done+0x7a>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015164:	781b      	ldrb	r3, [r3, #0]
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 8015166:	2b0e      	cmp	r3, #14
 8015168:	d00f      	beq.n	801518a <ssl_parse_server_hello_done+0x9a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801516a:	4b14      	ldr	r3, [pc, #80]	; (80151bc <ssl_parse_server_hello_done+0xcc>)
 801516c:	9300      	str	r3, [sp, #0]
 801516e:	f640 23c5 	movw	r3, #2757	; 0xac5
 8015172:	4a10      	ldr	r2, [pc, #64]	; (80151b4 <ssl_parse_server_hello_done+0xc4>)
 8015174:	2101      	movs	r1, #1
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f7f6 fdc0 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801517c:	2232      	movs	r2, #50	; 0x32
 801517e:	2102      	movs	r1, #2
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f002 ff2f 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 8015186:	4b0f      	ldr	r3, [pc, #60]	; (80151c4 <ssl_parse_server_hello_done+0xd4>)
 8015188:	e00e      	b.n	80151a8 <ssl_parse_server_hello_done+0xb8>
    }

    ssl->state++;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	1c5a      	adds	r2, r3, #1
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 8015194:	4b0c      	ldr	r3, [pc, #48]	; (80151c8 <ssl_parse_server_hello_done+0xd8>)
 8015196:	9300      	str	r3, [sp, #0]
 8015198:	f640 23d2 	movw	r3, #2770	; 0xad2
 801519c:	4a05      	ldr	r2, [pc, #20]	; (80151b4 <ssl_parse_server_hello_done+0xc4>)
 801519e:	2102      	movs	r1, #2
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f7f6 fdab 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 80151a6:	2300      	movs	r3, #0
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	3714      	adds	r7, #20
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd90      	pop	{r4, r7, pc}
 80151b0:	08023388 	.word	0x08023388
 80151b4:	08022b94 	.word	0x08022b94
 80151b8:	08022e9c 	.word	0x08022e9c
 80151bc:	080233a4 	.word	0x080233a4
 80151c0:	ffff8900 	.word	0xffff8900
 80151c4:	ffff8480 	.word	0xffff8480
 80151c8:	080233c4 	.word	0x080233c4

080151cc <ssl_write_client_key_exchange>:

static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b088      	sub	sp, #32
 80151d0:	af02      	add	r7, sp, #8
 80151d2:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	617b      	str	r3, [r7, #20]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 80151dc:	4b2e      	ldr	r3, [pc, #184]	; (8015298 <ssl_write_client_key_exchange+0xcc>)
 80151de:	9300      	str	r3, [sp, #0]
 80151e0:	f640 23de 	movw	r3, #2782	; 0xade
 80151e4:	4a2d      	ldr	r2, [pc, #180]	; (801529c <ssl_write_client_key_exchange+0xd0>)
 80151e6:	2102      	movs	r1, #2
 80151e8:	6878      	ldr	r0, [r7, #4]
 80151ea:	f7f6 fd87 	bl	800bcfc <mbedtls_debug_print_msg>
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	7a9b      	ldrb	r3, [r3, #10]
 80151f2:	2b01      	cmp	r3, #1
 80151f4:	d10e      	bne.n	8015214 <ssl_write_client_key_exchange+0x48>
    {
        i = 4;
 80151f6:	2304      	movs	r3, #4
 80151f8:	613b      	str	r3, [r7, #16]
        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )
 80151fa:	f107 0208 	add.w	r2, r7, #8
 80151fe:	2300      	movs	r3, #0
 8015200:	6939      	ldr	r1, [r7, #16]
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f7ff fc58 	bl	8014ab8 <ssl_write_encrypted_pms>
 8015208:	60f8      	str	r0, [r7, #12]
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d00c      	beq.n	801522a <ssl_write_client_key_exchange+0x5e>
            return( ret );
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	e03c      	b.n	801528e <ssl_write_client_key_exchange+0xc2>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */
    {
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015214:	4b22      	ldr	r3, [pc, #136]	; (80152a0 <ssl_write_client_key_exchange+0xd4>)
 8015216:	9300      	str	r3, [sp, #0]
 8015218:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 801521c:	4a1f      	ldr	r2, [pc, #124]	; (801529c <ssl_write_client_key_exchange+0xd0>)
 801521e:	2101      	movs	r1, #1
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7f6 fd6b 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015226:	4b1f      	ldr	r3, [pc, #124]	; (80152a4 <ssl_write_client_key_exchange+0xd8>)
 8015228:	e031      	b.n	801528e <ssl_write_client_key_exchange+0xc2>
    }

    ssl->out_msglen  = i + n;
 801522a:	68ba      	ldr	r2, [r7, #8]
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	441a      	add	r2, r3
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2216      	movs	r2, #22
 801523a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015244:	2210      	movs	r2, #16
 8015246:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	685b      	ldr	r3, [r3, #4]
 801524c:	1c5a      	adds	r2, r3, #1
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f002 fa1c 	bl	8017690 <mbedtls_ssl_write_record>
 8015258:	60f8      	str	r0, [r7, #12]
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d00c      	beq.n	801527a <ssl_write_client_key_exchange+0xae>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	9301      	str	r3, [sp, #4]
 8015264:	4b10      	ldr	r3, [pc, #64]	; (80152a8 <ssl_write_client_key_exchange+0xdc>)
 8015266:	9300      	str	r3, [sp, #0]
 8015268:	f640 33cc 	movw	r3, #3020	; 0xbcc
 801526c:	4a0b      	ldr	r2, [pc, #44]	; (801529c <ssl_write_client_key_exchange+0xd0>)
 801526e:	2101      	movs	r1, #1
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f7f6 fdc9 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	e009      	b.n	801528e <ssl_write_client_key_exchange+0xc2>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 801527a:	4b0c      	ldr	r3, [pc, #48]	; (80152ac <ssl_write_client_key_exchange+0xe0>)
 801527c:	9300      	str	r3, [sp, #0]
 801527e:	f44f 633d 	mov.w	r3, #3024	; 0xbd0
 8015282:	4a06      	ldr	r2, [pc, #24]	; (801529c <ssl_write_client_key_exchange+0xd0>)
 8015284:	2102      	movs	r1, #2
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f7f6 fd38 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 801528c:	2300      	movs	r3, #0
}
 801528e:	4618      	mov	r0, r3
 8015290:	3718      	adds	r7, #24
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	080233e0 	.word	0x080233e0
 801529c:	08022b94 	.word	0x08022b94
 80152a0:	08023288 	.word	0x08023288
 80152a4:	ffff9400 	.word	0xffff9400
 80152a8:	08022e2c 	.word	0x08022e2c
 80152ac:	08023400 	.word	0x08023400

080152b0 <ssl_write_certificate_verify>:
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
}
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
 80152b0:	b590      	push	{r4, r7, lr}
 80152b2:	b09b      	sub	sp, #108	; 0x6c
 80152b4:	af04      	add	r7, sp, #16
 80152b6:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 80152b8:	4b9b      	ldr	r3, [pc, #620]	; (8015528 <ssl_write_certificate_verify+0x278>)
 80152ba:	653b      	str	r3, [r7, #80]	; 0x50
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t n = 0, offset = 0;
 80152c4:	2300      	movs	r3, #0
 80152c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80152c8:	2300      	movs	r3, #0
 80152ca:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char hash[48];
    unsigned char *hash_start = hash;
 80152cc:	f107 030c 	add.w	r3, r7, #12
 80152d0:	647b      	str	r3, [r7, #68]	; 0x44
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
 80152d2:	2300      	movs	r3, #0
 80152d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 80152d8:	4b94      	ldr	r3, [pc, #592]	; (801552c <ssl_write_certificate_verify+0x27c>)
 80152da:	9300      	str	r3, [sp, #0]
 80152dc:	f640 4303 	movw	r3, #3075	; 0xc03
 80152e0:	4a93      	ldr	r2, [pc, #588]	; (8015530 <ssl_write_certificate_verify+0x280>)
 80152e2:	2102      	movs	r1, #2
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f7f6 fd09 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	f000 fc26 	bl	8015b3c <mbedtls_ssl_derive_keys>
 80152f0:	6538      	str	r0, [r7, #80]	; 0x50
 80152f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d00c      	beq.n	8015312 <ssl_write_certificate_verify+0x62>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 80152f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152fa:	9301      	str	r3, [sp, #4]
 80152fc:	4b8d      	ldr	r3, [pc, #564]	; (8015534 <ssl_write_certificate_verify+0x284>)
 80152fe:	9300      	str	r3, [sp, #0]
 8015300:	f640 4307 	movw	r3, #3079	; 0xc07
 8015304:	4a8a      	ldr	r2, [pc, #552]	; (8015530 <ssl_write_certificate_verify+0x280>)
 8015306:	2101      	movs	r1, #1
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f7f6 fd7d 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 801530e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015310:	e106      	b.n	8015520 <ssl_write_certificate_verify+0x270>
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8015312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015314:	7a9b      	ldrb	r3, [r3, #10]
 8015316:	2b05      	cmp	r3, #5
 8015318:	d00f      	beq.n	801533a <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
 801531a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801531c:	7a9b      	ldrb	r3, [r3, #10]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801531e:	2b07      	cmp	r3, #7
 8015320:	d00b      	beq.n	801533a <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8015322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015324:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
 8015326:	2b08      	cmp	r3, #8
 8015328:	d007      	beq.n	801533a <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 801532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801532c:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 801532e:	2b06      	cmp	r3, #6
 8015330:	d003      	beq.n	801533a <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
 8015332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015334:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8015336:	2b0b      	cmp	r3, #11
 8015338:	d10f      	bne.n	801535a <ssl_write_certificate_verify+0xaa>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801533a:	4b7f      	ldr	r3, [pc, #508]	; (8015538 <ssl_write_certificate_verify+0x288>)
 801533c:	9300      	str	r3, [sp, #0]
 801533e:	f640 4311 	movw	r3, #3089	; 0xc11
 8015342:	4a7b      	ldr	r2, [pc, #492]	; (8015530 <ssl_write_certificate_verify+0x280>)
 8015344:	2102      	movs	r1, #2
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7f6 fcd8 	bl	800bcfc <mbedtls_debug_print_msg>
        ssl->state++;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	685b      	ldr	r3, [r3, #4]
 8015350:	1c5a      	adds	r2, r3, #1
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	605a      	str	r2, [r3, #4]
        return( 0 );
 8015356:	2300      	movs	r3, #0
 8015358:	e0e2      	b.n	8015520 <ssl_write_certificate_verify+0x270>
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015360:	2b00      	cmp	r3, #0
 8015362:	d005      	beq.n	8015370 <ssl_write_certificate_verify+0xc0>
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7fe fc67 	bl	8013c38 <mbedtls_ssl_own_cert>
 801536a:	4603      	mov	r3, r0
 801536c:	2b00      	cmp	r3, #0
 801536e:	d10f      	bne.n	8015390 <ssl_write_certificate_verify+0xe0>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 8015370:	4b71      	ldr	r3, [pc, #452]	; (8015538 <ssl_write_certificate_verify+0x288>)
 8015372:	9300      	str	r3, [sp, #0]
 8015374:	f640 4318 	movw	r3, #3096	; 0xc18
 8015378:	4a6d      	ldr	r2, [pc, #436]	; (8015530 <ssl_write_certificate_verify+0x280>)
 801537a:	2102      	movs	r1, #2
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f7f6 fcbd 	bl	800bcfc <mbedtls_debug_print_msg>
        ssl->state++;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	1c5a      	adds	r2, r3, #1
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	605a      	str	r2, [r3, #4]
        return( 0 );
 801538c:	2300      	movs	r3, #0
 801538e:	e0c7      	b.n	8015520 <ssl_write_certificate_verify+0x270>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 8015390:	6878      	ldr	r0, [r7, #4]
 8015392:	f7fe fc2e 	bl	8013bf2 <mbedtls_ssl_own_key>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	d10a      	bne.n	80153b2 <ssl_write_certificate_verify+0x102>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 801539c:	4b67      	ldr	r3, [pc, #412]	; (801553c <ssl_write_certificate_verify+0x28c>)
 801539e:	9300      	str	r3, [sp, #0]
 80153a0:	f640 431f 	movw	r3, #3103	; 0xc1f
 80153a4:	4a62      	ldr	r2, [pc, #392]	; (8015530 <ssl_write_certificate_verify+0x280>)
 80153a6:	2101      	movs	r1, #1
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f7f6 fca7 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 80153ae:	4b64      	ldr	r3, [pc, #400]	; (8015540 <ssl_write_certificate_verify+0x290>)
 80153b0:	e0b6      	b.n	8015520 <ssl_write_certificate_verify+0x270>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153b8:	f107 020c 	add.w	r2, r7, #12
 80153bc:	4611      	mov	r1, r2
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	68db      	ldr	r3, [r3, #12]
 80153c6:	2b03      	cmp	r3, #3
 80153c8:	d14c      	bne.n	8015464 <ssl_write_certificate_verify+0x1b4>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	7a5b      	ldrb	r3, [r3, #9]
 80153d2:	2b07      	cmp	r3, #7
 80153d4:	d109      	bne.n	80153ea <ssl_write_certificate_verify+0x13a>
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
 80153d6:	2307      	movs	r3, #7
 80153d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80153e2:	3304      	adds	r3, #4
 80153e4:	2205      	movs	r2, #5
 80153e6:	701a      	strb	r2, [r3, #0]
 80153e8:	e008      	b.n	80153fc <ssl_write_certificate_verify+0x14c>
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 80153ea:	2306      	movs	r3, #6
 80153ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80153f6:	3304      	adds	r3, #4
 80153f8:	2204      	movs	r2, #4
 80153fa:	701a      	strb	r2, [r3, #0]
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f7fe fbf8 	bl	8013bf2 <mbedtls_ssl_own_key>
 8015402:	4602      	mov	r2, r0
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801540a:	1d5c      	adds	r4, r3, #5
 801540c:	4610      	mov	r0, r2
 801540e:	f004 fbdb 	bl	8019bc8 <mbedtls_ssl_sig_from_pk>
 8015412:	4603      	mov	r3, r0
 8015414:	7023      	strb	r3, [r4, #0]

        /* Info from md_alg will be used instead */
        hashlen = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	643b      	str	r3, [r7, #64]	; 0x40
        offset = 2;
 801541a:	2302      	movs	r3, #2
 801541c:	64bb      	str	r3, [r7, #72]	; 0x48
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f7fe fbe7 	bl	8013bf2 <mbedtls_ssl_own_key>
 8015424:	4604      	mov	r4, r0
                         ssl->out_msg + 6 + offset, &n,
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801542c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801542e:	3306      	adds	r3, #6
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8015430:	4413      	add	r3, r2
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8015432:	687a      	ldr	r2, [r7, #4]
 8015434:	6812      	ldr	r2, [r2, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8015436:	6992      	ldr	r2, [r2, #24]
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8015438:	6879      	ldr	r1, [r7, #4]
 801543a:	6809      	ldr	r1, [r1, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801543c:	69c9      	ldr	r1, [r1, #28]
 801543e:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 8015442:	9103      	str	r1, [sp, #12]
 8015444:	9202      	str	r2, [sp, #8]
 8015446:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801544a:	9201      	str	r2, [sp, #4]
 801544c:	9300      	str	r3, [sp, #0]
 801544e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015452:	4601      	mov	r1, r0
 8015454:	4620      	mov	r0, r4
 8015456:	f7f9 ff83 	bl	800f360 <mbedtls_pk_sign>
 801545a:	6538      	str	r0, [r7, #80]	; 0x50
 801545c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801545e:	2b00      	cmp	r3, #0
 8015460:	d018      	beq.n	8015494 <ssl_write_certificate_verify+0x1e4>
 8015462:	e00a      	b.n	801547a <ssl_write_certificate_verify+0x1ca>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015464:	4b37      	ldr	r3, [pc, #220]	; (8015544 <ssl_write_certificate_verify+0x294>)
 8015466:	9300      	str	r3, [sp, #0]
 8015468:	f640 436e 	movw	r3, #3182	; 0xc6e
 801546c:	4a30      	ldr	r2, [pc, #192]	; (8015530 <ssl_write_certificate_verify+0x280>)
 801546e:	2101      	movs	r1, #1
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f7f6 fc43 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015476:	4b34      	ldr	r3, [pc, #208]	; (8015548 <ssl_write_certificate_verify+0x298>)
 8015478:	e052      	b.n	8015520 <ssl_write_certificate_verify+0x270>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 801547a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801547c:	9301      	str	r3, [sp, #4]
 801547e:	4b33      	ldr	r3, [pc, #204]	; (801554c <ssl_write_certificate_verify+0x29c>)
 8015480:	9300      	str	r3, [sp, #0]
 8015482:	f640 4376 	movw	r3, #3190	; 0xc76
 8015486:	4a2a      	ldr	r2, [pc, #168]	; (8015530 <ssl_write_certificate_verify+0x280>)
 8015488:	2101      	movs	r1, #1
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f7f6 fcbc 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8015490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015492:	e045      	b.n	8015520 <ssl_write_certificate_verify+0x270>
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 8015494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015496:	0a19      	lsrs	r1, r3, #8
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801549e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154a0:	3304      	adds	r3, #4
 80154a2:	4413      	add	r3, r2
 80154a4:	b2ca      	uxtb	r2, r1
 80154a6:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 80154a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80154b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154b2:	3305      	adds	r3, #5
 80154b4:	4413      	add	r3, r2
 80154b6:	b2ca      	uxtb	r2, r1
 80154b8:	701a      	strb	r2, [r3, #0]

    ssl->out_msglen  = 6 + n + offset;
 80154ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80154bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154be:	4413      	add	r3, r2
 80154c0:	1d9a      	adds	r2, r3, #6
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2216      	movs	r2, #22
 80154cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80154d6:	220f      	movs	r2, #15
 80154d8:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	1c5a      	adds	r2, r3, #1
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f002 f8d3 	bl	8017690 <mbedtls_ssl_write_record>
 80154ea:	6538      	str	r0, [r7, #80]	; 0x50
 80154ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d00c      	beq.n	801550c <ssl_write_certificate_verify+0x25c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 80154f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154f4:	9301      	str	r3, [sp, #4]
 80154f6:	4b16      	ldr	r3, [pc, #88]	; (8015550 <ssl_write_certificate_verify+0x2a0>)
 80154f8:	9300      	str	r3, [sp, #0]
 80154fa:	f640 4385 	movw	r3, #3205	; 0xc85
 80154fe:	4a0c      	ldr	r2, [pc, #48]	; (8015530 <ssl_write_certificate_verify+0x280>)
 8015500:	2101      	movs	r1, #1
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f7f6 fc80 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8015508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801550a:	e009      	b.n	8015520 <ssl_write_certificate_verify+0x270>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 801550c:	4b11      	ldr	r3, [pc, #68]	; (8015554 <ssl_write_certificate_verify+0x2a4>)
 801550e:	9300      	str	r3, [sp, #0]
 8015510:	f640 4389 	movw	r3, #3209	; 0xc89
 8015514:	4a06      	ldr	r2, [pc, #24]	; (8015530 <ssl_write_certificate_verify+0x280>)
 8015516:	2102      	movs	r1, #2
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	f7f6 fbef 	bl	800bcfc <mbedtls_debug_print_msg>

    return( ret );
 801551e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8015520:	4618      	mov	r0, r3
 8015522:	375c      	adds	r7, #92	; 0x5c
 8015524:	46bd      	mov	sp, r7
 8015526:	bd90      	pop	{r4, r7, pc}
 8015528:	ffff8f80 	.word	0xffff8f80
 801552c:	08023420 	.word	0x08023420
 8015530:	08022b94 	.word	0x08022b94
 8015534:	08022ff8 	.word	0x08022ff8
 8015538:	0802343c 	.word	0x0802343c
 801553c:	08023460 	.word	0x08023460
 8015540:	ffff8a00 	.word	0xffff8a00
 8015544:	08023288 	.word	0x08023288
 8015548:	ffff9400 	.word	0xffff9400
 801554c:	08023484 	.word	0x08023484
 8015550:	08022e2c 	.word	0x08022e2c
 8015554:	08023494 	.word	0x08023494

08015558 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b086      	sub	sp, #24
 801555c:	af02      	add	r7, sp, #8
 801555e:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8015560:	2300      	movs	r3, #0
 8015562:	60fb      	str	r3, [r7, #12]

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	2b10      	cmp	r3, #16
 801556a:	d003      	beq.n	8015574 <mbedtls_ssl_handshake_client_step+0x1c>
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015570:	2b00      	cmp	r3, #0
 8015572:	d101      	bne.n	8015578 <mbedtls_ssl_handshake_client_step+0x20>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015574:	4b56      	ldr	r3, [pc, #344]	; (80156d0 <mbedtls_ssl_handshake_client_step+0x178>)
 8015576:	e0a6      	b.n	80156c6 <mbedtls_ssl_handshake_client_step+0x16e>
    printf("handshake: %d \r\n", ssl->handshake);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801557c:	4619      	mov	r1, r3
 801557e:	4855      	ldr	r0, [pc, #340]	; (80156d4 <mbedtls_ssl_handshake_client_step+0x17c>)
 8015580:	f009 f94e 	bl	801e820 <iprintf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	9301      	str	r3, [sp, #4]
 801558a:	4b53      	ldr	r3, [pc, #332]	; (80156d8 <mbedtls_ssl_handshake_client_step+0x180>)
 801558c:	9300      	str	r3, [sp, #0]
 801558e:	f640 5308 	movw	r3, #3336	; 0xd08
 8015592:	4a52      	ldr	r2, [pc, #328]	; (80156dc <mbedtls_ssl_handshake_client_step+0x184>)
 8015594:	2102      	movs	r1, #2
 8015596:	6878      	ldr	r0, [r7, #4]
 8015598:	f7f6 fbb0 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f001 ffaf 	bl	8017500 <mbedtls_ssl_flush_output>
 80155a2:	60f8      	str	r0, [r7, #12]
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d001      	beq.n	80155ae <mbedtls_ssl_handshake_client_step+0x56>
        return( ret );
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	e08b      	b.n	80156c6 <mbedtls_ssl_handshake_client_step+0x16e>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
    }
#endif

    switch( ssl->state )
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	2b0f      	cmp	r3, #15
 80155b4:	d878      	bhi.n	80156a8 <mbedtls_ssl_handshake_client_step+0x150>
 80155b6:	a201      	add	r2, pc, #4	; (adr r2, 80155bc <mbedtls_ssl_handshake_client_step+0x64>)
 80155b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155bc:	080155fd 	.word	0x080155fd
 80155c0:	08015605 	.word	0x08015605
 80155c4:	0801560f 	.word	0x0801560f
 80155c8:	08015619 	.word	0x08015619
 80155cc:	08015623 	.word	0x08015623
 80155d0:	0801562d 	.word	0x0801562d
 80155d4:	08015637 	.word	0x08015637
 80155d8:	08015641 	.word	0x08015641
 80155dc:	0801564b 	.word	0x0801564b
 80155e0:	08015655 	.word	0x08015655
 80155e4:	0801565f 	.word	0x0801565f
 80155e8:	08015669 	.word	0x08015669
 80155ec:	08015673 	.word	0x08015673
 80155f0:	0801567d 	.word	0x0801567d
 80155f4:	08015687 	.word	0x08015687
 80155f8:	080156a1 	.word	0x080156a1
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	2201      	movs	r2, #1
 8015600:	605a      	str	r2, [r3, #4]
            break;
 8015602:	e05f      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       /*
        *  ==>   ClientHello
        */
       case MBEDTLS_SSL_CLIENT_HELLO:
           ret = ssl_write_client_hello( ssl );
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f7fe fc13 	bl	8013e30 <ssl_write_client_hello>
 801560a:	60f8      	str	r0, [r7, #12]
           break;
 801560c:	e05a      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>
        *      ( ServerKeyExchange  )
        *      ( CertificateRequest )
        *        ServerHelloDone
        */
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f7fe fe88 	bl	8014324 <ssl_parse_server_hello>
 8015614:	60f8      	str	r0, [r7, #12]
           break;
 8015616:	e055      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f002 fe65 	bl	80182e8 <mbedtls_ssl_parse_certificate>
 801561e:	60f8      	str	r0, [r7, #12]
           break;
 8015620:	e050      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_KEY_EXCHANGE:
           ret = ssl_parse_server_key_exchange( ssl );
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f7ff fb34 	bl	8014c90 <ssl_parse_server_key_exchange>
 8015628:	60f8      	str	r0, [r7, #12]
           break;
 801562a:	e04b      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CERTIFICATE_REQUEST:
           ret = ssl_parse_certificate_request( ssl );
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f7ff fbf3 	bl	8014e18 <ssl_parse_certificate_request>
 8015632:	60f8      	str	r0, [r7, #12]
           break;
 8015634:	e046      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_HELLO_DONE:
           ret = ssl_parse_server_hello_done( ssl );
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f7ff fd5a 	bl	80150f0 <ssl_parse_server_hello_done>
 801563c:	60f8      	str	r0, [r7, #12]
           break;
 801563e:	e041      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f002 fd37 	bl	80180b4 <mbedtls_ssl_write_certificate>
 8015646:	60f8      	str	r0, [r7, #12]
           break;
 8015648:	e03c      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:
           ret = ssl_write_client_key_exchange( ssl );
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f7ff fdbe 	bl	80151cc <ssl_write_client_key_exchange>
 8015650:	60f8      	str	r0, [r7, #12]
           break;
 8015652:	e037      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f7ff fe2b 	bl	80152b0 <ssl_write_certificate_verify>
 801565a:	60f8      	str	r0, [r7, #12]
           break;
 801565c:	e032      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f003 f914 	bl	801888c <mbedtls_ssl_write_change_cipher_spec>
 8015664:	60f8      	str	r0, [r7, #12]
           break;
 8015666:	e02d      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 8015668:	6878      	ldr	r0, [r7, #4]
 801566a:	f003 fb7d 	bl	8018d68 <mbedtls_ssl_write_finished>
 801566e:	60f8      	str	r0, [r7, #12]
           break;
 8015670:	e028      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f003 f954 	bl	8018920 <mbedtls_ssl_parse_change_cipher_spec>
 8015678:	60f8      	str	r0, [r7, #12]
           break;
 801567a:	e023      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 801567c:	6878      	ldr	r0, [r7, #4]
 801567e:	f003 fc1d 	bl	8018ebc <mbedtls_ssl_parse_finished>
 8015682:	60f8      	str	r0, [r7, #12]
           break;
 8015684:	e01e      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 8015686:	4b16      	ldr	r3, [pc, #88]	; (80156e0 <mbedtls_ssl_handshake_client_step+0x188>)
 8015688:	9300      	str	r3, [sp, #0]
 801568a:	f640 5377 	movw	r3, #3447	; 0xd77
 801568e:	4a13      	ldr	r2, [pc, #76]	; (80156dc <mbedtls_ssl_handshake_client_step+0x184>)
 8015690:	2102      	movs	r1, #2
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f7f6 fb32 	bl	800bcfc <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	220f      	movs	r2, #15
 801569c:	605a      	str	r2, [r3, #4]
           break;
 801569e:	e011      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f003 faf9 	bl	8018c98 <mbedtls_ssl_handshake_wrapup>
           break;
 80156a6:	e00d      	b.n	80156c4 <mbedtls_ssl_handshake_client_step+0x16c>

       default:
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	9301      	str	r3, [sp, #4]
 80156ae:	4b0d      	ldr	r3, [pc, #52]	; (80156e4 <mbedtls_ssl_handshake_client_step+0x18c>)
 80156b0:	9300      	str	r3, [sp, #0]
 80156b2:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 80156b6:	4a09      	ldr	r2, [pc, #36]	; (80156dc <mbedtls_ssl_handshake_client_step+0x184>)
 80156b8:	2101      	movs	r1, #1
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f7f6 fb1e 	bl	800bcfc <mbedtls_debug_print_msg>
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80156c0:	4b03      	ldr	r3, [pc, #12]	; (80156d0 <mbedtls_ssl_handshake_client_step+0x178>)
 80156c2:	e000      	b.n	80156c6 <mbedtls_ssl_handshake_client_step+0x16e>
   }

    return( ret );
 80156c4:	68fb      	ldr	r3, [r7, #12]
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3710      	adds	r7, #16
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	ffff8f00 	.word	0xffff8f00
 80156d4:	080234b0 	.word	0x080234b0
 80156d8:	080234c4 	.word	0x080234c4
 80156dc:	08022b94 	.word	0x08022b94
 80156e0:	080234d8 	.word	0x080234d8
 80156e4:	080234e8 	.word	0x080234e8

080156e8 <mbedtls_cipher_get_cipher_mode>:
{
 80156e8:	b480      	push	{r7}
 80156ea:	b083      	sub	sp, #12
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d003      	beq.n	80156fe <mbedtls_cipher_get_cipher_mode+0x16>
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d101      	bne.n	8015702 <mbedtls_cipher_get_cipher_mode+0x1a>
        return MBEDTLS_MODE_NONE;
 80156fe:	2300      	movs	r3, #0
 8015700:	e002      	b.n	8015708 <mbedtls_cipher_get_cipher_mode+0x20>
    return ctx->cipher_info->mode;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	785b      	ldrb	r3, [r3, #1]
}
 8015708:	4618      	mov	r0, r3
 801570a:	370c      	adds	r7, #12
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr

08015714 <mbedtls_ssl_sig_hash_set_init>:
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_sig_hash_set_const_hash( set, MBEDTLS_MD_NONE );
 801571c:	2100      	movs	r1, #0
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f004 fa64 	bl	8019bec <mbedtls_ssl_sig_hash_set_const_hash>
}
 8015724:	bf00      	nop
 8015726:	3708      	adds	r7, #8
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <mbedtls_ssl_own_cert>:
{
 801572c:	b480      	push	{r7}
 801572e:	b085      	sub	sp, #20
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015738:	2b00      	cmp	r3, #0
 801573a:	d009      	beq.n	8015750 <mbedtls_ssl_own_cert+0x24>
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015740:	685b      	ldr	r3, [r3, #4]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d004      	beq.n	8015750 <mbedtls_ssl_own_cert+0x24>
        key_cert = ssl->handshake->key_cert;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	60fb      	str	r3, [r7, #12]
 801574e:	e003      	b.n	8015758 <mbedtls_ssl_own_cert+0x2c>
        key_cert = ssl->conf->key_cert;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015756:	60fb      	str	r3, [r7, #12]
    return( key_cert == NULL ? NULL : key_cert->cert );
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d002      	beq.n	8015764 <mbedtls_ssl_own_cert+0x38>
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	e000      	b.n	8015766 <mbedtls_ssl_own_cert+0x3a>
 8015764:	2300      	movs	r3, #0
}
 8015766:	4618      	mov	r0, r3
 8015768:	3714      	adds	r7, #20
 801576a:	46bd      	mov	sp, r7
 801576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015770:	4770      	bx	lr

08015772 <mbedtls_ssl_hdr_len>:
{
 8015772:	b480      	push	{r7}
 8015774:	b083      	sub	sp, #12
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
    return( 5 );
 801577a:	2305      	movs	r3, #5
}
 801577c:	4618      	mov	r0, r3
 801577e:	370c      	adds	r7, #12
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr

08015788 <mbedtls_ssl_hs_hdr_len>:
{
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
    return( 4 );
 8015790:	2304      	movs	r3, #4
}
 8015792:	4618      	mov	r0, r3
 8015794:	370c      	adds	r7, #12
 8015796:	46bd      	mov	sp, r7
 8015798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579c:	4770      	bx	lr

0801579e <mbedtls_ssl_safer_memcmp>:
void mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl );
#endif

/* constant-time buffer comparison */
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
 801579e:	b480      	push	{r7}
 80157a0:	b089      	sub	sp, #36	; 0x24
 80157a2:	af00      	add	r7, sp, #0
 80157a4:	60f8      	str	r0, [r7, #12]
 80157a6:	60b9      	str	r1, [r7, #8]
 80157a8:	607a      	str	r2, [r7, #4]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	61bb      	str	r3, [r7, #24]
    volatile const unsigned char *B = (volatile const unsigned char *) b;
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	617b      	str	r3, [r7, #20]
    volatile unsigned char diff = 0;
 80157b2:	2300      	movs	r3, #0
 80157b4:	74fb      	strb	r3, [r7, #19]

    for( i = 0; i < n; i++ )
 80157b6:	2300      	movs	r3, #0
 80157b8:	61fb      	str	r3, [r7, #28]
 80157ba:	e016      	b.n	80157ea <mbedtls_ssl_safer_memcmp+0x4c>
        diff |= A[i] ^ B[i];
 80157bc:	69ba      	ldr	r2, [r7, #24]
 80157be:	69fb      	ldr	r3, [r7, #28]
 80157c0:	4413      	add	r3, r2
 80157c2:	781b      	ldrb	r3, [r3, #0]
 80157c4:	b2da      	uxtb	r2, r3
 80157c6:	6979      	ldr	r1, [r7, #20]
 80157c8:	69fb      	ldr	r3, [r7, #28]
 80157ca:	440b      	add	r3, r1
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	b2db      	uxtb	r3, r3
 80157d0:	4053      	eors	r3, r2
 80157d2:	b2db      	uxtb	r3, r3
 80157d4:	b25a      	sxtb	r2, r3
 80157d6:	7cfb      	ldrb	r3, [r7, #19]
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	b25b      	sxtb	r3, r3
 80157dc:	4313      	orrs	r3, r2
 80157de:	b25b      	sxtb	r3, r3
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	74fb      	strb	r3, [r7, #19]
    for( i = 0; i < n; i++ )
 80157e4:	69fb      	ldr	r3, [r7, #28]
 80157e6:	3301      	adds	r3, #1
 80157e8:	61fb      	str	r3, [r7, #28]
 80157ea:	69fa      	ldr	r2, [r7, #28]
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d3e4      	bcc.n	80157bc <mbedtls_ssl_safer_memcmp+0x1e>

    return( diff );
 80157f2:	7cfb      	ldrb	r3, [r7, #19]
 80157f4:	b2db      	uxtb	r3, r3
}
 80157f6:	4618      	mov	r0, r3
 80157f8:	3724      	adds	r7, #36	; 0x24
 80157fa:	46bd      	mov	sp, r7
 80157fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015800:	4770      	bx	lr

08015802 <mbedtls_zeroize>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8015802:	b480      	push	{r7}
 8015804:	b085      	sub	sp, #20
 8015806:	af00      	add	r7, sp, #0
 8015808:	6078      	str	r0, [r7, #4]
 801580a:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	60fb      	str	r3, [r7, #12]
 8015810:	e004      	b.n	801581c <mbedtls_zeroize+0x1a>
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	1c5a      	adds	r2, r3, #1
 8015816:	60fa      	str	r2, [r7, #12]
 8015818:	2200      	movs	r2, #0
 801581a:	701a      	strb	r2, [r3, #0]
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	1e5a      	subs	r2, r3, #1
 8015820:	603a      	str	r2, [r7, #0]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d1f5      	bne.n	8015812 <mbedtls_zeroize+0x10>
}
 8015826:	bf00      	nop
 8015828:	bf00      	nop
 801582a:	3714      	adds	r7, #20
 801582c:	46bd      	mov	sp, r7
 801582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015832:	4770      	bx	lr

08015834 <ssl_ep_len>:

/* Length of the "epoch" field in the record header */
static inline size_t ssl_ep_len( const mbedtls_ssl_context *ssl )
{
 8015834:	b480      	push	{r7}
 8015836:	b083      	sub	sp, #12
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        return( 2 );
#else
    ((void) ssl);
#endif
    return( 0 );
 801583c:	2300      	movs	r3, #0
}
 801583e:	4618      	mov	r0, r3
 8015840:	370c      	adds	r7, #12
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr
	...

0801584c <ssl_set_timer>:
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b084      	sub	sp, #16
 8015850:	af02      	add	r7, sp, #8
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
    if( ssl->f_set_timer == NULL )
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801585a:	2b00      	cmp	r3, #0
 801585c:	d012      	beq.n	8015884 <ssl_set_timer+0x38>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 801585e:	683b      	ldr	r3, [r7, #0]
 8015860:	9301      	str	r3, [sp, #4]
 8015862:	4b0a      	ldr	r3, [pc, #40]	; (801588c <ssl_set_timer+0x40>)
 8015864:	9300      	str	r3, [sp, #0]
 8015866:	2352      	movs	r3, #82	; 0x52
 8015868:	4a09      	ldr	r2, [pc, #36]	; (8015890 <ssl_set_timer+0x44>)
 801586a:	2103      	movs	r1, #3
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f7f6 fa45 	bl	800bcfc <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015876:	687a      	ldr	r2, [r7, #4]
 8015878:	6c50      	ldr	r0, [r2, #68]	; 0x44
 801587a:	683a      	ldr	r2, [r7, #0]
 801587c:	0891      	lsrs	r1, r2, #2
 801587e:	683a      	ldr	r2, [r7, #0]
 8015880:	4798      	blx	r3
 8015882:	e000      	b.n	8015886 <ssl_set_timer+0x3a>
        return;
 8015884:	bf00      	nop
}
 8015886:	3708      	adds	r7, #8
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}
 801588c:	08023528 	.word	0x08023528
 8015890:	080234fc 	.word	0x080234fc

08015894 <ssl_check_timer>:

/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b084      	sub	sp, #16
 8015898:	af02      	add	r7, sp, #8
 801589a:	6078      	str	r0, [r7, #4]
    if( ssl->f_get_timer == NULL )
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d101      	bne.n	80158a8 <ssl_check_timer+0x14>
        return( 0 );
 80158a4:	2300      	movs	r3, #0
 80158a6:	e014      	b.n	80158d2 <ssl_check_timer+0x3e>

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80158b0:	4610      	mov	r0, r2
 80158b2:	4798      	blx	r3
 80158b4:	4603      	mov	r3, r0
 80158b6:	2b02      	cmp	r3, #2
 80158b8:	d10a      	bne.n	80158d0 <ssl_check_timer+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 80158ba:	4b08      	ldr	r3, [pc, #32]	; (80158dc <ssl_check_timer+0x48>)
 80158bc:	9300      	str	r3, [sp, #0]
 80158be:	2360      	movs	r3, #96	; 0x60
 80158c0:	4a07      	ldr	r2, [pc, #28]	; (80158e0 <ssl_check_timer+0x4c>)
 80158c2:	2103      	movs	r1, #3
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f7f6 fa19 	bl	800bcfc <mbedtls_debug_print_msg>
        return( -1 );
 80158ca:	f04f 33ff 	mov.w	r3, #4294967295
 80158ce:	e000      	b.n	80158d2 <ssl_check_timer+0x3e>
    }

    return( 0 );
 80158d0:	2300      	movs	r3, #0
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	3708      	adds	r7, #8
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}
 80158da:	bf00      	nop
 80158dc:	0802353c 	.word	0x0802353c
 80158e0:	080234fc 	.word	0x080234fc

080158e4 <tls_prf_generic>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b0b6      	sub	sp, #216	; 0xd8
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	60b9      	str	r1, [r7, #8]
 80158ec:	607a      	str	r2, [r7, #4]
 80158ee:	603b      	str	r3, [r7, #0]
 80158f0:	4603      	mov	r3, r0
 80158f2:	73fb      	strb	r3, [r7, #15]
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80158f4:	f107 0310 	add.w	r3, r7, #16
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7f8 fe55 	bl	800e5a8 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 80158fe:	7bfb      	ldrb	r3, [r7, #15]
 8015900:	4618      	mov	r0, r3
 8015902:	f7f8 fe37 	bl	800e574 <mbedtls_md_info_from_type>
 8015906:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 801590a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801590e:	2b00      	cmp	r3, #0
 8015910:	d101      	bne.n	8015916 <tls_prf_generic+0x32>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015912:	4b7b      	ldr	r3, [pc, #492]	; (8015b00 <tls_prf_generic+0x21c>)
 8015914:	e0ef      	b.n	8015af6 <tls_prf_generic+0x212>

    md_len = mbedtls_md_get_size( md_info );
 8015916:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801591a:	f7f9 f869 	bl	800e9f0 <mbedtls_md_get_size>
 801591e:	4603      	mov	r3, r0
 8015920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 8015924:	6838      	ldr	r0, [r7, #0]
 8015926:	f7ea fc5d 	bl	80001e4 <strlen>
 801592a:	4602      	mov	r2, r0
 801592c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015930:	441a      	add	r2, r3
 8015932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015936:	4413      	add	r3, r2
 8015938:	2b80      	cmp	r3, #128	; 0x80
 801593a:	d901      	bls.n	8015940 <tls_prf_generic+0x5c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801593c:	4b71      	ldr	r3, [pc, #452]	; (8015b04 <tls_prf_generic+0x220>)
 801593e:	e0da      	b.n	8015af6 <tls_prf_generic+0x212>

    nb = strlen( label );
 8015940:	6838      	ldr	r0, [r7, #0]
 8015942:	f7ea fc4f 	bl	80001e4 <strlen>
 8015946:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    memcpy( tmp + md_len, label, nb );
 801594a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801594e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015952:	4413      	add	r3, r2
 8015954:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015958:	6839      	ldr	r1, [r7, #0]
 801595a:	4618      	mov	r0, r3
 801595c:	f008 fe3a 	bl	801e5d4 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 8015960:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015968:	4413      	add	r3, r2
 801596a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801596e:	4413      	add	r3, r2
 8015970:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8015974:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8015978:	4618      	mov	r0, r3
 801597a:	f008 fe2b 	bl	801e5d4 <memcpy>
    nb += rlen;
 801597e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015986:	4413      	add	r3, r2
 8015988:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 801598c:	f107 0310 	add.w	r3, r7, #16
 8015990:	2201      	movs	r2, #1
 8015992:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8015996:	4618      	mov	r0, r3
 8015998:	f7f8 fe46 	bl	800e628 <mbedtls_md_setup>
 801599c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80159a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d002      	beq.n	80159ae <tls_prf_generic+0xca>
        return( ret );
 80159a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80159ac:	e0a3      	b.n	8015af6 <tls_prf_generic+0x212>

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80159ae:	f107 0310 	add.w	r3, r7, #16
 80159b2:	687a      	ldr	r2, [r7, #4]
 80159b4:	68b9      	ldr	r1, [r7, #8]
 80159b6:	4618      	mov	r0, r3
 80159b8:	f7f8 fe90 	bl	800e6dc <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 80159bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80159c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80159c4:	18d1      	adds	r1, r2, r3
 80159c6:	f107 0310 	add.w	r3, r7, #16
 80159ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7f8 ff36 	bl	800e840 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 80159d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80159d8:	f107 0310 	add.w	r3, r7, #16
 80159dc:	4611      	mov	r1, r2
 80159de:	4618      	mov	r0, r3
 80159e0:	f7f8 ff50 	bl	800e884 <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 80159e4:	2300      	movs	r3, #0
 80159e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80159ea:	e06c      	b.n	8015ac6 <tls_prf_generic+0x1e2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 80159ec:	f107 0310 	add.w	r3, r7, #16
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7f8 ffad 	bl	800e950 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 80159f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80159fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80159fe:	441a      	add	r2, r3
 8015a00:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015a04:	f107 0310 	add.w	r3, r7, #16
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7f8 ff19 	bl	800e840 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 8015a0e:	f107 021c 	add.w	r2, r7, #28
 8015a12:	f107 0310 	add.w	r3, r7, #16
 8015a16:	4611      	mov	r1, r2
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7f8 ff33 	bl	800e884 <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 8015a1e:	f107 0310 	add.w	r3, r7, #16
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7f8 ff94 	bl	800e950 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 8015a28:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015a2c:	f107 0310 	add.w	r3, r7, #16
 8015a30:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7f8 ff03 	bl	800e840 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 8015a3a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015a3e:	f107 0310 	add.w	r3, r7, #16
 8015a42:	4611      	mov	r1, r2
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7f8 ff1d 	bl	800e884 <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8015a4a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015a52:	4413      	add	r3, r2
 8015a54:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d20b      	bcs.n	8015a74 <tls_prf_generic+0x190>
 8015a5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015a60:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015a64:	fbb3 f2f2 	udiv	r2, r3, r2
 8015a68:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8015a6c:	fb01 f202 	mul.w	r2, r1, r2
 8015a70:	1a9b      	subs	r3, r3, r2
 8015a72:	e001      	b.n	8015a78 <tls_prf_generic+0x194>
 8015a74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015a78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        for( j = 0; j < k; j++ )
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015a82:	e013      	b.n	8015aac <tls_prf_generic+0x1c8>
            dstbuf[i + j]  = h_i[j];
 8015a84:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015a88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015a8c:	4413      	add	r3, r2
 8015a8e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015a92:	4413      	add	r3, r2
 8015a94:	f107 011c 	add.w	r1, r7, #28
 8015a98:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015a9c:	440a      	add	r2, r1
 8015a9e:	7812      	ldrb	r2, [r2, #0]
 8015aa0:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < k; j++ )
 8015aa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015aa6:	3301      	adds	r3, #1
 8015aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015aac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015ab0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015ab4:	429a      	cmp	r2, r3
 8015ab6:	d3e5      	bcc.n	8015a84 <tls_prf_generic+0x1a0>
    for( i = 0; i < dlen; i += md_len )
 8015ab8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015ac0:	4413      	add	r3, r2
 8015ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8015ac6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015aca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d38c      	bcc.n	80159ec <tls_prf_generic+0x108>
    }

    mbedtls_md_free( &md_ctx );
 8015ad2:	f107 0310 	add.w	r3, r7, #16
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f7f8 fd73 	bl	800e5c2 <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8015adc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015ae0:	2180      	movs	r1, #128	; 0x80
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7ff fe8d 	bl	8015802 <mbedtls_zeroize>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 8015ae8:	f107 031c 	add.w	r3, r7, #28
 8015aec:	2120      	movs	r1, #32
 8015aee:	4618      	mov	r0, r3
 8015af0:	f7ff fe87 	bl	8015802 <mbedtls_zeroize>

    return( 0 );
 8015af4:	2300      	movs	r3, #0
}
 8015af6:	4618      	mov	r0, r3
 8015af8:	37d8      	adds	r7, #216	; 0xd8
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}
 8015afe:	bf00      	nop
 8015b00:	ffff9400 	.word	0xffff9400
 8015b04:	ffff8f00 	.word	0xffff8f00

08015b08 <tls_prf_sha256>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b088      	sub	sp, #32
 8015b0c:	af04      	add	r7, sp, #16
 8015b0e:	60f8      	str	r0, [r7, #12]
 8015b10:	60b9      	str	r1, [r7, #8]
 8015b12:	607a      	str	r2, [r7, #4]
 8015b14:	603b      	str	r3, [r7, #0]
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 8015b16:	6a3b      	ldr	r3, [r7, #32]
 8015b18:	9303      	str	r3, [sp, #12]
 8015b1a:	69fb      	ldr	r3, [r7, #28]
 8015b1c:	9302      	str	r3, [sp, #8]
 8015b1e:	69bb      	ldr	r3, [r7, #24]
 8015b20:	9301      	str	r3, [sp, #4]
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	9300      	str	r3, [sp, #0]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	68ba      	ldr	r2, [r7, #8]
 8015b2a:	68f9      	ldr	r1, [r7, #12]
 8015b2c:	2006      	movs	r0, #6
 8015b2e:	f7ff fed9 	bl	80158e4 <tls_prf_generic>
 8015b32:	4603      	mov	r3, r0
                             label, random, rlen, dstbuf, dlen ) );
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	3710      	adds	r7, #16
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}

08015b3c <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8015b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b3e:	b0e5      	sub	sp, #404	; 0x194
 8015b40:	af06      	add	r7, sp, #24
 8015b42:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015b46:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015b4a:	6018      	str	r0, [r3, #0]
    int ret = 0;
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8015b52:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015b56:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b5e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 8015b62:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015b66:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 8015b72:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015b76:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 8015b82:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015b86:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015b8a:	4b9b      	ldr	r3, [pc, #620]	; (8015df8 <mbedtls_ssl_derive_keys+0x2bc>)
 8015b8c:	9300      	str	r3, [sp, #0]
 8015b8e:	f240 2301 	movw	r3, #513	; 0x201
 8015b92:	4a9a      	ldr	r2, [pc, #616]	; (8015dfc <mbedtls_ssl_derive_keys+0x2c0>)
 8015b94:	2102      	movs	r1, #2
 8015b96:	6800      	ldr	r0, [r0, #0]
 8015b98:	f7f6 f8b0 	bl	800bcfc <mbedtls_debug_print_msg>

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8015b9c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	7a1b      	ldrb	r3, [r3, #8]
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7f5 fb8d 	bl	800b2c4 <mbedtls_cipher_info_from_type>
 8015baa:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
    if( cipher_info == NULL )
 8015bae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d114      	bne.n	8015be0 <mbedtls_ssl_derive_keys+0xa4>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 8015bb6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	7a1b      	ldrb	r3, [r3, #8]
 8015bbe:	461a      	mov	r2, r3
 8015bc0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015bc4:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015bc8:	9201      	str	r2, [sp, #4]
 8015bca:	4b8d      	ldr	r3, [pc, #564]	; (8015e00 <mbedtls_ssl_derive_keys+0x2c4>)
 8015bcc:	9300      	str	r3, [sp, #0]
 8015bce:	f240 2306 	movw	r3, #518	; 0x206
 8015bd2:	4a8a      	ldr	r2, [pc, #552]	; (8015dfc <mbedtls_ssl_derive_keys+0x2c0>)
 8015bd4:	2101      	movs	r1, #1
 8015bd6:	6800      	ldr	r0, [r0, #0]
 8015bd8:	f7f6 f890 	bl	800bcfc <mbedtls_debug_print_msg>
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015bdc:	4b89      	ldr	r3, [pc, #548]	; (8015e04 <mbedtls_ssl_derive_keys+0x2c8>)
 8015bde:	e3f3      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8015be0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	7a5b      	ldrb	r3, [r3, #9]
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7f8 fcc3 	bl	800e574 <mbedtls_md_info_from_type>
 8015bee:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if( md_info == NULL )
 8015bf2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d114      	bne.n	8015c24 <mbedtls_ssl_derive_keys+0xe8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 8015bfa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	7a5b      	ldrb	r3, [r3, #9]
 8015c02:	461a      	mov	r2, r3
 8015c04:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015c08:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015c0c:	9201      	str	r2, [sp, #4]
 8015c0e:	4b7e      	ldr	r3, [pc, #504]	; (8015e08 <mbedtls_ssl_derive_keys+0x2cc>)
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	f240 230e 	movw	r3, #526	; 0x20e
 8015c16:	4a79      	ldr	r2, [pc, #484]	; (8015dfc <mbedtls_ssl_derive_keys+0x2c0>)
 8015c18:	2101      	movs	r1, #1
 8015c1a:	6800      	ldr	r0, [r0, #0]
 8015c1c:	f7f6 f86e 	bl	800bcfc <mbedtls_debug_print_msg>
                            transform->ciphersuite_info->mac ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015c20:	4b78      	ldr	r3, [pc, #480]	; (8015e04 <mbedtls_ssl_derive_keys+0x2c8>)
 8015c22:	e3d1      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
    }
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8015c24:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015c28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	68db      	ldr	r3, [r3, #12]
 8015c30:	2b03      	cmp	r3, #3
 8015c32:	d113      	bne.n	8015c5c <mbedtls_ssl_derive_keys+0x120>
    {
        handshake->tls_prf = tls_prf_sha256;
 8015c34:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015c38:	4a74      	ldr	r2, [pc, #464]	; (8015e0c <mbedtls_ssl_derive_keys+0x2d0>)
 8015c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8015c3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015c42:	4a73      	ldr	r2, [pc, #460]	; (8015e10 <mbedtls_ssl_derive_keys+0x2d4>)
 8015c44:	679a      	str	r2, [r3, #120]	; 0x78
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 8015c46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015c4a:	4a72      	ldr	r2, [pc, #456]	; (8015e14 <mbedtls_ssl_derive_keys+0x2d8>)
 8015c4c:	67da      	str	r2, [r3, #124]	; 0x7c
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 8015c4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015c52:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d161      	bne.n	8015d1e <mbedtls_ssl_derive_keys+0x1e2>
 8015c5a:	e00e      	b.n	8015c7a <mbedtls_ssl_derive_keys+0x13e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015c5c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015c60:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015c64:	4b6c      	ldr	r3, [pc, #432]	; (8015e18 <mbedtls_ssl_derive_keys+0x2dc>)
 8015c66:	9300      	str	r3, [sp, #0]
 8015c68:	f240 233e 	movw	r3, #574	; 0x23e
 8015c6c:	4a63      	ldr	r2, [pc, #396]	; (8015dfc <mbedtls_ssl_derive_keys+0x2c0>)
 8015c6e:	2101      	movs	r1, #1
 8015c70:	6800      	ldr	r0, [r0, #0]
 8015c72:	f7f6 f843 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015c76:	4b69      	ldr	r3, [pc, #420]	; (8015e1c <mbedtls_ssl_derive_keys+0x2e0>)
 8015c78:	e3a6      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
    {
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 8015c7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015c7e:	33c8      	adds	r3, #200	; 0xc8
 8015c80:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8015c84:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8015c88:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8015c8c:	f5a1 70ba 	sub.w	r0, r1, #372	; 0x174
 8015c90:	9202      	str	r2, [sp, #8]
 8015c92:	9301      	str	r3, [sp, #4]
 8015c94:	4b62      	ldr	r3, [pc, #392]	; (8015e20 <mbedtls_ssl_derive_keys+0x2e4>)
 8015c96:	9300      	str	r3, [sp, #0]
 8015c98:	f240 234e 	movw	r3, #590	; 0x24e
 8015c9c:	4a57      	ldr	r2, [pc, #348]	; (8015dfc <mbedtls_ssl_derive_keys+0x2c0>)
 8015c9e:	2103      	movs	r1, #3
 8015ca0:	6800      	ldr	r0, [r0, #0]
 8015ca2:	f7f6 f91d 	bl	800bee0 <mbedtls_debug_print_buf>
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8015ca6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015caa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8015cae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015cb2:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
 8015cb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015cba:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
                                  "master secret",
                                  handshake->randbytes, 64,
 8015cbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015cc2:	f103 0288 	add.w	r2, r3, #136	; 0x88
                                  session->master, 48 );
 8015cc6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015cca:	332c      	adds	r3, #44	; 0x2c
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8015ccc:	2530      	movs	r5, #48	; 0x30
 8015cce:	9502      	str	r5, [sp, #8]
 8015cd0:	9301      	str	r3, [sp, #4]
 8015cd2:	2340      	movs	r3, #64	; 0x40
 8015cd4:	9300      	str	r3, [sp, #0]
 8015cd6:	4613      	mov	r3, r2
 8015cd8:	4a52      	ldr	r2, [pc, #328]	; (8015e24 <mbedtls_ssl_derive_keys+0x2e8>)
 8015cda:	47a0      	blx	r4
 8015cdc:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
        if( ret != 0 )
 8015ce0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d012      	beq.n	8015d0e <mbedtls_ssl_derive_keys+0x1d2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 8015ce8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015cec:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015cf0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015cf4:	9301      	str	r3, [sp, #4]
 8015cf6:	4b4c      	ldr	r3, [pc, #304]	; (8015e28 <mbedtls_ssl_derive_keys+0x2ec>)
 8015cf8:	9300      	str	r3, [sp, #0]
 8015cfa:	f240 2381 	movw	r3, #641	; 0x281
 8015cfe:	4a3f      	ldr	r2, [pc, #252]	; (8015dfc <mbedtls_ssl_derive_keys+0x2c0>)
 8015d00:	2101      	movs	r1, #1
 8015d02:	6800      	ldr	r0, [r0, #0]
 8015d04:	f7f6 f880 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8015d08:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015d0c:	e35c      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 8015d0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015d12:	33c8      	adds	r3, #200	; 0xc8
 8015d14:	2130      	movs	r1, #48	; 0x30
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7ff fd73 	bl	8015802 <mbedtls_zeroize>
 8015d1c:	e00c      	b.n	8015d38 <mbedtls_ssl_derive_keys+0x1fc>
    }
    else
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 8015d1e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015d22:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015d26:	4b41      	ldr	r3, [pc, #260]	; (8015e2c <mbedtls_ssl_derive_keys+0x2f0>)
 8015d28:	9300      	str	r3, [sp, #0]
 8015d2a:	f44f 7322 	mov.w	r3, #648	; 0x288
 8015d2e:	4a33      	ldr	r2, [pc, #204]	; (8015dfc <mbedtls_ssl_derive_keys+0x2c0>)
 8015d30:	2103      	movs	r1, #3
 8015d32:	6800      	ldr	r0, [r0, #0]
 8015d34:	f7f5 ffe2 	bl	800bcfc <mbedtls_debug_print_msg>

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 8015d38:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015d3c:	3388      	adds	r3, #136	; 0x88
 8015d3e:	461c      	mov	r4, r3
 8015d40:	f507 7684 	add.w	r6, r7, #264	; 0x108
 8015d44:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8015d48:	4635      	mov	r5, r6
 8015d4a:	4623      	mov	r3, r4
 8015d4c:	6818      	ldr	r0, [r3, #0]
 8015d4e:	6859      	ldr	r1, [r3, #4]
 8015d50:	689a      	ldr	r2, [r3, #8]
 8015d52:	68db      	ldr	r3, [r3, #12]
 8015d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d56:	3410      	adds	r4, #16
 8015d58:	3610      	adds	r6, #16
 8015d5a:	4564      	cmp	r4, ip
 8015d5c:	d1f4      	bne.n	8015d48 <mbedtls_ssl_derive_keys+0x20c>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 8015d5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015d62:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8015d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d6a:	3320      	adds	r3, #32
 8015d6c:	2220      	movs	r2, #32
 8015d6e:	4619      	mov	r1, r3
 8015d70:	f008 fc30 	bl	801e5d4 <memcpy>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 8015d74:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015d78:	3388      	adds	r3, #136	; 0x88
 8015d7a:	3320      	adds	r3, #32
 8015d7c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8015d80:	2220      	movs	r2, #32
 8015d82:	4618      	mov	r0, r3
 8015d84:	f008 fc26 	bl	801e5d4 <memcpy>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8015d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015d8c:	2140      	movs	r1, #64	; 0x40
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f7ff fd37 	bl	8015802 <mbedtls_zeroize>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 8015d94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015d98:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8015d9c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015da0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 8015da4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015da8:	f103 0288 	add.w	r2, r3, #136	; 0x88
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 8015dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015db0:	9302      	str	r3, [sp, #8]
 8015db2:	f107 0308 	add.w	r3, r7, #8
 8015db6:	9301      	str	r3, [sp, #4]
 8015db8:	2340      	movs	r3, #64	; 0x40
 8015dba:	9300      	str	r3, [sp, #0]
 8015dbc:	4613      	mov	r3, r2
 8015dbe:	4a1c      	ldr	r2, [pc, #112]	; (8015e30 <mbedtls_ssl_derive_keys+0x2f4>)
 8015dc0:	2130      	movs	r1, #48	; 0x30
 8015dc2:	47a0      	blx	r4
 8015dc4:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if( ret != 0 )
 8015dc8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d031      	beq.n	8015e34 <mbedtls_ssl_derive_keys+0x2f8>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 8015dd0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015dd4:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015dd8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015ddc:	9301      	str	r3, [sp, #4]
 8015dde:	4b12      	ldr	r3, [pc, #72]	; (8015e28 <mbedtls_ssl_derive_keys+0x2ec>)
 8015de0:	9300      	str	r3, [sp, #0]
 8015de2:	f240 23a2 	movw	r3, #674	; 0x2a2
 8015de6:	4a05      	ldr	r2, [pc, #20]	; (8015dfc <mbedtls_ssl_derive_keys+0x2c0>)
 8015de8:	2101      	movs	r1, #1
 8015dea:	6800      	ldr	r0, [r0, #0]
 8015dec:	f7f6 f80c 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8015df0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015df4:	e2e8      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
 8015df6:	bf00      	nop
 8015df8:	0802354c 	.word	0x0802354c
 8015dfc:	080234fc 	.word	0x080234fc
 8015e00:	0802355c 	.word	0x0802355c
 8015e04:	ffff8f00 	.word	0xffff8f00
 8015e08:	0802357c 	.word	0x0802357c
 8015e0c:	08015b09 	.word	0x08015b09
 8015e10:	080163f1 	.word	0x080163f1
 8015e14:	08018ae9 	.word	0x08018ae9
 8015e18:	080235a0 	.word	0x080235a0
 8015e1c:	ffff9400 	.word	0xffff9400
 8015e20:	080235b4 	.word	0x080235b4
 8015e24:	080235c8 	.word	0x080235c8
 8015e28:	080235d8 	.word	0x080235d8
 8015e2c:	080235dc 	.word	0x080235dc
 8015e30:	080235fc 	.word	0x080235fc
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 8015e34:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7fd feac 	bl	8013b98 <mbedtls_ssl_get_ciphersuite_name>
 8015e40:	4603      	mov	r3, r0
 8015e42:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8015e46:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 8015e4a:	9301      	str	r3, [sp, #4]
 8015e4c:	4bb0      	ldr	r3, [pc, #704]	; (8016110 <mbedtls_ssl_derive_keys+0x5d4>)
 8015e4e:	9300      	str	r3, [sp, #0]
 8015e50:	f240 23a6 	movw	r3, #678	; 0x2a6
 8015e54:	4aaf      	ldr	r2, [pc, #700]	; (8016114 <mbedtls_ssl_derive_keys+0x5d8>)
 8015e56:	2103      	movs	r1, #3
 8015e58:	6800      	ldr	r0, [r0, #0]
 8015e5a:	f7f5 ff4f 	bl	800bcfc <mbedtls_debug_print_msg>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 8015e5e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015e62:	332c      	adds	r3, #44	; 0x2c
 8015e64:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8015e68:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 8015e6c:	2230      	movs	r2, #48	; 0x30
 8015e6e:	9202      	str	r2, [sp, #8]
 8015e70:	9301      	str	r3, [sp, #4]
 8015e72:	4ba9      	ldr	r3, [pc, #676]	; (8016118 <mbedtls_ssl_derive_keys+0x5dc>)
 8015e74:	9300      	str	r3, [sp, #0]
 8015e76:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8015e7a:	4aa6      	ldr	r2, [pc, #664]	; (8016114 <mbedtls_ssl_derive_keys+0x5d8>)
 8015e7c:	2103      	movs	r1, #3
 8015e7e:	6800      	ldr	r0, [r0, #0]
 8015e80:	f7f6 f82e 	bl	800bee0 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 8015e84:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015e88:	3388      	adds	r3, #136	; 0x88
 8015e8a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8015e8e:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 8015e92:	2240      	movs	r2, #64	; 0x40
 8015e94:	9202      	str	r2, [sp, #8]
 8015e96:	9301      	str	r3, [sp, #4]
 8015e98:	4ba0      	ldr	r3, [pc, #640]	; (801611c <mbedtls_ssl_derive_keys+0x5e0>)
 8015e9a:	9300      	str	r3, [sp, #0]
 8015e9c:	f240 23a9 	movw	r3, #681	; 0x2a9
 8015ea0:	4a9c      	ldr	r2, [pc, #624]	; (8016114 <mbedtls_ssl_derive_keys+0x5d8>)
 8015ea2:	2104      	movs	r1, #4
 8015ea4:	6800      	ldr	r0, [r0, #0]
 8015ea6:	f7f6 f81b 	bl	800bee0 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 8015eaa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015eae:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015eb6:	9302      	str	r3, [sp, #8]
 8015eb8:	f107 0308 	add.w	r3, r7, #8
 8015ebc:	9301      	str	r3, [sp, #4]
 8015ebe:	4b98      	ldr	r3, [pc, #608]	; (8016120 <mbedtls_ssl_derive_keys+0x5e4>)
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	f240 23aa 	movw	r3, #682	; 0x2aa
 8015ec6:	4a93      	ldr	r2, [pc, #588]	; (8016114 <mbedtls_ssl_derive_keys+0x5d8>)
 8015ec8:	2104      	movs	r1, #4
 8015eca:	6800      	ldr	r0, [r0, #0]
 8015ecc:	f7f6 f808 	bl	800bee0 <mbedtls_debug_print_buf>

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 8015ed0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015ed4:	3388      	adds	r3, #136	; 0x88
 8015ed6:	2140      	movs	r1, #64	; 0x40
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7ff fc92 	bl	8015802 <mbedtls_zeroize>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 8015ede:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015ee2:	685b      	ldr	r3, [r3, #4]
 8015ee4:	08da      	lsrs	r2, r3, #3
 8015ee6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015eea:	605a      	str	r2, [r3, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8015eec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015ef0:	785b      	ldrb	r3, [r3, #1]
 8015ef2:	2b06      	cmp	r3, #6
 8015ef4:	d004      	beq.n	8015f00 <mbedtls_ssl_derive_keys+0x3c4>
        cipher_info->mode == MBEDTLS_MODE_CCM )
 8015ef6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015efa:	785b      	ldrb	r3, [r3, #1]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8015efc:	2b08      	cmp	r3, #8
 8015efe:	d125      	bne.n	8015f4c <mbedtls_ssl_derive_keys+0x410>
    {
        transform->maclen = 0;
 8015f00:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015f04:	2200      	movs	r2, #0
 8015f06:	615a      	str	r2, [r3, #20]
        mac_key_len = 0;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

        transform->ivlen = 12;
 8015f0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015f12:	220c      	movs	r2, #12
 8015f14:	60da      	str	r2, [r3, #12]
        transform->fixed_ivlen = 4;
 8015f16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015f1a:	2204      	movs	r2, #4
 8015f1c:	611a      	str	r2, [r3, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
 8015f1e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015f22:	68da      	ldr	r2, [r3, #12]
 8015f24:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015f28:	691b      	ldr	r3, [r3, #16]
 8015f2a:	1ad3      	subs	r3, r2, r3
                            + ( transform->ciphersuite_info->flags &
 8015f2c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8015f30:	6812      	ldr	r2, [r2, #0]
 8015f32:	7f12      	ldrb	r2, [r2, #28]
 8015f34:	f002 0202 	and.w	r2, r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 8015f38:	2a00      	cmp	r2, #0
 8015f3a:	d001      	beq.n	8015f40 <mbedtls_ssl_derive_keys+0x404>
 8015f3c:	2208      	movs	r2, #8
 8015f3e:	e000      	b.n	8015f42 <mbedtls_ssl_derive_keys+0x406>
 8015f40:	2210      	movs	r2, #16
                            + ( transform->ciphersuite_info->flags &
 8015f42:	441a      	add	r2, r3
        transform->minlen = transform->ivlen - transform->fixed_ivlen
 8015f44:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015f48:	609a      	str	r2, [r3, #8]
 8015f4a:	e08e      	b.n	801606a <mbedtls_ssl_derive_keys+0x52e>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 8015f4c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015f50:	3338      	adds	r3, #56	; 0x38
 8015f52:	2201      	movs	r2, #1
 8015f54:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7f8 fb65 	bl	800e628 <mbedtls_md_setup>
 8015f5e:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015f62:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d10e      	bne.n	8015f88 <mbedtls_ssl_derive_keys+0x44c>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
 8015f6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015f6e:	3344      	adds	r3, #68	; 0x44
 8015f70:	2201      	movs	r2, #1
 8015f72:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8015f76:	4618      	mov	r0, r3
 8015f78:	f7f8 fb56 	bl	800e628 <mbedtls_md_setup>
 8015f7c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 8015f80:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d012      	beq.n	8015fae <mbedtls_ssl_derive_keys+0x472>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 8015f88:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015f8c:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015f90:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015f94:	9301      	str	r3, [sp, #4]
 8015f96:	4b63      	ldr	r3, [pc, #396]	; (8016124 <mbedtls_ssl_derive_keys+0x5e8>)
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 8015f9e:	4a5d      	ldr	r2, [pc, #372]	; (8016114 <mbedtls_ssl_derive_keys+0x5d8>)
 8015fa0:	2101      	movs	r1, #1
 8015fa2:	6800      	ldr	r0, [r0, #0]
 8015fa4:	f7f5 ff30 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8015fa8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015fac:	e20c      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 8015fae:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8015fb2:	f7f8 fd1d 	bl	800e9f0 <mbedtls_md_get_size>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        transform->maclen = mac_key_len;
 8015fbc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015fc0:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015fc4:	615a      	str	r2, [r3, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 8015fc6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015fca:	68da      	ldr	r2, [r3, #12]
 8015fcc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015fd0:	60da      	str	r2, [r3, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 8015fd2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015fd6:	785b      	ldrb	r3, [r3, #1]
 8015fd8:	2b07      	cmp	r3, #7
 8015fda:	d106      	bne.n	8015fea <mbedtls_ssl_derive_keys+0x4ae>
            transform->minlen = transform->maclen;
 8015fdc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015fe0:	695a      	ldr	r2, [r3, #20]
 8015fe2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015fe6:	609a      	str	r2, [r3, #8]
 8015fe8:	e03f      	b.n	801606a <mbedtls_ssl_derive_keys+0x52e>
                                  + cipher_info->block_size;
            }
            else
#endif
            {
                transform->minlen = transform->maclen
 8015fea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015fee:	695a      	ldr	r2, [r3, #20]
                                  + cipher_info->block_size
 8015ff0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015ff4:	695b      	ldr	r3, [r3, #20]
 8015ff6:	18d1      	adds	r1, r2, r3
                                  - transform->maclen % cipher_info->block_size;
 8015ff8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015ffc:	695b      	ldr	r3, [r3, #20]
 8015ffe:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016002:	6952      	ldr	r2, [r2, #20]
 8016004:	fbb3 f0f2 	udiv	r0, r3, r2
 8016008:	fb00 f202 	mul.w	r2, r0, r2
 801600c:	1a9b      	subs	r3, r3, r2
 801600e:	1aca      	subs	r2, r1, r3
                transform->minlen = transform->maclen
 8016010:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016014:	609a      	str	r2, [r3, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8016016:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801601a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	68db      	ldr	r3, [r3, #12]
 8016022:	2b02      	cmp	r3, #2
 8016024:	d007      	beq.n	8016036 <mbedtls_ssl_derive_keys+0x4fa>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8016026:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801602a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	68db      	ldr	r3, [r3, #12]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8016032:	2b03      	cmp	r3, #3
 8016034:	d10a      	bne.n	801604c <mbedtls_ssl_derive_keys+0x510>
            {
                transform->minlen += transform->ivlen;
 8016036:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801603a:	689a      	ldr	r2, [r3, #8]
 801603c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016040:	68db      	ldr	r3, [r3, #12]
 8016042:	441a      	add	r2, r3
 8016044:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016048:	609a      	str	r2, [r3, #8]
 801604a:	e00e      	b.n	801606a <mbedtls_ssl_derive_keys+0x52e>
            }
            else
#endif
            {
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801604c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8016050:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8016054:	4b34      	ldr	r3, [pc, #208]	; (8016128 <mbedtls_ssl_derive_keys+0x5ec>)
 8016056:	9300      	str	r3, [sp, #0]
 8016058:	f240 330e 	movw	r3, #782	; 0x30e
 801605c:	4a2d      	ldr	r2, [pc, #180]	; (8016114 <mbedtls_ssl_derive_keys+0x5d8>)
 801605e:	2101      	movs	r1, #1
 8016060:	6800      	ldr	r0, [r0, #0]
 8016062:	f7f5 fe4b 	bl	800bcfc <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016066:	4b31      	ldr	r3, [pc, #196]	; (801612c <mbedtls_ssl_derive_keys+0x5f0>)
 8016068:	e1ae      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
            }
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 801606a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801606e:	685b      	ldr	r3, [r3, #4]
 8016070:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8016074:	6892      	ldr	r2, [r2, #8]
 8016076:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 801607a:	68c9      	ldr	r1, [r1, #12]
 801607c:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8016080:	6944      	ldr	r4, [r0, #20]
 8016082:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8016086:	f5a0 70ba 	sub.w	r0, r0, #372	; 0x174
 801608a:	9404      	str	r4, [sp, #16]
 801608c:	9103      	str	r1, [sp, #12]
 801608e:	9202      	str	r2, [sp, #8]
 8016090:	9301      	str	r3, [sp, #4]
 8016092:	4b27      	ldr	r3, [pc, #156]	; (8016130 <mbedtls_ssl_derive_keys+0x5f4>)
 8016094:	9300      	str	r3, [sp, #0]
 8016096:	f44f 7345 	mov.w	r3, #788	; 0x314
 801609a:	4a1e      	ldr	r2, [pc, #120]	; (8016114 <mbedtls_ssl_derive_keys+0x5d8>)
 801609c:	2103      	movs	r1, #3
 801609e:	6800      	ldr	r0, [r0, #0]
 80160a0:	f7f5 fe2c 	bl	800bcfc <mbedtls_debug_print_msg>

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80160a4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80160a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80160b4:	f003 0301 	and.w	r3, r3, #1
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d169      	bne.n	8016192 <mbedtls_ssl_derive_keys+0x656>
    {
        key1 = keyblk + mac_key_len * 2;
 80160be:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80160c2:	005b      	lsls	r3, r3, #1
 80160c4:	f107 0208 	add.w	r2, r7, #8
 80160c8:	4413      	add	r3, r2
 80160ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80160ce:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80160d2:	005a      	lsls	r2, r3, #1
 80160d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80160d8:	685b      	ldr	r3, [r3, #4]
 80160da:	4413      	add	r3, r2
 80160dc:	f107 0208 	add.w	r2, r7, #8
 80160e0:	4413      	add	r3, r2
 80160e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

        mac_enc = keyblk;
 80160e6:	f107 0308 	add.w	r3, r7, #8
 80160ea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
        mac_dec = keyblk + mac_key_len;
 80160ee:	f107 0208 	add.w	r2, r7, #8
 80160f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80160f6:	4413      	add	r3, r2
 80160f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 80160fc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016100:	691b      	ldr	r3, [r3, #16]
                            transform->fixed_ivlen : transform->ivlen;
 8016102:	2b00      	cmp	r3, #0
 8016104:	d016      	beq.n	8016134 <mbedtls_ssl_derive_keys+0x5f8>
 8016106:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801610a:	691b      	ldr	r3, [r3, #16]
 801610c:	e015      	b.n	801613a <mbedtls_ssl_derive_keys+0x5fe>
 801610e:	bf00      	nop
 8016110:	0802360c 	.word	0x0802360c
 8016114:	080234fc 	.word	0x080234fc
 8016118:	080235c8 	.word	0x080235c8
 801611c:	08023620 	.word	0x08023620
 8016120:	08023630 	.word	0x08023630
 8016124:	0802363c 	.word	0x0802363c
 8016128:	080235a0 	.word	0x080235a0
 801612c:	ffff9400 	.word	0xffff9400
 8016130:	08023650 	.word	0x08023650
 8016134:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016138:	68db      	ldr	r3, [r3, #12]
        iv_copy_len = ( transform->fixed_ivlen ) ?
 801613a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 801613e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016142:	f103 0018 	add.w	r0, r3, #24
 8016146:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801614a:	685b      	ldr	r3, [r3, #4]
 801614c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8016150:	4413      	add	r3, r2
 8016152:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8016156:	4619      	mov	r1, r3
 8016158:	f008 fa3c 	bl	801e5d4 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 801615c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016160:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8016164:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016168:	685a      	ldr	r2, [r3, #4]
 801616a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801616e:	4413      	add	r3, r2
 8016170:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8016174:	4413      	add	r3, r2
 8016176:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801617a:	4619      	mov	r1, r3
 801617c:	f008 fa2a 	bl	801e5d4 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8016180:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8016184:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	68db      	ldr	r3, [r3, #12]
 801618c:	2b00      	cmp	r3, #0
 801618e:	dd32      	ble.n	80161f6 <mbedtls_ssl_derive_keys+0x6ba>
 8016190:	e00e      	b.n	80161b0 <mbedtls_ssl_derive_keys+0x674>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016192:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8016196:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 801619a:	4b8e      	ldr	r3, [pc, #568]	; (80163d4 <mbedtls_ssl_derive_keys+0x898>)
 801619c:	9300      	str	r3, [sp, #0]
 801619e:	f44f 7351 	mov.w	r3, #836	; 0x344
 80161a2:	4a8d      	ldr	r2, [pc, #564]	; (80163d8 <mbedtls_ssl_derive_keys+0x89c>)
 80161a4:	2101      	movs	r1, #1
 80161a6:	6800      	ldr	r0, [r0, #0]
 80161a8:	f7f5 fda8 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80161ac:	4b8b      	ldr	r3, [pc, #556]	; (80163dc <mbedtls_ssl_derive_keys+0x8a0>)
 80161ae:	e10b      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
    {
        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 80161b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80161b4:	3338      	adds	r3, #56	; 0x38
 80161b6:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80161ba:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80161be:	4618      	mov	r0, r3
 80161c0:	f7f8 fa8c 	bl	800e6dc <mbedtls_md_hmac_starts>
        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 80161c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80161c8:	3344      	adds	r3, #68	; 0x44
 80161ca:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80161ce:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7f8 fa82 	bl	800e6dc <mbedtls_md_hmac_starts>
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 80161d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80161dc:	3350      	adds	r3, #80	; 0x50
 80161de:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7f5 f8ea 	bl	800b3bc <mbedtls_cipher_setup>
 80161e8:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80161ec:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d022      	beq.n	801623a <mbedtls_ssl_derive_keys+0x6fe>
 80161f4:	e00e      	b.n	8016214 <mbedtls_ssl_derive_keys+0x6d8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80161f6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80161fa:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80161fe:	4b75      	ldr	r3, [pc, #468]	; (80163d4 <mbedtls_ssl_derive_keys+0x898>)
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	f44f 7358 	mov.w	r3, #864	; 0x360
 8016206:	4a74      	ldr	r2, [pc, #464]	; (80163d8 <mbedtls_ssl_derive_keys+0x89c>)
 8016208:	2101      	movs	r1, #1
 801620a:	6800      	ldr	r0, [r0, #0]
 801620c:	f7f5 fd76 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016210:	4b72      	ldr	r3, [pc, #456]	; (80163dc <mbedtls_ssl_derive_keys+0x8a0>)
 8016212:	e0d9      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
                                 cipher_info ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 8016214:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8016218:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 801621c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016220:	9301      	str	r3, [sp, #4]
 8016222:	4b6f      	ldr	r3, [pc, #444]	; (80163e0 <mbedtls_ssl_derive_keys+0x8a4>)
 8016224:	9300      	str	r3, [sp, #0]
 8016226:	f44f 7361 	mov.w	r3, #900	; 0x384
 801622a:	4a6b      	ldr	r2, [pc, #428]	; (80163d8 <mbedtls_ssl_derive_keys+0x89c>)
 801622c:	2101      	movs	r1, #1
 801622e:	6800      	ldr	r0, [r0, #0]
 8016230:	f7f5 fdea 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8016234:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016238:	e0c6      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 801623a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801623e:	3390      	adds	r3, #144	; 0x90
 8016240:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8016244:	4618      	mov	r0, r3
 8016246:	f7f5 f8b9 	bl	800b3bc <mbedtls_cipher_setup>
 801624a:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 801624e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016252:	2b00      	cmp	r3, #0
 8016254:	d012      	beq.n	801627c <mbedtls_ssl_derive_keys+0x740>
                                 cipher_info ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 8016256:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801625a:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 801625e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016262:	9301      	str	r3, [sp, #4]
 8016264:	4b5e      	ldr	r3, [pc, #376]	; (80163e0 <mbedtls_ssl_derive_keys+0x8a4>)
 8016266:	9300      	str	r3, [sp, #0]
 8016268:	f240 338b 	movw	r3, #907	; 0x38b
 801626c:	4a5a      	ldr	r2, [pc, #360]	; (80163d8 <mbedtls_ssl_derive_keys+0x89c>)
 801626e:	2101      	movs	r1, #1
 8016270:	6800      	ldr	r0, [r0, #0]
 8016272:	f7f5 fdc9 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8016276:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801627a:	e0a5      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 801627c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016280:	f103 0050 	add.w	r0, r3, #80	; 0x50
                               cipher_info->key_bitlen,
 8016284:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8016288:	685b      	ldr	r3, [r3, #4]
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 801628a:	461a      	mov	r2, r3
 801628c:	2301      	movs	r3, #1
 801628e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8016292:	f7f5 f8c3 	bl	800b41c <mbedtls_cipher_setkey>
 8016296:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 801629a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d012      	beq.n	80162c8 <mbedtls_ssl_derive_keys+0x78c>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 80162a2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80162a6:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80162aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80162ae:	9301      	str	r3, [sp, #4]
 80162b0:	4b4c      	ldr	r3, [pc, #304]	; (80163e4 <mbedtls_ssl_derive_keys+0x8a8>)
 80162b2:	9300      	str	r3, [sp, #0]
 80162b4:	f240 3393 	movw	r3, #915	; 0x393
 80162b8:	4a47      	ldr	r2, [pc, #284]	; (80163d8 <mbedtls_ssl_derive_keys+0x89c>)
 80162ba:	2101      	movs	r1, #1
 80162bc:	6800      	ldr	r0, [r0, #0]
 80162be:	f7f5 fda3 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 80162c2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80162c6:	e07f      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 80162c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80162cc:	f103 0090 	add.w	r0, r3, #144	; 0x90
                               cipher_info->key_bitlen,
 80162d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80162d4:	685b      	ldr	r3, [r3, #4]
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 80162d6:	461a      	mov	r2, r3
 80162d8:	2300      	movs	r3, #0
 80162da:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80162de:	f7f5 f89d 	bl	800b41c <mbedtls_cipher_setkey>
 80162e2:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80162e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d012      	beq.n	8016314 <mbedtls_ssl_derive_keys+0x7d8>
                               MBEDTLS_DECRYPT ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 80162ee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80162f2:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80162f6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80162fa:	9301      	str	r3, [sp, #4]
 80162fc:	4b39      	ldr	r3, [pc, #228]	; (80163e4 <mbedtls_ssl_derive_keys+0x8a8>)
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	f240 339b 	movw	r3, #923	; 0x39b
 8016304:	4a34      	ldr	r2, [pc, #208]	; (80163d8 <mbedtls_ssl_derive_keys+0x89c>)
 8016306:	2101      	movs	r1, #1
 8016308:	6800      	ldr	r0, [r0, #0]
 801630a:	f7f5 fd7d 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 801630e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016312:	e059      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 8016314:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8016318:	785b      	ldrb	r3, [r3, #1]
 801631a:	2b02      	cmp	r3, #2
 801631c:	d13f      	bne.n	801639e <mbedtls_ssl_derive_keys+0x862>
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 801631e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016322:	3350      	adds	r3, #80	; 0x50
 8016324:	2104      	movs	r1, #4
 8016326:	4618      	mov	r0, r3
 8016328:	f7f5 fb3c 	bl	800b9a4 <mbedtls_cipher_set_padding_mode>
 801632c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8016330:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016334:	2b00      	cmp	r3, #0
 8016336:	d012      	beq.n	801635e <mbedtls_ssl_derive_keys+0x822>
                                             MBEDTLS_PADDING_NONE ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 8016338:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801633c:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8016340:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016344:	9301      	str	r3, [sp, #4]
 8016346:	4b28      	ldr	r3, [pc, #160]	; (80163e8 <mbedtls_ssl_derive_keys+0x8ac>)
 8016348:	9300      	str	r3, [sp, #0]
 801634a:	f240 33a5 	movw	r3, #933	; 0x3a5
 801634e:	4a22      	ldr	r2, [pc, #136]	; (80163d8 <mbedtls_ssl_derive_keys+0x89c>)
 8016350:	2101      	movs	r1, #1
 8016352:	6800      	ldr	r0, [r0, #0]
 8016354:	f7f5 fd58 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8016358:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801635c:	e034      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 801635e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016362:	3390      	adds	r3, #144	; 0x90
 8016364:	2104      	movs	r1, #4
 8016366:	4618      	mov	r0, r3
 8016368:	f7f5 fb1c 	bl	800b9a4 <mbedtls_cipher_set_padding_mode>
 801636c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8016370:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016374:	2b00      	cmp	r3, #0
 8016376:	d012      	beq.n	801639e <mbedtls_ssl_derive_keys+0x862>
                                             MBEDTLS_PADDING_NONE ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 8016378:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801637c:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8016380:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016384:	9301      	str	r3, [sp, #4]
 8016386:	4b18      	ldr	r3, [pc, #96]	; (80163e8 <mbedtls_ssl_derive_keys+0x8ac>)
 8016388:	9300      	str	r3, [sp, #0]
 801638a:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 801638e:	4a12      	ldr	r2, [pc, #72]	; (80163d8 <mbedtls_ssl_derive_keys+0x89c>)
 8016390:	2101      	movs	r1, #1
 8016392:	6800      	ldr	r0, [r0, #0]
 8016394:	f7f5 fd38 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8016398:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801639c:	e014      	b.n	80163c8 <mbedtls_ssl_derive_keys+0x88c>
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 801639e:	f107 0308 	add.w	r3, r7, #8
 80163a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7ff fa2b 	bl	8015802 <mbedtls_zeroize>
            return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
        }
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 80163ac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80163b0:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80163b4:	4b0d      	ldr	r3, [pc, #52]	; (80163ec <mbedtls_ssl_derive_keys+0x8b0>)
 80163b6:	9300      	str	r3, [sp, #0]
 80163b8:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 80163bc:	4a06      	ldr	r2, [pc, #24]	; (80163d8 <mbedtls_ssl_derive_keys+0x89c>)
 80163be:	2102      	movs	r1, #2
 80163c0:	6800      	ldr	r0, [r0, #0]
 80163c2:	f7f5 fc9b 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 80163c6:	2300      	movs	r3, #0
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163d2:	bf00      	nop
 80163d4:	080235a0 	.word	0x080235a0
 80163d8:	080234fc 	.word	0x080234fc
 80163dc:	ffff9400 	.word	0xffff9400
 80163e0:	08023680 	.word	0x08023680
 80163e4:	08023698 	.word	0x08023698
 80163e8:	080236b0 	.word	0x080236b0
 80163ec:	080236d0 	.word	0x080236d0

080163f0 <ssl_calc_verify_tls_sha256>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b0a2      	sub	sp, #136	; 0x88
 80163f4:	af04      	add	r7, sp, #16
 80163f6:	6078      	str	r0, [r7, #4]
 80163f8:	6039      	str	r1, [r7, #0]
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 80163fa:	f107 030c 	add.w	r3, r7, #12
 80163fe:	4618      	mov	r0, r3
 8016400:	f7fb fbd8 	bl	8011bb4 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 8016404:	4b1b      	ldr	r3, [pc, #108]	; (8016474 <ssl_calc_verify_tls_sha256+0x84>)
 8016406:	9300      	str	r3, [sp, #0]
 8016408:	f240 432d 	movw	r3, #1069	; 0x42d
 801640c:	4a1a      	ldr	r2, [pc, #104]	; (8016478 <ssl_calc_verify_tls_sha256+0x88>)
 801640e:	2102      	movs	r1, #2
 8016410:	6878      	ldr	r0, [r7, #4]
 8016412:	f7f5 fc73 	bl	800bcfc <mbedtls_debug_print_msg>

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801641a:	f103 0208 	add.w	r2, r3, #8
 801641e:	f107 030c 	add.w	r3, r7, #12
 8016422:	4611      	mov	r1, r2
 8016424:	4618      	mov	r0, r3
 8016426:	f7fb fbe2 	bl	8011bee <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 801642a:	f107 030c 	add.w	r3, r7, #12
 801642e:	6839      	ldr	r1, [r7, #0]
 8016430:	4618      	mov	r0, r3
 8016432:	f7fd fa17 	bl	8013864 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 8016436:	2320      	movs	r3, #32
 8016438:	9302      	str	r3, [sp, #8]
 801643a:	683b      	ldr	r3, [r7, #0]
 801643c:	9301      	str	r3, [sp, #4]
 801643e:	4b0f      	ldr	r3, [pc, #60]	; (801647c <ssl_calc_verify_tls_sha256+0x8c>)
 8016440:	9300      	str	r3, [sp, #0]
 8016442:	f240 4332 	movw	r3, #1074	; 0x432
 8016446:	4a0c      	ldr	r2, [pc, #48]	; (8016478 <ssl_calc_verify_tls_sha256+0x88>)
 8016448:	2103      	movs	r1, #3
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f7f5 fd48 	bl	800bee0 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 8016450:	4b0b      	ldr	r3, [pc, #44]	; (8016480 <ssl_calc_verify_tls_sha256+0x90>)
 8016452:	9300      	str	r3, [sp, #0]
 8016454:	f240 4333 	movw	r3, #1075	; 0x433
 8016458:	4a07      	ldr	r2, [pc, #28]	; (8016478 <ssl_calc_verify_tls_sha256+0x88>)
 801645a:	2102      	movs	r1, #2
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f7f5 fc4d 	bl	800bcfc <mbedtls_debug_print_msg>

    mbedtls_sha256_free( &sha256 );
 8016462:	f107 030c 	add.w	r3, r7, #12
 8016466:	4618      	mov	r0, r3
 8016468:	f7fb fbb1 	bl	8011bce <mbedtls_sha256_free>

    return;
 801646c:	bf00      	nop
}
 801646e:	3778      	adds	r7, #120	; 0x78
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	080236e0 	.word	0x080236e0
 8016478:	080234fc 	.word	0x080234fc
 801647c:	080236f8 	.word	0x080236f8
 8016480:	08023714 	.word	0x08023714

08016484 <ssl_encrypt_buf>:

/*
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
 8016484:	b5b0      	push	{r4, r5, r7, lr}
 8016486:	b0a4      	sub	sp, #144	; 0x90
 8016488:	af08      	add	r7, sp, #32
 801648a:	6078      	str	r0, [r7, #4]
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 801648c:	2300      	movs	r3, #0
 801648e:	66fb      	str	r3, [r7, #108]	; 0x6c

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 8016490:	4b9c      	ldr	r3, [pc, #624]	; (8016704 <ssl_encrypt_buf+0x280>)
 8016492:	9300      	str	r3, [sp, #0]
 8016494:	f240 5304 	movw	r3, #1284	; 0x504
 8016498:	4a9b      	ldr	r2, [pc, #620]	; (8016708 <ssl_encrypt_buf+0x284>)
 801649a:	2102      	movs	r1, #2
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	f7f5 fc2d 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d003      	beq.n	80164b2 <ssl_encrypt_buf+0x2e>
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d10a      	bne.n	80164c8 <ssl_encrypt_buf+0x44>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80164b2:	4b96      	ldr	r3, [pc, #600]	; (801670c <ssl_encrypt_buf+0x288>)
 80164b4:	9300      	str	r3, [sp, #0]
 80164b6:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 80164ba:	4a93      	ldr	r2, [pc, #588]	; (8016708 <ssl_encrypt_buf+0x284>)
 80164bc:	2101      	movs	r1, #1
 80164be:	6878      	ldr	r0, [r7, #4]
 80164c0:	f7f5 fc1c 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80164c4:	4b92      	ldr	r3, [pc, #584]	; (8016710 <ssl_encrypt_buf+0x28c>)
 80164c6:	e2da      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164cc:	3350      	adds	r3, #80	; 0x50
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7ff f90a 	bl	80156e8 <mbedtls_cipher_get_cipher_mode>
 80164d4:	4603      	mov	r3, r0
 80164d6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80164e0:	687a      	ldr	r2, [r7, #4]
 80164e2:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80164e6:	9202      	str	r2, [sp, #8]
 80164e8:	9301      	str	r3, [sp, #4]
 80164ea:	4b8a      	ldr	r3, [pc, #552]	; (8016714 <ssl_encrypt_buf+0x290>)
 80164ec:	9300      	str	r3, [sp, #0]
 80164ee:	f240 530e 	movw	r3, #1294	; 0x50e
 80164f2:	4a85      	ldr	r2, [pc, #532]	; (8016708 <ssl_encrypt_buf+0x284>)
 80164f4:	2104      	movs	r1, #4
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	f7f5 fcf2 	bl	800bee0 <mbedtls_debug_print_buf>
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016506:	d911      	bls.n	801652c <ssl_encrypt_buf+0xa8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801650e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016512:	9202      	str	r2, [sp, #8]
 8016514:	9301      	str	r3, [sp, #4]
 8016516:	4b80      	ldr	r3, [pc, #512]	; (8016718 <ssl_encrypt_buf+0x294>)
 8016518:	9300      	str	r3, [sp, #0]
 801651a:	f240 5313 	movw	r3, #1299	; 0x513
 801651e:	4a7a      	ldr	r2, [pc, #488]	; (8016708 <ssl_encrypt_buf+0x284>)
 8016520:	2101      	movs	r1, #1
 8016522:	6878      	ldr	r0, [r7, #4]
 8016524:	f7f5 fbea 	bl	800bcfc <mbedtls_debug_print_msg>
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8016528:	4b7c      	ldr	r3, [pc, #496]	; (801671c <ssl_encrypt_buf+0x298>)
 801652a:	e2a8      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 801652c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016530:	2b07      	cmp	r3, #7
 8016532:	d003      	beq.n	801653c <ssl_encrypt_buf+0xb8>
 8016534:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016538:	2b02      	cmp	r3, #2
 801653a:	d17d      	bne.n	8016638 <ssl_encrypt_buf+0x1b4>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	68db      	ldr	r3, [r3, #12]
 8016540:	2b00      	cmp	r3, #0
 8016542:	dd6e      	ble.n	8016622 <ssl_encrypt_buf+0x19e>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016548:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016552:	2208      	movs	r2, #8
 8016554:	4619      	mov	r1, r3
 8016556:	f7f8 f973 	bl	800e840 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801655e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016568:	2203      	movs	r2, #3
 801656a:	4619      	mov	r1, r3
 801656c:	f7f8 f968 	bl	800e840 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016574:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801657e:	2202      	movs	r2, #2
 8016580:	4619      	mov	r1, r3
 8016582:	f7f8 f95d 	bl	800e840 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801658a:	f103 0038 	add.w	r0, r3, #56	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801659a:	461a      	mov	r2, r3
 801659c:	f7f8 f950 	bl	800e840 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165a4:	3338      	adds	r3, #56	; 0x38
 80165a6:	f107 020c 	add.w	r2, r7, #12
 80165aa:	4611      	mov	r1, r2
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7f8 f969 	bl	800e884 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165b6:	3338      	adds	r3, #56	; 0x38
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7f8 f9c9 	bl	800e950 <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80165ca:	18d0      	adds	r0, r2, r3
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165d0:	695a      	ldr	r2, [r3, #20]
 80165d2:	f107 030c 	add.w	r3, r7, #12
 80165d6:	4619      	mov	r1, r3
 80165d8:	f007 fffc 	bl	801e5d4 <memcpy>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80165e8:	4413      	add	r3, r2
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80165ee:	6952      	ldr	r2, [r2, #20]
 80165f0:	9202      	str	r2, [sp, #8]
 80165f2:	9301      	str	r3, [sp, #4]
 80165f4:	4b4a      	ldr	r3, [pc, #296]	; (8016720 <ssl_encrypt_buf+0x29c>)
 80165f6:	9300      	str	r3, [sp, #0]
 80165f8:	f240 534a 	movw	r3, #1354	; 0x54a
 80165fc:	4a42      	ldr	r2, [pc, #264]	; (8016708 <ssl_encrypt_buf+0x284>)
 80165fe:	2104      	movs	r1, #4
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f7f5 fc6d 	bl	800bee0 <mbedtls_debug_print_buf>
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016610:	695b      	ldr	r3, [r3, #20]
 8016612:	441a      	add	r2, r3
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        auth_done++;
 801661a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801661c:	3301      	adds	r3, #1
 801661e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016620:	e00a      	b.n	8016638 <ssl_encrypt_buf+0x1b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016622:	4b3a      	ldr	r3, [pc, #232]	; (801670c <ssl_encrypt_buf+0x288>)
 8016624:	9300      	str	r3, [sp, #0]
 8016626:	f240 5346 	movw	r3, #1350	; 0x546
 801662a:	4a37      	ldr	r2, [pc, #220]	; (8016708 <ssl_encrypt_buf+0x284>)
 801662c:	2101      	movs	r1, #1
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	f7f5 fb64 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016634:	4b36      	ldr	r3, [pc, #216]	; (8016710 <ssl_encrypt_buf+0x28c>)
 8016636:	e222      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 8016638:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801663c:	2b06      	cmp	r3, #6
 801663e:	d004      	beq.n	801664a <ssl_encrypt_buf+0x1c6>
 8016640:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016644:	2b08      	cmp	r3, #8
 8016646:	f040 8122 	bne.w	801688e <ssl_encrypt_buf+0x40a>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	7f1b      	ldrb	r3, [r3, #28]
 8016652:	f003 0302 	and.w	r3, r3, #2
 8016656:	2b00      	cmp	r3, #0
 8016658:	d001      	beq.n	801665e <ssl_encrypt_buf+0x1da>
 801665a:	2308      	movs	r3, #8
 801665c:	e000      	b.n	8016660 <ssl_encrypt_buf+0x1dc>
 801665e:	2310      	movs	r3, #16
 8016660:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 801666a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801666e:	2208      	movs	r2, #8
 8016670:	4618      	mov	r0, r3
 8016672:	f007 ffaf 	bl	801e5d4 <memcpy>
        add_data[8]  = ssl->out_msgtype;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801667c:	b2db      	uxtb	r3, r3
 801667e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6898      	ldr	r0, [r3, #8]
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	68d9      	ldr	r1, [r3, #12]
                           ssl->conf->transport, add_data + 9 );
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016692:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016696:	b2db      	uxtb	r3, r3
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8016698:	461a      	mov	r2, r3
 801669a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801669e:	3309      	adds	r3, #9
 80166a0:	f003 fadc 	bl	8019c5c <mbedtls_ssl_write_version>
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80166aa:	0a1b      	lsrs	r3, r3, #8
 80166ac:	b2db      	uxtb	r3, r3
 80166ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80166b8:	b2db      	uxtb	r3, r3
 80166ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 80166be:	230d      	movs	r3, #13
 80166c0:	9302      	str	r3, [sp, #8]
 80166c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80166c6:	9301      	str	r3, [sp, #4]
 80166c8:	4b16      	ldr	r3, [pc, #88]	; (8016724 <ssl_encrypt_buf+0x2a0>)
 80166ca:	9300      	str	r3, [sp, #0]
 80166cc:	f240 5384 	movw	r3, #1412	; 0x584
 80166d0:	4a0d      	ldr	r2, [pc, #52]	; (8016708 <ssl_encrypt_buf+0x284>)
 80166d2:	2104      	movs	r1, #4
 80166d4:	6878      	ldr	r0, [r7, #4]
 80166d6:	f7f5 fc03 	bl	800bee0 <mbedtls_debug_print_buf>
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166de:	68da      	ldr	r2, [r3, #12]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166e4:	691b      	ldr	r3, [r3, #16]
 80166e6:	1ad3      	subs	r3, r2, r3
 80166e8:	2b08      	cmp	r3, #8
 80166ea:	d01d      	beq.n	8016728 <ssl_encrypt_buf+0x2a4>
        {
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80166ec:	4b07      	ldr	r3, [pc, #28]	; (801670c <ssl_encrypt_buf+0x288>)
 80166ee:	9300      	str	r3, [sp, #0]
 80166f0:	f240 538d 	movw	r3, #1421	; 0x58d
 80166f4:	4a04      	ldr	r2, [pc, #16]	; (8016708 <ssl_encrypt_buf+0x284>)
 80166f6:	2101      	movs	r1, #1
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f7f5 faff 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80166fe:	4b04      	ldr	r3, [pc, #16]	; (8016710 <ssl_encrypt_buf+0x28c>)
 8016700:	e1bd      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
 8016702:	bf00      	nop
 8016704:	08023724 	.word	0x08023724
 8016708:	080234fc 	.word	0x080234fc
 801670c:	080235a0 	.word	0x080235a0
 8016710:	ffff9400 	.word	0xffff9400
 8016714:	08023734 	.word	0x08023734
 8016718:	08023754 	.word	0x08023754
 801671c:	ffff8f00 	.word	0xffff8f00
 8016720:	0802377c 	.word	0x0802377c
 8016724:	0802378c 	.word	0x0802378c
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801672c:	f103 0218 	add.w	r2, r3, #24
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016734:	691b      	ldr	r3, [r3, #16]
 8016736:	18d0      	adds	r0, r2, r3
                             ssl->out_ctr, 8 );
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 801673e:	2208      	movs	r2, #8
 8016740:	4619      	mov	r1, r3
 8016742:	f007 ff47 	bl	801e5d4 <memcpy>
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016752:	2208      	movs	r2, #8
 8016754:	4619      	mov	r1, r3
 8016756:	f007 ff3d 	bl	801e5d4 <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016764:	68d1      	ldr	r1, [r2, #12]
 8016766:	687a      	ldr	r2, [r7, #4]
 8016768:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801676a:	6912      	ldr	r2, [r2, #16]
 801676c:	1a8a      	subs	r2, r1, r2
 801676e:	9202      	str	r2, [sp, #8]
 8016770:	9301      	str	r3, [sp, #4]
 8016772:	4b76      	ldr	r3, [pc, #472]	; (801694c <ssl_encrypt_buf+0x4c8>)
 8016774:	9300      	str	r3, [sp, #0]
 8016776:	f240 5395 	movw	r3, #1429	; 0x595
 801677a:	4a75      	ldr	r2, [pc, #468]	; (8016950 <ssl_encrypt_buf+0x4cc>)
 801677c:	2104      	movs	r1, #4
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f7f5 fbae 	bl	800bee0 <mbedtls_debug_print_buf>
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801678a:	64fb      	str	r3, [r7, #76]	; 0x4c
        enc_msglen = ssl->out_msglen;
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016792:	64bb      	str	r3, [r7, #72]	; 0x48
        ssl->out_msglen += ssl->transform_out->ivlen -
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801679e:	68d9      	ldr	r1, [r3, #12]
                           ssl->transform_out->fixed_ivlen;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167a4:	691b      	ldr	r3, [r3, #16]
        ssl->out_msglen += ssl->transform_out->ivlen -
 80167a6:	1acb      	subs	r3, r1, r3
 80167a8:	441a      	add	r2, r3
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80167b6:	2200      	movs	r2, #0
 80167b8:	9202      	str	r2, [sp, #8]
 80167ba:	9301      	str	r3, [sp, #4]
 80167bc:	4b65      	ldr	r3, [pc, #404]	; (8016954 <ssl_encrypt_buf+0x4d0>)
 80167be:	9300      	str	r3, [sp, #0]
 80167c0:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 80167c4:	4a62      	ldr	r2, [pc, #392]	; (8016950 <ssl_encrypt_buf+0x4cc>)
 80167c6:	2103      	movs	r1, #3
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f7f5 fa97 	bl	800bcfc <mbedtls_debug_print_msg>
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167d2:	f103 0050 	add.w	r0, r3, #80	; 0x50
                                         ssl->transform_out->iv_enc,
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167da:	f103 0118 	add.w	r1, r3, #24
                                         ssl->transform_out->ivlen,
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 80167e2:	68dc      	ldr	r4, [r3, #12]
 80167e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80167e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80167e8:	4413      	add	r3, r2
 80167ea:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80167ee:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80167f2:	9206      	str	r2, [sp, #24]
 80167f4:	9305      	str	r3, [sp, #20]
 80167f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80167fa:	9304      	str	r3, [sp, #16]
 80167fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167fe:	9303      	str	r3, [sp, #12]
 8016800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016802:	9302      	str	r3, [sp, #8]
 8016804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016806:	9301      	str	r3, [sp, #4]
 8016808:	230d      	movs	r3, #13
 801680a:	9300      	str	r3, [sp, #0]
 801680c:	462b      	mov	r3, r5
 801680e:	4622      	mov	r2, r4
 8016810:	f7f5 f936 	bl	800ba80 <mbedtls_cipher_auth_encrypt>
 8016814:	6478      	str	r0, [r7, #68]	; 0x44
 8016816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016818:	2b00      	cmp	r3, #0
 801681a:	d00c      	beq.n	8016836 <ssl_encrypt_buf+0x3b2>
                                         add_data, 13,
                                         enc_msg, enc_msglen,
                                         enc_msg, &olen,
                                         enc_msg + enc_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 801681c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801681e:	9301      	str	r3, [sp, #4]
 8016820:	4b4d      	ldr	r3, [pc, #308]	; (8016958 <ssl_encrypt_buf+0x4d4>)
 8016822:	9300      	str	r3, [sp, #0]
 8016824:	f240 53af 	movw	r3, #1455	; 0x5af
 8016828:	4a49      	ldr	r2, [pc, #292]	; (8016950 <ssl_encrypt_buf+0x4cc>)
 801682a:	2101      	movs	r1, #1
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f7f5 faeb 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8016832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016834:	e123      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
        }

        if( olen != enc_msglen )
 8016836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801683a:	429a      	cmp	r2, r3
 801683c:	d00a      	beq.n	8016854 <ssl_encrypt_buf+0x3d0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801683e:	4b47      	ldr	r3, [pc, #284]	; (801695c <ssl_encrypt_buf+0x4d8>)
 8016840:	9300      	str	r3, [sp, #0]
 8016842:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8016846:	4a42      	ldr	r2, [pc, #264]	; (8016950 <ssl_encrypt_buf+0x4cc>)
 8016848:	2101      	movs	r1, #1
 801684a:	6878      	ldr	r0, [r7, #4]
 801684c:	f7f5 fa56 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016850:	4b43      	ldr	r3, [pc, #268]	; (8016960 <ssl_encrypt_buf+0x4dc>)
 8016852:	e114      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
        }

        ssl->out_msglen += taglen;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801685a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801685e:	441a      	add	r2, r3
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        auth_done++;
 8016866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016868:	3301      	adds	r3, #1
 801686a:	66fb      	str	r3, [r7, #108]	; 0x6c

        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801686c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801686e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016870:	4413      	add	r3, r2
 8016872:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8016876:	9202      	str	r2, [sp, #8]
 8016878:	9301      	str	r3, [sp, #4]
 801687a:	4b3a      	ldr	r3, [pc, #232]	; (8016964 <ssl_encrypt_buf+0x4e0>)
 801687c:	9300      	str	r3, [sp, #0]
 801687e:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8016882:	4a33      	ldr	r2, [pc, #204]	; (8016950 <ssl_encrypt_buf+0x4cc>)
 8016884:	2104      	movs	r1, #4
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f7f5 fb2a 	bl	800bee0 <mbedtls_debug_print_buf>
    {
 801688c:	e0df      	b.n	8016a4e <ssl_encrypt_buf+0x5ca>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 801688e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016892:	2b02      	cmp	r3, #2
 8016894:	f040 80d0 	bne.w	8016a38 <ssl_encrypt_buf+0x5b4>
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 8016898:	2300      	movs	r3, #0
 801689a:	62fb      	str	r3, [r7, #44]	; 0x2c

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168a0:	68d9      	ldr	r1, [r3, #12]
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80168a8:	3301      	adds	r3, #1
                 ssl->transform_out->ivlen;
 80168aa:	687a      	ldr	r2, [r7, #4]
 80168ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80168ae:	68d2      	ldr	r2, [r2, #12]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 80168b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80168b4:	fb00 f202 	mul.w	r2, r0, r2
 80168b8:	1a9b      	subs	r3, r3, r2
 80168ba:	1acb      	subs	r3, r1, r3
 80168bc:	663b      	str	r3, [r7, #96]	; 0x60
        if( padlen == ssl->transform_out->ivlen )
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168c2:	68db      	ldr	r3, [r3, #12]
 80168c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80168c6:	429a      	cmp	r2, r3
 80168c8:	d101      	bne.n	80168ce <ssl_encrypt_buf+0x44a>
            padlen = 0;
 80168ca:	2300      	movs	r3, #0
 80168cc:	663b      	str	r3, [r7, #96]	; 0x60

        for( i = 0; i <= padlen; i++ )
 80168ce:	2300      	movs	r3, #0
 80168d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80168d2:	e00e      	b.n	80168f2 <ssl_encrypt_buf+0x46e>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80168e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80168e2:	440b      	add	r3, r1
 80168e4:	4413      	add	r3, r2
 80168e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80168e8:	b2d2      	uxtb	r2, r2
 80168ea:	701a      	strb	r2, [r3, #0]
        for( i = 0; i <= padlen; i++ )
 80168ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80168ee:	3301      	adds	r3, #1
 80168f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80168f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80168f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80168f6:	429a      	cmp	r2, r3
 80168f8:	d9ec      	bls.n	80168d4 <ssl_encrypt_buf+0x450>

        ssl->out_msglen += padlen + 1;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016902:	4413      	add	r3, r2
 8016904:	1c5a      	adds	r2, r3, #1
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        enc_msglen = ssl->out_msglen;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016912:	667b      	str	r3, [r7, #100]	; 0x64
        enc_msg = ssl->out_msg;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801691a:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	68db      	ldr	r3, [r3, #12]
 8016920:	2b01      	cmp	r3, #1
 8016922:	dd40      	ble.n	80169a6 <ssl_encrypt_buf+0x522>
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	699b      	ldr	r3, [r3, #24]
 801692a:	687a      	ldr	r2, [r7, #4]
 801692c:	6812      	ldr	r2, [r2, #0]
 801692e:	69d0      	ldr	r0, [r2, #28]
 8016930:	687a      	ldr	r2, [r7, #4]
 8016932:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016934:	f102 0118 	add.w	r1, r2, #24
                                  ssl->transform_out->ivlen );
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	6b92      	ldr	r2, [r2, #56]	; 0x38
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 801693c:	68d2      	ldr	r2, [r2, #12]
 801693e:	4798      	blx	r3
 8016940:	6578      	str	r0, [r7, #84]	; 0x54
            if( ret != 0 )
 8016942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016944:	2b00      	cmp	r3, #0
 8016946:	d00f      	beq.n	8016968 <ssl_encrypt_buf+0x4e4>
                return( ret );
 8016948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801694a:	e098      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
 801694c:	080237ac 	.word	0x080237ac
 8016950:	080234fc 	.word	0x080234fc
 8016954:	080237b4 	.word	0x080237b4
 8016958:	080237f0 	.word	0x080237f0
 801695c:	080235a0 	.word	0x080235a0
 8016960:	ffff9400 	.word	0xffff9400
 8016964:	0802380c 	.word	0x0802380c

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016972:	f103 0118 	add.w	r1, r3, #24
                    ssl->transform_out->ivlen );
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 801697a:	68db      	ldr	r3, [r3, #12]
 801697c:	461a      	mov	r2, r3
 801697e:	f007 fe29 	bl	801e5d4 <memcpy>

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016988:	66bb      	str	r3, [r7, #104]	; 0x68
            enc_msglen = ssl->out_msglen;
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016990:	667b      	str	r3, [r7, #100]	; 0x64
            ssl->out_msglen += ssl->transform_out->ivlen;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801699c:	68db      	ldr	r3, [r3, #12]
 801699e:	441a      	add	r2, r3
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80169ac:	687a      	ldr	r2, [r7, #4]
 80169ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80169b0:	68d2      	ldr	r2, [r2, #12]
 80169b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80169b4:	3101      	adds	r1, #1
 80169b6:	9103      	str	r1, [sp, #12]
 80169b8:	9202      	str	r2, [sp, #8]
 80169ba:	9301      	str	r3, [sp, #4]
 80169bc:	4b32      	ldr	r3, [pc, #200]	; (8016a88 <ssl_encrypt_buf+0x604>)
 80169be:	9300      	str	r3, [sp, #0]
 80169c0:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 80169c4:	4a31      	ldr	r2, [pc, #196]	; (8016a8c <ssl_encrypt_buf+0x608>)
 80169c6:	2103      	movs	r1, #3
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	f7f5 f997 	bl	800bcfc <mbedtls_debug_print_msg>
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169d2:	f103 0050 	add.w	r0, r3, #80	; 0x50
                                   ssl->transform_out->iv_enc,
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169da:	f103 0118 	add.w	r1, r3, #24
                                   ssl->transform_out->ivlen,
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 80169e2:	68da      	ldr	r2, [r3, #12]
 80169e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80169e8:	9302      	str	r3, [sp, #8]
 80169ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80169ec:	9301      	str	r3, [sp, #4]
 80169ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80169f0:	9300      	str	r3, [sp, #0]
 80169f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80169f4:	f7f5 f800 	bl	800b9f8 <mbedtls_cipher_crypt>
 80169f8:	6578      	str	r0, [r7, #84]	; 0x54
 80169fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d00c      	beq.n	8016a1a <ssl_encrypt_buf+0x596>
                                   enc_msg, enc_msglen,
                                   enc_msg, &olen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 8016a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a02:	9301      	str	r3, [sp, #4]
 8016a04:	4b22      	ldr	r3, [pc, #136]	; (8016a90 <ssl_encrypt_buf+0x60c>)
 8016a06:	9300      	str	r3, [sp, #0]
 8016a08:	f240 53fb 	movw	r3, #1531	; 0x5fb
 8016a0c:	4a1f      	ldr	r2, [pc, #124]	; (8016a8c <ssl_encrypt_buf+0x608>)
 8016a0e:	2101      	movs	r1, #1
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f7f5 f9f9 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8016a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a18:	e031      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
        }

        if( enc_msglen != olen )
 8016a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	d015      	beq.n	8016a4e <ssl_encrypt_buf+0x5ca>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016a22:	4b1c      	ldr	r3, [pc, #112]	; (8016a94 <ssl_encrypt_buf+0x610>)
 8016a24:	9300      	str	r3, [sp, #0]
 8016a26:	f240 6301 	movw	r3, #1537	; 0x601
 8016a2a:	4a18      	ldr	r2, [pc, #96]	; (8016a8c <ssl_encrypt_buf+0x608>)
 8016a2c:	2101      	movs	r1, #1
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f7f5 f964 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016a34:	4b18      	ldr	r3, [pc, #96]	; (8016a98 <ssl_encrypt_buf+0x614>)
 8016a36:	e022      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
    }
    else
#endif /* MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016a38:	4b16      	ldr	r3, [pc, #88]	; (8016a94 <ssl_encrypt_buf+0x610>)
 8016a3a:	9300      	str	r3, [sp, #0]
 8016a3c:	f240 6337 	movw	r3, #1591	; 0x637
 8016a40:	4a12      	ldr	r2, [pc, #72]	; (8016a8c <ssl_encrypt_buf+0x608>)
 8016a42:	2101      	movs	r1, #1
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f7f5 f959 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016a4a:	4b13      	ldr	r3, [pc, #76]	; (8016a98 <ssl_encrypt_buf+0x614>)
 8016a4c:	e017      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 8016a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a50:	2b01      	cmp	r3, #1
 8016a52:	d00a      	beq.n	8016a6a <ssl_encrypt_buf+0x5e6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016a54:	4b0f      	ldr	r3, [pc, #60]	; (8016a94 <ssl_encrypt_buf+0x610>)
 8016a56:	9300      	str	r3, [sp, #0]
 8016a58:	f240 633e 	movw	r3, #1598	; 0x63e
 8016a5c:	4a0b      	ldr	r2, [pc, #44]	; (8016a8c <ssl_encrypt_buf+0x608>)
 8016a5e:	2101      	movs	r1, #1
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7f5 f94b 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016a66:	4b0c      	ldr	r3, [pc, #48]	; (8016a98 <ssl_encrypt_buf+0x614>)
 8016a68:	e009      	b.n	8016a7e <ssl_encrypt_buf+0x5fa>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 8016a6a:	4b0c      	ldr	r3, [pc, #48]	; (8016a9c <ssl_encrypt_buf+0x618>)
 8016a6c:	9300      	str	r3, [sp, #0]
 8016a6e:	f240 6342 	movw	r3, #1602	; 0x642
 8016a72:	4a06      	ldr	r2, [pc, #24]	; (8016a8c <ssl_encrypt_buf+0x608>)
 8016a74:	2102      	movs	r1, #2
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f7f5 f940 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 8016a7c:	2300      	movs	r3, #0
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3770      	adds	r7, #112	; 0x70
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bdb0      	pop	{r4, r5, r7, pc}
 8016a86:	bf00      	nop
 8016a88:	08023820 	.word	0x08023820
 8016a8c:	080234fc 	.word	0x080234fc
 8016a90:	08023870 	.word	0x08023870
 8016a94:	080235a0 	.word	0x080235a0
 8016a98:	ffff9400 	.word	0xffff9400
 8016a9c:	08023888 	.word	0x08023888

08016aa0 <ssl_decrypt_buf>:

static int ssl_decrypt_buf( mbedtls_ssl_context *ssl )
{
 8016aa0:	b5b0      	push	{r4, r5, r7, lr}
 8016aa2:	b0ae      	sub	sp, #184	; 0xb8
 8016aa4:	af08      	add	r7, sp, #32
 8016aa6:	6078      	str	r0, [r7, #4]
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016ab4:	2301      	movs	r3, #1
 8016ab6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 8016aba:	4b98      	ldr	r3, [pc, #608]	; (8016d1c <ssl_decrypt_buf+0x27c>)
 8016abc:	9300      	str	r3, [sp, #0]
 8016abe:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8016ac2:	4a97      	ldr	r2, [pc, #604]	; (8016d20 <ssl_decrypt_buf+0x280>)
 8016ac4:	2102      	movs	r1, #2
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f7f5 f918 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	6a1b      	ldr	r3, [r3, #32]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d003      	beq.n	8016adc <ssl_decrypt_buf+0x3c>
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d10b      	bne.n	8016af4 <ssl_decrypt_buf+0x54>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016adc:	4b91      	ldr	r3, [pc, #580]	; (8016d24 <ssl_decrypt_buf+0x284>)
 8016ade:	9300      	str	r3, [sp, #0]
 8016ae0:	f240 6354 	movw	r3, #1620	; 0x654
 8016ae4:	4a8e      	ldr	r2, [pc, #568]	; (8016d20 <ssl_decrypt_buf+0x280>)
 8016ae6:	2101      	movs	r1, #1
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f7f5 f907 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016aee:	4b8e      	ldr	r3, [pc, #568]	; (8016d28 <ssl_decrypt_buf+0x288>)
 8016af0:	f000 bc36 	b.w	8017360 <ssl_decrypt_buf+0x8c0>
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016af8:	3390      	adds	r3, #144	; 0x90
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7fe fdf4 	bl	80156e8 <mbedtls_cipher_get_cipher_mode>
 8016b00:	4603      	mov	r3, r0
 8016b02:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    if( ssl->in_msglen < ssl->transform_in->minlen )
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b0e:	689b      	ldr	r3, [r3, #8]
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d212      	bcs.n	8016b3a <ssl_decrypt_buf+0x9a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b18:	687a      	ldr	r2, [r7, #4]
 8016b1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016b1c:	6892      	ldr	r2, [r2, #8]
 8016b1e:	9202      	str	r2, [sp, #8]
 8016b20:	9301      	str	r3, [sp, #4]
 8016b22:	4b82      	ldr	r3, [pc, #520]	; (8016d2c <ssl_decrypt_buf+0x28c>)
 8016b24:	9300      	str	r3, [sp, #0]
 8016b26:	f240 635c 	movw	r3, #1628	; 0x65c
 8016b2a:	4a7d      	ldr	r2, [pc, #500]	; (8016d20 <ssl_decrypt_buf+0x280>)
 8016b2c:	2101      	movs	r1, #1
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f7f5 f8e4 	bl	800bcfc <mbedtls_debug_print_msg>
                       ssl->in_msglen, ssl->transform_in->minlen ) );
        return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016b34:	4b7e      	ldr	r3, [pc, #504]	; (8016d30 <ssl_decrypt_buf+0x290>)
 8016b36:	f000 bc13 	b.w	8017360 <ssl_decrypt_buf+0x8c0>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 8016b3a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016b3e:	2b06      	cmp	r3, #6
 8016b40:	d004      	beq.n	8016b4c <ssl_decrypt_buf+0xac>
 8016b42:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016b46:	2b08      	cmp	r3, #8
 8016b48:	f040 8113 	bne.w	8016d72 <ssl_decrypt_buf+0x2d2>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	7f1b      	ldrb	r3, [r3, #28]
 8016b54:	f003 0302 	and.w	r3, r3, #2
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d001      	beq.n	8016b60 <ssl_decrypt_buf+0xc0>
 8016b5c:	2308      	movs	r3, #8
 8016b5e:	e000      	b.n	8016b62 <ssl_decrypt_buf+0xc2>
 8016b60:	2310      	movs	r3, #16
 8016b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b6a:	68da      	ldr	r2, [r3, #12]
                                 ssl->transform_in->fixed_ivlen;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b70:	691b      	ldr	r3, [r3, #16]
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 8016b72:	1ad3      	subs	r3, r2, r3
 8016b74:	65bb      	str	r3, [r7, #88]	; 0x58

        if( ssl->in_msglen < explicit_iv_len + taglen )
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016b7a:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 8016b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016b80:	440b      	add	r3, r1
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d212      	bcs.n	8016bac <ssl_decrypt_buf+0x10c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b8a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016b8e:	9203      	str	r2, [sp, #12]
 8016b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b92:	9202      	str	r2, [sp, #8]
 8016b94:	9301      	str	r3, [sp, #4]
 8016b96:	4b67      	ldr	r3, [pc, #412]	; (8016d34 <ssl_decrypt_buf+0x294>)
 8016b98:	9300      	str	r3, [sp, #0]
 8016b9a:	f240 638b 	movw	r3, #1675	; 0x68b
 8016b9e:	4a60      	ldr	r2, [pc, #384]	; (8016d20 <ssl_decrypt_buf+0x280>)
 8016ba0:	2101      	movs	r1, #1
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	f7f5 f8aa 	bl	800bcfc <mbedtls_debug_print_msg>
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016ba8:	4b61      	ldr	r3, [pc, #388]	; (8016d30 <ssl_decrypt_buf+0x290>)
 8016baa:	e3d9      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016bb2:	1ad2      	subs	r2, r2, r3
 8016bb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016bb8:	1ad3      	subs	r3, r2, r3
 8016bba:	657b      	str	r3, [r7, #84]	; 0x54

        dec_msg = ssl->in_msg;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016bc0:	653b      	str	r3, [r7, #80]	; 0x50
        dec_msg_result = ssl->in_msg;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
        ssl->in_msglen = dec_msglen;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016bcc:	671a      	str	r2, [r3, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016bd6:	2208      	movs	r2, #8
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f007 fcfb 	bl	801e5d4 <memcpy>
        add_data[8]  = ssl->in_msgtype;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016be2:	b2db      	uxtb	r3, r3
 8016be4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	6898      	ldr	r0, [r3, #8]
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	68d9      	ldr	r1, [r3, #12]
                           ssl->conf->transport, add_data + 9 );
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016bf8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016bfc:	b2db      	uxtb	r3, r3
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8016bfe:	461a      	mov	r2, r3
 8016c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c04:	3309      	adds	r3, #9
 8016c06:	f003 f829 	bl	8019c5c <mbedtls_ssl_write_version>
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c0e:	0a1b      	lsrs	r3, r3, #8
 8016c10:	b2db      	uxtb	r3, r3
 8016c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        add_data[12] = ssl->in_msglen & 0xFF;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c1a:	b2db      	uxtb	r3, r3
 8016c1c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 8016c20:	230d      	movs	r3, #13
 8016c22:	9302      	str	r3, [sp, #8]
 8016c24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c28:	9301      	str	r3, [sp, #4]
 8016c2a:	4b43      	ldr	r3, [pc, #268]	; (8016d38 <ssl_decrypt_buf+0x298>)
 8016c2c:	9300      	str	r3, [sp, #0]
 8016c2e:	f240 639d 	movw	r3, #1693	; 0x69d
 8016c32:	4a3b      	ldr	r2, [pc, #236]	; (8016d20 <ssl_decrypt_buf+0x280>)
 8016c34:	2104      	movs	r1, #4
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f7f5 f952 	bl	800bee0 <mbedtls_debug_print_buf>
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c40:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c48:	691b      	ldr	r3, [r3, #16]
 8016c4a:	18d0      	adds	r0, r2, r3
                ssl->in_iv,
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	6e19      	ldr	r1, [r3, #96]	; 0x60
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c54:	68da      	ldr	r2, [r3, #12]
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c5a:	691b      	ldr	r3, [r3, #16]
        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 8016c5c:	1ad3      	subs	r3, r2, r3
 8016c5e:	461a      	mov	r2, r3
 8016c60:	f007 fcb8 	bl	801e5d4 <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c68:	3328      	adds	r3, #40	; 0x28
 8016c6a:	687a      	ldr	r2, [r7, #4]
 8016c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016c6e:	68d2      	ldr	r2, [r2, #12]
 8016c70:	9202      	str	r2, [sp, #8]
 8016c72:	9301      	str	r3, [sp, #4]
 8016c74:	4b31      	ldr	r3, [pc, #196]	; (8016d3c <ssl_decrypt_buf+0x29c>)
 8016c76:	9300      	str	r3, [sp, #0]
 8016c78:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8016c7c:	4a28      	ldr	r2, [pc, #160]	; (8016d20 <ssl_decrypt_buf+0x280>)
 8016c7e:	2104      	movs	r1, #4
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f7f5 f92d 	bl	800bee0 <mbedtls_debug_print_buf>
                                     ssl->transform_in->ivlen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 8016c86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c8a:	4413      	add	r3, r2
 8016c8c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016c90:	9202      	str	r2, [sp, #8]
 8016c92:	9301      	str	r3, [sp, #4]
 8016c94:	4b2a      	ldr	r3, [pc, #168]	; (8016d40 <ssl_decrypt_buf+0x2a0>)
 8016c96:	9300      	str	r3, [sp, #0]
 8016c98:	f240 63a6 	movw	r3, #1702	; 0x6a6
 8016c9c:	4a20      	ldr	r2, [pc, #128]	; (8016d20 <ssl_decrypt_buf+0x280>)
 8016c9e:	2104      	movs	r1, #4
 8016ca0:	6878      	ldr	r0, [r7, #4]
 8016ca2:	f7f5 f91d 	bl	800bee0 <mbedtls_debug_print_buf>

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016caa:	f103 0090 	add.w	r0, r3, #144	; 0x90
                                         ssl->transform_in->iv_dec,
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cb2:	f103 0128 	add.w	r1, r3, #40	; 0x28
                                         ssl->transform_in->ivlen,
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 8016cba:	68dc      	ldr	r4, [r3, #12]
                                         add_data, 13,
                                         dec_msg, dec_msglen,
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
 8016cbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cc0:	4413      	add	r3, r2
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 8016cc2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016cc6:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8016cca:	9206      	str	r2, [sp, #24]
 8016ccc:	9305      	str	r3, [sp, #20]
 8016cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016cd2:	9304      	str	r3, [sp, #16]
 8016cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016cd6:	9303      	str	r3, [sp, #12]
 8016cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cda:	9302      	str	r3, [sp, #8]
 8016cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016cde:	9301      	str	r3, [sp, #4]
 8016ce0:	230d      	movs	r3, #13
 8016ce2:	9300      	str	r3, [sp, #0]
 8016ce4:	462b      	mov	r3, r5
 8016ce6:	4622      	mov	r2, r4
 8016ce8:	f7f4 fef8 	bl	800badc <mbedtls_cipher_auth_decrypt>
 8016cec:	64b8      	str	r0, [r7, #72]	; 0x48
 8016cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d029      	beq.n	8016d48 <ssl_decrypt_buf+0x2a8>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 8016cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016cf6:	9301      	str	r3, [sp, #4]
 8016cf8:	4b12      	ldr	r3, [pc, #72]	; (8016d44 <ssl_decrypt_buf+0x2a4>)
 8016cfa:	9300      	str	r3, [sp, #0]
 8016cfc:	f240 63b3 	movw	r3, #1715	; 0x6b3
 8016d00:	4a07      	ldr	r2, [pc, #28]	; (8016d20 <ssl_decrypt_buf+0x280>)
 8016d02:	2101      	movs	r1, #1
 8016d04:	6878      	ldr	r0, [r7, #4]
 8016d06:	f7f5 f87f 	bl	800be08 <mbedtls_debug_print_ret>

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 8016d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016d0c:	f513 4fc6 	cmn.w	r3, #25344	; 0x6300
 8016d10:	d101      	bne.n	8016d16 <ssl_decrypt_buf+0x276>
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016d12:	4b07      	ldr	r3, [pc, #28]	; (8016d30 <ssl_decrypt_buf+0x290>)
 8016d14:	e324      	b.n	8017360 <ssl_decrypt_buf+0x8c0>

            return( ret );
 8016d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016d18:	e322      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
 8016d1a:	bf00      	nop
 8016d1c:	08023898 	.word	0x08023898
 8016d20:	080234fc 	.word	0x080234fc
 8016d24:	080235a0 	.word	0x080235a0
 8016d28:	ffff9400 	.word	0xffff9400
 8016d2c:	080238a8 	.word	0x080238a8
 8016d30:	ffff8e80 	.word	0xffff8e80
 8016d34:	080238c8 	.word	0x080238c8
 8016d38:	0802378c 	.word	0x0802378c
 8016d3c:	080237ac 	.word	0x080237ac
 8016d40:	080238fc 	.word	0x080238fc
 8016d44:	08023908 	.word	0x08023908
        }
        auth_done++;
 8016d48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if( olen != dec_msglen )
 8016d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016d56:	429a      	cmp	r2, r3
 8016d58:	f000 81a9 	beq.w	80170ae <ssl_decrypt_buf+0x60e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016d5c:	4b9a      	ldr	r3, [pc, #616]	; (8016fc8 <ssl_decrypt_buf+0x528>)
 8016d5e:	9300      	str	r3, [sp, #0]
 8016d60:	f240 63be 	movw	r3, #1726	; 0x6be
 8016d64:	4a99      	ldr	r2, [pc, #612]	; (8016fcc <ssl_decrypt_buf+0x52c>)
 8016d66:	2101      	movs	r1, #1
 8016d68:	6878      	ldr	r0, [r7, #4]
 8016d6a:	f7f4 ffc7 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016d6e:	4b98      	ldr	r3, [pc, #608]	; (8016fd0 <ssl_decrypt_buf+0x530>)
 8016d70:	e2f6      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 8016d72:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016d76:	2b02      	cmp	r3, #2
 8016d78:	f040 818e 	bne.w	8017098 <ssl_decrypt_buf+0x5f8>
         */
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        size_t olen = 0;
 8016d82:	2300      	movs	r3, #0
 8016d84:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	68db      	ldr	r3, [r3, #12]
 8016d8a:	2b01      	cmp	r3, #1
 8016d8c:	dd07      	ble.n	8016d9e <ssl_decrypt_buf+0x2fe>
            minlen += ssl->transform_in->ivlen;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016d98:	4413      	add	r3, r2
 8016d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016da6:	68d9      	ldr	r1, [r3, #12]
 8016da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016dac:	440b      	add	r3, r1
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d30a      	bcc.n	8016dc8 <ssl_decrypt_buf+0x328>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016dba:	6959      	ldr	r1, [r3, #20]
 8016dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016dc0:	440b      	add	r3, r1
 8016dc2:	3301      	adds	r3, #1
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	d215      	bcs.n	8016df4 <ssl_decrypt_buf+0x354>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dcc:	687a      	ldr	r2, [r7, #4]
 8016dce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016dd0:	68d2      	ldr	r2, [r2, #12]
 8016dd2:	6879      	ldr	r1, [r7, #4]
 8016dd4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016dd6:	6949      	ldr	r1, [r1, #20]
 8016dd8:	9103      	str	r1, [sp, #12]
 8016dda:	9202      	str	r2, [sp, #8]
 8016ddc:	9301      	str	r3, [sp, #4]
 8016dde:	4b7d      	ldr	r3, [pc, #500]	; (8016fd4 <ssl_decrypt_buf+0x534>)
 8016de0:	9300      	str	r3, [sp, #0]
 8016de2:	f240 63dd 	movw	r3, #1757	; 0x6dd
 8016de6:	4a79      	ldr	r2, [pc, #484]	; (8016fcc <ssl_decrypt_buf+0x52c>)
 8016de8:	2101      	movs	r1, #1
 8016dea:	6878      	ldr	r0, [r7, #4]
 8016dec:	f7f4 ff86 	bl	800bcfc <mbedtls_debug_print_msg>
                                "+ 1 ) ( + expl IV )", ssl->in_msglen,
                                ssl->transform_in->ivlen,
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016df0:	4b79      	ldr	r3, [pc, #484]	; (8016fd8 <ssl_decrypt_buf+0x538>)
 8016df2:	e2b5      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
        }

        dec_msglen = ssl->in_msglen;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        dec_msg = ssl->in_msg;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016e00:	66fb      	str	r3, [r7, #108]	; 0x6c
        dec_msg_result = ssl->in_msg;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016e06:	66bb      	str	r3, [r7, #104]	; 0x68
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e0c:	687a      	ldr	r2, [r7, #4]
 8016e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016e10:	68d2      	ldr	r2, [r2, #12]
 8016e12:	fbb3 f1f2 	udiv	r1, r3, r2
 8016e16:	fb01 f202 	mul.w	r2, r1, r2
 8016e1a:	1a9b      	subs	r3, r3, r2
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d011      	beq.n	8016e44 <ssl_decrypt_buf+0x3a4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e24:	687a      	ldr	r2, [r7, #4]
 8016e26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016e28:	68d2      	ldr	r2, [r2, #12]
 8016e2a:	9202      	str	r2, [sp, #8]
 8016e2c:	9301      	str	r3, [sp, #4]
 8016e2e:	4b6b      	ldr	r3, [pc, #428]	; (8016fdc <ssl_decrypt_buf+0x53c>)
 8016e30:	9300      	str	r3, [sp, #0]
 8016e32:	f44f 63e3 	mov.w	r3, #1816	; 0x718
 8016e36:	4a65      	ldr	r2, [pc, #404]	; (8016fcc <ssl_decrypt_buf+0x52c>)
 8016e38:	2101      	movs	r1, #1
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f7f4 ff5e 	bl	800bcfc <mbedtls_debug_print_msg>
                           ssl->in_msglen, ssl->transform_in->ivlen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016e40:	4b65      	ldr	r3, [pc, #404]	; (8016fd8 <ssl_decrypt_buf+0x538>)
 8016e42:	e28d      	b.n	8017360 <ssl_decrypt_buf+0x8c0>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	68db      	ldr	r3, [r3, #12]
 8016e48:	2b01      	cmp	r3, #1
 8016e4a:	dd2d      	ble.n	8016ea8 <ssl_decrypt_buf+0x408>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e50:	68db      	ldr	r3, [r3, #12]
 8016e52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016e56:	1ad3      	subs	r3, r2, r3
 8016e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            ssl->in_msglen -= ssl->transform_in->ivlen;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e64:	68db      	ldr	r3, [r3, #12]
 8016e66:	1ad2      	subs	r2, r2, r3
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	671a      	str	r2, [r3, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016e72:	e012      	b.n	8016e9a <ssl_decrypt_buf+0x3fa>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8016e78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e7c:	4413      	add	r3, r2
 8016e7e:	687a      	ldr	r2, [r7, #4]
 8016e80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016e82:	7819      	ldrb	r1, [r3, #0]
 8016e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e88:	4413      	add	r3, r2
 8016e8a:	3328      	adds	r3, #40	; 0x28
 8016e8c:	460a      	mov	r2, r1
 8016e8e:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8016e90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e94:	3301      	adds	r3, #1
 8016e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e9e:	68db      	ldr	r3, [r3, #12]
 8016ea0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	d3e5      	bcc.n	8016e74 <ssl_decrypt_buf+0x3d4>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016eac:	f103 0090 	add.w	r0, r3, #144	; 0x90
                                   ssl->transform_in->iv_dec,
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016eb4:	f103 0128 	add.w	r1, r3, #40	; 0x28
                                   ssl->transform_in->ivlen,
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 8016ebc:	68da      	ldr	r2, [r3, #12]
 8016ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016ec2:	9302      	str	r3, [sp, #8]
 8016ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016ec6:	9301      	str	r3, [sp, #4]
 8016ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016ecc:	9300      	str	r3, [sp, #0]
 8016ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ed0:	f7f4 fd92 	bl	800b9f8 <mbedtls_cipher_crypt>
 8016ed4:	6678      	str	r0, [r7, #100]	; 0x64
 8016ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d00c      	beq.n	8016ef6 <ssl_decrypt_buf+0x456>
                                   dec_msg, dec_msglen,
                                   dec_msg_result, &olen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 8016edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ede:	9301      	str	r3, [sp, #4]
 8016ee0:	4b3f      	ldr	r3, [pc, #252]	; (8016fe0 <ssl_decrypt_buf+0x540>)
 8016ee2:	9300      	str	r3, [sp, #0]
 8016ee4:	f240 7331 	movw	r3, #1841	; 0x731
 8016ee8:	4a38      	ldr	r2, [pc, #224]	; (8016fcc <ssl_decrypt_buf+0x52c>)
 8016eea:	2101      	movs	r1, #1
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f7f4 ff8b 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8016ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ef4:	e234      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
        }

        if( dec_msglen != olen )
 8016ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016efc:	429a      	cmp	r2, r3
 8016efe:	d00a      	beq.n	8016f16 <ssl_decrypt_buf+0x476>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016f00:	4b31      	ldr	r3, [pc, #196]	; (8016fc8 <ssl_decrypt_buf+0x528>)
 8016f02:	9300      	str	r3, [sp, #0]
 8016f04:	f240 7337 	movw	r3, #1847	; 0x737
 8016f08:	4a30      	ldr	r2, [pc, #192]	; (8016fcc <ssl_decrypt_buf+0x52c>)
 8016f0a:	2101      	movs	r1, #1
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f7f4 fef5 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016f12:	4b2f      	ldr	r3, [pc, #188]	; (8016fd0 <ssl_decrypt_buf+0x530>)
 8016f14:	e224      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f1e:	3b01      	subs	r3, #1
 8016f20:	4413      	add	r3, r2
 8016f22:	781b      	ldrb	r3, [r3, #0]
 8016f24:	3301      	adds	r3, #1
 8016f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f32:	6959      	ldr	r1, [r3, #20]
 8016f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016f38:	440b      	add	r3, r1
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d209      	bcs.n	8016f52 <ssl_decrypt_buf+0x4b2>
 8016f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d105      	bne.n	8016f52 <ssl_decrypt_buf+0x4b2>
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 8016f46:	2300      	movs	r3, #0
 8016f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            correct = 0;
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	68db      	ldr	r3, [r3, #12]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	f340 8093 	ble.w	8017082 <ssl_decrypt_buf+0x5e2>
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016f60:	2301      	movs	r3, #1
 8016f62:	67bb      	str	r3, [r7, #120]	; 0x78
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016f6c:	1ad3      	subs	r3, r2, r3
 8016f6e:	3b01      	subs	r3, #1
 8016f70:	663b      	str	r3, [r7, #96]	; 0x60
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( ssl->in_msglen >= padlen + 1 );
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	429a      	cmp	r2, r3
 8016f7e:	bf2c      	ite	cs
 8016f80:	2301      	movcs	r3, #1
 8016f82:	2300      	movcc	r3, #0
 8016f84:	b2db      	uxtb	r3, r3
 8016f86:	461a      	mov	r2, r3
 8016f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016f8c:	4013      	ands	r3, r2
 8016f8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f96:	695b      	ldr	r3, [r3, #20]
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 8016f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016f9e:	429a      	cmp	r2, r3
 8016fa0:	bf34      	ite	cc
 8016fa2:	2301      	movcc	r3, #1
 8016fa4:	2300      	movcs	r3, #0
 8016fa6:	b2db      	uxtb	r3, r3
 8016fa8:	461a      	mov	r2, r3
 8016faa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016fae:	4013      	ands	r3, r2
 8016fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            padding_idx *= correct;
 8016fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016fb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016fba:	fb02 f303 	mul.w	r3, r2, r3
 8016fbe:	663b      	str	r3, [r7, #96]	; 0x60

            for( i = 1; i <= 256; i++ )
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016fc6:	e037      	b.n	8017038 <ssl_decrypt_buf+0x598>
 8016fc8:	080235a0 	.word	0x080235a0
 8016fcc:	080234fc 	.word	0x080234fc
 8016fd0:	ffff9400 	.word	0xffff9400
 8016fd4:	08023924 	.word	0x08023924
 8016fd8:	ffff8e80 	.word	0xffff8e80
 8016fdc:	08023964 	.word	0x08023964
 8016fe0:	08023870 	.word	0x08023870
            {
                real_count &= ( i <= padlen );
 8016fe4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016fec:	429a      	cmp	r2, r3
 8016fee:	bf94      	ite	ls
 8016ff0:	2301      	movls	r3, #1
 8016ff2:	2300      	movhi	r3, #0
 8016ff4:	b2db      	uxtb	r3, r3
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016ffa:	4013      	ands	r3, r2
 8016ffc:	67bb      	str	r3, [r7, #120]	; 0x78
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017002:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017008:	440b      	add	r3, r1
 801700a:	4413      	add	r3, r2
 801700c:	781b      	ldrb	r3, [r3, #0]
 801700e:	461a      	mov	r2, r3
 8017010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017014:	3b01      	subs	r3, #1
 8017016:	429a      	cmp	r2, r3
 8017018:	bf0c      	ite	eq
 801701a:	2301      	moveq	r3, #1
 801701c:	2300      	movne	r3, #0
 801701e:	b2db      	uxtb	r3, r3
 8017020:	461a      	mov	r2, r3
                pad_count += real_count *
 8017022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017024:	fb02 f303 	mul.w	r3, r2, r3
 8017028:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801702a:	4413      	add	r3, r2
 801702c:	67fb      	str	r3, [r7, #124]	; 0x7c
            for( i = 1; i <= 256; i++ )
 801702e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017032:	3301      	adds	r3, #1
 8017034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017038:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801703c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017040:	d9d0      	bls.n	8016fe4 <ssl_decrypt_buf+0x544>
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 8017042:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017048:	429a      	cmp	r2, r3
 801704a:	bf0c      	ite	eq
 801704c:	2301      	moveq	r3, #1
 801704e:	2300      	movne	r3, #0
 8017050:	b2db      	uxtb	r3, r3
 8017052:	461a      	mov	r2, r3
 8017054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017058:	4013      	ands	r3, r2
 801705a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 801705e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017062:	4613      	mov	r3, r2
 8017064:	025b      	lsls	r3, r3, #9
 8017066:	1a9b      	subs	r3, r3, r2
 8017068:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801706c:	4013      	ands	r3, r2
 801706e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801707a:	1ad2      	subs	r2, r2, r3
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	671a      	str	r2, [r3, #112]	; 0x70
 8017080:	e016      	b.n	80170b0 <ssl_decrypt_buf+0x610>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8017082:	4ba0      	ldr	r3, [pc, #640]	; (8017304 <ssl_decrypt_buf+0x864>)
 8017084:	9300      	str	r3, [sp, #0]
 8017086:	f240 7391 	movw	r3, #1937	; 0x791
 801708a:	4a9f      	ldr	r2, [pc, #636]	; (8017308 <ssl_decrypt_buf+0x868>)
 801708c:	2101      	movs	r1, #1
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f7f4 fe34 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8017094:	4b9d      	ldr	r3, [pc, #628]	; (801730c <ssl_decrypt_buf+0x86c>)
 8017096:	e163      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
    }
    else
#endif /* MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8017098:	4b9a      	ldr	r3, [pc, #616]	; (8017304 <ssl_decrypt_buf+0x864>)
 801709a:	9300      	str	r3, [sp, #0]
 801709c:	f240 739b 	movw	r3, #1947	; 0x79b
 80170a0:	4a99      	ldr	r2, [pc, #612]	; (8017308 <ssl_decrypt_buf+0x868>)
 80170a2:	2101      	movs	r1, #1
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f7f4 fe29 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80170aa:	4b98      	ldr	r3, [pc, #608]	; (801730c <ssl_decrypt_buf+0x86c>)
 80170ac:	e158      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
    {
 80170ae:	bf00      	nop
    }

    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80170b4:	687a      	ldr	r2, [r7, #4]
 80170b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80170b8:	9202      	str	r2, [sp, #8]
 80170ba:	9301      	str	r3, [sp, #4]
 80170bc:	4b94      	ldr	r3, [pc, #592]	; (8017310 <ssl_decrypt_buf+0x870>)
 80170be:	9300      	str	r3, [sp, #0]
 80170c0:	f240 739f 	movw	r3, #1951	; 0x79f
 80170c4:	4a90      	ldr	r2, [pc, #576]	; (8017308 <ssl_decrypt_buf+0x868>)
 80170c6:	2104      	movs	r1, #4
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f7f4 ff09 	bl	800bee0 <mbedtls_debug_print_buf>
    /*
     * Authenticate if not done yet.
     * Compute the MAC regardless of the padding result (RFC4346, CBCTIME).
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
 80170ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	f040 80cc 	bne.w	8017270 <ssl_decrypt_buf+0x7d0>
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170e0:	695b      	ldr	r3, [r3, #20]
 80170e2:	1ad2      	subs	r2, r2, r3
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	671a      	str	r2, [r3, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170ec:	0a1a      	lsrs	r2, r3, #8
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80170f2:	b2d2      	uxtb	r2, r2
 80170f4:	701a      	strb	r2, [r3, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80170fe:	3301      	adds	r3, #1
 8017100:	b2d2      	uxtb	r2, r2
 8017102:	701a      	strb	r2, [r3, #0]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	68db      	ldr	r3, [r3, #12]
 8017108:	2b00      	cmp	r3, #0
 801710a:	f340 8098 	ble.w	801723e <ssl_decrypt_buf+0x79e>
             *
             * We use ( ( Lx + 8 ) / 64 ) to handle 'negative Lx' values
             * correctly. (We round down instead of up, so -56 is the correct
             * value for our calculations instead of -55)
             */
            size_t j, extra_run = 0;
 801710e:	2300      	movs	r3, #0
 8017110:	647b      	str	r3, [r7, #68]	; 0x44
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801711a:	4413      	add	r3, r2
 801711c:	3315      	adds	r3, #21
 801711e:	099a      	lsrs	r2, r3, #6
                        ( 13 + ssl->in_msglen          + 8 ) / 64;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017124:	3315      	adds	r3, #21
 8017126:	099b      	lsrs	r3, r3, #6
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 8017128:	1ad3      	subs	r3, r2, r3
 801712a:	647b      	str	r3, [r7, #68]	; 0x44

            extra_run &= correct * 0xFF;
 801712c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017130:	4613      	mov	r3, r2
 8017132:	021b      	lsls	r3, r3, #8
 8017134:	1a9b      	subs	r3, r3, r2
 8017136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017138:	4013      	ands	r3, r2
 801713a:	647b      	str	r3, [r7, #68]	; 0x44

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017140:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017148:	2208      	movs	r2, #8
 801714a:	4619      	mov	r1, r3
 801714c:	f7f7 fb78 	bl	800e840 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017154:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801715c:	2203      	movs	r2, #3
 801715e:	4619      	mov	r1, r3
 8017160:	f7f7 fb6e 	bl	800e840 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017168:	f103 0044 	add.w	r0, r3, #68	; 0x44
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017170:	2202      	movs	r2, #2
 8017172:	4619      	mov	r1, r3
 8017174:	f7f7 fb64 	bl	800e840 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801717c:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017188:	461a      	mov	r2, r3
 801718a:	f7f7 fb59 	bl	800e840 <mbedtls_md_hmac_update>
                             ssl->in_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017192:	3344      	adds	r3, #68	; 0x44
 8017194:	f107 020c 	add.w	r2, r7, #12
 8017198:	4611      	mov	r1, r2
 801719a:	4618      	mov	r0, r3
 801719c:	f7f7 fb72 	bl	800e884 <mbedtls_md_hmac_finish>
            /* Call mbedtls_md_process at least once due to cache attacks */
            for( j = 0; j < extra_run + 1; j++ )
 80171a0:	2300      	movs	r3, #0
 80171a2:	677b      	str	r3, [r7, #116]	; 0x74
 80171a4:	e00c      	b.n	80171c0 <ssl_decrypt_buf+0x720>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171aa:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80171b2:	4619      	mov	r1, r3
 80171b4:	4610      	mov	r0, r2
 80171b6:	f7f7 fbfd 	bl	800e9b4 <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 80171ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80171bc:	3301      	adds	r3, #1
 80171be:	677b      	str	r3, [r7, #116]	; 0x74
 80171c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171c2:	3301      	adds	r3, #1
 80171c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80171c6:	429a      	cmp	r2, r3
 80171c8:	d3ed      	bcc.n	80171a6 <ssl_decrypt_buf+0x706>

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171ce:	3344      	adds	r3, #68	; 0x44
 80171d0:	4618      	mov	r0, r3
 80171d2:	f7f7 fbbd 	bl	800e950 <mbedtls_md_hmac_reset>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171da:	695b      	ldr	r3, [r3, #20]
 80171dc:	9302      	str	r3, [sp, #8]
 80171de:	f107 030c 	add.w	r3, r7, #12
 80171e2:	9301      	str	r3, [sp, #4]
 80171e4:	4b4b      	ldr	r3, [pc, #300]	; (8017314 <ssl_decrypt_buf+0x874>)
 80171e6:	9300      	str	r3, [sp, #0]
 80171e8:	f240 73e6 	movw	r3, #2022	; 0x7e6
 80171ec:	4a46      	ldr	r2, [pc, #280]	; (8017308 <ssl_decrypt_buf+0x868>)
 80171ee:	2104      	movs	r1, #4
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f7f4 fe75 	bl	800bee0 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171fe:	4413      	add	r3, r2
 8017200:	687a      	ldr	r2, [r7, #4]
 8017202:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017204:	6952      	ldr	r2, [r2, #20]
 8017206:	9202      	str	r2, [sp, #8]
 8017208:	9301      	str	r3, [sp, #4]
 801720a:	4b43      	ldr	r3, [pc, #268]	; (8017318 <ssl_decrypt_buf+0x878>)
 801720c:	9300      	str	r3, [sp, #0]
 801720e:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8017212:	4a3d      	ldr	r2, [pc, #244]	; (8017308 <ssl_decrypt_buf+0x868>)
 8017214:	2104      	movs	r1, #4
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f7f4 fe62 	bl	800bee0 <mbedtls_debug_print_buf>
                               ssl->transform_in->maclen );

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017224:	18d0      	adds	r0, r2, r3
                                      ssl->transform_in->maclen ) != 0 )
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 801722a:	695a      	ldr	r2, [r3, #20]
 801722c:	f107 030c 	add.w	r3, r7, #12
 8017230:	4619      	mov	r1, r3
 8017232:	f7fe fab4 	bl	801579e <mbedtls_ssl_safer_memcmp>
 8017236:	4603      	mov	r3, r0
 8017238:	2b00      	cmp	r3, #0
 801723a:	d00e      	beq.n	801725a <ssl_decrypt_buf+0x7ba>
 801723c:	e00a      	b.n	8017254 <ssl_decrypt_buf+0x7b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801723e:	4b31      	ldr	r3, [pc, #196]	; (8017304 <ssl_decrypt_buf+0x864>)
 8017240:	9300      	str	r3, [sp, #0]
 8017242:	f240 73e2 	movw	r3, #2018	; 0x7e2
 8017246:	4a30      	ldr	r2, [pc, #192]	; (8017308 <ssl_decrypt_buf+0x868>)
 8017248:	2101      	movs	r1, #1
 801724a:	6878      	ldr	r0, [r7, #4]
 801724c:	f7f4 fd56 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8017250:	4b2e      	ldr	r3, [pc, #184]	; (801730c <ssl_decrypt_buf+0x86c>)
 8017252:	e085      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
#endif
            correct = 0;
 8017254:	2300      	movs	r3, #0
 8017256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }
        auth_done++;
 801725a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801725e:	3301      	adds	r3, #1
 8017260:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 8017264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017268:	2b00      	cmp	r3, #0
 801726a:	d101      	bne.n	8017270 <ssl_decrypt_buf+0x7d0>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801726c:	4b2b      	ldr	r3, [pc, #172]	; (801731c <ssl_decrypt_buf+0x87c>)
 801726e:	e077      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
    }
#endif /* SSL_SOME_MODES_USE_MAC */

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 8017270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017274:	2b01      	cmp	r3, #1
 8017276:	d00a      	beq.n	801728e <ssl_decrypt_buf+0x7ee>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8017278:	4b22      	ldr	r3, [pc, #136]	; (8017304 <ssl_decrypt_buf+0x864>)
 801727a:	9300      	str	r3, [sp, #0]
 801727c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8017280:	4a21      	ldr	r2, [pc, #132]	; (8017308 <ssl_decrypt_buf+0x868>)
 8017282:	2101      	movs	r1, #1
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f7f4 fd39 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801728a:	4b20      	ldr	r3, [pc, #128]	; (801730c <ssl_decrypt_buf+0x86c>)
 801728c:	e068      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
    }

    if( ssl->in_msglen == 0 )
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017292:	2b00      	cmp	r3, #0
 8017294:	d113      	bne.n	80172be <ssl_decrypt_buf+0x81e>
    {
        ssl->nb_zero++;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801729a:	1c5a      	adds	r2, r3, #1
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	67da      	str	r2, [r3, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80172a4:	2b03      	cmp	r3, #3
 80172a6:	dd0d      	ble.n	80172c4 <ssl_decrypt_buf+0x824>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 80172a8:	4b1d      	ldr	r3, [pc, #116]	; (8017320 <ssl_decrypt_buf+0x880>)
 80172aa:	9300      	str	r3, [sp, #0]
 80172ac:	f640 030d 	movw	r3, #2061	; 0x80d
 80172b0:	4a15      	ldr	r2, [pc, #84]	; (8017308 <ssl_decrypt_buf+0x868>)
 80172b2:	2101      	movs	r1, #1
 80172b4:	6878      	ldr	r0, [r7, #4]
 80172b6:	f7f4 fd21 	bl	800bcfc <mbedtls_debug_print_msg>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 80172ba:	4b18      	ldr	r3, [pc, #96]	; (801731c <ssl_decrypt_buf+0x87c>)
 80172bc:	e050      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
        }
    }
    else
        ssl->nb_zero = 0;
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	2200      	movs	r2, #0
 80172c2:	67da      	str	r2, [r3, #124]	; 0x7c
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80172c4:	2308      	movs	r3, #8
 80172c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80172ca:	e011      	b.n	80172f0 <ssl_decrypt_buf+0x850>
            if( ++ssl->in_ctr[i - 1] != 0 )
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80172d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80172d4:	3b01      	subs	r3, #1
 80172d6:	4413      	add	r3, r2
 80172d8:	781a      	ldrb	r2, [r3, #0]
 80172da:	3201      	adds	r2, #1
 80172dc:	b2d2      	uxtb	r2, r2
 80172de:	701a      	strb	r2, [r3, #0]
 80172e0:	781b      	ldrb	r3, [r3, #0]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d11e      	bne.n	8017324 <ssl_decrypt_buf+0x884>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80172e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80172ea:	3b01      	subs	r3, #1
 80172ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80172f0:	6878      	ldr	r0, [r7, #4]
 80172f2:	f7fe fa9f 	bl	8015834 <ssl_ep_len>
 80172f6:	4602      	mov	r2, r0
 80172f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80172fc:	4293      	cmp	r3, r2
 80172fe:	d8e5      	bhi.n	80172cc <ssl_decrypt_buf+0x82c>
 8017300:	e011      	b.n	8017326 <ssl_decrypt_buf+0x886>
 8017302:	bf00      	nop
 8017304:	080235a0 	.word	0x080235a0
 8017308:	080234fc 	.word	0x080234fc
 801730c:	ffff9400 	.word	0xffff9400
 8017310:	08023984 	.word	0x08023984
 8017314:	080239a0 	.word	0x080239a0
 8017318:	080239b0 	.word	0x080239b0
 801731c:	ffff8e80 	.word	0xffff8e80
 8017320:	080239c0 	.word	0x080239c0
                break;
 8017324:	bf00      	nop

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
 8017326:	6878      	ldr	r0, [r7, #4]
 8017328:	f7fe fa84 	bl	8015834 <ssl_ep_len>
 801732c:	4602      	mov	r2, r0
 801732e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017332:	4293      	cmp	r3, r2
 8017334:	d10a      	bne.n	801734c <ssl_decrypt_buf+0x8ac>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 8017336:	4b0c      	ldr	r3, [pc, #48]	; (8017368 <ssl_decrypt_buf+0x8c8>)
 8017338:	9300      	str	r3, [sp, #0]
 801733a:	f640 0324 	movw	r3, #2084	; 0x824
 801733e:	4a0b      	ldr	r2, [pc, #44]	; (801736c <ssl_decrypt_buf+0x8cc>)
 8017340:	2101      	movs	r1, #1
 8017342:	6878      	ldr	r0, [r7, #4]
 8017344:	f7f4 fcda 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8017348:	4b09      	ldr	r3, [pc, #36]	; (8017370 <ssl_decrypt_buf+0x8d0>)
 801734a:	e009      	b.n	8017360 <ssl_decrypt_buf+0x8c0>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 801734c:	4b09      	ldr	r3, [pc, #36]	; (8017374 <ssl_decrypt_buf+0x8d4>)
 801734e:	9300      	str	r3, [sp, #0]
 8017350:	f640 0329 	movw	r3, #2089	; 0x829
 8017354:	4a05      	ldr	r2, [pc, #20]	; (801736c <ssl_decrypt_buf+0x8cc>)
 8017356:	2102      	movs	r1, #2
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f7f4 fccf 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 801735e:	2300      	movs	r3, #0
}
 8017360:	4618      	mov	r0, r3
 8017362:	3798      	adds	r7, #152	; 0x98
 8017364:	46bd      	mov	sp, r7
 8017366:	bdb0      	pop	{r4, r5, r7, pc}
 8017368:	08023a00 	.word	0x08023a00
 801736c:	080234fc 	.word	0x080234fc
 8017370:	ffff9480 	.word	0xffff9480
 8017374:	08023a24 	.word	0x08023a24

08017378 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 8017378:	b590      	push	{r4, r7, lr}
 801737a:	b089      	sub	sp, #36	; 0x24
 801737c:	af04      	add	r7, sp, #16
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 8017382:	4b55      	ldr	r3, [pc, #340]	; (80174d8 <mbedtls_ssl_fetch_input+0x160>)
 8017384:	9300      	str	r3, [sp, #0]
 8017386:	f640 03c6 	movw	r3, #2246	; 0x8c6
 801738a:	4a54      	ldr	r2, [pc, #336]	; (80174dc <mbedtls_ssl_fetch_input+0x164>)
 801738c:	2102      	movs	r1, #2
 801738e:	6878      	ldr	r0, [r7, #4]
 8017390:	f7f4 fcb4 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	695b      	ldr	r3, [r3, #20]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d10e      	bne.n	80173ba <mbedtls_ssl_fetch_input+0x42>
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	699b      	ldr	r3, [r3, #24]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d10a      	bne.n	80173ba <mbedtls_ssl_fetch_input+0x42>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 80173a4:	4b4e      	ldr	r3, [pc, #312]	; (80174e0 <mbedtls_ssl_fetch_input+0x168>)
 80173a6:	9300      	str	r3, [sp, #0]
 80173a8:	f640 03ca 	movw	r3, #2250	; 0x8ca
 80173ac:	4a4b      	ldr	r2, [pc, #300]	; (80174dc <mbedtls_ssl_fetch_input+0x164>)
 80173ae:	2101      	movs	r1, #1
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	f7f4 fca3 	bl	800bcfc <mbedtls_debug_print_msg>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80173b6:	4b4b      	ldr	r3, [pc, #300]	; (80174e4 <mbedtls_ssl_fetch_input+0x16c>)
 80173b8:	e08a      	b.n	80174d0 <mbedtls_ssl_fetch_input+0x158>
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173c2:	1ad3      	subs	r3, r2, r3
 80173c4:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 80173c8:	331d      	adds	r3, #29
 80173ca:	683a      	ldr	r2, [r7, #0]
 80173cc:	429a      	cmp	r2, r3
 80173ce:	d90a      	bls.n	80173e6 <mbedtls_ssl_fetch_input+0x6e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 80173d0:	4b45      	ldr	r3, [pc, #276]	; (80174e8 <mbedtls_ssl_fetch_input+0x170>)
 80173d2:	9300      	str	r3, [sp, #0]
 80173d4:	f640 03d1 	movw	r3, #2257	; 0x8d1
 80173d8:	4a40      	ldr	r2, [pc, #256]	; (80174dc <mbedtls_ssl_fetch_input+0x164>)
 80173da:	2101      	movs	r1, #1
 80173dc:	6878      	ldr	r0, [r7, #4]
 80173de:	f7f4 fc8d 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80173e2:	4b40      	ldr	r3, [pc, #256]	; (80174e4 <mbedtls_ssl_fetch_input+0x16c>)
 80173e4:	e074      	b.n	80174d0 <mbedtls_ssl_fetch_input+0x158>
        ssl->in_left = ret;
    }
    else
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80173ea:	683a      	ldr	r2, [r7, #0]
 80173ec:	9202      	str	r2, [sp, #8]
 80173ee:	9301      	str	r3, [sp, #4]
 80173f0:	4b3e      	ldr	r3, [pc, #248]	; (80174ec <mbedtls_ssl_fetch_input+0x174>)
 80173f2:	9300      	str	r3, [sp, #0]
 80173f4:	f640 1363 	movw	r3, #2403	; 0x963
 80173f8:	4a38      	ldr	r2, [pc, #224]	; (80174dc <mbedtls_ssl_fetch_input+0x164>)
 80173fa:	2102      	movs	r1, #2
 80173fc:	6878      	ldr	r0, [r7, #4]
 80173fe:	f7f4 fc7d 	bl	800bcfc <mbedtls_debug_print_msg>
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 8017402:	e056      	b.n	80174b2 <mbedtls_ssl_fetch_input+0x13a>
        {
            len = nb_want - ssl->in_left;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017408:	683a      	ldr	r2, [r7, #0]
 801740a:	1ad3      	subs	r3, r2, r3
 801740c:	60bb      	str	r3, [r7, #8]

            if( ssl_check_timer( ssl ) != 0 )
 801740e:	6878      	ldr	r0, [r7, #4]
 8017410:	f7fe fa40 	bl	8015894 <ssl_check_timer>
 8017414:	4603      	mov	r3, r0
 8017416:	2b00      	cmp	r3, #0
 8017418:	d002      	beq.n	8017420 <mbedtls_ssl_fetch_input+0xa8>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 801741a:	4b35      	ldr	r3, [pc, #212]	; (80174f0 <mbedtls_ssl_fetch_input+0x178>)
 801741c:	60fb      	str	r3, [r7, #12]
 801741e:	e01f      	b.n	8017460 <mbedtls_ssl_fetch_input+0xe8>
            else
            {
                if( ssl->f_recv_timeout != NULL )
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	699b      	ldr	r3, [r3, #24]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d00f      	beq.n	8017448 <mbedtls_ssl_fetch_input+0xd0>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	699c      	ldr	r4, [r3, #24]
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	69d8      	ldr	r0, [r3, #28]
                                               ssl->in_hdr + ssl->in_left, len,
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 8017438:	18d1      	adds	r1, r2, r3
                                               ssl->conf->read_timeout );
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	681b      	ldr	r3, [r3, #0]
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 801743e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017440:	68ba      	ldr	r2, [r7, #8]
 8017442:	47a0      	blx	r4
 8017444:	60f8      	str	r0, [r7, #12]
 8017446:	e00b      	b.n	8017460 <mbedtls_ssl_fetch_input+0xe8>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	695b      	ldr	r3, [r3, #20]
 801744c:	687a      	ldr	r2, [r7, #4]
 801744e:	69d0      	ldr	r0, [r2, #28]
                                       ssl->in_hdr + ssl->in_left, len );
 8017450:	687a      	ldr	r2, [r7, #4]
 8017452:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8017454:	687a      	ldr	r2, [r7, #4]
 8017456:	6f52      	ldr	r2, [r2, #116]	; 0x74
                    ret = ssl->f_recv( ssl->p_bio,
 8017458:	4411      	add	r1, r2
 801745a:	68ba      	ldr	r2, [r7, #8]
 801745c:	4798      	blx	r3
 801745e:	60f8      	str	r0, [r7, #12]
                }
            }

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017464:	683a      	ldr	r2, [r7, #0]
 8017466:	9202      	str	r2, [sp, #8]
 8017468:	9301      	str	r3, [sp, #4]
 801746a:	4b20      	ldr	r3, [pc, #128]	; (80174ec <mbedtls_ssl_fetch_input+0x174>)
 801746c:	9300      	str	r3, [sp, #0]
 801746e:	f640 137b 	movw	r3, #2427	; 0x97b
 8017472:	4a1a      	ldr	r2, [pc, #104]	; (80174dc <mbedtls_ssl_fetch_input+0x164>)
 8017474:	2102      	movs	r1, #2
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f7f4 fc40 	bl	800bcfc <mbedtls_debug_print_msg>
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	9301      	str	r3, [sp, #4]
 8017480:	4b1c      	ldr	r3, [pc, #112]	; (80174f4 <mbedtls_ssl_fetch_input+0x17c>)
 8017482:	9300      	str	r3, [sp, #0]
 8017484:	f640 137d 	movw	r3, #2429	; 0x97d
 8017488:	4a14      	ldr	r2, [pc, #80]	; (80174dc <mbedtls_ssl_fetch_input+0x164>)
 801748a:	2102      	movs	r1, #2
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f7f4 fcbb 	bl	800be08 <mbedtls_debug_print_ret>

            if( ret == 0 )
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d101      	bne.n	801749c <mbedtls_ssl_fetch_input+0x124>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 8017498:	4b17      	ldr	r3, [pc, #92]	; (80174f8 <mbedtls_ssl_fetch_input+0x180>)
 801749a:	e019      	b.n	80174d0 <mbedtls_ssl_fetch_input+0x158>

            if( ret < 0 )
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	da01      	bge.n	80174a6 <mbedtls_ssl_fetch_input+0x12e>
                return( ret );
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	e014      	b.n	80174d0 <mbedtls_ssl_fetch_input+0x158>

            ssl->in_left += ret;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	441a      	add	r2, r3
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	675a      	str	r2, [r3, #116]	; 0x74
        while( ssl->in_left < nb_want )
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174b6:	683a      	ldr	r2, [r7, #0]
 80174b8:	429a      	cmp	r2, r3
 80174ba:	d8a3      	bhi.n	8017404 <mbedtls_ssl_fetch_input+0x8c>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 80174bc:	4b0f      	ldr	r3, [pc, #60]	; (80174fc <mbedtls_ssl_fetch_input+0x184>)
 80174be:	9300      	str	r3, [sp, #0]
 80174c0:	f640 1389 	movw	r3, #2441	; 0x989
 80174c4:	4a05      	ldr	r2, [pc, #20]	; (80174dc <mbedtls_ssl_fetch_input+0x164>)
 80174c6:	2102      	movs	r1, #2
 80174c8:	6878      	ldr	r0, [r7, #4]
 80174ca:	f7f4 fc17 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 80174ce:	2300      	movs	r3, #0
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3714      	adds	r7, #20
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd90      	pop	{r4, r7, pc}
 80174d8:	08023a34 	.word	0x08023a34
 80174dc:	080234fc 	.word	0x080234fc
 80174e0:	08023a44 	.word	0x08023a44
 80174e4:	ffff8f00 	.word	0xffff8f00
 80174e8:	08023a80 	.word	0x08023a80
 80174ec:	08023aa0 	.word	0x08023aa0
 80174f0:	ffff9800 	.word	0xffff9800
 80174f4:	08023abc 	.word	0x08023abc
 80174f8:	ffff8d80 	.word	0xffff8d80
 80174fc:	08023ad4 	.word	0x08023ad4

08017500 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8017500:	b590      	push	{r4, r7, lr}
 8017502:	b08b      	sub	sp, #44	; 0x2c
 8017504:	af04      	add	r7, sp, #16
 8017506:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 8017508:	4b58      	ldr	r3, [pc, #352]	; (801766c <mbedtls_ssl_flush_output+0x16c>)
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	f640 1396 	movw	r3, #2454	; 0x996
 8017510:	4a57      	ldr	r2, [pc, #348]	; (8017670 <mbedtls_ssl_flush_output+0x170>)
 8017512:	2102      	movs	r1, #2
 8017514:	6878      	ldr	r0, [r7, #4]
 8017516:	f7f4 fbf1 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ssl->f_send == NULL )
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	691b      	ldr	r3, [r3, #16]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d10a      	bne.n	8017538 <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 8017522:	4b54      	ldr	r3, [pc, #336]	; (8017674 <mbedtls_ssl_flush_output+0x174>)
 8017524:	9300      	str	r3, [sp, #0]
 8017526:	f640 139a 	movw	r3, #2458	; 0x99a
 801752a:	4a51      	ldr	r2, [pc, #324]	; (8017670 <mbedtls_ssl_flush_output+0x170>)
 801752c:	2101      	movs	r1, #1
 801752e:	6878      	ldr	r0, [r7, #4]
 8017530:	f7f4 fbe4 	bl	800bcfc <mbedtls_debug_print_msg>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8017534:	4b50      	ldr	r3, [pc, #320]	; (8017678 <mbedtls_ssl_flush_output+0x178>)
 8017536:	e095      	b.n	8017664 <mbedtls_ssl_flush_output+0x164>
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801753e:	2b00      	cmp	r3, #0
 8017540:	d153      	bne.n	80175ea <mbedtls_ssl_flush_output+0xea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 8017542:	4b4e      	ldr	r3, [pc, #312]	; (801767c <mbedtls_ssl_flush_output+0x17c>)
 8017544:	9300      	str	r3, [sp, #0]
 8017546:	f640 13a2 	movw	r3, #2466	; 0x9a2
 801754a:	4a49      	ldr	r2, [pc, #292]	; (8017670 <mbedtls_ssl_flush_output+0x170>)
 801754c:	2102      	movs	r1, #2
 801754e:	6878      	ldr	r0, [r7, #4]
 8017550:	f7f4 fbd4 	bl	800bcfc <mbedtls_debug_print_msg>
        return( 0 );
 8017554:	2300      	movs	r3, #0
 8017556:	e085      	b.n	8017664 <mbedtls_ssl_flush_output+0x164>
    }

    while( ssl->out_left > 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f7fe f90a 	bl	8015772 <mbedtls_ssl_hdr_len>
 801755e:	4602      	mov	r2, r0
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017566:	4413      	add	r3, r2
 8017568:	687a      	ldr	r2, [r7, #4]
 801756a:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 801756e:	9202      	str	r2, [sp, #8]
 8017570:	9301      	str	r3, [sp, #4]
 8017572:	4b43      	ldr	r3, [pc, #268]	; (8017680 <mbedtls_ssl_flush_output+0x180>)
 8017574:	9300      	str	r3, [sp, #0]
 8017576:	f640 13a8 	movw	r3, #2472	; 0x9a8
 801757a:	4a3d      	ldr	r2, [pc, #244]	; (8017670 <mbedtls_ssl_flush_output+0x170>)
 801757c:	2102      	movs	r1, #2
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f7f4 fbbc 	bl	800bcfc <mbedtls_debug_print_msg>
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f7fe f8f1 	bl	8015772 <mbedtls_ssl_hdr_len>
 8017590:	4602      	mov	r2, r0
              ssl->out_msglen - ssl->out_left;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 8017598:	441a      	add	r2, r3
              ssl->out_msglen - ssl->out_left;
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80175a0:	1ad3      	subs	r3, r2, r3
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 80175a2:	4423      	add	r3, r4
 80175a4:	613b      	str	r3, [r7, #16]
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	691b      	ldr	r3, [r3, #16]
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	69d0      	ldr	r0, [r2, #28]
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 80175b4:	6939      	ldr	r1, [r7, #16]
 80175b6:	4798      	blx	r3
 80175b8:	60f8      	str	r0, [r7, #12]

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	9301      	str	r3, [sp, #4]
 80175be:	4b31      	ldr	r3, [pc, #196]	; (8017684 <mbedtls_ssl_flush_output+0x184>)
 80175c0:	9300      	str	r3, [sp, #0]
 80175c2:	f640 13af 	movw	r3, #2479	; 0x9af
 80175c6:	4a2a      	ldr	r2, [pc, #168]	; (8017670 <mbedtls_ssl_flush_output+0x170>)
 80175c8:	2102      	movs	r1, #2
 80175ca:	6878      	ldr	r0, [r7, #4]
 80175cc:	f7f4 fc1c 	bl	800be08 <mbedtls_debug_print_ret>

        if( ret <= 0 )
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	dc01      	bgt.n	80175da <mbedtls_ssl_flush_output+0xda>
            return( ret );
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	e044      	b.n	8017664 <mbedtls_ssl_flush_output+0x164>

        ssl->out_left -= ret;
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	1ad2      	subs	r2, r2, r3
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    while( ssl->out_left > 0 )
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d1b1      	bne.n	8017558 <mbedtls_ssl_flush_output+0x58>
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80175f4:	2308      	movs	r3, #8
 80175f6:	75fb      	strb	r3, [r7, #23]
 80175f8:	e00f      	b.n	801761a <mbedtls_ssl_flush_output+0x11a>
        if( ++ssl->out_ctr[i - 1] != 0 )
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017600:	7dfb      	ldrb	r3, [r7, #23]
 8017602:	3b01      	subs	r3, #1
 8017604:	4413      	add	r3, r2
 8017606:	781a      	ldrb	r2, [r3, #0]
 8017608:	3201      	adds	r2, #1
 801760a:	b2d2      	uxtb	r2, r2
 801760c:	701a      	strb	r2, [r3, #0]
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d10a      	bne.n	801762a <mbedtls_ssl_flush_output+0x12a>
    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8017614:	7dfb      	ldrb	r3, [r7, #23]
 8017616:	3b01      	subs	r3, #1
 8017618:	75fb      	strb	r3, [r7, #23]
 801761a:	7dfc      	ldrb	r4, [r7, #23]
 801761c:	6878      	ldr	r0, [r7, #4]
 801761e:	f7fe f909 	bl	8015834 <ssl_ep_len>
 8017622:	4603      	mov	r3, r0
 8017624:	429c      	cmp	r4, r3
 8017626:	d8e8      	bhi.n	80175fa <mbedtls_ssl_flush_output+0xfa>
 8017628:	e000      	b.n	801762c <mbedtls_ssl_flush_output+0x12c>
            break;
 801762a:	bf00      	nop

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
 801762c:	7dfc      	ldrb	r4, [r7, #23]
 801762e:	6878      	ldr	r0, [r7, #4]
 8017630:	f7fe f900 	bl	8015834 <ssl_ep_len>
 8017634:	4603      	mov	r3, r0
 8017636:	429c      	cmp	r4, r3
 8017638:	d10a      	bne.n	8017650 <mbedtls_ssl_flush_output+0x150>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801763a:	4b13      	ldr	r3, [pc, #76]	; (8017688 <mbedtls_ssl_flush_output+0x188>)
 801763c:	9300      	str	r3, [sp, #0]
 801763e:	f640 13be 	movw	r3, #2494	; 0x9be
 8017642:	4a0b      	ldr	r2, [pc, #44]	; (8017670 <mbedtls_ssl_flush_output+0x170>)
 8017644:	2101      	movs	r1, #1
 8017646:	6878      	ldr	r0, [r7, #4]
 8017648:	f7f4 fb58 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801764c:	4b0f      	ldr	r3, [pc, #60]	; (801768c <mbedtls_ssl_flush_output+0x18c>)
 801764e:	e009      	b.n	8017664 <mbedtls_ssl_flush_output+0x164>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 8017650:	4b0a      	ldr	r3, [pc, #40]	; (801767c <mbedtls_ssl_flush_output+0x17c>)
 8017652:	9300      	str	r3, [sp, #0]
 8017654:	f640 13c2 	movw	r3, #2498	; 0x9c2
 8017658:	4a05      	ldr	r2, [pc, #20]	; (8017670 <mbedtls_ssl_flush_output+0x170>)
 801765a:	2102      	movs	r1, #2
 801765c:	6878      	ldr	r0, [r7, #4]
 801765e:	f7f4 fb4d 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 8017662:	2300      	movs	r3, #0
}
 8017664:	4618      	mov	r0, r3
 8017666:	371c      	adds	r7, #28
 8017668:	46bd      	mov	sp, r7
 801766a:	bd90      	pop	{r4, r7, pc}
 801766c:	08023ae4 	.word	0x08023ae4
 8017670:	080234fc 	.word	0x080234fc
 8017674:	08023a44 	.word	0x08023a44
 8017678:	ffff8f00 	.word	0xffff8f00
 801767c:	08023af4 	.word	0x08023af4
 8017680:	08023b04 	.word	0x08023b04
 8017684:	08023b28 	.word	0x08023b28
 8017688:	08023b34 	.word	0x08023b34
 801768c:	ffff9480 	.word	0xffff9480

08017690 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8017690:	b590      	push	{r4, r7, lr}
 8017692:	b08d      	sub	sp, #52	; 0x34
 8017694:	af06      	add	r7, sp, #24
 8017696:	6078      	str	r0, [r7, #4]
    int ret, done = 0, out_msg_type;
 8017698:	2300      	movs	r3, #0
 801769a:	617b      	str	r3, [r7, #20]
    size_t len = ssl->out_msglen;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80176a2:	613b      	str	r3, [r7, #16]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 80176a4:	4b86      	ldr	r3, [pc, #536]	; (80178c0 <mbedtls_ssl_write_record+0x230>)
 80176a6:	9300      	str	r3, [sp, #0]
 80176a8:	f640 23b3 	movw	r3, #2739	; 0xab3
 80176ac:	4a85      	ldr	r2, [pc, #532]	; (80178c4 <mbedtls_ssl_write_record+0x234>)
 80176ae:	2102      	movs	r1, #2
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f7f4 fb23 	bl	800bcfc <mbedtls_debug_print_msg>
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80176bc:	2b16      	cmp	r3, #22
 80176be:	d13d      	bne.n	801773c <mbedtls_ssl_write_record+0xac>
    {
        out_msg_type = ssl->out_msg[0];
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80176c6:	781b      	ldrb	r3, [r3, #0]
 80176c8:	60fb      	str	r3, [r7, #12]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d00e      	beq.n	80176ee <mbedtls_ssl_write_record+0x5e>
            ssl->handshake == NULL )
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d10a      	bne.n	80176ee <mbedtls_ssl_write_record+0x5e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80176d8:	4b7b      	ldr	r3, [pc, #492]	; (80178c8 <mbedtls_ssl_write_record+0x238>)
 80176da:	9300      	str	r3, [sp, #0]
 80176dc:	f640 23c5 	movw	r3, #2757	; 0xac5
 80176e0:	4a78      	ldr	r2, [pc, #480]	; (80178c4 <mbedtls_ssl_write_record+0x234>)
 80176e2:	2101      	movs	r1, #1
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f7f4 fb09 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80176ea:	4b78      	ldr	r3, [pc, #480]	; (80178cc <mbedtls_ssl_write_record+0x23c>)
 80176ec:	e0e4      	b.n	80178b8 <mbedtls_ssl_write_record+0x228>
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	3b04      	subs	r3, #4
 80176f2:	0c1a      	lsrs	r2, r3, #16
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80176fa:	3301      	adds	r3, #1
 80176fc:	b2d2      	uxtb	r2, r2
 80176fe:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 8017700:	693b      	ldr	r3, [r7, #16]
 8017702:	3b04      	subs	r3, #4
 8017704:	0a1a      	lsrs	r2, r3, #8
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801770c:	3302      	adds	r3, #2
 801770e:	b2d2      	uxtb	r2, r2
 8017710:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 8017712:	693b      	ldr	r3, [r7, #16]
 8017714:	b2da      	uxtb	r2, r3
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801771c:	3303      	adds	r3, #3
 801771e:	3a04      	subs	r2, #4
 8017720:	b2d2      	uxtb	r2, r2
 8017722:	701a      	strb	r2, [r3, #0]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d008      	beq.n	801773c <mbedtls_ssl_write_record+0xac>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801772e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017730:	687a      	ldr	r2, [r7, #4]
 8017732:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 8017736:	693a      	ldr	r2, [r7, #16]
 8017738:	6878      	ldr	r0, [r7, #4]
 801773a:	4798      	blx	r3

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
 801773c:	697b      	ldr	r3, [r7, #20]
 801773e:	2b00      	cmp	r3, #0
 8017740:	f040 809c 	bne.w	801787c <mbedtls_ssl_write_record+0x1ec>
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017750:	b2d2      	uxtb	r2, r2
 8017752:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	6898      	ldr	r0, [r3, #8]
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	68d9      	ldr	r1, [r3, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017764:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017768:	b2db      	uxtb	r3, r3
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 801776a:	461a      	mov	r2, r3
                           ssl->conf->transport, ssl->out_hdr + 1 );
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8017772:	3301      	adds	r3, #1
 8017774:	f002 fa72 	bl	8019c5c <mbedtls_ssl_write_version>

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 8017778:	693b      	ldr	r3, [r7, #16]
 801777a:	0a1a      	lsrs	r2, r3, #8
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017782:	b2d2      	uxtb	r2, r2
 8017784:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801778c:	3301      	adds	r3, #1
 801778e:	693a      	ldr	r2, [r7, #16]
 8017790:	b2d2      	uxtb	r2, r2
 8017792:	701a      	strb	r2, [r3, #0]

        if( ssl->transform_out != NULL )
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017798:	2b00      	cmp	r3, #0
 801779a:	d025      	beq.n	80177e8 <mbedtls_ssl_write_record+0x158>
        {
            if( ( ret = ssl_encrypt_buf( ssl ) ) != 0 )
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f7fe fe71 	bl	8016484 <ssl_encrypt_buf>
 80177a2:	60b8      	str	r0, [r7, #8]
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d00c      	beq.n	80177c4 <mbedtls_ssl_write_record+0x134>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	9301      	str	r3, [sp, #4]
 80177ae:	4b48      	ldr	r3, [pc, #288]	; (80178d0 <mbedtls_ssl_write_record+0x240>)
 80177b0:	9300      	str	r3, [sp, #0]
 80177b2:	f640 3337 	movw	r3, #2871	; 0xb37
 80177b6:	4a43      	ldr	r2, [pc, #268]	; (80178c4 <mbedtls_ssl_write_record+0x234>)
 80177b8:	2101      	movs	r1, #1
 80177ba:	6878      	ldr	r0, [r7, #4]
 80177bc:	f7f4 fb24 	bl	800be08 <mbedtls_debug_print_ret>
                return( ret );
 80177c0:	68bb      	ldr	r3, [r7, #8]
 80177c2:	e079      	b.n	80178b8 <mbedtls_ssl_write_record+0x228>
            }

            len = ssl->out_msglen;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80177ca:	613b      	str	r3, [r7, #16]
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 80177cc:	693b      	ldr	r3, [r7, #16]
 80177ce:	0a1a      	lsrs	r2, r3, #8
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80177d6:	b2d2      	uxtb	r2, r2
 80177d8:	701a      	strb	r2, [r3, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80177e0:	3301      	adds	r3, #1
 80177e2:	693a      	ldr	r2, [r7, #16]
 80177e4:	b2d2      	uxtb	r2, r2
 80177e6:	701a      	strb	r2, [r3, #0]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 80177e8:	6878      	ldr	r0, [r7, #4]
 80177ea:	f7fd ffc2 	bl	8015772 <mbedtls_ssl_hdr_len>
 80177ee:	4602      	mov	r2, r0
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80177f6:	441a      	add	r2, r3
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017804:	781b      	ldrb	r3, [r3, #0]
 8017806:	4619      	mov	r1, r3
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801780e:	3301      	adds	r3, #1
 8017810:	781b      	ldrb	r3, [r3, #0]
 8017812:	4618      	mov	r0, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801781a:	3302      	adds	r3, #2
 801781c:	781b      	ldrb	r3, [r3, #0]
 801781e:	461c      	mov	r4, r3
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	021b      	lsls	r3, r3, #8
 801782a:	687a      	ldr	r2, [r7, #4]
 801782c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8017830:	3201      	adds	r2, #1
 8017832:	7812      	ldrb	r2, [r2, #0]
 8017834:	4313      	orrs	r3, r2
 8017836:	9304      	str	r3, [sp, #16]
 8017838:	9403      	str	r4, [sp, #12]
 801783a:	9002      	str	r0, [sp, #8]
 801783c:	9101      	str	r1, [sp, #4]
 801783e:	4b25      	ldr	r3, [pc, #148]	; (80178d4 <mbedtls_ssl_write_record+0x244>)
 8017840:	9300      	str	r3, [sp, #0]
 8017842:	f640 3342 	movw	r3, #2882	; 0xb42
 8017846:	4a1f      	ldr	r2, [pc, #124]	; (80178c4 <mbedtls_ssl_write_record+0x234>)
 8017848:	2103      	movs	r1, #3
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	f7f4 fa56 	bl	800bcfc <mbedtls_debug_print_msg>
                            "version = [%d:%d], msglen = %d",
                       ssl->out_hdr[0], ssl->out_hdr[1], ssl->out_hdr[2],
                     ( ssl->out_len[0] << 8 ) | ssl->out_len[1] ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8017856:	6878      	ldr	r0, [r7, #4]
 8017858:	f7fd ff8b 	bl	8015772 <mbedtls_ssl_hdr_len>
 801785c:	4602      	mov	r2, r0
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017864:	4413      	add	r3, r2
 8017866:	9302      	str	r3, [sp, #8]
 8017868:	9401      	str	r4, [sp, #4]
 801786a:	4b1b      	ldr	r3, [pc, #108]	; (80178d8 <mbedtls_ssl_write_record+0x248>)
 801786c:	9300      	str	r3, [sp, #0]
 801786e:	f640 3347 	movw	r3, #2887	; 0xb47
 8017872:	4a14      	ldr	r2, [pc, #80]	; (80178c4 <mbedtls_ssl_write_record+0x234>)
 8017874:	2104      	movs	r1, #4
 8017876:	6878      	ldr	r0, [r7, #4]
 8017878:	f7f4 fb32 	bl	800bee0 <mbedtls_debug_print_buf>
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801787c:	6878      	ldr	r0, [r7, #4]
 801787e:	f7ff fe3f 	bl	8017500 <mbedtls_ssl_flush_output>
 8017882:	60b8      	str	r0, [r7, #8]
 8017884:	68bb      	ldr	r3, [r7, #8]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d00c      	beq.n	80178a4 <mbedtls_ssl_write_record+0x214>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801788a:	68bb      	ldr	r3, [r7, #8]
 801788c:	9301      	str	r3, [sp, #4]
 801788e:	4b13      	ldr	r3, [pc, #76]	; (80178dc <mbedtls_ssl_write_record+0x24c>)
 8017890:	9300      	str	r3, [sp, #0]
 8017892:	f640 334d 	movw	r3, #2893	; 0xb4d
 8017896:	4a0b      	ldr	r2, [pc, #44]	; (80178c4 <mbedtls_ssl_write_record+0x234>)
 8017898:	2101      	movs	r1, #1
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f7f4 fab4 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	e009      	b.n	80178b8 <mbedtls_ssl_write_record+0x228>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 80178a4:	4b0e      	ldr	r3, [pc, #56]	; (80178e0 <mbedtls_ssl_write_record+0x250>)
 80178a6:	9300      	str	r3, [sp, #0]
 80178a8:	f640 3351 	movw	r3, #2897	; 0xb51
 80178ac:	4a05      	ldr	r2, [pc, #20]	; (80178c4 <mbedtls_ssl_write_record+0x234>)
 80178ae:	2102      	movs	r1, #2
 80178b0:	6878      	ldr	r0, [r7, #4]
 80178b2:	f7f4 fa23 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 80178b6:	2300      	movs	r3, #0
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	371c      	adds	r7, #28
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd90      	pop	{r4, r7, pc}
 80178c0:	08023b58 	.word	0x08023b58
 80178c4:	080234fc 	.word	0x080234fc
 80178c8:	080235a0 	.word	0x080235a0
 80178cc:	ffff9400 	.word	0xffff9400
 80178d0:	08023b68 	.word	0x08023b68
 80178d4:	08023b78 	.word	0x08023b78
 80178d8:	08023bb4 	.word	0x08023bb4
 80178dc:	08023bd4 	.word	0x08023bd4
 80178e0:	08023bf0 	.word	0x08023bf0

080178e4 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 80178e4:	b590      	push	{r4, r7, lr}
 80178e6:	b087      	sub	sp, #28
 80178e8:	af04      	add	r7, sp, #16
 80178ea:	6078      	str	r0, [r7, #4]
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f7fd ff49 	bl	8015788 <mbedtls_ssl_hs_hdr_len>
 80178f6:	4603      	mov	r3, r0
 80178f8:	429c      	cmp	r4, r3
 80178fa:	d20d      	bcs.n	8017918 <mbedtls_ssl_prepare_handshake_record+0x34>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017900:	9301      	str	r3, [sp, #4]
 8017902:	4b26      	ldr	r3, [pc, #152]	; (801799c <mbedtls_ssl_prepare_handshake_record+0xb8>)
 8017904:	9300      	str	r3, [sp, #0]
 8017906:	f640 4334 	movw	r3, #3124	; 0xc34
 801790a:	4a25      	ldr	r2, [pc, #148]	; (80179a0 <mbedtls_ssl_prepare_handshake_record+0xbc>)
 801790c:	2101      	movs	r1, #1
 801790e:	6878      	ldr	r0, [r7, #4]
 8017910:	f7f4 f9f4 	bl	800bcfc <mbedtls_debug_print_msg>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017914:	4b23      	ldr	r3, [pc, #140]	; (80179a4 <mbedtls_ssl_prepare_handshake_record+0xc0>)
 8017916:	e03c      	b.n	8017992 <mbedtls_ssl_prepare_handshake_record+0xae>
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 8017918:	6878      	ldr	r0, [r7, #4]
 801791a:	f7fd ff35 	bl	8015788 <mbedtls_ssl_hs_hdr_len>
 801791e:	4601      	mov	r1, r0
                    ( ssl->in_msg[1] << 16 ) |
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017924:	3301      	adds	r3, #1
 8017926:	781b      	ldrb	r3, [r3, #0]
 8017928:	041a      	lsls	r2, r3, #16
                    ( ssl->in_msg[2] << 8  ) |
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801792e:	3302      	adds	r3, #2
 8017930:	781b      	ldrb	r3, [r3, #0]
 8017932:	021b      	lsls	r3, r3, #8
                    ( ssl->in_msg[1] << 16 ) |
 8017934:	4313      	orrs	r3, r2
                      ssl->in_msg[3] );
 8017936:	687a      	ldr	r2, [r7, #4]
 8017938:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801793a:	3203      	adds	r2, #3
 801793c:	7812      	ldrb	r2, [r2, #0]
                    ( ssl->in_msg[2] << 8  ) |
 801793e:	4313      	orrs	r3, r2
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 8017940:	18ca      	adds	r2, r1, r3
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	679a      	str	r2, [r3, #120]	; 0x78

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801794a:	687a      	ldr	r2, [r7, #4]
 801794c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801794e:	7812      	ldrb	r2, [r2, #0]
 8017950:	4611      	mov	r1, r2
 8017952:	687a      	ldr	r2, [r7, #4]
 8017954:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017956:	9203      	str	r2, [sp, #12]
 8017958:	9102      	str	r1, [sp, #8]
 801795a:	9301      	str	r3, [sp, #4]
 801795c:	4b12      	ldr	r3, [pc, #72]	; (80179a8 <mbedtls_ssl_prepare_handshake_record+0xc4>)
 801795e:	9300      	str	r3, [sp, #0]
 8017960:	f640 433e 	movw	r3, #3134	; 0xc3e
 8017964:	4a0e      	ldr	r2, [pc, #56]	; (80179a0 <mbedtls_ssl_prepare_handshake_record+0xbc>)
 8017966:	2103      	movs	r1, #3
 8017968:	6878      	ldr	r0, [r7, #4]
 801796a:	f7f4 f9c7 	bl	800bcfc <mbedtls_debug_print_msg>
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    /* With TLS we don't handle fragmentation (for now) */
    if( ssl->in_msglen < ssl->in_hslen )
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017976:	429a      	cmp	r2, r3
 8017978:	d20a      	bcs.n	8017990 <mbedtls_ssl_prepare_handshake_record+0xac>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 801797a:	4b0c      	ldr	r3, [pc, #48]	; (80179ac <mbedtls_ssl_prepare_handshake_record+0xc8>)
 801797c:	9300      	str	r3, [sp, #0]
 801797e:	f640 437e 	movw	r3, #3198	; 0xc7e
 8017982:	4a07      	ldr	r2, [pc, #28]	; (80179a0 <mbedtls_ssl_prepare_handshake_record+0xbc>)
 8017984:	2101      	movs	r1, #1
 8017986:	6878      	ldr	r0, [r7, #4]
 8017988:	f7f4 f9b8 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 801798c:	4b08      	ldr	r3, [pc, #32]	; (80179b0 <mbedtls_ssl_prepare_handshake_record+0xcc>)
 801798e:	e000      	b.n	8017992 <mbedtls_ssl_prepare_handshake_record+0xae>
    }

    return( 0 );
 8017990:	2300      	movs	r3, #0
}
 8017992:	4618      	mov	r0, r3
 8017994:	370c      	adds	r7, #12
 8017996:	46bd      	mov	sp, r7
 8017998:	bd90      	pop	{r4, r7, pc}
 801799a:	bf00      	nop
 801799c:	08023c00 	.word	0x08023c00
 80179a0:	080234fc 	.word	0x080234fc
 80179a4:	ffff8e00 	.word	0xffff8e00
 80179a8:	08023c20 	.word	0x08023c20
 80179ac:	08023c58 	.word	0x08023c58
 80179b0:	ffff8f80 	.word	0xffff8f80

080179b4 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b082      	sub	sp, #8
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	685b      	ldr	r3, [r3, #4]
 80179c0:	2b10      	cmp	r3, #16
 80179c2:	d00c      	beq.n	80179de <mbedtls_ssl_update_handshake_status+0x2a>
        ssl->handshake != NULL )
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d008      	beq.n	80179de <mbedtls_ssl_update_handshake_status+0x2a>
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80179d2:	687a      	ldr	r2, [r7, #4]
 80179d4:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80179d6:	687a      	ldr	r2, [r7, #4]
 80179d8:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80179da:	6878      	ldr	r0, [r7, #4]
 80179dc:	4798      	blx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 80179de:	bf00      	nop
 80179e0:	3708      	adds	r7, #8
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}
	...

080179e8 <ssl_parse_record_header>:
 * 4. drop the whole datagram if this function returns anything else.
 * Point 2 is needed when the peer is resending, and we have already received
 * the first record from a datagram but are still waiting for the others.
 */
static int ssl_parse_record_header( mbedtls_ssl_context *ssl )
{
 80179e8:	b590      	push	{r4, r7, lr}
 80179ea:	b08b      	sub	sp, #44	; 0x2c
 80179ec:	af06      	add	r7, sp, #24
 80179ee:	6078      	str	r0, [r7, #4]
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80179f4:	6878      	ldr	r0, [r7, #4]
 80179f6:	f7fd febc 	bl	8015772 <mbedtls_ssl_hdr_len>
 80179fa:	4603      	mov	r3, r0
 80179fc:	9302      	str	r3, [sp, #8]
 80179fe:	9401      	str	r4, [sp, #4]
 8017a00:	4b6f      	ldr	r3, [pc, #444]	; (8017bc0 <ssl_parse_record_header+0x1d8>)
 8017a02:	9300      	str	r3, [sp, #0]
 8017a04:	f640 53c5 	movw	r3, #3525	; 0xdc5
 8017a08:	4a6e      	ldr	r2, [pc, #440]	; (8017bc4 <ssl_parse_record_header+0x1dc>)
 8017a0a:	2104      	movs	r1, #4
 8017a0c:	6878      	ldr	r0, [r7, #4]
 8017a0e:	f7f4 fa67 	bl	800bee0 <mbedtls_debug_print_buf>

    ssl->in_msgtype =  ssl->in_hdr[0];
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a16:	781b      	ldrb	r3, [r3, #0]
 8017a18:	461a      	mov	r2, r3
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	66da      	str	r2, [r3, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017a22:	781b      	ldrb	r3, [r3, #0]
 8017a24:	021b      	lsls	r3, r3, #8
 8017a26:	687a      	ldr	r2, [r7, #4]
 8017a28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8017a2a:	3201      	adds	r2, #1
 8017a2c:	7812      	ldrb	r2, [r2, #0]
 8017a2e:	4313      	orrs	r3, r2
 8017a30:	461a      	mov	r2, r3
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	671a      	str	r2, [r3, #112]	; 0x70
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017a3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	461a      	mov	r2, r3
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a4a:	3301      	adds	r3, #1
 8017a4c:	f107 0108 	add.w	r1, r7, #8
 8017a50:	f107 000c 	add.w	r0, r7, #12
 8017a54:	f002 f918 	bl	8019c88 <mbedtls_ssl_read_version>

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a5c:	68fa      	ldr	r2, [r7, #12]
 8017a5e:	68b9      	ldr	r1, [r7, #8]
 8017a60:	6878      	ldr	r0, [r7, #4]
 8017a62:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8017a64:	9004      	str	r0, [sp, #16]
 8017a66:	9103      	str	r1, [sp, #12]
 8017a68:	9202      	str	r2, [sp, #8]
 8017a6a:	9301      	str	r3, [sp, #4]
 8017a6c:	4b56      	ldr	r3, [pc, #344]	; (8017bc8 <ssl_parse_record_header+0x1e0>)
 8017a6e:	9300      	str	r3, [sp, #0]
 8017a70:	f640 53cb 	movw	r3, #3531	; 0xdcb
 8017a74:	4a53      	ldr	r2, [pc, #332]	; (8017bc4 <ssl_parse_record_header+0x1dc>)
 8017a76:	2103      	movs	r1, #3
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	f7f4 f93f 	bl	800bcfc <mbedtls_debug_print_msg>
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a82:	2b16      	cmp	r3, #22
 8017a84:	d01b      	beq.n	8017abe <ssl_parse_record_header+0xd6>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8017a8a:	2b15      	cmp	r3, #21
 8017a8c:	d017      	beq.n	8017abe <ssl_parse_record_header+0xd6>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&
 8017a92:	2b14      	cmp	r3, #20
 8017a94:	d013      	beq.n	8017abe <ssl_parse_record_header+0xd6>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 8017a9a:	2b17      	cmp	r3, #23
 8017a9c:	d00f      	beq.n	8017abe <ssl_parse_record_header+0xd6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 8017a9e:	4b4b      	ldr	r3, [pc, #300]	; (8017bcc <ssl_parse_record_header+0x1e4>)
 8017aa0:	9300      	str	r3, [sp, #0]
 8017aa2:	f640 53d6 	movw	r3, #3542	; 0xdd6
 8017aa6:	4a47      	ldr	r2, [pc, #284]	; (8017bc4 <ssl_parse_record_header+0x1dc>)
 8017aa8:	2101      	movs	r1, #1
 8017aaa:	6878      	ldr	r0, [r7, #4]
 8017aac:	f7f4 f926 	bl	800bcfc <mbedtls_debug_print_msg>
#if defined(MBEDTLS_SSL_PROTO_DTLS)
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017ab0:	220a      	movs	r2, #10
 8017ab2:	2102      	movs	r1, #2
 8017ab4:	6878      	ldr	r0, [r7, #4]
 8017ab6:	f000 fa95 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017aba:	4b45      	ldr	r3, [pc, #276]	; (8017bd0 <ssl_parse_record_header+0x1e8>)
 8017abc:	e07c      	b.n	8017bb8 <ssl_parse_record_header+0x1d0>
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	689a      	ldr	r2, [r3, #8]
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	429a      	cmp	r2, r3
 8017ac6:	d00a      	beq.n	8017ade <ssl_parse_record_header+0xf6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 8017ac8:	4b42      	ldr	r3, [pc, #264]	; (8017bd4 <ssl_parse_record_header+0x1ec>)
 8017aca:	9300      	str	r3, [sp, #0]
 8017acc:	f640 53e6 	movw	r3, #3558	; 0xde6
 8017ad0:	4a3c      	ldr	r2, [pc, #240]	; (8017bc4 <ssl_parse_record_header+0x1dc>)
 8017ad2:	2101      	movs	r1, #1
 8017ad4:	6878      	ldr	r0, [r7, #4]
 8017ad6:	f7f4 f911 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017ada:	4b3d      	ldr	r3, [pc, #244]	; (8017bd0 <ssl_parse_record_header+0x1e8>)
 8017adc:	e06c      	b.n	8017bb8 <ssl_parse_record_header+0x1d0>
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8017ae6:	461a      	mov	r2, r3
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	429a      	cmp	r2, r3
 8017aec:	da0a      	bge.n	8017b04 <ssl_parse_record_header+0x11c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 8017aee:	4b3a      	ldr	r3, [pc, #232]	; (8017bd8 <ssl_parse_record_header+0x1f0>)
 8017af0:	9300      	str	r3, [sp, #0]
 8017af2:	f640 53ec 	movw	r3, #3564	; 0xdec
 8017af6:	4a33      	ldr	r2, [pc, #204]	; (8017bc4 <ssl_parse_record_header+0x1dc>)
 8017af8:	2101      	movs	r1, #1
 8017afa:	6878      	ldr	r0, [r7, #4]
 8017afc:	f7f4 f8fe 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017b00:	4b33      	ldr	r3, [pc, #204]	; (8017bd0 <ssl_parse_record_header+0x1e8>)
 8017b02:	e059      	b.n	8017bb8 <ssl_parse_record_header+0x1d0>
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b10:	1acb      	subs	r3, r1, r3
 8017b12:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 8017b16:	331d      	adds	r3, #29
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d90a      	bls.n	8017b32 <ssl_parse_record_header+0x14a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8017b1c:	4b2f      	ldr	r3, [pc, #188]	; (8017bdc <ssl_parse_record_header+0x1f4>)
 8017b1e:	9300      	str	r3, [sp, #0]
 8017b20:	f640 53f4 	movw	r3, #3572	; 0xdf4
 8017b24:	4a27      	ldr	r2, [pc, #156]	; (8017bc4 <ssl_parse_record_header+0x1dc>)
 8017b26:	2101      	movs	r1, #1
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f7f4 f8e7 	bl	800bcfc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017b2e:	4b28      	ldr	r3, [pc, #160]	; (8017bd0 <ssl_parse_record_header+0x1e8>)
 8017b30:	e042      	b.n	8017bb8 <ssl_parse_record_header+0x1d0>
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d113      	bne.n	8017b62 <ssl_parse_record_header+0x17a>
    {
        if( ssl->in_msglen < 1 ||
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d004      	beq.n	8017b4c <ssl_parse_record_header+0x164>
            ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if( ssl->in_msglen < 1 ||
 8017b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017b4a:	d934      	bls.n	8017bb6 <ssl_parse_record_header+0x1ce>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8017b4c:	4b23      	ldr	r3, [pc, #140]	; (8017bdc <ssl_parse_record_header+0x1f4>)
 8017b4e:	9300      	str	r3, [sp, #0]
 8017b50:	f640 53fe 	movw	r3, #3582	; 0xdfe
 8017b54:	4a1b      	ldr	r2, [pc, #108]	; (8017bc4 <ssl_parse_record_header+0x1dc>)
 8017b56:	2101      	movs	r1, #1
 8017b58:	6878      	ldr	r0, [r7, #4]
 8017b5a:	f7f4 f8cf 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017b5e:	4b1c      	ldr	r3, [pc, #112]	; (8017bd0 <ssl_parse_record_header+0x1e8>)
 8017b60:	e02a      	b.n	8017bb8 <ssl_parse_record_header+0x1d0>
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b6a:	689b      	ldr	r3, [r3, #8]
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	d20a      	bcs.n	8017b86 <ssl_parse_record_header+0x19e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8017b70:	4b1a      	ldr	r3, [pc, #104]	; (8017bdc <ssl_parse_record_header+0x1f4>)
 8017b72:	9300      	str	r3, [sp, #0]
 8017b74:	f640 6306 	movw	r3, #3590	; 0xe06
 8017b78:	4a12      	ldr	r2, [pc, #72]	; (8017bc4 <ssl_parse_record_header+0x1dc>)
 8017b7a:	2101      	movs	r1, #1
 8017b7c:	6878      	ldr	r0, [r7, #4]
 8017b7e:	f7f4 f8bd 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017b82:	4b13      	ldr	r3, [pc, #76]	; (8017bd0 <ssl_parse_record_header+0x1e8>)
 8017b84:	e018      	b.n	8017bb8 <ssl_parse_record_header+0x1d0>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	68db      	ldr	r3, [r3, #12]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	dd13      	ble.n	8017bb6 <ssl_parse_record_header+0x1ce>
            ssl->in_msglen > ssl->transform_in->minlen +
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b96:	689b      	ldr	r3, [r3, #8]
                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
 8017b98:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	d90a      	bls.n	8017bb6 <ssl_parse_record_header+0x1ce>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8017ba0:	4b0e      	ldr	r3, [pc, #56]	; (8017bdc <ssl_parse_record_header+0x1f4>)
 8017ba2:	9300      	str	r3, [sp, #0]
 8017ba4:	f640 631b 	movw	r3, #3611	; 0xe1b
 8017ba8:	4a06      	ldr	r2, [pc, #24]	; (8017bc4 <ssl_parse_record_header+0x1dc>)
 8017baa:	2101      	movs	r1, #1
 8017bac:	6878      	ldr	r0, [r7, #4]
 8017bae:	f7f4 f8a5 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017bb2:	4b07      	ldr	r3, [pc, #28]	; (8017bd0 <ssl_parse_record_header+0x1e8>)
 8017bb4:	e000      	b.n	8017bb8 <ssl_parse_record_header+0x1d0>
        }
#endif
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    return( 0 );
 8017bb6:	2300      	movs	r3, #0
}
 8017bb8:	4618      	mov	r0, r3
 8017bba:	3714      	adds	r7, #20
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd90      	pop	{r4, r7, pc}
 8017bc0:	08023c84 	.word	0x08023c84
 8017bc4:	080234fc 	.word	0x080234fc
 8017bc8:	08023c98 	.word	0x08023c98
 8017bcc:	08023cd4 	.word	0x08023cd4
 8017bd0:	ffff8e00 	.word	0xffff8e00
 8017bd4:	08023ce8 	.word	0x08023ce8
 8017bd8:	08023d00 	.word	0x08023d00
 8017bdc:	08023d18 	.word	0x08023d18

08017be0 <ssl_prepare_record_content>:

/*
 * If applicable, decrypt (and decompress) record content
 */
static int ssl_prepare_record_content( mbedtls_ssl_context *ssl )
{
 8017be0:	b590      	push	{r4, r7, lr}
 8017be2:	b089      	sub	sp, #36	; 0x24
 8017be4:	af04      	add	r7, sp, #16
 8017be6:	6078      	str	r0, [r7, #4]
    int ret, done = 0;
 8017be8:	2300      	movs	r3, #0
 8017bea:	60fb      	str	r3, [r7, #12]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f7fd fdbe 	bl	8015772 <mbedtls_ssl_hdr_len>
 8017bf6:	4602      	mov	r2, r0
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017bfc:	4413      	add	r3, r2
 8017bfe:	9302      	str	r3, [sp, #8]
 8017c00:	9401      	str	r4, [sp, #4]
 8017c02:	4b24      	ldr	r3, [pc, #144]	; (8017c94 <ssl_prepare_record_content+0xb4>)
 8017c04:	9300      	str	r3, [sp, #0]
 8017c06:	f640 6377 	movw	r3, #3703	; 0xe77
 8017c0a:	4a23      	ldr	r2, [pc, #140]	; (8017c98 <ssl_prepare_record_content+0xb8>)
 8017c0c:	2104      	movs	r1, #4
 8017c0e:	6878      	ldr	r0, [r7, #4]
 8017c10:	f7f4 f966 	bl	800bee0 <mbedtls_debug_print_buf>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d136      	bne.n	8017c88 <ssl_prepare_record_content+0xa8>
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d032      	beq.n	8017c88 <ssl_prepare_record_content+0xa8>
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 8017c22:	6878      	ldr	r0, [r7, #4]
 8017c24:	f7fe ff3c 	bl	8016aa0 <ssl_decrypt_buf>
 8017c28:	60b8      	str	r0, [r7, #8]
 8017c2a:	68bb      	ldr	r3, [r7, #8]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d00c      	beq.n	8017c4a <ssl_prepare_record_content+0x6a>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	9301      	str	r3, [sp, #4]
 8017c34:	4b19      	ldr	r3, [pc, #100]	; (8017c9c <ssl_prepare_record_content+0xbc>)
 8017c36:	9300      	str	r3, [sp, #0]
 8017c38:	f640 638e 	movw	r3, #3726	; 0xe8e
 8017c3c:	4a16      	ldr	r2, [pc, #88]	; (8017c98 <ssl_prepare_record_content+0xb8>)
 8017c3e:	2101      	movs	r1, #1
 8017c40:	6878      	ldr	r0, [r7, #4]
 8017c42:	f7f4 f8e1 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8017c46:	68bb      	ldr	r3, [r7, #8]
 8017c48:	e01f      	b.n	8017c8a <ssl_prepare_record_content+0xaa>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017c4e:	687a      	ldr	r2, [r7, #4]
 8017c50:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8017c52:	9202      	str	r2, [sp, #8]
 8017c54:	9301      	str	r3, [sp, #4]
 8017c56:	4b12      	ldr	r3, [pc, #72]	; (8017ca0 <ssl_prepare_record_content+0xc0>)
 8017c58:	9300      	str	r3, [sp, #0]
 8017c5a:	f640 6392 	movw	r3, #3730	; 0xe92
 8017c5e:	4a0e      	ldr	r2, [pc, #56]	; (8017c98 <ssl_prepare_record_content+0xb8>)
 8017c60:	2104      	movs	r1, #4
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7f4 f93c 	bl	800bee0 <mbedtls_debug_print_buf>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017c70:	d90a      	bls.n	8017c88 <ssl_prepare_record_content+0xa8>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8017c72:	4b0c      	ldr	r3, [pc, #48]	; (8017ca4 <ssl_prepare_record_content+0xc4>)
 8017c74:	9300      	str	r3, [sp, #0]
 8017c76:	f640 6397 	movw	r3, #3735	; 0xe97
 8017c7a:	4a07      	ldr	r2, [pc, #28]	; (8017c98 <ssl_prepare_record_content+0xb8>)
 8017c7c:	2101      	movs	r1, #1
 8017c7e:	6878      	ldr	r0, [r7, #4]
 8017c80:	f7f4 f83c 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017c84:	4b08      	ldr	r3, [pc, #32]	; (8017ca8 <ssl_prepare_record_content+0xc8>)
 8017c86:	e000      	b.n	8017c8a <ssl_prepare_record_content+0xaa>
    {
        mbedtls_ssl_dtls_replay_update( ssl );
    }
#endif

    return( 0 );
 8017c88:	2300      	movs	r3, #0
}
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	3714      	adds	r7, #20
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd90      	pop	{r4, r7, pc}
 8017c92:	bf00      	nop
 8017c94:	08023d2c 	.word	0x08023d2c
 8017c98:	080234fc 	.word	0x080234fc
 8017c9c:	08023d48 	.word	0x08023d48
 8017ca0:	08023d58 	.word	0x08023d58
 8017ca4:	08023d18 	.word	0x08023d18
 8017ca8:	ffff8e00 	.word	0xffff8e00

08017cac <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b086      	sub	sp, #24
 8017cb0:	af02      	add	r7, sp, #8
 8017cb2:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 8017cb4:	4b2e      	ldr	r3, [pc, #184]	; (8017d70 <mbedtls_ssl_read_record+0xc4>)
 8017cb6:	9300      	str	r3, [sp, #0]
 8017cb8:	f640 63bf 	movw	r3, #3775	; 0xebf
 8017cbc:	4a2d      	ldr	r2, [pc, #180]	; (8017d74 <mbedtls_ssl_read_record+0xc8>)
 8017cbe:	2102      	movs	r1, #2
 8017cc0:	6878      	ldr	r0, [r7, #4]
 8017cc2:	f7f4 f81b 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ssl->keep_current_message == 0 )
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d133      	bne.n	8017d38 <mbedtls_ssl_read_record+0x8c>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	f000 f857 	bl	8017d84 <mbedtls_ssl_read_record_layer>
 8017cd6:	60f8      	str	r0, [r7, #12]
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d00c      	beq.n	8017cf8 <mbedtls_ssl_read_record+0x4c>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	9301      	str	r3, [sp, #4]
 8017ce2:	4b25      	ldr	r3, [pc, #148]	; (8017d78 <mbedtls_ssl_read_record+0xcc>)
 8017ce4:	9300      	str	r3, [sp, #0]
 8017ce6:	f640 63c7 	movw	r3, #3783	; 0xec7
 8017cea:	4a22      	ldr	r2, [pc, #136]	; (8017d74 <mbedtls_ssl_read_record+0xc8>)
 8017cec:	2101      	movs	r1, #1
 8017cee:	6878      	ldr	r0, [r7, #4]
 8017cf0:	f7f4 f88a 	bl	800be08 <mbedtls_debug_print_ret>
                return( ret );
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	e036      	b.n	8017d66 <mbedtls_ssl_read_record+0xba>
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	f000 f8f3 	bl	8017ee4 <mbedtls_ssl_handle_message_type>
 8017cfe:	60f8      	str	r0, [r7, #12]

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	f513 4fcd 	cmn.w	r3, #26240	; 0x6680
 8017d06:	d0e3      	beq.n	8017cd0 <mbedtls_ssl_read_record+0x24>

        if( 0 != ret )
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d00c      	beq.n	8017d28 <mbedtls_ssl_read_record+0x7c>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	9301      	str	r3, [sp, #4]
 8017d12:	4b19      	ldr	r3, [pc, #100]	; (8017d78 <mbedtls_ssl_read_record+0xcc>)
 8017d14:	9300      	str	r3, [sp, #0]
 8017d16:	f640 63d1 	movw	r3, #3793	; 0xed1
 8017d1a:	4a16      	ldr	r2, [pc, #88]	; (8017d74 <mbedtls_ssl_read_record+0xc8>)
 8017d1c:	2101      	movs	r1, #1
 8017d1e:	6878      	ldr	r0, [r7, #4]
 8017d20:	f7f4 f872 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	e01e      	b.n	8017d66 <mbedtls_ssl_read_record+0xba>
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d2c:	2b16      	cmp	r3, #22
 8017d2e:	d110      	bne.n	8017d52 <mbedtls_ssl_read_record+0xa6>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 8017d30:	6878      	ldr	r0, [r7, #4]
 8017d32:	f7ff fe3f 	bl	80179b4 <mbedtls_ssl_update_handshake_status>
 8017d36:	e00c      	b.n	8017d52 <mbedtls_ssl_read_record+0xa6>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
 8017d38:	4b10      	ldr	r3, [pc, #64]	; (8017d7c <mbedtls_ssl_read_record+0xd0>)
 8017d3a:	9300      	str	r3, [sp, #0]
 8017d3c:	f640 63dc 	movw	r3, #3804	; 0xedc
 8017d40:	4a0c      	ldr	r2, [pc, #48]	; (8017d74 <mbedtls_ssl_read_record+0xc8>)
 8017d42:	2102      	movs	r1, #2
 8017d44:	6878      	ldr	r0, [r7, #4]
 8017d46:	f7f3 ffd9 	bl	800bcfc <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 8017d52:	4b0b      	ldr	r3, [pc, #44]	; (8017d80 <mbedtls_ssl_read_record+0xd4>)
 8017d54:	9300      	str	r3, [sp, #0]
 8017d56:	f44f 636e 	mov.w	r3, #3808	; 0xee0
 8017d5a:	4a06      	ldr	r2, [pc, #24]	; (8017d74 <mbedtls_ssl_read_record+0xc8>)
 8017d5c:	2102      	movs	r1, #2
 8017d5e:	6878      	ldr	r0, [r7, #4]
 8017d60:	f7f3 ffcc 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 8017d64:	2300      	movs	r3, #0
}
 8017d66:	4618      	mov	r0, r3
 8017d68:	3710      	adds	r7, #16
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd80      	pop	{r7, pc}
 8017d6e:	bf00      	nop
 8017d70:	08023d74 	.word	0x08023d74
 8017d74:	080234fc 	.word	0x080234fc
 8017d78:	08023d84 	.word	0x08023d84
 8017d7c:	08023da4 	.word	0x08023da4
 8017d80:	08023dc8 	.word	0x08023dc8

08017d84 <mbedtls_ssl_read_record_layer>:

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b088      	sub	sp, #32
 8017d88:	af04      	add	r7, sp, #16
 8017d8a:	6078      	str	r0, [r7, #4]
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d03e      	beq.n	8017e12 <mbedtls_ssl_read_record_layer+0x8e>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d00a      	beq.n	8017db2 <mbedtls_ssl_read_record_layer+0x2e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8017d9c:	4b4c      	ldr	r3, [pc, #304]	; (8017ed0 <mbedtls_ssl_read_record_layer+0x14c>)
 8017d9e:	9300      	str	r3, [sp, #0]
 8017da0:	f640 730e 	movw	r3, #3854	; 0xf0e
 8017da4:	4a4b      	ldr	r2, [pc, #300]	; (8017ed4 <mbedtls_ssl_read_record_layer+0x150>)
 8017da6:	2101      	movs	r1, #1
 8017da8:	6878      	ldr	r0, [r7, #4]
 8017daa:	f7f3 ffa7 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8017dae:	4b4a      	ldr	r3, [pc, #296]	; (8017ed8 <mbedtls_ssl_read_record_layer+0x154>)
 8017db0:	e089      	b.n	8017ec6 <mbedtls_ssl_read_record_layer+0x142>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	d222      	bcs.n	8017e04 <mbedtls_ssl_read_record_layer+0x80>
        {
            ssl->in_msglen -= ssl->in_hslen;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017dc6:	1ad2      	subs	r2, r2, r3
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	671a      	str	r2, [r3, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017dd8:	18d1      	adds	r1, r2, r3
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017dde:	461a      	mov	r2, r3
 8017de0:	f006 fc06 	bl	801e5f0 <memmove>
                     ssl->in_msglen );

            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017de8:	687a      	ldr	r2, [r7, #4]
 8017dea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8017dec:	9202      	str	r2, [sp, #8]
 8017dee:	9301      	str	r3, [sp, #4]
 8017df0:	4b3a      	ldr	r3, [pc, #232]	; (8017edc <mbedtls_ssl_read_record_layer+0x158>)
 8017df2:	9300      	str	r3, [sp, #0]
 8017df4:	f640 732d 	movw	r3, #3885	; 0xf2d
 8017df8:	4a36      	ldr	r2, [pc, #216]	; (8017ed4 <mbedtls_ssl_read_record_layer+0x150>)
 8017dfa:	2104      	movs	r1, #4
 8017dfc:	6878      	ldr	r0, [r7, #4]
 8017dfe:	f7f4 f86f 	bl	800bee0 <mbedtls_debug_print_buf>
 8017e02:	e002      	b.n	8017e0a <mbedtls_ssl_read_record_layer+0x86>
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	2200      	movs	r2, #0
 8017e08:	671a      	str	r2, [r3, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	679a      	str	r2, [r3, #120]	; 0x78
 8017e10:	e008      	b.n	8017e24 <mbedtls_ssl_read_record_layer+0xa0>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d001      	beq.n	8017e1e <mbedtls_ssl_read_record_layer+0x9a>
    {
        return( 0 );
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	e053      	b.n	8017ec6 <mbedtls_ssl_read_record_layer+0x142>
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	2200      	movs	r2, #0
 8017e22:	671a      	str	r2, [r3, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d001      	beq.n	8017e30 <mbedtls_ssl_read_record_layer+0xac>
    {
        /* There's something left to be processed in the current record. */
        return( 0 );
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	e04a      	b.n	8017ec6 <mbedtls_ssl_read_record_layer+0x142>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 8017e30:	6878      	ldr	r0, [r7, #4]
 8017e32:	f7fd fc9e 	bl	8015772 <mbedtls_ssl_hdr_len>
 8017e36:	4603      	mov	r3, r0
 8017e38:	4619      	mov	r1, r3
 8017e3a:	6878      	ldr	r0, [r7, #4]
 8017e3c:	f7ff fa9c 	bl	8017378 <mbedtls_ssl_fetch_input>
 8017e40:	60f8      	str	r0, [r7, #12]
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d00c      	beq.n	8017e62 <mbedtls_ssl_read_record_layer+0xde>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	9301      	str	r3, [sp, #4]
 8017e4c:	4b24      	ldr	r3, [pc, #144]	; (8017ee0 <mbedtls_ssl_read_record_layer+0x15c>)
 8017e4e:	9300      	str	r3, [sp, #0]
 8017e50:	f640 7359 	movw	r3, #3929	; 0xf59
 8017e54:	4a1f      	ldr	r2, [pc, #124]	; (8017ed4 <mbedtls_ssl_read_record_layer+0x150>)
 8017e56:	2101      	movs	r1, #1
 8017e58:	6878      	ldr	r0, [r7, #4]
 8017e5a:	f7f3 ffd5 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	e031      	b.n	8017ec6 <mbedtls_ssl_read_record_layer+0x142>
    }

    if( ( ret = ssl_parse_record_header( ssl ) ) != 0 )
 8017e62:	6878      	ldr	r0, [r7, #4]
 8017e64:	f7ff fdc0 	bl	80179e8 <ssl_parse_record_header>
 8017e68:	60f8      	str	r0, [r7, #12]
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d001      	beq.n	8017e74 <mbedtls_ssl_read_record_layer+0xf0>

            /* Get next record */
            goto read_record_header;
        }
#endif
        return( ret );
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	e028      	b.n	8017ec6 <mbedtls_ssl_read_record_layer+0x142>

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
                                 mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen ) ) != 0 )
 8017e74:	6878      	ldr	r0, [r7, #4]
 8017e76:	f7fd fc7c 	bl	8015772 <mbedtls_ssl_hdr_len>
 8017e7a:	4602      	mov	r2, r0
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 8017e80:	4413      	add	r3, r2
 8017e82:	4619      	mov	r1, r3
 8017e84:	6878      	ldr	r0, [r7, #4]
 8017e86:	f7ff fa77 	bl	8017378 <mbedtls_ssl_fetch_input>
 8017e8a:	60f8      	str	r0, [r7, #12]
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d00c      	beq.n	8017eac <mbedtls_ssl_read_record_layer+0x128>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	9301      	str	r3, [sp, #4]
 8017e96:	4b12      	ldr	r3, [pc, #72]	; (8017ee0 <mbedtls_ssl_read_record_layer+0x15c>)
 8017e98:	9300      	str	r3, [sp, #0]
 8017e9a:	f640 7383 	movw	r3, #3971	; 0xf83
 8017e9e:	4a0d      	ldr	r2, [pc, #52]	; (8017ed4 <mbedtls_ssl_read_record_layer+0x150>)
 8017ea0:	2101      	movs	r1, #1
 8017ea2:	6878      	ldr	r0, [r7, #4]
 8017ea4:	f7f3 ffb0 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	e00c      	b.n	8017ec6 <mbedtls_ssl_read_record_layer+0x142>
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	2200      	movs	r2, #0
 8017eb0:	675a      	str	r2, [r3, #116]	; 0x74

    if( ( ret = ssl_prepare_record_content( ssl ) ) != 0 )
 8017eb2:	6878      	ldr	r0, [r7, #4]
 8017eb4:	f7ff fe94 	bl	8017be0 <ssl_prepare_record_content>
 8017eb8:	60f8      	str	r0, [r7, #12]
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d001      	beq.n	8017ec4 <mbedtls_ssl_read_record_layer+0x140>
                mbedtls_ssl_send_alert_message( ssl,
                        MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                        MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
            }
#endif
            return( ret );
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	e000      	b.n	8017ec6 <mbedtls_ssl_read_record_layer+0x142>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 8017ec4:	2300      	movs	r3, #0
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	3710      	adds	r7, #16
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}
 8017ece:	bf00      	nop
 8017ed0:	080235a0 	.word	0x080235a0
 8017ed4:	080234fc 	.word	0x080234fc
 8017ed8:	ffff9400 	.word	0xffff9400
 8017edc:	08023dd8 	.word	0x08023dd8
 8017ee0:	08023df4 	.word	0x08023df4

08017ee4 <mbedtls_ssl_handle_message_type>:

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b088      	sub	sp, #32
 8017ee8:	af04      	add	r7, sp, #16
 8017eea:	6078      	str	r0, [r7, #4]
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ef0:	2b16      	cmp	r3, #22
 8017ef2:	d108      	bne.n	8017f06 <mbedtls_ssl_handle_message_type+0x22>
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 8017ef4:	6878      	ldr	r0, [r7, #4]
 8017ef6:	f7ff fcf5 	bl	80178e4 <mbedtls_ssl_prepare_handshake_record>
 8017efa:	60f8      	str	r0, [r7, #12]
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d001      	beq.n	8017f06 <mbedtls_ssl_handle_message_type+0x22>
        {
            return( ret );
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	e05a      	b.n	8017fbc <mbedtls_ssl_handle_message_type+0xd8>
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f0a:	2b15      	cmp	r3, #21
 8017f0c:	d155      	bne.n	8017fba <mbedtls_ssl_handle_message_type+0xd6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f12:	781b      	ldrb	r3, [r3, #0]
 8017f14:	461a      	mov	r2, r3
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f1a:	3301      	adds	r3, #1
 8017f1c:	781b      	ldrb	r3, [r3, #0]
 8017f1e:	9302      	str	r3, [sp, #8]
 8017f20:	9201      	str	r2, [sp, #4]
 8017f22:	4b28      	ldr	r3, [pc, #160]	; (8017fc4 <mbedtls_ssl_handle_message_type+0xe0>)
 8017f24:	9300      	str	r3, [sp, #0]
 8017f26:	f241 030a 	movw	r3, #4106	; 0x100a
 8017f2a:	4a27      	ldr	r2, [pc, #156]	; (8017fc8 <mbedtls_ssl_handle_message_type+0xe4>)
 8017f2c:	2102      	movs	r1, #2
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f7f3 fee4 	bl	800bcfc <mbedtls_debug_print_msg>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f38:	781b      	ldrb	r3, [r3, #0]
 8017f3a:	2b02      	cmp	r3, #2
 8017f3c:	d10f      	bne.n	8017f5e <mbedtls_ssl_handle_message_type+0x7a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f42:	3301      	adds	r3, #1
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	9301      	str	r3, [sp, #4]
 8017f48:	4b20      	ldr	r3, [pc, #128]	; (8017fcc <mbedtls_ssl_handle_message_type+0xe8>)
 8017f4a:	9300      	str	r3, [sp, #0]
 8017f4c:	f241 0312 	movw	r3, #4114	; 0x1012
 8017f50:	4a1d      	ldr	r2, [pc, #116]	; (8017fc8 <mbedtls_ssl_handle_message_type+0xe4>)
 8017f52:	2101      	movs	r1, #1
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f7f3 fed1 	bl	800bcfc <mbedtls_debug_print_msg>
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 8017f5a:	4b1d      	ldr	r3, [pc, #116]	; (8017fd0 <mbedtls_ssl_handle_message_type+0xec>)
 8017f5c:	e02e      	b.n	8017fbc <mbedtls_ssl_handle_message_type+0xd8>
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f62:	781b      	ldrb	r3, [r3, #0]
 8017f64:	2b01      	cmp	r3, #1
 8017f66:	d110      	bne.n	8017f8a <mbedtls_ssl_handle_message_type+0xa6>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f6c:	3301      	adds	r3, #1
 8017f6e:	781b      	ldrb	r3, [r3, #0]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d10a      	bne.n	8017f8a <mbedtls_ssl_handle_message_type+0xa6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 8017f74:	4b17      	ldr	r3, [pc, #92]	; (8017fd4 <mbedtls_ssl_handle_message_type+0xf0>)
 8017f76:	9300      	str	r3, [sp, #0]
 8017f78:	f241 031a 	movw	r3, #4122	; 0x101a
 8017f7c:	4a12      	ldr	r2, [pc, #72]	; (8017fc8 <mbedtls_ssl_handle_message_type+0xe4>)
 8017f7e:	2102      	movs	r1, #2
 8017f80:	6878      	ldr	r0, [r7, #4]
 8017f82:	f7f3 febb 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 8017f86:	4b14      	ldr	r3, [pc, #80]	; (8017fd8 <mbedtls_ssl_handle_message_type+0xf4>)
 8017f88:	e018      	b.n	8017fbc <mbedtls_ssl_handle_message_type+0xd8>
        }

#if defined(MBEDTLS_SSL_RENEGOTIATION_ENABLED)
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f8e:	781b      	ldrb	r3, [r3, #0]
 8017f90:	2b01      	cmp	r3, #1
 8017f92:	d110      	bne.n	8017fb6 <mbedtls_ssl_handle_message_type+0xd2>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION )
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f98:	3301      	adds	r3, #1
 8017f9a:	781b      	ldrb	r3, [r3, #0]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8017f9c:	2b64      	cmp	r3, #100	; 0x64
 8017f9e:	d10a      	bne.n	8017fb6 <mbedtls_ssl_handle_message_type+0xd2>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
 8017fa0:	4b0e      	ldr	r3, [pc, #56]	; (8017fdc <mbedtls_ssl_handle_message_type+0xf8>)
 8017fa2:	9300      	str	r3, [sp, #0]
 8017fa4:	f241 0322 	movw	r3, #4130	; 0x1022
 8017fa8:	4a07      	ldr	r2, [pc, #28]	; (8017fc8 <mbedtls_ssl_handle_message_type+0xe4>)
 8017faa:	2102      	movs	r1, #2
 8017fac:	6878      	ldr	r0, [r7, #4]
 8017fae:	f7f3 fea5 	bl	800bcfc <mbedtls_debug_print_msg>
            /* Will be handled when trying to parse ServerHello */
            return( 0 );
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	e002      	b.n	8017fbc <mbedtls_ssl_handle_message_type+0xd8>
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8017fb6:	4b0a      	ldr	r3, [pc, #40]	; (8017fe0 <mbedtls_ssl_handle_message_type+0xfc>)
 8017fb8:	e000      	b.n	8017fbc <mbedtls_ssl_handle_message_type+0xd8>
    }

    return( 0 );
 8017fba:	2300      	movs	r3, #0
}
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	3710      	adds	r7, #16
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}
 8017fc4:	08023e0c 	.word	0x08023e0c
 8017fc8:	080234fc 	.word	0x080234fc
 8017fcc:	08023e30 	.word	0x08023e30
 8017fd0:	ffff8880 	.word	0xffff8880
 8017fd4:	08023e54 	.word	0x08023e54
 8017fd8:	ffff8780 	.word	0xffff8780
 8017fdc:	08023e70 	.word	0x08023e70
 8017fe0:	ffff9980 	.word	0xffff9980

08017fe4 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b088      	sub	sp, #32
 8017fe8:	af04      	add	r7, sp, #16
 8017fea:	6078      	str	r0, [r7, #4]
 8017fec:	460b      	mov	r3, r1
 8017fee:	70fb      	strb	r3, [r7, #3]
 8017ff0:	4613      	mov	r3, r2
 8017ff2:	70bb      	strb	r3, [r7, #2]
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d003      	beq.n	8018002 <mbedtls_ssl_send_alert_message+0x1e>
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d101      	bne.n	8018006 <mbedtls_ssl_send_alert_message+0x22>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8018002:	4b26      	ldr	r3, [pc, #152]	; (801809c <mbedtls_ssl_send_alert_message+0xb8>)
 8018004:	e046      	b.n	8018094 <mbedtls_ssl_send_alert_message+0xb0>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 8018006:	4b26      	ldr	r3, [pc, #152]	; (80180a0 <mbedtls_ssl_send_alert_message+0xbc>)
 8018008:	9300      	str	r3, [sp, #0]
 801800a:	f241 0352 	movw	r3, #4178	; 0x1052
 801800e:	4a25      	ldr	r2, [pc, #148]	; (80180a4 <mbedtls_ssl_send_alert_message+0xc0>)
 8018010:	2102      	movs	r1, #2
 8018012:	6878      	ldr	r0, [r7, #4]
 8018014:	f7f3 fe72 	bl	800bcfc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 8018018:	78fb      	ldrb	r3, [r7, #3]
 801801a:	78ba      	ldrb	r2, [r7, #2]
 801801c:	9202      	str	r2, [sp, #8]
 801801e:	9301      	str	r3, [sp, #4]
 8018020:	4b21      	ldr	r3, [pc, #132]	; (80180a8 <mbedtls_ssl_send_alert_message+0xc4>)
 8018022:	9300      	str	r3, [sp, #0]
 8018024:	f241 0353 	movw	r3, #4179	; 0x1053
 8018028:	4a1e      	ldr	r2, [pc, #120]	; (80180a4 <mbedtls_ssl_send_alert_message+0xc0>)
 801802a:	2103      	movs	r1, #3
 801802c:	6878      	ldr	r0, [r7, #4]
 801802e:	f7f3 fe65 	bl	800bcfc <mbedtls_debug_print_msg>

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	2215      	movs	r2, #21
 8018036:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msglen = 2;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	2202      	movs	r2, #2
 801803e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msg[0] = level;
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018048:	78fa      	ldrb	r2, [r7, #3]
 801804a:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[1] = message;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018052:	3301      	adds	r3, #1
 8018054:	78ba      	ldrb	r2, [r7, #2]
 8018056:	701a      	strb	r2, [r3, #0]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f7ff fb19 	bl	8017690 <mbedtls_ssl_write_record>
 801805e:	60f8      	str	r0, [r7, #12]
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d00c      	beq.n	8018080 <mbedtls_ssl_send_alert_message+0x9c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	9301      	str	r3, [sp, #4]
 801806a:	4b10      	ldr	r3, [pc, #64]	; (80180ac <mbedtls_ssl_send_alert_message+0xc8>)
 801806c:	9300      	str	r3, [sp, #0]
 801806e:	f241 035c 	movw	r3, #4188	; 0x105c
 8018072:	4a0c      	ldr	r2, [pc, #48]	; (80180a4 <mbedtls_ssl_send_alert_message+0xc0>)
 8018074:	2101      	movs	r1, #1
 8018076:	6878      	ldr	r0, [r7, #4]
 8018078:	f7f3 fec6 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	e009      	b.n	8018094 <mbedtls_ssl_send_alert_message+0xb0>
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 8018080:	4b0b      	ldr	r3, [pc, #44]	; (80180b0 <mbedtls_ssl_send_alert_message+0xcc>)
 8018082:	9300      	str	r3, [sp, #0]
 8018084:	f241 035f 	movw	r3, #4191	; 0x105f
 8018088:	4a06      	ldr	r2, [pc, #24]	; (80180a4 <mbedtls_ssl_send_alert_message+0xc0>)
 801808a:	2102      	movs	r1, #2
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f7f3 fe35 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 8018092:	2300      	movs	r3, #0
}
 8018094:	4618      	mov	r0, r3
 8018096:	3710      	adds	r7, #16
 8018098:	46bd      	mov	sp, r7
 801809a:	bd80      	pop	{r7, pc}
 801809c:	ffff8f00 	.word	0xffff8f00
 80180a0:	08023e84 	.word	0x08023e84
 80180a4:	080234fc 	.word	0x080234fc
 80180a8:	08023e9c 	.word	0x08023e9c
 80180ac:	08023ebc 	.word	0x08023ebc
 80180b0:	08023ed8 	.word	0x08023ed8

080180b4 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b08c      	sub	sp, #48	; 0x30
 80180b8:	af04      	add	r7, sp, #16
 80180ba:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 80180bc:	4b81      	ldr	r3, [pc, #516]	; (80182c4 <mbedtls_ssl_write_certificate+0x210>)
 80180be:	617b      	str	r3, [r7, #20]
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	613b      	str	r3, [r7, #16]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 80180c8:	4b7f      	ldr	r3, [pc, #508]	; (80182c8 <mbedtls_ssl_write_certificate+0x214>)
 80180ca:	9300      	str	r3, [sp, #0]
 80180cc:	f241 03a1 	movw	r3, #4257	; 0x10a1
 80180d0:	4a7e      	ldr	r2, [pc, #504]	; (80182cc <mbedtls_ssl_write_certificate+0x218>)
 80180d2:	2102      	movs	r1, #2
 80180d4:	6878      	ldr	r0, [r7, #4]
 80180d6:	f7f3 fe11 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	7a9b      	ldrb	r3, [r3, #10]
 80180de:	2b05      	cmp	r3, #5
 80180e0:	d00b      	beq.n	80180fa <mbedtls_ssl_write_certificate+0x46>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 80180e2:	693b      	ldr	r3, [r7, #16]
 80180e4:	7a9b      	ldrb	r3, [r3, #10]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80180e6:	2b06      	cmp	r3, #6
 80180e8:	d007      	beq.n	80180fa <mbedtls_ssl_write_certificate+0x46>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 80180ea:	693b      	ldr	r3, [r7, #16]
 80180ec:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 80180ee:	2b08      	cmp	r3, #8
 80180f0:	d003      	beq.n	80180fa <mbedtls_ssl_write_certificate+0x46>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
 80180f2:	693b      	ldr	r3, [r7, #16]
 80180f4:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 80180f6:	2b0b      	cmp	r3, #11
 80180f8:	d10f      	bne.n	801811a <mbedtls_ssl_write_certificate+0x66>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 80180fa:	4b75      	ldr	r3, [pc, #468]	; (80182d0 <mbedtls_ssl_write_certificate+0x21c>)
 80180fc:	9300      	str	r3, [sp, #0]
 80180fe:	f241 03a8 	movw	r3, #4264	; 0x10a8
 8018102:	4a72      	ldr	r2, [pc, #456]	; (80182cc <mbedtls_ssl_write_certificate+0x218>)
 8018104:	2102      	movs	r1, #2
 8018106:	6878      	ldr	r0, [r7, #4]
 8018108:	f7f3 fdf8 	bl	800bcfc <mbedtls_debug_print_msg>
        ssl->state++;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	685b      	ldr	r3, [r3, #4]
 8018110:	1c5a      	adds	r2, r3, #1
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	605a      	str	r2, [r3, #4]
        return( 0 );
 8018116:	2300      	movs	r3, #0
 8018118:	e0cf      	b.n	80182ba <mbedtls_ssl_write_certificate+0x206>
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018122:	f003 0301 	and.w	r3, r3, #1
 8018126:	b2db      	uxtb	r3, r3
 8018128:	2b00      	cmp	r3, #0
 801812a:	d114      	bne.n	8018156 <mbedtls_ssl_write_certificate+0xa2>
    {
        if( ssl->client_auth == 0 )
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8018132:	2b00      	cmp	r3, #0
 8018134:	d10f      	bne.n	8018156 <mbedtls_ssl_write_certificate+0xa2>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 8018136:	4b66      	ldr	r3, [pc, #408]	; (80182d0 <mbedtls_ssl_write_certificate+0x21c>)
 8018138:	9300      	str	r3, [sp, #0]
 801813a:	f241 03b2 	movw	r3, #4274	; 0x10b2
 801813e:	4a63      	ldr	r2, [pc, #396]	; (80182cc <mbedtls_ssl_write_certificate+0x218>)
 8018140:	2102      	movs	r1, #2
 8018142:	6878      	ldr	r0, [r7, #4]
 8018144:	f7f3 fdda 	bl	800bcfc <mbedtls_debug_print_msg>
            ssl->state++;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	685b      	ldr	r3, [r3, #4]
 801814c:	1c5a      	adds	r2, r3, #1
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	605a      	str	r2, [r3, #4]
            return( 0 );
 8018152:	2300      	movs	r3, #0
 8018154:	e0b1      	b.n	80182ba <mbedtls_ssl_write_certificate+0x206>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED );
        }
    }
#endif

    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 8018156:	6878      	ldr	r0, [r7, #4]
 8018158:	f7fd fae8 	bl	801572c <mbedtls_ssl_own_cert>
 801815c:	4603      	mov	r3, r0
 801815e:	9301      	str	r3, [sp, #4]
 8018160:	4b5c      	ldr	r3, [pc, #368]	; (80182d4 <mbedtls_ssl_write_certificate+0x220>)
 8018162:	9300      	str	r3, [sp, #0]
 8018164:	f241 03d5 	movw	r3, #4309	; 0x10d5
 8018168:	4a58      	ldr	r2, [pc, #352]	; (80182cc <mbedtls_ssl_write_certificate+0x218>)
 801816a:	2103      	movs	r1, #3
 801816c:	6878      	ldr	r0, [r7, #4]
 801816e:	f7f4 fabd 	bl	800c6ec <mbedtls_debug_print_crt>
     *     7  .  9    length of cert. 1
     *    10  . n-1   peer certificate
     *     n  . n+2   length of cert. 2
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
 8018172:	2307      	movs	r3, #7
 8018174:	61fb      	str	r3, [r7, #28]
    crt = mbedtls_ssl_own_cert( ssl );
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f7fd fad8 	bl	801572c <mbedtls_ssl_own_cert>
 801817c:	61b8      	str	r0, [r7, #24]

    while( crt != NULL )
 801817e:	e04e      	b.n	801821e <mbedtls_ssl_write_certificate+0x16a>
    {
        n = crt->raw.len;
 8018180:	69bb      	ldr	r3, [r7, #24]
 8018182:	685b      	ldr	r3, [r3, #4]
 8018184:	60fb      	str	r3, [r7, #12]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 8018186:	69fb      	ldr	r3, [r7, #28]
 8018188:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 801818c:	330d      	adds	r3, #13
 801818e:	68fa      	ldr	r2, [r7, #12]
 8018190:	429a      	cmp	r2, r3
 8018192:	d912      	bls.n	80181ba <mbedtls_ssl_write_certificate+0x106>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 8018194:	69fa      	ldr	r2, [r7, #28]
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	4413      	add	r3, r2
 801819a:	3303      	adds	r3, #3
 801819c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80181a0:	9202      	str	r2, [sp, #8]
 80181a2:	9301      	str	r3, [sp, #4]
 80181a4:	4b4c      	ldr	r3, [pc, #304]	; (80182d8 <mbedtls_ssl_write_certificate+0x224>)
 80181a6:	9300      	str	r3, [sp, #0]
 80181a8:	f241 03e8 	movw	r3, #4328	; 0x10e8
 80181ac:	4a47      	ldr	r2, [pc, #284]	; (80182cc <mbedtls_ssl_write_certificate+0x218>)
 80181ae:	2101      	movs	r1, #1
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	f7f3 fda3 	bl	800bcfc <mbedtls_debug_print_msg>
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 80181b6:	4b49      	ldr	r3, [pc, #292]	; (80182dc <mbedtls_ssl_write_certificate+0x228>)
 80181b8:	e07f      	b.n	80182ba <mbedtls_ssl_write_certificate+0x206>
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	0c19      	lsrs	r1, r3, #16
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80181c4:	69fb      	ldr	r3, [r7, #28]
 80181c6:	4413      	add	r3, r2
 80181c8:	b2ca      	uxtb	r2, r1
 80181ca:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	0a19      	lsrs	r1, r3, #8
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80181d6:	69fb      	ldr	r3, [r7, #28]
 80181d8:	3301      	adds	r3, #1
 80181da:	4413      	add	r3, r2
 80181dc:	b2ca      	uxtb	r2, r1
 80181de:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80181e6:	69fb      	ldr	r3, [r7, #28]
 80181e8:	3302      	adds	r3, #2
 80181ea:	4413      	add	r3, r2
 80181ec:	68fa      	ldr	r2, [r7, #12]
 80181ee:	b2d2      	uxtb	r2, r2
 80181f0:	701a      	strb	r2, [r3, #0]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 80181f2:	69fb      	ldr	r3, [r7, #28]
 80181f4:	3303      	adds	r3, #3
 80181f6:	61fb      	str	r3, [r7, #28]
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80181fe:	69fb      	ldr	r3, [r7, #28]
 8018200:	18d0      	adds	r0, r2, r3
 8018202:	69bb      	ldr	r3, [r7, #24]
 8018204:	689b      	ldr	r3, [r3, #8]
 8018206:	68fa      	ldr	r2, [r7, #12]
 8018208:	4619      	mov	r1, r3
 801820a:	f006 f9e3 	bl	801e5d4 <memcpy>
        i += n; crt = crt->next;
 801820e:	69fa      	ldr	r2, [r7, #28]
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	4413      	add	r3, r2
 8018214:	61fb      	str	r3, [r7, #28]
 8018216:	69bb      	ldr	r3, [r7, #24]
 8018218:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801821c:	61bb      	str	r3, [r7, #24]
    while( crt != NULL )
 801821e:	69bb      	ldr	r3, [r7, #24]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d1ad      	bne.n	8018180 <mbedtls_ssl_write_certificate+0xcc>
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 8018224:	69fb      	ldr	r3, [r7, #28]
 8018226:	3b07      	subs	r3, #7
 8018228:	0c1a      	lsrs	r2, r3, #16
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018230:	3304      	adds	r3, #4
 8018232:	b2d2      	uxtb	r2, r2
 8018234:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 8018236:	69fb      	ldr	r3, [r7, #28]
 8018238:	3b07      	subs	r3, #7
 801823a:	0a1a      	lsrs	r2, r3, #8
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018242:	3305      	adds	r3, #5
 8018244:	b2d2      	uxtb	r2, r2
 8018246:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 8018248:	69fb      	ldr	r3, [r7, #28]
 801824a:	b2da      	uxtb	r2, r3
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018252:	3306      	adds	r3, #6
 8018254:	3a07      	subs	r2, #7
 8018256:	b2d2      	uxtb	r2, r2
 8018258:	701a      	strb	r2, [r3, #0]

    ssl->out_msglen  = i;
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	69fa      	ldr	r2, [r7, #28]
 801825e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2216      	movs	r2, #22
 8018266:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018270:	220b      	movs	r2, #11
 8018272:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	685b      	ldr	r3, [r3, #4]
 8018278:	1c5a      	adds	r2, r3, #1
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	f7ff fa06 	bl	8017690 <mbedtls_ssl_write_record>
 8018284:	6178      	str	r0, [r7, #20]
 8018286:	697b      	ldr	r3, [r7, #20]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d00c      	beq.n	80182a6 <mbedtls_ssl_write_certificate+0x1f2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801828c:	697b      	ldr	r3, [r7, #20]
 801828e:	9301      	str	r3, [sp, #4]
 8018290:	4b13      	ldr	r3, [pc, #76]	; (80182e0 <mbedtls_ssl_write_certificate+0x22c>)
 8018292:	9300      	str	r3, [sp, #0]
 8018294:	f241 1305 	movw	r3, #4357	; 0x1105
 8018298:	4a0c      	ldr	r2, [pc, #48]	; (80182cc <mbedtls_ssl_write_certificate+0x218>)
 801829a:	2101      	movs	r1, #1
 801829c:	6878      	ldr	r0, [r7, #4]
 801829e:	f7f3 fdb3 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 80182a2:	697b      	ldr	r3, [r7, #20]
 80182a4:	e009      	b.n	80182ba <mbedtls_ssl_write_certificate+0x206>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 80182a6:	4b0f      	ldr	r3, [pc, #60]	; (80182e4 <mbedtls_ssl_write_certificate+0x230>)
 80182a8:	9300      	str	r3, [sp, #0]
 80182aa:	f241 1309 	movw	r3, #4361	; 0x1109
 80182ae:	4a07      	ldr	r2, [pc, #28]	; (80182cc <mbedtls_ssl_write_certificate+0x218>)
 80182b0:	2102      	movs	r1, #2
 80182b2:	6878      	ldr	r0, [r7, #4]
 80182b4:	f7f3 fd22 	bl	800bcfc <mbedtls_debug_print_msg>

    return( ret );
 80182b8:	697b      	ldr	r3, [r7, #20]
}
 80182ba:	4618      	mov	r0, r3
 80182bc:	3720      	adds	r7, #32
 80182be:	46bd      	mov	sp, r7
 80182c0:	bd80      	pop	{r7, pc}
 80182c2:	bf00      	nop
 80182c4:	ffff8f80 	.word	0xffff8f80
 80182c8:	08023ef0 	.word	0x08023ef0
 80182cc:	080234fc 	.word	0x080234fc
 80182d0:	08023f08 	.word	0x08023f08
 80182d4:	08023f24 	.word	0x08023f24
 80182d8:	08023f34 	.word	0x08023f34
 80182dc:	ffff8b00 	.word	0xffff8b00
 80182e0:	08023ebc 	.word	0x08023ebc
 80182e4:	08023f54 	.word	0x08023f54

080182e8 <mbedtls_ssl_parse_certificate>:

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80182e8:	b5b0      	push	{r4, r5, r7, lr}
 80182ea:	b08e      	sub	sp, #56	; 0x38
 80182ec:	af04      	add	r7, sp, #16
 80182ee:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 80182f0:	4b99      	ldr	r3, [pc, #612]	; (8018558 <mbedtls_ssl_parse_certificate+0x270>)
 80182f2:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	61bb      	str	r3, [r7, #24]
    int authmode = ssl->conf->authmode;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018304:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018308:	b2db      	uxtb	r3, r3
 801830a:	617b      	str	r3, [r7, #20]
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801830c:	4b93      	ldr	r3, [pc, #588]	; (801855c <mbedtls_ssl_parse_certificate+0x274>)
 801830e:	9300      	str	r3, [sp, #0]
 8018310:	f241 1316 	movw	r3, #4374	; 0x1116
 8018314:	4a92      	ldr	r2, [pc, #584]	; (8018560 <mbedtls_ssl_parse_certificate+0x278>)
 8018316:	2102      	movs	r1, #2
 8018318:	6878      	ldr	r0, [r7, #4]
 801831a:	f7f3 fcef 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801831e:	69bb      	ldr	r3, [r7, #24]
 8018320:	7a9b      	ldrb	r3, [r3, #10]
 8018322:	2b05      	cmp	r3, #5
 8018324:	d00b      	beq.n	801833e <mbedtls_ssl_parse_certificate+0x56>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8018326:	69bb      	ldr	r3, [r7, #24]
 8018328:	7a9b      	ldrb	r3, [r3, #10]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801832a:	2b06      	cmp	r3, #6
 801832c:	d007      	beq.n	801833e <mbedtls_ssl_parse_certificate+0x56>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 801832e:	69bb      	ldr	r3, [r7, #24]
 8018330:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8018332:	2b08      	cmp	r3, #8
 8018334:	d003      	beq.n	801833e <mbedtls_ssl_parse_certificate+0x56>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 801833a:	2b0b      	cmp	r3, #11
 801833c:	d10f      	bne.n	801835e <mbedtls_ssl_parse_certificate+0x76>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 801833e:	4b89      	ldr	r3, [pc, #548]	; (8018564 <mbedtls_ssl_parse_certificate+0x27c>)
 8018340:	9300      	str	r3, [sp, #0]
 8018342:	f241 131d 	movw	r3, #4381	; 0x111d
 8018346:	4a86      	ldr	r2, [pc, #536]	; (8018560 <mbedtls_ssl_parse_certificate+0x278>)
 8018348:	2102      	movs	r1, #2
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f7f3 fcd6 	bl	800bcfc <mbedtls_debug_print_msg>
        ssl->state++;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	685b      	ldr	r3, [r3, #4]
 8018354:	1c5a      	adds	r2, r3, #1
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	605a      	str	r2, [r3, #4]
        return( 0 );
 801835a:	2300      	movs	r3, #0
 801835c:	e28b      	b.n	8018876 <mbedtls_ssl_parse_certificate+0x58e>
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801835e:	6878      	ldr	r0, [r7, #4]
 8018360:	f7ff fca4 	bl	8017cac <mbedtls_ssl_read_record>
 8018364:	6278      	str	r0, [r7, #36]	; 0x24
 8018366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018368:	2b00      	cmp	r3, #0
 801836a:	d00c      	beq.n	8018386 <mbedtls_ssl_parse_certificate+0x9e>
    {
        /* mbedtls_ssl_read_record may have sent an alert already. We
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801836e:	9301      	str	r3, [sp, #4]
 8018370:	4b7d      	ldr	r3, [pc, #500]	; (8018568 <mbedtls_ssl_parse_certificate+0x280>)
 8018372:	9300      	str	r3, [sp, #0]
 8018374:	f241 133e 	movw	r3, #4414	; 0x113e
 8018378:	4a79      	ldr	r2, [pc, #484]	; (8018560 <mbedtls_ssl_parse_certificate+0x278>)
 801837a:	2101      	movs	r1, #1
 801837c:	6878      	ldr	r0, [r7, #4]
 801837e:	f7f3 fd43 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8018382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018384:	e277      	b.n	8018876 <mbedtls_ssl_parse_certificate+0x58e>
    }

    ssl->state++;
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	685b      	ldr	r3, [r3, #4]
 801838a:	1c5a      	adds	r2, r3, #1
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	605a      	str	r2, [r3, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018394:	2b16      	cmp	r3, #22
 8018396:	d00f      	beq.n	80183b8 <mbedtls_ssl_parse_certificate+0xd0>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8018398:	4b74      	ldr	r3, [pc, #464]	; (801856c <mbedtls_ssl_parse_certificate+0x284>)
 801839a:	9300      	str	r3, [sp, #0]
 801839c:	f241 137b 	movw	r3, #4475	; 0x117b
 80183a0:	4a6f      	ldr	r2, [pc, #444]	; (8018560 <mbedtls_ssl_parse_certificate+0x278>)
 80183a2:	2101      	movs	r1, #1
 80183a4:	6878      	ldr	r0, [r7, #4]
 80183a6:	f7f3 fca9 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80183aa:	220a      	movs	r2, #10
 80183ac:	2102      	movs	r1, #2
 80183ae:	6878      	ldr	r0, [r7, #4]
 80183b0:	f7ff fe18 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80183b4:	4b6e      	ldr	r3, [pc, #440]	; (8018570 <mbedtls_ssl_parse_certificate+0x288>)
 80183b6:	e25e      	b.n	8018876 <mbedtls_ssl_parse_certificate+0x58e>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80183bc:	781b      	ldrb	r3, [r3, #0]
 80183be:	2b0b      	cmp	r3, #11
 80183c0:	d108      	bne.n	80183d4 <mbedtls_ssl_parse_certificate+0xec>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80183c6:	6878      	ldr	r0, [r7, #4]
 80183c8:	f7fd f9de 	bl	8015788 <mbedtls_ssl_hs_hdr_len>
 80183cc:	4603      	mov	r3, r0
 80183ce:	3306      	adds	r3, #6
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80183d0:	429c      	cmp	r4, r3
 80183d2:	d20f      	bcs.n	80183f4 <mbedtls_ssl_parse_certificate+0x10c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 80183d4:	4b65      	ldr	r3, [pc, #404]	; (801856c <mbedtls_ssl_parse_certificate+0x284>)
 80183d6:	9300      	str	r3, [sp, #0]
 80183d8:	f241 1384 	movw	r3, #4484	; 0x1184
 80183dc:	4a60      	ldr	r2, [pc, #384]	; (8018560 <mbedtls_ssl_parse_certificate+0x278>)
 80183de:	2101      	movs	r1, #1
 80183e0:	6878      	ldr	r0, [r7, #4]
 80183e2:	f7f3 fc8b 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80183e6:	2232      	movs	r2, #50	; 0x32
 80183e8:	2102      	movs	r1, #2
 80183ea:	6878      	ldr	r0, [r7, #4]
 80183ec:	f7ff fdfa 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 80183f0:	4b60      	ldr	r3, [pc, #384]	; (8018574 <mbedtls_ssl_parse_certificate+0x28c>)
 80183f2:	e240      	b.n	8018876 <mbedtls_ssl_parse_certificate+0x58e>
    }

    i = mbedtls_ssl_hs_hdr_len( ssl );
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f7fd f9c7 	bl	8015788 <mbedtls_ssl_hs_hdr_len>
 80183fa:	6238      	str	r0, [r7, #32]

    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8018400:	6a3b      	ldr	r3, [r7, #32]
 8018402:	3301      	adds	r3, #1
 8018404:	4413      	add	r3, r2
 8018406:	781b      	ldrb	r3, [r3, #0]
 8018408:	021b      	lsls	r3, r3, #8
 801840a:	687a      	ldr	r2, [r7, #4]
 801840c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 801840e:	6a3a      	ldr	r2, [r7, #32]
 8018410:	3202      	adds	r2, #2
 8018412:	440a      	add	r2, r1
 8018414:	7812      	ldrb	r2, [r2, #0]
 8018416:	4313      	orrs	r3, r2
 8018418:	613b      	str	r3, [r7, #16]

    if( ssl->in_msg[i] != 0 ||
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801841e:	6a3b      	ldr	r3, [r7, #32]
 8018420:	4413      	add	r3, r2
 8018422:	781b      	ldrb	r3, [r3, #0]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d10a      	bne.n	801843e <mbedtls_ssl_parse_certificate+0x156>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	f7fd f9ab 	bl	8015788 <mbedtls_ssl_hs_hdr_len>
 8018432:	4602      	mov	r2, r0
 8018434:	693b      	ldr	r3, [r7, #16]
 8018436:	4413      	add	r3, r2
 8018438:	3303      	adds	r3, #3
    if( ssl->in_msg[i] != 0 ||
 801843a:	429c      	cmp	r4, r3
 801843c:	d00f      	beq.n	801845e <mbedtls_ssl_parse_certificate+0x176>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801843e:	4b4b      	ldr	r3, [pc, #300]	; (801856c <mbedtls_ssl_parse_certificate+0x284>)
 8018440:	9300      	str	r3, [sp, #0]
 8018442:	f241 1394 	movw	r3, #4500	; 0x1194
 8018446:	4a46      	ldr	r2, [pc, #280]	; (8018560 <mbedtls_ssl_parse_certificate+0x278>)
 8018448:	2101      	movs	r1, #1
 801844a:	6878      	ldr	r0, [r7, #4]
 801844c:	f7f3 fc56 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018450:	2232      	movs	r2, #50	; 0x32
 8018452:	2102      	movs	r1, #2
 8018454:	6878      	ldr	r0, [r7, #4]
 8018456:	f7ff fdc5 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 801845a:	4b46      	ldr	r3, [pc, #280]	; (8018574 <mbedtls_ssl_parse_certificate+0x28c>)
 801845c:	e20b      	b.n	8018876 <mbedtls_ssl_parse_certificate+0x58e>
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018464:	2b00      	cmp	r3, #0
 8018466:	d00b      	beq.n	8018480 <mbedtls_ssl_parse_certificate+0x198>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801846c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801846e:	4618      	mov	r0, r3
 8018470:	f004 fd90 	bl	801cf94 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801847a:	4618      	mov	r0, r3
 801847c:	f006 f892 	bl	801e5a4 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8018484:	f44f 719a 	mov.w	r1, #308	; 0x134
 8018488:	2001      	movs	r0, #1
 801848a:	f006 f851 	bl	801e530 <calloc>
 801848e:	4603      	mov	r3, r0
 8018490:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018492:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8018494:	2b00      	cmp	r3, #0
 8018496:	d112      	bne.n	80184be <mbedtls_ssl_parse_certificate+0x1d6>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 8018498:	f44f 739a 	mov.w	r3, #308	; 0x134
 801849c:	9301      	str	r3, [sp, #4]
 801849e:	4b36      	ldr	r3, [pc, #216]	; (8018578 <mbedtls_ssl_parse_certificate+0x290>)
 80184a0:	9300      	str	r3, [sp, #0]
 80184a2:	f241 13a4 	movw	r3, #4516	; 0x11a4
 80184a6:	4a2e      	ldr	r2, [pc, #184]	; (8018560 <mbedtls_ssl_parse_certificate+0x278>)
 80184a8:	2101      	movs	r1, #1
 80184aa:	6878      	ldr	r0, [r7, #4]
 80184ac:	f7f3 fc26 	bl	800bcfc <mbedtls_debug_print_msg>
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80184b0:	2250      	movs	r2, #80	; 0x50
 80184b2:	2102      	movs	r1, #2
 80184b4:	6878      	ldr	r0, [r7, #4]
 80184b6:	f7ff fd95 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80184ba:	4b30      	ldr	r3, [pc, #192]	; (801857c <mbedtls_ssl_parse_certificate+0x294>)
 80184bc:	e1db      	b.n	8018876 <mbedtls_ssl_parse_certificate+0x58e>
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184c4:	4618      	mov	r0, r3
 80184c6:	f004 fd57 	bl	801cf78 <mbedtls_x509_crt_init>

    i += 3;
 80184ca:	6a3b      	ldr	r3, [r7, #32]
 80184cc:	3303      	adds	r3, #3
 80184ce:	623b      	str	r3, [r7, #32]

    while( i < ssl->in_hslen )
 80184d0:	e099      	b.n	8018606 <mbedtls_ssl_parse_certificate+0x31e>
    {
        if( ssl->in_msg[i] != 0 )
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80184d6:	6a3b      	ldr	r3, [r7, #32]
 80184d8:	4413      	add	r3, r2
 80184da:	781b      	ldrb	r3, [r3, #0]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d00f      	beq.n	8018500 <mbedtls_ssl_parse_certificate+0x218>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 80184e0:	4b22      	ldr	r3, [pc, #136]	; (801856c <mbedtls_ssl_parse_certificate+0x284>)
 80184e2:	9300      	str	r3, [sp, #0]
 80184e4:	f241 13b3 	movw	r3, #4531	; 0x11b3
 80184e8:	4a1d      	ldr	r2, [pc, #116]	; (8018560 <mbedtls_ssl_parse_certificate+0x278>)
 80184ea:	2101      	movs	r1, #1
 80184ec:	6878      	ldr	r0, [r7, #4]
 80184ee:	f7f3 fc05 	bl	800bcfc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80184f2:	2232      	movs	r2, #50	; 0x32
 80184f4:	2102      	movs	r1, #2
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	f7ff fd74 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 80184fc:	4b1d      	ldr	r3, [pc, #116]	; (8018574 <mbedtls_ssl_parse_certificate+0x28c>)
 80184fe:	e1ba      	b.n	8018876 <mbedtls_ssl_parse_certificate+0x58e>
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8018504:	6a3b      	ldr	r3, [r7, #32]
 8018506:	3301      	adds	r3, #1
 8018508:	4413      	add	r3, r2
 801850a:	781b      	ldrb	r3, [r3, #0]
 801850c:	021b      	lsls	r3, r3, #8
            | (unsigned int) ssl->in_msg[i + 2];
 801850e:	687a      	ldr	r2, [r7, #4]
 8018510:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8018512:	6a3a      	ldr	r2, [r7, #32]
 8018514:	3202      	adds	r2, #2
 8018516:	440a      	add	r2, r1
 8018518:	7812      	ldrb	r2, [r2, #0]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801851a:	4313      	orrs	r3, r2
 801851c:	613b      	str	r3, [r7, #16]
        i += 3;
 801851e:	6a3b      	ldr	r3, [r7, #32]
 8018520:	3303      	adds	r3, #3
 8018522:	623b      	str	r3, [r7, #32]

        if( n < 128 || i + n > ssl->in_hslen )
 8018524:	693b      	ldr	r3, [r7, #16]
 8018526:	2b7f      	cmp	r3, #127	; 0x7f
 8018528:	d906      	bls.n	8018538 <mbedtls_ssl_parse_certificate+0x250>
 801852a:	6a3a      	ldr	r2, [r7, #32]
 801852c:	693b      	ldr	r3, [r7, #16]
 801852e:	441a      	add	r2, r3
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018534:	429a      	cmp	r2, r3
 8018536:	d923      	bls.n	8018580 <mbedtls_ssl_parse_certificate+0x298>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8018538:	4b0c      	ldr	r3, [pc, #48]	; (801856c <mbedtls_ssl_parse_certificate+0x284>)
 801853a:	9300      	str	r3, [sp, #0]
 801853c:	f241 13bf 	movw	r3, #4543	; 0x11bf
 8018540:	4a07      	ldr	r2, [pc, #28]	; (8018560 <mbedtls_ssl_parse_certificate+0x278>)
 8018542:	2101      	movs	r1, #1
 8018544:	6878      	ldr	r0, [r7, #4]
 8018546:	f7f3 fbd9 	bl	800bcfc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801854a:	2232      	movs	r2, #50	; 0x32
 801854c:	2102      	movs	r1, #2
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f7ff fd48 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8018554:	4b07      	ldr	r3, [pc, #28]	; (8018574 <mbedtls_ssl_parse_certificate+0x28c>)
 8018556:	e18e      	b.n	8018876 <mbedtls_ssl_parse_certificate+0x58e>
 8018558:	ffff8f80 	.word	0xffff8f80
 801855c:	08023f6c 	.word	0x08023f6c
 8018560:	080234fc 	.word	0x080234fc
 8018564:	08023f84 	.word	0x08023f84
 8018568:	08023fa0 	.word	0x08023fa0
 801856c:	08023fb8 	.word	0x08023fb8
 8018570:	ffff8900 	.word	0xffff8900
 8018574:	ffff8600 	.word	0xffff8600
 8018578:	08023fd0 	.word	0x08023fd0
 801857c:	ffff8100 	.word	0xffff8100
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018584:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
                                  ssl->in_msg + i, n );
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801858a:	6a3b      	ldr	r3, [r7, #32]
 801858c:	4413      	add	r3, r2
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 801858e:	693a      	ldr	r2, [r7, #16]
 8018590:	4619      	mov	r1, r3
 8018592:	f002 ffdb 	bl	801b54c <mbedtls_x509_crt_parse_der>
 8018596:	6278      	str	r0, [r7, #36]	; 0x24
        switch( ret )
 8018598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801859a:	2b00      	cmp	r3, #0
 801859c:	d02e      	beq.n	80185fc <mbedtls_ssl_parse_certificate+0x314>
 801859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	dc16      	bgt.n	80185d2 <mbedtls_ssl_parse_certificate+0x2ea>
 80185a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
 80185aa:	d00f      	beq.n	80185cc <mbedtls_ssl_parse_certificate+0x2e4>
 80185ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ae:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
 80185b2:	dc0e      	bgt.n	80185d2 <mbedtls_ssl_parse_certificate+0x2ea>
 80185b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b6:	f513 5f22 	cmn.w	r3, #10368	; 0x2880
 80185ba:	d004      	beq.n	80185c6 <mbedtls_ssl_parse_certificate+0x2de>
 80185bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185be:	4a9a      	ldr	r2, [pc, #616]	; (8018828 <mbedtls_ssl_parse_certificate+0x540>)
 80185c0:	4293      	cmp	r3, r2
 80185c2:	d106      	bne.n	80185d2 <mbedtls_ssl_parse_certificate+0x2ea>
        {
        case 0: /*ok*/
        case MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + MBEDTLS_ERR_OID_NOT_FOUND:
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;
 80185c4:	e01a      	b.n	80185fc <mbedtls_ssl_parse_certificate+0x314>

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 80185c6:	2350      	movs	r3, #80	; 0x50
 80185c8:	77fb      	strb	r3, [r7, #31]
            goto crt_parse_der_failed;
 80185ca:	e004      	b.n	80185d6 <mbedtls_ssl_parse_certificate+0x2ee>

        case MBEDTLS_ERR_X509_UNKNOWN_VERSION:
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80185cc:	232b      	movs	r3, #43	; 0x2b
 80185ce:	77fb      	strb	r3, [r7, #31]
            goto crt_parse_der_failed;
 80185d0:	e001      	b.n	80185d6 <mbedtls_ssl_parse_certificate+0x2ee>

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 80185d2:	232a      	movs	r3, #42	; 0x2a
 80185d4:	77fb      	strb	r3, [r7, #31]
        crt_parse_der_failed:
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 80185d6:	7ffb      	ldrb	r3, [r7, #31]
 80185d8:	461a      	mov	r2, r3
 80185da:	2102      	movs	r1, #2
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	f7ff fd01 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 80185e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185e4:	9301      	str	r3, [sp, #4]
 80185e6:	4b91      	ldr	r3, [pc, #580]	; (801882c <mbedtls_ssl_parse_certificate+0x544>)
 80185e8:	9300      	str	r3, [sp, #0]
 80185ea:	f241 13db 	movw	r3, #4571	; 0x11db
 80185ee:	4a90      	ldr	r2, [pc, #576]	; (8018830 <mbedtls_ssl_parse_certificate+0x548>)
 80185f0:	2101      	movs	r1, #1
 80185f2:	6878      	ldr	r0, [r7, #4]
 80185f4:	f7f3 fc08 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 80185f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185fa:	e13c      	b.n	8018876 <mbedtls_ssl_parse_certificate+0x58e>
            break;
 80185fc:	bf00      	nop
        }

        i += n;
 80185fe:	6a3a      	ldr	r2, [r7, #32]
 8018600:	693b      	ldr	r3, [r7, #16]
 8018602:	4413      	add	r3, r2
 8018604:	623b      	str	r3, [r7, #32]
    while( i < ssl->in_hslen )
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801860a:	6a3a      	ldr	r2, [r7, #32]
 801860c:	429a      	cmp	r2, r3
 801860e:	f4ff af60 	bcc.w	80184d2 <mbedtls_ssl_parse_certificate+0x1ea>
    }

    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018618:	9301      	str	r3, [sp, #4]
 801861a:	4b86      	ldr	r3, [pc, #536]	; (8018834 <mbedtls_ssl_parse_certificate+0x54c>)
 801861c:	9300      	str	r3, [sp, #0]
 801861e:	f241 13e2 	movw	r3, #4578	; 0x11e2
 8018622:	4a83      	ldr	r2, [pc, #524]	; (8018830 <mbedtls_ssl_parse_certificate+0x548>)
 8018624:	2103      	movs	r1, #3
 8018626:	6878      	ldr	r0, [r7, #4]
 8018628:	f7f4 f860 	bl	800c6ec <mbedtls_debug_print_crt>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	2b00      	cmp	r3, #0
 8018630:	f000 8117 	beq.w	8018862 <mbedtls_ssl_parse_certificate+0x57a>
            ca_crl   = ssl->handshake->sni_ca_crl;
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801863a:	60fb      	str	r3, [r7, #12]
            ca_crl   = ssl->conf->ca_crl;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018642:	60bb      	str	r3, [r7, #8]

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_with_profile(
 8018648:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	681b      	ldr	r3, [r3, #0]
        ret = mbedtls_x509_crt_verify_with_profile(
 801864e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
                                ssl->hostname,
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                               &ssl->session_negotiate->verify_result,
 8018656:	687a      	ldr	r2, [r7, #4]
 8018658:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_with_profile(
 801865a:	3260      	adds	r2, #96	; 0x60
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 801865c:	6879      	ldr	r1, [r7, #4]
 801865e:	6809      	ldr	r1, [r1, #0]
        ret = mbedtls_x509_crt_verify_with_profile(
 8018660:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	6800      	ldr	r0, [r0, #0]
        ret = mbedtls_x509_crt_verify_with_profile(
 8018666:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018668:	9003      	str	r0, [sp, #12]
 801866a:	9102      	str	r1, [sp, #8]
 801866c:	9201      	str	r2, [sp, #4]
 801866e:	9300      	str	r3, [sp, #0]
 8018670:	462b      	mov	r3, r5
 8018672:	68ba      	ldr	r2, [r7, #8]
 8018674:	68f9      	ldr	r1, [r7, #12]
 8018676:	4620      	mov	r0, r4
 8018678:	f004 fb08 	bl	801cc8c <mbedtls_x509_crt_verify_with_profile>
 801867c:	6278      	str	r0, [r7, #36]	; 0x24

        if( ret != 0 )
 801867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018680:	2b00      	cmp	r3, #0
 8018682:	d00a      	beq.n	801869a <mbedtls_ssl_parse_certificate+0x3b2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 8018684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018686:	9301      	str	r3, [sp, #4]
 8018688:	4b6b      	ldr	r3, [pc, #428]	; (8018838 <mbedtls_ssl_parse_certificate+0x550>)
 801868a:	9300      	str	r3, [sp, #0]
 801868c:	f241 2321 	movw	r3, #4641	; 0x1221
 8018690:	4a67      	ldr	r2, [pc, #412]	; (8018830 <mbedtls_ssl_parse_certificate+0x548>)
 8018692:	2101      	movs	r1, #1
 8018694:	6878      	ldr	r0, [r7, #4]
 8018696:	f7f3 fbb7 	bl	800be08 <mbedtls_debug_print_ret>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801869e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80186a8:	f003 0301 	and.w	r3, r3, #1
 80186ac:	b2db      	uxtb	r3, r3
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	bf0c      	ite	eq
 80186b2:	2301      	moveq	r3, #1
 80186b4:	2300      	movne	r3, #0
 80186b6:	b2db      	uxtb	r3, r3
 80186b8:	461a      	mov	r2, r3
                                 &ssl->session_negotiate->verify_result ) != 0 )
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80186be:	3360      	adds	r3, #96	; 0x60
 80186c0:	69b9      	ldr	r1, [r7, #24]
 80186c2:	f001 fabb 	bl	8019c3c <mbedtls_ssl_check_cert_usage>
 80186c6:	4603      	mov	r3, r0
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d00d      	beq.n	80186e8 <mbedtls_ssl_parse_certificate+0x400>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
 80186cc:	4b5b      	ldr	r3, [pc, #364]	; (801883c <mbedtls_ssl_parse_certificate+0x554>)
 80186ce:	9300      	str	r3, [sp, #0]
 80186d0:	f241 233e 	movw	r3, #4670	; 0x123e
 80186d4:	4a56      	ldr	r2, [pc, #344]	; (8018830 <mbedtls_ssl_parse_certificate+0x548>)
 80186d6:	2101      	movs	r1, #1
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	f7f3 fb0f 	bl	800bcfc <mbedtls_debug_print_msg>
            if( ret == 0 )
 80186de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d101      	bne.n	80186e8 <mbedtls_ssl_parse_certificate+0x400>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 80186e4:	4b56      	ldr	r3, [pc, #344]	; (8018840 <mbedtls_ssl_parse_certificate+0x558>)
 80186e6:	627b      	str	r3, [r7, #36]	; 0x24
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80186e8:	697b      	ldr	r3, [r7, #20]
 80186ea:	2b01      	cmp	r3, #1
 80186ec:	d109      	bne.n	8018702 <mbedtls_ssl_parse_certificate+0x41a>
 80186ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186f0:	f513 5f1c 	cmn.w	r3, #9984	; 0x2700
 80186f4:	d003      	beq.n	80186fe <mbedtls_ssl_parse_certificate+0x416>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 80186f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186f8:	f513 4ff4 	cmn.w	r3, #31232	; 0x7a00
 80186fc:	d101      	bne.n	8018702 <mbedtls_ssl_parse_certificate+0x41a>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
 80186fe:	2300      	movs	r3, #0
 8018700:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d10d      	bne.n	8018724 <mbedtls_ssl_parse_certificate+0x43c>
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	2b02      	cmp	r3, #2
 801870c:	d10a      	bne.n	8018724 <mbedtls_ssl_parse_certificate+0x43c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801870e:	4b4d      	ldr	r3, [pc, #308]	; (8018844 <mbedtls_ssl_parse_certificate+0x55c>)
 8018710:	9300      	str	r3, [sp, #0]
 8018712:	f241 2352 	movw	r3, #4690	; 0x1252
 8018716:	4a46      	ldr	r2, [pc, #280]	; (8018830 <mbedtls_ssl_parse_certificate+0x548>)
 8018718:	2101      	movs	r1, #1
 801871a:	6878      	ldr	r0, [r7, #4]
 801871c:	f7f3 faee 	bl	800bcfc <mbedtls_debug_print_msg>
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 8018720:	4b49      	ldr	r3, [pc, #292]	; (8018848 <mbedtls_ssl_parse_certificate+0x560>)
 8018722:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if( ret != 0 )
 8018724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018726:	2b00      	cmp	r3, #0
 8018728:	d06b      	beq.n	8018802 <mbedtls_ssl_parse_certificate+0x51a>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801872e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018734:	2b00      	cmp	r3, #0
 8018736:	d002      	beq.n	801873e <mbedtls_ssl_parse_certificate+0x456>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 8018738:	2331      	movs	r3, #49	; 0x31
 801873a:	77fb      	strb	r3, [r7, #31]
 801873c:	e05b      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018744:	f003 0304 	and.w	r3, r3, #4
 8018748:	2b00      	cmp	r3, #0
 801874a:	d002      	beq.n	8018752 <mbedtls_ssl_parse_certificate+0x46a>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 801874c:	232a      	movs	r3, #42	; 0x2a
 801874e:	77fb      	strb	r3, [r7, #31]
 8018750:	e051      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_KEY_USAGE )
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801875c:	2b00      	cmp	r3, #0
 801875e:	d002      	beq.n	8018766 <mbedtls_ssl_parse_certificate+0x47e>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8018760:	232b      	movs	r3, #43	; 0x2b
 8018762:	77fb      	strb	r3, [r7, #31]
 8018764:	e047      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXT_KEY_USAGE )
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801876a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801876c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018770:	2b00      	cmp	r3, #0
 8018772:	d002      	beq.n	801877a <mbedtls_ssl_parse_certificate+0x492>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8018774:	232b      	movs	r3, #43	; 0x2b
 8018776:	77fb      	strb	r3, [r7, #31]
 8018778:	e03d      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801877e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018784:	2b00      	cmp	r3, #0
 8018786:	d002      	beq.n	801878e <mbedtls_ssl_parse_certificate+0x4a6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8018788:	232b      	movs	r3, #43	; 0x2b
 801878a:	77fb      	strb	r3, [r7, #31]
 801878c:	e033      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018798:	2b00      	cmp	r3, #0
 801879a:	d002      	beq.n	80187a2 <mbedtls_ssl_parse_certificate+0x4ba>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801879c:	232b      	movs	r3, #43	; 0x2b
 801879e:	77fb      	strb	r3, [r7, #31]
 80187a0:	e029      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d002      	beq.n	80187b6 <mbedtls_ssl_parse_certificate+0x4ce>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80187b0:	232b      	movs	r3, #43	; 0x2b
 80187b2:	77fb      	strb	r3, [r7, #31]
 80187b4:	e01f      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187bc:	f003 0301 	and.w	r3, r3, #1
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d002      	beq.n	80187ca <mbedtls_ssl_parse_certificate+0x4e2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 80187c4:	232d      	movs	r3, #45	; 0x2d
 80187c6:	77fb      	strb	r3, [r7, #31]
 80187c8:	e015      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187d0:	f003 0302 	and.w	r3, r3, #2
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d002      	beq.n	80187de <mbedtls_ssl_parse_certificate+0x4f6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 80187d8:	232c      	movs	r3, #44	; 0x2c
 80187da:	77fb      	strb	r3, [r7, #31]
 80187dc:	e00b      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187e4:	f003 0308 	and.w	r3, r3, #8
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d002      	beq.n	80187f2 <mbedtls_ssl_parse_certificate+0x50a>
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
 80187ec:	2330      	movs	r3, #48	; 0x30
 80187ee:	77fb      	strb	r3, [r7, #31]
 80187f0:	e001      	b.n	80187f6 <mbedtls_ssl_parse_certificate+0x50e>
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 80187f2:	232e      	movs	r3, #46	; 0x2e
 80187f4:	77fb      	strb	r3, [r7, #31]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80187f6:	7ffb      	ldrb	r3, [r7, #31]
 80187f8:	461a      	mov	r2, r3
 80187fa:	2102      	movs	r1, #2
 80187fc:	6878      	ldr	r0, [r7, #4]
 80187fe:	f7ff fbf1 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                            alert );
        }

#if defined(MBEDTLS_DEBUG_C)
        if( ssl->session_negotiate->verify_result != 0 )
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018808:	2b00      	cmp	r3, #0
 801880a:	d021      	beq.n	8018850 <mbedtls_ssl_parse_certificate+0x568>
        {
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018812:	9301      	str	r3, [sp, #4]
 8018814:	4b0d      	ldr	r3, [pc, #52]	; (801884c <mbedtls_ssl_parse_certificate+0x564>)
 8018816:	9300      	str	r3, [sp, #0]
 8018818:	f241 2378 	movw	r3, #4728	; 0x1278
 801881c:	4a04      	ldr	r2, [pc, #16]	; (8018830 <mbedtls_ssl_parse_certificate+0x548>)
 801881e:	2103      	movs	r1, #3
 8018820:	6878      	ldr	r0, [r7, #4]
 8018822:	f7f3 fa6b 	bl	800bcfc <mbedtls_debug_print_msg>
 8018826:	e01c      	b.n	8018862 <mbedtls_ssl_parse_certificate+0x57a>
 8018828:	ffffd9d2 	.word	0xffffd9d2
 801882c:	08023fe8 	.word	0x08023fe8
 8018830:	080234fc 	.word	0x080234fc
 8018834:	08024004 	.word	0x08024004
 8018838:	08024018 	.word	0x08024018
 801883c:	0802402c 	.word	0x0802402c
 8018840:	ffff8600 	.word	0xffff8600
 8018844:	08024050 	.word	0x08024050
 8018848:	ffff8980 	.word	0xffff8980
 801884c:	08024060 	.word	0x08024060
                                        ssl->session_negotiate->verify_result ) );
        }
        else
        {
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 8018850:	4b0b      	ldr	r3, [pc, #44]	; (8018880 <mbedtls_ssl_parse_certificate+0x598>)
 8018852:	9300      	str	r3, [sp, #0]
 8018854:	f241 237d 	movw	r3, #4733	; 0x127d
 8018858:	4a0a      	ldr	r2, [pc, #40]	; (8018884 <mbedtls_ssl_parse_certificate+0x59c>)
 801885a:	2103      	movs	r1, #3
 801885c:	6878      	ldr	r0, [r7, #4]
 801885e:	f7f3 fa4d 	bl	800bcfc <mbedtls_debug_print_msg>
        }
#endif /* MBEDTLS_DEBUG_C */
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 8018862:	4b09      	ldr	r3, [pc, #36]	; (8018888 <mbedtls_ssl_parse_certificate+0x5a0>)
 8018864:	9300      	str	r3, [sp, #0]
 8018866:	f241 2382 	movw	r3, #4738	; 0x1282
 801886a:	4a06      	ldr	r2, [pc, #24]	; (8018884 <mbedtls_ssl_parse_certificate+0x59c>)
 801886c:	2102      	movs	r1, #2
 801886e:	6878      	ldr	r0, [r7, #4]
 8018870:	f7f3 fa44 	bl	800bcfc <mbedtls_debug_print_msg>

    return( ret );
 8018874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018876:	4618      	mov	r0, r3
 8018878:	3728      	adds	r7, #40	; 0x28
 801887a:	46bd      	mov	sp, r7
 801887c:	bdb0      	pop	{r4, r5, r7, pc}
 801887e:	bf00      	nop
 8018880:	08024084 	.word	0x08024084
 8018884:	080234fc 	.word	0x080234fc
 8018888:	080240ac 	.word	0x080240ac

0801888c <mbedtls_ssl_write_change_cipher_spec>:
          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

int mbedtls_ssl_write_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b086      	sub	sp, #24
 8018890:	af02      	add	r7, sp, #8
 8018892:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 8018894:	4b1e      	ldr	r3, [pc, #120]	; (8018910 <mbedtls_ssl_write_change_cipher_spec+0x84>)
 8018896:	9300      	str	r3, [sp, #0]
 8018898:	f241 2392 	movw	r3, #4754	; 0x1292
 801889c:	4a1d      	ldr	r2, [pc, #116]	; (8018914 <mbedtls_ssl_write_change_cipher_spec+0x88>)
 801889e:	2102      	movs	r1, #2
 80188a0:	6878      	ldr	r0, [r7, #4]
 80188a2:	f7f3 fa2b 	bl	800bcfc <mbedtls_debug_print_msg>

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	2214      	movs	r2, #20
 80188aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msglen  = 1;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2201      	movs	r2, #1
 80188b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80188bc:	2201      	movs	r2, #1
 80188be:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	685b      	ldr	r3, [r3, #4]
 80188c4:	1c5a      	adds	r2, r3, #1
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80188ca:	6878      	ldr	r0, [r7, #4]
 80188cc:	f7fe fee0 	bl	8017690 <mbedtls_ssl_write_record>
 80188d0:	60f8      	str	r0, [r7, #12]
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d00c      	beq.n	80188f2 <mbedtls_ssl_write_change_cipher_spec+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	9301      	str	r3, [sp, #4]
 80188dc:	4b0e      	ldr	r3, [pc, #56]	; (8018918 <mbedtls_ssl_write_change_cipher_spec+0x8c>)
 80188de:	9300      	str	r3, [sp, #0]
 80188e0:	f241 239c 	movw	r3, #4764	; 0x129c
 80188e4:	4a0b      	ldr	r2, [pc, #44]	; (8018914 <mbedtls_ssl_write_change_cipher_spec+0x88>)
 80188e6:	2101      	movs	r1, #1
 80188e8:	6878      	ldr	r0, [r7, #4]
 80188ea:	f7f3 fa8d 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	e009      	b.n	8018906 <mbedtls_ssl_write_change_cipher_spec+0x7a>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 80188f2:	4b0a      	ldr	r3, [pc, #40]	; (801891c <mbedtls_ssl_write_change_cipher_spec+0x90>)
 80188f4:	9300      	str	r3, [sp, #0]
 80188f6:	f44f 5395 	mov.w	r3, #4768	; 0x12a0
 80188fa:	4a06      	ldr	r2, [pc, #24]	; (8018914 <mbedtls_ssl_write_change_cipher_spec+0x88>)
 80188fc:	2102      	movs	r1, #2
 80188fe:	6878      	ldr	r0, [r7, #4]
 8018900:	f7f3 f9fc 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 8018904:	2300      	movs	r3, #0
}
 8018906:	4618      	mov	r0, r3
 8018908:	3710      	adds	r7, #16
 801890a:	46bd      	mov	sp, r7
 801890c:	bd80      	pop	{r7, pc}
 801890e:	bf00      	nop
 8018910:	080240c4 	.word	0x080240c4
 8018914:	080234fc 	.word	0x080234fc
 8018918:	08023ebc 	.word	0x08023ebc
 801891c:	080240e0 	.word	0x080240e0

08018920 <mbedtls_ssl_parse_change_cipher_spec>:

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b086      	sub	sp, #24
 8018924:	af02      	add	r7, sp, #8
 8018926:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 8018928:	4b44      	ldr	r3, [pc, #272]	; (8018a3c <mbedtls_ssl_parse_change_cipher_spec+0x11c>)
 801892a:	9300      	str	r3, [sp, #0]
 801892c:	f241 23a9 	movw	r3, #4777	; 0x12a9
 8018930:	4a43      	ldr	r2, [pc, #268]	; (8018a40 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 8018932:	2102      	movs	r1, #2
 8018934:	6878      	ldr	r0, [r7, #4]
 8018936:	f7f3 f9e1 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801893a:	6878      	ldr	r0, [r7, #4]
 801893c:	f7ff f9b6 	bl	8017cac <mbedtls_ssl_read_record>
 8018940:	60f8      	str	r0, [r7, #12]
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d00c      	beq.n	8018962 <mbedtls_ssl_parse_change_cipher_spec+0x42>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	9301      	str	r3, [sp, #4]
 801894c:	4b3d      	ldr	r3, [pc, #244]	; (8018a44 <mbedtls_ssl_parse_change_cipher_spec+0x124>)
 801894e:	9300      	str	r3, [sp, #0]
 8018950:	f241 23ad 	movw	r3, #4781	; 0x12ad
 8018954:	4a3a      	ldr	r2, [pc, #232]	; (8018a40 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 8018956:	2101      	movs	r1, #1
 8018958:	6878      	ldr	r0, [r7, #4]
 801895a:	f7f3 fa55 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	e068      	b.n	8018a34 <mbedtls_ssl_parse_change_cipher_spec+0x114>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018966:	2b14      	cmp	r3, #20
 8018968:	d00f      	beq.n	801898a <mbedtls_ssl_parse_change_cipher_spec+0x6a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801896a:	4b37      	ldr	r3, [pc, #220]	; (8018a48 <mbedtls_ssl_parse_change_cipher_spec+0x128>)
 801896c:	9300      	str	r3, [sp, #0]
 801896e:	f241 23b3 	movw	r3, #4787	; 0x12b3
 8018972:	4a33      	ldr	r2, [pc, #204]	; (8018a40 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 8018974:	2101      	movs	r1, #1
 8018976:	6878      	ldr	r0, [r7, #4]
 8018978:	f7f3 f9c0 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801897c:	220a      	movs	r2, #10
 801897e:	2102      	movs	r1, #2
 8018980:	6878      	ldr	r0, [r7, #4]
 8018982:	f7ff fb2f 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8018986:	4b31      	ldr	r3, [pc, #196]	; (8018a4c <mbedtls_ssl_parse_change_cipher_spec+0x12c>)
 8018988:	e054      	b.n	8018a34 <mbedtls_ssl_parse_change_cipher_spec+0x114>
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801898e:	2b01      	cmp	r3, #1
 8018990:	d104      	bne.n	801899c <mbedtls_ssl_parse_change_cipher_spec+0x7c>
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018996:	781b      	ldrb	r3, [r3, #0]
 8018998:	2b01      	cmp	r3, #1
 801899a:	d00f      	beq.n	80189bc <mbedtls_ssl_parse_change_cipher_spec+0x9c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801899c:	4b2a      	ldr	r3, [pc, #168]	; (8018a48 <mbedtls_ssl_parse_change_cipher_spec+0x128>)
 801899e:	9300      	str	r3, [sp, #0]
 80189a0:	f241 23bb 	movw	r3, #4795	; 0x12bb
 80189a4:	4a26      	ldr	r2, [pc, #152]	; (8018a40 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 80189a6:	2101      	movs	r1, #1
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	f7f3 f9a7 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80189ae:	2232      	movs	r2, #50	; 0x32
 80189b0:	2102      	movs	r1, #2
 80189b2:	6878      	ldr	r0, [r7, #4]
 80189b4:	f7ff fb16 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 80189b8:	4b25      	ldr	r3, [pc, #148]	; (8018a50 <mbedtls_ssl_parse_change_cipher_spec+0x130>)
 80189ba:	e03b      	b.n	8018a34 <mbedtls_ssl_parse_change_cipher_spec+0x114>

    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 80189bc:	4b25      	ldr	r3, [pc, #148]	; (8018a54 <mbedtls_ssl_parse_change_cipher_spec+0x134>)
 80189be:	9300      	str	r3, [sp, #0]
 80189c0:	f241 23c5 	movw	r3, #4805	; 0x12c5
 80189c4:	4a1e      	ldr	r2, [pc, #120]	; (8018a40 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 80189c6:	2103      	movs	r1, #3
 80189c8:	6878      	ldr	r0, [r7, #4]
 80189ca:	f7f3 f997 	bl	800bcfc <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	635a      	str	r2, [r3, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	621a      	str	r2, [r3, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80189e2:	2208      	movs	r2, #8
 80189e4:	2100      	movs	r1, #0
 80189e6:	4618      	mov	r0, r3
 80189e8:	f005 fe1c 	bl	801e624 <memset>

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	68db      	ldr	r3, [r3, #12]
 80189f0:	2b01      	cmp	r3, #1
 80189f2:	dd0c      	ble.n	8018a0e <mbedtls_ssl_parse_change_cipher_spec+0xee>
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80189fc:	68d9      	ldr	r1, [r3, #12]
                      ssl->transform_negotiate->fixed_ivlen;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a02:	691b      	ldr	r3, [r3, #16]
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 8018a04:	1acb      	subs	r3, r1, r3
 8018a06:	441a      	add	r2, r3
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	665a      	str	r2, [r3, #100]	; 0x64
 8018a0c:	e003      	b.n	8018a16 <mbedtls_ssl_parse_change_cipher_spec+0xf6>
    }
    else
        ssl->in_msg = ssl->in_iv;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	665a      	str	r2, [r3, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	685b      	ldr	r3, [r3, #4]
 8018a1a:	1c5a      	adds	r2, r3, #1
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	605a      	str	r2, [r3, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 8018a20:	4b0d      	ldr	r3, [pc, #52]	; (8018a58 <mbedtls_ssl_parse_change_cipher_spec+0x138>)
 8018a22:	9300      	str	r3, [sp, #0]
 8018a24:	f241 23f7 	movw	r3, #4855	; 0x12f7
 8018a28:	4a05      	ldr	r2, [pc, #20]	; (8018a40 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 8018a2a:	2102      	movs	r1, #2
 8018a2c:	6878      	ldr	r0, [r7, #4]
 8018a2e:	f7f3 f965 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 8018a32:	2300      	movs	r3, #0
}
 8018a34:	4618      	mov	r0, r3
 8018a36:	3710      	adds	r7, #16
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}
 8018a3c:	080240fc 	.word	0x080240fc
 8018a40:	080234fc 	.word	0x080234fc
 8018a44:	08023fa0 	.word	0x08023fa0
 8018a48:	08024118 	.word	0x08024118
 8018a4c:	ffff8900 	.word	0xffff8900
 8018a50:	ffff8200 	.word	0xffff8200
 8018a54:	08024138 	.word	0x08024138
 8018a58:	0802416c 	.word	0x0802416c

08018a5c <mbedtls_ssl_optimize_checksum>:

void mbedtls_ssl_optimize_checksum( mbedtls_ssl_context *ssl,
                            const mbedtls_ssl_ciphersuite_t *ciphersuite_info )
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b084      	sub	sp, #16
 8018a60:	af02      	add	r7, sp, #8
 8018a62:	6078      	str	r0, [r7, #4]
 8018a64:	6039      	str	r1, [r7, #0]
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	7a5b      	ldrb	r3, [r3, #9]
 8018a6a:	2b07      	cmp	r3, #7
 8018a6c:	d004      	beq.n	8018a78 <mbedtls_ssl_optimize_checksum+0x1c>
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a72:	4a08      	ldr	r2, [pc, #32]	; (8018a94 <mbedtls_ssl_optimize_checksum+0x38>)
 8018a74:	675a      	str	r2, [r3, #116]	; 0x74
 8018a76:	e009      	b.n	8018a8c <mbedtls_ssl_optimize_checksum+0x30>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8018a78:	4b07      	ldr	r3, [pc, #28]	; (8018a98 <mbedtls_ssl_optimize_checksum+0x3c>)
 8018a7a:	9300      	str	r3, [sp, #0]
 8018a7c:	f241 3314 	movw	r3, #4884	; 0x1314
 8018a80:	4a06      	ldr	r2, [pc, #24]	; (8018a9c <mbedtls_ssl_optimize_checksum+0x40>)
 8018a82:	2101      	movs	r1, #1
 8018a84:	6878      	ldr	r0, [r7, #4]
 8018a86:	f7f3 f939 	bl	800bcfc <mbedtls_debug_print_msg>
        return;
 8018a8a:	bf00      	nop
    }
}
 8018a8c:	3708      	adds	r7, #8
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}
 8018a92:	bf00      	nop
 8018a94:	08018ac5 	.word	0x08018ac5
 8018a98:	080235a0 	.word	0x080235a0
 8018a9c:	080234fc 	.word	0x080234fc

08018aa0 <ssl_update_checksum_start>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b084      	sub	sp, #16
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	60f8      	str	r0, [r7, #12]
 8018aa8:	60b9      	str	r1, [r7, #8]
 8018aaa:	607a      	str	r2, [r7, #4]
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ab0:	3308      	adds	r3, #8
 8018ab2:	687a      	ldr	r2, [r7, #4]
 8018ab4:	68b9      	ldr	r1, [r7, #8]
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	f7fa fe5e 	bl	8013778 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 8018abc:	bf00      	nop
 8018abe:	3710      	adds	r7, #16
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	bd80      	pop	{r7, pc}

08018ac4 <ssl_update_checksum_sha256>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	b084      	sub	sp, #16
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	60f8      	str	r0, [r7, #12]
 8018acc:	60b9      	str	r1, [r7, #8]
 8018ace:	607a      	str	r2, [r7, #4]
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ad4:	3308      	adds	r3, #8
 8018ad6:	687a      	ldr	r2, [r7, #4]
 8018ad8:	68b9      	ldr	r1, [r7, #8]
 8018ada:	4618      	mov	r0, r3
 8018adc:	f7fa fe4c 	bl	8013778 <mbedtls_sha256_update_ret>
}
 8018ae0:	bf00      	nop
 8018ae2:	3710      	adds	r7, #16
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd80      	pop	{r7, pc}

08018ae8 <ssl_calc_finished_tls_sha256>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8018ae8:	b590      	push	{r4, r7, lr}
 8018aea:	b0af      	sub	sp, #188	; 0xbc
 8018aec:	af04      	add	r7, sp, #16
 8018aee:	60f8      	str	r0, [r7, #12]
 8018af0:	60b9      	str	r1, [r7, #8]
 8018af2:	607a      	str	r2, [r7, #4]
    int len = 12;
 8018af4:	230c      	movs	r3, #12
 8018af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if( !session )
 8018b02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d103      	bne.n	8018b12 <ssl_calc_finished_tls_sha256+0x2a>
        session = ssl->session;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    mbedtls_sha256_init( &sha256 );
 8018b12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018b16:	4618      	mov	r0, r3
 8018b18:	f7f9 f84c 	bl	8011bb4 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 8018b1c:	4b36      	ldr	r3, [pc, #216]	; (8018bf8 <ssl_calc_finished_tls_sha256+0x110>)
 8018b1e:	9300      	str	r3, [sp, #0]
 8018b20:	f241 33f8 	movw	r3, #5112	; 0x13f8
 8018b24:	4a35      	ldr	r2, [pc, #212]	; (8018bfc <ssl_calc_finished_tls_sha256+0x114>)
 8018b26:	2102      	movs	r1, #2
 8018b28:	68f8      	ldr	r0, [r7, #12]
 8018b2a:	f7f3 f8e7 	bl	800bcfc <mbedtls_debug_print_msg>

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b32:	f103 0208 	add.w	r2, r3, #8
 8018b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018b3a:	4611      	mov	r1, r2
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	f7f9 f856 	bl	8011bee <mbedtls_sha256_clone>
     *   hash = PRF( master, finished_label,
     *               Hash( handshake ) )[0.11]
     */

#if !defined(MBEDTLS_SHA256_ALT)
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 8018b42:	2320      	movs	r3, #32
 8018b44:	9302      	str	r3, [sp, #8]
 8018b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018b4a:	3308      	adds	r3, #8
 8018b4c:	9301      	str	r3, [sp, #4]
 8018b4e:	4b2c      	ldr	r3, [pc, #176]	; (8018c00 <ssl_calc_finished_tls_sha256+0x118>)
 8018b50:	9300      	str	r3, [sp, #0]
 8018b52:	f241 4303 	movw	r3, #5123	; 0x1403
 8018b56:	4a29      	ldr	r2, [pc, #164]	; (8018bfc <ssl_calc_finished_tls_sha256+0x114>)
 8018b58:	2104      	movs	r1, #4
 8018b5a:	68f8      	ldr	r0, [r7, #12]
 8018b5c:	f7f3 f9c0 	bl	800bee0 <mbedtls_debug_print_buf>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d101      	bne.n	8018b6a <ssl_calc_finished_tls_sha256+0x82>
 8018b66:	4b27      	ldr	r3, [pc, #156]	; (8018c04 <ssl_calc_finished_tls_sha256+0x11c>)
 8018b68:	e000      	b.n	8018b6c <ssl_calc_finished_tls_sha256+0x84>
 8018b6a:	4b27      	ldr	r3, [pc, #156]	; (8018c08 <ssl_calc_finished_tls_sha256+0x120>)
 8018b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
             ? "client finished"
             : "server finished";

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8018b70:	f107 0210 	add.w	r2, r7, #16
 8018b74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018b78:	4611      	mov	r1, r2
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	f7fa fe72 	bl	8013864 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b84:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8018b88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018b8c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8018b90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018b94:	f107 0210 	add.w	r2, r7, #16
 8018b98:	9302      	str	r3, [sp, #8]
 8018b9a:	68bb      	ldr	r3, [r7, #8]
 8018b9c:	9301      	str	r3, [sp, #4]
 8018b9e:	2320      	movs	r3, #32
 8018ba0:	9300      	str	r3, [sp, #0]
 8018ba2:	4613      	mov	r3, r2
 8018ba4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018ba8:	2130      	movs	r1, #48	; 0x30
 8018baa:	47a0      	blx	r4
                             padbuf, 32, buf, len );

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 8018bac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018bb0:	9302      	str	r3, [sp, #8]
 8018bb2:	68bb      	ldr	r3, [r7, #8]
 8018bb4:	9301      	str	r3, [sp, #4]
 8018bb6:	4b15      	ldr	r3, [pc, #84]	; (8018c0c <ssl_calc_finished_tls_sha256+0x124>)
 8018bb8:	9300      	str	r3, [sp, #0]
 8018bba:	f241 4310 	movw	r3, #5136	; 0x1410
 8018bbe:	4a0f      	ldr	r2, [pc, #60]	; (8018bfc <ssl_calc_finished_tls_sha256+0x114>)
 8018bc0:	2103      	movs	r1, #3
 8018bc2:	68f8      	ldr	r0, [r7, #12]
 8018bc4:	f7f3 f98c 	bl	800bee0 <mbedtls_debug_print_buf>

    mbedtls_sha256_free( &sha256 );
 8018bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018bcc:	4618      	mov	r0, r3
 8018bce:	f7f8 fffe 	bl	8011bce <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 8018bd2:	f107 0310 	add.w	r3, r7, #16
 8018bd6:	2120      	movs	r1, #32
 8018bd8:	4618      	mov	r0, r3
 8018bda:	f7fc fe12 	bl	8015802 <mbedtls_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 8018bde:	4b0c      	ldr	r3, [pc, #48]	; (8018c10 <ssl_calc_finished_tls_sha256+0x128>)
 8018be0:	9300      	str	r3, [sp, #0]
 8018be2:	f241 4316 	movw	r3, #5142	; 0x1416
 8018be6:	4a05      	ldr	r2, [pc, #20]	; (8018bfc <ssl_calc_finished_tls_sha256+0x114>)
 8018be8:	2102      	movs	r1, #2
 8018bea:	68f8      	ldr	r0, [r7, #12]
 8018bec:	f7f3 f886 	bl	800bcfc <mbedtls_debug_print_msg>
}
 8018bf0:	bf00      	nop
 8018bf2:	37ac      	adds	r7, #172	; 0xac
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bd90      	pop	{r4, r7, pc}
 8018bf8:	08024188 	.word	0x08024188
 8018bfc:	080234fc 	.word	0x080234fc
 8018c00:	080241a8 	.word	0x080241a8
 8018c04:	080241bc 	.word	0x080241bc
 8018c08:	080241cc 	.word	0x080241cc
 8018c0c:	080241dc 	.word	0x080241dc
 8018c10:	080241f4 	.word	0x080241f4

08018c14 <ssl_handshake_wrapup_free_hs_transform>:
}
#endif /* MBEDTLS_SHA512_C */
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

static void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl )
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b084      	sub	sp, #16
 8018c18:	af02      	add	r7, sp, #8
 8018c1a:	6078      	str	r0, [r7, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 8018c1c:	4b1b      	ldr	r3, [pc, #108]	; (8018c8c <ssl_handshake_wrapup_free_hs_transform+0x78>)
 8018c1e:	9300      	str	r3, [sp, #0]
 8018c20:	f241 434e 	movw	r3, #5198	; 0x144e
 8018c24:	4a1a      	ldr	r2, [pc, #104]	; (8018c90 <ssl_handshake_wrapup_free_hs_transform+0x7c>)
 8018c26:	2103      	movs	r1, #3
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f7f3 f867 	bl	800bcfc <mbedtls_debug_print_msg>

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c32:	4618      	mov	r0, r3
 8018c34:	f000 ff0c 	bl	8019a50 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f005 fcb1 	bl	801e5a4 <free>
    ssl->handshake = NULL;
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	2200      	movs	r2, #0
 8018c46:	631a      	str	r2, [r3, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d009      	beq.n	8018c64 <ssl_handshake_wrapup_free_hs_transform+0x50>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c54:	4618      	mov	r0, r3
 8018c56:	f000 fed7 	bl	8019a08 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f005 fca0 	bl	801e5a4 <free>
    }
    ssl->transform = ssl->transform_negotiate;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	63da      	str	r2, [r3, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	2200      	movs	r2, #0
 8018c70:	641a      	str	r2, [r3, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 8018c72:	4b08      	ldr	r3, [pc, #32]	; (8018c94 <ssl_handshake_wrapup_free_hs_transform+0x80>)
 8018c74:	9300      	str	r3, [sp, #0]
 8018c76:	f241 4362 	movw	r3, #5218	; 0x1462
 8018c7a:	4a05      	ldr	r2, [pc, #20]	; (8018c90 <ssl_handshake_wrapup_free_hs_transform+0x7c>)
 8018c7c:	2103      	movs	r1, #3
 8018c7e:	6878      	ldr	r0, [r7, #4]
 8018c80:	f7f3 f83c 	bl	800bcfc <mbedtls_debug_print_msg>
}
 8018c84:	bf00      	nop
 8018c86:	3708      	adds	r7, #8
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	bd80      	pop	{r7, pc}
 8018c8c:	08024208 	.word	0x08024208
 8018c90:	080234fc 	.word	0x080234fc
 8018c94:	08024228 	.word	0x08024228

08018c98 <mbedtls_ssl_handshake_wrapup>:

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b086      	sub	sp, #24
 8018c9c:	af02      	add	r7, sp, #8
 8018c9e:	6078      	str	r0, [r7, #4]
    int resume = ssl->handshake->resume;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ca4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8018ca8:	60fb      	str	r3, [r7, #12]

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 8018caa:	4b2b      	ldr	r3, [pc, #172]	; (8018d58 <mbedtls_ssl_handshake_wrapup+0xc0>)
 8018cac:	9300      	str	r3, [sp, #0]
 8018cae:	f241 4369 	movw	r3, #5225	; 0x1469
 8018cb2:	4a2a      	ldr	r2, [pc, #168]	; (8018d5c <mbedtls_ssl_handshake_wrapup+0xc4>)
 8018cb4:	2103      	movs	r1, #3
 8018cb6:	6878      	ldr	r0, [r7, #4]
 8018cb8:	f7f3 f820 	bl	800bcfc <mbedtls_debug_print_msg>
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d009      	beq.n	8018cd8 <mbedtls_ssl_handshake_wrapup+0x40>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f000 fed7 	bl	8019a7c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	f005 fc66 	bl	801e5a4 <free>
    }
    ssl->session = ssl->session_negotiate;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	629a      	str	r2, [r3, #40]	; 0x28
    ssl->session_negotiate = NULL;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	62da      	str	r2, [r3, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d01d      	beq.n	8018d2c <mbedtls_ssl_handshake_wrapup+0x94>
        ssl->session->id_len != 0 &&
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cf4:	689b      	ldr	r3, [r3, #8]
    if( ssl->conf->f_set_cache != NULL &&
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d018      	beq.n	8018d2c <mbedtls_ssl_handshake_wrapup+0x94>
        ssl->session->id_len != 0 &&
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d115      	bne.n	8018d2c <mbedtls_ssl_handshake_wrapup+0x94>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d06:	687a      	ldr	r2, [r7, #4]
 8018d08:	6812      	ldr	r2, [r2, #0]
 8018d0a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8018d0c:	687a      	ldr	r2, [r7, #4]
 8018d0e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8018d10:	4611      	mov	r1, r2
 8018d12:	4798      	blx	r3
 8018d14:	4603      	mov	r3, r0
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d008      	beq.n	8018d2c <mbedtls_ssl_handshake_wrapup+0x94>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 8018d1a:	4b11      	ldr	r3, [pc, #68]	; (8018d60 <mbedtls_ssl_handshake_wrapup+0xc8>)
 8018d1c:	9300      	str	r3, [sp, #0]
 8018d1e:	f241 438c 	movw	r3, #5260	; 0x148c
 8018d22:	4a0e      	ldr	r2, [pc, #56]	; (8018d5c <mbedtls_ssl_handshake_wrapup+0xc4>)
 8018d24:	2101      	movs	r1, #1
 8018d26:	6878      	ldr	r0, [r7, #4]
 8018d28:	f7f2 ffe8 	bl	800bcfc <mbedtls_debug_print_msg>
         * we need the handshake and transform structures for that */
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip freeing handshake and transform" ) );
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f7ff ff71 	bl	8018c14 <ssl_handshake_wrapup_free_hs_transform>

    ssl->state++;
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	685b      	ldr	r3, [r3, #4]
 8018d36:	1c5a      	adds	r2, r3, #1
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	605a      	str	r2, [r3, #4]

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 8018d3c:	4b09      	ldr	r3, [pc, #36]	; (8018d64 <mbedtls_ssl_handshake_wrapup+0xcc>)
 8018d3e:	9300      	str	r3, [sp, #0]
 8018d40:	f44f 53a5 	mov.w	r3, #5280	; 0x14a0
 8018d44:	4a05      	ldr	r2, [pc, #20]	; (8018d5c <mbedtls_ssl_handshake_wrapup+0xc4>)
 8018d46:	2103      	movs	r1, #3
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	f7f2 ffd7 	bl	800bcfc <mbedtls_debug_print_msg>
}
 8018d4e:	bf00      	nop
 8018d50:	3710      	adds	r7, #16
 8018d52:	46bd      	mov	sp, r7
 8018d54:	bd80      	pop	{r7, pc}
 8018d56:	bf00      	nop
 8018d58:	08024248 	.word	0x08024248
 8018d5c:	080234fc 	.word	0x080234fc
 8018d60:	0802425c 	.word	0x0802425c
 8018d64:	08024278 	.word	0x08024278

08018d68 <mbedtls_ssl_write_finished>:

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b086      	sub	sp, #24
 8018d6c:	af02      	add	r7, sp, #8
 8018d6e:	6078      	str	r0, [r7, #4]
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 8018d70:	4b4d      	ldr	r3, [pc, #308]	; (8018ea8 <mbedtls_ssl_write_finished+0x140>)
 8018d72:	9300      	str	r3, [sp, #0]
 8018d74:	f241 43a7 	movw	r3, #5287	; 0x14a7
 8018d78:	4a4c      	ldr	r2, [pc, #304]	; (8018eac <mbedtls_ssl_write_finished+0x144>)
 8018d7a:	2102      	movs	r1, #2
 8018d7c:	6878      	ldr	r0, [r7, #4]
 8018d7e:	f7f2 ffbd 	bl	800bcfc <mbedtls_debug_print_msg>

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	68db      	ldr	r3, [r3, #12]
 8018d86:	2b01      	cmp	r3, #1
 8018d88:	dd0e      	ble.n	8018da8 <mbedtls_ssl_write_finished+0x40>
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d94:	68d9      	ldr	r1, [r3, #12]
                       ssl->transform_negotiate->fixed_ivlen;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d9a:	691b      	ldr	r3, [r3, #16]
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 8018d9c:	1acb      	subs	r3, r1, r3
 8018d9e:	441a      	add	r2, r3
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8018da6:	e005      	b.n	8018db4 <mbedtls_ssl_write_finished+0x4c>
    }
    else
        ssl->out_msg = ssl->out_iv;
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018dba:	687a      	ldr	r2, [r7, #4]
 8018dbc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8018dc0:	1d11      	adds	r1, r2, #4
 8018dc2:	687a      	ldr	r2, [r7, #4]
 8018dc4:	6812      	ldr	r2, [r2, #0]
 8018dc6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8018dca:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8018dce:	b2d2      	uxtb	r2, r2
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	68db      	ldr	r3, [r3, #12]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d101      	bne.n	8018de0 <mbedtls_ssl_write_finished+0x78>
 8018ddc:	2324      	movs	r3, #36	; 0x24
 8018dde:	e000      	b.n	8018de2 <mbedtls_ssl_write_finished+0x7a>
 8018de0:	230c      	movs	r3, #12
 8018de2:	60fb      	str	r3, [r7, #12]
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	3304      	adds	r3, #4
 8018de8:	461a      	mov	r2, r3
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	2216      	movs	r2, #22
 8018df4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018dfe:	2214      	movs	r2, #20
 8018e00:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d00c      	beq.n	8018e28 <mbedtls_ssl_write_finished+0xc0>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018e16:	f003 0301 	and.w	r3, r3, #1
 8018e1a:	b2db      	uxtb	r3, r3
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d108      	bne.n	8018e32 <mbedtls_ssl_write_finished+0xca>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	220f      	movs	r2, #15
 8018e24:	605a      	str	r2, [r3, #4]
 8018e26:	e004      	b.n	8018e32 <mbedtls_ssl_write_finished+0xca>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	685b      	ldr	r3, [r3, #4]
 8018e2c:	1c5a      	adds	r2, r3, #1
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	605a      	str	r2, [r3, #4]

    /*
     * Switch to our negotiated transform and session parameters for outbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 8018e32:	4b1f      	ldr	r3, [pc, #124]	; (8018eb0 <mbedtls_ssl_write_finished+0x148>)
 8018e34:	9300      	str	r3, [sp, #0]
 8018e36:	f241 43dd 	movw	r3, #5341	; 0x14dd
 8018e3a:	4a1c      	ldr	r2, [pc, #112]	; (8018eac <mbedtls_ssl_write_finished+0x144>)
 8018e3c:	2103      	movs	r1, #3
 8018e3e:	6878      	ldr	r0, [r7, #4]
 8018e40:	f7f2 ff5c 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018e4a:	2208      	movs	r2, #8
 8018e4c:	2100      	movs	r1, #0
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f005 fbe8 	bl	801e624 <memset>

    ssl->transform_out = ssl->transform_negotiate;
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	639a      	str	r2, [r3, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8018e64:	6878      	ldr	r0, [r7, #4]
 8018e66:	f7fe fc13 	bl	8017690 <mbedtls_ssl_write_record>
 8018e6a:	60b8      	str	r0, [r7, #8]
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d00c      	beq.n	8018e8c <mbedtls_ssl_write_finished+0x124>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8018e72:	68bb      	ldr	r3, [r7, #8]
 8018e74:	9301      	str	r3, [sp, #4]
 8018e76:	4b0f      	ldr	r3, [pc, #60]	; (8018eb4 <mbedtls_ssl_write_finished+0x14c>)
 8018e78:	9300      	str	r3, [sp, #0]
 8018e7a:	f241 5310 	movw	r3, #5392	; 0x1510
 8018e7e:	4a0b      	ldr	r2, [pc, #44]	; (8018eac <mbedtls_ssl_write_finished+0x144>)
 8018e80:	2101      	movs	r1, #1
 8018e82:	6878      	ldr	r0, [r7, #4]
 8018e84:	f7f2 ffc0 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8018e88:	68bb      	ldr	r3, [r7, #8]
 8018e8a:	e009      	b.n	8018ea0 <mbedtls_ssl_write_finished+0x138>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 8018e8c:	4b0a      	ldr	r3, [pc, #40]	; (8018eb8 <mbedtls_ssl_write_finished+0x150>)
 8018e8e:	9300      	str	r3, [sp, #0]
 8018e90:	f241 5314 	movw	r3, #5396	; 0x1514
 8018e94:	4a05      	ldr	r2, [pc, #20]	; (8018eac <mbedtls_ssl_write_finished+0x144>)
 8018e96:	2102      	movs	r1, #2
 8018e98:	6878      	ldr	r0, [r7, #4]
 8018e9a:	f7f2 ff2f 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 8018e9e:	2300      	movs	r3, #0
}
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	3710      	adds	r7, #16
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	bd80      	pop	{r7, pc}
 8018ea8:	0802428c 	.word	0x0802428c
 8018eac:	080234fc 	.word	0x080234fc
 8018eb0:	080242a0 	.word	0x080242a0
 8018eb4:	08023ebc 	.word	0x08023ebc
 8018eb8:	080242d4 	.word	0x080242d4

08018ebc <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 8018ebc:	b590      	push	{r4, r7, lr}
 8018ebe:	b08b      	sub	sp, #44	; 0x2c
 8018ec0:	af02      	add	r7, sp, #8
 8018ec2:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 8018ec4:	4b54      	ldr	r3, [pc, #336]	; (8019018 <mbedtls_ssl_parse_finished+0x15c>)
 8018ec6:	9300      	str	r3, [sp, #0]
 8018ec8:	f241 5325 	movw	r3, #5413	; 0x1525
 8018ecc:	4a53      	ldr	r2, [pc, #332]	; (801901c <mbedtls_ssl_parse_finished+0x160>)
 8018ece:	2102      	movs	r1, #2
 8018ed0:	6878      	ldr	r0, [r7, #4]
 8018ed2:	f7f2 ff13 	bl	800bcfc <mbedtls_debug_print_msg>

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018edc:	687a      	ldr	r2, [r7, #4]
 8018ede:	6812      	ldr	r2, [r2, #0]
 8018ee0:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8018ee4:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8018ee8:	b2d2      	uxtb	r2, r2
 8018eea:	f082 0201 	eor.w	r2, r2, #1
 8018eee:	b2d2      	uxtb	r2, r2
 8018ef0:	f107 010c 	add.w	r1, r7, #12
 8018ef4:	6878      	ldr	r0, [r7, #4]
 8018ef6:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8018ef8:	6878      	ldr	r0, [r7, #4]
 8018efa:	f7fe fed7 	bl	8017cac <mbedtls_ssl_read_record>
 8018efe:	61f8      	str	r0, [r7, #28]
 8018f00:	69fb      	ldr	r3, [r7, #28]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d00c      	beq.n	8018f20 <mbedtls_ssl_parse_finished+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8018f06:	69fb      	ldr	r3, [r7, #28]
 8018f08:	9301      	str	r3, [sp, #4]
 8018f0a:	4b45      	ldr	r3, [pc, #276]	; (8019020 <mbedtls_ssl_parse_finished+0x164>)
 8018f0c:	9300      	str	r3, [sp, #0]
 8018f0e:	f241 532b 	movw	r3, #5419	; 0x152b
 8018f12:	4a42      	ldr	r2, [pc, #264]	; (801901c <mbedtls_ssl_parse_finished+0x160>)
 8018f14:	2101      	movs	r1, #1
 8018f16:	6878      	ldr	r0, [r7, #4]
 8018f18:	f7f2 ff76 	bl	800be08 <mbedtls_debug_print_ret>
        return( ret );
 8018f1c:	69fb      	ldr	r3, [r7, #28]
 8018f1e:	e076      	b.n	801900e <mbedtls_ssl_parse_finished+0x152>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f24:	2b16      	cmp	r3, #22
 8018f26:	d00f      	beq.n	8018f48 <mbedtls_ssl_parse_finished+0x8c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8018f28:	4b3e      	ldr	r3, [pc, #248]	; (8019024 <mbedtls_ssl_parse_finished+0x168>)
 8018f2a:	9300      	str	r3, [sp, #0]
 8018f2c:	f241 5331 	movw	r3, #5425	; 0x1531
 8018f30:	4a3a      	ldr	r2, [pc, #232]	; (801901c <mbedtls_ssl_parse_finished+0x160>)
 8018f32:	2101      	movs	r1, #1
 8018f34:	6878      	ldr	r0, [r7, #4]
 8018f36:	f7f2 fee1 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018f3a:	220a      	movs	r2, #10
 8018f3c:	2102      	movs	r1, #2
 8018f3e:	6878      	ldr	r0, [r7, #4]
 8018f40:	f7ff f850 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8018f44:	4b38      	ldr	r3, [pc, #224]	; (8019028 <mbedtls_ssl_parse_finished+0x16c>)
 8018f46:	e062      	b.n	801900e <mbedtls_ssl_parse_finished+0x152>
#if defined(MBEDTLS_SSL_PROTO_SSL3)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        hash_len = 36;
    else
#endif
        hash_len = 12;
 8018f48:	230c      	movs	r3, #12
 8018f4a:	61bb      	str	r3, [r7, #24]

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018f50:	781b      	ldrb	r3, [r3, #0]
 8018f52:	2b14      	cmp	r3, #20
 8018f54:	d109      	bne.n	8018f6a <mbedtls_ssl_parse_finished+0xae>
        ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) + hash_len )
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	f7fc fc14 	bl	8015788 <mbedtls_ssl_hs_hdr_len>
 8018f60:	4602      	mov	r2, r0
 8018f62:	69bb      	ldr	r3, [r7, #24]
 8018f64:	4413      	add	r3, r2
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 8018f66:	429c      	cmp	r4, r3
 8018f68:	d00f      	beq.n	8018f8a <mbedtls_ssl_parse_finished+0xce>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8018f6a:	4b2e      	ldr	r3, [pc, #184]	; (8019024 <mbedtls_ssl_parse_finished+0x168>)
 8018f6c:	9300      	str	r3, [sp, #0]
 8018f6e:	f241 5342 	movw	r3, #5442	; 0x1542
 8018f72:	4a2a      	ldr	r2, [pc, #168]	; (801901c <mbedtls_ssl_parse_finished+0x160>)
 8018f74:	2101      	movs	r1, #1
 8018f76:	6878      	ldr	r0, [r7, #4]
 8018f78:	f7f2 fec0 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018f7c:	2232      	movs	r2, #50	; 0x32
 8018f7e:	2102      	movs	r1, #2
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	f7ff f82f 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 8018f86:	4b29      	ldr	r3, [pc, #164]	; (801902c <mbedtls_ssl_parse_finished+0x170>)
 8018f88:	e041      	b.n	801900e <mbedtls_ssl_parse_finished+0x152>
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f7fc fbfa 	bl	8015788 <mbedtls_ssl_hs_hdr_len>
 8018f94:	4603      	mov	r3, r0
 8018f96:	4423      	add	r3, r4
 8018f98:	f107 010c 	add.w	r1, r7, #12
 8018f9c:	69ba      	ldr	r2, [r7, #24]
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f7fc fbfd 	bl	801579e <mbedtls_ssl_safer_memcmp>
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d00f      	beq.n	8018fca <mbedtls_ssl_parse_finished+0x10e>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8018faa:	4b1e      	ldr	r3, [pc, #120]	; (8019024 <mbedtls_ssl_parse_finished+0x168>)
 8018fac:	9300      	str	r3, [sp, #0]
 8018fae:	f241 534b 	movw	r3, #5451	; 0x154b
 8018fb2:	4a1a      	ldr	r2, [pc, #104]	; (801901c <mbedtls_ssl_parse_finished+0x160>)
 8018fb4:	2101      	movs	r1, #1
 8018fb6:	6878      	ldr	r0, [r7, #4]
 8018fb8:	f7f2 fea0 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018fbc:	2232      	movs	r2, #50	; 0x32
 8018fbe:	2102      	movs	r1, #2
 8018fc0:	6878      	ldr	r0, [r7, #4]
 8018fc2:	f7ff f80f 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 8018fc6:	4b19      	ldr	r3, [pc, #100]	; (801902c <mbedtls_ssl_parse_finished+0x170>)
 8018fc8:	e021      	b.n	801900e <mbedtls_ssl_parse_finished+0x152>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d00c      	beq.n	8018ff0 <mbedtls_ssl_parse_finished+0x134>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018fde:	f003 0301 	and.w	r3, r3, #1
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d108      	bne.n	8018ffa <mbedtls_ssl_parse_finished+0x13e>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	220a      	movs	r2, #10
 8018fec:	605a      	str	r2, [r3, #4]
 8018fee:	e004      	b.n	8018ffa <mbedtls_ssl_parse_finished+0x13e>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	685b      	ldr	r3, [r3, #4]
 8018ff4:	1c5a      	adds	r2, r3, #1
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 8018ffa:	4b0d      	ldr	r3, [pc, #52]	; (8019030 <mbedtls_ssl_parse_finished+0x174>)
 8018ffc:	9300      	str	r3, [sp, #0]
 8018ffe:	f241 5369 	movw	r3, #5481	; 0x1569
 8019002:	4a06      	ldr	r2, [pc, #24]	; (801901c <mbedtls_ssl_parse_finished+0x160>)
 8019004:	2102      	movs	r1, #2
 8019006:	6878      	ldr	r0, [r7, #4]
 8019008:	f7f2 fe78 	bl	800bcfc <mbedtls_debug_print_msg>

    return( 0 );
 801900c:	2300      	movs	r3, #0
}
 801900e:	4618      	mov	r0, r3
 8019010:	3724      	adds	r7, #36	; 0x24
 8019012:	46bd      	mov	sp, r7
 8019014:	bd90      	pop	{r4, r7, pc}
 8019016:	bf00      	nop
 8019018:	080242e8 	.word	0x080242e8
 801901c:	080234fc 	.word	0x080234fc
 8019020:	08023fa0 	.word	0x08023fa0
 8019024:	080242fc 	.word	0x080242fc
 8019028:	ffff8900 	.word	0xffff8900
 801902c:	ffff8180 	.word	0xffff8180
 8019030:	08024314 	.word	0x08024314

08019034 <ssl_handshake_params_init>:

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 801903c:	f44f 7284 	mov.w	r2, #264	; 0x108
 8019040:	2100      	movs	r1, #0
 8019042:	6878      	ldr	r0, [r7, #4]
 8019044:	f005 faee 	bl	801e624 <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	3308      	adds	r3, #8
 801904c:	4618      	mov	r0, r3
 801904e:	f7f8 fdb1 	bl	8011bb4 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	3308      	adds	r3, #8
 8019056:	2100      	movs	r1, #0
 8019058:	4618      	mov	r0, r3
 801905a:	f7f8 fdd9 	bl	8011c10 <mbedtls_sha256_starts_ret>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	4a04      	ldr	r2, [pc, #16]	; (8019074 <ssl_handshake_params_init+0x40>)
 8019062:	675a      	str	r2, [r3, #116]	; 0x74

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    mbedtls_ssl_sig_hash_set_init( &handshake->hash_algs );
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	4618      	mov	r0, r3
 8019068:	f7fc fb54 	bl	8015714 <mbedtls_ssl_sig_hash_set_init>
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
#endif
}
 801906c:	bf00      	nop
 801906e:	3708      	adds	r7, #8
 8019070:	46bd      	mov	sp, r7
 8019072:	bd80      	pop	{r7, pc}
 8019074:	08018aa1 	.word	0x08018aa1

08019078 <ssl_transform_init>:

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b082      	sub	sp, #8
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 8019080:	22d0      	movs	r2, #208	; 0xd0
 8019082:	2100      	movs	r1, #0
 8019084:	6878      	ldr	r0, [r7, #4]
 8019086:	f005 facd 	bl	801e624 <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	3350      	adds	r3, #80	; 0x50
 801908e:	4618      	mov	r0, r3
 8019090:	f7f2 f96a 	bl	800b368 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	3390      	adds	r3, #144	; 0x90
 8019098:	4618      	mov	r0, r3
 801909a:	f7f2 f965 	bl	800b368 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	3338      	adds	r3, #56	; 0x38
 80190a2:	4618      	mov	r0, r3
 80190a4:	f7f5 fa80 	bl	800e5a8 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	3344      	adds	r3, #68	; 0x44
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7f5 fa7b 	bl	800e5a8 <mbedtls_md_init>
}
 80190b2:	bf00      	nop
 80190b4:	3708      	adds	r7, #8
 80190b6:	46bd      	mov	sp, r7
 80190b8:	bd80      	pop	{r7, pc}

080190ba <mbedtls_ssl_session_init>:

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
 80190ba:	b580      	push	{r7, lr}
 80190bc:	b082      	sub	sp, #8
 80190be:	af00      	add	r7, sp, #0
 80190c0:	6078      	str	r0, [r7, #4]
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 80190c2:	2264      	movs	r2, #100	; 0x64
 80190c4:	2100      	movs	r1, #0
 80190c6:	6878      	ldr	r0, [r7, #4]
 80190c8:	f005 faac 	bl	801e624 <memset>
}
 80190cc:	bf00      	nop
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <ssl_handshake_init>:

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af02      	add	r7, sp, #8
 80190da:	6078      	str	r0, [r7, #4]
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d004      	beq.n	80190ee <ssl_handshake_init+0x1a>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190e8:	4618      	mov	r0, r3
 80190ea:	f000 fc8d 	bl	8019a08 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d004      	beq.n	8019100 <ssl_handshake_init+0x2c>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190fa:	4618      	mov	r0, r3
 80190fc:	f000 fcbe 	bl	8019a7c <mbedtls_ssl_session_free>
    if( ssl->handshake )
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019104:	2b00      	cmp	r3, #0
 8019106:	d004      	beq.n	8019112 <ssl_handshake_init+0x3e>
        mbedtls_ssl_handshake_free( ssl->handshake );
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801910c:	4618      	mov	r0, r3
 801910e:	f000 fc9f 	bl	8019a50 <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019116:	2b00      	cmp	r3, #0
 8019118:	d107      	bne.n	801912a <ssl_handshake_init+0x56>
    {
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 801911a:	21d0      	movs	r1, #208	; 0xd0
 801911c:	2001      	movs	r0, #1
 801911e:	f005 fa07 	bl	801e530 <calloc>
 8019122:	4603      	mov	r3, r0
 8019124:	461a      	mov	r2, r3
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801912e:	2b00      	cmp	r3, #0
 8019130:	d107      	bne.n	8019142 <ssl_handshake_init+0x6e>
    {
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 8019132:	2164      	movs	r1, #100	; 0x64
 8019134:	2001      	movs	r0, #1
 8019136:	f005 f9fb 	bl	801e530 <calloc>
 801913a:	4603      	mov	r3, r0
 801913c:	461a      	mov	r2, r3
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019146:	2b00      	cmp	r3, #0
 8019148:	d108      	bne.n	801915c <ssl_handshake_init+0x88>
    {
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 801914a:	f44f 7184 	mov.w	r1, #264	; 0x108
 801914e:	2001      	movs	r0, #1
 8019150:	f005 f9ee 	bl	801e530 <calloc>
 8019154:	4603      	mov	r3, r0
 8019156:	461a      	mov	r2, r3
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019160:	2b00      	cmp	r3, #0
 8019162:	d007      	beq.n	8019174 <ssl_handshake_init+0xa0>
        ssl->transform_negotiate == NULL ||
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if( ssl->handshake == NULL ||
 8019168:	2b00      	cmp	r3, #0
 801916a:	d003      	beq.n	8019174 <ssl_handshake_init+0xa0>
        ssl->session_negotiate == NULL )
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        ssl->transform_negotiate == NULL ||
 8019170:	2b00      	cmp	r3, #0
 8019172:	d122      	bne.n	80191ba <ssl_handshake_init+0xe6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 8019174:	4b1b      	ldr	r3, [pc, #108]	; (80191e4 <ssl_handshake_init+0x110>)
 8019176:	9300      	str	r3, [sp, #0]
 8019178:	f241 53d0 	movw	r3, #5584	; 0x15d0
 801917c:	4a1a      	ldr	r2, [pc, #104]	; (80191e8 <ssl_handshake_init+0x114>)
 801917e:	2101      	movs	r1, #1
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f7f2 fdbb 	bl	800bcfc <mbedtls_debug_print_msg>

        mbedtls_free( ssl->handshake );
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801918a:	4618      	mov	r0, r3
 801918c:	f005 fa0a 	bl	801e5a4 <free>
        mbedtls_free( ssl->transform_negotiate );
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019194:	4618      	mov	r0, r3
 8019196:	f005 fa05 	bl	801e5a4 <free>
        mbedtls_free( ssl->session_negotiate );
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801919e:	4618      	mov	r0, r3
 80191a0:	f005 fa00 	bl	801e5a4 <free>

        ssl->handshake = NULL;
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	2200      	movs	r2, #0
 80191a8:	631a      	str	r2, [r3, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	2200      	movs	r2, #0
 80191ae:	641a      	str	r2, [r3, #64]	; 0x40
        ssl->session_negotiate = NULL;
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2200      	movs	r2, #0
 80191b4:	62da      	str	r2, [r3, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80191b6:	4b0d      	ldr	r3, [pc, #52]	; (80191ec <ssl_handshake_init+0x118>)
 80191b8:	e00f      	b.n	80191da <ssl_handshake_init+0x106>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191be:	4618      	mov	r0, r3
 80191c0:	f7ff ff7b 	bl	80190ba <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191c8:	4618      	mov	r0, r3
 80191ca:	f7ff ff55 	bl	8019078 <ssl_transform_init>
    ssl_handshake_params_init( ssl->handshake );
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191d2:	4618      	mov	r0, r3
 80191d4:	f7ff ff2e 	bl	8019034 <ssl_handshake_params_init>

        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
 80191d8:	2300      	movs	r3, #0
}
 80191da:	4618      	mov	r0, r3
 80191dc:	3708      	adds	r7, #8
 80191de:	46bd      	mov	sp, r7
 80191e0:	bd80      	pop	{r7, pc}
 80191e2:	bf00      	nop
 80191e4:	08024328 	.word	0x08024328
 80191e8:	080234fc 	.word	0x080234fc
 80191ec:	ffff8100 	.word	0xffff8100

080191f0 <mbedtls_ssl_init>:

/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	b082      	sub	sp, #8
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 80191f8:	22b4      	movs	r2, #180	; 0xb4
 80191fa:	2100      	movs	r1, #0
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f005 fa11 	bl	801e624 <memset>
}
 8019202:	bf00      	nop
 8019204:	3708      	adds	r7, #8
 8019206:	46bd      	mov	sp, r7
 8019208:	bd80      	pop	{r7, pc}
	...

0801920c <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b086      	sub	sp, #24
 8019210:	af02      	add	r7, sp, #8
 8019212:	6078      	str	r0, [r7, #4]
 8019214:	6039      	str	r1, [r7, #0]
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;
 8019216:	f241 133d 	movw	r3, #4413	; 0x113d
 801921a:	60fb      	str	r3, [r7, #12]

    ssl->conf = conf;
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	683a      	ldr	r2, [r7, #0]
 8019220:	601a      	str	r2, [r3, #0]

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 8019222:	68f9      	ldr	r1, [r7, #12]
 8019224:	2001      	movs	r0, #1
 8019226:	f005 f983 	bl	801e530 <calloc>
 801922a:	4603      	mov	r3, r0
 801922c:	461a      	mov	r2, r3
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	651a      	str	r2, [r3, #80]	; 0x50
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019236:	2b00      	cmp	r3, #0
 8019238:	d00d      	beq.n	8019256 <mbedtls_ssl_setup+0x4a>
        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
 801923a:	68f9      	ldr	r1, [r7, #12]
 801923c:	2001      	movs	r0, #1
 801923e:	f005 f977 	bl	801e530 <calloc>
 8019242:	4603      	mov	r3, r0
 8019244:	461a      	mov	r2, r3
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 8019252:	2b00      	cmp	r3, #0
 8019254:	d114      	bne.n	8019280 <mbedtls_ssl_setup+0x74>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	9301      	str	r3, [sp, #4]
 801925a:	4b31      	ldr	r3, [pc, #196]	; (8019320 <mbedtls_ssl_setup+0x114>)
 801925c:	9300      	str	r3, [sp, #0]
 801925e:	f241 6329 	movw	r3, #5673	; 0x1629
 8019262:	4a30      	ldr	r2, [pc, #192]	; (8019324 <mbedtls_ssl_setup+0x118>)
 8019264:	2101      	movs	r1, #1
 8019266:	6878      	ldr	r0, [r7, #4]
 8019268:	f7f2 fd48 	bl	800bcfc <mbedtls_debug_print_msg>
        mbedtls_free( ssl->in_buf );
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019270:	4618      	mov	r0, r3
 8019272:	f005 f997 	bl	801e5a4 <free>
        ssl->in_buf = NULL;
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	2200      	movs	r2, #0
 801927a:	651a      	str	r2, [r3, #80]	; 0x50
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801927c:	4b2a      	ldr	r3, [pc, #168]	; (8019328 <mbedtls_ssl_setup+0x11c>)
 801927e:	e04b      	b.n	8019318 <mbedtls_ssl_setup+0x10c>
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019292:	f103 0208 	add.w	r2, r3, #8
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80192a2:	f103 020b 	add.w	r2, r3, #11
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80192b2:	f103 020d 	add.w	r2, r3, #13
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80192c2:	f103 020d 	add.w	r2, r3, #13
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	655a      	str	r2, [r3, #84]	; 0x54
        ssl->in_hdr = ssl->in_buf +  8;
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192d8:	f103 0208 	add.w	r2, r3, #8
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	659a      	str	r2, [r3, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192e4:	f103 020b 	add.w	r2, r3, #11
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	65da      	str	r2, [r3, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192f0:	f103 020d 	add.w	r2, r3, #13
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	661a      	str	r2, [r3, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192fc:	f103 020d 	add.w	r2, r3, #13
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	665a      	str	r2, [r3, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 8019304:	6878      	ldr	r0, [r7, #4]
 8019306:	f7ff fee5 	bl	80190d4 <ssl_handshake_init>
 801930a:	60b8      	str	r0, [r7, #8]
 801930c:	68bb      	ldr	r3, [r7, #8]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d001      	beq.n	8019316 <mbedtls_ssl_setup+0x10a>
        return( ret );
 8019312:	68bb      	ldr	r3, [r7, #8]
 8019314:	e000      	b.n	8019318 <mbedtls_ssl_setup+0x10c>

    return( 0 );
 8019316:	2300      	movs	r3, #0
}
 8019318:	4618      	mov	r0, r3
 801931a:	3710      	adds	r7, #16
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}
 8019320:	08023fd0 	.word	0x08023fd0
 8019324:	080234fc 	.word	0x080234fc
 8019328:	ffff8100 	.word	0xffff8100

0801932c <mbedtls_ssl_conf_endpoint>:

/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
 801932c:	b480      	push	{r7}
 801932e:	b083      	sub	sp, #12
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
 8019334:	6039      	str	r1, [r7, #0]
    conf->endpoint   = endpoint;
 8019336:	683b      	ldr	r3, [r7, #0]
 8019338:	f003 0301 	and.w	r3, r3, #1
 801933c:	b2d9      	uxtb	r1, r3
 801933e:	687a      	ldr	r2, [r7, #4]
 8019340:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8019344:	f361 0300 	bfi	r3, r1, #0, #1
 8019348:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 801934c:	bf00      	nop
 801934e:	370c      	adds	r7, #12
 8019350:	46bd      	mov	sp, r7
 8019352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019356:	4770      	bx	lr

08019358 <mbedtls_ssl_conf_transport>:

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
 8019358:	b480      	push	{r7}
 801935a:	b083      	sub	sp, #12
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	6039      	str	r1, [r7, #0]
    conf->transport = transport;
 8019362:	683b      	ldr	r3, [r7, #0]
 8019364:	f003 0301 	and.w	r3, r3, #1
 8019368:	b2d9      	uxtb	r1, r3
 801936a:	687a      	ldr	r2, [r7, #4]
 801936c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8019370:	f361 0341 	bfi	r3, r1, #1, #1
 8019374:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8019378:	bf00      	nop
 801937a:	370c      	adds	r7, #12
 801937c:	46bd      	mov	sp, r7
 801937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019382:	4770      	bx	lr

08019384 <mbedtls_ssl_conf_authmode>:
    conf->hs_timeout_max = max;
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
 8019384:	b480      	push	{r7}
 8019386:	b083      	sub	sp, #12
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
 801938c:	6039      	str	r1, [r7, #0]
    conf->authmode   = authmode;
 801938e:	683b      	ldr	r3, [r7, #0]
 8019390:	f003 0303 	and.w	r3, r3, #3
 8019394:	b2d9      	uxtb	r1, r3
 8019396:	687a      	ldr	r2, [r7, #4]
 8019398:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801939c:	f361 0383 	bfi	r3, r1, #2, #2
 80193a0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 80193a4:	bf00      	nop
 80193a6:	370c      	adds	r7, #12
 80193a8:	46bd      	mov	sp, r7
 80193aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ae:	4770      	bx	lr

080193b0 <mbedtls_ssl_conf_rng>:
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
 80193b0:	b480      	push	{r7}
 80193b2:	b085      	sub	sp, #20
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	60f8      	str	r0, [r7, #12]
 80193b8:	60b9      	str	r1, [r7, #8]
 80193ba:	607a      	str	r2, [r7, #4]
    conf->f_rng      = f_rng;
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	68ba      	ldr	r2, [r7, #8]
 80193c0:	619a      	str	r2, [r3, #24]
    conf->p_rng      = p_rng;
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	687a      	ldr	r2, [r7, #4]
 80193c6:	61da      	str	r2, [r3, #28]
}
 80193c8:	bf00      	nop
 80193ca:	3714      	adds	r7, #20
 80193cc:	46bd      	mov	sp, r7
 80193ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d2:	4770      	bx	lr

080193d4 <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
 80193d4:	b480      	push	{r7}
 80193d6:	b085      	sub	sp, #20
 80193d8:	af00      	add	r7, sp, #0
 80193da:	60f8      	str	r0, [r7, #12]
 80193dc:	60b9      	str	r1, [r7, #8]
 80193de:	607a      	str	r2, [r7, #4]
    conf->f_dbg      = f_dbg;
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	68ba      	ldr	r2, [r7, #8]
 80193e4:	611a      	str	r2, [r3, #16]
    conf->p_dbg      = p_dbg;
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	687a      	ldr	r2, [r7, #4]
 80193ea:	615a      	str	r2, [r3, #20]
}
 80193ec:	bf00      	nop
 80193ee:	3714      	adds	r7, #20
 80193f0:	46bd      	mov	sp, r7
 80193f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f6:	4770      	bx	lr

080193f8 <mbedtls_ssl_set_bio>:
void mbedtls_ssl_set_bio( mbedtls_ssl_context *ssl,
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
 80193f8:	b480      	push	{r7}
 80193fa:	b085      	sub	sp, #20
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	60f8      	str	r0, [r7, #12]
 8019400:	60b9      	str	r1, [r7, #8]
 8019402:	607a      	str	r2, [r7, #4]
 8019404:	603b      	str	r3, [r7, #0]
    ssl->p_bio          = p_bio;
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	68ba      	ldr	r2, [r7, #8]
 801940a:	61da      	str	r2, [r3, #28]
    ssl->f_send         = f_send;
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	687a      	ldr	r2, [r7, #4]
 8019410:	611a      	str	r2, [r3, #16]
    ssl->f_recv         = f_recv;
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	683a      	ldr	r2, [r7, #0]
 8019416:	615a      	str	r2, [r3, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	69ba      	ldr	r2, [r7, #24]
 801941c:	619a      	str	r2, [r3, #24]
}
 801941e:	bf00      	nop
 8019420:	3714      	adds	r7, #20
 8019422:	46bd      	mov	sp, r7
 8019424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019428:	4770      	bx	lr

0801942a <mbedtls_ssl_conf_ca_chain>:
}

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
 801942a:	b480      	push	{r7}
 801942c:	b085      	sub	sp, #20
 801942e:	af00      	add	r7, sp, #0
 8019430:	60f8      	str	r0, [r7, #12]
 8019432:	60b9      	str	r1, [r7, #8]
 8019434:	607a      	str	r2, [r7, #4]
    conf->ca_chain   = ca_chain;
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	68ba      	ldr	r2, [r7, #8]
 801943a:	63da      	str	r2, [r3, #60]	; 0x3c
    conf->ca_crl     = ca_crl;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	687a      	ldr	r2, [r7, #4]
 8019440:	641a      	str	r2, [r3, #64]	; 0x40
}
 8019442:	bf00      	nop
 8019444:	3714      	adds	r7, #20
 8019446:	46bd      	mov	sp, r7
 8019448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944c:	4770      	bx	lr
	...

08019450 <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
 8019450:	b590      	push	{r4, r7, lr}
 8019452:	b085      	sub	sp, #20
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
 8019458:	6039      	str	r1, [r7, #0]
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
 801945a:	2300      	movs	r3, #0
 801945c:	60fb      	str	r3, [r7, #12]

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d008      	beq.n	8019476 <mbedtls_ssl_set_hostname+0x26>
    {
        hostname_len = strlen( hostname );
 8019464:	6838      	ldr	r0, [r7, #0]
 8019466:	f7e6 febd 	bl	80001e4 <strlen>
 801946a:	60f8      	str	r0, [r7, #12]

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	2bff      	cmp	r3, #255	; 0xff
 8019470:	d901      	bls.n	8019476 <mbedtls_ssl_set_hostname+0x26>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8019472:	4b24      	ldr	r3, [pc, #144]	; (8019504 <mbedtls_ssl_set_hostname+0xb4>)
 8019474:	e042      	b.n	80194fc <mbedtls_ssl_set_hostname+0xac>
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801947c:	2b00      	cmp	r3, #0
 801947e:	d013      	beq.n	80194a8 <mbedtls_ssl_set_hostname+0x58>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801948c:	4618      	mov	r0, r3
 801948e:	f7e6 fea9 	bl	80001e4 <strlen>
 8019492:	4603      	mov	r3, r0
 8019494:	4619      	mov	r1, r3
 8019496:	4620      	mov	r0, r4
 8019498:	f7fc f9b3 	bl	8015802 <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80194a2:	4618      	mov	r0, r3
 80194a4:	f005 f87e 	bl	801e5a4 <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d104      	bne.n	80194b8 <mbedtls_ssl_set_hostname+0x68>
    {
        ssl->hostname = NULL;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	2200      	movs	r2, #0
 80194b2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80194b6:	e020      	b.n	80194fa <mbedtls_ssl_set_hostname+0xaa>
    }
    else
    {
        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	3301      	adds	r3, #1
 80194bc:	4619      	mov	r1, r3
 80194be:	2001      	movs	r0, #1
 80194c0:	f005 f836 	bl	801e530 <calloc>
 80194c4:	4603      	mov	r3, r0
 80194c6:	461a      	mov	r2, r3
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        if( ssl->hostname == NULL )
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d101      	bne.n	80194dc <mbedtls_ssl_set_hostname+0x8c>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80194d8:	4b0b      	ldr	r3, [pc, #44]	; (8019508 <mbedtls_ssl_set_hostname+0xb8>)
 80194da:	e00f      	b.n	80194fc <mbedtls_ssl_set_hostname+0xac>

        memcpy( ssl->hostname, hostname, hostname_len );
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80194e2:	68fa      	ldr	r2, [r7, #12]
 80194e4:	6839      	ldr	r1, [r7, #0]
 80194e6:	4618      	mov	r0, r3
 80194e8:	f005 f874 	bl	801e5d4 <memcpy>

        ssl->hostname[hostname_len] = '\0';
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	4413      	add	r3, r2
 80194f6:	2200      	movs	r2, #0
 80194f8:	701a      	strb	r2, [r3, #0]
    }

    return( 0 );
 80194fa:	2300      	movs	r3, #0
}
 80194fc:	4618      	mov	r0, r3
 80194fe:	3714      	adds	r7, #20
 8019500:	46bd      	mov	sp, r7
 8019502:	bd90      	pop	{r4, r7, pc}
 8019504:	ffff8f00 	.word	0xffff8f00
 8019508:	ffff8100 	.word	0xffff8100

0801950c <mbedtls_ssl_get_ciphersuite>:

    return( 0xFFFFFFFF );
}

const char *mbedtls_ssl_get_ciphersuite( const mbedtls_ssl_context *ssl )
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b082      	sub	sp, #8
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
    if( ssl == NULL || ssl->session == NULL )
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d003      	beq.n	8019522 <mbedtls_ssl_get_ciphersuite+0x16>
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801951e:	2b00      	cmp	r3, #0
 8019520:	d101      	bne.n	8019526 <mbedtls_ssl_get_ciphersuite+0x1a>
        return( NULL );
 8019522:	2300      	movs	r3, #0
 8019524:	e006      	b.n	8019534 <mbedtls_ssl_get_ciphersuite+0x28>

    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	4618      	mov	r0, r3
 801952e:	f7fa fb33 	bl	8013b98 <mbedtls_ssl_get_ciphersuite_name>
 8019532:	4603      	mov	r3, r0
}
 8019534:	4618      	mov	r0, r3
 8019536:	3708      	adds	r7, #8
 8019538:	46bd      	mov	sp, r7
 801953a:	bd80      	pop	{r7, pc}

0801953c <mbedtls_ssl_handshake_step>:

/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b084      	sub	sp, #16
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 8019544:	4b0f      	ldr	r3, [pc, #60]	; (8019584 <mbedtls_ssl_handshake_step+0x48>)
 8019546:	60fb      	str	r3, [r7, #12]

    if( ssl == NULL || ssl->conf == NULL )
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d003      	beq.n	8019556 <mbedtls_ssl_handshake_step+0x1a>
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d104      	bne.n	8019560 <mbedtls_ssl_handshake_step+0x24>
    {
    	printf("----------------------handshake step bad input --------------------------\r\n");
 8019556:	480c      	ldr	r0, [pc, #48]	; (8019588 <mbedtls_ssl_handshake_step+0x4c>)
 8019558:	f005 f9fe 	bl	801e958 <puts>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801955c:	4b0b      	ldr	r3, [pc, #44]	; (801958c <mbedtls_ssl_handshake_step+0x50>)
 801955e:	e00d      	b.n	801957c <mbedtls_ssl_handshake_step+0x40>
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019568:	f003 0301 	and.w	r3, r3, #1
 801956c:	b2db      	uxtb	r3, r3
 801956e:	2b00      	cmp	r3, #0
 8019570:	d103      	bne.n	801957a <mbedtls_ssl_handshake_step+0x3e>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 8019572:	6878      	ldr	r0, [r7, #4]
 8019574:	f7fb fff0 	bl	8015558 <mbedtls_ssl_handshake_client_step>
 8019578:	60f8      	str	r0, [r7, #12]
#if defined(MBEDTLS_SSL_SRV_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
 801957a:	68fb      	ldr	r3, [r7, #12]
}
 801957c:	4618      	mov	r0, r3
 801957e:	3710      	adds	r7, #16
 8019580:	46bd      	mov	sp, r7
 8019582:	bd80      	pop	{r7, pc}
 8019584:	ffff8f80 	.word	0xffff8f80
 8019588:	08024374 	.word	0x08024374
 801958c:	ffff8f00 	.word	0xffff8f00

08019590 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 8019590:	b580      	push	{r7, lr}
 8019592:	b086      	sub	sp, #24
 8019594:	af02      	add	r7, sp, #8
 8019596:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8019598:	2300      	movs	r3, #0
 801959a:	60fb      	str	r3, [r7, #12]

    if( ssl == NULL || ssl->conf == NULL )
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d003      	beq.n	80195aa <mbedtls_ssl_handshake+0x1a>
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d101      	bne.n	80195ae <mbedtls_ssl_handshake+0x1e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80195aa:	4b13      	ldr	r3, [pc, #76]	; (80195f8 <mbedtls_ssl_handshake+0x68>)
 80195ac:	e020      	b.n	80195f0 <mbedtls_ssl_handshake+0x60>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 80195ae:	4b13      	ldr	r3, [pc, #76]	; (80195fc <mbedtls_ssl_handshake+0x6c>)
 80195b0:	9300      	str	r3, [sp, #0]
 80195b2:	f641 2306 	movw	r3, #6662	; 0x1a06
 80195b6:	4a12      	ldr	r2, [pc, #72]	; (8019600 <mbedtls_ssl_handshake+0x70>)
 80195b8:	2102      	movs	r1, #2
 80195ba:	6878      	ldr	r0, [r7, #4]
 80195bc:	f7f2 fb9e 	bl	800bcfc <mbedtls_debug_print_msg>

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80195c0:	e006      	b.n	80195d0 <mbedtls_ssl_handshake+0x40>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 80195c2:	6878      	ldr	r0, [r7, #4]
 80195c4:	f7ff ffba 	bl	801953c <mbedtls_ssl_handshake_step>
 80195c8:	60f8      	str	r0, [r7, #12]

        if( ret != 0 )
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d104      	bne.n	80195da <mbedtls_ssl_handshake+0x4a>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	685b      	ldr	r3, [r3, #4]
 80195d4:	2b10      	cmp	r3, #16
 80195d6:	d1f4      	bne.n	80195c2 <mbedtls_ssl_handshake+0x32>
 80195d8:	e000      	b.n	80195dc <mbedtls_ssl_handshake+0x4c>
            break;
 80195da:	bf00      	nop
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 80195dc:	4b09      	ldr	r3, [pc, #36]	; (8019604 <mbedtls_ssl_handshake+0x74>)
 80195de:	9300      	str	r3, [sp, #0]
 80195e0:	f641 2310 	movw	r3, #6672	; 0x1a10
 80195e4:	4a06      	ldr	r2, [pc, #24]	; (8019600 <mbedtls_ssl_handshake+0x70>)
 80195e6:	2102      	movs	r1, #2
 80195e8:	6878      	ldr	r0, [r7, #4]
 80195ea:	f7f2 fb87 	bl	800bcfc <mbedtls_debug_print_msg>

    return( ret );
 80195ee:	68fb      	ldr	r3, [r7, #12]
}
 80195f0:	4618      	mov	r0, r3
 80195f2:	3710      	adds	r7, #16
 80195f4:	46bd      	mov	sp, r7
 80195f6:	bd80      	pop	{r7, pc}
 80195f8:	ffff8f00 	.word	0xffff8f00
 80195fc:	080243c0 	.word	0x080243c0
 8019600:	080234fc 	.word	0x080234fc
 8019604:	080243d0 	.word	0x080243d0

08019608 <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
 8019608:	b590      	push	{r4, r7, lr}
 801960a:	b089      	sub	sp, #36	; 0x24
 801960c:	af02      	add	r7, sp, #8
 801960e:	60f8      	str	r0, [r7, #12]
 8019610:	60b9      	str	r1, [r7, #8]
 8019612:	607a      	str	r2, [r7, #4]
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d003      	beq.n	8019622 <mbedtls_ssl_read+0x1a>
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d101      	bne.n	8019626 <mbedtls_ssl_read+0x1e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8019622:	4b97      	ldr	r3, [pc, #604]	; (8019880 <mbedtls_ssl_read+0x278>)
 8019624:	e127      	b.n	8019876 <mbedtls_ssl_read+0x26e>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 8019626:	4b97      	ldr	r3, [pc, #604]	; (8019884 <mbedtls_ssl_read+0x27c>)
 8019628:	9300      	str	r3, [sp, #0]
 801962a:	f44f 53d6 	mov.w	r3, #6848	; 0x1ac0
 801962e:	4a96      	ldr	r2, [pc, #600]	; (8019888 <mbedtls_ssl_read+0x280>)
 8019630:	2102      	movs	r1, #2
 8019632:	68f8      	ldr	r0, [r7, #12]
 8019634:	f7f2 fb62 	bl	800bcfc <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	685b      	ldr	r3, [r3, #4]
 801963c:	2b10      	cmp	r3, #16
 801963e:	d017      	beq.n	8019670 <mbedtls_ssl_read+0x68>
    {
        ret = mbedtls_ssl_handshake( ssl );
 8019640:	68f8      	ldr	r0, [r7, #12]
 8019642:	f7ff ffa5 	bl	8019590 <mbedtls_ssl_handshake>
 8019646:	6178      	str	r0, [r7, #20]
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 8019648:	697b      	ldr	r3, [r7, #20]
 801964a:	f513 4fd6 	cmn.w	r3, #27392	; 0x6b00
 801964e:	d00f      	beq.n	8019670 <mbedtls_ssl_read+0x68>
 8019650:	697b      	ldr	r3, [r7, #20]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d00c      	beq.n	8019670 <mbedtls_ssl_read+0x68>
            ret != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 8019656:	697b      	ldr	r3, [r7, #20]
 8019658:	9301      	str	r3, [sp, #4]
 801965a:	4b8c      	ldr	r3, [pc, #560]	; (801988c <mbedtls_ssl_read+0x284>)
 801965c:	9300      	str	r3, [sp, #0]
 801965e:	f641 23ed 	movw	r3, #6893	; 0x1aed
 8019662:	4a89      	ldr	r2, [pc, #548]	; (8019888 <mbedtls_ssl_read+0x280>)
 8019664:	2101      	movs	r1, #1
 8019666:	68f8      	ldr	r0, [r7, #12]
 8019668:	f7f2 fbce 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	e102      	b.n	8019876 <mbedtls_ssl_read+0x26e>
     * This will also remove the need to manually reset
     * ssl->keep_current_message = 0 below.
     *
     */

    if( ssl->in_offt == NULL )
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019674:	2b00      	cmp	r3, #0
 8019676:	f040 80ce 	bne.w	8019816 <mbedtls_ssl_read+0x20e>
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801967e:	2b00      	cmp	r3, #0
 8019680:	d010      	beq.n	80196a4 <mbedtls_ssl_read+0x9c>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019686:	68fa      	ldr	r2, [r7, #12]
 8019688:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801968a:	4610      	mov	r0, r2
 801968c:	4798      	blx	r3
 801968e:	4603      	mov	r3, r0
        if( ssl->f_get_timer != NULL &&
 8019690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019694:	d106      	bne.n	80196a4 <mbedtls_ssl_read+0x9c>
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801969c:	4619      	mov	r1, r3
 801969e:	68f8      	ldr	r0, [r7, #12]
 80196a0:	f7fc f8d4 	bl	801584c <ssl_set_timer>
        }

        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80196a4:	68f8      	ldr	r0, [r7, #12]
 80196a6:	f7fe fb01 	bl	8017cac <mbedtls_ssl_read_record>
 80196aa:	6178      	str	r0, [r7, #20]
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d012      	beq.n	80196d8 <mbedtls_ssl_read+0xd0>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 80196b2:	697b      	ldr	r3, [r7, #20]
 80196b4:	f513 4fe5 	cmn.w	r3, #29312	; 0x7280
 80196b8:	d101      	bne.n	80196be <mbedtls_ssl_read+0xb6>
                return( 0 );
 80196ba:	2300      	movs	r3, #0
 80196bc:	e0db      	b.n	8019876 <mbedtls_ssl_read+0x26e>

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 80196be:	697b      	ldr	r3, [r7, #20]
 80196c0:	9301      	str	r3, [sp, #4]
 80196c2:	4b73      	ldr	r3, [pc, #460]	; (8019890 <mbedtls_ssl_read+0x288>)
 80196c4:	9300      	str	r3, [sp, #0]
 80196c6:	f641 3323 	movw	r3, #6947	; 0x1b23
 80196ca:	4a6f      	ldr	r2, [pc, #444]	; (8019888 <mbedtls_ssl_read+0x280>)
 80196cc:	2101      	movs	r1, #1
 80196ce:	68f8      	ldr	r0, [r7, #12]
 80196d0:	f7f2 fb9a 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 80196d4:	697b      	ldr	r3, [r7, #20]
 80196d6:	e0ce      	b.n	8019876 <mbedtls_ssl_read+0x26e>
        }

        if( ssl->in_msglen  == 0 &&
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d11d      	bne.n	801971c <mbedtls_ssl_read+0x114>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if( ssl->in_msglen  == 0 &&
 80196e4:	2b17      	cmp	r3, #23
 80196e6:	d119      	bne.n	801971c <mbedtls_ssl_read+0x114>
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80196e8:	68f8      	ldr	r0, [r7, #12]
 80196ea:	f7fe fadf 	bl	8017cac <mbedtls_ssl_read_record>
 80196ee:	6178      	str	r0, [r7, #20]
 80196f0:	697b      	ldr	r3, [r7, #20]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d012      	beq.n	801971c <mbedtls_ssl_read+0x114>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 80196f6:	697b      	ldr	r3, [r7, #20]
 80196f8:	f513 4fe5 	cmn.w	r3, #29312	; 0x7280
 80196fc:	d101      	bne.n	8019702 <mbedtls_ssl_read+0xfa>
                    return( 0 );
 80196fe:	2300      	movs	r3, #0
 8019700:	e0b9      	b.n	8019876 <mbedtls_ssl_read+0x26e>

                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8019702:	697b      	ldr	r3, [r7, #20]
 8019704:	9301      	str	r3, [sp, #4]
 8019706:	4b62      	ldr	r3, [pc, #392]	; (8019890 <mbedtls_ssl_read+0x288>)
 8019708:	9300      	str	r3, [sp, #0]
 801970a:	f641 3332 	movw	r3, #6962	; 0x1b32
 801970e:	4a5e      	ldr	r2, [pc, #376]	; (8019888 <mbedtls_ssl_read+0x280>)
 8019710:	2101      	movs	r1, #1
 8019712:	68f8      	ldr	r0, [r7, #12]
 8019714:	f7f2 fb78 	bl	800be08 <mbedtls_debug_print_ret>
                return( ret );
 8019718:	697b      	ldr	r3, [r7, #20]
 801971a:	e0ac      	b.n	8019876 <mbedtls_ssl_read+0x26e>
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019720:	2b16      	cmp	r3, #22
 8019722:	d14e      	bne.n	80197c2 <mbedtls_ssl_read+0x1ba>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 8019724:	4b5b      	ldr	r3, [pc, #364]	; (8019894 <mbedtls_ssl_read+0x28c>)
 8019726:	9300      	str	r3, [sp, #0]
 8019728:	f641 3339 	movw	r3, #6969	; 0x1b39
 801972c:	4a56      	ldr	r2, [pc, #344]	; (8019888 <mbedtls_ssl_read+0x280>)
 801972e:	2101      	movs	r1, #1
 8019730:	68f8      	ldr	r0, [r7, #12]
 8019732:	f7f2 fae3 	bl	800bcfc <mbedtls_debug_print_msg>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801973e:	f003 0301 	and.w	r3, r3, #1
 8019742:	b2db      	uxtb	r3, r3
 8019744:	2b00      	cmp	r3, #0
 8019746:	d117      	bne.n	8019778 <mbedtls_ssl_read+0x170>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801974c:	781b      	ldrb	r3, [r3, #0]
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801974e:	2b00      	cmp	r3, #0
 8019750:	d107      	bne.n	8019762 <mbedtls_ssl_read+0x15a>
                  ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ) )
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8019756:	68f8      	ldr	r0, [r7, #12]
 8019758:	f7fc f816 	bl	8015788 <mbedtls_ssl_hs_hdr_len>
 801975c:	4603      	mov	r3, r0
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801975e:	429c      	cmp	r4, r3
 8019760:	d00a      	beq.n	8019778 <mbedtls_ssl_read+0x170>
            {
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 8019762:	4b4d      	ldr	r3, [pc, #308]	; (8019898 <mbedtls_ssl_read+0x290>)
 8019764:	9300      	str	r3, [sp, #0]
 8019766:	f641 3346 	movw	r3, #6982	; 0x1b46
 801976a:	4a47      	ldr	r2, [pc, #284]	; (8019888 <mbedtls_ssl_read+0x280>)
 801976c:	2101      	movs	r1, #1
 801976e:	68f8      	ldr	r0, [r7, #12]
 8019770:	f7f2 fac4 	bl	800bcfc <mbedtls_debug_print_msg>
                /* With DTLS, drop the packet (probably from last handshake) */
#if defined(MBEDTLS_SSL_PROTO_DTLS)
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                    return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8019774:	4b49      	ldr	r3, [pc, #292]	; (801989c <mbedtls_ssl_read+0x294>)
 8019776:	e07e      	b.n	8019876 <mbedtls_ssl_read+0x26e>
            {
                /*
                 * Refuse renegotiation
                 */

                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 8019778:	4b49      	ldr	r3, [pc, #292]	; (80198a0 <mbedtls_ssl_read+0x298>)
 801977a:	9300      	str	r3, [sp, #0]
 801977c:	f641 3382 	movw	r3, #7042	; 0x1b82
 8019780:	4a41      	ldr	r2, [pc, #260]	; (8019888 <mbedtls_ssl_read+0x280>)
 8019782:	2103      	movs	r1, #3
 8019784:	68f8      	ldr	r0, [r7, #12]
 8019786:	f7f2 fab9 	bl	800bcfc <mbedtls_debug_print_msg>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	68db      	ldr	r3, [r3, #12]
 801978e:	2b00      	cmp	r3, #0
 8019790:	dd0a      	ble.n	80197a8 <mbedtls_ssl_read+0x1a0>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 8019792:	2264      	movs	r2, #100	; 0x64
 8019794:	2101      	movs	r1, #1
 8019796:	68f8      	ldr	r0, [r7, #12]
 8019798:	f7fe fc24 	bl	8017fe4 <mbedtls_ssl_send_alert_message>
 801979c:	6178      	str	r0, [r7, #20]
 801979e:	697b      	ldr	r3, [r7, #20]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d00c      	beq.n	80197be <mbedtls_ssl_read+0x1b6>
                                    MBEDTLS_SSL_ALERT_LEVEL_WARNING,
                                    MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION ) ) != 0 )
                    {
                        return( ret );
 80197a4:	697b      	ldr	r3, [r7, #20]
 80197a6:	e066      	b.n	8019876 <mbedtls_ssl_read+0x26e>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80197a8:	4b3e      	ldr	r3, [pc, #248]	; (80198a4 <mbedtls_ssl_read+0x29c>)
 80197aa:	9300      	str	r3, [sp, #0]
 80197ac:	f641 339e 	movw	r3, #7070	; 0x1b9e
 80197b0:	4a35      	ldr	r2, [pc, #212]	; (8019888 <mbedtls_ssl_read+0x280>)
 80197b2:	2101      	movs	r1, #1
 80197b4:	68f8      	ldr	r0, [r7, #12]
 80197b6:	f7f2 faa1 	bl	800bcfc <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80197ba:	4b3b      	ldr	r3, [pc, #236]	; (80198a8 <mbedtls_ssl_read+0x2a0>)
 80197bc:	e05b      	b.n	8019876 <mbedtls_ssl_read+0x26e>
                }
            }

            return( MBEDTLS_ERR_SSL_WANT_READ );
 80197be:	4b3b      	ldr	r3, [pc, #236]	; (80198ac <mbedtls_ssl_read+0x2a4>)
 80197c0:	e059      	b.n	8019876 <mbedtls_ssl_read+0x26e>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197c6:	2b15      	cmp	r3, #21
 80197c8:	d10a      	bne.n	80197e0 <mbedtls_ssl_read+0x1d8>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 80197ca:	4b39      	ldr	r3, [pc, #228]	; (80198b0 <mbedtls_ssl_read+0x2a8>)
 80197cc:	9300      	str	r3, [sp, #0]
 80197ce:	f641 33b7 	movw	r3, #7095	; 0x1bb7
 80197d2:	4a2d      	ldr	r2, [pc, #180]	; (8019888 <mbedtls_ssl_read+0x280>)
 80197d4:	2102      	movs	r1, #2
 80197d6:	68f8      	ldr	r0, [r7, #12]
 80197d8:	f7f2 fa90 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 80197dc:	4b33      	ldr	r3, [pc, #204]	; (80198ac <mbedtls_ssl_read+0x2a4>)
 80197de:	e04a      	b.n	8019876 <mbedtls_ssl_read+0x26e>
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197e4:	2b17      	cmp	r3, #23
 80197e6:	d00a      	beq.n	80197fe <mbedtls_ssl_read+0x1f6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 80197e8:	4b32      	ldr	r3, [pc, #200]	; (80198b4 <mbedtls_ssl_read+0x2ac>)
 80197ea:	9300      	str	r3, [sp, #0]
 80197ec:	f641 33bd 	movw	r3, #7101	; 0x1bbd
 80197f0:	4a25      	ldr	r2, [pc, #148]	; (8019888 <mbedtls_ssl_read+0x280>)
 80197f2:	2101      	movs	r1, #1
 80197f4:	68f8      	ldr	r0, [r7, #12]
 80197f6:	f7f2 fa81 	bl	800bcfc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80197fa:	4b28      	ldr	r3, [pc, #160]	; (801989c <mbedtls_ssl_read+0x294>)
 80197fc:	e03b      	b.n	8019876 <mbedtls_ssl_read+0x26e>
        }

        ssl->in_offt = ssl->in_msg;
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	669a      	str	r2, [r3, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	685b      	ldr	r3, [r3, #4]
 801980a:	2b10      	cmp	r3, #16
 801980c:	d103      	bne.n	8019816 <mbedtls_ssl_read+0x20e>
            ssl_set_timer( ssl, 0 );
 801980e:	2100      	movs	r1, #0
 8019810:	68f8      	ldr	r0, [r7, #12]
 8019812:	f7fc f81b 	bl	801584c <ssl_set_timer>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801981a:	687a      	ldr	r2, [r7, #4]
 801981c:	4293      	cmp	r3, r2
 801981e:	bf28      	it	cs
 8019820:	4613      	movcs	r3, r2
 8019822:	613b      	str	r3, [r7, #16]
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019828:	693a      	ldr	r2, [r7, #16]
 801982a:	4619      	mov	r1, r3
 801982c:	68b8      	ldr	r0, [r7, #8]
 801982e:	f004 fed1 	bl	801e5d4 <memcpy>
    ssl->in_msglen -= n;
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019836:	693b      	ldr	r3, [r7, #16]
 8019838:	1ad2      	subs	r2, r2, r3
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	671a      	str	r2, [r3, #112]	; 0x70

    if( ssl->in_msglen == 0 )
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019842:	2b00      	cmp	r3, #0
 8019844:	d107      	bne.n	8019856 <mbedtls_ssl_read+0x24e>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	2200      	movs	r2, #0
 801984a:	669a      	str	r2, [r3, #104]	; 0x68
        ssl->keep_current_message = 0;
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	2200      	movs	r2, #0
 8019850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8019854:	e005      	b.n	8019862 <mbedtls_ssl_read+0x25a>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801985a:	693b      	ldr	r3, [r7, #16]
 801985c:	441a      	add	r2, r3
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	669a      	str	r2, [r3, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 8019862:	4b15      	ldr	r3, [pc, #84]	; (80198b8 <mbedtls_ssl_read+0x2b0>)
 8019864:	9300      	str	r3, [sp, #0]
 8019866:	f641 33ec 	movw	r3, #7148	; 0x1bec
 801986a:	4a07      	ldr	r2, [pc, #28]	; (8019888 <mbedtls_ssl_read+0x280>)
 801986c:	2102      	movs	r1, #2
 801986e:	68f8      	ldr	r0, [r7, #12]
 8019870:	f7f2 fa44 	bl	800bcfc <mbedtls_debug_print_msg>

    return( (int) n );
 8019874:	693b      	ldr	r3, [r7, #16]
}
 8019876:	4618      	mov	r0, r3
 8019878:	371c      	adds	r7, #28
 801987a:	46bd      	mov	sp, r7
 801987c:	bd90      	pop	{r4, r7, pc}
 801987e:	bf00      	nop
 8019880:	ffff8f00 	.word	0xffff8f00
 8019884:	080243e0 	.word	0x080243e0
 8019888:	080234fc 	.word	0x080234fc
 801988c:	080243e8 	.word	0x080243e8
 8019890:	08023fa0 	.word	0x08023fa0
 8019894:	08024400 	.word	0x08024400
 8019898:	0802441c 	.word	0x0802441c
 801989c:	ffff8900 	.word	0xffff8900
 80198a0:	08024444 	.word	0x08024444
 80198a4:	080235a0 	.word	0x080235a0
 80198a8:	ffff9400 	.word	0xffff9400
 80198ac:	ffff9700 	.word	0xffff9700
 80198b0:	0802446c 	.word	0x0802446c
 80198b4:	08024494 	.word	0x08024494
 80198b8:	080244b4 	.word	0x080244b4

080198bc <ssl_write_real>:
 * Send application data to be encrypted by the SSL layer,
 * taking care of max fragment length and buffer size
 */
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b088      	sub	sp, #32
 80198c0:	af02      	add	r7, sp, #8
 80198c2:	60f8      	str	r0, [r7, #12]
 80198c4:	60b9      	str	r1, [r7, #8]
 80198c6:	607a      	str	r2, [r7, #4]
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
#else
    size_t max_len = MBEDTLS_SSL_MAX_CONTENT_LEN;
 80198c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80198cc:	617b      	str	r3, [r7, #20]
#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
    if( len > max_len )
 80198ce:	687a      	ldr	r2, [r7, #4]
 80198d0:	697b      	ldr	r3, [r7, #20]
 80198d2:	429a      	cmp	r2, r3
 80198d4:	d901      	bls.n	80198da <ssl_write_real+0x1e>
                                len, max_len ) );
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        }
        else
#endif
            len = max_len;
 80198d6:	697b      	ldr	r3, [r7, #20]
 80198d8:	607b      	str	r3, [r7, #4]
    }

    if( ssl->out_left != 0 )
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d013      	beq.n	801990c <ssl_write_real+0x50>
    {
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80198e4:	68f8      	ldr	r0, [r7, #12]
 80198e6:	f7fd fe0b 	bl	8017500 <mbedtls_ssl_flush_output>
 80198ea:	6138      	str	r0, [r7, #16]
 80198ec:	693b      	ldr	r3, [r7, #16]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d030      	beq.n	8019954 <ssl_write_real+0x98>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 80198f2:	693b      	ldr	r3, [r7, #16]
 80198f4:	9301      	str	r3, [sp, #4]
 80198f6:	4b1a      	ldr	r3, [pc, #104]	; (8019960 <ssl_write_real+0xa4>)
 80198f8:	9300      	str	r3, [sp, #0]
 80198fa:	f641 4311 	movw	r3, #7185	; 0x1c11
 80198fe:	4a19      	ldr	r2, [pc, #100]	; (8019964 <ssl_write_real+0xa8>)
 8019900:	2101      	movs	r1, #1
 8019902:	68f8      	ldr	r0, [r7, #12]
 8019904:	f7f2 fa80 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8019908:	693b      	ldr	r3, [r7, #16]
 801990a:	e024      	b.n	8019956 <ssl_write_real+0x9a>
        }
    }
    else
    {
        ssl->out_msglen  = len;
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	687a      	ldr	r2, [r7, #4]
 8019910:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	2217      	movs	r2, #23
 8019918:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019922:	687a      	ldr	r2, [r7, #4]
 8019924:	68b9      	ldr	r1, [r7, #8]
 8019926:	4618      	mov	r0, r3
 8019928:	f004 fe54 	bl	801e5d4 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801992c:	68f8      	ldr	r0, [r7, #12]
 801992e:	f7fd feaf 	bl	8017690 <mbedtls_ssl_write_record>
 8019932:	6138      	str	r0, [r7, #16]
 8019934:	693b      	ldr	r3, [r7, #16]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d00c      	beq.n	8019954 <ssl_write_real+0x98>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801993a:	693b      	ldr	r3, [r7, #16]
 801993c:	9301      	str	r3, [sp, #4]
 801993e:	4b0a      	ldr	r3, [pc, #40]	; (8019968 <ssl_write_real+0xac>)
 8019940:	9300      	str	r3, [sp, #0]
 8019942:	f641 431d 	movw	r3, #7197	; 0x1c1d
 8019946:	4a07      	ldr	r2, [pc, #28]	; (8019964 <ssl_write_real+0xa8>)
 8019948:	2101      	movs	r1, #1
 801994a:	68f8      	ldr	r0, [r7, #12]
 801994c:	f7f2 fa5c 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 8019950:	693b      	ldr	r3, [r7, #16]
 8019952:	e000      	b.n	8019956 <ssl_write_real+0x9a>
        }
    }

    return( (int) len );
 8019954:	687b      	ldr	r3, [r7, #4]
}
 8019956:	4618      	mov	r0, r3
 8019958:	3718      	adds	r7, #24
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	08023bd4 	.word	0x08023bd4
 8019964:	080234fc 	.word	0x080234fc
 8019968:	08023ebc 	.word	0x08023ebc

0801996c <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 801996c:	b580      	push	{r7, lr}
 801996e:	b088      	sub	sp, #32
 8019970:	af02      	add	r7, sp, #8
 8019972:	60f8      	str	r0, [r7, #12]
 8019974:	60b9      	str	r1, [r7, #8]
 8019976:	607a      	str	r2, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 8019978:	4b1e      	ldr	r3, [pc, #120]	; (80199f4 <mbedtls_ssl_write+0x88>)
 801997a:	9300      	str	r3, [sp, #0]
 801997c:	f641 4352 	movw	r3, #7250	; 0x1c52
 8019980:	4a1d      	ldr	r2, [pc, #116]	; (80199f8 <mbedtls_ssl_write+0x8c>)
 8019982:	2102      	movs	r1, #2
 8019984:	68f8      	ldr	r0, [r7, #12]
 8019986:	f7f2 f9b9 	bl	800bcfc <mbedtls_debug_print_msg>

    if( ssl == NULL || ssl->conf == NULL )
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d003      	beq.n	8019998 <mbedtls_ssl_write+0x2c>
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d101      	bne.n	801999c <mbedtls_ssl_write+0x30>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8019998:	4b18      	ldr	r3, [pc, #96]	; (80199fc <mbedtls_ssl_write+0x90>)
 801999a:	e027      	b.n	80199ec <mbedtls_ssl_write+0x80>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	685b      	ldr	r3, [r3, #4]
 80199a0:	2b10      	cmp	r3, #16
 80199a2:	d013      	beq.n	80199cc <mbedtls_ssl_write+0x60>
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 80199a4:	68f8      	ldr	r0, [r7, #12]
 80199a6:	f7ff fdf3 	bl	8019590 <mbedtls_ssl_handshake>
 80199aa:	6178      	str	r0, [r7, #20]
 80199ac:	697b      	ldr	r3, [r7, #20]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d00c      	beq.n	80199cc <mbedtls_ssl_write+0x60>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 80199b2:	697b      	ldr	r3, [r7, #20]
 80199b4:	9301      	str	r3, [sp, #4]
 80199b6:	4b12      	ldr	r3, [pc, #72]	; (8019a00 <mbedtls_ssl_write+0x94>)
 80199b8:	9300      	str	r3, [sp, #0]
 80199ba:	f641 4363 	movw	r3, #7267	; 0x1c63
 80199be:	4a0e      	ldr	r2, [pc, #56]	; (80199f8 <mbedtls_ssl_write+0x8c>)
 80199c0:	2101      	movs	r1, #1
 80199c2:	68f8      	ldr	r0, [r7, #12]
 80199c4:	f7f2 fa20 	bl	800be08 <mbedtls_debug_print_ret>
            return( ret );
 80199c8:	697b      	ldr	r3, [r7, #20]
 80199ca:	e00f      	b.n	80199ec <mbedtls_ssl_write+0x80>
    }

#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
    ret = ssl_write_split( ssl, buf, len );
#else
    ret = ssl_write_real( ssl, buf, len );
 80199cc:	687a      	ldr	r2, [r7, #4]
 80199ce:	68b9      	ldr	r1, [r7, #8]
 80199d0:	68f8      	ldr	r0, [r7, #12]
 80199d2:	f7ff ff73 	bl	80198bc <ssl_write_real>
 80199d6:	6178      	str	r0, [r7, #20]
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 80199d8:	4b0a      	ldr	r3, [pc, #40]	; (8019a04 <mbedtls_ssl_write+0x98>)
 80199da:	9300      	str	r3, [sp, #0]
 80199dc:	f641 436e 	movw	r3, #7278	; 0x1c6e
 80199e0:	4a05      	ldr	r2, [pc, #20]	; (80199f8 <mbedtls_ssl_write+0x8c>)
 80199e2:	2102      	movs	r1, #2
 80199e4:	68f8      	ldr	r0, [r7, #12]
 80199e6:	f7f2 f989 	bl	800bcfc <mbedtls_debug_print_msg>

    return( ret );
 80199ea:	697b      	ldr	r3, [r7, #20]
}
 80199ec:	4618      	mov	r0, r3
 80199ee:	3718      	adds	r7, #24
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bd80      	pop	{r7, pc}
 80199f4:	080244bc 	.word	0x080244bc
 80199f8:	080234fc 	.word	0x080234fc
 80199fc:	ffff8f00 	.word	0xffff8f00
 8019a00:	080243e8 	.word	0x080243e8
 8019a04:	080244c8 	.word	0x080244c8

08019a08 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 8019a08:	b580      	push	{r7, lr}
 8019a0a:	b082      	sub	sp, #8
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	6078      	str	r0, [r7, #4]
    if( transform == NULL )
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d018      	beq.n	8019a48 <mbedtls_ssl_transform_free+0x40>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	3350      	adds	r3, #80	; 0x50
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	f7f1 fcb1 	bl	800b382 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	3390      	adds	r3, #144	; 0x90
 8019a24:	4618      	mov	r0, r3
 8019a26:	f7f1 fcac 	bl	800b382 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	3338      	adds	r3, #56	; 0x38
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7f4 fdc7 	bl	800e5c2 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	3344      	adds	r3, #68	; 0x44
 8019a38:	4618      	mov	r0, r3
 8019a3a:	f7f4 fdc2 	bl	800e5c2 <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 8019a3e:	21d0      	movs	r1, #208	; 0xd0
 8019a40:	6878      	ldr	r0, [r7, #4]
 8019a42:	f7fb fede 	bl	8015802 <mbedtls_zeroize>
 8019a46:	e000      	b.n	8019a4a <mbedtls_ssl_transform_free+0x42>
        return;
 8019a48:	bf00      	nop
}
 8019a4a:	3708      	adds	r7, #8
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}

08019a50 <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b082      	sub	sp, #8
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
    if( handshake == NULL )
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d00a      	beq.n	8019a74 <mbedtls_ssl_handshake_free+0x24>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	3308      	adds	r3, #8
 8019a62:	4618      	mov	r0, r3
 8019a64:	f7f8 f8b3 	bl	8011bce <mbedtls_sha256_free>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 8019a68:	f44f 7184 	mov.w	r1, #264	; 0x108
 8019a6c:	6878      	ldr	r0, [r7, #4]
 8019a6e:	f7fb fec8 	bl	8015802 <mbedtls_zeroize>
 8019a72:	e000      	b.n	8019a76 <mbedtls_ssl_handshake_free+0x26>
        return;
 8019a74:	bf00      	nop
}
 8019a76:	3708      	adds	r7, #8
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd80      	pop	{r7, pc}

08019a7c <mbedtls_ssl_session_free>:

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b082      	sub	sp, #8
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]
    if( session == NULL )
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d012      	beq.n	8019ab0 <mbedtls_ssl_session_free+0x34>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d009      	beq.n	8019aa6 <mbedtls_ssl_session_free+0x2a>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a96:	4618      	mov	r0, r3
 8019a98:	f003 fa7c 	bl	801cf94 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	f004 fd7f 	bl	801e5a4 <free>

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 8019aa6:	2164      	movs	r1, #100	; 0x64
 8019aa8:	6878      	ldr	r0, [r7, #4]
 8019aaa:	f7fb feaa 	bl	8015802 <mbedtls_zeroize>
 8019aae:	e000      	b.n	8019ab2 <mbedtls_ssl_session_free+0x36>
        return;
 8019ab0:	bf00      	nop
}
 8019ab2:	3708      	adds	r7, #8
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	bd80      	pop	{r7, pc}

08019ab8 <mbedtls_ssl_config_init>:

/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
 8019ab8:	b580      	push	{r7, lr}
 8019aba:	b082      	sub	sp, #8
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	6078      	str	r0, [r7, #4]
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 8019ac0:	2254      	movs	r2, #84	; 0x54
 8019ac2:	2100      	movs	r1, #0
 8019ac4:	6878      	ldr	r0, [r7, #4]
 8019ac6:	f004 fdad 	bl	801e624 <memset>
}
 8019aca:	bf00      	nop
 8019acc:	3708      	adds	r7, #8
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bd80      	pop	{r7, pc}
	...

08019ad4 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b084      	sub	sp, #16
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	60f8      	str	r0, [r7, #12]
 8019adc:	60b9      	str	r1, [r7, #8]
 8019ade:	607a      	str	r2, [r7, #4]
 8019ae0:	603b      	str	r3, [r7, #0]
    int ret;
#endif

    /* Use the functions here so that they are covered in tests,
     * but otherwise access member directly for efficiency */
    mbedtls_ssl_conf_endpoint( conf, endpoint );
 8019ae2:	68b9      	ldr	r1, [r7, #8]
 8019ae4:	68f8      	ldr	r0, [r7, #12]
 8019ae6:	f7ff fc21 	bl	801932c <mbedtls_ssl_conf_endpoint>
    mbedtls_ssl_conf_transport( conf, transport );
 8019aea:	6879      	ldr	r1, [r7, #4]
 8019aec:	68f8      	ldr	r0, [r7, #12]
 8019aee:	f7ff fc33 	bl	8019358 <mbedtls_ssl_conf_transport>

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 8019af2:	68bb      	ldr	r3, [r7, #8]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d107      	bne.n	8019b08 <mbedtls_ssl_config_defaults+0x34>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 8019af8:	68fa      	ldr	r2, [r7, #12]
 8019afa:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8019afe:	2102      	movs	r1, #2
 8019b00:	f361 0383 	bfi	r3, r1, #2, #2
 8019b04:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	2b02      	cmp	r3, #2
 8019b0c:	d125      	bne.n	8019b5a <mbedtls_ssl_config_defaults+0x86>
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	2203      	movs	r2, #3
 8019b12:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	2203      	movs	r2, #3
 8019b1a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	2203      	movs	r2, #3
 8019b22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	2203      	movs	r2, #3
 8019b2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	4a20      	ldr	r2, [pc, #128]	; (8019bb4 <mbedtls_ssl_config_defaults+0xe0>)
 8019b32:	60da      	str	r2, [r3, #12]
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	68da      	ldr	r2, [r3, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	609a      	str	r2, [r3, #8]
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	689a      	ldr	r2, [r3, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	605a      	str	r2, [r3, #4]
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	685a      	ldr	r2, [r3, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	601a      	str	r2, [r3, #0]
                                   ssl_preset_suiteb_ciphersuites;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	4a1a      	ldr	r2, [pc, #104]	; (8019bb8 <mbedtls_ssl_config_defaults+0xe4>)
 8019b50:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	4a19      	ldr	r2, [pc, #100]	; (8019bbc <mbedtls_ssl_config_defaults+0xe8>)
 8019b56:	645a      	str	r2, [r3, #68]	; 0x44
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = ssl_preset_suiteb_curves;
#endif
            break;
 8019b58:	e026      	b.n	8019ba8 <mbedtls_ssl_config_defaults+0xd4>

        /*
         * Default
         */
        default:
            conf->min_major_ver = ( MBEDTLS_SSL_MIN_MAJOR_VERSION >
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	2203      	movs	r2, #3
 8019b5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                                    MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION ) ?
                                    MBEDTLS_SSL_MIN_MAJOR_VERSION :
                                    MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION;
            conf->min_minor_ver = ( MBEDTLS_SSL_MIN_MINOR_VERSION >
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	2203      	movs	r2, #3
 8019b66:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
                                    MBEDTLS_SSL_MIN_VALID_MINOR_VERSION ) ?
                                    MBEDTLS_SSL_MIN_MINOR_VERSION :
                                    MBEDTLS_SSL_MIN_VALID_MINOR_VERSION;
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	2203      	movs	r2, #3
 8019b6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	2203      	movs	r2, #3
 8019b76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 8019b7a:	f7f9 ffe5 	bl	8013b48 <mbedtls_ssl_list_ciphersuites>
 8019b7e:	4602      	mov	r2, r0
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	60da      	str	r2, [r3, #12]
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	68da      	ldr	r2, [r3, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	609a      	str	r2, [r3, #8]
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	689a      	ldr	r2, [r3, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	605a      	str	r2, [r3, #4]
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	685a      	ldr	r2, [r3, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	601a      	str	r2, [r3, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	4a08      	ldr	r2, [pc, #32]	; (8019bc0 <mbedtls_ssl_config_defaults+0xec>)
 8019ba0:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	4a07      	ldr	r2, [pc, #28]	; (8019bc4 <mbedtls_ssl_config_defaults+0xf0>)
 8019ba6:	645a      	str	r2, [r3, #68]	; 0x44
#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
 8019ba8:	2300      	movs	r3, #0
}
 8019baa:	4618      	mov	r0, r3
 8019bac:	3710      	adds	r7, #16
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}
 8019bb2:	bf00      	nop
 8019bb4:	20000060 	.word	0x20000060
 8019bb8:	08025a44 	.word	0x08025a44
 8019bbc:	2000006c 	.word	0x2000006c
 8019bc0:	08025a34 	.word	0x08025a34
 8019bc4:	20000054 	.word	0x20000054

08019bc8 <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b082      	sub	sp, #8
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 8019bd0:	2101      	movs	r1, #1
 8019bd2:	6878      	ldr	r0, [r7, #4]
 8019bd4:	f7f5 fb12 	bl	800f1fc <mbedtls_pk_can_do>
 8019bd8:	4603      	mov	r3, r0
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d001      	beq.n	8019be2 <mbedtls_ssl_sig_from_pk+0x1a>
        return( MBEDTLS_SSL_SIG_RSA );
 8019bde:	2301      	movs	r3, #1
 8019be0:	e000      	b.n	8019be4 <mbedtls_ssl_sig_from_pk+0x1c>
#endif
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
 8019be2:	2300      	movs	r3, #0
}
 8019be4:	4618      	mov	r0, r3
 8019be6:	3708      	adds	r7, #8
 8019be8:	46bd      	mov	sp, r7
 8019bea:	bd80      	pop	{r7, pc}

08019bec <mbedtls_ssl_sig_hash_set_const_hash>:
}

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
 8019bec:	b480      	push	{r7}
 8019bee:	b083      	sub	sp, #12
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	6078      	str	r0, [r7, #4]
 8019bf4:	460b      	mov	r3, r1
 8019bf6:	70fb      	strb	r3, [r7, #3]
    set->rsa   = md_alg;
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	78fa      	ldrb	r2, [r7, #3]
 8019bfc:	701a      	strb	r2, [r3, #0]
    set->ecdsa = md_alg;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	78fa      	ldrb	r2, [r7, #3]
 8019c02:	705a      	strb	r2, [r3, #1]
}
 8019c04:	bf00      	nop
 8019c06:	370c      	adds	r7, #12
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0e:	4770      	bx	lr

08019c10 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 8019c10:	b480      	push	{r7}
 8019c12:	b083      	sub	sp, #12
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
    switch( md )
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	2b05      	cmp	r3, #5
 8019c1c:	d003      	beq.n	8019c26 <mbedtls_ssl_hash_from_md_alg+0x16>
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	2b06      	cmp	r3, #6
 8019c22:	d002      	beq.n	8019c2a <mbedtls_ssl_hash_from_md_alg+0x1a>
 8019c24:	e003      	b.n	8019c2e <mbedtls_ssl_hash_from_md_alg+0x1e>
        case MBEDTLS_MD_SHA1:
            return( MBEDTLS_SSL_HASH_SHA1 );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( MBEDTLS_SSL_HASH_SHA224 );
 8019c26:	2303      	movs	r3, #3
 8019c28:	e002      	b.n	8019c30 <mbedtls_ssl_hash_from_md_alg+0x20>
        case MBEDTLS_MD_SHA256:
            return( MBEDTLS_SSL_HASH_SHA256 );
 8019c2a:	2304      	movs	r3, #4
 8019c2c:	e000      	b.n	8019c30 <mbedtls_ssl_hash_from_md_alg+0x20>
            return( MBEDTLS_SSL_HASH_SHA384 );
        case MBEDTLS_MD_SHA512:
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
 8019c2e:	2300      	movs	r3, #0
    }
}
 8019c30:	4618      	mov	r0, r3
 8019c32:	370c      	adds	r7, #12
 8019c34:	46bd      	mov	sp, r7
 8019c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3a:	4770      	bx	lr

08019c3c <mbedtls_ssl_check_cert_usage>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 8019c3c:	b480      	push	{r7}
 8019c3e:	b087      	sub	sp, #28
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	60f8      	str	r0, [r7, #12]
 8019c44:	60b9      	str	r1, [r7, #8]
 8019c46:	607a      	str	r2, [r7, #4]
 8019c48:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8019c4a:	2300      	movs	r3, #0
 8019c4c:	617b      	str	r3, [r7, #20]
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
 8019c4e:	697b      	ldr	r3, [r7, #20]
}
 8019c50:	4618      	mov	r0, r3
 8019c52:	371c      	adds	r7, #28
 8019c54:	46bd      	mov	sp, r7
 8019c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5a:	4770      	bx	lr

08019c5c <mbedtls_ssl_write_version>:
 * 1.0 <-> 3.2      (DTLS 1.0 is based on TLS 1.1)
 * 1.x <-> 3.x+1    for x != 0 (DTLS 1.2 based on TLS 1.2)
 */
void mbedtls_ssl_write_version( int major, int minor, int transport,
                        unsigned char ver[2] )
{
 8019c5c:	b480      	push	{r7}
 8019c5e:	b085      	sub	sp, #20
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	60f8      	str	r0, [r7, #12]
 8019c64:	60b9      	str	r1, [r7, #8]
 8019c66:	607a      	str	r2, [r7, #4]
 8019c68:	603b      	str	r3, [r7, #0]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	b2da      	uxtb	r2, r3
 8019c6e:	683b      	ldr	r3, [r7, #0]
 8019c70:	701a      	strb	r2, [r3, #0]
        ver[1] = (unsigned char) minor;
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	3301      	adds	r3, #1
 8019c76:	68ba      	ldr	r2, [r7, #8]
 8019c78:	b2d2      	uxtb	r2, r2
 8019c7a:	701a      	strb	r2, [r3, #0]
    }
}
 8019c7c:	bf00      	nop
 8019c7e:	3714      	adds	r7, #20
 8019c80:	46bd      	mov	sp, r7
 8019c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c86:	4770      	bx	lr

08019c88 <mbedtls_ssl_read_version>:

void mbedtls_ssl_read_version( int *major, int *minor, int transport,
                       const unsigned char ver[2] )
{
 8019c88:	b480      	push	{r7}
 8019c8a:	b085      	sub	sp, #20
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	60f8      	str	r0, [r7, #12]
 8019c90:	60b9      	str	r1, [r7, #8]
 8019c92:	607a      	str	r2, [r7, #4]
 8019c94:	603b      	str	r3, [r7, #0]
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	781b      	ldrb	r3, [r3, #0]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	601a      	str	r2, [r3, #0]
        *minor = ver[1];
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	3301      	adds	r3, #1
 8019ca4:	781b      	ldrb	r3, [r3, #0]
 8019ca6:	461a      	mov	r2, r3
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	601a      	str	r2, [r3, #0]
    }
}
 8019cac:	bf00      	nop
 8019cae:	3714      	adds	r7, #20
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb6:	4770      	bx	lr

08019cb8 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b086      	sub	sp, #24
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	60f8      	str	r0, [r7, #12]
 8019cc0:	60b9      	str	r1, [r7, #8]
 8019cc2:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( end - *p ) < 1 )
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	68ba      	ldr	r2, [r7, #8]
 8019cca:	1ad3      	subs	r3, r2, r3
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	dc01      	bgt.n	8019cd4 <mbedtls_x509_get_serial+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 8019cd0:	4b1a      	ldr	r3, [pc, #104]	; (8019d3c <mbedtls_x509_get_serial+0x84>)
 8019cd2:	e02f      	b.n	8019d34 <mbedtls_x509_get_serial+0x7c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	781b      	ldrb	r3, [r3, #0]
 8019cda:	2b82      	cmp	r3, #130	; 0x82
 8019cdc:	d006      	beq.n	8019cec <mbedtls_x509_get_serial+0x34>
        **p !=   MBEDTLS_ASN1_INTEGER )
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	781b      	ldrb	r3, [r3, #0]
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8019ce4:	2b02      	cmp	r3, #2
 8019ce6:	d001      	beq.n	8019cec <mbedtls_x509_get_serial+0x34>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 8019ce8:	4b15      	ldr	r3, [pc, #84]	; (8019d40 <mbedtls_x509_get_serial+0x88>)
 8019cea:	e023      	b.n	8019d34 <mbedtls_x509_get_serial+0x7c>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	1c59      	adds	r1, r3, #1
 8019cf2:	68fa      	ldr	r2, [r7, #12]
 8019cf4:	6011      	str	r1, [r2, #0]
 8019cf6:	781b      	ldrb	r3, [r3, #0]
 8019cf8:	461a      	mov	r2, r3
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	3304      	adds	r3, #4
 8019d02:	461a      	mov	r2, r3
 8019d04:	68b9      	ldr	r1, [r7, #8]
 8019d06:	68f8      	ldr	r0, [r7, #12]
 8019d08:	f7ec fd8a 	bl	8006820 <mbedtls_asn1_get_len>
 8019d0c:	6178      	str	r0, [r7, #20]
 8019d0e:	697b      	ldr	r3, [r7, #20]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d003      	beq.n	8019d1c <mbedtls_x509_get_serial+0x64>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 8019d14:	697b      	ldr	r3, [r7, #20]
 8019d16:	f5a3 530a 	sub.w	r3, r3, #8832	; 0x2280
 8019d1a:	e00b      	b.n	8019d34 <mbedtls_x509_get_serial+0x7c>

    serial->p = *p;
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	681a      	ldr	r2, [r3, #0]
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	609a      	str	r2, [r3, #8]
    *p += serial->len;
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	681a      	ldr	r2, [r3, #0]
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	685b      	ldr	r3, [r3, #4]
 8019d2c:	441a      	add	r2, r3
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	601a      	str	r2, [r3, #0]

    return( 0 );
 8019d32:	2300      	movs	r3, #0
}
 8019d34:	4618      	mov	r0, r3
 8019d36:	3718      	adds	r7, #24
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}
 8019d3c:	ffffdd20 	.word	0xffffdd20
 8019d40:	ffffdd1e 	.word	0xffffdd1e

08019d44 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b086      	sub	sp, #24
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	60f8      	str	r0, [r7, #12]
 8019d4c:	60b9      	str	r1, [r7, #8]
 8019d4e:	607a      	str	r2, [r7, #4]
 8019d50:	603b      	str	r3, [r7, #0]
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	687a      	ldr	r2, [r7, #4]
 8019d56:	68b9      	ldr	r1, [r7, #8]
 8019d58:	68f8      	ldr	r0, [r7, #12]
 8019d5a:	f7ec ff92 	bl	8006c82 <mbedtls_asn1_get_alg>
 8019d5e:	6178      	str	r0, [r7, #20]
 8019d60:	697b      	ldr	r3, [r7, #20]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d003      	beq.n	8019d6e <mbedtls_x509_get_alg+0x2a>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 8019d66:	697b      	ldr	r3, [r7, #20]
 8019d68:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8019d6c:	e000      	b.n	8019d70 <mbedtls_x509_get_alg+0x2c>

    return( 0 );
 8019d6e:	2300      	movs	r3, #0
}
 8019d70:	4618      	mov	r0, r3
 8019d72:	3718      	adds	r7, #24
 8019d74:	46bd      	mov	sp, r7
 8019d76:	bd80      	pop	{r7, pc}

08019d78 <x509_get_attr_type_value>:
 *  AttributeValue ::= ANY DEFINED BY AttributeType
 */
static int x509_get_attr_type_value( unsigned char **p,
                                     const unsigned char *end,
                                     mbedtls_x509_name *cur )
{
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b088      	sub	sp, #32
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	60f8      	str	r0, [r7, #12]
 8019d80:	60b9      	str	r1, [r7, #8]
 8019d82:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8019d84:	f107 0210 	add.w	r2, r7, #16
 8019d88:	2330      	movs	r3, #48	; 0x30
 8019d8a:	68b9      	ldr	r1, [r7, #8]
 8019d8c:	68f8      	ldr	r0, [r7, #12]
 8019d8e:	f7ec fe09 	bl	80069a4 <mbedtls_asn1_get_tag>
 8019d92:	61f8      	str	r0, [r7, #28]
 8019d94:	69fb      	ldr	r3, [r7, #28]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d003      	beq.n	8019da2 <x509_get_attr_type_value+0x2a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019d9a:	69fb      	ldr	r3, [r7, #28]
 8019d9c:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 8019da0:	e080      	b.n	8019ea4 <x509_get_attr_type_value+0x12c>

    if( ( end - *p ) < 1 )
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	68ba      	ldr	r2, [r7, #8]
 8019da8:	1ad3      	subs	r3, r2, r3
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	dc01      	bgt.n	8019db2 <x509_get_attr_type_value+0x3a>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 8019dae:	4b3f      	ldr	r3, [pc, #252]	; (8019eac <x509_get_attr_type_value+0x134>)
 8019db0:	e078      	b.n	8019ea4 <x509_get_attr_type_value+0x12c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	61bb      	str	r3, [r7, #24]
    oid->tag = **p;
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	781b      	ldrb	r3, [r3, #0]
 8019dbc:	461a      	mov	r2, r3
 8019dbe:	69bb      	ldr	r3, [r7, #24]
 8019dc0:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8019dc2:	69bb      	ldr	r3, [r7, #24]
 8019dc4:	1d1a      	adds	r2, r3, #4
 8019dc6:	2306      	movs	r3, #6
 8019dc8:	68b9      	ldr	r1, [r7, #8]
 8019dca:	68f8      	ldr	r0, [r7, #12]
 8019dcc:	f7ec fdea 	bl	80069a4 <mbedtls_asn1_get_tag>
 8019dd0:	61f8      	str	r0, [r7, #28]
 8019dd2:	69fb      	ldr	r3, [r7, #28]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d003      	beq.n	8019de0 <x509_get_attr_type_value+0x68>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019dd8:	69fb      	ldr	r3, [r7, #28]
 8019dda:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 8019dde:	e061      	b.n	8019ea4 <x509_get_attr_type_value+0x12c>

    oid->p = *p;
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	681a      	ldr	r2, [r3, #0]
 8019de4:	69bb      	ldr	r3, [r7, #24]
 8019de6:	609a      	str	r2, [r3, #8]
    *p += oid->len;
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	681a      	ldr	r2, [r3, #0]
 8019dec:	69bb      	ldr	r3, [r7, #24]
 8019dee:	685b      	ldr	r3, [r3, #4]
 8019df0:	441a      	add	r2, r3
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	601a      	str	r2, [r3, #0]

    if( ( end - *p ) < 1 )
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	68ba      	ldr	r2, [r7, #8]
 8019dfc:	1ad3      	subs	r3, r2, r3
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	dc01      	bgt.n	8019e06 <x509_get_attr_type_value+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 8019e02:	4b2a      	ldr	r3, [pc, #168]	; (8019eac <x509_get_attr_type_value+0x134>)
 8019e04:	e04e      	b.n	8019ea4 <x509_get_attr_type_value+0x12c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	781b      	ldrb	r3, [r3, #0]
 8019e0c:	2b1e      	cmp	r3, #30
 8019e0e:	d01f      	beq.n	8019e50 <x509_get_attr_type_value+0xd8>
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	781b      	ldrb	r3, [r3, #0]
 8019e16:	2b0c      	cmp	r3, #12
 8019e18:	d01a      	beq.n	8019e50 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	781b      	ldrb	r3, [r3, #0]
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8019e20:	2b14      	cmp	r3, #20
 8019e22:	d015      	beq.n	8019e50 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	781b      	ldrb	r3, [r3, #0]
 8019e2a:	2b13      	cmp	r3, #19
 8019e2c:	d010      	beq.n	8019e50 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	781b      	ldrb	r3, [r3, #0]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
 8019e34:	2b16      	cmp	r3, #22
 8019e36:	d00b      	beq.n	8019e50 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	781b      	ldrb	r3, [r3, #0]
 8019e3e:	2b1c      	cmp	r3, #28
 8019e40:	d006      	beq.n	8019e50 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_BIT_STRING )
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	781b      	ldrb	r3, [r3, #0]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8019e48:	2b03      	cmp	r3, #3
 8019e4a:	d001      	beq.n	8019e50 <x509_get_attr_type_value+0xd8>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 8019e4c:	4b18      	ldr	r3, [pc, #96]	; (8019eb0 <x509_get_attr_type_value+0x138>)
 8019e4e:	e029      	b.n	8019ea4 <x509_get_attr_type_value+0x12c>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	330c      	adds	r3, #12
 8019e54:	617b      	str	r3, [r7, #20]
    val->tag = *(*p)++;
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	1c59      	adds	r1, r3, #1
 8019e5c:	68fa      	ldr	r2, [r7, #12]
 8019e5e:	6011      	str	r1, [r2, #0]
 8019e60:	781b      	ldrb	r3, [r3, #0]
 8019e62:	461a      	mov	r2, r3
 8019e64:	697b      	ldr	r3, [r7, #20]
 8019e66:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8019e68:	697b      	ldr	r3, [r7, #20]
 8019e6a:	3304      	adds	r3, #4
 8019e6c:	461a      	mov	r2, r3
 8019e6e:	68b9      	ldr	r1, [r7, #8]
 8019e70:	68f8      	ldr	r0, [r7, #12]
 8019e72:	f7ec fcd5 	bl	8006820 <mbedtls_asn1_get_len>
 8019e76:	61f8      	str	r0, [r7, #28]
 8019e78:	69fb      	ldr	r3, [r7, #28]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d003      	beq.n	8019e86 <x509_get_attr_type_value+0x10e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019e7e:	69fb      	ldr	r3, [r7, #28]
 8019e80:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 8019e84:	e00e      	b.n	8019ea4 <x509_get_attr_type_value+0x12c>

    val->p = *p;
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	681a      	ldr	r2, [r3, #0]
 8019e8a:	697b      	ldr	r3, [r7, #20]
 8019e8c:	609a      	str	r2, [r3, #8]
    *p += val->len;
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	681a      	ldr	r2, [r3, #0]
 8019e92:	697b      	ldr	r3, [r7, #20]
 8019e94:	685b      	ldr	r3, [r3, #4]
 8019e96:	441a      	add	r2, r3
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	601a      	str	r2, [r3, #0]

    cur->next = NULL;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	619a      	str	r2, [r3, #24]

    return( 0 );
 8019ea2:	2300      	movs	r3, #0
}
 8019ea4:	4618      	mov	r0, r3
 8019ea6:	3720      	adds	r7, #32
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd80      	pop	{r7, pc}
 8019eac:	ffffdc20 	.word	0xffffdc20
 8019eb0:	ffffdc1e 	.word	0xffffdc1e

08019eb4 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b088      	sub	sp, #32
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	60f8      	str	r0, [r7, #12]
 8019ebc:	60b9      	str	r1, [r7, #8]
 8019ebe:	607a      	str	r2, [r7, #4]
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8019ec0:	f107 0214 	add.w	r2, r7, #20
 8019ec4:	2331      	movs	r3, #49	; 0x31
 8019ec6:	68b9      	ldr	r1, [r7, #8]
 8019ec8:	68f8      	ldr	r0, [r7, #12]
 8019eca:	f7ec fd6b 	bl	80069a4 <mbedtls_asn1_get_tag>
 8019ece:	61f8      	str	r0, [r7, #28]
 8019ed0:	69fb      	ldr	r3, [r7, #28]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d003      	beq.n	8019ede <mbedtls_x509_get_name+0x2a>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019ed6:	69fb      	ldr	r3, [r7, #28]
 8019ed8:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 8019edc:	e043      	b.n	8019f66 <mbedtls_x509_get_name+0xb2>

        end_set  = *p + set_len;
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	681a      	ldr	r2, [r3, #0]
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	4413      	add	r3, r2
 8019ee6:	61bb      	str	r3, [r7, #24]

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8019ee8:	687a      	ldr	r2, [r7, #4]
 8019eea:	69b9      	ldr	r1, [r7, #24]
 8019eec:	68f8      	ldr	r0, [r7, #12]
 8019eee:	f7ff ff43 	bl	8019d78 <x509_get_attr_type_value>
 8019ef2:	61f8      	str	r0, [r7, #28]
 8019ef4:	69fb      	ldr	r3, [r7, #28]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d001      	beq.n	8019efe <mbedtls_x509_get_name+0x4a>
                return( ret );
 8019efa:	69fb      	ldr	r3, [r7, #28]
 8019efc:	e033      	b.n	8019f66 <mbedtls_x509_get_name+0xb2>

            if( *p == end_set )
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	69ba      	ldr	r2, [r7, #24]
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d014      	beq.n	8019f32 <mbedtls_x509_get_name+0x7e>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	771a      	strb	r2, [r3, #28]

            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8019f0e:	2120      	movs	r1, #32
 8019f10:	2001      	movs	r0, #1
 8019f12:	f004 fb0d 	bl	801e530 <calloc>
 8019f16:	4603      	mov	r3, r0
 8019f18:	461a      	mov	r2, r3
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	619a      	str	r2, [r3, #24]

            if( cur->next == NULL )
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	699b      	ldr	r3, [r3, #24]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d101      	bne.n	8019f2a <mbedtls_x509_get_name+0x76>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8019f26:	4b12      	ldr	r3, [pc, #72]	; (8019f70 <mbedtls_x509_get_name+0xbc>)
 8019f28:	e01d      	b.n	8019f66 <mbedtls_x509_get_name+0xb2>

            cur = cur->next;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	699b      	ldr	r3, [r3, #24]
 8019f2e:	607b      	str	r3, [r7, #4]
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8019f30:	e7da      	b.n	8019ee8 <mbedtls_x509_get_name+0x34>
                break;
 8019f32:	bf00      	nop
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	68ba      	ldr	r2, [r7, #8]
 8019f3a:	429a      	cmp	r2, r3
 8019f3c:	d101      	bne.n	8019f42 <mbedtls_x509_get_name+0x8e>
            return( 0 );
 8019f3e:	2300      	movs	r3, #0
 8019f40:	e011      	b.n	8019f66 <mbedtls_x509_get_name+0xb2>

        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8019f42:	2120      	movs	r1, #32
 8019f44:	2001      	movs	r0, #1
 8019f46:	f004 faf3 	bl	801e530 <calloc>
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	461a      	mov	r2, r3
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	619a      	str	r2, [r3, #24]

        if( cur->next == NULL )
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	699b      	ldr	r3, [r3, #24]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d101      	bne.n	8019f5e <mbedtls_x509_get_name+0xaa>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8019f5a:	4b05      	ldr	r3, [pc, #20]	; (8019f70 <mbedtls_x509_get_name+0xbc>)
 8019f5c:	e003      	b.n	8019f66 <mbedtls_x509_get_name+0xb2>

        cur = cur->next;
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	699b      	ldr	r3, [r3, #24]
 8019f62:	607b      	str	r3, [r7, #4]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8019f64:	e7ac      	b.n	8019ec0 <mbedtls_x509_get_name+0xc>
    }
}
 8019f66:	4618      	mov	r0, r3
 8019f68:	3720      	adds	r7, #32
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}
 8019f6e:	bf00      	nop
 8019f70:	ffffd780 	.word	0xffffd780

08019f74 <x509_parse_int>:

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 8019f74:	b480      	push	{r7}
 8019f76:	b085      	sub	sp, #20
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	60f8      	str	r0, [r7, #12]
 8019f7c:	60b9      	str	r1, [r7, #8]
 8019f7e:	607a      	str	r2, [r7, #4]
    *res = 0;
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2200      	movs	r2, #0
 8019f84:	601a      	str	r2, [r3, #0]

    for( ; n > 0; --n )
 8019f86:	e024      	b.n	8019fd2 <x509_parse_int+0x5e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	781b      	ldrb	r3, [r3, #0]
 8019f8e:	2b2f      	cmp	r3, #47	; 0x2f
 8019f90:	d904      	bls.n	8019f9c <x509_parse_int+0x28>
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	781b      	ldrb	r3, [r3, #0]
 8019f98:	2b39      	cmp	r3, #57	; 0x39
 8019f9a:	d901      	bls.n	8019fa0 <x509_parse_int+0x2c>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8019f9c:	4b12      	ldr	r3, [pc, #72]	; (8019fe8 <x509_parse_int+0x74>)
 8019f9e:	e01c      	b.n	8019fda <x509_parse_int+0x66>

        *res *= 10;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	681a      	ldr	r2, [r3, #0]
 8019fa4:	4613      	mov	r3, r2
 8019fa6:	009b      	lsls	r3, r3, #2
 8019fa8:	4413      	add	r3, r2
 8019faa:	005b      	lsls	r3, r3, #1
 8019fac:	461a      	mov	r2, r3
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	601a      	str	r2, [r3, #0]
        *res += ( *(*p)++ - '0' );
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	1c59      	adds	r1, r3, #1
 8019fb8:	68fa      	ldr	r2, [r7, #12]
 8019fba:	6011      	str	r1, [r2, #0]
 8019fbc:	781b      	ldrb	r3, [r3, #0]
 8019fbe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	441a      	add	r2, r3
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	601a      	str	r2, [r3, #0]
    for( ; n > 0; --n )
 8019fcc:	68bb      	ldr	r3, [r7, #8]
 8019fce:	3b01      	subs	r3, #1
 8019fd0:	60bb      	str	r3, [r7, #8]
 8019fd2:	68bb      	ldr	r3, [r7, #8]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d1d7      	bne.n	8019f88 <x509_parse_int+0x14>
    }

    return( 0 );
 8019fd8:	2300      	movs	r3, #0
}
 8019fda:	4618      	mov	r0, r3
 8019fdc:	3714      	adds	r7, #20
 8019fde:	46bd      	mov	sp, r7
 8019fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe4:	4770      	bx	lr
 8019fe6:	bf00      	nop
 8019fe8:	ffffdc00 	.word	0xffffdc00

08019fec <x509_date_is_valid>:

static int x509_date_is_valid(const mbedtls_x509_time *t )
{
 8019fec:	b480      	push	{r7}
 8019fee:	b085      	sub	sp, #20
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
 8019ff4:	4b47      	ldr	r3, [pc, #284]	; (801a114 <x509_date_is_valid+0x128>)
 8019ff6:	60bb      	str	r3, [r7, #8]
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	db05      	blt.n	801a00c <x509_date_is_valid+0x20>
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	f242 720f 	movw	r2, #9999	; 0x270f
 801a008:	4293      	cmp	r3, r2
 801a00a:	dd01      	ble.n	801a010 <x509_date_is_valid+0x24>
 801a00c:	68bb      	ldr	r3, [r7, #8]
 801a00e:	e07a      	b.n	801a106 <x509_date_is_valid+0x11a>
    CHECK_RANGE( 0, 23,   t->hour );
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	68db      	ldr	r3, [r3, #12]
 801a014:	2b00      	cmp	r3, #0
 801a016:	db03      	blt.n	801a020 <x509_date_is_valid+0x34>
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	68db      	ldr	r3, [r3, #12]
 801a01c:	2b17      	cmp	r3, #23
 801a01e:	dd01      	ble.n	801a024 <x509_date_is_valid+0x38>
 801a020:	68bb      	ldr	r3, [r7, #8]
 801a022:	e070      	b.n	801a106 <x509_date_is_valid+0x11a>
    CHECK_RANGE( 0, 59,   t->min  );
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	691b      	ldr	r3, [r3, #16]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	db03      	blt.n	801a034 <x509_date_is_valid+0x48>
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	691b      	ldr	r3, [r3, #16]
 801a030:	2b3b      	cmp	r3, #59	; 0x3b
 801a032:	dd01      	ble.n	801a038 <x509_date_is_valid+0x4c>
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	e066      	b.n	801a106 <x509_date_is_valid+0x11a>
    CHECK_RANGE( 0, 59,   t->sec  );
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	695b      	ldr	r3, [r3, #20]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	db03      	blt.n	801a048 <x509_date_is_valid+0x5c>
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	695b      	ldr	r3, [r3, #20]
 801a044:	2b3b      	cmp	r3, #59	; 0x3b
 801a046:	dd01      	ble.n	801a04c <x509_date_is_valid+0x60>
 801a048:	68bb      	ldr	r3, [r7, #8]
 801a04a:	e05c      	b.n	801a106 <x509_date_is_valid+0x11a>

    switch( t->mon )
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	685b      	ldr	r3, [r3, #4]
 801a050:	3b01      	subs	r3, #1
 801a052:	2b0b      	cmp	r3, #11
 801a054:	d849      	bhi.n	801a0ea <x509_date_is_valid+0xfe>
 801a056:	a201      	add	r2, pc, #4	; (adr r2, 801a05c <x509_date_is_valid+0x70>)
 801a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a05c:	0801a08d 	.word	0x0801a08d
 801a060:	0801a099 	.word	0x0801a099
 801a064:	0801a08d 	.word	0x0801a08d
 801a068:	0801a093 	.word	0x0801a093
 801a06c:	0801a08d 	.word	0x0801a08d
 801a070:	0801a093 	.word	0x0801a093
 801a074:	0801a08d 	.word	0x0801a08d
 801a078:	0801a08d 	.word	0x0801a08d
 801a07c:	0801a093 	.word	0x0801a093
 801a080:	0801a08d 	.word	0x0801a08d
 801a084:	0801a093 	.word	0x0801a093
 801a088:	0801a08d 	.word	0x0801a08d
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 801a08c:	231f      	movs	r3, #31
 801a08e:	60fb      	str	r3, [r7, #12]
            break;
 801a090:	e02d      	b.n	801a0ee <x509_date_is_valid+0x102>
        case 4: case 6: case 9: case 11:
            month_len = 30;
 801a092:	231e      	movs	r3, #30
 801a094:	60fb      	str	r3, [r7, #12]
            break;
 801a096:	e02a      	b.n	801a0ee <x509_date_is_valid+0x102>
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	f003 0303 	and.w	r3, r3, #3
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d10d      	bne.n	801a0c0 <x509_date_is_valid+0xd4>
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	681a      	ldr	r2, [r3, #0]
 801a0a8:	4b1b      	ldr	r3, [pc, #108]	; (801a118 <x509_date_is_valid+0x12c>)
 801a0aa:	fb83 1302 	smull	r1, r3, r3, r2
 801a0ae:	1159      	asrs	r1, r3, #5
 801a0b0:	17d3      	asrs	r3, r2, #31
 801a0b2:	1acb      	subs	r3, r1, r3
 801a0b4:	2164      	movs	r1, #100	; 0x64
 801a0b6:	fb01 f303 	mul.w	r3, r1, r3
 801a0ba:	1ad3      	subs	r3, r2, r3
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d10e      	bne.n	801a0de <x509_date_is_valid+0xf2>
                !( t->year % 400 ) )
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	681a      	ldr	r2, [r3, #0]
 801a0c4:	4b14      	ldr	r3, [pc, #80]	; (801a118 <x509_date_is_valid+0x12c>)
 801a0c6:	fb83 1302 	smull	r1, r3, r3, r2
 801a0ca:	11d9      	asrs	r1, r3, #7
 801a0cc:	17d3      	asrs	r3, r2, #31
 801a0ce:	1acb      	subs	r3, r1, r3
 801a0d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a0d4:	fb01 f303 	mul.w	r3, r1, r3
 801a0d8:	1ad3      	subs	r3, r2, r3
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d102      	bne.n	801a0e4 <x509_date_is_valid+0xf8>
                month_len = 29;
 801a0de:	231d      	movs	r3, #29
 801a0e0:	60fb      	str	r3, [r7, #12]
            else
                month_len = 28;
            break;
 801a0e2:	e004      	b.n	801a0ee <x509_date_is_valid+0x102>
                month_len = 28;
 801a0e4:	231c      	movs	r3, #28
 801a0e6:	60fb      	str	r3, [r7, #12]
            break;
 801a0e8:	e001      	b.n	801a0ee <x509_date_is_valid+0x102>
        default:
            return( ret );
 801a0ea:	68bb      	ldr	r3, [r7, #8]
 801a0ec:	e00b      	b.n	801a106 <x509_date_is_valid+0x11a>
    }
    CHECK_RANGE( 1, month_len, t->day );
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	689b      	ldr	r3, [r3, #8]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	dd04      	ble.n	801a100 <x509_date_is_valid+0x114>
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	689b      	ldr	r3, [r3, #8]
 801a0fa:	68fa      	ldr	r2, [r7, #12]
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	da01      	bge.n	801a104 <x509_date_is_valid+0x118>
 801a100:	68bb      	ldr	r3, [r7, #8]
 801a102:	e000      	b.n	801a106 <x509_date_is_valid+0x11a>

    return( 0 );
 801a104:	2300      	movs	r3, #0
}
 801a106:	4618      	mov	r0, r3
 801a108:	3714      	adds	r7, #20
 801a10a:	46bd      	mov	sp, r7
 801a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a110:	4770      	bx	lr
 801a112:	bf00      	nop
 801a114:	ffffdc00 	.word	0xffffdc00
 801a118:	51eb851f 	.word	0x51eb851f

0801a11c <x509_parse_time>:
 * Parse an ASN1_UTC_TIME (yearlen=2) or ASN1_GENERALIZED_TIME (yearlen=4)
 * field.
 */
static int x509_parse_time( unsigned char **p, size_t len, size_t yearlen,
                            mbedtls_x509_time *tm )
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b086      	sub	sp, #24
 801a120:	af00      	add	r7, sp, #0
 801a122:	60f8      	str	r0, [r7, #12]
 801a124:	60b9      	str	r1, [r7, #8]
 801a126:	607a      	str	r2, [r7, #4]
 801a128:	603b      	str	r3, [r7, #0]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	3308      	adds	r3, #8
 801a12e:	68ba      	ldr	r2, [r7, #8]
 801a130:	429a      	cmp	r2, r3
 801a132:	d201      	bcs.n	801a138 <x509_parse_time+0x1c>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 801a134:	4b49      	ldr	r3, [pc, #292]	; (801a25c <x509_parse_time+0x140>)
 801a136:	e08c      	b.n	801a252 <x509_parse_time+0x136>
    len -= yearlen + 8;
 801a138:	68ba      	ldr	r2, [r7, #8]
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	1ad3      	subs	r3, r2, r3
 801a13e:	3b08      	subs	r3, #8
 801a140:	60bb      	str	r3, [r7, #8]

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	461a      	mov	r2, r3
 801a146:	6879      	ldr	r1, [r7, #4]
 801a148:	68f8      	ldr	r0, [r7, #12]
 801a14a:	f7ff ff13 	bl	8019f74 <x509_parse_int>
 801a14e:	6178      	str	r0, [r7, #20]
 801a150:	697b      	ldr	r3, [r7, #20]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d001      	beq.n	801a15a <x509_parse_time+0x3e>
 801a156:	697b      	ldr	r3, [r7, #20]
 801a158:	e07b      	b.n	801a252 <x509_parse_time+0x136>
    if ( 2 == yearlen )
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	2b02      	cmp	r3, #2
 801a15e:	d10f      	bne.n	801a180 <x509_parse_time+0x64>
    {
        if ( tm->year < 50 )
 801a160:	683b      	ldr	r3, [r7, #0]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	2b31      	cmp	r3, #49	; 0x31
 801a166:	dc05      	bgt.n	801a174 <x509_parse_time+0x58>
            tm->year += 100;
 801a168:	683b      	ldr	r3, [r7, #0]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 801a170:	683b      	ldr	r3, [r7, #0]
 801a172:	601a      	str	r2, [r3, #0]

        tm->year += 1900;
 801a174:	683b      	ldr	r3, [r7, #0]
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 801a17c:	683b      	ldr	r3, [r7, #0]
 801a17e:	601a      	str	r2, [r3, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 801a180:	683b      	ldr	r3, [r7, #0]
 801a182:	3304      	adds	r3, #4
 801a184:	461a      	mov	r2, r3
 801a186:	2102      	movs	r1, #2
 801a188:	68f8      	ldr	r0, [r7, #12]
 801a18a:	f7ff fef3 	bl	8019f74 <x509_parse_int>
 801a18e:	6178      	str	r0, [r7, #20]
 801a190:	697b      	ldr	r3, [r7, #20]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d001      	beq.n	801a19a <x509_parse_time+0x7e>
 801a196:	697b      	ldr	r3, [r7, #20]
 801a198:	e05b      	b.n	801a252 <x509_parse_time+0x136>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 801a19a:	683b      	ldr	r3, [r7, #0]
 801a19c:	3308      	adds	r3, #8
 801a19e:	461a      	mov	r2, r3
 801a1a0:	2102      	movs	r1, #2
 801a1a2:	68f8      	ldr	r0, [r7, #12]
 801a1a4:	f7ff fee6 	bl	8019f74 <x509_parse_int>
 801a1a8:	6178      	str	r0, [r7, #20]
 801a1aa:	697b      	ldr	r3, [r7, #20]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d001      	beq.n	801a1b4 <x509_parse_time+0x98>
 801a1b0:	697b      	ldr	r3, [r7, #20]
 801a1b2:	e04e      	b.n	801a252 <x509_parse_time+0x136>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 801a1b4:	683b      	ldr	r3, [r7, #0]
 801a1b6:	330c      	adds	r3, #12
 801a1b8:	461a      	mov	r2, r3
 801a1ba:	2102      	movs	r1, #2
 801a1bc:	68f8      	ldr	r0, [r7, #12]
 801a1be:	f7ff fed9 	bl	8019f74 <x509_parse_int>
 801a1c2:	6178      	str	r0, [r7, #20]
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d001      	beq.n	801a1ce <x509_parse_time+0xb2>
 801a1ca:	697b      	ldr	r3, [r7, #20]
 801a1cc:	e041      	b.n	801a252 <x509_parse_time+0x136>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 801a1ce:	683b      	ldr	r3, [r7, #0]
 801a1d0:	3310      	adds	r3, #16
 801a1d2:	461a      	mov	r2, r3
 801a1d4:	2102      	movs	r1, #2
 801a1d6:	68f8      	ldr	r0, [r7, #12]
 801a1d8:	f7ff fecc 	bl	8019f74 <x509_parse_int>
 801a1dc:	6178      	str	r0, [r7, #20]
 801a1de:	697b      	ldr	r3, [r7, #20]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d001      	beq.n	801a1e8 <x509_parse_time+0xcc>
 801a1e4:	697b      	ldr	r3, [r7, #20]
 801a1e6:	e034      	b.n	801a252 <x509_parse_time+0x136>

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 801a1e8:	68bb      	ldr	r3, [r7, #8]
 801a1ea:	2b01      	cmp	r3, #1
 801a1ec:	d913      	bls.n	801a216 <x509_parse_time+0xfa>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 801a1ee:	683b      	ldr	r3, [r7, #0]
 801a1f0:	3314      	adds	r3, #20
 801a1f2:	461a      	mov	r2, r3
 801a1f4:	2102      	movs	r1, #2
 801a1f6:	68f8      	ldr	r0, [r7, #12]
 801a1f8:	f7ff febc 	bl	8019f74 <x509_parse_int>
 801a1fc:	6178      	str	r0, [r7, #20]
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d001      	beq.n	801a208 <x509_parse_time+0xec>
 801a204:	697b      	ldr	r3, [r7, #20]
 801a206:	e024      	b.n	801a252 <x509_parse_time+0x136>
        len -= 2;
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	3b02      	subs	r3, #2
 801a20c:	60bb      	str	r3, [r7, #8]
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 801a20e:	68bb      	ldr	r3, [r7, #8]
 801a210:	2b01      	cmp	r3, #1
 801a212:	d10f      	bne.n	801a234 <x509_parse_time+0x118>
 801a214:	e001      	b.n	801a21a <x509_parse_time+0xfe>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 801a216:	4b11      	ldr	r3, [pc, #68]	; (801a25c <x509_parse_time+0x140>)
 801a218:	e01b      	b.n	801a252 <x509_parse_time+0x136>
    if ( 1 == len && 'Z' == **p )
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	781b      	ldrb	r3, [r3, #0]
 801a220:	2b5a      	cmp	r3, #90	; 0x5a
 801a222:	d107      	bne.n	801a234 <x509_parse_time+0x118>
    {
        (*p)++;
 801a224:	68fb      	ldr	r3, [r7, #12]
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	1c5a      	adds	r2, r3, #1
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	601a      	str	r2, [r3, #0]
        len--;
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	3b01      	subs	r3, #1
 801a232:	60bb      	str	r3, [r7, #8]
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 801a234:	68bb      	ldr	r3, [r7, #8]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d001      	beq.n	801a23e <x509_parse_time+0x122>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 801a23a:	4b08      	ldr	r3, [pc, #32]	; (801a25c <x509_parse_time+0x140>)
 801a23c:	e009      	b.n	801a252 <x509_parse_time+0x136>

    CHECK( x509_date_is_valid( tm ) );
 801a23e:	6838      	ldr	r0, [r7, #0]
 801a240:	f7ff fed4 	bl	8019fec <x509_date_is_valid>
 801a244:	6178      	str	r0, [r7, #20]
 801a246:	697b      	ldr	r3, [r7, #20]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d001      	beq.n	801a250 <x509_parse_time+0x134>
 801a24c:	697b      	ldr	r3, [r7, #20]
 801a24e:	e000      	b.n	801a252 <x509_parse_time+0x136>

    return ( 0 );
 801a250:	2300      	movs	r3, #0
}
 801a252:	4618      	mov	r0, r3
 801a254:	3718      	adds	r7, #24
 801a256:	46bd      	mov	sp, r7
 801a258:	bd80      	pop	{r7, pc}
 801a25a:	bf00      	nop
 801a25c:	ffffdc00 	.word	0xffffdc00

0801a260 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b088      	sub	sp, #32
 801a264:	af00      	add	r7, sp, #0
 801a266:	60f8      	str	r0, [r7, #12]
 801a268:	60b9      	str	r1, [r7, #8]
 801a26a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	68ba      	ldr	r2, [r7, #8]
 801a272:	1ad3      	subs	r3, r2, r3
 801a274:	2b00      	cmp	r3, #0
 801a276:	dc01      	bgt.n	801a27c <mbedtls_x509_get_time+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801a278:	4b19      	ldr	r3, [pc, #100]	; (801a2e0 <mbedtls_x509_get_time+0x80>)
 801a27a:	e02c      	b.n	801a2d6 <mbedtls_x509_get_time+0x76>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	781b      	ldrb	r3, [r3, #0]
 801a282:	76fb      	strb	r3, [r7, #27]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 801a284:	7efb      	ldrb	r3, [r7, #27]
 801a286:	2b17      	cmp	r3, #23
 801a288:	d102      	bne.n	801a290 <mbedtls_x509_get_time+0x30>
        year_len = 2;
 801a28a:	2302      	movs	r3, #2
 801a28c:	61fb      	str	r3, [r7, #28]
 801a28e:	e007      	b.n	801a2a0 <mbedtls_x509_get_time+0x40>
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 801a290:	7efb      	ldrb	r3, [r7, #27]
 801a292:	2b18      	cmp	r3, #24
 801a294:	d102      	bne.n	801a29c <mbedtls_x509_get_time+0x3c>
        year_len = 4;
 801a296:	2304      	movs	r3, #4
 801a298:	61fb      	str	r3, [r7, #28]
 801a29a:	e001      	b.n	801a2a0 <mbedtls_x509_get_time+0x40>
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801a29c:	4b11      	ldr	r3, [pc, #68]	; (801a2e4 <mbedtls_x509_get_time+0x84>)
 801a29e:	e01a      	b.n	801a2d6 <mbedtls_x509_get_time+0x76>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	1c5a      	adds	r2, r3, #1
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	601a      	str	r2, [r3, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 801a2aa:	f107 0310 	add.w	r3, r7, #16
 801a2ae:	461a      	mov	r2, r3
 801a2b0:	68b9      	ldr	r1, [r7, #8]
 801a2b2:	68f8      	ldr	r0, [r7, #12]
 801a2b4:	f7ec fab4 	bl	8006820 <mbedtls_asn1_get_len>
 801a2b8:	6178      	str	r0, [r7, #20]

    if( ret != 0 )
 801a2ba:	697b      	ldr	r3, [r7, #20]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d003      	beq.n	801a2c8 <mbedtls_x509_get_time+0x68>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 801a2c0:	697b      	ldr	r3, [r7, #20]
 801a2c2:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 801a2c6:	e006      	b.n	801a2d6 <mbedtls_x509_get_time+0x76>

    return x509_parse_time( p, len, year_len, tm );
 801a2c8:	6939      	ldr	r1, [r7, #16]
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	69fa      	ldr	r2, [r7, #28]
 801a2ce:	68f8      	ldr	r0, [r7, #12]
 801a2d0:	f7ff ff24 	bl	801a11c <x509_parse_time>
 801a2d4:	4603      	mov	r3, r0
}
 801a2d6:	4618      	mov	r0, r3
 801a2d8:	3720      	adds	r7, #32
 801a2da:	46bd      	mov	sp, r7
 801a2dc:	bd80      	pop	{r7, pc}
 801a2de:	bf00      	nop
 801a2e0:	ffffdba0 	.word	0xffffdba0
 801a2e4:	ffffdb9e 	.word	0xffffdb9e

0801a2e8 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b088      	sub	sp, #32
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	60f8      	str	r0, [r7, #12]
 801a2f0:	60b9      	str	r1, [r7, #8]
 801a2f2:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	68ba      	ldr	r2, [r7, #8]
 801a2fa:	1ad3      	subs	r3, r2, r3
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	dc01      	bgt.n	801a304 <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 801a300:	4b14      	ldr	r3, [pc, #80]	; (801a354 <mbedtls_x509_get_sig+0x6c>)
 801a302:	e023      	b.n	801a34c <mbedtls_x509_get_sig+0x64>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	781b      	ldrb	r3, [r3, #0]
 801a30a:	61fb      	str	r3, [r7, #28]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801a30c:	f107 0314 	add.w	r3, r7, #20
 801a310:	461a      	mov	r2, r3
 801a312:	68b9      	ldr	r1, [r7, #8]
 801a314:	68f8      	ldr	r0, [r7, #12]
 801a316:	f7ec fc21 	bl	8006b5c <mbedtls_asn1_get_bitstring_null>
 801a31a:	61b8      	str	r0, [r7, #24]
 801a31c:	69bb      	ldr	r3, [r7, #24]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d003      	beq.n	801a32a <mbedtls_x509_get_sig+0x42>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 801a322:	69bb      	ldr	r3, [r7, #24]
 801a324:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 801a328:	e010      	b.n	801a34c <mbedtls_x509_get_sig+0x64>

    sig->tag = tag_type;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	69fa      	ldr	r2, [r7, #28]
 801a32e:	601a      	str	r2, [r3, #0]
    sig->len = len;
 801a330:	697a      	ldr	r2, [r7, #20]
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	605a      	str	r2, [r3, #4]
    sig->p = *p;
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	681a      	ldr	r2, [r3, #0]
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	609a      	str	r2, [r3, #8]

    *p += len;
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	681a      	ldr	r2, [r3, #0]
 801a342:	697b      	ldr	r3, [r7, #20]
 801a344:	441a      	add	r2, r3
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	601a      	str	r2, [r3, #0]

    return( 0 );
 801a34a:	2300      	movs	r3, #0
}
 801a34c:	4618      	mov	r0, r3
 801a34e:	3720      	adds	r7, #32
 801a350:	46bd      	mov	sp, r7
 801a352:	bd80      	pop	{r7, pc}
 801a354:	ffffdb20 	.word	0xffffdb20

0801a358 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b086      	sub	sp, #24
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	60f8      	str	r0, [r7, #12]
 801a360:	60b9      	str	r1, [r7, #8]
 801a362:	607a      	str	r2, [r7, #4]
 801a364:	603b      	str	r3, [r7, #0]
    int ret;

    if( *sig_opts != NULL )
 801a366:	6a3b      	ldr	r3, [r7, #32]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d001      	beq.n	801a372 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801a36e:	4b11      	ldr	r3, [pc, #68]	; (801a3b4 <mbedtls_x509_get_sig_alg+0x5c>)
 801a370:	e01b      	b.n	801a3aa <mbedtls_x509_get_sig_alg+0x52>

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 801a372:	683a      	ldr	r2, [r7, #0]
 801a374:	6879      	ldr	r1, [r7, #4]
 801a376:	68f8      	ldr	r0, [r7, #12]
 801a378:	f7f4 fd14 	bl	800eda4 <mbedtls_oid_get_sig_alg>
 801a37c:	6178      	str	r0, [r7, #20]
 801a37e:	697b      	ldr	r3, [r7, #20]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d003      	beq.n	801a38c <mbedtls_x509_get_sig_alg+0x34>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 801a384:	697b      	ldr	r3, [r7, #20]
 801a386:	f5a3 5318 	sub.w	r3, r3, #9728	; 0x2600
 801a38a:	e00e      	b.n	801a3aa <mbedtls_x509_get_sig_alg+0x52>
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 801a38c:	68bb      	ldr	r3, [r7, #8]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	2b05      	cmp	r3, #5
 801a392:	d003      	beq.n	801a39c <mbedtls_x509_get_sig_alg+0x44>
 801a394:	68bb      	ldr	r3, [r7, #8]
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d103      	bne.n	801a3a4 <mbedtls_x509_get_sig_alg+0x4c>
              sig_params->len != 0 )
 801a39c:	68bb      	ldr	r3, [r7, #8]
 801a39e:	685b      	ldr	r3, [r3, #4]
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d001      	beq.n	801a3a8 <mbedtls_x509_get_sig_alg+0x50>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801a3a4:	4b04      	ldr	r3, [pc, #16]	; (801a3b8 <mbedtls_x509_get_sig_alg+0x60>)
 801a3a6:	e000      	b.n	801a3aa <mbedtls_x509_get_sig_alg+0x52>
    }

    return( 0 );
 801a3a8:	2300      	movs	r3, #0
}
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	3718      	adds	r7, #24
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	bd80      	pop	{r7, pc}
 801a3b2:	bf00      	nop
 801a3b4:	ffffd800 	.word	0xffffd800
 801a3b8:	ffffdd00 	.word	0xffffdd00

0801a3bc <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 801a3bc:	b580      	push	{r7, lr}
 801a3be:	b086      	sub	sp, #24
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	60f8      	str	r0, [r7, #12]
 801a3c4:	60b9      	str	r1, [r7, #8]
 801a3c6:	607a      	str	r2, [r7, #4]
 801a3c8:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( *p == end )
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	68ba      	ldr	r2, [r7, #8]
 801a3d0:	429a      	cmp	r2, r3
 801a3d2:	d101      	bne.n	801a3d8 <mbedtls_x509_get_ext+0x1c>
        return( 0 );
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	e037      	b.n	801a448 <mbedtls_x509_get_ext+0x8c>

    ext->tag = **p;
 801a3d8:	68fb      	ldr	r3, [r7, #12]
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	781b      	ldrb	r3, [r3, #0]
 801a3de:	461a      	mov	r2, r3
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	1d1a      	adds	r2, r3, #4
 801a3e8:	683b      	ldr	r3, [r7, #0]
 801a3ea:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 801a3ee:	68b9      	ldr	r1, [r7, #8]
 801a3f0:	68f8      	ldr	r0, [r7, #12]
 801a3f2:	f7ec fad7 	bl	80069a4 <mbedtls_asn1_get_tag>
 801a3f6:	6178      	str	r0, [r7, #20]
 801a3f8:	697b      	ldr	r3, [r7, #20]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d001      	beq.n	801a402 <mbedtls_x509_get_ext+0x46>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );
 801a3fe:	697b      	ldr	r3, [r7, #20]
 801a400:	e022      	b.n	801a448 <mbedtls_x509_get_ext+0x8c>

    ext->p = *p;
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	681a      	ldr	r2, [r3, #0]
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	609a      	str	r2, [r3, #8]
    end = *p + ext->len;
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	681a      	ldr	r2, [r3, #0]
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	685b      	ldr	r3, [r3, #4]
 801a412:	4413      	add	r3, r2
 801a414:	60bb      	str	r3, [r7, #8]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a416:	f107 0210 	add.w	r2, r7, #16
 801a41a:	2330      	movs	r3, #48	; 0x30
 801a41c:	68b9      	ldr	r1, [r7, #8]
 801a41e:	68f8      	ldr	r0, [r7, #12]
 801a420:	f7ec fac0 	bl	80069a4 <mbedtls_asn1_get_tag>
 801a424:	6178      	str	r0, [r7, #20]
 801a426:	697b      	ldr	r3, [r7, #20]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d003      	beq.n	801a434 <mbedtls_x509_get_ext+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a42c:	697b      	ldr	r3, [r7, #20]
 801a42e:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a432:	e009      	b.n	801a448 <mbedtls_x509_get_ext+0x8c>

    if( end != *p + len )
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	681a      	ldr	r2, [r3, #0]
 801a438:	693b      	ldr	r3, [r7, #16]
 801a43a:	4413      	add	r3, r2
 801a43c:	68ba      	ldr	r2, [r7, #8]
 801a43e:	429a      	cmp	r2, r3
 801a440:	d001      	beq.n	801a446 <mbedtls_x509_get_ext+0x8a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a442:	4b03      	ldr	r3, [pc, #12]	; (801a450 <mbedtls_x509_get_ext+0x94>)
 801a444:	e000      	b.n	801a448 <mbedtls_x509_get_ext+0x8c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801a446:	2300      	movs	r3, #0
}
 801a448:	4618      	mov	r0, r3
 801a44a:	3718      	adds	r7, #24
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}
 801a450:	ffffda9a 	.word	0xffffda9a

0801a454 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 801a454:	b580      	push	{r7, lr}
 801a456:	b0cc      	sub	sp, #304	; 0x130
 801a458:	af00      	add	r7, sp, #0
 801a45a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a45e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801a462:	6018      	str	r0, [r3, #0]
 801a464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a468:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801a46c:	6019      	str	r1, [r3, #0]
 801a46e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a472:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a476:	601a      	str	r2, [r3, #0]
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 801a478:	2300      	movs	r3, #0
 801a47a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 801a47e:	2300      	movs	r3, #0
 801a480:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 801a484:	f107 0310 	add.w	r3, r7, #16
 801a488:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a48c:	2100      	movs	r1, #0
 801a48e:	4618      	mov	r0, r3
 801a490:	f004 f8c8 	bl	801e624 <memset>

    name = dn;
 801a494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    p = buf;
 801a4a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a4a6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    n = size;
 801a4b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a4b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    while( name != NULL )
 801a4be:	e0f5      	b.n	801a6ac <mbedtls_x509_dn_gets+0x258>
    {
        if( !name->oid.p )
 801a4c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a4c4:	689b      	ldr	r3, [r3, #8]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d105      	bne.n	801a4d6 <mbedtls_x509_dn_gets+0x82>
        {
            name = name->next;
 801a4ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a4ce:	699b      	ldr	r3, [r3, #24]
 801a4d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            continue;
 801a4d4:	e0ea      	b.n	801a6ac <mbedtls_x509_dn_gets+0x258>
        }

        if( name != dn )
 801a4d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a4da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a4de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	429a      	cmp	r2, r3
 801a4e6:	d029      	beq.n	801a53c <mbedtls_x509_dn_gets+0xe8>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 801a4e8:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d001      	beq.n	801a4f4 <mbedtls_x509_dn_gets+0xa0>
 801a4f0:	4b77      	ldr	r3, [pc, #476]	; (801a6d0 <mbedtls_x509_dn_gets+0x27c>)
 801a4f2:	e000      	b.n	801a4f6 <mbedtls_x509_dn_gets+0xa2>
 801a4f4:	4b77      	ldr	r3, [pc, #476]	; (801a6d4 <mbedtls_x509_dn_gets+0x280>)
 801a4f6:	461a      	mov	r2, r3
 801a4f8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801a4fc:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801a500:	f004 faae 	bl	801ea60 <sniprintf>
 801a504:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
            MBEDTLS_X509_SAFE_SNPRINTF;
 801a508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	db05      	blt.n	801a51c <mbedtls_x509_dn_gets+0xc8>
 801a510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a514:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a518:	429a      	cmp	r2, r3
 801a51a:	d801      	bhi.n	801a520 <mbedtls_x509_dn_gets+0xcc>
 801a51c:	4b6e      	ldr	r3, [pc, #440]	; (801a6d8 <mbedtls_x509_dn_gets+0x284>)
 801a51e:	e0d2      	b.n	801a6c6 <mbedtls_x509_dn_gets+0x272>
 801a520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a524:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a528:	1ad3      	subs	r3, r2, r3
 801a52a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a52e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a532:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801a536:	4413      	add	r3, r2
 801a538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 801a53c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a540:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801a544:	4611      	mov	r1, r2
 801a546:	4618      	mov	r0, r3
 801a548:	f7f4 fb30 	bl	800ebac <mbedtls_oid_get_attr_short_name>
 801a54c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

        if( ret == 0 )
 801a550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a554:	2b00      	cmp	r3, #0
 801a556:	d10b      	bne.n	801a570 <mbedtls_x509_dn_gets+0x11c>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 801a558:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a55c:	4a5f      	ldr	r2, [pc, #380]	; (801a6dc <mbedtls_x509_dn_gets+0x288>)
 801a55e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801a562:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801a566:	f004 fa7b 	bl	801ea60 <sniprintf>
 801a56a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 801a56e:	e008      	b.n	801a582 <mbedtls_x509_dn_gets+0x12e>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 801a570:	4a5b      	ldr	r2, [pc, #364]	; (801a6e0 <mbedtls_x509_dn_gets+0x28c>)
 801a572:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801a576:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801a57a:	f004 fa71 	bl	801ea60 <sniprintf>
 801a57e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
        MBEDTLS_X509_SAFE_SNPRINTF;
 801a582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a586:	2b00      	cmp	r3, #0
 801a588:	db05      	blt.n	801a596 <mbedtls_x509_dn_gets+0x142>
 801a58a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a58e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a592:	429a      	cmp	r2, r3
 801a594:	d801      	bhi.n	801a59a <mbedtls_x509_dn_gets+0x146>
 801a596:	4b50      	ldr	r3, [pc, #320]	; (801a6d8 <mbedtls_x509_dn_gets+0x284>)
 801a598:	e095      	b.n	801a6c6 <mbedtls_x509_dn_gets+0x272>
 801a59a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a59e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a5a2:	1ad3      	subs	r3, r2, r3
 801a5a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a5a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a5ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801a5b0:	4413      	add	r3, r2
 801a5b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

        for( i = 0; i < name->val.len; i++ )
 801a5b6:	2300      	movs	r3, #0
 801a5b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a5bc:	e035      	b.n	801a62a <mbedtls_x509_dn_gets+0x1d6>
        {
            if( i >= sizeof( s ) - 1 )
 801a5be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a5c2:	2bfe      	cmp	r3, #254	; 0xfe
 801a5c4:	d839      	bhi.n	801a63a <mbedtls_x509_dn_gets+0x1e6>
                break;

            c = name->val.p[i];
 801a5c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a5ca:	695a      	ldr	r2, [r3, #20]
 801a5cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a5d0:	4413      	add	r3, r2
 801a5d2:	781b      	ldrb	r3, [r3, #0]
 801a5d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 801a5d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a5dc:	2b1f      	cmp	r3, #31
 801a5de:	d90b      	bls.n	801a5f8 <mbedtls_x509_dn_gets+0x1a4>
 801a5e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a5e4:	2b7f      	cmp	r3, #127	; 0x7f
 801a5e6:	d007      	beq.n	801a5f8 <mbedtls_x509_dn_gets+0x1a4>
 801a5e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a5ec:	2b80      	cmp	r3, #128	; 0x80
 801a5ee:	d90d      	bls.n	801a60c <mbedtls_x509_dn_gets+0x1b8>
 801a5f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a5f4:	2b9f      	cmp	r3, #159	; 0x9f
 801a5f6:	d809      	bhi.n	801a60c <mbedtls_x509_dn_gets+0x1b8>
                 s[i] = '?';
 801a5f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a5fc:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801a600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a604:	4413      	add	r3, r2
 801a606:	223f      	movs	r2, #63	; 0x3f
 801a608:	701a      	strb	r2, [r3, #0]
 801a60a:	e009      	b.n	801a620 <mbedtls_x509_dn_gets+0x1cc>
            else s[i] = c;
 801a60c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a610:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801a614:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a618:	4413      	add	r3, r2
 801a61a:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 801a61e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < name->val.len; i++ )
 801a620:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a624:	3301      	adds	r3, #1
 801a626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a62a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a62e:	691b      	ldr	r3, [r3, #16]
 801a630:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801a634:	429a      	cmp	r2, r3
 801a636:	d3c2      	bcc.n	801a5be <mbedtls_x509_dn_gets+0x16a>
 801a638:	e000      	b.n	801a63c <mbedtls_x509_dn_gets+0x1e8>
                break;
 801a63a:	bf00      	nop
        }
        s[i] = '\0';
 801a63c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a640:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801a644:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a648:	4413      	add	r3, r2
 801a64a:	2200      	movs	r2, #0
 801a64c:	701a      	strb	r2, [r3, #0]
        ret = mbedtls_snprintf( p, n, "%s", s );
 801a64e:	f107 0310 	add.w	r3, r7, #16
 801a652:	4a24      	ldr	r2, [pc, #144]	; (801a6e4 <mbedtls_x509_dn_gets+0x290>)
 801a654:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801a658:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801a65c:	f004 fa00 	bl	801ea60 <sniprintf>
 801a660:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
        MBEDTLS_X509_SAFE_SNPRINTF;
 801a664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a668:	2b00      	cmp	r3, #0
 801a66a:	db05      	blt.n	801a678 <mbedtls_x509_dn_gets+0x224>
 801a66c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a670:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a674:	429a      	cmp	r2, r3
 801a676:	d801      	bhi.n	801a67c <mbedtls_x509_dn_gets+0x228>
 801a678:	4b17      	ldr	r3, [pc, #92]	; (801a6d8 <mbedtls_x509_dn_gets+0x284>)
 801a67a:	e024      	b.n	801a6c6 <mbedtls_x509_dn_gets+0x272>
 801a67c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a680:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a684:	1ad3      	subs	r3, r2, r3
 801a686:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a68a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a68e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801a692:	4413      	add	r3, r2
 801a694:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

        merge = name->next_merged;
 801a698:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a69c:	7f1b      	ldrb	r3, [r3, #28]
 801a69e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        name = name->next;
 801a6a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a6a6:	699b      	ldr	r3, [r3, #24]
 801a6a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    while( name != NULL )
 801a6ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	f47f af05 	bne.w	801a4c0 <mbedtls_x509_dn_gets+0x6c>
    }

    return( (int) ( size - n ) );
 801a6b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a6ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801a6be:	681a      	ldr	r2, [r3, #0]
 801a6c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801a6c4:	1ad3      	subs	r3, r2, r3
}
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801a6cc:	46bd      	mov	sp, r7
 801a6ce:	bd80      	pop	{r7, pc}
 801a6d0:	08024570 	.word	0x08024570
 801a6d4:	08024574 	.word	0x08024574
 801a6d8:	ffffd680 	.word	0xffffd680
 801a6dc:	08024578 	.word	0x08024578
 801a6e0:	0802457c 	.word	0x0802457c
 801a6e4:	08024580 	.word	0x08024580

0801a6e8 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b08c      	sub	sp, #48	; 0x30
 801a6ec:	af02      	add	r7, sp, #8
 801a6ee:	60f8      	str	r0, [r7, #12]
 801a6f0:	60b9      	str	r1, [r7, #8]
 801a6f2:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	61fb      	str	r3, [r7, #28]
    n = size;
 801a6f8:	68bb      	ldr	r3, [r7, #8]
 801a6fa:	623b      	str	r3, [r7, #32]

    nr = ( serial->len <= 32 )
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	685b      	ldr	r3, [r3, #4]
        ? serial->len  : 28;
 801a700:	2b20      	cmp	r3, #32
 801a702:	d802      	bhi.n	801a70a <mbedtls_x509_serial_gets+0x22>
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	685b      	ldr	r3, [r3, #4]
 801a708:	e000      	b.n	801a70c <mbedtls_x509_serial_gets+0x24>
 801a70a:	231c      	movs	r3, #28
    nr = ( serial->len <= 32 )
 801a70c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < nr; i++ )
 801a70e:	2300      	movs	r3, #0
 801a710:	627b      	str	r3, [r7, #36]	; 0x24
 801a712:	e038      	b.n	801a786 <mbedtls_x509_serial_gets+0x9e>
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 801a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a716:	2b00      	cmp	r3, #0
 801a718:	d109      	bne.n	801a72e <mbedtls_x509_serial_gets+0x46>
 801a71a:	69bb      	ldr	r3, [r7, #24]
 801a71c:	2b01      	cmp	r3, #1
 801a71e:	d906      	bls.n	801a72e <mbedtls_x509_serial_gets+0x46>
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	689a      	ldr	r2, [r3, #8]
 801a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a726:	4413      	add	r3, r2
 801a728:	781b      	ldrb	r3, [r3, #0]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d027      	beq.n	801a77e <mbedtls_x509_serial_gets+0x96>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	689a      	ldr	r2, [r3, #8]
 801a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a734:	4413      	add	r3, r2
 801a736:	781b      	ldrb	r3, [r3, #0]
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801a738:	4619      	mov	r1, r3
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 801a73a:	69bb      	ldr	r3, [r7, #24]
 801a73c:	3b01      	subs	r3, #1
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801a73e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a740:	429a      	cmp	r2, r3
 801a742:	d201      	bcs.n	801a748 <mbedtls_x509_serial_gets+0x60>
 801a744:	4b23      	ldr	r3, [pc, #140]	; (801a7d4 <mbedtls_x509_serial_gets+0xec>)
 801a746:	e000      	b.n	801a74a <mbedtls_x509_serial_gets+0x62>
 801a748:	4b23      	ldr	r3, [pc, #140]	; (801a7d8 <mbedtls_x509_serial_gets+0xf0>)
 801a74a:	9300      	str	r3, [sp, #0]
 801a74c:	460b      	mov	r3, r1
 801a74e:	4a23      	ldr	r2, [pc, #140]	; (801a7dc <mbedtls_x509_serial_gets+0xf4>)
 801a750:	6a39      	ldr	r1, [r7, #32]
 801a752:	69f8      	ldr	r0, [r7, #28]
 801a754:	f004 f984 	bl	801ea60 <sniprintf>
 801a758:	6178      	str	r0, [r7, #20]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801a75a:	697b      	ldr	r3, [r7, #20]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	db03      	blt.n	801a768 <mbedtls_x509_serial_gets+0x80>
 801a760:	697b      	ldr	r3, [r7, #20]
 801a762:	6a3a      	ldr	r2, [r7, #32]
 801a764:	429a      	cmp	r2, r3
 801a766:	d801      	bhi.n	801a76c <mbedtls_x509_serial_gets+0x84>
 801a768:	4b1d      	ldr	r3, [pc, #116]	; (801a7e0 <mbedtls_x509_serial_gets+0xf8>)
 801a76a:	e02f      	b.n	801a7cc <mbedtls_x509_serial_gets+0xe4>
 801a76c:	697b      	ldr	r3, [r7, #20]
 801a76e:	6a3a      	ldr	r2, [r7, #32]
 801a770:	1ad3      	subs	r3, r2, r3
 801a772:	623b      	str	r3, [r7, #32]
 801a774:	697b      	ldr	r3, [r7, #20]
 801a776:	69fa      	ldr	r2, [r7, #28]
 801a778:	4413      	add	r3, r2
 801a77a:	61fb      	str	r3, [r7, #28]
 801a77c:	e000      	b.n	801a780 <mbedtls_x509_serial_gets+0x98>
            continue;
 801a77e:	bf00      	nop
    for( i = 0; i < nr; i++ )
 801a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a782:	3301      	adds	r3, #1
 801a784:	627b      	str	r3, [r7, #36]	; 0x24
 801a786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a788:	69bb      	ldr	r3, [r7, #24]
 801a78a:	429a      	cmp	r2, r3
 801a78c:	d3c2      	bcc.n	801a714 <mbedtls_x509_serial_gets+0x2c>
    }

    if( nr != serial->len )
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	685b      	ldr	r3, [r3, #4]
 801a792:	69ba      	ldr	r2, [r7, #24]
 801a794:	429a      	cmp	r2, r3
 801a796:	d016      	beq.n	801a7c6 <mbedtls_x509_serial_gets+0xde>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 801a798:	4a12      	ldr	r2, [pc, #72]	; (801a7e4 <mbedtls_x509_serial_gets+0xfc>)
 801a79a:	6a39      	ldr	r1, [r7, #32]
 801a79c:	69f8      	ldr	r0, [r7, #28]
 801a79e:	f004 f95f 	bl	801ea60 <sniprintf>
 801a7a2:	6178      	str	r0, [r7, #20]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801a7a4:	697b      	ldr	r3, [r7, #20]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	db03      	blt.n	801a7b2 <mbedtls_x509_serial_gets+0xca>
 801a7aa:	697b      	ldr	r3, [r7, #20]
 801a7ac:	6a3a      	ldr	r2, [r7, #32]
 801a7ae:	429a      	cmp	r2, r3
 801a7b0:	d801      	bhi.n	801a7b6 <mbedtls_x509_serial_gets+0xce>
 801a7b2:	4b0b      	ldr	r3, [pc, #44]	; (801a7e0 <mbedtls_x509_serial_gets+0xf8>)
 801a7b4:	e00a      	b.n	801a7cc <mbedtls_x509_serial_gets+0xe4>
 801a7b6:	697b      	ldr	r3, [r7, #20]
 801a7b8:	6a3a      	ldr	r2, [r7, #32]
 801a7ba:	1ad3      	subs	r3, r2, r3
 801a7bc:	623b      	str	r3, [r7, #32]
 801a7be:	697b      	ldr	r3, [r7, #20]
 801a7c0:	69fa      	ldr	r2, [r7, #28]
 801a7c2:	4413      	add	r3, r2
 801a7c4:	61fb      	str	r3, [r7, #28]
    }

    return( (int) ( size - n ) );
 801a7c6:	68ba      	ldr	r2, [r7, #8]
 801a7c8:	6a3b      	ldr	r3, [r7, #32]
 801a7ca:	1ad3      	subs	r3, r2, r3
}
 801a7cc:	4618      	mov	r0, r3
 801a7ce:	3728      	adds	r7, #40	; 0x28
 801a7d0:	46bd      	mov	sp, r7
 801a7d2:	bd80      	pop	{r7, pc}
 801a7d4:	08024584 	.word	0x08024584
 801a7d8:	08024588 	.word	0x08024588
 801a7dc:	0802458c 	.word	0x0802458c
 801a7e0:	ffffd680 	.word	0xffffd680
 801a7e4:	08024594 	.word	0x08024594

0801a7e8 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 801a7e8:	b580      	push	{r7, lr}
 801a7ea:	b088      	sub	sp, #32
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	60f8      	str	r0, [r7, #12]
 801a7f0:	60b9      	str	r1, [r7, #8]
 801a7f2:	607a      	str	r2, [r7, #4]
 801a7f4:	70fb      	strb	r3, [r7, #3]
    int ret;
    char *p = buf;
 801a7f6:	68fb      	ldr	r3, [r7, #12]
 801a7f8:	61bb      	str	r3, [r7, #24]
    size_t n = size;
 801a7fa:	68bb      	ldr	r3, [r7, #8]
 801a7fc:	617b      	str	r3, [r7, #20]
    const char *desc = NULL;
 801a7fe:	2300      	movs	r3, #0
 801a800:	613b      	str	r3, [r7, #16]

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801a802:	f107 0310 	add.w	r3, r7, #16
 801a806:	4619      	mov	r1, r3
 801a808:	6878      	ldr	r0, [r7, #4]
 801a80a:	f7f4 fab3 	bl	800ed74 <mbedtls_oid_get_sig_alg_desc>
 801a80e:	61f8      	str	r0, [r7, #28]
    if( ret != 0 )
 801a810:	69fb      	ldr	r3, [r7, #28]
 801a812:	2b00      	cmp	r3, #0
 801a814:	d006      	beq.n	801a824 <mbedtls_x509_sig_alg_gets+0x3c>
        ret = mbedtls_snprintf( p, n, "???"  );
 801a816:	4a13      	ldr	r2, [pc, #76]	; (801a864 <mbedtls_x509_sig_alg_gets+0x7c>)
 801a818:	6979      	ldr	r1, [r7, #20]
 801a81a:	69b8      	ldr	r0, [r7, #24]
 801a81c:	f004 f920 	bl	801ea60 <sniprintf>
 801a820:	61f8      	str	r0, [r7, #28]
 801a822:	e006      	b.n	801a832 <mbedtls_x509_sig_alg_gets+0x4a>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 801a824:	693b      	ldr	r3, [r7, #16]
 801a826:	4a10      	ldr	r2, [pc, #64]	; (801a868 <mbedtls_x509_sig_alg_gets+0x80>)
 801a828:	6979      	ldr	r1, [r7, #20]
 801a82a:	69b8      	ldr	r0, [r7, #24]
 801a82c:	f004 f918 	bl	801ea60 <sniprintf>
 801a830:	61f8      	str	r0, [r7, #28]
    MBEDTLS_X509_SAFE_SNPRINTF;
 801a832:	69fb      	ldr	r3, [r7, #28]
 801a834:	2b00      	cmp	r3, #0
 801a836:	db03      	blt.n	801a840 <mbedtls_x509_sig_alg_gets+0x58>
 801a838:	69fb      	ldr	r3, [r7, #28]
 801a83a:	697a      	ldr	r2, [r7, #20]
 801a83c:	429a      	cmp	r2, r3
 801a83e:	d801      	bhi.n	801a844 <mbedtls_x509_sig_alg_gets+0x5c>
 801a840:	4b0a      	ldr	r3, [pc, #40]	; (801a86c <mbedtls_x509_sig_alg_gets+0x84>)
 801a842:	e00a      	b.n	801a85a <mbedtls_x509_sig_alg_gets+0x72>
 801a844:	69fb      	ldr	r3, [r7, #28]
 801a846:	697a      	ldr	r2, [r7, #20]
 801a848:	1ad3      	subs	r3, r2, r3
 801a84a:	617b      	str	r3, [r7, #20]
 801a84c:	69fb      	ldr	r3, [r7, #28]
 801a84e:	69ba      	ldr	r2, [r7, #24]
 801a850:	4413      	add	r3, r2
 801a852:	61bb      	str	r3, [r7, #24]
    ((void) pk_alg);
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
 801a854:	68ba      	ldr	r2, [r7, #8]
 801a856:	697b      	ldr	r3, [r7, #20]
 801a858:	1ad3      	subs	r3, r2, r3
}
 801a85a:	4618      	mov	r0, r3
 801a85c:	3720      	adds	r7, #32
 801a85e:	46bd      	mov	sp, r7
 801a860:	bd80      	pop	{r7, pc}
 801a862:	bf00      	nop
 801a864:	0802459c 	.word	0x0802459c
 801a868:	08024580 	.word	0x08024580
 801a86c:	ffffd680 	.word	0xffffd680

0801a870 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b088      	sub	sp, #32
 801a874:	af00      	add	r7, sp, #0
 801a876:	60f8      	str	r0, [r7, #12]
 801a878:	60b9      	str	r1, [r7, #8]
 801a87a:	607a      	str	r2, [r7, #4]
    char *p = buf;
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	61fb      	str	r3, [r7, #28]
    size_t n = buf_size;
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	61bb      	str	r3, [r7, #24]
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	4a0e      	ldr	r2, [pc, #56]	; (801a8c0 <mbedtls_x509_key_size_helper+0x50>)
 801a888:	69b9      	ldr	r1, [r7, #24]
 801a88a:	69f8      	ldr	r0, [r7, #28]
 801a88c:	f004 f8e8 	bl	801ea60 <sniprintf>
 801a890:	6178      	str	r0, [r7, #20]
    MBEDTLS_X509_SAFE_SNPRINTF;
 801a892:	697b      	ldr	r3, [r7, #20]
 801a894:	2b00      	cmp	r3, #0
 801a896:	db03      	blt.n	801a8a0 <mbedtls_x509_key_size_helper+0x30>
 801a898:	697b      	ldr	r3, [r7, #20]
 801a89a:	69ba      	ldr	r2, [r7, #24]
 801a89c:	429a      	cmp	r2, r3
 801a89e:	d801      	bhi.n	801a8a4 <mbedtls_x509_key_size_helper+0x34>
 801a8a0:	4b08      	ldr	r3, [pc, #32]	; (801a8c4 <mbedtls_x509_key_size_helper+0x54>)
 801a8a2:	e008      	b.n	801a8b6 <mbedtls_x509_key_size_helper+0x46>
 801a8a4:	697b      	ldr	r3, [r7, #20]
 801a8a6:	69ba      	ldr	r2, [r7, #24]
 801a8a8:	1ad3      	subs	r3, r2, r3
 801a8aa:	61bb      	str	r3, [r7, #24]
 801a8ac:	697b      	ldr	r3, [r7, #20]
 801a8ae:	69fa      	ldr	r2, [r7, #28]
 801a8b0:	4413      	add	r3, r2
 801a8b2:	61fb      	str	r3, [r7, #28]

    return( 0 );
 801a8b4:	2300      	movs	r3, #0
}
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	3720      	adds	r7, #32
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd80      	pop	{r7, pc}
 801a8be:	bf00      	nop
 801a8c0:	080245a0 	.word	0x080245a0
 801a8c4:	ffffd680 	.word	0xffffd680

0801a8c8 <mbedtls_x509_time_is_past>:
}

#else  /* MBEDTLS_HAVE_TIME_DATE */

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
 801a8c8:	b480      	push	{r7}
 801a8ca:	b083      	sub	sp, #12
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
    ((void) to);
    return( 0 );
 801a8d0:	2300      	movs	r3, #0
}
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	370c      	adds	r7, #12
 801a8d6:	46bd      	mov	sp, r7
 801a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8dc:	4770      	bx	lr

0801a8de <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
 801a8de:	b480      	push	{r7}
 801a8e0:	b083      	sub	sp, #12
 801a8e2:	af00      	add	r7, sp, #0
 801a8e4:	6078      	str	r0, [r7, #4]
    ((void) from);
    return( 0 );
 801a8e6:	2300      	movs	r3, #0
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	370c      	adds	r7, #12
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8f2:	4770      	bx	lr

0801a8f4 <mbedtls_zeroize>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 801a8f4:	b480      	push	{r7}
 801a8f6:	b085      	sub	sp, #20
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
 801a8fc:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	60fb      	str	r3, [r7, #12]
 801a902:	e004      	b.n	801a90e <mbedtls_zeroize+0x1a>
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	1c5a      	adds	r2, r3, #1
 801a908:	60fa      	str	r2, [r7, #12]
 801a90a:	2200      	movs	r2, #0
 801a90c:	701a      	strb	r2, [r3, #0]
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	1e5a      	subs	r2, r3, #1
 801a912:	603a      	str	r2, [r7, #0]
 801a914:	2b00      	cmp	r3, #0
 801a916:	d1f5      	bne.n	801a904 <mbedtls_zeroize+0x10>
}
 801a918:	bf00      	nop
 801a91a:	bf00      	nop
 801a91c:	3714      	adds	r7, #20
 801a91e:	46bd      	mov	sp, r7
 801a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a924:	4770      	bx	lr

0801a926 <x509_profile_check_md_alg>:
 * Check md_alg against profile
 * Return 0 if md_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_md_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_md_type_t md_alg )
{
 801a926:	b480      	push	{r7}
 801a928:	b083      	sub	sp, #12
 801a92a:	af00      	add	r7, sp, #0
 801a92c:	6078      	str	r0, [r7, #4]
 801a92e:	460b      	mov	r3, r1
 801a930:	70fb      	strb	r3, [r7, #3]
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	78fa      	ldrb	r2, [r7, #3]
 801a938:	3a01      	subs	r2, #1
 801a93a:	2101      	movs	r1, #1
 801a93c:	fa01 f202 	lsl.w	r2, r1, r2
 801a940:	4013      	ands	r3, r2
 801a942:	2b00      	cmp	r3, #0
 801a944:	d001      	beq.n	801a94a <x509_profile_check_md_alg+0x24>
        return( 0 );
 801a946:	2300      	movs	r3, #0
 801a948:	e001      	b.n	801a94e <x509_profile_check_md_alg+0x28>

    return( -1 );
 801a94a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a94e:	4618      	mov	r0, r3
 801a950:	370c      	adds	r7, #12
 801a952:	46bd      	mov	sp, r7
 801a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a958:	4770      	bx	lr

0801a95a <x509_profile_check_pk_alg>:
 * Check pk_alg against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
 801a95a:	b480      	push	{r7}
 801a95c:	b083      	sub	sp, #12
 801a95e:	af00      	add	r7, sp, #0
 801a960:	6078      	str	r0, [r7, #4]
 801a962:	460b      	mov	r3, r1
 801a964:	70fb      	strb	r3, [r7, #3]
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	685b      	ldr	r3, [r3, #4]
 801a96a:	78fa      	ldrb	r2, [r7, #3]
 801a96c:	3a01      	subs	r2, #1
 801a96e:	2101      	movs	r1, #1
 801a970:	fa01 f202 	lsl.w	r2, r1, r2
 801a974:	4013      	ands	r3, r2
 801a976:	2b00      	cmp	r3, #0
 801a978:	d001      	beq.n	801a97e <x509_profile_check_pk_alg+0x24>
        return( 0 );
 801a97a:	2300      	movs	r3, #0
 801a97c:	e001      	b.n	801a982 <x509_profile_check_pk_alg+0x28>

    return( -1 );
 801a97e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a982:	4618      	mov	r0, r3
 801a984:	370c      	adds	r7, #12
 801a986:	46bd      	mov	sp, r7
 801a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a98c:	4770      	bx	lr

0801a98e <x509_profile_check_key>:
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
 801a98e:	b580      	push	{r7, lr}
 801a990:	b084      	sub	sp, #16
 801a992:	af00      	add	r7, sp, #0
 801a994:	60f8      	str	r0, [r7, #12]
 801a996:	460b      	mov	r3, r1
 801a998:	607a      	str	r2, [r7, #4]
 801a99a:	72fb      	strb	r3, [r7, #11]
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801a99c:	7afb      	ldrb	r3, [r7, #11]
 801a99e:	2b01      	cmp	r3, #1
 801a9a0:	d002      	beq.n	801a9a8 <x509_profile_check_key+0x1a>
 801a9a2:	7afb      	ldrb	r3, [r7, #11]
 801a9a4:	2b06      	cmp	r3, #6
 801a9a6:	d10c      	bne.n	801a9c2 <x509_profile_check_key+0x34>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 801a9a8:	6878      	ldr	r0, [r7, #4]
 801a9aa:	f7f4 fd47 	bl	800f43c <mbedtls_pk_get_bitlen>
 801a9ae:	4602      	mov	r2, r0
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	68db      	ldr	r3, [r3, #12]
 801a9b4:	429a      	cmp	r2, r3
 801a9b6:	d301      	bcc.n	801a9bc <x509_profile_check_key+0x2e>
            return( 0 );
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	e004      	b.n	801a9c6 <x509_profile_check_key+0x38>

        return( -1 );
 801a9bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a9c0:	e001      	b.n	801a9c6 <x509_profile_check_key+0x38>

        return( -1 );
    }
#endif

    return( -1 );
 801a9c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	3710      	adds	r7, #16
 801a9ca:	46bd      	mov	sp, r7
 801a9cc:	bd80      	pop	{r7, pc}
	...

0801a9d0 <x509_get_version>:
 *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
 */
static int x509_get_version( unsigned char **p,
                             const unsigned char *end,
                             int *ver )
{
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	b086      	sub	sp, #24
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	60f8      	str	r0, [r7, #12]
 801a9d8:	60b9      	str	r1, [r7, #8]
 801a9da:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a9dc:	f107 0210 	add.w	r2, r7, #16
 801a9e0:	23a0      	movs	r3, #160	; 0xa0
 801a9e2:	68b9      	ldr	r1, [r7, #8]
 801a9e4:	68f8      	ldr	r0, [r7, #12]
 801a9e6:	f7eb ffdd 	bl	80069a4 <mbedtls_asn1_get_tag>
 801a9ea:	6178      	str	r0, [r7, #20]
 801a9ec:	697b      	ldr	r3, [r7, #20]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d00a      	beq.n	801aa08 <x509_get_version+0x38>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801a9f2:	697b      	ldr	r3, [r7, #20]
 801a9f4:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801a9f8:	d104      	bne.n	801aa04 <x509_get_version+0x34>
        {
            *ver = 0;
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	601a      	str	r2, [r3, #0]
            return( 0 );
 801aa00:	2300      	movs	r3, #0
 801aa02:	e01b      	b.n	801aa3c <x509_get_version+0x6c>
        }

        return( ret );
 801aa04:	697b      	ldr	r3, [r7, #20]
 801aa06:	e019      	b.n	801aa3c <x509_get_version+0x6c>
    }

    end = *p + len;
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	681a      	ldr	r2, [r3, #0]
 801aa0c:	693b      	ldr	r3, [r7, #16]
 801aa0e:	4413      	add	r3, r2
 801aa10:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 801aa12:	687a      	ldr	r2, [r7, #4]
 801aa14:	68b9      	ldr	r1, [r7, #8]
 801aa16:	68f8      	ldr	r0, [r7, #12]
 801aa18:	f7ec f81b 	bl	8006a52 <mbedtls_asn1_get_int>
 801aa1c:	6178      	str	r0, [r7, #20]
 801aa1e:	697b      	ldr	r3, [r7, #20]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d003      	beq.n	801aa2c <x509_get_version+0x5c>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 801aa24:	697b      	ldr	r3, [r7, #20]
 801aa26:	f5a3 5308 	sub.w	r3, r3, #8704	; 0x2200
 801aa2a:	e007      	b.n	801aa3c <x509_get_version+0x6c>

    if( *p != end )
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	68ba      	ldr	r2, [r7, #8]
 801aa32:	429a      	cmp	r2, r3
 801aa34:	d001      	beq.n	801aa3a <x509_get_version+0x6a>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 801aa36:	4b03      	ldr	r3, [pc, #12]	; (801aa44 <x509_get_version+0x74>)
 801aa38:	e000      	b.n	801aa3c <x509_get_version+0x6c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801aa3a:	2300      	movs	r3, #0
}
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	3718      	adds	r7, #24
 801aa40:	46bd      	mov	sp, r7
 801aa42:	bd80      	pop	{r7, pc}
 801aa44:	ffffdd9a 	.word	0xffffdd9a

0801aa48 <x509_get_dates>:
 */
static int x509_get_dates( unsigned char **p,
                           const unsigned char *end,
                           mbedtls_x509_time *from,
                           mbedtls_x509_time *to )
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b086      	sub	sp, #24
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	60f8      	str	r0, [r7, #12]
 801aa50:	60b9      	str	r1, [r7, #8]
 801aa52:	607a      	str	r2, [r7, #4]
 801aa54:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801aa56:	f107 0210 	add.w	r2, r7, #16
 801aa5a:	2330      	movs	r3, #48	; 0x30
 801aa5c:	68b9      	ldr	r1, [r7, #8]
 801aa5e:	68f8      	ldr	r0, [r7, #12]
 801aa60:	f7eb ffa0 	bl	80069a4 <mbedtls_asn1_get_tag>
 801aa64:	6178      	str	r0, [r7, #20]
 801aa66:	697b      	ldr	r3, [r7, #20]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d003      	beq.n	801aa74 <x509_get_dates+0x2c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 801aa6c:	697b      	ldr	r3, [r7, #20]
 801aa6e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 801aa72:	e022      	b.n	801aaba <x509_get_dates+0x72>

    end = *p + len;
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	681a      	ldr	r2, [r3, #0]
 801aa78:	693b      	ldr	r3, [r7, #16]
 801aa7a:	4413      	add	r3, r2
 801aa7c:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 801aa7e:	687a      	ldr	r2, [r7, #4]
 801aa80:	68b9      	ldr	r1, [r7, #8]
 801aa82:	68f8      	ldr	r0, [r7, #12]
 801aa84:	f7ff fbec 	bl	801a260 <mbedtls_x509_get_time>
 801aa88:	6178      	str	r0, [r7, #20]
 801aa8a:	697b      	ldr	r3, [r7, #20]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d001      	beq.n	801aa94 <x509_get_dates+0x4c>
        return( ret );
 801aa90:	697b      	ldr	r3, [r7, #20]
 801aa92:	e012      	b.n	801aaba <x509_get_dates+0x72>

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 801aa94:	683a      	ldr	r2, [r7, #0]
 801aa96:	68b9      	ldr	r1, [r7, #8]
 801aa98:	68f8      	ldr	r0, [r7, #12]
 801aa9a:	f7ff fbe1 	bl	801a260 <mbedtls_x509_get_time>
 801aa9e:	6178      	str	r0, [r7, #20]
 801aaa0:	697b      	ldr	r3, [r7, #20]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d001      	beq.n	801aaaa <x509_get_dates+0x62>
        return( ret );
 801aaa6:	697b      	ldr	r3, [r7, #20]
 801aaa8:	e007      	b.n	801aaba <x509_get_dates+0x72>

    if( *p != end )
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	68ba      	ldr	r2, [r7, #8]
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d001      	beq.n	801aab8 <x509_get_dates+0x70>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801aab4:	4b03      	ldr	r3, [pc, #12]	; (801aac4 <x509_get_dates+0x7c>)
 801aab6:	e000      	b.n	801aaba <x509_get_dates+0x72>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801aab8:	2300      	movs	r3, #0
}
 801aaba:	4618      	mov	r0, r3
 801aabc:	3718      	adds	r7, #24
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd80      	pop	{r7, pc}
 801aac2:	bf00      	nop
 801aac4:	ffffdb9a 	.word	0xffffdb9a

0801aac8 <x509_get_uid>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	b086      	sub	sp, #24
 801aacc:	af00      	add	r7, sp, #0
 801aace:	60f8      	str	r0, [r7, #12]
 801aad0:	60b9      	str	r1, [r7, #8]
 801aad2:	607a      	str	r2, [r7, #4]
 801aad4:	603b      	str	r3, [r7, #0]
    int ret;

    if( *p == end )
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	68ba      	ldr	r2, [r7, #8]
 801aadc:	429a      	cmp	r2, r3
 801aade:	d101      	bne.n	801aae4 <x509_get_uid+0x1c>
        return( 0 );
 801aae0:	2300      	movs	r3, #0
 801aae2:	e026      	b.n	801ab32 <x509_get_uid+0x6a>

    uid->tag = **p;
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	781b      	ldrb	r3, [r3, #0]
 801aaea:	461a      	mov	r2, r3
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	1d1a      	adds	r2, r3, #4
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 801aafa:	68b9      	ldr	r1, [r7, #8]
 801aafc:	68f8      	ldr	r0, [r7, #12]
 801aafe:	f7eb ff51 	bl	80069a4 <mbedtls_asn1_get_tag>
 801ab02:	6178      	str	r0, [r7, #20]
 801ab04:	697b      	ldr	r3, [r7, #20]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d007      	beq.n	801ab1a <x509_get_uid+0x52>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801ab0a:	697b      	ldr	r3, [r7, #20]
 801ab0c:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801ab10:	d101      	bne.n	801ab16 <x509_get_uid+0x4e>
            return( 0 );
 801ab12:	2300      	movs	r3, #0
 801ab14:	e00d      	b.n	801ab32 <x509_get_uid+0x6a>

        return( ret );
 801ab16:	697b      	ldr	r3, [r7, #20]
 801ab18:	e00b      	b.n	801ab32 <x509_get_uid+0x6a>
    }

    uid->p = *p;
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	681a      	ldr	r2, [r3, #0]
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	609a      	str	r2, [r3, #8]
    *p += uid->len;
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	681a      	ldr	r2, [r3, #0]
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	685b      	ldr	r3, [r3, #4]
 801ab2a:	441a      	add	r2, r3
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	601a      	str	r2, [r3, #0]

    return( 0 );
 801ab30:	2300      	movs	r3, #0
}
 801ab32:	4618      	mov	r0, r3
 801ab34:	3718      	adds	r7, #24
 801ab36:	46bd      	mov	sp, r7
 801ab38:	bd80      	pop	{r7, pc}
	...

0801ab3c <x509_get_basic_constraints>:

static int x509_get_basic_constraints( unsigned char **p,
                                       const unsigned char *end,
                                       int *ca_istrue,
                                       int *max_pathlen )
{
 801ab3c:	b580      	push	{r7, lr}
 801ab3e:	b086      	sub	sp, #24
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	60f8      	str	r0, [r7, #12]
 801ab44:	60b9      	str	r1, [r7, #8]
 801ab46:	607a      	str	r2, [r7, #4]
 801ab48:	603b      	str	r3, [r7, #0]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	2200      	movs	r2, #0
 801ab4e:	601a      	str	r2, [r3, #0]
    *max_pathlen = 0; /* endless */
 801ab50:	683b      	ldr	r3, [r7, #0]
 801ab52:	2200      	movs	r2, #0
 801ab54:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801ab56:	f107 0210 	add.w	r2, r7, #16
 801ab5a:	2330      	movs	r3, #48	; 0x30
 801ab5c:	68b9      	ldr	r1, [r7, #8]
 801ab5e:	68f8      	ldr	r0, [r7, #12]
 801ab60:	f7eb ff20 	bl	80069a4 <mbedtls_asn1_get_tag>
 801ab64:	6178      	str	r0, [r7, #20]
 801ab66:	697b      	ldr	r3, [r7, #20]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d003      	beq.n	801ab74 <x509_get_basic_constraints+0x38>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ab6c:	697b      	ldr	r3, [r7, #20]
 801ab6e:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801ab72:	e048      	b.n	801ac06 <x509_get_basic_constraints+0xca>

    if( *p == end )
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	68ba      	ldr	r2, [r7, #8]
 801ab7a:	429a      	cmp	r2, r3
 801ab7c:	d101      	bne.n	801ab82 <x509_get_basic_constraints+0x46>
        return( 0 );
 801ab7e:	2300      	movs	r3, #0
 801ab80:	e041      	b.n	801ac06 <x509_get_basic_constraints+0xca>

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 801ab82:	687a      	ldr	r2, [r7, #4]
 801ab84:	68b9      	ldr	r1, [r7, #8]
 801ab86:	68f8      	ldr	r0, [r7, #12]
 801ab88:	f7eb ff35 	bl	80069f6 <mbedtls_asn1_get_bool>
 801ab8c:	6178      	str	r0, [r7, #20]
 801ab8e:	697b      	ldr	r3, [r7, #20]
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d017      	beq.n	801abc4 <x509_get_basic_constraints+0x88>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801ab94:	697b      	ldr	r3, [r7, #20]
 801ab96:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801ab9a:	d105      	bne.n	801aba8 <x509_get_basic_constraints+0x6c>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 801ab9c:	687a      	ldr	r2, [r7, #4]
 801ab9e:	68b9      	ldr	r1, [r7, #8]
 801aba0:	68f8      	ldr	r0, [r7, #12]
 801aba2:	f7eb ff56 	bl	8006a52 <mbedtls_asn1_get_int>
 801aba6:	6178      	str	r0, [r7, #20]

        if( ret != 0 )
 801aba8:	697b      	ldr	r3, [r7, #20]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d003      	beq.n	801abb6 <x509_get_basic_constraints+0x7a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801abae:	697b      	ldr	r3, [r7, #20]
 801abb0:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801abb4:	e027      	b.n	801ac06 <x509_get_basic_constraints+0xca>

        if( *ca_istrue != 0 )
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d002      	beq.n	801abc4 <x509_get_basic_constraints+0x88>
            *ca_istrue = 1;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	2201      	movs	r2, #1
 801abc2:	601a      	str	r2, [r3, #0]
    }

    if( *p == end )
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	68ba      	ldr	r2, [r7, #8]
 801abca:	429a      	cmp	r2, r3
 801abcc:	d101      	bne.n	801abd2 <x509_get_basic_constraints+0x96>
        return( 0 );
 801abce:	2300      	movs	r3, #0
 801abd0:	e019      	b.n	801ac06 <x509_get_basic_constraints+0xca>

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 801abd2:	683a      	ldr	r2, [r7, #0]
 801abd4:	68b9      	ldr	r1, [r7, #8]
 801abd6:	68f8      	ldr	r0, [r7, #12]
 801abd8:	f7eb ff3b 	bl	8006a52 <mbedtls_asn1_get_int>
 801abdc:	6178      	str	r0, [r7, #20]
 801abde:	697b      	ldr	r3, [r7, #20]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d003      	beq.n	801abec <x509_get_basic_constraints+0xb0>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801abe4:	697b      	ldr	r3, [r7, #20]
 801abe6:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801abea:	e00c      	b.n	801ac06 <x509_get_basic_constraints+0xca>

    if( *p != end )
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	68ba      	ldr	r2, [r7, #8]
 801abf2:	429a      	cmp	r2, r3
 801abf4:	d001      	beq.n	801abfa <x509_get_basic_constraints+0xbe>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801abf6:	4b06      	ldr	r3, [pc, #24]	; (801ac10 <x509_get_basic_constraints+0xd4>)
 801abf8:	e005      	b.n	801ac06 <x509_get_basic_constraints+0xca>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 801abfa:	683b      	ldr	r3, [r7, #0]
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	1c5a      	adds	r2, r3, #1
 801ac00:	683b      	ldr	r3, [r7, #0]
 801ac02:	601a      	str	r2, [r3, #0]

    return( 0 );
 801ac04:	2300      	movs	r3, #0
}
 801ac06:	4618      	mov	r0, r3
 801ac08:	3718      	adds	r7, #24
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	bd80      	pop	{r7, pc}
 801ac0e:	bf00      	nop
 801ac10:	ffffda9a 	.word	0xffffda9a

0801ac14 <x509_get_ns_cert_type>:

static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b088      	sub	sp, #32
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	60f8      	str	r0, [r7, #12]
 801ac1c:	60b9      	str	r1, [r7, #8]
 801ac1e:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 801ac20:	2300      	movs	r3, #0
 801ac22:	613b      	str	r3, [r7, #16]
 801ac24:	2300      	movs	r3, #0
 801ac26:	753b      	strb	r3, [r7, #20]
 801ac28:	2300      	movs	r3, #0
 801ac2a:	61bb      	str	r3, [r7, #24]

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 801ac2c:	f107 0310 	add.w	r3, r7, #16
 801ac30:	461a      	mov	r2, r3
 801ac32:	68b9      	ldr	r1, [r7, #8]
 801ac34:	68f8      	ldr	r0, [r7, #12]
 801ac36:	f7eb ff4a 	bl	8006ace <mbedtls_asn1_get_bitstring>
 801ac3a:	61f8      	str	r0, [r7, #28]
 801ac3c:	69fb      	ldr	r3, [r7, #28]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d003      	beq.n	801ac4a <x509_get_ns_cert_type+0x36>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ac42:	69fb      	ldr	r3, [r7, #28]
 801ac44:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801ac48:	e009      	b.n	801ac5e <x509_get_ns_cert_type+0x4a>

    if( bs.len != 1 )
 801ac4a:	693b      	ldr	r3, [r7, #16]
 801ac4c:	2b01      	cmp	r3, #1
 801ac4e:	d001      	beq.n	801ac54 <x509_get_ns_cert_type+0x40>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ac50:	4b05      	ldr	r3, [pc, #20]	; (801ac68 <x509_get_ns_cert_type+0x54>)
 801ac52:	e004      	b.n	801ac5e <x509_get_ns_cert_type+0x4a>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 801ac54:	69bb      	ldr	r3, [r7, #24]
 801ac56:	781a      	ldrb	r2, [r3, #0]
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	701a      	strb	r2, [r3, #0]
    return( 0 );
 801ac5c:	2300      	movs	r3, #0
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3720      	adds	r7, #32
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}
 801ac66:	bf00      	nop
 801ac68:	ffffda9c 	.word	0xffffda9c

0801ac6c <x509_get_key_usage>:

static int x509_get_key_usage( unsigned char **p,
                               const unsigned char *end,
                               unsigned int *key_usage)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b08a      	sub	sp, #40	; 0x28
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	60f8      	str	r0, [r7, #12]
 801ac74:	60b9      	str	r1, [r7, #8]
 801ac76:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 801ac78:	2300      	movs	r3, #0
 801ac7a:	617b      	str	r3, [r7, #20]
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	763b      	strb	r3, [r7, #24]
 801ac80:	2300      	movs	r3, #0
 801ac82:	61fb      	str	r3, [r7, #28]

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 801ac84:	f107 0314 	add.w	r3, r7, #20
 801ac88:	461a      	mov	r2, r3
 801ac8a:	68b9      	ldr	r1, [r7, #8]
 801ac8c:	68f8      	ldr	r0, [r7, #12]
 801ac8e:	f7eb ff1e 	bl	8006ace <mbedtls_asn1_get_bitstring>
 801ac92:	6238      	str	r0, [r7, #32]
 801ac94:	6a3b      	ldr	r3, [r7, #32]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d003      	beq.n	801aca2 <x509_get_key_usage+0x36>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ac9a:	6a3b      	ldr	r3, [r7, #32]
 801ac9c:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801aca0:	e023      	b.n	801acea <x509_get_key_usage+0x7e>

    if( bs.len < 1 )
 801aca2:	697b      	ldr	r3, [r7, #20]
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d101      	bne.n	801acac <x509_get_key_usage+0x40>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801aca8:	4b12      	ldr	r3, [pc, #72]	; (801acf4 <x509_get_key_usage+0x88>)
 801acaa:	e01e      	b.n	801acea <x509_get_key_usage+0x7e>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	2200      	movs	r2, #0
 801acb0:	601a      	str	r2, [r3, #0]
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 801acb2:	2300      	movs	r3, #0
 801acb4:	627b      	str	r3, [r7, #36]	; 0x24
 801acb6:	e010      	b.n	801acda <x509_get_key_usage+0x6e>
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	681a      	ldr	r2, [r3, #0]
 801acbc:	69f9      	ldr	r1, [r7, #28]
 801acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acc0:	440b      	add	r3, r1
 801acc2:	781b      	ldrb	r3, [r3, #0]
 801acc4:	4619      	mov	r1, r3
 801acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acc8:	00db      	lsls	r3, r3, #3
 801acca:	fa01 f303 	lsl.w	r3, r1, r3
 801acce:	431a      	orrs	r2, r3
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	601a      	str	r2, [r3, #0]
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 801acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acd6:	3301      	adds	r3, #1
 801acd8:	627b      	str	r3, [r7, #36]	; 0x24
 801acda:	697b      	ldr	r3, [r7, #20]
 801acdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acde:	429a      	cmp	r2, r3
 801ace0:	d202      	bcs.n	801ace8 <x509_get_key_usage+0x7c>
 801ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ace4:	2b03      	cmp	r3, #3
 801ace6:	d9e7      	bls.n	801acb8 <x509_get_key_usage+0x4c>
    }

    return( 0 );
 801ace8:	2300      	movs	r3, #0
}
 801acea:	4618      	mov	r0, r3
 801acec:	3728      	adds	r7, #40	; 0x28
 801acee:	46bd      	mov	sp, r7
 801acf0:	bd80      	pop	{r7, pc}
 801acf2:	bf00      	nop
 801acf4:	ffffda9c 	.word	0xffffda9c

0801acf8 <x509_get_ext_key_usage>:
 * KeyPurposeId ::= OBJECT IDENTIFIER
 */
static int x509_get_ext_key_usage( unsigned char **p,
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
 801acf8:	b580      	push	{r7, lr}
 801acfa:	b086      	sub	sp, #24
 801acfc:	af00      	add	r7, sp, #0
 801acfe:	60f8      	str	r0, [r7, #12]
 801ad00:	60b9      	str	r1, [r7, #8]
 801ad02:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 801ad04:	2306      	movs	r3, #6
 801ad06:	687a      	ldr	r2, [r7, #4]
 801ad08:	68b9      	ldr	r1, [r7, #8]
 801ad0a:	68f8      	ldr	r0, [r7, #12]
 801ad0c:	f7eb ff4f 	bl	8006bae <mbedtls_asn1_get_sequence_of>
 801ad10:	6178      	str	r0, [r7, #20]
 801ad12:	697b      	ldr	r3, [r7, #20]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d003      	beq.n	801ad20 <x509_get_ext_key_usage+0x28>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ad18:	697b      	ldr	r3, [r7, #20]
 801ad1a:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801ad1e:	e006      	b.n	801ad2e <x509_get_ext_key_usage+0x36>

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	689b      	ldr	r3, [r3, #8]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d101      	bne.n	801ad2c <x509_get_ext_key_usage+0x34>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ad28:	4b03      	ldr	r3, [pc, #12]	; (801ad38 <x509_get_ext_key_usage+0x40>)
 801ad2a:	e000      	b.n	801ad2e <x509_get_ext_key_usage+0x36>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    return( 0 );
 801ad2c:	2300      	movs	r3, #0
}
 801ad2e:	4618      	mov	r0, r3
 801ad30:	3718      	adds	r7, #24
 801ad32:	46bd      	mov	sp, r7
 801ad34:	bd80      	pop	{r7, pc}
 801ad36:	bf00      	nop
 801ad38:	ffffda9c 	.word	0xffffda9c

0801ad3c <x509_get_subject_alt_name>:
 * NOTE: we only parse and use dNSName at this point.
 */
static int x509_get_subject_alt_name( unsigned char **p,
                                      const unsigned char *end,
                                      mbedtls_x509_sequence *subject_alt_name )
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b08a      	sub	sp, #40	; 0x28
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	60f8      	str	r0, [r7, #12]
 801ad44:	60b9      	str	r1, [r7, #8]
 801ad46:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len, tag_len;
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801ad4c:	f107 0214 	add.w	r2, r7, #20
 801ad50:	2330      	movs	r3, #48	; 0x30
 801ad52:	68b9      	ldr	r1, [r7, #8]
 801ad54:	68f8      	ldr	r0, [r7, #12]
 801ad56:	f7eb fe25 	bl	80069a4 <mbedtls_asn1_get_tag>
 801ad5a:	6238      	str	r0, [r7, #32]
 801ad5c:	6a3b      	ldr	r3, [r7, #32]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d003      	beq.n	801ad6a <x509_get_subject_alt_name+0x2e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ad62:	6a3b      	ldr	r3, [r7, #32]
 801ad64:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801ad68:	e077      	b.n	801ae5a <x509_get_subject_alt_name+0x11e>

    if( *p + len != end )
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	681a      	ldr	r2, [r3, #0]
 801ad6e:	697b      	ldr	r3, [r7, #20]
 801ad70:	4413      	add	r3, r2
 801ad72:	68ba      	ldr	r2, [r7, #8]
 801ad74:	429a      	cmp	r2, r3
 801ad76:	d060      	beq.n	801ae3a <x509_get_subject_alt_name+0xfe>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ad78:	4b3a      	ldr	r3, [pc, #232]	; (801ae64 <x509_get_subject_alt_name+0x128>)
 801ad7a:	e06e      	b.n	801ae5a <x509_get_subject_alt_name+0x11e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        if( ( end - *p ) < 1 )
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	68ba      	ldr	r2, [r7, #8]
 801ad82:	1ad3      	subs	r3, r2, r3
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	dc01      	bgt.n	801ad8c <x509_get_subject_alt_name+0x50>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ad88:	4b37      	ldr	r3, [pc, #220]	; (801ae68 <x509_get_subject_alt_name+0x12c>)
 801ad8a:	e066      	b.n	801ae5a <x509_get_subject_alt_name+0x11e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	781b      	ldrb	r3, [r3, #0]
 801ad92:	77fb      	strb	r3, [r7, #31]
        (*p)++;
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	1c5a      	adds	r2, r3, #1
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	601a      	str	r2, [r3, #0]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 801ad9e:	f107 0310 	add.w	r3, r7, #16
 801ada2:	461a      	mov	r2, r3
 801ada4:	68b9      	ldr	r1, [r7, #8]
 801ada6:	68f8      	ldr	r0, [r7, #12]
 801ada8:	f7eb fd3a 	bl	8006820 <mbedtls_asn1_get_len>
 801adac:	6238      	str	r0, [r7, #32]
 801adae:	6a3b      	ldr	r3, [r7, #32]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d003      	beq.n	801adbc <x509_get_subject_alt_name+0x80>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801adb4:	6a3b      	ldr	r3, [r7, #32]
 801adb6:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801adba:	e04e      	b.n	801ae5a <x509_get_subject_alt_name+0x11e>

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 801adbc:	7ffb      	ldrb	r3, [r7, #31]
 801adbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801adc2:	2b80      	cmp	r3, #128	; 0x80
 801adc4:	d001      	beq.n	801adca <x509_get_subject_alt_name+0x8e>
                MBEDTLS_ASN1_CONTEXT_SPECIFIC )
        {
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801adc6:	4b29      	ldr	r3, [pc, #164]	; (801ae6c <x509_get_subject_alt_name+0x130>)
 801adc8:	e047      	b.n	801ae5a <x509_get_subject_alt_name+0x11e>
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 801adca:	7ffb      	ldrb	r3, [r7, #31]
 801adcc:	2b82      	cmp	r3, #130	; 0x82
 801adce:	d006      	beq.n	801adde <x509_get_subject_alt_name+0xa2>
        {
            *p += tag_len;
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	681a      	ldr	r2, [r3, #0]
 801add4:	693b      	ldr	r3, [r7, #16]
 801add6:	441a      	add	r2, r3
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	601a      	str	r2, [r3, #0]
            continue;
 801addc:	e02d      	b.n	801ae3a <x509_get_subject_alt_name+0xfe>
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 801adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade0:	689b      	ldr	r3, [r3, #8]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d016      	beq.n	801ae14 <x509_get_subject_alt_name+0xd8>
        {
            if( cur->next != NULL )
 801ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade8:	68db      	ldr	r3, [r3, #12]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d001      	beq.n	801adf2 <x509_get_subject_alt_name+0xb6>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 801adee:	4b20      	ldr	r3, [pc, #128]	; (801ae70 <x509_get_subject_alt_name+0x134>)
 801adf0:	e033      	b.n	801ae5a <x509_get_subject_alt_name+0x11e>

            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 801adf2:	2110      	movs	r1, #16
 801adf4:	2001      	movs	r0, #1
 801adf6:	f003 fb9b 	bl	801e530 <calloc>
 801adfa:	4603      	mov	r3, r0
 801adfc:	461a      	mov	r2, r3
 801adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae00:	60da      	str	r2, [r3, #12]

            if( cur->next == NULL )
 801ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae04:	68db      	ldr	r3, [r3, #12]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d101      	bne.n	801ae0e <x509_get_subject_alt_name+0xd2>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ae0a:	4b1a      	ldr	r3, [pc, #104]	; (801ae74 <x509_get_subject_alt_name+0x138>)
 801ae0c:	e025      	b.n	801ae5a <x509_get_subject_alt_name+0x11e>
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );

            cur = cur->next;
 801ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae10:	68db      	ldr	r3, [r3, #12]
 801ae12:	627b      	str	r3, [r7, #36]	; 0x24
        }

        buf = &(cur->buf);
 801ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae16:	61bb      	str	r3, [r7, #24]
        buf->tag = tag;
 801ae18:	7ffa      	ldrb	r2, [r7, #31]
 801ae1a:	69bb      	ldr	r3, [r7, #24]
 801ae1c:	601a      	str	r2, [r3, #0]
        buf->p = *p;
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	681a      	ldr	r2, [r3, #0]
 801ae22:	69bb      	ldr	r3, [r7, #24]
 801ae24:	609a      	str	r2, [r3, #8]
        buf->len = tag_len;
 801ae26:	693a      	ldr	r2, [r7, #16]
 801ae28:	69bb      	ldr	r3, [r7, #24]
 801ae2a:	605a      	str	r2, [r3, #4]
        *p += buf->len;
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	681a      	ldr	r2, [r3, #0]
 801ae30:	69bb      	ldr	r3, [r7, #24]
 801ae32:	685b      	ldr	r3, [r3, #4]
 801ae34:	441a      	add	r2, r3
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	601a      	str	r2, [r3, #0]
    while( *p < end )
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	68ba      	ldr	r2, [r7, #8]
 801ae40:	429a      	cmp	r2, r3
 801ae42:	d89b      	bhi.n	801ad7c <x509_get_subject_alt_name+0x40>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 801ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae46:	2200      	movs	r2, #0
 801ae48:	60da      	str	r2, [r3, #12]

    if( *p != end )
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	68ba      	ldr	r2, [r7, #8]
 801ae50:	429a      	cmp	r2, r3
 801ae52:	d001      	beq.n	801ae58 <x509_get_subject_alt_name+0x11c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ae54:	4b03      	ldr	r3, [pc, #12]	; (801ae64 <x509_get_subject_alt_name+0x128>)
 801ae56:	e000      	b.n	801ae5a <x509_get_subject_alt_name+0x11e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801ae58:	2300      	movs	r3, #0
}
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	3728      	adds	r7, #40	; 0x28
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}
 801ae62:	bf00      	nop
 801ae64:	ffffda9a 	.word	0xffffda9a
 801ae68:	ffffdaa0 	.word	0xffffdaa0
 801ae6c:	ffffda9e 	.word	0xffffda9e
 801ae70:	ffffdb00 	.word	0xffffdb00
 801ae74:	ffffda96 	.word	0xffffda96

0801ae78 <x509_get_crt_ext>:
 *
 */
static int x509_get_crt_ext( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_x509_crt *crt )
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b08e      	sub	sp, #56	; 0x38
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	60f8      	str	r0, [r7, #12]
 801ae80:	60b9      	str	r1, [r7, #8]
 801ae82:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 801ae8a:	2303      	movs	r3, #3
 801ae8c:	68b9      	ldr	r1, [r7, #8]
 801ae8e:	68f8      	ldr	r0, [r7, #12]
 801ae90:	f7ff fa94 	bl	801a3bc <mbedtls_x509_get_ext>
 801ae94:	6378      	str	r0, [r7, #52]	; 0x34
 801ae96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	f000 8107 	beq.w	801b0ac <x509_get_crt_ext+0x234>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801ae9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aea0:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801aea4:	d101      	bne.n	801aeaa <x509_get_crt_ext+0x32>
            return( 0 );
 801aea6:	2300      	movs	r3, #0
 801aea8:	e10e      	b.n	801b0c8 <x509_get_crt_ext+0x250>

        return( ret );
 801aeaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aeac:	e10c      	b.n	801b0c8 <x509_get_crt_ext+0x250>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 801aeae:	2300      	movs	r3, #0
 801aeb0:	61fb      	str	r3, [r7, #28]
 801aeb2:	2300      	movs	r3, #0
 801aeb4:	623b      	str	r3, [r7, #32]
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	627b      	str	r3, [r7, #36]	; 0x24
        int is_critical = 0; /* DEFAULT FALSE */
 801aeba:	2300      	movs	r3, #0
 801aebc:	61bb      	str	r3, [r7, #24]
        int ext_type = 0;
 801aebe:	2300      	movs	r3, #0
 801aec0:	617b      	str	r3, [r7, #20]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801aec2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801aec6:	2330      	movs	r3, #48	; 0x30
 801aec8:	68b9      	ldr	r1, [r7, #8]
 801aeca:	68f8      	ldr	r0, [r7, #12]
 801aecc:	f7eb fd6a 	bl	80069a4 <mbedtls_asn1_get_tag>
 801aed0:	6378      	str	r0, [r7, #52]	; 0x34
 801aed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d003      	beq.n	801aee0 <x509_get_crt_ext+0x68>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801aed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aeda:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801aede:	e0f3      	b.n	801b0c8 <x509_get_crt_ext+0x250>

        end_ext_data = *p + len;
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	681a      	ldr	r2, [r3, #0]
 801aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aee6:	4413      	add	r3, r2
 801aee8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Get extension ID */
        extn_oid.tag = **p;
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	781b      	ldrb	r3, [r3, #0]
 801aef0:	61fb      	str	r3, [r7, #28]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 801aef2:	f107 031c 	add.w	r3, r7, #28
 801aef6:	1d1a      	adds	r2, r3, #4
 801aef8:	2306      	movs	r3, #6
 801aefa:	68b9      	ldr	r1, [r7, #8]
 801aefc:	68f8      	ldr	r0, [r7, #12]
 801aefe:	f7eb fd51 	bl	80069a4 <mbedtls_asn1_get_tag>
 801af02:	6378      	str	r0, [r7, #52]	; 0x34
 801af04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af06:	2b00      	cmp	r3, #0
 801af08:	d003      	beq.n	801af12 <x509_get_crt_ext+0x9a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801af0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af0c:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801af10:	e0da      	b.n	801b0c8 <x509_get_crt_ext+0x250>

        extn_oid.p = *p;
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	627b      	str	r3, [r7, #36]	; 0x24
        *p += extn_oid.len;
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	681a      	ldr	r2, [r3, #0]
 801af1c:	6a3b      	ldr	r3, [r7, #32]
 801af1e:	441a      	add	r2, r3
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	601a      	str	r2, [r3, #0]

        if( ( end - *p ) < 1 )
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	68ba      	ldr	r2, [r7, #8]
 801af2a:	1ad3      	subs	r3, r2, r3
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	dc01      	bgt.n	801af34 <x509_get_crt_ext+0xbc>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801af30:	4b67      	ldr	r3, [pc, #412]	; (801b0d0 <x509_get_crt_ext+0x258>)
 801af32:	e0c9      	b.n	801b0c8 <x509_get_crt_ext+0x250>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 801af34:	f107 0318 	add.w	r3, r7, #24
 801af38:	461a      	mov	r2, r3
 801af3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801af3c:	68f8      	ldr	r0, [r7, #12]
 801af3e:	f7eb fd5a 	bl	80069f6 <mbedtls_asn1_get_bool>
 801af42:	6378      	str	r0, [r7, #52]	; 0x34
 801af44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af46:	2b00      	cmp	r3, #0
 801af48:	d007      	beq.n	801af5a <x509_get_crt_ext+0xe2>
 801af4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af4c:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801af50:	d003      	beq.n	801af5a <x509_get_crt_ext+0xe2>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801af52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af54:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801af58:	e0b6      	b.n	801b0c8 <x509_get_crt_ext+0x250>

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 801af5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801af5e:	2304      	movs	r3, #4
 801af60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801af62:	68f8      	ldr	r0, [r7, #12]
 801af64:	f7eb fd1e 	bl	80069a4 <mbedtls_asn1_get_tag>
 801af68:	6378      	str	r0, [r7, #52]	; 0x34
 801af6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d003      	beq.n	801af78 <x509_get_crt_ext+0x100>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801af70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af72:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801af76:	e0a7      	b.n	801b0c8 <x509_get_crt_ext+0x250>

        end_ext_octet = *p + len;
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	681a      	ldr	r2, [r3, #0]
 801af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af7e:	4413      	add	r3, r2
 801af80:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( end_ext_octet != end_ext_data )
 801af82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af86:	429a      	cmp	r2, r3
 801af88:	d001      	beq.n	801af8e <x509_get_crt_ext+0x116>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801af8a:	4b52      	ldr	r3, [pc, #328]	; (801b0d4 <x509_get_crt_ext+0x25c>)
 801af8c:	e09c      	b.n	801b0c8 <x509_get_crt_ext+0x250>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 801af8e:	f107 0214 	add.w	r2, r7, #20
 801af92:	f107 031c 	add.w	r3, r7, #28
 801af96:	4611      	mov	r1, r2
 801af98:	4618      	mov	r0, r3
 801af9a:	f7f3 fe53 	bl	800ec44 <mbedtls_oid_get_x509_ext_type>
 801af9e:	6378      	str	r0, [r7, #52]	; 0x34

        if( ret != 0 )
 801afa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d007      	beq.n	801afb6 <x509_get_crt_ext+0x13e>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801afaa:	601a      	str	r2, [r3, #0]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 801afac:	69bb      	ldr	r3, [r7, #24]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d07c      	beq.n	801b0ac <x509_get_crt_ext+0x234>
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801afb2:	4b49      	ldr	r3, [pc, #292]	; (801b0d8 <x509_get_crt_ext+0x260>)
 801afb4:	e088      	b.n	801b0c8 <x509_get_crt_ext+0x250>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801afbc:	697b      	ldr	r3, [r7, #20]
 801afbe:	4013      	ands	r3, r2
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d001      	beq.n	801afc8 <x509_get_crt_ext+0x150>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 801afc4:	4b45      	ldr	r3, [pc, #276]	; (801b0dc <x509_get_crt_ext+0x264>)
 801afc6:	e07f      	b.n	801b0c8 <x509_get_crt_ext+0x250>

        crt->ext_types |= ext_type;
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801afce:	697b      	ldr	r3, [r7, #20]
 801afd0:	431a      	orrs	r2, r3
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

        switch( ext_type )
 801afd8:	697b      	ldr	r3, [r7, #20]
 801afda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801afde:	d04c      	beq.n	801b07a <x509_get_crt_ext+0x202>
 801afe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801afe4:	dc57      	bgt.n	801b096 <x509_get_crt_ext+0x21e>
 801afe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801afea:	d02b      	beq.n	801b044 <x509_get_crt_ext+0x1cc>
 801afec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801aff0:	dc51      	bgt.n	801b096 <x509_get_crt_ext+0x21e>
 801aff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aff6:	d007      	beq.n	801b008 <x509_get_crt_ext+0x190>
 801aff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801affc:	dc4b      	bgt.n	801b096 <x509_get_crt_ext+0x21e>
 801affe:	2b04      	cmp	r3, #4
 801b000:	d012      	beq.n	801b028 <x509_get_crt_ext+0x1b0>
 801b002:	2b20      	cmp	r3, #32
 801b004:	d02c      	beq.n	801b060 <x509_get_crt_ext+0x1e8>
 801b006:	e046      	b.n	801b096 <x509_get_crt_ext+0x21e>
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	f103 02fc 	add.w	r2, r3, #252	; 0xfc
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801b014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b016:	68f8      	ldr	r0, [r7, #12]
 801b018:	f7ff fd90 	bl	801ab3c <x509_get_basic_constraints>
 801b01c:	6378      	str	r0, [r7, #52]	; 0x34
 801b01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b020:	2b00      	cmp	r3, #0
 801b022:	d03a      	beq.n	801b09a <x509_get_crt_ext+0x222>
                    &crt->ca_istrue, &crt->max_pathlen ) ) != 0 )
                return( ret );
 801b024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b026:	e04f      	b.n	801b0c8 <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_KEY_USAGE:
            /* Parse key usage */
            if( ( ret = x509_get_key_usage( p, end_ext_octet,
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801b02e:	461a      	mov	r2, r3
 801b030:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b032:	68f8      	ldr	r0, [r7, #12]
 801b034:	f7ff fe1a 	bl	801ac6c <x509_get_key_usage>
 801b038:	6378      	str	r0, [r7, #52]	; 0x34
 801b03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d02e      	beq.n	801b09e <x509_get_crt_ext+0x226>
                    &crt->key_usage ) ) != 0 )
                return( ret );
 801b040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b042:	e041      	b.n	801b0c8 <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE:
            /* Parse extended key usage */
            if( ( ret = x509_get_ext_key_usage( p, end_ext_octet,
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801b04a:	461a      	mov	r2, r3
 801b04c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b04e:	68f8      	ldr	r0, [r7, #12]
 801b050:	f7ff fe52 	bl	801acf8 <x509_get_ext_key_usage>
 801b054:	6378      	str	r0, [r7, #52]	; 0x34
 801b056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d022      	beq.n	801b0a2 <x509_get_crt_ext+0x22a>
                    &crt->ext_key_usage ) ) != 0 )
                return( ret );
 801b05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b05e:	e033      	b.n	801b0c8 <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	33e8      	adds	r3, #232	; 0xe8
 801b064:	461a      	mov	r2, r3
 801b066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b068:	68f8      	ldr	r0, [r7, #12]
 801b06a:	f7ff fe67 	bl	801ad3c <x509_get_subject_alt_name>
 801b06e:	6378      	str	r0, [r7, #52]	; 0x34
 801b070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b072:	2b00      	cmp	r3, #0
 801b074:	d017      	beq.n	801b0a6 <x509_get_crt_ext+0x22e>
                    &crt->subject_alt_names ) ) != 0 )
                return( ret );
 801b076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b078:	e026      	b.n	801b0c8 <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801b080:	461a      	mov	r2, r3
 801b082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b084:	68f8      	ldr	r0, [r7, #12]
 801b086:	f7ff fdc5 	bl	801ac14 <x509_get_ns_cert_type>
 801b08a:	6378      	str	r0, [r7, #52]	; 0x34
 801b08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d00b      	beq.n	801b0aa <x509_get_crt_ext+0x232>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
 801b092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b094:	e018      	b.n	801b0c8 <x509_get_crt_ext+0x250>
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 801b096:	4b12      	ldr	r3, [pc, #72]	; (801b0e0 <x509_get_crt_ext+0x268>)
 801b098:	e016      	b.n	801b0c8 <x509_get_crt_ext+0x250>
            break;
 801b09a:	bf00      	nop
 801b09c:	e006      	b.n	801b0ac <x509_get_crt_ext+0x234>
            break;
 801b09e:	bf00      	nop
 801b0a0:	e004      	b.n	801b0ac <x509_get_crt_ext+0x234>
            break;
 801b0a2:	bf00      	nop
 801b0a4:	e002      	b.n	801b0ac <x509_get_crt_ext+0x234>
            break;
 801b0a6:	bf00      	nop
 801b0a8:	e000      	b.n	801b0ac <x509_get_crt_ext+0x234>
            break;
 801b0aa:	bf00      	nop
    while( *p < end )
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	68ba      	ldr	r2, [r7, #8]
 801b0b2:	429a      	cmp	r2, r3
 801b0b4:	f63f aefb 	bhi.w	801aeae <x509_get_crt_ext+0x36>
        }
    }

    if( *p != end )
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	68ba      	ldr	r2, [r7, #8]
 801b0be:	429a      	cmp	r2, r3
 801b0c0:	d001      	beq.n	801b0c6 <x509_get_crt_ext+0x24e>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801b0c2:	4b04      	ldr	r3, [pc, #16]	; (801b0d4 <x509_get_crt_ext+0x25c>)
 801b0c4:	e000      	b.n	801b0c8 <x509_get_crt_ext+0x250>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801b0c6:	2300      	movs	r3, #0
}
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	3738      	adds	r7, #56	; 0x38
 801b0cc:	46bd      	mov	sp, r7
 801b0ce:	bd80      	pop	{r7, pc}
 801b0d0:	ffffdaa0 	.word	0xffffdaa0
 801b0d4:	ffffda9a 	.word	0xffffda9a
 801b0d8:	ffffda9e 	.word	0xffffda9e
 801b0dc:	ffffdb00 	.word	0xffffdb00
 801b0e0:	ffffdf80 	.word	0xffffdf80

0801b0e4 <x509_crt_parse_der_core>:
/*
 * Parse and fill a single X.509 certificate in DER format
 */
static int x509_crt_parse_der_core( mbedtls_x509_crt *crt, const unsigned char *buf,
                                    size_t buflen )
{
 801b0e4:	b590      	push	{r4, r7, lr}
 801b0e6:	b095      	sub	sp, #84	; 0x54
 801b0e8:	af02      	add	r7, sp, #8
 801b0ea:	60f8      	str	r0, [r7, #12]
 801b0ec:	60b9      	str	r1, [r7, #8]
 801b0ee:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 801b0f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b0f4:	220c      	movs	r2, #12
 801b0f6:	2100      	movs	r1, #0
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	f003 fa93 	bl	801e624 <memset>
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 801b0fe:	f107 031c 	add.w	r3, r7, #28
 801b102:	220c      	movs	r2, #12
 801b104:	2100      	movs	r1, #0
 801b106:	4618      	mov	r0, r3
 801b108:	f003 fa8c 	bl	801e624 <memset>
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 801b10c:	f107 0310 	add.w	r3, r7, #16
 801b110:	220c      	movs	r2, #12
 801b112:	2100      	movs	r1, #0
 801b114:	4618      	mov	r0, r3
 801b116:	f003 fa85 	bl	801e624 <memset>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d002      	beq.n	801b126 <x509_crt_parse_der_core+0x42>
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	2b00      	cmp	r3, #0
 801b124:	d101      	bne.n	801b12a <x509_crt_parse_der_core+0x46>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801b126:	4ba0      	ldr	r3, [pc, #640]	; (801b3a8 <x509_crt_parse_der_core+0x2c4>)
 801b128:	e207      	b.n	801b53a <x509_crt_parse_der_core+0x456>

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 801b12a:	68bb      	ldr	r3, [r7, #8]
 801b12c:	637b      	str	r3, [r7, #52]	; 0x34
    len = buflen;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	63bb      	str	r3, [r7, #56]	; 0x38
    end = p + len;
 801b132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b136:	4413      	add	r3, r2
 801b138:	643b      	str	r3, [r7, #64]	; 0x40
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801b13a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b13e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b142:	2330      	movs	r3, #48	; 0x30
 801b144:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b146:	f7eb fc2d 	bl	80069a4 <mbedtls_asn1_get_tag>
 801b14a:	6478      	str	r0, [r7, #68]	; 0x44
 801b14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d004      	beq.n	801b15c <x509_crt_parse_der_core+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b152:	68f8      	ldr	r0, [r7, #12]
 801b154:	f001 ff1e 	bl	801cf94 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 801b158:	4b94      	ldr	r3, [pc, #592]	; (801b3ac <x509_crt_parse_der_core+0x2c8>)
 801b15a:	e1ee      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    if( len > (size_t) ( end - p ) )
 801b15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b15e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b160:	1ad3      	subs	r3, r2, r3
 801b162:	461a      	mov	r2, r3
 801b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b166:	429a      	cmp	r2, r3
 801b168:	d204      	bcs.n	801b174 <x509_crt_parse_der_core+0x90>
    {
        mbedtls_x509_crt_free( crt );
 801b16a:	68f8      	ldr	r0, [r7, #12]
 801b16c:	f001 ff12 	bl	801cf94 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801b170:	4b8f      	ldr	r3, [pc, #572]	; (801b3b0 <x509_crt_parse_der_core+0x2cc>)
 801b172:	e1e2      	b.n	801b53a <x509_crt_parse_der_core+0x456>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;
 801b174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b178:	4413      	add	r3, r2
 801b17a:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 801b17c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b17e:	68bb      	ldr	r3, [r7, #8]
 801b180:	1ad3      	subs	r3, r2, r3
 801b182:	461a      	mov	r2, r3
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	605a      	str	r2, [r3, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	685b      	ldr	r3, [r3, #4]
 801b18c:	4619      	mov	r1, r3
 801b18e:	2001      	movs	r0, #1
 801b190:	f003 f9ce 	bl	801e530 <calloc>
 801b194:	4603      	mov	r3, r0
 801b196:	637b      	str	r3, [r7, #52]	; 0x34
 801b198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	609a      	str	r2, [r3, #8]
    if( p == NULL )
 801b19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d101      	bne.n	801b1a8 <x509_crt_parse_der_core+0xc4>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801b1a4:	4b83      	ldr	r3, [pc, #524]	; (801b3b4 <x509_crt_parse_der_core+0x2d0>)
 801b1a6:	e1c8      	b.n	801b53a <x509_crt_parse_der_core+0x456>

    memcpy( p, buf, crt->raw.len );
 801b1a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	685b      	ldr	r3, [r3, #4]
 801b1ae:	461a      	mov	r2, r3
 801b1b0:	68b9      	ldr	r1, [r7, #8]
 801b1b2:	f003 fa0f 	bl	801e5d4 <memcpy>

    // Direct pointers to the new buffer 
    p += crt->raw.len - len;
 801b1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	6859      	ldr	r1, [r3, #4]
 801b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b1be:	1acb      	subs	r3, r1, r3
 801b1c0:	4413      	add	r3, r2
 801b1c2:	637b      	str	r3, [r7, #52]	; 0x34
    end = crt_end = p + len;
 801b1c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b1c8:	4413      	add	r3, r2
 801b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b1ce:	643b      	str	r3, [r7, #64]	; 0x40

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 801b1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	615a      	str	r2, [r3, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801b1d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b1da:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b1de:	2330      	movs	r3, #48	; 0x30
 801b1e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b1e2:	f7eb fbdf 	bl	80069a4 <mbedtls_asn1_get_tag>
 801b1e6:	6478      	str	r0, [r7, #68]	; 0x44
 801b1e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d006      	beq.n	801b1fc <x509_crt_parse_der_core+0x118>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b1ee:	68f8      	ldr	r0, [r7, #12]
 801b1f0:	f001 fed0 	bl	801cf94 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801b1f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1f6:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
 801b1fa:	e19e      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    end = p + len;
 801b1fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b200:	4413      	add	r3, r2
 801b202:	643b      	str	r3, [r7, #64]	; 0x40
    crt->tbs.len = end - crt->tbs.p;
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	695b      	ldr	r3, [r3, #20]
 801b208:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b20a:	1ad3      	subs	r3, r2, r3
 801b20c:	461a      	mov	r2, r3
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	611a      	str	r2, [r3, #16]
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	f103 0218 	add.w	r2, r3, #24
 801b218:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b21c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b21e:	4618      	mov	r0, r3
 801b220:	f7ff fbd6 	bl	801a9d0 <x509_get_version>
 801b224:	6478      	str	r0, [r7, #68]	; 0x44
 801b226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d11a      	bne.n	801b262 <x509_crt_parse_der_core+0x17e>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 801b22c:	68fb      	ldr	r3, [r7, #12]
 801b22e:	f103 021c 	add.w	r2, r3, #28
 801b232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b236:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b238:	4618      	mov	r0, r3
 801b23a:	f7fe fd3d 	bl	8019cb8 <mbedtls_x509_get_serial>
 801b23e:	6478      	str	r0, [r7, #68]	; 0x44
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 801b240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b242:	2b00      	cmp	r3, #0
 801b244:	d10d      	bne.n	801b262 <x509_crt_parse_der_core+0x17e>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801b24c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b250:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b254:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b256:	f7fe fd75 	bl	8019d44 <mbedtls_x509_get_alg>
 801b25a:	6478      	str	r0, [r7, #68]	; 0x44
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 801b25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d004      	beq.n	801b26c <x509_crt_parse_der_core+0x188>
                                            &sig_params1 ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b262:	68f8      	ldr	r0, [r7, #12]
 801b264:	f001 fe96 	bl	801cf94 <mbedtls_x509_crt_free>
        return( ret );
 801b268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b26a:	e166      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    if( crt->version < 0 || crt->version > 2 )
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	699b      	ldr	r3, [r3, #24]
 801b270:	2b00      	cmp	r3, #0
 801b272:	db03      	blt.n	801b27c <x509_crt_parse_der_core+0x198>
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	699b      	ldr	r3, [r3, #24]
 801b278:	2b02      	cmp	r3, #2
 801b27a:	dd04      	ble.n	801b286 <x509_crt_parse_der_core+0x1a2>
    {
        mbedtls_x509_crt_free( crt );
 801b27c:	68f8      	ldr	r0, [r7, #12]
 801b27e:	f001 fe89 	bl	801cf94 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 801b282:	4b4d      	ldr	r3, [pc, #308]	; (801b3b8 <x509_crt_parse_der_core+0x2d4>)
 801b284:	e159      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    crt->version++;
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	699b      	ldr	r3, [r3, #24]
 801b28a:	1c5a      	adds	r2, r3, #1
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	619a      	str	r2, [r3, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	f503 7294 	add.w	r2, r3, #296	; 0x128
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	f203 1429 	addw	r4, r3, #297	; 0x129
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 801b2a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801b2ac:	9300      	str	r3, [sp, #0]
 801b2ae:	4623      	mov	r3, r4
 801b2b0:	f7ff f852 	bl	801a358 <mbedtls_x509_get_sig_alg>
 801b2b4:	6478      	str	r0, [r7, #68]	; 0x44
 801b2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d004      	beq.n	801b2c6 <x509_crt_parse_der_core+0x1e2>
                                  &crt->sig_md, &crt->sig_pk,
                                  &crt->sig_opts ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b2bc:	68f8      	ldr	r0, [r7, #12]
 801b2be:	f001 fe69 	bl	801cf94 <mbedtls_x509_crt_free>
        return( ret );
 801b2c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2c4:	e139      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 801b2c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	63da      	str	r2, [r3, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801b2cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b2d0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b2d4:	2330      	movs	r3, #48	; 0x30
 801b2d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b2d8:	f7eb fb64 	bl	80069a4 <mbedtls_asn1_get_tag>
 801b2dc:	6478      	str	r0, [r7, #68]	; 0x44
 801b2de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d006      	beq.n	801b2f2 <x509_crt_parse_der_core+0x20e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b2e4:	68f8      	ldr	r0, [r7, #12]
 801b2e6:	f001 fe55 	bl	801cf94 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801b2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2ec:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
 801b2f0:	e123      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 801b2f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b2f6:	18d1      	adds	r1, r2, r3
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801b2fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b302:	4618      	mov	r0, r3
 801b304:	f7fe fdd6 	bl	8019eb4 <mbedtls_x509_get_name>
 801b308:	6478      	str	r0, [r7, #68]	; 0x44
 801b30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d004      	beq.n	801b31a <x509_crt_parse_der_core+0x236>
    {
        mbedtls_x509_crt_free( crt );
 801b310:	68f8      	ldr	r0, [r7, #12]
 801b312:	f001 fe3f 	bl	801cf94 <mbedtls_x509_crt_free>
        return( ret );
 801b316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b318:	e10f      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 801b31a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b320:	1ad3      	subs	r3, r2, r3
 801b322:	461a      	mov	r2, r3
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	639a      	str	r2, [r3, #56]	; 0x38
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	33a4      	adds	r3, #164	; 0xa4
 801b332:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b338:	f7ff fb86 	bl	801aa48 <x509_get_dates>
 801b33c:	6478      	str	r0, [r7, #68]	; 0x44
 801b33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b340:	2b00      	cmp	r3, #0
 801b342:	d004      	beq.n	801b34e <x509_crt_parse_der_core+0x26a>
                                         &crt->valid_to ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b344:	68f8      	ldr	r0, [r7, #12]
 801b346:	f001 fe25 	bl	801cf94 <mbedtls_x509_crt_free>
        return( ret );
 801b34a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b34c:	e0f5      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 801b34e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	649a      	str	r2, [r3, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801b354:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b358:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b35c:	2330      	movs	r3, #48	; 0x30
 801b35e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b360:	f7eb fb20 	bl	80069a4 <mbedtls_asn1_get_tag>
 801b364:	6478      	str	r0, [r7, #68]	; 0x44
 801b366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d006      	beq.n	801b37a <x509_crt_parse_der_core+0x296>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801b36c:	68f8      	ldr	r0, [r7, #12]
 801b36e:	f001 fe11 	bl	801cf94 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801b372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b374:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
 801b378:	e0df      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 801b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d01d      	beq.n	801b3bc <x509_crt_parse_der_core+0x2d8>
 801b380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b384:	18d1      	adds	r1, r2, r3
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801b38c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b390:	4618      	mov	r0, r3
 801b392:	f7fe fd8f 	bl	8019eb4 <mbedtls_x509_get_name>
 801b396:	6478      	str	r0, [r7, #68]	; 0x44
 801b398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d00e      	beq.n	801b3bc <x509_crt_parse_der_core+0x2d8>
    {
        mbedtls_x509_crt_free( crt );
 801b39e:	68f8      	ldr	r0, [r7, #12]
 801b3a0:	f001 fdf8 	bl	801cf94 <mbedtls_x509_crt_free>
        return( ret );
 801b3a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b3a6:	e0c8      	b.n	801b53a <x509_crt_parse_der_core+0x456>
 801b3a8:	ffffd800 	.word	0xffffd800
 801b3ac:	ffffde80 	.word	0xffffde80
 801b3b0:	ffffde1a 	.word	0xffffde1a
 801b3b4:	ffffd780 	.word	0xffffd780
 801b3b8:	ffffda80 	.word	0xffffda80
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 801b3bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3c2:	1ad3      	subs	r3, r2, r3
 801b3c4:	461a      	mov	r2, r3
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	645a      	str	r2, [r3, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 801b3d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b3d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b3d6:	4618      	mov	r0, r3
 801b3d8:	f7f4 fab6 	bl	800f948 <mbedtls_pk_parse_subpubkey>
 801b3dc:	6478      	str	r0, [r7, #68]	; 0x44
 801b3de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d004      	beq.n	801b3ee <x509_crt_parse_der_core+0x30a>
    {
        mbedtls_x509_crt_free( crt );
 801b3e4:	68f8      	ldr	r0, [r7, #12]
 801b3e6:	f001 fdd5 	bl	801cf94 <mbedtls_x509_crt_free>
        return( ret );
 801b3ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b3ec:	e0a5      	b.n	801b53a <x509_crt_parse_der_core+0x456>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	699b      	ldr	r3, [r3, #24]
 801b3f2:	2b02      	cmp	r3, #2
 801b3f4:	d003      	beq.n	801b3fe <x509_crt_parse_der_core+0x31a>
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	699b      	ldr	r3, [r3, #24]
 801b3fa:	2b03      	cmp	r3, #3
 801b3fc:	d111      	bne.n	801b422 <x509_crt_parse_der_core+0x33e>
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 801b404:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b408:	2301      	movs	r3, #1
 801b40a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b40c:	f7ff fb5c 	bl	801aac8 <x509_get_uid>
 801b410:	6478      	str	r0, [r7, #68]	; 0x44
        if( ret != 0 )
 801b412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b414:	2b00      	cmp	r3, #0
 801b416:	d004      	beq.n	801b422 <x509_crt_parse_der_core+0x33e>
        {
            mbedtls_x509_crt_free( crt );
 801b418:	68f8      	ldr	r0, [r7, #12]
 801b41a:	f001 fdbb 	bl	801cf94 <mbedtls_x509_crt_free>
            return( ret );
 801b41e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b420:	e08b      	b.n	801b53a <x509_crt_parse_der_core+0x456>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 801b422:	68fb      	ldr	r3, [r7, #12]
 801b424:	699b      	ldr	r3, [r3, #24]
 801b426:	2b02      	cmp	r3, #2
 801b428:	d003      	beq.n	801b432 <x509_crt_parse_der_core+0x34e>
 801b42a:	68fb      	ldr	r3, [r7, #12]
 801b42c:	699b      	ldr	r3, [r3, #24]
 801b42e:	2b03      	cmp	r3, #3
 801b430:	d111      	bne.n	801b456 <x509_crt_parse_der_core+0x372>
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 801b432:	68fb      	ldr	r3, [r7, #12]
 801b434:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 801b438:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b43c:	2302      	movs	r3, #2
 801b43e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b440:	f7ff fb42 	bl	801aac8 <x509_get_uid>
 801b444:	6478      	str	r0, [r7, #68]	; 0x44
        if( ret != 0 )
 801b446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d004      	beq.n	801b456 <x509_crt_parse_der_core+0x372>
        {
            mbedtls_x509_crt_free( crt );
 801b44c:	68f8      	ldr	r0, [r7, #12]
 801b44e:	f001 fda1 	bl	801cf94 <mbedtls_x509_crt_free>
            return( ret );
 801b452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b454:	e071      	b.n	801b53a <x509_crt_parse_der_core+0x456>
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	699b      	ldr	r3, [r3, #24]
 801b45a:	2b03      	cmp	r3, #3
 801b45c:	d10f      	bne.n	801b47e <x509_crt_parse_der_core+0x39a>
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
 801b45e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b462:	68fa      	ldr	r2, [r7, #12]
 801b464:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b466:	4618      	mov	r0, r3
 801b468:	f7ff fd06 	bl	801ae78 <x509_get_crt_ext>
 801b46c:	6478      	str	r0, [r7, #68]	; 0x44
        if( ret != 0 )
 801b46e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b470:	2b00      	cmp	r3, #0
 801b472:	d004      	beq.n	801b47e <x509_crt_parse_der_core+0x39a>
        {
            mbedtls_x509_crt_free( crt );
 801b474:	68f8      	ldr	r0, [r7, #12]
 801b476:	f001 fd8d 	bl	801cf94 <mbedtls_x509_crt_free>
            return( ret );
 801b47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b47c:	e05d      	b.n	801b53a <x509_crt_parse_der_core+0x456>
        }
    }

    if( p != end )
 801b47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b482:	429a      	cmp	r2, r3
 801b484:	d004      	beq.n	801b490 <x509_crt_parse_der_core+0x3ac>
    {
        mbedtls_x509_crt_free( crt );
 801b486:	68f8      	ldr	r0, [r7, #12]
 801b488:	f001 fd84 	bl	801cf94 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801b48c:	4b2d      	ldr	r3, [pc, #180]	; (801b544 <x509_crt_parse_der_core+0x460>)
 801b48e:	e054      	b.n	801b53a <x509_crt_parse_der_core+0x456>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    end = crt_end;
 801b490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b492:	643b      	str	r3, [r7, #64]	; 0x40
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 801b494:	f107 031c 	add.w	r3, r7, #28
 801b498:	f107 0210 	add.w	r2, r7, #16
 801b49c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b4a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b4a2:	f7fe fc4f 	bl	8019d44 <mbedtls_x509_get_alg>
 801b4a6:	6478      	str	r0, [r7, #68]	; 0x44
 801b4a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d004      	beq.n	801b4b8 <x509_crt_parse_der_core+0x3d4>
    {
        mbedtls_x509_crt_free( crt );
 801b4ae:	68f8      	ldr	r0, [r7, #12]
 801b4b0:	f001 fd70 	bl	801cf94 <mbedtls_x509_crt_free>
        return( ret );
 801b4b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b4b6:	e040      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b4bc:	697b      	ldr	r3, [r7, #20]
 801b4be:	429a      	cmp	r2, r3
 801b4c0:	d11a      	bne.n	801b4f8 <x509_crt_parse_der_core+0x414>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801b4c6:	69b9      	ldr	r1, [r7, #24]
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4cc:	461a      	mov	r2, r3
 801b4ce:	f003 f871 	bl	801e5b4 <memcmp>
 801b4d2:	4603      	mov	r3, r0
    if( crt->sig_oid.len != sig_oid2.len ||
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d10f      	bne.n	801b4f8 <x509_crt_parse_der_core+0x414>
        sig_params1.len != sig_params2.len ||
 801b4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b4da:	6a3b      	ldr	r3, [r7, #32]
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 801b4dc:	429a      	cmp	r2, r3
 801b4de:	d10b      	bne.n	801b4f8 <x509_crt_parse_der_core+0x414>
        ( sig_params1.len != 0 &&
 801b4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        sig_params1.len != sig_params2.len ||
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d00d      	beq.n	801b502 <x509_crt_parse_der_core+0x41e>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 801b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b4ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f003 f861 	bl	801e5b4 <memcmp>
 801b4f2:	4603      	mov	r3, r0
        ( sig_params1.len != 0 &&
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d004      	beq.n	801b502 <x509_crt_parse_der_core+0x41e>
    {
        mbedtls_x509_crt_free( crt );
 801b4f8:	68f8      	ldr	r0, [r7, #12]
 801b4fa:	f001 fd4b 	bl	801cf94 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 801b4fe:	4b12      	ldr	r3, [pc, #72]	; (801b548 <x509_crt_parse_der_core+0x464>)
 801b500:	e01b      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 801b508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b50c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b50e:	4618      	mov	r0, r3
 801b510:	f7fe feea 	bl	801a2e8 <mbedtls_x509_get_sig>
 801b514:	6478      	str	r0, [r7, #68]	; 0x44
 801b516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d004      	beq.n	801b526 <x509_crt_parse_der_core+0x442>
    {
        mbedtls_x509_crt_free( crt );
 801b51c:	68f8      	ldr	r0, [r7, #12]
 801b51e:	f001 fd39 	bl	801cf94 <mbedtls_x509_crt_free>
        return( ret );
 801b522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b524:	e009      	b.n	801b53a <x509_crt_parse_der_core+0x456>
    }

    if( p != end )
 801b526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b52a:	429a      	cmp	r2, r3
 801b52c:	d004      	beq.n	801b538 <x509_crt_parse_der_core+0x454>
    {
        mbedtls_x509_crt_free( crt );
 801b52e:	68f8      	ldr	r0, [r7, #12]
 801b530:	f001 fd30 	bl	801cf94 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801b534:	4b03      	ldr	r3, [pc, #12]	; (801b544 <x509_crt_parse_der_core+0x460>)
 801b536:	e000      	b.n	801b53a <x509_crt_parse_der_core+0x456>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    return( 0 );
 801b538:	2300      	movs	r3, #0
}
 801b53a:	4618      	mov	r0, r3
 801b53c:	374c      	adds	r7, #76	; 0x4c
 801b53e:	46bd      	mov	sp, r7
 801b540:	bd90      	pop	{r4, r7, pc}
 801b542:	bf00      	nop
 801b544:	ffffde1a 	.word	0xffffde1a
 801b548:	ffffd980 	.word	0xffffd980

0801b54c <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 801b54c:	b580      	push	{r7, lr}
 801b54e:	b088      	sub	sp, #32
 801b550:	af00      	add	r7, sp, #0
 801b552:	60f8      	str	r0, [r7, #12]
 801b554:	60b9      	str	r1, [r7, #8]
 801b556:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	61fb      	str	r3, [r7, #28]
 801b55c:	2300      	movs	r3, #0
 801b55e:	61bb      	str	r3, [r7, #24]

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 801b560:	69fb      	ldr	r3, [r7, #28]
 801b562:	2b00      	cmp	r3, #0
 801b564:	d002      	beq.n	801b56c <mbedtls_x509_crt_parse_der+0x20>
 801b566:	68bb      	ldr	r3, [r7, #8]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d107      	bne.n	801b57c <mbedtls_x509_crt_parse_der+0x30>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801b56c:	4b2a      	ldr	r3, [pc, #168]	; (801b618 <mbedtls_x509_crt_parse_der+0xcc>)
 801b56e:	e04e      	b.n	801b60e <mbedtls_x509_crt_parse_der+0xc2>

    while( crt->version != 0 && crt->next != NULL )
    {
        prev = crt;
 801b570:	69fb      	ldr	r3, [r7, #28]
 801b572:	61bb      	str	r3, [r7, #24]
        crt = crt->next;
 801b574:	69fb      	ldr	r3, [r7, #28]
 801b576:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b57a:	61fb      	str	r3, [r7, #28]
    while( crt->version != 0 && crt->next != NULL )
 801b57c:	69fb      	ldr	r3, [r7, #28]
 801b57e:	699b      	ldr	r3, [r3, #24]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d004      	beq.n	801b58e <mbedtls_x509_crt_parse_der+0x42>
 801b584:	69fb      	ldr	r3, [r7, #28]
 801b586:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d1f0      	bne.n	801b570 <mbedtls_x509_crt_parse_der+0x24>
    }

    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
 801b58e:	69fb      	ldr	r3, [r7, #28]
 801b590:	699b      	ldr	r3, [r3, #24]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d021      	beq.n	801b5da <mbedtls_x509_crt_parse_der+0x8e>
 801b596:	69fb      	ldr	r3, [r7, #28]
 801b598:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d11c      	bne.n	801b5da <mbedtls_x509_crt_parse_der+0x8e>
    {
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 801b5a0:	f44f 719a 	mov.w	r1, #308	; 0x134
 801b5a4:	2001      	movs	r0, #1
 801b5a6:	f002 ffc3 	bl	801e530 <calloc>
 801b5aa:	4603      	mov	r3, r0
 801b5ac:	461a      	mov	r2, r3
 801b5ae:	69fb      	ldr	r3, [r7, #28]
 801b5b0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if( crt->next == NULL )
 801b5b4:	69fb      	ldr	r3, [r7, #28]
 801b5b6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d101      	bne.n	801b5c2 <mbedtls_x509_crt_parse_der+0x76>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801b5be:	4b17      	ldr	r3, [pc, #92]	; (801b61c <mbedtls_x509_crt_parse_der+0xd0>)
 801b5c0:	e025      	b.n	801b60e <mbedtls_x509_crt_parse_der+0xc2>

        prev = crt;
 801b5c2:	69fb      	ldr	r3, [r7, #28]
 801b5c4:	61bb      	str	r3, [r7, #24]
        mbedtls_x509_crt_init( crt->next );
 801b5c6:	69fb      	ldr	r3, [r7, #28]
 801b5c8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	f001 fcd3 	bl	801cf78 <mbedtls_x509_crt_init>
        crt = crt->next;
 801b5d2:	69fb      	ldr	r3, [r7, #28]
 801b5d4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801b5d8:	61fb      	str	r3, [r7, #28]
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 801b5da:	687a      	ldr	r2, [r7, #4]
 801b5dc:	68b9      	ldr	r1, [r7, #8]
 801b5de:	69f8      	ldr	r0, [r7, #28]
 801b5e0:	f7ff fd80 	bl	801b0e4 <x509_crt_parse_der_core>
 801b5e4:	6178      	str	r0, [r7, #20]
 801b5e6:	697b      	ldr	r3, [r7, #20]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d00f      	beq.n	801b60c <mbedtls_x509_crt_parse_der+0xc0>
    {
        if( prev )
 801b5ec:	69bb      	ldr	r3, [r7, #24]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d003      	beq.n	801b5fa <mbedtls_x509_crt_parse_der+0xae>
            prev->next = NULL;
 801b5f2:	69bb      	ldr	r3, [r7, #24]
 801b5f4:	2200      	movs	r2, #0
 801b5f6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if( crt != chain )
 801b5fa:	69fa      	ldr	r2, [r7, #28]
 801b5fc:	68fb      	ldr	r3, [r7, #12]
 801b5fe:	429a      	cmp	r2, r3
 801b600:	d002      	beq.n	801b608 <mbedtls_x509_crt_parse_der+0xbc>
            mbedtls_free( crt );
 801b602:	69f8      	ldr	r0, [r7, #28]
 801b604:	f002 ffce 	bl	801e5a4 <free>

        return( ret );
 801b608:	697b      	ldr	r3, [r7, #20]
 801b60a:	e000      	b.n	801b60e <mbedtls_x509_crt_parse_der+0xc2>
    }

    return( 0 );
 801b60c:	2300      	movs	r3, #0
}
 801b60e:	4618      	mov	r0, r3
 801b610:	3720      	adds	r7, #32
 801b612:	46bd      	mov	sp, r7
 801b614:	bd80      	pop	{r7, pc}
 801b616:	bf00      	nop
 801b618:	ffffd800 	.word	0xffffd800
 801b61c:	ffffd780 	.word	0xffffd780

0801b620 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 801b620:	b580      	push	{r7, lr}
 801b622:	b092      	sub	sp, #72	; 0x48
 801b624:	af04      	add	r7, sp, #16
 801b626:	60f8      	str	r0, [r7, #12]
 801b628:	60b9      	str	r1, [r7, #8]
 801b62a:	607a      	str	r2, [r7, #4]
#if defined(MBEDTLS_PEM_PARSE_C)
    int success = 0, first_error = 0, total_failed = 0;
 801b62c:	2300      	movs	r3, #0
 801b62e:	637b      	str	r3, [r7, #52]	; 0x34
 801b630:	2300      	movs	r3, #0
 801b632:	633b      	str	r3, [r7, #48]	; 0x30
 801b634:	2300      	movs	r3, #0
 801b636:	62fb      	str	r3, [r7, #44]	; 0x2c
    int buf_format = MBEDTLS_X509_FORMAT_DER;
 801b638:	2301      	movs	r3, #1
 801b63a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d002      	beq.n	801b648 <mbedtls_x509_crt_parse+0x28>
 801b642:	68bb      	ldr	r3, [r7, #8]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d101      	bne.n	801b64c <mbedtls_x509_crt_parse+0x2c>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801b648:	4b4b      	ldr	r3, [pc, #300]	; (801b778 <mbedtls_x509_crt_parse+0x158>)
 801b64a:	e090      	b.n	801b76e <mbedtls_x509_crt_parse+0x14e>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d00f      	beq.n	801b672 <mbedtls_x509_crt_parse+0x52>
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	3b01      	subs	r3, #1
 801b656:	68ba      	ldr	r2, [r7, #8]
 801b658:	4413      	add	r3, r2
 801b65a:	781b      	ldrb	r3, [r3, #0]
 801b65c:	2b0a      	cmp	r3, #10
 801b65e:	d108      	bne.n	801b672 <mbedtls_x509_crt_parse+0x52>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 801b660:	4946      	ldr	r1, [pc, #280]	; (801b77c <mbedtls_x509_crt_parse+0x15c>)
 801b662:	68b8      	ldr	r0, [r7, #8]
 801b664:	f003 fa50 	bl	801eb08 <strstr>
 801b668:	4603      	mov	r3, r0
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d001      	beq.n	801b672 <mbedtls_x509_crt_parse+0x52>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
 801b66e:	2302      	movs	r3, #2
 801b670:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
 801b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b674:	2b01      	cmp	r3, #1
 801b676:	d106      	bne.n	801b686 <mbedtls_x509_crt_parse+0x66>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 801b678:	687a      	ldr	r2, [r7, #4]
 801b67a:	68b9      	ldr	r1, [r7, #8]
 801b67c:	68f8      	ldr	r0, [r7, #12]
 801b67e:	f7ff ff65 	bl	801b54c <mbedtls_x509_crt_parse_der>
 801b682:	4603      	mov	r3, r0
 801b684:	e073      	b.n	801b76e <mbedtls_x509_crt_parse+0x14e>
#else
    return mbedtls_x509_crt_parse_der( chain, buf, buflen );
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
    if( buf_format == MBEDTLS_X509_FORMAT_PEM )
 801b686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b688:	2b02      	cmp	r3, #2
 801b68a:	d165      	bne.n	801b758 <mbedtls_x509_crt_parse+0x138>
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 801b68c:	e05f      	b.n	801b74e <mbedtls_x509_crt_parse+0x12e>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 801b68e:	f107 0318 	add.w	r3, r7, #24
 801b692:	4618      	mov	r0, r3
 801b694:	f7f3 fc33 	bl	800eefe <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
 801b698:	f107 0018 	add.w	r0, r7, #24
 801b69c:	f107 0314 	add.w	r3, r7, #20
 801b6a0:	9302      	str	r3, [sp, #8]
 801b6a2:	2300      	movs	r3, #0
 801b6a4:	9301      	str	r3, [sp, #4]
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	9300      	str	r3, [sp, #0]
 801b6aa:	68bb      	ldr	r3, [r7, #8]
 801b6ac:	4a34      	ldr	r2, [pc, #208]	; (801b780 <mbedtls_x509_crt_parse+0x160>)
 801b6ae:	4933      	ldr	r1, [pc, #204]	; (801b77c <mbedtls_x509_crt_parse+0x15c>)
 801b6b0:	f7f3 fc32 	bl	800ef18 <mbedtls_pem_read_buffer>
 801b6b4:	6278      	str	r0, [r7, #36]	; 0x24
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );

            if( ret == 0 )
 801b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d117      	bne.n	801b6ec <mbedtls_x509_crt_parse+0xcc>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 801b6bc:	697b      	ldr	r3, [r7, #20]
 801b6be:	687a      	ldr	r2, [r7, #4]
 801b6c0:	1ad3      	subs	r3, r2, r3
 801b6c2:	607b      	str	r3, [r7, #4]
                buf += use_len;
 801b6c4:	697b      	ldr	r3, [r7, #20]
 801b6c6:	68ba      	ldr	r2, [r7, #8]
 801b6c8:	4413      	add	r3, r2
 801b6ca:	60bb      	str	r3, [r7, #8]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 801b6cc:	69bb      	ldr	r3, [r7, #24]
 801b6ce:	69fa      	ldr	r2, [r7, #28]
 801b6d0:	4619      	mov	r1, r3
 801b6d2:	68f8      	ldr	r0, [r7, #12]
 801b6d4:	f7ff ff3a 	bl	801b54c <mbedtls_x509_crt_parse_der>
 801b6d8:	6278      	str	r0, [r7, #36]	; 0x24

            mbedtls_pem_free( &pem );
 801b6da:	f107 0318 	add.w	r3, r7, #24
 801b6de:	4618      	mov	r0, r3
 801b6e0:	f7f3 fcf8 	bl	800f0d4 <mbedtls_pem_free>

            if( ret != 0 )
 801b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d02f      	beq.n	801b74a <mbedtls_x509_crt_parse+0x12a>
 801b6ea:	e01f      	b.n	801b72c <mbedtls_x509_crt_parse+0x10c>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 801b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ee:	f513 5fa4 	cmn.w	r3, #5248	; 0x1480
 801b6f2:	d101      	bne.n	801b6f8 <mbedtls_x509_crt_parse+0xd8>
                return( ret );
 801b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6f6:	e03a      	b.n	801b76e <mbedtls_x509_crt_parse+0x14e>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 801b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6fa:	f513 5f84 	cmn.w	r3, #4224	; 0x1080
 801b6fe:	d02a      	beq.n	801b756 <mbedtls_x509_crt_parse+0x136>
                mbedtls_pem_free( &pem );
 801b700:	f107 0318 	add.w	r3, r7, #24
 801b704:	4618      	mov	r0, r3
 801b706:	f7f3 fce5 	bl	800f0d4 <mbedtls_pem_free>
                buflen -= use_len;
 801b70a:	697b      	ldr	r3, [r7, #20]
 801b70c:	687a      	ldr	r2, [r7, #4]
 801b70e:	1ad3      	subs	r3, r2, r3
 801b710:	607b      	str	r3, [r7, #4]
                buf += use_len;
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	68ba      	ldr	r2, [r7, #8]
 801b716:	4413      	add	r3, r2
 801b718:	60bb      	str	r3, [r7, #8]
                if( first_error == 0 )
 801b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d101      	bne.n	801b724 <mbedtls_x509_crt_parse+0x104>
                    first_error = ret;
 801b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b722:	633b      	str	r3, [r7, #48]	; 0x30
                total_failed++;
 801b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b726:	3301      	adds	r3, #1
 801b728:	62fb      	str	r3, [r7, #44]	; 0x2c
                continue;
 801b72a:	e010      	b.n	801b74e <mbedtls_x509_crt_parse+0x12e>
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 801b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b72e:	f513 5f22 	cmn.w	r3, #10368	; 0x2880
 801b732:	d101      	bne.n	801b738 <mbedtls_x509_crt_parse+0x118>
                    return( ret );
 801b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b736:	e01a      	b.n	801b76e <mbedtls_x509_crt_parse+0x14e>

                if( first_error == 0 )
 801b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d101      	bne.n	801b742 <mbedtls_x509_crt_parse+0x122>
                    first_error = ret;
 801b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b740:	633b      	str	r3, [r7, #48]	; 0x30

                total_failed++;
 801b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b744:	3301      	adds	r3, #1
 801b746:	62fb      	str	r3, [r7, #44]	; 0x2c
                continue;
 801b748:	e001      	b.n	801b74e <mbedtls_x509_crt_parse+0x12e>
            }

            success = 1;
 801b74a:	2301      	movs	r3, #1
 801b74c:	637b      	str	r3, [r7, #52]	; 0x34
        while( buflen > 1 )
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	2b01      	cmp	r3, #1
 801b752:	d89c      	bhi.n	801b68e <mbedtls_x509_crt_parse+0x6e>
 801b754:	e000      	b.n	801b758 <mbedtls_x509_crt_parse+0x138>
                break;
 801b756:	bf00      	nop
        }
    }

    if( success )
 801b758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d001      	beq.n	801b762 <mbedtls_x509_crt_parse+0x142>
        return( total_failed );
 801b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b760:	e005      	b.n	801b76e <mbedtls_x509_crt_parse+0x14e>
    else if( first_error )
 801b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b764:	2b00      	cmp	r3, #0
 801b766:	d001      	beq.n	801b76c <mbedtls_x509_crt_parse+0x14c>
        return( first_error );
 801b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b76a:	e000      	b.n	801b76e <mbedtls_x509_crt_parse+0x14e>
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 801b76c:	4b05      	ldr	r3, [pc, #20]	; (801b784 <mbedtls_x509_crt_parse+0x164>)
#endif /* MBEDTLS_PEM_PARSE_C */
}
 801b76e:	4618      	mov	r0, r3
 801b770:	3738      	adds	r7, #56	; 0x38
 801b772:	46bd      	mov	sp, r7
 801b774:	bd80      	pop	{r7, pc}
 801b776:	bf00      	nop
 801b778:	ffffd800 	.word	0xffffd800
 801b77c:	080245ac 	.word	0x080245ac
 801b780:	080245c8 	.word	0x080245c8
 801b784:	ffffd880 	.word	0xffffd880

0801b788 <x509_info_subject_alt_name>:
}
#endif /* MBEDTLS_FS_IO */

static int x509_info_subject_alt_name( char **buf, size_t *size,
                                       const mbedtls_x509_sequence *subject_alt_name )
{
 801b788:	b480      	push	{r7}
 801b78a:	b08b      	sub	sp, #44	; 0x2c
 801b78c:	af00      	add	r7, sp, #0
 801b78e:	60f8      	str	r0, [r7, #12]
 801b790:	60b9      	str	r1, [r7, #8]
 801b792:	607a      	str	r2, [r7, #4]
    size_t i;
    size_t n = *size;
 801b794:	68bb      	ldr	r3, [r7, #8]
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	623b      	str	r3, [r7, #32]
    char *p = *buf;
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	61fb      	str	r3, [r7, #28]
    const mbedtls_x509_sequence *cur = subject_alt_name;
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	61bb      	str	r3, [r7, #24]
    const char *sep = "";
 801b7a4:	4b2b      	ldr	r3, [pc, #172]	; (801b854 <x509_info_subject_alt_name+0xcc>)
 801b7a6:	617b      	str	r3, [r7, #20]
    size_t sep_len = 0;
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	613b      	str	r3, [r7, #16]

    while( cur != NULL )
 801b7ac:	e03f      	b.n	801b82e <x509_info_subject_alt_name+0xa6>
    {
        if( cur->buf.len + sep_len >= n )
 801b7ae:	69bb      	ldr	r3, [r7, #24]
 801b7b0:	685a      	ldr	r2, [r3, #4]
 801b7b2:	693b      	ldr	r3, [r7, #16]
 801b7b4:	4413      	add	r3, r2
 801b7b6:	6a3a      	ldr	r2, [r7, #32]
 801b7b8:	429a      	cmp	r2, r3
 801b7ba:	d804      	bhi.n	801b7c6 <x509_info_subject_alt_name+0x3e>
        {
            *p = '\0';
 801b7bc:	69fb      	ldr	r3, [r7, #28]
 801b7be:	2200      	movs	r2, #0
 801b7c0:	701a      	strb	r2, [r3, #0]
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 801b7c2:	4b25      	ldr	r3, [pc, #148]	; (801b858 <x509_info_subject_alt_name+0xd0>)
 801b7c4:	e040      	b.n	801b848 <x509_info_subject_alt_name+0xc0>
        }

        n -= cur->buf.len + sep_len;
 801b7c6:	69bb      	ldr	r3, [r7, #24]
 801b7c8:	685a      	ldr	r2, [r3, #4]
 801b7ca:	693b      	ldr	r3, [r7, #16]
 801b7cc:	4413      	add	r3, r2
 801b7ce:	6a3a      	ldr	r2, [r7, #32]
 801b7d0:	1ad3      	subs	r3, r2, r3
 801b7d2:	623b      	str	r3, [r7, #32]
        for( i = 0; i < sep_len; i++ )
 801b7d4:	2300      	movs	r3, #0
 801b7d6:	627b      	str	r3, [r7, #36]	; 0x24
 801b7d8:	e00a      	b.n	801b7f0 <x509_info_subject_alt_name+0x68>
            *p++ = sep[i];
 801b7da:	697a      	ldr	r2, [r7, #20]
 801b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7de:	441a      	add	r2, r3
 801b7e0:	69fb      	ldr	r3, [r7, #28]
 801b7e2:	1c59      	adds	r1, r3, #1
 801b7e4:	61f9      	str	r1, [r7, #28]
 801b7e6:	7812      	ldrb	r2, [r2, #0]
 801b7e8:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < sep_len; i++ )
 801b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ec:	3301      	adds	r3, #1
 801b7ee:	627b      	str	r3, [r7, #36]	; 0x24
 801b7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b7f2:	693b      	ldr	r3, [r7, #16]
 801b7f4:	429a      	cmp	r2, r3
 801b7f6:	d3f0      	bcc.n	801b7da <x509_info_subject_alt_name+0x52>
        for( i = 0; i < cur->buf.len; i++ )
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	627b      	str	r3, [r7, #36]	; 0x24
 801b7fc:	e00b      	b.n	801b816 <x509_info_subject_alt_name+0x8e>
            *p++ = cur->buf.p[i];
 801b7fe:	69bb      	ldr	r3, [r7, #24]
 801b800:	689a      	ldr	r2, [r3, #8]
 801b802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b804:	441a      	add	r2, r3
 801b806:	69fb      	ldr	r3, [r7, #28]
 801b808:	1c59      	adds	r1, r3, #1
 801b80a:	61f9      	str	r1, [r7, #28]
 801b80c:	7812      	ldrb	r2, [r2, #0]
 801b80e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < cur->buf.len; i++ )
 801b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b812:	3301      	adds	r3, #1
 801b814:	627b      	str	r3, [r7, #36]	; 0x24
 801b816:	69bb      	ldr	r3, [r7, #24]
 801b818:	685b      	ldr	r3, [r3, #4]
 801b81a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b81c:	429a      	cmp	r2, r3
 801b81e:	d3ee      	bcc.n	801b7fe <x509_info_subject_alt_name+0x76>

        sep = ", ";
 801b820:	4b0e      	ldr	r3, [pc, #56]	; (801b85c <x509_info_subject_alt_name+0xd4>)
 801b822:	617b      	str	r3, [r7, #20]
        sep_len = 2;
 801b824:	2302      	movs	r3, #2
 801b826:	613b      	str	r3, [r7, #16]

        cur = cur->next;
 801b828:	69bb      	ldr	r3, [r7, #24]
 801b82a:	68db      	ldr	r3, [r3, #12]
 801b82c:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 801b82e:	69bb      	ldr	r3, [r7, #24]
 801b830:	2b00      	cmp	r3, #0
 801b832:	d1bc      	bne.n	801b7ae <x509_info_subject_alt_name+0x26>
    }

    *p = '\0';
 801b834:	69fb      	ldr	r3, [r7, #28]
 801b836:	2200      	movs	r2, #0
 801b838:	701a      	strb	r2, [r3, #0]

    *size = n;
 801b83a:	68bb      	ldr	r3, [r7, #8]
 801b83c:	6a3a      	ldr	r2, [r7, #32]
 801b83e:	601a      	str	r2, [r3, #0]
    *buf = p;
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	69fa      	ldr	r2, [r7, #28]
 801b844:	601a      	str	r2, [r3, #0]

    return( 0 );
 801b846:	2300      	movs	r3, #0
}
 801b848:	4618      	mov	r0, r3
 801b84a:	372c      	adds	r7, #44	; 0x2c
 801b84c:	46bd      	mov	sp, r7
 801b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b852:	4770      	bx	lr
 801b854:	080245e4 	.word	0x080245e4
 801b858:	ffffd680 	.word	0xffffd680
 801b85c:	080245e8 	.word	0x080245e8

0801b860 <x509_info_cert_type>:
    if( ns_cert_type & type )                   \
        PRINT_ITEM( name );

static int x509_info_cert_type( char **buf, size_t *size,
                                unsigned char ns_cert_type )
{
 801b860:	b580      	push	{r7, lr}
 801b862:	b088      	sub	sp, #32
 801b864:	af00      	add	r7, sp, #0
 801b866:	60f8      	str	r0, [r7, #12]
 801b868:	60b9      	str	r1, [r7, #8]
 801b86a:	4613      	mov	r3, r2
 801b86c:	71fb      	strb	r3, [r7, #7]
    int ret;
    size_t n = *size;
 801b86e:	68bb      	ldr	r3, [r7, #8]
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	61fb      	str	r3, [r7, #28]
    char *p = *buf;
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	61bb      	str	r3, [r7, #24]
    const char *sep = "";
 801b87a:	4b82      	ldr	r3, [pc, #520]	; (801ba84 <x509_info_cert_type+0x224>)
 801b87c:	617b      	str	r3, [r7, #20]

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 801b87e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b882:	2b00      	cmp	r3, #0
 801b884:	da19      	bge.n	801b8ba <x509_info_cert_type+0x5a>
 801b886:	697b      	ldr	r3, [r7, #20]
 801b888:	4a7f      	ldr	r2, [pc, #508]	; (801ba88 <x509_info_cert_type+0x228>)
 801b88a:	69f9      	ldr	r1, [r7, #28]
 801b88c:	69b8      	ldr	r0, [r7, #24]
 801b88e:	f003 f8e7 	bl	801ea60 <sniprintf>
 801b892:	6138      	str	r0, [r7, #16]
 801b894:	693b      	ldr	r3, [r7, #16]
 801b896:	2b00      	cmp	r3, #0
 801b898:	db03      	blt.n	801b8a2 <x509_info_cert_type+0x42>
 801b89a:	693b      	ldr	r3, [r7, #16]
 801b89c:	69fa      	ldr	r2, [r7, #28]
 801b89e:	429a      	cmp	r2, r3
 801b8a0:	d801      	bhi.n	801b8a6 <x509_info_cert_type+0x46>
 801b8a2:	4b7a      	ldr	r3, [pc, #488]	; (801ba8c <x509_info_cert_type+0x22c>)
 801b8a4:	e0e9      	b.n	801ba7a <x509_info_cert_type+0x21a>
 801b8a6:	693b      	ldr	r3, [r7, #16]
 801b8a8:	69fa      	ldr	r2, [r7, #28]
 801b8aa:	1ad3      	subs	r3, r2, r3
 801b8ac:	61fb      	str	r3, [r7, #28]
 801b8ae:	693b      	ldr	r3, [r7, #16]
 801b8b0:	69ba      	ldr	r2, [r7, #24]
 801b8b2:	4413      	add	r3, r2
 801b8b4:	61bb      	str	r3, [r7, #24]
 801b8b6:	4b76      	ldr	r3, [pc, #472]	; (801ba90 <x509_info_cert_type+0x230>)
 801b8b8:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 801b8ba:	79fb      	ldrb	r3, [r7, #7]
 801b8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d019      	beq.n	801b8f8 <x509_info_cert_type+0x98>
 801b8c4:	697b      	ldr	r3, [r7, #20]
 801b8c6:	4a73      	ldr	r2, [pc, #460]	; (801ba94 <x509_info_cert_type+0x234>)
 801b8c8:	69f9      	ldr	r1, [r7, #28]
 801b8ca:	69b8      	ldr	r0, [r7, #24]
 801b8cc:	f003 f8c8 	bl	801ea60 <sniprintf>
 801b8d0:	6138      	str	r0, [r7, #16]
 801b8d2:	693b      	ldr	r3, [r7, #16]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	db03      	blt.n	801b8e0 <x509_info_cert_type+0x80>
 801b8d8:	693b      	ldr	r3, [r7, #16]
 801b8da:	69fa      	ldr	r2, [r7, #28]
 801b8dc:	429a      	cmp	r2, r3
 801b8de:	d801      	bhi.n	801b8e4 <x509_info_cert_type+0x84>
 801b8e0:	4b6a      	ldr	r3, [pc, #424]	; (801ba8c <x509_info_cert_type+0x22c>)
 801b8e2:	e0ca      	b.n	801ba7a <x509_info_cert_type+0x21a>
 801b8e4:	693b      	ldr	r3, [r7, #16]
 801b8e6:	69fa      	ldr	r2, [r7, #28]
 801b8e8:	1ad3      	subs	r3, r2, r3
 801b8ea:	61fb      	str	r3, [r7, #28]
 801b8ec:	693b      	ldr	r3, [r7, #16]
 801b8ee:	69ba      	ldr	r2, [r7, #24]
 801b8f0:	4413      	add	r3, r2
 801b8f2:	61bb      	str	r3, [r7, #24]
 801b8f4:	4b66      	ldr	r3, [pc, #408]	; (801ba90 <x509_info_cert_type+0x230>)
 801b8f6:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 801b8f8:	79fb      	ldrb	r3, [r7, #7]
 801b8fa:	f003 0320 	and.w	r3, r3, #32
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d019      	beq.n	801b936 <x509_info_cert_type+0xd6>
 801b902:	697b      	ldr	r3, [r7, #20]
 801b904:	4a64      	ldr	r2, [pc, #400]	; (801ba98 <x509_info_cert_type+0x238>)
 801b906:	69f9      	ldr	r1, [r7, #28]
 801b908:	69b8      	ldr	r0, [r7, #24]
 801b90a:	f003 f8a9 	bl	801ea60 <sniprintf>
 801b90e:	6138      	str	r0, [r7, #16]
 801b910:	693b      	ldr	r3, [r7, #16]
 801b912:	2b00      	cmp	r3, #0
 801b914:	db03      	blt.n	801b91e <x509_info_cert_type+0xbe>
 801b916:	693b      	ldr	r3, [r7, #16]
 801b918:	69fa      	ldr	r2, [r7, #28]
 801b91a:	429a      	cmp	r2, r3
 801b91c:	d801      	bhi.n	801b922 <x509_info_cert_type+0xc2>
 801b91e:	4b5b      	ldr	r3, [pc, #364]	; (801ba8c <x509_info_cert_type+0x22c>)
 801b920:	e0ab      	b.n	801ba7a <x509_info_cert_type+0x21a>
 801b922:	693b      	ldr	r3, [r7, #16]
 801b924:	69fa      	ldr	r2, [r7, #28]
 801b926:	1ad3      	subs	r3, r2, r3
 801b928:	61fb      	str	r3, [r7, #28]
 801b92a:	693b      	ldr	r3, [r7, #16]
 801b92c:	69ba      	ldr	r2, [r7, #24]
 801b92e:	4413      	add	r3, r2
 801b930:	61bb      	str	r3, [r7, #24]
 801b932:	4b57      	ldr	r3, [pc, #348]	; (801ba90 <x509_info_cert_type+0x230>)
 801b934:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 801b936:	79fb      	ldrb	r3, [r7, #7]
 801b938:	f003 0310 	and.w	r3, r3, #16
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d019      	beq.n	801b974 <x509_info_cert_type+0x114>
 801b940:	697b      	ldr	r3, [r7, #20]
 801b942:	4a56      	ldr	r2, [pc, #344]	; (801ba9c <x509_info_cert_type+0x23c>)
 801b944:	69f9      	ldr	r1, [r7, #28]
 801b946:	69b8      	ldr	r0, [r7, #24]
 801b948:	f003 f88a 	bl	801ea60 <sniprintf>
 801b94c:	6138      	str	r0, [r7, #16]
 801b94e:	693b      	ldr	r3, [r7, #16]
 801b950:	2b00      	cmp	r3, #0
 801b952:	db03      	blt.n	801b95c <x509_info_cert_type+0xfc>
 801b954:	693b      	ldr	r3, [r7, #16]
 801b956:	69fa      	ldr	r2, [r7, #28]
 801b958:	429a      	cmp	r2, r3
 801b95a:	d801      	bhi.n	801b960 <x509_info_cert_type+0x100>
 801b95c:	4b4b      	ldr	r3, [pc, #300]	; (801ba8c <x509_info_cert_type+0x22c>)
 801b95e:	e08c      	b.n	801ba7a <x509_info_cert_type+0x21a>
 801b960:	693b      	ldr	r3, [r7, #16]
 801b962:	69fa      	ldr	r2, [r7, #28]
 801b964:	1ad3      	subs	r3, r2, r3
 801b966:	61fb      	str	r3, [r7, #28]
 801b968:	693b      	ldr	r3, [r7, #16]
 801b96a:	69ba      	ldr	r2, [r7, #24]
 801b96c:	4413      	add	r3, r2
 801b96e:	61bb      	str	r3, [r7, #24]
 801b970:	4b47      	ldr	r3, [pc, #284]	; (801ba90 <x509_info_cert_type+0x230>)
 801b972:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 801b974:	79fb      	ldrb	r3, [r7, #7]
 801b976:	f003 0308 	and.w	r3, r3, #8
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d019      	beq.n	801b9b2 <x509_info_cert_type+0x152>
 801b97e:	697b      	ldr	r3, [r7, #20]
 801b980:	4a47      	ldr	r2, [pc, #284]	; (801baa0 <x509_info_cert_type+0x240>)
 801b982:	69f9      	ldr	r1, [r7, #28]
 801b984:	69b8      	ldr	r0, [r7, #24]
 801b986:	f003 f86b 	bl	801ea60 <sniprintf>
 801b98a:	6138      	str	r0, [r7, #16]
 801b98c:	693b      	ldr	r3, [r7, #16]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	db03      	blt.n	801b99a <x509_info_cert_type+0x13a>
 801b992:	693b      	ldr	r3, [r7, #16]
 801b994:	69fa      	ldr	r2, [r7, #28]
 801b996:	429a      	cmp	r2, r3
 801b998:	d801      	bhi.n	801b99e <x509_info_cert_type+0x13e>
 801b99a:	4b3c      	ldr	r3, [pc, #240]	; (801ba8c <x509_info_cert_type+0x22c>)
 801b99c:	e06d      	b.n	801ba7a <x509_info_cert_type+0x21a>
 801b99e:	693b      	ldr	r3, [r7, #16]
 801b9a0:	69fa      	ldr	r2, [r7, #28]
 801b9a2:	1ad3      	subs	r3, r2, r3
 801b9a4:	61fb      	str	r3, [r7, #28]
 801b9a6:	693b      	ldr	r3, [r7, #16]
 801b9a8:	69ba      	ldr	r2, [r7, #24]
 801b9aa:	4413      	add	r3, r2
 801b9ac:	61bb      	str	r3, [r7, #24]
 801b9ae:	4b38      	ldr	r3, [pc, #224]	; (801ba90 <x509_info_cert_type+0x230>)
 801b9b0:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 801b9b2:	79fb      	ldrb	r3, [r7, #7]
 801b9b4:	f003 0304 	and.w	r3, r3, #4
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d019      	beq.n	801b9f0 <x509_info_cert_type+0x190>
 801b9bc:	697b      	ldr	r3, [r7, #20]
 801b9be:	4a39      	ldr	r2, [pc, #228]	; (801baa4 <x509_info_cert_type+0x244>)
 801b9c0:	69f9      	ldr	r1, [r7, #28]
 801b9c2:	69b8      	ldr	r0, [r7, #24]
 801b9c4:	f003 f84c 	bl	801ea60 <sniprintf>
 801b9c8:	6138      	str	r0, [r7, #16]
 801b9ca:	693b      	ldr	r3, [r7, #16]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	db03      	blt.n	801b9d8 <x509_info_cert_type+0x178>
 801b9d0:	693b      	ldr	r3, [r7, #16]
 801b9d2:	69fa      	ldr	r2, [r7, #28]
 801b9d4:	429a      	cmp	r2, r3
 801b9d6:	d801      	bhi.n	801b9dc <x509_info_cert_type+0x17c>
 801b9d8:	4b2c      	ldr	r3, [pc, #176]	; (801ba8c <x509_info_cert_type+0x22c>)
 801b9da:	e04e      	b.n	801ba7a <x509_info_cert_type+0x21a>
 801b9dc:	693b      	ldr	r3, [r7, #16]
 801b9de:	69fa      	ldr	r2, [r7, #28]
 801b9e0:	1ad3      	subs	r3, r2, r3
 801b9e2:	61fb      	str	r3, [r7, #28]
 801b9e4:	693b      	ldr	r3, [r7, #16]
 801b9e6:	69ba      	ldr	r2, [r7, #24]
 801b9e8:	4413      	add	r3, r2
 801b9ea:	61bb      	str	r3, [r7, #24]
 801b9ec:	4b28      	ldr	r3, [pc, #160]	; (801ba90 <x509_info_cert_type+0x230>)
 801b9ee:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 801b9f0:	79fb      	ldrb	r3, [r7, #7]
 801b9f2:	f003 0302 	and.w	r3, r3, #2
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d019      	beq.n	801ba2e <x509_info_cert_type+0x1ce>
 801b9fa:	697b      	ldr	r3, [r7, #20]
 801b9fc:	4a2a      	ldr	r2, [pc, #168]	; (801baa8 <x509_info_cert_type+0x248>)
 801b9fe:	69f9      	ldr	r1, [r7, #28]
 801ba00:	69b8      	ldr	r0, [r7, #24]
 801ba02:	f003 f82d 	bl	801ea60 <sniprintf>
 801ba06:	6138      	str	r0, [r7, #16]
 801ba08:	693b      	ldr	r3, [r7, #16]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	db03      	blt.n	801ba16 <x509_info_cert_type+0x1b6>
 801ba0e:	693b      	ldr	r3, [r7, #16]
 801ba10:	69fa      	ldr	r2, [r7, #28]
 801ba12:	429a      	cmp	r2, r3
 801ba14:	d801      	bhi.n	801ba1a <x509_info_cert_type+0x1ba>
 801ba16:	4b1d      	ldr	r3, [pc, #116]	; (801ba8c <x509_info_cert_type+0x22c>)
 801ba18:	e02f      	b.n	801ba7a <x509_info_cert_type+0x21a>
 801ba1a:	693b      	ldr	r3, [r7, #16]
 801ba1c:	69fa      	ldr	r2, [r7, #28]
 801ba1e:	1ad3      	subs	r3, r2, r3
 801ba20:	61fb      	str	r3, [r7, #28]
 801ba22:	693b      	ldr	r3, [r7, #16]
 801ba24:	69ba      	ldr	r2, [r7, #24]
 801ba26:	4413      	add	r3, r2
 801ba28:	61bb      	str	r3, [r7, #24]
 801ba2a:	4b19      	ldr	r3, [pc, #100]	; (801ba90 <x509_info_cert_type+0x230>)
 801ba2c:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 801ba2e:	79fb      	ldrb	r3, [r7, #7]
 801ba30:	f003 0301 	and.w	r3, r3, #1
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d019      	beq.n	801ba6c <x509_info_cert_type+0x20c>
 801ba38:	697b      	ldr	r3, [r7, #20]
 801ba3a:	4a1c      	ldr	r2, [pc, #112]	; (801baac <x509_info_cert_type+0x24c>)
 801ba3c:	69f9      	ldr	r1, [r7, #28]
 801ba3e:	69b8      	ldr	r0, [r7, #24]
 801ba40:	f003 f80e 	bl	801ea60 <sniprintf>
 801ba44:	6138      	str	r0, [r7, #16]
 801ba46:	693b      	ldr	r3, [r7, #16]
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	db03      	blt.n	801ba54 <x509_info_cert_type+0x1f4>
 801ba4c:	693b      	ldr	r3, [r7, #16]
 801ba4e:	69fa      	ldr	r2, [r7, #28]
 801ba50:	429a      	cmp	r2, r3
 801ba52:	d801      	bhi.n	801ba58 <x509_info_cert_type+0x1f8>
 801ba54:	4b0d      	ldr	r3, [pc, #52]	; (801ba8c <x509_info_cert_type+0x22c>)
 801ba56:	e010      	b.n	801ba7a <x509_info_cert_type+0x21a>
 801ba58:	693b      	ldr	r3, [r7, #16]
 801ba5a:	69fa      	ldr	r2, [r7, #28]
 801ba5c:	1ad3      	subs	r3, r2, r3
 801ba5e:	61fb      	str	r3, [r7, #28]
 801ba60:	693b      	ldr	r3, [r7, #16]
 801ba62:	69ba      	ldr	r2, [r7, #24]
 801ba64:	4413      	add	r3, r2
 801ba66:	61bb      	str	r3, [r7, #24]
 801ba68:	4b09      	ldr	r3, [pc, #36]	; (801ba90 <x509_info_cert_type+0x230>)
 801ba6a:	617b      	str	r3, [r7, #20]

    *size = n;
 801ba6c:	68bb      	ldr	r3, [r7, #8]
 801ba6e:	69fa      	ldr	r2, [r7, #28]
 801ba70:	601a      	str	r2, [r3, #0]
    *buf = p;
 801ba72:	68fb      	ldr	r3, [r7, #12]
 801ba74:	69ba      	ldr	r2, [r7, #24]
 801ba76:	601a      	str	r2, [r3, #0]

    return( 0 );
 801ba78:	2300      	movs	r3, #0
}
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	3720      	adds	r7, #32
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	080245e4 	.word	0x080245e4
 801ba88:	080245ec 	.word	0x080245ec
 801ba8c:	ffffd680 	.word	0xffffd680
 801ba90:	080245e8 	.word	0x080245e8
 801ba94:	080245fc 	.word	0x080245fc
 801ba98:	0802460c 	.word	0x0802460c
 801ba9c:	08024614 	.word	0x08024614
 801baa0:	08024628 	.word	0x08024628
 801baa4:	08024634 	.word	0x08024634
 801baa8:	08024640 	.word	0x08024640
 801baac:	0802464c 	.word	0x0802464c

0801bab0 <x509_info_key_usage>:
    if( key_usage & code )      \
        PRINT_ITEM( name );

static int x509_info_key_usage( char **buf, size_t *size,
                                unsigned int key_usage )
{
 801bab0:	b580      	push	{r7, lr}
 801bab2:	b088      	sub	sp, #32
 801bab4:	af00      	add	r7, sp, #0
 801bab6:	60f8      	str	r0, [r7, #12]
 801bab8:	60b9      	str	r1, [r7, #8]
 801baba:	607a      	str	r2, [r7, #4]
    int ret;
    size_t n = *size;
 801babc:	68bb      	ldr	r3, [r7, #8]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	61fb      	str	r3, [r7, #28]
    char *p = *buf;
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	61bb      	str	r3, [r7, #24]
    const char *sep = "";
 801bac8:	4b87      	ldr	r3, [pc, #540]	; (801bce8 <x509_info_key_usage+0x238>)
 801baca:	617b      	str	r3, [r7, #20]

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d019      	beq.n	801bb0a <x509_info_key_usage+0x5a>
 801bad6:	697b      	ldr	r3, [r7, #20]
 801bad8:	4a84      	ldr	r2, [pc, #528]	; (801bcec <x509_info_key_usage+0x23c>)
 801bada:	69f9      	ldr	r1, [r7, #28]
 801badc:	69b8      	ldr	r0, [r7, #24]
 801bade:	f002 ffbf 	bl	801ea60 <sniprintf>
 801bae2:	6138      	str	r0, [r7, #16]
 801bae4:	693b      	ldr	r3, [r7, #16]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	db03      	blt.n	801baf2 <x509_info_key_usage+0x42>
 801baea:	693b      	ldr	r3, [r7, #16]
 801baec:	69fa      	ldr	r2, [r7, #28]
 801baee:	429a      	cmp	r2, r3
 801baf0:	d801      	bhi.n	801baf6 <x509_info_key_usage+0x46>
 801baf2:	4b7f      	ldr	r3, [pc, #508]	; (801bcf0 <x509_info_key_usage+0x240>)
 801baf4:	e121      	b.n	801bd3a <x509_info_key_usage+0x28a>
 801baf6:	693b      	ldr	r3, [r7, #16]
 801baf8:	69fa      	ldr	r2, [r7, #28]
 801bafa:	1ad3      	subs	r3, r2, r3
 801bafc:	61fb      	str	r3, [r7, #28]
 801bafe:	693b      	ldr	r3, [r7, #16]
 801bb00:	69ba      	ldr	r2, [r7, #24]
 801bb02:	4413      	add	r3, r2
 801bb04:	61bb      	str	r3, [r7, #24]
 801bb06:	4b7b      	ldr	r3, [pc, #492]	; (801bcf4 <x509_info_key_usage+0x244>)
 801bb08:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d019      	beq.n	801bb48 <x509_info_key_usage+0x98>
 801bb14:	697b      	ldr	r3, [r7, #20]
 801bb16:	4a78      	ldr	r2, [pc, #480]	; (801bcf8 <x509_info_key_usage+0x248>)
 801bb18:	69f9      	ldr	r1, [r7, #28]
 801bb1a:	69b8      	ldr	r0, [r7, #24]
 801bb1c:	f002 ffa0 	bl	801ea60 <sniprintf>
 801bb20:	6138      	str	r0, [r7, #16]
 801bb22:	693b      	ldr	r3, [r7, #16]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	db03      	blt.n	801bb30 <x509_info_key_usage+0x80>
 801bb28:	693b      	ldr	r3, [r7, #16]
 801bb2a:	69fa      	ldr	r2, [r7, #28]
 801bb2c:	429a      	cmp	r2, r3
 801bb2e:	d801      	bhi.n	801bb34 <x509_info_key_usage+0x84>
 801bb30:	4b6f      	ldr	r3, [pc, #444]	; (801bcf0 <x509_info_key_usage+0x240>)
 801bb32:	e102      	b.n	801bd3a <x509_info_key_usage+0x28a>
 801bb34:	693b      	ldr	r3, [r7, #16]
 801bb36:	69fa      	ldr	r2, [r7, #28]
 801bb38:	1ad3      	subs	r3, r2, r3
 801bb3a:	61fb      	str	r3, [r7, #28]
 801bb3c:	693b      	ldr	r3, [r7, #16]
 801bb3e:	69ba      	ldr	r2, [r7, #24]
 801bb40:	4413      	add	r3, r2
 801bb42:	61bb      	str	r3, [r7, #24]
 801bb44:	4b6b      	ldr	r3, [pc, #428]	; (801bcf4 <x509_info_key_usage+0x244>)
 801bb46:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	f003 0320 	and.w	r3, r3, #32
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d019      	beq.n	801bb86 <x509_info_key_usage+0xd6>
 801bb52:	697b      	ldr	r3, [r7, #20]
 801bb54:	4a69      	ldr	r2, [pc, #420]	; (801bcfc <x509_info_key_usage+0x24c>)
 801bb56:	69f9      	ldr	r1, [r7, #28]
 801bb58:	69b8      	ldr	r0, [r7, #24]
 801bb5a:	f002 ff81 	bl	801ea60 <sniprintf>
 801bb5e:	6138      	str	r0, [r7, #16]
 801bb60:	693b      	ldr	r3, [r7, #16]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	db03      	blt.n	801bb6e <x509_info_key_usage+0xbe>
 801bb66:	693b      	ldr	r3, [r7, #16]
 801bb68:	69fa      	ldr	r2, [r7, #28]
 801bb6a:	429a      	cmp	r2, r3
 801bb6c:	d801      	bhi.n	801bb72 <x509_info_key_usage+0xc2>
 801bb6e:	4b60      	ldr	r3, [pc, #384]	; (801bcf0 <x509_info_key_usage+0x240>)
 801bb70:	e0e3      	b.n	801bd3a <x509_info_key_usage+0x28a>
 801bb72:	693b      	ldr	r3, [r7, #16]
 801bb74:	69fa      	ldr	r2, [r7, #28]
 801bb76:	1ad3      	subs	r3, r2, r3
 801bb78:	61fb      	str	r3, [r7, #28]
 801bb7a:	693b      	ldr	r3, [r7, #16]
 801bb7c:	69ba      	ldr	r2, [r7, #24]
 801bb7e:	4413      	add	r3, r2
 801bb80:	61bb      	str	r3, [r7, #24]
 801bb82:	4b5c      	ldr	r3, [pc, #368]	; (801bcf4 <x509_info_key_usage+0x244>)
 801bb84:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	f003 0310 	and.w	r3, r3, #16
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d019      	beq.n	801bbc4 <x509_info_key_usage+0x114>
 801bb90:	697b      	ldr	r3, [r7, #20]
 801bb92:	4a5b      	ldr	r2, [pc, #364]	; (801bd00 <x509_info_key_usage+0x250>)
 801bb94:	69f9      	ldr	r1, [r7, #28]
 801bb96:	69b8      	ldr	r0, [r7, #24]
 801bb98:	f002 ff62 	bl	801ea60 <sniprintf>
 801bb9c:	6138      	str	r0, [r7, #16]
 801bb9e:	693b      	ldr	r3, [r7, #16]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	db03      	blt.n	801bbac <x509_info_key_usage+0xfc>
 801bba4:	693b      	ldr	r3, [r7, #16]
 801bba6:	69fa      	ldr	r2, [r7, #28]
 801bba8:	429a      	cmp	r2, r3
 801bbaa:	d801      	bhi.n	801bbb0 <x509_info_key_usage+0x100>
 801bbac:	4b50      	ldr	r3, [pc, #320]	; (801bcf0 <x509_info_key_usage+0x240>)
 801bbae:	e0c4      	b.n	801bd3a <x509_info_key_usage+0x28a>
 801bbb0:	693b      	ldr	r3, [r7, #16]
 801bbb2:	69fa      	ldr	r2, [r7, #28]
 801bbb4:	1ad3      	subs	r3, r2, r3
 801bbb6:	61fb      	str	r3, [r7, #28]
 801bbb8:	693b      	ldr	r3, [r7, #16]
 801bbba:	69ba      	ldr	r2, [r7, #24]
 801bbbc:	4413      	add	r3, r2
 801bbbe:	61bb      	str	r3, [r7, #24]
 801bbc0:	4b4c      	ldr	r3, [pc, #304]	; (801bcf4 <x509_info_key_usage+0x244>)
 801bbc2:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	f003 0308 	and.w	r3, r3, #8
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d019      	beq.n	801bc02 <x509_info_key_usage+0x152>
 801bbce:	697b      	ldr	r3, [r7, #20]
 801bbd0:	4a4c      	ldr	r2, [pc, #304]	; (801bd04 <x509_info_key_usage+0x254>)
 801bbd2:	69f9      	ldr	r1, [r7, #28]
 801bbd4:	69b8      	ldr	r0, [r7, #24]
 801bbd6:	f002 ff43 	bl	801ea60 <sniprintf>
 801bbda:	6138      	str	r0, [r7, #16]
 801bbdc:	693b      	ldr	r3, [r7, #16]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	db03      	blt.n	801bbea <x509_info_key_usage+0x13a>
 801bbe2:	693b      	ldr	r3, [r7, #16]
 801bbe4:	69fa      	ldr	r2, [r7, #28]
 801bbe6:	429a      	cmp	r2, r3
 801bbe8:	d801      	bhi.n	801bbee <x509_info_key_usage+0x13e>
 801bbea:	4b41      	ldr	r3, [pc, #260]	; (801bcf0 <x509_info_key_usage+0x240>)
 801bbec:	e0a5      	b.n	801bd3a <x509_info_key_usage+0x28a>
 801bbee:	693b      	ldr	r3, [r7, #16]
 801bbf0:	69fa      	ldr	r2, [r7, #28]
 801bbf2:	1ad3      	subs	r3, r2, r3
 801bbf4:	61fb      	str	r3, [r7, #28]
 801bbf6:	693b      	ldr	r3, [r7, #16]
 801bbf8:	69ba      	ldr	r2, [r7, #24]
 801bbfa:	4413      	add	r3, r2
 801bbfc:	61bb      	str	r3, [r7, #24]
 801bbfe:	4b3d      	ldr	r3, [pc, #244]	; (801bcf4 <x509_info_key_usage+0x244>)
 801bc00:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	f003 0304 	and.w	r3, r3, #4
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d019      	beq.n	801bc40 <x509_info_key_usage+0x190>
 801bc0c:	697b      	ldr	r3, [r7, #20]
 801bc0e:	4a3e      	ldr	r2, [pc, #248]	; (801bd08 <x509_info_key_usage+0x258>)
 801bc10:	69f9      	ldr	r1, [r7, #28]
 801bc12:	69b8      	ldr	r0, [r7, #24]
 801bc14:	f002 ff24 	bl	801ea60 <sniprintf>
 801bc18:	6138      	str	r0, [r7, #16]
 801bc1a:	693b      	ldr	r3, [r7, #16]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	db03      	blt.n	801bc28 <x509_info_key_usage+0x178>
 801bc20:	693b      	ldr	r3, [r7, #16]
 801bc22:	69fa      	ldr	r2, [r7, #28]
 801bc24:	429a      	cmp	r2, r3
 801bc26:	d801      	bhi.n	801bc2c <x509_info_key_usage+0x17c>
 801bc28:	4b31      	ldr	r3, [pc, #196]	; (801bcf0 <x509_info_key_usage+0x240>)
 801bc2a:	e086      	b.n	801bd3a <x509_info_key_usage+0x28a>
 801bc2c:	693b      	ldr	r3, [r7, #16]
 801bc2e:	69fa      	ldr	r2, [r7, #28]
 801bc30:	1ad3      	subs	r3, r2, r3
 801bc32:	61fb      	str	r3, [r7, #28]
 801bc34:	693b      	ldr	r3, [r7, #16]
 801bc36:	69ba      	ldr	r2, [r7, #24]
 801bc38:	4413      	add	r3, r2
 801bc3a:	61bb      	str	r3, [r7, #24]
 801bc3c:	4b2d      	ldr	r3, [pc, #180]	; (801bcf4 <x509_info_key_usage+0x244>)
 801bc3e:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	f003 0302 	and.w	r3, r3, #2
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d019      	beq.n	801bc7e <x509_info_key_usage+0x1ce>
 801bc4a:	697b      	ldr	r3, [r7, #20]
 801bc4c:	4a2f      	ldr	r2, [pc, #188]	; (801bd0c <x509_info_key_usage+0x25c>)
 801bc4e:	69f9      	ldr	r1, [r7, #28]
 801bc50:	69b8      	ldr	r0, [r7, #24]
 801bc52:	f002 ff05 	bl	801ea60 <sniprintf>
 801bc56:	6138      	str	r0, [r7, #16]
 801bc58:	693b      	ldr	r3, [r7, #16]
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	db03      	blt.n	801bc66 <x509_info_key_usage+0x1b6>
 801bc5e:	693b      	ldr	r3, [r7, #16]
 801bc60:	69fa      	ldr	r2, [r7, #28]
 801bc62:	429a      	cmp	r2, r3
 801bc64:	d801      	bhi.n	801bc6a <x509_info_key_usage+0x1ba>
 801bc66:	4b22      	ldr	r3, [pc, #136]	; (801bcf0 <x509_info_key_usage+0x240>)
 801bc68:	e067      	b.n	801bd3a <x509_info_key_usage+0x28a>
 801bc6a:	693b      	ldr	r3, [r7, #16]
 801bc6c:	69fa      	ldr	r2, [r7, #28]
 801bc6e:	1ad3      	subs	r3, r2, r3
 801bc70:	61fb      	str	r3, [r7, #28]
 801bc72:	693b      	ldr	r3, [r7, #16]
 801bc74:	69ba      	ldr	r2, [r7, #24]
 801bc76:	4413      	add	r3, r2
 801bc78:	61bb      	str	r3, [r7, #24]
 801bc7a:	4b1e      	ldr	r3, [pc, #120]	; (801bcf4 <x509_info_key_usage+0x244>)
 801bc7c:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	f003 0301 	and.w	r3, r3, #1
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	d019      	beq.n	801bcbc <x509_info_key_usage+0x20c>
 801bc88:	697b      	ldr	r3, [r7, #20]
 801bc8a:	4a21      	ldr	r2, [pc, #132]	; (801bd10 <x509_info_key_usage+0x260>)
 801bc8c:	69f9      	ldr	r1, [r7, #28]
 801bc8e:	69b8      	ldr	r0, [r7, #24]
 801bc90:	f002 fee6 	bl	801ea60 <sniprintf>
 801bc94:	6138      	str	r0, [r7, #16]
 801bc96:	693b      	ldr	r3, [r7, #16]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	db03      	blt.n	801bca4 <x509_info_key_usage+0x1f4>
 801bc9c:	693b      	ldr	r3, [r7, #16]
 801bc9e:	69fa      	ldr	r2, [r7, #28]
 801bca0:	429a      	cmp	r2, r3
 801bca2:	d801      	bhi.n	801bca8 <x509_info_key_usage+0x1f8>
 801bca4:	4b12      	ldr	r3, [pc, #72]	; (801bcf0 <x509_info_key_usage+0x240>)
 801bca6:	e048      	b.n	801bd3a <x509_info_key_usage+0x28a>
 801bca8:	693b      	ldr	r3, [r7, #16]
 801bcaa:	69fa      	ldr	r2, [r7, #28]
 801bcac:	1ad3      	subs	r3, r2, r3
 801bcae:	61fb      	str	r3, [r7, #28]
 801bcb0:	693b      	ldr	r3, [r7, #16]
 801bcb2:	69ba      	ldr	r2, [r7, #24]
 801bcb4:	4413      	add	r3, r2
 801bcb6:	61bb      	str	r3, [r7, #24]
 801bcb8:	4b0e      	ldr	r3, [pc, #56]	; (801bcf4 <x509_info_key_usage+0x244>)
 801bcba:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d032      	beq.n	801bd2c <x509_info_key_usage+0x27c>
 801bcc6:	697b      	ldr	r3, [r7, #20]
 801bcc8:	4a12      	ldr	r2, [pc, #72]	; (801bd14 <x509_info_key_usage+0x264>)
 801bcca:	69f9      	ldr	r1, [r7, #28]
 801bccc:	69b8      	ldr	r0, [r7, #24]
 801bcce:	f002 fec7 	bl	801ea60 <sniprintf>
 801bcd2:	6138      	str	r0, [r7, #16]
 801bcd4:	693b      	ldr	r3, [r7, #16]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	db03      	blt.n	801bce2 <x509_info_key_usage+0x232>
 801bcda:	693b      	ldr	r3, [r7, #16]
 801bcdc:	69fa      	ldr	r2, [r7, #28]
 801bcde:	429a      	cmp	r2, r3
 801bce0:	d81a      	bhi.n	801bd18 <x509_info_key_usage+0x268>
 801bce2:	4b03      	ldr	r3, [pc, #12]	; (801bcf0 <x509_info_key_usage+0x240>)
 801bce4:	e029      	b.n	801bd3a <x509_info_key_usage+0x28a>
 801bce6:	bf00      	nop
 801bce8:	080245e4 	.word	0x080245e4
 801bcec:	08024660 	.word	0x08024660
 801bcf0:	ffffd680 	.word	0xffffd680
 801bcf4:	080245e8 	.word	0x080245e8
 801bcf8:	08024674 	.word	0x08024674
 801bcfc:	08024688 	.word	0x08024688
 801bd00:	0802469c 	.word	0x0802469c
 801bd04:	080246b0 	.word	0x080246b0
 801bd08:	080246c0 	.word	0x080246c0
 801bd0c:	080246d0 	.word	0x080246d0
 801bd10:	080246dc 	.word	0x080246dc
 801bd14:	080246ec 	.word	0x080246ec
 801bd18:	693b      	ldr	r3, [r7, #16]
 801bd1a:	69fa      	ldr	r2, [r7, #28]
 801bd1c:	1ad3      	subs	r3, r2, r3
 801bd1e:	61fb      	str	r3, [r7, #28]
 801bd20:	693b      	ldr	r3, [r7, #16]
 801bd22:	69ba      	ldr	r2, [r7, #24]
 801bd24:	4413      	add	r3, r2
 801bd26:	61bb      	str	r3, [r7, #24]
 801bd28:	4b06      	ldr	r3, [pc, #24]	; (801bd44 <x509_info_key_usage+0x294>)
 801bd2a:	617b      	str	r3, [r7, #20]

    *size = n;
 801bd2c:	68bb      	ldr	r3, [r7, #8]
 801bd2e:	69fa      	ldr	r2, [r7, #28]
 801bd30:	601a      	str	r2, [r3, #0]
    *buf = p;
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	69ba      	ldr	r2, [r7, #24]
 801bd36:	601a      	str	r2, [r3, #0]

    return( 0 );
 801bd38:	2300      	movs	r3, #0
}
 801bd3a:	4618      	mov	r0, r3
 801bd3c:	3720      	adds	r7, #32
 801bd3e:	46bd      	mov	sp, r7
 801bd40:	bd80      	pop	{r7, pc}
 801bd42:	bf00      	nop
 801bd44:	080245e8 	.word	0x080245e8

0801bd48 <x509_info_ext_key_usage>:

static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
 801bd48:	b580      	push	{r7, lr}
 801bd4a:	b08c      	sub	sp, #48	; 0x30
 801bd4c:	af02      	add	r7, sp, #8
 801bd4e:	60f8      	str	r0, [r7, #12]
 801bd50:	60b9      	str	r1, [r7, #8]
 801bd52:	607a      	str	r2, [r7, #4]
    int ret;
    const char *desc;
    size_t n = *size;
 801bd54:	68bb      	ldr	r3, [r7, #8]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	627b      	str	r3, [r7, #36]	; 0x24
    char *p = *buf;
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	623b      	str	r3, [r7, #32]
    const mbedtls_x509_sequence *cur = extended_key_usage;
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	61fb      	str	r3, [r7, #28]
    const char *sep = "";
 801bd64:	4b1d      	ldr	r3, [pc, #116]	; (801bddc <x509_info_ext_key_usage+0x94>)
 801bd66:	61bb      	str	r3, [r7, #24]

    while( cur != NULL )
 801bd68:	e02a      	b.n	801bdc0 <x509_info_ext_key_usage+0x78>
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 801bd6a:	69fb      	ldr	r3, [r7, #28]
 801bd6c:	f107 0210 	add.w	r2, r7, #16
 801bd70:	4611      	mov	r1, r2
 801bd72:	4618      	mov	r0, r3
 801bd74:	f7f2 ffb2 	bl	800ecdc <mbedtls_oid_get_extended_key_usage>
 801bd78:	4603      	mov	r3, r0
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d001      	beq.n	801bd82 <x509_info_ext_key_usage+0x3a>
            desc = "???";
 801bd7e:	4b18      	ldr	r3, [pc, #96]	; (801bde0 <x509_info_ext_key_usage+0x98>)
 801bd80:	613b      	str	r3, [r7, #16]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 801bd82:	693b      	ldr	r3, [r7, #16]
 801bd84:	9300      	str	r3, [sp, #0]
 801bd86:	69bb      	ldr	r3, [r7, #24]
 801bd88:	4a16      	ldr	r2, [pc, #88]	; (801bde4 <x509_info_ext_key_usage+0x9c>)
 801bd8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bd8c:	6a38      	ldr	r0, [r7, #32]
 801bd8e:	f002 fe67 	bl	801ea60 <sniprintf>
 801bd92:	6178      	str	r0, [r7, #20]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801bd94:	697b      	ldr	r3, [r7, #20]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	db03      	blt.n	801bda2 <x509_info_ext_key_usage+0x5a>
 801bd9a:	697b      	ldr	r3, [r7, #20]
 801bd9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bd9e:	429a      	cmp	r2, r3
 801bda0:	d801      	bhi.n	801bda6 <x509_info_ext_key_usage+0x5e>
 801bda2:	4b11      	ldr	r3, [pc, #68]	; (801bde8 <x509_info_ext_key_usage+0xa0>)
 801bda4:	e016      	b.n	801bdd4 <x509_info_ext_key_usage+0x8c>
 801bda6:	697b      	ldr	r3, [r7, #20]
 801bda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bdaa:	1ad3      	subs	r3, r2, r3
 801bdac:	627b      	str	r3, [r7, #36]	; 0x24
 801bdae:	697b      	ldr	r3, [r7, #20]
 801bdb0:	6a3a      	ldr	r2, [r7, #32]
 801bdb2:	4413      	add	r3, r2
 801bdb4:	623b      	str	r3, [r7, #32]

        sep = ", ";
 801bdb6:	4b0d      	ldr	r3, [pc, #52]	; (801bdec <x509_info_ext_key_usage+0xa4>)
 801bdb8:	61bb      	str	r3, [r7, #24]

        cur = cur->next;
 801bdba:	69fb      	ldr	r3, [r7, #28]
 801bdbc:	68db      	ldr	r3, [r3, #12]
 801bdbe:	61fb      	str	r3, [r7, #28]
    while( cur != NULL )
 801bdc0:	69fb      	ldr	r3, [r7, #28]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d1d1      	bne.n	801bd6a <x509_info_ext_key_usage+0x22>
    }

    *size = n;
 801bdc6:	68bb      	ldr	r3, [r7, #8]
 801bdc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bdca:	601a      	str	r2, [r3, #0]
    *buf = p;
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	6a3a      	ldr	r2, [r7, #32]
 801bdd0:	601a      	str	r2, [r3, #0]

    return( 0 );
 801bdd2:	2300      	movs	r3, #0
}
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	3728      	adds	r7, #40	; 0x28
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	bd80      	pop	{r7, pc}
 801bddc:	080245e4 	.word	0x080245e4
 801bde0:	080246fc 	.word	0x080246fc
 801bde4:	08024700 	.word	0x08024700
 801bde8:	ffffd680 	.word	0xffffd680
 801bdec:	080245e8 	.word	0x080245e8

0801bdf0 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 801bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdf2:	b095      	sub	sp, #84	; 0x54
 801bdf4:	af06      	add	r7, sp, #24
 801bdf6:	6178      	str	r0, [r7, #20]
 801bdf8:	6139      	str	r1, [r7, #16]
 801bdfa:	60fa      	str	r2, [r7, #12]
 801bdfc:	60bb      	str	r3, [r7, #8]
    int ret;
    size_t n;
    char *p;
    char key_size_str[BEFORE_COLON];

    p = buf;
 801bdfe:	697b      	ldr	r3, [r7, #20]
 801be00:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = size;
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	633b      	str	r3, [r7, #48]	; 0x30

    if( NULL == crt )
 801be06:	68bb      	ldr	r3, [r7, #8]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d11b      	bne.n	801be44 <mbedtls_x509_crt_info+0x54>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 801be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801be10:	4a79      	ldr	r2, [pc, #484]	; (801bff8 <mbedtls_x509_crt_info+0x208>)
 801be12:	4618      	mov	r0, r3
 801be14:	f002 fe24 	bl	801ea60 <sniprintf>
 801be18:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	db03      	blt.n	801be28 <mbedtls_x509_crt_info+0x38>
 801be20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be24:	429a      	cmp	r2, r3
 801be26:	d301      	bcc.n	801be2c <mbedtls_x509_crt_info+0x3c>
 801be28:	4b74      	ldr	r3, [pc, #464]	; (801bffc <mbedtls_x509_crt_info+0x20c>)
 801be2a:	e2d6      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801be2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be30:	1ad3      	subs	r3, r2, r3
 801be32:	633b      	str	r3, [r7, #48]	; 0x30
 801be34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be38:	4413      	add	r3, r2
 801be3a:	62fb      	str	r3, [r7, #44]	; 0x2c

        return( (int) ( size - n ) );
 801be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be3e:	693a      	ldr	r2, [r7, #16]
 801be40:	1ad3      	subs	r3, r2, r3
 801be42:	e2ca      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 801be44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801be46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	699b      	ldr	r3, [r3, #24]
 801be4c:	9300      	str	r3, [sp, #0]
 801be4e:	68fb      	ldr	r3, [r7, #12]
 801be50:	4a6b      	ldr	r2, [pc, #428]	; (801c000 <mbedtls_x509_crt_info+0x210>)
 801be52:	f002 fe05 	bl	801ea60 <sniprintf>
 801be56:	6378      	str	r0, [r7, #52]	; 0x34
                               prefix, crt->version );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801be58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	db03      	blt.n	801be66 <mbedtls_x509_crt_info+0x76>
 801be5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be62:	429a      	cmp	r2, r3
 801be64:	d301      	bcc.n	801be6a <mbedtls_x509_crt_info+0x7a>
 801be66:	4b65      	ldr	r3, [pc, #404]	; (801bffc <mbedtls_x509_crt_info+0x20c>)
 801be68:	e2b7      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801be6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be6e:	1ad3      	subs	r3, r2, r3
 801be70:	633b      	str	r3, [r7, #48]	; 0x30
 801be72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be76:	4413      	add	r3, r2
 801be78:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 801be7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801be7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	4a60      	ldr	r2, [pc, #384]	; (801c004 <mbedtls_x509_crt_info+0x214>)
 801be82:	f002 fded 	bl	801ea60 <sniprintf>
 801be86:	6378      	str	r0, [r7, #52]	; 0x34
                               prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801be88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	db03      	blt.n	801be96 <mbedtls_x509_crt_info+0xa6>
 801be8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be92:	429a      	cmp	r2, r3
 801be94:	d301      	bcc.n	801be9a <mbedtls_x509_crt_info+0xaa>
 801be96:	4b59      	ldr	r3, [pc, #356]	; (801bffc <mbedtls_x509_crt_info+0x20c>)
 801be98:	e29f      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801be9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be9e:	1ad3      	subs	r3, r2, r3
 801bea0:	633b      	str	r3, [r7, #48]	; 0x30
 801bea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bea6:	4413      	add	r3, r2
 801bea8:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 801beaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801beac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801beae:	68bb      	ldr	r3, [r7, #8]
 801beb0:	331c      	adds	r3, #28
 801beb2:	461a      	mov	r2, r3
 801beb4:	f7fe fc18 	bl	801a6e8 <mbedtls_x509_serial_gets>
 801beb8:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801beba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	db03      	blt.n	801bec8 <mbedtls_x509_crt_info+0xd8>
 801bec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bec4:	429a      	cmp	r2, r3
 801bec6:	d301      	bcc.n	801becc <mbedtls_x509_crt_info+0xdc>
 801bec8:	4b4c      	ldr	r3, [pc, #304]	; (801bffc <mbedtls_x509_crt_info+0x20c>)
 801beca:	e286      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801becc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bed0:	1ad3      	subs	r3, r2, r3
 801bed2:	633b      	str	r3, [r7, #48]	; 0x30
 801bed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bed8:	4413      	add	r3, r2
 801beda:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 801bedc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	4a49      	ldr	r2, [pc, #292]	; (801c008 <mbedtls_x509_crt_info+0x218>)
 801bee4:	f002 fdbc 	bl	801ea60 <sniprintf>
 801bee8:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801beea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beec:	2b00      	cmp	r3, #0
 801beee:	db03      	blt.n	801bef8 <mbedtls_x509_crt_info+0x108>
 801bef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bef4:	429a      	cmp	r2, r3
 801bef6:	d301      	bcc.n	801befc <mbedtls_x509_crt_info+0x10c>
 801bef8:	4b40      	ldr	r3, [pc, #256]	; (801bffc <mbedtls_x509_crt_info+0x20c>)
 801befa:	e26e      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801befc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801befe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf00:	1ad3      	subs	r3, r2, r3
 801bf02:	633b      	str	r3, [r7, #48]	; 0x30
 801bf04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf08:	4413      	add	r3, r2
 801bf0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 801bf0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bf0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bf10:	68bb      	ldr	r3, [r7, #8]
 801bf12:	334c      	adds	r3, #76	; 0x4c
 801bf14:	461a      	mov	r2, r3
 801bf16:	f7fe fa9d 	bl	801a454 <mbedtls_x509_dn_gets>
 801bf1a:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	db03      	blt.n	801bf2a <mbedtls_x509_crt_info+0x13a>
 801bf22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf26:	429a      	cmp	r2, r3
 801bf28:	d301      	bcc.n	801bf2e <mbedtls_x509_crt_info+0x13e>
 801bf2a:	4b34      	ldr	r3, [pc, #208]	; (801bffc <mbedtls_x509_crt_info+0x20c>)
 801bf2c:	e255      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801bf2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf32:	1ad3      	subs	r3, r2, r3
 801bf34:	633b      	str	r3, [r7, #48]	; 0x30
 801bf36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf3a:	4413      	add	r3, r2
 801bf3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 801bf3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bf40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bf42:	68fb      	ldr	r3, [r7, #12]
 801bf44:	4a31      	ldr	r2, [pc, #196]	; (801c00c <mbedtls_x509_crt_info+0x21c>)
 801bf46:	f002 fd8b 	bl	801ea60 <sniprintf>
 801bf4a:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bf4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	db03      	blt.n	801bf5a <mbedtls_x509_crt_info+0x16a>
 801bf52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf56:	429a      	cmp	r2, r3
 801bf58:	d301      	bcc.n	801bf5e <mbedtls_x509_crt_info+0x16e>
 801bf5a:	4b28      	ldr	r3, [pc, #160]	; (801bffc <mbedtls_x509_crt_info+0x20c>)
 801bf5c:	e23d      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801bf5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf62:	1ad3      	subs	r3, r2, r3
 801bf64:	633b      	str	r3, [r7, #48]	; 0x30
 801bf66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf6a:	4413      	add	r3, r2
 801bf6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 801bf6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bf70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bf72:	68bb      	ldr	r3, [r7, #8]
 801bf74:	336c      	adds	r3, #108	; 0x6c
 801bf76:	461a      	mov	r2, r3
 801bf78:	f7fe fa6c 	bl	801a454 <mbedtls_x509_dn_gets>
 801bf7c:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	db03      	blt.n	801bf8c <mbedtls_x509_crt_info+0x19c>
 801bf84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf88:	429a      	cmp	r2, r3
 801bf8a:	d301      	bcc.n	801bf90 <mbedtls_x509_crt_info+0x1a0>
 801bf8c:	4b1b      	ldr	r3, [pc, #108]	; (801bffc <mbedtls_x509_crt_info+0x20c>)
 801bf8e:	e224      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801bf90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf94:	1ad3      	subs	r3, r2, r3
 801bf96:	633b      	str	r3, [r7, #48]	; 0x30
 801bf98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf9c:	4413      	add	r3, r2
 801bf9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 801bfa0:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 801bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfa4:	607b      	str	r3, [r7, #4]
 801bfa6:	68bb      	ldr	r3, [r7, #8]
 801bfa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bfac:	68ba      	ldr	r2, [r7, #8]
 801bfae:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 801bfb2:	68b9      	ldr	r1, [r7, #8]
 801bfb4:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 801bfb8:	68b8      	ldr	r0, [r7, #8]
 801bfba:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 801bfbe:	68bc      	ldr	r4, [r7, #8]
 801bfc0:	f8d4 409c 	ldr.w	r4, [r4, #156]	; 0x9c
 801bfc4:	68bd      	ldr	r5, [r7, #8]
 801bfc6:	f8d5 50a0 	ldr.w	r5, [r5, #160]	; 0xa0
 801bfca:	9505      	str	r5, [sp, #20]
 801bfcc:	9404      	str	r4, [sp, #16]
 801bfce:	9003      	str	r0, [sp, #12]
 801bfd0:	9102      	str	r1, [sp, #8]
 801bfd2:	9201      	str	r2, [sp, #4]
 801bfd4:	9300      	str	r3, [sp, #0]
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	4a0d      	ldr	r2, [pc, #52]	; (801c010 <mbedtls_x509_crt_info+0x220>)
 801bfda:	6879      	ldr	r1, [r7, #4]
 801bfdc:	4630      	mov	r0, r6
 801bfde:	f002 fd3f 	bl	801ea60 <sniprintf>
 801bfe2:	6378      	str	r0, [r7, #52]	; 0x34
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801bfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	db03      	blt.n	801bff2 <mbedtls_x509_crt_info+0x202>
 801bfea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfee:	429a      	cmp	r2, r3
 801bff0:	d310      	bcc.n	801c014 <mbedtls_x509_crt_info+0x224>
 801bff2:	4b02      	ldr	r3, [pc, #8]	; (801bffc <mbedtls_x509_crt_info+0x20c>)
 801bff4:	e1f1      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801bff6:	bf00      	nop
 801bff8:	08024708 	.word	0x08024708
 801bffc:	ffffd680 	.word	0xffffd680
 801c000:	08024728 	.word	0x08024728
 801c004:	08024744 	.word	0x08024744
 801c008:	0802475c 	.word	0x0802475c
 801c00c:	08024774 	.word	0x08024774
 801c010:	0802478c 	.word	0x0802478c
 801c014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c018:	1ad3      	subs	r3, r2, r3
 801c01a:	633b      	str	r3, [r7, #48]	; 0x30
 801c01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c020:	4413      	add	r3, r2
 801c022:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 801c024:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 801c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c028:	607b      	str	r3, [r7, #4]
 801c02a:	68bb      	ldr	r3, [r7, #8]
 801c02c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c030:	68ba      	ldr	r2, [r7, #8]
 801c032:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 801c036:	68b9      	ldr	r1, [r7, #8]
 801c038:	f8d1 10ac 	ldr.w	r1, [r1, #172]	; 0xac
 801c03c:	68b8      	ldr	r0, [r7, #8]
 801c03e:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 801c042:	68bc      	ldr	r4, [r7, #8]
 801c044:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
 801c048:	68bd      	ldr	r5, [r7, #8]
 801c04a:	f8d5 50b8 	ldr.w	r5, [r5, #184]	; 0xb8
 801c04e:	9505      	str	r5, [sp, #20]
 801c050:	9404      	str	r4, [sp, #16]
 801c052:	9003      	str	r0, [sp, #12]
 801c054:	9102      	str	r1, [sp, #8]
 801c056:	9201      	str	r2, [sp, #4]
 801c058:	9300      	str	r3, [sp, #0]
 801c05a:	68fb      	ldr	r3, [r7, #12]
 801c05c:	4a8c      	ldr	r2, [pc, #560]	; (801c290 <mbedtls_x509_crt_info+0x4a0>)
 801c05e:	6879      	ldr	r1, [r7, #4]
 801c060:	4630      	mov	r0, r6
 801c062:	f002 fcfd 	bl	801ea60 <sniprintf>
 801c066:	6378      	str	r0, [r7, #52]	; 0x34
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801c068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	db03      	blt.n	801c076 <mbedtls_x509_crt_info+0x286>
 801c06e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c072:	429a      	cmp	r2, r3
 801c074:	d301      	bcc.n	801c07a <mbedtls_x509_crt_info+0x28a>
 801c076:	4b87      	ldr	r3, [pc, #540]	; (801c294 <mbedtls_x509_crt_info+0x4a4>)
 801c078:	e1af      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c07a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c07e:	1ad3      	subs	r3, r2, r3
 801c080:	633b      	str	r3, [r7, #48]	; 0x30
 801c082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c086:	4413      	add	r3, r2
 801c088:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 801c08a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c08c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	4a81      	ldr	r2, [pc, #516]	; (801c298 <mbedtls_x509_crt_info+0x4a8>)
 801c092:	f002 fce5 	bl	801ea60 <sniprintf>
 801c096:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801c098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	db03      	blt.n	801c0a6 <mbedtls_x509_crt_info+0x2b6>
 801c09e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0a2:	429a      	cmp	r2, r3
 801c0a4:	d301      	bcc.n	801c0aa <mbedtls_x509_crt_info+0x2ba>
 801c0a6:	4b7b      	ldr	r3, [pc, #492]	; (801c294 <mbedtls_x509_crt_info+0x4a4>)
 801c0a8:	e197      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c0aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0ae:	1ad3      	subs	r3, r2, r3
 801c0b0:	633b      	str	r3, [r7, #48]	; 0x30
 801c0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0b6:	4413      	add	r3, r2
 801c0b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 801c0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c0bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c0be:	68bb      	ldr	r3, [r7, #8]
 801c0c0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801c0c4:	68bb      	ldr	r3, [r7, #8]
 801c0c6:	f893 5129 	ldrb.w	r5, [r3, #297]	; 0x129
 801c0ca:	68bb      	ldr	r3, [r7, #8]
 801c0cc:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                             crt->sig_md, crt->sig_opts );
 801c0d0:	68ba      	ldr	r2, [r7, #8]
 801c0d2:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 801c0d6:	9201      	str	r2, [sp, #4]
 801c0d8:	9300      	str	r3, [sp, #0]
 801c0da:	462b      	mov	r3, r5
 801c0dc:	4622      	mov	r2, r4
 801c0de:	f7fe fb83 	bl	801a7e8 <mbedtls_x509_sig_alg_gets>
 801c0e2:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801c0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	db03      	blt.n	801c0f2 <mbedtls_x509_crt_info+0x302>
 801c0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0ee:	429a      	cmp	r2, r3
 801c0f0:	d301      	bcc.n	801c0f6 <mbedtls_x509_crt_info+0x306>
 801c0f2:	4b68      	ldr	r3, [pc, #416]	; (801c294 <mbedtls_x509_crt_info+0x4a4>)
 801c0f4:	e171      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c0f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0fa:	1ad3      	subs	r3, r2, r3
 801c0fc:	633b      	str	r3, [r7, #48]	; 0x30
 801c0fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c102:	4413      	add	r3, r2
 801c104:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 801c106:	68bb      	ldr	r3, [r7, #8]
 801c108:	33bc      	adds	r3, #188	; 0xbc
 801c10a:	4618      	mov	r0, r3
 801c10c:	f7f3 f9d6 	bl	800f4bc <mbedtls_pk_get_name>
 801c110:	4602      	mov	r2, r0
 801c112:	f107 0318 	add.w	r3, r7, #24
 801c116:	2112      	movs	r1, #18
 801c118:	4618      	mov	r0, r3
 801c11a:	f7fe fba9 	bl	801a870 <mbedtls_x509_key_size_helper>
 801c11e:	6378      	str	r0, [r7, #52]	; 0x34
 801c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c122:	2b00      	cmp	r3, #0
 801c124:	d001      	beq.n	801c12a <mbedtls_x509_crt_info+0x33a>
                                      mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
    {
        return( ret );
 801c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c128:	e157      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 801c12a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 801c12c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 801c12e:	68bb      	ldr	r3, [r7, #8]
 801c130:	33bc      	adds	r3, #188	; 0xbc
 801c132:	4618      	mov	r0, r3
 801c134:	f7f3 f982 	bl	800f43c <mbedtls_pk_get_bitlen>
 801c138:	4603      	mov	r3, r0
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 801c13a:	9301      	str	r3, [sp, #4]
 801c13c:	f107 0318 	add.w	r3, r7, #24
 801c140:	9300      	str	r3, [sp, #0]
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	4a55      	ldr	r2, [pc, #340]	; (801c29c <mbedtls_x509_crt_info+0x4ac>)
 801c146:	4629      	mov	r1, r5
 801c148:	4620      	mov	r0, r4
 801c14a:	f002 fc89 	bl	801ea60 <sniprintf>
 801c14e:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801c150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c152:	2b00      	cmp	r3, #0
 801c154:	db03      	blt.n	801c15e <mbedtls_x509_crt_info+0x36e>
 801c156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c15a:	429a      	cmp	r2, r3
 801c15c:	d301      	bcc.n	801c162 <mbedtls_x509_crt_info+0x372>
 801c15e:	4b4d      	ldr	r3, [pc, #308]	; (801c294 <mbedtls_x509_crt_info+0x4a4>)
 801c160:	e13b      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c166:	1ad3      	subs	r3, r2, r3
 801c168:	633b      	str	r3, [r7, #48]	; 0x30
 801c16a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c16e:	4413      	add	r3, r2
 801c170:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 801c172:	68bb      	ldr	r3, [r7, #8]
 801c174:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801c178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d040      	beq.n	801c202 <mbedtls_x509_crt_info+0x412>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 801c180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c182:	6b39      	ldr	r1, [r7, #48]	; 0x30
                        crt->ca_istrue ? "true" : "false" );
 801c184:	68bb      	ldr	r3, [r7, #8]
 801c186:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d001      	beq.n	801c192 <mbedtls_x509_crt_info+0x3a2>
 801c18e:	4b44      	ldr	r3, [pc, #272]	; (801c2a0 <mbedtls_x509_crt_info+0x4b0>)
 801c190:	e000      	b.n	801c194 <mbedtls_x509_crt_info+0x3a4>
 801c192:	4b44      	ldr	r3, [pc, #272]	; (801c2a4 <mbedtls_x509_crt_info+0x4b4>)
 801c194:	9300      	str	r3, [sp, #0]
 801c196:	68fb      	ldr	r3, [r7, #12]
 801c198:	4a43      	ldr	r2, [pc, #268]	; (801c2a8 <mbedtls_x509_crt_info+0x4b8>)
 801c19a:	f002 fc61 	bl	801ea60 <sniprintf>
 801c19e:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801c1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	db03      	blt.n	801c1ae <mbedtls_x509_crt_info+0x3be>
 801c1a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1aa:	429a      	cmp	r2, r3
 801c1ac:	d301      	bcc.n	801c1b2 <mbedtls_x509_crt_info+0x3c2>
 801c1ae:	4b39      	ldr	r3, [pc, #228]	; (801c294 <mbedtls_x509_crt_info+0x4a4>)
 801c1b0:	e113      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1b6:	1ad3      	subs	r3, r2, r3
 801c1b8:	633b      	str	r3, [r7, #48]	; 0x30
 801c1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1be:	4413      	add	r3, r2
 801c1c0:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( crt->max_pathlen > 0 )
 801c1c2:	68bb      	ldr	r3, [r7, #8]
 801c1c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	dd1a      	ble.n	801c202 <mbedtls_x509_crt_info+0x412>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 801c1cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c1ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c1d0:	68bb      	ldr	r3, [r7, #8]
 801c1d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801c1d6:	3b01      	subs	r3, #1
 801c1d8:	4a34      	ldr	r2, [pc, #208]	; (801c2ac <mbedtls_x509_crt_info+0x4bc>)
 801c1da:	f002 fc41 	bl	801ea60 <sniprintf>
 801c1de:	6378      	str	r0, [r7, #52]	; 0x34
            MBEDTLS_X509_SAFE_SNPRINTF;
 801c1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	db03      	blt.n	801c1ee <mbedtls_x509_crt_info+0x3fe>
 801c1e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1ea:	429a      	cmp	r2, r3
 801c1ec:	d301      	bcc.n	801c1f2 <mbedtls_x509_crt_info+0x402>
 801c1ee:	4b29      	ldr	r3, [pc, #164]	; (801c294 <mbedtls_x509_crt_info+0x4a4>)
 801c1f0:	e0f3      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c1f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1f6:	1ad3      	subs	r3, r2, r3
 801c1f8:	633b      	str	r3, [r7, #48]	; 0x30
 801c1fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1fe:	4413      	add	r3, r2
 801c200:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 801c202:	68bb      	ldr	r3, [r7, #8]
 801c204:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801c208:	f003 0320 	and.w	r3, r3, #32
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d027      	beq.n	801c260 <mbedtls_x509_crt_info+0x470>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 801c210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	4a26      	ldr	r2, [pc, #152]	; (801c2b0 <mbedtls_x509_crt_info+0x4c0>)
 801c218:	f002 fc22 	bl	801ea60 <sniprintf>
 801c21c:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801c21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c220:	2b00      	cmp	r3, #0
 801c222:	db03      	blt.n	801c22c <mbedtls_x509_crt_info+0x43c>
 801c224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c228:	429a      	cmp	r2, r3
 801c22a:	d301      	bcc.n	801c230 <mbedtls_x509_crt_info+0x440>
 801c22c:	4b19      	ldr	r3, [pc, #100]	; (801c294 <mbedtls_x509_crt_info+0x4a4>)
 801c22e:	e0d4      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c234:	1ad3      	subs	r3, r2, r3
 801c236:	633b      	str	r3, [r7, #48]	; 0x30
 801c238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c23c:	4413      	add	r3, r2
 801c23e:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 801c240:	68bb      	ldr	r3, [r7, #8]
 801c242:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 801c246:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801c24a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c24e:	4618      	mov	r0, r3
 801c250:	f7ff fa9a 	bl	801b788 <x509_info_subject_alt_name>
 801c254:	6378      	str	r0, [r7, #52]	; 0x34
 801c256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d001      	beq.n	801c260 <mbedtls_x509_crt_info+0x470>
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
 801c25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c25e:	e0bc      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 801c260:	68bb      	ldr	r3, [r7, #8]
 801c262:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801c266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d03c      	beq.n	801c2e8 <mbedtls_x509_crt_info+0x4f8>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 801c26e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	4a0f      	ldr	r2, [pc, #60]	; (801c2b4 <mbedtls_x509_crt_info+0x4c4>)
 801c276:	f002 fbf3 	bl	801ea60 <sniprintf>
 801c27a:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801c27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c27e:	2b00      	cmp	r3, #0
 801c280:	db03      	blt.n	801c28a <mbedtls_x509_crt_info+0x49a>
 801c282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c286:	429a      	cmp	r2, r3
 801c288:	d316      	bcc.n	801c2b8 <mbedtls_x509_crt_info+0x4c8>
 801c28a:	4b02      	ldr	r3, [pc, #8]	; (801c294 <mbedtls_x509_crt_info+0x4a4>)
 801c28c:	e0a5      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c28e:	bf00      	nop
 801c290:	080247c4 	.word	0x080247c4
 801c294:	ffffd680 	.word	0xffffd680
 801c298:	080247fc 	.word	0x080247fc
 801c29c:	08024814 	.word	0x08024814
 801c2a0:	08024828 	.word	0x08024828
 801c2a4:	08024830 	.word	0x08024830
 801c2a8:	08024838 	.word	0x08024838
 801c2ac:	08024858 	.word	0x08024858
 801c2b0:	0802486c 	.word	0x0802486c
 801c2b4:	08024884 	.word	0x08024884
 801c2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2bc:	1ad3      	subs	r3, r2, r3
 801c2be:	633b      	str	r3, [r7, #48]	; 0x30
 801c2c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2c4:	4413      	add	r3, r2
 801c2c6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 801c2c8:	68bb      	ldr	r3, [r7, #8]
 801c2ca:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801c2ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801c2d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	f7ff fac2 	bl	801b860 <x509_info_cert_type>
 801c2dc:	6378      	str	r0, [r7, #52]	; 0x34
 801c2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d001      	beq.n	801c2e8 <mbedtls_x509_crt_info+0x4f8>
            return( ret );
 801c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2e6:	e078      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 801c2e8:	68bb      	ldr	r3, [r7, #8]
 801c2ea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801c2ee:	f003 0304 	and.w	r3, r3, #4
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d027      	beq.n	801c346 <mbedtls_x509_crt_info+0x556>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 801c2f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c2f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	4a39      	ldr	r2, [pc, #228]	; (801c3e4 <mbedtls_x509_crt_info+0x5f4>)
 801c2fe:	f002 fbaf 	bl	801ea60 <sniprintf>
 801c302:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801c304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c306:	2b00      	cmp	r3, #0
 801c308:	db03      	blt.n	801c312 <mbedtls_x509_crt_info+0x522>
 801c30a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c30e:	429a      	cmp	r2, r3
 801c310:	d301      	bcc.n	801c316 <mbedtls_x509_crt_info+0x526>
 801c312:	4b35      	ldr	r3, [pc, #212]	; (801c3e8 <mbedtls_x509_crt_info+0x5f8>)
 801c314:	e061      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c31a:	1ad3      	subs	r3, r2, r3
 801c31c:	633b      	str	r3, [r7, #48]	; 0x30
 801c31e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c322:	4413      	add	r3, r2
 801c324:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 801c326:	68bb      	ldr	r3, [r7, #8]
 801c328:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 801c32c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801c330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c334:	4618      	mov	r0, r3
 801c336:	f7ff fbbb 	bl	801bab0 <x509_info_key_usage>
 801c33a:	6378      	str	r0, [r7, #52]	; 0x34
 801c33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d001      	beq.n	801c346 <mbedtls_x509_crt_info+0x556>
            return( ret );
 801c342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c344:	e049      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 801c346:	68bb      	ldr	r3, [r7, #8]
 801c348:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801c34c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c350:	2b00      	cmp	r3, #0
 801c352:	d027      	beq.n	801c3a4 <mbedtls_x509_crt_info+0x5b4>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 801c354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	4a24      	ldr	r2, [pc, #144]	; (801c3ec <mbedtls_x509_crt_info+0x5fc>)
 801c35c:	f002 fb80 	bl	801ea60 <sniprintf>
 801c360:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801c362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c364:	2b00      	cmp	r3, #0
 801c366:	db03      	blt.n	801c370 <mbedtls_x509_crt_info+0x580>
 801c368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c36c:	429a      	cmp	r2, r3
 801c36e:	d301      	bcc.n	801c374 <mbedtls_x509_crt_info+0x584>
 801c370:	4b1d      	ldr	r3, [pc, #116]	; (801c3e8 <mbedtls_x509_crt_info+0x5f8>)
 801c372:	e032      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c378:	1ad3      	subs	r3, r2, r3
 801c37a:	633b      	str	r3, [r7, #48]	; 0x30
 801c37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c380:	4413      	add	r3, r2
 801c382:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 801c384:	68bb      	ldr	r3, [r7, #8]
 801c386:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801c38a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801c38e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c392:	4618      	mov	r0, r3
 801c394:	f7ff fcd8 	bl	801bd48 <x509_info_ext_key_usage>
 801c398:	6378      	str	r0, [r7, #52]	; 0x34
 801c39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d001      	beq.n	801c3a4 <mbedtls_x509_crt_info+0x5b4>
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
 801c3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3a2:	e01a      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 801c3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c3a8:	4a11      	ldr	r2, [pc, #68]	; (801c3f0 <mbedtls_x509_crt_info+0x600>)
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	f002 fb58 	bl	801ea60 <sniprintf>
 801c3b0:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801c3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	db03      	blt.n	801c3c0 <mbedtls_x509_crt_info+0x5d0>
 801c3b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3bc:	429a      	cmp	r2, r3
 801c3be:	d301      	bcc.n	801c3c4 <mbedtls_x509_crt_info+0x5d4>
 801c3c0:	4b09      	ldr	r3, [pc, #36]	; (801c3e8 <mbedtls_x509_crt_info+0x5f8>)
 801c3c2:	e00a      	b.n	801c3da <mbedtls_x509_crt_info+0x5ea>
 801c3c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3c8:	1ad3      	subs	r3, r2, r3
 801c3ca:	633b      	str	r3, [r7, #48]	; 0x30
 801c3cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3d0:	4413      	add	r3, r2
 801c3d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    return( (int) ( size - n ) );
 801c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3d6:	693a      	ldr	r2, [r7, #16]
 801c3d8:	1ad3      	subs	r3, r2, r3
}
 801c3da:	4618      	mov	r0, r3
 801c3dc:	373c      	adds	r7, #60	; 0x3c
 801c3de:	46bd      	mov	sp, r7
 801c3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3e2:	bf00      	nop
 801c3e4:	0802489c 	.word	0x0802489c
 801c3e8:	ffffd680 	.word	0xffffd680
 801c3ec:	080248b4 	.word	0x080248b4
 801c3f0:	080248cc 	.word	0x080248cc

0801c3f4 <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 801c3f4:	b480      	push	{r7}
 801c3f6:	b089      	sub	sp, #36	; 0x24
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	60f8      	str	r0, [r7, #12]
 801c3fc:	60b9      	str	r1, [r7, #8]
 801c3fe:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	61bb      	str	r3, [r7, #24]
 801c404:	68bb      	ldr	r3, [r7, #8]
 801c406:	617b      	str	r3, [r7, #20]

    for( i = 0; i < len; i++ )
 801c408:	2300      	movs	r3, #0
 801c40a:	61fb      	str	r3, [r7, #28]
 801c40c:	e030      	b.n	801c470 <x509_memcasecmp+0x7c>
    {
        diff = n1[i] ^ n2[i];
 801c40e:	69ba      	ldr	r2, [r7, #24]
 801c410:	69fb      	ldr	r3, [r7, #28]
 801c412:	4413      	add	r3, r2
 801c414:	781a      	ldrb	r2, [r3, #0]
 801c416:	6979      	ldr	r1, [r7, #20]
 801c418:	69fb      	ldr	r3, [r7, #28]
 801c41a:	440b      	add	r3, r1
 801c41c:	781b      	ldrb	r3, [r3, #0]
 801c41e:	4053      	eors	r3, r2
 801c420:	74fb      	strb	r3, [r7, #19]

        if( diff == 0 )
 801c422:	7cfb      	ldrb	r3, [r7, #19]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d01d      	beq.n	801c464 <x509_memcasecmp+0x70>
            continue;

        if( diff == 32 &&
 801c428:	7cfb      	ldrb	r3, [r7, #19]
 801c42a:	2b20      	cmp	r3, #32
 801c42c:	d117      	bne.n	801c45e <x509_memcasecmp+0x6a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801c42e:	69ba      	ldr	r2, [r7, #24]
 801c430:	69fb      	ldr	r3, [r7, #28]
 801c432:	4413      	add	r3, r2
 801c434:	781b      	ldrb	r3, [r3, #0]
        if( diff == 32 &&
 801c436:	2b60      	cmp	r3, #96	; 0x60
 801c438:	d905      	bls.n	801c446 <x509_memcasecmp+0x52>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801c43a:	69ba      	ldr	r2, [r7, #24]
 801c43c:	69fb      	ldr	r3, [r7, #28]
 801c43e:	4413      	add	r3, r2
 801c440:	781b      	ldrb	r3, [r3, #0]
 801c442:	2b7a      	cmp	r3, #122	; 0x7a
 801c444:	d910      	bls.n	801c468 <x509_memcasecmp+0x74>
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
 801c446:	69ba      	ldr	r2, [r7, #24]
 801c448:	69fb      	ldr	r3, [r7, #28]
 801c44a:	4413      	add	r3, r2
 801c44c:	781b      	ldrb	r3, [r3, #0]
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801c44e:	2b40      	cmp	r3, #64	; 0x40
 801c450:	d905      	bls.n	801c45e <x509_memcasecmp+0x6a>
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
 801c452:	69ba      	ldr	r2, [r7, #24]
 801c454:	69fb      	ldr	r3, [r7, #28]
 801c456:	4413      	add	r3, r2
 801c458:	781b      	ldrb	r3, [r3, #0]
 801c45a:	2b5a      	cmp	r3, #90	; 0x5a
 801c45c:	d904      	bls.n	801c468 <x509_memcasecmp+0x74>
        {
            continue;
        }

        return( -1 );
 801c45e:	f04f 33ff 	mov.w	r3, #4294967295
 801c462:	e00a      	b.n	801c47a <x509_memcasecmp+0x86>
            continue;
 801c464:	bf00      	nop
 801c466:	e000      	b.n	801c46a <x509_memcasecmp+0x76>
            continue;
 801c468:	bf00      	nop
    for( i = 0; i < len; i++ )
 801c46a:	69fb      	ldr	r3, [r7, #28]
 801c46c:	3301      	adds	r3, #1
 801c46e:	61fb      	str	r3, [r7, #28]
 801c470:	69fa      	ldr	r2, [r7, #28]
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	429a      	cmp	r2, r3
 801c476:	d3ca      	bcc.n	801c40e <x509_memcasecmp+0x1a>
    }

    return( 0 );
 801c478:	2300      	movs	r3, #0
}
 801c47a:	4618      	mov	r0, r3
 801c47c:	3724      	adds	r7, #36	; 0x24
 801c47e:	46bd      	mov	sp, r7
 801c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c484:	4770      	bx	lr

0801c486 <x509_check_wildcard>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 801c486:	b580      	push	{r7, lr}
 801c488:	b086      	sub	sp, #24
 801c48a:	af00      	add	r7, sp, #0
 801c48c:	6078      	str	r0, [r7, #4]
 801c48e:	6039      	str	r1, [r7, #0]
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 801c490:	2300      	movs	r3, #0
 801c492:	613b      	str	r3, [r7, #16]
 801c494:	6878      	ldr	r0, [r7, #4]
 801c496:	f7e3 fea5 	bl	80001e4 <strlen>
 801c49a:	60f8      	str	r0, [r7, #12]

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 801c49c:	683b      	ldr	r3, [r7, #0]
 801c49e:	685b      	ldr	r3, [r3, #4]
 801c4a0:	2b02      	cmp	r3, #2
 801c4a2:	d90a      	bls.n	801c4ba <x509_check_wildcard+0x34>
 801c4a4:	683b      	ldr	r3, [r7, #0]
 801c4a6:	689b      	ldr	r3, [r3, #8]
 801c4a8:	781b      	ldrb	r3, [r3, #0]
 801c4aa:	2b2a      	cmp	r3, #42	; 0x2a
 801c4ac:	d105      	bne.n	801c4ba <x509_check_wildcard+0x34>
 801c4ae:	683b      	ldr	r3, [r7, #0]
 801c4b0:	689b      	ldr	r3, [r3, #8]
 801c4b2:	3301      	adds	r3, #1
 801c4b4:	781b      	ldrb	r3, [r3, #0]
 801c4b6:	2b2e      	cmp	r3, #46	; 0x2e
 801c4b8:	d001      	beq.n	801c4be <x509_check_wildcard+0x38>
        return( 0 );
 801c4ba:	2300      	movs	r3, #0
 801c4bc:	e033      	b.n	801c526 <x509_check_wildcard+0xa0>

    for( i = 0; i < cn_len; ++i )
 801c4be:	2300      	movs	r3, #0
 801c4c0:	617b      	str	r3, [r7, #20]
 801c4c2:	e00b      	b.n	801c4dc <x509_check_wildcard+0x56>
    {
        if( cn[i] == '.' )
 801c4c4:	687a      	ldr	r2, [r7, #4]
 801c4c6:	697b      	ldr	r3, [r7, #20]
 801c4c8:	4413      	add	r3, r2
 801c4ca:	781b      	ldrb	r3, [r3, #0]
 801c4cc:	2b2e      	cmp	r3, #46	; 0x2e
 801c4ce:	d102      	bne.n	801c4d6 <x509_check_wildcard+0x50>
        {
            cn_idx = i;
 801c4d0:	697b      	ldr	r3, [r7, #20]
 801c4d2:	613b      	str	r3, [r7, #16]
            break;
 801c4d4:	e006      	b.n	801c4e4 <x509_check_wildcard+0x5e>
    for( i = 0; i < cn_len; ++i )
 801c4d6:	697b      	ldr	r3, [r7, #20]
 801c4d8:	3301      	adds	r3, #1
 801c4da:	617b      	str	r3, [r7, #20]
 801c4dc:	697a      	ldr	r2, [r7, #20]
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	429a      	cmp	r2, r3
 801c4e2:	d3ef      	bcc.n	801c4c4 <x509_check_wildcard+0x3e>
        }
    }

    if( cn_idx == 0 )
 801c4e4:	693b      	ldr	r3, [r7, #16]
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d102      	bne.n	801c4f0 <x509_check_wildcard+0x6a>
        return( -1 );
 801c4ea:	f04f 33ff 	mov.w	r3, #4294967295
 801c4ee:	e01a      	b.n	801c526 <x509_check_wildcard+0xa0>

    if( cn_len - cn_idx == name->len - 1 &&
 801c4f0:	68fa      	ldr	r2, [r7, #12]
 801c4f2:	693b      	ldr	r3, [r7, #16]
 801c4f4:	1ad2      	subs	r2, r2, r3
 801c4f6:	683b      	ldr	r3, [r7, #0]
 801c4f8:	685b      	ldr	r3, [r3, #4]
 801c4fa:	3b01      	subs	r3, #1
 801c4fc:	429a      	cmp	r2, r3
 801c4fe:	d110      	bne.n	801c522 <x509_check_wildcard+0x9c>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 801c500:	683b      	ldr	r3, [r7, #0]
 801c502:	689b      	ldr	r3, [r3, #8]
 801c504:	1c58      	adds	r0, r3, #1
 801c506:	687a      	ldr	r2, [r7, #4]
 801c508:	693b      	ldr	r3, [r7, #16]
 801c50a:	18d1      	adds	r1, r2, r3
 801c50c:	683b      	ldr	r3, [r7, #0]
 801c50e:	685b      	ldr	r3, [r3, #4]
 801c510:	3b01      	subs	r3, #1
 801c512:	461a      	mov	r2, r3
 801c514:	f7ff ff6e 	bl	801c3f4 <x509_memcasecmp>
 801c518:	4603      	mov	r3, r0
    if( cn_len - cn_idx == name->len - 1 &&
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d101      	bne.n	801c522 <x509_check_wildcard+0x9c>
    {
        return( 0 );
 801c51e:	2300      	movs	r3, #0
 801c520:	e001      	b.n	801c526 <x509_check_wildcard+0xa0>
    }

    return( -1 );
 801c522:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c526:	4618      	mov	r0, r3
 801c528:	3718      	adds	r7, #24
 801c52a:	46bd      	mov	sp, r7
 801c52c:	bd80      	pop	{r7, pc}

0801c52e <x509_string_cmp>:
 * variations (but not all).
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
 801c52e:	b580      	push	{r7, lr}
 801c530:	b082      	sub	sp, #8
 801c532:	af00      	add	r7, sp, #0
 801c534:	6078      	str	r0, [r7, #4]
 801c536:	6039      	str	r1, [r7, #0]
    if( a->tag == b->tag &&
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	681a      	ldr	r2, [r3, #0]
 801c53c:	683b      	ldr	r3, [r7, #0]
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	429a      	cmp	r2, r3
 801c542:	d113      	bne.n	801c56c <x509_string_cmp+0x3e>
        a->len == b->len &&
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	685a      	ldr	r2, [r3, #4]
 801c548:	683b      	ldr	r3, [r7, #0]
 801c54a:	685b      	ldr	r3, [r3, #4]
    if( a->tag == b->tag &&
 801c54c:	429a      	cmp	r2, r3
 801c54e:	d10d      	bne.n	801c56c <x509_string_cmp+0x3e>
        memcmp( a->p, b->p, b->len ) == 0 )
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	6898      	ldr	r0, [r3, #8]
 801c554:	683b      	ldr	r3, [r7, #0]
 801c556:	6899      	ldr	r1, [r3, #8]
 801c558:	683b      	ldr	r3, [r7, #0]
 801c55a:	685b      	ldr	r3, [r3, #4]
 801c55c:	461a      	mov	r2, r3
 801c55e:	f002 f829 	bl	801e5b4 <memcmp>
 801c562:	4603      	mov	r3, r0
        a->len == b->len &&
 801c564:	2b00      	cmp	r3, #0
 801c566:	d101      	bne.n	801c56c <x509_string_cmp+0x3e>
    {
        return( 0 );
 801c568:	2300      	movs	r3, #0
 801c56a:	e025      	b.n	801c5b8 <x509_string_cmp+0x8a>
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	2b0c      	cmp	r3, #12
 801c572:	d003      	beq.n	801c57c <x509_string_cmp+0x4e>
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	2b13      	cmp	r3, #19
 801c57a:	d11b      	bne.n	801c5b4 <x509_string_cmp+0x86>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c57c:	683b      	ldr	r3, [r7, #0]
 801c57e:	681b      	ldr	r3, [r3, #0]
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c580:	2b0c      	cmp	r3, #12
 801c582:	d003      	beq.n	801c58c <x509_string_cmp+0x5e>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c584:	683b      	ldr	r3, [r7, #0]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	2b13      	cmp	r3, #19
 801c58a:	d113      	bne.n	801c5b4 <x509_string_cmp+0x86>
        a->len == b->len &&
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	685a      	ldr	r2, [r3, #4]
 801c590:	683b      	ldr	r3, [r7, #0]
 801c592:	685b      	ldr	r3, [r3, #4]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801c594:	429a      	cmp	r2, r3
 801c596:	d10d      	bne.n	801c5b4 <x509_string_cmp+0x86>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	6898      	ldr	r0, [r3, #8]
 801c59c:	683b      	ldr	r3, [r7, #0]
 801c59e:	6899      	ldr	r1, [r3, #8]
 801c5a0:	683b      	ldr	r3, [r7, #0]
 801c5a2:	685b      	ldr	r3, [r3, #4]
 801c5a4:	461a      	mov	r2, r3
 801c5a6:	f7ff ff25 	bl	801c3f4 <x509_memcasecmp>
 801c5aa:	4603      	mov	r3, r0
        a->len == b->len &&
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d101      	bne.n	801c5b4 <x509_string_cmp+0x86>
    {
        return( 0 );
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	e001      	b.n	801c5b8 <x509_string_cmp+0x8a>
    }

    return( -1 );
 801c5b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c5b8:	4618      	mov	r0, r3
 801c5ba:	3708      	adds	r7, #8
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	bd80      	pop	{r7, pc}

0801c5c0 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 801c5c0:	b580      	push	{r7, lr}
 801c5c2:	b082      	sub	sp, #8
 801c5c4:	af00      	add	r7, sp, #0
 801c5c6:	6078      	str	r0, [r7, #4]
 801c5c8:	6039      	str	r1, [r7, #0]
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 801c5ca:	e041      	b.n	801c650 <x509_name_cmp+0x90>
    {
        if( a == NULL || b == NULL )
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d002      	beq.n	801c5d8 <x509_name_cmp+0x18>
 801c5d2:	683b      	ldr	r3, [r7, #0]
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d102      	bne.n	801c5de <x509_name_cmp+0x1e>
            return( -1 );
 801c5d8:	f04f 33ff 	mov.w	r3, #4294967295
 801c5dc:	e03f      	b.n	801c65e <x509_name_cmp+0x9e>

        /* type */
        if( a->oid.tag != b->oid.tag ||
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	681a      	ldr	r2, [r3, #0]
 801c5e2:	683b      	ldr	r3, [r7, #0]
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	429a      	cmp	r2, r3
 801c5e8:	d111      	bne.n	801c60e <x509_name_cmp+0x4e>
            a->oid.len != b->oid.len ||
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	685a      	ldr	r2, [r3, #4]
 801c5ee:	683b      	ldr	r3, [r7, #0]
 801c5f0:	685b      	ldr	r3, [r3, #4]
        if( a->oid.tag != b->oid.tag ||
 801c5f2:	429a      	cmp	r2, r3
 801c5f4:	d10b      	bne.n	801c60e <x509_name_cmp+0x4e>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	6898      	ldr	r0, [r3, #8]
 801c5fa:	683b      	ldr	r3, [r7, #0]
 801c5fc:	6899      	ldr	r1, [r3, #8]
 801c5fe:	683b      	ldr	r3, [r7, #0]
 801c600:	685b      	ldr	r3, [r3, #4]
 801c602:	461a      	mov	r2, r3
 801c604:	f001 ffd6 	bl	801e5b4 <memcmp>
 801c608:	4603      	mov	r3, r0
            a->oid.len != b->oid.len ||
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d002      	beq.n	801c614 <x509_name_cmp+0x54>
        {
            return( -1 );
 801c60e:	f04f 33ff 	mov.w	r3, #4294967295
 801c612:	e024      	b.n	801c65e <x509_name_cmp+0x9e>
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	f103 020c 	add.w	r2, r3, #12
 801c61a:	683b      	ldr	r3, [r7, #0]
 801c61c:	330c      	adds	r3, #12
 801c61e:	4619      	mov	r1, r3
 801c620:	4610      	mov	r0, r2
 801c622:	f7ff ff84 	bl	801c52e <x509_string_cmp>
 801c626:	4603      	mov	r3, r0
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d002      	beq.n	801c632 <x509_name_cmp+0x72>
            return( -1 );
 801c62c:	f04f 33ff 	mov.w	r3, #4294967295
 801c630:	e015      	b.n	801c65e <x509_name_cmp+0x9e>

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	7f1a      	ldrb	r2, [r3, #28]
 801c636:	683b      	ldr	r3, [r7, #0]
 801c638:	7f1b      	ldrb	r3, [r3, #28]
 801c63a:	429a      	cmp	r2, r3
 801c63c:	d002      	beq.n	801c644 <x509_name_cmp+0x84>
            return( -1 );
 801c63e:	f04f 33ff 	mov.w	r3, #4294967295
 801c642:	e00c      	b.n	801c65e <x509_name_cmp+0x9e>

        a = a->next;
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	699b      	ldr	r3, [r3, #24]
 801c648:	607b      	str	r3, [r7, #4]
        b = b->next;
 801c64a:	683b      	ldr	r3, [r7, #0]
 801c64c:	699b      	ldr	r3, [r3, #24]
 801c64e:	603b      	str	r3, [r7, #0]
    while( a != NULL || b != NULL )
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	2b00      	cmp	r3, #0
 801c654:	d1ba      	bne.n	801c5cc <x509_name_cmp+0xc>
 801c656:	683b      	ldr	r3, [r7, #0]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d1b7      	bne.n	801c5cc <x509_name_cmp+0xc>
    }

    /* a == NULL == b */
    return( 0 );
 801c65c:	2300      	movs	r3, #0
}
 801c65e:	4618      	mov	r0, r3
 801c660:	3708      	adds	r7, #8
 801c662:	46bd      	mov	sp, r7
 801c664:	bd80      	pop	{r7, pc}

0801c666 <x509_crt_check_parent>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 801c666:	b580      	push	{r7, lr}
 801c668:	b086      	sub	sp, #24
 801c66a:	af00      	add	r7, sp, #0
 801c66c:	60f8      	str	r0, [r7, #12]
 801c66e:	60b9      	str	r1, [r7, #8]
 801c670:	607a      	str	r2, [r7, #4]
 801c672:	603b      	str	r3, [r7, #0]
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801c67a:	68bb      	ldr	r3, [r7, #8]
 801c67c:	336c      	adds	r3, #108	; 0x6c
 801c67e:	4619      	mov	r1, r3
 801c680:	4610      	mov	r0, r2
 801c682:	f7ff ff9d 	bl	801c5c0 <x509_name_cmp>
 801c686:	4603      	mov	r3, r0
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d002      	beq.n	801c692 <x509_crt_check_parent+0x2c>
        return( -1 );
 801c68c:	f04f 33ff 	mov.w	r3, #4294967295
 801c690:	e030      	b.n	801c6f4 <x509_crt_check_parent+0x8e>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;
 801c692:	2301      	movs	r3, #1
 801c694:	617b      	str	r3, [r7, #20]

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d005      	beq.n	801c6a8 <x509_crt_check_parent+0x42>
 801c69c:	68bb      	ldr	r3, [r7, #8]
 801c69e:	699b      	ldr	r3, [r3, #24]
 801c6a0:	2b02      	cmp	r3, #2
 801c6a2:	dc01      	bgt.n	801c6a8 <x509_crt_check_parent+0x42>
        need_ca_bit = 0;
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	617b      	str	r3, [r7, #20]

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d016      	beq.n	801c6dc <x509_crt_check_parent+0x76>
 801c6ae:	683b      	ldr	r3, [r7, #0]
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d013      	beq.n	801c6dc <x509_crt_check_parent+0x76>
        child->raw.len == parent->raw.len &&
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	685a      	ldr	r2, [r3, #4]
 801c6b8:	68bb      	ldr	r3, [r7, #8]
 801c6ba:	685b      	ldr	r3, [r3, #4]
    if( top && bottom &&
 801c6bc:	429a      	cmp	r2, r3
 801c6be:	d10d      	bne.n	801c6dc <x509_crt_check_parent+0x76>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	6898      	ldr	r0, [r3, #8]
 801c6c4:	68bb      	ldr	r3, [r7, #8]
 801c6c6:	6899      	ldr	r1, [r3, #8]
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	685b      	ldr	r3, [r3, #4]
 801c6cc:	461a      	mov	r2, r3
 801c6ce:	f001 ff71 	bl	801e5b4 <memcmp>
 801c6d2:	4603      	mov	r3, r0
        child->raw.len == parent->raw.len &&
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d101      	bne.n	801c6dc <x509_crt_check_parent+0x76>
    {
        need_ca_bit = 0;
 801c6d8:	2300      	movs	r3, #0
 801c6da:	617b      	str	r3, [r7, #20]
    }

    if( need_ca_bit && ! parent->ca_istrue )
 801c6dc:	697b      	ldr	r3, [r7, #20]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d007      	beq.n	801c6f2 <x509_crt_check_parent+0x8c>
 801c6e2:	68bb      	ldr	r3, [r7, #8]
 801c6e4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d102      	bne.n	801c6f2 <x509_crt_check_parent+0x8c>
        return( -1 );
 801c6ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c6f0:	e000      	b.n	801c6f4 <x509_crt_check_parent+0x8e>
    {
        return( -1 );
    }
#endif

    return( 0 );
 801c6f2:	2300      	movs	r3, #0
}
 801c6f4:	4618      	mov	r0, r3
 801c6f6:	3718      	adds	r7, #24
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	bd80      	pop	{r7, pc}

0801c6fc <x509_crt_verify_top>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 801c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c700:	b096      	sub	sp, #88	; 0x58
 801c702:	af04      	add	r7, sp, #16
 801c704:	60f8      	str	r0, [r7, #12]
 801c706:	60b9      	str	r1, [r7, #8]
 801c708:	607a      	str	r2, [r7, #4]
 801c70a:	603b      	str	r3, [r7, #0]
    int ret;
    uint32_t ca_flags = 0;
 801c70c:	2300      	movs	r3, #0
 801c70e:	637b      	str	r3, [r7, #52]	; 0x34
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;
 801c710:	2300      	movs	r3, #0
 801c712:	643b      	str	r3, [r7, #64]	; 0x40

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	33a4      	adds	r3, #164	; 0xa4
 801c718:	4618      	mov	r0, r3
 801c71a:	f7fe f8d5 	bl	801a8c8 <mbedtls_x509_time_is_past>
 801c71e:	4603      	mov	r3, r0
 801c720:	2b00      	cmp	r3, #0
 801c722:	d005      	beq.n	801c730 <x509_crt_verify_top+0x34>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801c724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	f043 0201 	orr.w	r2, r3, #1
 801c72c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c72e:	601a      	str	r2, [r3, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	338c      	adds	r3, #140	; 0x8c
 801c734:	4618      	mov	r0, r3
 801c736:	f7fe f8d2 	bl	801a8de <mbedtls_x509_time_is_future>
 801c73a:	4603      	mov	r3, r0
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d005      	beq.n	801c74c <x509_crt_verify_top+0x50>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 801c740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801c748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c74a:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801c752:	4619      	mov	r1, r3
 801c754:	6838      	ldr	r0, [r7, #0]
 801c756:	f7fe f8e6 	bl	801a926 <x509_profile_check_md_alg>
 801c75a:	4603      	mov	r3, r0
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d005      	beq.n	801c76c <x509_crt_verify_top+0x70>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 801c760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801c768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c76a:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801c772:	4619      	mov	r1, r3
 801c774:	6838      	ldr	r0, [r7, #0]
 801c776:	f7fe f8f0 	bl	801a95a <x509_profile_check_pk_alg>
 801c77a:	4603      	mov	r3, r0
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d005      	beq.n	801c78c <x509_crt_verify_top+0x90>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 801c780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801c788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c78a:	601a      	str	r2, [r3, #0]

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801c78c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	f043 0208 	orr.w	r2, r3, #8
 801c794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c796:	601a      	str	r2, [r3, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801c79e:	4618      	mov	r0, r3
 801c7a0:	f7f1 fee8 	bl	800e574 <mbedtls_md_info_from_type>
 801c7a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( md_info == NULL )
 801c7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d102      	bne.n	801c7b2 <x509_crt_verify_top+0xb6>
    {
        /*
         * Cannot check 'unknown', no need to try any CA
         */
        trust_ca = NULL;
 801c7ac:	2300      	movs	r3, #0
 801c7ae:	60bb      	str	r3, [r7, #8]
 801c7b0:	e083      	b.n	801c8ba <x509_crt_verify_top+0x1be>
    }
    else
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	6959      	ldr	r1, [r3, #20]
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	691a      	ldr	r2, [r3, #16]
 801c7ba:	f107 0314 	add.w	r3, r7, #20
 801c7be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c7c0:	f7f1 ff72 	bl	800e6a8 <mbedtls_md>

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 801c7c4:	e079      	b.n	801c8ba <x509_crt_verify_top+0x1be>
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 801c7c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	bf0c      	ite	eq
 801c7cc:	2301      	moveq	r3, #1
 801c7ce:	2300      	movne	r3, #0
 801c7d0:	b2db      	uxtb	r3, r3
 801c7d2:	2201      	movs	r2, #1
 801c7d4:	68b9      	ldr	r1, [r7, #8]
 801c7d6:	68f8      	ldr	r0, [r7, #12]
 801c7d8:	f7ff ff45 	bl	801c666 <x509_crt_check_parent>
 801c7dc:	4603      	mov	r3, r0
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d160      	bne.n	801c8a4 <x509_crt_verify_top+0x1a8>
            continue;

        check_path_cnt = path_cnt + 1;
 801c7e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c7e4:	3301      	adds	r3, #1
 801c7e6:	647b      	str	r3, [r7, #68]	; 0x44

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c7ec:	68bb      	ldr	r3, [r7, #8]
 801c7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c7f0:	429a      	cmp	r2, r3
 801c7f2:	d10e      	bne.n	801c812 <x509_crt_verify_top+0x116>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801c7f8:	68bb      	ldr	r3, [r7, #8]
 801c7fa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c800:	461a      	mov	r2, r3
 801c802:	f001 fed7 	bl	801e5b4 <memcmp>
 801c806:	4603      	mov	r3, r0
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d102      	bne.n	801c812 <x509_crt_verify_top+0x116>
                            child->issuer_raw.len ) == 0 )
        {
            check_path_cnt--;
 801c80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c80e:	3b01      	subs	r3, #1
 801c810:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 801c812:	68bb      	ldr	r3, [r7, #8]
 801c814:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801c818:	2b00      	cmp	r3, #0
 801c81a:	dd07      	ble.n	801c82c <x509_crt_verify_top+0x130>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
 801c81c:	68bb      	ldr	r3, [r7, #8]
 801c81e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 801c822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c826:	1acb      	subs	r3, r1, r3
        if( trust_ca->max_pathlen > 0 &&
 801c828:	429a      	cmp	r2, r3
 801c82a:	db3d      	blt.n	801c8a8 <x509_crt_verify_top+0x1ac>
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	f893 4129 	ldrb.w	r4, [r3, #297]	; 0x129
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
 801c838:	68bb      	ldr	r3, [r7, #8]
 801c83a:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	f893 8128 	ldrb.w	r8, [r3, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 801c844:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c846:	f7f2 f8d3 	bl	800e9f0 <mbedtls_md_get_size>
 801c84a:	4603      	mov	r3, r0
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 801c84c:	4619      	mov	r1, r3
                           child->sig.p, child->sig.len ) != 0 )
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 801c854:	68fa      	ldr	r2, [r7, #12]
 801c856:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 801c85a:	9203      	str	r2, [sp, #12]
 801c85c:	9302      	str	r3, [sp, #8]
 801c85e:	9101      	str	r1, [sp, #4]
 801c860:	f107 0314 	add.w	r3, r7, #20
 801c864:	9300      	str	r3, [sp, #0]
 801c866:	4643      	mov	r3, r8
 801c868:	4632      	mov	r2, r6
 801c86a:	4629      	mov	r1, r5
 801c86c:	4620      	mov	r0, r4
 801c86e:	f7f2 fd3b 	bl	800f2e8 <mbedtls_pk_verify_ext>
 801c872:	4603      	mov	r3, r0
 801c874:	2b00      	cmp	r3, #0
 801c876:	d119      	bne.n	801c8ac <x509_crt_verify_top+0x1b0>
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 801c878:	68bb      	ldr	r3, [r7, #8]
 801c87a:	33a4      	adds	r3, #164	; 0xa4
 801c87c:	4618      	mov	r0, r3
 801c87e:	f7fe f823 	bl	801a8c8 <mbedtls_x509_time_is_past>
 801c882:	4603      	mov	r3, r0
 801c884:	2b00      	cmp	r3, #0
 801c886:	d107      	bne.n	801c898 <x509_crt_verify_top+0x19c>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 801c888:	68bb      	ldr	r3, [r7, #8]
 801c88a:	338c      	adds	r3, #140	; 0x8c
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7fe f826 	bl	801a8de <mbedtls_x509_time_is_future>
 801c892:	4603      	mov	r3, r0
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 801c894:	2b00      	cmp	r3, #0
 801c896:	d014      	beq.n	801c8c2 <x509_crt_verify_top+0x1c6>
        {
            if ( future_past_ca == NULL )
 801c898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d108      	bne.n	801c8b0 <x509_crt_verify_top+0x1b4>
                future_past_ca = trust_ca;
 801c89e:	68bb      	ldr	r3, [r7, #8]
 801c8a0:	643b      	str	r3, [r7, #64]	; 0x40

            continue;
 801c8a2:	e005      	b.n	801c8b0 <x509_crt_verify_top+0x1b4>
            continue;
 801c8a4:	bf00      	nop
 801c8a6:	e004      	b.n	801c8b2 <x509_crt_verify_top+0x1b6>
            continue;
 801c8a8:	bf00      	nop
 801c8aa:	e002      	b.n	801c8b2 <x509_crt_verify_top+0x1b6>
            continue;
 801c8ac:	bf00      	nop
 801c8ae:	e000      	b.n	801c8b2 <x509_crt_verify_top+0x1b6>
            continue;
 801c8b0:	bf00      	nop
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 801c8b2:	68bb      	ldr	r3, [r7, #8]
 801c8b4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c8b8:	60bb      	str	r3, [r7, #8]
 801c8ba:	68bb      	ldr	r3, [r7, #8]
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d182      	bne.n	801c7c6 <x509_crt_verify_top+0xca>
 801c8c0:	e000      	b.n	801c8c4 <x509_crt_verify_top+0x1c8>
        }

        break;
 801c8c2:	bf00      	nop
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 801c8c4:	68bb      	ldr	r3, [r7, #8]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d104      	bne.n	801c8d4 <x509_crt_verify_top+0x1d8>
 801c8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8cc:	60bb      	str	r3, [r7, #8]
 801c8ce:	68bb      	ldr	r3, [r7, #8]
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d017      	beq.n	801c904 <x509_crt_verify_top+0x208>
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801c8d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	f023 0208 	bic.w	r2, r3, #8
 801c8dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c8de:	601a      	str	r2, [r3, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 801c8e6:	68bb      	ldr	r3, [r7, #8]
 801c8e8:	33bc      	adds	r3, #188	; 0xbc
 801c8ea:	461a      	mov	r2, r3
 801c8ec:	6838      	ldr	r0, [r7, #0]
 801c8ee:	f7fe f84e 	bl	801a98e <x509_profile_check_key>
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d005      	beq.n	801c904 <x509_crt_verify_top+0x208>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801c8f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801c900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c902:	601a      	str	r2, [r3, #0]
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 801c904:	68bb      	ldr	r3, [r7, #8]
 801c906:	2b00      	cmp	r3, #0
 801c908:	d03a      	beq.n	801c980 <x509_crt_verify_top+0x284>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c90e:	68bb      	ldr	r3, [r7, #8]
 801c910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    if( trust_ca != NULL &&
 801c912:	429a      	cmp	r2, r3
 801c914:	d10b      	bne.n	801c92e <x509_crt_verify_top+0x232>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801c91a:	68bb      	ldr	r3, [r7, #8]
 801c91c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c922:	461a      	mov	r2, r3
 801c924:	f001 fe46 	bl	801e5b4 <memcmp>
 801c928:	4603      	mov	r3, r0
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d028      	beq.n	801c980 <x509_crt_verify_top+0x284>
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 801c92e:	68bb      	ldr	r3, [r7, #8]
 801c930:	33a4      	adds	r3, #164	; 0xa4
 801c932:	4618      	mov	r0, r3
 801c934:	f7fd ffc8 	bl	801a8c8 <mbedtls_x509_time_is_past>
 801c938:	4603      	mov	r3, r0
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d003      	beq.n	801c946 <x509_crt_verify_top+0x24a>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801c93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c940:	f043 0301 	orr.w	r3, r3, #1
 801c944:	637b      	str	r3, [r7, #52]	; 0x34

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 801c946:	68bb      	ldr	r3, [r7, #8]
 801c948:	338c      	adds	r3, #140	; 0x8c
 801c94a:	4618      	mov	r0, r3
 801c94c:	f7fd ffc7 	bl	801a8de <mbedtls_x509_time_is_future>
 801c950:	4603      	mov	r3, r0
 801c952:	2b00      	cmp	r3, #0
 801c954:	d003      	beq.n	801c95e <x509_crt_verify_top+0x262>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 801c956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c95c:	637b      	str	r3, [r7, #52]	; 0x34

        if( NULL != f_vrfy )
 801c95e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c960:	2b00      	cmp	r3, #0
 801c962:	d00d      	beq.n	801c980 <x509_crt_verify_top+0x284>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 801c964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c966:	1c5a      	adds	r2, r3, #1
 801c968:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c96c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801c96e:	68b9      	ldr	r1, [r7, #8]
 801c970:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801c972:	47a0      	blx	r4
 801c974:	63b8      	str	r0, [r7, #56]	; 0x38
 801c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d001      	beq.n	801c980 <x509_crt_verify_top+0x284>
                                &ca_flags ) ) != 0 )
            {
                return( ret );
 801c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c97e:	e015      	b.n	801c9ac <x509_crt_verify_top+0x2b0>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 801c980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c982:	2b00      	cmp	r3, #0
 801c984:	d00b      	beq.n	801c99e <x509_crt_verify_top+0x2a2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 801c986:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801c988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c98a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c98c:	68f9      	ldr	r1, [r7, #12]
 801c98e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801c990:	47a0      	blx	r4
 801c992:	63b8      	str	r0, [r7, #56]	; 0x38
 801c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c996:	2b00      	cmp	r3, #0
 801c998:	d001      	beq.n	801c99e <x509_crt_verify_top+0x2a2>
            return( ret );
 801c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c99c:	e006      	b.n	801c9ac <x509_crt_verify_top+0x2b0>
    }

    *flags |= ca_flags;
 801c99e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c9a0:	681a      	ldr	r2, [r3, #0]
 801c9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9a4:	431a      	orrs	r2, r3
 801c9a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c9a8:	601a      	str	r2, [r3, #0]

    return( 0 );
 801c9aa:	2300      	movs	r3, #0
}
 801c9ac:	4618      	mov	r0, r3
 801c9ae:	3748      	adds	r7, #72	; 0x48
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801c9b8 <x509_crt_verify_child>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 801c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9bc:	b096      	sub	sp, #88	; 0x58
 801c9be:	af06      	add	r7, sp, #24
 801c9c0:	60f8      	str	r0, [r7, #12]
 801c9c2:	60b9      	str	r1, [r7, #8]
 801c9c4:	607a      	str	r2, [r7, #4]
 801c9c6:	603b      	str	r3, [r7, #0]
    int ret;
    uint32_t parent_flags = 0;
 801c9c8:	2300      	movs	r3, #0
 801c9ca:	633b      	str	r3, [r7, #48]	; 0x30
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 801c9cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d00e      	beq.n	801c9f0 <x509_crt_verify_child+0x38>
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	336c      	adds	r3, #108	; 0x6c
 801c9dc:	4619      	mov	r1, r3
 801c9de:	4610      	mov	r0, r2
 801c9e0:	f7ff fdee 	bl	801c5c0 <x509_name_cmp>
 801c9e4:	4603      	mov	r3, r0
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d102      	bne.n	801c9f0 <x509_crt_verify_child+0x38>
        self_cnt++;
 801c9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c9ec:	3301      	adds	r3, #1
 801c9ee:	663b      	str	r3, [r7, #96]	; 0x60

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 801c9f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c9f2:	2b07      	cmp	r3, #7
 801c9f4:	dd01      	ble.n	801c9fa <x509_crt_verify_child+0x42>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 801c9f6:	4b96      	ldr	r3, [pc, #600]	; (801cc50 <x509_crt_verify_child+0x298>)
 801c9f8:	e142      	b.n	801cc80 <x509_crt_verify_child+0x2c8>
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	33a4      	adds	r3, #164	; 0xa4
 801c9fe:	4618      	mov	r0, r3
 801ca00:	f7fd ff62 	bl	801a8c8 <mbedtls_x509_time_is_past>
 801ca04:	4603      	mov	r3, r0
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d005      	beq.n	801ca16 <x509_crt_verify_child+0x5e>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801ca0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	f043 0201 	orr.w	r2, r3, #1
 801ca12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca14:	601a      	str	r2, [r3, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	338c      	adds	r3, #140	; 0x8c
 801ca1a:	4618      	mov	r0, r3
 801ca1c:	f7fd ff5f 	bl	801a8de <mbedtls_x509_time_is_future>
 801ca20:	4603      	mov	r3, r0
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d005      	beq.n	801ca32 <x509_crt_verify_child+0x7a>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 801ca26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801ca2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca30:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801ca38:	4619      	mov	r1, r3
 801ca3a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ca3c:	f7fd ff73 	bl	801a926 <x509_profile_check_md_alg>
 801ca40:	4603      	mov	r3, r0
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d005      	beq.n	801ca52 <x509_crt_verify_child+0x9a>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 801ca46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801ca4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca50:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 801ca52:	68fb      	ldr	r3, [r7, #12]
 801ca54:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801ca58:	4619      	mov	r1, r3
 801ca5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ca5c:	f7fd ff7d 	bl	801a95a <x509_profile_check_pk_alg>
 801ca60:	4603      	mov	r3, r0
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d005      	beq.n	801ca72 <x509_crt_verify_child+0xba>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 801ca66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801ca6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca70:	601a      	str	r2, [r3, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 801ca72:	68fb      	ldr	r3, [r7, #12]
 801ca74:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801ca78:	4618      	mov	r0, r3
 801ca7a:	f7f1 fd7b 	bl	800e574 <mbedtls_md_info_from_type>
 801ca7e:	63b8      	str	r0, [r7, #56]	; 0x38
    if( md_info == NULL )
 801ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d106      	bne.n	801ca94 <x509_crt_verify_child+0xdc>
    {
        /*
         * Cannot check 'unknown' hash
         */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801ca86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	f043 0208 	orr.w	r2, r3, #8
 801ca8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca90:	601a      	str	r2, [r3, #0]
 801ca92:	e046      	b.n	801cb22 <x509_crt_verify_child+0x16a>
    }
    else
    {
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	6959      	ldr	r1, [r3, #20]
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	691a      	ldr	r2, [r3, #16]
 801ca9c:	f107 0310 	add.w	r3, r7, #16
 801caa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801caa2:	f7f1 fe01 	bl	800e6a8 <mbedtls_md>

        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 801caa6:	68fb      	ldr	r3, [r7, #12]
 801caa8:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 801caac:	68bb      	ldr	r3, [r7, #8]
 801caae:	33bc      	adds	r3, #188	; 0xbc
 801cab0:	461a      	mov	r2, r3
 801cab2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801cab4:	f7fd ff6b 	bl	801a98e <x509_profile_check_key>
 801cab8:	4603      	mov	r3, r0
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d005      	beq.n	801caca <x509_crt_verify_child+0x112>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801cabe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801cac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cac8:	601a      	str	r2, [r3, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	f893 4129 	ldrb.w	r4, [r3, #297]	; 0x129
 801cad0:	68fb      	ldr	r3, [r7, #12]
 801cad2:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
 801cad6:	68bb      	ldr	r3, [r7, #8]
 801cad8:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	f893 8128 	ldrb.w	r8, [r3, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 801cae2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cae4:	f7f1 ff84 	bl	800e9f0 <mbedtls_md_get_size>
 801cae8:	4603      	mov	r3, r0
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801caea:	4619      	mov	r1, r3
                           child->sig.p, child->sig.len ) != 0 )
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801caf2:	68fa      	ldr	r2, [r7, #12]
 801caf4:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 801caf8:	9203      	str	r2, [sp, #12]
 801cafa:	9302      	str	r3, [sp, #8]
 801cafc:	9101      	str	r1, [sp, #4]
 801cafe:	f107 0310 	add.w	r3, r7, #16
 801cb02:	9300      	str	r3, [sp, #0]
 801cb04:	4643      	mov	r3, r8
 801cb06:	4632      	mov	r2, r6
 801cb08:	4629      	mov	r1, r5
 801cb0a:	4620      	mov	r0, r4
 801cb0c:	f7f2 fbec 	bl	800f2e8 <mbedtls_pk_verify_ext>
 801cb10:	4603      	mov	r3, r0
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d005      	beq.n	801cb22 <x509_crt_verify_child+0x16a>
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801cb16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	f043 0208 	orr.w	r2, r3, #8
 801cb1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cb20:	601a      	str	r2, [r3, #0]
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cb26:	e011      	b.n	801cb4c <x509_crt_verify_child+0x194>
         grandparent != NULL;
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 801cb28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	bf0c      	ite	eq
 801cb2e:	2301      	moveq	r3, #1
 801cb30:	2300      	movne	r3, #0
 801cb32:	b2db      	uxtb	r3, r3
 801cb34:	2200      	movs	r2, #0
 801cb36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cb38:	68b8      	ldr	r0, [r7, #8]
 801cb3a:	f7ff fd94 	bl	801c666 <x509_crt_check_parent>
 801cb3e:	4603      	mov	r3, r0
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d007      	beq.n	801cb54 <x509_crt_verify_child+0x19c>
         grandparent = grandparent->next )
 801cb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb46:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    for( grandparent = trust_ca;
 801cb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d1ea      	bne.n	801cb28 <x509_crt_verify_child+0x170>
 801cb52:	e000      	b.n	801cb56 <x509_crt_verify_child+0x19e>
                                   0, path_cnt == 0 ) == 0 )
            break;
 801cb54:	bf00      	nop
    }

    if( grandparent != NULL )
 801cb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d017      	beq.n	801cb8c <x509_crt_verify_child+0x1d4>
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 801cb5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cb5e:	3301      	adds	r3, #1
 801cb60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cb62:	9204      	str	r2, [sp, #16]
 801cb64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cb66:	9203      	str	r2, [sp, #12]
 801cb68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801cb6c:	9202      	str	r2, [sp, #8]
 801cb6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cb70:	9201      	str	r2, [sp, #4]
 801cb72:	9300      	str	r3, [sp, #0]
 801cb74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cb76:	683a      	ldr	r2, [r7, #0]
 801cb78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cb7a:	68b8      	ldr	r0, [r7, #8]
 801cb7c:	f7ff fdbe 	bl	801c6fc <x509_crt_verify_top>
 801cb80:	6378      	str	r0, [r7, #52]	; 0x34
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
        if( ret != 0 )
 801cb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d065      	beq.n	801cc54 <x509_crt_verify_child+0x29c>
            return( ret );
 801cb88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb8a:	e079      	b.n	801cc80 <x509_crt_verify_child+0x2c8>
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 801cb8c:	68bb      	ldr	r3, [r7, #8]
 801cb8e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801cb92:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cb94:	e021      	b.n	801cbda <x509_crt_verify_child+0x222>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 801cb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb98:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	dd08      	ble.n	801cbb2 <x509_crt_verify_child+0x1fa>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 801cba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cba2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 801cba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cba8:	1c99      	adds	r1, r3, #2
 801cbaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cbac:	1acb      	subs	r3, r1, r3
            if( grandparent->max_pathlen > 0 &&
 801cbae:	429a      	cmp	r2, r3
 801cbb0:	db0e      	blt.n	801cbd0 <x509_crt_verify_child+0x218>
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 801cbb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	bf0c      	ite	eq
 801cbb8:	2301      	moveq	r3, #1
 801cbba:	2300      	movne	r3, #0
 801cbbc:	b2db      	uxtb	r3, r3
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cbc2:	68b8      	ldr	r0, [r7, #8]
 801cbc4:	f7ff fd4f 	bl	801c666 <x509_crt_check_parent>
 801cbc8:	4603      	mov	r3, r0
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d009      	beq.n	801cbe2 <x509_crt_verify_child+0x22a>
 801cbce:	e000      	b.n	801cbd2 <x509_crt_verify_child+0x21a>
                continue;
 801cbd0:	bf00      	nop
             grandparent = grandparent->next )
 801cbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbd4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801cbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( grandparent = parent->next;
 801cbda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d1da      	bne.n	801cb96 <x509_crt_verify_child+0x1de>
 801cbe0:	e000      	b.n	801cbe4 <x509_crt_verify_child+0x22c>
                                       0, path_cnt == 0 ) == 0 )
                break;
 801cbe2:	bf00      	nop
        }

        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
 801cbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d019      	beq.n	801cc1e <x509_crt_verify_child+0x266>
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
 801cbea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cbec:	3301      	adds	r3, #1
 801cbee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cbf0:	9205      	str	r2, [sp, #20]
 801cbf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cbf4:	9204      	str	r2, [sp, #16]
 801cbf6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801cbfa:	9203      	str	r2, [sp, #12]
 801cbfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cbfe:	9202      	str	r2, [sp, #8]
 801cc00:	9301      	str	r3, [sp, #4]
 801cc02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cc04:	9300      	str	r3, [sp, #0]
 801cc06:	683b      	ldr	r3, [r7, #0]
 801cc08:	687a      	ldr	r2, [r7, #4]
 801cc0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cc0c:	68b8      	ldr	r0, [r7, #8]
 801cc0e:	f7ff fed3 	bl	801c9b8 <x509_crt_verify_child>
 801cc12:	6378      	str	r0, [r7, #52]	; 0x34
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
            if( ret != 0 )
 801cc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d01c      	beq.n	801cc54 <x509_crt_verify_child+0x29c>
                return( ret );
 801cc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc1c:	e030      	b.n	801cc80 <x509_crt_verify_child+0x2c8>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 801cc1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cc20:	3301      	adds	r3, #1
 801cc22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cc24:	9204      	str	r2, [sp, #16]
 801cc26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cc28:	9203      	str	r2, [sp, #12]
 801cc2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801cc2e:	9202      	str	r2, [sp, #8]
 801cc30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cc32:	9201      	str	r2, [sp, #4]
 801cc34:	9300      	str	r3, [sp, #0]
 801cc36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cc38:	683a      	ldr	r2, [r7, #0]
 801cc3a:	6879      	ldr	r1, [r7, #4]
 801cc3c:	68b8      	ldr	r0, [r7, #8]
 801cc3e:	f7ff fd5d 	bl	801c6fc <x509_crt_verify_top>
 801cc42:	6378      	str	r0, [r7, #52]	; 0x34
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
            if( ret != 0 )
 801cc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d004      	beq.n	801cc54 <x509_crt_verify_child+0x29c>
                return( ret );
 801cc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc4c:	e018      	b.n	801cc80 <x509_crt_verify_child+0x2c8>
 801cc4e:	bf00      	nop
 801cc50:	ffffd000 	.word	0xffffd000
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 801cc54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d00b      	beq.n	801cc72 <x509_crt_verify_child+0x2ba>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 801cc5a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801cc5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cc5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801cc60:	68f9      	ldr	r1, [r7, #12]
 801cc62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801cc64:	47a0      	blx	r4
 801cc66:	6378      	str	r0, [r7, #52]	; 0x34
 801cc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d001      	beq.n	801cc72 <x509_crt_verify_child+0x2ba>
            return( ret );
 801cc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc70:	e006      	b.n	801cc80 <x509_crt_verify_child+0x2c8>

    *flags |= parent_flags;
 801cc72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cc74:	681a      	ldr	r2, [r3, #0]
 801cc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc78:	431a      	orrs	r2, r3
 801cc7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cc7c:	601a      	str	r2, [r3, #0]

    return( 0 );
 801cc7e:	2300      	movs	r3, #0
}
 801cc80:	4618      	mov	r0, r3
 801cc82:	3740      	adds	r7, #64	; 0x40
 801cc84:	46bd      	mov	sp, r7
 801cc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc8a:	bf00      	nop

0801cc8c <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 801cc8c:	b580      	push	{r7, lr}
 801cc8e:	b092      	sub	sp, #72	; 0x48
 801cc90:	af06      	add	r7, sp, #24
 801cc92:	60f8      	str	r0, [r7, #12]
 801cc94:	60b9      	str	r1, [r7, #8]
 801cc96:	607a      	str	r2, [r7, #4]
 801cc98:	603b      	str	r3, [r7, #0]
    size_t cn_len;
    int ret;
    int pathlen = 0, selfsigned = 0;
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	61fb      	str	r3, [r7, #28]
 801cc9e:	2300      	movs	r3, #0
 801cca0:	61bb      	str	r3, [r7, #24]
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
 801cca2:	2300      	movs	r3, #0
 801cca4:	623b      	str	r3, [r7, #32]
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 801cca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cca8:	2200      	movs	r2, #0
 801ccaa:	601a      	str	r2, [r3, #0]

    if( profile == NULL )
 801ccac:	683b      	ldr	r3, [r7, #0]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d102      	bne.n	801ccb8 <mbedtls_x509_crt_verify_with_profile+0x2c>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 801ccb2:	4b95      	ldr	r3, [pc, #596]	; (801cf08 <mbedtls_x509_crt_verify_with_profile+0x27c>)
 801ccb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
 801ccb6:	e141      	b.n	801cf3c <mbedtls_x509_crt_verify_with_profile+0x2b0>
    }

    if( cn != NULL )
 801ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	f000 8098 	beq.w	801cdf0 <mbedtls_x509_crt_verify_with_profile+0x164>
    {
        name = &crt->subject;
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	336c      	adds	r3, #108	; 0x6c
 801ccc4:	627b      	str	r3, [r7, #36]	; 0x24
        cn_len = strlen( cn );
 801ccc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ccc8:	f7e3 fa8c 	bl	80001e4 <strlen>
 801cccc:	6178      	str	r0, [r7, #20]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801ccd4:	f003 0320 	and.w	r3, r3, #32
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d079      	beq.n	801cdd0 <mbedtls_x509_crt_verify_with_profile+0x144>
        {
            cur = &crt->subject_alt_names;
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	33e8      	adds	r3, #232	; 0xe8
 801cce0:	623b      	str	r3, [r7, #32]

            while( cur != NULL )
 801cce2:	e027      	b.n	801cd34 <mbedtls_x509_crt_verify_with_profile+0xa8>
            {
                if( cur->buf.len == cn_len &&
 801cce4:	6a3b      	ldr	r3, [r7, #32]
 801cce6:	685b      	ldr	r3, [r3, #4]
 801cce8:	697a      	ldr	r2, [r7, #20]
 801ccea:	429a      	cmp	r2, r3
 801ccec:	d109      	bne.n	801cd02 <mbedtls_x509_crt_verify_with_profile+0x76>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 801ccee:	6a3b      	ldr	r3, [r7, #32]
 801ccf0:	689b      	ldr	r3, [r3, #8]
 801ccf2:	697a      	ldr	r2, [r7, #20]
 801ccf4:	4619      	mov	r1, r3
 801ccf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ccf8:	f7ff fb7c 	bl	801c3f4 <x509_memcasecmp>
 801ccfc:	4603      	mov	r3, r0
                if( cur->buf.len == cn_len &&
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d01c      	beq.n	801cd3c <mbedtls_x509_crt_verify_with_profile+0xb0>
                    break;

                if( cur->buf.len > 2 &&
 801cd02:	6a3b      	ldr	r3, [r7, #32]
 801cd04:	685b      	ldr	r3, [r3, #4]
 801cd06:	2b02      	cmp	r3, #2
 801cd08:	d911      	bls.n	801cd2e <mbedtls_x509_crt_verify_with_profile+0xa2>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 801cd0a:	6a3b      	ldr	r3, [r7, #32]
 801cd0c:	689b      	ldr	r3, [r3, #8]
 801cd0e:	2202      	movs	r2, #2
 801cd10:	497e      	ldr	r1, [pc, #504]	; (801cf0c <mbedtls_x509_crt_verify_with_profile+0x280>)
 801cd12:	4618      	mov	r0, r3
 801cd14:	f001 fc4e 	bl	801e5b4 <memcmp>
 801cd18:	4603      	mov	r3, r0
                if( cur->buf.len > 2 &&
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d107      	bne.n	801cd2e <mbedtls_x509_crt_verify_with_profile+0xa2>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 801cd1e:	6a3b      	ldr	r3, [r7, #32]
 801cd20:	4619      	mov	r1, r3
 801cd22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cd24:	f7ff fbaf 	bl	801c486 <x509_check_wildcard>
 801cd28:	4603      	mov	r3, r0
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d008      	beq.n	801cd40 <mbedtls_x509_crt_verify_with_profile+0xb4>
                {
                    break;
                }

                cur = cur->next;
 801cd2e:	6a3b      	ldr	r3, [r7, #32]
 801cd30:	68db      	ldr	r3, [r3, #12]
 801cd32:	623b      	str	r3, [r7, #32]
            while( cur != NULL )
 801cd34:	6a3b      	ldr	r3, [r7, #32]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d1d4      	bne.n	801cce4 <mbedtls_x509_crt_verify_with_profile+0x58>
 801cd3a:	e002      	b.n	801cd42 <mbedtls_x509_crt_verify_with_profile+0xb6>
                    break;
 801cd3c:	bf00      	nop
 801cd3e:	e000      	b.n	801cd42 <mbedtls_x509_crt_verify_with_profile+0xb6>
                    break;
 801cd40:	bf00      	nop
            }

            if( cur == NULL )
 801cd42:	6a3b      	ldr	r3, [r7, #32]
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d153      	bne.n	801cdf0 <mbedtls_x509_crt_verify_with_profile+0x164>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 801cd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	f043 0204 	orr.w	r2, r3, #4
 801cd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd52:	601a      	str	r2, [r3, #0]
 801cd54:	e04c      	b.n	801cdf0 <mbedtls_x509_crt_verify_with_profile+0x164>
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 801cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd58:	685b      	ldr	r3, [r3, #4]
 801cd5a:	2b03      	cmp	r3, #3
 801cd5c:	d10a      	bne.n	801cd74 <mbedtls_x509_crt_verify_with_profile+0xe8>
 801cd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd60:	6899      	ldr	r1, [r3, #8]
 801cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd64:	685b      	ldr	r3, [r3, #4]
 801cd66:	461a      	mov	r2, r3
 801cd68:	4869      	ldr	r0, [pc, #420]	; (801cf10 <mbedtls_x509_crt_verify_with_profile+0x284>)
 801cd6a:	f001 fc23 	bl	801e5b4 <memcmp>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d001      	beq.n	801cd78 <mbedtls_x509_crt_verify_with_profile+0xec>
 801cd74:	2301      	movs	r3, #1
 801cd76:	e000      	b.n	801cd7a <mbedtls_x509_crt_verify_with_profile+0xee>
 801cd78:	2300      	movs	r3, #0
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d125      	bne.n	801cdca <mbedtls_x509_crt_verify_with_profile+0x13e>
                {
                    if( name->val.len == cn_len &&
 801cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd80:	691b      	ldr	r3, [r3, #16]
 801cd82:	697a      	ldr	r2, [r7, #20]
 801cd84:	429a      	cmp	r2, r3
 801cd86:	d109      	bne.n	801cd9c <mbedtls_x509_crt_verify_with_profile+0x110>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 801cd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd8a:	695b      	ldr	r3, [r3, #20]
 801cd8c:	697a      	ldr	r2, [r7, #20]
 801cd8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cd90:	4618      	mov	r0, r3
 801cd92:	f7ff fb2f 	bl	801c3f4 <x509_memcasecmp>
 801cd96:	4603      	mov	r3, r0
                    if( name->val.len == cn_len &&
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d01d      	beq.n	801cdd8 <mbedtls_x509_crt_verify_with_profile+0x14c>
                        break;

                    if( name->val.len > 2 &&
 801cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd9e:	691b      	ldr	r3, [r3, #16]
 801cda0:	2b02      	cmp	r3, #2
 801cda2:	d912      	bls.n	801cdca <mbedtls_x509_crt_verify_with_profile+0x13e>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 801cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cda6:	695b      	ldr	r3, [r3, #20]
 801cda8:	2202      	movs	r2, #2
 801cdaa:	4958      	ldr	r1, [pc, #352]	; (801cf0c <mbedtls_x509_crt_verify_with_profile+0x280>)
 801cdac:	4618      	mov	r0, r3
 801cdae:	f001 fc01 	bl	801e5b4 <memcmp>
 801cdb2:	4603      	mov	r3, r0
                    if( name->val.len > 2 &&
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d108      	bne.n	801cdca <mbedtls_x509_crt_verify_with_profile+0x13e>
                        x509_check_wildcard( cn, &name->val ) == 0 )
 801cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdba:	330c      	adds	r3, #12
 801cdbc:	4619      	mov	r1, r3
 801cdbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cdc0:	f7ff fb61 	bl	801c486 <x509_check_wildcard>
 801cdc4:	4603      	mov	r3, r0
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d008      	beq.n	801cddc <mbedtls_x509_crt_verify_with_profile+0x150>
                        break;
                }

                name = name->next;
 801cdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdcc:	699b      	ldr	r3, [r3, #24]
 801cdce:	627b      	str	r3, [r7, #36]	; 0x24
            while( name != NULL )
 801cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d1bf      	bne.n	801cd56 <mbedtls_x509_crt_verify_with_profile+0xca>
 801cdd6:	e002      	b.n	801cdde <mbedtls_x509_crt_verify_with_profile+0x152>
                        break;
 801cdd8:	bf00      	nop
 801cdda:	e000      	b.n	801cdde <mbedtls_x509_crt_verify_with_profile+0x152>
                        break;
 801cddc:	bf00      	nop
            }

            if( name == NULL )
 801cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d105      	bne.n	801cdf0 <mbedtls_x509_crt_verify_with_profile+0x164>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 801cde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	f043 0204 	orr.w	r2, r3, #4
 801cdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdee:	601a      	str	r2, [r3, #0]
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	33bc      	adds	r3, #188	; 0xbc
 801cdf4:	4618      	mov	r0, r3
 801cdf6:	f7f2 fb79 	bl	800f4ec <mbedtls_pk_get_type>
 801cdfa:	4603      	mov	r3, r0
 801cdfc:	74fb      	strb	r3, [r7, #19]

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
 801cdfe:	7cfb      	ldrb	r3, [r7, #19]
 801ce00:	4619      	mov	r1, r3
 801ce02:	6838      	ldr	r0, [r7, #0]
 801ce04:	f7fd fda9 	bl	801a95a <x509_profile_check_pk_alg>
 801ce08:	4603      	mov	r3, r0
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d005      	beq.n	801ce1a <mbedtls_x509_crt_verify_with_profile+0x18e>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 801ce0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801ce16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce18:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 801ce20:	7cfb      	ldrb	r3, [r7, #19]
 801ce22:	4619      	mov	r1, r3
 801ce24:	6838      	ldr	r0, [r7, #0]
 801ce26:	f7fd fdb2 	bl	801a98e <x509_profile_check_key>
 801ce2a:	4603      	mov	r3, r0
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d005      	beq.n	801ce3c <mbedtls_x509_crt_verify_with_profile+0x1b0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801ce30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801ce38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce3a:	601a      	str	r2, [r3, #0]

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 801ce3c:	68bb      	ldr	r3, [r7, #8]
 801ce3e:	62bb      	str	r3, [r7, #40]	; 0x28
 801ce40:	e011      	b.n	801ce66 <mbedtls_x509_crt_verify_with_profile+0x1da>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 801ce42:	69fb      	ldr	r3, [r7, #28]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	bf0c      	ite	eq
 801ce48:	2301      	moveq	r3, #1
 801ce4a:	2300      	movne	r3, #0
 801ce4c:	b2db      	uxtb	r3, r3
 801ce4e:	2200      	movs	r2, #0
 801ce50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ce52:	68f8      	ldr	r0, [r7, #12]
 801ce54:	f7ff fc07 	bl	801c666 <x509_crt_check_parent>
 801ce58:	4603      	mov	r3, r0
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d007      	beq.n	801ce6e <mbedtls_x509_crt_verify_with_profile+0x1e2>
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 801ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce60:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801ce64:	62bb      	str	r3, [r7, #40]	; 0x28
 801ce66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d1ea      	bne.n	801ce42 <mbedtls_x509_crt_verify_with_profile+0x1b6>
 801ce6c:	e000      	b.n	801ce70 <mbedtls_x509_crt_verify_with_profile+0x1e4>
            break;
 801ce6e:	bf00      	nop
    }

    if( parent != NULL )
 801ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d013      	beq.n	801ce9e <mbedtls_x509_crt_verify_with_profile+0x212>
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 801ce76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce78:	9304      	str	r3, [sp, #16]
 801ce7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ce7c:	9303      	str	r3, [sp, #12]
 801ce7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce80:	9302      	str	r3, [sp, #8]
 801ce82:	69bb      	ldr	r3, [r7, #24]
 801ce84:	9301      	str	r3, [sp, #4]
 801ce86:	69fb      	ldr	r3, [r7, #28]
 801ce88:	9300      	str	r3, [sp, #0]
 801ce8a:	683b      	ldr	r3, [r7, #0]
 801ce8c:	687a      	ldr	r2, [r7, #4]
 801ce8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ce90:	68f8      	ldr	r0, [r7, #12]
 801ce92:	f7ff fc33 	bl	801c6fc <x509_crt_verify_top>
 801ce96:	62f8      	str	r0, [r7, #44]	; 0x2c
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
        if( ret != 0 )
 801ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	e04e      	b.n	801cf3c <mbedtls_x509_crt_verify_with_profile+0x2b0>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801cea4:	62bb      	str	r3, [r7, #40]	; 0x28
 801cea6:	e011      	b.n	801cecc <mbedtls_x509_crt_verify_with_profile+0x240>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 801cea8:	69fb      	ldr	r3, [r7, #28]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	bf0c      	ite	eq
 801ceae:	2301      	moveq	r3, #1
 801ceb0:	2300      	movne	r3, #0
 801ceb2:	b2db      	uxtb	r3, r3
 801ceb4:	2200      	movs	r2, #0
 801ceb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ceb8:	68f8      	ldr	r0, [r7, #12]
 801ceba:	f7ff fbd4 	bl	801c666 <x509_crt_check_parent>
 801cebe:	4603      	mov	r3, r0
 801cec0:	2b00      	cmp	r3, #0
 801cec2:	d007      	beq.n	801ced4 <mbedtls_x509_crt_verify_with_profile+0x248>
        for( parent = crt->next; parent != NULL; parent = parent->next )
 801cec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cec6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801ceca:	62bb      	str	r3, [r7, #40]	; 0x28
 801cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d1ea      	bne.n	801cea8 <mbedtls_x509_crt_verify_with_profile+0x21c>
 801ced2:	e000      	b.n	801ced6 <mbedtls_x509_crt_verify_with_profile+0x24a>
                break;
 801ced4:	bf00      	nop

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
 801ced6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d01b      	beq.n	801cf14 <mbedtls_x509_crt_verify_with_profile+0x288>
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
 801cedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cede:	9305      	str	r3, [sp, #20]
 801cee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cee2:	9304      	str	r3, [sp, #16]
 801cee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cee6:	9303      	str	r3, [sp, #12]
 801cee8:	69bb      	ldr	r3, [r7, #24]
 801ceea:	9302      	str	r3, [sp, #8]
 801ceec:	69fb      	ldr	r3, [r7, #28]
 801ceee:	9301      	str	r3, [sp, #4]
 801cef0:	683b      	ldr	r3, [r7, #0]
 801cef2:	9300      	str	r3, [sp, #0]
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	68ba      	ldr	r2, [r7, #8]
 801cef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cefa:	68f8      	ldr	r0, [r7, #12]
 801cefc:	f7ff fd5c 	bl	801c9b8 <x509_crt_verify_child>
 801cf00:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
            if( ret != 0 )
 801cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	e019      	b.n	801cf3c <mbedtls_x509_crt_verify_with_profile+0x2b0>
 801cf08:	ffffd800 	.word	0xffffd800
 801cf0c:	08024d0c 	.word	0x08024d0c
 801cf10:	08024d10 	.word	0x08024d10
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 801cf14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf16:	9304      	str	r3, [sp, #16]
 801cf18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cf1a:	9303      	str	r3, [sp, #12]
 801cf1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf1e:	9302      	str	r3, [sp, #8]
 801cf20:	69bb      	ldr	r3, [r7, #24]
 801cf22:	9301      	str	r3, [sp, #4]
 801cf24:	69fb      	ldr	r3, [r7, #28]
 801cf26:	9300      	str	r3, [sp, #0]
 801cf28:	683b      	ldr	r3, [r7, #0]
 801cf2a:	687a      	ldr	r2, [r7, #4]
 801cf2c:	68b9      	ldr	r1, [r7, #8]
 801cf2e:	68f8      	ldr	r0, [r7, #12]
 801cf30:	f7ff fbe4 	bl	801c6fc <x509_crt_verify_top>
 801cf34:	62f8      	str	r0, [r7, #44]	; 0x2c
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
            if( ret != 0 )
 801cf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf38:	2b00      	cmp	r3, #0
                goto exit;
        }
    }

exit:
 801cf3a:	bf00      	nop
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 801cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf3e:	f513 5f1c 	cmn.w	r3, #9984	; 0x2700
 801cf42:	d101      	bne.n	801cf48 <mbedtls_x509_crt_verify_with_profile+0x2bc>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 801cf44:	4b0a      	ldr	r3, [pc, #40]	; (801cf70 <mbedtls_x509_crt_verify_with_profile+0x2e4>)
 801cf46:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ret != 0 )
 801cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d005      	beq.n	801cf5a <mbedtls_x509_crt_verify_with_profile+0x2ce>
    {
        *flags = (uint32_t) -1;
 801cf4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf50:	f04f 32ff 	mov.w	r2, #4294967295
 801cf54:	601a      	str	r2, [r3, #0]
        return( ret );
 801cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf58:	e006      	b.n	801cf68 <mbedtls_x509_crt_verify_with_profile+0x2dc>
    }

    if( *flags != 0 )
 801cf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf5c:	681b      	ldr	r3, [r3, #0]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d001      	beq.n	801cf66 <mbedtls_x509_crt_verify_with_profile+0x2da>
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 801cf62:	4b04      	ldr	r3, [pc, #16]	; (801cf74 <mbedtls_x509_crt_verify_with_profile+0x2e8>)
 801cf64:	e000      	b.n	801cf68 <mbedtls_x509_crt_verify_with_profile+0x2dc>

    return( 0 );
 801cf66:	2300      	movs	r3, #0
}
 801cf68:	4618      	mov	r0, r3
 801cf6a:	3730      	adds	r7, #48	; 0x30
 801cf6c:	46bd      	mov	sp, r7
 801cf6e:	bd80      	pop	{r7, pc}
 801cf70:	ffffd000 	.word	0xffffd000
 801cf74:	ffffd900 	.word	0xffffd900

0801cf78 <mbedtls_x509_crt_init>:

/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
 801cf78:	b580      	push	{r7, lr}
 801cf7a:	b082      	sub	sp, #8
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	6078      	str	r0, [r7, #4]
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 801cf80:	f44f 729a 	mov.w	r2, #308	; 0x134
 801cf84:	2100      	movs	r1, #0
 801cf86:	6878      	ldr	r0, [r7, #4]
 801cf88:	f001 fb4c 	bl	801e624 <memset>
}
 801cf8c:	bf00      	nop
 801cf8e:	3708      	adds	r7, #8
 801cf90:	46bd      	mov	sp, r7
 801cf92:	bd80      	pop	{r7, pc}

0801cf94 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 801cf94:	b580      	push	{r7, lr}
 801cf96:	b088      	sub	sp, #32
 801cf98:	af00      	add	r7, sp, #0
 801cf9a:	6078      	str	r0, [r7, #4]
    mbedtls_x509_crt *cert_cur = crt;
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	61fb      	str	r3, [r7, #28]
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	f000 8084 	beq.w	801d0b0 <mbedtls_x509_crt_free+0x11c>
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 801cfa8:	69fb      	ldr	r3, [r7, #28]
 801cfaa:	33bc      	adds	r3, #188	; 0xbc
 801cfac:	4618      	mov	r0, r3
 801cfae:	f7f2 f8cc 	bl	800f14a <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 801cfb2:	69fb      	ldr	r3, [r7, #28]
 801cfb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cfb6:	61bb      	str	r3, [r7, #24]
        while( name_cur != NULL )
 801cfb8:	e00b      	b.n	801cfd2 <mbedtls_x509_crt_free+0x3e>
        {
            name_prv = name_cur;
 801cfba:	69bb      	ldr	r3, [r7, #24]
 801cfbc:	60bb      	str	r3, [r7, #8]
            name_cur = name_cur->next;
 801cfbe:	69bb      	ldr	r3, [r7, #24]
 801cfc0:	699b      	ldr	r3, [r3, #24]
 801cfc2:	61bb      	str	r3, [r7, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 801cfc4:	2120      	movs	r1, #32
 801cfc6:	68b8      	ldr	r0, [r7, #8]
 801cfc8:	f7fd fc94 	bl	801a8f4 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 801cfcc:	68b8      	ldr	r0, [r7, #8]
 801cfce:	f001 fae9 	bl	801e5a4 <free>
        while( name_cur != NULL )
 801cfd2:	69bb      	ldr	r3, [r7, #24]
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d1f0      	bne.n	801cfba <mbedtls_x509_crt_free+0x26>
        }

        name_cur = cert_cur->subject.next;
 801cfd8:	69fb      	ldr	r3, [r7, #28]
 801cfda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cfde:	61bb      	str	r3, [r7, #24]
        while( name_cur != NULL )
 801cfe0:	e00b      	b.n	801cffa <mbedtls_x509_crt_free+0x66>
        {
            name_prv = name_cur;
 801cfe2:	69bb      	ldr	r3, [r7, #24]
 801cfe4:	60bb      	str	r3, [r7, #8]
            name_cur = name_cur->next;
 801cfe6:	69bb      	ldr	r3, [r7, #24]
 801cfe8:	699b      	ldr	r3, [r3, #24]
 801cfea:	61bb      	str	r3, [r7, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 801cfec:	2120      	movs	r1, #32
 801cfee:	68b8      	ldr	r0, [r7, #8]
 801cff0:	f7fd fc80 	bl	801a8f4 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 801cff4:	68b8      	ldr	r0, [r7, #8]
 801cff6:	f001 fad5 	bl	801e5a4 <free>
        while( name_cur != NULL )
 801cffa:	69bb      	ldr	r3, [r7, #24]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d1f0      	bne.n	801cfe2 <mbedtls_x509_crt_free+0x4e>
        }

        seq_cur = cert_cur->ext_key_usage.next;
 801d000:	69fb      	ldr	r3, [r7, #28]
 801d002:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801d006:	617b      	str	r3, [r7, #20]
        while( seq_cur != NULL )
 801d008:	e00b      	b.n	801d022 <mbedtls_x509_crt_free+0x8e>
        {
            seq_prv = seq_cur;
 801d00a:	697b      	ldr	r3, [r7, #20]
 801d00c:	60fb      	str	r3, [r7, #12]
            seq_cur = seq_cur->next;
 801d00e:	697b      	ldr	r3, [r7, #20]
 801d010:	68db      	ldr	r3, [r3, #12]
 801d012:	617b      	str	r3, [r7, #20]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 801d014:	2110      	movs	r1, #16
 801d016:	68f8      	ldr	r0, [r7, #12]
 801d018:	f7fd fc6c 	bl	801a8f4 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 801d01c:	68f8      	ldr	r0, [r7, #12]
 801d01e:	f001 fac1 	bl	801e5a4 <free>
        while( seq_cur != NULL )
 801d022:	697b      	ldr	r3, [r7, #20]
 801d024:	2b00      	cmp	r3, #0
 801d026:	d1f0      	bne.n	801d00a <mbedtls_x509_crt_free+0x76>
        }

        seq_cur = cert_cur->subject_alt_names.next;
 801d028:	69fb      	ldr	r3, [r7, #28]
 801d02a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801d02e:	617b      	str	r3, [r7, #20]
        while( seq_cur != NULL )
 801d030:	e00b      	b.n	801d04a <mbedtls_x509_crt_free+0xb6>
        {
            seq_prv = seq_cur;
 801d032:	697b      	ldr	r3, [r7, #20]
 801d034:	60fb      	str	r3, [r7, #12]
            seq_cur = seq_cur->next;
 801d036:	697b      	ldr	r3, [r7, #20]
 801d038:	68db      	ldr	r3, [r3, #12]
 801d03a:	617b      	str	r3, [r7, #20]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 801d03c:	2110      	movs	r1, #16
 801d03e:	68f8      	ldr	r0, [r7, #12]
 801d040:	f7fd fc58 	bl	801a8f4 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 801d044:	68f8      	ldr	r0, [r7, #12]
 801d046:	f001 faad 	bl	801e5a4 <free>
        while( seq_cur != NULL )
 801d04a:	697b      	ldr	r3, [r7, #20]
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	d1f0      	bne.n	801d032 <mbedtls_x509_crt_free+0x9e>
        }

        if( cert_cur->raw.p != NULL )
 801d050:	69fb      	ldr	r3, [r7, #28]
 801d052:	689b      	ldr	r3, [r3, #8]
 801d054:	2b00      	cmp	r3, #0
 801d056:	d00c      	beq.n	801d072 <mbedtls_x509_crt_free+0xde>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 801d058:	69fb      	ldr	r3, [r7, #28]
 801d05a:	689a      	ldr	r2, [r3, #8]
 801d05c:	69fb      	ldr	r3, [r7, #28]
 801d05e:	685b      	ldr	r3, [r3, #4]
 801d060:	4619      	mov	r1, r3
 801d062:	4610      	mov	r0, r2
 801d064:	f7fd fc46 	bl	801a8f4 <mbedtls_zeroize>
            mbedtls_free( cert_cur->raw.p );
 801d068:	69fb      	ldr	r3, [r7, #28]
 801d06a:	689b      	ldr	r3, [r3, #8]
 801d06c:	4618      	mov	r0, r3
 801d06e:	f001 fa99 	bl	801e5a4 <free>
        }

        cert_cur = cert_cur->next;
 801d072:	69fb      	ldr	r3, [r7, #28]
 801d074:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801d078:	61fb      	str	r3, [r7, #28]
    }
    while( cert_cur != NULL );
 801d07a:	69fb      	ldr	r3, [r7, #28]
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d193      	bne.n	801cfa8 <mbedtls_x509_crt_free+0x14>

    cert_cur = crt;
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	61fb      	str	r3, [r7, #28]
    do
    {
        cert_prv = cert_cur;
 801d084:	69fb      	ldr	r3, [r7, #28]
 801d086:	613b      	str	r3, [r7, #16]
        cert_cur = cert_cur->next;
 801d088:	69fb      	ldr	r3, [r7, #28]
 801d08a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801d08e:	61fb      	str	r3, [r7, #28]

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 801d090:	f44f 719a 	mov.w	r1, #308	; 0x134
 801d094:	6938      	ldr	r0, [r7, #16]
 801d096:	f7fd fc2d 	bl	801a8f4 <mbedtls_zeroize>
        if( cert_prv != crt )
 801d09a:	693a      	ldr	r2, [r7, #16]
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	429a      	cmp	r2, r3
 801d0a0:	d002      	beq.n	801d0a8 <mbedtls_x509_crt_free+0x114>
            mbedtls_free( cert_prv );
 801d0a2:	6938      	ldr	r0, [r7, #16]
 801d0a4:	f001 fa7e 	bl	801e5a4 <free>
    }
    while( cert_cur != NULL );
 801d0a8:	69fb      	ldr	r3, [r7, #28]
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d1ea      	bne.n	801d084 <mbedtls_x509_crt_free+0xf0>
 801d0ae:	e000      	b.n	801d0b2 <mbedtls_x509_crt_free+0x11e>
        return;
 801d0b0:	bf00      	nop
}
 801d0b2:	3720      	adds	r7, #32
 801d0b4:	46bd      	mov	sp, r7
 801d0b6:	bd80      	pop	{r7, pc}

0801d0b8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 801d0b8:	b580      	push	{r7, lr}
 801d0ba:	b084      	sub	sp, #16
 801d0bc:	af00      	add	r7, sp, #0
 801d0be:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 801d0c0:	4b22      	ldr	r3, [pc, #136]	; (801d14c <WIZCHIP_READ+0x94>)
 801d0c2:	68db      	ldr	r3, [r3, #12]
 801d0c4:	4798      	blx	r3
   WIZCHIP.CS._select();
 801d0c6:	4b21      	ldr	r3, [pc, #132]	; (801d14c <WIZCHIP_READ+0x94>)
 801d0c8:	695b      	ldr	r3, [r3, #20]
 801d0ca:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801d0cc:	4b1f      	ldr	r3, [pc, #124]	; (801d14c <WIZCHIP_READ+0x94>)
 801d0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d003      	beq.n	801d0dc <WIZCHIP_READ+0x24>
 801d0d4:	4b1d      	ldr	r3, [pc, #116]	; (801d14c <WIZCHIP_READ+0x94>)
 801d0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d114      	bne.n	801d106 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801d0dc:	4b1b      	ldr	r3, [pc, #108]	; (801d14c <WIZCHIP_READ+0x94>)
 801d0de:	6a1b      	ldr	r3, [r3, #32]
 801d0e0:	687a      	ldr	r2, [r7, #4]
 801d0e2:	0c12      	lsrs	r2, r2, #16
 801d0e4:	b2d2      	uxtb	r2, r2
 801d0e6:	4610      	mov	r0, r2
 801d0e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801d0ea:	4b18      	ldr	r3, [pc, #96]	; (801d14c <WIZCHIP_READ+0x94>)
 801d0ec:	6a1b      	ldr	r3, [r3, #32]
 801d0ee:	687a      	ldr	r2, [r7, #4]
 801d0f0:	0a12      	lsrs	r2, r2, #8
 801d0f2:	b2d2      	uxtb	r2, r2
 801d0f4:	4610      	mov	r0, r2
 801d0f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801d0f8:	4b14      	ldr	r3, [pc, #80]	; (801d14c <WIZCHIP_READ+0x94>)
 801d0fa:	6a1b      	ldr	r3, [r3, #32]
 801d0fc:	687a      	ldr	r2, [r7, #4]
 801d0fe:	b2d2      	uxtb	r2, r2
 801d100:	4610      	mov	r0, r2
 801d102:	4798      	blx	r3
 801d104:	e011      	b.n	801d12a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	0c1b      	lsrs	r3, r3, #16
 801d10a:	b2db      	uxtb	r3, r3
 801d10c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	0a1b      	lsrs	r3, r3, #8
 801d112:	b2db      	uxtb	r3, r3
 801d114:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	b2db      	uxtb	r3, r3
 801d11a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801d11c:	4b0b      	ldr	r3, [pc, #44]	; (801d14c <WIZCHIP_READ+0x94>)
 801d11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d120:	f107 020c 	add.w	r2, r7, #12
 801d124:	2103      	movs	r1, #3
 801d126:	4610      	mov	r0, r2
 801d128:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 801d12a:	4b08      	ldr	r3, [pc, #32]	; (801d14c <WIZCHIP_READ+0x94>)
 801d12c:	69db      	ldr	r3, [r3, #28]
 801d12e:	4798      	blx	r3
 801d130:	4603      	mov	r3, r0
 801d132:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 801d134:	4b05      	ldr	r3, [pc, #20]	; (801d14c <WIZCHIP_READ+0x94>)
 801d136:	699b      	ldr	r3, [r3, #24]
 801d138:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801d13a:	4b04      	ldr	r3, [pc, #16]	; (801d14c <WIZCHIP_READ+0x94>)
 801d13c:	691b      	ldr	r3, [r3, #16]
 801d13e:	4798      	blx	r3
   return ret;
 801d140:	7bfb      	ldrb	r3, [r7, #15]
}
 801d142:	4618      	mov	r0, r3
 801d144:	3710      	adds	r7, #16
 801d146:	46bd      	mov	sp, r7
 801d148:	bd80      	pop	{r7, pc}
 801d14a:	bf00      	nop
 801d14c:	2000007c 	.word	0x2000007c

0801d150 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b084      	sub	sp, #16
 801d154:	af00      	add	r7, sp, #0
 801d156:	6078      	str	r0, [r7, #4]
 801d158:	460b      	mov	r3, r1
 801d15a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 801d15c:	4b22      	ldr	r3, [pc, #136]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d15e:	68db      	ldr	r3, [r3, #12]
 801d160:	4798      	blx	r3
   WIZCHIP.CS._select();
 801d162:	4b21      	ldr	r3, [pc, #132]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d164:	695b      	ldr	r3, [r3, #20]
 801d166:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	f043 0304 	orr.w	r3, r3, #4
 801d16e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801d170:	4b1d      	ldr	r3, [pc, #116]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d174:	2b00      	cmp	r3, #0
 801d176:	d119      	bne.n	801d1ac <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801d178:	4b1b      	ldr	r3, [pc, #108]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d17a:	6a1b      	ldr	r3, [r3, #32]
 801d17c:	687a      	ldr	r2, [r7, #4]
 801d17e:	0c12      	lsrs	r2, r2, #16
 801d180:	b2d2      	uxtb	r2, r2
 801d182:	4610      	mov	r0, r2
 801d184:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801d186:	4b18      	ldr	r3, [pc, #96]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d188:	6a1b      	ldr	r3, [r3, #32]
 801d18a:	687a      	ldr	r2, [r7, #4]
 801d18c:	0a12      	lsrs	r2, r2, #8
 801d18e:	b2d2      	uxtb	r2, r2
 801d190:	4610      	mov	r0, r2
 801d192:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801d194:	4b14      	ldr	r3, [pc, #80]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d196:	6a1b      	ldr	r3, [r3, #32]
 801d198:	687a      	ldr	r2, [r7, #4]
 801d19a:	b2d2      	uxtb	r2, r2
 801d19c:	4610      	mov	r0, r2
 801d19e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 801d1a0:	4b11      	ldr	r3, [pc, #68]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d1a2:	6a1b      	ldr	r3, [r3, #32]
 801d1a4:	78fa      	ldrb	r2, [r7, #3]
 801d1a6:	4610      	mov	r0, r2
 801d1a8:	4798      	blx	r3
 801d1aa:	e013      	b.n	801d1d4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	0c1b      	lsrs	r3, r3, #16
 801d1b0:	b2db      	uxtb	r3, r3
 801d1b2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	0a1b      	lsrs	r3, r3, #8
 801d1b8:	b2db      	uxtb	r3, r3
 801d1ba:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	b2db      	uxtb	r3, r3
 801d1c0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 801d1c2:	78fb      	ldrb	r3, [r7, #3]
 801d1c4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 801d1c6:	4b08      	ldr	r3, [pc, #32]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1ca:	f107 020c 	add.w	r2, r7, #12
 801d1ce:	2104      	movs	r1, #4
 801d1d0:	4610      	mov	r0, r2
 801d1d2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801d1d4:	4b04      	ldr	r3, [pc, #16]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d1d6:	699b      	ldr	r3, [r3, #24]
 801d1d8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801d1da:	4b03      	ldr	r3, [pc, #12]	; (801d1e8 <WIZCHIP_WRITE+0x98>)
 801d1dc:	691b      	ldr	r3, [r3, #16]
 801d1de:	4798      	blx	r3
}
 801d1e0:	bf00      	nop
 801d1e2:	3710      	adds	r7, #16
 801d1e4:	46bd      	mov	sp, r7
 801d1e6:	bd80      	pop	{r7, pc}
 801d1e8:	2000007c 	.word	0x2000007c

0801d1ec <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801d1ec:	b590      	push	{r4, r7, lr}
 801d1ee:	b087      	sub	sp, #28
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	60f8      	str	r0, [r7, #12]
 801d1f4:	60b9      	str	r1, [r7, #8]
 801d1f6:	4613      	mov	r3, r2
 801d1f8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801d1fa:	4b2b      	ldr	r3, [pc, #172]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d1fc:	68db      	ldr	r3, [r3, #12]
 801d1fe:	4798      	blx	r3
   WIZCHIP.CS._select();
 801d200:	4b29      	ldr	r3, [pc, #164]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d202:	695b      	ldr	r3, [r3, #20]
 801d204:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801d206:	4b28      	ldr	r3, [pc, #160]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d003      	beq.n	801d216 <WIZCHIP_READ_BUF+0x2a>
 801d20e:	4b26      	ldr	r3, [pc, #152]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d212:	2b00      	cmp	r3, #0
 801d214:	d126      	bne.n	801d264 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801d216:	4b24      	ldr	r3, [pc, #144]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d218:	6a1b      	ldr	r3, [r3, #32]
 801d21a:	68fa      	ldr	r2, [r7, #12]
 801d21c:	0c12      	lsrs	r2, r2, #16
 801d21e:	b2d2      	uxtb	r2, r2
 801d220:	4610      	mov	r0, r2
 801d222:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801d224:	4b20      	ldr	r3, [pc, #128]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d226:	6a1b      	ldr	r3, [r3, #32]
 801d228:	68fa      	ldr	r2, [r7, #12]
 801d22a:	0a12      	lsrs	r2, r2, #8
 801d22c:	b2d2      	uxtb	r2, r2
 801d22e:	4610      	mov	r0, r2
 801d230:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801d232:	4b1d      	ldr	r3, [pc, #116]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d234:	6a1b      	ldr	r3, [r3, #32]
 801d236:	68fa      	ldr	r2, [r7, #12]
 801d238:	b2d2      	uxtb	r2, r2
 801d23a:	4610      	mov	r0, r2
 801d23c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801d23e:	2300      	movs	r3, #0
 801d240:	82fb      	strh	r3, [r7, #22]
 801d242:	e00a      	b.n	801d25a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 801d244:	4b18      	ldr	r3, [pc, #96]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d246:	69db      	ldr	r3, [r3, #28]
 801d248:	8afa      	ldrh	r2, [r7, #22]
 801d24a:	68b9      	ldr	r1, [r7, #8]
 801d24c:	188c      	adds	r4, r1, r2
 801d24e:	4798      	blx	r3
 801d250:	4603      	mov	r3, r0
 801d252:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 801d254:	8afb      	ldrh	r3, [r7, #22]
 801d256:	3301      	adds	r3, #1
 801d258:	82fb      	strh	r3, [r7, #22]
 801d25a:	8afa      	ldrh	r2, [r7, #22]
 801d25c:	88fb      	ldrh	r3, [r7, #6]
 801d25e:	429a      	cmp	r2, r3
 801d260:	d3f0      	bcc.n	801d244 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801d262:	e017      	b.n	801d294 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801d264:	68fb      	ldr	r3, [r7, #12]
 801d266:	0c1b      	lsrs	r3, r3, #16
 801d268:	b2db      	uxtb	r3, r3
 801d26a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	0a1b      	lsrs	r3, r3, #8
 801d270:	b2db      	uxtb	r3, r3
 801d272:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	b2db      	uxtb	r3, r3
 801d278:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801d27a:	4b0b      	ldr	r3, [pc, #44]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d27e:	f107 0210 	add.w	r2, r7, #16
 801d282:	2103      	movs	r1, #3
 801d284:	4610      	mov	r0, r2
 801d286:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 801d288:	4b07      	ldr	r3, [pc, #28]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d28c:	88fa      	ldrh	r2, [r7, #6]
 801d28e:	4611      	mov	r1, r2
 801d290:	68b8      	ldr	r0, [r7, #8]
 801d292:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801d294:	4b04      	ldr	r3, [pc, #16]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d296:	699b      	ldr	r3, [r3, #24]
 801d298:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801d29a:	4b03      	ldr	r3, [pc, #12]	; (801d2a8 <WIZCHIP_READ_BUF+0xbc>)
 801d29c:	691b      	ldr	r3, [r3, #16]
 801d29e:	4798      	blx	r3
}
 801d2a0:	bf00      	nop
 801d2a2:	371c      	adds	r7, #28
 801d2a4:	46bd      	mov	sp, r7
 801d2a6:	bd90      	pop	{r4, r7, pc}
 801d2a8:	2000007c 	.word	0x2000007c

0801d2ac <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b086      	sub	sp, #24
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	60f8      	str	r0, [r7, #12]
 801d2b4:	60b9      	str	r1, [r7, #8]
 801d2b6:	4613      	mov	r3, r2
 801d2b8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801d2ba:	4b2b      	ldr	r3, [pc, #172]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d2bc:	68db      	ldr	r3, [r3, #12]
 801d2be:	4798      	blx	r3
   WIZCHIP.CS._select();
 801d2c0:	4b29      	ldr	r3, [pc, #164]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d2c2:	695b      	ldr	r3, [r3, #20]
 801d2c4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 801d2c6:	68fb      	ldr	r3, [r7, #12]
 801d2c8:	f043 0304 	orr.w	r3, r3, #4
 801d2cc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801d2ce:	4b26      	ldr	r3, [pc, #152]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d126      	bne.n	801d324 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801d2d6:	4b24      	ldr	r3, [pc, #144]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d2d8:	6a1b      	ldr	r3, [r3, #32]
 801d2da:	68fa      	ldr	r2, [r7, #12]
 801d2dc:	0c12      	lsrs	r2, r2, #16
 801d2de:	b2d2      	uxtb	r2, r2
 801d2e0:	4610      	mov	r0, r2
 801d2e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801d2e4:	4b20      	ldr	r3, [pc, #128]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d2e6:	6a1b      	ldr	r3, [r3, #32]
 801d2e8:	68fa      	ldr	r2, [r7, #12]
 801d2ea:	0a12      	lsrs	r2, r2, #8
 801d2ec:	b2d2      	uxtb	r2, r2
 801d2ee:	4610      	mov	r0, r2
 801d2f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801d2f2:	4b1d      	ldr	r3, [pc, #116]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d2f4:	6a1b      	ldr	r3, [r3, #32]
 801d2f6:	68fa      	ldr	r2, [r7, #12]
 801d2f8:	b2d2      	uxtb	r2, r2
 801d2fa:	4610      	mov	r0, r2
 801d2fc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801d2fe:	2300      	movs	r3, #0
 801d300:	82fb      	strh	r3, [r7, #22]
 801d302:	e00a      	b.n	801d31a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 801d304:	4b18      	ldr	r3, [pc, #96]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d306:	6a1b      	ldr	r3, [r3, #32]
 801d308:	8afa      	ldrh	r2, [r7, #22]
 801d30a:	68b9      	ldr	r1, [r7, #8]
 801d30c:	440a      	add	r2, r1
 801d30e:	7812      	ldrb	r2, [r2, #0]
 801d310:	4610      	mov	r0, r2
 801d312:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801d314:	8afb      	ldrh	r3, [r7, #22]
 801d316:	3301      	adds	r3, #1
 801d318:	82fb      	strh	r3, [r7, #22]
 801d31a:	8afa      	ldrh	r2, [r7, #22]
 801d31c:	88fb      	ldrh	r3, [r7, #6]
 801d31e:	429a      	cmp	r2, r3
 801d320:	d3f0      	bcc.n	801d304 <WIZCHIP_WRITE_BUF+0x58>
 801d322:	e017      	b.n	801d354 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	0c1b      	lsrs	r3, r3, #16
 801d328:	b2db      	uxtb	r3, r3
 801d32a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	0a1b      	lsrs	r3, r3, #8
 801d330:	b2db      	uxtb	r3, r3
 801d332:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	b2db      	uxtb	r3, r3
 801d338:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801d33a:	4b0b      	ldr	r3, [pc, #44]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d33e:	f107 0210 	add.w	r2, r7, #16
 801d342:	2103      	movs	r1, #3
 801d344:	4610      	mov	r0, r2
 801d346:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 801d348:	4b07      	ldr	r3, [pc, #28]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d34c:	88fa      	ldrh	r2, [r7, #6]
 801d34e:	4611      	mov	r1, r2
 801d350:	68b8      	ldr	r0, [r7, #8]
 801d352:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801d354:	4b04      	ldr	r3, [pc, #16]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d356:	699b      	ldr	r3, [r3, #24]
 801d358:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801d35a:	4b03      	ldr	r3, [pc, #12]	; (801d368 <WIZCHIP_WRITE_BUF+0xbc>)
 801d35c:	691b      	ldr	r3, [r3, #16]
 801d35e:	4798      	blx	r3
}
 801d360:	bf00      	nop
 801d362:	3718      	adds	r7, #24
 801d364:	46bd      	mov	sp, r7
 801d366:	bd80      	pop	{r7, pc}
 801d368:	2000007c 	.word	0x2000007c

0801d36c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 801d36c:	b590      	push	{r4, r7, lr}
 801d36e:	b085      	sub	sp, #20
 801d370:	af00      	add	r7, sp, #0
 801d372:	4603      	mov	r3, r0
 801d374:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 801d376:	2300      	movs	r3, #0
 801d378:	81fb      	strh	r3, [r7, #14]
 801d37a:	2300      	movs	r3, #0
 801d37c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 801d37e:	79fb      	ldrb	r3, [r7, #7]
 801d380:	009b      	lsls	r3, r3, #2
 801d382:	3301      	adds	r3, #1
 801d384:	00db      	lsls	r3, r3, #3
 801d386:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801d38a:	4618      	mov	r0, r3
 801d38c:	f7ff fe94 	bl	801d0b8 <WIZCHIP_READ>
 801d390:	4603      	mov	r3, r0
 801d392:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801d394:	89bb      	ldrh	r3, [r7, #12]
 801d396:	021b      	lsls	r3, r3, #8
 801d398:	b29c      	uxth	r4, r3
 801d39a:	79fb      	ldrb	r3, [r7, #7]
 801d39c:	009b      	lsls	r3, r3, #2
 801d39e:	3301      	adds	r3, #1
 801d3a0:	00db      	lsls	r3, r3, #3
 801d3a2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	f7ff fe86 	bl	801d0b8 <WIZCHIP_READ>
 801d3ac:	4603      	mov	r3, r0
 801d3ae:	b29b      	uxth	r3, r3
 801d3b0:	4423      	add	r3, r4
 801d3b2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 801d3b4:	89bb      	ldrh	r3, [r7, #12]
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d01a      	beq.n	801d3f0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 801d3ba:	79fb      	ldrb	r3, [r7, #7]
 801d3bc:	009b      	lsls	r3, r3, #2
 801d3be:	3301      	adds	r3, #1
 801d3c0:	00db      	lsls	r3, r3, #3
 801d3c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801d3c6:	4618      	mov	r0, r3
 801d3c8:	f7ff fe76 	bl	801d0b8 <WIZCHIP_READ>
 801d3cc:	4603      	mov	r3, r0
 801d3ce:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801d3d0:	89fb      	ldrh	r3, [r7, #14]
 801d3d2:	021b      	lsls	r3, r3, #8
 801d3d4:	b29c      	uxth	r4, r3
 801d3d6:	79fb      	ldrb	r3, [r7, #7]
 801d3d8:	009b      	lsls	r3, r3, #2
 801d3da:	3301      	adds	r3, #1
 801d3dc:	00db      	lsls	r3, r3, #3
 801d3de:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	f7ff fe68 	bl	801d0b8 <WIZCHIP_READ>
 801d3e8:	4603      	mov	r3, r0
 801d3ea:	b29b      	uxth	r3, r3
 801d3ec:	4423      	add	r3, r4
 801d3ee:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 801d3f0:	89fa      	ldrh	r2, [r7, #14]
 801d3f2:	89bb      	ldrh	r3, [r7, #12]
 801d3f4:	429a      	cmp	r2, r3
 801d3f6:	d1c2      	bne.n	801d37e <getSn_TX_FSR+0x12>
   return val;
 801d3f8:	89fb      	ldrh	r3, [r7, #14]
}
 801d3fa:	4618      	mov	r0, r3
 801d3fc:	3714      	adds	r7, #20
 801d3fe:	46bd      	mov	sp, r7
 801d400:	bd90      	pop	{r4, r7, pc}

0801d402 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 801d402:	b590      	push	{r4, r7, lr}
 801d404:	b085      	sub	sp, #20
 801d406:	af00      	add	r7, sp, #0
 801d408:	4603      	mov	r3, r0
 801d40a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 801d40c:	2300      	movs	r3, #0
 801d40e:	81fb      	strh	r3, [r7, #14]
 801d410:	2300      	movs	r3, #0
 801d412:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 801d414:	79fb      	ldrb	r3, [r7, #7]
 801d416:	009b      	lsls	r3, r3, #2
 801d418:	3301      	adds	r3, #1
 801d41a:	00db      	lsls	r3, r3, #3
 801d41c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 801d420:	4618      	mov	r0, r3
 801d422:	f7ff fe49 	bl	801d0b8 <WIZCHIP_READ>
 801d426:	4603      	mov	r3, r0
 801d428:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801d42a:	89bb      	ldrh	r3, [r7, #12]
 801d42c:	021b      	lsls	r3, r3, #8
 801d42e:	b29c      	uxth	r4, r3
 801d430:	79fb      	ldrb	r3, [r7, #7]
 801d432:	009b      	lsls	r3, r3, #2
 801d434:	3301      	adds	r3, #1
 801d436:	00db      	lsls	r3, r3, #3
 801d438:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 801d43c:	4618      	mov	r0, r3
 801d43e:	f7ff fe3b 	bl	801d0b8 <WIZCHIP_READ>
 801d442:	4603      	mov	r3, r0
 801d444:	b29b      	uxth	r3, r3
 801d446:	4423      	add	r3, r4
 801d448:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 801d44a:	89bb      	ldrh	r3, [r7, #12]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d01a      	beq.n	801d486 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 801d450:	79fb      	ldrb	r3, [r7, #7]
 801d452:	009b      	lsls	r3, r3, #2
 801d454:	3301      	adds	r3, #1
 801d456:	00db      	lsls	r3, r3, #3
 801d458:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 801d45c:	4618      	mov	r0, r3
 801d45e:	f7ff fe2b 	bl	801d0b8 <WIZCHIP_READ>
 801d462:	4603      	mov	r3, r0
 801d464:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801d466:	89fb      	ldrh	r3, [r7, #14]
 801d468:	021b      	lsls	r3, r3, #8
 801d46a:	b29c      	uxth	r4, r3
 801d46c:	79fb      	ldrb	r3, [r7, #7]
 801d46e:	009b      	lsls	r3, r3, #2
 801d470:	3301      	adds	r3, #1
 801d472:	00db      	lsls	r3, r3, #3
 801d474:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 801d478:	4618      	mov	r0, r3
 801d47a:	f7ff fe1d 	bl	801d0b8 <WIZCHIP_READ>
 801d47e:	4603      	mov	r3, r0
 801d480:	b29b      	uxth	r3, r3
 801d482:	4423      	add	r3, r4
 801d484:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 801d486:	89fa      	ldrh	r2, [r7, #14]
 801d488:	89bb      	ldrh	r3, [r7, #12]
 801d48a:	429a      	cmp	r2, r3
 801d48c:	d1c2      	bne.n	801d414 <getSn_RX_RSR+0x12>
   return val;
 801d48e:	89fb      	ldrh	r3, [r7, #14]
}
 801d490:	4618      	mov	r0, r3
 801d492:	3714      	adds	r7, #20
 801d494:	46bd      	mov	sp, r7
 801d496:	bd90      	pop	{r4, r7, pc}

0801d498 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 801d498:	b590      	push	{r4, r7, lr}
 801d49a:	b085      	sub	sp, #20
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	4603      	mov	r3, r0
 801d4a0:	6039      	str	r1, [r7, #0]
 801d4a2:	71fb      	strb	r3, [r7, #7]
 801d4a4:	4613      	mov	r3, r2
 801d4a6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 801d4b0:	88bb      	ldrh	r3, [r7, #4]
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d048      	beq.n	801d548 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 801d4b6:	79fb      	ldrb	r3, [r7, #7]
 801d4b8:	009b      	lsls	r3, r3, #2
 801d4ba:	3301      	adds	r3, #1
 801d4bc:	00db      	lsls	r3, r3, #3
 801d4be:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 801d4c2:	4618      	mov	r0, r3
 801d4c4:	f7ff fdf8 	bl	801d0b8 <WIZCHIP_READ>
 801d4c8:	4603      	mov	r3, r0
 801d4ca:	b29b      	uxth	r3, r3
 801d4cc:	021b      	lsls	r3, r3, #8
 801d4ce:	b29c      	uxth	r4, r3
 801d4d0:	79fb      	ldrb	r3, [r7, #7]
 801d4d2:	009b      	lsls	r3, r3, #2
 801d4d4:	3301      	adds	r3, #1
 801d4d6:	00db      	lsls	r3, r3, #3
 801d4d8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 801d4dc:	4618      	mov	r0, r3
 801d4de:	f7ff fdeb 	bl	801d0b8 <WIZCHIP_READ>
 801d4e2:	4603      	mov	r3, r0
 801d4e4:	b29b      	uxth	r3, r3
 801d4e6:	4423      	add	r3, r4
 801d4e8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 801d4ea:	89fb      	ldrh	r3, [r7, #14]
 801d4ec:	021b      	lsls	r3, r3, #8
 801d4ee:	79fa      	ldrb	r2, [r7, #7]
 801d4f0:	0092      	lsls	r2, r2, #2
 801d4f2:	3202      	adds	r2, #2
 801d4f4:	00d2      	lsls	r2, r2, #3
 801d4f6:	4413      	add	r3, r2
 801d4f8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 801d4fa:	88bb      	ldrh	r3, [r7, #4]
 801d4fc:	461a      	mov	r2, r3
 801d4fe:	6839      	ldr	r1, [r7, #0]
 801d500:	68b8      	ldr	r0, [r7, #8]
 801d502:	f7ff fed3 	bl	801d2ac <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 801d506:	89fa      	ldrh	r2, [r7, #14]
 801d508:	88bb      	ldrh	r3, [r7, #4]
 801d50a:	4413      	add	r3, r2
 801d50c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 801d50e:	79fb      	ldrb	r3, [r7, #7]
 801d510:	009b      	lsls	r3, r3, #2
 801d512:	3301      	adds	r3, #1
 801d514:	00db      	lsls	r3, r3, #3
 801d516:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 801d51a:	461a      	mov	r2, r3
 801d51c:	89fb      	ldrh	r3, [r7, #14]
 801d51e:	0a1b      	lsrs	r3, r3, #8
 801d520:	b29b      	uxth	r3, r3
 801d522:	b2db      	uxtb	r3, r3
 801d524:	4619      	mov	r1, r3
 801d526:	4610      	mov	r0, r2
 801d528:	f7ff fe12 	bl	801d150 <WIZCHIP_WRITE>
 801d52c:	79fb      	ldrb	r3, [r7, #7]
 801d52e:	009b      	lsls	r3, r3, #2
 801d530:	3301      	adds	r3, #1
 801d532:	00db      	lsls	r3, r3, #3
 801d534:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 801d538:	461a      	mov	r2, r3
 801d53a:	89fb      	ldrh	r3, [r7, #14]
 801d53c:	b2db      	uxtb	r3, r3
 801d53e:	4619      	mov	r1, r3
 801d540:	4610      	mov	r0, r2
 801d542:	f7ff fe05 	bl	801d150 <WIZCHIP_WRITE>
 801d546:	e000      	b.n	801d54a <wiz_send_data+0xb2>
   if(len == 0)  return;
 801d548:	bf00      	nop
}
 801d54a:	3714      	adds	r7, #20
 801d54c:	46bd      	mov	sp, r7
 801d54e:	bd90      	pop	{r4, r7, pc}

0801d550 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 801d550:	b590      	push	{r4, r7, lr}
 801d552:	b085      	sub	sp, #20
 801d554:	af00      	add	r7, sp, #0
 801d556:	4603      	mov	r3, r0
 801d558:	6039      	str	r1, [r7, #0]
 801d55a:	71fb      	strb	r3, [r7, #7]
 801d55c:	4613      	mov	r3, r2
 801d55e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 801d560:	2300      	movs	r3, #0
 801d562:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 801d564:	2300      	movs	r3, #0
 801d566:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 801d568:	88bb      	ldrh	r3, [r7, #4]
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d048      	beq.n	801d600 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 801d56e:	79fb      	ldrb	r3, [r7, #7]
 801d570:	009b      	lsls	r3, r3, #2
 801d572:	3301      	adds	r3, #1
 801d574:	00db      	lsls	r3, r3, #3
 801d576:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801d57a:	4618      	mov	r0, r3
 801d57c:	f7ff fd9c 	bl	801d0b8 <WIZCHIP_READ>
 801d580:	4603      	mov	r3, r0
 801d582:	b29b      	uxth	r3, r3
 801d584:	021b      	lsls	r3, r3, #8
 801d586:	b29c      	uxth	r4, r3
 801d588:	79fb      	ldrb	r3, [r7, #7]
 801d58a:	009b      	lsls	r3, r3, #2
 801d58c:	3301      	adds	r3, #1
 801d58e:	00db      	lsls	r3, r3, #3
 801d590:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 801d594:	4618      	mov	r0, r3
 801d596:	f7ff fd8f 	bl	801d0b8 <WIZCHIP_READ>
 801d59a:	4603      	mov	r3, r0
 801d59c:	b29b      	uxth	r3, r3
 801d59e:	4423      	add	r3, r4
 801d5a0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 801d5a2:	89fb      	ldrh	r3, [r7, #14]
 801d5a4:	021b      	lsls	r3, r3, #8
 801d5a6:	79fa      	ldrb	r2, [r7, #7]
 801d5a8:	0092      	lsls	r2, r2, #2
 801d5aa:	3203      	adds	r2, #3
 801d5ac:	00d2      	lsls	r2, r2, #3
 801d5ae:	4413      	add	r3, r2
 801d5b0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 801d5b2:	88bb      	ldrh	r3, [r7, #4]
 801d5b4:	461a      	mov	r2, r3
 801d5b6:	6839      	ldr	r1, [r7, #0]
 801d5b8:	68b8      	ldr	r0, [r7, #8]
 801d5ba:	f7ff fe17 	bl	801d1ec <WIZCHIP_READ_BUF>
   ptr += len;
 801d5be:	89fa      	ldrh	r2, [r7, #14]
 801d5c0:	88bb      	ldrh	r3, [r7, #4]
 801d5c2:	4413      	add	r3, r2
 801d5c4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 801d5c6:	79fb      	ldrb	r3, [r7, #7]
 801d5c8:	009b      	lsls	r3, r3, #2
 801d5ca:	3301      	adds	r3, #1
 801d5cc:	00db      	lsls	r3, r3, #3
 801d5ce:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801d5d2:	461a      	mov	r2, r3
 801d5d4:	89fb      	ldrh	r3, [r7, #14]
 801d5d6:	0a1b      	lsrs	r3, r3, #8
 801d5d8:	b29b      	uxth	r3, r3
 801d5da:	b2db      	uxtb	r3, r3
 801d5dc:	4619      	mov	r1, r3
 801d5de:	4610      	mov	r0, r2
 801d5e0:	f7ff fdb6 	bl	801d150 <WIZCHIP_WRITE>
 801d5e4:	79fb      	ldrb	r3, [r7, #7]
 801d5e6:	009b      	lsls	r3, r3, #2
 801d5e8:	3301      	adds	r3, #1
 801d5ea:	00db      	lsls	r3, r3, #3
 801d5ec:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 801d5f0:	461a      	mov	r2, r3
 801d5f2:	89fb      	ldrh	r3, [r7, #14]
 801d5f4:	b2db      	uxtb	r3, r3
 801d5f6:	4619      	mov	r1, r3
 801d5f8:	4610      	mov	r0, r2
 801d5fa:	f7ff fda9 	bl	801d150 <WIZCHIP_WRITE>
 801d5fe:	e000      	b.n	801d602 <wiz_recv_data+0xb2>
   if(len == 0) return;
 801d600:	bf00      	nop
}
 801d602:	3714      	adds	r7, #20
 801d604:	46bd      	mov	sp, r7
 801d606:	bd90      	pop	{r4, r7, pc}

0801d608 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 801d608:	b590      	push	{r4, r7, lr}
 801d60a:	b085      	sub	sp, #20
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	4604      	mov	r4, r0
 801d610:	4608      	mov	r0, r1
 801d612:	4611      	mov	r1, r2
 801d614:	461a      	mov	r2, r3
 801d616:	4623      	mov	r3, r4
 801d618:	71fb      	strb	r3, [r7, #7]
 801d61a:	4603      	mov	r3, r0
 801d61c:	71bb      	strb	r3, [r7, #6]
 801d61e:	460b      	mov	r3, r1
 801d620:	80bb      	strh	r3, [r7, #4]
 801d622:	4613      	mov	r3, r2
 801d624:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 801d626:	79fb      	ldrb	r3, [r7, #7]
 801d628:	2b08      	cmp	r3, #8
 801d62a:	d902      	bls.n	801d632 <socket+0x2a>
 801d62c:	f04f 33ff 	mov.w	r3, #4294967295
 801d630:	e0f2      	b.n	801d818 <socket+0x210>
	switch(protocol)
 801d632:	79bb      	ldrb	r3, [r7, #6]
 801d634:	2b01      	cmp	r3, #1
 801d636:	d005      	beq.n	801d644 <socket+0x3c>
 801d638:	2b00      	cmp	r3, #0
 801d63a:	dd11      	ble.n	801d660 <socket+0x58>
 801d63c:	3b02      	subs	r3, #2
 801d63e:	2b02      	cmp	r3, #2
 801d640:	d80e      	bhi.n	801d660 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 801d642:	e011      	b.n	801d668 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 801d644:	f107 030c 	add.w	r3, r7, #12
 801d648:	2204      	movs	r2, #4
 801d64a:	4619      	mov	r1, r3
 801d64c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801d650:	f7ff fdcc 	bl	801d1ec <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	2b00      	cmp	r3, #0
 801d658:	d105      	bne.n	801d666 <socket+0x5e>
 801d65a:	f06f 0302 	mvn.w	r3, #2
 801d65e:	e0db      	b.n	801d818 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 801d660:	f06f 0304 	mvn.w	r3, #4
 801d664:	e0d8      	b.n	801d818 <socket+0x210>
	    break;
 801d666:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 801d668:	78fb      	ldrb	r3, [r7, #3]
 801d66a:	f003 0304 	and.w	r3, r3, #4
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d002      	beq.n	801d678 <socket+0x70>
 801d672:	f06f 0305 	mvn.w	r3, #5
 801d676:	e0cf      	b.n	801d818 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 801d678:	78fb      	ldrb	r3, [r7, #3]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d025      	beq.n	801d6ca <socket+0xc2>
	{
   	switch(protocol)
 801d67e:	79bb      	ldrb	r3, [r7, #6]
 801d680:	2b01      	cmp	r3, #1
 801d682:	d002      	beq.n	801d68a <socket+0x82>
 801d684:	2b02      	cmp	r3, #2
 801d686:	d008      	beq.n	801d69a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 801d688:	e024      	b.n	801d6d4 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 801d68a:	78fb      	ldrb	r3, [r7, #3]
 801d68c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801d690:	2b00      	cmp	r3, #0
 801d692:	d11c      	bne.n	801d6ce <socket+0xc6>
 801d694:	f06f 0305 	mvn.w	r3, #5
 801d698:	e0be      	b.n	801d818 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 801d69a:	78fb      	ldrb	r3, [r7, #3]
 801d69c:	f003 0320 	and.w	r3, r3, #32
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d006      	beq.n	801d6b2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 801d6a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	db02      	blt.n	801d6b2 <socket+0xaa>
 801d6ac:	f06f 0305 	mvn.w	r3, #5
 801d6b0:	e0b2      	b.n	801d818 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 801d6b2:	78fb      	ldrb	r3, [r7, #3]
 801d6b4:	f003 0310 	and.w	r3, r3, #16
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d00a      	beq.n	801d6d2 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 801d6bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	db06      	blt.n	801d6d2 <socket+0xca>
 801d6c4:	f06f 0305 	mvn.w	r3, #5
 801d6c8:	e0a6      	b.n	801d818 <socket+0x210>
   	}
   }
 801d6ca:	bf00      	nop
 801d6cc:	e002      	b.n	801d6d4 <socket+0xcc>
   	      break;
 801d6ce:	bf00      	nop
 801d6d0:	e000      	b.n	801d6d4 <socket+0xcc>
   	      break;
 801d6d2:	bf00      	nop
	close(sn);
 801d6d4:	79fb      	ldrb	r3, [r7, #7]
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f000 f8ac 	bl	801d834 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 801d6dc:	79fb      	ldrb	r3, [r7, #7]
 801d6de:	009b      	lsls	r3, r3, #2
 801d6e0:	3301      	adds	r3, #1
 801d6e2:	00db      	lsls	r3, r3, #3
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d6ea:	f023 030f 	bic.w	r3, r3, #15
 801d6ee:	b25a      	sxtb	r2, r3
 801d6f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801d6f4:	4313      	orrs	r3, r2
 801d6f6:	b25b      	sxtb	r3, r3
 801d6f8:	b2db      	uxtb	r3, r3
 801d6fa:	4619      	mov	r1, r3
 801d6fc:	f7ff fd28 	bl	801d150 <WIZCHIP_WRITE>
    #endif
	if(!port)
 801d700:	88bb      	ldrh	r3, [r7, #4]
 801d702:	2b00      	cmp	r3, #0
 801d704:	d110      	bne.n	801d728 <socket+0x120>
	{
	   port = sock_any_port++;
 801d706:	4b46      	ldr	r3, [pc, #280]	; (801d820 <socket+0x218>)
 801d708:	881b      	ldrh	r3, [r3, #0]
 801d70a:	1c5a      	adds	r2, r3, #1
 801d70c:	b291      	uxth	r1, r2
 801d70e:	4a44      	ldr	r2, [pc, #272]	; (801d820 <socket+0x218>)
 801d710:	8011      	strh	r1, [r2, #0]
 801d712:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 801d714:	4b42      	ldr	r3, [pc, #264]	; (801d820 <socket+0x218>)
 801d716:	881b      	ldrh	r3, [r3, #0]
 801d718:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801d71c:	4293      	cmp	r3, r2
 801d71e:	d103      	bne.n	801d728 <socket+0x120>
 801d720:	4b3f      	ldr	r3, [pc, #252]	; (801d820 <socket+0x218>)
 801d722:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801d726:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 801d728:	79fb      	ldrb	r3, [r7, #7]
 801d72a:	009b      	lsls	r3, r3, #2
 801d72c:	3301      	adds	r3, #1
 801d72e:	00db      	lsls	r3, r3, #3
 801d730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d734:	461a      	mov	r2, r3
 801d736:	88bb      	ldrh	r3, [r7, #4]
 801d738:	0a1b      	lsrs	r3, r3, #8
 801d73a:	b29b      	uxth	r3, r3
 801d73c:	b2db      	uxtb	r3, r3
 801d73e:	4619      	mov	r1, r3
 801d740:	4610      	mov	r0, r2
 801d742:	f7ff fd05 	bl	801d150 <WIZCHIP_WRITE>
 801d746:	79fb      	ldrb	r3, [r7, #7]
 801d748:	009b      	lsls	r3, r3, #2
 801d74a:	3301      	adds	r3, #1
 801d74c:	00db      	lsls	r3, r3, #3
 801d74e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801d752:	461a      	mov	r2, r3
 801d754:	88bb      	ldrh	r3, [r7, #4]
 801d756:	b2db      	uxtb	r3, r3
 801d758:	4619      	mov	r1, r3
 801d75a:	4610      	mov	r0, r2
 801d75c:	f7ff fcf8 	bl	801d150 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 801d760:	79fb      	ldrb	r3, [r7, #7]
 801d762:	009b      	lsls	r3, r3, #2
 801d764:	3301      	adds	r3, #1
 801d766:	00db      	lsls	r3, r3, #3
 801d768:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d76c:	2101      	movs	r1, #1
 801d76e:	4618      	mov	r0, r3
 801d770:	f7ff fcee 	bl	801d150 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801d774:	bf00      	nop
 801d776:	79fb      	ldrb	r3, [r7, #7]
 801d778:	009b      	lsls	r3, r3, #2
 801d77a:	3301      	adds	r3, #1
 801d77c:	00db      	lsls	r3, r3, #3
 801d77e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d782:	4618      	mov	r0, r3
 801d784:	f7ff fc98 	bl	801d0b8 <WIZCHIP_READ>
 801d788:	4603      	mov	r3, r0
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d1f3      	bne.n	801d776 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 801d78e:	79fb      	ldrb	r3, [r7, #7]
 801d790:	2201      	movs	r2, #1
 801d792:	fa02 f303 	lsl.w	r3, r2, r3
 801d796:	b21b      	sxth	r3, r3
 801d798:	43db      	mvns	r3, r3
 801d79a:	b21a      	sxth	r2, r3
 801d79c:	4b21      	ldr	r3, [pc, #132]	; (801d824 <socket+0x21c>)
 801d79e:	881b      	ldrh	r3, [r3, #0]
 801d7a0:	b21b      	sxth	r3, r3
 801d7a2:	4013      	ands	r3, r2
 801d7a4:	b21b      	sxth	r3, r3
 801d7a6:	b29a      	uxth	r2, r3
 801d7a8:	4b1e      	ldr	r3, [pc, #120]	; (801d824 <socket+0x21c>)
 801d7aa:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 801d7ac:	78fb      	ldrb	r3, [r7, #3]
 801d7ae:	f003 0201 	and.w	r2, r3, #1
 801d7b2:	79fb      	ldrb	r3, [r7, #7]
 801d7b4:	fa02 f303 	lsl.w	r3, r2, r3
 801d7b8:	b21a      	sxth	r2, r3
 801d7ba:	4b1a      	ldr	r3, [pc, #104]	; (801d824 <socket+0x21c>)
 801d7bc:	881b      	ldrh	r3, [r3, #0]
 801d7be:	b21b      	sxth	r3, r3
 801d7c0:	4313      	orrs	r3, r2
 801d7c2:	b21b      	sxth	r3, r3
 801d7c4:	b29a      	uxth	r2, r3
 801d7c6:	4b17      	ldr	r3, [pc, #92]	; (801d824 <socket+0x21c>)
 801d7c8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 801d7ca:	79fb      	ldrb	r3, [r7, #7]
 801d7cc:	2201      	movs	r2, #1
 801d7ce:	fa02 f303 	lsl.w	r3, r2, r3
 801d7d2:	b21b      	sxth	r3, r3
 801d7d4:	43db      	mvns	r3, r3
 801d7d6:	b21a      	sxth	r2, r3
 801d7d8:	4b13      	ldr	r3, [pc, #76]	; (801d828 <socket+0x220>)
 801d7da:	881b      	ldrh	r3, [r3, #0]
 801d7dc:	b21b      	sxth	r3, r3
 801d7de:	4013      	ands	r3, r2
 801d7e0:	b21b      	sxth	r3, r3
 801d7e2:	b29a      	uxth	r2, r3
 801d7e4:	4b10      	ldr	r3, [pc, #64]	; (801d828 <socket+0x220>)
 801d7e6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 801d7e8:	79fb      	ldrb	r3, [r7, #7]
 801d7ea:	4a10      	ldr	r2, [pc, #64]	; (801d82c <socket+0x224>)
 801d7ec:	2100      	movs	r1, #0
 801d7ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 801d7f2:	79fb      	ldrb	r3, [r7, #7]
 801d7f4:	4a0e      	ldr	r2, [pc, #56]	; (801d830 <socket+0x228>)
 801d7f6:	2100      	movs	r1, #0
 801d7f8:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 801d7fa:	bf00      	nop
 801d7fc:	79fb      	ldrb	r3, [r7, #7]
 801d7fe:	009b      	lsls	r3, r3, #2
 801d800:	3301      	adds	r3, #1
 801d802:	00db      	lsls	r3, r3, #3
 801d804:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d808:	4618      	mov	r0, r3
 801d80a:	f7ff fc55 	bl	801d0b8 <WIZCHIP_READ>
 801d80e:	4603      	mov	r3, r0
 801d810:	2b00      	cmp	r3, #0
 801d812:	d0f3      	beq.n	801d7fc <socket+0x1f4>
   return (int8_t)sn;
 801d814:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 801d818:	4618      	mov	r0, r3
 801d81a:	3714      	adds	r7, #20
 801d81c:	46bd      	mov	sp, r7
 801d81e:	bd90      	pop	{r4, r7, pc}
 801d820:	20000078 	.word	0x20000078
 801d824:	20003930 	.word	0x20003930
 801d828:	20003932 	.word	0x20003932
 801d82c:	20003934 	.word	0x20003934
 801d830:	20003944 	.word	0x20003944

0801d834 <close>:

int8_t close(uint8_t sn)
{
 801d834:	b580      	push	{r7, lr}
 801d836:	b082      	sub	sp, #8
 801d838:	af00      	add	r7, sp, #0
 801d83a:	4603      	mov	r3, r0
 801d83c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 801d83e:	79fb      	ldrb	r3, [r7, #7]
 801d840:	2b08      	cmp	r3, #8
 801d842:	d902      	bls.n	801d84a <close+0x16>
 801d844:	f04f 33ff 	mov.w	r3, #4294967295
 801d848:	e055      	b.n	801d8f6 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 801d84a:	79fb      	ldrb	r3, [r7, #7]
 801d84c:	009b      	lsls	r3, r3, #2
 801d84e:	3301      	adds	r3, #1
 801d850:	00db      	lsls	r3, r3, #3
 801d852:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d856:	2110      	movs	r1, #16
 801d858:	4618      	mov	r0, r3
 801d85a:	f7ff fc79 	bl	801d150 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 801d85e:	bf00      	nop
 801d860:	79fb      	ldrb	r3, [r7, #7]
 801d862:	009b      	lsls	r3, r3, #2
 801d864:	3301      	adds	r3, #1
 801d866:	00db      	lsls	r3, r3, #3
 801d868:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d86c:	4618      	mov	r0, r3
 801d86e:	f7ff fc23 	bl	801d0b8 <WIZCHIP_READ>
 801d872:	4603      	mov	r3, r0
 801d874:	2b00      	cmp	r3, #0
 801d876:	d1f3      	bne.n	801d860 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 801d878:	79fb      	ldrb	r3, [r7, #7]
 801d87a:	009b      	lsls	r3, r3, #2
 801d87c:	3301      	adds	r3, #1
 801d87e:	00db      	lsls	r3, r3, #3
 801d880:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d884:	211f      	movs	r1, #31
 801d886:	4618      	mov	r0, r3
 801d888:	f7ff fc62 	bl	801d150 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 801d88c:	79fb      	ldrb	r3, [r7, #7]
 801d88e:	2201      	movs	r2, #1
 801d890:	fa02 f303 	lsl.w	r3, r2, r3
 801d894:	b21b      	sxth	r3, r3
 801d896:	43db      	mvns	r3, r3
 801d898:	b21a      	sxth	r2, r3
 801d89a:	4b19      	ldr	r3, [pc, #100]	; (801d900 <close+0xcc>)
 801d89c:	881b      	ldrh	r3, [r3, #0]
 801d89e:	b21b      	sxth	r3, r3
 801d8a0:	4013      	ands	r3, r2
 801d8a2:	b21b      	sxth	r3, r3
 801d8a4:	b29a      	uxth	r2, r3
 801d8a6:	4b16      	ldr	r3, [pc, #88]	; (801d900 <close+0xcc>)
 801d8a8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 801d8aa:	79fb      	ldrb	r3, [r7, #7]
 801d8ac:	2201      	movs	r2, #1
 801d8ae:	fa02 f303 	lsl.w	r3, r2, r3
 801d8b2:	b21b      	sxth	r3, r3
 801d8b4:	43db      	mvns	r3, r3
 801d8b6:	b21a      	sxth	r2, r3
 801d8b8:	4b12      	ldr	r3, [pc, #72]	; (801d904 <close+0xd0>)
 801d8ba:	881b      	ldrh	r3, [r3, #0]
 801d8bc:	b21b      	sxth	r3, r3
 801d8be:	4013      	ands	r3, r2
 801d8c0:	b21b      	sxth	r3, r3
 801d8c2:	b29a      	uxth	r2, r3
 801d8c4:	4b0f      	ldr	r3, [pc, #60]	; (801d904 <close+0xd0>)
 801d8c6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 801d8c8:	79fb      	ldrb	r3, [r7, #7]
 801d8ca:	4a0f      	ldr	r2, [pc, #60]	; (801d908 <close+0xd4>)
 801d8cc:	2100      	movs	r1, #0
 801d8ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 801d8d2:	79fb      	ldrb	r3, [r7, #7]
 801d8d4:	4a0d      	ldr	r2, [pc, #52]	; (801d90c <close+0xd8>)
 801d8d6:	2100      	movs	r1, #0
 801d8d8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801d8da:	bf00      	nop
 801d8dc:	79fb      	ldrb	r3, [r7, #7]
 801d8de:	009b      	lsls	r3, r3, #2
 801d8e0:	3301      	adds	r3, #1
 801d8e2:	00db      	lsls	r3, r3, #3
 801d8e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d8e8:	4618      	mov	r0, r3
 801d8ea:	f7ff fbe5 	bl	801d0b8 <WIZCHIP_READ>
 801d8ee:	4603      	mov	r3, r0
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d1f3      	bne.n	801d8dc <close+0xa8>
	return SOCK_OK;
 801d8f4:	2301      	movs	r3, #1
}
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	3708      	adds	r7, #8
 801d8fa:	46bd      	mov	sp, r7
 801d8fc:	bd80      	pop	{r7, pc}
 801d8fe:	bf00      	nop
 801d900:	20003930 	.word	0x20003930
 801d904:	20003932 	.word	0x20003932
 801d908:	20003934 	.word	0x20003934
 801d90c:	20003944 	.word	0x20003944

0801d910 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 801d910:	b580      	push	{r7, lr}
 801d912:	b084      	sub	sp, #16
 801d914:	af00      	add	r7, sp, #0
 801d916:	4603      	mov	r3, r0
 801d918:	6039      	str	r1, [r7, #0]
 801d91a:	71fb      	strb	r3, [r7, #7]
 801d91c:	4613      	mov	r3, r2
 801d91e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 801d920:	79fb      	ldrb	r3, [r7, #7]
 801d922:	2b08      	cmp	r3, #8
 801d924:	d902      	bls.n	801d92c <connect+0x1c>
 801d926:	f04f 33ff 	mov.w	r3, #4294967295
 801d92a:	e0c6      	b.n	801daba <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801d92c:	79fb      	ldrb	r3, [r7, #7]
 801d92e:	009b      	lsls	r3, r3, #2
 801d930:	3301      	adds	r3, #1
 801d932:	00db      	lsls	r3, r3, #3
 801d934:	4618      	mov	r0, r3
 801d936:	f7ff fbbf 	bl	801d0b8 <WIZCHIP_READ>
 801d93a:	4603      	mov	r3, r0
 801d93c:	f003 030f 	and.w	r3, r3, #15
 801d940:	2b01      	cmp	r3, #1
 801d942:	d002      	beq.n	801d94a <connect+0x3a>
 801d944:	f06f 0304 	mvn.w	r3, #4
 801d948:	e0b7      	b.n	801daba <connect+0x1aa>
   CHECK_SOCKINIT();
 801d94a:	79fb      	ldrb	r3, [r7, #7]
 801d94c:	009b      	lsls	r3, r3, #2
 801d94e:	3301      	adds	r3, #1
 801d950:	00db      	lsls	r3, r3, #3
 801d952:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d956:	4618      	mov	r0, r3
 801d958:	f7ff fbae 	bl	801d0b8 <WIZCHIP_READ>
 801d95c:	4603      	mov	r3, r0
 801d95e:	2b13      	cmp	r3, #19
 801d960:	d002      	beq.n	801d968 <connect+0x58>
 801d962:	f06f 0302 	mvn.w	r3, #2
 801d966:	e0a8      	b.n	801daba <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 801d968:	683b      	ldr	r3, [r7, #0]
 801d96a:	781b      	ldrb	r3, [r3, #0]
 801d96c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	021b      	lsls	r3, r3, #8
 801d972:	683a      	ldr	r2, [r7, #0]
 801d974:	3201      	adds	r2, #1
 801d976:	7812      	ldrb	r2, [r2, #0]
 801d978:	4413      	add	r3, r2
 801d97a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	021b      	lsls	r3, r3, #8
 801d980:	683a      	ldr	r2, [r7, #0]
 801d982:	3202      	adds	r2, #2
 801d984:	7812      	ldrb	r2, [r2, #0]
 801d986:	4413      	add	r3, r2
 801d988:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	021b      	lsls	r3, r3, #8
 801d98e:	683a      	ldr	r2, [r7, #0]
 801d990:	3203      	adds	r2, #3
 801d992:	7812      	ldrb	r2, [r2, #0]
 801d994:	4413      	add	r3, r2
 801d996:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 801d998:	68fb      	ldr	r3, [r7, #12]
 801d99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d99e:	d002      	beq.n	801d9a6 <connect+0x96>
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d102      	bne.n	801d9ac <connect+0x9c>
 801d9a6:	f06f 030b 	mvn.w	r3, #11
 801d9aa:	e086      	b.n	801daba <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 801d9ac:	88bb      	ldrh	r3, [r7, #4]
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d102      	bne.n	801d9b8 <connect+0xa8>
 801d9b2:	f06f 030a 	mvn.w	r3, #10
 801d9b6:	e080      	b.n	801daba <connect+0x1aa>
	setSn_DIPR(sn,addr);
 801d9b8:	79fb      	ldrb	r3, [r7, #7]
 801d9ba:	009b      	lsls	r3, r3, #2
 801d9bc:	3301      	adds	r3, #1
 801d9be:	00db      	lsls	r3, r3, #3
 801d9c0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801d9c4:	2204      	movs	r2, #4
 801d9c6:	6839      	ldr	r1, [r7, #0]
 801d9c8:	4618      	mov	r0, r3
 801d9ca:	f7ff fc6f 	bl	801d2ac <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 801d9ce:	79fb      	ldrb	r3, [r7, #7]
 801d9d0:	009b      	lsls	r3, r3, #2
 801d9d2:	3301      	adds	r3, #1
 801d9d4:	00db      	lsls	r3, r3, #3
 801d9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d9da:	461a      	mov	r2, r3
 801d9dc:	88bb      	ldrh	r3, [r7, #4]
 801d9de:	0a1b      	lsrs	r3, r3, #8
 801d9e0:	b29b      	uxth	r3, r3
 801d9e2:	b2db      	uxtb	r3, r3
 801d9e4:	4619      	mov	r1, r3
 801d9e6:	4610      	mov	r0, r2
 801d9e8:	f7ff fbb2 	bl	801d150 <WIZCHIP_WRITE>
 801d9ec:	79fb      	ldrb	r3, [r7, #7]
 801d9ee:	009b      	lsls	r3, r3, #2
 801d9f0:	3301      	adds	r3, #1
 801d9f2:	00db      	lsls	r3, r3, #3
 801d9f4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 801d9f8:	461a      	mov	r2, r3
 801d9fa:	88bb      	ldrh	r3, [r7, #4]
 801d9fc:	b2db      	uxtb	r3, r3
 801d9fe:	4619      	mov	r1, r3
 801da00:	4610      	mov	r0, r2
 801da02:	f7ff fba5 	bl	801d150 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 801da06:	79fb      	ldrb	r3, [r7, #7]
 801da08:	009b      	lsls	r3, r3, #2
 801da0a:	3301      	adds	r3, #1
 801da0c:	00db      	lsls	r3, r3, #3
 801da0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801da12:	2104      	movs	r1, #4
 801da14:	4618      	mov	r0, r3
 801da16:	f7ff fb9b 	bl	801d150 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801da1a:	bf00      	nop
 801da1c:	79fb      	ldrb	r3, [r7, #7]
 801da1e:	009b      	lsls	r3, r3, #2
 801da20:	3301      	adds	r3, #1
 801da22:	00db      	lsls	r3, r3, #3
 801da24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801da28:	4618      	mov	r0, r3
 801da2a:	f7ff fb45 	bl	801d0b8 <WIZCHIP_READ>
 801da2e:	4603      	mov	r3, r0
 801da30:	2b00      	cmp	r3, #0
 801da32:	d1f3      	bne.n	801da1c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801da34:	4b23      	ldr	r3, [pc, #140]	; (801dac4 <connect+0x1b4>)
 801da36:	881b      	ldrh	r3, [r3, #0]
 801da38:	461a      	mov	r2, r3
 801da3a:	79fb      	ldrb	r3, [r7, #7]
 801da3c:	fa42 f303 	asr.w	r3, r2, r3
 801da40:	f003 0301 	and.w	r3, r3, #1
 801da44:	2b00      	cmp	r3, #0
 801da46:	d02b      	beq.n	801daa0 <connect+0x190>
 801da48:	2300      	movs	r3, #0
 801da4a:	e036      	b.n	801daba <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801da4c:	79fb      	ldrb	r3, [r7, #7]
 801da4e:	009b      	lsls	r3, r3, #2
 801da50:	3301      	adds	r3, #1
 801da52:	00db      	lsls	r3, r3, #3
 801da54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801da58:	4618      	mov	r0, r3
 801da5a:	f7ff fb2d 	bl	801d0b8 <WIZCHIP_READ>
 801da5e:	4603      	mov	r3, r0
 801da60:	f003 0308 	and.w	r3, r3, #8
 801da64:	2b00      	cmp	r3, #0
 801da66:	d00c      	beq.n	801da82 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 801da68:	79fb      	ldrb	r3, [r7, #7]
 801da6a:	009b      	lsls	r3, r3, #2
 801da6c:	3301      	adds	r3, #1
 801da6e:	00db      	lsls	r3, r3, #3
 801da70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801da74:	2108      	movs	r1, #8
 801da76:	4618      	mov	r0, r3
 801da78:	f7ff fb6a 	bl	801d150 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 801da7c:	f06f 030c 	mvn.w	r3, #12
 801da80:	e01b      	b.n	801daba <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 801da82:	79fb      	ldrb	r3, [r7, #7]
 801da84:	009b      	lsls	r3, r3, #2
 801da86:	3301      	adds	r3, #1
 801da88:	00db      	lsls	r3, r3, #3
 801da8a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801da8e:	4618      	mov	r0, r3
 801da90:	f7ff fb12 	bl	801d0b8 <WIZCHIP_READ>
 801da94:	4603      	mov	r3, r0
 801da96:	2b00      	cmp	r3, #0
 801da98:	d102      	bne.n	801daa0 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 801da9a:	f06f 0303 	mvn.w	r3, #3
 801da9e:	e00c      	b.n	801daba <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 801daa0:	79fb      	ldrb	r3, [r7, #7]
 801daa2:	009b      	lsls	r3, r3, #2
 801daa4:	3301      	adds	r3, #1
 801daa6:	00db      	lsls	r3, r3, #3
 801daa8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801daac:	4618      	mov	r0, r3
 801daae:	f7ff fb03 	bl	801d0b8 <WIZCHIP_READ>
 801dab2:	4603      	mov	r3, r0
 801dab4:	2b17      	cmp	r3, #23
 801dab6:	d1c9      	bne.n	801da4c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 801dab8:	2301      	movs	r3, #1
}
 801daba:	4618      	mov	r0, r3
 801dabc:	3710      	adds	r7, #16
 801dabe:	46bd      	mov	sp, r7
 801dac0:	bd80      	pop	{r7, pc}
 801dac2:	bf00      	nop
 801dac4:	20003930 	.word	0x20003930

0801dac8 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 801dac8:	b580      	push	{r7, lr}
 801daca:	b082      	sub	sp, #8
 801dacc:	af00      	add	r7, sp, #0
 801dace:	4603      	mov	r3, r0
 801dad0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 801dad2:	79fb      	ldrb	r3, [r7, #7]
 801dad4:	2b08      	cmp	r3, #8
 801dad6:	d902      	bls.n	801dade <disconnect+0x16>
 801dad8:	f04f 33ff 	mov.w	r3, #4294967295
 801dadc:	e062      	b.n	801dba4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801dade:	79fb      	ldrb	r3, [r7, #7]
 801dae0:	009b      	lsls	r3, r3, #2
 801dae2:	3301      	adds	r3, #1
 801dae4:	00db      	lsls	r3, r3, #3
 801dae6:	4618      	mov	r0, r3
 801dae8:	f7ff fae6 	bl	801d0b8 <WIZCHIP_READ>
 801daec:	4603      	mov	r3, r0
 801daee:	f003 030f 	and.w	r3, r3, #15
 801daf2:	2b01      	cmp	r3, #1
 801daf4:	d002      	beq.n	801dafc <disconnect+0x34>
 801daf6:	f06f 0304 	mvn.w	r3, #4
 801dafa:	e053      	b.n	801dba4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 801dafc:	79fb      	ldrb	r3, [r7, #7]
 801dafe:	009b      	lsls	r3, r3, #2
 801db00:	3301      	adds	r3, #1
 801db02:	00db      	lsls	r3, r3, #3
 801db04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801db08:	2108      	movs	r1, #8
 801db0a:	4618      	mov	r0, r3
 801db0c:	f7ff fb20 	bl	801d150 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801db10:	bf00      	nop
 801db12:	79fb      	ldrb	r3, [r7, #7]
 801db14:	009b      	lsls	r3, r3, #2
 801db16:	3301      	adds	r3, #1
 801db18:	00db      	lsls	r3, r3, #3
 801db1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801db1e:	4618      	mov	r0, r3
 801db20:	f7ff faca 	bl	801d0b8 <WIZCHIP_READ>
 801db24:	4603      	mov	r3, r0
 801db26:	2b00      	cmp	r3, #0
 801db28:	d1f3      	bne.n	801db12 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 801db2a:	79fb      	ldrb	r3, [r7, #7]
 801db2c:	2201      	movs	r2, #1
 801db2e:	fa02 f303 	lsl.w	r3, r2, r3
 801db32:	b21b      	sxth	r3, r3
 801db34:	43db      	mvns	r3, r3
 801db36:	b21a      	sxth	r2, r3
 801db38:	4b1c      	ldr	r3, [pc, #112]	; (801dbac <disconnect+0xe4>)
 801db3a:	881b      	ldrh	r3, [r3, #0]
 801db3c:	b21b      	sxth	r3, r3
 801db3e:	4013      	ands	r3, r2
 801db40:	b21b      	sxth	r3, r3
 801db42:	b29a      	uxth	r2, r3
 801db44:	4b19      	ldr	r3, [pc, #100]	; (801dbac <disconnect+0xe4>)
 801db46:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801db48:	4b19      	ldr	r3, [pc, #100]	; (801dbb0 <disconnect+0xe8>)
 801db4a:	881b      	ldrh	r3, [r3, #0]
 801db4c:	461a      	mov	r2, r3
 801db4e:	79fb      	ldrb	r3, [r7, #7]
 801db50:	fa42 f303 	asr.w	r3, r2, r3
 801db54:	f003 0301 	and.w	r3, r3, #1
 801db58:	2b00      	cmp	r3, #0
 801db5a:	d016      	beq.n	801db8a <disconnect+0xc2>
 801db5c:	2300      	movs	r3, #0
 801db5e:	e021      	b.n	801dba4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 801db60:	79fb      	ldrb	r3, [r7, #7]
 801db62:	009b      	lsls	r3, r3, #2
 801db64:	3301      	adds	r3, #1
 801db66:	00db      	lsls	r3, r3, #3
 801db68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801db6c:	4618      	mov	r0, r3
 801db6e:	f7ff faa3 	bl	801d0b8 <WIZCHIP_READ>
 801db72:	4603      	mov	r3, r0
 801db74:	f003 0308 	and.w	r3, r3, #8
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d006      	beq.n	801db8a <disconnect+0xc2>
	   {
	      close(sn);
 801db7c:	79fb      	ldrb	r3, [r7, #7]
 801db7e:	4618      	mov	r0, r3
 801db80:	f7ff fe58 	bl	801d834 <close>
	      return SOCKERR_TIMEOUT;
 801db84:	f06f 030c 	mvn.w	r3, #12
 801db88:	e00c      	b.n	801dba4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 801db8a:	79fb      	ldrb	r3, [r7, #7]
 801db8c:	009b      	lsls	r3, r3, #2
 801db8e:	3301      	adds	r3, #1
 801db90:	00db      	lsls	r3, r3, #3
 801db92:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801db96:	4618      	mov	r0, r3
 801db98:	f7ff fa8e 	bl	801d0b8 <WIZCHIP_READ>
 801db9c:	4603      	mov	r3, r0
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d1de      	bne.n	801db60 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 801dba2:	2301      	movs	r3, #1
}
 801dba4:	4618      	mov	r0, r3
 801dba6:	3708      	adds	r7, #8
 801dba8:	46bd      	mov	sp, r7
 801dbaa:	bd80      	pop	{r7, pc}
 801dbac:	20003932 	.word	0x20003932
 801dbb0:	20003930 	.word	0x20003930

0801dbb4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801dbb4:	b580      	push	{r7, lr}
 801dbb6:	b084      	sub	sp, #16
 801dbb8:	af00      	add	r7, sp, #0
 801dbba:	4603      	mov	r3, r0
 801dbbc:	6039      	str	r1, [r7, #0]
 801dbbe:	71fb      	strb	r3, [r7, #7]
 801dbc0:	4613      	mov	r3, r2
 801dbc2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 801dbc8:	2300      	movs	r3, #0
 801dbca:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 801dbcc:	79fb      	ldrb	r3, [r7, #7]
 801dbce:	2b08      	cmp	r3, #8
 801dbd0:	d902      	bls.n	801dbd8 <send+0x24>
 801dbd2:	f04f 33ff 	mov.w	r3, #4294967295
 801dbd6:	e0de      	b.n	801dd96 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801dbd8:	79fb      	ldrb	r3, [r7, #7]
 801dbda:	009b      	lsls	r3, r3, #2
 801dbdc:	3301      	adds	r3, #1
 801dbde:	00db      	lsls	r3, r3, #3
 801dbe0:	4618      	mov	r0, r3
 801dbe2:	f7ff fa69 	bl	801d0b8 <WIZCHIP_READ>
 801dbe6:	4603      	mov	r3, r0
 801dbe8:	f003 030f 	and.w	r3, r3, #15
 801dbec:	2b01      	cmp	r3, #1
 801dbee:	d002      	beq.n	801dbf6 <send+0x42>
 801dbf0:	f06f 0304 	mvn.w	r3, #4
 801dbf4:	e0cf      	b.n	801dd96 <send+0x1e2>
   CHECK_SOCKDATA();
 801dbf6:	88bb      	ldrh	r3, [r7, #4]
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	d102      	bne.n	801dc02 <send+0x4e>
 801dbfc:	f06f 030d 	mvn.w	r3, #13
 801dc00:	e0c9      	b.n	801dd96 <send+0x1e2>
   tmp = getSn_SR(sn);
 801dc02:	79fb      	ldrb	r3, [r7, #7]
 801dc04:	009b      	lsls	r3, r3, #2
 801dc06:	3301      	adds	r3, #1
 801dc08:	00db      	lsls	r3, r3, #3
 801dc0a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801dc0e:	4618      	mov	r0, r3
 801dc10:	f7ff fa52 	bl	801d0b8 <WIZCHIP_READ>
 801dc14:	4603      	mov	r3, r0
 801dc16:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 801dc18:	7bfb      	ldrb	r3, [r7, #15]
 801dc1a:	2b17      	cmp	r3, #23
 801dc1c:	d005      	beq.n	801dc2a <send+0x76>
 801dc1e:	7bfb      	ldrb	r3, [r7, #15]
 801dc20:	2b1c      	cmp	r3, #28
 801dc22:	d002      	beq.n	801dc2a <send+0x76>
 801dc24:	f06f 0306 	mvn.w	r3, #6
 801dc28:	e0b5      	b.n	801dd96 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 801dc2a:	4b5d      	ldr	r3, [pc, #372]	; (801dda0 <send+0x1ec>)
 801dc2c:	881b      	ldrh	r3, [r3, #0]
 801dc2e:	461a      	mov	r2, r3
 801dc30:	79fb      	ldrb	r3, [r7, #7]
 801dc32:	fa42 f303 	asr.w	r3, r2, r3
 801dc36:	f003 0301 	and.w	r3, r3, #1
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d039      	beq.n	801dcb2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 801dc3e:	79fb      	ldrb	r3, [r7, #7]
 801dc40:	009b      	lsls	r3, r3, #2
 801dc42:	3301      	adds	r3, #1
 801dc44:	00db      	lsls	r3, r3, #3
 801dc46:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801dc4a:	4618      	mov	r0, r3
 801dc4c:	f7ff fa34 	bl	801d0b8 <WIZCHIP_READ>
 801dc50:	4603      	mov	r3, r0
 801dc52:	f003 031f 	and.w	r3, r3, #31
 801dc56:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 801dc58:	7bfb      	ldrb	r3, [r7, #15]
 801dc5a:	f003 0310 	and.w	r3, r3, #16
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	d019      	beq.n	801dc96 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 801dc62:	79fb      	ldrb	r3, [r7, #7]
 801dc64:	009b      	lsls	r3, r3, #2
 801dc66:	3301      	adds	r3, #1
 801dc68:	00db      	lsls	r3, r3, #3
 801dc6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801dc6e:	2110      	movs	r1, #16
 801dc70:	4618      	mov	r0, r3
 801dc72:	f7ff fa6d 	bl	801d150 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 801dc76:	79fb      	ldrb	r3, [r7, #7]
 801dc78:	2201      	movs	r2, #1
 801dc7a:	fa02 f303 	lsl.w	r3, r2, r3
 801dc7e:	b21b      	sxth	r3, r3
 801dc80:	43db      	mvns	r3, r3
 801dc82:	b21a      	sxth	r2, r3
 801dc84:	4b46      	ldr	r3, [pc, #280]	; (801dda0 <send+0x1ec>)
 801dc86:	881b      	ldrh	r3, [r3, #0]
 801dc88:	b21b      	sxth	r3, r3
 801dc8a:	4013      	ands	r3, r2
 801dc8c:	b21b      	sxth	r3, r3
 801dc8e:	b29a      	uxth	r2, r3
 801dc90:	4b43      	ldr	r3, [pc, #268]	; (801dda0 <send+0x1ec>)
 801dc92:	801a      	strh	r2, [r3, #0]
 801dc94:	e00d      	b.n	801dcb2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 801dc96:	7bfb      	ldrb	r3, [r7, #15]
 801dc98:	f003 0308 	and.w	r3, r3, #8
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d006      	beq.n	801dcae <send+0xfa>
      {
         close(sn);
 801dca0:	79fb      	ldrb	r3, [r7, #7]
 801dca2:	4618      	mov	r0, r3
 801dca4:	f7ff fdc6 	bl	801d834 <close>
         return SOCKERR_TIMEOUT;
 801dca8:	f06f 030c 	mvn.w	r3, #12
 801dcac:	e073      	b.n	801dd96 <send+0x1e2>
      }
      else return SOCK_BUSY;
 801dcae:	2300      	movs	r3, #0
 801dcb0:	e071      	b.n	801dd96 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 801dcb2:	79fb      	ldrb	r3, [r7, #7]
 801dcb4:	009b      	lsls	r3, r3, #2
 801dcb6:	3301      	adds	r3, #1
 801dcb8:	00db      	lsls	r3, r3, #3
 801dcba:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	f7ff f9fa 	bl	801d0b8 <WIZCHIP_READ>
 801dcc4:	4603      	mov	r3, r0
 801dcc6:	b29b      	uxth	r3, r3
 801dcc8:	029b      	lsls	r3, r3, #10
 801dcca:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 801dccc:	88ba      	ldrh	r2, [r7, #4]
 801dcce:	89bb      	ldrh	r3, [r7, #12]
 801dcd0:	429a      	cmp	r2, r3
 801dcd2:	d901      	bls.n	801dcd8 <send+0x124>
 801dcd4:	89bb      	ldrh	r3, [r7, #12]
 801dcd6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 801dcd8:	79fb      	ldrb	r3, [r7, #7]
 801dcda:	4618      	mov	r0, r3
 801dcdc:	f7ff fb46 	bl	801d36c <getSn_TX_FSR>
 801dce0:	4603      	mov	r3, r0
 801dce2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 801dce4:	79fb      	ldrb	r3, [r7, #7]
 801dce6:	009b      	lsls	r3, r3, #2
 801dce8:	3301      	adds	r3, #1
 801dcea:	00db      	lsls	r3, r3, #3
 801dcec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	f7ff f9e1 	bl	801d0b8 <WIZCHIP_READ>
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 801dcfa:	7bfb      	ldrb	r3, [r7, #15]
 801dcfc:	2b17      	cmp	r3, #23
 801dcfe:	d009      	beq.n	801dd14 <send+0x160>
 801dd00:	7bfb      	ldrb	r3, [r7, #15]
 801dd02:	2b1c      	cmp	r3, #28
 801dd04:	d006      	beq.n	801dd14 <send+0x160>
      {
         close(sn);
 801dd06:	79fb      	ldrb	r3, [r7, #7]
 801dd08:	4618      	mov	r0, r3
 801dd0a:	f7ff fd93 	bl	801d834 <close>
         return SOCKERR_SOCKSTATUS;
 801dd0e:	f06f 0306 	mvn.w	r3, #6
 801dd12:	e040      	b.n	801dd96 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801dd14:	4b23      	ldr	r3, [pc, #140]	; (801dda4 <send+0x1f0>)
 801dd16:	881b      	ldrh	r3, [r3, #0]
 801dd18:	461a      	mov	r2, r3
 801dd1a:	79fb      	ldrb	r3, [r7, #7]
 801dd1c:	fa42 f303 	asr.w	r3, r2, r3
 801dd20:	f003 0301 	and.w	r3, r3, #1
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d005      	beq.n	801dd34 <send+0x180>
 801dd28:	88ba      	ldrh	r2, [r7, #4]
 801dd2a:	89bb      	ldrh	r3, [r7, #12]
 801dd2c:	429a      	cmp	r2, r3
 801dd2e:	d901      	bls.n	801dd34 <send+0x180>
 801dd30:	2300      	movs	r3, #0
 801dd32:	e030      	b.n	801dd96 <send+0x1e2>
      if(len <= freesize) break;
 801dd34:	88ba      	ldrh	r2, [r7, #4]
 801dd36:	89bb      	ldrh	r3, [r7, #12]
 801dd38:	429a      	cmp	r2, r3
 801dd3a:	d900      	bls.n	801dd3e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 801dd3c:	e7cc      	b.n	801dcd8 <send+0x124>
      if(len <= freesize) break;
 801dd3e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 801dd40:	88ba      	ldrh	r2, [r7, #4]
 801dd42:	79fb      	ldrb	r3, [r7, #7]
 801dd44:	6839      	ldr	r1, [r7, #0]
 801dd46:	4618      	mov	r0, r3
 801dd48:	f7ff fba6 	bl	801d498 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 801dd4c:	79fb      	ldrb	r3, [r7, #7]
 801dd4e:	009b      	lsls	r3, r3, #2
 801dd50:	3301      	adds	r3, #1
 801dd52:	00db      	lsls	r3, r3, #3
 801dd54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801dd58:	2120      	movs	r1, #32
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	f7ff f9f8 	bl	801d150 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 801dd60:	bf00      	nop
 801dd62:	79fb      	ldrb	r3, [r7, #7]
 801dd64:	009b      	lsls	r3, r3, #2
 801dd66:	3301      	adds	r3, #1
 801dd68:	00db      	lsls	r3, r3, #3
 801dd6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801dd6e:	4618      	mov	r0, r3
 801dd70:	f7ff f9a2 	bl	801d0b8 <WIZCHIP_READ>
 801dd74:	4603      	mov	r3, r0
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d1f3      	bne.n	801dd62 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 801dd7a:	79fb      	ldrb	r3, [r7, #7]
 801dd7c:	2201      	movs	r2, #1
 801dd7e:	fa02 f303 	lsl.w	r3, r2, r3
 801dd82:	b21a      	sxth	r2, r3
 801dd84:	4b06      	ldr	r3, [pc, #24]	; (801dda0 <send+0x1ec>)
 801dd86:	881b      	ldrh	r3, [r3, #0]
 801dd88:	b21b      	sxth	r3, r3
 801dd8a:	4313      	orrs	r3, r2
 801dd8c:	b21b      	sxth	r3, r3
 801dd8e:	b29a      	uxth	r2, r3
 801dd90:	4b03      	ldr	r3, [pc, #12]	; (801dda0 <send+0x1ec>)
 801dd92:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801dd94:	88bb      	ldrh	r3, [r7, #4]
}
 801dd96:	4618      	mov	r0, r3
 801dd98:	3710      	adds	r7, #16
 801dd9a:	46bd      	mov	sp, r7
 801dd9c:	bd80      	pop	{r7, pc}
 801dd9e:	bf00      	nop
 801dda0:	20003932 	.word	0x20003932
 801dda4:	20003930 	.word	0x20003930

0801dda8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801dda8:	b590      	push	{r4, r7, lr}
 801ddaa:	b085      	sub	sp, #20
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	4603      	mov	r3, r0
 801ddb0:	6039      	str	r1, [r7, #0]
 801ddb2:	71fb      	strb	r3, [r7, #7]
 801ddb4:	4613      	mov	r3, r2
 801ddb6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 801ddb8:	2300      	movs	r3, #0
 801ddba:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 801ddbc:	2300      	movs	r3, #0
 801ddbe:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 801ddc0:	79fb      	ldrb	r3, [r7, #7]
 801ddc2:	2b08      	cmp	r3, #8
 801ddc4:	d902      	bls.n	801ddcc <recv+0x24>
 801ddc6:	f04f 33ff 	mov.w	r3, #4294967295
 801ddca:	e09c      	b.n	801df06 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801ddcc:	79fb      	ldrb	r3, [r7, #7]
 801ddce:	009b      	lsls	r3, r3, #2
 801ddd0:	3301      	adds	r3, #1
 801ddd2:	00db      	lsls	r3, r3, #3
 801ddd4:	4618      	mov	r0, r3
 801ddd6:	f7ff f96f 	bl	801d0b8 <WIZCHIP_READ>
 801ddda:	4603      	mov	r3, r0
 801dddc:	f003 030f 	and.w	r3, r3, #15
 801dde0:	2b01      	cmp	r3, #1
 801dde2:	d002      	beq.n	801ddea <recv+0x42>
 801dde4:	f06f 0304 	mvn.w	r3, #4
 801dde8:	e08d      	b.n	801df06 <recv+0x15e>
   CHECK_SOCKDATA();
 801ddea:	88bb      	ldrh	r3, [r7, #4]
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d102      	bne.n	801ddf6 <recv+0x4e>
 801ddf0:	f06f 030d 	mvn.w	r3, #13
 801ddf4:	e087      	b.n	801df06 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 801ddf6:	79fb      	ldrb	r3, [r7, #7]
 801ddf8:	009b      	lsls	r3, r3, #2
 801ddfa:	3301      	adds	r3, #1
 801ddfc:	00db      	lsls	r3, r3, #3
 801ddfe:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801de02:	4618      	mov	r0, r3
 801de04:	f7ff f958 	bl	801d0b8 <WIZCHIP_READ>
 801de08:	4603      	mov	r3, r0
 801de0a:	b29b      	uxth	r3, r3
 801de0c:	029b      	lsls	r3, r3, #10
 801de0e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 801de10:	89ba      	ldrh	r2, [r7, #12]
 801de12:	88bb      	ldrh	r3, [r7, #4]
 801de14:	429a      	cmp	r2, r3
 801de16:	d201      	bcs.n	801de1c <recv+0x74>
 801de18:	89bb      	ldrh	r3, [r7, #12]
 801de1a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 801de1c:	79fb      	ldrb	r3, [r7, #7]
 801de1e:	4618      	mov	r0, r3
 801de20:	f7ff faef 	bl	801d402 <getSn_RX_RSR>
 801de24:	4603      	mov	r3, r0
 801de26:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 801de28:	79fb      	ldrb	r3, [r7, #7]
 801de2a:	009b      	lsls	r3, r3, #2
 801de2c:	3301      	adds	r3, #1
 801de2e:	00db      	lsls	r3, r3, #3
 801de30:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801de34:	4618      	mov	r0, r3
 801de36:	f7ff f93f 	bl	801d0b8 <WIZCHIP_READ>
 801de3a:	4603      	mov	r3, r0
 801de3c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 801de3e:	7bfb      	ldrb	r3, [r7, #15]
 801de40:	2b17      	cmp	r3, #23
 801de42:	d026      	beq.n	801de92 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 801de44:	7bfb      	ldrb	r3, [r7, #15]
 801de46:	2b1c      	cmp	r3, #28
 801de48:	d11c      	bne.n	801de84 <recv+0xdc>
            {
               if(recvsize != 0) break;
 801de4a:	89bb      	ldrh	r3, [r7, #12]
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	d133      	bne.n	801deb8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 801de50:	79fb      	ldrb	r3, [r7, #7]
 801de52:	4618      	mov	r0, r3
 801de54:	f7ff fa8a 	bl	801d36c <getSn_TX_FSR>
 801de58:	4603      	mov	r3, r0
 801de5a:	461c      	mov	r4, r3
 801de5c:	79fb      	ldrb	r3, [r7, #7]
 801de5e:	009b      	lsls	r3, r3, #2
 801de60:	3301      	adds	r3, #1
 801de62:	00db      	lsls	r3, r3, #3
 801de64:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801de68:	4618      	mov	r0, r3
 801de6a:	f7ff f925 	bl	801d0b8 <WIZCHIP_READ>
 801de6e:	4603      	mov	r3, r0
 801de70:	029b      	lsls	r3, r3, #10
 801de72:	429c      	cmp	r4, r3
 801de74:	d10d      	bne.n	801de92 <recv+0xea>
               {
                  close(sn);
 801de76:	79fb      	ldrb	r3, [r7, #7]
 801de78:	4618      	mov	r0, r3
 801de7a:	f7ff fcdb 	bl	801d834 <close>
                  return SOCKERR_SOCKSTATUS;
 801de7e:	f06f 0306 	mvn.w	r3, #6
 801de82:	e040      	b.n	801df06 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 801de84:	79fb      	ldrb	r3, [r7, #7]
 801de86:	4618      	mov	r0, r3
 801de88:	f7ff fcd4 	bl	801d834 <close>
               return SOCKERR_SOCKSTATUS;
 801de8c:	f06f 0306 	mvn.w	r3, #6
 801de90:	e039      	b.n	801df06 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801de92:	4b1f      	ldr	r3, [pc, #124]	; (801df10 <recv+0x168>)
 801de94:	881b      	ldrh	r3, [r3, #0]
 801de96:	461a      	mov	r2, r3
 801de98:	79fb      	ldrb	r3, [r7, #7]
 801de9a:	fa42 f303 	asr.w	r3, r2, r3
 801de9e:	f003 0301 	and.w	r3, r3, #1
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d004      	beq.n	801deb0 <recv+0x108>
 801dea6:	89bb      	ldrh	r3, [r7, #12]
 801dea8:	2b00      	cmp	r3, #0
 801deaa:	d101      	bne.n	801deb0 <recv+0x108>
 801deac:	2300      	movs	r3, #0
 801deae:	e02a      	b.n	801df06 <recv+0x15e>
         if(recvsize != 0) break;
 801deb0:	89bb      	ldrh	r3, [r7, #12]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d102      	bne.n	801debc <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 801deb6:	e7b1      	b.n	801de1c <recv+0x74>
               if(recvsize != 0) break;
 801deb8:	bf00      	nop
 801deba:	e000      	b.n	801debe <recv+0x116>
         if(recvsize != 0) break;
 801debc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 801debe:	89ba      	ldrh	r2, [r7, #12]
 801dec0:	88bb      	ldrh	r3, [r7, #4]
 801dec2:	429a      	cmp	r2, r3
 801dec4:	d201      	bcs.n	801deca <recv+0x122>
 801dec6:	89bb      	ldrh	r3, [r7, #12]
 801dec8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 801deca:	88ba      	ldrh	r2, [r7, #4]
 801decc:	79fb      	ldrb	r3, [r7, #7]
 801dece:	6839      	ldr	r1, [r7, #0]
 801ded0:	4618      	mov	r0, r3
 801ded2:	f7ff fb3d 	bl	801d550 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 801ded6:	79fb      	ldrb	r3, [r7, #7]
 801ded8:	009b      	lsls	r3, r3, #2
 801deda:	3301      	adds	r3, #1
 801dedc:	00db      	lsls	r3, r3, #3
 801dede:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801dee2:	2140      	movs	r1, #64	; 0x40
 801dee4:	4618      	mov	r0, r3
 801dee6:	f7ff f933 	bl	801d150 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801deea:	bf00      	nop
 801deec:	79fb      	ldrb	r3, [r7, #7]
 801deee:	009b      	lsls	r3, r3, #2
 801def0:	3301      	adds	r3, #1
 801def2:	00db      	lsls	r3, r3, #3
 801def4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801def8:	4618      	mov	r0, r3
 801defa:	f7ff f8dd 	bl	801d0b8 <WIZCHIP_READ>
 801defe:	4603      	mov	r3, r0
 801df00:	2b00      	cmp	r3, #0
 801df02:	d1f3      	bne.n	801deec <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801df04:	88bb      	ldrh	r3, [r7, #4]
}
 801df06:	4618      	mov	r0, r3
 801df08:	3714      	adds	r7, #20
 801df0a:	46bd      	mov	sp, r7
 801df0c:	bd90      	pop	{r4, r7, pc}
 801df0e:	bf00      	nop
 801df10:	20003930 	.word	0x20003930

0801df14 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 801df14:	b590      	push	{r4, r7, lr}
 801df16:	b083      	sub	sp, #12
 801df18:	af00      	add	r7, sp, #0
 801df1a:	4603      	mov	r3, r0
 801df1c:	603a      	str	r2, [r7, #0]
 801df1e:	71fb      	strb	r3, [r7, #7]
 801df20:	460b      	mov	r3, r1
 801df22:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 801df24:	79fb      	ldrb	r3, [r7, #7]
 801df26:	2b08      	cmp	r3, #8
 801df28:	d902      	bls.n	801df30 <getsockopt+0x1c>
 801df2a:	f04f 33ff 	mov.w	r3, #4294967295
 801df2e:	e101      	b.n	801e134 <getsockopt+0x220>
   switch(sotype)
 801df30:	79bb      	ldrb	r3, [r7, #6]
 801df32:	2b0c      	cmp	r3, #12
 801df34:	f200 80fa 	bhi.w	801e12c <getsockopt+0x218>
 801df38:	a201      	add	r2, pc, #4	; (adr r2, 801df40 <getsockopt+0x2c>)
 801df3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df3e:	bf00      	nop
 801df40:	0801df75 	.word	0x0801df75
 801df44:	0801df91 	.word	0x0801df91
 801df48:	0801dfad 	.word	0x0801dfad
 801df4c:	0801dfc9 	.word	0x0801dfc9
 801df50:	0801e003 	.word	0x0801e003
 801df54:	0801e01b 	.word	0x0801e01b
 801df58:	0801e12d 	.word	0x0801e12d
 801df5c:	0801e055 	.word	0x0801e055
 801df60:	0801e08f 	.word	0x0801e08f
 801df64:	0801e0a1 	.word	0x0801e0a1
 801df68:	0801e0b3 	.word	0x0801e0b3
 801df6c:	0801e0cf 	.word	0x0801e0cf
 801df70:	0801e107 	.word	0x0801e107
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 801df74:	79fb      	ldrb	r3, [r7, #7]
 801df76:	009b      	lsls	r3, r3, #2
 801df78:	3301      	adds	r3, #1
 801df7a:	00db      	lsls	r3, r3, #3
 801df7c:	4618      	mov	r0, r3
 801df7e:	f7ff f89b 	bl	801d0b8 <WIZCHIP_READ>
 801df82:	4603      	mov	r3, r0
 801df84:	f023 030f 	bic.w	r3, r3, #15
 801df88:	b2da      	uxtb	r2, r3
 801df8a:	683b      	ldr	r3, [r7, #0]
 801df8c:	701a      	strb	r2, [r3, #0]
         break;
 801df8e:	e0d0      	b.n	801e132 <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 801df90:	79fb      	ldrb	r3, [r7, #7]
 801df92:	009b      	lsls	r3, r3, #2
 801df94:	3301      	adds	r3, #1
 801df96:	00db      	lsls	r3, r3, #3
 801df98:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 801df9c:	4618      	mov	r0, r3
 801df9e:	f7ff f88b 	bl	801d0b8 <WIZCHIP_READ>
 801dfa2:	4603      	mov	r3, r0
 801dfa4:	461a      	mov	r2, r3
 801dfa6:	683b      	ldr	r3, [r7, #0]
 801dfa8:	701a      	strb	r2, [r3, #0]
         break;
 801dfaa:	e0c2      	b.n	801e132 <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 801dfac:	79fb      	ldrb	r3, [r7, #7]
 801dfae:	009b      	lsls	r3, r3, #2
 801dfb0:	3301      	adds	r3, #1
 801dfb2:	00db      	lsls	r3, r3, #3
 801dfb4:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 801dfb8:	4618      	mov	r0, r3
 801dfba:	f7ff f87d 	bl	801d0b8 <WIZCHIP_READ>
 801dfbe:	4603      	mov	r3, r0
 801dfc0:	461a      	mov	r2, r3
 801dfc2:	683b      	ldr	r3, [r7, #0]
 801dfc4:	701a      	strb	r2, [r3, #0]
         break;
 801dfc6:	e0b4      	b.n	801e132 <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 801dfc8:	79fb      	ldrb	r3, [r7, #7]
 801dfca:	009b      	lsls	r3, r3, #2
 801dfcc:	3301      	adds	r3, #1
 801dfce:	00db      	lsls	r3, r3, #3
 801dfd0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	f7ff f86f 	bl	801d0b8 <WIZCHIP_READ>
 801dfda:	4603      	mov	r3, r0
 801dfdc:	b29b      	uxth	r3, r3
 801dfde:	021b      	lsls	r3, r3, #8
 801dfe0:	b29c      	uxth	r4, r3
 801dfe2:	79fb      	ldrb	r3, [r7, #7]
 801dfe4:	009b      	lsls	r3, r3, #2
 801dfe6:	3301      	adds	r3, #1
 801dfe8:	00db      	lsls	r3, r3, #3
 801dfea:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 801dfee:	4618      	mov	r0, r3
 801dff0:	f7ff f862 	bl	801d0b8 <WIZCHIP_READ>
 801dff4:	4603      	mov	r3, r0
 801dff6:	b29b      	uxth	r3, r3
 801dff8:	4423      	add	r3, r4
 801dffa:	b29a      	uxth	r2, r3
 801dffc:	683b      	ldr	r3, [r7, #0]
 801dffe:	801a      	strh	r2, [r3, #0]
         break;
 801e000:	e097      	b.n	801e132 <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 801e002:	79fb      	ldrb	r3, [r7, #7]
 801e004:	009b      	lsls	r3, r3, #2
 801e006:	3301      	adds	r3, #1
 801e008:	00db      	lsls	r3, r3, #3
 801e00a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801e00e:	2204      	movs	r2, #4
 801e010:	6839      	ldr	r1, [r7, #0]
 801e012:	4618      	mov	r0, r3
 801e014:	f7ff f8ea 	bl	801d1ec <WIZCHIP_READ_BUF>
         break;
 801e018:	e08b      	b.n	801e132 <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 801e01a:	79fb      	ldrb	r3, [r7, #7]
 801e01c:	009b      	lsls	r3, r3, #2
 801e01e:	3301      	adds	r3, #1
 801e020:	00db      	lsls	r3, r3, #3
 801e022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e026:	4618      	mov	r0, r3
 801e028:	f7ff f846 	bl	801d0b8 <WIZCHIP_READ>
 801e02c:	4603      	mov	r3, r0
 801e02e:	b29b      	uxth	r3, r3
 801e030:	021b      	lsls	r3, r3, #8
 801e032:	b29c      	uxth	r4, r3
 801e034:	79fb      	ldrb	r3, [r7, #7]
 801e036:	009b      	lsls	r3, r3, #2
 801e038:	3301      	adds	r3, #1
 801e03a:	00db      	lsls	r3, r3, #3
 801e03c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 801e040:	4618      	mov	r0, r3
 801e042:	f7ff f839 	bl	801d0b8 <WIZCHIP_READ>
 801e046:	4603      	mov	r3, r0
 801e048:	b29b      	uxth	r3, r3
 801e04a:	4423      	add	r3, r4
 801e04c:	b29a      	uxth	r2, r3
 801e04e:	683b      	ldr	r3, [r7, #0]
 801e050:	801a      	strh	r2, [r3, #0]
         break;
 801e052:	e06e      	b.n	801e132 <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 801e054:	79fb      	ldrb	r3, [r7, #7]
 801e056:	009b      	lsls	r3, r3, #2
 801e058:	3301      	adds	r3, #1
 801e05a:	00db      	lsls	r3, r3, #3
 801e05c:	4618      	mov	r0, r3
 801e05e:	f7ff f82b 	bl	801d0b8 <WIZCHIP_READ>
 801e062:	4603      	mov	r3, r0
 801e064:	f003 030f 	and.w	r3, r3, #15
 801e068:	2b01      	cmp	r3, #1
 801e06a:	d002      	beq.n	801e072 <getsockopt+0x15e>
 801e06c:	f06f 0304 	mvn.w	r3, #4
 801e070:	e060      	b.n	801e134 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 801e072:	79fb      	ldrb	r3, [r7, #7]
 801e074:	009b      	lsls	r3, r3, #2
 801e076:	3301      	adds	r3, #1
 801e078:	00db      	lsls	r3, r3, #3
 801e07a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 801e07e:	4618      	mov	r0, r3
 801e080:	f7ff f81a 	bl	801d0b8 <WIZCHIP_READ>
 801e084:	4603      	mov	r3, r0
 801e086:	b29a      	uxth	r2, r3
 801e088:	683b      	ldr	r3, [r7, #0]
 801e08a:	801a      	strh	r2, [r3, #0]
         break;
 801e08c:	e051      	b.n	801e132 <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 801e08e:	79fb      	ldrb	r3, [r7, #7]
 801e090:	4618      	mov	r0, r3
 801e092:	f7ff f96b 	bl	801d36c <getSn_TX_FSR>
 801e096:	4603      	mov	r3, r0
 801e098:	461a      	mov	r2, r3
 801e09a:	683b      	ldr	r3, [r7, #0]
 801e09c:	801a      	strh	r2, [r3, #0]
         break;
 801e09e:	e048      	b.n	801e132 <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 801e0a0:	79fb      	ldrb	r3, [r7, #7]
 801e0a2:	4618      	mov	r0, r3
 801e0a4:	f7ff f9ad 	bl	801d402 <getSn_RX_RSR>
 801e0a8:	4603      	mov	r3, r0
 801e0aa:	461a      	mov	r2, r3
 801e0ac:	683b      	ldr	r3, [r7, #0]
 801e0ae:	801a      	strh	r2, [r3, #0]
         break;
 801e0b0:	e03f      	b.n	801e132 <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 801e0b2:	79fb      	ldrb	r3, [r7, #7]
 801e0b4:	009b      	lsls	r3, r3, #2
 801e0b6:	3301      	adds	r3, #1
 801e0b8:	00db      	lsls	r3, r3, #3
 801e0ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801e0be:	4618      	mov	r0, r3
 801e0c0:	f7fe fffa 	bl	801d0b8 <WIZCHIP_READ>
 801e0c4:	4603      	mov	r3, r0
 801e0c6:	461a      	mov	r2, r3
 801e0c8:	683b      	ldr	r3, [r7, #0]
 801e0ca:	701a      	strb	r2, [r3, #0]
         break;
 801e0cc:	e031      	b.n	801e132 <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 801e0ce:	79fb      	ldrb	r3, [r7, #7]
 801e0d0:	009b      	lsls	r3, r3, #2
 801e0d2:	3301      	adds	r3, #1
 801e0d4:	00db      	lsls	r3, r3, #3
 801e0d6:	4618      	mov	r0, r3
 801e0d8:	f7fe ffee 	bl	801d0b8 <WIZCHIP_READ>
 801e0dc:	4603      	mov	r3, r0
 801e0de:	f003 0301 	and.w	r3, r3, #1
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d008      	beq.n	801e0f8 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 801e0e6:	79fb      	ldrb	r3, [r7, #7]
 801e0e8:	4618      	mov	r0, r3
 801e0ea:	f7ff f98a 	bl	801d402 <getSn_RX_RSR>
 801e0ee:	4603      	mov	r3, r0
 801e0f0:	461a      	mov	r2, r3
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 801e0f6:	e01c      	b.n	801e132 <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 801e0f8:	79fb      	ldrb	r3, [r7, #7]
 801e0fa:	4a10      	ldr	r2, [pc, #64]	; (801e13c <getsockopt+0x228>)
 801e0fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801e100:	683b      	ldr	r3, [r7, #0]
 801e102:	801a      	strh	r2, [r3, #0]
         break;
 801e104:	e015      	b.n	801e132 <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 801e106:	79fb      	ldrb	r3, [r7, #7]
 801e108:	009b      	lsls	r3, r3, #2
 801e10a:	3301      	adds	r3, #1
 801e10c:	00db      	lsls	r3, r3, #3
 801e10e:	4618      	mov	r0, r3
 801e110:	f7fe ffd2 	bl	801d0b8 <WIZCHIP_READ>
 801e114:	4603      	mov	r3, r0
 801e116:	2b01      	cmp	r3, #1
 801e118:	d102      	bne.n	801e120 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 801e11a:	f06f 0304 	mvn.w	r3, #4
 801e11e:	e009      	b.n	801e134 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 801e120:	79fb      	ldrb	r3, [r7, #7]
 801e122:	4a07      	ldr	r2, [pc, #28]	; (801e140 <getsockopt+0x22c>)
 801e124:	5cd2      	ldrb	r2, [r2, r3]
 801e126:	683b      	ldr	r3, [r7, #0]
 801e128:	701a      	strb	r2, [r3, #0]
         break;
 801e12a:	e002      	b.n	801e132 <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 801e12c:	f06f 0301 	mvn.w	r3, #1
 801e130:	e000      	b.n	801e134 <getsockopt+0x220>
   }
   return SOCK_OK;
 801e132:	2301      	movs	r3, #1
}
 801e134:	4618      	mov	r0, r3
 801e136:	370c      	adds	r7, #12
 801e138:	46bd      	mov	sp, r7
 801e13a:	bd90      	pop	{r4, r7, pc}
 801e13c:	20003934 	.word	0x20003934
 801e140:	20003944 	.word	0x20003944

0801e144 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 801e144:	b480      	push	{r7}
 801e146:	af00      	add	r7, sp, #0
 801e148:	bf00      	nop
 801e14a:	46bd      	mov	sp, r7
 801e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e150:	4770      	bx	lr

0801e152 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 801e152:	b480      	push	{r7}
 801e154:	af00      	add	r7, sp, #0
 801e156:	bf00      	nop
 801e158:	46bd      	mov	sp, r7
 801e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e15e:	4770      	bx	lr

0801e160 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 801e160:	b480      	push	{r7}
 801e162:	af00      	add	r7, sp, #0
 801e164:	bf00      	nop
 801e166:	46bd      	mov	sp, r7
 801e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e16c:	4770      	bx	lr

0801e16e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 801e16e:	b480      	push	{r7}
 801e170:	af00      	add	r7, sp, #0
 801e172:	bf00      	nop
 801e174:	46bd      	mov	sp, r7
 801e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e17a:	4770      	bx	lr

0801e17c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 801e17c:	b480      	push	{r7}
 801e17e:	b083      	sub	sp, #12
 801e180:	af00      	add	r7, sp, #0
 801e182:	6078      	str	r0, [r7, #4]
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	781b      	ldrb	r3, [r3, #0]
 801e188:	b2db      	uxtb	r3, r3
 801e18a:	4618      	mov	r0, r3
 801e18c:	370c      	adds	r7, #12
 801e18e:	46bd      	mov	sp, r7
 801e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e194:	4770      	bx	lr

0801e196 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 801e196:	b480      	push	{r7}
 801e198:	b083      	sub	sp, #12
 801e19a:	af00      	add	r7, sp, #0
 801e19c:	6078      	str	r0, [r7, #4]
 801e19e:	460b      	mov	r3, r1
 801e1a0:	70fb      	strb	r3, [r7, #3]
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	78fa      	ldrb	r2, [r7, #3]
 801e1a6:	701a      	strb	r2, [r3, #0]
 801e1a8:	bf00      	nop
 801e1aa:	370c      	adds	r7, #12
 801e1ac:	46bd      	mov	sp, r7
 801e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1b2:	4770      	bx	lr

0801e1b4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 801e1b4:	b480      	push	{r7}
 801e1b6:	af00      	add	r7, sp, #0
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	4618      	mov	r0, r3
 801e1bc:	46bd      	mov	sp, r7
 801e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1c2:	4770      	bx	lr

0801e1c4 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 801e1c4:	b480      	push	{r7}
 801e1c6:	b083      	sub	sp, #12
 801e1c8:	af00      	add	r7, sp, #0
 801e1ca:	4603      	mov	r3, r0
 801e1cc:	71fb      	strb	r3, [r7, #7]
 801e1ce:	bf00      	nop
 801e1d0:	370c      	adds	r7, #12
 801e1d2:	46bd      	mov	sp, r7
 801e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1d8:	4770      	bx	lr
	...

0801e1dc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 801e1dc:	b480      	push	{r7}
 801e1de:	b083      	sub	sp, #12
 801e1e0:	af00      	add	r7, sp, #0
 801e1e2:	6078      	str	r0, [r7, #4]
 801e1e4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d002      	beq.n	801e1f2 <reg_wizchip_cs_cbfunc+0x16>
 801e1ec:	683b      	ldr	r3, [r7, #0]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	d106      	bne.n	801e200 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 801e1f2:	4b0a      	ldr	r3, [pc, #40]	; (801e21c <reg_wizchip_cs_cbfunc+0x40>)
 801e1f4:	4a0a      	ldr	r2, [pc, #40]	; (801e220 <reg_wizchip_cs_cbfunc+0x44>)
 801e1f6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 801e1f8:	4b08      	ldr	r3, [pc, #32]	; (801e21c <reg_wizchip_cs_cbfunc+0x40>)
 801e1fa:	4a0a      	ldr	r2, [pc, #40]	; (801e224 <reg_wizchip_cs_cbfunc+0x48>)
 801e1fc:	619a      	str	r2, [r3, #24]
 801e1fe:	e006      	b.n	801e20e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 801e200:	4a06      	ldr	r2, [pc, #24]	; (801e21c <reg_wizchip_cs_cbfunc+0x40>)
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 801e206:	4a05      	ldr	r2, [pc, #20]	; (801e21c <reg_wizchip_cs_cbfunc+0x40>)
 801e208:	683b      	ldr	r3, [r7, #0]
 801e20a:	6193      	str	r3, [r2, #24]
   }
}
 801e20c:	bf00      	nop
 801e20e:	bf00      	nop
 801e210:	370c      	adds	r7, #12
 801e212:	46bd      	mov	sp, r7
 801e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e218:	4770      	bx	lr
 801e21a:	bf00      	nop
 801e21c:	2000007c 	.word	0x2000007c
 801e220:	0801e161 	.word	0x0801e161
 801e224:	0801e16f 	.word	0x0801e16f

0801e228 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 801e228:	b480      	push	{r7}
 801e22a:	b083      	sub	sp, #12
 801e22c:	af00      	add	r7, sp, #0
 801e22e:	6078      	str	r0, [r7, #4]
 801e230:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 801e232:	bf00      	nop
 801e234:	4b0f      	ldr	r3, [pc, #60]	; (801e274 <reg_wizchip_spi_cbfunc+0x4c>)
 801e236:	881b      	ldrh	r3, [r3, #0]
 801e238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	d0f9      	beq.n	801e234 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	2b00      	cmp	r3, #0
 801e244:	d002      	beq.n	801e24c <reg_wizchip_spi_cbfunc+0x24>
 801e246:	683b      	ldr	r3, [r7, #0]
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d106      	bne.n	801e25a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801e24c:	4b09      	ldr	r3, [pc, #36]	; (801e274 <reg_wizchip_spi_cbfunc+0x4c>)
 801e24e:	4a0a      	ldr	r2, [pc, #40]	; (801e278 <reg_wizchip_spi_cbfunc+0x50>)
 801e250:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 801e252:	4b08      	ldr	r3, [pc, #32]	; (801e274 <reg_wizchip_spi_cbfunc+0x4c>)
 801e254:	4a09      	ldr	r2, [pc, #36]	; (801e27c <reg_wizchip_spi_cbfunc+0x54>)
 801e256:	621a      	str	r2, [r3, #32]
 801e258:	e006      	b.n	801e268 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 801e25a:	4a06      	ldr	r2, [pc, #24]	; (801e274 <reg_wizchip_spi_cbfunc+0x4c>)
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 801e260:	4a04      	ldr	r2, [pc, #16]	; (801e274 <reg_wizchip_spi_cbfunc+0x4c>)
 801e262:	683b      	ldr	r3, [r7, #0]
 801e264:	6213      	str	r3, [r2, #32]
   }
}
 801e266:	bf00      	nop
 801e268:	bf00      	nop
 801e26a:	370c      	adds	r7, #12
 801e26c:	46bd      	mov	sp, r7
 801e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e272:	4770      	bx	lr
 801e274:	2000007c 	.word	0x2000007c
 801e278:	0801e1b5 	.word	0x0801e1b5
 801e27c:	0801e1c5 	.word	0x0801e1c5

0801e280 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 801e280:	b580      	push	{r7, lr}
 801e282:	b086      	sub	sp, #24
 801e284:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801e286:	1d3b      	adds	r3, r7, #4
 801e288:	2206      	movs	r2, #6
 801e28a:	4619      	mov	r1, r3
 801e28c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801e290:	f7fe ffac 	bl	801d1ec <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801e294:	f107 0314 	add.w	r3, r7, #20
 801e298:	2204      	movs	r2, #4
 801e29a:	4619      	mov	r1, r3
 801e29c:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e2a0:	f7fe ffa4 	bl	801d1ec <WIZCHIP_READ_BUF>
 801e2a4:	f107 0310 	add.w	r3, r7, #16
 801e2a8:	2204      	movs	r2, #4
 801e2aa:	4619      	mov	r1, r3
 801e2ac:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801e2b0:	f7fe ff9c 	bl	801d1ec <WIZCHIP_READ_BUF>
 801e2b4:	f107 030c 	add.w	r3, r7, #12
 801e2b8:	2204      	movs	r2, #4
 801e2ba:	4619      	mov	r1, r3
 801e2bc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801e2c0:	f7fe ff94 	bl	801d1ec <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801e2c4:	2180      	movs	r1, #128	; 0x80
 801e2c6:	2000      	movs	r0, #0
 801e2c8:	f7fe ff42 	bl	801d150 <WIZCHIP_WRITE>
   getMR(); // for delay
 801e2cc:	2000      	movs	r0, #0
 801e2ce:	f7fe fef3 	bl	801d0b8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801e2d2:	1d3b      	adds	r3, r7, #4
 801e2d4:	2206      	movs	r2, #6
 801e2d6:	4619      	mov	r1, r3
 801e2d8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801e2dc:	f7fe ffe6 	bl	801d2ac <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801e2e0:	f107 0314 	add.w	r3, r7, #20
 801e2e4:	2204      	movs	r2, #4
 801e2e6:	4619      	mov	r1, r3
 801e2e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e2ec:	f7fe ffde 	bl	801d2ac <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801e2f0:	f107 0310 	add.w	r3, r7, #16
 801e2f4:	2204      	movs	r2, #4
 801e2f6:	4619      	mov	r1, r3
 801e2f8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801e2fc:	f7fe ffd6 	bl	801d2ac <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801e300:	f107 030c 	add.w	r3, r7, #12
 801e304:	2204      	movs	r2, #4
 801e306:	4619      	mov	r1, r3
 801e308:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801e30c:	f7fe ffce 	bl	801d2ac <WIZCHIP_WRITE_BUF>
}
 801e310:	bf00      	nop
 801e312:	3718      	adds	r7, #24
 801e314:	46bd      	mov	sp, r7
 801e316:	bd80      	pop	{r7, pc}

0801e318 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801e318:	b580      	push	{r7, lr}
 801e31a:	b084      	sub	sp, #16
 801e31c:	af00      	add	r7, sp, #0
 801e31e:	6078      	str	r0, [r7, #4]
 801e320:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 801e322:	2300      	movs	r3, #0
 801e324:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 801e326:	f7ff ffab 	bl	801e280 <wizchip_sw_reset>
   if(txsize)
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	d03b      	beq.n	801e3a8 <wizchip_init+0x90>
   {
      tmp = 0;
 801e330:	2300      	movs	r3, #0
 801e332:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801e334:	2300      	movs	r3, #0
 801e336:	73fb      	strb	r3, [r7, #15]
 801e338:	e015      	b.n	801e366 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 801e33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e33e:	687a      	ldr	r2, [r7, #4]
 801e340:	4413      	add	r3, r2
 801e342:	781a      	ldrb	r2, [r3, #0]
 801e344:	7bbb      	ldrb	r3, [r7, #14]
 801e346:	4413      	add	r3, r2
 801e348:	b2db      	uxtb	r3, r3
 801e34a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801e34c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801e350:	2b10      	cmp	r3, #16
 801e352:	dd02      	ble.n	801e35a <wizchip_init+0x42>
 801e354:	f04f 33ff 	mov.w	r3, #4294967295
 801e358:	e066      	b.n	801e428 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801e35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e35e:	b2db      	uxtb	r3, r3
 801e360:	3301      	adds	r3, #1
 801e362:	b2db      	uxtb	r3, r3
 801e364:	73fb      	strb	r3, [r7, #15]
 801e366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e36a:	2b07      	cmp	r3, #7
 801e36c:	dde5      	ble.n	801e33a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801e36e:	2300      	movs	r3, #0
 801e370:	73fb      	strb	r3, [r7, #15]
 801e372:	e015      	b.n	801e3a0 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801e374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e378:	009b      	lsls	r3, r3, #2
 801e37a:	3301      	adds	r3, #1
 801e37c:	00db      	lsls	r3, r3, #3
 801e37e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801e382:	4618      	mov	r0, r3
 801e384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e388:	687a      	ldr	r2, [r7, #4]
 801e38a:	4413      	add	r3, r2
 801e38c:	781b      	ldrb	r3, [r3, #0]
 801e38e:	4619      	mov	r1, r3
 801e390:	f7fe fede 	bl	801d150 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801e394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e398:	b2db      	uxtb	r3, r3
 801e39a:	3301      	adds	r3, #1
 801e39c:	b2db      	uxtb	r3, r3
 801e39e:	73fb      	strb	r3, [r7, #15]
 801e3a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e3a4:	2b07      	cmp	r3, #7
 801e3a6:	dde5      	ble.n	801e374 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801e3a8:	683b      	ldr	r3, [r7, #0]
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d03b      	beq.n	801e426 <wizchip_init+0x10e>
   {
      tmp = 0;
 801e3ae:	2300      	movs	r3, #0
 801e3b0:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801e3b2:	2300      	movs	r3, #0
 801e3b4:	73fb      	strb	r3, [r7, #15]
 801e3b6:	e015      	b.n	801e3e4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801e3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e3bc:	683a      	ldr	r2, [r7, #0]
 801e3be:	4413      	add	r3, r2
 801e3c0:	781a      	ldrb	r2, [r3, #0]
 801e3c2:	7bbb      	ldrb	r3, [r7, #14]
 801e3c4:	4413      	add	r3, r2
 801e3c6:	b2db      	uxtb	r3, r3
 801e3c8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801e3ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801e3ce:	2b10      	cmp	r3, #16
 801e3d0:	dd02      	ble.n	801e3d8 <wizchip_init+0xc0>
 801e3d2:	f04f 33ff 	mov.w	r3, #4294967295
 801e3d6:	e027      	b.n	801e428 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801e3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e3dc:	b2db      	uxtb	r3, r3
 801e3de:	3301      	adds	r3, #1
 801e3e0:	b2db      	uxtb	r3, r3
 801e3e2:	73fb      	strb	r3, [r7, #15]
 801e3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e3e8:	2b07      	cmp	r3, #7
 801e3ea:	dde5      	ble.n	801e3b8 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801e3ec:	2300      	movs	r3, #0
 801e3ee:	73fb      	strb	r3, [r7, #15]
 801e3f0:	e015      	b.n	801e41e <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801e3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e3f6:	009b      	lsls	r3, r3, #2
 801e3f8:	3301      	adds	r3, #1
 801e3fa:	00db      	lsls	r3, r3, #3
 801e3fc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801e400:	4618      	mov	r0, r3
 801e402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e406:	683a      	ldr	r2, [r7, #0]
 801e408:	4413      	add	r3, r2
 801e40a:	781b      	ldrb	r3, [r3, #0]
 801e40c:	4619      	mov	r1, r3
 801e40e:	f7fe fe9f 	bl	801d150 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801e412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e416:	b2db      	uxtb	r3, r3
 801e418:	3301      	adds	r3, #1
 801e41a:	b2db      	uxtb	r3, r3
 801e41c:	73fb      	strb	r3, [r7, #15]
 801e41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e422:	2b07      	cmp	r3, #7
 801e424:	dde5      	ble.n	801e3f2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801e426:	2300      	movs	r3, #0
}
 801e428:	4618      	mov	r0, r3
 801e42a:	3710      	adds	r7, #16
 801e42c:	46bd      	mov	sp, r7
 801e42e:	bd80      	pop	{r7, pc}

0801e430 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801e430:	b580      	push	{r7, lr}
 801e432:	b082      	sub	sp, #8
 801e434:	af00      	add	r7, sp, #0
 801e436:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	2206      	movs	r2, #6
 801e43c:	4619      	mov	r1, r3
 801e43e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801e442:	f7fe ff33 	bl	801d2ac <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	330e      	adds	r3, #14
 801e44a:	2204      	movs	r2, #4
 801e44c:	4619      	mov	r1, r3
 801e44e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e452:	f7fe ff2b 	bl	801d2ac <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	330a      	adds	r3, #10
 801e45a:	2204      	movs	r2, #4
 801e45c:	4619      	mov	r1, r3
 801e45e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801e462:	f7fe ff23 	bl	801d2ac <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	3306      	adds	r3, #6
 801e46a:	2204      	movs	r2, #4
 801e46c:	4619      	mov	r1, r3
 801e46e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801e472:	f7fe ff1b 	bl	801d2ac <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	7c9a      	ldrb	r2, [r3, #18]
 801e47a:	4b0b      	ldr	r3, [pc, #44]	; (801e4a8 <wizchip_setnetinfo+0x78>)
 801e47c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	7cda      	ldrb	r2, [r3, #19]
 801e482:	4b09      	ldr	r3, [pc, #36]	; (801e4a8 <wizchip_setnetinfo+0x78>)
 801e484:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	7d1a      	ldrb	r2, [r3, #20]
 801e48a:	4b07      	ldr	r3, [pc, #28]	; (801e4a8 <wizchip_setnetinfo+0x78>)
 801e48c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	7d5a      	ldrb	r2, [r3, #21]
 801e492:	4b05      	ldr	r3, [pc, #20]	; (801e4a8 <wizchip_setnetinfo+0x78>)
 801e494:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	7d9a      	ldrb	r2, [r3, #22]
 801e49a:	4b04      	ldr	r3, [pc, #16]	; (801e4ac <wizchip_setnetinfo+0x7c>)
 801e49c:	701a      	strb	r2, [r3, #0]
}
 801e49e:	bf00      	nop
 801e4a0:	3708      	adds	r7, #8
 801e4a2:	46bd      	mov	sp, r7
 801e4a4:	bd80      	pop	{r7, pc}
 801e4a6:	bf00      	nop
 801e4a8:	2000394c 	.word	0x2000394c
 801e4ac:	20003950 	.word	0x20003950

0801e4b0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801e4b0:	b580      	push	{r7, lr}
 801e4b2:	b082      	sub	sp, #8
 801e4b4:	af00      	add	r7, sp, #0
 801e4b6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	2206      	movs	r2, #6
 801e4bc:	4619      	mov	r1, r3
 801e4be:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801e4c2:	f7fe fe93 	bl	801d1ec <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	330e      	adds	r3, #14
 801e4ca:	2204      	movs	r2, #4
 801e4cc:	4619      	mov	r1, r3
 801e4ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e4d2:	f7fe fe8b 	bl	801d1ec <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	330a      	adds	r3, #10
 801e4da:	2204      	movs	r2, #4
 801e4dc:	4619      	mov	r1, r3
 801e4de:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801e4e2:	f7fe fe83 	bl	801d1ec <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	3306      	adds	r3, #6
 801e4ea:	2204      	movs	r2, #4
 801e4ec:	4619      	mov	r1, r3
 801e4ee:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801e4f2:	f7fe fe7b 	bl	801d1ec <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801e4f6:	4b0c      	ldr	r3, [pc, #48]	; (801e528 <wizchip_getnetinfo+0x78>)
 801e4f8:	781a      	ldrb	r2, [r3, #0]
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801e4fe:	4b0a      	ldr	r3, [pc, #40]	; (801e528 <wizchip_getnetinfo+0x78>)
 801e500:	785a      	ldrb	r2, [r3, #1]
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801e506:	4b08      	ldr	r3, [pc, #32]	; (801e528 <wizchip_getnetinfo+0x78>)
 801e508:	789a      	ldrb	r2, [r3, #2]
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801e50e:	4b06      	ldr	r3, [pc, #24]	; (801e528 <wizchip_getnetinfo+0x78>)
 801e510:	78da      	ldrb	r2, [r3, #3]
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801e516:	4b05      	ldr	r3, [pc, #20]	; (801e52c <wizchip_getnetinfo+0x7c>)
 801e518:	781a      	ldrb	r2, [r3, #0]
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	759a      	strb	r2, [r3, #22]
}
 801e51e:	bf00      	nop
 801e520:	3708      	adds	r7, #8
 801e522:	46bd      	mov	sp, r7
 801e524:	bd80      	pop	{r7, pc}
 801e526:	bf00      	nop
 801e528:	2000394c 	.word	0x2000394c
 801e52c:	20003950 	.word	0x20003950

0801e530 <calloc>:
 801e530:	4b02      	ldr	r3, [pc, #8]	; (801e53c <calloc+0xc>)
 801e532:	460a      	mov	r2, r1
 801e534:	4601      	mov	r1, r0
 801e536:	6818      	ldr	r0, [r3, #0]
 801e538:	f000 b87c 	b.w	801e634 <_calloc_r>
 801e53c:	200000a8 	.word	0x200000a8

0801e540 <__errno>:
 801e540:	4b01      	ldr	r3, [pc, #4]	; (801e548 <__errno+0x8>)
 801e542:	6818      	ldr	r0, [r3, #0]
 801e544:	4770      	bx	lr
 801e546:	bf00      	nop
 801e548:	200000a8 	.word	0x200000a8

0801e54c <__libc_init_array>:
 801e54c:	b570      	push	{r4, r5, r6, lr}
 801e54e:	4d0d      	ldr	r5, [pc, #52]	; (801e584 <__libc_init_array+0x38>)
 801e550:	4c0d      	ldr	r4, [pc, #52]	; (801e588 <__libc_init_array+0x3c>)
 801e552:	1b64      	subs	r4, r4, r5
 801e554:	10a4      	asrs	r4, r4, #2
 801e556:	2600      	movs	r6, #0
 801e558:	42a6      	cmp	r6, r4
 801e55a:	d109      	bne.n	801e570 <__libc_init_array+0x24>
 801e55c:	4d0b      	ldr	r5, [pc, #44]	; (801e58c <__libc_init_array+0x40>)
 801e55e:	4c0c      	ldr	r4, [pc, #48]	; (801e590 <__libc_init_array+0x44>)
 801e560:	f001 fc00 	bl	801fd64 <_init>
 801e564:	1b64      	subs	r4, r4, r5
 801e566:	10a4      	asrs	r4, r4, #2
 801e568:	2600      	movs	r6, #0
 801e56a:	42a6      	cmp	r6, r4
 801e56c:	d105      	bne.n	801e57a <__libc_init_array+0x2e>
 801e56e:	bd70      	pop	{r4, r5, r6, pc}
 801e570:	f855 3b04 	ldr.w	r3, [r5], #4
 801e574:	4798      	blx	r3
 801e576:	3601      	adds	r6, #1
 801e578:	e7ee      	b.n	801e558 <__libc_init_array+0xc>
 801e57a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e57e:	4798      	blx	r3
 801e580:	3601      	adds	r6, #1
 801e582:	e7f2      	b.n	801e56a <__libc_init_array+0x1e>
 801e584:	08025ba4 	.word	0x08025ba4
 801e588:	08025ba4 	.word	0x08025ba4
 801e58c:	08025ba4 	.word	0x08025ba4
 801e590:	08025ba8 	.word	0x08025ba8

0801e594 <malloc>:
 801e594:	4b02      	ldr	r3, [pc, #8]	; (801e5a0 <malloc+0xc>)
 801e596:	4601      	mov	r1, r0
 801e598:	6818      	ldr	r0, [r3, #0]
 801e59a:	f000 b8cd 	b.w	801e738 <_malloc_r>
 801e59e:	bf00      	nop
 801e5a0:	200000a8 	.word	0x200000a8

0801e5a4 <free>:
 801e5a4:	4b02      	ldr	r3, [pc, #8]	; (801e5b0 <free+0xc>)
 801e5a6:	4601      	mov	r1, r0
 801e5a8:	6818      	ldr	r0, [r3, #0]
 801e5aa:	f000 b859 	b.w	801e660 <_free_r>
 801e5ae:	bf00      	nop
 801e5b0:	200000a8 	.word	0x200000a8

0801e5b4 <memcmp>:
 801e5b4:	b510      	push	{r4, lr}
 801e5b6:	3901      	subs	r1, #1
 801e5b8:	4402      	add	r2, r0
 801e5ba:	4290      	cmp	r0, r2
 801e5bc:	d101      	bne.n	801e5c2 <memcmp+0xe>
 801e5be:	2000      	movs	r0, #0
 801e5c0:	e005      	b.n	801e5ce <memcmp+0x1a>
 801e5c2:	7803      	ldrb	r3, [r0, #0]
 801e5c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e5c8:	42a3      	cmp	r3, r4
 801e5ca:	d001      	beq.n	801e5d0 <memcmp+0x1c>
 801e5cc:	1b18      	subs	r0, r3, r4
 801e5ce:	bd10      	pop	{r4, pc}
 801e5d0:	3001      	adds	r0, #1
 801e5d2:	e7f2      	b.n	801e5ba <memcmp+0x6>

0801e5d4 <memcpy>:
 801e5d4:	440a      	add	r2, r1
 801e5d6:	4291      	cmp	r1, r2
 801e5d8:	f100 33ff 	add.w	r3, r0, #4294967295
 801e5dc:	d100      	bne.n	801e5e0 <memcpy+0xc>
 801e5de:	4770      	bx	lr
 801e5e0:	b510      	push	{r4, lr}
 801e5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e5e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e5ea:	4291      	cmp	r1, r2
 801e5ec:	d1f9      	bne.n	801e5e2 <memcpy+0xe>
 801e5ee:	bd10      	pop	{r4, pc}

0801e5f0 <memmove>:
 801e5f0:	4288      	cmp	r0, r1
 801e5f2:	b510      	push	{r4, lr}
 801e5f4:	eb01 0402 	add.w	r4, r1, r2
 801e5f8:	d902      	bls.n	801e600 <memmove+0x10>
 801e5fa:	4284      	cmp	r4, r0
 801e5fc:	4623      	mov	r3, r4
 801e5fe:	d807      	bhi.n	801e610 <memmove+0x20>
 801e600:	1e43      	subs	r3, r0, #1
 801e602:	42a1      	cmp	r1, r4
 801e604:	d008      	beq.n	801e618 <memmove+0x28>
 801e606:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e60a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e60e:	e7f8      	b.n	801e602 <memmove+0x12>
 801e610:	4402      	add	r2, r0
 801e612:	4601      	mov	r1, r0
 801e614:	428a      	cmp	r2, r1
 801e616:	d100      	bne.n	801e61a <memmove+0x2a>
 801e618:	bd10      	pop	{r4, pc}
 801e61a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e61e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e622:	e7f7      	b.n	801e614 <memmove+0x24>

0801e624 <memset>:
 801e624:	4402      	add	r2, r0
 801e626:	4603      	mov	r3, r0
 801e628:	4293      	cmp	r3, r2
 801e62a:	d100      	bne.n	801e62e <memset+0xa>
 801e62c:	4770      	bx	lr
 801e62e:	f803 1b01 	strb.w	r1, [r3], #1
 801e632:	e7f9      	b.n	801e628 <memset+0x4>

0801e634 <_calloc_r>:
 801e634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e636:	fba1 2402 	umull	r2, r4, r1, r2
 801e63a:	b94c      	cbnz	r4, 801e650 <_calloc_r+0x1c>
 801e63c:	4611      	mov	r1, r2
 801e63e:	9201      	str	r2, [sp, #4]
 801e640:	f000 f87a 	bl	801e738 <_malloc_r>
 801e644:	9a01      	ldr	r2, [sp, #4]
 801e646:	4605      	mov	r5, r0
 801e648:	b930      	cbnz	r0, 801e658 <_calloc_r+0x24>
 801e64a:	4628      	mov	r0, r5
 801e64c:	b003      	add	sp, #12
 801e64e:	bd30      	pop	{r4, r5, pc}
 801e650:	220c      	movs	r2, #12
 801e652:	6002      	str	r2, [r0, #0]
 801e654:	2500      	movs	r5, #0
 801e656:	e7f8      	b.n	801e64a <_calloc_r+0x16>
 801e658:	4621      	mov	r1, r4
 801e65a:	f7ff ffe3 	bl	801e624 <memset>
 801e65e:	e7f4      	b.n	801e64a <_calloc_r+0x16>

0801e660 <_free_r>:
 801e660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e662:	2900      	cmp	r1, #0
 801e664:	d044      	beq.n	801e6f0 <_free_r+0x90>
 801e666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e66a:	9001      	str	r0, [sp, #4]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	f1a1 0404 	sub.w	r4, r1, #4
 801e672:	bfb8      	it	lt
 801e674:	18e4      	addlt	r4, r4, r3
 801e676:	f000 fda7 	bl	801f1c8 <__malloc_lock>
 801e67a:	4a1e      	ldr	r2, [pc, #120]	; (801e6f4 <_free_r+0x94>)
 801e67c:	9801      	ldr	r0, [sp, #4]
 801e67e:	6813      	ldr	r3, [r2, #0]
 801e680:	b933      	cbnz	r3, 801e690 <_free_r+0x30>
 801e682:	6063      	str	r3, [r4, #4]
 801e684:	6014      	str	r4, [r2, #0]
 801e686:	b003      	add	sp, #12
 801e688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e68c:	f000 bda2 	b.w	801f1d4 <__malloc_unlock>
 801e690:	42a3      	cmp	r3, r4
 801e692:	d908      	bls.n	801e6a6 <_free_r+0x46>
 801e694:	6825      	ldr	r5, [r4, #0]
 801e696:	1961      	adds	r1, r4, r5
 801e698:	428b      	cmp	r3, r1
 801e69a:	bf01      	itttt	eq
 801e69c:	6819      	ldreq	r1, [r3, #0]
 801e69e:	685b      	ldreq	r3, [r3, #4]
 801e6a0:	1949      	addeq	r1, r1, r5
 801e6a2:	6021      	streq	r1, [r4, #0]
 801e6a4:	e7ed      	b.n	801e682 <_free_r+0x22>
 801e6a6:	461a      	mov	r2, r3
 801e6a8:	685b      	ldr	r3, [r3, #4]
 801e6aa:	b10b      	cbz	r3, 801e6b0 <_free_r+0x50>
 801e6ac:	42a3      	cmp	r3, r4
 801e6ae:	d9fa      	bls.n	801e6a6 <_free_r+0x46>
 801e6b0:	6811      	ldr	r1, [r2, #0]
 801e6b2:	1855      	adds	r5, r2, r1
 801e6b4:	42a5      	cmp	r5, r4
 801e6b6:	d10b      	bne.n	801e6d0 <_free_r+0x70>
 801e6b8:	6824      	ldr	r4, [r4, #0]
 801e6ba:	4421      	add	r1, r4
 801e6bc:	1854      	adds	r4, r2, r1
 801e6be:	42a3      	cmp	r3, r4
 801e6c0:	6011      	str	r1, [r2, #0]
 801e6c2:	d1e0      	bne.n	801e686 <_free_r+0x26>
 801e6c4:	681c      	ldr	r4, [r3, #0]
 801e6c6:	685b      	ldr	r3, [r3, #4]
 801e6c8:	6053      	str	r3, [r2, #4]
 801e6ca:	4421      	add	r1, r4
 801e6cc:	6011      	str	r1, [r2, #0]
 801e6ce:	e7da      	b.n	801e686 <_free_r+0x26>
 801e6d0:	d902      	bls.n	801e6d8 <_free_r+0x78>
 801e6d2:	230c      	movs	r3, #12
 801e6d4:	6003      	str	r3, [r0, #0]
 801e6d6:	e7d6      	b.n	801e686 <_free_r+0x26>
 801e6d8:	6825      	ldr	r5, [r4, #0]
 801e6da:	1961      	adds	r1, r4, r5
 801e6dc:	428b      	cmp	r3, r1
 801e6de:	bf04      	itt	eq
 801e6e0:	6819      	ldreq	r1, [r3, #0]
 801e6e2:	685b      	ldreq	r3, [r3, #4]
 801e6e4:	6063      	str	r3, [r4, #4]
 801e6e6:	bf04      	itt	eq
 801e6e8:	1949      	addeq	r1, r1, r5
 801e6ea:	6021      	streq	r1, [r4, #0]
 801e6ec:	6054      	str	r4, [r2, #4]
 801e6ee:	e7ca      	b.n	801e686 <_free_r+0x26>
 801e6f0:	b003      	add	sp, #12
 801e6f2:	bd30      	pop	{r4, r5, pc}
 801e6f4:	20003954 	.word	0x20003954

0801e6f8 <sbrk_aligned>:
 801e6f8:	b570      	push	{r4, r5, r6, lr}
 801e6fa:	4e0e      	ldr	r6, [pc, #56]	; (801e734 <sbrk_aligned+0x3c>)
 801e6fc:	460c      	mov	r4, r1
 801e6fe:	6831      	ldr	r1, [r6, #0]
 801e700:	4605      	mov	r5, r0
 801e702:	b911      	cbnz	r1, 801e70a <sbrk_aligned+0x12>
 801e704:	f000 f99c 	bl	801ea40 <_sbrk_r>
 801e708:	6030      	str	r0, [r6, #0]
 801e70a:	4621      	mov	r1, r4
 801e70c:	4628      	mov	r0, r5
 801e70e:	f000 f997 	bl	801ea40 <_sbrk_r>
 801e712:	1c43      	adds	r3, r0, #1
 801e714:	d00a      	beq.n	801e72c <sbrk_aligned+0x34>
 801e716:	1cc4      	adds	r4, r0, #3
 801e718:	f024 0403 	bic.w	r4, r4, #3
 801e71c:	42a0      	cmp	r0, r4
 801e71e:	d007      	beq.n	801e730 <sbrk_aligned+0x38>
 801e720:	1a21      	subs	r1, r4, r0
 801e722:	4628      	mov	r0, r5
 801e724:	f000 f98c 	bl	801ea40 <_sbrk_r>
 801e728:	3001      	adds	r0, #1
 801e72a:	d101      	bne.n	801e730 <sbrk_aligned+0x38>
 801e72c:	f04f 34ff 	mov.w	r4, #4294967295
 801e730:	4620      	mov	r0, r4
 801e732:	bd70      	pop	{r4, r5, r6, pc}
 801e734:	20003958 	.word	0x20003958

0801e738 <_malloc_r>:
 801e738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e73c:	1ccd      	adds	r5, r1, #3
 801e73e:	f025 0503 	bic.w	r5, r5, #3
 801e742:	3508      	adds	r5, #8
 801e744:	2d0c      	cmp	r5, #12
 801e746:	bf38      	it	cc
 801e748:	250c      	movcc	r5, #12
 801e74a:	2d00      	cmp	r5, #0
 801e74c:	4607      	mov	r7, r0
 801e74e:	db01      	blt.n	801e754 <_malloc_r+0x1c>
 801e750:	42a9      	cmp	r1, r5
 801e752:	d905      	bls.n	801e760 <_malloc_r+0x28>
 801e754:	230c      	movs	r3, #12
 801e756:	603b      	str	r3, [r7, #0]
 801e758:	2600      	movs	r6, #0
 801e75a:	4630      	mov	r0, r6
 801e75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e760:	4e2e      	ldr	r6, [pc, #184]	; (801e81c <_malloc_r+0xe4>)
 801e762:	f000 fd31 	bl	801f1c8 <__malloc_lock>
 801e766:	6833      	ldr	r3, [r6, #0]
 801e768:	461c      	mov	r4, r3
 801e76a:	bb34      	cbnz	r4, 801e7ba <_malloc_r+0x82>
 801e76c:	4629      	mov	r1, r5
 801e76e:	4638      	mov	r0, r7
 801e770:	f7ff ffc2 	bl	801e6f8 <sbrk_aligned>
 801e774:	1c43      	adds	r3, r0, #1
 801e776:	4604      	mov	r4, r0
 801e778:	d14d      	bne.n	801e816 <_malloc_r+0xde>
 801e77a:	6834      	ldr	r4, [r6, #0]
 801e77c:	4626      	mov	r6, r4
 801e77e:	2e00      	cmp	r6, #0
 801e780:	d140      	bne.n	801e804 <_malloc_r+0xcc>
 801e782:	6823      	ldr	r3, [r4, #0]
 801e784:	4631      	mov	r1, r6
 801e786:	4638      	mov	r0, r7
 801e788:	eb04 0803 	add.w	r8, r4, r3
 801e78c:	f000 f958 	bl	801ea40 <_sbrk_r>
 801e790:	4580      	cmp	r8, r0
 801e792:	d13a      	bne.n	801e80a <_malloc_r+0xd2>
 801e794:	6821      	ldr	r1, [r4, #0]
 801e796:	3503      	adds	r5, #3
 801e798:	1a6d      	subs	r5, r5, r1
 801e79a:	f025 0503 	bic.w	r5, r5, #3
 801e79e:	3508      	adds	r5, #8
 801e7a0:	2d0c      	cmp	r5, #12
 801e7a2:	bf38      	it	cc
 801e7a4:	250c      	movcc	r5, #12
 801e7a6:	4629      	mov	r1, r5
 801e7a8:	4638      	mov	r0, r7
 801e7aa:	f7ff ffa5 	bl	801e6f8 <sbrk_aligned>
 801e7ae:	3001      	adds	r0, #1
 801e7b0:	d02b      	beq.n	801e80a <_malloc_r+0xd2>
 801e7b2:	6823      	ldr	r3, [r4, #0]
 801e7b4:	442b      	add	r3, r5
 801e7b6:	6023      	str	r3, [r4, #0]
 801e7b8:	e00e      	b.n	801e7d8 <_malloc_r+0xa0>
 801e7ba:	6822      	ldr	r2, [r4, #0]
 801e7bc:	1b52      	subs	r2, r2, r5
 801e7be:	d41e      	bmi.n	801e7fe <_malloc_r+0xc6>
 801e7c0:	2a0b      	cmp	r2, #11
 801e7c2:	d916      	bls.n	801e7f2 <_malloc_r+0xba>
 801e7c4:	1961      	adds	r1, r4, r5
 801e7c6:	42a3      	cmp	r3, r4
 801e7c8:	6025      	str	r5, [r4, #0]
 801e7ca:	bf18      	it	ne
 801e7cc:	6059      	strne	r1, [r3, #4]
 801e7ce:	6863      	ldr	r3, [r4, #4]
 801e7d0:	bf08      	it	eq
 801e7d2:	6031      	streq	r1, [r6, #0]
 801e7d4:	5162      	str	r2, [r4, r5]
 801e7d6:	604b      	str	r3, [r1, #4]
 801e7d8:	4638      	mov	r0, r7
 801e7da:	f104 060b 	add.w	r6, r4, #11
 801e7de:	f000 fcf9 	bl	801f1d4 <__malloc_unlock>
 801e7e2:	f026 0607 	bic.w	r6, r6, #7
 801e7e6:	1d23      	adds	r3, r4, #4
 801e7e8:	1af2      	subs	r2, r6, r3
 801e7ea:	d0b6      	beq.n	801e75a <_malloc_r+0x22>
 801e7ec:	1b9b      	subs	r3, r3, r6
 801e7ee:	50a3      	str	r3, [r4, r2]
 801e7f0:	e7b3      	b.n	801e75a <_malloc_r+0x22>
 801e7f2:	6862      	ldr	r2, [r4, #4]
 801e7f4:	42a3      	cmp	r3, r4
 801e7f6:	bf0c      	ite	eq
 801e7f8:	6032      	streq	r2, [r6, #0]
 801e7fa:	605a      	strne	r2, [r3, #4]
 801e7fc:	e7ec      	b.n	801e7d8 <_malloc_r+0xa0>
 801e7fe:	4623      	mov	r3, r4
 801e800:	6864      	ldr	r4, [r4, #4]
 801e802:	e7b2      	b.n	801e76a <_malloc_r+0x32>
 801e804:	4634      	mov	r4, r6
 801e806:	6876      	ldr	r6, [r6, #4]
 801e808:	e7b9      	b.n	801e77e <_malloc_r+0x46>
 801e80a:	230c      	movs	r3, #12
 801e80c:	603b      	str	r3, [r7, #0]
 801e80e:	4638      	mov	r0, r7
 801e810:	f000 fce0 	bl	801f1d4 <__malloc_unlock>
 801e814:	e7a1      	b.n	801e75a <_malloc_r+0x22>
 801e816:	6025      	str	r5, [r4, #0]
 801e818:	e7de      	b.n	801e7d8 <_malloc_r+0xa0>
 801e81a:	bf00      	nop
 801e81c:	20003954 	.word	0x20003954

0801e820 <iprintf>:
 801e820:	b40f      	push	{r0, r1, r2, r3}
 801e822:	4b0a      	ldr	r3, [pc, #40]	; (801e84c <iprintf+0x2c>)
 801e824:	b513      	push	{r0, r1, r4, lr}
 801e826:	681c      	ldr	r4, [r3, #0]
 801e828:	b124      	cbz	r4, 801e834 <iprintf+0x14>
 801e82a:	69a3      	ldr	r3, [r4, #24]
 801e82c:	b913      	cbnz	r3, 801e834 <iprintf+0x14>
 801e82e:	4620      	mov	r0, r4
 801e830:	f000 fbb2 	bl	801ef98 <__sinit>
 801e834:	ab05      	add	r3, sp, #20
 801e836:	9a04      	ldr	r2, [sp, #16]
 801e838:	68a1      	ldr	r1, [r4, #8]
 801e83a:	9301      	str	r3, [sp, #4]
 801e83c:	4620      	mov	r0, r4
 801e83e:	f000 fe55 	bl	801f4ec <_vfiprintf_r>
 801e842:	b002      	add	sp, #8
 801e844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e848:	b004      	add	sp, #16
 801e84a:	4770      	bx	lr
 801e84c:	200000a8 	.word	0x200000a8

0801e850 <putchar>:
 801e850:	4b09      	ldr	r3, [pc, #36]	; (801e878 <putchar+0x28>)
 801e852:	b513      	push	{r0, r1, r4, lr}
 801e854:	681c      	ldr	r4, [r3, #0]
 801e856:	4601      	mov	r1, r0
 801e858:	b134      	cbz	r4, 801e868 <putchar+0x18>
 801e85a:	69a3      	ldr	r3, [r4, #24]
 801e85c:	b923      	cbnz	r3, 801e868 <putchar+0x18>
 801e85e:	9001      	str	r0, [sp, #4]
 801e860:	4620      	mov	r0, r4
 801e862:	f000 fb99 	bl	801ef98 <__sinit>
 801e866:	9901      	ldr	r1, [sp, #4]
 801e868:	68a2      	ldr	r2, [r4, #8]
 801e86a:	4620      	mov	r0, r4
 801e86c:	b002      	add	sp, #8
 801e86e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e872:	f001 b8ff 	b.w	801fa74 <_putc_r>
 801e876:	bf00      	nop
 801e878:	200000a8 	.word	0x200000a8

0801e87c <_puts_r>:
 801e87c:	b570      	push	{r4, r5, r6, lr}
 801e87e:	460e      	mov	r6, r1
 801e880:	4605      	mov	r5, r0
 801e882:	b118      	cbz	r0, 801e88c <_puts_r+0x10>
 801e884:	6983      	ldr	r3, [r0, #24]
 801e886:	b90b      	cbnz	r3, 801e88c <_puts_r+0x10>
 801e888:	f000 fb86 	bl	801ef98 <__sinit>
 801e88c:	69ab      	ldr	r3, [r5, #24]
 801e88e:	68ac      	ldr	r4, [r5, #8]
 801e890:	b913      	cbnz	r3, 801e898 <_puts_r+0x1c>
 801e892:	4628      	mov	r0, r5
 801e894:	f000 fb80 	bl	801ef98 <__sinit>
 801e898:	4b2c      	ldr	r3, [pc, #176]	; (801e94c <_puts_r+0xd0>)
 801e89a:	429c      	cmp	r4, r3
 801e89c:	d120      	bne.n	801e8e0 <_puts_r+0x64>
 801e89e:	686c      	ldr	r4, [r5, #4]
 801e8a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e8a2:	07db      	lsls	r3, r3, #31
 801e8a4:	d405      	bmi.n	801e8b2 <_puts_r+0x36>
 801e8a6:	89a3      	ldrh	r3, [r4, #12]
 801e8a8:	0598      	lsls	r0, r3, #22
 801e8aa:	d402      	bmi.n	801e8b2 <_puts_r+0x36>
 801e8ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e8ae:	f000 fc23 	bl	801f0f8 <__retarget_lock_acquire_recursive>
 801e8b2:	89a3      	ldrh	r3, [r4, #12]
 801e8b4:	0719      	lsls	r1, r3, #28
 801e8b6:	d51d      	bpl.n	801e8f4 <_puts_r+0x78>
 801e8b8:	6923      	ldr	r3, [r4, #16]
 801e8ba:	b1db      	cbz	r3, 801e8f4 <_puts_r+0x78>
 801e8bc:	3e01      	subs	r6, #1
 801e8be:	68a3      	ldr	r3, [r4, #8]
 801e8c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e8c4:	3b01      	subs	r3, #1
 801e8c6:	60a3      	str	r3, [r4, #8]
 801e8c8:	bb39      	cbnz	r1, 801e91a <_puts_r+0x9e>
 801e8ca:	2b00      	cmp	r3, #0
 801e8cc:	da38      	bge.n	801e940 <_puts_r+0xc4>
 801e8ce:	4622      	mov	r2, r4
 801e8d0:	210a      	movs	r1, #10
 801e8d2:	4628      	mov	r0, r5
 801e8d4:	f000 f968 	bl	801eba8 <__swbuf_r>
 801e8d8:	3001      	adds	r0, #1
 801e8da:	d011      	beq.n	801e900 <_puts_r+0x84>
 801e8dc:	250a      	movs	r5, #10
 801e8de:	e011      	b.n	801e904 <_puts_r+0x88>
 801e8e0:	4b1b      	ldr	r3, [pc, #108]	; (801e950 <_puts_r+0xd4>)
 801e8e2:	429c      	cmp	r4, r3
 801e8e4:	d101      	bne.n	801e8ea <_puts_r+0x6e>
 801e8e6:	68ac      	ldr	r4, [r5, #8]
 801e8e8:	e7da      	b.n	801e8a0 <_puts_r+0x24>
 801e8ea:	4b1a      	ldr	r3, [pc, #104]	; (801e954 <_puts_r+0xd8>)
 801e8ec:	429c      	cmp	r4, r3
 801e8ee:	bf08      	it	eq
 801e8f0:	68ec      	ldreq	r4, [r5, #12]
 801e8f2:	e7d5      	b.n	801e8a0 <_puts_r+0x24>
 801e8f4:	4621      	mov	r1, r4
 801e8f6:	4628      	mov	r0, r5
 801e8f8:	f000 f9a8 	bl	801ec4c <__swsetup_r>
 801e8fc:	2800      	cmp	r0, #0
 801e8fe:	d0dd      	beq.n	801e8bc <_puts_r+0x40>
 801e900:	f04f 35ff 	mov.w	r5, #4294967295
 801e904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e906:	07da      	lsls	r2, r3, #31
 801e908:	d405      	bmi.n	801e916 <_puts_r+0x9a>
 801e90a:	89a3      	ldrh	r3, [r4, #12]
 801e90c:	059b      	lsls	r3, r3, #22
 801e90e:	d402      	bmi.n	801e916 <_puts_r+0x9a>
 801e910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e912:	f000 fbf2 	bl	801f0fa <__retarget_lock_release_recursive>
 801e916:	4628      	mov	r0, r5
 801e918:	bd70      	pop	{r4, r5, r6, pc}
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	da04      	bge.n	801e928 <_puts_r+0xac>
 801e91e:	69a2      	ldr	r2, [r4, #24]
 801e920:	429a      	cmp	r2, r3
 801e922:	dc06      	bgt.n	801e932 <_puts_r+0xb6>
 801e924:	290a      	cmp	r1, #10
 801e926:	d004      	beq.n	801e932 <_puts_r+0xb6>
 801e928:	6823      	ldr	r3, [r4, #0]
 801e92a:	1c5a      	adds	r2, r3, #1
 801e92c:	6022      	str	r2, [r4, #0]
 801e92e:	7019      	strb	r1, [r3, #0]
 801e930:	e7c5      	b.n	801e8be <_puts_r+0x42>
 801e932:	4622      	mov	r2, r4
 801e934:	4628      	mov	r0, r5
 801e936:	f000 f937 	bl	801eba8 <__swbuf_r>
 801e93a:	3001      	adds	r0, #1
 801e93c:	d1bf      	bne.n	801e8be <_puts_r+0x42>
 801e93e:	e7df      	b.n	801e900 <_puts_r+0x84>
 801e940:	6823      	ldr	r3, [r4, #0]
 801e942:	250a      	movs	r5, #10
 801e944:	1c5a      	adds	r2, r3, #1
 801e946:	6022      	str	r2, [r4, #0]
 801e948:	701d      	strb	r5, [r3, #0]
 801e94a:	e7db      	b.n	801e904 <_puts_r+0x88>
 801e94c:	08025b28 	.word	0x08025b28
 801e950:	08025b48 	.word	0x08025b48
 801e954:	08025b08 	.word	0x08025b08

0801e958 <puts>:
 801e958:	4b02      	ldr	r3, [pc, #8]	; (801e964 <puts+0xc>)
 801e95a:	4601      	mov	r1, r0
 801e95c:	6818      	ldr	r0, [r3, #0]
 801e95e:	f7ff bf8d 	b.w	801e87c <_puts_r>
 801e962:	bf00      	nop
 801e964:	200000a8 	.word	0x200000a8

0801e968 <srand>:
 801e968:	b538      	push	{r3, r4, r5, lr}
 801e96a:	4b10      	ldr	r3, [pc, #64]	; (801e9ac <srand+0x44>)
 801e96c:	681d      	ldr	r5, [r3, #0]
 801e96e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e970:	4604      	mov	r4, r0
 801e972:	b9b3      	cbnz	r3, 801e9a2 <srand+0x3a>
 801e974:	2018      	movs	r0, #24
 801e976:	f7ff fe0d 	bl	801e594 <malloc>
 801e97a:	4602      	mov	r2, r0
 801e97c:	63a8      	str	r0, [r5, #56]	; 0x38
 801e97e:	b920      	cbnz	r0, 801e98a <srand+0x22>
 801e980:	4b0b      	ldr	r3, [pc, #44]	; (801e9b0 <srand+0x48>)
 801e982:	480c      	ldr	r0, [pc, #48]	; (801e9b4 <srand+0x4c>)
 801e984:	2142      	movs	r1, #66	; 0x42
 801e986:	f000 f9cf 	bl	801ed28 <__assert_func>
 801e98a:	490b      	ldr	r1, [pc, #44]	; (801e9b8 <srand+0x50>)
 801e98c:	4b0b      	ldr	r3, [pc, #44]	; (801e9bc <srand+0x54>)
 801e98e:	e9c0 1300 	strd	r1, r3, [r0]
 801e992:	4b0b      	ldr	r3, [pc, #44]	; (801e9c0 <srand+0x58>)
 801e994:	6083      	str	r3, [r0, #8]
 801e996:	230b      	movs	r3, #11
 801e998:	8183      	strh	r3, [r0, #12]
 801e99a:	2100      	movs	r1, #0
 801e99c:	2001      	movs	r0, #1
 801e99e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e9a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e9a4:	2200      	movs	r2, #0
 801e9a6:	611c      	str	r4, [r3, #16]
 801e9a8:	615a      	str	r2, [r3, #20]
 801e9aa:	bd38      	pop	{r3, r4, r5, pc}
 801e9ac:	200000a8 	.word	0x200000a8
 801e9b0:	08025a58 	.word	0x08025a58
 801e9b4:	08025a6f 	.word	0x08025a6f
 801e9b8:	abcd330e 	.word	0xabcd330e
 801e9bc:	e66d1234 	.word	0xe66d1234
 801e9c0:	0005deec 	.word	0x0005deec

0801e9c4 <rand>:
 801e9c4:	4b16      	ldr	r3, [pc, #88]	; (801ea20 <rand+0x5c>)
 801e9c6:	b510      	push	{r4, lr}
 801e9c8:	681c      	ldr	r4, [r3, #0]
 801e9ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e9cc:	b9b3      	cbnz	r3, 801e9fc <rand+0x38>
 801e9ce:	2018      	movs	r0, #24
 801e9d0:	f7ff fde0 	bl	801e594 <malloc>
 801e9d4:	63a0      	str	r0, [r4, #56]	; 0x38
 801e9d6:	b928      	cbnz	r0, 801e9e4 <rand+0x20>
 801e9d8:	4602      	mov	r2, r0
 801e9da:	4b12      	ldr	r3, [pc, #72]	; (801ea24 <rand+0x60>)
 801e9dc:	4812      	ldr	r0, [pc, #72]	; (801ea28 <rand+0x64>)
 801e9de:	214e      	movs	r1, #78	; 0x4e
 801e9e0:	f000 f9a2 	bl	801ed28 <__assert_func>
 801e9e4:	4a11      	ldr	r2, [pc, #68]	; (801ea2c <rand+0x68>)
 801e9e6:	4b12      	ldr	r3, [pc, #72]	; (801ea30 <rand+0x6c>)
 801e9e8:	e9c0 2300 	strd	r2, r3, [r0]
 801e9ec:	4b11      	ldr	r3, [pc, #68]	; (801ea34 <rand+0x70>)
 801e9ee:	6083      	str	r3, [r0, #8]
 801e9f0:	230b      	movs	r3, #11
 801e9f2:	8183      	strh	r3, [r0, #12]
 801e9f4:	2201      	movs	r2, #1
 801e9f6:	2300      	movs	r3, #0
 801e9f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e9fc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801e9fe:	4a0e      	ldr	r2, [pc, #56]	; (801ea38 <rand+0x74>)
 801ea00:	6920      	ldr	r0, [r4, #16]
 801ea02:	6963      	ldr	r3, [r4, #20]
 801ea04:	490d      	ldr	r1, [pc, #52]	; (801ea3c <rand+0x78>)
 801ea06:	4342      	muls	r2, r0
 801ea08:	fb01 2203 	mla	r2, r1, r3, r2
 801ea0c:	fba0 0101 	umull	r0, r1, r0, r1
 801ea10:	1c43      	adds	r3, r0, #1
 801ea12:	eb42 0001 	adc.w	r0, r2, r1
 801ea16:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801ea1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ea1e:	bd10      	pop	{r4, pc}
 801ea20:	200000a8 	.word	0x200000a8
 801ea24:	08025a58 	.word	0x08025a58
 801ea28:	08025a6f 	.word	0x08025a6f
 801ea2c:	abcd330e 	.word	0xabcd330e
 801ea30:	e66d1234 	.word	0xe66d1234
 801ea34:	0005deec 	.word	0x0005deec
 801ea38:	5851f42d 	.word	0x5851f42d
 801ea3c:	4c957f2d 	.word	0x4c957f2d

0801ea40 <_sbrk_r>:
 801ea40:	b538      	push	{r3, r4, r5, lr}
 801ea42:	4d06      	ldr	r5, [pc, #24]	; (801ea5c <_sbrk_r+0x1c>)
 801ea44:	2300      	movs	r3, #0
 801ea46:	4604      	mov	r4, r0
 801ea48:	4608      	mov	r0, r1
 801ea4a:	602b      	str	r3, [r5, #0]
 801ea4c:	f7e2 ff48 	bl	80018e0 <_sbrk>
 801ea50:	1c43      	adds	r3, r0, #1
 801ea52:	d102      	bne.n	801ea5a <_sbrk_r+0x1a>
 801ea54:	682b      	ldr	r3, [r5, #0]
 801ea56:	b103      	cbz	r3, 801ea5a <_sbrk_r+0x1a>
 801ea58:	6023      	str	r3, [r4, #0]
 801ea5a:	bd38      	pop	{r3, r4, r5, pc}
 801ea5c:	20003960 	.word	0x20003960

0801ea60 <sniprintf>:
 801ea60:	b40c      	push	{r2, r3}
 801ea62:	b530      	push	{r4, r5, lr}
 801ea64:	4b17      	ldr	r3, [pc, #92]	; (801eac4 <sniprintf+0x64>)
 801ea66:	1e0c      	subs	r4, r1, #0
 801ea68:	681d      	ldr	r5, [r3, #0]
 801ea6a:	b09d      	sub	sp, #116	; 0x74
 801ea6c:	da08      	bge.n	801ea80 <sniprintf+0x20>
 801ea6e:	238b      	movs	r3, #139	; 0x8b
 801ea70:	602b      	str	r3, [r5, #0]
 801ea72:	f04f 30ff 	mov.w	r0, #4294967295
 801ea76:	b01d      	add	sp, #116	; 0x74
 801ea78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ea7c:	b002      	add	sp, #8
 801ea7e:	4770      	bx	lr
 801ea80:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ea84:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ea88:	bf14      	ite	ne
 801ea8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ea8e:	4623      	moveq	r3, r4
 801ea90:	9304      	str	r3, [sp, #16]
 801ea92:	9307      	str	r3, [sp, #28]
 801ea94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ea98:	9002      	str	r0, [sp, #8]
 801ea9a:	9006      	str	r0, [sp, #24]
 801ea9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801eaa0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801eaa2:	ab21      	add	r3, sp, #132	; 0x84
 801eaa4:	a902      	add	r1, sp, #8
 801eaa6:	4628      	mov	r0, r5
 801eaa8:	9301      	str	r3, [sp, #4]
 801eaaa:	f000 fbf5 	bl	801f298 <_svfiprintf_r>
 801eaae:	1c43      	adds	r3, r0, #1
 801eab0:	bfbc      	itt	lt
 801eab2:	238b      	movlt	r3, #139	; 0x8b
 801eab4:	602b      	strlt	r3, [r5, #0]
 801eab6:	2c00      	cmp	r4, #0
 801eab8:	d0dd      	beq.n	801ea76 <sniprintf+0x16>
 801eaba:	9b02      	ldr	r3, [sp, #8]
 801eabc:	2200      	movs	r2, #0
 801eabe:	701a      	strb	r2, [r3, #0]
 801eac0:	e7d9      	b.n	801ea76 <sniprintf+0x16>
 801eac2:	bf00      	nop
 801eac4:	200000a8 	.word	0x200000a8

0801eac8 <siprintf>:
 801eac8:	b40e      	push	{r1, r2, r3}
 801eaca:	b500      	push	{lr}
 801eacc:	b09c      	sub	sp, #112	; 0x70
 801eace:	ab1d      	add	r3, sp, #116	; 0x74
 801ead0:	9002      	str	r0, [sp, #8]
 801ead2:	9006      	str	r0, [sp, #24]
 801ead4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ead8:	4809      	ldr	r0, [pc, #36]	; (801eb00 <siprintf+0x38>)
 801eada:	9107      	str	r1, [sp, #28]
 801eadc:	9104      	str	r1, [sp, #16]
 801eade:	4909      	ldr	r1, [pc, #36]	; (801eb04 <siprintf+0x3c>)
 801eae0:	f853 2b04 	ldr.w	r2, [r3], #4
 801eae4:	9105      	str	r1, [sp, #20]
 801eae6:	6800      	ldr	r0, [r0, #0]
 801eae8:	9301      	str	r3, [sp, #4]
 801eaea:	a902      	add	r1, sp, #8
 801eaec:	f000 fbd4 	bl	801f298 <_svfiprintf_r>
 801eaf0:	9b02      	ldr	r3, [sp, #8]
 801eaf2:	2200      	movs	r2, #0
 801eaf4:	701a      	strb	r2, [r3, #0]
 801eaf6:	b01c      	add	sp, #112	; 0x70
 801eaf8:	f85d eb04 	ldr.w	lr, [sp], #4
 801eafc:	b003      	add	sp, #12
 801eafe:	4770      	bx	lr
 801eb00:	200000a8 	.word	0x200000a8
 801eb04:	ffff0208 	.word	0xffff0208

0801eb08 <strstr>:
 801eb08:	780a      	ldrb	r2, [r1, #0]
 801eb0a:	b570      	push	{r4, r5, r6, lr}
 801eb0c:	b96a      	cbnz	r2, 801eb2a <strstr+0x22>
 801eb0e:	bd70      	pop	{r4, r5, r6, pc}
 801eb10:	429a      	cmp	r2, r3
 801eb12:	d109      	bne.n	801eb28 <strstr+0x20>
 801eb14:	460c      	mov	r4, r1
 801eb16:	4605      	mov	r5, r0
 801eb18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	d0f6      	beq.n	801eb0e <strstr+0x6>
 801eb20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801eb24:	429e      	cmp	r6, r3
 801eb26:	d0f7      	beq.n	801eb18 <strstr+0x10>
 801eb28:	3001      	adds	r0, #1
 801eb2a:	7803      	ldrb	r3, [r0, #0]
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d1ef      	bne.n	801eb10 <strstr+0x8>
 801eb30:	4618      	mov	r0, r3
 801eb32:	e7ec      	b.n	801eb0e <strstr+0x6>

0801eb34 <_vsniprintf_r>:
 801eb34:	b530      	push	{r4, r5, lr}
 801eb36:	4614      	mov	r4, r2
 801eb38:	2c00      	cmp	r4, #0
 801eb3a:	b09b      	sub	sp, #108	; 0x6c
 801eb3c:	4605      	mov	r5, r0
 801eb3e:	461a      	mov	r2, r3
 801eb40:	da05      	bge.n	801eb4e <_vsniprintf_r+0x1a>
 801eb42:	238b      	movs	r3, #139	; 0x8b
 801eb44:	6003      	str	r3, [r0, #0]
 801eb46:	f04f 30ff 	mov.w	r0, #4294967295
 801eb4a:	b01b      	add	sp, #108	; 0x6c
 801eb4c:	bd30      	pop	{r4, r5, pc}
 801eb4e:	f44f 7302 	mov.w	r3, #520	; 0x208
 801eb52:	f8ad 300c 	strh.w	r3, [sp, #12]
 801eb56:	bf14      	ite	ne
 801eb58:	f104 33ff 	addne.w	r3, r4, #4294967295
 801eb5c:	4623      	moveq	r3, r4
 801eb5e:	9302      	str	r3, [sp, #8]
 801eb60:	9305      	str	r3, [sp, #20]
 801eb62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801eb66:	9100      	str	r1, [sp, #0]
 801eb68:	9104      	str	r1, [sp, #16]
 801eb6a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801eb6e:	4669      	mov	r1, sp
 801eb70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801eb72:	f000 fb91 	bl	801f298 <_svfiprintf_r>
 801eb76:	1c43      	adds	r3, r0, #1
 801eb78:	bfbc      	itt	lt
 801eb7a:	238b      	movlt	r3, #139	; 0x8b
 801eb7c:	602b      	strlt	r3, [r5, #0]
 801eb7e:	2c00      	cmp	r4, #0
 801eb80:	d0e3      	beq.n	801eb4a <_vsniprintf_r+0x16>
 801eb82:	9b00      	ldr	r3, [sp, #0]
 801eb84:	2200      	movs	r2, #0
 801eb86:	701a      	strb	r2, [r3, #0]
 801eb88:	e7df      	b.n	801eb4a <_vsniprintf_r+0x16>
	...

0801eb8c <vsniprintf>:
 801eb8c:	b507      	push	{r0, r1, r2, lr}
 801eb8e:	9300      	str	r3, [sp, #0]
 801eb90:	4613      	mov	r3, r2
 801eb92:	460a      	mov	r2, r1
 801eb94:	4601      	mov	r1, r0
 801eb96:	4803      	ldr	r0, [pc, #12]	; (801eba4 <vsniprintf+0x18>)
 801eb98:	6800      	ldr	r0, [r0, #0]
 801eb9a:	f7ff ffcb 	bl	801eb34 <_vsniprintf_r>
 801eb9e:	b003      	add	sp, #12
 801eba0:	f85d fb04 	ldr.w	pc, [sp], #4
 801eba4:	200000a8 	.word	0x200000a8

0801eba8 <__swbuf_r>:
 801eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebaa:	460e      	mov	r6, r1
 801ebac:	4614      	mov	r4, r2
 801ebae:	4605      	mov	r5, r0
 801ebb0:	b118      	cbz	r0, 801ebba <__swbuf_r+0x12>
 801ebb2:	6983      	ldr	r3, [r0, #24]
 801ebb4:	b90b      	cbnz	r3, 801ebba <__swbuf_r+0x12>
 801ebb6:	f000 f9ef 	bl	801ef98 <__sinit>
 801ebba:	4b21      	ldr	r3, [pc, #132]	; (801ec40 <__swbuf_r+0x98>)
 801ebbc:	429c      	cmp	r4, r3
 801ebbe:	d12b      	bne.n	801ec18 <__swbuf_r+0x70>
 801ebc0:	686c      	ldr	r4, [r5, #4]
 801ebc2:	69a3      	ldr	r3, [r4, #24]
 801ebc4:	60a3      	str	r3, [r4, #8]
 801ebc6:	89a3      	ldrh	r3, [r4, #12]
 801ebc8:	071a      	lsls	r2, r3, #28
 801ebca:	d52f      	bpl.n	801ec2c <__swbuf_r+0x84>
 801ebcc:	6923      	ldr	r3, [r4, #16]
 801ebce:	b36b      	cbz	r3, 801ec2c <__swbuf_r+0x84>
 801ebd0:	6923      	ldr	r3, [r4, #16]
 801ebd2:	6820      	ldr	r0, [r4, #0]
 801ebd4:	1ac0      	subs	r0, r0, r3
 801ebd6:	6963      	ldr	r3, [r4, #20]
 801ebd8:	b2f6      	uxtb	r6, r6
 801ebda:	4283      	cmp	r3, r0
 801ebdc:	4637      	mov	r7, r6
 801ebde:	dc04      	bgt.n	801ebea <__swbuf_r+0x42>
 801ebe0:	4621      	mov	r1, r4
 801ebe2:	4628      	mov	r0, r5
 801ebe4:	f000 f944 	bl	801ee70 <_fflush_r>
 801ebe8:	bb30      	cbnz	r0, 801ec38 <__swbuf_r+0x90>
 801ebea:	68a3      	ldr	r3, [r4, #8]
 801ebec:	3b01      	subs	r3, #1
 801ebee:	60a3      	str	r3, [r4, #8]
 801ebf0:	6823      	ldr	r3, [r4, #0]
 801ebf2:	1c5a      	adds	r2, r3, #1
 801ebf4:	6022      	str	r2, [r4, #0]
 801ebf6:	701e      	strb	r6, [r3, #0]
 801ebf8:	6963      	ldr	r3, [r4, #20]
 801ebfa:	3001      	adds	r0, #1
 801ebfc:	4283      	cmp	r3, r0
 801ebfe:	d004      	beq.n	801ec0a <__swbuf_r+0x62>
 801ec00:	89a3      	ldrh	r3, [r4, #12]
 801ec02:	07db      	lsls	r3, r3, #31
 801ec04:	d506      	bpl.n	801ec14 <__swbuf_r+0x6c>
 801ec06:	2e0a      	cmp	r6, #10
 801ec08:	d104      	bne.n	801ec14 <__swbuf_r+0x6c>
 801ec0a:	4621      	mov	r1, r4
 801ec0c:	4628      	mov	r0, r5
 801ec0e:	f000 f92f 	bl	801ee70 <_fflush_r>
 801ec12:	b988      	cbnz	r0, 801ec38 <__swbuf_r+0x90>
 801ec14:	4638      	mov	r0, r7
 801ec16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec18:	4b0a      	ldr	r3, [pc, #40]	; (801ec44 <__swbuf_r+0x9c>)
 801ec1a:	429c      	cmp	r4, r3
 801ec1c:	d101      	bne.n	801ec22 <__swbuf_r+0x7a>
 801ec1e:	68ac      	ldr	r4, [r5, #8]
 801ec20:	e7cf      	b.n	801ebc2 <__swbuf_r+0x1a>
 801ec22:	4b09      	ldr	r3, [pc, #36]	; (801ec48 <__swbuf_r+0xa0>)
 801ec24:	429c      	cmp	r4, r3
 801ec26:	bf08      	it	eq
 801ec28:	68ec      	ldreq	r4, [r5, #12]
 801ec2a:	e7ca      	b.n	801ebc2 <__swbuf_r+0x1a>
 801ec2c:	4621      	mov	r1, r4
 801ec2e:	4628      	mov	r0, r5
 801ec30:	f000 f80c 	bl	801ec4c <__swsetup_r>
 801ec34:	2800      	cmp	r0, #0
 801ec36:	d0cb      	beq.n	801ebd0 <__swbuf_r+0x28>
 801ec38:	f04f 37ff 	mov.w	r7, #4294967295
 801ec3c:	e7ea      	b.n	801ec14 <__swbuf_r+0x6c>
 801ec3e:	bf00      	nop
 801ec40:	08025b28 	.word	0x08025b28
 801ec44:	08025b48 	.word	0x08025b48
 801ec48:	08025b08 	.word	0x08025b08

0801ec4c <__swsetup_r>:
 801ec4c:	4b32      	ldr	r3, [pc, #200]	; (801ed18 <__swsetup_r+0xcc>)
 801ec4e:	b570      	push	{r4, r5, r6, lr}
 801ec50:	681d      	ldr	r5, [r3, #0]
 801ec52:	4606      	mov	r6, r0
 801ec54:	460c      	mov	r4, r1
 801ec56:	b125      	cbz	r5, 801ec62 <__swsetup_r+0x16>
 801ec58:	69ab      	ldr	r3, [r5, #24]
 801ec5a:	b913      	cbnz	r3, 801ec62 <__swsetup_r+0x16>
 801ec5c:	4628      	mov	r0, r5
 801ec5e:	f000 f99b 	bl	801ef98 <__sinit>
 801ec62:	4b2e      	ldr	r3, [pc, #184]	; (801ed1c <__swsetup_r+0xd0>)
 801ec64:	429c      	cmp	r4, r3
 801ec66:	d10f      	bne.n	801ec88 <__swsetup_r+0x3c>
 801ec68:	686c      	ldr	r4, [r5, #4]
 801ec6a:	89a3      	ldrh	r3, [r4, #12]
 801ec6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ec70:	0719      	lsls	r1, r3, #28
 801ec72:	d42c      	bmi.n	801ecce <__swsetup_r+0x82>
 801ec74:	06dd      	lsls	r5, r3, #27
 801ec76:	d411      	bmi.n	801ec9c <__swsetup_r+0x50>
 801ec78:	2309      	movs	r3, #9
 801ec7a:	6033      	str	r3, [r6, #0]
 801ec7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ec80:	81a3      	strh	r3, [r4, #12]
 801ec82:	f04f 30ff 	mov.w	r0, #4294967295
 801ec86:	e03e      	b.n	801ed06 <__swsetup_r+0xba>
 801ec88:	4b25      	ldr	r3, [pc, #148]	; (801ed20 <__swsetup_r+0xd4>)
 801ec8a:	429c      	cmp	r4, r3
 801ec8c:	d101      	bne.n	801ec92 <__swsetup_r+0x46>
 801ec8e:	68ac      	ldr	r4, [r5, #8]
 801ec90:	e7eb      	b.n	801ec6a <__swsetup_r+0x1e>
 801ec92:	4b24      	ldr	r3, [pc, #144]	; (801ed24 <__swsetup_r+0xd8>)
 801ec94:	429c      	cmp	r4, r3
 801ec96:	bf08      	it	eq
 801ec98:	68ec      	ldreq	r4, [r5, #12]
 801ec9a:	e7e6      	b.n	801ec6a <__swsetup_r+0x1e>
 801ec9c:	0758      	lsls	r0, r3, #29
 801ec9e:	d512      	bpl.n	801ecc6 <__swsetup_r+0x7a>
 801eca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801eca2:	b141      	cbz	r1, 801ecb6 <__swsetup_r+0x6a>
 801eca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eca8:	4299      	cmp	r1, r3
 801ecaa:	d002      	beq.n	801ecb2 <__swsetup_r+0x66>
 801ecac:	4630      	mov	r0, r6
 801ecae:	f7ff fcd7 	bl	801e660 <_free_r>
 801ecb2:	2300      	movs	r3, #0
 801ecb4:	6363      	str	r3, [r4, #52]	; 0x34
 801ecb6:	89a3      	ldrh	r3, [r4, #12]
 801ecb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ecbc:	81a3      	strh	r3, [r4, #12]
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	6063      	str	r3, [r4, #4]
 801ecc2:	6923      	ldr	r3, [r4, #16]
 801ecc4:	6023      	str	r3, [r4, #0]
 801ecc6:	89a3      	ldrh	r3, [r4, #12]
 801ecc8:	f043 0308 	orr.w	r3, r3, #8
 801eccc:	81a3      	strh	r3, [r4, #12]
 801ecce:	6923      	ldr	r3, [r4, #16]
 801ecd0:	b94b      	cbnz	r3, 801ece6 <__swsetup_r+0x9a>
 801ecd2:	89a3      	ldrh	r3, [r4, #12]
 801ecd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ecd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ecdc:	d003      	beq.n	801ece6 <__swsetup_r+0x9a>
 801ecde:	4621      	mov	r1, r4
 801ece0:	4630      	mov	r0, r6
 801ece2:	f000 fa31 	bl	801f148 <__smakebuf_r>
 801ece6:	89a0      	ldrh	r0, [r4, #12]
 801ece8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ecec:	f010 0301 	ands.w	r3, r0, #1
 801ecf0:	d00a      	beq.n	801ed08 <__swsetup_r+0xbc>
 801ecf2:	2300      	movs	r3, #0
 801ecf4:	60a3      	str	r3, [r4, #8]
 801ecf6:	6963      	ldr	r3, [r4, #20]
 801ecf8:	425b      	negs	r3, r3
 801ecfa:	61a3      	str	r3, [r4, #24]
 801ecfc:	6923      	ldr	r3, [r4, #16]
 801ecfe:	b943      	cbnz	r3, 801ed12 <__swsetup_r+0xc6>
 801ed00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ed04:	d1ba      	bne.n	801ec7c <__swsetup_r+0x30>
 801ed06:	bd70      	pop	{r4, r5, r6, pc}
 801ed08:	0781      	lsls	r1, r0, #30
 801ed0a:	bf58      	it	pl
 801ed0c:	6963      	ldrpl	r3, [r4, #20]
 801ed0e:	60a3      	str	r3, [r4, #8]
 801ed10:	e7f4      	b.n	801ecfc <__swsetup_r+0xb0>
 801ed12:	2000      	movs	r0, #0
 801ed14:	e7f7      	b.n	801ed06 <__swsetup_r+0xba>
 801ed16:	bf00      	nop
 801ed18:	200000a8 	.word	0x200000a8
 801ed1c:	08025b28 	.word	0x08025b28
 801ed20:	08025b48 	.word	0x08025b48
 801ed24:	08025b08 	.word	0x08025b08

0801ed28 <__assert_func>:
 801ed28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ed2a:	4614      	mov	r4, r2
 801ed2c:	461a      	mov	r2, r3
 801ed2e:	4b09      	ldr	r3, [pc, #36]	; (801ed54 <__assert_func+0x2c>)
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	4605      	mov	r5, r0
 801ed34:	68d8      	ldr	r0, [r3, #12]
 801ed36:	b14c      	cbz	r4, 801ed4c <__assert_func+0x24>
 801ed38:	4b07      	ldr	r3, [pc, #28]	; (801ed58 <__assert_func+0x30>)
 801ed3a:	9100      	str	r1, [sp, #0]
 801ed3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ed40:	4906      	ldr	r1, [pc, #24]	; (801ed5c <__assert_func+0x34>)
 801ed42:	462b      	mov	r3, r5
 801ed44:	f000 f9a6 	bl	801f094 <fiprintf>
 801ed48:	f000 ff32 	bl	801fbb0 <abort>
 801ed4c:	4b04      	ldr	r3, [pc, #16]	; (801ed60 <__assert_func+0x38>)
 801ed4e:	461c      	mov	r4, r3
 801ed50:	e7f3      	b.n	801ed3a <__assert_func+0x12>
 801ed52:	bf00      	nop
 801ed54:	200000a8 	.word	0x200000a8
 801ed58:	08025aca 	.word	0x08025aca
 801ed5c:	08025ad7 	.word	0x08025ad7
 801ed60:	08025b05 	.word	0x08025b05

0801ed64 <__sflush_r>:
 801ed64:	898a      	ldrh	r2, [r1, #12]
 801ed66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed6a:	4605      	mov	r5, r0
 801ed6c:	0710      	lsls	r0, r2, #28
 801ed6e:	460c      	mov	r4, r1
 801ed70:	d458      	bmi.n	801ee24 <__sflush_r+0xc0>
 801ed72:	684b      	ldr	r3, [r1, #4]
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	dc05      	bgt.n	801ed84 <__sflush_r+0x20>
 801ed78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ed7a:	2b00      	cmp	r3, #0
 801ed7c:	dc02      	bgt.n	801ed84 <__sflush_r+0x20>
 801ed7e:	2000      	movs	r0, #0
 801ed80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ed86:	2e00      	cmp	r6, #0
 801ed88:	d0f9      	beq.n	801ed7e <__sflush_r+0x1a>
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ed90:	682f      	ldr	r7, [r5, #0]
 801ed92:	602b      	str	r3, [r5, #0]
 801ed94:	d032      	beq.n	801edfc <__sflush_r+0x98>
 801ed96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ed98:	89a3      	ldrh	r3, [r4, #12]
 801ed9a:	075a      	lsls	r2, r3, #29
 801ed9c:	d505      	bpl.n	801edaa <__sflush_r+0x46>
 801ed9e:	6863      	ldr	r3, [r4, #4]
 801eda0:	1ac0      	subs	r0, r0, r3
 801eda2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eda4:	b10b      	cbz	r3, 801edaa <__sflush_r+0x46>
 801eda6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eda8:	1ac0      	subs	r0, r0, r3
 801edaa:	2300      	movs	r3, #0
 801edac:	4602      	mov	r2, r0
 801edae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801edb0:	6a21      	ldr	r1, [r4, #32]
 801edb2:	4628      	mov	r0, r5
 801edb4:	47b0      	blx	r6
 801edb6:	1c43      	adds	r3, r0, #1
 801edb8:	89a3      	ldrh	r3, [r4, #12]
 801edba:	d106      	bne.n	801edca <__sflush_r+0x66>
 801edbc:	6829      	ldr	r1, [r5, #0]
 801edbe:	291d      	cmp	r1, #29
 801edc0:	d82c      	bhi.n	801ee1c <__sflush_r+0xb8>
 801edc2:	4a2a      	ldr	r2, [pc, #168]	; (801ee6c <__sflush_r+0x108>)
 801edc4:	40ca      	lsrs	r2, r1
 801edc6:	07d6      	lsls	r6, r2, #31
 801edc8:	d528      	bpl.n	801ee1c <__sflush_r+0xb8>
 801edca:	2200      	movs	r2, #0
 801edcc:	6062      	str	r2, [r4, #4]
 801edce:	04d9      	lsls	r1, r3, #19
 801edd0:	6922      	ldr	r2, [r4, #16]
 801edd2:	6022      	str	r2, [r4, #0]
 801edd4:	d504      	bpl.n	801ede0 <__sflush_r+0x7c>
 801edd6:	1c42      	adds	r2, r0, #1
 801edd8:	d101      	bne.n	801edde <__sflush_r+0x7a>
 801edda:	682b      	ldr	r3, [r5, #0]
 801eddc:	b903      	cbnz	r3, 801ede0 <__sflush_r+0x7c>
 801edde:	6560      	str	r0, [r4, #84]	; 0x54
 801ede0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ede2:	602f      	str	r7, [r5, #0]
 801ede4:	2900      	cmp	r1, #0
 801ede6:	d0ca      	beq.n	801ed7e <__sflush_r+0x1a>
 801ede8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801edec:	4299      	cmp	r1, r3
 801edee:	d002      	beq.n	801edf6 <__sflush_r+0x92>
 801edf0:	4628      	mov	r0, r5
 801edf2:	f7ff fc35 	bl	801e660 <_free_r>
 801edf6:	2000      	movs	r0, #0
 801edf8:	6360      	str	r0, [r4, #52]	; 0x34
 801edfa:	e7c1      	b.n	801ed80 <__sflush_r+0x1c>
 801edfc:	6a21      	ldr	r1, [r4, #32]
 801edfe:	2301      	movs	r3, #1
 801ee00:	4628      	mov	r0, r5
 801ee02:	47b0      	blx	r6
 801ee04:	1c41      	adds	r1, r0, #1
 801ee06:	d1c7      	bne.n	801ed98 <__sflush_r+0x34>
 801ee08:	682b      	ldr	r3, [r5, #0]
 801ee0a:	2b00      	cmp	r3, #0
 801ee0c:	d0c4      	beq.n	801ed98 <__sflush_r+0x34>
 801ee0e:	2b1d      	cmp	r3, #29
 801ee10:	d001      	beq.n	801ee16 <__sflush_r+0xb2>
 801ee12:	2b16      	cmp	r3, #22
 801ee14:	d101      	bne.n	801ee1a <__sflush_r+0xb6>
 801ee16:	602f      	str	r7, [r5, #0]
 801ee18:	e7b1      	b.n	801ed7e <__sflush_r+0x1a>
 801ee1a:	89a3      	ldrh	r3, [r4, #12]
 801ee1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee20:	81a3      	strh	r3, [r4, #12]
 801ee22:	e7ad      	b.n	801ed80 <__sflush_r+0x1c>
 801ee24:	690f      	ldr	r7, [r1, #16]
 801ee26:	2f00      	cmp	r7, #0
 801ee28:	d0a9      	beq.n	801ed7e <__sflush_r+0x1a>
 801ee2a:	0793      	lsls	r3, r2, #30
 801ee2c:	680e      	ldr	r6, [r1, #0]
 801ee2e:	bf08      	it	eq
 801ee30:	694b      	ldreq	r3, [r1, #20]
 801ee32:	600f      	str	r7, [r1, #0]
 801ee34:	bf18      	it	ne
 801ee36:	2300      	movne	r3, #0
 801ee38:	eba6 0807 	sub.w	r8, r6, r7
 801ee3c:	608b      	str	r3, [r1, #8]
 801ee3e:	f1b8 0f00 	cmp.w	r8, #0
 801ee42:	dd9c      	ble.n	801ed7e <__sflush_r+0x1a>
 801ee44:	6a21      	ldr	r1, [r4, #32]
 801ee46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ee48:	4643      	mov	r3, r8
 801ee4a:	463a      	mov	r2, r7
 801ee4c:	4628      	mov	r0, r5
 801ee4e:	47b0      	blx	r6
 801ee50:	2800      	cmp	r0, #0
 801ee52:	dc06      	bgt.n	801ee62 <__sflush_r+0xfe>
 801ee54:	89a3      	ldrh	r3, [r4, #12]
 801ee56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee5a:	81a3      	strh	r3, [r4, #12]
 801ee5c:	f04f 30ff 	mov.w	r0, #4294967295
 801ee60:	e78e      	b.n	801ed80 <__sflush_r+0x1c>
 801ee62:	4407      	add	r7, r0
 801ee64:	eba8 0800 	sub.w	r8, r8, r0
 801ee68:	e7e9      	b.n	801ee3e <__sflush_r+0xda>
 801ee6a:	bf00      	nop
 801ee6c:	20400001 	.word	0x20400001

0801ee70 <_fflush_r>:
 801ee70:	b538      	push	{r3, r4, r5, lr}
 801ee72:	690b      	ldr	r3, [r1, #16]
 801ee74:	4605      	mov	r5, r0
 801ee76:	460c      	mov	r4, r1
 801ee78:	b913      	cbnz	r3, 801ee80 <_fflush_r+0x10>
 801ee7a:	2500      	movs	r5, #0
 801ee7c:	4628      	mov	r0, r5
 801ee7e:	bd38      	pop	{r3, r4, r5, pc}
 801ee80:	b118      	cbz	r0, 801ee8a <_fflush_r+0x1a>
 801ee82:	6983      	ldr	r3, [r0, #24]
 801ee84:	b90b      	cbnz	r3, 801ee8a <_fflush_r+0x1a>
 801ee86:	f000 f887 	bl	801ef98 <__sinit>
 801ee8a:	4b14      	ldr	r3, [pc, #80]	; (801eedc <_fflush_r+0x6c>)
 801ee8c:	429c      	cmp	r4, r3
 801ee8e:	d11b      	bne.n	801eec8 <_fflush_r+0x58>
 801ee90:	686c      	ldr	r4, [r5, #4]
 801ee92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d0ef      	beq.n	801ee7a <_fflush_r+0xa>
 801ee9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ee9c:	07d0      	lsls	r0, r2, #31
 801ee9e:	d404      	bmi.n	801eeaa <_fflush_r+0x3a>
 801eea0:	0599      	lsls	r1, r3, #22
 801eea2:	d402      	bmi.n	801eeaa <_fflush_r+0x3a>
 801eea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eea6:	f000 f927 	bl	801f0f8 <__retarget_lock_acquire_recursive>
 801eeaa:	4628      	mov	r0, r5
 801eeac:	4621      	mov	r1, r4
 801eeae:	f7ff ff59 	bl	801ed64 <__sflush_r>
 801eeb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eeb4:	07da      	lsls	r2, r3, #31
 801eeb6:	4605      	mov	r5, r0
 801eeb8:	d4e0      	bmi.n	801ee7c <_fflush_r+0xc>
 801eeba:	89a3      	ldrh	r3, [r4, #12]
 801eebc:	059b      	lsls	r3, r3, #22
 801eebe:	d4dd      	bmi.n	801ee7c <_fflush_r+0xc>
 801eec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eec2:	f000 f91a 	bl	801f0fa <__retarget_lock_release_recursive>
 801eec6:	e7d9      	b.n	801ee7c <_fflush_r+0xc>
 801eec8:	4b05      	ldr	r3, [pc, #20]	; (801eee0 <_fflush_r+0x70>)
 801eeca:	429c      	cmp	r4, r3
 801eecc:	d101      	bne.n	801eed2 <_fflush_r+0x62>
 801eece:	68ac      	ldr	r4, [r5, #8]
 801eed0:	e7df      	b.n	801ee92 <_fflush_r+0x22>
 801eed2:	4b04      	ldr	r3, [pc, #16]	; (801eee4 <_fflush_r+0x74>)
 801eed4:	429c      	cmp	r4, r3
 801eed6:	bf08      	it	eq
 801eed8:	68ec      	ldreq	r4, [r5, #12]
 801eeda:	e7da      	b.n	801ee92 <_fflush_r+0x22>
 801eedc:	08025b28 	.word	0x08025b28
 801eee0:	08025b48 	.word	0x08025b48
 801eee4:	08025b08 	.word	0x08025b08

0801eee8 <std>:
 801eee8:	2300      	movs	r3, #0
 801eeea:	b510      	push	{r4, lr}
 801eeec:	4604      	mov	r4, r0
 801eeee:	e9c0 3300 	strd	r3, r3, [r0]
 801eef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801eef6:	6083      	str	r3, [r0, #8]
 801eef8:	8181      	strh	r1, [r0, #12]
 801eefa:	6643      	str	r3, [r0, #100]	; 0x64
 801eefc:	81c2      	strh	r2, [r0, #14]
 801eefe:	6183      	str	r3, [r0, #24]
 801ef00:	4619      	mov	r1, r3
 801ef02:	2208      	movs	r2, #8
 801ef04:	305c      	adds	r0, #92	; 0x5c
 801ef06:	f7ff fb8d 	bl	801e624 <memset>
 801ef0a:	4b05      	ldr	r3, [pc, #20]	; (801ef20 <std+0x38>)
 801ef0c:	6263      	str	r3, [r4, #36]	; 0x24
 801ef0e:	4b05      	ldr	r3, [pc, #20]	; (801ef24 <std+0x3c>)
 801ef10:	62a3      	str	r3, [r4, #40]	; 0x28
 801ef12:	4b05      	ldr	r3, [pc, #20]	; (801ef28 <std+0x40>)
 801ef14:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ef16:	4b05      	ldr	r3, [pc, #20]	; (801ef2c <std+0x44>)
 801ef18:	6224      	str	r4, [r4, #32]
 801ef1a:	6323      	str	r3, [r4, #48]	; 0x30
 801ef1c:	bd10      	pop	{r4, pc}
 801ef1e:	bf00      	nop
 801ef20:	0801fb05 	.word	0x0801fb05
 801ef24:	0801fb27 	.word	0x0801fb27
 801ef28:	0801fb5f 	.word	0x0801fb5f
 801ef2c:	0801fb83 	.word	0x0801fb83

0801ef30 <_cleanup_r>:
 801ef30:	4901      	ldr	r1, [pc, #4]	; (801ef38 <_cleanup_r+0x8>)
 801ef32:	f000 b8c1 	b.w	801f0b8 <_fwalk_reent>
 801ef36:	bf00      	nop
 801ef38:	0801ee71 	.word	0x0801ee71

0801ef3c <__sfmoreglue>:
 801ef3c:	b570      	push	{r4, r5, r6, lr}
 801ef3e:	2268      	movs	r2, #104	; 0x68
 801ef40:	1e4d      	subs	r5, r1, #1
 801ef42:	4355      	muls	r5, r2
 801ef44:	460e      	mov	r6, r1
 801ef46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ef4a:	f7ff fbf5 	bl	801e738 <_malloc_r>
 801ef4e:	4604      	mov	r4, r0
 801ef50:	b140      	cbz	r0, 801ef64 <__sfmoreglue+0x28>
 801ef52:	2100      	movs	r1, #0
 801ef54:	e9c0 1600 	strd	r1, r6, [r0]
 801ef58:	300c      	adds	r0, #12
 801ef5a:	60a0      	str	r0, [r4, #8]
 801ef5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ef60:	f7ff fb60 	bl	801e624 <memset>
 801ef64:	4620      	mov	r0, r4
 801ef66:	bd70      	pop	{r4, r5, r6, pc}

0801ef68 <__sfp_lock_acquire>:
 801ef68:	4801      	ldr	r0, [pc, #4]	; (801ef70 <__sfp_lock_acquire+0x8>)
 801ef6a:	f000 b8c5 	b.w	801f0f8 <__retarget_lock_acquire_recursive>
 801ef6e:	bf00      	nop
 801ef70:	2000395d 	.word	0x2000395d

0801ef74 <__sfp_lock_release>:
 801ef74:	4801      	ldr	r0, [pc, #4]	; (801ef7c <__sfp_lock_release+0x8>)
 801ef76:	f000 b8c0 	b.w	801f0fa <__retarget_lock_release_recursive>
 801ef7a:	bf00      	nop
 801ef7c:	2000395d 	.word	0x2000395d

0801ef80 <__sinit_lock_acquire>:
 801ef80:	4801      	ldr	r0, [pc, #4]	; (801ef88 <__sinit_lock_acquire+0x8>)
 801ef82:	f000 b8b9 	b.w	801f0f8 <__retarget_lock_acquire_recursive>
 801ef86:	bf00      	nop
 801ef88:	2000395e 	.word	0x2000395e

0801ef8c <__sinit_lock_release>:
 801ef8c:	4801      	ldr	r0, [pc, #4]	; (801ef94 <__sinit_lock_release+0x8>)
 801ef8e:	f000 b8b4 	b.w	801f0fa <__retarget_lock_release_recursive>
 801ef92:	bf00      	nop
 801ef94:	2000395e 	.word	0x2000395e

0801ef98 <__sinit>:
 801ef98:	b510      	push	{r4, lr}
 801ef9a:	4604      	mov	r4, r0
 801ef9c:	f7ff fff0 	bl	801ef80 <__sinit_lock_acquire>
 801efa0:	69a3      	ldr	r3, [r4, #24]
 801efa2:	b11b      	cbz	r3, 801efac <__sinit+0x14>
 801efa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801efa8:	f7ff bff0 	b.w	801ef8c <__sinit_lock_release>
 801efac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801efb0:	6523      	str	r3, [r4, #80]	; 0x50
 801efb2:	4b13      	ldr	r3, [pc, #76]	; (801f000 <__sinit+0x68>)
 801efb4:	4a13      	ldr	r2, [pc, #76]	; (801f004 <__sinit+0x6c>)
 801efb6:	681b      	ldr	r3, [r3, #0]
 801efb8:	62a2      	str	r2, [r4, #40]	; 0x28
 801efba:	42a3      	cmp	r3, r4
 801efbc:	bf04      	itt	eq
 801efbe:	2301      	moveq	r3, #1
 801efc0:	61a3      	streq	r3, [r4, #24]
 801efc2:	4620      	mov	r0, r4
 801efc4:	f000 f820 	bl	801f008 <__sfp>
 801efc8:	6060      	str	r0, [r4, #4]
 801efca:	4620      	mov	r0, r4
 801efcc:	f000 f81c 	bl	801f008 <__sfp>
 801efd0:	60a0      	str	r0, [r4, #8]
 801efd2:	4620      	mov	r0, r4
 801efd4:	f000 f818 	bl	801f008 <__sfp>
 801efd8:	2200      	movs	r2, #0
 801efda:	60e0      	str	r0, [r4, #12]
 801efdc:	2104      	movs	r1, #4
 801efde:	6860      	ldr	r0, [r4, #4]
 801efe0:	f7ff ff82 	bl	801eee8 <std>
 801efe4:	68a0      	ldr	r0, [r4, #8]
 801efe6:	2201      	movs	r2, #1
 801efe8:	2109      	movs	r1, #9
 801efea:	f7ff ff7d 	bl	801eee8 <std>
 801efee:	68e0      	ldr	r0, [r4, #12]
 801eff0:	2202      	movs	r2, #2
 801eff2:	2112      	movs	r1, #18
 801eff4:	f7ff ff78 	bl	801eee8 <std>
 801eff8:	2301      	movs	r3, #1
 801effa:	61a3      	str	r3, [r4, #24]
 801effc:	e7d2      	b.n	801efa4 <__sinit+0xc>
 801effe:	bf00      	nop
 801f000:	08025a54 	.word	0x08025a54
 801f004:	0801ef31 	.word	0x0801ef31

0801f008 <__sfp>:
 801f008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f00a:	4607      	mov	r7, r0
 801f00c:	f7ff ffac 	bl	801ef68 <__sfp_lock_acquire>
 801f010:	4b1e      	ldr	r3, [pc, #120]	; (801f08c <__sfp+0x84>)
 801f012:	681e      	ldr	r6, [r3, #0]
 801f014:	69b3      	ldr	r3, [r6, #24]
 801f016:	b913      	cbnz	r3, 801f01e <__sfp+0x16>
 801f018:	4630      	mov	r0, r6
 801f01a:	f7ff ffbd 	bl	801ef98 <__sinit>
 801f01e:	3648      	adds	r6, #72	; 0x48
 801f020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f024:	3b01      	subs	r3, #1
 801f026:	d503      	bpl.n	801f030 <__sfp+0x28>
 801f028:	6833      	ldr	r3, [r6, #0]
 801f02a:	b30b      	cbz	r3, 801f070 <__sfp+0x68>
 801f02c:	6836      	ldr	r6, [r6, #0]
 801f02e:	e7f7      	b.n	801f020 <__sfp+0x18>
 801f030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f034:	b9d5      	cbnz	r5, 801f06c <__sfp+0x64>
 801f036:	4b16      	ldr	r3, [pc, #88]	; (801f090 <__sfp+0x88>)
 801f038:	60e3      	str	r3, [r4, #12]
 801f03a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f03e:	6665      	str	r5, [r4, #100]	; 0x64
 801f040:	f000 f859 	bl	801f0f6 <__retarget_lock_init_recursive>
 801f044:	f7ff ff96 	bl	801ef74 <__sfp_lock_release>
 801f048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f04c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f050:	6025      	str	r5, [r4, #0]
 801f052:	61a5      	str	r5, [r4, #24]
 801f054:	2208      	movs	r2, #8
 801f056:	4629      	mov	r1, r5
 801f058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f05c:	f7ff fae2 	bl	801e624 <memset>
 801f060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f068:	4620      	mov	r0, r4
 801f06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f06c:	3468      	adds	r4, #104	; 0x68
 801f06e:	e7d9      	b.n	801f024 <__sfp+0x1c>
 801f070:	2104      	movs	r1, #4
 801f072:	4638      	mov	r0, r7
 801f074:	f7ff ff62 	bl	801ef3c <__sfmoreglue>
 801f078:	4604      	mov	r4, r0
 801f07a:	6030      	str	r0, [r6, #0]
 801f07c:	2800      	cmp	r0, #0
 801f07e:	d1d5      	bne.n	801f02c <__sfp+0x24>
 801f080:	f7ff ff78 	bl	801ef74 <__sfp_lock_release>
 801f084:	230c      	movs	r3, #12
 801f086:	603b      	str	r3, [r7, #0]
 801f088:	e7ee      	b.n	801f068 <__sfp+0x60>
 801f08a:	bf00      	nop
 801f08c:	08025a54 	.word	0x08025a54
 801f090:	ffff0001 	.word	0xffff0001

0801f094 <fiprintf>:
 801f094:	b40e      	push	{r1, r2, r3}
 801f096:	b503      	push	{r0, r1, lr}
 801f098:	4601      	mov	r1, r0
 801f09a:	ab03      	add	r3, sp, #12
 801f09c:	4805      	ldr	r0, [pc, #20]	; (801f0b4 <fiprintf+0x20>)
 801f09e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f0a2:	6800      	ldr	r0, [r0, #0]
 801f0a4:	9301      	str	r3, [sp, #4]
 801f0a6:	f000 fa21 	bl	801f4ec <_vfiprintf_r>
 801f0aa:	b002      	add	sp, #8
 801f0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801f0b0:	b003      	add	sp, #12
 801f0b2:	4770      	bx	lr
 801f0b4:	200000a8 	.word	0x200000a8

0801f0b8 <_fwalk_reent>:
 801f0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f0bc:	4606      	mov	r6, r0
 801f0be:	4688      	mov	r8, r1
 801f0c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f0c4:	2700      	movs	r7, #0
 801f0c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f0ca:	f1b9 0901 	subs.w	r9, r9, #1
 801f0ce:	d505      	bpl.n	801f0dc <_fwalk_reent+0x24>
 801f0d0:	6824      	ldr	r4, [r4, #0]
 801f0d2:	2c00      	cmp	r4, #0
 801f0d4:	d1f7      	bne.n	801f0c6 <_fwalk_reent+0xe>
 801f0d6:	4638      	mov	r0, r7
 801f0d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f0dc:	89ab      	ldrh	r3, [r5, #12]
 801f0de:	2b01      	cmp	r3, #1
 801f0e0:	d907      	bls.n	801f0f2 <_fwalk_reent+0x3a>
 801f0e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f0e6:	3301      	adds	r3, #1
 801f0e8:	d003      	beq.n	801f0f2 <_fwalk_reent+0x3a>
 801f0ea:	4629      	mov	r1, r5
 801f0ec:	4630      	mov	r0, r6
 801f0ee:	47c0      	blx	r8
 801f0f0:	4307      	orrs	r7, r0
 801f0f2:	3568      	adds	r5, #104	; 0x68
 801f0f4:	e7e9      	b.n	801f0ca <_fwalk_reent+0x12>

0801f0f6 <__retarget_lock_init_recursive>:
 801f0f6:	4770      	bx	lr

0801f0f8 <__retarget_lock_acquire_recursive>:
 801f0f8:	4770      	bx	lr

0801f0fa <__retarget_lock_release_recursive>:
 801f0fa:	4770      	bx	lr

0801f0fc <__swhatbuf_r>:
 801f0fc:	b570      	push	{r4, r5, r6, lr}
 801f0fe:	460e      	mov	r6, r1
 801f100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f104:	2900      	cmp	r1, #0
 801f106:	b096      	sub	sp, #88	; 0x58
 801f108:	4614      	mov	r4, r2
 801f10a:	461d      	mov	r5, r3
 801f10c:	da08      	bge.n	801f120 <__swhatbuf_r+0x24>
 801f10e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f112:	2200      	movs	r2, #0
 801f114:	602a      	str	r2, [r5, #0]
 801f116:	061a      	lsls	r2, r3, #24
 801f118:	d410      	bmi.n	801f13c <__swhatbuf_r+0x40>
 801f11a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f11e:	e00e      	b.n	801f13e <__swhatbuf_r+0x42>
 801f120:	466a      	mov	r2, sp
 801f122:	f000 fd5d 	bl	801fbe0 <_fstat_r>
 801f126:	2800      	cmp	r0, #0
 801f128:	dbf1      	blt.n	801f10e <__swhatbuf_r+0x12>
 801f12a:	9a01      	ldr	r2, [sp, #4]
 801f12c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f130:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f134:	425a      	negs	r2, r3
 801f136:	415a      	adcs	r2, r3
 801f138:	602a      	str	r2, [r5, #0]
 801f13a:	e7ee      	b.n	801f11a <__swhatbuf_r+0x1e>
 801f13c:	2340      	movs	r3, #64	; 0x40
 801f13e:	2000      	movs	r0, #0
 801f140:	6023      	str	r3, [r4, #0]
 801f142:	b016      	add	sp, #88	; 0x58
 801f144:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f148 <__smakebuf_r>:
 801f148:	898b      	ldrh	r3, [r1, #12]
 801f14a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f14c:	079d      	lsls	r5, r3, #30
 801f14e:	4606      	mov	r6, r0
 801f150:	460c      	mov	r4, r1
 801f152:	d507      	bpl.n	801f164 <__smakebuf_r+0x1c>
 801f154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f158:	6023      	str	r3, [r4, #0]
 801f15a:	6123      	str	r3, [r4, #16]
 801f15c:	2301      	movs	r3, #1
 801f15e:	6163      	str	r3, [r4, #20]
 801f160:	b002      	add	sp, #8
 801f162:	bd70      	pop	{r4, r5, r6, pc}
 801f164:	ab01      	add	r3, sp, #4
 801f166:	466a      	mov	r2, sp
 801f168:	f7ff ffc8 	bl	801f0fc <__swhatbuf_r>
 801f16c:	9900      	ldr	r1, [sp, #0]
 801f16e:	4605      	mov	r5, r0
 801f170:	4630      	mov	r0, r6
 801f172:	f7ff fae1 	bl	801e738 <_malloc_r>
 801f176:	b948      	cbnz	r0, 801f18c <__smakebuf_r+0x44>
 801f178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f17c:	059a      	lsls	r2, r3, #22
 801f17e:	d4ef      	bmi.n	801f160 <__smakebuf_r+0x18>
 801f180:	f023 0303 	bic.w	r3, r3, #3
 801f184:	f043 0302 	orr.w	r3, r3, #2
 801f188:	81a3      	strh	r3, [r4, #12]
 801f18a:	e7e3      	b.n	801f154 <__smakebuf_r+0xc>
 801f18c:	4b0d      	ldr	r3, [pc, #52]	; (801f1c4 <__smakebuf_r+0x7c>)
 801f18e:	62b3      	str	r3, [r6, #40]	; 0x28
 801f190:	89a3      	ldrh	r3, [r4, #12]
 801f192:	6020      	str	r0, [r4, #0]
 801f194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f198:	81a3      	strh	r3, [r4, #12]
 801f19a:	9b00      	ldr	r3, [sp, #0]
 801f19c:	6163      	str	r3, [r4, #20]
 801f19e:	9b01      	ldr	r3, [sp, #4]
 801f1a0:	6120      	str	r0, [r4, #16]
 801f1a2:	b15b      	cbz	r3, 801f1bc <__smakebuf_r+0x74>
 801f1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f1a8:	4630      	mov	r0, r6
 801f1aa:	f000 fd2b 	bl	801fc04 <_isatty_r>
 801f1ae:	b128      	cbz	r0, 801f1bc <__smakebuf_r+0x74>
 801f1b0:	89a3      	ldrh	r3, [r4, #12]
 801f1b2:	f023 0303 	bic.w	r3, r3, #3
 801f1b6:	f043 0301 	orr.w	r3, r3, #1
 801f1ba:	81a3      	strh	r3, [r4, #12]
 801f1bc:	89a0      	ldrh	r0, [r4, #12]
 801f1be:	4305      	orrs	r5, r0
 801f1c0:	81a5      	strh	r5, [r4, #12]
 801f1c2:	e7cd      	b.n	801f160 <__smakebuf_r+0x18>
 801f1c4:	0801ef31 	.word	0x0801ef31

0801f1c8 <__malloc_lock>:
 801f1c8:	4801      	ldr	r0, [pc, #4]	; (801f1d0 <__malloc_lock+0x8>)
 801f1ca:	f7ff bf95 	b.w	801f0f8 <__retarget_lock_acquire_recursive>
 801f1ce:	bf00      	nop
 801f1d0:	2000395c 	.word	0x2000395c

0801f1d4 <__malloc_unlock>:
 801f1d4:	4801      	ldr	r0, [pc, #4]	; (801f1dc <__malloc_unlock+0x8>)
 801f1d6:	f7ff bf90 	b.w	801f0fa <__retarget_lock_release_recursive>
 801f1da:	bf00      	nop
 801f1dc:	2000395c 	.word	0x2000395c

0801f1e0 <__ssputs_r>:
 801f1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f1e4:	688e      	ldr	r6, [r1, #8]
 801f1e6:	429e      	cmp	r6, r3
 801f1e8:	4682      	mov	sl, r0
 801f1ea:	460c      	mov	r4, r1
 801f1ec:	4690      	mov	r8, r2
 801f1ee:	461f      	mov	r7, r3
 801f1f0:	d838      	bhi.n	801f264 <__ssputs_r+0x84>
 801f1f2:	898a      	ldrh	r2, [r1, #12]
 801f1f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f1f8:	d032      	beq.n	801f260 <__ssputs_r+0x80>
 801f1fa:	6825      	ldr	r5, [r4, #0]
 801f1fc:	6909      	ldr	r1, [r1, #16]
 801f1fe:	eba5 0901 	sub.w	r9, r5, r1
 801f202:	6965      	ldr	r5, [r4, #20]
 801f204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f20c:	3301      	adds	r3, #1
 801f20e:	444b      	add	r3, r9
 801f210:	106d      	asrs	r5, r5, #1
 801f212:	429d      	cmp	r5, r3
 801f214:	bf38      	it	cc
 801f216:	461d      	movcc	r5, r3
 801f218:	0553      	lsls	r3, r2, #21
 801f21a:	d531      	bpl.n	801f280 <__ssputs_r+0xa0>
 801f21c:	4629      	mov	r1, r5
 801f21e:	f7ff fa8b 	bl	801e738 <_malloc_r>
 801f222:	4606      	mov	r6, r0
 801f224:	b950      	cbnz	r0, 801f23c <__ssputs_r+0x5c>
 801f226:	230c      	movs	r3, #12
 801f228:	f8ca 3000 	str.w	r3, [sl]
 801f22c:	89a3      	ldrh	r3, [r4, #12]
 801f22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f232:	81a3      	strh	r3, [r4, #12]
 801f234:	f04f 30ff 	mov.w	r0, #4294967295
 801f238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f23c:	6921      	ldr	r1, [r4, #16]
 801f23e:	464a      	mov	r2, r9
 801f240:	f7ff f9c8 	bl	801e5d4 <memcpy>
 801f244:	89a3      	ldrh	r3, [r4, #12]
 801f246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f24a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f24e:	81a3      	strh	r3, [r4, #12]
 801f250:	6126      	str	r6, [r4, #16]
 801f252:	6165      	str	r5, [r4, #20]
 801f254:	444e      	add	r6, r9
 801f256:	eba5 0509 	sub.w	r5, r5, r9
 801f25a:	6026      	str	r6, [r4, #0]
 801f25c:	60a5      	str	r5, [r4, #8]
 801f25e:	463e      	mov	r6, r7
 801f260:	42be      	cmp	r6, r7
 801f262:	d900      	bls.n	801f266 <__ssputs_r+0x86>
 801f264:	463e      	mov	r6, r7
 801f266:	6820      	ldr	r0, [r4, #0]
 801f268:	4632      	mov	r2, r6
 801f26a:	4641      	mov	r1, r8
 801f26c:	f7ff f9c0 	bl	801e5f0 <memmove>
 801f270:	68a3      	ldr	r3, [r4, #8]
 801f272:	1b9b      	subs	r3, r3, r6
 801f274:	60a3      	str	r3, [r4, #8]
 801f276:	6823      	ldr	r3, [r4, #0]
 801f278:	4433      	add	r3, r6
 801f27a:	6023      	str	r3, [r4, #0]
 801f27c:	2000      	movs	r0, #0
 801f27e:	e7db      	b.n	801f238 <__ssputs_r+0x58>
 801f280:	462a      	mov	r2, r5
 801f282:	f000 fce1 	bl	801fc48 <_realloc_r>
 801f286:	4606      	mov	r6, r0
 801f288:	2800      	cmp	r0, #0
 801f28a:	d1e1      	bne.n	801f250 <__ssputs_r+0x70>
 801f28c:	6921      	ldr	r1, [r4, #16]
 801f28e:	4650      	mov	r0, sl
 801f290:	f7ff f9e6 	bl	801e660 <_free_r>
 801f294:	e7c7      	b.n	801f226 <__ssputs_r+0x46>
	...

0801f298 <_svfiprintf_r>:
 801f298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f29c:	4698      	mov	r8, r3
 801f29e:	898b      	ldrh	r3, [r1, #12]
 801f2a0:	061b      	lsls	r3, r3, #24
 801f2a2:	b09d      	sub	sp, #116	; 0x74
 801f2a4:	4607      	mov	r7, r0
 801f2a6:	460d      	mov	r5, r1
 801f2a8:	4614      	mov	r4, r2
 801f2aa:	d50e      	bpl.n	801f2ca <_svfiprintf_r+0x32>
 801f2ac:	690b      	ldr	r3, [r1, #16]
 801f2ae:	b963      	cbnz	r3, 801f2ca <_svfiprintf_r+0x32>
 801f2b0:	2140      	movs	r1, #64	; 0x40
 801f2b2:	f7ff fa41 	bl	801e738 <_malloc_r>
 801f2b6:	6028      	str	r0, [r5, #0]
 801f2b8:	6128      	str	r0, [r5, #16]
 801f2ba:	b920      	cbnz	r0, 801f2c6 <_svfiprintf_r+0x2e>
 801f2bc:	230c      	movs	r3, #12
 801f2be:	603b      	str	r3, [r7, #0]
 801f2c0:	f04f 30ff 	mov.w	r0, #4294967295
 801f2c4:	e0d1      	b.n	801f46a <_svfiprintf_r+0x1d2>
 801f2c6:	2340      	movs	r3, #64	; 0x40
 801f2c8:	616b      	str	r3, [r5, #20]
 801f2ca:	2300      	movs	r3, #0
 801f2cc:	9309      	str	r3, [sp, #36]	; 0x24
 801f2ce:	2320      	movs	r3, #32
 801f2d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f2d4:	f8cd 800c 	str.w	r8, [sp, #12]
 801f2d8:	2330      	movs	r3, #48	; 0x30
 801f2da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f484 <_svfiprintf_r+0x1ec>
 801f2de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f2e2:	f04f 0901 	mov.w	r9, #1
 801f2e6:	4623      	mov	r3, r4
 801f2e8:	469a      	mov	sl, r3
 801f2ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f2ee:	b10a      	cbz	r2, 801f2f4 <_svfiprintf_r+0x5c>
 801f2f0:	2a25      	cmp	r2, #37	; 0x25
 801f2f2:	d1f9      	bne.n	801f2e8 <_svfiprintf_r+0x50>
 801f2f4:	ebba 0b04 	subs.w	fp, sl, r4
 801f2f8:	d00b      	beq.n	801f312 <_svfiprintf_r+0x7a>
 801f2fa:	465b      	mov	r3, fp
 801f2fc:	4622      	mov	r2, r4
 801f2fe:	4629      	mov	r1, r5
 801f300:	4638      	mov	r0, r7
 801f302:	f7ff ff6d 	bl	801f1e0 <__ssputs_r>
 801f306:	3001      	adds	r0, #1
 801f308:	f000 80aa 	beq.w	801f460 <_svfiprintf_r+0x1c8>
 801f30c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f30e:	445a      	add	r2, fp
 801f310:	9209      	str	r2, [sp, #36]	; 0x24
 801f312:	f89a 3000 	ldrb.w	r3, [sl]
 801f316:	2b00      	cmp	r3, #0
 801f318:	f000 80a2 	beq.w	801f460 <_svfiprintf_r+0x1c8>
 801f31c:	2300      	movs	r3, #0
 801f31e:	f04f 32ff 	mov.w	r2, #4294967295
 801f322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f326:	f10a 0a01 	add.w	sl, sl, #1
 801f32a:	9304      	str	r3, [sp, #16]
 801f32c:	9307      	str	r3, [sp, #28]
 801f32e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f332:	931a      	str	r3, [sp, #104]	; 0x68
 801f334:	4654      	mov	r4, sl
 801f336:	2205      	movs	r2, #5
 801f338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f33c:	4851      	ldr	r0, [pc, #324]	; (801f484 <_svfiprintf_r+0x1ec>)
 801f33e:	f7e0 ff5f 	bl	8000200 <memchr>
 801f342:	9a04      	ldr	r2, [sp, #16]
 801f344:	b9d8      	cbnz	r0, 801f37e <_svfiprintf_r+0xe6>
 801f346:	06d0      	lsls	r0, r2, #27
 801f348:	bf44      	itt	mi
 801f34a:	2320      	movmi	r3, #32
 801f34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f350:	0711      	lsls	r1, r2, #28
 801f352:	bf44      	itt	mi
 801f354:	232b      	movmi	r3, #43	; 0x2b
 801f356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f35a:	f89a 3000 	ldrb.w	r3, [sl]
 801f35e:	2b2a      	cmp	r3, #42	; 0x2a
 801f360:	d015      	beq.n	801f38e <_svfiprintf_r+0xf6>
 801f362:	9a07      	ldr	r2, [sp, #28]
 801f364:	4654      	mov	r4, sl
 801f366:	2000      	movs	r0, #0
 801f368:	f04f 0c0a 	mov.w	ip, #10
 801f36c:	4621      	mov	r1, r4
 801f36e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f372:	3b30      	subs	r3, #48	; 0x30
 801f374:	2b09      	cmp	r3, #9
 801f376:	d94e      	bls.n	801f416 <_svfiprintf_r+0x17e>
 801f378:	b1b0      	cbz	r0, 801f3a8 <_svfiprintf_r+0x110>
 801f37a:	9207      	str	r2, [sp, #28]
 801f37c:	e014      	b.n	801f3a8 <_svfiprintf_r+0x110>
 801f37e:	eba0 0308 	sub.w	r3, r0, r8
 801f382:	fa09 f303 	lsl.w	r3, r9, r3
 801f386:	4313      	orrs	r3, r2
 801f388:	9304      	str	r3, [sp, #16]
 801f38a:	46a2      	mov	sl, r4
 801f38c:	e7d2      	b.n	801f334 <_svfiprintf_r+0x9c>
 801f38e:	9b03      	ldr	r3, [sp, #12]
 801f390:	1d19      	adds	r1, r3, #4
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	9103      	str	r1, [sp, #12]
 801f396:	2b00      	cmp	r3, #0
 801f398:	bfbb      	ittet	lt
 801f39a:	425b      	neglt	r3, r3
 801f39c:	f042 0202 	orrlt.w	r2, r2, #2
 801f3a0:	9307      	strge	r3, [sp, #28]
 801f3a2:	9307      	strlt	r3, [sp, #28]
 801f3a4:	bfb8      	it	lt
 801f3a6:	9204      	strlt	r2, [sp, #16]
 801f3a8:	7823      	ldrb	r3, [r4, #0]
 801f3aa:	2b2e      	cmp	r3, #46	; 0x2e
 801f3ac:	d10c      	bne.n	801f3c8 <_svfiprintf_r+0x130>
 801f3ae:	7863      	ldrb	r3, [r4, #1]
 801f3b0:	2b2a      	cmp	r3, #42	; 0x2a
 801f3b2:	d135      	bne.n	801f420 <_svfiprintf_r+0x188>
 801f3b4:	9b03      	ldr	r3, [sp, #12]
 801f3b6:	1d1a      	adds	r2, r3, #4
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	9203      	str	r2, [sp, #12]
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	bfb8      	it	lt
 801f3c0:	f04f 33ff 	movlt.w	r3, #4294967295
 801f3c4:	3402      	adds	r4, #2
 801f3c6:	9305      	str	r3, [sp, #20]
 801f3c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f494 <_svfiprintf_r+0x1fc>
 801f3cc:	7821      	ldrb	r1, [r4, #0]
 801f3ce:	2203      	movs	r2, #3
 801f3d0:	4650      	mov	r0, sl
 801f3d2:	f7e0 ff15 	bl	8000200 <memchr>
 801f3d6:	b140      	cbz	r0, 801f3ea <_svfiprintf_r+0x152>
 801f3d8:	2340      	movs	r3, #64	; 0x40
 801f3da:	eba0 000a 	sub.w	r0, r0, sl
 801f3de:	fa03 f000 	lsl.w	r0, r3, r0
 801f3e2:	9b04      	ldr	r3, [sp, #16]
 801f3e4:	4303      	orrs	r3, r0
 801f3e6:	3401      	adds	r4, #1
 801f3e8:	9304      	str	r3, [sp, #16]
 801f3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3ee:	4826      	ldr	r0, [pc, #152]	; (801f488 <_svfiprintf_r+0x1f0>)
 801f3f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f3f4:	2206      	movs	r2, #6
 801f3f6:	f7e0 ff03 	bl	8000200 <memchr>
 801f3fa:	2800      	cmp	r0, #0
 801f3fc:	d038      	beq.n	801f470 <_svfiprintf_r+0x1d8>
 801f3fe:	4b23      	ldr	r3, [pc, #140]	; (801f48c <_svfiprintf_r+0x1f4>)
 801f400:	bb1b      	cbnz	r3, 801f44a <_svfiprintf_r+0x1b2>
 801f402:	9b03      	ldr	r3, [sp, #12]
 801f404:	3307      	adds	r3, #7
 801f406:	f023 0307 	bic.w	r3, r3, #7
 801f40a:	3308      	adds	r3, #8
 801f40c:	9303      	str	r3, [sp, #12]
 801f40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f410:	4433      	add	r3, r6
 801f412:	9309      	str	r3, [sp, #36]	; 0x24
 801f414:	e767      	b.n	801f2e6 <_svfiprintf_r+0x4e>
 801f416:	fb0c 3202 	mla	r2, ip, r2, r3
 801f41a:	460c      	mov	r4, r1
 801f41c:	2001      	movs	r0, #1
 801f41e:	e7a5      	b.n	801f36c <_svfiprintf_r+0xd4>
 801f420:	2300      	movs	r3, #0
 801f422:	3401      	adds	r4, #1
 801f424:	9305      	str	r3, [sp, #20]
 801f426:	4619      	mov	r1, r3
 801f428:	f04f 0c0a 	mov.w	ip, #10
 801f42c:	4620      	mov	r0, r4
 801f42e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f432:	3a30      	subs	r2, #48	; 0x30
 801f434:	2a09      	cmp	r2, #9
 801f436:	d903      	bls.n	801f440 <_svfiprintf_r+0x1a8>
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d0c5      	beq.n	801f3c8 <_svfiprintf_r+0x130>
 801f43c:	9105      	str	r1, [sp, #20]
 801f43e:	e7c3      	b.n	801f3c8 <_svfiprintf_r+0x130>
 801f440:	fb0c 2101 	mla	r1, ip, r1, r2
 801f444:	4604      	mov	r4, r0
 801f446:	2301      	movs	r3, #1
 801f448:	e7f0      	b.n	801f42c <_svfiprintf_r+0x194>
 801f44a:	ab03      	add	r3, sp, #12
 801f44c:	9300      	str	r3, [sp, #0]
 801f44e:	462a      	mov	r2, r5
 801f450:	4b0f      	ldr	r3, [pc, #60]	; (801f490 <_svfiprintf_r+0x1f8>)
 801f452:	a904      	add	r1, sp, #16
 801f454:	4638      	mov	r0, r7
 801f456:	f3af 8000 	nop.w
 801f45a:	1c42      	adds	r2, r0, #1
 801f45c:	4606      	mov	r6, r0
 801f45e:	d1d6      	bne.n	801f40e <_svfiprintf_r+0x176>
 801f460:	89ab      	ldrh	r3, [r5, #12]
 801f462:	065b      	lsls	r3, r3, #25
 801f464:	f53f af2c 	bmi.w	801f2c0 <_svfiprintf_r+0x28>
 801f468:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f46a:	b01d      	add	sp, #116	; 0x74
 801f46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f470:	ab03      	add	r3, sp, #12
 801f472:	9300      	str	r3, [sp, #0]
 801f474:	462a      	mov	r2, r5
 801f476:	4b06      	ldr	r3, [pc, #24]	; (801f490 <_svfiprintf_r+0x1f8>)
 801f478:	a904      	add	r1, sp, #16
 801f47a:	4638      	mov	r0, r7
 801f47c:	f000 f9d4 	bl	801f828 <_printf_i>
 801f480:	e7eb      	b.n	801f45a <_svfiprintf_r+0x1c2>
 801f482:	bf00      	nop
 801f484:	08025b68 	.word	0x08025b68
 801f488:	08025b72 	.word	0x08025b72
 801f48c:	00000000 	.word	0x00000000
 801f490:	0801f1e1 	.word	0x0801f1e1
 801f494:	08025b6e 	.word	0x08025b6e

0801f498 <__sfputc_r>:
 801f498:	6893      	ldr	r3, [r2, #8]
 801f49a:	3b01      	subs	r3, #1
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	b410      	push	{r4}
 801f4a0:	6093      	str	r3, [r2, #8]
 801f4a2:	da08      	bge.n	801f4b6 <__sfputc_r+0x1e>
 801f4a4:	6994      	ldr	r4, [r2, #24]
 801f4a6:	42a3      	cmp	r3, r4
 801f4a8:	db01      	blt.n	801f4ae <__sfputc_r+0x16>
 801f4aa:	290a      	cmp	r1, #10
 801f4ac:	d103      	bne.n	801f4b6 <__sfputc_r+0x1e>
 801f4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4b2:	f7ff bb79 	b.w	801eba8 <__swbuf_r>
 801f4b6:	6813      	ldr	r3, [r2, #0]
 801f4b8:	1c58      	adds	r0, r3, #1
 801f4ba:	6010      	str	r0, [r2, #0]
 801f4bc:	7019      	strb	r1, [r3, #0]
 801f4be:	4608      	mov	r0, r1
 801f4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4c4:	4770      	bx	lr

0801f4c6 <__sfputs_r>:
 801f4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4c8:	4606      	mov	r6, r0
 801f4ca:	460f      	mov	r7, r1
 801f4cc:	4614      	mov	r4, r2
 801f4ce:	18d5      	adds	r5, r2, r3
 801f4d0:	42ac      	cmp	r4, r5
 801f4d2:	d101      	bne.n	801f4d8 <__sfputs_r+0x12>
 801f4d4:	2000      	movs	r0, #0
 801f4d6:	e007      	b.n	801f4e8 <__sfputs_r+0x22>
 801f4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f4dc:	463a      	mov	r2, r7
 801f4de:	4630      	mov	r0, r6
 801f4e0:	f7ff ffda 	bl	801f498 <__sfputc_r>
 801f4e4:	1c43      	adds	r3, r0, #1
 801f4e6:	d1f3      	bne.n	801f4d0 <__sfputs_r+0xa>
 801f4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f4ec <_vfiprintf_r>:
 801f4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4f0:	460d      	mov	r5, r1
 801f4f2:	b09d      	sub	sp, #116	; 0x74
 801f4f4:	4614      	mov	r4, r2
 801f4f6:	4698      	mov	r8, r3
 801f4f8:	4606      	mov	r6, r0
 801f4fa:	b118      	cbz	r0, 801f504 <_vfiprintf_r+0x18>
 801f4fc:	6983      	ldr	r3, [r0, #24]
 801f4fe:	b90b      	cbnz	r3, 801f504 <_vfiprintf_r+0x18>
 801f500:	f7ff fd4a 	bl	801ef98 <__sinit>
 801f504:	4b89      	ldr	r3, [pc, #548]	; (801f72c <_vfiprintf_r+0x240>)
 801f506:	429d      	cmp	r5, r3
 801f508:	d11b      	bne.n	801f542 <_vfiprintf_r+0x56>
 801f50a:	6875      	ldr	r5, [r6, #4]
 801f50c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f50e:	07d9      	lsls	r1, r3, #31
 801f510:	d405      	bmi.n	801f51e <_vfiprintf_r+0x32>
 801f512:	89ab      	ldrh	r3, [r5, #12]
 801f514:	059a      	lsls	r2, r3, #22
 801f516:	d402      	bmi.n	801f51e <_vfiprintf_r+0x32>
 801f518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f51a:	f7ff fded 	bl	801f0f8 <__retarget_lock_acquire_recursive>
 801f51e:	89ab      	ldrh	r3, [r5, #12]
 801f520:	071b      	lsls	r3, r3, #28
 801f522:	d501      	bpl.n	801f528 <_vfiprintf_r+0x3c>
 801f524:	692b      	ldr	r3, [r5, #16]
 801f526:	b9eb      	cbnz	r3, 801f564 <_vfiprintf_r+0x78>
 801f528:	4629      	mov	r1, r5
 801f52a:	4630      	mov	r0, r6
 801f52c:	f7ff fb8e 	bl	801ec4c <__swsetup_r>
 801f530:	b1c0      	cbz	r0, 801f564 <_vfiprintf_r+0x78>
 801f532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f534:	07dc      	lsls	r4, r3, #31
 801f536:	d50e      	bpl.n	801f556 <_vfiprintf_r+0x6a>
 801f538:	f04f 30ff 	mov.w	r0, #4294967295
 801f53c:	b01d      	add	sp, #116	; 0x74
 801f53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f542:	4b7b      	ldr	r3, [pc, #492]	; (801f730 <_vfiprintf_r+0x244>)
 801f544:	429d      	cmp	r5, r3
 801f546:	d101      	bne.n	801f54c <_vfiprintf_r+0x60>
 801f548:	68b5      	ldr	r5, [r6, #8]
 801f54a:	e7df      	b.n	801f50c <_vfiprintf_r+0x20>
 801f54c:	4b79      	ldr	r3, [pc, #484]	; (801f734 <_vfiprintf_r+0x248>)
 801f54e:	429d      	cmp	r5, r3
 801f550:	bf08      	it	eq
 801f552:	68f5      	ldreq	r5, [r6, #12]
 801f554:	e7da      	b.n	801f50c <_vfiprintf_r+0x20>
 801f556:	89ab      	ldrh	r3, [r5, #12]
 801f558:	0598      	lsls	r0, r3, #22
 801f55a:	d4ed      	bmi.n	801f538 <_vfiprintf_r+0x4c>
 801f55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f55e:	f7ff fdcc 	bl	801f0fa <__retarget_lock_release_recursive>
 801f562:	e7e9      	b.n	801f538 <_vfiprintf_r+0x4c>
 801f564:	2300      	movs	r3, #0
 801f566:	9309      	str	r3, [sp, #36]	; 0x24
 801f568:	2320      	movs	r3, #32
 801f56a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f56e:	f8cd 800c 	str.w	r8, [sp, #12]
 801f572:	2330      	movs	r3, #48	; 0x30
 801f574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f738 <_vfiprintf_r+0x24c>
 801f578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f57c:	f04f 0901 	mov.w	r9, #1
 801f580:	4623      	mov	r3, r4
 801f582:	469a      	mov	sl, r3
 801f584:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f588:	b10a      	cbz	r2, 801f58e <_vfiprintf_r+0xa2>
 801f58a:	2a25      	cmp	r2, #37	; 0x25
 801f58c:	d1f9      	bne.n	801f582 <_vfiprintf_r+0x96>
 801f58e:	ebba 0b04 	subs.w	fp, sl, r4
 801f592:	d00b      	beq.n	801f5ac <_vfiprintf_r+0xc0>
 801f594:	465b      	mov	r3, fp
 801f596:	4622      	mov	r2, r4
 801f598:	4629      	mov	r1, r5
 801f59a:	4630      	mov	r0, r6
 801f59c:	f7ff ff93 	bl	801f4c6 <__sfputs_r>
 801f5a0:	3001      	adds	r0, #1
 801f5a2:	f000 80aa 	beq.w	801f6fa <_vfiprintf_r+0x20e>
 801f5a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f5a8:	445a      	add	r2, fp
 801f5aa:	9209      	str	r2, [sp, #36]	; 0x24
 801f5ac:	f89a 3000 	ldrb.w	r3, [sl]
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	f000 80a2 	beq.w	801f6fa <_vfiprintf_r+0x20e>
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	f04f 32ff 	mov.w	r2, #4294967295
 801f5bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f5c0:	f10a 0a01 	add.w	sl, sl, #1
 801f5c4:	9304      	str	r3, [sp, #16]
 801f5c6:	9307      	str	r3, [sp, #28]
 801f5c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f5cc:	931a      	str	r3, [sp, #104]	; 0x68
 801f5ce:	4654      	mov	r4, sl
 801f5d0:	2205      	movs	r2, #5
 801f5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f5d6:	4858      	ldr	r0, [pc, #352]	; (801f738 <_vfiprintf_r+0x24c>)
 801f5d8:	f7e0 fe12 	bl	8000200 <memchr>
 801f5dc:	9a04      	ldr	r2, [sp, #16]
 801f5de:	b9d8      	cbnz	r0, 801f618 <_vfiprintf_r+0x12c>
 801f5e0:	06d1      	lsls	r1, r2, #27
 801f5e2:	bf44      	itt	mi
 801f5e4:	2320      	movmi	r3, #32
 801f5e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f5ea:	0713      	lsls	r3, r2, #28
 801f5ec:	bf44      	itt	mi
 801f5ee:	232b      	movmi	r3, #43	; 0x2b
 801f5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f5f4:	f89a 3000 	ldrb.w	r3, [sl]
 801f5f8:	2b2a      	cmp	r3, #42	; 0x2a
 801f5fa:	d015      	beq.n	801f628 <_vfiprintf_r+0x13c>
 801f5fc:	9a07      	ldr	r2, [sp, #28]
 801f5fe:	4654      	mov	r4, sl
 801f600:	2000      	movs	r0, #0
 801f602:	f04f 0c0a 	mov.w	ip, #10
 801f606:	4621      	mov	r1, r4
 801f608:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f60c:	3b30      	subs	r3, #48	; 0x30
 801f60e:	2b09      	cmp	r3, #9
 801f610:	d94e      	bls.n	801f6b0 <_vfiprintf_r+0x1c4>
 801f612:	b1b0      	cbz	r0, 801f642 <_vfiprintf_r+0x156>
 801f614:	9207      	str	r2, [sp, #28]
 801f616:	e014      	b.n	801f642 <_vfiprintf_r+0x156>
 801f618:	eba0 0308 	sub.w	r3, r0, r8
 801f61c:	fa09 f303 	lsl.w	r3, r9, r3
 801f620:	4313      	orrs	r3, r2
 801f622:	9304      	str	r3, [sp, #16]
 801f624:	46a2      	mov	sl, r4
 801f626:	e7d2      	b.n	801f5ce <_vfiprintf_r+0xe2>
 801f628:	9b03      	ldr	r3, [sp, #12]
 801f62a:	1d19      	adds	r1, r3, #4
 801f62c:	681b      	ldr	r3, [r3, #0]
 801f62e:	9103      	str	r1, [sp, #12]
 801f630:	2b00      	cmp	r3, #0
 801f632:	bfbb      	ittet	lt
 801f634:	425b      	neglt	r3, r3
 801f636:	f042 0202 	orrlt.w	r2, r2, #2
 801f63a:	9307      	strge	r3, [sp, #28]
 801f63c:	9307      	strlt	r3, [sp, #28]
 801f63e:	bfb8      	it	lt
 801f640:	9204      	strlt	r2, [sp, #16]
 801f642:	7823      	ldrb	r3, [r4, #0]
 801f644:	2b2e      	cmp	r3, #46	; 0x2e
 801f646:	d10c      	bne.n	801f662 <_vfiprintf_r+0x176>
 801f648:	7863      	ldrb	r3, [r4, #1]
 801f64a:	2b2a      	cmp	r3, #42	; 0x2a
 801f64c:	d135      	bne.n	801f6ba <_vfiprintf_r+0x1ce>
 801f64e:	9b03      	ldr	r3, [sp, #12]
 801f650:	1d1a      	adds	r2, r3, #4
 801f652:	681b      	ldr	r3, [r3, #0]
 801f654:	9203      	str	r2, [sp, #12]
 801f656:	2b00      	cmp	r3, #0
 801f658:	bfb8      	it	lt
 801f65a:	f04f 33ff 	movlt.w	r3, #4294967295
 801f65e:	3402      	adds	r4, #2
 801f660:	9305      	str	r3, [sp, #20]
 801f662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f748 <_vfiprintf_r+0x25c>
 801f666:	7821      	ldrb	r1, [r4, #0]
 801f668:	2203      	movs	r2, #3
 801f66a:	4650      	mov	r0, sl
 801f66c:	f7e0 fdc8 	bl	8000200 <memchr>
 801f670:	b140      	cbz	r0, 801f684 <_vfiprintf_r+0x198>
 801f672:	2340      	movs	r3, #64	; 0x40
 801f674:	eba0 000a 	sub.w	r0, r0, sl
 801f678:	fa03 f000 	lsl.w	r0, r3, r0
 801f67c:	9b04      	ldr	r3, [sp, #16]
 801f67e:	4303      	orrs	r3, r0
 801f680:	3401      	adds	r4, #1
 801f682:	9304      	str	r3, [sp, #16]
 801f684:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f688:	482c      	ldr	r0, [pc, #176]	; (801f73c <_vfiprintf_r+0x250>)
 801f68a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f68e:	2206      	movs	r2, #6
 801f690:	f7e0 fdb6 	bl	8000200 <memchr>
 801f694:	2800      	cmp	r0, #0
 801f696:	d03f      	beq.n	801f718 <_vfiprintf_r+0x22c>
 801f698:	4b29      	ldr	r3, [pc, #164]	; (801f740 <_vfiprintf_r+0x254>)
 801f69a:	bb1b      	cbnz	r3, 801f6e4 <_vfiprintf_r+0x1f8>
 801f69c:	9b03      	ldr	r3, [sp, #12]
 801f69e:	3307      	adds	r3, #7
 801f6a0:	f023 0307 	bic.w	r3, r3, #7
 801f6a4:	3308      	adds	r3, #8
 801f6a6:	9303      	str	r3, [sp, #12]
 801f6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6aa:	443b      	add	r3, r7
 801f6ac:	9309      	str	r3, [sp, #36]	; 0x24
 801f6ae:	e767      	b.n	801f580 <_vfiprintf_r+0x94>
 801f6b0:	fb0c 3202 	mla	r2, ip, r2, r3
 801f6b4:	460c      	mov	r4, r1
 801f6b6:	2001      	movs	r0, #1
 801f6b8:	e7a5      	b.n	801f606 <_vfiprintf_r+0x11a>
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	3401      	adds	r4, #1
 801f6be:	9305      	str	r3, [sp, #20]
 801f6c0:	4619      	mov	r1, r3
 801f6c2:	f04f 0c0a 	mov.w	ip, #10
 801f6c6:	4620      	mov	r0, r4
 801f6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f6cc:	3a30      	subs	r2, #48	; 0x30
 801f6ce:	2a09      	cmp	r2, #9
 801f6d0:	d903      	bls.n	801f6da <_vfiprintf_r+0x1ee>
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d0c5      	beq.n	801f662 <_vfiprintf_r+0x176>
 801f6d6:	9105      	str	r1, [sp, #20]
 801f6d8:	e7c3      	b.n	801f662 <_vfiprintf_r+0x176>
 801f6da:	fb0c 2101 	mla	r1, ip, r1, r2
 801f6de:	4604      	mov	r4, r0
 801f6e0:	2301      	movs	r3, #1
 801f6e2:	e7f0      	b.n	801f6c6 <_vfiprintf_r+0x1da>
 801f6e4:	ab03      	add	r3, sp, #12
 801f6e6:	9300      	str	r3, [sp, #0]
 801f6e8:	462a      	mov	r2, r5
 801f6ea:	4b16      	ldr	r3, [pc, #88]	; (801f744 <_vfiprintf_r+0x258>)
 801f6ec:	a904      	add	r1, sp, #16
 801f6ee:	4630      	mov	r0, r6
 801f6f0:	f3af 8000 	nop.w
 801f6f4:	4607      	mov	r7, r0
 801f6f6:	1c78      	adds	r0, r7, #1
 801f6f8:	d1d6      	bne.n	801f6a8 <_vfiprintf_r+0x1bc>
 801f6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f6fc:	07d9      	lsls	r1, r3, #31
 801f6fe:	d405      	bmi.n	801f70c <_vfiprintf_r+0x220>
 801f700:	89ab      	ldrh	r3, [r5, #12]
 801f702:	059a      	lsls	r2, r3, #22
 801f704:	d402      	bmi.n	801f70c <_vfiprintf_r+0x220>
 801f706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f708:	f7ff fcf7 	bl	801f0fa <__retarget_lock_release_recursive>
 801f70c:	89ab      	ldrh	r3, [r5, #12]
 801f70e:	065b      	lsls	r3, r3, #25
 801f710:	f53f af12 	bmi.w	801f538 <_vfiprintf_r+0x4c>
 801f714:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f716:	e711      	b.n	801f53c <_vfiprintf_r+0x50>
 801f718:	ab03      	add	r3, sp, #12
 801f71a:	9300      	str	r3, [sp, #0]
 801f71c:	462a      	mov	r2, r5
 801f71e:	4b09      	ldr	r3, [pc, #36]	; (801f744 <_vfiprintf_r+0x258>)
 801f720:	a904      	add	r1, sp, #16
 801f722:	4630      	mov	r0, r6
 801f724:	f000 f880 	bl	801f828 <_printf_i>
 801f728:	e7e4      	b.n	801f6f4 <_vfiprintf_r+0x208>
 801f72a:	bf00      	nop
 801f72c:	08025b28 	.word	0x08025b28
 801f730:	08025b48 	.word	0x08025b48
 801f734:	08025b08 	.word	0x08025b08
 801f738:	08025b68 	.word	0x08025b68
 801f73c:	08025b72 	.word	0x08025b72
 801f740:	00000000 	.word	0x00000000
 801f744:	0801f4c7 	.word	0x0801f4c7
 801f748:	08025b6e 	.word	0x08025b6e

0801f74c <_printf_common>:
 801f74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f750:	4616      	mov	r6, r2
 801f752:	4699      	mov	r9, r3
 801f754:	688a      	ldr	r2, [r1, #8]
 801f756:	690b      	ldr	r3, [r1, #16]
 801f758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f75c:	4293      	cmp	r3, r2
 801f75e:	bfb8      	it	lt
 801f760:	4613      	movlt	r3, r2
 801f762:	6033      	str	r3, [r6, #0]
 801f764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f768:	4607      	mov	r7, r0
 801f76a:	460c      	mov	r4, r1
 801f76c:	b10a      	cbz	r2, 801f772 <_printf_common+0x26>
 801f76e:	3301      	adds	r3, #1
 801f770:	6033      	str	r3, [r6, #0]
 801f772:	6823      	ldr	r3, [r4, #0]
 801f774:	0699      	lsls	r1, r3, #26
 801f776:	bf42      	ittt	mi
 801f778:	6833      	ldrmi	r3, [r6, #0]
 801f77a:	3302      	addmi	r3, #2
 801f77c:	6033      	strmi	r3, [r6, #0]
 801f77e:	6825      	ldr	r5, [r4, #0]
 801f780:	f015 0506 	ands.w	r5, r5, #6
 801f784:	d106      	bne.n	801f794 <_printf_common+0x48>
 801f786:	f104 0a19 	add.w	sl, r4, #25
 801f78a:	68e3      	ldr	r3, [r4, #12]
 801f78c:	6832      	ldr	r2, [r6, #0]
 801f78e:	1a9b      	subs	r3, r3, r2
 801f790:	42ab      	cmp	r3, r5
 801f792:	dc26      	bgt.n	801f7e2 <_printf_common+0x96>
 801f794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f798:	1e13      	subs	r3, r2, #0
 801f79a:	6822      	ldr	r2, [r4, #0]
 801f79c:	bf18      	it	ne
 801f79e:	2301      	movne	r3, #1
 801f7a0:	0692      	lsls	r2, r2, #26
 801f7a2:	d42b      	bmi.n	801f7fc <_printf_common+0xb0>
 801f7a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f7a8:	4649      	mov	r1, r9
 801f7aa:	4638      	mov	r0, r7
 801f7ac:	47c0      	blx	r8
 801f7ae:	3001      	adds	r0, #1
 801f7b0:	d01e      	beq.n	801f7f0 <_printf_common+0xa4>
 801f7b2:	6823      	ldr	r3, [r4, #0]
 801f7b4:	68e5      	ldr	r5, [r4, #12]
 801f7b6:	6832      	ldr	r2, [r6, #0]
 801f7b8:	f003 0306 	and.w	r3, r3, #6
 801f7bc:	2b04      	cmp	r3, #4
 801f7be:	bf08      	it	eq
 801f7c0:	1aad      	subeq	r5, r5, r2
 801f7c2:	68a3      	ldr	r3, [r4, #8]
 801f7c4:	6922      	ldr	r2, [r4, #16]
 801f7c6:	bf0c      	ite	eq
 801f7c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f7cc:	2500      	movne	r5, #0
 801f7ce:	4293      	cmp	r3, r2
 801f7d0:	bfc4      	itt	gt
 801f7d2:	1a9b      	subgt	r3, r3, r2
 801f7d4:	18ed      	addgt	r5, r5, r3
 801f7d6:	2600      	movs	r6, #0
 801f7d8:	341a      	adds	r4, #26
 801f7da:	42b5      	cmp	r5, r6
 801f7dc:	d11a      	bne.n	801f814 <_printf_common+0xc8>
 801f7de:	2000      	movs	r0, #0
 801f7e0:	e008      	b.n	801f7f4 <_printf_common+0xa8>
 801f7e2:	2301      	movs	r3, #1
 801f7e4:	4652      	mov	r2, sl
 801f7e6:	4649      	mov	r1, r9
 801f7e8:	4638      	mov	r0, r7
 801f7ea:	47c0      	blx	r8
 801f7ec:	3001      	adds	r0, #1
 801f7ee:	d103      	bne.n	801f7f8 <_printf_common+0xac>
 801f7f0:	f04f 30ff 	mov.w	r0, #4294967295
 801f7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7f8:	3501      	adds	r5, #1
 801f7fa:	e7c6      	b.n	801f78a <_printf_common+0x3e>
 801f7fc:	18e1      	adds	r1, r4, r3
 801f7fe:	1c5a      	adds	r2, r3, #1
 801f800:	2030      	movs	r0, #48	; 0x30
 801f802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f806:	4422      	add	r2, r4
 801f808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f80c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f810:	3302      	adds	r3, #2
 801f812:	e7c7      	b.n	801f7a4 <_printf_common+0x58>
 801f814:	2301      	movs	r3, #1
 801f816:	4622      	mov	r2, r4
 801f818:	4649      	mov	r1, r9
 801f81a:	4638      	mov	r0, r7
 801f81c:	47c0      	blx	r8
 801f81e:	3001      	adds	r0, #1
 801f820:	d0e6      	beq.n	801f7f0 <_printf_common+0xa4>
 801f822:	3601      	adds	r6, #1
 801f824:	e7d9      	b.n	801f7da <_printf_common+0x8e>
	...

0801f828 <_printf_i>:
 801f828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f82c:	7e0f      	ldrb	r7, [r1, #24]
 801f82e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f830:	2f78      	cmp	r7, #120	; 0x78
 801f832:	4691      	mov	r9, r2
 801f834:	4680      	mov	r8, r0
 801f836:	460c      	mov	r4, r1
 801f838:	469a      	mov	sl, r3
 801f83a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f83e:	d807      	bhi.n	801f850 <_printf_i+0x28>
 801f840:	2f62      	cmp	r7, #98	; 0x62
 801f842:	d80a      	bhi.n	801f85a <_printf_i+0x32>
 801f844:	2f00      	cmp	r7, #0
 801f846:	f000 80d8 	beq.w	801f9fa <_printf_i+0x1d2>
 801f84a:	2f58      	cmp	r7, #88	; 0x58
 801f84c:	f000 80a3 	beq.w	801f996 <_printf_i+0x16e>
 801f850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f858:	e03a      	b.n	801f8d0 <_printf_i+0xa8>
 801f85a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f85e:	2b15      	cmp	r3, #21
 801f860:	d8f6      	bhi.n	801f850 <_printf_i+0x28>
 801f862:	a101      	add	r1, pc, #4	; (adr r1, 801f868 <_printf_i+0x40>)
 801f864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f868:	0801f8c1 	.word	0x0801f8c1
 801f86c:	0801f8d5 	.word	0x0801f8d5
 801f870:	0801f851 	.word	0x0801f851
 801f874:	0801f851 	.word	0x0801f851
 801f878:	0801f851 	.word	0x0801f851
 801f87c:	0801f851 	.word	0x0801f851
 801f880:	0801f8d5 	.word	0x0801f8d5
 801f884:	0801f851 	.word	0x0801f851
 801f888:	0801f851 	.word	0x0801f851
 801f88c:	0801f851 	.word	0x0801f851
 801f890:	0801f851 	.word	0x0801f851
 801f894:	0801f9e1 	.word	0x0801f9e1
 801f898:	0801f905 	.word	0x0801f905
 801f89c:	0801f9c3 	.word	0x0801f9c3
 801f8a0:	0801f851 	.word	0x0801f851
 801f8a4:	0801f851 	.word	0x0801f851
 801f8a8:	0801fa03 	.word	0x0801fa03
 801f8ac:	0801f851 	.word	0x0801f851
 801f8b0:	0801f905 	.word	0x0801f905
 801f8b4:	0801f851 	.word	0x0801f851
 801f8b8:	0801f851 	.word	0x0801f851
 801f8bc:	0801f9cb 	.word	0x0801f9cb
 801f8c0:	682b      	ldr	r3, [r5, #0]
 801f8c2:	1d1a      	adds	r2, r3, #4
 801f8c4:	681b      	ldr	r3, [r3, #0]
 801f8c6:	602a      	str	r2, [r5, #0]
 801f8c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f8cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f8d0:	2301      	movs	r3, #1
 801f8d2:	e0a3      	b.n	801fa1c <_printf_i+0x1f4>
 801f8d4:	6820      	ldr	r0, [r4, #0]
 801f8d6:	6829      	ldr	r1, [r5, #0]
 801f8d8:	0606      	lsls	r6, r0, #24
 801f8da:	f101 0304 	add.w	r3, r1, #4
 801f8de:	d50a      	bpl.n	801f8f6 <_printf_i+0xce>
 801f8e0:	680e      	ldr	r6, [r1, #0]
 801f8e2:	602b      	str	r3, [r5, #0]
 801f8e4:	2e00      	cmp	r6, #0
 801f8e6:	da03      	bge.n	801f8f0 <_printf_i+0xc8>
 801f8e8:	232d      	movs	r3, #45	; 0x2d
 801f8ea:	4276      	negs	r6, r6
 801f8ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f8f0:	485e      	ldr	r0, [pc, #376]	; (801fa6c <_printf_i+0x244>)
 801f8f2:	230a      	movs	r3, #10
 801f8f4:	e019      	b.n	801f92a <_printf_i+0x102>
 801f8f6:	680e      	ldr	r6, [r1, #0]
 801f8f8:	602b      	str	r3, [r5, #0]
 801f8fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f8fe:	bf18      	it	ne
 801f900:	b236      	sxthne	r6, r6
 801f902:	e7ef      	b.n	801f8e4 <_printf_i+0xbc>
 801f904:	682b      	ldr	r3, [r5, #0]
 801f906:	6820      	ldr	r0, [r4, #0]
 801f908:	1d19      	adds	r1, r3, #4
 801f90a:	6029      	str	r1, [r5, #0]
 801f90c:	0601      	lsls	r1, r0, #24
 801f90e:	d501      	bpl.n	801f914 <_printf_i+0xec>
 801f910:	681e      	ldr	r6, [r3, #0]
 801f912:	e002      	b.n	801f91a <_printf_i+0xf2>
 801f914:	0646      	lsls	r6, r0, #25
 801f916:	d5fb      	bpl.n	801f910 <_printf_i+0xe8>
 801f918:	881e      	ldrh	r6, [r3, #0]
 801f91a:	4854      	ldr	r0, [pc, #336]	; (801fa6c <_printf_i+0x244>)
 801f91c:	2f6f      	cmp	r7, #111	; 0x6f
 801f91e:	bf0c      	ite	eq
 801f920:	2308      	moveq	r3, #8
 801f922:	230a      	movne	r3, #10
 801f924:	2100      	movs	r1, #0
 801f926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f92a:	6865      	ldr	r5, [r4, #4]
 801f92c:	60a5      	str	r5, [r4, #8]
 801f92e:	2d00      	cmp	r5, #0
 801f930:	bfa2      	ittt	ge
 801f932:	6821      	ldrge	r1, [r4, #0]
 801f934:	f021 0104 	bicge.w	r1, r1, #4
 801f938:	6021      	strge	r1, [r4, #0]
 801f93a:	b90e      	cbnz	r6, 801f940 <_printf_i+0x118>
 801f93c:	2d00      	cmp	r5, #0
 801f93e:	d04d      	beq.n	801f9dc <_printf_i+0x1b4>
 801f940:	4615      	mov	r5, r2
 801f942:	fbb6 f1f3 	udiv	r1, r6, r3
 801f946:	fb03 6711 	mls	r7, r3, r1, r6
 801f94a:	5dc7      	ldrb	r7, [r0, r7]
 801f94c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f950:	4637      	mov	r7, r6
 801f952:	42bb      	cmp	r3, r7
 801f954:	460e      	mov	r6, r1
 801f956:	d9f4      	bls.n	801f942 <_printf_i+0x11a>
 801f958:	2b08      	cmp	r3, #8
 801f95a:	d10b      	bne.n	801f974 <_printf_i+0x14c>
 801f95c:	6823      	ldr	r3, [r4, #0]
 801f95e:	07de      	lsls	r6, r3, #31
 801f960:	d508      	bpl.n	801f974 <_printf_i+0x14c>
 801f962:	6923      	ldr	r3, [r4, #16]
 801f964:	6861      	ldr	r1, [r4, #4]
 801f966:	4299      	cmp	r1, r3
 801f968:	bfde      	ittt	le
 801f96a:	2330      	movle	r3, #48	; 0x30
 801f96c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f970:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f974:	1b52      	subs	r2, r2, r5
 801f976:	6122      	str	r2, [r4, #16]
 801f978:	f8cd a000 	str.w	sl, [sp]
 801f97c:	464b      	mov	r3, r9
 801f97e:	aa03      	add	r2, sp, #12
 801f980:	4621      	mov	r1, r4
 801f982:	4640      	mov	r0, r8
 801f984:	f7ff fee2 	bl	801f74c <_printf_common>
 801f988:	3001      	adds	r0, #1
 801f98a:	d14c      	bne.n	801fa26 <_printf_i+0x1fe>
 801f98c:	f04f 30ff 	mov.w	r0, #4294967295
 801f990:	b004      	add	sp, #16
 801f992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f996:	4835      	ldr	r0, [pc, #212]	; (801fa6c <_printf_i+0x244>)
 801f998:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f99c:	6829      	ldr	r1, [r5, #0]
 801f99e:	6823      	ldr	r3, [r4, #0]
 801f9a0:	f851 6b04 	ldr.w	r6, [r1], #4
 801f9a4:	6029      	str	r1, [r5, #0]
 801f9a6:	061d      	lsls	r5, r3, #24
 801f9a8:	d514      	bpl.n	801f9d4 <_printf_i+0x1ac>
 801f9aa:	07df      	lsls	r7, r3, #31
 801f9ac:	bf44      	itt	mi
 801f9ae:	f043 0320 	orrmi.w	r3, r3, #32
 801f9b2:	6023      	strmi	r3, [r4, #0]
 801f9b4:	b91e      	cbnz	r6, 801f9be <_printf_i+0x196>
 801f9b6:	6823      	ldr	r3, [r4, #0]
 801f9b8:	f023 0320 	bic.w	r3, r3, #32
 801f9bc:	6023      	str	r3, [r4, #0]
 801f9be:	2310      	movs	r3, #16
 801f9c0:	e7b0      	b.n	801f924 <_printf_i+0xfc>
 801f9c2:	6823      	ldr	r3, [r4, #0]
 801f9c4:	f043 0320 	orr.w	r3, r3, #32
 801f9c8:	6023      	str	r3, [r4, #0]
 801f9ca:	2378      	movs	r3, #120	; 0x78
 801f9cc:	4828      	ldr	r0, [pc, #160]	; (801fa70 <_printf_i+0x248>)
 801f9ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f9d2:	e7e3      	b.n	801f99c <_printf_i+0x174>
 801f9d4:	0659      	lsls	r1, r3, #25
 801f9d6:	bf48      	it	mi
 801f9d8:	b2b6      	uxthmi	r6, r6
 801f9da:	e7e6      	b.n	801f9aa <_printf_i+0x182>
 801f9dc:	4615      	mov	r5, r2
 801f9de:	e7bb      	b.n	801f958 <_printf_i+0x130>
 801f9e0:	682b      	ldr	r3, [r5, #0]
 801f9e2:	6826      	ldr	r6, [r4, #0]
 801f9e4:	6961      	ldr	r1, [r4, #20]
 801f9e6:	1d18      	adds	r0, r3, #4
 801f9e8:	6028      	str	r0, [r5, #0]
 801f9ea:	0635      	lsls	r5, r6, #24
 801f9ec:	681b      	ldr	r3, [r3, #0]
 801f9ee:	d501      	bpl.n	801f9f4 <_printf_i+0x1cc>
 801f9f0:	6019      	str	r1, [r3, #0]
 801f9f2:	e002      	b.n	801f9fa <_printf_i+0x1d2>
 801f9f4:	0670      	lsls	r0, r6, #25
 801f9f6:	d5fb      	bpl.n	801f9f0 <_printf_i+0x1c8>
 801f9f8:	8019      	strh	r1, [r3, #0]
 801f9fa:	2300      	movs	r3, #0
 801f9fc:	6123      	str	r3, [r4, #16]
 801f9fe:	4615      	mov	r5, r2
 801fa00:	e7ba      	b.n	801f978 <_printf_i+0x150>
 801fa02:	682b      	ldr	r3, [r5, #0]
 801fa04:	1d1a      	adds	r2, r3, #4
 801fa06:	602a      	str	r2, [r5, #0]
 801fa08:	681d      	ldr	r5, [r3, #0]
 801fa0a:	6862      	ldr	r2, [r4, #4]
 801fa0c:	2100      	movs	r1, #0
 801fa0e:	4628      	mov	r0, r5
 801fa10:	f7e0 fbf6 	bl	8000200 <memchr>
 801fa14:	b108      	cbz	r0, 801fa1a <_printf_i+0x1f2>
 801fa16:	1b40      	subs	r0, r0, r5
 801fa18:	6060      	str	r0, [r4, #4]
 801fa1a:	6863      	ldr	r3, [r4, #4]
 801fa1c:	6123      	str	r3, [r4, #16]
 801fa1e:	2300      	movs	r3, #0
 801fa20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fa24:	e7a8      	b.n	801f978 <_printf_i+0x150>
 801fa26:	6923      	ldr	r3, [r4, #16]
 801fa28:	462a      	mov	r2, r5
 801fa2a:	4649      	mov	r1, r9
 801fa2c:	4640      	mov	r0, r8
 801fa2e:	47d0      	blx	sl
 801fa30:	3001      	adds	r0, #1
 801fa32:	d0ab      	beq.n	801f98c <_printf_i+0x164>
 801fa34:	6823      	ldr	r3, [r4, #0]
 801fa36:	079b      	lsls	r3, r3, #30
 801fa38:	d413      	bmi.n	801fa62 <_printf_i+0x23a>
 801fa3a:	68e0      	ldr	r0, [r4, #12]
 801fa3c:	9b03      	ldr	r3, [sp, #12]
 801fa3e:	4298      	cmp	r0, r3
 801fa40:	bfb8      	it	lt
 801fa42:	4618      	movlt	r0, r3
 801fa44:	e7a4      	b.n	801f990 <_printf_i+0x168>
 801fa46:	2301      	movs	r3, #1
 801fa48:	4632      	mov	r2, r6
 801fa4a:	4649      	mov	r1, r9
 801fa4c:	4640      	mov	r0, r8
 801fa4e:	47d0      	blx	sl
 801fa50:	3001      	adds	r0, #1
 801fa52:	d09b      	beq.n	801f98c <_printf_i+0x164>
 801fa54:	3501      	adds	r5, #1
 801fa56:	68e3      	ldr	r3, [r4, #12]
 801fa58:	9903      	ldr	r1, [sp, #12]
 801fa5a:	1a5b      	subs	r3, r3, r1
 801fa5c:	42ab      	cmp	r3, r5
 801fa5e:	dcf2      	bgt.n	801fa46 <_printf_i+0x21e>
 801fa60:	e7eb      	b.n	801fa3a <_printf_i+0x212>
 801fa62:	2500      	movs	r5, #0
 801fa64:	f104 0619 	add.w	r6, r4, #25
 801fa68:	e7f5      	b.n	801fa56 <_printf_i+0x22e>
 801fa6a:	bf00      	nop
 801fa6c:	08025b79 	.word	0x08025b79
 801fa70:	08025b8a 	.word	0x08025b8a

0801fa74 <_putc_r>:
 801fa74:	b570      	push	{r4, r5, r6, lr}
 801fa76:	460d      	mov	r5, r1
 801fa78:	4614      	mov	r4, r2
 801fa7a:	4606      	mov	r6, r0
 801fa7c:	b118      	cbz	r0, 801fa86 <_putc_r+0x12>
 801fa7e:	6983      	ldr	r3, [r0, #24]
 801fa80:	b90b      	cbnz	r3, 801fa86 <_putc_r+0x12>
 801fa82:	f7ff fa89 	bl	801ef98 <__sinit>
 801fa86:	4b1c      	ldr	r3, [pc, #112]	; (801faf8 <_putc_r+0x84>)
 801fa88:	429c      	cmp	r4, r3
 801fa8a:	d124      	bne.n	801fad6 <_putc_r+0x62>
 801fa8c:	6874      	ldr	r4, [r6, #4]
 801fa8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa90:	07d8      	lsls	r0, r3, #31
 801fa92:	d405      	bmi.n	801faa0 <_putc_r+0x2c>
 801fa94:	89a3      	ldrh	r3, [r4, #12]
 801fa96:	0599      	lsls	r1, r3, #22
 801fa98:	d402      	bmi.n	801faa0 <_putc_r+0x2c>
 801fa9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa9c:	f7ff fb2c 	bl	801f0f8 <__retarget_lock_acquire_recursive>
 801faa0:	68a3      	ldr	r3, [r4, #8]
 801faa2:	3b01      	subs	r3, #1
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	60a3      	str	r3, [r4, #8]
 801faa8:	da05      	bge.n	801fab6 <_putc_r+0x42>
 801faaa:	69a2      	ldr	r2, [r4, #24]
 801faac:	4293      	cmp	r3, r2
 801faae:	db1c      	blt.n	801faea <_putc_r+0x76>
 801fab0:	b2eb      	uxtb	r3, r5
 801fab2:	2b0a      	cmp	r3, #10
 801fab4:	d019      	beq.n	801faea <_putc_r+0x76>
 801fab6:	6823      	ldr	r3, [r4, #0]
 801fab8:	1c5a      	adds	r2, r3, #1
 801faba:	6022      	str	r2, [r4, #0]
 801fabc:	701d      	strb	r5, [r3, #0]
 801fabe:	b2ed      	uxtb	r5, r5
 801fac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fac2:	07da      	lsls	r2, r3, #31
 801fac4:	d405      	bmi.n	801fad2 <_putc_r+0x5e>
 801fac6:	89a3      	ldrh	r3, [r4, #12]
 801fac8:	059b      	lsls	r3, r3, #22
 801faca:	d402      	bmi.n	801fad2 <_putc_r+0x5e>
 801facc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801face:	f7ff fb14 	bl	801f0fa <__retarget_lock_release_recursive>
 801fad2:	4628      	mov	r0, r5
 801fad4:	bd70      	pop	{r4, r5, r6, pc}
 801fad6:	4b09      	ldr	r3, [pc, #36]	; (801fafc <_putc_r+0x88>)
 801fad8:	429c      	cmp	r4, r3
 801fada:	d101      	bne.n	801fae0 <_putc_r+0x6c>
 801fadc:	68b4      	ldr	r4, [r6, #8]
 801fade:	e7d6      	b.n	801fa8e <_putc_r+0x1a>
 801fae0:	4b07      	ldr	r3, [pc, #28]	; (801fb00 <_putc_r+0x8c>)
 801fae2:	429c      	cmp	r4, r3
 801fae4:	bf08      	it	eq
 801fae6:	68f4      	ldreq	r4, [r6, #12]
 801fae8:	e7d1      	b.n	801fa8e <_putc_r+0x1a>
 801faea:	4629      	mov	r1, r5
 801faec:	4622      	mov	r2, r4
 801faee:	4630      	mov	r0, r6
 801faf0:	f7ff f85a 	bl	801eba8 <__swbuf_r>
 801faf4:	4605      	mov	r5, r0
 801faf6:	e7e3      	b.n	801fac0 <_putc_r+0x4c>
 801faf8:	08025b28 	.word	0x08025b28
 801fafc:	08025b48 	.word	0x08025b48
 801fb00:	08025b08 	.word	0x08025b08

0801fb04 <__sread>:
 801fb04:	b510      	push	{r4, lr}
 801fb06:	460c      	mov	r4, r1
 801fb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb0c:	f000 f8cc 	bl	801fca8 <_read_r>
 801fb10:	2800      	cmp	r0, #0
 801fb12:	bfab      	itete	ge
 801fb14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fb16:	89a3      	ldrhlt	r3, [r4, #12]
 801fb18:	181b      	addge	r3, r3, r0
 801fb1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fb1e:	bfac      	ite	ge
 801fb20:	6563      	strge	r3, [r4, #84]	; 0x54
 801fb22:	81a3      	strhlt	r3, [r4, #12]
 801fb24:	bd10      	pop	{r4, pc}

0801fb26 <__swrite>:
 801fb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb2a:	461f      	mov	r7, r3
 801fb2c:	898b      	ldrh	r3, [r1, #12]
 801fb2e:	05db      	lsls	r3, r3, #23
 801fb30:	4605      	mov	r5, r0
 801fb32:	460c      	mov	r4, r1
 801fb34:	4616      	mov	r6, r2
 801fb36:	d505      	bpl.n	801fb44 <__swrite+0x1e>
 801fb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb3c:	2302      	movs	r3, #2
 801fb3e:	2200      	movs	r2, #0
 801fb40:	f000 f870 	bl	801fc24 <_lseek_r>
 801fb44:	89a3      	ldrh	r3, [r4, #12]
 801fb46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fb4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fb4e:	81a3      	strh	r3, [r4, #12]
 801fb50:	4632      	mov	r2, r6
 801fb52:	463b      	mov	r3, r7
 801fb54:	4628      	mov	r0, r5
 801fb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fb5a:	f000 b817 	b.w	801fb8c <_write_r>

0801fb5e <__sseek>:
 801fb5e:	b510      	push	{r4, lr}
 801fb60:	460c      	mov	r4, r1
 801fb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb66:	f000 f85d 	bl	801fc24 <_lseek_r>
 801fb6a:	1c43      	adds	r3, r0, #1
 801fb6c:	89a3      	ldrh	r3, [r4, #12]
 801fb6e:	bf15      	itete	ne
 801fb70:	6560      	strne	r0, [r4, #84]	; 0x54
 801fb72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fb76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fb7a:	81a3      	strheq	r3, [r4, #12]
 801fb7c:	bf18      	it	ne
 801fb7e:	81a3      	strhne	r3, [r4, #12]
 801fb80:	bd10      	pop	{r4, pc}

0801fb82 <__sclose>:
 801fb82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb86:	f000 b81b 	b.w	801fbc0 <_close_r>
	...

0801fb8c <_write_r>:
 801fb8c:	b538      	push	{r3, r4, r5, lr}
 801fb8e:	4d07      	ldr	r5, [pc, #28]	; (801fbac <_write_r+0x20>)
 801fb90:	4604      	mov	r4, r0
 801fb92:	4608      	mov	r0, r1
 801fb94:	4611      	mov	r1, r2
 801fb96:	2200      	movs	r2, #0
 801fb98:	602a      	str	r2, [r5, #0]
 801fb9a:	461a      	mov	r2, r3
 801fb9c:	f7e1 f826 	bl	8000bec <_write>
 801fba0:	1c43      	adds	r3, r0, #1
 801fba2:	d102      	bne.n	801fbaa <_write_r+0x1e>
 801fba4:	682b      	ldr	r3, [r5, #0]
 801fba6:	b103      	cbz	r3, 801fbaa <_write_r+0x1e>
 801fba8:	6023      	str	r3, [r4, #0]
 801fbaa:	bd38      	pop	{r3, r4, r5, pc}
 801fbac:	20003960 	.word	0x20003960

0801fbb0 <abort>:
 801fbb0:	b508      	push	{r3, lr}
 801fbb2:	2006      	movs	r0, #6
 801fbb4:	f000 f8b2 	bl	801fd1c <raise>
 801fbb8:	2001      	movs	r0, #1
 801fbba:	f7e1 fe35 	bl	8001828 <_exit>
	...

0801fbc0 <_close_r>:
 801fbc0:	b538      	push	{r3, r4, r5, lr}
 801fbc2:	4d06      	ldr	r5, [pc, #24]	; (801fbdc <_close_r+0x1c>)
 801fbc4:	2300      	movs	r3, #0
 801fbc6:	4604      	mov	r4, r0
 801fbc8:	4608      	mov	r0, r1
 801fbca:	602b      	str	r3, [r5, #0]
 801fbcc:	f7e1 fe53 	bl	8001876 <_close>
 801fbd0:	1c43      	adds	r3, r0, #1
 801fbd2:	d102      	bne.n	801fbda <_close_r+0x1a>
 801fbd4:	682b      	ldr	r3, [r5, #0]
 801fbd6:	b103      	cbz	r3, 801fbda <_close_r+0x1a>
 801fbd8:	6023      	str	r3, [r4, #0]
 801fbda:	bd38      	pop	{r3, r4, r5, pc}
 801fbdc:	20003960 	.word	0x20003960

0801fbe0 <_fstat_r>:
 801fbe0:	b538      	push	{r3, r4, r5, lr}
 801fbe2:	4d07      	ldr	r5, [pc, #28]	; (801fc00 <_fstat_r+0x20>)
 801fbe4:	2300      	movs	r3, #0
 801fbe6:	4604      	mov	r4, r0
 801fbe8:	4608      	mov	r0, r1
 801fbea:	4611      	mov	r1, r2
 801fbec:	602b      	str	r3, [r5, #0]
 801fbee:	f7e1 fe4e 	bl	800188e <_fstat>
 801fbf2:	1c43      	adds	r3, r0, #1
 801fbf4:	d102      	bne.n	801fbfc <_fstat_r+0x1c>
 801fbf6:	682b      	ldr	r3, [r5, #0]
 801fbf8:	b103      	cbz	r3, 801fbfc <_fstat_r+0x1c>
 801fbfa:	6023      	str	r3, [r4, #0]
 801fbfc:	bd38      	pop	{r3, r4, r5, pc}
 801fbfe:	bf00      	nop
 801fc00:	20003960 	.word	0x20003960

0801fc04 <_isatty_r>:
 801fc04:	b538      	push	{r3, r4, r5, lr}
 801fc06:	4d06      	ldr	r5, [pc, #24]	; (801fc20 <_isatty_r+0x1c>)
 801fc08:	2300      	movs	r3, #0
 801fc0a:	4604      	mov	r4, r0
 801fc0c:	4608      	mov	r0, r1
 801fc0e:	602b      	str	r3, [r5, #0]
 801fc10:	f7e1 fe4d 	bl	80018ae <_isatty>
 801fc14:	1c43      	adds	r3, r0, #1
 801fc16:	d102      	bne.n	801fc1e <_isatty_r+0x1a>
 801fc18:	682b      	ldr	r3, [r5, #0]
 801fc1a:	b103      	cbz	r3, 801fc1e <_isatty_r+0x1a>
 801fc1c:	6023      	str	r3, [r4, #0]
 801fc1e:	bd38      	pop	{r3, r4, r5, pc}
 801fc20:	20003960 	.word	0x20003960

0801fc24 <_lseek_r>:
 801fc24:	b538      	push	{r3, r4, r5, lr}
 801fc26:	4d07      	ldr	r5, [pc, #28]	; (801fc44 <_lseek_r+0x20>)
 801fc28:	4604      	mov	r4, r0
 801fc2a:	4608      	mov	r0, r1
 801fc2c:	4611      	mov	r1, r2
 801fc2e:	2200      	movs	r2, #0
 801fc30:	602a      	str	r2, [r5, #0]
 801fc32:	461a      	mov	r2, r3
 801fc34:	f7e1 fe46 	bl	80018c4 <_lseek>
 801fc38:	1c43      	adds	r3, r0, #1
 801fc3a:	d102      	bne.n	801fc42 <_lseek_r+0x1e>
 801fc3c:	682b      	ldr	r3, [r5, #0]
 801fc3e:	b103      	cbz	r3, 801fc42 <_lseek_r+0x1e>
 801fc40:	6023      	str	r3, [r4, #0]
 801fc42:	bd38      	pop	{r3, r4, r5, pc}
 801fc44:	20003960 	.word	0x20003960

0801fc48 <_realloc_r>:
 801fc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc4c:	4680      	mov	r8, r0
 801fc4e:	4614      	mov	r4, r2
 801fc50:	460e      	mov	r6, r1
 801fc52:	b921      	cbnz	r1, 801fc5e <_realloc_r+0x16>
 801fc54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fc58:	4611      	mov	r1, r2
 801fc5a:	f7fe bd6d 	b.w	801e738 <_malloc_r>
 801fc5e:	b92a      	cbnz	r2, 801fc6c <_realloc_r+0x24>
 801fc60:	f7fe fcfe 	bl	801e660 <_free_r>
 801fc64:	4625      	mov	r5, r4
 801fc66:	4628      	mov	r0, r5
 801fc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc6c:	f000 f872 	bl	801fd54 <_malloc_usable_size_r>
 801fc70:	4284      	cmp	r4, r0
 801fc72:	4607      	mov	r7, r0
 801fc74:	d802      	bhi.n	801fc7c <_realloc_r+0x34>
 801fc76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fc7a:	d812      	bhi.n	801fca2 <_realloc_r+0x5a>
 801fc7c:	4621      	mov	r1, r4
 801fc7e:	4640      	mov	r0, r8
 801fc80:	f7fe fd5a 	bl	801e738 <_malloc_r>
 801fc84:	4605      	mov	r5, r0
 801fc86:	2800      	cmp	r0, #0
 801fc88:	d0ed      	beq.n	801fc66 <_realloc_r+0x1e>
 801fc8a:	42bc      	cmp	r4, r7
 801fc8c:	4622      	mov	r2, r4
 801fc8e:	4631      	mov	r1, r6
 801fc90:	bf28      	it	cs
 801fc92:	463a      	movcs	r2, r7
 801fc94:	f7fe fc9e 	bl	801e5d4 <memcpy>
 801fc98:	4631      	mov	r1, r6
 801fc9a:	4640      	mov	r0, r8
 801fc9c:	f7fe fce0 	bl	801e660 <_free_r>
 801fca0:	e7e1      	b.n	801fc66 <_realloc_r+0x1e>
 801fca2:	4635      	mov	r5, r6
 801fca4:	e7df      	b.n	801fc66 <_realloc_r+0x1e>
	...

0801fca8 <_read_r>:
 801fca8:	b538      	push	{r3, r4, r5, lr}
 801fcaa:	4d07      	ldr	r5, [pc, #28]	; (801fcc8 <_read_r+0x20>)
 801fcac:	4604      	mov	r4, r0
 801fcae:	4608      	mov	r0, r1
 801fcb0:	4611      	mov	r1, r2
 801fcb2:	2200      	movs	r2, #0
 801fcb4:	602a      	str	r2, [r5, #0]
 801fcb6:	461a      	mov	r2, r3
 801fcb8:	f7e1 fdc0 	bl	800183c <_read>
 801fcbc:	1c43      	adds	r3, r0, #1
 801fcbe:	d102      	bne.n	801fcc6 <_read_r+0x1e>
 801fcc0:	682b      	ldr	r3, [r5, #0]
 801fcc2:	b103      	cbz	r3, 801fcc6 <_read_r+0x1e>
 801fcc4:	6023      	str	r3, [r4, #0]
 801fcc6:	bd38      	pop	{r3, r4, r5, pc}
 801fcc8:	20003960 	.word	0x20003960

0801fccc <_raise_r>:
 801fccc:	291f      	cmp	r1, #31
 801fcce:	b538      	push	{r3, r4, r5, lr}
 801fcd0:	4604      	mov	r4, r0
 801fcd2:	460d      	mov	r5, r1
 801fcd4:	d904      	bls.n	801fce0 <_raise_r+0x14>
 801fcd6:	2316      	movs	r3, #22
 801fcd8:	6003      	str	r3, [r0, #0]
 801fcda:	f04f 30ff 	mov.w	r0, #4294967295
 801fcde:	bd38      	pop	{r3, r4, r5, pc}
 801fce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fce2:	b112      	cbz	r2, 801fcea <_raise_r+0x1e>
 801fce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fce8:	b94b      	cbnz	r3, 801fcfe <_raise_r+0x32>
 801fcea:	4620      	mov	r0, r4
 801fcec:	f000 f830 	bl	801fd50 <_getpid_r>
 801fcf0:	462a      	mov	r2, r5
 801fcf2:	4601      	mov	r1, r0
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fcfa:	f000 b817 	b.w	801fd2c <_kill_r>
 801fcfe:	2b01      	cmp	r3, #1
 801fd00:	d00a      	beq.n	801fd18 <_raise_r+0x4c>
 801fd02:	1c59      	adds	r1, r3, #1
 801fd04:	d103      	bne.n	801fd0e <_raise_r+0x42>
 801fd06:	2316      	movs	r3, #22
 801fd08:	6003      	str	r3, [r0, #0]
 801fd0a:	2001      	movs	r0, #1
 801fd0c:	e7e7      	b.n	801fcde <_raise_r+0x12>
 801fd0e:	2400      	movs	r4, #0
 801fd10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fd14:	4628      	mov	r0, r5
 801fd16:	4798      	blx	r3
 801fd18:	2000      	movs	r0, #0
 801fd1a:	e7e0      	b.n	801fcde <_raise_r+0x12>

0801fd1c <raise>:
 801fd1c:	4b02      	ldr	r3, [pc, #8]	; (801fd28 <raise+0xc>)
 801fd1e:	4601      	mov	r1, r0
 801fd20:	6818      	ldr	r0, [r3, #0]
 801fd22:	f7ff bfd3 	b.w	801fccc <_raise_r>
 801fd26:	bf00      	nop
 801fd28:	200000a8 	.word	0x200000a8

0801fd2c <_kill_r>:
 801fd2c:	b538      	push	{r3, r4, r5, lr}
 801fd2e:	4d07      	ldr	r5, [pc, #28]	; (801fd4c <_kill_r+0x20>)
 801fd30:	2300      	movs	r3, #0
 801fd32:	4604      	mov	r4, r0
 801fd34:	4608      	mov	r0, r1
 801fd36:	4611      	mov	r1, r2
 801fd38:	602b      	str	r3, [r5, #0]
 801fd3a:	f7e1 fd65 	bl	8001808 <_kill>
 801fd3e:	1c43      	adds	r3, r0, #1
 801fd40:	d102      	bne.n	801fd48 <_kill_r+0x1c>
 801fd42:	682b      	ldr	r3, [r5, #0]
 801fd44:	b103      	cbz	r3, 801fd48 <_kill_r+0x1c>
 801fd46:	6023      	str	r3, [r4, #0]
 801fd48:	bd38      	pop	{r3, r4, r5, pc}
 801fd4a:	bf00      	nop
 801fd4c:	20003960 	.word	0x20003960

0801fd50 <_getpid_r>:
 801fd50:	f7e1 bd52 	b.w	80017f8 <_getpid>

0801fd54 <_malloc_usable_size_r>:
 801fd54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fd58:	1f18      	subs	r0, r3, #4
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	bfbc      	itt	lt
 801fd5e:	580b      	ldrlt	r3, [r1, r0]
 801fd60:	18c0      	addlt	r0, r0, r3
 801fd62:	4770      	bx	lr

0801fd64 <_init>:
 801fd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd66:	bf00      	nop
 801fd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd6a:	bc08      	pop	{r3}
 801fd6c:	469e      	mov	lr, r3
 801fd6e:	4770      	bx	lr

0801fd70 <_fini>:
 801fd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd72:	bf00      	nop
 801fd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd76:	bc08      	pop	{r3}
 801fd78:	469e      	mov	lr, r3
 801fd7a:	4770      	bx	lr
