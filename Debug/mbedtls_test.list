
mbedtls_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007474  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab8  08007ab8  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ab8  08007ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac0  08007ac0  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08007ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          00001228  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200012fc  200012fc  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131f0  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed5  00000000  00000000  000332f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  000361d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f98  00000000  00000000  00037270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008865  00000000  00000000  00038208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001565c  00000000  00000000  00040a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec3dd  00000000  00000000  000560c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001424a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005134  00000000  00000000  001424f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075ec 	.word	0x080075ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	080075ec 	.word	0x080075ec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <httpc_init>:
uint16_t get_httpc_any_port(void);

/* Public & Private functions ------------------------------------------------*/

uint8_t httpc_init(uint8_t sock, uint8_t * ip, uint16_t port, uint8_t * sbuf, uint8_t * rbuf)
{
 8000594:	b480      	push	{r7}
 8000596:	b087      	sub	sp, #28
 8000598:	af00      	add	r7, sp, #0
 800059a:	60b9      	str	r1, [r7, #8]
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4603      	mov	r3, r0
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	4613      	mov	r3, r2
 80005a4:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = HTTPC_FALSE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	75fb      	strb	r3, [r7, #23]

	if(sock <= _WIZCHIP_SOCK_NUM_)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	2b08      	cmp	r3, #8
 80005ae:	d81e      	bhi.n	80005ee <httpc_init+0x5a>
	{
		// Hardware socket number for HTTP client (0 ~ 7)
		httpsock = sock;
 80005b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <httpc_init+0x68>)
 80005b6:	701a      	strb	r2, [r3, #0]

		// Shared buffers: HTTP Send / Recevice
		httpc_send_buf = sbuf;
 80005b8:	4a11      	ldr	r2, [pc, #68]	; (8000600 <httpc_init+0x6c>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6013      	str	r3, [r2, #0]
		httpc_recv_buf = rbuf;
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <httpc_init+0x70>)
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	6013      	str	r3, [r2, #0]

		// Destination IP address and Port number
		// (Destination = HTTP server)
		dest_ip[0] = ip[0];
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <httpc_init+0x74>)
 80005ca:	701a      	strb	r2, [r3, #0]
		dest_ip[1] = ip[1];
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	785a      	ldrb	r2, [r3, #1]
 80005d0:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <httpc_init+0x74>)
 80005d2:	705a      	strb	r2, [r3, #1]
		dest_ip[2] = ip[2];
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	789a      	ldrb	r2, [r3, #2]
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <httpc_init+0x74>)
 80005da:	709a      	strb	r2, [r3, #2]
		dest_ip[3] = ip[3];
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	78da      	ldrb	r2, [r3, #3]
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <httpc_init+0x74>)
 80005e2:	70da      	strb	r2, [r3, #3]
		dest_port = port;
 80005e4:	4a09      	ldr	r2, [pc, #36]	; (800060c <httpc_init+0x78>)
 80005e6:	89bb      	ldrh	r3, [r7, #12]
 80005e8:	8013      	strh	r3, [r2, #0]

		ret = HTTPC_TRUE;
 80005ea:	2301      	movs	r3, #1
 80005ec:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80005ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	371c      	adds	r7, #28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	200000f8 	.word	0x200000f8
 8000600:	200000f0 	.word	0x200000f0
 8000604:	200000f4 	.word	0x200000f4
 8000608:	200000fc 	.word	0x200000fc
 800060c:	20000100 	.word	0x20000100

08000610 <httpc_connection_handler>:


// return: true / false
uint8_t httpc_connection_handler()
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b087      	sub	sp, #28
 8000614:	af02      	add	r7, sp, #8
	uint8_t ret = HTTPC_FALSE;
 8000616:	2300      	movs	r3, #0
 8000618:	73fb      	strb	r3, [r7, #15]

	uint16_t source_port;

#ifdef _HTTPCLIENT_DEBUG_
	uint8_t destip[4] = {0, };
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	80fb      	strh	r3, [r7, #6]
#endif

	uint8_t state = getSn_SR(httpsock);
 8000622:	4b6d      	ldr	r3, [pc, #436]	; (80007d8 <httpc_connection_handler+0x1c8>)
 8000624:	f993 3000 	ldrsb.w	r3, [r3]
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	3301      	adds	r3, #1
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000632:	4618      	mov	r0, r3
 8000634:	f004 fa6c 	bl	8004b10 <WIZCHIP_READ>
 8000638:	4603      	mov	r3, r0
 800063a:	73bb      	strb	r3, [r7, #14]
	switch(state)
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	2b1c      	cmp	r3, #28
 8000640:	f200 80c2 	bhi.w	80007c8 <httpc_connection_handler+0x1b8>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <httpc_connection_handler+0x3c>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	08000775 	.word	0x08000775
 8000650:	080007c9 	.word	0x080007c9
 8000654:	080007c9 	.word	0x080007c9
 8000658:	080007c9 	.word	0x080007c9
 800065c:	080007c9 	.word	0x080007c9
 8000660:	080007c9 	.word	0x080007c9
 8000664:	080007c9 	.word	0x080007c9
 8000668:	080007c9 	.word	0x080007c9
 800066c:	080007c9 	.word	0x080007c9
 8000670:	080007c9 	.word	0x080007c9
 8000674:	080007c9 	.word	0x080007c9
 8000678:	080007c9 	.word	0x080007c9
 800067c:	080007c9 	.word	0x080007c9
 8000680:	080007c9 	.word	0x080007c9
 8000684:	080007c9 	.word	0x080007c9
 8000688:	080007c9 	.word	0x080007c9
 800068c:	080007c9 	.word	0x080007c9
 8000690:	080007c9 	.word	0x080007c9
 8000694:	080007c9 	.word	0x080007c9
 8000698:	080006c1 	.word	0x080006c1
 800069c:	080007c9 	.word	0x080007c9
 80006a0:	080007c9 	.word	0x080007c9
 80006a4:	080007c9 	.word	0x080007c9
 80006a8:	080006c7 	.word	0x080006c7
 80006ac:	08000775 	.word	0x08000775
 80006b0:	080007c9 	.word	0x080007c9
 80006b4:	080007c9 	.word	0x080007c9
 80006b8:	080007c9 	.word	0x080007c9
 80006bc:	08000765 	.word	0x08000765
	{
		case SOCK_INIT:
			// state: connect
			ret = HTTPC_TRUE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
			break;
 80006c4:	e083      	b.n	80007ce <httpc_connection_handler+0x1be>

		case SOCK_ESTABLISHED:
			if(getSn_IR(httpsock) & Sn_IR_CON)
 80006c6:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <httpc_connection_handler+0x1c8>)
 80006c8:	f993 3000 	ldrsb.w	r3, [r3]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	3301      	adds	r3, #1
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fa1a 	bl	8004b10 <WIZCHIP_READ>
 80006dc:	4603      	mov	r3, r0
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d030      	beq.n	8000748 <httpc_connection_handler+0x138>
			{
#ifdef _HTTPCLIENT_DEBUG_
				// Serial debug message printout
				getsockopt(httpsock, SO_DESTIP, &destip);
 80006e6:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <httpc_connection_handler+0x1c8>)
 80006e8:	f993 3000 	ldrsb.w	r3, [r3]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f107 0208 	add.w	r2, r7, #8
 80006f2:	2104      	movs	r1, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f005 f939 	bl	800596c <getsockopt>
				getsockopt(httpsock, SO_DESTPORT, &destport);
 80006fa:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <httpc_connection_handler+0x1c8>)
 80006fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	1dba      	adds	r2, r7, #6
 8000704:	2105      	movs	r1, #5
 8000706:	4618      	mov	r0, r3
 8000708:	f005 f930 	bl	800596c <getsockopt>
				printf(" > HTTP CLIENT: CONNECTED TO - %d.%d.%d.%d : %d\r\n",destip[0], destip[1], destip[2], destip[3], destport);
 800070c:	7a3b      	ldrb	r3, [r7, #8]
 800070e:	4619      	mov	r1, r3
 8000710:	7a7b      	ldrb	r3, [r7, #9]
 8000712:	4618      	mov	r0, r3
 8000714:	7abb      	ldrb	r3, [r7, #10]
 8000716:	461c      	mov	r4, r3
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	88fa      	ldrh	r2, [r7, #6]
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	4623      	mov	r3, r4
 8000722:	4602      	mov	r2, r0
 8000724:	482d      	ldr	r0, [pc, #180]	; (80007dc <httpc_connection_handler+0x1cc>)
 8000726:	f005 fd71 	bl	800620c <iprintf>
#endif
				httpc_isConnected = HTTPC_TRUE;
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <httpc_connection_handler+0x1d0>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]

				setSn_IR(httpsock, Sn_IR_CON);
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <httpc_connection_handler+0x1c8>)
 8000732:	f993 3000 	ldrsb.w	r3, [r3]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	3301      	adds	r3, #1
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fa30 	bl	8004ba8 <WIZCHIP_WRITE>
			}

			httpc_isReceived = getSn_RX_RSR(httpsock);
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <httpc_connection_handler+0x1c8>)
 800074a:	f993 3000 	ldrsb.w	r3, [r3]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f004 fb82 	bl	8004e5a <getSn_RX_RSR>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <httpc_connection_handler+0x1d4>)
 800075c:	801a      	strh	r2, [r3, #0]
			ret = HTTPC_CONNECTED;
 800075e:	2302      	movs	r3, #2
 8000760:	73fb      	strb	r3, [r7, #15]
			break;
 8000762:	e034      	b.n	80007ce <httpc_connection_handler+0x1be>

		case SOCK_CLOSE_WAIT:
			disconnect(httpsock);
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <httpc_connection_handler+0x1c8>)
 8000766:	f993 3000 	ldrsb.w	r3, [r3]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f004 fed7 	bl	8005520 <disconnect>
			break;
 8000772:	e02c      	b.n	80007ce <httpc_connection_handler+0x1be>

		case SOCK_FIN_WAIT:
		case SOCK_CLOSED:
			httpc_isSockOpen = HTTPC_FALSE;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <httpc_connection_handler+0x1d8>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
			httpc_isConnected = HTTPC_FALSE;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <httpc_connection_handler+0x1d0>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]

			source_port = get_httpc_any_port();
 8000780:	f000 f974 	bl	8000a6c <get_httpc_any_port>
 8000784:	4603      	mov	r3, r0
 8000786:	81bb      	strh	r3, [r7, #12]
#ifdef _HTTPCLIENT_DEBUG_
			printf(" > HTTP CLIENT: source_port = %d\r\n", source_port);
 8000788:	89bb      	ldrh	r3, [r7, #12]
 800078a:	4619      	mov	r1, r3
 800078c:	4817      	ldr	r0, [pc, #92]	; (80007ec <httpc_connection_handler+0x1dc>)
 800078e:	f005 fd3d 	bl	800620c <iprintf>
#endif

			if(socket(httpsock, Sn_MR_TCP, source_port, Sn_MR_ND) == httpsock)
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <httpc_connection_handler+0x1c8>)
 8000794:	f993 3000 	ldrsb.w	r3, [r3]
 8000798:	b2d8      	uxtb	r0, r3
 800079a:	89ba      	ldrh	r2, [r7, #12]
 800079c:	2320      	movs	r3, #32
 800079e:	2101      	movs	r1, #1
 80007a0:	f004 fc5e 	bl	8005060 <socket>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <httpc_connection_handler+0x1c8>)
 80007aa:	f993 3000 	ldrsb.w	r3, [r3]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d10c      	bne.n	80007cc <httpc_connection_handler+0x1bc>
			{
				if(httpc_isSockOpen == HTTPC_FALSE)
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <httpc_connection_handler+0x1d8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d108      	bne.n	80007cc <httpc_connection_handler+0x1bc>
				{
#ifdef _HTTPCLIENT_DEBUG_
					printf(" > HTTP CLIENT: SOCKOPEN\r\n");
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <httpc_connection_handler+0x1e0>)
 80007bc:	f005 fdc2 	bl	8006344 <puts>
#endif
					httpc_isSockOpen = HTTPC_TRUE;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <httpc_connection_handler+0x1d8>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
				}
			}


			break;
 80007c6:	e001      	b.n	80007cc <httpc_connection_handler+0x1bc>

		default:
			break;
 80007c8:	bf00      	nop
 80007ca:	e000      	b.n	80007ce <httpc_connection_handler+0x1be>
			break;
 80007cc:	bf00      	nop
	}

	return ret;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	200000f8 	.word	0x200000f8
 80007dc:	08007614 	.word	0x08007614
 80007e0:	20000105 	.word	0x20000105
 80007e4:	20000106 	.word	0x20000106
 80007e8:	20000104 	.word	0x20000104
 80007ec:	08007648 	.word	0x08007648
 80007f0:	0800766c 	.word	0x0800766c

080007f4 <httpc_connect>:


// return: socket status
uint8_t httpc_connect()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
	uint8_t ret = HTTPC_FALSE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	71fb      	strb	r3, [r7, #7]

	if(httpsock >= 0)
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <httpc_connect+0x48>)
 8000800:	f993 3000 	ldrsb.w	r3, [r3]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db14      	blt.n	8000832 <httpc_connect+0x3e>
	{
		if(httpc_isSockOpen == HTTPC_TRUE)
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <httpc_connect+0x4c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d110      	bne.n	8000832 <httpc_connect+0x3e>
		{
			// TCP connect
			ret = connect(httpsock, dest_ip, dest_port);
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <httpc_connect+0x48>)
 8000812:	f993 3000 	ldrsb.w	r3, [r3]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <httpc_connect+0x50>)
 800081a:	8812      	ldrh	r2, [r2, #0]
 800081c:	490a      	ldr	r1, [pc, #40]	; (8000848 <httpc_connect+0x54>)
 800081e:	4618      	mov	r0, r3
 8000820:	f004 fda2 	bl	8005368 <connect>
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
			if(ret == SOCK_OK) ret = HTTPC_TRUE;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d101      	bne.n	8000832 <httpc_connect+0x3e>
 800082e:	2301      	movs	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
		}
	}

	return ret;
 8000832:	79fb      	ldrb	r3, [r7, #7]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000f8 	.word	0x200000f8
 8000840:	20000104 	.word	0x20000104
 8000844:	20000100 	.word	0x20000100
 8000848:	200000fc 	.word	0x200000fc

0800084c <httpc_send>:
}


// return: sent data length
uint16_t httpc_send(HttpRequest * req, uint8_t * buf, uint8_t * body, uint16_t content_len)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint16_t len;
	uint8_t http_header_generated = HTTPC_FAILED;
 800085a:	2300      	movs	r3, #0
 800085c:	74fb      	strb	r3, [r7, #19]

	if(httpc_isConnected == HTTPC_TRUE)
 800085e:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <httpc_send+0x19c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	f040 80b9 	bne.w	80009da <httpc_send+0x18e>
	{
		do
		{
			memset(buf, 0x00, DATA_BUF_SIZE);
 8000868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800086c:	2100      	movs	r1, #0
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	f005 fbe4 	bl	800603c <memset>

			/* HTTP request header */
			len = sprintf((char *)buf, "%s %s HTTP/1.1\r\n", req->method, req->uri);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	495b      	ldr	r1, [pc, #364]	; (80009ec <httpc_send+0x1a0>)
 800087e:	68b8      	ldr	r0, [r7, #8]
 8000880:	f005 fdb6 	bl	80063f0 <siprintf>
 8000884:	4603      	mov	r3, r0
 8000886:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Host: %s\r\n", req->host);
 8000888:	8abb      	ldrh	r3, [r7, #20]
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	18d0      	adds	r0, r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	461a      	mov	r2, r3
 8000894:	4956      	ldr	r1, [pc, #344]	; (80009f0 <httpc_send+0x1a4>)
 8000896:	f005 fdab 	bl	80063f0 <siprintf>
 800089a:	4603      	mov	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	8abb      	ldrh	r3, [r7, #20]
 80008a0:	4413      	add	r3, r2
 80008a2:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Connection: %s\r\n", req->connection);
 80008a4:	8abb      	ldrh	r3, [r7, #20]
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	18d0      	adds	r0, r2, r3
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	461a      	mov	r2, r3
 80008b0:	4950      	ldr	r1, [pc, #320]	; (80009f4 <httpc_send+0x1a8>)
 80008b2:	f005 fd9d 	bl	80063f0 <siprintf>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	8abb      	ldrh	r3, [r7, #20]
 80008bc:	4413      	add	r3, r2
 80008be:	82bb      	strh	r3, [r7, #20]

			// HTTP content type: POST / PUT only
			if(content_len > 0)
 80008c0:	887b      	ldrh	r3, [r7, #2]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d032      	beq.n	800092c <httpc_send+0xe0>
			{
				len += sprintf((char *)buf+len, "Content-Length: %d\r\n", content_len);
 80008c6:	8abb      	ldrh	r3, [r7, #20]
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	4413      	add	r3, r2
 80008cc:	887a      	ldrh	r2, [r7, #2]
 80008ce:	494a      	ldr	r1, [pc, #296]	; (80009f8 <httpc_send+0x1ac>)
 80008d0:	4618      	mov	r0, r3
 80008d2:	f005 fd8d 	bl	80063f0 <siprintf>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29a      	uxth	r2, r3
 80008da:	8abb      	ldrh	r3, [r7, #20]
 80008dc:	4413      	add	r3, r2
 80008de:	82bb      	strh	r3, [r7, #20]

				if(strcmp((char *)req->content_type, HTTP_CTYPE_MULTIPART_FORM) == 0)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	4945      	ldr	r1, [pc, #276]	; (80009fc <httpc_send+0x1b0>)
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fc72 	bl	80001d0 <strcmp>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10e      	bne.n	8000910 <httpc_send+0xc4>
				{
					// HTTP content type: multipart/form-data
					len += sprintf((char *)buf+len, "Content-Type: %s; boundary=%s\r\n", req->content_type, formDataBoundary);
 80008f2:	8abb      	ldrh	r3, [r7, #20]
 80008f4:	68ba      	ldr	r2, [r7, #8]
 80008f6:	18d0      	adds	r0, r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	4b40      	ldr	r3, [pc, #256]	; (8000a00 <httpc_send+0x1b4>)
 80008fe:	4941      	ldr	r1, [pc, #260]	; (8000a04 <httpc_send+0x1b8>)
 8000900:	f005 fd76 	bl	80063f0 <siprintf>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	8abb      	ldrh	r3, [r7, #20]
 800090a:	4413      	add	r3, r2
 800090c:	82bb      	strh	r3, [r7, #20]
 800090e:	e00d      	b.n	800092c <httpc_send+0xe0>
				}
				else
				{
					// HTTP content type: others
					len += sprintf((char *)buf+len, "Content-Type: %s\r\n", req->content_type); // HTTP content type: others
 8000910:	8abb      	ldrh	r3, [r7, #20]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	18d0      	adds	r0, r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	461a      	mov	r2, r3
 800091c:	493a      	ldr	r1, [pc, #232]	; (8000a08 <httpc_send+0x1bc>)
 800091e:	f005 fd67 	bl	80063f0 <siprintf>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	8abb      	ldrh	r3, [r7, #20]
 8000928:	4413      	add	r3, r2
 800092a:	82bb      	strh	r3, [r7, #20]
				}
			}
			len += sprintf((char *)buf+len, "\r\n");
 800092c:	8abb      	ldrh	r3, [r7, #20]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4413      	add	r3, r2
 8000932:	4936      	ldr	r1, [pc, #216]	; (8000a0c <httpc_send+0x1c0>)
 8000934:	4618      	mov	r0, r3
 8000936:	f005 fd5b 	bl	80063f0 <siprintf>
 800093a:	4603      	mov	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	8abb      	ldrh	r3, [r7, #20]
 8000940:	4413      	add	r3, r2
 8000942:	82bb      	strh	r3, [r7, #20]

			// Avoiding buffer overflow
			if((len + content_len) > DATA_BUF_SIZE) {
 8000944:	8aba      	ldrh	r2, [r7, #20]
 8000946:	887b      	ldrh	r3, [r7, #2]
 8000948:	4413      	add	r3, r2
 800094a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800094e:	dd04      	ble.n	800095a <httpc_send+0x10e>
				content_len = DATA_BUF_SIZE - len; // HTTP request header re-generation (do-while)
 8000950:	8abb      	ldrh	r3, [r7, #20]
 8000952:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000956:	807b      	strh	r3, [r7, #2]
 8000958:	e001      	b.n	800095e <httpc_send+0x112>
				//http_header_generated = FAILED;
			} else {
				http_header_generated = HTTPC_SUCCESS;
 800095a:	2301      	movs	r3, #1
 800095c:	74fb      	strb	r3, [r7, #19]
			}
		} while(http_header_generated != HTTPC_SUCCESS);
 800095e:	7cfb      	ldrb	r3, [r7, #19]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d181      	bne.n	8000868 <httpc_send+0x1c>

		/* HTTP request body */
		for(i = 0; i < content_len; i++)
 8000964:	2300      	movs	r3, #0
 8000966:	82fb      	strh	r3, [r7, #22]
 8000968:	e00d      	b.n	8000986 <httpc_send+0x13a>
		{
			buf[len++] = body[i];
 800096a:	8afb      	ldrh	r3, [r7, #22]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	441a      	add	r2, r3
 8000970:	8abb      	ldrh	r3, [r7, #20]
 8000972:	1c59      	adds	r1, r3, #1
 8000974:	82b9      	strh	r1, [r7, #20]
 8000976:	4619      	mov	r1, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	440b      	add	r3, r1
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < content_len; i++)
 8000980:	8afb      	ldrh	r3, [r7, #22]
 8000982:	3301      	adds	r3, #1
 8000984:	82fb      	strh	r3, [r7, #22]
 8000986:	8afa      	ldrh	r2, [r7, #22]
 8000988:	887b      	ldrh	r3, [r7, #2]
 800098a:	429a      	cmp	r2, r3
 800098c:	d3ed      	bcc.n	800096a <httpc_send+0x11e>
		}

//#ifdef _HTTPCLIENT_DEBUG_
		printf(" >> HTTP Request - Method: %s, URI: %s, Content-Length: %d\r\n", req->method, req->uri, content_len);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6819      	ldr	r1, [r3, #0]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	685a      	ldr	r2, [r3, #4]
 8000996:	887b      	ldrh	r3, [r7, #2]
 8000998:	481d      	ldr	r0, [pc, #116]	; (8000a10 <httpc_send+0x1c4>)
 800099a:	f005 fc37 	bl	800620c <iprintf>
		for(i = 0; i < len; i++) printf("%c", buf[i]);
 800099e:	2300      	movs	r3, #0
 80009a0:	82fb      	strh	r3, [r7, #22]
 80009a2:	e009      	b.n	80009b8 <httpc_send+0x16c>
 80009a4:	8afb      	ldrh	r3, [r7, #22]
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f005 fc45 	bl	800623c <putchar>
 80009b2:	8afb      	ldrh	r3, [r7, #22]
 80009b4:	3301      	adds	r3, #1
 80009b6:	82fb      	strh	r3, [r7, #22]
 80009b8:	8afa      	ldrh	r2, [r7, #22]
 80009ba:	8abb      	ldrh	r3, [r7, #20]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d3f1      	bcc.n	80009a4 <httpc_send+0x158>
		printf("\r\n");
 80009c0:	4814      	ldr	r0, [pc, #80]	; (8000a14 <httpc_send+0x1c8>)
 80009c2:	f005 fcbf 	bl	8006344 <puts>
//#endif
		send(httpsock, buf, len);
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <httpc_send+0x1cc>)
 80009c8:	f993 3000 	ldrsb.w	r3, [r3]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	8aba      	ldrh	r2, [r7, #20]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f004 fe1a 	bl	800560c <send>
 80009d8:	e001      	b.n	80009de <httpc_send+0x192>
	}
	else
	{
		len = HTTPC_FAILED;
 80009da:	2300      	movs	r3, #0
 80009dc:	82bb      	strh	r3, [r7, #20]
	}

	return len;
 80009de:	8abb      	ldrh	r3, [r7, #20]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000105 	.word	0x20000105
 80009ec:	080076a0 	.word	0x080076a0
 80009f0:	080076b4 	.word	0x080076b4
 80009f4:	080076c0 	.word	0x080076c0
 80009f8:	080076d4 	.word	0x080076d4
 80009fc:	080076ec 	.word	0x080076ec
 8000a00:	08007700 	.word	0x08007700
 8000a04:	08007728 	.word	0x08007728
 8000a08:	08007748 	.word	0x08007748
 8000a0c:	08007760 	.word	0x08007760
 8000a10:	080077c4 	.word	0x080077c4
 8000a14:	080077c0 	.word	0x080077c0
 8000a18:	200000f8 	.word	0x200000f8

08000a1c <httpc_recv>:


// return: received data length
uint16_t httpc_recv(uint8_t * buf, uint16_t len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	uint16_t recvlen;

	if(httpc_isConnected == HTTPC_TRUE)
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <httpc_recv+0x48>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d112      	bne.n	8000a56 <httpc_recv+0x3a>
	{
		if(len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 8000a30:	887b      	ldrh	r3, [r7, #2]
 8000a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a36:	d902      	bls.n	8000a3e <httpc_recv+0x22>
 8000a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a3c:	807b      	strh	r3, [r7, #2]
		recvlen = recv(httpsock, buf, len);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <httpc_recv+0x4c>)
 8000a40:	f993 3000 	ldrsb.w	r3, [r3]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	887a      	ldrh	r2, [r7, #2]
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fed8 	bl	8005800 <recv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	81fb      	strh	r3, [r7, #14]
 8000a54:	e001      	b.n	8000a5a <httpc_recv+0x3e>
	}
	else
	{
		recvlen = HTTPC_FAILED;
 8000a56:	2300      	movs	r3, #0
 8000a58:	81fb      	strh	r3, [r7, #14]
	}

	return recvlen;
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000105 	.word	0x20000105
 8000a68:	200000f8 	.word	0x200000f8

08000a6c <get_httpc_any_port>:
}


// return: source port number for tcp client
uint16_t get_httpc_any_port(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	if(httpc_any_port)
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <get_httpc_any_port+0x74>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d014      	beq.n	8000aa2 <get_httpc_any_port+0x36>
	{
		if((httpc_any_port >= HTTP_CLIENT_PORT_MIN) && (httpc_any_port < HTTP_CLIENT_PORT_MAX)) {
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <get_httpc_any_port+0x74>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 8000a80:	d30c      	bcc.n	8000a9c <get_httpc_any_port+0x30>
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <get_httpc_any_port+0x74>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d006      	beq.n	8000a9c <get_httpc_any_port+0x30>
			httpc_any_port++;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <get_httpc_any_port+0x74>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <get_httpc_any_port+0x74>)
 8000a98:	801a      	strh	r2, [r3, #0]
 8000a9a:	e002      	b.n	8000aa2 <get_httpc_any_port+0x36>
		} else {
			httpc_any_port = 0;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <get_httpc_any_port+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	801a      	strh	r2, [r3, #0]
		}
	}

	if(httpc_any_port < HTTP_CLIENT_PORT_MIN)
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <get_httpc_any_port+0x74>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 8000aaa:	d214      	bcs.n	8000ad6 <get_httpc_any_port+0x6a>
	{
		// todo: get random seed value
		httpc_any_port = (rand() % 10000) + 46000; // 46000 ~ 55999
 8000aac:	f005 fc52 	bl	8006354 <rand>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <get_httpc_any_port+0x78>)
 8000ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab8:	1311      	asrs	r1, r2, #12
 8000aba:	17da      	asrs	r2, r3, #31
 8000abc:	1a8a      	subs	r2, r1, r2
 8000abe:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ac2:	fb01 f202 	mul.w	r2, r1, r2
 8000ac6:	1a9a      	subs	r2, r3, r2
 8000ac8:	b293      	uxth	r3, r2
 8000aca:	f5a3 4398 	sub.w	r3, r3, #19456	; 0x4c00
 8000ace:	3b50      	subs	r3, #80	; 0x50
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <get_httpc_any_port+0x74>)
 8000ad4:	801a      	strh	r2, [r3, #0]
	}

	return httpc_any_port;
 8000ad6:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <get_httpc_any_port+0x74>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000102 	.word	0x20000102
 8000ae4:	68db8bad 	.word	0x68db8bad

08000ae8 <_write>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void print_network_information(void);

int _write(int fd, char *str, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	e00b      	b.n	8000b12 <_write+0x2a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	18d1      	adds	r1, r2, r3
 8000b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b04:	2201      	movs	r2, #1
 8000b06:	4807      	ldr	r0, [pc, #28]	; (8000b24 <_write+0x3c>)
 8000b08:	f003 fc8d 	bl	8004426 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	dbef      	blt.n	8000afa <_write+0x12>
	}
	return len;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000025c 	.word	0x2000025c

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int len, server_fd = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  unsigned int ret = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f000 ff77 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 f887 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f000 f9f7 	bl	8000f30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b42:	f000 f901 	bl	8000d48 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b46:	f000 f92d 	bl	8000da4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b4a:	f000 f95b 	bl	8000e04 <MX_SPI1_Init>
  MX_CRC_Init();
 8000b4e:	f000 f8e7 	bl	8000d20 <MX_CRC_Init>
  MX_SPI2_Init();
 8000b52:	f000 f98d 	bl	8000e70 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000b56:	f000 f9c1 	bl	8000edc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  w5500_init(&w5500);
 8000b5a:	482d      	ldr	r0, [pc, #180]	; (8000c10 <main+0xe8>)
 8000b5c:	f000 fecc 	bl	80018f8 <w5500_init>
  print_network_information();
 8000b60:	f000 fb26 	bl	80011b0 <print_network_information>
  httpc_init(0, Domain_IP, 12041, g_send_buf, g_recv_buf);
 8000b64:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <main+0xec>)
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <main+0xf0>)
 8000b6a:	f642 7209 	movw	r2, #12041	; 0x2f09
 8000b6e:	492b      	ldr	r1, [pc, #172]	; (8000c1c <main+0xf4>)
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fd0f 	bl	8000594 <httpc_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  httpc_connection_handler();
 8000b76:	f7ff fd4b 	bl	8000610 <httpc_connection_handler>
	  if(httpc_isSockOpen)
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <main+0xf8>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <main+0x5e>
	  {
		  httpc_connect();
 8000b82:	f7ff fe37 	bl	80007f4 <httpc_connect>
	  }
	  // HTTP client example
	  if(httpc_isConnected)
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <main+0xfc>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d011      	beq.n	8000bb2 <main+0x8a>
	  {
		  // Send: HTTP request
		  request.method = (uint8_t *)HTTP_GET;
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <main+0x100>)
 8000b90:	4a26      	ldr	r2, [pc, #152]	; (8000c2c <main+0x104>)
 8000b92:	601a      	str	r2, [r3, #0]
		  request.uri = (uint8_t *)URI;
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <main+0x100>)
 8000b96:	4a26      	ldr	r2, [pc, #152]	; (8000c30 <main+0x108>)
 8000b98:	605a      	str	r2, [r3, #4]
		  request.host = (uint8_t *)Domain_name;
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <main+0x100>)
 8000b9c:	4a25      	ldr	r2, [pc, #148]	; (8000c34 <main+0x10c>)
 8000b9e:	609a      	str	r2, [r3, #8]

		  // HTTP client example #1: Function for send HTTP request (header and body fields are integrated)
		  {
			  httpc_send(&request, g_recv_buf, g_send_buf, 0);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <main+0xf0>)
 8000ba4:	491b      	ldr	r1, [pc, #108]	; (8000c14 <main+0xec>)
 8000ba6:	4820      	ldr	r0, [pc, #128]	; (8000c28 <main+0x100>)
 8000ba8:	f7ff fe50 	bl	800084c <httpc_send>
			  //httpc_add_customHeader_field(tmpbuf, "Key", "auth_key_string"); // custom header field extended - example #2
			  //httpc_send_header(&request, g_recv_buf, tmpbuf, len);
			  //httpc_send_body(g_send_buf, len);
		  }

		  flag_sent_http_request = ENABLE;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <main+0x110>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
	  }
	  // Recv: HTTP response
	  if(httpc_isReceived > 0)
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <main+0x114>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d025      	beq.n	8000c06 <main+0xde>
	  {
		  len = httpc_recv(g_recv_buf, httpc_isReceived);
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <main+0x114>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4814      	ldr	r0, [pc, #80]	; (8000c14 <main+0xec>)
 8000bc2:	f7ff ff2b 	bl	8000a1c <httpc_recv>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	613b      	str	r3, [r7, #16]

		  printf(" >> HTTP Response - Received len: %d\r\n", len);
 8000bca:	6939      	ldr	r1, [r7, #16]
 8000bcc:	481c      	ldr	r0, [pc, #112]	; (8000c40 <main+0x118>)
 8000bce:	f005 fb1d 	bl	800620c <iprintf>
		  printf("======================================================\r\n");
 8000bd2:	481c      	ldr	r0, [pc, #112]	; (8000c44 <main+0x11c>)
 8000bd4:	f005 fbb6 	bl	8006344 <puts>
		  for(int i = 0; i < len; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	e009      	b.n	8000bf2 <main+0xca>
			  printf("%c", g_recv_buf[i]);
 8000bde:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <main+0xec>)
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	4413      	add	r3, r2
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 fb28 	bl	800623c <putchar>
		  for(int i = 0; i < len; i++)
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	69fa      	ldr	r2, [r7, #28]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	dbf1      	blt.n	8000bde <main+0xb6>
		  printf("\r\n");
 8000bfa:	4813      	ldr	r0, [pc, #76]	; (8000c48 <main+0x120>)
 8000bfc:	f005 fba2 	bl	8006344 <puts>
		  printf("======================================================\r\n");
 8000c00:	4810      	ldr	r0, [pc, #64]	; (8000c44 <main+0x11c>)
 8000c02:	f005 fb9f 	bl	8006344 <puts>
	  }
	  HAL_Delay(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f000 ff7f 	bl	8001b0c <HAL_Delay>
	  httpc_connection_handler();
 8000c0e:	e7b2      	b.n	8000b76 <main+0x4e>
 8000c10:	200002a0 	.word	0x200002a0
 8000c14:	20000ac0 	.word	0x20000ac0
 8000c18:	200002c0 	.word	0x200002c0
 8000c1c:	20000018 	.word	0x20000018
 8000c20:	20000104 	.word	0x20000104
 8000c24:	20000105 	.word	0x20000105
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	08007848 	.word	0x08007848
 8000c30:	2000002c 	.word	0x2000002c
 8000c34:	2000001c 	.word	0x2000001c
 8000c38:	200002bf 	.word	0x200002bf
 8000c3c:	20000106 	.word	0x20000106
 8000c40:	0800784c 	.word	0x0800784c
 8000c44:	08007874 	.word	0x08007874
 8000c48:	080078ac 	.word	0x080078ac

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	; 0x50
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0320 	add.w	r3, r7, #32
 8000c56:	2230      	movs	r2, #48	; 0x30
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f005 f9ee 	bl	800603c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <SystemClock_Config+0xcc>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <SystemClock_Config+0xcc>)
 8000c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <SystemClock_Config+0xcc>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 ffda 	bl	8002c8c <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cde:	f000 fad3 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2105      	movs	r1, #5
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fa3b 	bl	800317c <HAL_RCC_ClockConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d0c:	f000 fabc 	bl	8001288 <Error_Handler>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	; 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_CRC_Init+0x20>)
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <MX_CRC_Init+0x24>)
 8000d28:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_CRC_Init+0x20>)
 8000d2c:	f000 fff7 	bl	8001d1e <HAL_CRC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000d36:	f000 faa7 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000108 	.word	0x20000108
 8000d44:	40023000 	.word	0x40023000

08000d48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d4e:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <MX_I2C1_Init+0x54>)
 8000d50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d54:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_I2C1_Init+0x58>)
 8000d56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d86:	f001 f99d 	bl	80020c4 <HAL_I2C_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d90:	f000 fa7a 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000110 	.word	0x20000110
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	000186a0 	.word	0x000186a0

08000da4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000daa:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <MX_I2S3_Init+0x58>)
 8000dac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <MX_I2S3_Init+0x5c>)
 8000dce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_I2S3_Init+0x54>)
 8000de4:	f001 fab2 	bl	800234c <HAL_I2S_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000dee:	f000 fa4b 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000164 	.word	0x20000164
 8000dfc:	40003c00 	.word	0x40003c00
 8000e00:	00017700 	.word	0x00017700

08000e04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e0a:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <MX_SPI1_Init+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e50:	220a      	movs	r2, #10
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_SPI1_Init+0x64>)
 8000e56:	f002 fcf1 	bl	800383c <HAL_SPI_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e60:	f000 fa12 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001ac 	.word	0x200001ac
 8000e6c:	40013000 	.word	0x40013000

08000e70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <MX_SPI2_Init+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000e7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000ea4:	2218      	movs	r2, #24
 8000ea6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000ebc:	220a      	movs	r2, #10
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_SPI2_Init+0x64>)
 8000ec2:	f002 fcbb 	bl	800383c <HAL_SPI_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ecc:	f000 f9dc 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000204 	.word	0x20000204
 8000ed8:	40003800 	.word	0x40003800

08000edc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <MX_USART2_UART_Init+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f14:	f003 fa3a 	bl	800438c <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f1e:	f000 f9b3 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000025c 	.word	0x2000025c
 8000f2c:	40004400 	.word	0x40004400

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	4b93      	ldr	r3, [pc, #588]	; (8001198 <MX_GPIO_Init+0x268>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a92      	ldr	r2, [pc, #584]	; (8001198 <MX_GPIO_Init+0x268>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b90      	ldr	r3, [pc, #576]	; (8001198 <MX_GPIO_Init+0x268>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	4b8c      	ldr	r3, [pc, #560]	; (8001198 <MX_GPIO_Init+0x268>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a8b      	ldr	r2, [pc, #556]	; (8001198 <MX_GPIO_Init+0x268>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b89      	ldr	r3, [pc, #548]	; (8001198 <MX_GPIO_Init+0x268>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b85      	ldr	r3, [pc, #532]	; (8001198 <MX_GPIO_Init+0x268>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a84      	ldr	r2, [pc, #528]	; (8001198 <MX_GPIO_Init+0x268>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b82      	ldr	r3, [pc, #520]	; (8001198 <MX_GPIO_Init+0x268>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <MX_GPIO_Init+0x268>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a7d      	ldr	r2, [pc, #500]	; (8001198 <MX_GPIO_Init+0x268>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <MX_GPIO_Init+0x268>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	4b77      	ldr	r3, [pc, #476]	; (8001198 <MX_GPIO_Init+0x268>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a76      	ldr	r2, [pc, #472]	; (8001198 <MX_GPIO_Init+0x268>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b74      	ldr	r3, [pc, #464]	; (8001198 <MX_GPIO_Init+0x268>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b70      	ldr	r3, [pc, #448]	; (8001198 <MX_GPIO_Init+0x268>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a6f      	ldr	r2, [pc, #444]	; (8001198 <MX_GPIO_Init+0x268>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b6d      	ldr	r3, [pc, #436]	; (8001198 <MX_GPIO_Init+0x268>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	486a      	ldr	r0, [pc, #424]	; (800119c <MX_GPIO_Init+0x26c>)
 8000ff4:	f001 f84c 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4868      	ldr	r0, [pc, #416]	; (80011a0 <MX_GPIO_Init+0x270>)
 8000ffe:	f001 f847 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin|W5500_RST_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001008:	4866      	ldr	r0, [pc, #408]	; (80011a4 <MX_GPIO_Init+0x274>)
 800100a:	f001 f841 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800100e:	2200      	movs	r2, #0
 8001010:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001014:	4864      	ldr	r0, [pc, #400]	; (80011a8 <MX_GPIO_Init+0x278>)
 8001016:	f001 f83b 	bl	8002090 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800101a:	2308      	movs	r3, #8
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	485a      	ldr	r0, [pc, #360]	; (800119c <MX_GPIO_Init+0x26c>)
 8001032:	f000 fe91 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001036:	2301      	movs	r3, #1
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	4854      	ldr	r0, [pc, #336]	; (80011a0 <MX_GPIO_Init+0x270>)
 800104e:	f000 fe83 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001052:	2308      	movs	r3, #8
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001062:	2305      	movs	r3, #5
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	484c      	ldr	r0, [pc, #304]	; (80011a0 <MX_GPIO_Init+0x270>)
 800106e:	f000 fe73 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001072:	2301      	movs	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001076:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4849      	ldr	r0, [pc, #292]	; (80011ac <MX_GPIO_Init+0x27c>)
 8001088:	f000 fe66 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800108c:	2304      	movs	r3, #4
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	4841      	ldr	r0, [pc, #260]	; (80011a4 <MX_GPIO_Init+0x274>)
 80010a0:	f000 fe5a 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b6:	2305      	movs	r3, #5
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4838      	ldr	r0, [pc, #224]	; (80011a4 <MX_GPIO_Init+0x274>)
 80010c2:	f000 fe49 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4831      	ldr	r0, [pc, #196]	; (80011a4 <MX_GPIO_Init+0x274>)
 80010e0:	f000 fe3a 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 80010e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4829      	ldr	r0, [pc, #164]	; (80011a4 <MX_GPIO_Init+0x274>)
 80010fe:	f000 fe2b 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001102:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001106:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4823      	ldr	r0, [pc, #140]	; (80011a8 <MX_GPIO_Init+0x278>)
 800111c:	f000 fe1c 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	481d      	ldr	r0, [pc, #116]	; (80011ac <MX_GPIO_Init+0x27c>)
 8001136:	f000 fe0f 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800113a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800114c:	230a      	movs	r3, #10
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <MX_GPIO_Init+0x27c>)
 8001158:	f000 fdfe 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800115c:	2320      	movs	r3, #32
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <MX_GPIO_Init+0x278>)
 8001170:	f000 fdf2 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001174:	2302      	movs	r3, #2
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001178:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_GPIO_Init+0x26c>)
 800118a:	f000 fde5 	bl	8001d58 <HAL_GPIO_Init>

}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40021000 	.word	0x40021000
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40020000 	.word	0x40020000

080011b0 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af04      	add	r7, sp, #16
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", w5500.netinfo.mac[0], w5500.netinfo.mac[1], w5500.netinfo.mac[2], w5500.netinfo.mac[3], w5500.netinfo.mac[4], w5500.netinfo.mac[5]);
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <print_network_information+0xc0>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <print_network_information+0xc0>)
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	461c      	mov	r4, r3
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <print_network_information+0xc0>)
 80011c4:	789b      	ldrb	r3, [r3, #2]
 80011c6:	461d      	mov	r5, r3
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <print_network_information+0xc0>)
 80011ca:	78db      	ldrb	r3, [r3, #3]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <print_network_information+0xc0>)
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <print_network_information+0xc0>)
 80011d6:	795b      	ldrb	r3, [r3, #5]
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	9101      	str	r1, [sp, #4]
 80011dc:	9200      	str	r2, [sp, #0]
 80011de:	462b      	mov	r3, r5
 80011e0:	4622      	mov	r2, r4
 80011e2:	4601      	mov	r1, r0
 80011e4:	4823      	ldr	r0, [pc, #140]	; (8001274 <print_network_information+0xc4>)
 80011e6:	f005 f811 	bl	800620c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r", w5500.netinfo.ip[0], w5500.netinfo.ip[1], w5500.netinfo.ip[2], w5500.netinfo.ip[3]);
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <print_network_information+0xc0>)
 80011ec:	799b      	ldrb	r3, [r3, #6]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <print_network_information+0xc0>)
 80011f2:	79db      	ldrb	r3, [r3, #7]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <print_network_information+0xc0>)
 80011f8:	7a1b      	ldrb	r3, [r3, #8]
 80011fa:	4618      	mov	r0, r3
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <print_network_information+0xc0>)
 80011fe:	7a5b      	ldrb	r3, [r3, #9]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4603      	mov	r3, r0
 8001204:	481c      	ldr	r0, [pc, #112]	; (8001278 <print_network_information+0xc8>)
 8001206:	f005 f801 	bl	800620c <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r", w5500.netinfo.sn[0], w5500.netinfo.sn[1], w5500.netinfo.sn[2], w5500.netinfo.sn[3]);
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <print_network_information+0xc0>)
 800120c:	7a9b      	ldrb	r3, [r3, #10]
 800120e:	4619      	mov	r1, r3
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <print_network_information+0xc0>)
 8001212:	7adb      	ldrb	r3, [r3, #11]
 8001214:	461a      	mov	r2, r3
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <print_network_information+0xc0>)
 8001218:	7b1b      	ldrb	r3, [r3, #12]
 800121a:	4618      	mov	r0, r3
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <print_network_information+0xc0>)
 800121e:	7b5b      	ldrb	r3, [r3, #13]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	4603      	mov	r3, r0
 8001224:	4815      	ldr	r0, [pc, #84]	; (800127c <print_network_information+0xcc>)
 8001226:	f004 fff1 	bl	800620c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r", w5500.netinfo.gw[0], w5500.netinfo.gw[1], w5500.netinfo.gw[2], w5500.netinfo.gw[3]);
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <print_network_information+0xc0>)
 800122c:	7b9b      	ldrb	r3, [r3, #14]
 800122e:	4619      	mov	r1, r3
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <print_network_information+0xc0>)
 8001232:	7bdb      	ldrb	r3, [r3, #15]
 8001234:	461a      	mov	r2, r3
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <print_network_information+0xc0>)
 8001238:	7c1b      	ldrb	r3, [r3, #16]
 800123a:	4618      	mov	r0, r3
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <print_network_information+0xc0>)
 800123e:	7c5b      	ldrb	r3, [r3, #17]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	4603      	mov	r3, r0
 8001244:	480e      	ldr	r0, [pc, #56]	; (8001280 <print_network_information+0xd0>)
 8001246:	f004 ffe1 	bl	800620c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r", w5500.netinfo.dns[0], w5500.netinfo.dns[1], w5500.netinfo.dns[2], w5500.netinfo.dns[3]);
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <print_network_information+0xc0>)
 800124c:	7c9b      	ldrb	r3, [r3, #18]
 800124e:	4619      	mov	r1, r3
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <print_network_information+0xc0>)
 8001252:	7cdb      	ldrb	r3, [r3, #19]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <print_network_information+0xc0>)
 8001258:	7d1b      	ldrb	r3, [r3, #20]
 800125a:	4618      	mov	r0, r3
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <print_network_information+0xc0>)
 800125e:	7d5b      	ldrb	r3, [r3, #21]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	4603      	mov	r3, r0
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <print_network_information+0xd4>)
 8001266:	f004 ffd1 	bl	800620c <iprintf>
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bdb0      	pop	{r4, r5, r7, pc}
 8001270:	200002a0 	.word	0x200002a0
 8001274:	080078b0 	.word	0x080078b0
 8001278:	080078e0 	.word	0x080078e0
 800127c:	080078fc 	.word	0x080078fc
 8001280:	08007918 	.word	0x08007918
 8001284:	08007934 	.word	0x08007934

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012d2:	2007      	movs	r0, #7
 80012d4:	f000 fcf0 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_CRC_MspInit+0x3c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10d      	bne.n	8001312 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_CRC_MspInit+0x40>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_CRC_MspInit+0x40>)
 8001300:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_CRC_MspInit+0x40>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023000 	.word	0x40023000
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_I2C_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12c      	bne.n	80013a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001366:	f44f 7310 	mov.w	r3, #576	; 0x240
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136c:	2312      	movs	r3, #18
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001378:	2304      	movs	r3, #4
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <HAL_I2C_MspInit+0x8c>)
 8001384:	f000 fce8 	bl	8001d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40005400 	.word	0x40005400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020400 	.word	0x40020400

080013b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a31      	ldr	r2, [pc, #196]	; (80014a8 <HAL_I2S_MspInit+0xf0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d15a      	bne.n	800149e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013e8:	2301      	movs	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013ec:	23c0      	movs	r3, #192	; 0xc0
 80013ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 f8df 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001404:	f7ff ff40 	bl	8001288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_I2S_MspInit+0xf4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a26      	ldr	r2, [pc, #152]	; (80014ac <HAL_I2S_MspInit+0xf4>)
 8001412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_I2S_MspInit+0xf4>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_I2S_MspInit+0xf4>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <HAL_I2S_MspInit+0xf4>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_I2S_MspInit+0xf4>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_I2S_MspInit+0xf4>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a18      	ldr	r2, [pc, #96]	; (80014ac <HAL_I2S_MspInit+0xf4>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_I2S_MspInit+0xf4>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800145c:	2310      	movs	r3, #16
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800146c:	2306      	movs	r3, #6
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <HAL_I2S_MspInit+0xf8>)
 8001478:	f000 fc6e 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800147c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800148e:	2306      	movs	r3, #6
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <HAL_I2S_MspInit+0xfc>)
 800149a:	f000 fc5d 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40003c00 	.word	0x40003c00
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020800 	.word	0x40020800

080014b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a41      	ldr	r2, [pc, #260]	; (80015dc <HAL_SPI_MspInit+0x124>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12c      	bne.n	8001534 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a3f      	ldr	r2, [pc, #252]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 80014e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001512:	23e0      	movs	r3, #224	; 0xe0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001522:	2305      	movs	r3, #5
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	482d      	ldr	r0, [pc, #180]	; (80015e4 <HAL_SPI_MspInit+0x12c>)
 800152e:	f000 fc13 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001532:	e04f      	b.n	80015d4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2b      	ldr	r2, [pc, #172]	; (80015e8 <HAL_SPI_MspInit+0x130>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d14a      	bne.n	80015d4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = W5500_MISO_Pin;
 8001592:	2304      	movs	r3, #4
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a2:	2305      	movs	r3, #5
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(W5500_MISO_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	480f      	ldr	r0, [pc, #60]	; (80015ec <HAL_SPI_MspInit+0x134>)
 80015ae:	f000 fbd3 	bl	8001d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MOSI_Pin;
 80015b2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c4:	2305      	movs	r3, #5
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4808      	ldr	r0, [pc, #32]	; (80015f0 <HAL_SPI_MspInit+0x138>)
 80015d0:	f000 fbc2 	bl	8001d58 <HAL_GPIO_Init>
}
 80015d4:	bf00      	nop
 80015d6:	3730      	adds	r7, #48	; 0x30
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40013000 	.word	0x40013000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40003800 	.word	0x40003800
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020400 	.word	0x40020400

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_UART_MspInit+0x84>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12b      	bne.n	800166e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_UART_MspInit+0x88>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_UART_MspInit+0x88>)
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_UART_MspInit+0x88>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_UART_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <HAL_UART_MspInit+0x88>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_UART_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PRINT_TX_Pin|PRINT_RX_Pin;
 800164e:	230c      	movs	r3, #12
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800165e:	2307      	movs	r3, #7
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_UART_MspInit+0x8c>)
 800166a:	f000 fb75 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40004400 	.word	0x40004400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d0:	f000 f9fc 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_kill>:

int _kill(int pid, int sig)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016f2:	f004 fc49 	bl	8005f88 <__errno>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2216      	movs	r2, #22
 80016fa:	601a      	str	r2, [r3, #0]
	return -1;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_exit>:

void _exit (int status)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffe7 	bl	80016e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800171a:	e7fe      	b.n	800171a <_exit+0x12>

0800171c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e00a      	b.n	8001744 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800172e:	f3af 8000 	nop.w
 8001732:	4601      	mov	r1, r0
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	b2ca      	uxtb	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbf0      	blt.n	800172e <_read+0x12>
	}

return len;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return -1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800177e:	605a      	str	r2, [r3, #4]
	return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_isatty>:

int _isatty(int file)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	return 1;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
	return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f004 fbca 	bl	8005f88 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20020000 	.word	0x20020000
 8001820:	00000400 	.word	0x00000400
 8001824:	200012c0 	.word	0x200012c0
 8001828:	20001300 	.word	0x20001300

0800182c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <w5500_select>:
#include "wizchip.h"
#include "string.h"


static void w5500_select(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185a:	4802      	ldr	r0, [pc, #8]	; (8001864 <w5500_select+0x14>)
 800185c:	f000 fc18 	bl	8002090 <HAL_GPIO_WritePin>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020400 	.word	0x40020400

08001868 <w5500_unselect>:

static void w5500_unselect(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <w5500_unselect+0x14>)
 8001874:	f000 fc0c 	bl	8002090 <HAL_GPIO_WritePin>
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40020400 	.word	0x40020400

08001880 <w5500_read_byte>:

static uint8_t w5500_read_byte(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
    uint8_t rb;
    HAL_SPI_Receive(W5500_SPI_PORT, &rb, 1, HAL_MAX_DELAY);
 8001886:	1df9      	adds	r1, r7, #7
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	2201      	movs	r2, #1
 800188e:	4804      	ldr	r0, [pc, #16]	; (80018a0 <w5500_read_byte+0x20>)
 8001890:	f002 f999 	bl	8003bc6 <HAL_SPI_Receive>
    return rb;
 8001894:	79fb      	ldrb	r3, [r7, #7]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000204 	.word	0x20000204

080018a4 <w5500_write_byte>:

static void w5500_write_byte(uint8_t wb)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(W5500_SPI_PORT, &wb, 1, HAL_MAX_DELAY);
 80018ae:	1df9      	adds	r1, r7, #7
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
 80018b4:	2201      	movs	r2, #1
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <w5500_write_byte+0x20>)
 80018b8:	f002 f849 	bl	800394e <HAL_SPI_Transmit>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000204 	.word	0x20000204

080018c8 <w5500_hw_reset>:

static void w5500_hw_reset(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d2:	4808      	ldr	r0, [pc, #32]	; (80018f4 <w5500_hw_reset+0x2c>)
 80018d4:	f000 fbdc 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018d8:	200a      	movs	r0, #10
 80018da:	f000 f917 	bl	8001b0c <HAL_Delay>
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, SET);
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e4:	4803      	ldr	r0, [pc, #12]	; (80018f4 <w5500_hw_reset+0x2c>)
 80018e6:	f000 fbd3 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018ea:	200a      	movs	r0, #10
 80018ec:	f000 f90e 	bl	8001b0c <HAL_Delay>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40020400 	.word	0x40020400

080018f8 <w5500_init>:

void w5500_init(w5500chip_t *chip)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	/*link up architecture based spi cntrl funcs to lib funcs*/
	reg_wizchip_cs_cbfunc(w5500_select, w5500_unselect);
 8001900:	492c      	ldr	r1, [pc, #176]	; (80019b4 <w5500_init+0xbc>)
 8001902:	482d      	ldr	r0, [pc, #180]	; (80019b8 <w5500_init+0xc0>)
 8001904:	f004 f996 	bl	8005c34 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(w5500_read_byte, w5500_write_byte);
 8001908:	492c      	ldr	r1, [pc, #176]	; (80019bc <w5500_init+0xc4>)
 800190a:	482d      	ldr	r0, [pc, #180]	; (80019c0 <w5500_init+0xc8>)
 800190c:	f004 f9b8 	bl	8005c80 <reg_wizchip_spi_cbfunc>
	w5500_hw_reset();
 8001910:	f7ff ffda 	bl	80018c8 <w5500_hw_reset>
	/*split up rxtx buffer among sockets*/
	chip->rxtx_buff[SOCK_0] = 16;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2210      	movs	r2, #16
 8001918:	75da      	strb	r2, [r3, #23]
	chip->rxtx_buff[SOCK_1] = 0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	761a      	strb	r2, [r3, #24]
	chip->rxtx_buff[SOCK_2] = 0;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	765a      	strb	r2, [r3, #25]
	chip->rxtx_buff[SOCK_3] = 0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	769a      	strb	r2, [r3, #26]
	chip->rxtx_buff[SOCK_4] = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	76da      	strb	r2, [r3, #27]
	chip->rxtx_buff[SOCK_5] = 0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
	chip->rxtx_buff[SOCK_6] = 0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	775a      	strb	r2, [r3, #29]
	chip->rxtx_buff[SOCK_7] = 0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	779a      	strb	r2, [r3, #30]

	uint8_t mac[6] = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef};
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <w5500_init+0xcc>)
 8001946:	f107 0318 	add.w	r3, r7, #24
 800194a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800194e:	6018      	str	r0, [r3, #0]
 8001950:	3304      	adds	r3, #4
 8001952:	8019      	strh	r1, [r3, #0]
	memcpy(chip->netinfo.mac, mac, 6);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	6010      	str	r0, [r2, #0]
 8001960:	889b      	ldrh	r3, [r3, #4]
 8001962:	8093      	strh	r3, [r2, #4]

	uint8_t ip[4] = {192, 168, 0, 3};
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <w5500_init+0xd0>)
 8001966:	617b      	str	r3, [r7, #20]
	memcpy(chip->netinfo.ip, ip, 4);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3306      	adds	r3, #6
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]

	/*setting subnet mask*/
	uint8_t sn[4] = {255, 255, 252, 0};
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <w5500_init+0xd4>)
 8001972:	613b      	str	r3, [r7, #16]
	memcpy(chip->netinfo.sn, sn, 4);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	330a      	adds	r3, #10
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	601a      	str	r2, [r3, #0]

	/*setting gateway*/
	uint8_t gw[4] = {192, 168, 0, 2};
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <w5500_init+0xd8>)
 800197e:	60fb      	str	r3, [r7, #12]
	memcpy(chip->netinfo.gw, gw, 4);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	330e      	adds	r3, #14
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]

	wizchip_init(chip->rxtx_buff, chip->rxtx_buff);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f103 0217 	add.w	r2, r3, #23
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3317      	adds	r3, #23
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f004 f9eb 	bl	8005d70 <wizchip_init>
	wizchip_setnetinfo(&chip->netinfo);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fa73 	bl	8005e88 <wizchip_setnetinfo>
	/*after wizchip_getnetinfo() netinfo struct should stay the same*/
	wizchip_getnetinfo(&chip->netinfo);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f004 faaf 	bl	8005f08 <wizchip_getnetinfo>
}
 80019aa:	bf00      	nop
 80019ac:	3720      	adds	r7, #32
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	08001869 	.word	0x08001869
 80019b8:	08001851 	.word	0x08001851
 80019bc:	080018a5 	.word	0x080018a5
 80019c0:	08001881 	.word	0x08001881
 80019c4:	08007950 	.word	0x08007950
 80019c8:	0300a8c0 	.word	0x0300a8c0
 80019cc:	00fcffff 	.word	0x00fcffff
 80019d0:	0200a8c0 	.word	0x0200a8c0

080019d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019da:	490e      	ldr	r1, [pc, #56]	; (8001a14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f0:	4c0b      	ldr	r4, [pc, #44]	; (8001a20 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019fe:	f7ff ff15 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a02:	f004 fac7 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a06:	f7ff f88f 	bl	8000b28 <main>
  bx  lr    
 8001a0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001a18:	08007ac8 	.word	0x08007ac8
  ldr r2, =_sbss
 8001a1c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001a20:	200012fc 	.word	0x200012fc

08001a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <HAL_Init+0x40>)
 8001a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_Init+0x40>)
 8001a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_Init+0x40>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 f931 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f808 	bl	8001a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5c:	f7ff fc1a 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00

08001a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x54>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x58>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f93b 	bl	8001d06 <HAL_SYSTICK_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00e      	b.n	8001ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d80a      	bhi.n	8001ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f000 f911 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aac:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <HAL_InitTick+0x5c>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000038 	.word	0x20000038
 8001ac4:	20000040 	.word	0x20000040
 8001ac8:	2000003c 	.word	0x2000003c

08001acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x20>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x24>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <HAL_IncTick+0x24>)
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000040 	.word	0x20000040
 8001af0:	200012c4 	.word	0x200012c4

08001af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_GetTick+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200012c4 	.word	0x200012c4

08001b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff ffee 	bl	8001af4 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d005      	beq.n	8001b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_Delay+0x44>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b32:	bf00      	nop
 8001b34:	f7ff ffde 	bl	8001af4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f7      	bhi.n	8001b34 <HAL_Delay+0x28>
  {
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000040 	.word	0x20000040

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff47 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff5c 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffb0 	bl	8001c74 <SysTick_Config>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e00e      	b.n	8001d4e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	795b      	ldrb	r3, [r3, #5]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff facf 	bl	80012e4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	e16b      	b.n	800204c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 815a 	bne.w	8002046 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d005      	beq.n	8001daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d130      	bne.n	8001e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 0201 	and.w	r2, r3, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d017      	beq.n	8001e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d123      	bne.n	8001e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	69b9      	ldr	r1, [r7, #24]
 8001e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80b4 	beq.w	8002046 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b60      	ldr	r3, [pc, #384]	; (8002064 <HAL_GPIO_Init+0x30c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	4a5f      	ldr	r2, [pc, #380]	; (8002064 <HAL_GPIO_Init+0x30c>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_GPIO_Init+0x30c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efa:	4a5b      	ldr	r2, [pc, #364]	; (8002068 <HAL_GPIO_Init+0x310>)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_GPIO_Init+0x314>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x226>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a51      	ldr	r2, [pc, #324]	; (8002070 <HAL_GPIO_Init+0x318>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x222>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a50      	ldr	r2, [pc, #320]	; (8002074 <HAL_GPIO_Init+0x31c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x21e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	; (8002078 <HAL_GPIO_Init+0x320>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x21a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	; (800207c <HAL_GPIO_Init+0x324>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x216>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_GPIO_Init+0x328>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x212>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	; (8002084 <HAL_GPIO_Init+0x32c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x20e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <HAL_GPIO_Init+0x330>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x20a>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e00e      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f62:	2308      	movs	r3, #8
 8001f64:	e00c      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e00a      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f90:	4935      	ldr	r1, [pc, #212]	; (8002068 <HAL_GPIO_Init+0x310>)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_GPIO_Init+0x334>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc2:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_GPIO_Init+0x334>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_GPIO_Init+0x334>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fec:	4a27      	ldr	r2, [pc, #156]	; (800208c <HAL_GPIO_Init+0x334>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_GPIO_Init+0x334>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_GPIO_Init+0x334>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_GPIO_Init+0x334>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_GPIO_Init+0x334>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	f67f ae90 	bls.w	8001d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40013800 	.word	0x40013800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400
 8002074:	40020800 	.word	0x40020800
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021000 	.word	0x40021000
 8002080:	40021400 	.word	0x40021400
 8002084:	40021800 	.word	0x40021800
 8002088:	40021c00 	.word	0x40021c00
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	619a      	str	r2, [r3, #24]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e12b      	b.n	800232e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff f91c 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002128:	f001 fa20 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 800212c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a81      	ldr	r2, [pc, #516]	; (8002338 <HAL_I2C_Init+0x274>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d807      	bhi.n	8002148 <HAL_I2C_Init+0x84>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a80      	ldr	r2, [pc, #512]	; (800233c <HAL_I2C_Init+0x278>)
 800213c:	4293      	cmp	r3, r2
 800213e:	bf94      	ite	ls
 8002140:	2301      	movls	r3, #1
 8002142:	2300      	movhi	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e006      	b.n	8002156 <HAL_I2C_Init+0x92>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4a7d      	ldr	r2, [pc, #500]	; (8002340 <HAL_I2C_Init+0x27c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	bf94      	ite	ls
 8002150:	2301      	movls	r3, #1
 8002152:	2300      	movhi	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0e7      	b.n	800232e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4a78      	ldr	r2, [pc, #480]	; (8002344 <HAL_I2C_Init+0x280>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0c9b      	lsrs	r3, r3, #18
 8002168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a6a      	ldr	r2, [pc, #424]	; (8002338 <HAL_I2C_Init+0x274>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d802      	bhi.n	8002198 <HAL_I2C_Init+0xd4>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	3301      	adds	r3, #1
 8002196:	e009      	b.n	80021ac <HAL_I2C_Init+0xe8>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	4a69      	ldr	r2, [pc, #420]	; (8002348 <HAL_I2C_Init+0x284>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	3301      	adds	r3, #1
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	495c      	ldr	r1, [pc, #368]	; (8002338 <HAL_I2C_Init+0x274>)
 80021c8:	428b      	cmp	r3, r1
 80021ca:	d819      	bhi.n	8002200 <HAL_I2C_Init+0x13c>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e59      	subs	r1, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021da:	1c59      	adds	r1, r3, #1
 80021dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021e0:	400b      	ands	r3, r1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_I2C_Init+0x138>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e59      	subs	r1, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fa:	e051      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e04f      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d111      	bne.n	800222c <HAL_I2C_Init+0x168>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e58      	subs	r0, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e012      	b.n	8002252 <HAL_I2C_Init+0x18e>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1e58      	subs	r0, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	0099      	lsls	r1, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_Init+0x196>
 8002256:	2301      	movs	r3, #1
 8002258:	e022      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10e      	bne.n	8002280 <HAL_I2C_Init+0x1bc>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e58      	subs	r0, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	440b      	add	r3, r1
 8002270:	fbb0 f3f3 	udiv	r3, r0, r3
 8002274:	3301      	adds	r3, #1
 8002276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227e:	e00f      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e58      	subs	r0, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	0099      	lsls	r1, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	fbb0 f3f3 	udiv	r3, r0, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	6809      	ldr	r1, [r1, #0]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6911      	ldr	r1, [r2, #16]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68d2      	ldr	r2, [r2, #12]
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	000186a0 	.word	0x000186a0
 800233c:	001e847f 	.word	0x001e847f
 8002340:	003d08ff 	.word	0x003d08ff
 8002344:	431bde83 	.word	0x431bde83
 8002348:	10624dd3 	.word	0x10624dd3

0800234c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e128      	b.n	80025b0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a90      	ldr	r2, [pc, #576]	; (80025b8 <HAL_I2S_Init+0x26c>)
 8002376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff f81d 	bl	80013b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2202      	movs	r2, #2
 8002382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002394:	f023 030f 	bic.w	r3, r3, #15
 8002398:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2202      	movs	r2, #2
 80023a0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d060      	beq.n	800246c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80023b2:	2310      	movs	r3, #16
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e001      	b.n	80023bc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d802      	bhi.n	80023ca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f001 f9d8 	bl	8003780 <HAL_RCCEx_GetPeriphCLKFreq>
 80023d0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023da:	d125      	bne.n	8002428 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d010      	beq.n	8002406 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	3305      	adds	r3, #5
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e01f      	b.n	8002446 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	3305      	adds	r3, #5
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	e00e      	b.n	8002446 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	3305      	adds	r3, #5
 8002444:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4a5c      	ldr	r2, [pc, #368]	; (80025bc <HAL_I2S_Init+0x270>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e003      	b.n	8002474 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800246c:	2302      	movs	r3, #2
 800246e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d902      	bls.n	8002480 <HAL_I2S_Init+0x134>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2bff      	cmp	r3, #255	; 0xff
 800247e:	d907      	bls.n	8002490 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f043 0210 	orr.w	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e08f      	b.n	80025b0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	ea42 0103 	orr.w	r1, r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024ae:	f023 030f 	bic.w	r3, r3, #15
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6851      	ldr	r1, [r2, #4]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6892      	ldr	r2, [r2, #8]
 80024ba:	4311      	orrs	r1, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68d2      	ldr	r2, [r2, #12]
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6992      	ldr	r2, [r2, #24]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d161      	bne.n	80025a0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a38      	ldr	r2, [pc, #224]	; (80025c0 <HAL_I2S_Init+0x274>)
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a37      	ldr	r2, [pc, #220]	; (80025c4 <HAL_I2S_Init+0x278>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_I2S_Init+0x1a4>
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <HAL_I2S_Init+0x27c>)
 80024ee:	e001      	b.n	80024f4 <HAL_I2S_Init+0x1a8>
 80024f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4932      	ldr	r1, [pc, #200]	; (80025c4 <HAL_I2S_Init+0x278>)
 80024fc:	428a      	cmp	r2, r1
 80024fe:	d101      	bne.n	8002504 <HAL_I2S_Init+0x1b8>
 8002500:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <HAL_I2S_Init+0x27c>)
 8002502:	e001      	b.n	8002508 <HAL_I2S_Init+0x1bc>
 8002504:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002508:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800250c:	f023 030f 	bic.w	r3, r3, #15
 8002510:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2b      	ldr	r2, [pc, #172]	; (80025c4 <HAL_I2S_Init+0x278>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_I2S_Init+0x1d4>
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_I2S_Init+0x27c>)
 800251e:	e001      	b.n	8002524 <HAL_I2S_Init+0x1d8>
 8002520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002524:	2202      	movs	r2, #2
 8002526:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <HAL_I2S_Init+0x278>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_I2S_Init+0x1ea>
 8002532:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_I2S_Init+0x27c>)
 8002534:	e001      	b.n	800253a <HAL_I2S_Init+0x1ee>
 8002536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002546:	d003      	beq.n	8002550 <HAL_I2S_Init+0x204>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d103      	bne.n	8002558 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	e001      	b.n	800255c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002566:	4313      	orrs	r3, r2
 8002568:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002570:	4313      	orrs	r3, r2
 8002572:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800257a:	4313      	orrs	r3, r2
 800257c:	b29a      	uxth	r2, r3
 800257e:	897b      	ldrh	r3, [r7, #10]
 8002580:	4313      	orrs	r3, r2
 8002582:	b29b      	uxth	r3, r3
 8002584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002588:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_I2S_Init+0x278>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_I2S_Init+0x24c>
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_I2S_Init+0x27c>)
 8002596:	e001      	b.n	800259c <HAL_I2S_Init+0x250>
 8002598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800259c:	897a      	ldrh	r2, [r7, #10]
 800259e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	080026c3 	.word	0x080026c3
 80025bc:	cccccccd 	.word	0xcccccccd
 80025c0:	080027d9 	.word	0x080027d9
 80025c4:	40003800 	.word	0x40003800
 80025c8:	40003400 	.word	0x40003400

080025cc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	881a      	ldrh	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c9a      	adds	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800264c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffb8 	bl	80025cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	b292      	uxth	r2, r2
 8002678:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	1c9a      	adds	r2, r3, #2
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10e      	bne.n	80026ba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff93 	bl	80025e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d13a      	bne.n	8002754 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d109      	bne.n	80026fc <I2S_IRQHandler+0x3a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d102      	bne.n	80026fc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffb4 	bl	8002664 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d126      	bne.n	8002754 <I2S_IRQHandler+0x92>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b20      	cmp	r3, #32
 8002712:	d11f      	bne.n	8002754 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002722:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff50 	bl	80025f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b03      	cmp	r3, #3
 800275e:	d136      	bne.n	80027ce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d109      	bne.n	800277e <I2S_IRQHandler+0xbc>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d102      	bne.n	800277e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff45 	bl	8002608 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b08      	cmp	r3, #8
 8002786:	d122      	bne.n	80027ce <I2S_IRQHandler+0x10c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b20      	cmp	r3, #32
 8002794:	d11b      	bne.n	80027ce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027a4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ff13 	bl	80025f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a92      	ldr	r2, [pc, #584]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80027f2:	4b92      	ldr	r3, [pc, #584]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027f4:	e001      	b.n	80027fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80027f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a8b      	ldr	r2, [pc, #556]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002810:	4b8a      	ldr	r3, [pc, #552]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002812:	e001      	b.n	8002818 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002824:	d004      	beq.n	8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 8099 	bne.w	8002962 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d107      	bne.n	800284a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f925 	bl	8002a94 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d107      	bne.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9c8 	bl	8002bf4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d13a      	bne.n	80028e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d035      	beq.n	80028e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6e      	ldr	r2, [pc, #440]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002882:	4b6e      	ldr	r3, [pc, #440]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002884:	e001      	b.n	800288a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4969      	ldr	r1, [pc, #420]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002892:	428b      	cmp	r3, r1
 8002894:	d101      	bne.n	800289a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002896:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002898:	e001      	b.n	800289e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800289a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800289e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f043 0202 	orr.w	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fe88 	bl	80025f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	f040 80c3 	bne.w	8002a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80bd 	beq.w	8002a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800290a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002916:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002918:	e001      	b.n	800291e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800291a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4944      	ldr	r1, [pc, #272]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002926:	428b      	cmp	r3, r1
 8002928:	d101      	bne.n	800292e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800292a:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800292c:	e001      	b.n	8002932 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002936:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f043 0204 	orr.w	r2, r3, #4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fe4a 	bl	80025f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002960:	e089      	b.n	8002a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d107      	bne.n	800297c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8be 	bl	8002af8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f8fd 	bl	8002b90 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d12f      	bne.n	8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02a      	beq.n	8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1e      	ldr	r2, [pc, #120]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029c6:	e001      	b.n	80029cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80029c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4919      	ldr	r1, [pc, #100]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d101      	bne.n	80029dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029da:	e001      	b.n	80029e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80029dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fdfa 	bl	80025f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d136      	bne.n	8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d031      	beq.n	8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a20:	e001      	b.n	8002a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4902      	ldr	r1, [pc, #8]	; (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a2e:	428b      	cmp	r3, r1
 8002a30:	d106      	bne.n	8002a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002a32:	4b02      	ldr	r3, [pc, #8]	; (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a34:	e006      	b.n	8002a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002a36:	bf00      	nop
 8002a38:	40003800 	.word	0x40003800
 8002a3c:	40003400 	.word	0x40003400
 8002a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a48:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f043 0204 	orr.w	r2, r3, #4
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fdc0 	bl	80025f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a74:	e000      	b.n	8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a76:	bf00      	nop
}
 8002a78:	bf00      	nop
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	1c99      	adds	r1, r3, #2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6251      	str	r1, [r2, #36]	; 0x24
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d113      	bne.n	8002aee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ffc9 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	1c99      	adds	r1, r3, #2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6251      	str	r1, [r2, #36]	; 0x24
 8002b0a:	8819      	ldrh	r1, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <I2SEx_TxISR_I2SExt+0x90>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <I2SEx_TxISR_I2SExt+0x22>
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <I2SEx_TxISR_I2SExt+0x94>)
 8002b18:	e001      	b.n	8002b1e <I2SEx_TxISR_I2SExt+0x26>
 8002b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b1e:	460a      	mov	r2, r1
 8002b20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d121      	bne.n	8002b7e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <I2SEx_TxISR_I2SExt+0x90>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <I2SEx_TxISR_I2SExt+0x50>
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <I2SEx_TxISR_I2SExt+0x94>)
 8002b46:	e001      	b.n	8002b4c <I2SEx_TxISR_I2SExt+0x54>
 8002b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	490d      	ldr	r1, [pc, #52]	; (8002b88 <I2SEx_TxISR_I2SExt+0x90>)
 8002b54:	428b      	cmp	r3, r1
 8002b56:	d101      	bne.n	8002b5c <I2SEx_TxISR_I2SExt+0x64>
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <I2SEx_TxISR_I2SExt+0x94>)
 8002b5a:	e001      	b.n	8002b60 <I2SEx_TxISR_I2SExt+0x68>
 8002b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff81 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40003800 	.word	0x40003800
 8002b8c:	40003400 	.word	0x40003400

08002b90 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68d8      	ldr	r0, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	1c99      	adds	r1, r3, #2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ba8:	b282      	uxth	r2, r0
 8002baa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d113      	bne.n	8002bec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bd2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ff4a 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <I2SEx_RxISR_I2SExt+0x90>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <I2SEx_RxISR_I2SExt+0x16>
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <I2SEx_RxISR_I2SExt+0x94>)
 8002c08:	e001      	b.n	8002c0e <I2SEx_RxISR_I2SExt+0x1a>
 8002c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c0e:	68d8      	ldr	r0, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	1c99      	adds	r1, r3, #2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002c1a:	b282      	uxth	r2, r0
 8002c1c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d121      	bne.n	8002c7a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <I2SEx_RxISR_I2SExt+0x90>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <I2SEx_RxISR_I2SExt+0x50>
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <I2SEx_RxISR_I2SExt+0x94>)
 8002c42:	e001      	b.n	8002c48 <I2SEx_RxISR_I2SExt+0x54>
 8002c44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	490d      	ldr	r1, [pc, #52]	; (8002c84 <I2SEx_RxISR_I2SExt+0x90>)
 8002c50:	428b      	cmp	r3, r1
 8002c52:	d101      	bne.n	8002c58 <I2SEx_RxISR_I2SExt+0x64>
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <I2SEx_RxISR_I2SExt+0x94>)
 8002c56:	e001      	b.n	8002c5c <I2SEx_RxISR_I2SExt+0x68>
 8002c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c60:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d106      	bne.n	8002c7a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff03 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40003800 	.word	0x40003800
 8002c88:	40003400 	.word	0x40003400

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e267      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002caa:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b82      	ldr	r3, [pc, #520]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e242      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6f      	ldr	r2, [pc, #444]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6c      	ldr	r2, [pc, #432]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b69      	ldr	r3, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a68      	ldr	r2, [pc, #416]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fed6 	bl	8001af4 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fed2 	bl	8001af4 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e207      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fec2 	bl	8001af4 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe febe 	bl	8001af4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1f3      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b51      	ldr	r3, [pc, #324]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da2:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b44      	ldr	r3, [pc, #272]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1c7      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4937      	ldr	r1, [pc, #220]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fe77 	bl	8001af4 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fe73 	bl	8001af4 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1a8      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4925      	ldr	r1, [pc, #148]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fe56 	bl	8001af4 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fe52 	bl	8001af4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e187      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d036      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fe36 	bl	8001af4 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fe32 	bl	8001af4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e167      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
 8002eaa:	e01b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fe1f 	bl	8001af4 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e00e      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fe fe1b 	bl	8001af4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d907      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e150      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	42470000 	.word	0x42470000
 8002ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ea      	bne.n	8002eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8097 	beq.w	8003020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b81      	ldr	r3, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	4b7d      	ldr	r3, [pc, #500]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	4a7c      	ldr	r2, [pc, #496]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	; 0x40
 8002f12:	4b7a      	ldr	r3, [pc, #488]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b77      	ldr	r3, [pc, #476]	; (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2e:	4b74      	ldr	r3, [pc, #464]	; (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a73      	ldr	r2, [pc, #460]	; (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fddb 	bl	8001af4 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7fe fdd7 	bl	8001af4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e10c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
 8002f68:	4b64      	ldr	r3, [pc, #400]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a63      	ldr	r2, [pc, #396]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	e01c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x30c>
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a5b      	ldr	r2, [pc, #364]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f98:	4b58      	ldr	r3, [pc, #352]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a57      	ldr	r2, [pc, #348]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa4:	4b55      	ldr	r3, [pc, #340]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	4a54      	ldr	r2, [pc, #336]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 0304 	bic.w	r3, r3, #4
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fd9c 	bl	8001af4 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fd98 	bl	8001af4 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0cb      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	4b49      	ldr	r3, [pc, #292]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ee      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x334>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fd86 	bl	8001af4 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fe fd82 	bl	8001af4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0b5      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	4b3e      	ldr	r3, [pc, #248]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ee      	bne.n	8002fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003014:	4b39      	ldr	r3, [pc, #228]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	4a38      	ldr	r2, [pc, #224]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a1 	beq.w	800316c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800302a:	4b34      	ldr	r3, [pc, #208]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	d05c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d141      	bne.n	80030c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_RCC_OscConfig+0x478>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fd56 	bl	8001af4 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fd52 	bl	8001af4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e087      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	3b01      	subs	r3, #1
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	491b      	ldr	r1, [pc, #108]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCC_OscConfig+0x478>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fe fd2b 	bl	8001af4 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fe fd27 	bl	8001af4 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e05c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x416>
 80030c0:	e054      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_RCC_OscConfig+0x478>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fd14 	bl	8001af4 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe fd10 	bl	8001af4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e045      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x444>
 80030ee:	e03d      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e038      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000
 8003104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d028      	beq.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d121      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d11a      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800313e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	3b01      	subs	r3, #1
 8003152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cc      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d90c      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e067      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4934      	ldr	r1, [pc, #208]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fe fc42 	bl	8001af4 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe fc3e 	bl	8001af4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d20c      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fba2 	bl	8001a6c <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	08007958 	.word	0x08007958
 8003340:	20000038 	.word	0x20000038
 8003344:	2000003c 	.word	0x2000003c

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b094      	sub	sp, #80	; 0x50
 800334e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	647b      	str	r3, [r7, #68]	; 0x44
 8003354:	2300      	movs	r3, #0
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003358:	2300      	movs	r3, #0
 800335a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003360:	4b79      	ldr	r3, [pc, #484]	; (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d00d      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x40>
 800336c:	2b08      	cmp	r3, #8
 800336e:	f200 80e1 	bhi.w	8003534 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x34>
 8003376:	2b04      	cmp	r3, #4
 8003378:	d003      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x3a>
 800337a:	e0db      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b73      	ldr	r3, [pc, #460]	; (800354c <HAL_RCC_GetSysClockFreq+0x204>)
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003380:	e0db      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003382:	4b73      	ldr	r3, [pc, #460]	; (8003550 <HAL_RCC_GetSysClockFreq+0x208>)
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003386:	e0d8      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003390:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d063      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339e:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	2200      	movs	r2, #0
 80033a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
 80033b2:	2300      	movs	r3, #0
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
 80033b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	f04f 0000 	mov.w	r0, #0
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033cc:	0150      	lsls	r0, r2, #5
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4621      	mov	r1, r4
 80033d4:	1a51      	subs	r1, r2, r1
 80033d6:	6139      	str	r1, [r7, #16]
 80033d8:	4629      	mov	r1, r5
 80033da:	eb63 0301 	sbc.w	r3, r3, r1
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033ec:	4659      	mov	r1, fp
 80033ee:	018b      	lsls	r3, r1, #6
 80033f0:	4651      	mov	r1, sl
 80033f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033f6:	4651      	mov	r1, sl
 80033f8:	018a      	lsls	r2, r1, #6
 80033fa:	4651      	mov	r1, sl
 80033fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003400:	4659      	mov	r1, fp
 8003402:	eb63 0901 	sbc.w	r9, r3, r1
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800341a:	4690      	mov	r8, r2
 800341c:	4699      	mov	r9, r3
 800341e:	4623      	mov	r3, r4
 8003420:	eb18 0303 	adds.w	r3, r8, r3
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	462b      	mov	r3, r5
 8003428:	eb49 0303 	adc.w	r3, r9, r3
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800343a:	4629      	mov	r1, r5
 800343c:	024b      	lsls	r3, r1, #9
 800343e:	4621      	mov	r1, r4
 8003440:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003444:	4621      	mov	r1, r4
 8003446:	024a      	lsls	r2, r1, #9
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344e:	2200      	movs	r2, #0
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
 8003452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003458:	f7fc ff1a 	bl	8000290 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003464:	e058      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003466:	4b38      	ldr	r3, [pc, #224]	; (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	2200      	movs	r2, #0
 800346e:	4618      	mov	r0, r3
 8003470:	4611      	mov	r1, r2
 8003472:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003476:	623b      	str	r3, [r7, #32]
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
 800347c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	f04f 0000 	mov.w	r0, #0
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	0159      	lsls	r1, r3, #5
 800348e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003492:	0150      	lsls	r0, r2, #5
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4641      	mov	r1, r8
 800349a:	ebb2 0a01 	subs.w	sl, r2, r1
 800349e:	4649      	mov	r1, r9
 80034a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034b8:	ebb2 040a 	subs.w	r4, r2, sl
 80034bc:	eb63 050b 	sbc.w	r5, r3, fp
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	00eb      	lsls	r3, r5, #3
 80034ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ce:	00e2      	lsls	r2, r4, #3
 80034d0:	4614      	mov	r4, r2
 80034d2:	461d      	mov	r5, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	18e3      	adds	r3, r4, r3
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	464b      	mov	r3, r9
 80034dc:	eb45 0303 	adc.w	r3, r5, r3
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ee:	4629      	mov	r1, r5
 80034f0:	028b      	lsls	r3, r1, #10
 80034f2:	4621      	mov	r1, r4
 80034f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f8:	4621      	mov	r1, r4
 80034fa:	028a      	lsls	r2, r1, #10
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003502:	2200      	movs	r2, #0
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	61fa      	str	r2, [r7, #28]
 8003508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800350c:	f7fc fec0 	bl	8000290 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	3301      	adds	r3, #1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003528:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800352a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003532:	e002      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_RCC_GetSysClockFreq+0x204>)
 8003536:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800353a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800353c:	4618      	mov	r0, r3
 800353e:	3750      	adds	r7, #80	; 0x50
 8003540:	46bd      	mov	sp, r7
 8003542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	00f42400 	.word	0x00f42400
 8003550:	007a1200 	.word	0x007a1200

08003554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <HAL_RCC_GetHCLKFreq+0x14>)
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000038 	.word	0x20000038

0800356c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003570:	f7ff fff0 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0a9b      	lsrs	r3, r3, #10
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4903      	ldr	r1, [pc, #12]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800
 8003590:	08007968 	.word	0x08007968

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003598:	f7ff ffdc 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0b5b      	lsrs	r3, r3, #13
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	08007968 	.word	0x08007968

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d035      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e4:	4b62      	ldr	r3, [pc, #392]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035ea:	f7fe fa83 	bl	8001af4 <HAL_GetTick>
 80035ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035f2:	f7fe fa7f 	bl	8001af4 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0b0      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003604:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	019a      	lsls	r2, r3, #6
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	071b      	lsls	r3, r3, #28
 800361c:	4955      	ldr	r1, [pc, #340]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003624:	4b52      	ldr	r3, [pc, #328]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800362a:	f7fe fa63 	bl	8001af4 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003632:	f7fe fa5f 	bl	8001af4 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e090      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003644:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8083 	beq.w	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	4b44      	ldr	r3, [pc, #272]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	4a43      	ldr	r2, [pc, #268]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366c:	6413      	str	r3, [r2, #64]	; 0x40
 800366e:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800367a:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a3e      	ldr	r2, [pc, #248]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003686:	f7fe fa35 	bl	8001af4 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fe fa31 	bl	8001af4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e062      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036a0:	4b35      	ldr	r3, [pc, #212]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ac:	4b31      	ldr	r3, [pc, #196]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02f      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d028      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036d4:	4b29      	ldr	r3, [pc, #164]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036da:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80036e0:	4a24      	ldr	r2, [pc, #144]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d114      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe f9ff 	bl	8001af4 <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fe f9fb 	bl	8001af4 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e02a      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ee      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003728:	d10d      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800373a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373e:	490d      	ldr	r1, [pc, #52]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003740:	4313      	orrs	r3, r2
 8003742:	608b      	str	r3, [r1, #8]
 8003744:	e005      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800374c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003750:	6093      	str	r3, [r2, #8]
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003754:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375e:	4905      	ldr	r1, [pc, #20]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003760:	4313      	orrs	r3, r2
 8003762:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	42470068 	.word	0x42470068
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000
 800377c:	42470e40 	.word	0x42470e40

08003780 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d13e      	bne.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800379e:	4b23      	ldr	r3, [pc, #140]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d12f      	bne.n	8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037b6:	617b      	str	r3, [r7, #20]
          break;
 80037b8:	e02f      	b.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c6:	d108      	bne.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80037c8:	4b18      	ldr	r3, [pc, #96]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	e007      	b.n	80037ea <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e2:	4a15      	ldr	r2, [pc, #84]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80037ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003804:	0f1b      	lsrs	r3, r3, #28
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
          break;
 8003812:	e002      	b.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
          break;
 8003818:	bf00      	nop
        }
      }
      break;
 800381a:	bf00      	nop
    }
  }
  return frequency;
 800381c:	697b      	ldr	r3, [r7, #20]
}
 800381e:	4618      	mov	r0, r3
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	00bb8000 	.word	0x00bb8000
 8003834:	007a1200 	.word	0x007a1200
 8003838:	00f42400 	.word	0x00f42400

0800383c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e07b      	b.n	8003946 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	d108      	bne.n	8003868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385e:	d009      	beq.n	8003874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	61da      	str	r2, [r3, #28]
 8003866:	e005      	b.n	8003874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fe12 	bl	80014b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	ea42 0103 	orr.w	r1, r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0104 	and.w	r1, r3, #4
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	f003 0210 	and.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003934:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b088      	sub	sp, #32
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_SPI_Transmit+0x22>
 800396c:	2302      	movs	r3, #2
 800396e:	e126      	b.n	8003bbe <HAL_SPI_Transmit+0x270>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003978:	f7fe f8bc 	bl	8001af4 <HAL_GetTick>
 800397c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d002      	beq.n	8003994 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800398e:	2302      	movs	r3, #2
 8003990:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003992:	e10b      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_SPI_Transmit+0x52>
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039a4:	e102      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2203      	movs	r2, #3
 80039aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ec:	d10f      	bne.n	8003a0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d007      	beq.n	8003a2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a34:	d14b      	bne.n	8003ace <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_SPI_Transmit+0xf6>
 8003a3e:	8afb      	ldrh	r3, [r7, #22]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d13e      	bne.n	8003ac2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a68:	e02b      	b.n	8003ac2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d112      	bne.n	8003a9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a9c:	e011      	b.n	8003ac2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9e:	f7fe f829 	bl	8001af4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d803      	bhi.n	8003ab6 <HAL_SPI_Transmit+0x168>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d102      	bne.n	8003abc <HAL_SPI_Transmit+0x16e>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ac0:	e074      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ce      	bne.n	8003a6a <HAL_SPI_Transmit+0x11c>
 8003acc:	e04c      	b.n	8003b68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Transmit+0x18e>
 8003ad6:	8afb      	ldrh	r3, [r7, #22]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d140      	bne.n	8003b5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b02:	e02c      	b.n	8003b5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d113      	bne.n	8003b3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b38:	e011      	b.n	8003b5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b3a:	f7fd ffdb 	bl	8001af4 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d803      	bhi.n	8003b52 <HAL_SPI_Transmit+0x204>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d102      	bne.n	8003b58 <HAL_SPI_Transmit+0x20a>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d102      	bne.n	8003b5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b5c:	e026      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1cd      	bne.n	8003b04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fbcb 	bl	8004308 <SPI_EndRxTxTransaction>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e000      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
  }

error:
 8003baa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b088      	sub	sp, #32
 8003bca:	af02      	add	r7, sp, #8
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be2:	d112      	bne.n	8003c0a <HAL_SPI_Receive+0x44>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10e      	bne.n	8003c0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bf4:	88fa      	ldrh	r2, [r7, #6]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f8f1 	bl	8003de8 <HAL_SPI_TransmitReceive>
 8003c06:	4603      	mov	r3, r0
 8003c08:	e0ea      	b.n	8003de0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_SPI_Receive+0x52>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e0e3      	b.n	8003de0 <HAL_SPI_Receive+0x21a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c20:	f7fd ff68 	bl	8001af4 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
 8003c34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c36:	e0ca      	b.n	8003dce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_SPI_Receive+0x7e>
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c48:	e0c1      	b.n	8003dce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	88fa      	ldrh	r2, [r7, #6]
 8003c68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	d10f      	bne.n	8003cb2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d007      	beq.n	8003cd0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d162      	bne.n	8003d9e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cd8:	e02e      	b.n	8003d38 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d115      	bne.n	8003d14 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f103 020c 	add.w	r2, r3, #12
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d12:	e011      	b.n	8003d38 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d14:	f7fd feee 	bl	8001af4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d803      	bhi.n	8003d2c <HAL_SPI_Receive+0x166>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d102      	bne.n	8003d32 <HAL_SPI_Receive+0x16c>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d36:	e04a      	b.n	8003dce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1cb      	bne.n	8003cda <HAL_SPI_Receive+0x114>
 8003d42:	e031      	b.n	8003da8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d113      	bne.n	8003d7a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	1c9a      	adds	r2, r3, #2
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d78:	e011      	b.n	8003d9e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7a:	f7fd febb 	bl	8001af4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d803      	bhi.n	8003d92 <HAL_SPI_Receive+0x1cc>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d102      	bne.n	8003d98 <HAL_SPI_Receive+0x1d2>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d9c:	e017      	b.n	8003dce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1cd      	bne.n	8003d44 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	6839      	ldr	r1, [r7, #0]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fa45 	bl	800423c <SPI_EndRxTransaction>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
 8003dca:	e000      	b.n	8003dce <HAL_SPI_Receive+0x208>
  }

error :
 8003dcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003df6:	2301      	movs	r3, #1
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x26>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e18a      	b.n	8004124 <HAL_SPI_TransmitReceive+0x33c>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e16:	f7fd fe6d 	bl	8001af4 <HAL_GetTick>
 8003e1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d00f      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x70>
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d107      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d103      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x68>
 8003e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d003      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e56:	e15b      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x82>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x82>
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e70:	e14e      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d003      	beq.n	8003e86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2205      	movs	r2, #5
 8003e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	887a      	ldrh	r2, [r7, #2]
 8003e96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	887a      	ldrh	r2, [r7, #2]
 8003ea8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	887a      	ldrh	r2, [r7, #2]
 8003eae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d007      	beq.n	8003eda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee2:	d178      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x10a>
 8003eec:	8b7b      	ldrh	r3, [r7, #26]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d166      	bne.n	8003fc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	881a      	ldrh	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	1c9a      	adds	r2, r3, #2
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f16:	e053      	b.n	8003fc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d11b      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x176>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x176>
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d113      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	881a      	ldrh	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	1c9a      	adds	r2, r3, #2
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d119      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x1b8>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d014      	beq.n	8003fa0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	b292      	uxth	r2, r2
 8003f82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fa0:	f7fd fda8 	bl	8001af4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d807      	bhi.n	8003fc0 <HAL_SPI_TransmitReceive+0x1d8>
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d003      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fbe:	e0a7      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1a6      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x130>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1a1      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x130>
 8003fd4:	e07c      	b.n	80040d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x1fc>
 8003fde:	8b7b      	ldrh	r3, [r7, #26]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d16b      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	7812      	ldrb	r2, [r2, #0]
 8003ff0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800400a:	e057      	b.n	80040bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d11c      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x26c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d017      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x26c>
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d114      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	7812      	ldrb	r2, [r2, #0]
 8004036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d119      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x2ae>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d014      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004092:	2301      	movs	r3, #1
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004096:	f7fd fd2d 	bl	8001af4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d803      	bhi.n	80040ae <HAL_SPI_TransmitReceive+0x2c6>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d102      	bne.n	80040b4 <HAL_SPI_TransmitReceive+0x2cc>
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d103      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040ba:	e029      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1a2      	bne.n	800400c <HAL_SPI_TransmitReceive+0x224>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d19d      	bne.n	800400c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f917 	bl	8004308 <SPI_EndRxTxTransaction>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d006      	beq.n	80040ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040ec:	e010      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	e000      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800410e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004124:	4618      	mov	r0, r3
 8004126:	3730      	adds	r7, #48	; 0x30
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800413c:	f7fd fcda 	bl	8001af4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	4413      	add	r3, r2
 800414a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800414c:	f7fd fcd2 	bl	8001af4 <HAL_GetTick>
 8004150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	015b      	lsls	r3, r3, #5
 8004158:	0d1b      	lsrs	r3, r3, #20
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004162:	e054      	b.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d050      	beq.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800416c:	f7fd fcc2 	bl	8001af4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	429a      	cmp	r2, r3
 800417a:	d902      	bls.n	8004182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d13d      	bne.n	80041fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419a:	d111      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a4:	d004      	beq.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d107      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c8:	d10f      	bne.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e017      	b.n	800422e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3b01      	subs	r3, #1
 800420c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d19b      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000038 	.word	0x20000038

0800423c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004250:	d111      	bne.n	8004276 <SPI_EndRxTransaction+0x3a>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d004      	beq.n	8004266 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004264:	d107      	bne.n	8004276 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427e:	d12a      	bne.n	80042d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004288:	d012      	beq.n	80042b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2200      	movs	r2, #0
 8004292:	2180      	movs	r1, #128	; 0x80
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff ff49 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02d      	beq.n	80042fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e026      	b.n	80042fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2200      	movs	r2, #0
 80042b8:	2101      	movs	r1, #1
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff ff36 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01a      	beq.n	80042fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e013      	b.n	80042fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2200      	movs	r2, #0
 80042de:	2101      	movs	r1, #1
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff ff23 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e000      	b.n	80042fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <SPI_EndRxTxTransaction+0x7c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <SPI_EndRxTxTransaction+0x80>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0d5b      	lsrs	r3, r3, #21
 8004320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004324:	fb02 f303 	mul.w	r3, r2, r3
 8004328:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004332:	d112      	bne.n	800435a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	2180      	movs	r1, #128	; 0x80
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff fef4 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3b01      	subs	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d0f2      	beq.n	800435a <SPI_EndRxTxTransaction+0x52>
 8004374:	e000      	b.n	8004378 <SPI_EndRxTxTransaction+0x70>
        break;
 8004376:	bf00      	nop
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000038 	.word	0x20000038
 8004388:	165e9f81 	.word	0x165e9f81

0800438c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e03f      	b.n	800441e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fd f91e 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2224      	movs	r2, #36	; 0x24
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f929 	bl	8004628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b08a      	sub	sp, #40	; 0x28
 800442a:	af02      	add	r7, sp, #8
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b20      	cmp	r3, #32
 8004444:	d17c      	bne.n	8004540 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_UART_Transmit+0x2c>
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e075      	b.n	8004542 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_UART_Transmit+0x3e>
 8004460:	2302      	movs	r3, #2
 8004462:	e06e      	b.n	8004542 <HAL_UART_Transmit+0x11c>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2221      	movs	r2, #33	; 0x21
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800447a:	f7fd fb3b 	bl	8001af4 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004494:	d108      	bne.n	80044a8 <HAL_UART_Transmit+0x82>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	e003      	b.n	80044b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044b8:	e02a      	b.n	8004510 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2200      	movs	r2, #0
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f840 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e036      	b.n	8004542 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	3302      	adds	r3, #2
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	e007      	b.n	8004502 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	781a      	ldrb	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	3301      	adds	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1cf      	bne.n	80044ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	2140      	movs	r1, #64	; 0x40
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f810 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e006      	b.n	8004542 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b090      	sub	sp, #64	; 0x40
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455a:	e050      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d04c      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <UART_WaitOnFlagUntilTimeout+0x30>
 800456a:	f7fd fac3 	bl	8001af4 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004576:	429a      	cmp	r2, r3
 8004578:	d241      	bcs.n	80045fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800459a:	637a      	str	r2, [r7, #52]	; 0x34
 800459c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e5      	bne.n	800457a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3314      	adds	r3, #20
 80045b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	613b      	str	r3, [r7, #16]
   return(result);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ce:	623a      	str	r2, [r7, #32]
 80045d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	69f9      	ldr	r1, [r7, #28]
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	61bb      	str	r3, [r7, #24]
   return(result);
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e00f      	b.n	800461e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4013      	ands	r3, r2
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	429a      	cmp	r2, r3
 800460c:	bf0c      	ite	eq
 800460e:	2301      	moveq	r3, #1
 8004610:	2300      	movne	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	429a      	cmp	r2, r3
 800461a:	d09f      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3740      	adds	r7, #64	; 0x40
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800462c:	b0c0      	sub	sp, #256	; 0x100
 800462e:	af00      	add	r7, sp, #0
 8004630:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	68d9      	ldr	r1, [r3, #12]
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	ea40 0301 	orr.w	r3, r0, r1
 8004650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	431a      	orrs	r2, r3
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	431a      	orrs	r2, r3
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004680:	f021 010c 	bic.w	r1, r1, #12
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800468e:	430b      	orrs	r3, r1
 8004690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a2:	6999      	ldr	r1, [r3, #24]
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	ea40 0301 	orr.w	r3, r0, r1
 80046ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b8f      	ldr	r3, [pc, #572]	; (80048f4 <UART_SetConfig+0x2cc>)
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d005      	beq.n	80046c8 <UART_SetConfig+0xa0>
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b8d      	ldr	r3, [pc, #564]	; (80048f8 <UART_SetConfig+0x2d0>)
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d104      	bne.n	80046d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c8:	f7fe ff64 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 80046cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046d0:	e003      	b.n	80046da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046d2:	f7fe ff4b 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 80046d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e4:	f040 810c 	bne.w	8004900 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046fa:	4622      	mov	r2, r4
 80046fc:	462b      	mov	r3, r5
 80046fe:	1891      	adds	r1, r2, r2
 8004700:	65b9      	str	r1, [r7, #88]	; 0x58
 8004702:	415b      	adcs	r3, r3
 8004704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800470a:	4621      	mov	r1, r4
 800470c:	eb12 0801 	adds.w	r8, r2, r1
 8004710:	4629      	mov	r1, r5
 8004712:	eb43 0901 	adc.w	r9, r3, r1
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800472a:	4690      	mov	r8, r2
 800472c:	4699      	mov	r9, r3
 800472e:	4623      	mov	r3, r4
 8004730:	eb18 0303 	adds.w	r3, r8, r3
 8004734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004738:	462b      	mov	r3, r5
 800473a:	eb49 0303 	adc.w	r3, r9, r3
 800473e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800474e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004756:	460b      	mov	r3, r1
 8004758:	18db      	adds	r3, r3, r3
 800475a:	653b      	str	r3, [r7, #80]	; 0x50
 800475c:	4613      	mov	r3, r2
 800475e:	eb42 0303 	adc.w	r3, r2, r3
 8004762:	657b      	str	r3, [r7, #84]	; 0x54
 8004764:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004768:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800476c:	f7fb fd90 	bl	8000290 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4b61      	ldr	r3, [pc, #388]	; (80048fc <UART_SetConfig+0x2d4>)
 8004776:	fba3 2302 	umull	r2, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	011c      	lsls	r4, r3, #4
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004788:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800478c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	64b9      	str	r1, [r7, #72]	; 0x48
 8004798:	415b      	adcs	r3, r3
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047a0:	4641      	mov	r1, r8
 80047a2:	eb12 0a01 	adds.w	sl, r2, r1
 80047a6:	4649      	mov	r1, r9
 80047a8:	eb43 0b01 	adc.w	fp, r3, r1
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047c0:	4692      	mov	sl, r2
 80047c2:	469b      	mov	fp, r3
 80047c4:	4643      	mov	r3, r8
 80047c6:	eb1a 0303 	adds.w	r3, sl, r3
 80047ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ce:	464b      	mov	r3, r9
 80047d0:	eb4b 0303 	adc.w	r3, fp, r3
 80047d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047ec:	460b      	mov	r3, r1
 80047ee:	18db      	adds	r3, r3, r3
 80047f0:	643b      	str	r3, [r7, #64]	; 0x40
 80047f2:	4613      	mov	r3, r2
 80047f4:	eb42 0303 	adc.w	r3, r2, r3
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
 80047fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004802:	f7fb fd45 	bl	8000290 <__aeabi_uldivmod>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4611      	mov	r1, r2
 800480c:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <UART_SetConfig+0x2d4>)
 800480e:	fba3 2301 	umull	r2, r3, r3, r1
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	2264      	movs	r2, #100	; 0x64
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	1acb      	subs	r3, r1, r3
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <UART_SetConfig+0x2d4>)
 8004824:	fba3 2302 	umull	r2, r3, r3, r2
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004830:	441c      	add	r4, r3
 8004832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800483c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004840:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	63b9      	str	r1, [r7, #56]	; 0x38
 800484c:	415b      	adcs	r3, r3
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004854:	4641      	mov	r1, r8
 8004856:	1851      	adds	r1, r2, r1
 8004858:	6339      	str	r1, [r7, #48]	; 0x30
 800485a:	4649      	mov	r1, r9
 800485c:	414b      	adcs	r3, r1
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800486c:	4659      	mov	r1, fp
 800486e:	00cb      	lsls	r3, r1, #3
 8004870:	4651      	mov	r1, sl
 8004872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004876:	4651      	mov	r1, sl
 8004878:	00ca      	lsls	r2, r1, #3
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	4603      	mov	r3, r0
 8004880:	4642      	mov	r2, r8
 8004882:	189b      	adds	r3, r3, r2
 8004884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004888:	464b      	mov	r3, r9
 800488a:	460a      	mov	r2, r1
 800488c:	eb42 0303 	adc.w	r3, r2, r3
 8004890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048a8:	460b      	mov	r3, r1
 80048aa:	18db      	adds	r3, r3, r3
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ae:	4613      	mov	r3, r2
 80048b0:	eb42 0303 	adc.w	r3, r2, r3
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048be:	f7fb fce7 	bl	8000290 <__aeabi_uldivmod>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <UART_SetConfig+0x2d4>)
 80048c8:	fba3 1302 	umull	r1, r3, r3, r2
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	2164      	movs	r1, #100	; 0x64
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	3332      	adds	r3, #50	; 0x32
 80048da:	4a08      	ldr	r2, [pc, #32]	; (80048fc <UART_SetConfig+0x2d4>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	f003 0207 	and.w	r2, r3, #7
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4422      	add	r2, r4
 80048ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048f0:	e105      	b.n	8004afe <UART_SetConfig+0x4d6>
 80048f2:	bf00      	nop
 80048f4:	40011000 	.word	0x40011000
 80048f8:	40011400 	.word	0x40011400
 80048fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004904:	2200      	movs	r2, #0
 8004906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800490a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800490e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004912:	4642      	mov	r2, r8
 8004914:	464b      	mov	r3, r9
 8004916:	1891      	adds	r1, r2, r2
 8004918:	6239      	str	r1, [r7, #32]
 800491a:	415b      	adcs	r3, r3
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004922:	4641      	mov	r1, r8
 8004924:	1854      	adds	r4, r2, r1
 8004926:	4649      	mov	r1, r9
 8004928:	eb43 0501 	adc.w	r5, r3, r1
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	00eb      	lsls	r3, r5, #3
 8004936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800493a:	00e2      	lsls	r2, r4, #3
 800493c:	4614      	mov	r4, r2
 800493e:	461d      	mov	r5, r3
 8004940:	4643      	mov	r3, r8
 8004942:	18e3      	adds	r3, r4, r3
 8004944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004948:	464b      	mov	r3, r9
 800494a:	eb45 0303 	adc.w	r3, r5, r3
 800494e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800495e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800496e:	4629      	mov	r1, r5
 8004970:	008b      	lsls	r3, r1, #2
 8004972:	4621      	mov	r1, r4
 8004974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004978:	4621      	mov	r1, r4
 800497a:	008a      	lsls	r2, r1, #2
 800497c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004980:	f7fb fc86 	bl	8000290 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4b60      	ldr	r3, [pc, #384]	; (8004b0c <UART_SetConfig+0x4e4>)
 800498a:	fba3 2302 	umull	r2, r3, r3, r2
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	011c      	lsls	r4, r3, #4
 8004992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800499c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	61b9      	str	r1, [r7, #24]
 80049ac:	415b      	adcs	r3, r3
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b4:	4641      	mov	r1, r8
 80049b6:	1851      	adds	r1, r2, r1
 80049b8:	6139      	str	r1, [r7, #16]
 80049ba:	4649      	mov	r1, r9
 80049bc:	414b      	adcs	r3, r1
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049cc:	4659      	mov	r1, fp
 80049ce:	00cb      	lsls	r3, r1, #3
 80049d0:	4651      	mov	r1, sl
 80049d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d6:	4651      	mov	r1, sl
 80049d8:	00ca      	lsls	r2, r1, #3
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	4642      	mov	r2, r8
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e8:	464b      	mov	r3, r9
 80049ea:	460a      	mov	r2, r1
 80049ec:	eb42 0303 	adc.w	r3, r2, r3
 80049f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80049fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	008b      	lsls	r3, r1, #2
 8004a10:	4641      	mov	r1, r8
 8004a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a16:	4641      	mov	r1, r8
 8004a18:	008a      	lsls	r2, r1, #2
 8004a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a1e:	f7fb fc37 	bl	8000290 <__aeabi_uldivmod>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <UART_SetConfig+0x4e4>)
 8004a28:	fba3 1302 	umull	r1, r3, r3, r2
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	2164      	movs	r1, #100	; 0x64
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	3332      	adds	r3, #50	; 0x32
 8004a3a:	4a34      	ldr	r2, [pc, #208]	; (8004b0c <UART_SetConfig+0x4e4>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a46:	441c      	add	r4, r3
 8004a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a50:	677a      	str	r2, [r7, #116]	; 0x74
 8004a52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a56:	4642      	mov	r2, r8
 8004a58:	464b      	mov	r3, r9
 8004a5a:	1891      	adds	r1, r2, r2
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	415b      	adcs	r3, r3
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a66:	4641      	mov	r1, r8
 8004a68:	1851      	adds	r1, r2, r1
 8004a6a:	6039      	str	r1, [r7, #0]
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	414b      	adcs	r3, r1
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a7e:	4659      	mov	r1, fp
 8004a80:	00cb      	lsls	r3, r1, #3
 8004a82:	4651      	mov	r1, sl
 8004a84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a88:	4651      	mov	r1, sl
 8004a8a:	00ca      	lsls	r2, r1, #3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4603      	mov	r3, r0
 8004a92:	4642      	mov	r2, r8
 8004a94:	189b      	adds	r3, r3, r2
 8004a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a98:	464b      	mov	r3, r9
 8004a9a:	460a      	mov	r2, r1
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8004aac:	667a      	str	r2, [r7, #100]	; 0x64
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004aba:	4649      	mov	r1, r9
 8004abc:	008b      	lsls	r3, r1, #2
 8004abe:	4641      	mov	r1, r8
 8004ac0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac4:	4641      	mov	r1, r8
 8004ac6:	008a      	lsls	r2, r1, #2
 8004ac8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004acc:	f7fb fbe0 	bl	8000290 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <UART_SetConfig+0x4e4>)
 8004ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2164      	movs	r1, #100	; 0x64
 8004ade:	fb01 f303 	mul.w	r3, r1, r3
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	3332      	adds	r3, #50	; 0x32
 8004ae8:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <UART_SetConfig+0x4e4>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	f003 020f 	and.w	r2, r3, #15
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4422      	add	r2, r4
 8004afc:	609a      	str	r2, [r3, #8]
}
 8004afe:	bf00      	nop
 8004b00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b04:	46bd      	mov	sp, r7
 8004b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0a:	bf00      	nop
 8004b0c:	51eb851f 	.word	0x51eb851f

08004b10 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004b18:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004b1e:	4b21      	ldr	r3, [pc, #132]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004b24:	4b1f      	ldr	r3, [pc, #124]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <WIZCHIP_READ+0x24>
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d114      	bne.n	8004b5e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	0c12      	lsrs	r2, r2, #16
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004b42:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	0a12      	lsrs	r2, r2, #8
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004b50:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4798      	blx	r3
 8004b5c:	e011      	b.n	8004b82 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	f107 020c 	add.w	r2, r7, #12
 8004b7c:	2103      	movs	r1, #3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4798      	blx	r3
 8004b88:	4603      	mov	r3, r0
 8004b8a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004b92:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <WIZCHIP_READ+0x94>)
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	4798      	blx	r3
   return ret;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000044 	.word	0x20000044

08004ba8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004bb4:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004bba:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f043 0304 	orr.w	r3, r3, #4
 8004bc6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004bc8:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d119      	bne.n	8004c04 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	0c12      	lsrs	r2, r2, #16
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004bde:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	0a12      	lsrs	r2, r2, #8
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	4610      	mov	r0, r2
 8004bea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4798      	blx	r3
 8004c02:	e013      	b.n	8004c2c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	f107 020c 	add.w	r2, r7, #12
 8004c26:	2104      	movs	r1, #4
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004c32:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <WIZCHIP_WRITE+0x98>)
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4798      	blx	r3
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000044 	.word	0x20000044

08004c44 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004c52:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004c58:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004c5e:	4b28      	ldr	r3, [pc, #160]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <WIZCHIP_READ_BUF+0x2a>
 8004c66:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d126      	bne.n	8004cbc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004c6e:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	0c12      	lsrs	r2, r2, #16
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004c7c:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	0a12      	lsrs	r2, r2, #8
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	4610      	mov	r0, r2
 8004c88:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	4610      	mov	r0, r2
 8004c94:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	82fb      	strh	r3, [r7, #22]
 8004c9a:	e00a      	b.n	8004cb2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	8afa      	ldrh	r2, [r7, #22]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	188c      	adds	r4, r1, r2
 8004ca6:	4798      	blx	r3
 8004ca8:	4603      	mov	r3, r0
 8004caa:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004cac:	8afb      	ldrh	r3, [r7, #22]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	82fb      	strh	r3, [r7, #22]
 8004cb2:	8afa      	ldrh	r2, [r7, #22]
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d3f0      	bcc.n	8004c9c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004cba:	e017      	b.n	8004cec <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	0c1b      	lsrs	r3, r3, #16
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	f107 0210 	add.w	r2, r7, #16
 8004cda:	2103      	movs	r1, #3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	68b8      	ldr	r0, [r7, #8]
 8004cea:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004cf2:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <WIZCHIP_READ_BUF+0xbc>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4798      	blx	r3
}
 8004cf8:	bf00      	nop
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd90      	pop	{r4, r7, pc}
 8004d00:	20000044 	.word	0x20000044

08004d04 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004d12:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004d18:	4b29      	ldr	r3, [pc, #164]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f043 0304 	orr.w	r3, r3, #4
 8004d24:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004d26:	4b26      	ldr	r3, [pc, #152]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d126      	bne.n	8004d7c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	0c12      	lsrs	r2, r2, #16
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004d3c:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	0a12      	lsrs	r2, r2, #8
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	4610      	mov	r0, r2
 8004d48:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	4610      	mov	r0, r2
 8004d54:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	82fb      	strh	r3, [r7, #22]
 8004d5a:	e00a      	b.n	8004d72 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	8afa      	ldrh	r2, [r7, #22]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	440a      	add	r2, r1
 8004d66:	7812      	ldrb	r2, [r2, #0]
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004d6c:	8afb      	ldrh	r3, [r7, #22]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	82fb      	strh	r3, [r7, #22]
 8004d72:	8afa      	ldrh	r2, [r7, #22]
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3f0      	bcc.n	8004d5c <WIZCHIP_WRITE_BUF+0x58>
 8004d7a:	e017      	b.n	8004dac <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	0c1b      	lsrs	r3, r3, #16
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	f107 0210 	add.w	r2, r7, #16
 8004d9a:	2103      	movs	r1, #3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	88fa      	ldrh	r2, [r7, #6]
 8004da6:	4611      	mov	r1, r2
 8004da8:	68b8      	ldr	r0, [r7, #8]
 8004daa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004db2:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <WIZCHIP_WRITE_BUF+0xbc>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	4798      	blx	r3
}
 8004db8:	bf00      	nop
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000044 	.word	0x20000044

08004dc4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004dc4:	b590      	push	{r4, r7, lr}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	81fb      	strh	r3, [r7, #14]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	3301      	adds	r3, #1
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fe94 	bl	8004b10 <WIZCHIP_READ>
 8004de8:	4603      	mov	r3, r0
 8004dea:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004dec:	89bb      	ldrh	r3, [r7, #12]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	b29c      	uxth	r4, r3
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	3301      	adds	r3, #1
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fe86 	bl	8004b10 <WIZCHIP_READ>
 8004e04:	4603      	mov	r3, r0
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	4423      	add	r3, r4
 8004e0a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004e0c:	89bb      	ldrh	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01a      	beq.n	8004e48 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	3301      	adds	r3, #1
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fe76 	bl	8004b10 <WIZCHIP_READ>
 8004e24:	4603      	mov	r3, r0
 8004e26:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004e28:	89fb      	ldrh	r3, [r7, #14]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	b29c      	uxth	r4, r3
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	3301      	adds	r3, #1
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff fe68 	bl	8004b10 <WIZCHIP_READ>
 8004e40:	4603      	mov	r3, r0
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	4423      	add	r3, r4
 8004e46:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004e48:	89fa      	ldrh	r2, [r7, #14]
 8004e4a:	89bb      	ldrh	r3, [r7, #12]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d1c2      	bne.n	8004dd6 <getSn_TX_FSR+0x12>
   return val;
 8004e50:	89fb      	ldrh	r3, [r7, #14]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd90      	pop	{r4, r7, pc}

08004e5a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004e5a:	b590      	push	{r4, r7, lr}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	4603      	mov	r3, r0
 8004e62:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	81fb      	strh	r3, [r7, #14]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	3301      	adds	r3, #1
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff fe49 	bl	8004b10 <WIZCHIP_READ>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004e82:	89bb      	ldrh	r3, [r7, #12]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	b29c      	uxth	r4, r3
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fe3b 	bl	8004b10 <WIZCHIP_READ>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	4423      	add	r3, r4
 8004ea0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004ea2:	89bb      	ldrh	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01a      	beq.n	8004ede <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	3301      	adds	r3, #1
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fe2b 	bl	8004b10 <WIZCHIP_READ>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004ebe:	89fb      	ldrh	r3, [r7, #14]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	b29c      	uxth	r4, r3
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	3301      	adds	r3, #1
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fe1d 	bl	8004b10 <WIZCHIP_READ>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	4423      	add	r3, r4
 8004edc:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004ede:	89fa      	ldrh	r2, [r7, #14]
 8004ee0:	89bb      	ldrh	r3, [r7, #12]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d1c2      	bne.n	8004e6c <getSn_RX_RSR+0x12>
   return val;
 8004ee6:	89fb      	ldrh	r3, [r7, #14]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd90      	pop	{r4, r7, pc}

08004ef0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	6039      	str	r1, [r7, #0]
 8004efa:	71fb      	strb	r3, [r7, #7]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004f08:	88bb      	ldrh	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d048      	beq.n	8004fa0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	3301      	adds	r3, #1
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fdf8 	bl	8004b10 <WIZCHIP_READ>
 8004f20:	4603      	mov	r3, r0
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	b29c      	uxth	r4, r3
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fdeb 	bl	8004b10 <WIZCHIP_READ>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	4423      	add	r3, r4
 8004f40:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8004f42:	89fb      	ldrh	r3, [r7, #14]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	79fa      	ldrb	r2, [r7, #7]
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	3202      	adds	r2, #2
 8004f4c:	00d2      	lsls	r2, r2, #3
 8004f4e:	4413      	add	r3, r2
 8004f50:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8004f52:	88bb      	ldrh	r3, [r7, #4]
 8004f54:	461a      	mov	r2, r3
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	68b8      	ldr	r0, [r7, #8]
 8004f5a:	f7ff fed3 	bl	8004d04 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8004f5e:	89fa      	ldrh	r2, [r7, #14]
 8004f60:	88bb      	ldrh	r3, [r7, #4]
 8004f62:	4413      	add	r3, r2
 8004f64:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004f72:	461a      	mov	r2, r3
 8004f74:	89fb      	ldrh	r3, [r7, #14]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f7ff fe12 	bl	8004ba8 <WIZCHIP_WRITE>
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	3301      	adds	r3, #1
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004f90:	461a      	mov	r2, r3
 8004f92:	89fb      	ldrh	r3, [r7, #14]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f7ff fe05 	bl	8004ba8 <WIZCHIP_WRITE>
 8004f9e:	e000      	b.n	8004fa2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8004fa0:	bf00      	nop
}
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}

08004fa8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	6039      	str	r1, [r7, #0]
 8004fb2:	71fb      	strb	r3, [r7, #7]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004fc0:	88bb      	ldrh	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d048      	beq.n	8005058 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	3301      	adds	r3, #1
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fd9c 	bl	8004b10 <WIZCHIP_READ>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	b29c      	uxth	r4, r3
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fd8f 	bl	8004b10 <WIZCHIP_READ>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	4423      	add	r3, r4
 8004ff8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004ffa:	89fb      	ldrh	r3, [r7, #14]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	79fa      	ldrb	r2, [r7, #7]
 8005000:	0092      	lsls	r2, r2, #2
 8005002:	3203      	adds	r2, #3
 8005004:	00d2      	lsls	r2, r2, #3
 8005006:	4413      	add	r3, r2
 8005008:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800500a:	88bb      	ldrh	r3, [r7, #4]
 800500c:	461a      	mov	r2, r3
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	68b8      	ldr	r0, [r7, #8]
 8005012:	f7ff fe17 	bl	8004c44 <WIZCHIP_READ_BUF>
   ptr += len;
 8005016:	89fa      	ldrh	r2, [r7, #14]
 8005018:	88bb      	ldrh	r3, [r7, #4]
 800501a:	4413      	add	r3, r2
 800501c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	3301      	adds	r3, #1
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800502a:	461a      	mov	r2, r3
 800502c:	89fb      	ldrh	r3, [r7, #14]
 800502e:	0a1b      	lsrs	r3, r3, #8
 8005030:	b29b      	uxth	r3, r3
 8005032:	b2db      	uxtb	r3, r3
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f7ff fdb6 	bl	8004ba8 <WIZCHIP_WRITE>
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	3301      	adds	r3, #1
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005048:	461a      	mov	r2, r3
 800504a:	89fb      	ldrh	r3, [r7, #14]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f7ff fda9 	bl	8004ba8 <WIZCHIP_WRITE>
 8005056:	e000      	b.n	800505a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8005058:	bf00      	nop
}
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	bd90      	pop	{r4, r7, pc}

08005060 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8005060:	b590      	push	{r4, r7, lr}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	4604      	mov	r4, r0
 8005068:	4608      	mov	r0, r1
 800506a:	4611      	mov	r1, r2
 800506c:	461a      	mov	r2, r3
 800506e:	4623      	mov	r3, r4
 8005070:	71fb      	strb	r3, [r7, #7]
 8005072:	4603      	mov	r3, r0
 8005074:	71bb      	strb	r3, [r7, #6]
 8005076:	460b      	mov	r3, r1
 8005078:	80bb      	strh	r3, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d902      	bls.n	800508a <socket+0x2a>
 8005084:	f04f 33ff 	mov.w	r3, #4294967295
 8005088:	e0f2      	b.n	8005270 <socket+0x210>
	switch(protocol)
 800508a:	79bb      	ldrb	r3, [r7, #6]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d005      	beq.n	800509c <socket+0x3c>
 8005090:	2b00      	cmp	r3, #0
 8005092:	dd11      	ble.n	80050b8 <socket+0x58>
 8005094:	3b02      	subs	r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d80e      	bhi.n	80050b8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800509a:	e011      	b.n	80050c0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800509c:	f107 030c 	add.w	r3, r7, #12
 80050a0:	2204      	movs	r2, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80050a8:	f7ff fdcc 	bl	8004c44 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d105      	bne.n	80050be <socket+0x5e>
 80050b2:	f06f 0302 	mvn.w	r3, #2
 80050b6:	e0db      	b.n	8005270 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80050b8:	f06f 0304 	mvn.w	r3, #4
 80050bc:	e0d8      	b.n	8005270 <socket+0x210>
	    break;
 80050be:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <socket+0x70>
 80050ca:	f06f 0305 	mvn.w	r3, #5
 80050ce:	e0cf      	b.n	8005270 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d025      	beq.n	8005122 <socket+0xc2>
	{
   	switch(protocol)
 80050d6:	79bb      	ldrb	r3, [r7, #6]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d002      	beq.n	80050e2 <socket+0x82>
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d008      	beq.n	80050f2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80050e0:	e024      	b.n	800512c <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11c      	bne.n	8005126 <socket+0xc6>
 80050ec:	f06f 0305 	mvn.w	r3, #5
 80050f0:	e0be      	b.n	8005270 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d006      	beq.n	800510a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80050fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005100:	2b00      	cmp	r3, #0
 8005102:	db02      	blt.n	800510a <socket+0xaa>
 8005104:	f06f 0305 	mvn.w	r3, #5
 8005108:	e0b2      	b.n	8005270 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8005114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005118:	2b00      	cmp	r3, #0
 800511a:	db06      	blt.n	800512a <socket+0xca>
 800511c:	f06f 0305 	mvn.w	r3, #5
 8005120:	e0a6      	b.n	8005270 <socket+0x210>
   	}
   }
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <socket+0xcc>
   	      break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <socket+0xcc>
   	      break;
 800512a:	bf00      	nop
	close(sn);
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f8ac 	bl	800528c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	3301      	adds	r3, #1
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4618      	mov	r0, r3
 800513e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005142:	f023 030f 	bic.w	r3, r3, #15
 8005146:	b25a      	sxtb	r2, r3
 8005148:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800514c:	4313      	orrs	r3, r2
 800514e:	b25b      	sxtb	r3, r3
 8005150:	b2db      	uxtb	r3, r3
 8005152:	4619      	mov	r1, r3
 8005154:	f7ff fd28 	bl	8004ba8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8005158:	88bb      	ldrh	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d110      	bne.n	8005180 <socket+0x120>
	{
	   port = sock_any_port++;
 800515e:	4b46      	ldr	r3, [pc, #280]	; (8005278 <socket+0x218>)
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	b291      	uxth	r1, r2
 8005166:	4a44      	ldr	r2, [pc, #272]	; (8005278 <socket+0x218>)
 8005168:	8011      	strh	r1, [r2, #0]
 800516a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800516c:	4b42      	ldr	r3, [pc, #264]	; (8005278 <socket+0x218>)
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8005174:	4293      	cmp	r3, r2
 8005176:	d103      	bne.n	8005180 <socket+0x120>
 8005178:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <socket+0x218>)
 800517a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800517e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	3301      	adds	r3, #1
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518c:	461a      	mov	r2, r3
 800518e:	88bb      	ldrh	r3, [r7, #4]
 8005190:	0a1b      	lsrs	r3, r3, #8
 8005192:	b29b      	uxth	r3, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f7ff fd05 	bl	8004ba8 <WIZCHIP_WRITE>
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	3301      	adds	r3, #1
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	461a      	mov	r2, r3
 80051ac:	88bb      	ldrh	r3, [r7, #4]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f7ff fcf8 	bl	8004ba8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	3301      	adds	r3, #1
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80051c4:	2101      	movs	r1, #1
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fcee 	bl	8004ba8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80051cc:	bf00      	nop
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	3301      	adds	r3, #1
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fc98 	bl	8004b10 <WIZCHIP_READ>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f3      	bne.n	80051ce <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	2201      	movs	r2, #1
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	b21b      	sxth	r3, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	b21a      	sxth	r2, r3
 80051f4:	4b21      	ldr	r3, [pc, #132]	; (800527c <socket+0x21c>)
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b21b      	sxth	r3, r3
 80051fa:	4013      	ands	r3, r2
 80051fc:	b21b      	sxth	r3, r3
 80051fe:	b29a      	uxth	r2, r3
 8005200:	4b1e      	ldr	r3, [pc, #120]	; (800527c <socket+0x21c>)
 8005202:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	f003 0201 	and.w	r2, r3, #1
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	b21a      	sxth	r2, r3
 8005212:	4b1a      	ldr	r3, [pc, #104]	; (800527c <socket+0x21c>)
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b21b      	sxth	r3, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	b21b      	sxth	r3, r3
 800521c:	b29a      	uxth	r2, r3
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <socket+0x21c>)
 8005220:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	2201      	movs	r2, #1
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	b21b      	sxth	r3, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	b21a      	sxth	r2, r3
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <socket+0x220>)
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b21b      	sxth	r3, r3
 8005236:	4013      	ands	r3, r2
 8005238:	b21b      	sxth	r3, r3
 800523a:	b29a      	uxth	r2, r3
 800523c:	4b10      	ldr	r3, [pc, #64]	; (8005280 <socket+0x220>)
 800523e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	4a10      	ldr	r2, [pc, #64]	; (8005284 <socket+0x224>)
 8005244:	2100      	movs	r1, #0
 8005246:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	4a0e      	ldr	r2, [pc, #56]	; (8005288 <socket+0x228>)
 800524e:	2100      	movs	r1, #0
 8005250:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8005252:	bf00      	nop
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	3301      	adds	r3, #1
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fc55 	bl	8004b10 <WIZCHIP_READ>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f3      	beq.n	8005254 <socket+0x1f4>
   return (int8_t)sn;
 800526c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}
 8005278:	20000042 	.word	0x20000042
 800527c:	200012c8 	.word	0x200012c8
 8005280:	200012ca 	.word	0x200012ca
 8005284:	200012cc 	.word	0x200012cc
 8005288:	200012dc 	.word	0x200012dc

0800528c <close>:

int8_t close(uint8_t sn)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d902      	bls.n	80052a2 <close+0x16>
 800529c:	f04f 33ff 	mov.w	r3, #4294967295
 80052a0:	e055      	b.n	800534e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	3301      	adds	r3, #1
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80052ae:	2110      	movs	r1, #16
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fc79 	bl	8004ba8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80052b6:	bf00      	nop
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	3301      	adds	r3, #1
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fc23 	bl	8004b10 <WIZCHIP_READ>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f3      	bne.n	80052b8 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	3301      	adds	r3, #1
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80052dc:	211f      	movs	r1, #31
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fc62 	bl	8004ba8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	2201      	movs	r2, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	b21b      	sxth	r3, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	b21a      	sxth	r2, r3
 80052f2:	4b19      	ldr	r3, [pc, #100]	; (8005358 <close+0xcc>)
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b21b      	sxth	r3, r3
 80052f8:	4013      	ands	r3, r2
 80052fa:	b21b      	sxth	r3, r3
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	4b16      	ldr	r3, [pc, #88]	; (8005358 <close+0xcc>)
 8005300:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	2201      	movs	r2, #1
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	b21b      	sxth	r3, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	b21a      	sxth	r2, r3
 8005310:	4b12      	ldr	r3, [pc, #72]	; (800535c <close+0xd0>)
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b21b      	sxth	r3, r3
 8005316:	4013      	ands	r3, r2
 8005318:	b21b      	sxth	r3, r3
 800531a:	b29a      	uxth	r2, r3
 800531c:	4b0f      	ldr	r3, [pc, #60]	; (800535c <close+0xd0>)
 800531e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <close+0xd4>)
 8005324:	2100      	movs	r1, #0
 8005326:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <close+0xd8>)
 800532e:	2100      	movs	r1, #0
 8005330:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005332:	bf00      	nop
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	3301      	adds	r3, #1
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fbe5 	bl	8004b10 <WIZCHIP_READ>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f3      	bne.n	8005334 <close+0xa8>
	return SOCK_OK;
 800534c:	2301      	movs	r3, #1
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	200012c8 	.word	0x200012c8
 800535c:	200012ca 	.word	0x200012ca
 8005360:	200012cc 	.word	0x200012cc
 8005364:	200012dc 	.word	0x200012dc

08005368 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	6039      	str	r1, [r7, #0]
 8005372:	71fb      	strb	r3, [r7, #7]
 8005374:	4613      	mov	r3, r2
 8005376:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	2b08      	cmp	r3, #8
 800537c:	d902      	bls.n	8005384 <connect+0x1c>
 800537e:	f04f 33ff 	mov.w	r3, #4294967295
 8005382:	e0c6      	b.n	8005512 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	3301      	adds	r3, #1
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff fbbf 	bl	8004b10 <WIZCHIP_READ>
 8005392:	4603      	mov	r3, r0
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	2b01      	cmp	r3, #1
 800539a:	d002      	beq.n	80053a2 <connect+0x3a>
 800539c:	f06f 0304 	mvn.w	r3, #4
 80053a0:	e0b7      	b.n	8005512 <connect+0x1aa>
   CHECK_SOCKINIT();
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	3301      	adds	r3, #1
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fbae 	bl	8004b10 <WIZCHIP_READ>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b13      	cmp	r3, #19
 80053b8:	d002      	beq.n	80053c0 <connect+0x58>
 80053ba:	f06f 0302 	mvn.w	r3, #2
 80053be:	e0a8      	b.n	8005512 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	3201      	adds	r2, #1
 80053ce:	7812      	ldrb	r2, [r2, #0]
 80053d0:	4413      	add	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	3202      	adds	r2, #2
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	4413      	add	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	3203      	adds	r2, #3
 80053ea:	7812      	ldrb	r2, [r2, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d002      	beq.n	80053fe <connect+0x96>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <connect+0x9c>
 80053fe:	f06f 030b 	mvn.w	r3, #11
 8005402:	e086      	b.n	8005512 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8005404:	88bb      	ldrh	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <connect+0xa8>
 800540a:	f06f 030a 	mvn.w	r3, #10
 800540e:	e080      	b.n	8005512 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	3301      	adds	r3, #1
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800541c:	2204      	movs	r2, #4
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fc6f 	bl	8004d04 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	3301      	adds	r3, #1
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005432:	461a      	mov	r2, r3
 8005434:	88bb      	ldrh	r3, [r7, #4]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	b29b      	uxth	r3, r3
 800543a:	b2db      	uxtb	r3, r3
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f7ff fbb2 	bl	8004ba8 <WIZCHIP_WRITE>
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	3301      	adds	r3, #1
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005450:	461a      	mov	r2, r3
 8005452:	88bb      	ldrh	r3, [r7, #4]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f7ff fba5 	bl	8004ba8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	3301      	adds	r3, #1
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800546a:	2104      	movs	r1, #4
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff fb9b 	bl	8004ba8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005472:	bf00      	nop
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	3301      	adds	r3, #1
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fb45 	bl	8004b10 <WIZCHIP_READ>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f3      	bne.n	8005474 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800548c:	4b23      	ldr	r3, [pc, #140]	; (800551c <connect+0x1b4>)
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	fa42 f303 	asr.w	r3, r2, r3
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d02b      	beq.n	80054f8 <connect+0x190>
 80054a0:	2300      	movs	r3, #0
 80054a2:	e036      	b.n	8005512 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	3301      	adds	r3, #1
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fb2d 	bl	8004b10 <WIZCHIP_READ>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	3301      	adds	r3, #1
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80054cc:	2108      	movs	r1, #8
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fb6a 	bl	8004ba8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80054d4:	f06f 030c 	mvn.w	r3, #12
 80054d8:	e01b      	b.n	8005512 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	3301      	adds	r3, #1
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fb12 	bl	8004b10 <WIZCHIP_READ>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80054f2:	f06f 0303 	mvn.w	r3, #3
 80054f6:	e00c      	b.n	8005512 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	3301      	adds	r3, #1
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fb03 	bl	8004b10 <WIZCHIP_READ>
 800550a:	4603      	mov	r3, r0
 800550c:	2b17      	cmp	r3, #23
 800550e:	d1c9      	bne.n	80054a4 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8005510:	2301      	movs	r3, #1
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200012c8 	.word	0x200012c8

08005520 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d902      	bls.n	8005536 <disconnect+0x16>
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	e062      	b.n	80055fc <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	3301      	adds	r3, #1
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fae6 	bl	8004b10 <WIZCHIP_READ>
 8005544:	4603      	mov	r3, r0
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	2b01      	cmp	r3, #1
 800554c:	d002      	beq.n	8005554 <disconnect+0x34>
 800554e:	f06f 0304 	mvn.w	r3, #4
 8005552:	e053      	b.n	80055fc <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	3301      	adds	r3, #1
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005560:	2108      	movs	r1, #8
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff fb20 	bl	8004ba8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005568:	bf00      	nop
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	3301      	adds	r3, #1
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff faca 	bl	8004b10 <WIZCHIP_READ>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f3      	bne.n	800556a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2201      	movs	r2, #1
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	b21b      	sxth	r3, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	b21a      	sxth	r2, r3
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <disconnect+0xe4>)
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b21b      	sxth	r3, r3
 8005596:	4013      	ands	r3, r2
 8005598:	b21b      	sxth	r3, r3
 800559a:	b29a      	uxth	r2, r3
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <disconnect+0xe4>)
 800559e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <disconnect+0xe8>)
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	fa42 f303 	asr.w	r3, r2, r3
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d016      	beq.n	80055e2 <disconnect+0xc2>
 80055b4:	2300      	movs	r3, #0
 80055b6:	e021      	b.n	80055fc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	3301      	adds	r3, #1
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff faa3 	bl	8004b10 <WIZCHIP_READ>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d006      	beq.n	80055e2 <disconnect+0xc2>
	   {
	      close(sn);
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fe58 	bl	800528c <close>
	      return SOCKERR_TIMEOUT;
 80055dc:	f06f 030c 	mvn.w	r3, #12
 80055e0:	e00c      	b.n	80055fc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	3301      	adds	r3, #1
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fa8e 	bl	8004b10 <WIZCHIP_READ>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1de      	bne.n	80055b8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80055fa:	2301      	movs	r3, #1
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	200012ca 	.word	0x200012ca
 8005608:	200012c8 	.word	0x200012c8

0800560c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	6039      	str	r1, [r7, #0]
 8005616:	71fb      	strb	r3, [r7, #7]
 8005618:	4613      	mov	r3, r2
 800561a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800561c:	2300      	movs	r3, #0
 800561e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005620:	2300      	movs	r3, #0
 8005622:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	2b08      	cmp	r3, #8
 8005628:	d902      	bls.n	8005630 <send+0x24>
 800562a:	f04f 33ff 	mov.w	r3, #4294967295
 800562e:	e0de      	b.n	80057ee <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	3301      	adds	r3, #1
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fa69 	bl	8004b10 <WIZCHIP_READ>
 800563e:	4603      	mov	r3, r0
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	2b01      	cmp	r3, #1
 8005646:	d002      	beq.n	800564e <send+0x42>
 8005648:	f06f 0304 	mvn.w	r3, #4
 800564c:	e0cf      	b.n	80057ee <send+0x1e2>
   CHECK_SOCKDATA();
 800564e:	88bb      	ldrh	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <send+0x4e>
 8005654:	f06f 030d 	mvn.w	r3, #13
 8005658:	e0c9      	b.n	80057ee <send+0x1e2>
   tmp = getSn_SR(sn);
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	3301      	adds	r3, #1
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff fa52 	bl	8004b10 <WIZCHIP_READ>
 800566c:	4603      	mov	r3, r0
 800566e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b17      	cmp	r3, #23
 8005674:	d005      	beq.n	8005682 <send+0x76>
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2b1c      	cmp	r3, #28
 800567a:	d002      	beq.n	8005682 <send+0x76>
 800567c:	f06f 0306 	mvn.w	r3, #6
 8005680:	e0b5      	b.n	80057ee <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8005682:	4b5d      	ldr	r3, [pc, #372]	; (80057f8 <send+0x1ec>)
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	79fb      	ldrb	r3, [r7, #7]
 800568a:	fa42 f303 	asr.w	r3, r2, r3
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d039      	beq.n	800570a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	3301      	adds	r3, #1
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff fa34 	bl	8004b10 <WIZCHIP_READ>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d019      	beq.n	80056ee <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	3301      	adds	r3, #1
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80056c6:	2110      	movs	r1, #16
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fa6d 	bl	8004ba8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	2201      	movs	r2, #1
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	b21b      	sxth	r3, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	b21a      	sxth	r2, r3
 80056dc:	4b46      	ldr	r3, [pc, #280]	; (80057f8 <send+0x1ec>)
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b21b      	sxth	r3, r3
 80056e2:	4013      	ands	r3, r2
 80056e4:	b21b      	sxth	r3, r3
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <send+0x1ec>)
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	e00d      	b.n	800570a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d006      	beq.n	8005706 <send+0xfa>
      {
         close(sn);
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fdc6 	bl	800528c <close>
         return SOCKERR_TIMEOUT;
 8005700:	f06f 030c 	mvn.w	r3, #12
 8005704:	e073      	b.n	80057ee <send+0x1e2>
      }
      else return SOCK_BUSY;
 8005706:	2300      	movs	r3, #0
 8005708:	e071      	b.n	80057ee <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	3301      	adds	r3, #1
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff f9fa 	bl	8004b10 <WIZCHIP_READ>
 800571c:	4603      	mov	r3, r0
 800571e:	b29b      	uxth	r3, r3
 8005720:	029b      	lsls	r3, r3, #10
 8005722:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005724:	88ba      	ldrh	r2, [r7, #4]
 8005726:	89bb      	ldrh	r3, [r7, #12]
 8005728:	429a      	cmp	r2, r3
 800572a:	d901      	bls.n	8005730 <send+0x124>
 800572c:	89bb      	ldrh	r3, [r7, #12]
 800572e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fb46 	bl	8004dc4 <getSn_TX_FSR>
 8005738:	4603      	mov	r3, r0
 800573a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	3301      	adds	r3, #1
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff f9e1 	bl	8004b10 <WIZCHIP_READ>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b17      	cmp	r3, #23
 8005756:	d009      	beq.n	800576c <send+0x160>
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b1c      	cmp	r3, #28
 800575c:	d006      	beq.n	800576c <send+0x160>
      {
         close(sn);
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fd93 	bl	800528c <close>
         return SOCKERR_SOCKSTATUS;
 8005766:	f06f 0306 	mvn.w	r3, #6
 800576a:	e040      	b.n	80057ee <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800576c:	4b23      	ldr	r3, [pc, #140]	; (80057fc <send+0x1f0>)
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	fa42 f303 	asr.w	r3, r2, r3
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <send+0x180>
 8005780:	88ba      	ldrh	r2, [r7, #4]
 8005782:	89bb      	ldrh	r3, [r7, #12]
 8005784:	429a      	cmp	r2, r3
 8005786:	d901      	bls.n	800578c <send+0x180>
 8005788:	2300      	movs	r3, #0
 800578a:	e030      	b.n	80057ee <send+0x1e2>
      if(len <= freesize) break;
 800578c:	88ba      	ldrh	r2, [r7, #4]
 800578e:	89bb      	ldrh	r3, [r7, #12]
 8005790:	429a      	cmp	r2, r3
 8005792:	d900      	bls.n	8005796 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8005794:	e7cc      	b.n	8005730 <send+0x124>
      if(len <= freesize) break;
 8005796:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8005798:	88ba      	ldrh	r2, [r7, #4]
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fba6 	bl	8004ef0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	3301      	adds	r3, #1
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80057b0:	2120      	movs	r1, #32
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff f9f8 	bl	8004ba8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80057b8:	bf00      	nop
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	3301      	adds	r3, #1
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff f9a2 	bl	8004b10 <WIZCHIP_READ>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f3      	bne.n	80057ba <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	2201      	movs	r2, #1
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	b21a      	sxth	r2, r3
 80057dc:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <send+0x1ec>)
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b21b      	sxth	r3, r3
 80057e2:	4313      	orrs	r3, r2
 80057e4:	b21b      	sxth	r3, r3
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <send+0x1ec>)
 80057ea:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80057ec:	88bb      	ldrh	r3, [r7, #4]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	200012ca 	.word	0x200012ca
 80057fc:	200012c8 	.word	0x200012c8

08005800 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005800:	b590      	push	{r4, r7, lr}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	6039      	str	r1, [r7, #0]
 800580a:	71fb      	strb	r3, [r7, #7]
 800580c:	4613      	mov	r3, r2
 800580e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	2b08      	cmp	r3, #8
 800581c:	d902      	bls.n	8005824 <recv+0x24>
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	e09c      	b.n	800595e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	3301      	adds	r3, #1
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff f96f 	bl	8004b10 <WIZCHIP_READ>
 8005832:	4603      	mov	r3, r0
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	2b01      	cmp	r3, #1
 800583a:	d002      	beq.n	8005842 <recv+0x42>
 800583c:	f06f 0304 	mvn.w	r3, #4
 8005840:	e08d      	b.n	800595e <recv+0x15e>
   CHECK_SOCKDATA();
 8005842:	88bb      	ldrh	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <recv+0x4e>
 8005848:	f06f 030d 	mvn.w	r3, #13
 800584c:	e087      	b.n	800595e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	3301      	adds	r3, #1
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff f958 	bl	8004b10 <WIZCHIP_READ>
 8005860:	4603      	mov	r3, r0
 8005862:	b29b      	uxth	r3, r3
 8005864:	029b      	lsls	r3, r3, #10
 8005866:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8005868:	89ba      	ldrh	r2, [r7, #12]
 800586a:	88bb      	ldrh	r3, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d201      	bcs.n	8005874 <recv+0x74>
 8005870:	89bb      	ldrh	r3, [r7, #12]
 8005872:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff faef 	bl	8004e5a <getSn_RX_RSR>
 800587c:	4603      	mov	r3, r0
 800587e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	3301      	adds	r3, #1
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff f93f 	bl	8004b10 <WIZCHIP_READ>
 8005892:	4603      	mov	r3, r0
 8005894:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	2b17      	cmp	r3, #23
 800589a:	d026      	beq.n	80058ea <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b1c      	cmp	r3, #28
 80058a0:	d11c      	bne.n	80058dc <recv+0xdc>
            {
               if(recvsize != 0) break;
 80058a2:	89bb      	ldrh	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d133      	bne.n	8005910 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fa8a 	bl	8004dc4 <getSn_TX_FSR>
 80058b0:	4603      	mov	r3, r0
 80058b2:	461c      	mov	r4, r3
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	3301      	adds	r3, #1
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff f925 	bl	8004b10 <WIZCHIP_READ>
 80058c6:	4603      	mov	r3, r0
 80058c8:	029b      	lsls	r3, r3, #10
 80058ca:	429c      	cmp	r4, r3
 80058cc:	d10d      	bne.n	80058ea <recv+0xea>
               {
                  close(sn);
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fcdb 	bl	800528c <close>
                  return SOCKERR_SOCKSTATUS;
 80058d6:	f06f 0306 	mvn.w	r3, #6
 80058da:	e040      	b.n	800595e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fcd4 	bl	800528c <close>
               return SOCKERR_SOCKSTATUS;
 80058e4:	f06f 0306 	mvn.w	r3, #6
 80058e8:	e039      	b.n	800595e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80058ea:	4b1f      	ldr	r3, [pc, #124]	; (8005968 <recv+0x168>)
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	fa42 f303 	asr.w	r3, r2, r3
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <recv+0x108>
 80058fe:	89bb      	ldrh	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <recv+0x108>
 8005904:	2300      	movs	r3, #0
 8005906:	e02a      	b.n	800595e <recv+0x15e>
         if(recvsize != 0) break;
 8005908:	89bb      	ldrh	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800590e:	e7b1      	b.n	8005874 <recv+0x74>
               if(recvsize != 0) break;
 8005910:	bf00      	nop
 8005912:	e000      	b.n	8005916 <recv+0x116>
         if(recvsize != 0) break;
 8005914:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005916:	89ba      	ldrh	r2, [r7, #12]
 8005918:	88bb      	ldrh	r3, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d201      	bcs.n	8005922 <recv+0x122>
 800591e:	89bb      	ldrh	r3, [r7, #12]
 8005920:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005922:	88ba      	ldrh	r2, [r7, #4]
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fb3d 	bl	8004fa8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	3301      	adds	r3, #1
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800593a:	2140      	movs	r1, #64	; 0x40
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff f933 	bl	8004ba8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005942:	bf00      	nop
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	3301      	adds	r3, #1
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff f8dd 	bl	8004b10 <WIZCHIP_READ>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f3      	bne.n	8005944 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800595c:	88bb      	ldrh	r3, [r7, #4]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	bf00      	nop
 8005968:	200012c8 	.word	0x200012c8

0800596c <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	603a      	str	r2, [r7, #0]
 8005976:	71fb      	strb	r3, [r7, #7]
 8005978:	460b      	mov	r3, r1
 800597a:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b08      	cmp	r3, #8
 8005980:	d902      	bls.n	8005988 <getsockopt+0x1c>
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	e101      	b.n	8005b8c <getsockopt+0x220>
   switch(sotype)
 8005988:	79bb      	ldrb	r3, [r7, #6]
 800598a:	2b0c      	cmp	r3, #12
 800598c:	f200 80fa 	bhi.w	8005b84 <getsockopt+0x218>
 8005990:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <getsockopt+0x2c>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	080059cd 	.word	0x080059cd
 800599c:	080059e9 	.word	0x080059e9
 80059a0:	08005a05 	.word	0x08005a05
 80059a4:	08005a21 	.word	0x08005a21
 80059a8:	08005a5b 	.word	0x08005a5b
 80059ac:	08005a73 	.word	0x08005a73
 80059b0:	08005b85 	.word	0x08005b85
 80059b4:	08005aad 	.word	0x08005aad
 80059b8:	08005ae7 	.word	0x08005ae7
 80059bc:	08005af9 	.word	0x08005af9
 80059c0:	08005b0b 	.word	0x08005b0b
 80059c4:	08005b27 	.word	0x08005b27
 80059c8:	08005b5f 	.word	0x08005b5f
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	3301      	adds	r3, #1
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff f89b 	bl	8004b10 <WIZCHIP_READ>
 80059da:	4603      	mov	r3, r0
 80059dc:	f023 030f 	bic.w	r3, r3, #15
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	701a      	strb	r2, [r3, #0]
         break;
 80059e6:	e0d0      	b.n	8005b8a <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	3301      	adds	r3, #1
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff f88b 	bl	8004b10 <WIZCHIP_READ>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
         break;
 8005a02:	e0c2      	b.n	8005b8a <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	3301      	adds	r3, #1
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff f87d 	bl	8004b10 <WIZCHIP_READ>
 8005a16:	4603      	mov	r3, r0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	701a      	strb	r2, [r3, #0]
         break;
 8005a1e:	e0b4      	b.n	8005b8a <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 8005a20:	79fb      	ldrb	r3, [r7, #7]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	3301      	adds	r3, #1
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff f86f 	bl	8004b10 <WIZCHIP_READ>
 8005a32:	4603      	mov	r3, r0
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	b29c      	uxth	r4, r3
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	3301      	adds	r3, #1
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff f862 	bl	8004b10 <WIZCHIP_READ>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4423      	add	r3, r4
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	801a      	strh	r2, [r3, #0]
         break;
 8005a58:	e097      	b.n	8005b8a <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	3301      	adds	r3, #1
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005a66:	2204      	movs	r2, #4
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff f8ea 	bl	8004c44 <WIZCHIP_READ_BUF>
         break;
 8005a70:	e08b      	b.n	8005b8a <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	3301      	adds	r3, #1
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff f846 	bl	8004b10 <WIZCHIP_READ>
 8005a84:	4603      	mov	r3, r0
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	b29c      	uxth	r4, r3
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	3301      	adds	r3, #1
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff f839 	bl	8004b10 <WIZCHIP_READ>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4423      	add	r3, r4
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	801a      	strh	r2, [r3, #0]
         break;
 8005aaa:	e06e      	b.n	8005b8a <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff f82b 	bl	8004b10 <WIZCHIP_READ>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d002      	beq.n	8005aca <getsockopt+0x15e>
 8005ac4:	f06f 0304 	mvn.w	r3, #4
 8005ac8:	e060      	b.n	8005b8c <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	3301      	adds	r3, #1
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff f81a 	bl	8004b10 <WIZCHIP_READ>
 8005adc:	4603      	mov	r3, r0
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	801a      	strh	r2, [r3, #0]
         break;
 8005ae4:	e051      	b.n	8005b8a <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff f96b 	bl	8004dc4 <getSn_TX_FSR>
 8005aee:	4603      	mov	r3, r0
 8005af0:	461a      	mov	r2, r3
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	801a      	strh	r2, [r3, #0]
         break;
 8005af6:	e048      	b.n	8005b8a <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff f9ad 	bl	8004e5a <getSn_RX_RSR>
 8005b00:	4603      	mov	r3, r0
 8005b02:	461a      	mov	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	801a      	strh	r2, [r3, #0]
         break;
 8005b08:	e03f      	b.n	8005b8a <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	3301      	adds	r3, #1
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fffa 	bl	8004b10 <WIZCHIP_READ>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	701a      	strb	r2, [r3, #0]
         break;
 8005b24:	e031      	b.n	8005b8a <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe ffee 	bl	8004b10 <WIZCHIP_READ>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff f98a 	bl	8004e5a <getSn_RX_RSR>
 8005b46:	4603      	mov	r3, r0
 8005b48:	461a      	mov	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8005b4e:	e01c      	b.n	8005b8a <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	4a10      	ldr	r2, [pc, #64]	; (8005b94 <getsockopt+0x228>)
 8005b54:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	801a      	strh	r2, [r3, #0]
         break;
 8005b5c:	e015      	b.n	8005b8a <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	3301      	adds	r3, #1
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe ffd2 	bl	8004b10 <WIZCHIP_READ>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d102      	bne.n	8005b78 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 8005b72:	f06f 0304 	mvn.w	r3, #4
 8005b76:	e009      	b.n	8005b8c <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <getsockopt+0x22c>)
 8005b7c:	5cd2      	ldrb	r2, [r2, r3]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	701a      	strb	r2, [r3, #0]
         break;
 8005b82:	e002      	b.n	8005b8a <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8005b84:	f06f 0301 	mvn.w	r3, #1
 8005b88:	e000      	b.n	8005b8c <getsockopt+0x220>
   }
   return SOCK_OK;
 8005b8a:	2301      	movs	r3, #1
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd90      	pop	{r4, r7, pc}
 8005b94:	200012cc 	.word	0x200012cc
 8005b98:	200012dc 	.word	0x200012dc

08005b9c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005baa:	b480      	push	{r7}
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	bf00      	nop
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	2300      	movs	r3, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	71fb      	strb	r3, [r7, #7]
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <reg_wizchip_cs_cbfunc+0x16>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <reg_wizchip_cs_cbfunc+0x40>)
 8005c4c:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <reg_wizchip_cs_cbfunc+0x44>)
 8005c4e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005c50:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <reg_wizchip_cs_cbfunc+0x40>)
 8005c52:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <reg_wizchip_cs_cbfunc+0x48>)
 8005c54:	619a      	str	r2, [r3, #24]
 8005c56:	e006      	b.n	8005c66 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005c58:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <reg_wizchip_cs_cbfunc+0x40>)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005c5e:	4a05      	ldr	r2, [pc, #20]	; (8005c74 <reg_wizchip_cs_cbfunc+0x40>)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6193      	str	r3, [r2, #24]
   }
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20000044 	.word	0x20000044
 8005c78:	08005bb9 	.word	0x08005bb9
 8005c7c:	08005bc7 	.word	0x08005bc7

08005c80 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005c8a:	bf00      	nop
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <reg_wizchip_spi_cbfunc+0x4c>)
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f9      	beq.n	8005c8c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <reg_wizchip_spi_cbfunc+0x24>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005ca4:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <reg_wizchip_spi_cbfunc+0x4c>)
 8005ca6:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <reg_wizchip_spi_cbfunc+0x50>)
 8005ca8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005caa:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <reg_wizchip_spi_cbfunc+0x4c>)
 8005cac:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <reg_wizchip_spi_cbfunc+0x54>)
 8005cae:	621a      	str	r2, [r3, #32]
 8005cb0:	e006      	b.n	8005cc0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005cb2:	4a06      	ldr	r2, [pc, #24]	; (8005ccc <reg_wizchip_spi_cbfunc+0x4c>)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005cb8:	4a04      	ldr	r2, [pc, #16]	; (8005ccc <reg_wizchip_spi_cbfunc+0x4c>)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6213      	str	r3, [r2, #32]
   }
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20000044 	.word	0x20000044
 8005cd0:	08005c0d 	.word	0x08005c0d
 8005cd4:	08005c1d 	.word	0x08005c1d

08005cd8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	2206      	movs	r2, #6
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005ce8:	f7fe ffac 	bl	8004c44 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005cec:	f107 0314 	add.w	r3, r7, #20
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005cf8:	f7fe ffa4 	bl	8004c44 <WIZCHIP_READ_BUF>
 8005cfc:	f107 0310 	add.w	r3, r7, #16
 8005d00:	2204      	movs	r2, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005d08:	f7fe ff9c 	bl	8004c44 <WIZCHIP_READ_BUF>
 8005d0c:	f107 030c 	add.w	r3, r7, #12
 8005d10:	2204      	movs	r2, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005d18:	f7fe ff94 	bl	8004c44 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	2000      	movs	r0, #0
 8005d20:	f7fe ff42 	bl	8004ba8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005d24:	2000      	movs	r0, #0
 8005d26:	f7fe fef3 	bl	8004b10 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	2206      	movs	r2, #6
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005d34:	f7fe ffe6 	bl	8004d04 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005d38:	f107 0314 	add.w	r3, r7, #20
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d44:	f7fe ffde 	bl	8004d04 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005d48:	f107 0310 	add.w	r3, r7, #16
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005d54:	f7fe ffd6 	bl	8004d04 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005d58:	f107 030c 	add.w	r3, r7, #12
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005d64:	f7fe ffce 	bl	8004d04 <WIZCHIP_WRITE_BUF>
}
 8005d68:	bf00      	nop
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005d7e:	f7ff ffab 	bl	8005cd8 <wizchip_sw_reset>
   if(txsize)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d03b      	beq.n	8005e00 <wizchip_init+0x90>
   {
      tmp = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]
 8005d90:	e015      	b.n	8005dbe <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	4413      	add	r3, r2
 8005d9a:	781a      	ldrb	r2, [r3, #0]
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	4413      	add	r3, r2
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	dd02      	ble.n	8005db2 <wizchip_init+0x42>
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295
 8005db0:	e066      	b.n	8005e80 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	3301      	adds	r3, #1
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	73fb      	strb	r3, [r7, #15]
 8005dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc2:	2b07      	cmp	r3, #7
 8005dc4:	dde5      	ble.n	8005d92 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]
 8005dca:	e015      	b.n	8005df8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	4619      	mov	r1, r3
 8005de8:	f7fe fede 	bl	8004ba8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	3301      	adds	r3, #1
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dfc:	2b07      	cmp	r3, #7
 8005dfe:	dde5      	ble.n	8005dcc <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d03b      	beq.n	8005e7e <wizchip_init+0x10e>
   {
      tmp = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
 8005e0e:	e015      	b.n	8005e3c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	4413      	add	r3, r2
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	dd02      	ble.n	8005e30 <wizchip_init+0xc0>
 8005e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2e:	e027      	b.n	8005e80 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	3301      	adds	r3, #1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	73fb      	strb	r3, [r7, #15]
 8005e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e40:	2b07      	cmp	r3, #7
 8005e42:	dde5      	ble.n	8005e10 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	73fb      	strb	r3, [r7, #15]
 8005e48:	e015      	b.n	8005e76 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	3301      	adds	r3, #1
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4413      	add	r3, r2
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	4619      	mov	r1, r3
 8005e66:	f7fe fe9f 	bl	8004ba8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	3301      	adds	r3, #1
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	73fb      	strb	r3, [r7, #15]
 8005e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e7a:	2b07      	cmp	r3, #7
 8005e7c:	dde5      	ble.n	8005e4a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2206      	movs	r2, #6
 8005e94:	4619      	mov	r1, r3
 8005e96:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005e9a:	f7fe ff33 	bl	8004d04 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	330e      	adds	r3, #14
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005eaa:	f7fe ff2b 	bl	8004d04 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	330a      	adds	r3, #10
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005eba:	f7fe ff23 	bl	8004d04 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3306      	adds	r3, #6
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005eca:	f7fe ff1b 	bl	8004d04 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	7c9a      	ldrb	r2, [r3, #18]
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <wizchip_setnetinfo+0x78>)
 8005ed4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	7cda      	ldrb	r2, [r3, #19]
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <wizchip_setnetinfo+0x78>)
 8005edc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7d1a      	ldrb	r2, [r3, #20]
 8005ee2:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <wizchip_setnetinfo+0x78>)
 8005ee4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	7d5a      	ldrb	r2, [r3, #21]
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <wizchip_setnetinfo+0x78>)
 8005eec:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7d9a      	ldrb	r2, [r3, #22]
 8005ef2:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <wizchip_setnetinfo+0x7c>)
 8005ef4:	701a      	strb	r2, [r3, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200012e4 	.word	0x200012e4
 8005f04:	200012e8 	.word	0x200012e8

08005f08 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2206      	movs	r2, #6
 8005f14:	4619      	mov	r1, r3
 8005f16:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005f1a:	f7fe fe93 	bl	8004c44 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	330e      	adds	r3, #14
 8005f22:	2204      	movs	r2, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005f2a:	f7fe fe8b 	bl	8004c44 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	330a      	adds	r3, #10
 8005f32:	2204      	movs	r2, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005f3a:	f7fe fe83 	bl	8004c44 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3306      	adds	r3, #6
 8005f42:	2204      	movs	r2, #4
 8005f44:	4619      	mov	r1, r3
 8005f46:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005f4a:	f7fe fe7b 	bl	8004c44 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8005f4e:	4b0c      	ldr	r3, [pc, #48]	; (8005f80 <wizchip_getnetinfo+0x78>)
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <wizchip_getnetinfo+0x78>)
 8005f58:	785a      	ldrb	r2, [r3, #1]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <wizchip_getnetinfo+0x78>)
 8005f60:	789a      	ldrb	r2, [r3, #2]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8005f66:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <wizchip_getnetinfo+0x78>)
 8005f68:	78da      	ldrb	r2, [r3, #3]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <wizchip_getnetinfo+0x7c>)
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	759a      	strb	r2, [r3, #22]
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200012e4 	.word	0x200012e4
 8005f84:	200012e8 	.word	0x200012e8

08005f88 <__errno>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	; (8005f90 <__errno+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000070 	.word	0x20000070

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4d0d      	ldr	r5, [pc, #52]	; (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	; (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1b64      	subs	r4, r4, r5
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	42a6      	cmp	r6, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4d0b      	ldr	r5, [pc, #44]	; (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	; (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f001 fb20 	bl	80075ec <_init>
 8005fac:	1b64      	subs	r4, r4, r5
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	42a6      	cmp	r6, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbc:	4798      	blx	r3
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc6:	4798      	blx	r3
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	08007ac0 	.word	0x08007ac0
 8005fd0:	08007ac0 	.word	0x08007ac0
 8005fd4:	08007ac0 	.word	0x08007ac0
 8005fd8:	08007ac4 	.word	0x08007ac4

08005fdc <malloc>:
 8005fdc:	4b02      	ldr	r3, [pc, #8]	; (8005fe8 <malloc+0xc>)
 8005fde:	4601      	mov	r1, r0
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	f000 b89f 	b.w	8006124 <_malloc_r>
 8005fe6:	bf00      	nop
 8005fe8:	20000070 	.word	0x20000070

08005fec <memcpy>:
 8005fec:	440a      	add	r2, r1
 8005fee:	4291      	cmp	r1, r2
 8005ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ff4:	d100      	bne.n	8005ff8 <memcpy+0xc>
 8005ff6:	4770      	bx	lr
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006002:	4291      	cmp	r1, r2
 8006004:	d1f9      	bne.n	8005ffa <memcpy+0xe>
 8006006:	bd10      	pop	{r4, pc}

08006008 <memmove>:
 8006008:	4288      	cmp	r0, r1
 800600a:	b510      	push	{r4, lr}
 800600c:	eb01 0402 	add.w	r4, r1, r2
 8006010:	d902      	bls.n	8006018 <memmove+0x10>
 8006012:	4284      	cmp	r4, r0
 8006014:	4623      	mov	r3, r4
 8006016:	d807      	bhi.n	8006028 <memmove+0x20>
 8006018:	1e43      	subs	r3, r0, #1
 800601a:	42a1      	cmp	r1, r4
 800601c:	d008      	beq.n	8006030 <memmove+0x28>
 800601e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006022:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006026:	e7f8      	b.n	800601a <memmove+0x12>
 8006028:	4402      	add	r2, r0
 800602a:	4601      	mov	r1, r0
 800602c:	428a      	cmp	r2, r1
 800602e:	d100      	bne.n	8006032 <memmove+0x2a>
 8006030:	bd10      	pop	{r4, pc}
 8006032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800603a:	e7f7      	b.n	800602c <memmove+0x24>

0800603c <memset>:
 800603c:	4402      	add	r2, r0
 800603e:	4603      	mov	r3, r0
 8006040:	4293      	cmp	r3, r2
 8006042:	d100      	bne.n	8006046 <memset+0xa>
 8006044:	4770      	bx	lr
 8006046:	f803 1b01 	strb.w	r1, [r3], #1
 800604a:	e7f9      	b.n	8006040 <memset+0x4>

0800604c <_free_r>:
 800604c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800604e:	2900      	cmp	r1, #0
 8006050:	d044      	beq.n	80060dc <_free_r+0x90>
 8006052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006056:	9001      	str	r0, [sp, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f1a1 0404 	sub.w	r4, r1, #4
 800605e:	bfb8      	it	lt
 8006060:	18e4      	addlt	r4, r4, r3
 8006062:	f000 fcf5 	bl	8006a50 <__malloc_lock>
 8006066:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <_free_r+0x94>)
 8006068:	9801      	ldr	r0, [sp, #4]
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	b933      	cbnz	r3, 800607c <_free_r+0x30>
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	6014      	str	r4, [r2, #0]
 8006072:	b003      	add	sp, #12
 8006074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006078:	f000 bcf0 	b.w	8006a5c <__malloc_unlock>
 800607c:	42a3      	cmp	r3, r4
 800607e:	d908      	bls.n	8006092 <_free_r+0x46>
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	1961      	adds	r1, r4, r5
 8006084:	428b      	cmp	r3, r1
 8006086:	bf01      	itttt	eq
 8006088:	6819      	ldreq	r1, [r3, #0]
 800608a:	685b      	ldreq	r3, [r3, #4]
 800608c:	1949      	addeq	r1, r1, r5
 800608e:	6021      	streq	r1, [r4, #0]
 8006090:	e7ed      	b.n	800606e <_free_r+0x22>
 8006092:	461a      	mov	r2, r3
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	b10b      	cbz	r3, 800609c <_free_r+0x50>
 8006098:	42a3      	cmp	r3, r4
 800609a:	d9fa      	bls.n	8006092 <_free_r+0x46>
 800609c:	6811      	ldr	r1, [r2, #0]
 800609e:	1855      	adds	r5, r2, r1
 80060a0:	42a5      	cmp	r5, r4
 80060a2:	d10b      	bne.n	80060bc <_free_r+0x70>
 80060a4:	6824      	ldr	r4, [r4, #0]
 80060a6:	4421      	add	r1, r4
 80060a8:	1854      	adds	r4, r2, r1
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	d1e0      	bne.n	8006072 <_free_r+0x26>
 80060b0:	681c      	ldr	r4, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	6053      	str	r3, [r2, #4]
 80060b6:	4421      	add	r1, r4
 80060b8:	6011      	str	r1, [r2, #0]
 80060ba:	e7da      	b.n	8006072 <_free_r+0x26>
 80060bc:	d902      	bls.n	80060c4 <_free_r+0x78>
 80060be:	230c      	movs	r3, #12
 80060c0:	6003      	str	r3, [r0, #0]
 80060c2:	e7d6      	b.n	8006072 <_free_r+0x26>
 80060c4:	6825      	ldr	r5, [r4, #0]
 80060c6:	1961      	adds	r1, r4, r5
 80060c8:	428b      	cmp	r3, r1
 80060ca:	bf04      	itt	eq
 80060cc:	6819      	ldreq	r1, [r3, #0]
 80060ce:	685b      	ldreq	r3, [r3, #4]
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	bf04      	itt	eq
 80060d4:	1949      	addeq	r1, r1, r5
 80060d6:	6021      	streq	r1, [r4, #0]
 80060d8:	6054      	str	r4, [r2, #4]
 80060da:	e7ca      	b.n	8006072 <_free_r+0x26>
 80060dc:	b003      	add	sp, #12
 80060de:	bd30      	pop	{r4, r5, pc}
 80060e0:	200012ec 	.word	0x200012ec

080060e4 <sbrk_aligned>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4e0e      	ldr	r6, [pc, #56]	; (8006120 <sbrk_aligned+0x3c>)
 80060e8:	460c      	mov	r4, r1
 80060ea:	6831      	ldr	r1, [r6, #0]
 80060ec:	4605      	mov	r5, r0
 80060ee:	b911      	cbnz	r1, 80060f6 <sbrk_aligned+0x12>
 80060f0:	f000 f96e 	bl	80063d0 <_sbrk_r>
 80060f4:	6030      	str	r0, [r6, #0]
 80060f6:	4621      	mov	r1, r4
 80060f8:	4628      	mov	r0, r5
 80060fa:	f000 f969 	bl	80063d0 <_sbrk_r>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	d00a      	beq.n	8006118 <sbrk_aligned+0x34>
 8006102:	1cc4      	adds	r4, r0, #3
 8006104:	f024 0403 	bic.w	r4, r4, #3
 8006108:	42a0      	cmp	r0, r4
 800610a:	d007      	beq.n	800611c <sbrk_aligned+0x38>
 800610c:	1a21      	subs	r1, r4, r0
 800610e:	4628      	mov	r0, r5
 8006110:	f000 f95e 	bl	80063d0 <_sbrk_r>
 8006114:	3001      	adds	r0, #1
 8006116:	d101      	bne.n	800611c <sbrk_aligned+0x38>
 8006118:	f04f 34ff 	mov.w	r4, #4294967295
 800611c:	4620      	mov	r0, r4
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	200012f0 	.word	0x200012f0

08006124 <_malloc_r>:
 8006124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006128:	1ccd      	adds	r5, r1, #3
 800612a:	f025 0503 	bic.w	r5, r5, #3
 800612e:	3508      	adds	r5, #8
 8006130:	2d0c      	cmp	r5, #12
 8006132:	bf38      	it	cc
 8006134:	250c      	movcc	r5, #12
 8006136:	2d00      	cmp	r5, #0
 8006138:	4607      	mov	r7, r0
 800613a:	db01      	blt.n	8006140 <_malloc_r+0x1c>
 800613c:	42a9      	cmp	r1, r5
 800613e:	d905      	bls.n	800614c <_malloc_r+0x28>
 8006140:	230c      	movs	r3, #12
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	2600      	movs	r6, #0
 8006146:	4630      	mov	r0, r6
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	4e2e      	ldr	r6, [pc, #184]	; (8006208 <_malloc_r+0xe4>)
 800614e:	f000 fc7f 	bl	8006a50 <__malloc_lock>
 8006152:	6833      	ldr	r3, [r6, #0]
 8006154:	461c      	mov	r4, r3
 8006156:	bb34      	cbnz	r4, 80061a6 <_malloc_r+0x82>
 8006158:	4629      	mov	r1, r5
 800615a:	4638      	mov	r0, r7
 800615c:	f7ff ffc2 	bl	80060e4 <sbrk_aligned>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	4604      	mov	r4, r0
 8006164:	d14d      	bne.n	8006202 <_malloc_r+0xde>
 8006166:	6834      	ldr	r4, [r6, #0]
 8006168:	4626      	mov	r6, r4
 800616a:	2e00      	cmp	r6, #0
 800616c:	d140      	bne.n	80061f0 <_malloc_r+0xcc>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	4631      	mov	r1, r6
 8006172:	4638      	mov	r0, r7
 8006174:	eb04 0803 	add.w	r8, r4, r3
 8006178:	f000 f92a 	bl	80063d0 <_sbrk_r>
 800617c:	4580      	cmp	r8, r0
 800617e:	d13a      	bne.n	80061f6 <_malloc_r+0xd2>
 8006180:	6821      	ldr	r1, [r4, #0]
 8006182:	3503      	adds	r5, #3
 8006184:	1a6d      	subs	r5, r5, r1
 8006186:	f025 0503 	bic.w	r5, r5, #3
 800618a:	3508      	adds	r5, #8
 800618c:	2d0c      	cmp	r5, #12
 800618e:	bf38      	it	cc
 8006190:	250c      	movcc	r5, #12
 8006192:	4629      	mov	r1, r5
 8006194:	4638      	mov	r0, r7
 8006196:	f7ff ffa5 	bl	80060e4 <sbrk_aligned>
 800619a:	3001      	adds	r0, #1
 800619c:	d02b      	beq.n	80061f6 <_malloc_r+0xd2>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	442b      	add	r3, r5
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	e00e      	b.n	80061c4 <_malloc_r+0xa0>
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	1b52      	subs	r2, r2, r5
 80061aa:	d41e      	bmi.n	80061ea <_malloc_r+0xc6>
 80061ac:	2a0b      	cmp	r2, #11
 80061ae:	d916      	bls.n	80061de <_malloc_r+0xba>
 80061b0:	1961      	adds	r1, r4, r5
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	6025      	str	r5, [r4, #0]
 80061b6:	bf18      	it	ne
 80061b8:	6059      	strne	r1, [r3, #4]
 80061ba:	6863      	ldr	r3, [r4, #4]
 80061bc:	bf08      	it	eq
 80061be:	6031      	streq	r1, [r6, #0]
 80061c0:	5162      	str	r2, [r4, r5]
 80061c2:	604b      	str	r3, [r1, #4]
 80061c4:	4638      	mov	r0, r7
 80061c6:	f104 060b 	add.w	r6, r4, #11
 80061ca:	f000 fc47 	bl	8006a5c <__malloc_unlock>
 80061ce:	f026 0607 	bic.w	r6, r6, #7
 80061d2:	1d23      	adds	r3, r4, #4
 80061d4:	1af2      	subs	r2, r6, r3
 80061d6:	d0b6      	beq.n	8006146 <_malloc_r+0x22>
 80061d8:	1b9b      	subs	r3, r3, r6
 80061da:	50a3      	str	r3, [r4, r2]
 80061dc:	e7b3      	b.n	8006146 <_malloc_r+0x22>
 80061de:	6862      	ldr	r2, [r4, #4]
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	bf0c      	ite	eq
 80061e4:	6032      	streq	r2, [r6, #0]
 80061e6:	605a      	strne	r2, [r3, #4]
 80061e8:	e7ec      	b.n	80061c4 <_malloc_r+0xa0>
 80061ea:	4623      	mov	r3, r4
 80061ec:	6864      	ldr	r4, [r4, #4]
 80061ee:	e7b2      	b.n	8006156 <_malloc_r+0x32>
 80061f0:	4634      	mov	r4, r6
 80061f2:	6876      	ldr	r6, [r6, #4]
 80061f4:	e7b9      	b.n	800616a <_malloc_r+0x46>
 80061f6:	230c      	movs	r3, #12
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	4638      	mov	r0, r7
 80061fc:	f000 fc2e 	bl	8006a5c <__malloc_unlock>
 8006200:	e7a1      	b.n	8006146 <_malloc_r+0x22>
 8006202:	6025      	str	r5, [r4, #0]
 8006204:	e7de      	b.n	80061c4 <_malloc_r+0xa0>
 8006206:	bf00      	nop
 8006208:	200012ec 	.word	0x200012ec

0800620c <iprintf>:
 800620c:	b40f      	push	{r0, r1, r2, r3}
 800620e:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <iprintf+0x2c>)
 8006210:	b513      	push	{r0, r1, r4, lr}
 8006212:	681c      	ldr	r4, [r3, #0]
 8006214:	b124      	cbz	r4, 8006220 <iprintf+0x14>
 8006216:	69a3      	ldr	r3, [r4, #24]
 8006218:	b913      	cbnz	r3, 8006220 <iprintf+0x14>
 800621a:	4620      	mov	r0, r4
 800621c:	f000 fb00 	bl	8006820 <__sinit>
 8006220:	ab05      	add	r3, sp, #20
 8006222:	9a04      	ldr	r2, [sp, #16]
 8006224:	68a1      	ldr	r1, [r4, #8]
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	4620      	mov	r0, r4
 800622a:	f000 fda3 	bl	8006d74 <_vfiprintf_r>
 800622e:	b002      	add	sp, #8
 8006230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006234:	b004      	add	sp, #16
 8006236:	4770      	bx	lr
 8006238:	20000070 	.word	0x20000070

0800623c <putchar>:
 800623c:	4b09      	ldr	r3, [pc, #36]	; (8006264 <putchar+0x28>)
 800623e:	b513      	push	{r0, r1, r4, lr}
 8006240:	681c      	ldr	r4, [r3, #0]
 8006242:	4601      	mov	r1, r0
 8006244:	b134      	cbz	r4, 8006254 <putchar+0x18>
 8006246:	69a3      	ldr	r3, [r4, #24]
 8006248:	b923      	cbnz	r3, 8006254 <putchar+0x18>
 800624a:	9001      	str	r0, [sp, #4]
 800624c:	4620      	mov	r0, r4
 800624e:	f000 fae7 	bl	8006820 <__sinit>
 8006252:	9901      	ldr	r1, [sp, #4]
 8006254:	68a2      	ldr	r2, [r4, #8]
 8006256:	4620      	mov	r0, r4
 8006258:	b002      	add	sp, #8
 800625a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800625e:	f001 b84d 	b.w	80072fc <_putc_r>
 8006262:	bf00      	nop
 8006264:	20000070 	.word	0x20000070

08006268 <_puts_r>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	460e      	mov	r6, r1
 800626c:	4605      	mov	r5, r0
 800626e:	b118      	cbz	r0, 8006278 <_puts_r+0x10>
 8006270:	6983      	ldr	r3, [r0, #24]
 8006272:	b90b      	cbnz	r3, 8006278 <_puts_r+0x10>
 8006274:	f000 fad4 	bl	8006820 <__sinit>
 8006278:	69ab      	ldr	r3, [r5, #24]
 800627a:	68ac      	ldr	r4, [r5, #8]
 800627c:	b913      	cbnz	r3, 8006284 <_puts_r+0x1c>
 800627e:	4628      	mov	r0, r5
 8006280:	f000 face 	bl	8006820 <__sinit>
 8006284:	4b2c      	ldr	r3, [pc, #176]	; (8006338 <_puts_r+0xd0>)
 8006286:	429c      	cmp	r4, r3
 8006288:	d120      	bne.n	80062cc <_puts_r+0x64>
 800628a:	686c      	ldr	r4, [r5, #4]
 800628c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800628e:	07db      	lsls	r3, r3, #31
 8006290:	d405      	bmi.n	800629e <_puts_r+0x36>
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	0598      	lsls	r0, r3, #22
 8006296:	d402      	bmi.n	800629e <_puts_r+0x36>
 8006298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800629a:	f000 fb71 	bl	8006980 <__retarget_lock_acquire_recursive>
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	0719      	lsls	r1, r3, #28
 80062a2:	d51d      	bpl.n	80062e0 <_puts_r+0x78>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	b1db      	cbz	r3, 80062e0 <_puts_r+0x78>
 80062a8:	3e01      	subs	r6, #1
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062b0:	3b01      	subs	r3, #1
 80062b2:	60a3      	str	r3, [r4, #8]
 80062b4:	bb39      	cbnz	r1, 8006306 <_puts_r+0x9e>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	da38      	bge.n	800632c <_puts_r+0xc4>
 80062ba:	4622      	mov	r2, r4
 80062bc:	210a      	movs	r1, #10
 80062be:	4628      	mov	r0, r5
 80062c0:	f000 f8b6 	bl	8006430 <__swbuf_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d011      	beq.n	80062ec <_puts_r+0x84>
 80062c8:	250a      	movs	r5, #10
 80062ca:	e011      	b.n	80062f0 <_puts_r+0x88>
 80062cc:	4b1b      	ldr	r3, [pc, #108]	; (800633c <_puts_r+0xd4>)
 80062ce:	429c      	cmp	r4, r3
 80062d0:	d101      	bne.n	80062d6 <_puts_r+0x6e>
 80062d2:	68ac      	ldr	r4, [r5, #8]
 80062d4:	e7da      	b.n	800628c <_puts_r+0x24>
 80062d6:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <_puts_r+0xd8>)
 80062d8:	429c      	cmp	r4, r3
 80062da:	bf08      	it	eq
 80062dc:	68ec      	ldreq	r4, [r5, #12]
 80062de:	e7d5      	b.n	800628c <_puts_r+0x24>
 80062e0:	4621      	mov	r1, r4
 80062e2:	4628      	mov	r0, r5
 80062e4:	f000 f8f6 	bl	80064d4 <__swsetup_r>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	d0dd      	beq.n	80062a8 <_puts_r+0x40>
 80062ec:	f04f 35ff 	mov.w	r5, #4294967295
 80062f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062f2:	07da      	lsls	r2, r3, #31
 80062f4:	d405      	bmi.n	8006302 <_puts_r+0x9a>
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	059b      	lsls	r3, r3, #22
 80062fa:	d402      	bmi.n	8006302 <_puts_r+0x9a>
 80062fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062fe:	f000 fb40 	bl	8006982 <__retarget_lock_release_recursive>
 8006302:	4628      	mov	r0, r5
 8006304:	bd70      	pop	{r4, r5, r6, pc}
 8006306:	2b00      	cmp	r3, #0
 8006308:	da04      	bge.n	8006314 <_puts_r+0xac>
 800630a:	69a2      	ldr	r2, [r4, #24]
 800630c:	429a      	cmp	r2, r3
 800630e:	dc06      	bgt.n	800631e <_puts_r+0xb6>
 8006310:	290a      	cmp	r1, #10
 8006312:	d004      	beq.n	800631e <_puts_r+0xb6>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	6022      	str	r2, [r4, #0]
 800631a:	7019      	strb	r1, [r3, #0]
 800631c:	e7c5      	b.n	80062aa <_puts_r+0x42>
 800631e:	4622      	mov	r2, r4
 8006320:	4628      	mov	r0, r5
 8006322:	f000 f885 	bl	8006430 <__swbuf_r>
 8006326:	3001      	adds	r0, #1
 8006328:	d1bf      	bne.n	80062aa <_puts_r+0x42>
 800632a:	e7df      	b.n	80062ec <_puts_r+0x84>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	250a      	movs	r5, #10
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	6022      	str	r2, [r4, #0]
 8006334:	701d      	strb	r5, [r3, #0]
 8006336:	e7db      	b.n	80062f0 <_puts_r+0x88>
 8006338:	08007a44 	.word	0x08007a44
 800633c:	08007a64 	.word	0x08007a64
 8006340:	08007a24 	.word	0x08007a24

08006344 <puts>:
 8006344:	4b02      	ldr	r3, [pc, #8]	; (8006350 <puts+0xc>)
 8006346:	4601      	mov	r1, r0
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	f7ff bf8d 	b.w	8006268 <_puts_r>
 800634e:	bf00      	nop
 8006350:	20000070 	.word	0x20000070

08006354 <rand>:
 8006354:	4b16      	ldr	r3, [pc, #88]	; (80063b0 <rand+0x5c>)
 8006356:	b510      	push	{r4, lr}
 8006358:	681c      	ldr	r4, [r3, #0]
 800635a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800635c:	b9b3      	cbnz	r3, 800638c <rand+0x38>
 800635e:	2018      	movs	r0, #24
 8006360:	f7ff fe3c 	bl	8005fdc <malloc>
 8006364:	63a0      	str	r0, [r4, #56]	; 0x38
 8006366:	b928      	cbnz	r0, 8006374 <rand+0x20>
 8006368:	4602      	mov	r2, r0
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <rand+0x60>)
 800636c:	4812      	ldr	r0, [pc, #72]	; (80063b8 <rand+0x64>)
 800636e:	214e      	movs	r1, #78	; 0x4e
 8006370:	f000 f91e 	bl	80065b0 <__assert_func>
 8006374:	4a11      	ldr	r2, [pc, #68]	; (80063bc <rand+0x68>)
 8006376:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <rand+0x6c>)
 8006378:	e9c0 2300 	strd	r2, r3, [r0]
 800637c:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <rand+0x70>)
 800637e:	6083      	str	r3, [r0, #8]
 8006380:	230b      	movs	r3, #11
 8006382:	8183      	strh	r3, [r0, #12]
 8006384:	2201      	movs	r2, #1
 8006386:	2300      	movs	r3, #0
 8006388:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800638c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800638e:	4a0e      	ldr	r2, [pc, #56]	; (80063c8 <rand+0x74>)
 8006390:	6920      	ldr	r0, [r4, #16]
 8006392:	6963      	ldr	r3, [r4, #20]
 8006394:	490d      	ldr	r1, [pc, #52]	; (80063cc <rand+0x78>)
 8006396:	4342      	muls	r2, r0
 8006398:	fb01 2203 	mla	r2, r1, r3, r2
 800639c:	fba0 0101 	umull	r0, r1, r0, r1
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	eb42 0001 	adc.w	r0, r2, r1
 80063a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80063aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	20000070 	.word	0x20000070
 80063b4:	08007974 	.word	0x08007974
 80063b8:	0800798b 	.word	0x0800798b
 80063bc:	abcd330e 	.word	0xabcd330e
 80063c0:	e66d1234 	.word	0xe66d1234
 80063c4:	0005deec 	.word	0x0005deec
 80063c8:	5851f42d 	.word	0x5851f42d
 80063cc:	4c957f2d 	.word	0x4c957f2d

080063d0 <_sbrk_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d06      	ldr	r5, [pc, #24]	; (80063ec <_sbrk_r+0x1c>)
 80063d4:	2300      	movs	r3, #0
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f7fb f9f0 	bl	80017c0 <_sbrk>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_sbrk_r+0x1a>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_sbrk_r+0x1a>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	200012f8 	.word	0x200012f8

080063f0 <siprintf>:
 80063f0:	b40e      	push	{r1, r2, r3}
 80063f2:	b500      	push	{lr}
 80063f4:	b09c      	sub	sp, #112	; 0x70
 80063f6:	ab1d      	add	r3, sp, #116	; 0x74
 80063f8:	9002      	str	r0, [sp, #8]
 80063fa:	9006      	str	r0, [sp, #24]
 80063fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006400:	4809      	ldr	r0, [pc, #36]	; (8006428 <siprintf+0x38>)
 8006402:	9107      	str	r1, [sp, #28]
 8006404:	9104      	str	r1, [sp, #16]
 8006406:	4909      	ldr	r1, [pc, #36]	; (800642c <siprintf+0x3c>)
 8006408:	f853 2b04 	ldr.w	r2, [r3], #4
 800640c:	9105      	str	r1, [sp, #20]
 800640e:	6800      	ldr	r0, [r0, #0]
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	a902      	add	r1, sp, #8
 8006414:	f000 fb84 	bl	8006b20 <_svfiprintf_r>
 8006418:	9b02      	ldr	r3, [sp, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	b01c      	add	sp, #112	; 0x70
 8006420:	f85d eb04 	ldr.w	lr, [sp], #4
 8006424:	b003      	add	sp, #12
 8006426:	4770      	bx	lr
 8006428:	20000070 	.word	0x20000070
 800642c:	ffff0208 	.word	0xffff0208

08006430 <__swbuf_r>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	460e      	mov	r6, r1
 8006434:	4614      	mov	r4, r2
 8006436:	4605      	mov	r5, r0
 8006438:	b118      	cbz	r0, 8006442 <__swbuf_r+0x12>
 800643a:	6983      	ldr	r3, [r0, #24]
 800643c:	b90b      	cbnz	r3, 8006442 <__swbuf_r+0x12>
 800643e:	f000 f9ef 	bl	8006820 <__sinit>
 8006442:	4b21      	ldr	r3, [pc, #132]	; (80064c8 <__swbuf_r+0x98>)
 8006444:	429c      	cmp	r4, r3
 8006446:	d12b      	bne.n	80064a0 <__swbuf_r+0x70>
 8006448:	686c      	ldr	r4, [r5, #4]
 800644a:	69a3      	ldr	r3, [r4, #24]
 800644c:	60a3      	str	r3, [r4, #8]
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	071a      	lsls	r2, r3, #28
 8006452:	d52f      	bpl.n	80064b4 <__swbuf_r+0x84>
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	b36b      	cbz	r3, 80064b4 <__swbuf_r+0x84>
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	1ac0      	subs	r0, r0, r3
 800645e:	6963      	ldr	r3, [r4, #20]
 8006460:	b2f6      	uxtb	r6, r6
 8006462:	4283      	cmp	r3, r0
 8006464:	4637      	mov	r7, r6
 8006466:	dc04      	bgt.n	8006472 <__swbuf_r+0x42>
 8006468:	4621      	mov	r1, r4
 800646a:	4628      	mov	r0, r5
 800646c:	f000 f944 	bl	80066f8 <_fflush_r>
 8006470:	bb30      	cbnz	r0, 80064c0 <__swbuf_r+0x90>
 8006472:	68a3      	ldr	r3, [r4, #8]
 8006474:	3b01      	subs	r3, #1
 8006476:	60a3      	str	r3, [r4, #8]
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	6022      	str	r2, [r4, #0]
 800647e:	701e      	strb	r6, [r3, #0]
 8006480:	6963      	ldr	r3, [r4, #20]
 8006482:	3001      	adds	r0, #1
 8006484:	4283      	cmp	r3, r0
 8006486:	d004      	beq.n	8006492 <__swbuf_r+0x62>
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	07db      	lsls	r3, r3, #31
 800648c:	d506      	bpl.n	800649c <__swbuf_r+0x6c>
 800648e:	2e0a      	cmp	r6, #10
 8006490:	d104      	bne.n	800649c <__swbuf_r+0x6c>
 8006492:	4621      	mov	r1, r4
 8006494:	4628      	mov	r0, r5
 8006496:	f000 f92f 	bl	80066f8 <_fflush_r>
 800649a:	b988      	cbnz	r0, 80064c0 <__swbuf_r+0x90>
 800649c:	4638      	mov	r0, r7
 800649e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a0:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <__swbuf_r+0x9c>)
 80064a2:	429c      	cmp	r4, r3
 80064a4:	d101      	bne.n	80064aa <__swbuf_r+0x7a>
 80064a6:	68ac      	ldr	r4, [r5, #8]
 80064a8:	e7cf      	b.n	800644a <__swbuf_r+0x1a>
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <__swbuf_r+0xa0>)
 80064ac:	429c      	cmp	r4, r3
 80064ae:	bf08      	it	eq
 80064b0:	68ec      	ldreq	r4, [r5, #12]
 80064b2:	e7ca      	b.n	800644a <__swbuf_r+0x1a>
 80064b4:	4621      	mov	r1, r4
 80064b6:	4628      	mov	r0, r5
 80064b8:	f000 f80c 	bl	80064d4 <__swsetup_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d0cb      	beq.n	8006458 <__swbuf_r+0x28>
 80064c0:	f04f 37ff 	mov.w	r7, #4294967295
 80064c4:	e7ea      	b.n	800649c <__swbuf_r+0x6c>
 80064c6:	bf00      	nop
 80064c8:	08007a44 	.word	0x08007a44
 80064cc:	08007a64 	.word	0x08007a64
 80064d0:	08007a24 	.word	0x08007a24

080064d4 <__swsetup_r>:
 80064d4:	4b32      	ldr	r3, [pc, #200]	; (80065a0 <__swsetup_r+0xcc>)
 80064d6:	b570      	push	{r4, r5, r6, lr}
 80064d8:	681d      	ldr	r5, [r3, #0]
 80064da:	4606      	mov	r6, r0
 80064dc:	460c      	mov	r4, r1
 80064de:	b125      	cbz	r5, 80064ea <__swsetup_r+0x16>
 80064e0:	69ab      	ldr	r3, [r5, #24]
 80064e2:	b913      	cbnz	r3, 80064ea <__swsetup_r+0x16>
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 f99b 	bl	8006820 <__sinit>
 80064ea:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <__swsetup_r+0xd0>)
 80064ec:	429c      	cmp	r4, r3
 80064ee:	d10f      	bne.n	8006510 <__swsetup_r+0x3c>
 80064f0:	686c      	ldr	r4, [r5, #4]
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064f8:	0719      	lsls	r1, r3, #28
 80064fa:	d42c      	bmi.n	8006556 <__swsetup_r+0x82>
 80064fc:	06dd      	lsls	r5, r3, #27
 80064fe:	d411      	bmi.n	8006524 <__swsetup_r+0x50>
 8006500:	2309      	movs	r3, #9
 8006502:	6033      	str	r3, [r6, #0]
 8006504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	f04f 30ff 	mov.w	r0, #4294967295
 800650e:	e03e      	b.n	800658e <__swsetup_r+0xba>
 8006510:	4b25      	ldr	r3, [pc, #148]	; (80065a8 <__swsetup_r+0xd4>)
 8006512:	429c      	cmp	r4, r3
 8006514:	d101      	bne.n	800651a <__swsetup_r+0x46>
 8006516:	68ac      	ldr	r4, [r5, #8]
 8006518:	e7eb      	b.n	80064f2 <__swsetup_r+0x1e>
 800651a:	4b24      	ldr	r3, [pc, #144]	; (80065ac <__swsetup_r+0xd8>)
 800651c:	429c      	cmp	r4, r3
 800651e:	bf08      	it	eq
 8006520:	68ec      	ldreq	r4, [r5, #12]
 8006522:	e7e6      	b.n	80064f2 <__swsetup_r+0x1e>
 8006524:	0758      	lsls	r0, r3, #29
 8006526:	d512      	bpl.n	800654e <__swsetup_r+0x7a>
 8006528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652a:	b141      	cbz	r1, 800653e <__swsetup_r+0x6a>
 800652c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006530:	4299      	cmp	r1, r3
 8006532:	d002      	beq.n	800653a <__swsetup_r+0x66>
 8006534:	4630      	mov	r0, r6
 8006536:	f7ff fd89 	bl	800604c <_free_r>
 800653a:	2300      	movs	r3, #0
 800653c:	6363      	str	r3, [r4, #52]	; 0x34
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	2300      	movs	r3, #0
 8006548:	6063      	str	r3, [r4, #4]
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	f043 0308 	orr.w	r3, r3, #8
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	b94b      	cbnz	r3, 800656e <__swsetup_r+0x9a>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006564:	d003      	beq.n	800656e <__swsetup_r+0x9a>
 8006566:	4621      	mov	r1, r4
 8006568:	4630      	mov	r0, r6
 800656a:	f000 fa31 	bl	80069d0 <__smakebuf_r>
 800656e:	89a0      	ldrh	r0, [r4, #12]
 8006570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006574:	f010 0301 	ands.w	r3, r0, #1
 8006578:	d00a      	beq.n	8006590 <__swsetup_r+0xbc>
 800657a:	2300      	movs	r3, #0
 800657c:	60a3      	str	r3, [r4, #8]
 800657e:	6963      	ldr	r3, [r4, #20]
 8006580:	425b      	negs	r3, r3
 8006582:	61a3      	str	r3, [r4, #24]
 8006584:	6923      	ldr	r3, [r4, #16]
 8006586:	b943      	cbnz	r3, 800659a <__swsetup_r+0xc6>
 8006588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800658c:	d1ba      	bne.n	8006504 <__swsetup_r+0x30>
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	0781      	lsls	r1, r0, #30
 8006592:	bf58      	it	pl
 8006594:	6963      	ldrpl	r3, [r4, #20]
 8006596:	60a3      	str	r3, [r4, #8]
 8006598:	e7f4      	b.n	8006584 <__swsetup_r+0xb0>
 800659a:	2000      	movs	r0, #0
 800659c:	e7f7      	b.n	800658e <__swsetup_r+0xba>
 800659e:	bf00      	nop
 80065a0:	20000070 	.word	0x20000070
 80065a4:	08007a44 	.word	0x08007a44
 80065a8:	08007a64 	.word	0x08007a64
 80065ac:	08007a24 	.word	0x08007a24

080065b0 <__assert_func>:
 80065b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065b2:	4614      	mov	r4, r2
 80065b4:	461a      	mov	r2, r3
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <__assert_func+0x2c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4605      	mov	r5, r0
 80065bc:	68d8      	ldr	r0, [r3, #12]
 80065be:	b14c      	cbz	r4, 80065d4 <__assert_func+0x24>
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <__assert_func+0x30>)
 80065c2:	9100      	str	r1, [sp, #0]
 80065c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065c8:	4906      	ldr	r1, [pc, #24]	; (80065e4 <__assert_func+0x34>)
 80065ca:	462b      	mov	r3, r5
 80065cc:	f000 f9a6 	bl	800691c <fiprintf>
 80065d0:	f000 ff32 	bl	8007438 <abort>
 80065d4:	4b04      	ldr	r3, [pc, #16]	; (80065e8 <__assert_func+0x38>)
 80065d6:	461c      	mov	r4, r3
 80065d8:	e7f3      	b.n	80065c2 <__assert_func+0x12>
 80065da:	bf00      	nop
 80065dc:	20000070 	.word	0x20000070
 80065e0:	080079e6 	.word	0x080079e6
 80065e4:	080079f3 	.word	0x080079f3
 80065e8:	08007a21 	.word	0x08007a21

080065ec <__sflush_r>:
 80065ec:	898a      	ldrh	r2, [r1, #12]
 80065ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f2:	4605      	mov	r5, r0
 80065f4:	0710      	lsls	r0, r2, #28
 80065f6:	460c      	mov	r4, r1
 80065f8:	d458      	bmi.n	80066ac <__sflush_r+0xc0>
 80065fa:	684b      	ldr	r3, [r1, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	dc05      	bgt.n	800660c <__sflush_r+0x20>
 8006600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	dc02      	bgt.n	800660c <__sflush_r+0x20>
 8006606:	2000      	movs	r0, #0
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800660e:	2e00      	cmp	r6, #0
 8006610:	d0f9      	beq.n	8006606 <__sflush_r+0x1a>
 8006612:	2300      	movs	r3, #0
 8006614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006618:	682f      	ldr	r7, [r5, #0]
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	d032      	beq.n	8006684 <__sflush_r+0x98>
 800661e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	075a      	lsls	r2, r3, #29
 8006624:	d505      	bpl.n	8006632 <__sflush_r+0x46>
 8006626:	6863      	ldr	r3, [r4, #4]
 8006628:	1ac0      	subs	r0, r0, r3
 800662a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800662c:	b10b      	cbz	r3, 8006632 <__sflush_r+0x46>
 800662e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006630:	1ac0      	subs	r0, r0, r3
 8006632:	2300      	movs	r3, #0
 8006634:	4602      	mov	r2, r0
 8006636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006638:	6a21      	ldr	r1, [r4, #32]
 800663a:	4628      	mov	r0, r5
 800663c:	47b0      	blx	r6
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	d106      	bne.n	8006652 <__sflush_r+0x66>
 8006644:	6829      	ldr	r1, [r5, #0]
 8006646:	291d      	cmp	r1, #29
 8006648:	d82c      	bhi.n	80066a4 <__sflush_r+0xb8>
 800664a:	4a2a      	ldr	r2, [pc, #168]	; (80066f4 <__sflush_r+0x108>)
 800664c:	40ca      	lsrs	r2, r1
 800664e:	07d6      	lsls	r6, r2, #31
 8006650:	d528      	bpl.n	80066a4 <__sflush_r+0xb8>
 8006652:	2200      	movs	r2, #0
 8006654:	6062      	str	r2, [r4, #4]
 8006656:	04d9      	lsls	r1, r3, #19
 8006658:	6922      	ldr	r2, [r4, #16]
 800665a:	6022      	str	r2, [r4, #0]
 800665c:	d504      	bpl.n	8006668 <__sflush_r+0x7c>
 800665e:	1c42      	adds	r2, r0, #1
 8006660:	d101      	bne.n	8006666 <__sflush_r+0x7a>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	b903      	cbnz	r3, 8006668 <__sflush_r+0x7c>
 8006666:	6560      	str	r0, [r4, #84]	; 0x54
 8006668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800666a:	602f      	str	r7, [r5, #0]
 800666c:	2900      	cmp	r1, #0
 800666e:	d0ca      	beq.n	8006606 <__sflush_r+0x1a>
 8006670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006674:	4299      	cmp	r1, r3
 8006676:	d002      	beq.n	800667e <__sflush_r+0x92>
 8006678:	4628      	mov	r0, r5
 800667a:	f7ff fce7 	bl	800604c <_free_r>
 800667e:	2000      	movs	r0, #0
 8006680:	6360      	str	r0, [r4, #52]	; 0x34
 8006682:	e7c1      	b.n	8006608 <__sflush_r+0x1c>
 8006684:	6a21      	ldr	r1, [r4, #32]
 8006686:	2301      	movs	r3, #1
 8006688:	4628      	mov	r0, r5
 800668a:	47b0      	blx	r6
 800668c:	1c41      	adds	r1, r0, #1
 800668e:	d1c7      	bne.n	8006620 <__sflush_r+0x34>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0c4      	beq.n	8006620 <__sflush_r+0x34>
 8006696:	2b1d      	cmp	r3, #29
 8006698:	d001      	beq.n	800669e <__sflush_r+0xb2>
 800669a:	2b16      	cmp	r3, #22
 800669c:	d101      	bne.n	80066a2 <__sflush_r+0xb6>
 800669e:	602f      	str	r7, [r5, #0]
 80066a0:	e7b1      	b.n	8006606 <__sflush_r+0x1a>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a8:	81a3      	strh	r3, [r4, #12]
 80066aa:	e7ad      	b.n	8006608 <__sflush_r+0x1c>
 80066ac:	690f      	ldr	r7, [r1, #16]
 80066ae:	2f00      	cmp	r7, #0
 80066b0:	d0a9      	beq.n	8006606 <__sflush_r+0x1a>
 80066b2:	0793      	lsls	r3, r2, #30
 80066b4:	680e      	ldr	r6, [r1, #0]
 80066b6:	bf08      	it	eq
 80066b8:	694b      	ldreq	r3, [r1, #20]
 80066ba:	600f      	str	r7, [r1, #0]
 80066bc:	bf18      	it	ne
 80066be:	2300      	movne	r3, #0
 80066c0:	eba6 0807 	sub.w	r8, r6, r7
 80066c4:	608b      	str	r3, [r1, #8]
 80066c6:	f1b8 0f00 	cmp.w	r8, #0
 80066ca:	dd9c      	ble.n	8006606 <__sflush_r+0x1a>
 80066cc:	6a21      	ldr	r1, [r4, #32]
 80066ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066d0:	4643      	mov	r3, r8
 80066d2:	463a      	mov	r2, r7
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b0      	blx	r6
 80066d8:	2800      	cmp	r0, #0
 80066da:	dc06      	bgt.n	80066ea <__sflush_r+0xfe>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e2:	81a3      	strh	r3, [r4, #12]
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	e78e      	b.n	8006608 <__sflush_r+0x1c>
 80066ea:	4407      	add	r7, r0
 80066ec:	eba8 0800 	sub.w	r8, r8, r0
 80066f0:	e7e9      	b.n	80066c6 <__sflush_r+0xda>
 80066f2:	bf00      	nop
 80066f4:	20400001 	.word	0x20400001

080066f8 <_fflush_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	690b      	ldr	r3, [r1, #16]
 80066fc:	4605      	mov	r5, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	b913      	cbnz	r3, 8006708 <_fflush_r+0x10>
 8006702:	2500      	movs	r5, #0
 8006704:	4628      	mov	r0, r5
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	b118      	cbz	r0, 8006712 <_fflush_r+0x1a>
 800670a:	6983      	ldr	r3, [r0, #24]
 800670c:	b90b      	cbnz	r3, 8006712 <_fflush_r+0x1a>
 800670e:	f000 f887 	bl	8006820 <__sinit>
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <_fflush_r+0x6c>)
 8006714:	429c      	cmp	r4, r3
 8006716:	d11b      	bne.n	8006750 <_fflush_r+0x58>
 8006718:	686c      	ldr	r4, [r5, #4]
 800671a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0ef      	beq.n	8006702 <_fflush_r+0xa>
 8006722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006724:	07d0      	lsls	r0, r2, #31
 8006726:	d404      	bmi.n	8006732 <_fflush_r+0x3a>
 8006728:	0599      	lsls	r1, r3, #22
 800672a:	d402      	bmi.n	8006732 <_fflush_r+0x3a>
 800672c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800672e:	f000 f927 	bl	8006980 <__retarget_lock_acquire_recursive>
 8006732:	4628      	mov	r0, r5
 8006734:	4621      	mov	r1, r4
 8006736:	f7ff ff59 	bl	80065ec <__sflush_r>
 800673a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800673c:	07da      	lsls	r2, r3, #31
 800673e:	4605      	mov	r5, r0
 8006740:	d4e0      	bmi.n	8006704 <_fflush_r+0xc>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	059b      	lsls	r3, r3, #22
 8006746:	d4dd      	bmi.n	8006704 <_fflush_r+0xc>
 8006748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800674a:	f000 f91a 	bl	8006982 <__retarget_lock_release_recursive>
 800674e:	e7d9      	b.n	8006704 <_fflush_r+0xc>
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <_fflush_r+0x70>)
 8006752:	429c      	cmp	r4, r3
 8006754:	d101      	bne.n	800675a <_fflush_r+0x62>
 8006756:	68ac      	ldr	r4, [r5, #8]
 8006758:	e7df      	b.n	800671a <_fflush_r+0x22>
 800675a:	4b04      	ldr	r3, [pc, #16]	; (800676c <_fflush_r+0x74>)
 800675c:	429c      	cmp	r4, r3
 800675e:	bf08      	it	eq
 8006760:	68ec      	ldreq	r4, [r5, #12]
 8006762:	e7da      	b.n	800671a <_fflush_r+0x22>
 8006764:	08007a44 	.word	0x08007a44
 8006768:	08007a64 	.word	0x08007a64
 800676c:	08007a24 	.word	0x08007a24

08006770 <std>:
 8006770:	2300      	movs	r3, #0
 8006772:	b510      	push	{r4, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	e9c0 3300 	strd	r3, r3, [r0]
 800677a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800677e:	6083      	str	r3, [r0, #8]
 8006780:	8181      	strh	r1, [r0, #12]
 8006782:	6643      	str	r3, [r0, #100]	; 0x64
 8006784:	81c2      	strh	r2, [r0, #14]
 8006786:	6183      	str	r3, [r0, #24]
 8006788:	4619      	mov	r1, r3
 800678a:	2208      	movs	r2, #8
 800678c:	305c      	adds	r0, #92	; 0x5c
 800678e:	f7ff fc55 	bl	800603c <memset>
 8006792:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <std+0x38>)
 8006794:	6263      	str	r3, [r4, #36]	; 0x24
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <std+0x3c>)
 8006798:	62a3      	str	r3, [r4, #40]	; 0x28
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <std+0x40>)
 800679c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <std+0x44>)
 80067a0:	6224      	str	r4, [r4, #32]
 80067a2:	6323      	str	r3, [r4, #48]	; 0x30
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	bf00      	nop
 80067a8:	0800738d 	.word	0x0800738d
 80067ac:	080073af 	.word	0x080073af
 80067b0:	080073e7 	.word	0x080073e7
 80067b4:	0800740b 	.word	0x0800740b

080067b8 <_cleanup_r>:
 80067b8:	4901      	ldr	r1, [pc, #4]	; (80067c0 <_cleanup_r+0x8>)
 80067ba:	f000 b8c1 	b.w	8006940 <_fwalk_reent>
 80067be:	bf00      	nop
 80067c0:	080066f9 	.word	0x080066f9

080067c4 <__sfmoreglue>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	2268      	movs	r2, #104	; 0x68
 80067c8:	1e4d      	subs	r5, r1, #1
 80067ca:	4355      	muls	r5, r2
 80067cc:	460e      	mov	r6, r1
 80067ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067d2:	f7ff fca7 	bl	8006124 <_malloc_r>
 80067d6:	4604      	mov	r4, r0
 80067d8:	b140      	cbz	r0, 80067ec <__sfmoreglue+0x28>
 80067da:	2100      	movs	r1, #0
 80067dc:	e9c0 1600 	strd	r1, r6, [r0]
 80067e0:	300c      	adds	r0, #12
 80067e2:	60a0      	str	r0, [r4, #8]
 80067e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067e8:	f7ff fc28 	bl	800603c <memset>
 80067ec:	4620      	mov	r0, r4
 80067ee:	bd70      	pop	{r4, r5, r6, pc}

080067f0 <__sfp_lock_acquire>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__sfp_lock_acquire+0x8>)
 80067f2:	f000 b8c5 	b.w	8006980 <__retarget_lock_acquire_recursive>
 80067f6:	bf00      	nop
 80067f8:	200012f5 	.word	0x200012f5

080067fc <__sfp_lock_release>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__sfp_lock_release+0x8>)
 80067fe:	f000 b8c0 	b.w	8006982 <__retarget_lock_release_recursive>
 8006802:	bf00      	nop
 8006804:	200012f5 	.word	0x200012f5

08006808 <__sinit_lock_acquire>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__sinit_lock_acquire+0x8>)
 800680a:	f000 b8b9 	b.w	8006980 <__retarget_lock_acquire_recursive>
 800680e:	bf00      	nop
 8006810:	200012f6 	.word	0x200012f6

08006814 <__sinit_lock_release>:
 8006814:	4801      	ldr	r0, [pc, #4]	; (800681c <__sinit_lock_release+0x8>)
 8006816:	f000 b8b4 	b.w	8006982 <__retarget_lock_release_recursive>
 800681a:	bf00      	nop
 800681c:	200012f6 	.word	0x200012f6

08006820 <__sinit>:
 8006820:	b510      	push	{r4, lr}
 8006822:	4604      	mov	r4, r0
 8006824:	f7ff fff0 	bl	8006808 <__sinit_lock_acquire>
 8006828:	69a3      	ldr	r3, [r4, #24]
 800682a:	b11b      	cbz	r3, 8006834 <__sinit+0x14>
 800682c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006830:	f7ff bff0 	b.w	8006814 <__sinit_lock_release>
 8006834:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006838:	6523      	str	r3, [r4, #80]	; 0x50
 800683a:	4b13      	ldr	r3, [pc, #76]	; (8006888 <__sinit+0x68>)
 800683c:	4a13      	ldr	r2, [pc, #76]	; (800688c <__sinit+0x6c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	62a2      	str	r2, [r4, #40]	; 0x28
 8006842:	42a3      	cmp	r3, r4
 8006844:	bf04      	itt	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	61a3      	streq	r3, [r4, #24]
 800684a:	4620      	mov	r0, r4
 800684c:	f000 f820 	bl	8006890 <__sfp>
 8006850:	6060      	str	r0, [r4, #4]
 8006852:	4620      	mov	r0, r4
 8006854:	f000 f81c 	bl	8006890 <__sfp>
 8006858:	60a0      	str	r0, [r4, #8]
 800685a:	4620      	mov	r0, r4
 800685c:	f000 f818 	bl	8006890 <__sfp>
 8006860:	2200      	movs	r2, #0
 8006862:	60e0      	str	r0, [r4, #12]
 8006864:	2104      	movs	r1, #4
 8006866:	6860      	ldr	r0, [r4, #4]
 8006868:	f7ff ff82 	bl	8006770 <std>
 800686c:	68a0      	ldr	r0, [r4, #8]
 800686e:	2201      	movs	r2, #1
 8006870:	2109      	movs	r1, #9
 8006872:	f7ff ff7d 	bl	8006770 <std>
 8006876:	68e0      	ldr	r0, [r4, #12]
 8006878:	2202      	movs	r2, #2
 800687a:	2112      	movs	r1, #18
 800687c:	f7ff ff78 	bl	8006770 <std>
 8006880:	2301      	movs	r3, #1
 8006882:	61a3      	str	r3, [r4, #24]
 8006884:	e7d2      	b.n	800682c <__sinit+0xc>
 8006886:	bf00      	nop
 8006888:	08007970 	.word	0x08007970
 800688c:	080067b9 	.word	0x080067b9

08006890 <__sfp>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	4607      	mov	r7, r0
 8006894:	f7ff ffac 	bl	80067f0 <__sfp_lock_acquire>
 8006898:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <__sfp+0x84>)
 800689a:	681e      	ldr	r6, [r3, #0]
 800689c:	69b3      	ldr	r3, [r6, #24]
 800689e:	b913      	cbnz	r3, 80068a6 <__sfp+0x16>
 80068a0:	4630      	mov	r0, r6
 80068a2:	f7ff ffbd 	bl	8006820 <__sinit>
 80068a6:	3648      	adds	r6, #72	; 0x48
 80068a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	d503      	bpl.n	80068b8 <__sfp+0x28>
 80068b0:	6833      	ldr	r3, [r6, #0]
 80068b2:	b30b      	cbz	r3, 80068f8 <__sfp+0x68>
 80068b4:	6836      	ldr	r6, [r6, #0]
 80068b6:	e7f7      	b.n	80068a8 <__sfp+0x18>
 80068b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068bc:	b9d5      	cbnz	r5, 80068f4 <__sfp+0x64>
 80068be:	4b16      	ldr	r3, [pc, #88]	; (8006918 <__sfp+0x88>)
 80068c0:	60e3      	str	r3, [r4, #12]
 80068c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068c6:	6665      	str	r5, [r4, #100]	; 0x64
 80068c8:	f000 f859 	bl	800697e <__retarget_lock_init_recursive>
 80068cc:	f7ff ff96 	bl	80067fc <__sfp_lock_release>
 80068d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068d8:	6025      	str	r5, [r4, #0]
 80068da:	61a5      	str	r5, [r4, #24]
 80068dc:	2208      	movs	r2, #8
 80068de:	4629      	mov	r1, r5
 80068e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068e4:	f7ff fbaa 	bl	800603c <memset>
 80068e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068f0:	4620      	mov	r0, r4
 80068f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f4:	3468      	adds	r4, #104	; 0x68
 80068f6:	e7d9      	b.n	80068ac <__sfp+0x1c>
 80068f8:	2104      	movs	r1, #4
 80068fa:	4638      	mov	r0, r7
 80068fc:	f7ff ff62 	bl	80067c4 <__sfmoreglue>
 8006900:	4604      	mov	r4, r0
 8006902:	6030      	str	r0, [r6, #0]
 8006904:	2800      	cmp	r0, #0
 8006906:	d1d5      	bne.n	80068b4 <__sfp+0x24>
 8006908:	f7ff ff78 	bl	80067fc <__sfp_lock_release>
 800690c:	230c      	movs	r3, #12
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	e7ee      	b.n	80068f0 <__sfp+0x60>
 8006912:	bf00      	nop
 8006914:	08007970 	.word	0x08007970
 8006918:	ffff0001 	.word	0xffff0001

0800691c <fiprintf>:
 800691c:	b40e      	push	{r1, r2, r3}
 800691e:	b503      	push	{r0, r1, lr}
 8006920:	4601      	mov	r1, r0
 8006922:	ab03      	add	r3, sp, #12
 8006924:	4805      	ldr	r0, [pc, #20]	; (800693c <fiprintf+0x20>)
 8006926:	f853 2b04 	ldr.w	r2, [r3], #4
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	f000 fa21 	bl	8006d74 <_vfiprintf_r>
 8006932:	b002      	add	sp, #8
 8006934:	f85d eb04 	ldr.w	lr, [sp], #4
 8006938:	b003      	add	sp, #12
 800693a:	4770      	bx	lr
 800693c:	20000070 	.word	0x20000070

08006940 <_fwalk_reent>:
 8006940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006944:	4606      	mov	r6, r0
 8006946:	4688      	mov	r8, r1
 8006948:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800694c:	2700      	movs	r7, #0
 800694e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006952:	f1b9 0901 	subs.w	r9, r9, #1
 8006956:	d505      	bpl.n	8006964 <_fwalk_reent+0x24>
 8006958:	6824      	ldr	r4, [r4, #0]
 800695a:	2c00      	cmp	r4, #0
 800695c:	d1f7      	bne.n	800694e <_fwalk_reent+0xe>
 800695e:	4638      	mov	r0, r7
 8006960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006964:	89ab      	ldrh	r3, [r5, #12]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d907      	bls.n	800697a <_fwalk_reent+0x3a>
 800696a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800696e:	3301      	adds	r3, #1
 8006970:	d003      	beq.n	800697a <_fwalk_reent+0x3a>
 8006972:	4629      	mov	r1, r5
 8006974:	4630      	mov	r0, r6
 8006976:	47c0      	blx	r8
 8006978:	4307      	orrs	r7, r0
 800697a:	3568      	adds	r5, #104	; 0x68
 800697c:	e7e9      	b.n	8006952 <_fwalk_reent+0x12>

0800697e <__retarget_lock_init_recursive>:
 800697e:	4770      	bx	lr

08006980 <__retarget_lock_acquire_recursive>:
 8006980:	4770      	bx	lr

08006982 <__retarget_lock_release_recursive>:
 8006982:	4770      	bx	lr

08006984 <__swhatbuf_r>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	460e      	mov	r6, r1
 8006988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698c:	2900      	cmp	r1, #0
 800698e:	b096      	sub	sp, #88	; 0x58
 8006990:	4614      	mov	r4, r2
 8006992:	461d      	mov	r5, r3
 8006994:	da08      	bge.n	80069a8 <__swhatbuf_r+0x24>
 8006996:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	602a      	str	r2, [r5, #0]
 800699e:	061a      	lsls	r2, r3, #24
 80069a0:	d410      	bmi.n	80069c4 <__swhatbuf_r+0x40>
 80069a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a6:	e00e      	b.n	80069c6 <__swhatbuf_r+0x42>
 80069a8:	466a      	mov	r2, sp
 80069aa:	f000 fd5d 	bl	8007468 <_fstat_r>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	dbf1      	blt.n	8006996 <__swhatbuf_r+0x12>
 80069b2:	9a01      	ldr	r2, [sp, #4]
 80069b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069bc:	425a      	negs	r2, r3
 80069be:	415a      	adcs	r2, r3
 80069c0:	602a      	str	r2, [r5, #0]
 80069c2:	e7ee      	b.n	80069a2 <__swhatbuf_r+0x1e>
 80069c4:	2340      	movs	r3, #64	; 0x40
 80069c6:	2000      	movs	r0, #0
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	b016      	add	sp, #88	; 0x58
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080069d0 <__smakebuf_r>:
 80069d0:	898b      	ldrh	r3, [r1, #12]
 80069d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069d4:	079d      	lsls	r5, r3, #30
 80069d6:	4606      	mov	r6, r0
 80069d8:	460c      	mov	r4, r1
 80069da:	d507      	bpl.n	80069ec <__smakebuf_r+0x1c>
 80069dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	2301      	movs	r3, #1
 80069e6:	6163      	str	r3, [r4, #20]
 80069e8:	b002      	add	sp, #8
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
 80069ec:	ab01      	add	r3, sp, #4
 80069ee:	466a      	mov	r2, sp
 80069f0:	f7ff ffc8 	bl	8006984 <__swhatbuf_r>
 80069f4:	9900      	ldr	r1, [sp, #0]
 80069f6:	4605      	mov	r5, r0
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7ff fb93 	bl	8006124 <_malloc_r>
 80069fe:	b948      	cbnz	r0, 8006a14 <__smakebuf_r+0x44>
 8006a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a04:	059a      	lsls	r2, r3, #22
 8006a06:	d4ef      	bmi.n	80069e8 <__smakebuf_r+0x18>
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	e7e3      	b.n	80069dc <__smakebuf_r+0xc>
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <__smakebuf_r+0x7c>)
 8006a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	6020      	str	r0, [r4, #0]
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	9b00      	ldr	r3, [sp, #0]
 8006a24:	6163      	str	r3, [r4, #20]
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	6120      	str	r0, [r4, #16]
 8006a2a:	b15b      	cbz	r3, 8006a44 <__smakebuf_r+0x74>
 8006a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 fd2b 	bl	800748c <_isatty_r>
 8006a36:	b128      	cbz	r0, 8006a44 <__smakebuf_r+0x74>
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	89a0      	ldrh	r0, [r4, #12]
 8006a46:	4305      	orrs	r5, r0
 8006a48:	81a5      	strh	r5, [r4, #12]
 8006a4a:	e7cd      	b.n	80069e8 <__smakebuf_r+0x18>
 8006a4c:	080067b9 	.word	0x080067b9

08006a50 <__malloc_lock>:
 8006a50:	4801      	ldr	r0, [pc, #4]	; (8006a58 <__malloc_lock+0x8>)
 8006a52:	f7ff bf95 	b.w	8006980 <__retarget_lock_acquire_recursive>
 8006a56:	bf00      	nop
 8006a58:	200012f4 	.word	0x200012f4

08006a5c <__malloc_unlock>:
 8006a5c:	4801      	ldr	r0, [pc, #4]	; (8006a64 <__malloc_unlock+0x8>)
 8006a5e:	f7ff bf90 	b.w	8006982 <__retarget_lock_release_recursive>
 8006a62:	bf00      	nop
 8006a64:	200012f4 	.word	0x200012f4

08006a68 <__ssputs_r>:
 8006a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	688e      	ldr	r6, [r1, #8]
 8006a6e:	429e      	cmp	r6, r3
 8006a70:	4682      	mov	sl, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	4690      	mov	r8, r2
 8006a76:	461f      	mov	r7, r3
 8006a78:	d838      	bhi.n	8006aec <__ssputs_r+0x84>
 8006a7a:	898a      	ldrh	r2, [r1, #12]
 8006a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a80:	d032      	beq.n	8006ae8 <__ssputs_r+0x80>
 8006a82:	6825      	ldr	r5, [r4, #0]
 8006a84:	6909      	ldr	r1, [r1, #16]
 8006a86:	eba5 0901 	sub.w	r9, r5, r1
 8006a8a:	6965      	ldr	r5, [r4, #20]
 8006a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a94:	3301      	adds	r3, #1
 8006a96:	444b      	add	r3, r9
 8006a98:	106d      	asrs	r5, r5, #1
 8006a9a:	429d      	cmp	r5, r3
 8006a9c:	bf38      	it	cc
 8006a9e:	461d      	movcc	r5, r3
 8006aa0:	0553      	lsls	r3, r2, #21
 8006aa2:	d531      	bpl.n	8006b08 <__ssputs_r+0xa0>
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	f7ff fb3d 	bl	8006124 <_malloc_r>
 8006aaa:	4606      	mov	r6, r0
 8006aac:	b950      	cbnz	r0, 8006ac4 <__ssputs_r+0x5c>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	f8ca 3000 	str.w	r3, [sl]
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aba:	81a3      	strh	r3, [r4, #12]
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac4:	6921      	ldr	r1, [r4, #16]
 8006ac6:	464a      	mov	r2, r9
 8006ac8:	f7ff fa90 	bl	8005fec <memcpy>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	6126      	str	r6, [r4, #16]
 8006ada:	6165      	str	r5, [r4, #20]
 8006adc:	444e      	add	r6, r9
 8006ade:	eba5 0509 	sub.w	r5, r5, r9
 8006ae2:	6026      	str	r6, [r4, #0]
 8006ae4:	60a5      	str	r5, [r4, #8]
 8006ae6:	463e      	mov	r6, r7
 8006ae8:	42be      	cmp	r6, r7
 8006aea:	d900      	bls.n	8006aee <__ssputs_r+0x86>
 8006aec:	463e      	mov	r6, r7
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	4632      	mov	r2, r6
 8006af2:	4641      	mov	r1, r8
 8006af4:	f7ff fa88 	bl	8006008 <memmove>
 8006af8:	68a3      	ldr	r3, [r4, #8]
 8006afa:	1b9b      	subs	r3, r3, r6
 8006afc:	60a3      	str	r3, [r4, #8]
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	4433      	add	r3, r6
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	2000      	movs	r0, #0
 8006b06:	e7db      	b.n	8006ac0 <__ssputs_r+0x58>
 8006b08:	462a      	mov	r2, r5
 8006b0a:	f000 fce1 	bl	80074d0 <_realloc_r>
 8006b0e:	4606      	mov	r6, r0
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d1e1      	bne.n	8006ad8 <__ssputs_r+0x70>
 8006b14:	6921      	ldr	r1, [r4, #16]
 8006b16:	4650      	mov	r0, sl
 8006b18:	f7ff fa98 	bl	800604c <_free_r>
 8006b1c:	e7c7      	b.n	8006aae <__ssputs_r+0x46>
	...

08006b20 <_svfiprintf_r>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	4698      	mov	r8, r3
 8006b26:	898b      	ldrh	r3, [r1, #12]
 8006b28:	061b      	lsls	r3, r3, #24
 8006b2a:	b09d      	sub	sp, #116	; 0x74
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	460d      	mov	r5, r1
 8006b30:	4614      	mov	r4, r2
 8006b32:	d50e      	bpl.n	8006b52 <_svfiprintf_r+0x32>
 8006b34:	690b      	ldr	r3, [r1, #16]
 8006b36:	b963      	cbnz	r3, 8006b52 <_svfiprintf_r+0x32>
 8006b38:	2140      	movs	r1, #64	; 0x40
 8006b3a:	f7ff faf3 	bl	8006124 <_malloc_r>
 8006b3e:	6028      	str	r0, [r5, #0]
 8006b40:	6128      	str	r0, [r5, #16]
 8006b42:	b920      	cbnz	r0, 8006b4e <_svfiprintf_r+0x2e>
 8006b44:	230c      	movs	r3, #12
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4c:	e0d1      	b.n	8006cf2 <_svfiprintf_r+0x1d2>
 8006b4e:	2340      	movs	r3, #64	; 0x40
 8006b50:	616b      	str	r3, [r5, #20]
 8006b52:	2300      	movs	r3, #0
 8006b54:	9309      	str	r3, [sp, #36]	; 0x24
 8006b56:	2320      	movs	r3, #32
 8006b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b60:	2330      	movs	r3, #48	; 0x30
 8006b62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d0c <_svfiprintf_r+0x1ec>
 8006b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b6a:	f04f 0901 	mov.w	r9, #1
 8006b6e:	4623      	mov	r3, r4
 8006b70:	469a      	mov	sl, r3
 8006b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b76:	b10a      	cbz	r2, 8006b7c <_svfiprintf_r+0x5c>
 8006b78:	2a25      	cmp	r2, #37	; 0x25
 8006b7a:	d1f9      	bne.n	8006b70 <_svfiprintf_r+0x50>
 8006b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b80:	d00b      	beq.n	8006b9a <_svfiprintf_r+0x7a>
 8006b82:	465b      	mov	r3, fp
 8006b84:	4622      	mov	r2, r4
 8006b86:	4629      	mov	r1, r5
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f7ff ff6d 	bl	8006a68 <__ssputs_r>
 8006b8e:	3001      	adds	r0, #1
 8006b90:	f000 80aa 	beq.w	8006ce8 <_svfiprintf_r+0x1c8>
 8006b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b96:	445a      	add	r2, fp
 8006b98:	9209      	str	r2, [sp, #36]	; 0x24
 8006b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 80a2 	beq.w	8006ce8 <_svfiprintf_r+0x1c8>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8006baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bae:	f10a 0a01 	add.w	sl, sl, #1
 8006bb2:	9304      	str	r3, [sp, #16]
 8006bb4:	9307      	str	r3, [sp, #28]
 8006bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bba:	931a      	str	r3, [sp, #104]	; 0x68
 8006bbc:	4654      	mov	r4, sl
 8006bbe:	2205      	movs	r2, #5
 8006bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc4:	4851      	ldr	r0, [pc, #324]	; (8006d0c <_svfiprintf_r+0x1ec>)
 8006bc6:	f7f9 fb13 	bl	80001f0 <memchr>
 8006bca:	9a04      	ldr	r2, [sp, #16]
 8006bcc:	b9d8      	cbnz	r0, 8006c06 <_svfiprintf_r+0xe6>
 8006bce:	06d0      	lsls	r0, r2, #27
 8006bd0:	bf44      	itt	mi
 8006bd2:	2320      	movmi	r3, #32
 8006bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd8:	0711      	lsls	r1, r2, #28
 8006bda:	bf44      	itt	mi
 8006bdc:	232b      	movmi	r3, #43	; 0x2b
 8006bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be2:	f89a 3000 	ldrb.w	r3, [sl]
 8006be6:	2b2a      	cmp	r3, #42	; 0x2a
 8006be8:	d015      	beq.n	8006c16 <_svfiprintf_r+0xf6>
 8006bea:	9a07      	ldr	r2, [sp, #28]
 8006bec:	4654      	mov	r4, sl
 8006bee:	2000      	movs	r0, #0
 8006bf0:	f04f 0c0a 	mov.w	ip, #10
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bfa:	3b30      	subs	r3, #48	; 0x30
 8006bfc:	2b09      	cmp	r3, #9
 8006bfe:	d94e      	bls.n	8006c9e <_svfiprintf_r+0x17e>
 8006c00:	b1b0      	cbz	r0, 8006c30 <_svfiprintf_r+0x110>
 8006c02:	9207      	str	r2, [sp, #28]
 8006c04:	e014      	b.n	8006c30 <_svfiprintf_r+0x110>
 8006c06:	eba0 0308 	sub.w	r3, r0, r8
 8006c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	9304      	str	r3, [sp, #16]
 8006c12:	46a2      	mov	sl, r4
 8006c14:	e7d2      	b.n	8006bbc <_svfiprintf_r+0x9c>
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	1d19      	adds	r1, r3, #4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	9103      	str	r1, [sp, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bfbb      	ittet	lt
 8006c22:	425b      	neglt	r3, r3
 8006c24:	f042 0202 	orrlt.w	r2, r2, #2
 8006c28:	9307      	strge	r3, [sp, #28]
 8006c2a:	9307      	strlt	r3, [sp, #28]
 8006c2c:	bfb8      	it	lt
 8006c2e:	9204      	strlt	r2, [sp, #16]
 8006c30:	7823      	ldrb	r3, [r4, #0]
 8006c32:	2b2e      	cmp	r3, #46	; 0x2e
 8006c34:	d10c      	bne.n	8006c50 <_svfiprintf_r+0x130>
 8006c36:	7863      	ldrb	r3, [r4, #1]
 8006c38:	2b2a      	cmp	r3, #42	; 0x2a
 8006c3a:	d135      	bne.n	8006ca8 <_svfiprintf_r+0x188>
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	1d1a      	adds	r2, r3, #4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	9203      	str	r2, [sp, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	bfb8      	it	lt
 8006c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c4c:	3402      	adds	r4, #2
 8006c4e:	9305      	str	r3, [sp, #20]
 8006c50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d1c <_svfiprintf_r+0x1fc>
 8006c54:	7821      	ldrb	r1, [r4, #0]
 8006c56:	2203      	movs	r2, #3
 8006c58:	4650      	mov	r0, sl
 8006c5a:	f7f9 fac9 	bl	80001f0 <memchr>
 8006c5e:	b140      	cbz	r0, 8006c72 <_svfiprintf_r+0x152>
 8006c60:	2340      	movs	r3, #64	; 0x40
 8006c62:	eba0 000a 	sub.w	r0, r0, sl
 8006c66:	fa03 f000 	lsl.w	r0, r3, r0
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	4303      	orrs	r3, r0
 8006c6e:	3401      	adds	r4, #1
 8006c70:	9304      	str	r3, [sp, #16]
 8006c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c76:	4826      	ldr	r0, [pc, #152]	; (8006d10 <_svfiprintf_r+0x1f0>)
 8006c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c7c:	2206      	movs	r2, #6
 8006c7e:	f7f9 fab7 	bl	80001f0 <memchr>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d038      	beq.n	8006cf8 <_svfiprintf_r+0x1d8>
 8006c86:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <_svfiprintf_r+0x1f4>)
 8006c88:	bb1b      	cbnz	r3, 8006cd2 <_svfiprintf_r+0x1b2>
 8006c8a:	9b03      	ldr	r3, [sp, #12]
 8006c8c:	3307      	adds	r3, #7
 8006c8e:	f023 0307 	bic.w	r3, r3, #7
 8006c92:	3308      	adds	r3, #8
 8006c94:	9303      	str	r3, [sp, #12]
 8006c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c98:	4433      	add	r3, r6
 8006c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9c:	e767      	b.n	8006b6e <_svfiprintf_r+0x4e>
 8006c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	e7a5      	b.n	8006bf4 <_svfiprintf_r+0xd4>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	3401      	adds	r4, #1
 8006cac:	9305      	str	r3, [sp, #20]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	f04f 0c0a 	mov.w	ip, #10
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cba:	3a30      	subs	r2, #48	; 0x30
 8006cbc:	2a09      	cmp	r2, #9
 8006cbe:	d903      	bls.n	8006cc8 <_svfiprintf_r+0x1a8>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0c5      	beq.n	8006c50 <_svfiprintf_r+0x130>
 8006cc4:	9105      	str	r1, [sp, #20]
 8006cc6:	e7c3      	b.n	8006c50 <_svfiprintf_r+0x130>
 8006cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ccc:	4604      	mov	r4, r0
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e7f0      	b.n	8006cb4 <_svfiprintf_r+0x194>
 8006cd2:	ab03      	add	r3, sp, #12
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	462a      	mov	r2, r5
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <_svfiprintf_r+0x1f8>)
 8006cda:	a904      	add	r1, sp, #16
 8006cdc:	4638      	mov	r0, r7
 8006cde:	f3af 8000 	nop.w
 8006ce2:	1c42      	adds	r2, r0, #1
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	d1d6      	bne.n	8006c96 <_svfiprintf_r+0x176>
 8006ce8:	89ab      	ldrh	r3, [r5, #12]
 8006cea:	065b      	lsls	r3, r3, #25
 8006cec:	f53f af2c 	bmi.w	8006b48 <_svfiprintf_r+0x28>
 8006cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cf2:	b01d      	add	sp, #116	; 0x74
 8006cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf8:	ab03      	add	r3, sp, #12
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	462a      	mov	r2, r5
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <_svfiprintf_r+0x1f8>)
 8006d00:	a904      	add	r1, sp, #16
 8006d02:	4638      	mov	r0, r7
 8006d04:	f000 f9d4 	bl	80070b0 <_printf_i>
 8006d08:	e7eb      	b.n	8006ce2 <_svfiprintf_r+0x1c2>
 8006d0a:	bf00      	nop
 8006d0c:	08007a84 	.word	0x08007a84
 8006d10:	08007a8e 	.word	0x08007a8e
 8006d14:	00000000 	.word	0x00000000
 8006d18:	08006a69 	.word	0x08006a69
 8006d1c:	08007a8a 	.word	0x08007a8a

08006d20 <__sfputc_r>:
 8006d20:	6893      	ldr	r3, [r2, #8]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	b410      	push	{r4}
 8006d28:	6093      	str	r3, [r2, #8]
 8006d2a:	da08      	bge.n	8006d3e <__sfputc_r+0x1e>
 8006d2c:	6994      	ldr	r4, [r2, #24]
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	db01      	blt.n	8006d36 <__sfputc_r+0x16>
 8006d32:	290a      	cmp	r1, #10
 8006d34:	d103      	bne.n	8006d3e <__sfputc_r+0x1e>
 8006d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d3a:	f7ff bb79 	b.w	8006430 <__swbuf_r>
 8006d3e:	6813      	ldr	r3, [r2, #0]
 8006d40:	1c58      	adds	r0, r3, #1
 8006d42:	6010      	str	r0, [r2, #0]
 8006d44:	7019      	strb	r1, [r3, #0]
 8006d46:	4608      	mov	r0, r1
 8006d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <__sfputs_r>:
 8006d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d50:	4606      	mov	r6, r0
 8006d52:	460f      	mov	r7, r1
 8006d54:	4614      	mov	r4, r2
 8006d56:	18d5      	adds	r5, r2, r3
 8006d58:	42ac      	cmp	r4, r5
 8006d5a:	d101      	bne.n	8006d60 <__sfputs_r+0x12>
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	e007      	b.n	8006d70 <__sfputs_r+0x22>
 8006d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d64:	463a      	mov	r2, r7
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ffda 	bl	8006d20 <__sfputc_r>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d1f3      	bne.n	8006d58 <__sfputs_r+0xa>
 8006d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d74 <_vfiprintf_r>:
 8006d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	460d      	mov	r5, r1
 8006d7a:	b09d      	sub	sp, #116	; 0x74
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	4698      	mov	r8, r3
 8006d80:	4606      	mov	r6, r0
 8006d82:	b118      	cbz	r0, 8006d8c <_vfiprintf_r+0x18>
 8006d84:	6983      	ldr	r3, [r0, #24]
 8006d86:	b90b      	cbnz	r3, 8006d8c <_vfiprintf_r+0x18>
 8006d88:	f7ff fd4a 	bl	8006820 <__sinit>
 8006d8c:	4b89      	ldr	r3, [pc, #548]	; (8006fb4 <_vfiprintf_r+0x240>)
 8006d8e:	429d      	cmp	r5, r3
 8006d90:	d11b      	bne.n	8006dca <_vfiprintf_r+0x56>
 8006d92:	6875      	ldr	r5, [r6, #4]
 8006d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d96:	07d9      	lsls	r1, r3, #31
 8006d98:	d405      	bmi.n	8006da6 <_vfiprintf_r+0x32>
 8006d9a:	89ab      	ldrh	r3, [r5, #12]
 8006d9c:	059a      	lsls	r2, r3, #22
 8006d9e:	d402      	bmi.n	8006da6 <_vfiprintf_r+0x32>
 8006da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da2:	f7ff fded 	bl	8006980 <__retarget_lock_acquire_recursive>
 8006da6:	89ab      	ldrh	r3, [r5, #12]
 8006da8:	071b      	lsls	r3, r3, #28
 8006daa:	d501      	bpl.n	8006db0 <_vfiprintf_r+0x3c>
 8006dac:	692b      	ldr	r3, [r5, #16]
 8006dae:	b9eb      	cbnz	r3, 8006dec <_vfiprintf_r+0x78>
 8006db0:	4629      	mov	r1, r5
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff fb8e 	bl	80064d4 <__swsetup_r>
 8006db8:	b1c0      	cbz	r0, 8006dec <_vfiprintf_r+0x78>
 8006dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dbc:	07dc      	lsls	r4, r3, #31
 8006dbe:	d50e      	bpl.n	8006dde <_vfiprintf_r+0x6a>
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	b01d      	add	sp, #116	; 0x74
 8006dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dca:	4b7b      	ldr	r3, [pc, #492]	; (8006fb8 <_vfiprintf_r+0x244>)
 8006dcc:	429d      	cmp	r5, r3
 8006dce:	d101      	bne.n	8006dd4 <_vfiprintf_r+0x60>
 8006dd0:	68b5      	ldr	r5, [r6, #8]
 8006dd2:	e7df      	b.n	8006d94 <_vfiprintf_r+0x20>
 8006dd4:	4b79      	ldr	r3, [pc, #484]	; (8006fbc <_vfiprintf_r+0x248>)
 8006dd6:	429d      	cmp	r5, r3
 8006dd8:	bf08      	it	eq
 8006dda:	68f5      	ldreq	r5, [r6, #12]
 8006ddc:	e7da      	b.n	8006d94 <_vfiprintf_r+0x20>
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	0598      	lsls	r0, r3, #22
 8006de2:	d4ed      	bmi.n	8006dc0 <_vfiprintf_r+0x4c>
 8006de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006de6:	f7ff fdcc 	bl	8006982 <__retarget_lock_release_recursive>
 8006dea:	e7e9      	b.n	8006dc0 <_vfiprintf_r+0x4c>
 8006dec:	2300      	movs	r3, #0
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	2320      	movs	r3, #32
 8006df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dfa:	2330      	movs	r3, #48	; 0x30
 8006dfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006fc0 <_vfiprintf_r+0x24c>
 8006e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e04:	f04f 0901 	mov.w	r9, #1
 8006e08:	4623      	mov	r3, r4
 8006e0a:	469a      	mov	sl, r3
 8006e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e10:	b10a      	cbz	r2, 8006e16 <_vfiprintf_r+0xa2>
 8006e12:	2a25      	cmp	r2, #37	; 0x25
 8006e14:	d1f9      	bne.n	8006e0a <_vfiprintf_r+0x96>
 8006e16:	ebba 0b04 	subs.w	fp, sl, r4
 8006e1a:	d00b      	beq.n	8006e34 <_vfiprintf_r+0xc0>
 8006e1c:	465b      	mov	r3, fp
 8006e1e:	4622      	mov	r2, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7ff ff93 	bl	8006d4e <__sfputs_r>
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f000 80aa 	beq.w	8006f82 <_vfiprintf_r+0x20e>
 8006e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e30:	445a      	add	r2, fp
 8006e32:	9209      	str	r2, [sp, #36]	; 0x24
 8006e34:	f89a 3000 	ldrb.w	r3, [sl]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 80a2 	beq.w	8006f82 <_vfiprintf_r+0x20e>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295
 8006e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e48:	f10a 0a01 	add.w	sl, sl, #1
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	9307      	str	r3, [sp, #28]
 8006e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e54:	931a      	str	r3, [sp, #104]	; 0x68
 8006e56:	4654      	mov	r4, sl
 8006e58:	2205      	movs	r2, #5
 8006e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e5e:	4858      	ldr	r0, [pc, #352]	; (8006fc0 <_vfiprintf_r+0x24c>)
 8006e60:	f7f9 f9c6 	bl	80001f0 <memchr>
 8006e64:	9a04      	ldr	r2, [sp, #16]
 8006e66:	b9d8      	cbnz	r0, 8006ea0 <_vfiprintf_r+0x12c>
 8006e68:	06d1      	lsls	r1, r2, #27
 8006e6a:	bf44      	itt	mi
 8006e6c:	2320      	movmi	r3, #32
 8006e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e72:	0713      	lsls	r3, r2, #28
 8006e74:	bf44      	itt	mi
 8006e76:	232b      	movmi	r3, #43	; 0x2b
 8006e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e80:	2b2a      	cmp	r3, #42	; 0x2a
 8006e82:	d015      	beq.n	8006eb0 <_vfiprintf_r+0x13c>
 8006e84:	9a07      	ldr	r2, [sp, #28]
 8006e86:	4654      	mov	r4, sl
 8006e88:	2000      	movs	r0, #0
 8006e8a:	f04f 0c0a 	mov.w	ip, #10
 8006e8e:	4621      	mov	r1, r4
 8006e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e94:	3b30      	subs	r3, #48	; 0x30
 8006e96:	2b09      	cmp	r3, #9
 8006e98:	d94e      	bls.n	8006f38 <_vfiprintf_r+0x1c4>
 8006e9a:	b1b0      	cbz	r0, 8006eca <_vfiprintf_r+0x156>
 8006e9c:	9207      	str	r2, [sp, #28]
 8006e9e:	e014      	b.n	8006eca <_vfiprintf_r+0x156>
 8006ea0:	eba0 0308 	sub.w	r3, r0, r8
 8006ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	46a2      	mov	sl, r4
 8006eae:	e7d2      	b.n	8006e56 <_vfiprintf_r+0xe2>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	1d19      	adds	r1, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	9103      	str	r1, [sp, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bfbb      	ittet	lt
 8006ebc:	425b      	neglt	r3, r3
 8006ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8006ec2:	9307      	strge	r3, [sp, #28]
 8006ec4:	9307      	strlt	r3, [sp, #28]
 8006ec6:	bfb8      	it	lt
 8006ec8:	9204      	strlt	r2, [sp, #16]
 8006eca:	7823      	ldrb	r3, [r4, #0]
 8006ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ece:	d10c      	bne.n	8006eea <_vfiprintf_r+0x176>
 8006ed0:	7863      	ldrb	r3, [r4, #1]
 8006ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed4:	d135      	bne.n	8006f42 <_vfiprintf_r+0x1ce>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	1d1a      	adds	r2, r3, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	9203      	str	r2, [sp, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bfb8      	it	lt
 8006ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ee6:	3402      	adds	r4, #2
 8006ee8:	9305      	str	r3, [sp, #20]
 8006eea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006fd0 <_vfiprintf_r+0x25c>
 8006eee:	7821      	ldrb	r1, [r4, #0]
 8006ef0:	2203      	movs	r2, #3
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	f7f9 f97c 	bl	80001f0 <memchr>
 8006ef8:	b140      	cbz	r0, 8006f0c <_vfiprintf_r+0x198>
 8006efa:	2340      	movs	r3, #64	; 0x40
 8006efc:	eba0 000a 	sub.w	r0, r0, sl
 8006f00:	fa03 f000 	lsl.w	r0, r3, r0
 8006f04:	9b04      	ldr	r3, [sp, #16]
 8006f06:	4303      	orrs	r3, r0
 8006f08:	3401      	adds	r4, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f10:	482c      	ldr	r0, [pc, #176]	; (8006fc4 <_vfiprintf_r+0x250>)
 8006f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f16:	2206      	movs	r2, #6
 8006f18:	f7f9 f96a 	bl	80001f0 <memchr>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d03f      	beq.n	8006fa0 <_vfiprintf_r+0x22c>
 8006f20:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <_vfiprintf_r+0x254>)
 8006f22:	bb1b      	cbnz	r3, 8006f6c <_vfiprintf_r+0x1f8>
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	3307      	adds	r3, #7
 8006f28:	f023 0307 	bic.w	r3, r3, #7
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	9303      	str	r3, [sp, #12]
 8006f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f32:	443b      	add	r3, r7
 8006f34:	9309      	str	r3, [sp, #36]	; 0x24
 8006f36:	e767      	b.n	8006e08 <_vfiprintf_r+0x94>
 8006f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e7a5      	b.n	8006e8e <_vfiprintf_r+0x11a>
 8006f42:	2300      	movs	r3, #0
 8006f44:	3401      	adds	r4, #1
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	f04f 0c0a 	mov.w	ip, #10
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f54:	3a30      	subs	r2, #48	; 0x30
 8006f56:	2a09      	cmp	r2, #9
 8006f58:	d903      	bls.n	8006f62 <_vfiprintf_r+0x1ee>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0c5      	beq.n	8006eea <_vfiprintf_r+0x176>
 8006f5e:	9105      	str	r1, [sp, #20]
 8006f60:	e7c3      	b.n	8006eea <_vfiprintf_r+0x176>
 8006f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f66:	4604      	mov	r4, r0
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e7f0      	b.n	8006f4e <_vfiprintf_r+0x1da>
 8006f6c:	ab03      	add	r3, sp, #12
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	462a      	mov	r2, r5
 8006f72:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <_vfiprintf_r+0x258>)
 8006f74:	a904      	add	r1, sp, #16
 8006f76:	4630      	mov	r0, r6
 8006f78:	f3af 8000 	nop.w
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	1c78      	adds	r0, r7, #1
 8006f80:	d1d6      	bne.n	8006f30 <_vfiprintf_r+0x1bc>
 8006f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f84:	07d9      	lsls	r1, r3, #31
 8006f86:	d405      	bmi.n	8006f94 <_vfiprintf_r+0x220>
 8006f88:	89ab      	ldrh	r3, [r5, #12]
 8006f8a:	059a      	lsls	r2, r3, #22
 8006f8c:	d402      	bmi.n	8006f94 <_vfiprintf_r+0x220>
 8006f8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f90:	f7ff fcf7 	bl	8006982 <__retarget_lock_release_recursive>
 8006f94:	89ab      	ldrh	r3, [r5, #12]
 8006f96:	065b      	lsls	r3, r3, #25
 8006f98:	f53f af12 	bmi.w	8006dc0 <_vfiprintf_r+0x4c>
 8006f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f9e:	e711      	b.n	8006dc4 <_vfiprintf_r+0x50>
 8006fa0:	ab03      	add	r3, sp, #12
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <_vfiprintf_r+0x258>)
 8006fa8:	a904      	add	r1, sp, #16
 8006faa:	4630      	mov	r0, r6
 8006fac:	f000 f880 	bl	80070b0 <_printf_i>
 8006fb0:	e7e4      	b.n	8006f7c <_vfiprintf_r+0x208>
 8006fb2:	bf00      	nop
 8006fb4:	08007a44 	.word	0x08007a44
 8006fb8:	08007a64 	.word	0x08007a64
 8006fbc:	08007a24 	.word	0x08007a24
 8006fc0:	08007a84 	.word	0x08007a84
 8006fc4:	08007a8e 	.word	0x08007a8e
 8006fc8:	00000000 	.word	0x00000000
 8006fcc:	08006d4f 	.word	0x08006d4f
 8006fd0:	08007a8a 	.word	0x08007a8a

08006fd4 <_printf_common>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	4616      	mov	r6, r2
 8006fda:	4699      	mov	r9, r3
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bfb8      	it	lt
 8006fe8:	4613      	movlt	r3, r2
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b10a      	cbz	r2, 8006ffa <_printf_common+0x26>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	0699      	lsls	r1, r3, #26
 8006ffe:	bf42      	ittt	mi
 8007000:	6833      	ldrmi	r3, [r6, #0]
 8007002:	3302      	addmi	r3, #2
 8007004:	6033      	strmi	r3, [r6, #0]
 8007006:	6825      	ldr	r5, [r4, #0]
 8007008:	f015 0506 	ands.w	r5, r5, #6
 800700c:	d106      	bne.n	800701c <_printf_common+0x48>
 800700e:	f104 0a19 	add.w	sl, r4, #25
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	6832      	ldr	r2, [r6, #0]
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	42ab      	cmp	r3, r5
 800701a:	dc26      	bgt.n	800706a <_printf_common+0x96>
 800701c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007020:	1e13      	subs	r3, r2, #0
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	bf18      	it	ne
 8007026:	2301      	movne	r3, #1
 8007028:	0692      	lsls	r2, r2, #26
 800702a:	d42b      	bmi.n	8007084 <_printf_common+0xb0>
 800702c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007030:	4649      	mov	r1, r9
 8007032:	4638      	mov	r0, r7
 8007034:	47c0      	blx	r8
 8007036:	3001      	adds	r0, #1
 8007038:	d01e      	beq.n	8007078 <_printf_common+0xa4>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	68e5      	ldr	r5, [r4, #12]
 800703e:	6832      	ldr	r2, [r6, #0]
 8007040:	f003 0306 	and.w	r3, r3, #6
 8007044:	2b04      	cmp	r3, #4
 8007046:	bf08      	it	eq
 8007048:	1aad      	subeq	r5, r5, r2
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	6922      	ldr	r2, [r4, #16]
 800704e:	bf0c      	ite	eq
 8007050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007054:	2500      	movne	r5, #0
 8007056:	4293      	cmp	r3, r2
 8007058:	bfc4      	itt	gt
 800705a:	1a9b      	subgt	r3, r3, r2
 800705c:	18ed      	addgt	r5, r5, r3
 800705e:	2600      	movs	r6, #0
 8007060:	341a      	adds	r4, #26
 8007062:	42b5      	cmp	r5, r6
 8007064:	d11a      	bne.n	800709c <_printf_common+0xc8>
 8007066:	2000      	movs	r0, #0
 8007068:	e008      	b.n	800707c <_printf_common+0xa8>
 800706a:	2301      	movs	r3, #1
 800706c:	4652      	mov	r2, sl
 800706e:	4649      	mov	r1, r9
 8007070:	4638      	mov	r0, r7
 8007072:	47c0      	blx	r8
 8007074:	3001      	adds	r0, #1
 8007076:	d103      	bne.n	8007080 <_printf_common+0xac>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295
 800707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007080:	3501      	adds	r5, #1
 8007082:	e7c6      	b.n	8007012 <_printf_common+0x3e>
 8007084:	18e1      	adds	r1, r4, r3
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	2030      	movs	r0, #48	; 0x30
 800708a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800708e:	4422      	add	r2, r4
 8007090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007098:	3302      	adds	r3, #2
 800709a:	e7c7      	b.n	800702c <_printf_common+0x58>
 800709c:	2301      	movs	r3, #1
 800709e:	4622      	mov	r2, r4
 80070a0:	4649      	mov	r1, r9
 80070a2:	4638      	mov	r0, r7
 80070a4:	47c0      	blx	r8
 80070a6:	3001      	adds	r0, #1
 80070a8:	d0e6      	beq.n	8007078 <_printf_common+0xa4>
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7d9      	b.n	8007062 <_printf_common+0x8e>
	...

080070b0 <_printf_i>:
 80070b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	7e0f      	ldrb	r7, [r1, #24]
 80070b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070b8:	2f78      	cmp	r7, #120	; 0x78
 80070ba:	4691      	mov	r9, r2
 80070bc:	4680      	mov	r8, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	469a      	mov	sl, r3
 80070c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070c6:	d807      	bhi.n	80070d8 <_printf_i+0x28>
 80070c8:	2f62      	cmp	r7, #98	; 0x62
 80070ca:	d80a      	bhi.n	80070e2 <_printf_i+0x32>
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	f000 80d8 	beq.w	8007282 <_printf_i+0x1d2>
 80070d2:	2f58      	cmp	r7, #88	; 0x58
 80070d4:	f000 80a3 	beq.w	800721e <_printf_i+0x16e>
 80070d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070e0:	e03a      	b.n	8007158 <_printf_i+0xa8>
 80070e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070e6:	2b15      	cmp	r3, #21
 80070e8:	d8f6      	bhi.n	80070d8 <_printf_i+0x28>
 80070ea:	a101      	add	r1, pc, #4	; (adr r1, 80070f0 <_printf_i+0x40>)
 80070ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f0:	08007149 	.word	0x08007149
 80070f4:	0800715d 	.word	0x0800715d
 80070f8:	080070d9 	.word	0x080070d9
 80070fc:	080070d9 	.word	0x080070d9
 8007100:	080070d9 	.word	0x080070d9
 8007104:	080070d9 	.word	0x080070d9
 8007108:	0800715d 	.word	0x0800715d
 800710c:	080070d9 	.word	0x080070d9
 8007110:	080070d9 	.word	0x080070d9
 8007114:	080070d9 	.word	0x080070d9
 8007118:	080070d9 	.word	0x080070d9
 800711c:	08007269 	.word	0x08007269
 8007120:	0800718d 	.word	0x0800718d
 8007124:	0800724b 	.word	0x0800724b
 8007128:	080070d9 	.word	0x080070d9
 800712c:	080070d9 	.word	0x080070d9
 8007130:	0800728b 	.word	0x0800728b
 8007134:	080070d9 	.word	0x080070d9
 8007138:	0800718d 	.word	0x0800718d
 800713c:	080070d9 	.word	0x080070d9
 8007140:	080070d9 	.word	0x080070d9
 8007144:	08007253 	.word	0x08007253
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	602a      	str	r2, [r5, #0]
 8007150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007158:	2301      	movs	r3, #1
 800715a:	e0a3      	b.n	80072a4 <_printf_i+0x1f4>
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	6829      	ldr	r1, [r5, #0]
 8007160:	0606      	lsls	r6, r0, #24
 8007162:	f101 0304 	add.w	r3, r1, #4
 8007166:	d50a      	bpl.n	800717e <_printf_i+0xce>
 8007168:	680e      	ldr	r6, [r1, #0]
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	2e00      	cmp	r6, #0
 800716e:	da03      	bge.n	8007178 <_printf_i+0xc8>
 8007170:	232d      	movs	r3, #45	; 0x2d
 8007172:	4276      	negs	r6, r6
 8007174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007178:	485e      	ldr	r0, [pc, #376]	; (80072f4 <_printf_i+0x244>)
 800717a:	230a      	movs	r3, #10
 800717c:	e019      	b.n	80071b2 <_printf_i+0x102>
 800717e:	680e      	ldr	r6, [r1, #0]
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007186:	bf18      	it	ne
 8007188:	b236      	sxthne	r6, r6
 800718a:	e7ef      	b.n	800716c <_printf_i+0xbc>
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	6820      	ldr	r0, [r4, #0]
 8007190:	1d19      	adds	r1, r3, #4
 8007192:	6029      	str	r1, [r5, #0]
 8007194:	0601      	lsls	r1, r0, #24
 8007196:	d501      	bpl.n	800719c <_printf_i+0xec>
 8007198:	681e      	ldr	r6, [r3, #0]
 800719a:	e002      	b.n	80071a2 <_printf_i+0xf2>
 800719c:	0646      	lsls	r6, r0, #25
 800719e:	d5fb      	bpl.n	8007198 <_printf_i+0xe8>
 80071a0:	881e      	ldrh	r6, [r3, #0]
 80071a2:	4854      	ldr	r0, [pc, #336]	; (80072f4 <_printf_i+0x244>)
 80071a4:	2f6f      	cmp	r7, #111	; 0x6f
 80071a6:	bf0c      	ite	eq
 80071a8:	2308      	moveq	r3, #8
 80071aa:	230a      	movne	r3, #10
 80071ac:	2100      	movs	r1, #0
 80071ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071b2:	6865      	ldr	r5, [r4, #4]
 80071b4:	60a5      	str	r5, [r4, #8]
 80071b6:	2d00      	cmp	r5, #0
 80071b8:	bfa2      	ittt	ge
 80071ba:	6821      	ldrge	r1, [r4, #0]
 80071bc:	f021 0104 	bicge.w	r1, r1, #4
 80071c0:	6021      	strge	r1, [r4, #0]
 80071c2:	b90e      	cbnz	r6, 80071c8 <_printf_i+0x118>
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	d04d      	beq.n	8007264 <_printf_i+0x1b4>
 80071c8:	4615      	mov	r5, r2
 80071ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80071ce:	fb03 6711 	mls	r7, r3, r1, r6
 80071d2:	5dc7      	ldrb	r7, [r0, r7]
 80071d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071d8:	4637      	mov	r7, r6
 80071da:	42bb      	cmp	r3, r7
 80071dc:	460e      	mov	r6, r1
 80071de:	d9f4      	bls.n	80071ca <_printf_i+0x11a>
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d10b      	bne.n	80071fc <_printf_i+0x14c>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	07de      	lsls	r6, r3, #31
 80071e8:	d508      	bpl.n	80071fc <_printf_i+0x14c>
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	6861      	ldr	r1, [r4, #4]
 80071ee:	4299      	cmp	r1, r3
 80071f0:	bfde      	ittt	le
 80071f2:	2330      	movle	r3, #48	; 0x30
 80071f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071fc:	1b52      	subs	r2, r2, r5
 80071fe:	6122      	str	r2, [r4, #16]
 8007200:	f8cd a000 	str.w	sl, [sp]
 8007204:	464b      	mov	r3, r9
 8007206:	aa03      	add	r2, sp, #12
 8007208:	4621      	mov	r1, r4
 800720a:	4640      	mov	r0, r8
 800720c:	f7ff fee2 	bl	8006fd4 <_printf_common>
 8007210:	3001      	adds	r0, #1
 8007212:	d14c      	bne.n	80072ae <_printf_i+0x1fe>
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	b004      	add	sp, #16
 800721a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721e:	4835      	ldr	r0, [pc, #212]	; (80072f4 <_printf_i+0x244>)
 8007220:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007224:	6829      	ldr	r1, [r5, #0]
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	f851 6b04 	ldr.w	r6, [r1], #4
 800722c:	6029      	str	r1, [r5, #0]
 800722e:	061d      	lsls	r5, r3, #24
 8007230:	d514      	bpl.n	800725c <_printf_i+0x1ac>
 8007232:	07df      	lsls	r7, r3, #31
 8007234:	bf44      	itt	mi
 8007236:	f043 0320 	orrmi.w	r3, r3, #32
 800723a:	6023      	strmi	r3, [r4, #0]
 800723c:	b91e      	cbnz	r6, 8007246 <_printf_i+0x196>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	f023 0320 	bic.w	r3, r3, #32
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	2310      	movs	r3, #16
 8007248:	e7b0      	b.n	80071ac <_printf_i+0xfc>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f043 0320 	orr.w	r3, r3, #32
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	2378      	movs	r3, #120	; 0x78
 8007254:	4828      	ldr	r0, [pc, #160]	; (80072f8 <_printf_i+0x248>)
 8007256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800725a:	e7e3      	b.n	8007224 <_printf_i+0x174>
 800725c:	0659      	lsls	r1, r3, #25
 800725e:	bf48      	it	mi
 8007260:	b2b6      	uxthmi	r6, r6
 8007262:	e7e6      	b.n	8007232 <_printf_i+0x182>
 8007264:	4615      	mov	r5, r2
 8007266:	e7bb      	b.n	80071e0 <_printf_i+0x130>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	6826      	ldr	r6, [r4, #0]
 800726c:	6961      	ldr	r1, [r4, #20]
 800726e:	1d18      	adds	r0, r3, #4
 8007270:	6028      	str	r0, [r5, #0]
 8007272:	0635      	lsls	r5, r6, #24
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	d501      	bpl.n	800727c <_printf_i+0x1cc>
 8007278:	6019      	str	r1, [r3, #0]
 800727a:	e002      	b.n	8007282 <_printf_i+0x1d2>
 800727c:	0670      	lsls	r0, r6, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0x1c8>
 8007280:	8019      	strh	r1, [r3, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	4615      	mov	r5, r2
 8007288:	e7ba      	b.n	8007200 <_printf_i+0x150>
 800728a:	682b      	ldr	r3, [r5, #0]
 800728c:	1d1a      	adds	r2, r3, #4
 800728e:	602a      	str	r2, [r5, #0]
 8007290:	681d      	ldr	r5, [r3, #0]
 8007292:	6862      	ldr	r2, [r4, #4]
 8007294:	2100      	movs	r1, #0
 8007296:	4628      	mov	r0, r5
 8007298:	f7f8 ffaa 	bl	80001f0 <memchr>
 800729c:	b108      	cbz	r0, 80072a2 <_printf_i+0x1f2>
 800729e:	1b40      	subs	r0, r0, r5
 80072a0:	6060      	str	r0, [r4, #4]
 80072a2:	6863      	ldr	r3, [r4, #4]
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	2300      	movs	r3, #0
 80072a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ac:	e7a8      	b.n	8007200 <_printf_i+0x150>
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	462a      	mov	r2, r5
 80072b2:	4649      	mov	r1, r9
 80072b4:	4640      	mov	r0, r8
 80072b6:	47d0      	blx	sl
 80072b8:	3001      	adds	r0, #1
 80072ba:	d0ab      	beq.n	8007214 <_printf_i+0x164>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	079b      	lsls	r3, r3, #30
 80072c0:	d413      	bmi.n	80072ea <_printf_i+0x23a>
 80072c2:	68e0      	ldr	r0, [r4, #12]
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	4298      	cmp	r0, r3
 80072c8:	bfb8      	it	lt
 80072ca:	4618      	movlt	r0, r3
 80072cc:	e7a4      	b.n	8007218 <_printf_i+0x168>
 80072ce:	2301      	movs	r3, #1
 80072d0:	4632      	mov	r2, r6
 80072d2:	4649      	mov	r1, r9
 80072d4:	4640      	mov	r0, r8
 80072d6:	47d0      	blx	sl
 80072d8:	3001      	adds	r0, #1
 80072da:	d09b      	beq.n	8007214 <_printf_i+0x164>
 80072dc:	3501      	adds	r5, #1
 80072de:	68e3      	ldr	r3, [r4, #12]
 80072e0:	9903      	ldr	r1, [sp, #12]
 80072e2:	1a5b      	subs	r3, r3, r1
 80072e4:	42ab      	cmp	r3, r5
 80072e6:	dcf2      	bgt.n	80072ce <_printf_i+0x21e>
 80072e8:	e7eb      	b.n	80072c2 <_printf_i+0x212>
 80072ea:	2500      	movs	r5, #0
 80072ec:	f104 0619 	add.w	r6, r4, #25
 80072f0:	e7f5      	b.n	80072de <_printf_i+0x22e>
 80072f2:	bf00      	nop
 80072f4:	08007a95 	.word	0x08007a95
 80072f8:	08007aa6 	.word	0x08007aa6

080072fc <_putc_r>:
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	460d      	mov	r5, r1
 8007300:	4614      	mov	r4, r2
 8007302:	4606      	mov	r6, r0
 8007304:	b118      	cbz	r0, 800730e <_putc_r+0x12>
 8007306:	6983      	ldr	r3, [r0, #24]
 8007308:	b90b      	cbnz	r3, 800730e <_putc_r+0x12>
 800730a:	f7ff fa89 	bl	8006820 <__sinit>
 800730e:	4b1c      	ldr	r3, [pc, #112]	; (8007380 <_putc_r+0x84>)
 8007310:	429c      	cmp	r4, r3
 8007312:	d124      	bne.n	800735e <_putc_r+0x62>
 8007314:	6874      	ldr	r4, [r6, #4]
 8007316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007318:	07d8      	lsls	r0, r3, #31
 800731a:	d405      	bmi.n	8007328 <_putc_r+0x2c>
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	0599      	lsls	r1, r3, #22
 8007320:	d402      	bmi.n	8007328 <_putc_r+0x2c>
 8007322:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007324:	f7ff fb2c 	bl	8006980 <__retarget_lock_acquire_recursive>
 8007328:	68a3      	ldr	r3, [r4, #8]
 800732a:	3b01      	subs	r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	60a3      	str	r3, [r4, #8]
 8007330:	da05      	bge.n	800733e <_putc_r+0x42>
 8007332:	69a2      	ldr	r2, [r4, #24]
 8007334:	4293      	cmp	r3, r2
 8007336:	db1c      	blt.n	8007372 <_putc_r+0x76>
 8007338:	b2eb      	uxtb	r3, r5
 800733a:	2b0a      	cmp	r3, #10
 800733c:	d019      	beq.n	8007372 <_putc_r+0x76>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	6022      	str	r2, [r4, #0]
 8007344:	701d      	strb	r5, [r3, #0]
 8007346:	b2ed      	uxtb	r5, r5
 8007348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800734a:	07da      	lsls	r2, r3, #31
 800734c:	d405      	bmi.n	800735a <_putc_r+0x5e>
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	059b      	lsls	r3, r3, #22
 8007352:	d402      	bmi.n	800735a <_putc_r+0x5e>
 8007354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007356:	f7ff fb14 	bl	8006982 <__retarget_lock_release_recursive>
 800735a:	4628      	mov	r0, r5
 800735c:	bd70      	pop	{r4, r5, r6, pc}
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <_putc_r+0x88>)
 8007360:	429c      	cmp	r4, r3
 8007362:	d101      	bne.n	8007368 <_putc_r+0x6c>
 8007364:	68b4      	ldr	r4, [r6, #8]
 8007366:	e7d6      	b.n	8007316 <_putc_r+0x1a>
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <_putc_r+0x8c>)
 800736a:	429c      	cmp	r4, r3
 800736c:	bf08      	it	eq
 800736e:	68f4      	ldreq	r4, [r6, #12]
 8007370:	e7d1      	b.n	8007316 <_putc_r+0x1a>
 8007372:	4629      	mov	r1, r5
 8007374:	4622      	mov	r2, r4
 8007376:	4630      	mov	r0, r6
 8007378:	f7ff f85a 	bl	8006430 <__swbuf_r>
 800737c:	4605      	mov	r5, r0
 800737e:	e7e3      	b.n	8007348 <_putc_r+0x4c>
 8007380:	08007a44 	.word	0x08007a44
 8007384:	08007a64 	.word	0x08007a64
 8007388:	08007a24 	.word	0x08007a24

0800738c <__sread>:
 800738c:	b510      	push	{r4, lr}
 800738e:	460c      	mov	r4, r1
 8007390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007394:	f000 f8cc 	bl	8007530 <_read_r>
 8007398:	2800      	cmp	r0, #0
 800739a:	bfab      	itete	ge
 800739c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800739e:	89a3      	ldrhlt	r3, [r4, #12]
 80073a0:	181b      	addge	r3, r3, r0
 80073a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073a6:	bfac      	ite	ge
 80073a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073aa:	81a3      	strhlt	r3, [r4, #12]
 80073ac:	bd10      	pop	{r4, pc}

080073ae <__swrite>:
 80073ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b2:	461f      	mov	r7, r3
 80073b4:	898b      	ldrh	r3, [r1, #12]
 80073b6:	05db      	lsls	r3, r3, #23
 80073b8:	4605      	mov	r5, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	4616      	mov	r6, r2
 80073be:	d505      	bpl.n	80073cc <__swrite+0x1e>
 80073c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c4:	2302      	movs	r3, #2
 80073c6:	2200      	movs	r2, #0
 80073c8:	f000 f870 	bl	80074ac <_lseek_r>
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073d6:	81a3      	strh	r3, [r4, #12]
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	4628      	mov	r0, r5
 80073de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073e2:	f000 b817 	b.w	8007414 <_write_r>

080073e6 <__sseek>:
 80073e6:	b510      	push	{r4, lr}
 80073e8:	460c      	mov	r4, r1
 80073ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ee:	f000 f85d 	bl	80074ac <_lseek_r>
 80073f2:	1c43      	adds	r3, r0, #1
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	bf15      	itete	ne
 80073f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80073fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007402:	81a3      	strheq	r3, [r4, #12]
 8007404:	bf18      	it	ne
 8007406:	81a3      	strhne	r3, [r4, #12]
 8007408:	bd10      	pop	{r4, pc}

0800740a <__sclose>:
 800740a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740e:	f000 b81b 	b.w	8007448 <_close_r>
	...

08007414 <_write_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d07      	ldr	r5, [pc, #28]	; (8007434 <_write_r+0x20>)
 8007418:	4604      	mov	r4, r0
 800741a:	4608      	mov	r0, r1
 800741c:	4611      	mov	r1, r2
 800741e:	2200      	movs	r2, #0
 8007420:	602a      	str	r2, [r5, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	f7f9 fb60 	bl	8000ae8 <_write>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_write_r+0x1e>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_write_r+0x1e>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	200012f8 	.word	0x200012f8

08007438 <abort>:
 8007438:	b508      	push	{r3, lr}
 800743a:	2006      	movs	r0, #6
 800743c:	f000 f8b2 	bl	80075a4 <raise>
 8007440:	2001      	movs	r0, #1
 8007442:	f7fa f961 	bl	8001708 <_exit>
	...

08007448 <_close_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4d06      	ldr	r5, [pc, #24]	; (8007464 <_close_r+0x1c>)
 800744c:	2300      	movs	r3, #0
 800744e:	4604      	mov	r4, r0
 8007450:	4608      	mov	r0, r1
 8007452:	602b      	str	r3, [r5, #0]
 8007454:	f7fa f97f 	bl	8001756 <_close>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_close_r+0x1a>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_close_r+0x1a>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	200012f8 	.word	0x200012f8

08007468 <_fstat_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d07      	ldr	r5, [pc, #28]	; (8007488 <_fstat_r+0x20>)
 800746c:	2300      	movs	r3, #0
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	4611      	mov	r1, r2
 8007474:	602b      	str	r3, [r5, #0]
 8007476:	f7fa f97a 	bl	800176e <_fstat>
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	d102      	bne.n	8007484 <_fstat_r+0x1c>
 800747e:	682b      	ldr	r3, [r5, #0]
 8007480:	b103      	cbz	r3, 8007484 <_fstat_r+0x1c>
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	bd38      	pop	{r3, r4, r5, pc}
 8007486:	bf00      	nop
 8007488:	200012f8 	.word	0x200012f8

0800748c <_isatty_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d06      	ldr	r5, [pc, #24]	; (80074a8 <_isatty_r+0x1c>)
 8007490:	2300      	movs	r3, #0
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	602b      	str	r3, [r5, #0]
 8007498:	f7fa f979 	bl	800178e <_isatty>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_isatty_r+0x1a>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_isatty_r+0x1a>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	200012f8 	.word	0x200012f8

080074ac <_lseek_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4d07      	ldr	r5, [pc, #28]	; (80074cc <_lseek_r+0x20>)
 80074b0:	4604      	mov	r4, r0
 80074b2:	4608      	mov	r0, r1
 80074b4:	4611      	mov	r1, r2
 80074b6:	2200      	movs	r2, #0
 80074b8:	602a      	str	r2, [r5, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f7fa f972 	bl	80017a4 <_lseek>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_lseek_r+0x1e>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_lseek_r+0x1e>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	200012f8 	.word	0x200012f8

080074d0 <_realloc_r>:
 80074d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d4:	4680      	mov	r8, r0
 80074d6:	4614      	mov	r4, r2
 80074d8:	460e      	mov	r6, r1
 80074da:	b921      	cbnz	r1, 80074e6 <_realloc_r+0x16>
 80074dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e0:	4611      	mov	r1, r2
 80074e2:	f7fe be1f 	b.w	8006124 <_malloc_r>
 80074e6:	b92a      	cbnz	r2, 80074f4 <_realloc_r+0x24>
 80074e8:	f7fe fdb0 	bl	800604c <_free_r>
 80074ec:	4625      	mov	r5, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f4:	f000 f872 	bl	80075dc <_malloc_usable_size_r>
 80074f8:	4284      	cmp	r4, r0
 80074fa:	4607      	mov	r7, r0
 80074fc:	d802      	bhi.n	8007504 <_realloc_r+0x34>
 80074fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007502:	d812      	bhi.n	800752a <_realloc_r+0x5a>
 8007504:	4621      	mov	r1, r4
 8007506:	4640      	mov	r0, r8
 8007508:	f7fe fe0c 	bl	8006124 <_malloc_r>
 800750c:	4605      	mov	r5, r0
 800750e:	2800      	cmp	r0, #0
 8007510:	d0ed      	beq.n	80074ee <_realloc_r+0x1e>
 8007512:	42bc      	cmp	r4, r7
 8007514:	4622      	mov	r2, r4
 8007516:	4631      	mov	r1, r6
 8007518:	bf28      	it	cs
 800751a:	463a      	movcs	r2, r7
 800751c:	f7fe fd66 	bl	8005fec <memcpy>
 8007520:	4631      	mov	r1, r6
 8007522:	4640      	mov	r0, r8
 8007524:	f7fe fd92 	bl	800604c <_free_r>
 8007528:	e7e1      	b.n	80074ee <_realloc_r+0x1e>
 800752a:	4635      	mov	r5, r6
 800752c:	e7df      	b.n	80074ee <_realloc_r+0x1e>
	...

08007530 <_read_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4d07      	ldr	r5, [pc, #28]	; (8007550 <_read_r+0x20>)
 8007534:	4604      	mov	r4, r0
 8007536:	4608      	mov	r0, r1
 8007538:	4611      	mov	r1, r2
 800753a:	2200      	movs	r2, #0
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	f7fa f8ec 	bl	800171c <_read>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_read_r+0x1e>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_read_r+0x1e>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	200012f8 	.word	0x200012f8

08007554 <_raise_r>:
 8007554:	291f      	cmp	r1, #31
 8007556:	b538      	push	{r3, r4, r5, lr}
 8007558:	4604      	mov	r4, r0
 800755a:	460d      	mov	r5, r1
 800755c:	d904      	bls.n	8007568 <_raise_r+0x14>
 800755e:	2316      	movs	r3, #22
 8007560:	6003      	str	r3, [r0, #0]
 8007562:	f04f 30ff 	mov.w	r0, #4294967295
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800756a:	b112      	cbz	r2, 8007572 <_raise_r+0x1e>
 800756c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007570:	b94b      	cbnz	r3, 8007586 <_raise_r+0x32>
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f830 	bl	80075d8 <_getpid_r>
 8007578:	462a      	mov	r2, r5
 800757a:	4601      	mov	r1, r0
 800757c:	4620      	mov	r0, r4
 800757e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007582:	f000 b817 	b.w	80075b4 <_kill_r>
 8007586:	2b01      	cmp	r3, #1
 8007588:	d00a      	beq.n	80075a0 <_raise_r+0x4c>
 800758a:	1c59      	adds	r1, r3, #1
 800758c:	d103      	bne.n	8007596 <_raise_r+0x42>
 800758e:	2316      	movs	r3, #22
 8007590:	6003      	str	r3, [r0, #0]
 8007592:	2001      	movs	r0, #1
 8007594:	e7e7      	b.n	8007566 <_raise_r+0x12>
 8007596:	2400      	movs	r4, #0
 8007598:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800759c:	4628      	mov	r0, r5
 800759e:	4798      	blx	r3
 80075a0:	2000      	movs	r0, #0
 80075a2:	e7e0      	b.n	8007566 <_raise_r+0x12>

080075a4 <raise>:
 80075a4:	4b02      	ldr	r3, [pc, #8]	; (80075b0 <raise+0xc>)
 80075a6:	4601      	mov	r1, r0
 80075a8:	6818      	ldr	r0, [r3, #0]
 80075aa:	f7ff bfd3 	b.w	8007554 <_raise_r>
 80075ae:	bf00      	nop
 80075b0:	20000070 	.word	0x20000070

080075b4 <_kill_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4d07      	ldr	r5, [pc, #28]	; (80075d4 <_kill_r+0x20>)
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	4611      	mov	r1, r2
 80075c0:	602b      	str	r3, [r5, #0]
 80075c2:	f7fa f891 	bl	80016e8 <_kill>
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	d102      	bne.n	80075d0 <_kill_r+0x1c>
 80075ca:	682b      	ldr	r3, [r5, #0]
 80075cc:	b103      	cbz	r3, 80075d0 <_kill_r+0x1c>
 80075ce:	6023      	str	r3, [r4, #0]
 80075d0:	bd38      	pop	{r3, r4, r5, pc}
 80075d2:	bf00      	nop
 80075d4:	200012f8 	.word	0x200012f8

080075d8 <_getpid_r>:
 80075d8:	f7fa b87e 	b.w	80016d8 <_getpid>

080075dc <_malloc_usable_size_r>:
 80075dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e0:	1f18      	subs	r0, r3, #4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bfbc      	itt	lt
 80075e6:	580b      	ldrlt	r3, [r1, r0]
 80075e8:	18c0      	addlt	r0, r0, r3
 80075ea:	4770      	bx	lr

080075ec <_init>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr

080075f8 <_fini>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	bf00      	nop
 80075fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fe:	bc08      	pop	{r3}
 8007600:	469e      	mov	lr, r3
 8007602:	4770      	bx	lr
