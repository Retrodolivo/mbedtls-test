
mbedtls_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ed34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005bac  0801eec8  0801eec8  0002eec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024a74  08024a74  000400d8  2**0
                  CONTENTS
  4 .ARM          00000008  08024a74  08024a74  00034a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024a7c  08024a7c  000400d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024a7c  08024a7c  00034a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024a80  08024a80  00034a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08024a84  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000400d8  2**0
                  CONTENTS
 10 .bss          00002840  200000d8  200000d8  000400d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002918  20002918  000400d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002aa07  00000000  00000000  00040108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068a5  00000000  00000000  0006ab0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021d8  00000000  00000000  000713b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f50  00000000  00000000  00073590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c974  00000000  00000000  000754e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f5bf  00000000  00000000  000a1e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2554  00000000  00000000  000d1413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c3967  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009994  00000000  00000000  001c39b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801eeac 	.word	0x0801eeac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0801eeac 	.word	0x0801eeac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <char2hex>:
#include "main.h"
#include <stdio.h>

//char to hex function
char char2hex(unsigned char data, unsigned char *r_data)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
	unsigned char temp_data = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	72fb      	strb	r3, [r7, #11]
	int i;
	for(i = 0; i < 2; i++)
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e01d      	b.n	80005d6 <char2hex+0x52>
	{
		temp_data = (data >> (i*4)) & 0x0F;
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	fa42 f303 	asr.w	r3, r2, r3
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	72fb      	strb	r3, [r7, #11]
		if(temp_data < 0x0a)
 80005ac:	7afb      	ldrb	r3, [r7, #11]
 80005ae:	2b09      	cmp	r3, #9
 80005b0:	d807      	bhi.n	80005c2 <char2hex+0x3e>
		{
			r_data[i] = '0' + temp_data;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	7afa      	ldrb	r2, [r7, #11]
 80005ba:	3230      	adds	r2, #48	; 0x30
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	e006      	b.n	80005d0 <char2hex+0x4c>
		}
		else
		{
			r_data[i] = 'A' + temp_data - 0x0a;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	7afa      	ldrb	r2, [r7, #11]
 80005ca:	3237      	adds	r2, #55	; 0x37
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	ddde      	ble.n	800059a <char2hex+0x16>
		}
	}
	if((r_data[0] < '0')||(r_data[1] < '0'))
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b2f      	cmp	r3, #47	; 0x2f
 80005e2:	d904      	bls.n	80005ee <char2hex+0x6a>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b2f      	cmp	r3, #47	; 0x2f
 80005ec:	d801      	bhi.n	80005f2 <char2hex+0x6e>
		return 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e000      	b.n	80005f4 <char2hex+0x70>
	return 0;
 80005f2:	2300      	movs	r3, #0

}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <string_print_Hex>:

//hex debug print function
char string_print_Hex(unsigned char *buf, unsigned int len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
	unsigned int temp_len = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	unsigned char temp_data[2], temp_buf;
	for(temp_len = 0; temp_len < len; temp_len++)
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e029      	b.n	8000668 <string_print_Hex+0x68>
	{
		temp_buf = buf[temp_len];
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	72fb      	strb	r3, [r7, #11]
		if(char2hex(temp_buf, temp_data) != 0)
 800061e:	f107 0208 	add.w	r2, r7, #8
 8000622:	7afb      	ldrb	r3, [r7, #11]
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffac 	bl	8000584 <char2hex>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d004      	beq.n	800063c <string_print_Hex+0x3c>
		{
			printf("trans hex faill len[%d] \r\n", temp_len);
 8000632:	68f9      	ldr	r1, [r7, #12]
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <string_print_Hex+0x80>)
 8000636:	f01d fa15 	bl	801da64 <iprintf>
			continue;
 800063a:	e012      	b.n	8000662 <string_print_Hex+0x62>
		}
		printf("%c%c ",temp_data[1],temp_data[0]);
 800063c:	7a7b      	ldrb	r3, [r7, #9]
 800063e:	4619      	mov	r1, r3
 8000640:	7a3b      	ldrb	r3, [r7, #8]
 8000642:	461a      	mov	r2, r3
 8000644:	480f      	ldr	r0, [pc, #60]	; (8000684 <string_print_Hex+0x84>)
 8000646:	f01d fa0d 	bl	801da64 <iprintf>
		if((((temp_len + 1) % 16) == 0)&&(temp_len != 0))
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	2b00      	cmp	r3, #0
 8000654:	d105      	bne.n	8000662 <string_print_Hex+0x62>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <string_print_Hex+0x62>
			printf("\r\n");
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <string_print_Hex+0x88>)
 800065e:	f01d fa87 	bl	801db70 <puts>
	for(temp_len = 0; temp_len < len; temp_len++)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3d1      	bcc.n	8000614 <string_print_Hex+0x14>
	}
	printf("\r\n");
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <string_print_Hex+0x88>)
 8000672:	f01d fa7d 	bl	801db70 <puts>
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	0801eec8 	.word	0x0801eec8
 8000684:	0801eee4 	.word	0x0801eee4
 8000688:	0801eeec 	.word	0x0801eeec

0800068c <_write>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void print_network_information(void);

int _write(int fd, char *str, int len)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e00b      	b.n	80006b6 <_write+0x2a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	18d1      	adds	r1, r2, r3
 80006a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a8:	2201      	movs	r2, #1
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <_write+0x3c>)
 80006ac:	f003 fc43 	bl	8003f36 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	3301      	adds	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	dbef      	blt.n	800069e <_write+0x12>
	}
	return len;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000248 	.word	0x20000248

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int len, server_fd = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  unsigned int ret = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 ff2d 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f83d 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f9ad 	bl	8000a40 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006e6:	f000 f8b7 	bl	8000858 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006ea:	f000 f8e3 	bl	80008b4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80006ee:	f000 f911 	bl	8000914 <MX_SPI1_Init>
  MX_CRC_Init();
 80006f2:	f000 f89d 	bl	8000830 <MX_CRC_Init>
  MX_SPI2_Init();
 80006f6:	f000 f943 	bl	8000980 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80006fa:	f000 f977 	bl	80009ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello! MBED TLS System \r\n");
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <main+0x7c>)
 8000700:	f01d fa36 	bl	801db70 <puts>
  w5500_init(&w5500);
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <main+0x80>)
 8000706:	f000 fe7f 	bl	8001408 <w5500_init>
  printf("version:%.2x\r\n", getVERSIONR());
 800070a:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 800070e:	f01b ff83 	bl	801c618 <WIZCHIP_READ>
 8000712:	4603      	mov	r3, r0
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <main+0x84>)
 8000718:	f01d f9a4 	bl	801da64 <iprintf>
  print_network_information();
 800071c:	f000 fad0 	bl	8000cc0 <print_network_information>
  /*  initialize ssl context  */
  ret = wiz_tls_init(&tlsContext, &server_fd);
 8000720:	f107 0210 	add.w	r2, r7, #16
 8000724:	463b      	mov	r3, r7
 8000726:	4611      	mov	r1, r2
 8000728:	4618      	mov	r0, r3
 800072a:	f003 ffd1 	bl	80046d0 <wiz_tls_init>
 800072e:	6178      	str	r0, [r7, #20]
  printf("init [%d] \r\n", ret);
 8000730:	6979      	ldr	r1, [r7, #20]
 8000732:	4808      	ldr	r0, [pc, #32]	; (8000754 <main+0x88>)
 8000734:	f01d f996 	bl	801da64 <iprintf>

  /*  Connect to the ssl server  */
  wiz_tls_connect(&tlsContext, SERVER_PORT, gServer_IP);
 8000738:	463b      	mov	r3, r7
 800073a:	4a07      	ldr	r2, [pc, #28]	; (8000758 <main+0x8c>)
 800073c:	f242 21b3 	movw	r1, #8883	; 0x22b3
 8000740:	4618      	mov	r0, r3
 8000742:	f004 f877 	bl	8004834 <wiz_tls_connect>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0x7a>
 8000748:	0801eef0 	.word	0x0801eef0
 800074c:	2000028c 	.word	0x2000028c
 8000750:	0801ef0c 	.word	0x0801ef0c
 8000754:	0801ef1c 	.word	0x0801ef1c
 8000758:	20000000 	.word	0x20000000

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	; 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f01d f87c 	bl	801d868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a27      	ldr	r2, [pc, #156]	; (8000828 <SystemClock_Config+0xcc>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <SystemClock_Config+0xd0>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 ffda 	bl	800279c <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ee:	f000 fad3 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2105      	movs	r1, #5
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fa3b 	bl	8002c8c <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800081c:	f000 fabc 	bl	8000d98 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_CRC_Init+0x20>)
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <MX_CRC_Init+0x24>)
 8000838:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_CRC_Init+0x20>)
 800083c:	f000 fff7 	bl	800182e <HAL_CRC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000846:	f000 faa7 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000f4 	.word	0x200000f4
 8000854:	40023000 	.word	0x40023000

08000858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f001 f99d 	bl	8001bd4 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 fa7a 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000fc 	.word	0x200000fc
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_I2S3_Init+0x54>)
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <MX_I2S3_Init+0x58>)
 80008bc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2S3_Init+0x54>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_I2S3_Init+0x54>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_I2S3_Init+0x54>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_I2S3_Init+0x54>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_I2S3_Init+0x54>)
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <MX_I2S3_Init+0x5c>)
 80008de:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_I2S3_Init+0x54>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_I2S3_Init+0x54>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_I2S3_Init+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_I2S3_Init+0x54>)
 80008f4:	f001 fab2 	bl	8001e5c <HAL_I2S_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008fe:	f000 fa4b 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000150 	.word	0x20000150
 800090c:	40003c00 	.word	0x40003c00
 8000910:	00017700 	.word	0x00017700

08000914 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI1_Init+0x64>)
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_SPI1_Init+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_SPI1_Init+0x64>)
 8000920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SPI1_Init+0x64>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_SPI1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_SPI1_Init+0x64>)
 8000960:	220a      	movs	r2, #10
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_SPI1_Init+0x64>)
 8000966:	f002 fcf1 	bl	800334c <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000970:	f000 fa12 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000198 	.word	0x20000198
 800097c:	40013000 	.word	0x40013000

08000980 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_SPI2_Init+0x64>)
 8000986:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <MX_SPI2_Init+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_SPI2_Init+0x64>)
 800098c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000990:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_SPI2_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_SPI2_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009b4:	2218      	movs	r2, #24
 80009b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009cc:	220a      	movs	r2, #10
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009d2:	f002 fcbb 	bl	800334c <HAL_SPI_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009dc:	f000 f9dc 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200001f0 	.word	0x200001f0
 80009e8:	40003800 	.word	0x40003800

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_USART2_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f003 fa3a 	bl	8003e9c <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 f9b3 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000248 	.word	0x20000248
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	4b93      	ldr	r3, [pc, #588]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a92      	ldr	r2, [pc, #584]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b90      	ldr	r3, [pc, #576]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	4b8c      	ldr	r3, [pc, #560]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a8b      	ldr	r2, [pc, #556]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b89      	ldr	r3, [pc, #548]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b85      	ldr	r3, [pc, #532]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a84      	ldr	r2, [pc, #528]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b82      	ldr	r3, [pc, #520]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b7e      	ldr	r3, [pc, #504]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a7d      	ldr	r2, [pc, #500]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b7b      	ldr	r3, [pc, #492]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	4b77      	ldr	r3, [pc, #476]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a76      	ldr	r2, [pc, #472]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b74      	ldr	r3, [pc, #464]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b70      	ldr	r3, [pc, #448]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a6f      	ldr	r2, [pc, #444]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b6d      	ldr	r3, [pc, #436]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2108      	movs	r1, #8
 8000b02:	486a      	ldr	r0, [pc, #424]	; (8000cac <MX_GPIO_Init+0x26c>)
 8000b04:	f001 f84c 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4868      	ldr	r0, [pc, #416]	; (8000cb0 <MX_GPIO_Init+0x270>)
 8000b0e:	f001 f847 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin|W5500_RST_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000b18:	4866      	ldr	r0, [pc, #408]	; (8000cb4 <MX_GPIO_Init+0x274>)
 8000b1a:	f001 f841 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b24:	4864      	ldr	r0, [pc, #400]	; (8000cb8 <MX_GPIO_Init+0x278>)
 8000b26:	f001 f83b 	bl	8001ba0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	485a      	ldr	r0, [pc, #360]	; (8000cac <MX_GPIO_Init+0x26c>)
 8000b42:	f000 fe91 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4854      	ldr	r0, [pc, #336]	; (8000cb0 <MX_GPIO_Init+0x270>)
 8000b5e:	f000 fe83 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b62:	2308      	movs	r3, #8
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b72:	2305      	movs	r3, #5
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	484c      	ldr	r0, [pc, #304]	; (8000cb0 <MX_GPIO_Init+0x270>)
 8000b7e:	f000 fe73 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4849      	ldr	r0, [pc, #292]	; (8000cbc <MX_GPIO_Init+0x27c>)
 8000b98:	f000 fe66 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4841      	ldr	r0, [pc, #260]	; (8000cb4 <MX_GPIO_Init+0x274>)
 8000bb0:	f000 fe5a 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4838      	ldr	r0, [pc, #224]	; (8000cb4 <MX_GPIO_Init+0x274>)
 8000bd2:	f000 fe49 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4831      	ldr	r0, [pc, #196]	; (8000cb4 <MX_GPIO_Init+0x274>)
 8000bf0:	f000 fe3a 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8000bf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4829      	ldr	r0, [pc, #164]	; (8000cb4 <MX_GPIO_Init+0x274>)
 8000c0e:	f000 fe2b 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c12:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c16:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4823      	ldr	r0, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0x278>)
 8000c2c:	f000 fe1c 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	481d      	ldr	r0, [pc, #116]	; (8000cbc <MX_GPIO_Init+0x27c>)
 8000c46:	f000 fe0f 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000c4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4815      	ldr	r0, [pc, #84]	; (8000cbc <MX_GPIO_Init+0x27c>)
 8000c68:	f000 fdfe 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <MX_GPIO_Init+0x278>)
 8000c80:	f000 fdf2 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c88:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_GPIO_Init+0x26c>)
 8000c9a:	f000 fde5 	bl	8001868 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40020c00 	.word	0x40020c00
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af04      	add	r7, sp, #16
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", w5500.netinfo.mac[0], w5500.netinfo.mac[1], w5500.netinfo.mac[2], w5500.netinfo.mac[3], w5500.netinfo.mac[4], w5500.netinfo.mac[5]);
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <print_network_information+0xc0>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <print_network_information+0xc0>)
 8000cce:	785b      	ldrb	r3, [r3, #1]
 8000cd0:	461c      	mov	r4, r3
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <print_network_information+0xc0>)
 8000cd4:	789b      	ldrb	r3, [r3, #2]
 8000cd6:	461d      	mov	r5, r3
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <print_network_information+0xc0>)
 8000cda:	78db      	ldrb	r3, [r3, #3]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <print_network_information+0xc0>)
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <print_network_information+0xc0>)
 8000ce6:	795b      	ldrb	r3, [r3, #5]
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	9101      	str	r1, [sp, #4]
 8000cec:	9200      	str	r2, [sp, #0]
 8000cee:	462b      	mov	r3, r5
 8000cf0:	4622      	mov	r2, r4
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	4823      	ldr	r0, [pc, #140]	; (8000d84 <print_network_information+0xc4>)
 8000cf6:	f01c feb5 	bl	801da64 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r", w5500.netinfo.ip[0], w5500.netinfo.ip[1], w5500.netinfo.ip[2], w5500.netinfo.ip[3]);
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <print_network_information+0xc0>)
 8000cfc:	799b      	ldrb	r3, [r3, #6]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <print_network_information+0xc0>)
 8000d02:	79db      	ldrb	r3, [r3, #7]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <print_network_information+0xc0>)
 8000d08:	7a1b      	ldrb	r3, [r3, #8]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <print_network_information+0xc0>)
 8000d0e:	7a5b      	ldrb	r3, [r3, #9]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	4603      	mov	r3, r0
 8000d14:	481c      	ldr	r0, [pc, #112]	; (8000d88 <print_network_information+0xc8>)
 8000d16:	f01c fea5 	bl	801da64 <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r", w5500.netinfo.sn[0], w5500.netinfo.sn[1], w5500.netinfo.sn[2], w5500.netinfo.sn[3]);
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <print_network_information+0xc0>)
 8000d1c:	7a9b      	ldrb	r3, [r3, #10]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <print_network_information+0xc0>)
 8000d22:	7adb      	ldrb	r3, [r3, #11]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <print_network_information+0xc0>)
 8000d28:	7b1b      	ldrb	r3, [r3, #12]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <print_network_information+0xc0>)
 8000d2e:	7b5b      	ldrb	r3, [r3, #13]
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	4603      	mov	r3, r0
 8000d34:	4815      	ldr	r0, [pc, #84]	; (8000d8c <print_network_information+0xcc>)
 8000d36:	f01c fe95 	bl	801da64 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r", w5500.netinfo.gw[0], w5500.netinfo.gw[1], w5500.netinfo.gw[2], w5500.netinfo.gw[3]);
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <print_network_information+0xc0>)
 8000d3c:	7b9b      	ldrb	r3, [r3, #14]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <print_network_information+0xc0>)
 8000d42:	7bdb      	ldrb	r3, [r3, #15]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <print_network_information+0xc0>)
 8000d48:	7c1b      	ldrb	r3, [r3, #16]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <print_network_information+0xc0>)
 8000d4e:	7c5b      	ldrb	r3, [r3, #17]
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4603      	mov	r3, r0
 8000d54:	480e      	ldr	r0, [pc, #56]	; (8000d90 <print_network_information+0xd0>)
 8000d56:	f01c fe85 	bl	801da64 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r", w5500.netinfo.dns[0], w5500.netinfo.dns[1], w5500.netinfo.dns[2], w5500.netinfo.dns[3]);
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <print_network_information+0xc0>)
 8000d5c:	7c9b      	ldrb	r3, [r3, #18]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <print_network_information+0xc0>)
 8000d62:	7cdb      	ldrb	r3, [r3, #19]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <print_network_information+0xc0>)
 8000d68:	7d1b      	ldrb	r3, [r3, #20]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <print_network_information+0xc0>)
 8000d6e:	7d5b      	ldrb	r3, [r3, #21]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4603      	mov	r3, r0
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <print_network_information+0xd4>)
 8000d76:	f01c fe75 	bl	801da64 <iprintf>
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d80:	2000028c 	.word	0x2000028c
 8000d84:	0801ef2c 	.word	0x0801ef2c
 8000d88:	0801ef5c 	.word	0x0801ef5c
 8000d8c:	0801ef78 	.word	0x0801ef78
 8000d90:	0801ef94 	.word	0x0801ef94
 8000d94:	0801efb0 	.word	0x0801efb0

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000de2:	2007      	movs	r0, #7
 8000de4:	f000 fcf0 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_CRC_MspInit+0x3c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10d      	bne.n	8000e22 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_CRC_MspInit+0x40>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <HAL_CRC_MspInit+0x40>)
 8000e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <HAL_CRC_MspInit+0x40>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023000 	.word	0x40023000
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_I2C_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12c      	bne.n	8000eb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e76:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7c:	2312      	movs	r3, #18
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <HAL_I2C_MspInit+0x8c>)
 8000e94:	f000 fce8 	bl	8001868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000ea2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020400 	.word	0x40020400

08000ec8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <HAL_I2S_MspInit+0xf0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d15a      	bne.n	8000fae <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000efc:	23c0      	movs	r3, #192	; 0xc0
 8000efe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 f8df 	bl	80030cc <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000f14:	f7ff ff40 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <HAL_I2S_MspInit+0xf4>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <HAL_I2S_MspInit+0xf4>)
 8000f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f26:	6413      	str	r3, [r2, #64]	; 0x40
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <HAL_I2S_MspInit+0xf4>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_I2S_MspInit+0xf4>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <HAL_I2S_MspInit+0xf4>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_I2S_MspInit+0xf4>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_I2S_MspInit+0xf4>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_I2S_MspInit+0xf4>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_I2S_MspInit+0xf4>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <HAL_I2S_MspInit+0xf8>)
 8000f88:	f000 fc6e 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f8c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <HAL_I2S_MspInit+0xfc>)
 8000faa:	f000 fc5d 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3738      	adds	r7, #56	; 0x38
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40003c00 	.word	0x40003c00
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020800 	.word	0x40020800

08000fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a41      	ldr	r2, [pc, #260]	; (80010ec <HAL_SPI_MspInit+0x124>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12c      	bne.n	8001044 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a3f      	ldr	r2, [pc, #252]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8000ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a38      	ldr	r2, [pc, #224]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001022:	23e0      	movs	r3, #224	; 0xe0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001032:	2305      	movs	r3, #5
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	482d      	ldr	r0, [pc, #180]	; (80010f4 <HAL_SPI_MspInit+0x12c>)
 800103e:	f000 fc13 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001042:	e04f      	b.n	80010e4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2b      	ldr	r2, [pc, #172]	; (80010f8 <HAL_SPI_MspInit+0x130>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d14a      	bne.n	80010e4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_SPI_MspInit+0x128>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = W5500_MISO_Pin;
 80010a2:	2304      	movs	r3, #4
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b2:	2305      	movs	r3, #5
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(W5500_MISO_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <HAL_SPI_MspInit+0x134>)
 80010be:	f000 fbd3 	bl	8001868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MOSI_Pin;
 80010c2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d4:	2305      	movs	r3, #5
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <HAL_SPI_MspInit+0x138>)
 80010e0:	f000 fbc2 	bl	8001868 <HAL_GPIO_Init>
}
 80010e4:	bf00      	nop
 80010e6:	3730      	adds	r7, #48	; 0x30
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40013000 	.word	0x40013000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40003800 	.word	0x40003800
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020400 	.word	0x40020400

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <HAL_UART_MspInit+0x84>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12b      	bne.n	800117e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_UART_MspInit+0x88>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <HAL_UART_MspInit+0x88>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0x88>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_UART_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_UART_MspInit+0x88>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_UART_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PRINT_TX_Pin|PRINT_RX_Pin;
 800115e:	230c      	movs	r3, #12
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116e:	2307      	movs	r3, #7
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_UART_MspInit+0x8c>)
 800117a:	f000 fb75 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40004400 	.word	0x40004400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f9fc 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_kill>:

int _kill(int pid, int sig)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001202:	f01c fabf 	bl	801d784 <__errno>
 8001206:	4603      	mov	r3, r0
 8001208:	2216      	movs	r2, #22
 800120a:	601a      	str	r2, [r3, #0]
	return -1;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_exit>:

void _exit (int status)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffe7 	bl	80011f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800122a:	e7fe      	b.n	800122a <_exit+0x12>

0800122c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e00a      	b.n	8001254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800123e:	f3af 8000 	nop.w
 8001242:	4601      	mov	r1, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf0      	blt.n	800123e <_read+0x12>
	}

return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
	return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128e:	605a      	str	r2, [r3, #4]
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_isatty>:

int _isatty(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	return 1;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
	return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f01c fa40 	bl	801d784 <__errno>
 8001304:	4603      	mov	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <_sbrk+0x64>)
 8001320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20020000 	.word	0x20020000
 8001330:	00000400 	.word	0x00000400
 8001334:	200002ac 	.word	0x200002ac
 8001338:	20002918 	.word	0x20002918

0800133c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <w5500_select>:
#include "wizchip.h"
#include "string.h"


static void w5500_select(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800136a:	4802      	ldr	r0, [pc, #8]	; (8001374 <w5500_select+0x14>)
 800136c:	f000 fc18 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40020400 	.word	0x40020400

08001378 <w5500_unselect>:

static void w5500_unselect(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <w5500_unselect+0x14>)
 8001384:	f000 fc0c 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40020400 	.word	0x40020400

08001390 <w5500_read_byte>:

static uint8_t w5500_read_byte(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
    uint8_t rb;
    HAL_SPI_Receive(W5500_SPI_PORT, &rb, 1, HAL_MAX_DELAY);
 8001396:	1df9      	adds	r1, r7, #7
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	2201      	movs	r2, #1
 800139e:	4804      	ldr	r0, [pc, #16]	; (80013b0 <w5500_read_byte+0x20>)
 80013a0:	f002 f999 	bl	80036d6 <HAL_SPI_Receive>
    return rb;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001f0 	.word	0x200001f0

080013b4 <w5500_write_byte>:

static void w5500_write_byte(uint8_t wb)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(W5500_SPI_PORT, &wb, 1, HAL_MAX_DELAY);
 80013be:	1df9      	adds	r1, r7, #7
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	2201      	movs	r2, #1
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <w5500_write_byte+0x20>)
 80013c8:	f002 f849 	bl	800345e <HAL_SPI_Transmit>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200001f0 	.word	0x200001f0

080013d8 <w5500_hw_reset>:

static void w5500_hw_reset(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <w5500_hw_reset+0x2c>)
 80013e4:	f000 fbdc 	bl	8001ba0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80013e8:	200a      	movs	r0, #10
 80013ea:	f000 f917 	bl	800161c <HAL_Delay>
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <w5500_hw_reset+0x2c>)
 80013f6:	f000 fbd3 	bl	8001ba0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80013fa:	200a      	movs	r0, #10
 80013fc:	f000 f90e 	bl	800161c <HAL_Delay>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40020400 	.word	0x40020400

08001408 <w5500_init>:

void w5500_init(w5500chip_t *chip)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	/*link up architecture based spi cntrl funcs to lib funcs*/
	reg_wizchip_cs_cbfunc(w5500_select, w5500_unselect);
 8001410:	492c      	ldr	r1, [pc, #176]	; (80014c4 <w5500_init+0xbc>)
 8001412:	482d      	ldr	r0, [pc, #180]	; (80014c8 <w5500_init+0xc0>)
 8001414:	f01c f804 	bl	801d420 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(w5500_read_byte, w5500_write_byte);
 8001418:	492c      	ldr	r1, [pc, #176]	; (80014cc <w5500_init+0xc4>)
 800141a:	482d      	ldr	r0, [pc, #180]	; (80014d0 <w5500_init+0xc8>)
 800141c:	f01c f826 	bl	801d46c <reg_wizchip_spi_cbfunc>
	w5500_hw_reset();
 8001420:	f7ff ffda 	bl	80013d8 <w5500_hw_reset>
	/*split up rxtx buffer among sockets*/
	chip->rxtx_buff[SOCK_0] = 16;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2210      	movs	r2, #16
 8001428:	75da      	strb	r2, [r3, #23]
	chip->rxtx_buff[SOCK_1] = 0;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	761a      	strb	r2, [r3, #24]
	chip->rxtx_buff[SOCK_2] = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	765a      	strb	r2, [r3, #25]
	chip->rxtx_buff[SOCK_3] = 0;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	769a      	strb	r2, [r3, #26]
	chip->rxtx_buff[SOCK_4] = 0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	76da      	strb	r2, [r3, #27]
	chip->rxtx_buff[SOCK_5] = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	771a      	strb	r2, [r3, #28]
	chip->rxtx_buff[SOCK_6] = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	775a      	strb	r2, [r3, #29]
	chip->rxtx_buff[SOCK_7] = 0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	779a      	strb	r2, [r3, #30]

	uint8_t mac[6] = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef};
 8001454:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <w5500_init+0xcc>)
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800145e:	6018      	str	r0, [r3, #0]
 8001460:	3304      	adds	r3, #4
 8001462:	8019      	strh	r1, [r3, #0]
	memcpy(chip->netinfo.mac, mac, 6);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	461a      	mov	r2, r3
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	6010      	str	r0, [r2, #0]
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	8093      	strh	r3, [r2, #4]

	uint8_t ip[4] = {192, 168, 0, 3};
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <w5500_init+0xd0>)
 8001476:	617b      	str	r3, [r7, #20]
	memcpy(chip->netinfo.ip, ip, 4);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3306      	adds	r3, #6
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	601a      	str	r2, [r3, #0]

	/*setting subnet mask*/
	uint8_t sn[4] = {255, 255, 252, 0};
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <w5500_init+0xd4>)
 8001482:	613b      	str	r3, [r7, #16]
	memcpy(chip->netinfo.sn, sn, 4);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	330a      	adds	r3, #10
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	601a      	str	r2, [r3, #0]

	/*setting gateway*/
	uint8_t gw[4] = {192, 168, 0, 2};
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <w5500_init+0xd8>)
 800148e:	60fb      	str	r3, [r7, #12]
	memcpy(chip->netinfo.gw, gw, 4);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	330e      	adds	r3, #14
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	601a      	str	r2, [r3, #0]

	wizchip_init(chip->rxtx_buff, chip->rxtx_buff);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f103 0217 	add.w	r2, r3, #23
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3317      	adds	r3, #23
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f01c f859 	bl	801d55c <wizchip_init>
	wizchip_setnetinfo(&chip->netinfo);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f01c f8e1 	bl	801d674 <wizchip_setnetinfo>
	/*after wizchip_getnetinfo() netinfo struct should stay the same*/
	wizchip_getnetinfo(&chip->netinfo);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f01c f91d 	bl	801d6f4 <wizchip_getnetinfo>
}
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	08001379 	.word	0x08001379
 80014c8:	08001361 	.word	0x08001361
 80014cc:	080013b5 	.word	0x080013b5
 80014d0:	08001391 	.word	0x08001391
 80014d4:	0801efcc 	.word	0x0801efcc
 80014d8:	0300a8c0 	.word	0x0300a8c0
 80014dc:	00fcffff 	.word	0x00fcffff
 80014e0:	0200a8c0 	.word	0x0200a8c0

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001500:	4c0b      	ldr	r4, [pc, #44]	; (8001530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150e:	f7ff ff15 	bl	800133c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f01c f93d 	bl	801d790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff f8d9 	bl	80006cc <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800151c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001528:	08024a84 	.word	0x08024a84
  ldr r2, =_sbss
 800152c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001530:	20002918 	.word	0x20002918

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_Init+0x40>)
 8001542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_Init+0x40>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x40>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f931 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	2000      	movs	r0, #0
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fc1a 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f93b 	bl	8001816 <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 f911 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000004 	.word	0x20000004
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	2000000c 	.word	0x2000000c
 8001600:	200002b0 	.word	0x200002b0

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	200002b0 	.word	0x200002b0

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000000c 	.word	0x2000000c

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff47 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f0:	f7ff ff5c 	bl	80016ac <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff8e 	bl	800171c <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5d 	bl	80016c8 <__NVIC_SetPriority>
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffb0 	bl	8001784 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e00e      	b.n	800185e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	795b      	ldrb	r3, [r3, #5]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff facf 	bl	8000df4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e16b      	b.n	8001b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	429a      	cmp	r2, r3
 800189e:	f040 815a 	bne.w	8001b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d005      	beq.n	80018ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d130      	bne.n	800191c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 0201 	and.w	r2, r3, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b03      	cmp	r3, #3
 8001926:	d017      	beq.n	8001958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d123      	bne.n	80019ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	69b9      	ldr	r1, [r7, #24]
 80019a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0203 	and.w	r2, r3, #3
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80b4 	beq.w	8001b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a5f      	ldr	r2, [pc, #380]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0a:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x314>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02b      	beq.n	8001a8e <HAL_GPIO_Init+0x226>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x318>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d025      	beq.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x31c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <HAL_GPIO_Init+0x21e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x21a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x216>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <HAL_GPIO_Init+0x328>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4c      	ldr	r2, [pc, #304]	; (8001b94 <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x20e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_GPIO_Init+0x330>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x20a>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00e      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00c      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e00a      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a32      	ldr	r2, [pc, #200]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f ae90 	bls.w	8001884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e12b      	b.n	8001e3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff f91c 	bl	8000e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2224      	movs	r2, #36	; 0x24
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c38:	f001 fa20 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 8001c3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a81      	ldr	r2, [pc, #516]	; (8001e48 <HAL_I2C_Init+0x274>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d807      	bhi.n	8001c58 <HAL_I2C_Init+0x84>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4a80      	ldr	r2, [pc, #512]	; (8001e4c <HAL_I2C_Init+0x278>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	bf94      	ite	ls
 8001c50:	2301      	movls	r3, #1
 8001c52:	2300      	movhi	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e006      	b.n	8001c66 <HAL_I2C_Init+0x92>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a7d      	ldr	r2, [pc, #500]	; (8001e50 <HAL_I2C_Init+0x27c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bf94      	ite	ls
 8001c60:	2301      	movls	r3, #1
 8001c62:	2300      	movhi	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0e7      	b.n	8001e3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4a78      	ldr	r2, [pc, #480]	; (8001e54 <HAL_I2C_Init+0x280>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0c9b      	lsrs	r3, r3, #18
 8001c78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a6a      	ldr	r2, [pc, #424]	; (8001e48 <HAL_I2C_Init+0x274>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d802      	bhi.n	8001ca8 <HAL_I2C_Init+0xd4>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	e009      	b.n	8001cbc <HAL_I2C_Init+0xe8>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	4a69      	ldr	r2, [pc, #420]	; (8001e58 <HAL_I2C_Init+0x284>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	099b      	lsrs	r3, r3, #6
 8001cba:	3301      	adds	r3, #1
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	495c      	ldr	r1, [pc, #368]	; (8001e48 <HAL_I2C_Init+0x274>)
 8001cd8:	428b      	cmp	r3, r1
 8001cda:	d819      	bhi.n	8001d10 <HAL_I2C_Init+0x13c>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e59      	subs	r1, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cea:	1c59      	adds	r1, r3, #1
 8001cec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cf0:	400b      	ands	r3, r1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00a      	beq.n	8001d0c <HAL_I2C_Init+0x138>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1e59      	subs	r1, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0a:	e051      	b.n	8001db0 <HAL_I2C_Init+0x1dc>
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	e04f      	b.n	8001db0 <HAL_I2C_Init+0x1dc>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d111      	bne.n	8001d3c <HAL_I2C_Init+0x168>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e58      	subs	r0, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	e012      	b.n	8001d62 <HAL_I2C_Init+0x18e>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1e58      	subs	r0, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	0099      	lsls	r1, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_I2C_Init+0x196>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e022      	b.n	8001db0 <HAL_I2C_Init+0x1dc>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10e      	bne.n	8001d90 <HAL_I2C_Init+0x1bc>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1e58      	subs	r0, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	440b      	add	r3, r1
 8001d80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8e:	e00f      	b.n	8001db0 <HAL_I2C_Init+0x1dc>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e58      	subs	r0, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	0099      	lsls	r1, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	6809      	ldr	r1, [r1, #0]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69da      	ldr	r2, [r3, #28]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6911      	ldr	r1, [r2, #16]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68d2      	ldr	r2, [r2, #12]
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	000186a0 	.word	0x000186a0
 8001e4c:	001e847f 	.word	0x001e847f
 8001e50:	003d08ff 	.word	0x003d08ff
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	10624dd3 	.word	0x10624dd3

08001e5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e128      	b.n	80020c0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a90      	ldr	r2, [pc, #576]	; (80020c8 <HAL_I2S_Init+0x26c>)
 8001e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff f81d 	bl	8000ec8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ea4:	f023 030f 	bic.w	r3, r3, #15
 8001ea8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d060      	beq.n	8001f7c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ec2:	2310      	movs	r3, #16
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e001      	b.n	8001ecc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d802      	bhi.n	8001eda <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f001 f9d8 	bl	8003290 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ee0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eea:	d125      	bne.n	8001f38 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	3305      	adds	r3, #5
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	e01f      	b.n	8001f56 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	461a      	mov	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	3305      	adds	r3, #5
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	e00e      	b.n	8001f56 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	461a      	mov	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	3305      	adds	r3, #5
 8001f54:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4a5c      	ldr	r2, [pc, #368]	; (80020cc <HAL_I2S_Init+0x270>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	08db      	lsrs	r3, r3, #3
 8001f60:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	e003      	b.n	8001f84 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d902      	bls.n	8001f90 <HAL_I2S_Init+0x134>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	2bff      	cmp	r3, #255	; 0xff
 8001f8e:	d907      	bls.n	8001fa0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	f043 0210 	orr.w	r2, r3, #16
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e08f      	b.n	80020c0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	ea42 0103 	orr.w	r1, r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001fbe:	f023 030f 	bic.w	r3, r3, #15
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6851      	ldr	r1, [r2, #4]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6892      	ldr	r2, [r2, #8]
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68d2      	ldr	r2, [r2, #12]
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6992      	ldr	r2, [r2, #24]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d161      	bne.n	80020b0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_I2S_Init+0x274>)
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a37      	ldr	r2, [pc, #220]	; (80020d4 <HAL_I2S_Init+0x278>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_I2S_Init+0x1a4>
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_I2S_Init+0x27c>)
 8001ffe:	e001      	b.n	8002004 <HAL_I2S_Init+0x1a8>
 8002000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4932      	ldr	r1, [pc, #200]	; (80020d4 <HAL_I2S_Init+0x278>)
 800200c:	428a      	cmp	r2, r1
 800200e:	d101      	bne.n	8002014 <HAL_I2S_Init+0x1b8>
 8002010:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <HAL_I2S_Init+0x27c>)
 8002012:	e001      	b.n	8002018 <HAL_I2S_Init+0x1bc>
 8002014:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002018:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800201c:	f023 030f 	bic.w	r3, r3, #15
 8002020:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <HAL_I2S_Init+0x278>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_I2S_Init+0x1d4>
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_I2S_Init+0x27c>)
 800202e:	e001      	b.n	8002034 <HAL_I2S_Init+0x1d8>
 8002030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002034:	2202      	movs	r2, #2
 8002036:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <HAL_I2S_Init+0x278>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_I2S_Init+0x1ea>
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_I2S_Init+0x27c>)
 8002044:	e001      	b.n	800204a <HAL_I2S_Init+0x1ee>
 8002046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002056:	d003      	beq.n	8002060 <HAL_I2S_Init+0x204>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d103      	bne.n	8002068 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e001      	b.n	800206c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002076:	4313      	orrs	r3, r2
 8002078:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002080:	4313      	orrs	r3, r2
 8002082:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800208a:	4313      	orrs	r3, r2
 800208c:	b29a      	uxth	r2, r3
 800208e:	897b      	ldrh	r3, [r7, #10]
 8002090:	4313      	orrs	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002098:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <HAL_I2S_Init+0x278>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_I2S_Init+0x24c>
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_I2S_Init+0x27c>)
 80020a6:	e001      	b.n	80020ac <HAL_I2S_Init+0x250>
 80020a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ac:	897a      	ldrh	r2, [r7, #10]
 80020ae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	080021d3 	.word	0x080021d3
 80020cc:	cccccccd 	.word	0xcccccccd
 80020d0:	080022e9 	.word	0x080022e9
 80020d4:	40003800 	.word	0x40003800
 80020d8:	40003400 	.word	0x40003400

080020dc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	881a      	ldrh	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	1c9a      	adds	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10e      	bne.n	800216c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800215c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffb8 	bl	80020dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	b292      	uxth	r2, r2
 8002188:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	1c9a      	adds	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10e      	bne.n	80021ca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff93 	bl	80020f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d13a      	bne.n	8002264 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d109      	bne.n	800220c <I2S_IRQHandler+0x3a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d102      	bne.n	800220c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffb4 	bl	8002174 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	2b40      	cmp	r3, #64	; 0x40
 8002214:	d126      	bne.n	8002264 <I2S_IRQHandler+0x92>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b20      	cmp	r3, #32
 8002222:	d11f      	bne.n	8002264 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002232:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0202 	orr.w	r2, r3, #2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff50 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b03      	cmp	r3, #3
 800226e:	d136      	bne.n	80022de <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b02      	cmp	r3, #2
 8002278:	d109      	bne.n	800228e <I2S_IRQHandler+0xbc>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b80      	cmp	r3, #128	; 0x80
 8002286:	d102      	bne.n	800228e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff45 	bl	8002118 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b08      	cmp	r3, #8
 8002296:	d122      	bne.n	80022de <I2S_IRQHandler+0x10c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d11b      	bne.n	80022de <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022b4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f043 0204 	orr.w	r2, r3, #4
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff13 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a92      	ldr	r2, [pc, #584]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002302:	4b92      	ldr	r3, [pc, #584]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002304:	e001      	b.n	800230a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002306:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a8b      	ldr	r2, [pc, #556]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002320:	4b8a      	ldr	r3, [pc, #552]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002322:	e001      	b.n	8002328 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002334:	d004      	beq.n	8002340 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 8099 	bne.w	8002472 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f925 	bl	80025a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d107      	bne.n	8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f9c8 	bl	8002704 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237a:	2b40      	cmp	r3, #64	; 0x40
 800237c:	d13a      	bne.n	80023f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d035      	beq.n	80023f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6e      	ldr	r2, [pc, #440]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002392:	4b6e      	ldr	r3, [pc, #440]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002394:	e001      	b.n	800239a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002396:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4969      	ldr	r1, [pc, #420]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023a2:	428b      	cmp	r3, r1
 80023a4:	d101      	bne.n	80023aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80023a6:	4b69      	ldr	r3, [pc, #420]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023a8:	e001      	b.n	80023ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80023aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fe88 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	f040 80c3 	bne.w	8002586 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80bd 	beq.w	8002586 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800241a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a49      	ldr	r2, [pc, #292]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002426:	4b49      	ldr	r3, [pc, #292]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002428:	e001      	b.n	800242e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800242a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4944      	ldr	r1, [pc, #272]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002436:	428b      	cmp	r3, r1
 8002438:	d101      	bne.n	800243e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800243a:	4b44      	ldr	r3, [pc, #272]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800243c:	e001      	b.n	8002442 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800243e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002442:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002446:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f043 0204 	orr.w	r2, r3, #4
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fe4a 	bl	8002104 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002470:	e089      	b.n	8002586 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d107      	bne.n	800248c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8be 	bl	8002608 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8fd 	bl	80026a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d12f      	bne.n	8002510 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d02a      	beq.n	8002510 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024d6:	e001      	b.n	80024dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80024d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4919      	ldr	r1, [pc, #100]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d101      	bne.n	80024ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024ea:	e001      	b.n	80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80024ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fdfa 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b08      	cmp	r3, #8
 8002518:	d136      	bne.n	8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d031      	beq.n	8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002530:	e001      	b.n	8002536 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4902      	ldr	r1, [pc, #8]	; (8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800253e:	428b      	cmp	r3, r1
 8002540:	d106      	bne.n	8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002542:	4b02      	ldr	r3, [pc, #8]	; (800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002544:	e006      	b.n	8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002546:	bf00      	nop
 8002548:	40003800 	.word	0x40003800
 800254c:	40003400 	.word	0x40003400
 8002550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002554:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002558:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002568:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f043 0204 	orr.w	r2, r3, #4
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fdc0 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002584:	e000      	b.n	8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002586:	bf00      	nop
}
 8002588:	bf00      	nop
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	1c99      	adds	r1, r3, #2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6251      	str	r1, [r2, #36]	; 0x24
 80025b6:	881a      	ldrh	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d113      	bne.n	80025fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d106      	bne.n	80025fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ffc9 	bl	8002590 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	1c99      	adds	r1, r3, #2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6251      	str	r1, [r2, #36]	; 0x24
 800261a:	8819      	ldrh	r1, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <I2SEx_TxISR_I2SExt+0x90>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <I2SEx_TxISR_I2SExt+0x22>
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <I2SEx_TxISR_I2SExt+0x94>)
 8002628:	e001      	b.n	800262e <I2SEx_TxISR_I2SExt+0x26>
 800262a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800262e:	460a      	mov	r2, r1
 8002630:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d121      	bne.n	800268e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <I2SEx_TxISR_I2SExt+0x90>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <I2SEx_TxISR_I2SExt+0x50>
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <I2SEx_TxISR_I2SExt+0x94>)
 8002656:	e001      	b.n	800265c <I2SEx_TxISR_I2SExt+0x54>
 8002658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	490d      	ldr	r1, [pc, #52]	; (8002698 <I2SEx_TxISR_I2SExt+0x90>)
 8002664:	428b      	cmp	r3, r1
 8002666:	d101      	bne.n	800266c <I2SEx_TxISR_I2SExt+0x64>
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <I2SEx_TxISR_I2SExt+0x94>)
 800266a:	e001      	b.n	8002670 <I2SEx_TxISR_I2SExt+0x68>
 800266c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002670:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002674:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff81 	bl	8002590 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40003800 	.word	0x40003800
 800269c:	40003400 	.word	0x40003400

080026a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68d8      	ldr	r0, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	1c99      	adds	r1, r3, #2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80026b8:	b282      	uxth	r2, r0
 80026ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d113      	bne.n	80026fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ff4a 	bl	8002590 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a20      	ldr	r2, [pc, #128]	; (8002794 <I2SEx_RxISR_I2SExt+0x90>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <I2SEx_RxISR_I2SExt+0x16>
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <I2SEx_RxISR_I2SExt+0x94>)
 8002718:	e001      	b.n	800271e <I2SEx_RxISR_I2SExt+0x1a>
 800271a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800271e:	68d8      	ldr	r0, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	1c99      	adds	r1, r3, #2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	62d1      	str	r1, [r2, #44]	; 0x2c
 800272a:	b282      	uxth	r2, r0
 800272c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d121      	bne.n	800278a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <I2SEx_RxISR_I2SExt+0x90>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <I2SEx_RxISR_I2SExt+0x50>
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <I2SEx_RxISR_I2SExt+0x94>)
 8002752:	e001      	b.n	8002758 <I2SEx_RxISR_I2SExt+0x54>
 8002754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	490d      	ldr	r1, [pc, #52]	; (8002794 <I2SEx_RxISR_I2SExt+0x90>)
 8002760:	428b      	cmp	r3, r1
 8002762:	d101      	bne.n	8002768 <I2SEx_RxISR_I2SExt+0x64>
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <I2SEx_RxISR_I2SExt+0x94>)
 8002766:	e001      	b.n	800276c <I2SEx_RxISR_I2SExt+0x68>
 8002768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800276c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002770:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d106      	bne.n	800278a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff03 	bl	8002590 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40003800 	.word	0x40003800
 8002798:	40003400 	.word	0x40003400

0800279c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e267      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d075      	beq.n	80028a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ba:	4b88      	ldr	r3, [pc, #544]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d00c      	beq.n	80027e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c6:	4b85      	ldr	r3, [pc, #532]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d112      	bne.n	80027f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	4b82      	ldr	r3, [pc, #520]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027de:	d10b      	bne.n	80027f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	4b7e      	ldr	r3, [pc, #504]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d05b      	beq.n	80028a4 <HAL_RCC_OscConfig+0x108>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d157      	bne.n	80028a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e242      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d106      	bne.n	8002810 <HAL_RCC_OscConfig+0x74>
 8002802:	4b76      	ldr	r3, [pc, #472]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a75      	ldr	r2, [pc, #468]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e01d      	b.n	800284c <HAL_RCC_OscConfig+0xb0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x98>
 800281a:	4b70      	ldr	r3, [pc, #448]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6f      	ldr	r2, [pc, #444]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6c      	ldr	r2, [pc, #432]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0xb0>
 8002834:	4b69      	ldr	r3, [pc, #420]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a68      	ldr	r2, [pc, #416]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b66      	ldr	r3, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fed6 	bl	8001604 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285c:	f7fe fed2 	bl	8001604 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e207      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0xc0>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe fec2 	bl	8001604 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe febe 	bl	8001604 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1f3      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	4b51      	ldr	r3, [pc, #324]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0xe8>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d063      	beq.n	800297a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028be:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d11c      	bne.n	8002904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b44      	ldr	r3, [pc, #272]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d116      	bne.n	8002904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	4b41      	ldr	r3, [pc, #260]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x152>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e1c7      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4937      	ldr	r1, [pc, #220]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	e03a      	b.n	800297a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe fe77 	bl	8001604 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291a:	f7fe fe73 	bl	8001604 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1a8      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292c:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4925      	ldr	r1, [pc, #148]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
 800294c:	e015      	b.n	800297a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fe56 	bl	8001604 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295c:	f7fe fe52 	bl	8001604 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e187      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d036      	beq.n	80029f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_RCC_OscConfig+0x248>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe fe36 	bl	8001604 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299c:	f7fe fe32 	bl	8001604 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e167      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x200>
 80029ba:	e01b      	b.n	80029f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_OscConfig+0x248>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fe1f 	bl	8001604 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	e00e      	b.n	80029e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ca:	f7fe fe1b 	bl	8001604 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d907      	bls.n	80029e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e150      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
 80029dc:	40023800 	.word	0x40023800
 80029e0:	42470000 	.word	0x42470000
 80029e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	4b88      	ldr	r3, [pc, #544]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ea      	bne.n	80029ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8097 	beq.w	8002b30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a06:	4b81      	ldr	r3, [pc, #516]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	4b7d      	ldr	r3, [pc, #500]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a7c      	ldr	r2, [pc, #496]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b77      	ldr	r3, [pc, #476]	; (8002c10 <HAL_RCC_OscConfig+0x474>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d118      	bne.n	8002a70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3e:	4b74      	ldr	r3, [pc, #464]	; (8002c10 <HAL_RCC_OscConfig+0x474>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a73      	ldr	r2, [pc, #460]	; (8002c10 <HAL_RCC_OscConfig+0x474>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fddb 	bl	8001604 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe fdd7 	bl	8001604 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e10c      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a64:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_OscConfig+0x474>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x2ea>
 8002a78:	4b64      	ldr	r3, [pc, #400]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a63      	ldr	r2, [pc, #396]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x324>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x30c>
 8002a8e:	4b5f      	ldr	r3, [pc, #380]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a5e      	ldr	r2, [pc, #376]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x324>
 8002aa8:	4b58      	ldr	r3, [pc, #352]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab4:	4b55      	ldr	r3, [pc, #340]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a54      	ldr	r2, [pc, #336]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002aba:	f023 0304 	bic.w	r3, r3, #4
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fd9c 	bl	8001604 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fd98 	bl	8001604 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0cb      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae6:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0ee      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x334>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af4:	f7fe fd86 	bl	8001604 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fe fd82 	bl	8001604 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e0b5      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ee      	bne.n	8002afc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b24:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	4a38      	ldr	r2, [pc, #224]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80a1 	beq.w	8002c7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b3a:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d05c      	beq.n	8002c00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d141      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_RCC_OscConfig+0x478>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fd56 	bl	8001604 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fd52 	bl	8001604 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e087      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	019b      	lsls	r3, r3, #6
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	3b01      	subs	r3, #1
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	491b      	ldr	r1, [pc, #108]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x478>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fd2b 	bl	8001604 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe fd27 	bl	8001604 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e05c      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x416>
 8002bd0:	e054      	b.n	8002c7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCC_OscConfig+0x478>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fd14 	bl	8001604 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe fd10 	bl	8001604 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e045      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x444>
 8002bfe:	e03d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e038      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40007000 	.word	0x40007000
 8002c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_RCC_OscConfig+0x4ec>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d028      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d121      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d11a      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c48:	4013      	ands	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d111      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	3b01      	subs	r3, #1
 8002c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d107      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0cc      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d90c      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b8      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce0:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d04:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	494d      	ldr	r1, [pc, #308]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d044      	beq.n	8002dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d119      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e067      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d6a:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 0203 	bic.w	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4934      	ldr	r1, [pc, #208]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d7c:	f7fe fc42 	bl	8001604 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d84:	f7fe fc3e 	bl	8001604 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e04f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 020c 	and.w	r2, r3, #12
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d1eb      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d20c      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e032      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4916      	ldr	r1, [pc, #88]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e12:	f000 f821 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e16:	4602      	mov	r2, r0
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	490a      	ldr	r1, [pc, #40]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002e24:	5ccb      	ldrb	r3, [r1, r3]
 8002e26:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fba2 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023c00 	.word	0x40023c00
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08023bec 	.word	0x08023bec
 8002e50:	20000004 	.word	0x20000004
 8002e54:	20000008 	.word	0x20000008

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e5c:	b094      	sub	sp, #80	; 0x50
 8002e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	647b      	str	r3, [r7, #68]	; 0x44
 8002e64:	2300      	movs	r3, #0
 8002e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e68:	2300      	movs	r3, #0
 8002e6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e70:	4b79      	ldr	r3, [pc, #484]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d00d      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x40>
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	f200 80e1 	bhi.w	8003044 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x34>
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e8a:	e0db      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e8c:	4b73      	ldr	r3, [pc, #460]	; (800305c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e90:	e0db      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e92:	4b73      	ldr	r3, [pc, #460]	; (8003060 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e96:	e0d8      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea2:	4b6d      	ldr	r3, [pc, #436]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d063      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eae:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	099b      	lsrs	r3, r3, #6
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	0159      	lsls	r1, r3, #5
 8002ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002edc:	0150      	lsls	r0, r2, #5
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	1a51      	subs	r1, r2, r1
 8002ee6:	6139      	str	r1, [r7, #16]
 8002ee8:	4629      	mov	r1, r5
 8002eea:	eb63 0301 	sbc.w	r3, r3, r1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002efc:	4659      	mov	r1, fp
 8002efe:	018b      	lsls	r3, r1, #6
 8002f00:	4651      	mov	r1, sl
 8002f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f06:	4651      	mov	r1, sl
 8002f08:	018a      	lsls	r2, r1, #6
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f10:	4659      	mov	r1, fp
 8002f12:	eb63 0901 	sbc.w	r9, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	eb18 0303 	adds.w	r3, r8, r3
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	462b      	mov	r3, r5
 8002f38:	eb49 0303 	adc.w	r3, r9, r3
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	024b      	lsls	r3, r1, #9
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f54:	4621      	mov	r1, r4
 8002f56:	024a      	lsls	r2, r1, #9
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5e:	2200      	movs	r2, #0
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f68:	f7fd f98a 	bl	8000280 <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4613      	mov	r3, r2
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f74:	e058      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	099b      	lsrs	r3, r3, #6
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	4611      	mov	r1, r2
 8002f82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f86:	623b      	str	r3, [r7, #32]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f90:	4642      	mov	r2, r8
 8002f92:	464b      	mov	r3, r9
 8002f94:	f04f 0000 	mov.w	r0, #0
 8002f98:	f04f 0100 	mov.w	r1, #0
 8002f9c:	0159      	lsls	r1, r3, #5
 8002f9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa2:	0150      	lsls	r0, r2, #5
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4641      	mov	r1, r8
 8002faa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fae:	4649      	mov	r1, r9
 8002fb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fcc:	eb63 050b 	sbc.w	r5, r3, fp
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	00eb      	lsls	r3, r5, #3
 8002fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fde:	00e2      	lsls	r2, r4, #3
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	18e3      	adds	r3, r4, r3
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	464b      	mov	r3, r9
 8002fec:	eb45 0303 	adc.w	r3, r5, r3
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ffe:	4629      	mov	r1, r5
 8003000:	028b      	lsls	r3, r1, #10
 8003002:	4621      	mov	r1, r4
 8003004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003008:	4621      	mov	r1, r4
 800300a:	028a      	lsls	r2, r1, #10
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003012:	2200      	movs	r2, #0
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	61fa      	str	r2, [r7, #28]
 8003018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301c:	f7fd f930 	bl	8000280 <__aeabi_uldivmod>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4613      	mov	r3, r2
 8003026:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	3301      	adds	r3, #1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003042:	e002      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_RCC_GetSysClockFreq+0x204>)
 8003046:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800304c:	4618      	mov	r0, r3
 800304e:	3750      	adds	r7, #80	; 0x50
 8003050:	46bd      	mov	sp, r7
 8003052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800
 800305c:	00f42400 	.word	0x00f42400
 8003060:	007a1200 	.word	0x007a1200

08003064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_RCC_GetHCLKFreq+0x14>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000004 	.word	0x20000004

0800307c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003080:	f7ff fff0 	bl	8003064 <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0a9b      	lsrs	r3, r3, #10
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	08023bfc 	.word	0x08023bfc

080030a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a8:	f7ff ffdc 	bl	8003064 <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0b5b      	lsrs	r3, r3, #13
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08023bfc 	.word	0x08023bfc

080030cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d035      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030f4:	4b62      	ldr	r3, [pc, #392]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030fa:	f7fe fa83 	bl	8001604 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003102:	f7fe fa7f 	bl	8001604 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0b0      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003114:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	019a      	lsls	r2, r3, #6
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	071b      	lsls	r3, r3, #28
 800312c:	4955      	ldr	r1, [pc, #340]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003134:	4b52      	ldr	r3, [pc, #328]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800313a:	f7fe fa63 	bl	8001604 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003142:	f7fe fa5f 	bl	8001604 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e090      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003154:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8083 	beq.w	8003274 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	4b44      	ldr	r3, [pc, #272]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a43      	ldr	r2, [pc, #268]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800318a:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a3e      	ldr	r2, [pc, #248]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003196:	f7fe fa35 	bl	8001604 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800319e:	f7fe fa31 	bl	8001604 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e062      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031b0:	4b35      	ldr	r3, [pc, #212]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031bc:	4b31      	ldr	r3, [pc, #196]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02f      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d028      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031ea:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031f0:	4a24      	ldr	r2, [pc, #144]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d114      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe f9ff 	bl	8001604 <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe f9fb 	bl	8001604 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e02a      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ee      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003238:	d10d      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800324a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324e:	490d      	ldr	r1, [pc, #52]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]
 8003254:	e005      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800325c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003260:	6093      	str	r3, [r2, #8]
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003264:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326e:	4905      	ldr	r1, [pc, #20]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	42470068 	.word	0x42470068
 8003284:	40023800 	.word	0x40023800
 8003288:	40007000 	.word	0x40007000
 800328c:	42470e40 	.word	0x42470e40

08003290 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d13e      	bne.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d12f      	bne.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80032c4:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80032c6:	617b      	str	r3, [r7, #20]
          break;
 80032c8:	e02f      	b.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d6:	d108      	bne.n	80032ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	e007      	b.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003314:	0f1b      	lsrs	r3, r3, #28
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
          break;
 8003322:	e002      	b.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
          break;
 8003328:	bf00      	nop
        }
      }
      break;
 800332a:	bf00      	nop
    }
  }
  return frequency;
 800332c:	697b      	ldr	r3, [r7, #20]
}
 800332e:	4618      	mov	r0, r3
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800
 8003340:	00bb8000 	.word	0x00bb8000
 8003344:	007a1200 	.word	0x007a1200
 8003348:	00f42400 	.word	0x00f42400

0800334c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07b      	b.n	8003456 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800336e:	d009      	beq.n	8003384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	61da      	str	r2, [r3, #28]
 8003376:	e005      	b.n	8003384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fe12 	bl	8000fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	ea42 0103 	orr.w	r1, r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	f003 0104 	and.w	r1, r3, #4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	f003 0210 	and.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003444:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_SPI_Transmit+0x22>
 800347c:	2302      	movs	r3, #2
 800347e:	e126      	b.n	80036ce <HAL_SPI_Transmit+0x270>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003488:	f7fe f8bc 	bl	8001604 <HAL_GetTick>
 800348c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034a2:	e10b      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_SPI_Transmit+0x52>
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034b4:	e102      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2203      	movs	r2, #3
 80034ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fc:	d10f      	bne.n	800351e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800351c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003544:	d14b      	bne.n	80035de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0xf6>
 800354e:	8afb      	ldrh	r3, [r7, #22]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d13e      	bne.n	80035d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003578:	e02b      	b.n	80035d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d112      	bne.n	80035ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80035ac:	e011      	b.n	80035d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ae:	f7fe f829 	bl	8001604 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d803      	bhi.n	80035c6 <HAL_SPI_Transmit+0x168>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x16e>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035d0:	e074      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ce      	bne.n	800357a <HAL_SPI_Transmit+0x11c>
 80035dc:	e04c      	b.n	8003678 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x18e>
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d140      	bne.n	800366e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003612:	e02c      	b.n	800366e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d113      	bne.n	800364a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	86da      	strh	r2, [r3, #54]	; 0x36
 8003648:	e011      	b.n	800366e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800364a:	f7fd ffdb 	bl	8001604 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d803      	bhi.n	8003662 <HAL_SPI_Transmit+0x204>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d102      	bne.n	8003668 <HAL_SPI_Transmit+0x20a>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800366c:	e026      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1cd      	bne.n	8003614 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fbcb 	bl	8003e18 <SPI_EndRxTxTransaction>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e000      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80036ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b088      	sub	sp, #32
 80036da:	af02      	add	r7, sp, #8
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f2:	d112      	bne.n	800371a <HAL_SPI_Receive+0x44>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10e      	bne.n	800371a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2204      	movs	r2, #4
 8003700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003704:	88fa      	ldrh	r2, [r7, #6]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f8f1 	bl	80038f8 <HAL_SPI_TransmitReceive>
 8003716:	4603      	mov	r3, r0
 8003718:	e0ea      	b.n	80038f0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_SPI_Receive+0x52>
 8003724:	2302      	movs	r3, #2
 8003726:	e0e3      	b.n	80038f0 <HAL_SPI_Receive+0x21a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003730:	f7fd ff68 	bl	8001604 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d002      	beq.n	8003748 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003742:	2302      	movs	r3, #2
 8003744:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003746:	e0ca      	b.n	80038de <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_SPI_Receive+0x7e>
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003758:	e0c1      	b.n	80038de <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2204      	movs	r2, #4
 800375e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a0:	d10f      	bne.n	80037c2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d007      	beq.n	80037e0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d162      	bne.n	80038ae <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037e8:	e02e      	b.n	8003848 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d115      	bne.n	8003824 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f103 020c 	add.w	r2, r3, #12
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003822:	e011      	b.n	8003848 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003824:	f7fd feee 	bl	8001604 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d803      	bhi.n	800383c <HAL_SPI_Receive+0x166>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d102      	bne.n	8003842 <HAL_SPI_Receive+0x16c>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d102      	bne.n	8003848 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003846:	e04a      	b.n	80038de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1cb      	bne.n	80037ea <HAL_SPI_Receive+0x114>
 8003852:	e031      	b.n	80038b8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d113      	bne.n	800388a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	b292      	uxth	r2, r2
 800386e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	1c9a      	adds	r2, r3, #2
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003888:	e011      	b.n	80038ae <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800388a:	f7fd febb 	bl	8001604 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d803      	bhi.n	80038a2 <HAL_SPI_Receive+0x1cc>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d102      	bne.n	80038a8 <HAL_SPI_Receive+0x1d2>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038ac:	e017      	b.n	80038de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1cd      	bne.n	8003854 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fa45 	bl	8003d4c <SPI_EndRxTransaction>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
 80038da:	e000      	b.n	80038de <HAL_SPI_Receive+0x208>
  }

error :
 80038dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003906:	2301      	movs	r3, #1
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_SPI_TransmitReceive+0x26>
 800391a:	2302      	movs	r3, #2
 800391c:	e18a      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x33c>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003926:	f7fd fe6d 	bl	8001604 <HAL_GetTick>
 800392a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800393c:	887b      	ldrh	r3, [r7, #2]
 800393e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003944:	2b01      	cmp	r3, #1
 8003946:	d00f      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x70>
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394e:	d107      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x68>
 8003958:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800395c:	2b04      	cmp	r3, #4
 800395e:	d003      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003960:	2302      	movs	r3, #2
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003966:	e15b      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_SPI_TransmitReceive+0x82>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_SPI_TransmitReceive+0x82>
 8003974:	887b      	ldrh	r3, [r7, #2]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003980:	e14e      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b04      	cmp	r3, #4
 800398c:	d003      	beq.n	8003996 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2205      	movs	r2, #5
 8003992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	887a      	ldrh	r2, [r7, #2]
 80039a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	887a      	ldrh	r2, [r7, #2]
 80039be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d007      	beq.n	80039ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f2:	d178      	bne.n	8003ae6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_SPI_TransmitReceive+0x10a>
 80039fc:	8b7b      	ldrh	r3, [r7, #26]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d166      	bne.n	8003ad0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	1c9a      	adds	r2, r3, #2
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a26:	e053      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d11b      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x176>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d016      	beq.n	8003a6e <HAL_SPI_TransmitReceive+0x176>
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d113      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	881a      	ldrh	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	1c9a      	adds	r2, r3, #2
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d119      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x1b8>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d014      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	b292      	uxth	r2, r2
 8003a92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	1c9a      	adds	r2, r3, #2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aac:	2301      	movs	r3, #1
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ab0:	f7fd fda8 	bl	8001604 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d807      	bhi.n	8003ad0 <HAL_SPI_TransmitReceive+0x1d8>
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d003      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ace:	e0a7      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1a6      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x130>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1a1      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x130>
 8003ae4:	e07c      	b.n	8003be0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x1fc>
 8003aee:	8b7b      	ldrh	r3, [r7, #26]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d16b      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b1a:	e057      	b.n	8003bcc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d11c      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x26c>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d017      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x26c>
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d114      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d119      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x2ae>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d014      	beq.n	8003ba6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ba6:	f7fd fd2d 	bl	8001604 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d803      	bhi.n	8003bbe <HAL_SPI_TransmitReceive+0x2c6>
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d102      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x2cc>
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bca:	e029      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1a2      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x224>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d19d      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f917 	bl	8003e18 <SPI_EndRxTxTransaction>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d006      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bfc:	e010      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	e000      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3730      	adds	r7, #48	; 0x30
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c4c:	f7fd fcda 	bl	8001604 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	4413      	add	r3, r2
 8003c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c5c:	f7fd fcd2 	bl	8001604 <HAL_GetTick>
 8003c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c62:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	015b      	lsls	r3, r3, #5
 8003c68:	0d1b      	lsrs	r3, r3, #20
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	fb02 f303 	mul.w	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c72:	e054      	b.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d050      	beq.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c7c:	f7fd fcc2 	bl	8001604 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d902      	bls.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d13d      	bne.n	8003d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003caa:	d111      	bne.n	8003cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb4:	d004      	beq.n	8003cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d107      	bne.n	8003cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd8:	d10f      	bne.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e017      	b.n	8003d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4013      	ands	r3, r2
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	bf0c      	ite	eq
 8003d2e:	2301      	moveq	r3, #1
 8003d30:	2300      	movne	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d19b      	bne.n	8003c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000004 	.word	0x20000004

08003d4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d60:	d111      	bne.n	8003d86 <SPI_EndRxTransaction+0x3a>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6a:	d004      	beq.n	8003d76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d107      	bne.n	8003d86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8e:	d12a      	bne.n	8003de6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d98:	d012      	beq.n	8003dc0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2200      	movs	r2, #0
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff ff49 	bl	8003c3c <SPI_WaitFlagStateUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02d      	beq.n	8003e0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e026      	b.n	8003e0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2101      	movs	r1, #1
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff ff36 	bl	8003c3c <SPI_WaitFlagStateUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01a      	beq.n	8003e0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e013      	b.n	8003e0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2101      	movs	r1, #1
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f7ff ff23 	bl	8003c3c <SPI_WaitFlagStateUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d007      	beq.n	8003e0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e000      	b.n	8003e0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e24:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <SPI_EndRxTxTransaction+0x7c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <SPI_EndRxTxTransaction+0x80>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	0d5b      	lsrs	r3, r3, #21
 8003e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e34:	fb02 f303 	mul.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e42:	d112      	bne.n	8003e6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2180      	movs	r1, #128	; 0x80
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff fef4 	bl	8003c3c <SPI_WaitFlagStateUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e00f      	b.n	8003e8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d0f2      	beq.n	8003e6a <SPI_EndRxTxTransaction+0x52>
 8003e84:	e000      	b.n	8003e88 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e86:	bf00      	nop
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000004 	.word	0x20000004
 8003e98:	165e9f81 	.word	0x165e9f81

08003e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e03f      	b.n	8003f2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd f91e 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f929 	bl	8004138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b08a      	sub	sp, #40	; 0x28
 8003f3a:	af02      	add	r7, sp, #8
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d17c      	bne.n	8004050 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_UART_Transmit+0x2c>
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e075      	b.n	8004052 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_UART_Transmit+0x3e>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e06e      	b.n	8004052 <HAL_UART_Transmit+0x11c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2221      	movs	r2, #33	; 0x21
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f8a:	f7fd fb3b 	bl	8001604 <HAL_GetTick>
 8003f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d108      	bne.n	8003fb8 <HAL_UART_Transmit+0x82>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	e003      	b.n	8003fc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fc8:	e02a      	b.n	8004020 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2180      	movs	r1, #128	; 0x80
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f840 	bl	800405a <UART_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e036      	b.n	8004052 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	e007      	b.n	8004012 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	781a      	ldrb	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	3301      	adds	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1cf      	bne.n	8003fca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2140      	movs	r1, #64	; 0x40
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f810 	bl	800405a <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e006      	b.n	8004052 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b090      	sub	sp, #64	; 0x40
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406a:	e050      	b.n	800410e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d04c      	beq.n	800410e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <UART_WaitOnFlagUntilTimeout+0x30>
 800407a:	f7fd fac3 	bl	8001604 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004086:	429a      	cmp	r2, r3
 8004088:	d241      	bcs.n	800410e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040aa:	637a      	str	r2, [r7, #52]	; 0x34
 80040ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3314      	adds	r3, #20
 80040c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	613b      	str	r3, [r7, #16]
   return(result);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040de:	623a      	str	r2, [r7, #32]
 80040e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	69f9      	ldr	r1, [r7, #28]
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e5      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e00f      	b.n	800412e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	429a      	cmp	r2, r3
 800412a:	d09f      	beq.n	800406c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3740      	adds	r7, #64	; 0x40
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800413c:	b0c0      	sub	sp, #256	; 0x100
 800413e:	af00      	add	r7, sp, #0
 8004140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	68d9      	ldr	r1, [r3, #12]
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	ea40 0301 	orr.w	r3, r0, r1
 8004160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	431a      	orrs	r2, r3
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004190:	f021 010c 	bic.w	r1, r1, #12
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800419e:	430b      	orrs	r3, r1
 80041a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b2:	6999      	ldr	r1, [r3, #24]
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	ea40 0301 	orr.w	r3, r0, r1
 80041be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b8f      	ldr	r3, [pc, #572]	; (8004404 <UART_SetConfig+0x2cc>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d005      	beq.n	80041d8 <UART_SetConfig+0xa0>
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <UART_SetConfig+0x2d0>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d104      	bne.n	80041e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7fe ff64 	bl	80030a4 <HAL_RCC_GetPCLK2Freq>
 80041dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041e0:	e003      	b.n	80041ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041e2:	f7fe ff4b 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 80041e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f4:	f040 810c 	bne.w	8004410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	1891      	adds	r1, r2, r2
 8004210:	65b9      	str	r1, [r7, #88]	; 0x58
 8004212:	415b      	adcs	r3, r3
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800421a:	4621      	mov	r1, r4
 800421c:	eb12 0801 	adds.w	r8, r2, r1
 8004220:	4629      	mov	r1, r5
 8004222:	eb43 0901 	adc.w	r9, r3, r1
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800423a:	4690      	mov	r8, r2
 800423c:	4699      	mov	r9, r3
 800423e:	4623      	mov	r3, r4
 8004240:	eb18 0303 	adds.w	r3, r8, r3
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004248:	462b      	mov	r3, r5
 800424a:	eb49 0303 	adc.w	r3, r9, r3
 800424e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800425e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004266:	460b      	mov	r3, r1
 8004268:	18db      	adds	r3, r3, r3
 800426a:	653b      	str	r3, [r7, #80]	; 0x50
 800426c:	4613      	mov	r3, r2
 800426e:	eb42 0303 	adc.w	r3, r2, r3
 8004272:	657b      	str	r3, [r7, #84]	; 0x54
 8004274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800427c:	f7fc f800 	bl	8000280 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <UART_SetConfig+0x2d4>)
 8004286:	fba3 2302 	umull	r2, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	011c      	lsls	r4, r3, #4
 800428e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800429c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042a8:	415b      	adcs	r3, r3
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042b0:	4641      	mov	r1, r8
 80042b2:	eb12 0a01 	adds.w	sl, r2, r1
 80042b6:	4649      	mov	r1, r9
 80042b8:	eb43 0b01 	adc.w	fp, r3, r1
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d0:	4692      	mov	sl, r2
 80042d2:	469b      	mov	fp, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	eb1a 0303 	adds.w	r3, sl, r3
 80042da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042de:	464b      	mov	r3, r9
 80042e0:	eb4b 0303 	adc.w	r3, fp, r3
 80042e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042fc:	460b      	mov	r3, r1
 80042fe:	18db      	adds	r3, r3, r3
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
 8004302:	4613      	mov	r3, r2
 8004304:	eb42 0303 	adc.w	r3, r2, r3
 8004308:	647b      	str	r3, [r7, #68]	; 0x44
 800430a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800430e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004312:	f7fb ffb5 	bl	8000280 <__aeabi_uldivmod>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4611      	mov	r1, r2
 800431c:	4b3b      	ldr	r3, [pc, #236]	; (800440c <UART_SetConfig+0x2d4>)
 800431e:	fba3 2301 	umull	r2, r3, r3, r1
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2264      	movs	r2, #100	; 0x64
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	1acb      	subs	r3, r1, r3
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004332:	4b36      	ldr	r3, [pc, #216]	; (800440c <UART_SetConfig+0x2d4>)
 8004334:	fba3 2302 	umull	r2, r3, r3, r2
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004340:	441c      	add	r4, r3
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800434c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	63b9      	str	r1, [r7, #56]	; 0x38
 800435c:	415b      	adcs	r3, r3
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6339      	str	r1, [r7, #48]	; 0x30
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ce:	f7fb ff57 	bl	8000280 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <UART_SetConfig+0x2d4>)
 80043d8:	fba3 1302 	umull	r1, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	2164      	movs	r1, #100	; 0x64
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	3332      	adds	r3, #50	; 0x32
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <UART_SetConfig+0x2d4>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	f003 0207 	and.w	r2, r3, #7
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4422      	add	r2, r4
 80043fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004400:	e105      	b.n	800460e <UART_SetConfig+0x4d6>
 8004402:	bf00      	nop
 8004404:	40011000 	.word	0x40011000
 8004408:	40011400 	.word	0x40011400
 800440c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800441a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800441e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004422:	4642      	mov	r2, r8
 8004424:	464b      	mov	r3, r9
 8004426:	1891      	adds	r1, r2, r2
 8004428:	6239      	str	r1, [r7, #32]
 800442a:	415b      	adcs	r3, r3
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004432:	4641      	mov	r1, r8
 8004434:	1854      	adds	r4, r2, r1
 8004436:	4649      	mov	r1, r9
 8004438:	eb43 0501 	adc.w	r5, r3, r1
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	00eb      	lsls	r3, r5, #3
 8004446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800444a:	00e2      	lsls	r2, r4, #3
 800444c:	4614      	mov	r4, r2
 800444e:	461d      	mov	r5, r3
 8004450:	4643      	mov	r3, r8
 8004452:	18e3      	adds	r3, r4, r3
 8004454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004458:	464b      	mov	r3, r9
 800445a:	eb45 0303 	adc.w	r3, r5, r3
 800445e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800446e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800447e:	4629      	mov	r1, r5
 8004480:	008b      	lsls	r3, r1, #2
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004488:	4621      	mov	r1, r4
 800448a:	008a      	lsls	r2, r1, #2
 800448c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004490:	f7fb fef6 	bl	8000280 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b60      	ldr	r3, [pc, #384]	; (800461c <UART_SetConfig+0x4e4>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011c      	lsls	r4, r3, #4
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	61b9      	str	r1, [r7, #24]
 80044bc:	415b      	adcs	r3, r3
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6139      	str	r1, [r7, #16]
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044f8:	464b      	mov	r3, r9
 80044fa:	460a      	mov	r2, r1
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	67bb      	str	r3, [r7, #120]	; 0x78
 800450e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800451c:	4649      	mov	r1, r9
 800451e:	008b      	lsls	r3, r1, #2
 8004520:	4641      	mov	r1, r8
 8004522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004526:	4641      	mov	r1, r8
 8004528:	008a      	lsls	r2, r1, #2
 800452a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800452e:	f7fb fea7 	bl	8000280 <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <UART_SetConfig+0x4e4>)
 8004538:	fba3 1302 	umull	r1, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	2164      	movs	r1, #100	; 0x64
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	3332      	adds	r3, #50	; 0x32
 800454a:	4a34      	ldr	r2, [pc, #208]	; (800461c <UART_SetConfig+0x4e4>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004556:	441c      	add	r4, r3
 8004558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455c:	2200      	movs	r2, #0
 800455e:	673b      	str	r3, [r7, #112]	; 0x70
 8004560:	677a      	str	r2, [r7, #116]	; 0x74
 8004562:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004566:	4642      	mov	r2, r8
 8004568:	464b      	mov	r3, r9
 800456a:	1891      	adds	r1, r2, r2
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	415b      	adcs	r3, r3
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004576:	4641      	mov	r1, r8
 8004578:	1851      	adds	r1, r2, r1
 800457a:	6039      	str	r1, [r7, #0]
 800457c:	4649      	mov	r1, r9
 800457e:	414b      	adcs	r3, r1
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800458e:	4659      	mov	r1, fp
 8004590:	00cb      	lsls	r3, r1, #3
 8004592:	4651      	mov	r1, sl
 8004594:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004598:	4651      	mov	r1, sl
 800459a:	00ca      	lsls	r2, r1, #3
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	4603      	mov	r3, r0
 80045a2:	4642      	mov	r2, r8
 80045a4:	189b      	adds	r3, r3, r2
 80045a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a8:	464b      	mov	r3, r9
 80045aa:	460a      	mov	r2, r1
 80045ac:	eb42 0303 	adc.w	r3, r2, r3
 80045b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	663b      	str	r3, [r7, #96]	; 0x60
 80045bc:	667a      	str	r2, [r7, #100]	; 0x64
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045ca:	4649      	mov	r1, r9
 80045cc:	008b      	lsls	r3, r1, #2
 80045ce:	4641      	mov	r1, r8
 80045d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d4:	4641      	mov	r1, r8
 80045d6:	008a      	lsls	r2, r1, #2
 80045d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045dc:	f7fb fe50 	bl	8000280 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4b0d      	ldr	r3, [pc, #52]	; (800461c <UART_SetConfig+0x4e4>)
 80045e6:	fba3 1302 	umull	r1, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2164      	movs	r1, #100	; 0x64
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	3332      	adds	r3, #50	; 0x32
 80045f8:	4a08      	ldr	r2, [pc, #32]	; (800461c <UART_SetConfig+0x4e4>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4422      	add	r2, r4
 800460c:	609a      	str	r2, [r3, #8]
}
 800460e:	bf00      	nop
 8004610:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	51eb851f 	.word	0x51eb851f

08004620 <WIZnetRecv>:

//todo Add udp functions, ex) sendto recvfrom

/*Shell for mbedtls recv function*/
int WIZnetRecv(void *ctx, unsigned char *buf, unsigned int len )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
	int32_t ret;
	ret = recv(*((int *)ctx),buf,len);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	b292      	uxth	r2, r2
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	4618      	mov	r0, r3
 800463a:	f018 fdef 	bl	801d21c <recv>
 800463e:	6178      	str	r0, [r7, #20]
	printf("Port:[%d]/Recv(%d)[%d]: \r\n",*((int *)ctx) ,len, (unsigned int)ret);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4805      	ldr	r0, [pc, #20]	; (8004660 <WIZnetRecv+0x40>)
 800464a:	f019 fa0b 	bl	801da64 <iprintf>
	string_print_Hex(buf, len);
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	68b8      	ldr	r0, [r7, #8]
 8004652:	f7fb ffd5 	bl	8000600 <string_print_Hex>
    //return (recv(*((int *)ctx),buf,len));
	return ret;
 8004656:	697b      	ldr	r3, [r7, #20]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	0801efd4 	.word	0x0801efd4

08004664 <WIZnetSend>:

/*Shell for mbedtls send function*/
int WIZnetSend(void *ctx, const unsigned char *buf, unsigned int len )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
	printf("Port:[%d]/Send(%d) : \r\n",*((int *)ctx) ,len);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4619      	mov	r1, r3
 8004678:	480a      	ldr	r0, [pc, #40]	; (80046a4 <WIZnetSend+0x40>)
 800467a:	f019 f9f3 	bl	801da64 <iprintf>
	string_print_Hex(buf, len);
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	68b8      	ldr	r0, [r7, #8]
 8004682:	f7fb ffbd 	bl	8000600 <string_print_Hex>
    return (send(*((int *)ctx),buf,len));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	b292      	uxth	r2, r2
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f018 fcc8 	bl	801d028 <send>
 8004698:	4603      	mov	r3, r0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	0801eff0 	.word	0x0801eff0

080046a8 <WIZnetDebugCB>:

/*Shell for mbedtls debug function.
 *DEBUG_LEBEL can be changed from 0 to 3*/
#ifdef MBEDTLS_DEBUG_C
void WIZnetDebugCB(void *ctx, int level, const char *file, int line, const char *str)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
    if(level <= DEBUG_LEVEL)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	dc03      	bgt.n	80046c4 <WIZnetDebugCB+0x1c>
    {
       printf("%s\r\n",str);
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	4803      	ldr	r0, [pc, #12]	; (80046cc <WIZnetDebugCB+0x24>)
 80046c0:	f019 f9d0 	bl	801da64 <iprintf>
    }
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	0801f008 	.word	0x0801f008

080046d0 <wiz_tls_init>:
#endif

/* SSL context intialization
 * */
unsigned int wiz_tls_init(wiz_tls_context* tlsContext, int* socket_fd)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b09e      	sub	sp, #120	; 0x78
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
	int ret = 1;
 80046da:	2301      	movs	r3, #1
 80046dc:	66fb      	str	r3, [r7, #108]	; 0x6c
	char error_buf[100];
#endif


#if defined (MBEDTLS_DEBUG_C)
	debug_set_threshold(DEBUG_LEVEL);
 80046de:	2002      	movs	r0, #2
 80046e0:	f006 ffb8 	bl	800b654 <mbedtls_debug_set_threshold>
#if defined (MBEDTLS_ENTROPY_C)
	tlsContext->entropy = malloc(sizeof(mbedtls_entropy_context));
	mbedtls_entropy_init( tlsContext->entropy);
#endif

	tlsContext->ctr_drbg = malloc(sizeof(mbedtls_ctr_drbg_context));
 80046e4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80046e8:	f019 f876 	bl	801d7d8 <malloc>
 80046ec:	4603      	mov	r3, r0
 80046ee:	461a      	mov	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]
	tlsContext->ssl = malloc(sizeof(mbedtls_ssl_context));
 80046f4:	20b4      	movs	r0, #180	; 0xb4
 80046f6:	f019 f86f 	bl	801d7d8 <malloc>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]
	tlsContext->conf = malloc(sizeof(mbedtls_ssl_config));
 8004702:	2054      	movs	r0, #84	; 0x54
 8004704:	f019 f868 	bl	801d7d8 <malloc>
 8004708:	4603      	mov	r3, r0
 800470a:	461a      	mov	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	609a      	str	r2, [r3, #8]
	tlsContext->cacert = malloc(sizeof(mbedtls_x509_crt));
 8004710:	f44f 709a 	mov.w	r0, #308	; 0x134
 8004714:	f019 f860 	bl	801d7d8 <malloc>
 8004718:	4603      	mov	r3, r0
 800471a:	461a      	mov	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60da      	str	r2, [r3, #12]

	mbedtls_ctr_drbg_init(tlsContext->ctr_drbg);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f006 ff86 	bl	800b636 <mbedtls_ctr_drbg_init>
	mbedtls_x509_crt_init(tlsContext->cacert);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4618      	mov	r0, r3
 8004730:	f017 fed2 	bl	801c4d8 <mbedtls_x509_crt_init>
	mbedtls_ssl_init(tlsContext->ssl);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	4618      	mov	r0, r3
 800473a:	f014 fa09 	bl	8018b50 <mbedtls_ssl_init>
	mbedtls_ssl_config_init(tlsContext->conf);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f014 fc68 	bl	8019018 <mbedtls_ssl_config_init>
	*/

#if defined (MBEDTLS_X509_CRT_PARSE_C)

#if defined (MBEDTLS_DEBUG_C)
	printf(" Loading the CA root certificate \r\n");
 8004748:	482f      	ldr	r0, [pc, #188]	; (8004808 <wiz_tls_init+0x138>)
 800474a:	f019 fa11 	bl	801db70 <puts>
#endif
	mbedtls_ssl_config_defaults((tlsContext->conf),
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6898      	ldr	r0, [r3, #8]
 8004752:	2300      	movs	r3, #0
 8004754:	2200      	movs	r2, #0
 8004756:	2100      	movs	r1, #0
 8004758:	f014 fc6c 	bl	8019034 <mbedtls_ssl_config_defaults>
								MBEDTLS_SSL_IS_CLIENT,
								MBEDTLS_SSL_TRANSPORT_STREAM,
								MBEDTLS_SSL_PRESET_DEFAULT);
	ret=mbedtls_ssl_setup(tlsContext->ssl, tlsContext->conf);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f014 fa00 	bl	8018b6c <mbedtls_ssl_setup>
 800476c:	66f8      	str	r0, [r7, #108]	; 0x6c
	printf("mbedtls_ssl_setup : %d\r\n", ret);
 800476e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004770:	4826      	ldr	r0, [pc, #152]	; (800480c <wiz_tls_init+0x13c>)
 8004772:	f019 f977 	bl	801da64 <iprintf>
	mbedtls_ssl_set_hostname(tlsContext->ssl, sslHostName);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4925      	ldr	r1, [pc, #148]	; (8004810 <wiz_tls_init+0x140>)
 800477c:	4618      	mov	r0, r3
 800477e:	f014 fb17 	bl	8018db0 <mbedtls_ssl_set_hostname>

#if defined (MBEDTLS_CERTS_C)
	printf("cert size[%d] = [%s]\r\n", strlen(CERTIFICATE), CERTIFICATE);
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <wiz_tls_init+0x144>)
 8004784:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8004788:	4823      	ldr	r0, [pc, #140]	; (8004818 <wiz_tls_init+0x148>)
 800478a:	f019 f96b 	bl	801da64 <iprintf>
	ret = mbedtls_x509_crt_parse((tlsContext->cacert),(unsigned char *)CERTIFICATE, strlen(CERTIFICATE));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8004796:	491f      	ldr	r1, [pc, #124]	; (8004814 <wiz_tls_init+0x144>)
 8004798:	4618      	mov	r0, r3
 800479a:	f016 f9f1 	bl	801ab80 <mbedtls_x509_crt_parse>
 800479e:	66f8      	str	r0, [r7, #108]	; 0x6c
#if defined (MBEDTLS_DEBUG_C)
	printf("SSL_CERTS_C not define .\r\n");
#endif
#endif
#endif
	if(ret < 0)
 80047a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	da03      	bge.n	80047ae <wiz_tls_init+0xde>
	{
#if defined (MBEDTLS_CERTS_C)
		printf("x509_crt_parse failed.%x \r\n",ret);
 80047a6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80047a8:	481c      	ldr	r0, [pc, #112]	; (800481c <wiz_tls_init+0x14c>)
 80047aa:	f019 f95b 	bl	801da64 <iprintf>
	}
	/*
		set ssl session param
	*/

	mbedtls_ssl_conf_ca_chain(tlsContext->conf, tlsContext->cacert, NULL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6898      	ldr	r0, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	4619      	mov	r1, r3
 80047ba:	f014 fae6 	bl	8018d8a <mbedtls_ssl_conf_ca_chain>
	//mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_REQUIRED);//This option is for server certificate verification
	mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_NONE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f014 fa8d 	bl	8018ce4 <mbedtls_ssl_conf_authmode>
	mbedtls_ssl_conf_rng(tlsContext->conf,SSLRandomCB,tlsContext->ctr_drbg);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6898      	ldr	r0, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	4912      	ldr	r1, [pc, #72]	; (8004820 <wiz_tls_init+0x150>)
 80047d6:	f014 fa9b 	bl	8018d10 <mbedtls_ssl_conf_rng>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ssl_conf_dbg(tlsContext->conf, WIZnetDebugCB, stdout);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6898      	ldr	r0, [r3, #8]
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <wiz_tls_init+0x154>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	461a      	mov	r2, r3
 80047e6:	4910      	ldr	r1, [pc, #64]	; (8004828 <wiz_tls_init+0x158>)
 80047e8:	f014 faa4 	bl	8018d34 <mbedtls_ssl_conf_dbg>
#endif
	mbedtls_ssl_set_bio(tlsContext->ssl, socket_fd, SSLSendCB, SSLRecvCB, SSLRecvTimeOutCB);		 //set client's socket send and receive functions
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6858      	ldr	r0, [r3, #4]
 80047f0:	2300      	movs	r3, #0
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <wiz_tls_init+0x15c>)
 80047f6:	4a0e      	ldr	r2, [pc, #56]	; (8004830 <wiz_tls_init+0x160>)
 80047f8:	6839      	ldr	r1, [r7, #0]
 80047fa:	f014 faad 	bl	8018d58 <mbedtls_ssl_set_bio>

	return 1;
 80047fe:	2301      	movs	r3, #1
}
 8004800:	4618      	mov	r0, r3
 8004802:	3770      	adds	r7, #112	; 0x70
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	0801f010 	.word	0x0801f010
 800480c:	0801f034 	.word	0x0801f034
 8004810:	20000010 	.word	0x20000010
 8004814:	08023c04 	.word	0x08023c04
 8004818:	0801f050 	.word	0x0801f050
 800481c:	0801f068 	.word	0x0801f068
 8004820:	0800496d 	.word	0x0800496d
 8004824:	20000074 	.word	0x20000074
 8004828:	080046a9 	.word	0x080046a9
 800482c:	08004621 	.word	0x08004621
 8004830:	08004665 	.word	0x08004665

08004834 <wiz_tls_connect>:
	free(tlsContext->cacert);
}

/* SSL handshake */
unsigned int wiz_tls_connect(wiz_tls_context* tlsContext, unsigned short port, uint8_t * addr)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b089      	sub	sp, #36	; 0x24
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	460b      	mov	r3, r1
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	817b      	strh	r3, [r7, #10]
    int ret;

    memset(tempBuf,0,1024);
 8004842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004846:	2100      	movs	r1, #0
 8004848:	4840      	ldr	r0, [pc, #256]	; (800494c <wiz_tls_connect+0x118>)
 800484a:	f019 f80d 	bl	801d868 <memset>

	/*socket open*/
    printf("socket open port : %d \r\n",*((uint8_t*)(tlsContext->ssl->p_bio)));
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	483d      	ldr	r0, [pc, #244]	; (8004950 <wiz_tls_connect+0x11c>)
 800485a:	f019 f903 	bl	801da64 <iprintf>
	ret = socket(*((uint8_t*)(tlsContext->ssl->p_bio)), Sn_MR_TCP, 0, 0x00);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	7818      	ldrb	r0, [r3, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	2200      	movs	r2, #0
 800486a:	2101      	movs	r1, #1
 800486c:	f018 f97c 	bl	801cb68 <socket>
 8004870:	4603      	mov	r3, r0
 8004872:	617b      	str	r3, [r7, #20]
	printf("socket[%d] \r\n", ret);
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	4837      	ldr	r0, [pc, #220]	; (8004954 <wiz_tls_connect+0x120>)
 8004878:	f019 f8f4 	bl	801da64 <iprintf>
	if(ret != *((uint8_t*)(tlsContext->ssl->p_bio)))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	4293      	cmp	r3, r2
 800488a:	d001      	beq.n	8004890 <wiz_tls_connect+0x5c>
		return ret;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	e058      	b.n	8004942 <wiz_tls_connect+0x10e>

	/*Connect to the target*/
	printf("server ip : %d.%d.%d.%d port : %d \r\n", addr[0], addr[1], addr[2], addr[3], port);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	4619      	mov	r1, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3301      	adds	r3, #1
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3302      	adds	r3, #2
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	461c      	mov	r4, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3303      	adds	r3, #3
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	897b      	ldrh	r3, [r7, #10]
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	9200      	str	r2, [sp, #0]
 80048b4:	4623      	mov	r3, r4
 80048b6:	4602      	mov	r2, r0
 80048b8:	4827      	ldr	r0, [pc, #156]	; (8004958 <wiz_tls_connect+0x124>)
 80048ba:	f019 f8d3 	bl	801da64 <iprintf>
	ret = connect(*((uint8_t*)tlsContext->ssl->p_bio), addr, port);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	897a      	ldrh	r2, [r7, #10]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f018 fad0 	bl	801ce70 <connect>
 80048d0:	4603      	mov	r3, r0
 80048d2:	617b      	str	r3, [r7, #20]
	printf("init connect[%d] \r\n", ret);
 80048d4:	6979      	ldr	r1, [r7, #20]
 80048d6:	4821      	ldr	r0, [pc, #132]	; (800495c <wiz_tls_connect+0x128>)
 80048d8:	f019 f8c4 	bl	801da64 <iprintf>
	if(ret != SOCK_OK)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d001      	beq.n	80048e6 <wiz_tls_connect+0xb2>
		return ret;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	e02d      	b.n	8004942 <wiz_tls_connect+0x10e>

#if defined(MBEDTLS_DEBUG_C)
    printf( "  . Performing the SSL/TLS handshake..." );
 80048e6:	481e      	ldr	r0, [pc, #120]	; (8004960 <wiz_tls_connect+0x12c>)
 80048e8:	f019 f8bc 	bl	801da64 <iprintf>
#endif

    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 80048ec:	e015      	b.n	800491a <wiz_tls_connect+0xe6>
    {
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 80048f4:	d011      	beq.n	800491a <wiz_tls_connect+0xe6>
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f513 4fd1 	cmn.w	r3, #26752	; 0x6880
 80048fc:	d00d      	beq.n	800491a <wiz_tls_connect+0xe6>
        {
#if defined(MBEDTLS_ERROR_C)
            mbedtls_strerror( ret, (char *) tempBuf, DEBUG_BUFFER_SIZE );
 80048fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004902:	4912      	ldr	r1, [pc, #72]	; (800494c <wiz_tls_connect+0x118>)
 8004904:	6978      	ldr	r0, [r7, #20]
 8004906:	f007 fc83 	bl	800c210 <mbedtls_strerror>
            printf( " failed\n\r  ! mbedtls_ssl_handshake returned %d: %s\n\r", ret, tempBuf );
 800490a:	4a10      	ldr	r2, [pc, #64]	; (800494c <wiz_tls_connect+0x118>)
 800490c:	6979      	ldr	r1, [r7, #20]
 800490e:	4815      	ldr	r0, [pc, #84]	; (8004964 <wiz_tls_connect+0x130>)
 8004910:	f019 f8a8 	bl	801da64 <iprintf>
#endif
            return( -1 );
 8004914:	f04f 33ff 	mov.w	r3, #4294967295
 8004918:	e013      	b.n	8004942 <wiz_tls_connect+0x10e>
    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4618      	mov	r0, r3
 8004920:	f014 fae6 	bl	8018ef0 <mbedtls_ssl_handshake>
 8004924:	6178      	str	r0, [r7, #20]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e0      	bne.n	80048ee <wiz_tls_connect+0xba>
        }
    }

#if defined(MBEDTLS_DEBUG_C)
    printf( "ok\n\r    [ Ciphersuite is %s ]\n\r",
            mbedtls_ssl_get_ciphersuite( tlsContext->ssl ) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
    printf( "ok\n\r    [ Ciphersuite is %s ]\n\r",
 8004930:	4618      	mov	r0, r3
 8004932:	f014 fa9b 	bl	8018e6c <mbedtls_ssl_get_ciphersuite>
 8004936:	4603      	mov	r3, r0
 8004938:	4619      	mov	r1, r3
 800493a:	480b      	ldr	r0, [pc, #44]	; (8004968 <wiz_tls_connect+0x134>)
 800493c:	f019 f892 	bl	801da64 <iprintf>
#endif

    return( 0 );
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	bd90      	pop	{r4, r7, pc}
 800494a:	bf00      	nop
 800494c:	200002b4 	.word	0x200002b4
 8004950:	0801f084 	.word	0x0801f084
 8004954:	0801f0a0 	.word	0x0801f0a0
 8004958:	0801f0b0 	.word	0x0801f0b0
 800495c:	0801f0d8 	.word	0x0801f0d8
 8004960:	0801f0ec 	.word	0x0801f0ec
 8004964:	0801f114 	.word	0x0801f114
 8004968:	0801f14c 	.word	0x0801f14c

0800496c <SSLRandomCB>:
{
	srand(randSeed);
}

int SSLRandomCB( void *p_rng, unsigned char *output, size_t output_len )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
    int i;

	if(output_len <= 0)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <SSLRandomCB+0x16>
	{
         return (1);
 800497e:	2301      	movs	r3, #1
 8004980:	e023      	b.n	80049ca <SSLRandomCB+0x5e>
	}
    for(i = 0;i < output_len;i++)
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	e015      	b.n	80049b4 <SSLRandomCB+0x48>
    {
       *output++ = rand() % 0xff;
 8004988:	f019 f928 	bl	801dbdc <rand>
 800498c:	4602      	mov	r2, r0
 800498e:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <SSLRandomCB+0x68>)
 8004990:	fb83 1302 	smull	r1, r3, r3, r2
 8004994:	4413      	add	r3, r2
 8004996:	11d9      	asrs	r1, r3, #7
 8004998:	17d3      	asrs	r3, r2, #31
 800499a:	1ac9      	subs	r1, r1, r3
 800499c:	460b      	mov	r3, r1
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	1a5b      	subs	r3, r3, r1
 80049a2:	1ad1      	subs	r1, r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	60ba      	str	r2, [r7, #8]
 80049aa:	b2ca      	uxtb	r2, r1
 80049ac:	701a      	strb	r2, [r3, #0]
    for(i = 0;i < output_len;i++)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	3301      	adds	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d8e5      	bhi.n	8004988 <SSLRandomCB+0x1c>
	}
    srand(rand());
 80049bc:	f019 f90e 	bl	801dbdc <rand>
 80049c0:	4603      	mov	r3, r0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f019 f8dc 	bl	801db80 <srand>
	return (0);
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	80808081 	.word	0x80808081

080049d8 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e004      	b.n	80049f2 <mbedtls_zeroize+0x1a>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	60fa      	str	r2, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	1e5a      	subs	r2, r3, #1
 80049f6:	603a      	str	r2, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f5      	bne.n	80049e8 <mbedtls_zeroize+0x10>
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <aes_gen_tables>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 8004a12:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8004a14:	2300      	movs	r3, #0
 8004a16:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004a20:	e02b      	b.n	8004a7a <aes_gen_tables+0x6e>
    {
        pow[i] = x;
 8004a22:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004a26:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004a2a:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8004a2e:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8004a36:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004a3a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004a3e:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004a42:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8004a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8004a4a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004a54:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	d001      	beq.n	8004a60 <aes_gen_tables+0x54>
 8004a5c:	221b      	movs	r2, #27
 8004a5e:	e000      	b.n	8004a62 <aes_gen_tables+0x56>
 8004a60:	2200      	movs	r2, #0
 8004a62:	405a      	eors	r2, r3
 8004a64:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004a68:	4053      	eors	r3, r2
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8004a70:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004a74:	3301      	adds	r3, #1
 8004a76:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004a7a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004a7e:	2bff      	cmp	r3, #255	; 0xff
 8004a80:	ddcf      	ble.n	8004a22 <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004a8e:	e01b      	b.n	8004ac8 <aes_gen_tables+0xbc>
    {
        RCON[i] = (uint32_t) x;
 8004a90:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004a94:	49cc      	ldr	r1, [pc, #816]	; (8004dc8 <aes_gen_tables+0x3bc>)
 8004a96:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME( x ) & 0xFF;
 8004a9e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004aa8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	d001      	beq.n	8004ab4 <aes_gen_tables+0xa8>
 8004ab0:	221b      	movs	r2, #27
 8004ab2:	e000      	b.n	8004ab6 <aes_gen_tables+0xaa>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4053      	eors	r3, r2
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8004abe:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004ac8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004acc:	2b09      	cmp	r3, #9
 8004ace:	dddf      	ble.n	8004a90 <aes_gen_tables+0x84>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8004ad0:	4bbe      	ldr	r3, [pc, #760]	; (8004dcc <aes_gen_tables+0x3c0>)
 8004ad2:	2263      	movs	r2, #99	; 0x63
 8004ad4:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8004ad6:	4bbe      	ldr	r3, [pc, #760]	; (8004dd0 <aes_gen_tables+0x3c4>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004ae4:	e072      	b.n	8004bcc <aes_gen_tables+0x1c0>
    {
        x = pow[255 - log[i]];
 8004ae6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004aea:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004aee:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8004af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af6:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8004afa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004afe:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b06:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004b0a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004b0e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8004b12:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b16:	005a      	lsls	r2, r3, #1
 8004b18:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b1c:	11db      	asrs	r3, r3, #7
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004b26:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004b2a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b2e:	4053      	eors	r3, r2
 8004b30:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004b34:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b38:	005a      	lsls	r2, r3, #1
 8004b3a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b3e:	11db      	asrs	r3, r3, #7
 8004b40:	4313      	orrs	r3, r2
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004b48:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004b4c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b50:	4053      	eors	r3, r2
 8004b52:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004b56:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b5a:	005a      	lsls	r2, r3, #1
 8004b5c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b60:	11db      	asrs	r3, r3, #7
 8004b62:	4313      	orrs	r3, r2
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004b6a:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004b6e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b72:	4053      	eors	r3, r2
 8004b74:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004b78:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b7c:	005a      	lsls	r2, r3, #1
 8004b7e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b82:	11db      	asrs	r3, r3, #7
 8004b84:	4313      	orrs	r3, r2
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y ^ 0x63;
 8004b8c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004b90:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 8004b94:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004b98:	4053      	eors	r3, r2
 8004b9a:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        FSb[i] = (unsigned char) x;
 8004b9e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004ba2:	b2d9      	uxtb	r1, r3
 8004ba4:	4a89      	ldr	r2, [pc, #548]	; (8004dcc <aes_gen_tables+0x3c0>)
 8004ba6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004baa:	4413      	add	r3, r2
 8004bac:	460a      	mov	r2, r1
 8004bae:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8004bb0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004bb4:	b2d9      	uxtb	r1, r3
 8004bb6:	4a86      	ldr	r2, [pc, #536]	; (8004dd0 <aes_gen_tables+0x3c4>)
 8004bb8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004bbc:	4413      	add	r3, r2
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8004bc2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004bcc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004bd0:	2bff      	cmp	r3, #255	; 0xff
 8004bd2:	dd88      	ble.n	8004ae6 <aes_gen_tables+0xda>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004bda:	e136      	b.n	8004e4a <aes_gen_tables+0x43e>
    {
        x = FSb[i];
 8004bdc:	4a7b      	ldr	r2, [pc, #492]	; (8004dcc <aes_gen_tables+0x3c0>)
 8004bde:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004be2:	4413      	add	r3, r2
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
        y = XTIME( x ) & 0xFF;
 8004bea:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004bf4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004bf8:	2a00      	cmp	r2, #0
 8004bfa:	d001      	beq.n	8004c00 <aes_gen_tables+0x1f4>
 8004bfc:	221b      	movs	r2, #27
 8004bfe:	e000      	b.n	8004c02 <aes_gen_tables+0x1f6>
 8004c00:	2200      	movs	r2, #0
 8004c02:	4053      	eors	r3, r2
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        z =  ( y ^ x ) & 0xFF;
 8004c0a:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8004c0e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004c12:	4053      	eors	r3, r2
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8004c1a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004c1e:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 8004c20:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004c24:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 8004c26:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004c2a:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8004c2c:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 8004c2e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8004c32:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 8004c34:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 8004c36:	4967      	ldr	r1, [pc, #412]	; (8004dd4 <aes_gen_tables+0x3c8>)
 8004c38:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 8004c40:	4a64      	ldr	r2, [pc, #400]	; (8004dd4 <aes_gen_tables+0x3c8>)
 8004c42:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4a:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004c4e:	4962      	ldr	r1, [pc, #392]	; (8004dd8 <aes_gen_tables+0x3cc>)
 8004c50:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8004c58:	4a5f      	ldr	r2, [pc, #380]	; (8004dd8 <aes_gen_tables+0x3cc>)
 8004c5a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c62:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004c66:	495d      	ldr	r1, [pc, #372]	; (8004ddc <aes_gen_tables+0x3d0>)
 8004c68:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 8004c70:	4a5a      	ldr	r2, [pc, #360]	; (8004ddc <aes_gen_tables+0x3d0>)
 8004c72:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7a:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004c7e:	4958      	ldr	r1, [pc, #352]	; (8004de0 <aes_gen_tables+0x3d4>)
 8004c80:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        x = RSb[i];
 8004c88:	4a51      	ldr	r2, [pc, #324]	; (8004dd0 <aes_gen_tables+0x3c4>)
 8004c8a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004c8e:	4413      	add	r3, r2
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8004c96:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d020      	beq.n	8004ce0 <aes_gen_tables+0x2d4>
 8004c9e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004ca2:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004cac:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004cb0:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004cb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004cb8:	441a      	add	r2, r3
 8004cba:	4b4a      	ldr	r3, [pc, #296]	; (8004de4 <aes_gen_tables+0x3d8>)
 8004cbc:	fb83 1302 	smull	r1, r3, r3, r2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	11d9      	asrs	r1, r3, #7
 8004cc4:	17d3      	asrs	r3, r2, #31
 8004cc6:	1ac9      	subs	r1, r1, r3
 8004cc8:	460b      	mov	r3, r1
 8004cca:	021b      	lsls	r3, r3, #8
 8004ccc:	1a5b      	subs	r3, r3, r1
 8004cce:	1ad1      	subs	r1, r2, r3
 8004cd0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004cd4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004cd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	e000      	b.n	8004ce2 <aes_gen_tables+0x2d6>
 8004ce0:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8004ce2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d020      	beq.n	8004d2c <aes_gen_tables+0x320>
 8004cea:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004cee:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004cf8:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004cfc:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004d00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d04:	441a      	add	r2, r3
 8004d06:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <aes_gen_tables+0x3d8>)
 8004d08:	fb83 1302 	smull	r1, r3, r3, r2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	11d9      	asrs	r1, r3, #7
 8004d10:	17d3      	asrs	r3, r2, #31
 8004d12:	1ac9      	subs	r1, r1, r3
 8004d14:	460b      	mov	r3, r1
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	1a5b      	subs	r3, r3, r1
 8004d1a:	1ad1      	subs	r1, r2, r3
 8004d1c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004d20:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004d24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	e000      	b.n	8004d2e <aes_gen_tables+0x322>
 8004d2c:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8004d2e:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8004d30:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d020      	beq.n	8004d7a <aes_gen_tables+0x36e>
 8004d38:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004d3c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d42:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004d46:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004d4a:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004d4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d52:	441a      	add	r2, r3
 8004d54:	4b23      	ldr	r3, [pc, #140]	; (8004de4 <aes_gen_tables+0x3d8>)
 8004d56:	fb83 1302 	smull	r1, r3, r3, r2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	11d9      	asrs	r1, r3, #7
 8004d5e:	17d3      	asrs	r3, r2, #31
 8004d60:	1ac9      	subs	r1, r1, r3
 8004d62:	460b      	mov	r3, r1
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	1a5b      	subs	r3, r3, r1
 8004d68:	1ad1      	subs	r1, r2, r3
 8004d6a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004d6e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004d72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d76:	041b      	lsls	r3, r3, #16
 8004d78:	e000      	b.n	8004d7c <aes_gen_tables+0x370>
 8004d7a:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8004d7c:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8004d7e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d030      	beq.n	8004de8 <aes_gen_tables+0x3dc>
 8004d86:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004d8a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d90:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004d94:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004d98:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004d9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004da0:	441a      	add	r2, r3
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <aes_gen_tables+0x3d8>)
 8004da4:	fb83 1302 	smull	r1, r3, r3, r2
 8004da8:	4413      	add	r3, r2
 8004daa:	11d9      	asrs	r1, r3, #7
 8004dac:	17d3      	asrs	r3, r2, #31
 8004dae:	1ac9      	subs	r1, r1, r3
 8004db0:	460b      	mov	r3, r1
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	1a5b      	subs	r3, r3, r1
 8004db6:	1ad1      	subs	r1, r2, r3
 8004db8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004dbc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004dc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	e010      	b.n	8004dea <aes_gen_tables+0x3de>
 8004dc8:	200028b4 	.word	0x200028b4
 8004dcc:	200006b4 	.word	0x200006b4
 8004dd0:	200017b4 	.word	0x200017b4
 8004dd4:	200007b4 	.word	0x200007b4
 8004dd8:	20000bb4 	.word	0x20000bb4
 8004ddc:	20000fb4 	.word	0x20000fb4
 8004de0:	200013b4 	.word	0x200013b4
 8004de4:	80808081 	.word	0x80808081
 8004de8:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8004dea:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8004dee:	491d      	ldr	r1, [pc, #116]	; (8004e64 <aes_gen_tables+0x458>)
 8004df0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        RT1[i] = ROTL8( RT0[i] );
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <aes_gen_tables+0x458>)
 8004dfa:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e02:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004e06:	4918      	ldr	r1, [pc, #96]	; (8004e68 <aes_gen_tables+0x45c>)
 8004e08:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8004e10:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <aes_gen_tables+0x45c>)
 8004e12:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1a:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004e1e:	4913      	ldr	r1, [pc, #76]	; (8004e6c <aes_gen_tables+0x460>)
 8004e20:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8004e28:	4a10      	ldr	r2, [pc, #64]	; (8004e6c <aes_gen_tables+0x460>)
 8004e2a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e32:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004e36:	490e      	ldr	r1, [pc, #56]	; (8004e70 <aes_gen_tables+0x464>)
 8004e38:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 8004e40:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004e44:	3301      	adds	r3, #1
 8004e46:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004e4a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004e4e:	2bff      	cmp	r3, #255	; 0xff
 8004e50:	f77f aec4 	ble.w	8004bdc <aes_gen_tables+0x1d0>
    }
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	f607 0714 	addw	r7, r7, #2068	; 0x814
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	200018b4 	.word	0x200018b4
 8004e68:	20001cb4 	.word	0x20001cb4
 8004e6c:	200020b4 	.word	0x200020b4
 8004e70:	200024b4 	.word	0x200024b4

08004e74 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8004e7c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004e80:	2100      	movs	r1, #0
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f018 fcf0 	bl	801d868 <memset>
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <mbedtls_aes_free+0x1a>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8004e9e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fd98 	bl	80049d8 <mbedtls_zeroize>
 8004ea8:	e000      	b.n	8004eac <mbedtls_aes_free+0x1c>
        return;
 8004eaa:	bf00      	nop
}
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8004ec0:	4b97      	ldr	r3, [pc, #604]	; (8005120 <mbedtls_aes_setkey_enc+0x26c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <mbedtls_aes_setkey_enc+0x1e>
    {
        aes_gen_tables();
 8004ec8:	f7ff fda0 	bl	8004a0c <aes_gen_tables>
        aes_init_done = 1;
 8004ecc:	4b94      	ldr	r3, [pc, #592]	; (8005120 <mbedtls_aes_setkey_enc+0x26c>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

    }
#endif

    switch( keybits )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed8:	d012      	beq.n	8004f00 <mbedtls_aes_setkey_enc+0x4c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee0:	d812      	bhi.n	8004f08 <mbedtls_aes_setkey_enc+0x54>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d003      	beq.n	8004ef0 <mbedtls_aes_setkey_enc+0x3c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2bc0      	cmp	r3, #192	; 0xc0
 8004eec:	d004      	beq.n	8004ef8 <mbedtls_aes_setkey_enc+0x44>
 8004eee:	e00b      	b.n	8004f08 <mbedtls_aes_setkey_enc+0x54>
    {
        case 128: ctx->nr = 10; break;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	220a      	movs	r2, #10
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e00a      	b.n	8004f0e <mbedtls_aes_setkey_enc+0x5a>
        case 192: ctx->nr = 12; break;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	220c      	movs	r2, #12
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e006      	b.n	8004f0e <mbedtls_aes_setkey_enc+0x5a>
        case 256: ctx->nr = 14; break;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	220e      	movs	r2, #14
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e002      	b.n	8004f0e <mbedtls_aes_setkey_enc+0x5a>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8004f08:	f06f 031f 	mvn.w	r3, #31
 8004f0c:	e1aa      	b.n	8005264 <mbedtls_aes_setkey_enc+0x3b0>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3308      	adds	r3, #8
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e027      	b.n	8004f70 <mbedtls_aes_setkey_enc+0xbc>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	4413      	add	r3, r2
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	3301      	adds	r3, #1
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4413      	add	r3, r2
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	ea41 0203 	orr.w	r2, r1, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	3302      	adds	r3, #2
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	440b      	add	r3, r1
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	ea42 0103 	orr.w	r1, r2, r3
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	3303      	adds	r3, #3
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	4413      	add	r3, r2
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	061a      	lsls	r2, r3, #24
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	6938      	ldr	r0, [r7, #16]
 8004f64:	4403      	add	r3, r0
 8004f66:	430a      	orrs	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d3d2      	bcc.n	8004f20 <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b0e      	cmp	r3, #14
 8004f80:	f000 80ca 	beq.w	8005118 <mbedtls_aes_setkey_enc+0x264>
 8004f84:	2b0e      	cmp	r3, #14
 8004f86:	f300 816c 	bgt.w	8005262 <mbedtls_aes_setkey_enc+0x3ae>
 8004f8a:	2b0a      	cmp	r3, #10
 8004f8c:	d002      	beq.n	8004f94 <mbedtls_aes_setkey_enc+0xe0>
 8004f8e:	2b0c      	cmp	r3, #12
 8004f90:	d057      	beq.n	8005042 <mbedtls_aes_setkey_enc+0x18e>
 8004f92:	e166      	b.n	8005262 <mbedtls_aes_setkey_enc+0x3ae>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e04f      	b.n	800503a <mbedtls_aes_setkey_enc+0x186>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4961      	ldr	r1, [pc, #388]	; (8005124 <mbedtls_aes_setkey_enc+0x270>)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fa6:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	320c      	adds	r2, #12
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	0a12      	lsrs	r2, r2, #8
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	495d      	ldr	r1, [pc, #372]	; (8005128 <mbedtls_aes_setkey_enc+0x274>)
 8004fb4:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8004fb6:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	0c1b      	lsrs	r3, r3, #16
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	4959      	ldr	r1, [pc, #356]	; (8005128 <mbedtls_aes_setkey_enc+0x274>)
 8004fc4:	5ccb      	ldrb	r3, [r1, r3]
 8004fc6:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8004fc8:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	0e1b      	lsrs	r3, r3, #24
 8004fd2:	4955      	ldr	r1, [pc, #340]	; (8005128 <mbedtls_aes_setkey_enc+0x274>)
 8004fd4:	5ccb      	ldrb	r3, [r1, r3]
 8004fd6:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8004fd8:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	4a50      	ldr	r2, [pc, #320]	; (8005128 <mbedtls_aes_setkey_enc+0x274>)
 8004fe6:	5cd3      	ldrb	r3, [r2, r3]
 8004fe8:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8004fee:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8004ff0:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	6819      	ldr	r1, [r3, #0]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	3310      	adds	r3, #16
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	3314      	adds	r3, #20
 8005002:	404a      	eors	r2, r1
 8005004:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3308      	adds	r3, #8
 800500a:	6819      	ldr	r1, [r3, #0]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	3314      	adds	r3, #20
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3318      	adds	r3, #24
 8005016:	404a      	eors	r2, r1
 8005018:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	330c      	adds	r3, #12
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	3318      	adds	r3, #24
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	331c      	adds	r3, #28
 800502a:	404a      	eors	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	3301      	adds	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3310      	adds	r3, #16
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b09      	cmp	r3, #9
 800503e:	d9ac      	bls.n	8004f9a <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 8005040:	e10f      	b.n	8005262 <mbedtls_aes_setkey_enc+0x3ae>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e063      	b.n	8005110 <mbedtls_aes_setkey_enc+0x25c>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4935      	ldr	r1, [pc, #212]	; (8005124 <mbedtls_aes_setkey_enc+0x270>)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005054:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	3214      	adds	r2, #20
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	0a12      	lsrs	r2, r2, #8
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	4931      	ldr	r1, [pc, #196]	; (8005128 <mbedtls_aes_setkey_enc+0x274>)
 8005062:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8005064:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3314      	adds	r3, #20
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	0c1b      	lsrs	r3, r3, #16
 800506e:	b2db      	uxtb	r3, r3
 8005070:	492d      	ldr	r1, [pc, #180]	; (8005128 <mbedtls_aes_setkey_enc+0x274>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8005076:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	3314      	adds	r3, #20
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	0e1b      	lsrs	r3, r3, #24
 8005080:	4929      	ldr	r1, [pc, #164]	; (8005128 <mbedtls_aes_setkey_enc+0x274>)
 8005082:	5ccb      	ldrb	r3, [r1, r3]
 8005084:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8005086:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	3314      	adds	r3, #20
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	4a25      	ldr	r2, [pc, #148]	; (8005128 <mbedtls_aes_setkey_enc+0x274>)
 8005094:	5cd3      	ldrb	r3, [r2, r3]
 8005096:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800509c:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 800509e:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	3304      	adds	r3, #4
 80050a4:	6819      	ldr	r1, [r3, #0]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	3318      	adds	r3, #24
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	331c      	adds	r3, #28
 80050b0:	404a      	eors	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	3308      	adds	r3, #8
 80050b8:	6819      	ldr	r1, [r3, #0]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	331c      	adds	r3, #28
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3320      	adds	r3, #32
 80050c4:	404a      	eors	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	330c      	adds	r3, #12
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	3320      	adds	r3, #32
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	3324      	adds	r3, #36	; 0x24
 80050d8:	404a      	eors	r2, r1
 80050da:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	3310      	adds	r3, #16
 80050e0:	6819      	ldr	r1, [r3, #0]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	3324      	adds	r3, #36	; 0x24
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	3328      	adds	r3, #40	; 0x28
 80050ec:	404a      	eors	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	3314      	adds	r3, #20
 80050f4:	6819      	ldr	r1, [r3, #0]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	3328      	adds	r3, #40	; 0x28
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	332c      	adds	r3, #44	; 0x2c
 8005100:	404a      	eors	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3301      	adds	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3318      	adds	r3, #24
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b07      	cmp	r3, #7
 8005114:	d998      	bls.n	8005048 <mbedtls_aes_setkey_enc+0x194>
            }
            break;
 8005116:	e0a4      	b.n	8005262 <mbedtls_aes_setkey_enc+0x3ae>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	e09c      	b.n	8005258 <mbedtls_aes_setkey_enc+0x3a4>
 800511e:	bf00      	nop
 8005120:	200028dc 	.word	0x200028dc
 8005124:	200028b4 	.word	0x200028b4
 8005128:	200006b4 	.word	0x200006b4
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	494e      	ldr	r1, [pc, #312]	; (800526c <mbedtls_aes_setkey_enc+0x3b8>)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005138:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	321c      	adds	r2, #28
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	0a12      	lsrs	r2, r2, #8
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	494a      	ldr	r1, [pc, #296]	; (8005270 <mbedtls_aes_setkey_enc+0x3bc>)
 8005146:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 8005148:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	331c      	adds	r3, #28
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	b2db      	uxtb	r3, r3
 8005154:	4946      	ldr	r1, [pc, #280]	; (8005270 <mbedtls_aes_setkey_enc+0x3bc>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800515a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	331c      	adds	r3, #28
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	0e1b      	lsrs	r3, r3, #24
 8005164:	4942      	ldr	r1, [pc, #264]	; (8005270 <mbedtls_aes_setkey_enc+0x3bc>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800516a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	331c      	adds	r3, #28
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	4a3e      	ldr	r2, [pc, #248]	; (8005270 <mbedtls_aes_setkey_enc+0x3bc>)
 8005178:	5cd3      	ldrb	r3, [r2, r3]
 800517a:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8005180:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8005182:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	3304      	adds	r3, #4
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	3320      	adds	r3, #32
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	3324      	adds	r3, #36	; 0x24
 8005194:	404a      	eors	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	3308      	adds	r3, #8
 800519c:	6819      	ldr	r1, [r3, #0]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	3324      	adds	r3, #36	; 0x24
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	3328      	adds	r3, #40	; 0x28
 80051a8:	404a      	eors	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	330c      	adds	r3, #12
 80051b0:	6819      	ldr	r1, [r3, #0]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3328      	adds	r3, #40	; 0x28
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	332c      	adds	r3, #44	; 0x2c
 80051bc:	404a      	eors	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	3310      	adds	r3, #16
 80051c4:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	322c      	adds	r2, #44	; 0x2c
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	4928      	ldr	r1, [pc, #160]	; (8005270 <mbedtls_aes_setkey_enc+0x3bc>)
 80051d0:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 80051d2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	332c      	adds	r3, #44	; 0x2c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	4924      	ldr	r1, [pc, #144]	; (8005270 <mbedtls_aes_setkey_enc+0x3bc>)
 80051e0:	5ccb      	ldrb	r3, [r1, r3]
 80051e2:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80051e4:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	332c      	adds	r3, #44	; 0x2c
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	491f      	ldr	r1, [pc, #124]	; (8005270 <mbedtls_aes_setkey_enc+0x3bc>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80051f6:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	332c      	adds	r3, #44	; 0x2c
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0e1b      	lsrs	r3, r3, #24
 8005202:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <mbedtls_aes_setkey_enc+0x3bc>)
 8005204:	5cd3      	ldrb	r3, [r2, r3]
 8005206:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	3330      	adds	r3, #48	; 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800520c:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 800520e:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	3314      	adds	r3, #20
 8005214:	6819      	ldr	r1, [r3, #0]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	3330      	adds	r3, #48	; 0x30
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	3334      	adds	r3, #52	; 0x34
 8005220:	404a      	eors	r2, r1
 8005222:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3318      	adds	r3, #24
 8005228:	6819      	ldr	r1, [r3, #0]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3334      	adds	r3, #52	; 0x34
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	3338      	adds	r3, #56	; 0x38
 8005234:	404a      	eors	r2, r1
 8005236:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	331c      	adds	r3, #28
 800523c:	6819      	ldr	r1, [r3, #0]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3338      	adds	r3, #56	; 0x38
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	333c      	adds	r3, #60	; 0x3c
 8005248:	404a      	eors	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3301      	adds	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3320      	adds	r3, #32
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b06      	cmp	r3, #6
 800525c:	f67f af66 	bls.w	800512c <mbedtls_aes_setkey_enc+0x278>
            }
            break;
 8005260:	bf00      	nop
    }

    return( 0 );
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	200028b4 	.word	0x200028b4
 8005270:	200006b4 	.word	0x200006b4

08005274 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b0d0      	sub	sp, #320	; 0x140
 8005278:	af00      	add	r7, sp, #0
 800527a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800527e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005282:	6018      	str	r0, [r3, #0]
 8005284:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005288:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800528c:	6019      	str	r1, [r3, #0]
 800528e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005292:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005296:	601a      	str	r2, [r3, #0]
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 8005298:	f107 0314 	add.w	r3, r7, #20
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fde9 	bl	8004e74 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80052a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052a6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3308      	adds	r3, #8
 80052ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80052b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80052c0:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 80052c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052c6:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 80052ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80052d2:	f107 0014 	add.w	r0, r7, #20
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	6819      	ldr	r1, [r3, #0]
 80052da:	f7ff fdeb 	bl	8004eb4 <mbedtls_aes_setkey_enc>
 80052de:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 80052e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f040 80dd 	bne.w	80054a6 <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 80052ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8005302:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005306:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	4413      	add	r3, r2
 800531a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    *RK++ = *SK++;
 800531e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005322:	1d13      	adds	r3, r2, #4
 8005324:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005328:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800532c:	1d19      	adds	r1, r3, #4
 800532e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005336:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800533a:	1d13      	adds	r3, r2, #4
 800533c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005340:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005344:	1d19      	adds	r1, r3, #4
 8005346:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800534e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005352:	1d13      	adds	r3, r2, #4
 8005354:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005358:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800535c:	1d19      	adds	r1, r3, #4
 800535e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005366:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800536a:	1d13      	adds	r3, r2, #4
 800536c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005370:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005374:	1d19      	adds	r1, r3, #4
 8005376:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800537e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005382:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3b01      	subs	r3, #1
 800538c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005390:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005394:	3b20      	subs	r3, #32
 8005396:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800539a:	e04f      	b.n	800543c <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80053a2:	e03d      	b.n	8005420 <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 80053a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	4a44      	ldr	r2, [pc, #272]	; (80054c0 <mbedtls_aes_setkey_dec+0x24c>)
 80053ae:	5cd3      	ldrb	r3, [r2, r3]
 80053b0:	461a      	mov	r2, r3
 80053b2:	4b44      	ldr	r3, [pc, #272]	; (80054c4 <mbedtls_aes_setkey_dec+0x250>)
 80053b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 80053b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	493f      	ldr	r1, [pc, #252]	; (80054c0 <mbedtls_aes_setkey_dec+0x24c>)
 80053c4:	5ccb      	ldrb	r3, [r1, r3]
 80053c6:	4619      	mov	r1, r3
 80053c8:	4b3f      	ldr	r3, [pc, #252]	; (80054c8 <mbedtls_aes_setkey_dec+0x254>)
 80053ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 80053ce:	405a      	eors	r2, r3
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 80053d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	4939      	ldr	r1, [pc, #228]	; (80054c0 <mbedtls_aes_setkey_dec+0x24c>)
 80053dc:	5ccb      	ldrb	r3, [r1, r3]
 80053de:	4619      	mov	r1, r3
 80053e0:	4b3a      	ldr	r3, [pc, #232]	; (80054cc <mbedtls_aes_setkey_dec+0x258>)
 80053e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 80053e6:	ea82 0103 	eor.w	r1, r2, r3
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80053ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	0e1b      	lsrs	r3, r3, #24
 80053f2:	4a33      	ldr	r2, [pc, #204]	; (80054c0 <mbedtls_aes_setkey_dec+0x24c>)
 80053f4:	5cd3      	ldrb	r3, [r2, r3]
 80053f6:	461a      	mov	r2, r3
 80053f8:	4b35      	ldr	r3, [pc, #212]	; (80054d0 <mbedtls_aes_setkey_dec+0x25c>)
 80053fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 80053fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005402:	1d18      	adds	r0, r3, #4
 8005404:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8005408:	404a      	eors	r2, r1
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800540a:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 800540c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005410:	3301      	adds	r3, #1
 8005412:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005416:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800541a:	3304      	adds	r3, #4
 800541c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005420:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005424:	2b03      	cmp	r3, #3
 8005426:	ddbd      	ble.n	80053a4 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8005428:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800542c:	3b01      	subs	r3, #1
 800542e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005432:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005436:	3b20      	subs	r3, #32
 8005438:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800543c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005440:	2b00      	cmp	r3, #0
 8005442:	dcab      	bgt.n	800539c <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8005444:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005448:	1d13      	adds	r3, r2, #4
 800544a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800544e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005452:	1d19      	adds	r1, r3, #4
 8005454:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800545c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005460:	1d13      	adds	r3, r2, #4
 8005462:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005466:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800546a:	1d19      	adds	r1, r3, #4
 800546c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005474:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005478:	1d13      	adds	r3, r2, #4
 800547a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800547e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005482:	1d19      	adds	r1, r3, #4
 8005484:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800548c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005490:	1d13      	adds	r3, r2, #4
 8005492:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005496:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800549a:	1d19      	adds	r1, r3, #4
 800549c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e000      	b.n	80054a8 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 80054a6:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 80054a8:	f107 0314 	add.w	r3, r7, #20
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff fcef 	bl	8004e90 <mbedtls_aes_free>

    return( ret );
 80054b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	200006b4 	.word	0x200006b4
 80054c4:	200018b4 	.word	0x200018b4
 80054c8:	20001cb4 	.word	0x20001cb4
 80054cc:	200020b4 	.word	0x200020b4
 80054d0:	200024b4 	.word	0x200024b4

080054d4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b08f      	sub	sp, #60	; 0x3c
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	3301      	adds	r3, #1
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	3302      	adds	r3, #2
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	041b      	lsls	r3, r3, #16
 80054fe:	431a      	orrs	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	3303      	adds	r3, #3
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	4313      	orrs	r3, r2
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	1d1a      	adds	r2, r3, #4
 8005510:	633a      	str	r2, [r7, #48]	; 0x30
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005516:	4053      	eors	r3, r2
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	3304      	adds	r3, #4
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	3305      	adds	r3, #5
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	431a      	orrs	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	3306      	adds	r3, #6
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	041b      	lsls	r3, r3, #16
 8005534:	431a      	orrs	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	3307      	adds	r3, #7
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	061b      	lsls	r3, r3, #24
 800553e:	4313      	orrs	r3, r2
 8005540:	62bb      	str	r3, [r7, #40]	; 0x28
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	1d1a      	adds	r2, r3, #4
 8005546:	633a      	str	r2, [r7, #48]	; 0x30
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800554c:	4053      	eors	r3, r2
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	3308      	adds	r3, #8
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3309      	adds	r3, #9
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	431a      	orrs	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	330a      	adds	r3, #10
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	041b      	lsls	r3, r3, #16
 800556a:	431a      	orrs	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	330b      	adds	r3, #11
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	061b      	lsls	r3, r3, #24
 8005574:	4313      	orrs	r3, r2
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	633a      	str	r2, [r7, #48]	; 0x30
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	4053      	eors	r3, r2
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	330c      	adds	r3, #12
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	330d      	adds	r3, #13
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	431a      	orrs	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	330e      	adds	r3, #14
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	431a      	orrs	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	330f      	adds	r3, #15
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	4313      	orrs	r3, r2
 80055ac:	623b      	str	r3, [r7, #32]
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	1d1a      	adds	r2, r3, #4
 80055b2:	633a      	str	r2, [r7, #48]	; 0x30
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a3a      	ldr	r2, [r7, #32]
 80055b8:	4053      	eors	r3, r2
 80055ba:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	105b      	asrs	r3, r3, #1
 80055c2:	3b01      	subs	r3, #1
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
 80055c6:	e0fa      	b.n	80057be <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	1d1a      	adds	r2, r3, #4
 80055cc:	633a      	str	r2, [r7, #48]	; 0x30
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	49ab      	ldr	r1, [pc, #684]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 80055d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055da:	405a      	eors	r2, r3
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	49a9      	ldr	r1, [pc, #676]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 80055e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055e8:	405a      	eors	r2, r3
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	49a6      	ldr	r1, [pc, #664]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 80055f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055f6:	405a      	eors	r2, r3
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	0e1b      	lsrs	r3, r3, #24
 80055fc:	49a4      	ldr	r1, [pc, #656]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 80055fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005602:	4053      	eors	r3, r2
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	1d1a      	adds	r2, r3, #4
 800560a:	633a      	str	r2, [r7, #48]	; 0x30
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	b2db      	uxtb	r3, r3
 8005612:	499c      	ldr	r1, [pc, #624]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 8005614:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005618:	405a      	eors	r2, r3
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	b2db      	uxtb	r3, r3
 8005620:	4999      	ldr	r1, [pc, #612]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005622:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005626:	405a      	eors	r2, r3
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	0c1b      	lsrs	r3, r3, #16
 800562c:	b2db      	uxtb	r3, r3
 800562e:	4997      	ldr	r1, [pc, #604]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005630:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005634:	405a      	eors	r2, r3
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	0e1b      	lsrs	r3, r3, #24
 800563a:	4995      	ldr	r1, [pc, #596]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 800563c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005640:	4053      	eors	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	1d1a      	adds	r2, r3, #4
 8005648:	633a      	str	r2, [r7, #48]	; 0x30
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	b2db      	uxtb	r3, r3
 8005650:	498c      	ldr	r1, [pc, #560]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 8005652:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005656:	405a      	eors	r2, r3
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	0a1b      	lsrs	r3, r3, #8
 800565c:	b2db      	uxtb	r3, r3
 800565e:	498a      	ldr	r1, [pc, #552]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005660:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005664:	405a      	eors	r2, r3
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	0c1b      	lsrs	r3, r3, #16
 800566a:	b2db      	uxtb	r3, r3
 800566c:	4987      	ldr	r1, [pc, #540]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 800566e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005672:	405a      	eors	r2, r3
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	0e1b      	lsrs	r3, r3, #24
 8005678:	4985      	ldr	r1, [pc, #532]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 800567a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800567e:	4053      	eors	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	1d1a      	adds	r2, r3, #4
 8005686:	633a      	str	r2, [r7, #48]	; 0x30
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	497d      	ldr	r1, [pc, #500]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 8005690:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005694:	405a      	eors	r2, r3
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	b2db      	uxtb	r3, r3
 800569c:	497a      	ldr	r1, [pc, #488]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 800569e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056a2:	405a      	eors	r2, r3
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	0c1b      	lsrs	r3, r3, #16
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	4978      	ldr	r1, [pc, #480]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 80056ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056b0:	405a      	eors	r2, r3
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	0e1b      	lsrs	r3, r3, #24
 80056b6:	4976      	ldr	r1, [pc, #472]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 80056b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056bc:	4053      	eors	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	633a      	str	r2, [r7, #48]	; 0x30
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	496d      	ldr	r1, [pc, #436]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 80056ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056d2:	405a      	eors	r2, r3
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	496b      	ldr	r1, [pc, #428]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 80056dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056e0:	405a      	eors	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	4968      	ldr	r1, [pc, #416]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 80056ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056ee:	405a      	eors	r2, r3
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	0e1b      	lsrs	r3, r3, #24
 80056f4:	4966      	ldr	r1, [pc, #408]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 80056f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056fa:	4053      	eors	r3, r2
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	1d1a      	adds	r2, r3, #4
 8005702:	633a      	str	r2, [r7, #48]	; 0x30
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	495e      	ldr	r1, [pc, #376]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 800570c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005710:	405a      	eors	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	b2db      	uxtb	r3, r3
 8005718:	495b      	ldr	r1, [pc, #364]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 800571a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800571e:	405a      	eors	r2, r3
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	0c1b      	lsrs	r3, r3, #16
 8005724:	b2db      	uxtb	r3, r3
 8005726:	4959      	ldr	r1, [pc, #356]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005728:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800572c:	405a      	eors	r2, r3
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	0e1b      	lsrs	r3, r3, #24
 8005732:	4957      	ldr	r1, [pc, #348]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005734:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005738:	4053      	eors	r3, r2
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	633a      	str	r2, [r7, #48]	; 0x30
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	494e      	ldr	r1, [pc, #312]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 800574a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800574e:	405a      	eors	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	b2db      	uxtb	r3, r3
 8005756:	494c      	ldr	r1, [pc, #304]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005758:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800575c:	405a      	eors	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	0c1b      	lsrs	r3, r3, #16
 8005762:	b2db      	uxtb	r3, r3
 8005764:	4949      	ldr	r1, [pc, #292]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005766:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800576a:	405a      	eors	r2, r3
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	0e1b      	lsrs	r3, r3, #24
 8005770:	4947      	ldr	r1, [pc, #284]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005772:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005776:	4053      	eors	r3, r2
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	633a      	str	r2, [r7, #48]	; 0x30
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	493f      	ldr	r1, [pc, #252]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 8005788:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800578c:	405a      	eors	r2, r3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	b2db      	uxtb	r3, r3
 8005794:	493c      	ldr	r1, [pc, #240]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005796:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800579a:	405a      	eors	r2, r3
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	0c1b      	lsrs	r3, r3, #16
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	493a      	ldr	r1, [pc, #232]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 80057a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057a8:	405a      	eors	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	0e1b      	lsrs	r3, r3, #24
 80057ae:	4938      	ldr	r1, [pc, #224]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 80057b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057b4:	4053      	eors	r3, r2
 80057b6:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	3b01      	subs	r3, #1
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f73f af01 	bgt.w	80055c8 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	1d1a      	adds	r2, r3, #4
 80057ca:	633a      	str	r2, [r7, #48]	; 0x30
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	492c      	ldr	r1, [pc, #176]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 80057d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057d8:	405a      	eors	r2, r3
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	0a1b      	lsrs	r3, r3, #8
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	4929      	ldr	r1, [pc, #164]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 80057e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057e6:	405a      	eors	r2, r3
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	0c1b      	lsrs	r3, r3, #16
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	4927      	ldr	r1, [pc, #156]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 80057f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057f4:	405a      	eors	r2, r3
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	0e1b      	lsrs	r3, r3, #24
 80057fa:	4925      	ldr	r1, [pc, #148]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 80057fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005800:	4053      	eors	r3, r2
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	633a      	str	r2, [r7, #48]	; 0x30
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	b2db      	uxtb	r3, r3
 8005810:	491c      	ldr	r1, [pc, #112]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 8005812:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005816:	405a      	eors	r2, r3
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	b2db      	uxtb	r3, r3
 800581e:	491a      	ldr	r1, [pc, #104]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005820:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005824:	405a      	eors	r2, r3
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4917      	ldr	r1, [pc, #92]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 800582e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005832:	405a      	eors	r2, r3
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	0e1b      	lsrs	r3, r3, #24
 8005838:	4915      	ldr	r1, [pc, #84]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 800583a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800583e:	4053      	eors	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	1d1a      	adds	r2, r3, #4
 8005846:	633a      	str	r2, [r7, #48]	; 0x30
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	b2db      	uxtb	r3, r3
 800584e:	490d      	ldr	r1, [pc, #52]	; (8005884 <mbedtls_internal_aes_encrypt+0x3b0>)
 8005850:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005854:	405a      	eors	r2, r3
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	0a1b      	lsrs	r3, r3, #8
 800585a:	b2db      	uxtb	r3, r3
 800585c:	490a      	ldr	r1, [pc, #40]	; (8005888 <mbedtls_internal_aes_encrypt+0x3b4>)
 800585e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005862:	405a      	eors	r2, r3
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	0c1b      	lsrs	r3, r3, #16
 8005868:	b2db      	uxtb	r3, r3
 800586a:	4908      	ldr	r1, [pc, #32]	; (800588c <mbedtls_internal_aes_encrypt+0x3b8>)
 800586c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005870:	405a      	eors	r2, r3
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	0e1b      	lsrs	r3, r3, #24
 8005876:	4906      	ldr	r1, [pc, #24]	; (8005890 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005878:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800587c:	4053      	eors	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	e007      	b.n	8005894 <mbedtls_internal_aes_encrypt+0x3c0>
 8005884:	200007b4 	.word	0x200007b4
 8005888:	20000bb4 	.word	0x20000bb4
 800588c:	20000fb4 	.word	0x20000fb4
 8005890:	200013b4 	.word	0x200013b4
 8005894:	1d1a      	adds	r2, r3, #4
 8005896:	633a      	str	r2, [r7, #48]	; 0x30
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	4979      	ldr	r1, [pc, #484]	; (8005a84 <mbedtls_internal_aes_encrypt+0x5b0>)
 80058a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058a4:	405a      	eors	r2, r3
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	4976      	ldr	r1, [pc, #472]	; (8005a88 <mbedtls_internal_aes_encrypt+0x5b4>)
 80058ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058b2:	405a      	eors	r2, r3
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	4974      	ldr	r1, [pc, #464]	; (8005a8c <mbedtls_internal_aes_encrypt+0x5b8>)
 80058bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058c0:	405a      	eors	r2, r3
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	0e1b      	lsrs	r3, r3, #24
 80058c6:	4972      	ldr	r1, [pc, #456]	; (8005a90 <mbedtls_internal_aes_encrypt+0x5bc>)
 80058c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058cc:	4053      	eors	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	633a      	str	r2, [r7, #48]	; 0x30
 80058d6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	496d      	ldr	r1, [pc, #436]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 80058de:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 80058e0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	0a1b      	lsrs	r3, r3, #8
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	496a      	ldr	r1, [pc, #424]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
 80058ec:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80058ee:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	0c1b      	lsrs	r3, r3, #16
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	4967      	ldr	r1, [pc, #412]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 80058f8:	5ccb      	ldrb	r3, [r1, r3]
 80058fa:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80058fc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	0e1b      	lsrs	r3, r3, #24
 8005902:	4964      	ldr	r1, [pc, #400]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 8005904:	5ccb      	ldrb	r3, [r1, r3]
 8005906:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8005908:	4053      	eors	r3, r2
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	1d1a      	adds	r2, r3, #4
 8005910:	633a      	str	r2, [r7, #48]	; 0x30
 8005912:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	495e      	ldr	r1, [pc, #376]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 800591a:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 800591c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	b2db      	uxtb	r3, r3
 8005924:	495b      	ldr	r1, [pc, #364]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 8005926:	5ccb      	ldrb	r3, [r1, r3]
 8005928:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800592a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	b2db      	uxtb	r3, r3
 8005932:	4958      	ldr	r1, [pc, #352]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 8005934:	5ccb      	ldrb	r3, [r1, r3]
 8005936:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005938:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	0e1b      	lsrs	r3, r3, #24
 800593e:	4955      	ldr	r1, [pc, #340]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 8005940:	5ccb      	ldrb	r3, [r1, r3]
 8005942:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8005944:	4053      	eors	r3, r2
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	633a      	str	r2, [r7, #48]	; 0x30
 800594e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	494f      	ldr	r1, [pc, #316]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 8005956:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8005958:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	0a1b      	lsrs	r3, r3, #8
 800595e:	b2db      	uxtb	r3, r3
 8005960:	494c      	ldr	r1, [pc, #304]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8005966:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	0c1b      	lsrs	r3, r3, #16
 800596c:	b2db      	uxtb	r3, r3
 800596e:	4949      	ldr	r1, [pc, #292]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 8005970:	5ccb      	ldrb	r3, [r1, r3]
 8005972:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8005974:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	0e1b      	lsrs	r3, r3, #24
 800597a:	4946      	ldr	r1, [pc, #280]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 800597c:	5ccb      	ldrb	r3, [r1, r3]
 800597e:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8005980:	4053      	eors	r3, r2
 8005982:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	633a      	str	r2, [r7, #48]	; 0x30
 800598a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	4940      	ldr	r1, [pc, #256]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 8005992:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8005994:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	b2db      	uxtb	r3, r3
 800599c:	493d      	ldr	r1, [pc, #244]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 800599e:	5ccb      	ldrb	r3, [r1, r3]
 80059a0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 80059a2:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	493a      	ldr	r1, [pc, #232]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 80059ac:	5ccb      	ldrb	r3, [r1, r3]
 80059ae:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80059b0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	0e1b      	lsrs	r3, r3, #24
 80059b6:	4937      	ldr	r1, [pc, #220]	; (8005a94 <mbedtls_internal_aes_encrypt+0x5c0>)
 80059b8:	5ccb      	ldrb	r3, [r1, r3]
 80059ba:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 80059bc:	4053      	eors	r3, r2
 80059be:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	0a1a      	lsrs	r2, r3, #8
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3301      	adds	r3, #1
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	0c1a      	lsrs	r2, r3, #16
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3302      	adds	r3, #2
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	0e1a      	lsrs	r2, r3, #24
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3303      	adds	r3, #3
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	0a1a      	lsrs	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3305      	adds	r3, #5
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	0c1a      	lsrs	r2, r3, #16
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3306      	adds	r3, #6
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	0e1a      	lsrs	r2, r3, #24
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3307      	adds	r3, #7
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	0a1a      	lsrs	r2, r3, #8
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3309      	adds	r3, #9
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	0c1a      	lsrs	r2, r3, #16
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	330a      	adds	r3, #10
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	0e1a      	lsrs	r2, r3, #24
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	330b      	adds	r3, #11
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	6a3a      	ldr	r2, [r7, #32]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	0a1a      	lsrs	r2, r3, #8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	330d      	adds	r3, #13
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	0c1a      	lsrs	r2, r3, #16
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	330e      	adds	r3, #14
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	0e1a      	lsrs	r2, r3, #24
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	330f      	adds	r3, #15
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	373c      	adds	r7, #60	; 0x3c
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	200007b4 	.word	0x200007b4
 8005a88:	20000bb4 	.word	0x20000bb4
 8005a8c:	20000fb4 	.word	0x20000fb4
 8005a90:	200013b4 	.word	0x200013b4
 8005a94:	200006b4 	.word	0x200006b4

08005a98 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b08f      	sub	sp, #60	; 0x3c
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3302      	adds	r3, #2
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	041b      	lsls	r3, r3, #16
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	3303      	adds	r3, #3
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	4313      	orrs	r3, r2
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	633a      	str	r2, [r7, #48]	; 0x30
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ada:	4053      	eors	r3, r2
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	3305      	adds	r3, #5
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	3306      	adds	r3, #6
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	041b      	lsls	r3, r3, #16
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3307      	adds	r3, #7
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	061b      	lsls	r3, r3, #24
 8005b02:	4313      	orrs	r3, r2
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	1d1a      	adds	r2, r3, #4
 8005b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b10:	4053      	eors	r3, r2
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	3308      	adds	r3, #8
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	3309      	adds	r3, #9
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	431a      	orrs	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	330a      	adds	r3, #10
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	330b      	adds	r3, #11
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	061b      	lsls	r3, r3, #24
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	1d1a      	adds	r2, r3, #4
 8005b40:	633a      	str	r2, [r7, #48]	; 0x30
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b46:	4053      	eors	r3, r2
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	461a      	mov	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	330d      	adds	r3, #13
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	330e      	adds	r3, #14
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	330f      	adds	r3, #15
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	061b      	lsls	r3, r3, #24
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	1d1a      	adds	r2, r3, #4
 8005b76:	633a      	str	r2, [r7, #48]	; 0x30
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6a3a      	ldr	r2, [r7, #32]
 8005b7c:	4053      	eors	r3, r2
 8005b7e:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	105b      	asrs	r3, r3, #1
 8005b86:	3b01      	subs	r3, #1
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
 8005b8a:	e0fa      	b.n	8005d82 <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	633a      	str	r2, [r7, #48]	; 0x30
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	49ab      	ldr	r1, [pc, #684]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005b9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b9e:	405a      	eors	r2, r3
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	0a1b      	lsrs	r3, r3, #8
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	49a9      	ldr	r1, [pc, #676]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005ba8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bac:	405a      	eors	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	49a6      	ldr	r1, [pc, #664]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005bb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bba:	405a      	eors	r2, r3
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	0e1b      	lsrs	r3, r3, #24
 8005bc0:	49a4      	ldr	r1, [pc, #656]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005bc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bc6:	4053      	eors	r3, r2
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	1d1a      	adds	r2, r3, #4
 8005bce:	633a      	str	r2, [r7, #48]	; 0x30
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	499c      	ldr	r1, [pc, #624]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005bd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bdc:	405a      	eors	r2, r3
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	0a1b      	lsrs	r3, r3, #8
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	4999      	ldr	r1, [pc, #612]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005be6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bea:	405a      	eors	r2, r3
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	0c1b      	lsrs	r3, r3, #16
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	4997      	ldr	r1, [pc, #604]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005bf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bf8:	405a      	eors	r2, r3
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	0e1b      	lsrs	r3, r3, #24
 8005bfe:	4995      	ldr	r1, [pc, #596]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005c00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c04:	4053      	eors	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	633a      	str	r2, [r7, #48]	; 0x30
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	498c      	ldr	r1, [pc, #560]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005c16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c1a:	405a      	eors	r2, r3
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	498a      	ldr	r1, [pc, #552]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005c24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c28:	405a      	eors	r2, r3
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	0c1b      	lsrs	r3, r3, #16
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	4987      	ldr	r1, [pc, #540]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005c32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c36:	405a      	eors	r2, r3
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	0e1b      	lsrs	r3, r3, #24
 8005c3c:	4985      	ldr	r1, [pc, #532]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005c3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c42:	4053      	eors	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	1d1a      	adds	r2, r3, #4
 8005c4a:	633a      	str	r2, [r7, #48]	; 0x30
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	497d      	ldr	r1, [pc, #500]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005c54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c58:	405a      	eors	r2, r3
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	497a      	ldr	r1, [pc, #488]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005c62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c66:	405a      	eors	r2, r3
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4978      	ldr	r1, [pc, #480]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005c70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c74:	405a      	eors	r2, r3
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	0e1b      	lsrs	r3, r3, #24
 8005c7a:	4976      	ldr	r1, [pc, #472]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005c7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c80:	4053      	eors	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	633a      	str	r2, [r7, #48]	; 0x30
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	496d      	ldr	r1, [pc, #436]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005c92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c96:	405a      	eors	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	496b      	ldr	r1, [pc, #428]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005ca0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ca4:	405a      	eors	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	0c1b      	lsrs	r3, r3, #16
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	4968      	ldr	r1, [pc, #416]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005cae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cb2:	405a      	eors	r2, r3
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	0e1b      	lsrs	r3, r3, #24
 8005cb8:	4966      	ldr	r1, [pc, #408]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005cba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cbe:	4053      	eors	r3, r2
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	1d1a      	adds	r2, r3, #4
 8005cc6:	633a      	str	r2, [r7, #48]	; 0x30
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	495e      	ldr	r1, [pc, #376]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005cd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cd4:	405a      	eors	r2, r3
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	495b      	ldr	r1, [pc, #364]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005cde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ce2:	405a      	eors	r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	4959      	ldr	r1, [pc, #356]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005cec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cf0:	405a      	eors	r2, r3
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	0e1b      	lsrs	r3, r3, #24
 8005cf6:	4957      	ldr	r1, [pc, #348]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005cf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cfc:	4053      	eors	r3, r2
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	1d1a      	adds	r2, r3, #4
 8005d04:	633a      	str	r2, [r7, #48]	; 0x30
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	494e      	ldr	r1, [pc, #312]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005d0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d12:	405a      	eors	r2, r3
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	0a1b      	lsrs	r3, r3, #8
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	494c      	ldr	r1, [pc, #304]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005d1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d20:	405a      	eors	r2, r3
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	4949      	ldr	r1, [pc, #292]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005d2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d2e:	405a      	eors	r2, r3
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	0e1b      	lsrs	r3, r3, #24
 8005d34:	4947      	ldr	r1, [pc, #284]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005d36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d3a:	4053      	eors	r3, r2
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	1d1a      	adds	r2, r3, #4
 8005d42:	633a      	str	r2, [r7, #48]	; 0x30
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	493f      	ldr	r1, [pc, #252]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005d4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d50:	405a      	eors	r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	0a1b      	lsrs	r3, r3, #8
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	493c      	ldr	r1, [pc, #240]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005d5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d5e:	405a      	eors	r2, r3
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	0c1b      	lsrs	r3, r3, #16
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	493a      	ldr	r1, [pc, #232]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005d68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d6c:	405a      	eors	r2, r3
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	0e1b      	lsrs	r3, r3, #24
 8005d72:	4938      	ldr	r1, [pc, #224]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005d74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d78:	4053      	eors	r3, r2
 8005d7a:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f73f af01 	bgt.w	8005b8c <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	1d1a      	adds	r2, r3, #4
 8005d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	492c      	ldr	r1, [pc, #176]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005d98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d9c:	405a      	eors	r2, r3
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	0a1b      	lsrs	r3, r3, #8
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	4929      	ldr	r1, [pc, #164]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005da6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005daa:	405a      	eors	r2, r3
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	4927      	ldr	r1, [pc, #156]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005db4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005db8:	405a      	eors	r2, r3
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	0e1b      	lsrs	r3, r3, #24
 8005dbe:	4925      	ldr	r1, [pc, #148]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005dc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dc4:	4053      	eors	r3, r2
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	1d1a      	adds	r2, r3, #4
 8005dcc:	633a      	str	r2, [r7, #48]	; 0x30
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	491c      	ldr	r1, [pc, #112]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005dd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dda:	405a      	eors	r2, r3
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	491a      	ldr	r1, [pc, #104]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005de4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005de8:	405a      	eors	r2, r3
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	0c1b      	lsrs	r3, r3, #16
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	4917      	ldr	r1, [pc, #92]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005df2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005df6:	405a      	eors	r2, r3
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	0e1b      	lsrs	r3, r3, #24
 8005dfc:	4915      	ldr	r1, [pc, #84]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005dfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e02:	4053      	eors	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	1d1a      	adds	r2, r3, #4
 8005e0a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	490d      	ldr	r1, [pc, #52]	; (8005e48 <mbedtls_internal_aes_decrypt+0x3b0>)
 8005e14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e18:	405a      	eors	r2, r3
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	490a      	ldr	r1, [pc, #40]	; (8005e4c <mbedtls_internal_aes_decrypt+0x3b4>)
 8005e22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e26:	405a      	eors	r2, r3
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	4908      	ldr	r1, [pc, #32]	; (8005e50 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005e30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e34:	405a      	eors	r2, r3
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	0e1b      	lsrs	r3, r3, #24
 8005e3a:	4906      	ldr	r1, [pc, #24]	; (8005e54 <mbedtls_internal_aes_decrypt+0x3bc>)
 8005e3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e40:	4053      	eors	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	e007      	b.n	8005e58 <mbedtls_internal_aes_decrypt+0x3c0>
 8005e48:	200018b4 	.word	0x200018b4
 8005e4c:	20001cb4 	.word	0x20001cb4
 8005e50:	200020b4 	.word	0x200020b4
 8005e54:	200024b4 	.word	0x200024b4
 8005e58:	1d1a      	adds	r2, r3, #4
 8005e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	4979      	ldr	r1, [pc, #484]	; (8006048 <mbedtls_internal_aes_decrypt+0x5b0>)
 8005e64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e68:	405a      	eors	r2, r3
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	4976      	ldr	r1, [pc, #472]	; (800604c <mbedtls_internal_aes_decrypt+0x5b4>)
 8005e72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e76:	405a      	eors	r2, r3
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	0c1b      	lsrs	r3, r3, #16
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	4974      	ldr	r1, [pc, #464]	; (8006050 <mbedtls_internal_aes_decrypt+0x5b8>)
 8005e80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e84:	405a      	eors	r2, r3
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	0e1b      	lsrs	r3, r3, #24
 8005e8a:	4972      	ldr	r1, [pc, #456]	; (8006054 <mbedtls_internal_aes_decrypt+0x5bc>)
 8005e8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e90:	4053      	eors	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	1d1a      	adds	r2, r3, #4
 8005e98:	633a      	str	r2, [r7, #48]	; 0x30
 8005e9a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	496d      	ldr	r1, [pc, #436]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005ea2:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8005ea4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	496a      	ldr	r1, [pc, #424]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005eae:	5ccb      	ldrb	r3, [r1, r3]
 8005eb0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8005eb2:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	0c1b      	lsrs	r3, r3, #16
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	4967      	ldr	r1, [pc, #412]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005ebc:	5ccb      	ldrb	r3, [r1, r3]
 8005ebe:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8005ec0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	0e1b      	lsrs	r3, r3, #24
 8005ec6:	4964      	ldr	r1, [pc, #400]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005ec8:	5ccb      	ldrb	r3, [r1, r3]
 8005eca:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8005ecc:	4053      	eors	r3, r2
 8005ece:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	633a      	str	r2, [r7, #48]	; 0x30
 8005ed6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	495e      	ldr	r1, [pc, #376]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005ede:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8005ee0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	495b      	ldr	r1, [pc, #364]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005eea:	5ccb      	ldrb	r3, [r1, r3]
 8005eec:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8005eee:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	4958      	ldr	r1, [pc, #352]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005ef8:	5ccb      	ldrb	r3, [r1, r3]
 8005efa:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8005efc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	0e1b      	lsrs	r3, r3, #24
 8005f02:	4955      	ldr	r1, [pc, #340]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005f04:	5ccb      	ldrb	r3, [r1, r3]
 8005f06:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8005f08:	4053      	eors	r3, r2
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	1d1a      	adds	r2, r3, #4
 8005f10:	633a      	str	r2, [r7, #48]	; 0x30
 8005f12:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	494f      	ldr	r1, [pc, #316]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005f1a:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8005f1c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	0a1b      	lsrs	r3, r3, #8
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	494c      	ldr	r1, [pc, #304]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8005f2a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	4949      	ldr	r1, [pc, #292]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005f34:	5ccb      	ldrb	r3, [r1, r3]
 8005f36:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005f38:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	0e1b      	lsrs	r3, r3, #24
 8005f3e:	4946      	ldr	r1, [pc, #280]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005f40:	5ccb      	ldrb	r3, [r1, r3]
 8005f42:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8005f44:	4053      	eors	r3, r2
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	1d1a      	adds	r2, r3, #4
 8005f4c:	633a      	str	r2, [r7, #48]	; 0x30
 8005f4e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	4940      	ldr	r1, [pc, #256]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005f56:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8005f58:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	493d      	ldr	r1, [pc, #244]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005f62:	5ccb      	ldrb	r3, [r1, r3]
 8005f64:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8005f66:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	0c1b      	lsrs	r3, r3, #16
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	493a      	ldr	r1, [pc, #232]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005f70:	5ccb      	ldrb	r3, [r1, r3]
 8005f72:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005f74:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	0e1b      	lsrs	r3, r3, #24
 8005f7a:	4937      	ldr	r1, [pc, #220]	; (8006058 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005f7c:	5ccb      	ldrb	r3, [r1, r3]
 8005f7e:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8005f80:	4053      	eors	r3, r2
 8005f82:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	0a1a      	lsrs	r2, r3, #8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3301      	adds	r3, #1
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	0c1a      	lsrs	r2, r3, #16
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	0e1a      	lsrs	r2, r3, #24
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3303      	adds	r3, #3
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	0a1a      	lsrs	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3305      	adds	r3, #5
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	0c1a      	lsrs	r2, r3, #16
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3306      	adds	r3, #6
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	0e1a      	lsrs	r2, r3, #24
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3307      	adds	r3, #7
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	0a1a      	lsrs	r2, r3, #8
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3309      	adds	r3, #9
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	0c1a      	lsrs	r2, r3, #16
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	330a      	adds	r3, #10
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	0e1a      	lsrs	r2, r3, #24
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	330b      	adds	r3, #11
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	330c      	adds	r3, #12
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	0a1a      	lsrs	r2, r3, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	330d      	adds	r3, #13
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	0c1a      	lsrs	r2, r3, #16
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	330e      	adds	r3, #14
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	0e1a      	lsrs	r2, r3, #24
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	330f      	adds	r3, #15
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	373c      	adds	r7, #60	; 0x3c
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	200018b4 	.word	0x200018b4
 800604c:	20001cb4 	.word	0x20001cb4
 8006050:	200020b4 	.word	0x200020b4
 8006054:	200024b4 	.word	0x200024b4
 8006058:	200017b4 	.word	0x200017b4

0800605c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d106      	bne.n	800607e <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fa2d 	bl	80054d4 <mbedtls_internal_aes_encrypt>
 800607a:	4603      	mov	r3, r0
 800607c:	e005      	b.n	800608a <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fd08 	bl	8005a98 <mbedtls_internal_aes_decrypt>
 8006088:	4603      	mov	r3, r0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 8006092:	b5b0      	push	{r4, r5, r7, lr}
 8006094:	b08a      	sub	sp, #40	; 0x28
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	603b      	str	r3, [r7, #0]
    int i;
    unsigned char temp[16];

    if( length % 16 )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 80060aa:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80060ae:	e06d      	b.n	800618c <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d166      	bne.n	8006184 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 80060b6:	e036      	b.n	8006126 <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	f107 0414 	add.w	r4, r7, #20
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 80060c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff ffc4 	bl	800605c <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 80060d4:	2300      	movs	r3, #0
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
 80060d8:	e010      	b.n	80060fc <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060de:	4413      	add	r3, r2
 80060e0:	7819      	ldrb	r1, [r3, #0]
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	4413      	add	r3, r2
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80060ee:	4403      	add	r3, r0
 80060f0:	404a      	eors	r2, r1
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	3301      	adds	r3, #1
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	2b0f      	cmp	r3, #15
 8006100:	ddeb      	ble.n	80060da <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	461d      	mov	r5, r3
 8006106:	f107 0414 	add.w	r4, r7, #20
 800610a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800610c:	6028      	str	r0, [r5, #0]
 800610e:	6069      	str	r1, [r5, #4]
 8006110:	60aa      	str	r2, [r5, #8]
 8006112:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	3310      	adds	r3, #16
 8006118:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	3310      	adds	r3, #16
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3b10      	subs	r3, #16
 8006124:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1c5      	bne.n	80060b8 <mbedtls_aes_crypt_cbc+0x26>
 800612c:	e02d      	b.n	800618a <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
 8006132:	e010      	b.n	8006156 <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006138:	4413      	add	r3, r2
 800613a:	7819      	ldrb	r1, [r3, #0]
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	4413      	add	r3, r2
 8006142:	781a      	ldrb	r2, [r3, #0]
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006148:	4403      	add	r3, r0
 800614a:	404a      	eors	r2, r1
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	3301      	adds	r3, #1
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	2b0f      	cmp	r3, #15
 800615a:	ddeb      	ble.n	8006134 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800615c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff ff7a 	bl	800605c <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 8006168:	2210      	movs	r2, #16
 800616a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800616c:	6838      	ldr	r0, [r7, #0]
 800616e:	f017 fb53 	bl	801d818 <memcpy>

            input  += 16;
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	3310      	adds	r3, #16
 8006176:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	3310      	adds	r3, #16
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3b10      	subs	r3, #16
 8006182:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1d1      	bne.n	800612e <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3728      	adds	r7, #40	; 0x28
 8006190:	46bd      	mov	sp, r7
 8006192:	bdb0      	pop	{r4, r5, r7, pc}

08006194 <mbedtls_zeroize>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	e004      	b.n	80061ae <mbedtls_zeroize+0x1a>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	60fa      	str	r2, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	603a      	str	r2, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f5      	bne.n	80061a4 <mbedtls_zeroize+0x10>
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
    if( ( end - *p ) < 1 )
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dc02      	bgt.n	80061e6 <mbedtls_asn1_get_len+0x1e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80061e0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80061e4:	e0ac      	b.n	8006340 <mbedtls_asn1_get_len+0x178>

    if( ( **p & 0x80 ) == 0 )
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b25b      	sxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	db09      	blt.n	8006206 <mbedtls_asn1_get_len+0x3e>
        *len = *(*p)++;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	1c59      	adds	r1, r3, #1
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	6011      	str	r1, [r2, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	e090      	b.n	8006328 <mbedtls_asn1_get_len+0x160>
    else
    {
        switch( **p & 0x7F )
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006210:	3b01      	subs	r3, #1
 8006212:	2b03      	cmp	r3, #3
 8006214:	f200 8085 	bhi.w	8006322 <mbedtls_asn1_get_len+0x15a>
 8006218:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <mbedtls_asn1_get_len+0x58>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006231 	.word	0x08006231
 8006224:	0800625d 	.word	0x0800625d
 8006228:	08006293 	.word	0x08006293
 800622c:	080062d5 	.word	0x080062d5
        {
        case 1:
            if( ( end - *p ) < 2 )
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	dc02      	bgt.n	8006242 <mbedtls_asn1_get_len+0x7a>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800623c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8006240:	e07e      	b.n	8006340 <mbedtls_asn1_get_len+0x178>

            *len = (*p)[1];
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3301      	adds	r3, #1
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
            (*p) += 2;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	1c9a      	adds	r2, r3, #2
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	601a      	str	r2, [r3, #0]
            break;
 800625a:	e065      	b.n	8006328 <mbedtls_asn1_get_len+0x160>

        case 2:
            if( ( end - *p ) < 3 )
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	dc02      	bgt.n	800626e <mbedtls_asn1_get_len+0xa6>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006268:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 800626c:	e068      	b.n	8006340 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3301      	adds	r3, #1
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	3202      	adds	r2, #2
 800627e:	7812      	ldrb	r2, [r2, #0]
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
            (*p) += 3;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	1cda      	adds	r2, r3, #3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	601a      	str	r2, [r3, #0]
            break;
 8006290:	e04a      	b.n	8006328 <mbedtls_asn1_get_len+0x160>

        case 3:
            if( ( end - *p ) < 4 )
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b03      	cmp	r3, #3
 800629c:	dc02      	bgt.n	80062a4 <mbedtls_asn1_get_len+0xdc>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800629e:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80062a2:	e04d      	b.n	8006340 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 16 ) |
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3301      	adds	r3, #1
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	041a      	lsls	r2, r3, #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3302      	adds	r3, #2
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 80062b8:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	3203      	adds	r2, #3
 80062c0:	7812      	ldrb	r2, [r2, #0]
 80062c2:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 16 ) |
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
            (*p) += 4;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	1d1a      	adds	r2, r3, #4
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]
            break;
 80062d2:	e029      	b.n	8006328 <mbedtls_asn1_get_len+0x160>

        case 4:
            if( ( end - *p ) < 5 )
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b04      	cmp	r3, #4
 80062de:	dc02      	bgt.n	80062e6 <mbedtls_asn1_get_len+0x11e>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80062e0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80062e4:	e02c      	b.n	8006340 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3301      	adds	r3, #1
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	061a      	lsls	r2, r3, #24
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3302      	adds	r3, #2
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	431a      	orrs	r2, r3
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3303      	adds	r3, #3
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8006306:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	6812      	ldr	r2, [r2, #0]
 800630c:	3204      	adds	r2, #4
 800630e:	7812      	ldrb	r2, [r2, #0]
 8006310:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
            (*p) += 5;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	1d5a      	adds	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]
            break;
 8006320:	e002      	b.n	8006328 <mbedtls_asn1_get_len+0x160>

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8006322:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006326:	e00b      	b.n	8006340 <mbedtls_asn1_get_len+0x178>
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	1a8a      	subs	r2, r1, r2
 8006334:	4293      	cmp	r3, r2
 8006336:	d902      	bls.n	800633e <mbedtls_asn1_get_len+0x176>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006338:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 800633c:	e000      	b.n	8006340 <mbedtls_asn1_get_len+0x178>

    return( 0 );
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
    if( ( end - *p ) < 1 )
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	dc02      	bgt.n	800636c <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8006366:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 800636a:	e014      	b.n	8006396 <mbedtls_asn1_get_tag+0x4a>

    if( **p != tag )
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	4293      	cmp	r3, r2
 8006378:	d002      	beq.n	8006380 <mbedtls_asn1_get_tag+0x34>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 800637a:	f06f 0361 	mvn.w	r3, #97	; 0x61
 800637e:	e00a      	b.n	8006396 <mbedtls_asn1_get_tag+0x4a>

    (*p)++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7ff ff1a 	bl	80061c8 <mbedtls_asn1_get_len>
 8006394:	4603      	mov	r3, r0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80063aa:	f107 0210 	add.w	r2, r7, #16
 80063ae:	2301      	movs	r3, #1
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f7ff ffca 	bl	800634c <mbedtls_asn1_get_tag>
 80063b8:	6178      	str	r0, [r7, #20]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <mbedtls_asn1_get_bool+0x26>
        return( ret );
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	e016      	b.n	80063f2 <mbedtls_asn1_get_bool+0x54>

    if( len != 1 )
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d002      	beq.n	80063d0 <mbedtls_asn1_get_bool+0x32>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80063ca:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80063ce:	e010      	b.n	80063f2 <mbedtls_asn1_get_bool+0x54>

    *val = ( **p != 0 ) ? 1 : 0;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bf14      	ite	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	2300      	moveq	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	601a      	str	r2, [r3, #0]
    (*p)++;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	601a      	str	r2, [r3, #0]

    return( 0 );
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b086      	sub	sp, #24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8006406:	f107 0210 	add.w	r2, r7, #16
 800640a:	2302      	movs	r3, #2
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff ff9c 	bl	800634c <mbedtls_asn1_get_tag>
 8006414:	6178      	str	r0, [r7, #20]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <mbedtls_asn1_get_int+0x26>
        return( ret );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	e026      	b.n	800646e <mbedtls_asn1_get_int+0x74>

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <mbedtls_asn1_get_int+0x3e>
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b04      	cmp	r3, #4
 800642a:	d805      	bhi.n	8006438 <mbedtls_asn1_get_int+0x3e>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	b25b      	sxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	da02      	bge.n	800643e <mbedtls_asn1_get_int+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8006438:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800643c:	e017      	b.n	800646e <mbedtls_asn1_get_int+0x74>

    *val = 0;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]

    while( len-- > 0 )
 8006444:	e00d      	b.n	8006462 <mbedtls_asn1_get_int+0x68>
    {
        *val = ( *val << 8 ) | **p;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	021b      	lsls	r3, r3, #8
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	7812      	ldrb	r2, [r2, #0]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]
        (*p)++;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	601a      	str	r2, [r3, #0]
    while( len-- > 0 )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1e5a      	subs	r2, r3, #1
 8006466:	613a      	str	r2, [r7, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1ec      	bne.n	8006446 <mbedtls_asn1_get_int+0x4c>
    }

    return( 0 );
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <mbedtls_asn1_get_bitstring>:
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b086      	sub	sp, #24
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	2303      	movs	r3, #3
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7ff ff5f 	bl	800634c <mbedtls_asn1_get_tag>
 800648e:	6178      	str	r0, [r7, #20]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <mbedtls_asn1_get_bitstring+0x24>
        return( ret );
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	e030      	b.n	80064fc <mbedtls_asn1_get_bitstring+0x86>

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <mbedtls_asn1_get_bitstring+0x32>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80064a2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80064a6:	e029      	b.n	80064fc <mbedtls_asn1_get_bitstring+0x86>
    bs->len -= 1;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	1e5a      	subs	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	601a      	str	r2, [r3, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781a      	ldrb	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	711a      	strb	r2, [r3, #4]
    if( bs->unused_bits > 7 )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	791b      	ldrb	r3, [r3, #4]
 80064c0:	2b07      	cmp	r3, #7
 80064c2:	d902      	bls.n	80064ca <mbedtls_asn1_get_bitstring+0x54>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80064c4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80064c8:	e018      	b.n	80064fc <mbedtls_asn1_get_bitstring+0x86>
    (*p)++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	601a      	str	r2, [r3, #0]

    /* Get actual bitstring */
    bs->p = *p;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	609a      	str	r2, [r3, #8]
    *p += bs->len;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	441a      	add	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	601a      	str	r2, [r3, #0]

    if( *p != end )
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d002      	beq.n	80064fa <mbedtls_asn1_get_bitstring+0x84>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80064f4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80064f8:	e000      	b.n	80064fc <mbedtls_asn1_get_bitstring+0x86>

    return( 0 );
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8006510:	2303      	movs	r3, #3
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f7ff ff18 	bl	800634c <mbedtls_asn1_get_tag>
 800651c:	6178      	str	r0, [r7, #20]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <mbedtls_asn1_get_bitstring_null+0x24>
        return( ret );
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	e012      	b.n	800654e <mbedtls_asn1_get_bitstring_null+0x4a>

    if( (*len)-- < 2 || *(*p)++ != 0 )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	1e59      	subs	r1, r3, #1
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6011      	str	r1, [r2, #0]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d907      	bls.n	8006546 <mbedtls_asn1_get_bitstring_null+0x42>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	6011      	str	r1, [r2, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <mbedtls_asn1_get_bitstring_null+0x48>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8006546:	f06f 0367 	mvn.w	r3, #103	; 0x67
 800654a:	e000      	b.n	800654e <mbedtls_asn1_get_bitstring_null+0x4a>

    return( 0 );
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b088      	sub	sp, #32
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8006564:	f107 0214 	add.w	r2, r7, #20
 8006568:	2330      	movs	r3, #48	; 0x30
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff feed 	bl	800634c <mbedtls_asn1_get_tag>
 8006572:	61f8      	str	r0, [r7, #28]
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <mbedtls_asn1_get_sequence_of+0x28>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	e051      	b.n	8006622 <mbedtls_asn1_get_sequence_of+0xcc>

    if( *p + len != end )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	4413      	add	r3, r2
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	d039      	beq.n	8006600 <mbedtls_asn1_get_sequence_of+0xaa>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800658c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006590:	e047      	b.n	8006622 <mbedtls_asn1_get_sequence_of+0xcc>

    while( *p < end )
    {
        buf = &(cur->buf);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	61bb      	str	r3, [r7, #24]
        buf->tag = **p;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	601a      	str	r2, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	1d1a      	adds	r2, r3, #4
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff fece 	bl	800634c <mbedtls_asn1_get_tag>
 80065b0:	61f8      	str	r0, [r7, #28]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <mbedtls_asn1_get_sequence_of+0x66>
            return( ret );
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	e032      	b.n	8006622 <mbedtls_asn1_get_sequence_of+0xcc>

        buf->p = *p;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	609a      	str	r2, [r3, #8]
        *p += buf->len;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	441a      	add	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	601a      	str	r2, [r3, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d911      	bls.n	8006600 <mbedtls_asn1_get_sequence_of+0xaa>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 80065dc:	2110      	movs	r1, #16
 80065de:	2001      	movs	r0, #1
 80065e0:	f017 f8c8 	bl	801d774 <calloc>
 80065e4:	4603      	mov	r3, r0
 80065e6:	461a      	mov	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60da      	str	r2, [r3, #12]
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <mbedtls_asn1_get_sequence_of+0xa4>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80065f4:	f06f 0369 	mvn.w	r3, #105	; 0x69
 80065f8:	e013      	b.n	8006622 <mbedtls_asn1_get_sequence_of+0xcc>

            cur = cur->next;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	607b      	str	r3, [r7, #4]
    while( *p < end )
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	429a      	cmp	r2, r3
 8006608:	d8c3      	bhi.n	8006592 <mbedtls_asn1_get_sequence_of+0x3c>
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	60da      	str	r2, [r3, #12]

    if( *p != end )
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	d002      	beq.n	8006620 <mbedtls_asn1_get_sequence_of+0xca>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800661a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800661e:	e000      	b.n	8006622 <mbedtls_asn1_get_sequence_of+0xcc>

    return( 0 );
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b086      	sub	sp, #24
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8006638:	f107 0210 	add.w	r2, r7, #16
 800663c:	2330      	movs	r3, #48	; 0x30
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff fe83 	bl	800634c <mbedtls_asn1_get_tag>
 8006646:	6178      	str	r0, [r7, #20]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <mbedtls_asn1_get_alg+0x28>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	e062      	b.n	8006718 <mbedtls_asn1_get_alg+0xee>

    if( ( end - *p ) < 1 )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	dc02      	bgt.n	8006664 <mbedtls_asn1_get_alg+0x3a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800665e:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8006662:	e059      	b.n	8006718 <mbedtls_asn1_get_alg+0xee>

    alg->tag = **p;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	601a      	str	r2, [r3, #0]
    end = *p + len;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	1d1a      	adds	r2, r3, #4
 800667e:	2306      	movs	r3, #6
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f7ff fe62 	bl	800634c <mbedtls_asn1_get_tag>
 8006688:	6178      	str	r0, [r7, #20]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <mbedtls_asn1_get_alg+0x6a>
        return( ret );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	e041      	b.n	8006718 <mbedtls_asn1_get_alg+0xee>

    alg->p = *p;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]
    *p += alg->len;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]

    if( *p == end )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d105      	bne.n	80066c0 <mbedtls_asn1_get_alg+0x96>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
 80066b4:	210c      	movs	r1, #12
 80066b6:	6838      	ldr	r0, [r7, #0]
 80066b8:	f7ff fd6c 	bl	8006194 <mbedtls_zeroize>
        return( 0 );
 80066bc:	2300      	movs	r3, #0
 80066be:	e02b      	b.n	8006718 <mbedtls_asn1_get_alg+0xee>
    }

    params->tag = **p;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	601a      	str	r2, [r3, #0]
    (*p)++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	3304      	adds	r3, #4
 80066da:	461a      	mov	r2, r3
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff fd72 	bl	80061c8 <mbedtls_asn1_get_len>
 80066e4:	6178      	str	r0, [r7, #20]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <mbedtls_asn1_get_alg+0xc6>
        return( ret );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	e013      	b.n	8006718 <mbedtls_asn1_get_alg+0xee>

    params->p = *p;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	609a      	str	r2, [r3, #8]
    *p += params->len;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	441a      	add	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	601a      	str	r2, [r3, #0]

    if( *p != end )
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	429a      	cmp	r2, r3
 800670e:	d002      	beq.n	8006716 <mbedtls_asn1_get_alg+0xec>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8006710:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006714:	e000      	b.n	8006718 <mbedtls_asn1_get_alg+0xee>

    return( 0 );
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8006720:	b480      	push	{r7}
 8006722:	b08b      	sub	sp, #44	; 0x2c
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	2300      	movs	r3, #0
 8006734:	623b      	str	r3, [r7, #32]
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
 800673a:	e06f      	b.n	800681c <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 8006740:	e005      	b.n	800674e <mbedtls_base64_decode+0x2e>
        {
            ++i;
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	3301      	adds	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	3301      	adds	r3, #1
 800674c:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 800674e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	429a      	cmp	r2, r3
 8006754:	d205      	bcs.n	8006762 <mbedtls_base64_decode+0x42>
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	4413      	add	r3, r2
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b20      	cmp	r3, #32
 8006760:	d0ef      	beq.n	8006742 <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 8006762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	429a      	cmp	r2, r3
 8006768:	d05d      	beq.n	8006826 <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 800676a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d90c      	bls.n	800678e <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	4413      	add	r3, r2
 800677a:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 800677c:	2b0d      	cmp	r3, #13
 800677e:	d106      	bne.n	800678e <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	3301      	adds	r3, #1
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	4413      	add	r3, r2
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b0a      	cmp	r3, #10
 800678c:	d040      	beq.n	8006810 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	4413      	add	r3, r2
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b0a      	cmp	r3, #10
 8006798:	d03c      	beq.n	8006814 <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80067a0:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 80067a4:	e0d0      	b.n	8006948 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	4413      	add	r3, r2
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b3d      	cmp	r3, #61	; 0x3d
 80067b0:	d108      	bne.n	80067c4 <mbedtls_base64_decode+0xa4>
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	3301      	adds	r3, #1
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d902      	bls.n	80067c4 <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80067be:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 80067c2:	e0c1      	b.n	8006948 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	4413      	add	r3, r2
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	b25b      	sxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	db08      	blt.n	80067e4 <mbedtls_base64_decode+0xc4>
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	4413      	add	r3, r2
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	4b5d      	ldr	r3, [pc, #372]	; (8006954 <mbedtls_base64_decode+0x234>)
 80067de:	5c9b      	ldrb	r3, [r3, r2]
 80067e0:	2b7f      	cmp	r3, #127	; 0x7f
 80067e2:	d102      	bne.n	80067ea <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80067e4:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 80067e8:	e0ae      	b.n	8006948 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	4413      	add	r3, r2
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	4b57      	ldr	r3, [pc, #348]	; (8006954 <mbedtls_base64_decode+0x234>)
 80067f6:	5c9b      	ldrb	r3, [r3, r2]
 80067f8:	2b3f      	cmp	r3, #63	; 0x3f
 80067fa:	d805      	bhi.n	8006808 <mbedtls_base64_decode+0xe8>
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8006802:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8006806:	e09f      	b.n	8006948 <mbedtls_base64_decode+0x228>

        n++;
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	3301      	adds	r3, #1
 800680c:	623b      	str	r3, [r7, #32]
 800680e:	e002      	b.n	8006816 <mbedtls_base64_decode+0xf6>
            continue;
 8006810:	bf00      	nop
 8006812:	e000      	b.n	8006816 <mbedtls_base64_decode+0xf6>
            continue;
 8006814:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	3301      	adds	r3, #1
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
 800681c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	429a      	cmp	r2, r3
 8006822:	d38b      	bcc.n	800673c <mbedtls_base64_decode+0x1c>
 8006824:	e000      	b.n	8006828 <mbedtls_base64_decode+0x108>
            break;
 8006826:	bf00      	nop
    }

    if( n == 0 )
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]
        return( 0 );
 8006834:	2300      	movs	r3, #0
 8006836:	e087      	b.n	8006948 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	08da      	lsrs	r2, r3, #3
 800683c:	4613      	mov	r3, r2
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4413      	add	r3, r2
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	4619      	mov	r1, r3
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	f003 0207 	and.w	r2, r3, #7
 800684c:	4613      	mov	r3, r2
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	4413      	add	r3, r2
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	3307      	adds	r3, #7
 8006856:	08db      	lsrs	r3, r3, #3
 8006858:	440b      	add	r3, r1
 800685a:	623b      	str	r3, [r7, #32]
    n -= j;
 800685c:	6a3a      	ldr	r2, [r7, #32]
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <mbedtls_base64_decode+0x152>
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	429a      	cmp	r2, r3
 8006870:	d205      	bcs.n	800687e <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a3a      	ldr	r2, [r7, #32]
 8006876:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8006878:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800687c:	e064      	b.n	8006948 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800687e:	2303      	movs	r3, #3
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	2300      	movs	r3, #0
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	e051      	b.n	8006934 <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b0d      	cmp	r3, #13
 8006896:	d046      	beq.n	8006926 <mbedtls_base64_decode+0x206>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b0a      	cmp	r3, #10
 800689e:	d042      	beq.n	8006926 <mbedtls_base64_decode+0x206>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d03e      	beq.n	8006926 <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <mbedtls_base64_decode+0x234>)
 80068b0:	5c9b      	ldrb	r3, [r3, r2]
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	bf0c      	ite	eq
 80068b6:	2301      	moveq	r3, #1
 80068b8:	2300      	movne	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	019a      	lsls	r2, r3, #6
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	4619      	mov	r1, r3
 80068ce:	4b21      	ldr	r3, [pc, #132]	; (8006954 <mbedtls_base64_decode+0x234>)
 80068d0:	5c5b      	ldrb	r3, [r3, r1]
 80068d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d6:	4313      	orrs	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	3301      	adds	r3, #1
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d120      	bne.n	8006928 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d006      	beq.n	80068fe <mbedtls_base64_decode+0x1de>
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	0c19      	lsrs	r1, r3, #16
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	617a      	str	r2, [r7, #20]
 80068fa:	b2ca      	uxtb	r2, r1
 80068fc:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d906      	bls.n	8006912 <mbedtls_base64_decode+0x1f2>
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	0a19      	lsrs	r1, r3, #8
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	617a      	str	r2, [r7, #20]
 800690e:	b2ca      	uxtb	r2, r1
 8006910:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d907      	bls.n	8006928 <mbedtls_base64_decode+0x208>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	617a      	str	r2, [r7, #20]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	e000      	b.n	8006928 <mbedtls_base64_decode+0x208>
            continue;
 8006926:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	3b01      	subs	r3, #1
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1aa      	bne.n	8006890 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	461a      	mov	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]

    return( 0 );
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	372c      	adds	r7, #44	; 0x2c
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	080240d0 	.word	0x080240d0

08006958 <mbedtls_mpi_zeroize>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e004      	b.n	8006972 <mbedtls_mpi_zeroize+0x1a>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	1d1a      	adds	r2, r3, #4
 800696c:	60fa      	str	r2, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	1e5a      	subs	r2, r3, #1
 8006976:	603a      	str	r2, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f5      	bne.n	8006968 <mbedtls_mpi_zeroize+0x10>
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <mbedtls_zeroize>:

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800698a:	b480      	push	{r7}
 800698c:	b085      	sub	sp, #20
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e004      	b.n	80069a4 <mbedtls_zeroize+0x1a>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	60fa      	str	r2, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	701a      	strb	r2, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	1e5a      	subs	r2, r3, #1
 80069a8:	603a      	str	r2, [r7, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f5      	bne.n	800699a <mbedtls_zeroize+0x10>
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <mbedtls_mpi_init+0x22>
        return;

    X->s = 1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
    X->n = 0;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	609a      	str	r2, [r3, #8]
 80069dc:	e000      	b.n	80069e0 <mbedtls_mpi_init+0x24>
        return;
 80069de:	bf00      	nop
}
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01a      	beq.n	8006a2e <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00c      	beq.n	8006a1a <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f7ff ffa4 	bl	8006958 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f016 fee7 	bl	801d7e8 <free>
    }

    X->s = 1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
    X->n = 0;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	609a      	str	r2, [r3, #8]
 8006a2c:	e000      	b.n	8006a30 <mbedtls_mpi_free+0x46>
        return;
 8006a2e:	bf00      	nop
}
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d902      	bls.n	8006a50 <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8006a4a:	f06f 030f 	mvn.w	r3, #15
 8006a4e:	e031      	b.n	8006ab4 <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d92b      	bls.n	8006ab2 <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8006a5a:	2104      	movs	r1, #4
 8006a5c:	6838      	ldr	r0, [r7, #0]
 8006a5e:	f016 fe89 	bl	801d774 <calloc>
 8006a62:	4603      	mov	r3, r0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8006a6c:	f06f 030f 	mvn.w	r3, #15
 8006a70:	e020      	b.n	8006ab4 <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d015      	beq.n	8006aa6 <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6899      	ldr	r1, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	461a      	mov	r2, r3
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f016 fec6 	bl	801d818 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f7ff ff5e 	bl	8006958 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f016 fea1 	bl	801d7e8 <free>
        }

        X->n = nblimbs;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	605a      	str	r2, [r3, #4]
        X->p = p;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i;

    if( X == Y )
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d101      	bne.n	8006ad2 <mbedtls_mpi_copy+0x16>
        return( 0 );
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e041      	b.n	8006b56 <mbedtls_mpi_copy+0x9a>

    if( Y->p == NULL )
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <mbedtls_mpi_copy+0x28>
    {
        mbedtls_mpi_free( X );
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ff85 	bl	80069ea <mbedtls_mpi_free>
        return( 0 );
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e038      	b.n	8006b56 <mbedtls_mpi_copy+0x9a>
    }

    for( i = Y->n - 1; i > 0; i-- )
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e00a      	b.n	8006b04 <mbedtls_mpi_copy+0x48>
        if( Y->p[i] != 0 )
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <mbedtls_mpi_copy+0x50>
    for( i = Y->n - 1; i > 0; i-- )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1f1      	bne.n	8006aee <mbedtls_mpi_copy+0x32>
 8006b0a:	e000      	b.n	8006b0e <mbedtls_mpi_copy+0x52>
            break;
 8006b0c:	bf00      	nop
    i++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3301      	adds	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]

    X->s = Y->s;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	601a      	str	r2, [r3, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff ff89 	bl	8006a36 <mbedtls_mpi_grow>
 8006b24:	60b8      	str	r0, [r7, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d112      	bne.n	8006b52 <mbedtls_mpi_copy+0x96>

    memset( X->p, 0, X->n * ciL );
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6898      	ldr	r0, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	461a      	mov	r2, r3
 8006b38:	2100      	movs	r1, #0
 8006b3a:	f016 fe95 	bl	801d868 <memset>
    memcpy( X->p, Y->p, i * ciL );
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6898      	ldr	r0, [r3, #8]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6899      	ldr	r1, [r3, #8]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f016 fe64 	bl	801d818 <memcpy>
 8006b50:	e000      	b.n	8006b54 <mbedtls_mpi_copy+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8006b52:	bf00      	nop

cleanup:

    return( ret );
 8006b54:	68bb      	ldr	r3, [r7, #8]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8006b68:	2101      	movs	r1, #1
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ff63 	bl	8006a36 <mbedtls_mpi_grow>
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d11a      	bne.n	8006bae <mbedtls_mpi_lset+0x50>
    memset( X->p, 0, X->n * ciL );
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6898      	ldr	r0, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	461a      	mov	r2, r3
 8006b84:	2100      	movs	r1, #0
 8006b86:	f016 fe6f 	bl	801d868 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8006b90:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da02      	bge.n	8006ba6 <mbedtls_mpi_lset+0x48>
 8006ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba4:	e000      	b.n	8006ba8 <mbedtls_mpi_lset+0x4a>
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	e000      	b.n	8006bb0 <mbedtls_mpi_lset+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8006bae:	bf00      	nop

cleanup:

    return( ret );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
    if( X->n * biL <= pos )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	015b      	lsls	r3, r3, #5
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d301      	bcc.n	8006bd4 <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e00d      	b.n	8006bf0 <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bec:	f003 0301 	and.w	r3, r3, #1
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]

    for( i = 0; i < X->n; i++ )
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	e01d      	b.n	8006c4a <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 8006c0e:	2300      	movs	r3, #0
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	e014      	b.n	8006c3e <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	fa22 f303 	lsr.w	r3, r2, r3
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <mbedtls_mpi_lsb+0x36>
                return( count );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	e011      	b.n	8006c56 <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3301      	adds	r3, #1
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b1f      	cmp	r3, #31
 8006c42:	d9e7      	bls.n	8006c14 <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	3301      	adds	r3, #1
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d3dc      	bcc.n	8006c0e <mbedtls_mpi_lsb+0x12>

    return( 0 );
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8006c6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c6e:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e00a      	b.n	8006c8c <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <mbedtls_clz+0x32>

        mask >>= 1;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b1f      	cmp	r3, #31
 8006c90:	d9f1      	bls.n	8006c76 <mbedtls_clz+0x14>
 8006c92:	e000      	b.n	8006c96 <mbedtls_clz+0x34>
        if( x & mask ) break;
 8006c94:	bf00      	nop
    }

    return j;
 8006c96:	68fb      	ldr	r3, [r7, #12]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e025      	b.n	8006d04 <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e00a      	b.n	8006cd8 <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f1      	bne.n	8006cc2 <mbedtls_mpi_bitlen+0x1e>
 8006cde:	e000      	b.n	8006ce2 <mbedtls_mpi_bitlen+0x3e>
            break;
 8006ce0:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff ffb7 	bl	8006c62 <mbedtls_clz>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f1c3 0320 	rsb	r3, r3, #32
 8006cfa:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4413      	add	r3, r2
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff ffc5 	bl	8006ca4 <mbedtls_mpi_bitlen>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	3307      	adds	r3, #7
 8006d1e:	08db      	lsrs	r3, r3, #3
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	089b      	lsrs	r3, r3, #2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	f002 0203 	and.w	r2, r2, #3
 8006d3e:	2a00      	cmp	r2, #0
 8006d40:	bf14      	ite	ne
 8006d42:	2201      	movne	r2, #1
 8006d44:	2200      	moveq	r2, #0
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	4413      	add	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d00d      	beq.n	8006d72 <mbedtls_mpi_read_binary+0x4a>
    {
        mbedtls_mpi_free( X );
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff fe47 	bl	80069ea <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff fe2d 	bl	80069bc <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8006d62:	6939      	ldr	r1, [r7, #16]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fe66 	bl	8006a36 <mbedtls_mpi_grow>
 8006d6a:	61f8      	str	r0, [r7, #28]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d130      	bne.n	8006dd4 <mbedtls_mpi_read_binary+0xac>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8006d72:	2100      	movs	r1, #0
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff fef2 	bl	8006b5e <mbedtls_mpi_lset>
 8006d7a:	61f8      	str	r0, [r7, #28]
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d12a      	bne.n	8006dd8 <mbedtls_mpi_read_binary+0xb0>

    for( i = buflen, j = 0; i > 0; i--, j++ )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e01f      	b.n	8006dcc <mbedtls_mpi_read_binary+0xa4>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	4413      	add	r3, r2
 8006d98:	6819      	ldr	r1, [r3, #0]
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	f003 0318 	and.w	r3, r3, #24
 8006dae:	409a      	lsls	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6898      	ldr	r0, [r3, #8]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0303 	bic.w	r3, r3, #3
 8006dba:	4403      	add	r3, r0
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
    for( i = buflen, j = 0; i > 0; i--, j++ )
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1dc      	bne.n	8006d8c <mbedtls_mpi_read_binary+0x64>

cleanup:
 8006dd2:	e002      	b.n	8006dda <mbedtls_mpi_read_binary+0xb2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8006dd4:	bf00      	nop
 8006dd6:	e000      	b.n	8006dda <mbedtls_mpi_read_binary+0xb2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8006dd8:	bf00      	nop

    return( ret );
 8006dda:	69fb      	ldr	r3, [r7, #28]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f7ff ff8b 	bl	8006d0c <mbedtls_mpi_size>
 8006df6:	6178      	str	r0, [r7, #20]

    if( buflen < n )
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d202      	bcs.n	8006e06 <mbedtls_mpi_write_binary+0x22>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8006e00:	f06f 0307 	mvn.w	r3, #7
 8006e04:	e029      	b.n	8006e5a <mbedtls_mpi_write_binary+0x76>

    memset( buf, 0, buflen );
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	68b8      	ldr	r0, [r7, #8]
 8006e0c:	f016 fd2c 	bl	801d868 <memset>

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	61fb      	str	r3, [r7, #28]
 8006e16:	2300      	movs	r3, #0
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	e01a      	b.n	8006e52 <mbedtls_mpi_write_binary+0x6e>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	4413      	add	r3, r2
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	f003 0318 	and.w	r3, r3, #24
 8006e32:	fa22 f103 	lsr.w	r1, r2, r3
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	b2ca      	uxtb	r2, r1
 8006e3e:	701a      	strb	r2, [r3, #0]
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e1      	bne.n	8006e1c <mbedtls_mpi_write_binary+0x38>

    return( 0 );
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b088      	sub	sp, #32
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]

    v0 = count / (biL    );
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	f003 031f 	and.w	r3, r3, #31
 8006e7c:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff ff10 	bl	8006ca4 <mbedtls_mpi_bitlen>
 8006e84:	4602      	mov	r2, r0
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	4413      	add	r3, r2
 8006e8a:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	015b      	lsls	r3, r3, #5
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d912      	bls.n	8006ebe <mbedtls_mpi_shift_l+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	f002 021f 	and.w	r2, r2, #31
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	bf14      	ite	ne
 8006ea6:	2201      	movne	r2, #1
 8006ea8:	2200      	moveq	r2, #0
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	4413      	add	r3, r2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff fdc0 	bl	8006a36 <mbedtls_mpi_grow>
 8006eb6:	61f8      	str	r0, [r7, #28]
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d16e      	bne.n	8006f9c <mbedtls_mpi_shift_l+0x13a>

    ret = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02f      	beq.n	8006f28 <mbedtls_mpi_shift_l+0xc6>
    {
        for( i = X->n; i > v0; i-- )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	e016      	b.n	8006efe <mbedtls_mpi_shift_l+0x9c>
            X->p[i - 1] = X->p[i - v0 - 1];
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	69b9      	ldr	r1, [r7, #24]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1acb      	subs	r3, r1, r3
 8006eda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6899      	ldr	r1, [r3, #8]
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d8e4      	bhi.n	8006ed0 <mbedtls_mpi_shift_l+0x6e>

        for( ; i > 0; i-- )
 8006f06:	e00c      	b.n	8006f22 <mbedtls_mpi_shift_l+0xc0>
            X->p[i - 1] = 0;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f12:	3b01      	subs	r3, #1
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1ef      	bne.n	8006f08 <mbedtls_mpi_shift_l+0xa6>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d038      	beq.n	8006fa0 <mbedtls_mpi_shift_l+0x13e>
    {
        for( i = v0; i < X->n; i++ )
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	e02d      	b.n	8006f90 <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f1c3 0320 	rsb	r3, r3, #32
 8006f46:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4a:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	6819      	ldr	r1, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	fa01 f202 	lsl.w	r2, r1, r2
 8006f68:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	6819      	ldr	r1, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	601a      	str	r2, [r3, #0]
            r0 = r1;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d3cc      	bcc.n	8006f34 <mbedtls_mpi_shift_l+0xd2>
        }
    }

cleanup:
 8006f9a:	e001      	b.n	8006fa0 <mbedtls_mpi_shift_l+0x13e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 8006f9c:	bf00      	nop
 8006f9e:	e000      	b.n	8006fa2 <mbedtls_mpi_shift_l+0x140>
cleanup:
 8006fa0:	bf00      	nop

    return( ret );
 8006fa2:	69fb      	ldr	r3, [r7, #28]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61bb      	str	r3, [r7, #24]

    v0 = count /  biL;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	095b      	lsrs	r3, r3, #5
 8006fbe:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d807      	bhi.n	8006fe2 <mbedtls_mpi_shift_r+0x36>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d108      	bne.n	8006fee <mbedtls_mpi_shift_r+0x42>
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff fdba 	bl	8006b5e <mbedtls_mpi_lset>
 8006fea:	4603      	mov	r3, r0
 8006fec:	e075      	b.n	80070da <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d02a      	beq.n	800704a <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	e010      	b.n	800701c <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	69f9      	ldr	r1, [r7, #28]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	440b      	add	r3, r1
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	441a      	add	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6899      	ldr	r1, [r3, #8]
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	3301      	adds	r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	429a      	cmp	r2, r3
 8007028:	d3e7      	bcc.n	8006ffa <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 800702a:	e009      	b.n	8007040 <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	3301      	adds	r3, #1
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	429a      	cmp	r2, r3
 8007048:	d3f0      	bcc.n	800702c <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d043      	beq.n	80070d8 <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	e03c      	b.n	80070d2 <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007062:	3b01      	subs	r3, #1
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f1c3 0320 	rsb	r3, r3, #32
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007080:	3b01      	subs	r3, #1
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	6819      	ldr	r1, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007092:	3b01      	subs	r3, #1
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	fa21 f202 	lsr.w	r2, r1, r2
 800709e:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070aa:	3b01      	subs	r3, #1
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	6819      	ldr	r1, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070bc:	3b01      	subs	r3, #1
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]
            r0 = r1;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1bf      	bne.n	8007058 <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3720      	adds	r7, #32
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	e00d      	b.n	8007110 <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070fe:	3b01      	subs	r3, #1
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3b01      	subs	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1ee      	bne.n	80070f4 <mbedtls_mpi_cmp_abs+0x12>
 8007116:	e000      	b.n	800711a <mbedtls_mpi_cmp_abs+0x38>
            break;
 8007118:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	e00d      	b.n	800713e <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800712c:	3b01      	subs	r3, #1
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d106      	bne.n	8007146 <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	3b01      	subs	r3, #1
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1ee      	bne.n	8007122 <mbedtls_mpi_cmp_abs+0x40>
 8007144:	e000      	b.n	8007148 <mbedtls_mpi_cmp_abs+0x66>
            break;
 8007146:	bf00      	nop

    if( i == 0 && j == 0 )
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d104      	bne.n	8007158 <mbedtls_mpi_cmp_abs+0x76>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 8007154:	2300      	movs	r3, #0
 8007156:	e040      	b.n	80071da <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	429a      	cmp	r2, r3
 800715e:	d901      	bls.n	8007164 <mbedtls_mpi_cmp_abs+0x82>
 8007160:	2301      	movs	r3, #1
 8007162:	e03a      	b.n	80071da <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	429a      	cmp	r2, r3
 800716a:	d932      	bls.n	80071d2 <mbedtls_mpi_cmp_abs+0xf0>
 800716c:	f04f 33ff 	mov.w	r3, #4294967295
 8007170:	e033      	b.n	80071da <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800717c:	3b01      	subs	r3, #1
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	6899      	ldr	r1, [r3, #8]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800718e:	3b01      	subs	r3, #1
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d901      	bls.n	800719e <mbedtls_mpi_cmp_abs+0xbc>
 800719a:	2301      	movs	r3, #1
 800719c:	e01d      	b.n	80071da <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071a8:	3b01      	subs	r3, #1
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	6899      	ldr	r1, [r3, #8]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071ba:	3b01      	subs	r3, #1
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d202      	bcs.n	80071cc <mbedtls_mpi_cmp_abs+0xea>
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ca:	e006      	b.n	80071da <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1cc      	bne.n	8007172 <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	e00d      	b.n	8007214 <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007202:	3b01      	subs	r3, #1
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d106      	bne.n	800721c <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3b01      	subs	r3, #1
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1ee      	bne.n	80071f8 <mbedtls_mpi_cmp_mpi+0x12>
 800721a:	e000      	b.n	800721e <mbedtls_mpi_cmp_mpi+0x38>
            break;
 800721c:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	e00d      	b.n	8007242 <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007230:	3b01      	subs	r3, #1
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	3b01      	subs	r3, #1
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1ee      	bne.n	8007226 <mbedtls_mpi_cmp_mpi+0x40>
 8007248:	e000      	b.n	800724c <mbedtls_mpi_cmp_mpi+0x66>
            break;
 800724a:	bf00      	nop

    if( i == 0 && j == 0 )
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <mbedtls_mpi_cmp_mpi+0x76>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 8007258:	2300      	movs	r3, #0
 800725a:	e059      	b.n	8007310 <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	429a      	cmp	r2, r3
 8007262:	d902      	bls.n	800726a <mbedtls_mpi_cmp_mpi+0x84>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	e052      	b.n	8007310 <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	429a      	cmp	r2, r3
 8007270:	d903      	bls.n	800727a <mbedtls_mpi_cmp_mpi+0x94>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	425b      	negs	r3, r3
 8007278:	e04a      	b.n	8007310 <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	dd05      	ble.n	800728e <mbedtls_mpi_cmp_mpi+0xa8>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	da01      	bge.n	800728e <mbedtls_mpi_cmp_mpi+0xa8>
 800728a:	2301      	movs	r3, #1
 800728c:	e040      	b.n	8007310 <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	dd38      	ble.n	8007308 <mbedtls_mpi_cmp_mpi+0x122>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	da34      	bge.n	8007308 <mbedtls_mpi_cmp_mpi+0x122>
 800729e:	f04f 33ff 	mov.w	r3, #4294967295
 80072a2:	e035      	b.n	8007310 <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072ae:	3b01      	subs	r3, #1
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	6899      	ldr	r1, [r3, #8]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072c0:	3b01      	subs	r3, #1
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d902      	bls.n	80072d2 <mbedtls_mpi_cmp_mpi+0xec>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	e01e      	b.n	8007310 <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072dc:	3b01      	subs	r3, #1
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	6899      	ldr	r1, [r3, #8]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072ee:	3b01      	subs	r3, #1
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d203      	bcs.n	8007302 <mbedtls_mpi_cmp_mpi+0x11c>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	425b      	negs	r3, r3
 8007300:	e006      	b.n	8007310 <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3b01      	subs	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1ca      	bne.n	80072a4 <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	bfb8      	it	lt
 800732c:	425b      	neglt	r3, r3
 800732e:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	da02      	bge.n	800733c <mbedtls_mpi_cmp_int+0x20>
 8007336:	f04f 33ff 	mov.w	r3, #4294967295
 800733a:	e000      	b.n	800733e <mbedtls_mpi_cmp_int+0x22>
 800733c:	2301      	movs	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 8007340:	2301      	movs	r3, #1
 8007342:	613b      	str	r3, [r7, #16]
    Y.p = p;
 8007344:	f107 0308 	add.w	r3, r7, #8
 8007348:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800734a:	f107 030c 	add.w	r3, r7, #12
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff ff48 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 8007356:	4603      	mov	r3, r0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08c      	sub	sp, #48	; 0x30
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d105      	bne.n	8007380 <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	60bb      	str	r3, [r7, #8]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	429a      	cmp	r2, r3
 8007386:	d008      	beq.n	800739a <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff fb96 	bl	8006abc <mbedtls_mpi_copy>
 8007390:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 808d 	bne.w	80074b4 <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
 80073a6:	e00d      	b.n	80073c4 <mbedtls_mpi_add_abs+0x64>
        if( B->p[j - 1] != 0 )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073b2:	3b01      	subs	r3, #1
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <mbedtls_mpi_add_abs+0x6c>
    for( j = B->n; j > 0; j-- )
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	3b01      	subs	r3, #1
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1ee      	bne.n	80073a8 <mbedtls_mpi_add_abs+0x48>
 80073ca:	e000      	b.n	80073ce <mbedtls_mpi_add_abs+0x6e>
            break;
 80073cc:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80073ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff fb30 	bl	8006a36 <mbedtls_mpi_grow>
 80073d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d16c      	bne.n	80074b8 <mbedtls_mpi_add_abs+0x158>

    o = B->p; p = X->p; c = 0;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	623b      	str	r3, [r7, #32]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	61fb      	str	r3, [r7, #28]
 80073ea:	2300      	movs	r3, #0
 80073ec:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80073ee:	2300      	movs	r3, #0
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f2:	e02c      	b.n	800744e <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	441a      	add	r2, r3
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	429a      	cmp	r2, r3
 800740e:	bf8c      	ite	hi
 8007410:	2301      	movhi	r3, #1
 8007412:	2300      	movls	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	441a      	add	r2, r3
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	429a      	cmp	r2, r3
 800742c:	bf8c      	ite	hi
 800742e:	2301      	movhi	r3, #1
 8007430:	2300      	movls	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	461a      	mov	r2, r3
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	4413      	add	r3, r2
 800743a:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	3301      	adds	r3, #1
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	3304      	adds	r3, #4
 8007446:	623b      	str	r3, [r7, #32]
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	3304      	adds	r3, #4
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	429a      	cmp	r2, r3
 8007454:	d3ce      	bcc.n	80073f4 <mbedtls_mpi_add_abs+0x94>
    }

    while( c != 0 )
 8007456:	e029      	b.n	80074ac <mbedtls_mpi_add_abs+0x14c>
    {
        if( i >= X->n )
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800745e:	429a      	cmp	r2, r3
 8007460:	d30f      	bcc.n	8007482 <mbedtls_mpi_add_abs+0x122>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	3301      	adds	r3, #1
 8007466:	4619      	mov	r1, r3
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff fae4 	bl	8006a36 <mbedtls_mpi_grow>
 800746e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d122      	bne.n	80074bc <mbedtls_mpi_add_abs+0x15c>
            p = X->p + i;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	441a      	add	r2, r3
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	429a      	cmp	r2, r3
 8007496:	bf8c      	ite	hi
 8007498:	2301      	movhi	r3, #1
 800749a:	2300      	movls	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	3301      	adds	r3, #1
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	3304      	adds	r3, #4
 80074aa:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1d2      	bne.n	8007458 <mbedtls_mpi_add_abs+0xf8>
    }

cleanup:
 80074b2:	e004      	b.n	80074be <mbedtls_mpi_add_abs+0x15e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80074b4:	bf00      	nop
 80074b6:	e002      	b.n	80074be <mbedtls_mpi_add_abs+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80074b8:	bf00      	nop
 80074ba:	e000      	b.n	80074be <mbedtls_mpi_add_abs+0x15e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80074bc:	bf00      	nop

    return( ret );
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3730      	adds	r7, #48	; 0x30
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b089      	sub	sp, #36	; 0x24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	2300      	movs	r3, #0
 80074da:	61fb      	str	r3, [r7, #28]
 80074dc:	e02b      	b.n	8007536 <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	bf8c      	ite	hi
 80074e8:	2301      	movhi	r3, #1
 80074ea:	2300      	movls	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	bf34      	ite	cc
 8007508:	2301      	movcc	r3, #1
 800750a:	2300      	movcs	r3, #0
 800750c:	b2db      	uxtb	r3, r3
 800750e:	461a      	mov	r2, r3
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	4413      	add	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	3301      	adds	r3, #1
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	3304      	adds	r3, #4
 800752e:	60bb      	str	r3, [r7, #8]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3304      	adds	r3, #4
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	429a      	cmp	r2, r3
 800753c:	d3cf      	bcc.n	80074de <mpi_sub_hlp+0x16>
    }

    while( c != 0 )
 800753e:	e016      	b.n	800756e <mpi_sub_hlp+0xa6>
    {
        z = ( *d < c ); *d -= c;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	429a      	cmp	r2, r3
 8007548:	bf8c      	ite	hi
 800754a:	2301      	movhi	r3, #1
 800754c:	2300      	movls	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	1ad2      	subs	r2, r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
        c = z; i++; d++;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	3301      	adds	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e5      	bne.n	8007540 <mpi_sub_hlp+0x78>
    }
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	3724      	adds	r7, #36	; 0x24
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b08a      	sub	sp, #40	; 0x28
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	68b8      	ldr	r0, [r7, #8]
 8007592:	f7ff fda6 	bl	80070e2 <mbedtls_mpi_cmp_abs>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	da02      	bge.n	80075a2 <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800759c:	f06f 0309 	mvn.w	r3, #9
 80075a0:	e04f      	b.n	8007642 <mbedtls_mpi_sub_abs+0xc0>

    mbedtls_mpi_init( &TB );
 80075a2:	f107 0314 	add.w	r3, r7, #20
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff fa08 	bl	80069bc <mbedtls_mpi_init>

    if( X == B )
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d10c      	bne.n	80075ce <mbedtls_mpi_sub_abs+0x4c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80075b4:	f107 0314 	add.w	r3, r7, #20
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fa7e 	bl	8006abc <mbedtls_mpi_copy>
 80075c0:	6278      	str	r0, [r7, #36]	; 0x24
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d133      	bne.n	8007630 <mbedtls_mpi_sub_abs+0xae>
        B = &TB;
 80075c8:	f107 0314 	add.w	r3, r7, #20
 80075cc:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d007      	beq.n	80075e6 <mbedtls_mpi_sub_abs+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f7ff fa6f 	bl	8006abc <mbedtls_mpi_copy>
 80075de:	6278      	str	r0, [r7, #36]	; 0x24
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d126      	bne.n	8007634 <mbedtls_mpi_sub_abs+0xb2>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2201      	movs	r2, #1
 80075ea:	601a      	str	r2, [r3, #0]

    ret = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24

    for( n = B->n; n > 0; n-- )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	623b      	str	r3, [r7, #32]
 80075f6:	e00d      	b.n	8007614 <mbedtls_mpi_sub_abs+0x92>
        if( B->p[n - 1] != 0 )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007602:	3b01      	subs	r3, #1
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <mbedtls_mpi_sub_abs+0x9a>
    for( n = B->n; n > 0; n-- )
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	3b01      	subs	r3, #1
 8007612:	623b      	str	r3, [r7, #32]
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1ee      	bne.n	80075f8 <mbedtls_mpi_sub_abs+0x76>
 800761a:	e000      	b.n	800761e <mbedtls_mpi_sub_abs+0x9c>
            break;
 800761c:	bf00      	nop

    mpi_sub_hlp( n, B->p, X->p );
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6899      	ldr	r1, [r3, #8]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	461a      	mov	r2, r3
 8007628:	6a38      	ldr	r0, [r7, #32]
 800762a:	f7ff ff4d 	bl	80074c8 <mpi_sub_hlp>
 800762e:	e002      	b.n	8007636 <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8007630:	bf00      	nop
 8007632:	e000      	b.n	8007636 <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8007634:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB );
 8007636:	f107 0314 	add.w	r3, r7, #20
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f9d5 	bl	80069ea <mbedtls_mpi_free>

    return( ret );
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007642:	4618      	mov	r0, r3
 8007644:	3728      	adds	r7, #40	; 0x28
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
    int ret, s = A->s;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	613b      	str	r3, [r7, #16]

    if( A->s * B->s < 0 )
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	fb02 f303 	mul.w	r3, r2, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	da21      	bge.n	80076b0 <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	68b8      	ldr	r0, [r7, #8]
 8007670:	f7ff fd37 	bl	80070e2 <mbedtls_mpi_cmp_abs>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	db0c      	blt.n	8007694 <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff ff7f 	bl	8007582 <mbedtls_mpi_sub_abs>
 8007684:	6178      	str	r0, [r7, #20]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11e      	bne.n	80076ca <mbedtls_mpi_add_mpi+0x80>
            X->s =  s;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	e01f      	b.n	80076d4 <mbedtls_mpi_add_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7ff ff72 	bl	8007582 <mbedtls_mpi_sub_abs>
 800769e:	6178      	str	r0, [r7, #20]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d113      	bne.n	80076ce <mbedtls_mpi_add_mpi+0x84>
            X->s = -s;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	425a      	negs	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	e011      	b.n	80076d4 <mbedtls_mpi_add_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff fe53 	bl	8007360 <mbedtls_mpi_add_abs>
 80076ba:	6178      	str	r0, [r7, #20]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d107      	bne.n	80076d2 <mbedtls_mpi_add_mpi+0x88>
        X->s = s;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	e004      	b.n	80076d4 <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80076ca:	bf00      	nop
 80076cc:	e002      	b.n	80076d4 <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <mbedtls_mpi_add_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80076d2:	bf00      	nop
    }

cleanup:

    return( ret );
 80076d4:	697b      	ldr	r3, [r7, #20]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
    int ret, s = A->s;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	613b      	str	r3, [r7, #16]

    if( A->s * B->s > 0 )
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	fb02 f303 	mul.w	r3, r2, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd21      	ble.n	8007744 <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	68b8      	ldr	r0, [r7, #8]
 8007704:	f7ff fced 	bl	80070e2 <mbedtls_mpi_cmp_abs>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	db0c      	blt.n	8007728 <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7ff ff35 	bl	8007582 <mbedtls_mpi_sub_abs>
 8007718:	6178      	str	r0, [r7, #20]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11e      	bne.n	800775e <mbedtls_mpi_sub_mpi+0x80>
            X->s =  s;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	e01f      	b.n	8007768 <mbedtls_mpi_sub_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff ff28 	bl	8007582 <mbedtls_mpi_sub_abs>
 8007732:	6178      	str	r0, [r7, #20]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d113      	bne.n	8007762 <mbedtls_mpi_sub_mpi+0x84>
            X->s = -s;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	425a      	negs	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	e011      	b.n	8007768 <mbedtls_mpi_sub_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	68b9      	ldr	r1, [r7, #8]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f7ff fe09 	bl	8007360 <mbedtls_mpi_add_abs>
 800774e:	6178      	str	r0, [r7, #20]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d107      	bne.n	8007766 <mbedtls_mpi_sub_mpi+0x88>
        X->s = s;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	e004      	b.n	8007768 <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800775e:	bf00      	nop
 8007760:	e002      	b.n	8007768 <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <mbedtls_mpi_sub_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8007766:	bf00      	nop
    }

cleanup:

    return( ret );
 8007768:	697b      	ldr	r3, [r7, #20]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b088      	sub	sp, #32
 8007776:	af00      	add	r7, sp, #0
 8007778:	60f8      	str	r0, [r7, #12]
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	bfb8      	it	lt
 8007784:	425b      	neglt	r3, r3
 8007786:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	da02      	bge.n	8007794 <mbedtls_mpi_add_int+0x22>
 800778e:	f04f 33ff 	mov.w	r3, #4294967295
 8007792:	e000      	b.n	8007796 <mbedtls_mpi_add_int+0x24>
 8007794:	2301      	movs	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8007798:	2301      	movs	r3, #1
 800779a:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800779c:	f107 0310 	add.w	r3, r7, #16
 80077a0:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80077a2:	f107 0314 	add.w	r3, r7, #20
 80077a6:	461a      	mov	r2, r3
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7ff ff4d 	bl	800764a <mbedtls_mpi_add_mpi>
 80077b0:	4603      	mov	r3, r0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b088      	sub	sp, #32
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bfb8      	it	lt
 80077cc:	425b      	neglt	r3, r3
 80077ce:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da02      	bge.n	80077dc <mbedtls_mpi_sub_int+0x22>
 80077d6:	f04f 33ff 	mov.w	r3, #4294967295
 80077da:	e000      	b.n	80077de <mbedtls_mpi_sub_int+0x24>
 80077dc:	2301      	movs	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 80077e0:	2301      	movs	r3, #1
 80077e2:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 80077e4:	f107 0310 	add.w	r3, r7, #16
 80077e8:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 80077ea:	f107 0314 	add.w	r3, r7, #20
 80077ee:	461a      	mov	r2, r3
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f7ff ff73 	bl	80076de <mbedtls_mpi_sub_mpi>
 80077f8:	4603      	mov	r3, r0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3720      	adds	r7, #32
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 8007802:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007806:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800780a:	af00      	add	r7, sp, #0
 800780c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007810:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8007814:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8007818:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    mbedtls_mpi_uint c = 0, t = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007822:	2300      	movs	r3, #0
 8007824:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8007828:	f000 bfe7 	b.w	80087fa <mpi_mul_hlp+0xff8>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 800782c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007830:	1d13      	adds	r3, r2, #4
 8007832:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007836:	6813      	ldr	r3, [r2, #0]
 8007838:	2200      	movs	r2, #0
 800783a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800783e:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 8007842:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007846:	2200      	movs	r2, #0
 8007848:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800784c:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8007850:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 8007854:	460b      	mov	r3, r1
 8007856:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 800785a:	fb02 f203 	mul.w	r2, r2, r3
 800785e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007862:	e9c7 018e 	strd	r0, r1, [r7, #568]	; 0x238
 8007866:	4601      	mov	r1, r0
 8007868:	fb01 f303 	mul.w	r3, r1, r3
 800786c:	4413      	add	r3, r2
 800786e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007872:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8007876:	fba2 1201 	umull	r1, r2, r2, r1
 800787a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800787e:	460a      	mov	r2, r1
 8007880:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8007884:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8007888:	4413      	add	r3, r2
 800788a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800788e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8007892:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007896:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800789a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800789e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80078a2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80078a6:	f04f 0000 	mov.w	r0, #0
 80078aa:	f04f 0100 	mov.w	r1, #0
 80078ae:	0018      	movs	r0, r3
 80078b0:	2100      	movs	r1, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80078b8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80078bc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80078c0:	4413      	add	r3, r2
 80078c2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80078c6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80078ca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80078ce:	429a      	cmp	r2, r3
 80078d0:	bf34      	ite	cc
 80078d2:	2301      	movcc	r3, #1
 80078d4:	2300      	movcs	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80078de:	4413      	add	r3, r2
 80078e0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80078e4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80078ee:	4413      	add	r3, r2
 80078f0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80078f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80078fe:	4293      	cmp	r3, r2
 8007900:	bf34      	ite	cc
 8007902:	2301      	movcc	r3, #1
 8007904:	2300      	movcs	r3, #0
 8007906:	b2db      	uxtb	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800790e:	4413      	add	r3, r2
 8007910:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007914:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007918:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800791c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007920:	1d13      	adds	r3, r2, #4
 8007922:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007926:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007930:	1d13      	adds	r3, r2, #4
 8007932:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007936:	6813      	ldr	r3, [r2, #0]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800793e:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8007942:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007946:	2200      	movs	r2, #0
 8007948:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800794c:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8007950:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8007954:	460b      	mov	r3, r1
 8007956:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800795a:	fb02 f203 	mul.w	r2, r2, r3
 800795e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8007962:	e9c7 018a 	strd	r0, r1, [r7, #552]	; 0x228
 8007966:	4601      	mov	r1, r0
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	4413      	add	r3, r2
 800796e:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8007972:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007976:	fba2 1201 	umull	r1, r2, r2, r1
 800797a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800797e:	460a      	mov	r2, r1
 8007980:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8007984:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8007988:	4413      	add	r3, r2
 800798a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800798e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8007992:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007996:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800799a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800799e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80079a2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80079a6:	f04f 0000 	mov.w	r0, #0
 80079aa:	f04f 0100 	mov.w	r1, #0
 80079ae:	0018      	movs	r0, r3
 80079b0:	2100      	movs	r1, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80079b8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80079bc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80079c0:	4413      	add	r3, r2
 80079c2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80079c6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80079ca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80079ce:	429a      	cmp	r2, r3
 80079d0:	bf34      	ite	cc
 80079d2:	2301      	movcc	r3, #1
 80079d4:	2300      	movcs	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80079de:	4413      	add	r3, r2
 80079e0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80079e4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80079ee:	4413      	add	r3, r2
 80079f0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80079f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80079fe:	4293      	cmp	r3, r2
 8007a00:	bf34      	ite	cc
 8007a02:	2301      	movcc	r3, #1
 8007a04:	2300      	movcs	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007a0e:	4413      	add	r3, r2
 8007a10:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007a14:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007a18:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007a1c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007a20:	1d13      	adds	r3, r2, #4
 8007a22:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007a26:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007a2a:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8007a2c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007a30:	1d13      	adds	r3, r2, #4
 8007a32:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007a36:	6813      	ldr	r3, [r2, #0]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8007a3e:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007a42:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8007a4c:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8007a50:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8007a54:	460b      	mov	r3, r1
 8007a56:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8007a5a:	fb02 f203 	mul.w	r2, r2, r3
 8007a5e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007a62:	e9c7 0186 	strd	r0, r1, [r7, #536]	; 0x218
 8007a66:	4601      	mov	r1, r0
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8007a72:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8007a76:	fba2 1201 	umull	r1, r2, r2, r1
 8007a7a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8007a7e:	460a      	mov	r2, r1
 8007a80:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8007a84:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007a88:	4413      	add	r3, r2
 8007a8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007a8e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8007a92:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007a96:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007a9a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007a9e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007aa2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007aa6:	f04f 0000 	mov.w	r0, #0
 8007aaa:	f04f 0100 	mov.w	r1, #0
 8007aae:	0018      	movs	r0, r3
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007ab8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007abc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007ac6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007aca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	bf34      	ite	cc
 8007ad2:	2301      	movcc	r3, #1
 8007ad4:	2300      	movcs	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007ade:	4413      	add	r3, r2
 8007ae0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007ae4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007aee:	4413      	add	r3, r2
 8007af0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007af4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007afe:	4293      	cmp	r3, r2
 8007b00:	bf34      	ite	cc
 8007b02:	2301      	movcc	r3, #1
 8007b04:	2300      	movcs	r3, #0
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007b0e:	4413      	add	r3, r2
 8007b10:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007b14:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007b18:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007b1c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007b20:	1d13      	adds	r3, r2, #4
 8007b22:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007b26:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007b30:	1d13      	adds	r3, r2, #4
 8007b32:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007b36:	6813      	ldr	r3, [r2, #0]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8007b3e:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8007b42:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8007b4c:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007b50:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8007b54:	460b      	mov	r3, r1
 8007b56:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8007b5a:	fb02 f203 	mul.w	r2, r2, r3
 8007b5e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007b62:	e9c7 0182 	strd	r0, r1, [r7, #520]	; 0x208
 8007b66:	4601      	mov	r1, r0
 8007b68:	fb01 f303 	mul.w	r3, r1, r3
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8007b72:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8007b76:	fba2 1201 	umull	r1, r2, r2, r1
 8007b7a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8007b7e:	460a      	mov	r2, r1
 8007b80:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8007b84:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007b88:	4413      	add	r3, r2
 8007b8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007b8e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8007b92:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007b96:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007b9a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007b9e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007ba2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007ba6:	f04f 0000 	mov.w	r0, #0
 8007baa:	f04f 0100 	mov.w	r1, #0
 8007bae:	0018      	movs	r0, r3
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007bb8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007bbc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007bc6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007bca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	bf34      	ite	cc
 8007bd2:	2301      	movcc	r3, #1
 8007bd4:	2300      	movcs	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007bde:	4413      	add	r3, r2
 8007be0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007be4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007bee:	4413      	add	r3, r2
 8007bf0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007bf4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	bf34      	ite	cc
 8007c02:	2301      	movcc	r3, #1
 8007c04:	2300      	movcs	r3, #0
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	461a      	mov	r2, r3
 8007c0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007c0e:	4413      	add	r3, r2
 8007c10:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007c14:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007c18:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007c1c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007c20:	1d13      	adds	r3, r2, #4
 8007c22:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007c26:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007c2a:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8007c2c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007c30:	1d13      	adds	r3, r2, #4
 8007c32:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007c36:	6813      	ldr	r3, [r2, #0]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8007c3e:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8007c42:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8007c4c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8007c50:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8007c54:	460b      	mov	r3, r1
 8007c56:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007c5a:	fb02 f203 	mul.w	r2, r2, r3
 8007c5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007c62:	e9c7 017e 	strd	r0, r1, [r7, #504]	; 0x1f8
 8007c66:	4601      	mov	r1, r0
 8007c68:	fb01 f303 	mul.w	r3, r1, r3
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8007c72:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8007c76:	fba2 1201 	umull	r1, r2, r2, r1
 8007c7a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007c7e:	460a      	mov	r2, r1
 8007c80:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007c84:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007c88:	4413      	add	r3, r2
 8007c8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007c8e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8007c92:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007c96:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007c9a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007c9e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007ca2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007ca6:	f04f 0000 	mov.w	r0, #0
 8007caa:	f04f 0100 	mov.w	r1, #0
 8007cae:	0018      	movs	r0, r3
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007cb8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007cbc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007cc6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007cca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	bf34      	ite	cc
 8007cd2:	2301      	movcc	r3, #1
 8007cd4:	2300      	movcs	r3, #0
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	461a      	mov	r2, r3
 8007cda:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007cde:	4413      	add	r3, r2
 8007ce0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007ce4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007cee:	4413      	add	r3, r2
 8007cf0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007cf4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	bf34      	ite	cc
 8007d02:	2301      	movcc	r3, #1
 8007d04:	2300      	movcs	r3, #0
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007d0e:	4413      	add	r3, r2
 8007d10:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007d14:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007d18:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007d1c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007d20:	1d13      	adds	r3, r2, #4
 8007d22:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007d26:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007d30:	1d13      	adds	r3, r2, #4
 8007d32:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007d36:	6813      	ldr	r3, [r2, #0]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8007d3e:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8007d42:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007d4c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8007d50:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8007d54:	460b      	mov	r3, r1
 8007d56:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007d5a:	fb02 f203 	mul.w	r2, r2, r3
 8007d5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007d62:	e9c7 017a 	strd	r0, r1, [r7, #488]	; 0x1e8
 8007d66:	4601      	mov	r1, r0
 8007d68:	fb01 f303 	mul.w	r3, r1, r3
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007d72:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8007d76:	fba2 1201 	umull	r1, r2, r2, r1
 8007d7a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8007d7e:	460a      	mov	r2, r1
 8007d80:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8007d84:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007d88:	4413      	add	r3, r2
 8007d8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d8e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8007d92:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007d96:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007d9a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007d9e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007da2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007da6:	f04f 0000 	mov.w	r0, #0
 8007daa:	f04f 0100 	mov.w	r1, #0
 8007dae:	0018      	movs	r0, r3
 8007db0:	2100      	movs	r1, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007db8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007dbc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007dc6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007dca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	bf34      	ite	cc
 8007dd2:	2301      	movcc	r3, #1
 8007dd4:	2300      	movcs	r3, #0
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	461a      	mov	r2, r3
 8007dda:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007dde:	4413      	add	r3, r2
 8007de0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007de4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007dee:	4413      	add	r3, r2
 8007df0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007df4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	bf34      	ite	cc
 8007e02:	2301      	movcc	r3, #1
 8007e04:	2300      	movcs	r3, #0
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007e0e:	4413      	add	r3, r2
 8007e10:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007e14:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007e18:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007e1c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007e20:	1d13      	adds	r3, r2, #4
 8007e22:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007e26:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007e2a:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8007e2c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007e30:	1d13      	adds	r3, r2, #4
 8007e32:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007e36:	6813      	ldr	r3, [r2, #0]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8007e3e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8007e42:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8007e4c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8007e50:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8007e54:	460b      	mov	r3, r1
 8007e56:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8007e5a:	fb02 f203 	mul.w	r2, r2, r3
 8007e5e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007e62:	e9c7 0176 	strd	r0, r1, [r7, #472]	; 0x1d8
 8007e66:	4601      	mov	r1, r0
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007e72:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8007e76:	fba2 1201 	umull	r1, r2, r2, r1
 8007e7a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8007e7e:	460a      	mov	r2, r1
 8007e80:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8007e84:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007e88:	4413      	add	r3, r2
 8007e8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e8e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8007e92:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007e96:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007e9a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007e9e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007ea2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007ea6:	f04f 0000 	mov.w	r0, #0
 8007eaa:	f04f 0100 	mov.w	r1, #0
 8007eae:	0018      	movs	r0, r3
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007eb8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007ebc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007ec6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007eca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	bf34      	ite	cc
 8007ed2:	2301      	movcc	r3, #1
 8007ed4:	2300      	movcs	r3, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007ede:	4413      	add	r3, r2
 8007ee0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007ee4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007eee:	4413      	add	r3, r2
 8007ef0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007ef4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007efe:	4293      	cmp	r3, r2
 8007f00:	bf34      	ite	cc
 8007f02:	2301      	movcc	r3, #1
 8007f04:	2300      	movcs	r3, #0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007f0e:	4413      	add	r3, r2
 8007f10:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007f14:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007f18:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007f1c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007f20:	1d13      	adds	r3, r2, #4
 8007f22:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8007f26:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007f30:	1d13      	adds	r3, r2, #4
 8007f32:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007f36:	6813      	ldr	r3, [r2, #0]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007f3e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8007f42:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007f4c:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8007f50:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8007f54:	460b      	mov	r3, r1
 8007f56:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8007f5a:	fb02 f203 	mul.w	r2, r2, r3
 8007f5e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007f62:	e9c7 0172 	strd	r0, r1, [r7, #456]	; 0x1c8
 8007f66:	4601      	mov	r1, r0
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8007f72:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8007f76:	fba2 1201 	umull	r1, r2, r2, r1
 8007f7a:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007f7e:	460a      	mov	r2, r1
 8007f80:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8007f84:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007f88:	4413      	add	r3, r2
 8007f8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f8e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8007f92:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007f96:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8007f9a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8007f9e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007fa2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007fa6:	f04f 0000 	mov.w	r0, #0
 8007faa:	f04f 0100 	mov.w	r1, #0
 8007fae:	0018      	movs	r0, r3
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007fb8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007fbc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007fc6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007fca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	bf34      	ite	cc
 8007fd2:	2301      	movcc	r3, #1
 8007fd4:	2300      	movcs	r3, #0
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007fde:	4413      	add	r3, r2
 8007fe0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007fe4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007fee:	4413      	add	r3, r2
 8007ff0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007ff4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007ffe:	4293      	cmp	r3, r2
 8008000:	bf34      	ite	cc
 8008002:	2301      	movcc	r3, #1
 8008004:	2300      	movcs	r3, #0
 8008006:	b2db      	uxtb	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800800e:	4413      	add	r3, r2
 8008010:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008014:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008018:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800801c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008020:	1d13      	adds	r3, r2, #4
 8008022:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008026:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800802a:	6013      	str	r3, [r2, #0]

        MULADDC_CORE   MULADDC_CORE
 800802c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008030:	1d13      	adds	r3, r2, #4
 8008032:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008036:	6813      	ldr	r3, [r2, #0]
 8008038:	2200      	movs	r2, #0
 800803a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800803e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8008042:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008046:	2200      	movs	r2, #0
 8008048:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800804c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8008050:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8008054:	460b      	mov	r3, r1
 8008056:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800805a:	fb02 f203 	mul.w	r2, r2, r3
 800805e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008062:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
 8008066:	4601      	mov	r1, r0
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	4413      	add	r3, r2
 800806e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008072:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8008076:	fba2 1201 	umull	r1, r2, r2, r1
 800807a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800807e:	460a      	mov	r2, r1
 8008080:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8008084:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008088:	4413      	add	r3, r2
 800808a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800808e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008092:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8008096:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800809a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800809e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80080a2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80080a6:	f04f 0000 	mov.w	r0, #0
 80080aa:	f04f 0100 	mov.w	r1, #0
 80080ae:	0018      	movs	r0, r3
 80080b0:	2100      	movs	r1, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80080b8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80080bc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80080c0:	4413      	add	r3, r2
 80080c2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80080c6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80080ca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80080ce:	429a      	cmp	r2, r3
 80080d0:	bf34      	ite	cc
 80080d2:	2301      	movcc	r3, #1
 80080d4:	2300      	movcs	r3, #0
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80080de:	4413      	add	r3, r2
 80080e0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80080e4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80080ee:	4413      	add	r3, r2
 80080f0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80080f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80080fe:	4293      	cmp	r3, r2
 8008100:	bf34      	ite	cc
 8008102:	2301      	movcc	r3, #1
 8008104:	2300      	movcs	r3, #0
 8008106:	b2db      	uxtb	r3, r3
 8008108:	461a      	mov	r2, r3
 800810a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800810e:	4413      	add	r3, r2
 8008110:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008114:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008118:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800811c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008120:	1d13      	adds	r3, r2, #4
 8008122:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008126:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008130:	1d13      	adds	r3, r2, #4
 8008132:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008136:	6813      	ldr	r3, [r2, #0]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800813e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8008142:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008146:	2200      	movs	r2, #0
 8008148:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800814c:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8008150:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8008154:	460b      	mov	r3, r1
 8008156:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800815a:	fb02 f203 	mul.w	r2, r2, r3
 800815e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008162:	e9c7 016a 	strd	r0, r1, [r7, #424]	; 0x1a8
 8008166:	4601      	mov	r1, r0
 8008168:	fb01 f303 	mul.w	r3, r1, r3
 800816c:	4413      	add	r3, r2
 800816e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8008172:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8008176:	fba2 1201 	umull	r1, r2, r2, r1
 800817a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800817e:	460a      	mov	r2, r1
 8008180:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008184:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008188:	4413      	add	r3, r2
 800818a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800818e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8008192:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8008196:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800819a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800819e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80081a2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80081a6:	f04f 0000 	mov.w	r0, #0
 80081aa:	f04f 0100 	mov.w	r1, #0
 80081ae:	0018      	movs	r0, r3
 80081b0:	2100      	movs	r1, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80081b8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80081bc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80081c0:	4413      	add	r3, r2
 80081c2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80081c6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80081ca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80081ce:	429a      	cmp	r2, r3
 80081d0:	bf34      	ite	cc
 80081d2:	2301      	movcc	r3, #1
 80081d4:	2300      	movcs	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80081de:	4413      	add	r3, r2
 80081e0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80081e4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80081ee:	4413      	add	r3, r2
 80081f0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80081f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80081fe:	4293      	cmp	r3, r2
 8008200:	bf34      	ite	cc
 8008202:	2301      	movcc	r3, #1
 8008204:	2300      	movcs	r3, #0
 8008206:	b2db      	uxtb	r3, r3
 8008208:	461a      	mov	r2, r3
 800820a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800820e:	4413      	add	r3, r2
 8008210:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008214:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008218:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800821c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008220:	1d13      	adds	r3, r2, #4
 8008222:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008226:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800822a:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 800822c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008230:	1d13      	adds	r3, r2, #4
 8008232:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008236:	6813      	ldr	r3, [r2, #0]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800823e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008242:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800824c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8008250:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8008254:	460b      	mov	r3, r1
 8008256:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800825a:	fb02 f203 	mul.w	r2, r2, r3
 800825e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008262:	e9c7 0166 	strd	r0, r1, [r7, #408]	; 0x198
 8008266:	4601      	mov	r1, r0
 8008268:	fb01 f303 	mul.w	r3, r1, r3
 800826c:	4413      	add	r3, r2
 800826e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008272:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 8008276:	fba2 1201 	umull	r1, r2, r2, r1
 800827a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800827e:	460a      	mov	r2, r1
 8008280:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008284:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008288:	4413      	add	r3, r2
 800828a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800828e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008292:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8008296:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800829a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800829e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80082a2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80082a6:	f04f 0000 	mov.w	r0, #0
 80082aa:	f04f 0100 	mov.w	r1, #0
 80082ae:	0018      	movs	r0, r3
 80082b0:	2100      	movs	r1, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80082b8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80082bc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80082c0:	4413      	add	r3, r2
 80082c2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80082c6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80082ca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80082ce:	429a      	cmp	r2, r3
 80082d0:	bf34      	ite	cc
 80082d2:	2301      	movcc	r3, #1
 80082d4:	2300      	movcs	r3, #0
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80082de:	4413      	add	r3, r2
 80082e0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80082e4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80082ee:	4413      	add	r3, r2
 80082f0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80082f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80082fe:	4293      	cmp	r3, r2
 8008300:	bf34      	ite	cc
 8008302:	2301      	movcc	r3, #1
 8008304:	2300      	movcs	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800830e:	4413      	add	r3, r2
 8008310:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008314:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008318:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800831c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008320:	1d13      	adds	r3, r2, #4
 8008322:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008326:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800832a:	6013      	str	r3, [r2, #0]
 800832c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008330:	1d13      	adds	r3, r2, #4
 8008332:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	2200      	movs	r2, #0
 800833a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800833e:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8008342:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008346:	2200      	movs	r2, #0
 8008348:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800834c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8008350:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8008354:	460b      	mov	r3, r1
 8008356:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800835a:	fb02 f203 	mul.w	r2, r2, r3
 800835e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008362:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
 8008366:	4601      	mov	r1, r0
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	4413      	add	r3, r2
 800836e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8008372:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 8008376:	fba2 1201 	umull	r1, r2, r2, r1
 800837a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800837e:	460a      	mov	r2, r1
 8008380:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008384:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008388:	4413      	add	r3, r2
 800838a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800838e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008392:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8008396:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800839a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800839e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80083a2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80083a6:	f04f 0000 	mov.w	r0, #0
 80083aa:	f04f 0100 	mov.w	r1, #0
 80083ae:	0018      	movs	r0, r3
 80083b0:	2100      	movs	r1, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80083b8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80083bc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80083c0:	4413      	add	r3, r2
 80083c2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80083c6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80083ca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80083ce:	429a      	cmp	r2, r3
 80083d0:	bf34      	ite	cc
 80083d2:	2301      	movcc	r3, #1
 80083d4:	2300      	movcs	r3, #0
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	461a      	mov	r2, r3
 80083da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80083de:	4413      	add	r3, r2
 80083e0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80083e4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80083ee:	4413      	add	r3, r2
 80083f0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80083f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80083fe:	4293      	cmp	r3, r2
 8008400:	bf34      	ite	cc
 8008402:	2301      	movcc	r3, #1
 8008404:	2300      	movcs	r3, #0
 8008406:	b2db      	uxtb	r3, r3
 8008408:	461a      	mov	r2, r3
 800840a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800840e:	4413      	add	r3, r2
 8008410:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008414:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008418:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800841c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008420:	1d13      	adds	r3, r2, #4
 8008422:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008426:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800842a:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 800842c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008430:	1d13      	adds	r3, r2, #4
 8008432:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008436:	6813      	ldr	r3, [r2, #0]
 8008438:	2200      	movs	r2, #0
 800843a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800843e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008442:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008446:	2200      	movs	r2, #0
 8008448:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800844c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8008450:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8008454:	460b      	mov	r3, r1
 8008456:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800845a:	fb02 f203 	mul.w	r2, r2, r3
 800845e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008462:	e9c7 015e 	strd	r0, r1, [r7, #376]	; 0x178
 8008466:	4601      	mov	r1, r0
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	4413      	add	r3, r2
 800846e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008472:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008476:	fba2 1201 	umull	r1, r2, r2, r1
 800847a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800847e:	460a      	mov	r2, r1
 8008480:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8008484:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008488:	4413      	add	r3, r2
 800848a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800848e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8008492:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 8008496:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800849a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800849e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80084a2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80084a6:	f04f 0000 	mov.w	r0, #0
 80084aa:	f04f 0100 	mov.w	r1, #0
 80084ae:	0018      	movs	r0, r3
 80084b0:	2100      	movs	r1, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80084b8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80084bc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80084c0:	4413      	add	r3, r2
 80084c2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80084c6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80084ca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80084ce:	429a      	cmp	r2, r3
 80084d0:	bf34      	ite	cc
 80084d2:	2301      	movcc	r3, #1
 80084d4:	2300      	movcs	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80084de:	4413      	add	r3, r2
 80084e0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80084e4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80084ee:	4413      	add	r3, r2
 80084f0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80084f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80084fe:	4293      	cmp	r3, r2
 8008500:	bf34      	ite	cc
 8008502:	2301      	movcc	r3, #1
 8008504:	2300      	movcs	r3, #0
 8008506:	b2db      	uxtb	r3, r3
 8008508:	461a      	mov	r2, r3
 800850a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800850e:	4413      	add	r3, r2
 8008510:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008514:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008518:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800851c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008520:	1d13      	adds	r3, r2, #4
 8008522:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008526:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008530:	1d13      	adds	r3, r2, #4
 8008532:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008536:	6813      	ldr	r3, [r2, #0]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800853e:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8008542:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008546:	2200      	movs	r2, #0
 8008548:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800854c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8008550:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8008554:	460b      	mov	r3, r1
 8008556:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800855a:	fb02 f203 	mul.w	r2, r2, r3
 800855e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008562:	e9c7 015a 	strd	r0, r1, [r7, #360]	; 0x168
 8008566:	4601      	mov	r1, r0
 8008568:	fb01 f303 	mul.w	r3, r1, r3
 800856c:	4413      	add	r3, r2
 800856e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008572:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8008576:	fba2 ab01 	umull	sl, fp, r2, r1
 800857a:	445b      	add	r3, fp
 800857c:	469b      	mov	fp, r3
 800857e:	e9c7 ab96 	strd	sl, fp, [r7, #600]	; 0x258
 8008582:	e9c7 ab96 	strd	sl, fp, [r7, #600]	; 0x258
 8008586:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800858a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800858e:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f04f 0100 	mov.w	r1, #0
 800859a:	0018      	movs	r0, r3
 800859c:	2100      	movs	r1, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80085a4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80085a8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80085ac:	4413      	add	r3, r2
 80085ae:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80085b2:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80085b6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80085ba:	429a      	cmp	r2, r3
 80085bc:	bf34      	ite	cc
 80085be:	2301      	movcc	r3, #1
 80085c0:	2300      	movcs	r3, #0
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80085ca:	4413      	add	r3, r2
 80085cc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80085d0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80085da:	4413      	add	r3, r2
 80085dc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80085e0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80085ea:	4293      	cmp	r3, r2
 80085ec:	bf34      	ite	cc
 80085ee:	2301      	movcc	r3, #1
 80085f0:	2300      	movcs	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80085fa:	4413      	add	r3, r2
 80085fc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008600:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008604:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008608:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800860c:	1d13      	adds	r3, r2, #4
 800860e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008612:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008616:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008618:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800861c:	1d13      	adds	r3, r2, #4
 800861e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800862a:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800862e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008632:	2200      	movs	r2, #0
 8008634:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008638:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800863c:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8008640:	460b      	mov	r3, r1
 8008642:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008646:	fb02 f203 	mul.w	r2, r2, r3
 800864a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800864e:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
 8008652:	4601      	mov	r1, r0
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	4413      	add	r3, r2
 800865a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800865e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008662:	fba2 8901 	umull	r8, r9, r2, r1
 8008666:	444b      	add	r3, r9
 8008668:	4699      	mov	r9, r3
 800866a:	e9c7 8996 	strd	r8, r9, [r7, #600]	; 0x258
 800866e:	e9c7 8996 	strd	r8, r9, [r7, #600]	; 0x258
 8008672:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8008676:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800867a:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800867e:	f04f 0000 	mov.w	r0, #0
 8008682:	f04f 0100 	mov.w	r1, #0
 8008686:	0018      	movs	r0, r3
 8008688:	2100      	movs	r1, #0
 800868a:	4603      	mov	r3, r0
 800868c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8008690:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008694:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008698:	4413      	add	r3, r2
 800869a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800869e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80086a2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80086a6:	429a      	cmp	r2, r3
 80086a8:	bf34      	ite	cc
 80086aa:	2301      	movcc	r3, #1
 80086ac:	2300      	movcs	r3, #0
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	461a      	mov	r2, r3
 80086b2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80086b6:	4413      	add	r3, r2
 80086b8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80086bc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80086c6:	4413      	add	r3, r2
 80086c8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80086cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80086d6:	4293      	cmp	r3, r2
 80086d8:	bf34      	ite	cc
 80086da:	2301      	movcc	r3, #1
 80086dc:	2300      	movcs	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80086e6:	4413      	add	r3, r2
 80086e8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80086ec:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80086f0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80086f4:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80086f8:	1d13      	adds	r3, r2, #4
 80086fa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80086fe:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008708:	1d13      	adds	r3, r2, #4
 800870a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800870e:	6813      	ldr	r3, [r2, #0]
 8008710:	2200      	movs	r2, #0
 8008712:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008716:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800871a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800871e:	2200      	movs	r2, #0
 8008720:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008724:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008728:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800872c:	460b      	mov	r3, r1
 800872e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008732:	fb02 f203 	mul.w	r2, r2, r3
 8008736:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800873a:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
 800873e:	4601      	mov	r1, r0
 8008740:	fb01 f303 	mul.w	r3, r1, r3
 8008744:	4413      	add	r3, r2
 8008746:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800874a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800874e:	fba2 4501 	umull	r4, r5, r2, r1
 8008752:	442b      	add	r3, r5
 8008754:	461d      	mov	r5, r3
 8008756:	e9c7 4596 	strd	r4, r5, [r7, #600]	; 0x258
 800875a:	e9c7 4596 	strd	r4, r5, [r7, #600]	; 0x258
 800875e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8008762:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8008766:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800876a:	f04f 0000 	mov.w	r0, #0
 800876e:	f04f 0100 	mov.w	r1, #0
 8008772:	0018      	movs	r0, r3
 8008774:	2100      	movs	r1, #0
 8008776:	4603      	mov	r3, r0
 8008778:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800877c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008780:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008784:	4413      	add	r3, r2
 8008786:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800878a:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800878e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008792:	429a      	cmp	r2, r3
 8008794:	bf34      	ite	cc
 8008796:	2301      	movcc	r3, #1
 8008798:	2300      	movcs	r3, #0
 800879a:	b2db      	uxtb	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80087a2:	4413      	add	r3, r2
 80087a4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80087a8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80087b2:	4413      	add	r3, r2
 80087b4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80087b8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80087c2:	4293      	cmp	r3, r2
 80087c4:	bf34      	ite	cc
 80087c6:	2301      	movcc	r3, #1
 80087c8:	2300      	movcs	r3, #0
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80087d2:	4413      	add	r3, r2
 80087d4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80087d8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80087dc:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80087e0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80087e4:	1d13      	adds	r3, r2, #4
 80087e6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80087ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80087ee:	6013      	str	r3, [r2, #0]
    for( ; i >= 16; i -= 16 )
 80087f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f4:	3b10      	subs	r3, #16
 80087f6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80087fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087fe:	2b0f      	cmp	r3, #15
 8008800:	f63f a814 	bhi.w	800782c <mpi_mul_hlp+0x2a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8008804:	e3c8      	b.n	8008f98 <mpi_mul_hlp+0x1796>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8008806:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800880a:	1d13      	adds	r3, r2, #4
 800880c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008810:	6813      	ldr	r3, [r2, #0]
 8008812:	2200      	movs	r2, #0
 8008814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008818:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800881c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008820:	2200      	movs	r2, #0
 8008822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008826:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800882a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800882e:	462b      	mov	r3, r5
 8008830:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8008834:	4642      	mov	r2, r8
 8008836:	fb02 f203 	mul.w	r2, r2, r3
 800883a:	464b      	mov	r3, r9
 800883c:	4621      	mov	r1, r4
 800883e:	fb01 f303 	mul.w	r3, r1, r3
 8008842:	4413      	add	r3, r2
 8008844:	4622      	mov	r2, r4
 8008846:	4641      	mov	r1, r8
 8008848:	fba2 1201 	umull	r1, r2, r2, r1
 800884c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008850:	460a      	mov	r2, r1
 8008852:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8008856:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800885a:	4413      	add	r3, r2
 800885c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008860:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8008864:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008868:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 800886c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008870:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008874:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008878:	f04f 0000 	mov.w	r0, #0
 800887c:	f04f 0100 	mov.w	r1, #0
 8008880:	0018      	movs	r0, r3
 8008882:	2100      	movs	r1, #0
 8008884:	4603      	mov	r3, r0
 8008886:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800888a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800888e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008892:	4413      	add	r3, r2
 8008894:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008898:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800889c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80088a0:	429a      	cmp	r2, r3
 80088a2:	bf34      	ite	cc
 80088a4:	2301      	movcc	r3, #1
 80088a6:	2300      	movcs	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	461a      	mov	r2, r3
 80088ac:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80088b0:	4413      	add	r3, r2
 80088b2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80088b6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80088c0:	4413      	add	r3, r2
 80088c2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80088c6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80088d0:	4293      	cmp	r3, r2
 80088d2:	bf34      	ite	cc
 80088d4:	2301      	movcc	r3, #1
 80088d6:	2300      	movcs	r3, #0
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80088e0:	4413      	add	r3, r2
 80088e2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80088e6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80088ea:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80088ee:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80088f2:	1d13      	adds	r3, r2, #4
 80088f4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80088f8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008902:	1d13      	adds	r3, r2, #4
 8008904:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008908:	6813      	ldr	r3, [r2, #0]
 800890a:	2200      	movs	r2, #0
 800890c:	67bb      	str	r3, [r7, #120]	; 0x78
 800890e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008910:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008914:	2200      	movs	r2, #0
 8008916:	673b      	str	r3, [r7, #112]	; 0x70
 8008918:	677a      	str	r2, [r7, #116]	; 0x74
 800891a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800891e:	462b      	mov	r3, r5
 8008920:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008924:	4642      	mov	r2, r8
 8008926:	fb02 f203 	mul.w	r2, r2, r3
 800892a:	464b      	mov	r3, r9
 800892c:	4621      	mov	r1, r4
 800892e:	fb01 f303 	mul.w	r3, r1, r3
 8008932:	4413      	add	r3, r2
 8008934:	4622      	mov	r2, r4
 8008936:	4641      	mov	r1, r8
 8008938:	fba2 1201 	umull	r1, r2, r2, r1
 800893c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8008940:	460a      	mov	r2, r1
 8008942:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8008946:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800894a:	4413      	add	r3, r2
 800894c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008950:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8008954:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008958:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 800895c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008960:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008964:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008968:	f04f 0000 	mov.w	r0, #0
 800896c:	f04f 0100 	mov.w	r1, #0
 8008970:	0018      	movs	r0, r3
 8008972:	2100      	movs	r1, #0
 8008974:	4603      	mov	r3, r0
 8008976:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800897a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800897e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008982:	4413      	add	r3, r2
 8008984:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008988:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800898c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008990:	429a      	cmp	r2, r3
 8008992:	bf34      	ite	cc
 8008994:	2301      	movcc	r3, #1
 8008996:	2300      	movcs	r3, #0
 8008998:	b2db      	uxtb	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80089a0:	4413      	add	r3, r2
 80089a2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80089a6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80089b0:	4413      	add	r3, r2
 80089b2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80089b6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80089c0:	4293      	cmp	r3, r2
 80089c2:	bf34      	ite	cc
 80089c4:	2301      	movcc	r3, #1
 80089c6:	2300      	movcs	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	461a      	mov	r2, r3
 80089cc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80089d0:	4413      	add	r3, r2
 80089d2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80089d6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80089da:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80089de:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80089e2:	1d13      	adds	r3, r2, #4
 80089e4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80089e8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80089ec:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 80089ee:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80089f2:	1d13      	adds	r3, r2, #4
 80089f4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80089f8:	6813      	ldr	r3, [r2, #0]
 80089fa:	2200      	movs	r2, #0
 80089fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80089fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a00:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008a04:	2200      	movs	r2, #0
 8008a06:	663b      	str	r3, [r7, #96]	; 0x60
 8008a08:	667a      	str	r2, [r7, #100]	; 0x64
 8008a0a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8008a0e:	462b      	mov	r3, r5
 8008a10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a14:	4642      	mov	r2, r8
 8008a16:	fb02 f203 	mul.w	r2, r2, r3
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	4622      	mov	r2, r4
 8008a26:	4641      	mov	r1, r8
 8008a28:	fba2 1201 	umull	r1, r2, r2, r1
 8008a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a30:	460a      	mov	r2, r1
 8008a32:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8008a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a40:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8008a44:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008a48:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008a4c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008a50:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008a54:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008a58:	f04f 0000 	mov.w	r0, #0
 8008a5c:	f04f 0100 	mov.w	r1, #0
 8008a60:	0018      	movs	r0, r3
 8008a62:	2100      	movs	r1, #0
 8008a64:	4603      	mov	r3, r0
 8008a66:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008a6a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008a6e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008a72:	4413      	add	r3, r2
 8008a74:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008a78:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008a7c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008a80:	429a      	cmp	r2, r3
 8008a82:	bf34      	ite	cc
 8008a84:	2301      	movcc	r3, #1
 8008a86:	2300      	movcs	r3, #0
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008a90:	4413      	add	r3, r2
 8008a92:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008a96:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008aa6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	bf34      	ite	cc
 8008ab4:	2301      	movcc	r3, #1
 8008ab6:	2300      	movcs	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	461a      	mov	r2, r3
 8008abc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008ac6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008aca:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008ace:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008ad2:	1d13      	adds	r3, r2, #4
 8008ad4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008ad8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008ae2:	1d13      	adds	r3, r2, #4
 8008ae4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008ae8:	6813      	ldr	r3, [r2, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008af0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008af4:	2200      	movs	r2, #0
 8008af6:	653b      	str	r3, [r7, #80]	; 0x50
 8008af8:	657a      	str	r2, [r7, #84]	; 0x54
 8008afa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8008afe:	462b      	mov	r3, r5
 8008b00:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008b04:	4642      	mov	r2, r8
 8008b06:	fb02 f203 	mul.w	r2, r2, r3
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	4413      	add	r3, r2
 8008b14:	4622      	mov	r2, r4
 8008b16:	4641      	mov	r1, r8
 8008b18:	fba2 1201 	umull	r1, r2, r2, r1
 8008b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b20:	460a      	mov	r2, r1
 8008b22:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8008b26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b30:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8008b34:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008b38:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008b3c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008b40:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008b44:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008b48:	f04f 0000 	mov.w	r0, #0
 8008b4c:	f04f 0100 	mov.w	r1, #0
 8008b50:	0018      	movs	r0, r3
 8008b52:	2100      	movs	r1, #0
 8008b54:	4603      	mov	r3, r0
 8008b56:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008b5a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008b5e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008b62:	4413      	add	r3, r2
 8008b64:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008b68:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008b6c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008b70:	429a      	cmp	r2, r3
 8008b72:	bf34      	ite	cc
 8008b74:	2301      	movcc	r3, #1
 8008b76:	2300      	movcs	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008b80:	4413      	add	r3, r2
 8008b82:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008b86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008b90:	4413      	add	r3, r2
 8008b92:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008b96:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	bf34      	ite	cc
 8008ba4:	2301      	movcc	r3, #1
 8008ba6:	2300      	movcs	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	461a      	mov	r2, r3
 8008bac:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008bb6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008bba:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008bbe:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008bc2:	1d13      	adds	r3, r2, #4
 8008bc4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008bc8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008bcc:	6013      	str	r3, [r2, #0]

        MULADDC_CORE   MULADDC_CORE
 8008bce:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008bd2:	1d13      	adds	r3, r2, #4
 8008bd4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008bd8:	6813      	ldr	r3, [r2, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008be0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008be4:	2200      	movs	r2, #0
 8008be6:	643b      	str	r3, [r7, #64]	; 0x40
 8008be8:	647a      	str	r2, [r7, #68]	; 0x44
 8008bea:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8008bee:	462b      	mov	r3, r5
 8008bf0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008bf4:	4642      	mov	r2, r8
 8008bf6:	fb02 f203 	mul.w	r2, r2, r3
 8008bfa:	464b      	mov	r3, r9
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	fb01 f303 	mul.w	r3, r1, r3
 8008c02:	4413      	add	r3, r2
 8008c04:	4622      	mov	r2, r4
 8008c06:	4641      	mov	r1, r8
 8008c08:	fba2 1201 	umull	r1, r2, r2, r1
 8008c0c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008c10:	460a      	mov	r2, r1
 8008c12:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c20:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8008c24:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008c28:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008c2c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008c30:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008c34:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008c38:	f04f 0000 	mov.w	r0, #0
 8008c3c:	f04f 0100 	mov.w	r1, #0
 8008c40:	0018      	movs	r0, r3
 8008c42:	2100      	movs	r1, #0
 8008c44:	4603      	mov	r3, r0
 8008c46:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008c4a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008c4e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008c52:	4413      	add	r3, r2
 8008c54:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008c58:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008c5c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008c60:	429a      	cmp	r2, r3
 8008c62:	bf34      	ite	cc
 8008c64:	2301      	movcc	r3, #1
 8008c66:	2300      	movcs	r3, #0
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008c70:	4413      	add	r3, r2
 8008c72:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008c76:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008c80:	4413      	add	r3, r2
 8008c82:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008c86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008c90:	4293      	cmp	r3, r2
 8008c92:	bf34      	ite	cc
 8008c94:	2301      	movcc	r3, #1
 8008c96:	2300      	movcs	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008ca6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008caa:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008cae:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008cb2:	1d13      	adds	r3, r2, #4
 8008cb4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008cb8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008cc2:	1d13      	adds	r3, r2, #4
 8008cc4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008cc8:	6813      	ldr	r3, [r2, #0]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cce:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008cd0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8008cd8:	637a      	str	r2, [r7, #52]	; 0x34
 8008cda:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8008cde:	462b      	mov	r3, r5
 8008ce0:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8008ce4:	4642      	mov	r2, r8
 8008ce6:	fb02 f203 	mul.w	r2, r2, r3
 8008cea:	464b      	mov	r3, r9
 8008cec:	4621      	mov	r1, r4
 8008cee:	fb01 f303 	mul.w	r3, r1, r3
 8008cf2:	4413      	add	r3, r2
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	4641      	mov	r1, r8
 8008cf8:	fba2 1201 	umull	r1, r2, r2, r1
 8008cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d00:	460a      	mov	r2, r1
 8008d02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d10:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8008d14:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008d18:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008d1c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008d20:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008d24:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008d28:	f04f 0000 	mov.w	r0, #0
 8008d2c:	f04f 0100 	mov.w	r1, #0
 8008d30:	0018      	movs	r0, r3
 8008d32:	2100      	movs	r1, #0
 8008d34:	4603      	mov	r3, r0
 8008d36:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008d3a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008d3e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008d42:	4413      	add	r3, r2
 8008d44:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008d48:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008d4c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008d50:	429a      	cmp	r2, r3
 8008d52:	bf34      	ite	cc
 8008d54:	2301      	movcc	r3, #1
 8008d56:	2300      	movcs	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008d60:	4413      	add	r3, r2
 8008d62:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008d66:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008d70:	4413      	add	r3, r2
 8008d72:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008d76:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008d80:	4293      	cmp	r3, r2
 8008d82:	bf34      	ite	cc
 8008d84:	2301      	movcc	r3, #1
 8008d86:	2300      	movcs	r3, #0
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008d90:	4413      	add	r3, r2
 8008d92:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008d96:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008d9a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008d9e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008da2:	1d13      	adds	r3, r2, #4
 8008da4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008da8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008dac:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8008dae:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008db2:	1d13      	adds	r3, r2, #4
 8008db4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008db8:	6813      	ldr	r3, [r2, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dc0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	623b      	str	r3, [r7, #32]
 8008dc8:	627a      	str	r2, [r7, #36]	; 0x24
 8008dca:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8008dce:	462b      	mov	r3, r5
 8008dd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	fb02 f203 	mul.w	r2, r2, r3
 8008dda:	464b      	mov	r3, r9
 8008ddc:	4621      	mov	r1, r4
 8008dde:	fb01 f303 	mul.w	r3, r1, r3
 8008de2:	4413      	add	r3, r2
 8008de4:	4622      	mov	r2, r4
 8008de6:	4641      	mov	r1, r8
 8008de8:	fba2 1201 	umull	r1, r2, r2, r1
 8008dec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008df0:	460a      	mov	r2, r1
 8008df2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008df6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e00:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8008e04:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008e08:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008e0c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008e10:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008e14:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008e18:	f04f 0000 	mov.w	r0, #0
 8008e1c:	f04f 0100 	mov.w	r1, #0
 8008e20:	0018      	movs	r0, r3
 8008e22:	2100      	movs	r1, #0
 8008e24:	4603      	mov	r3, r0
 8008e26:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008e2a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008e2e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008e32:	4413      	add	r3, r2
 8008e34:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008e38:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008e3c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008e40:	429a      	cmp	r2, r3
 8008e42:	bf34      	ite	cc
 8008e44:	2301      	movcc	r3, #1
 8008e46:	2300      	movcs	r3, #0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008e50:	4413      	add	r3, r2
 8008e52:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008e56:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008e60:	4413      	add	r3, r2
 8008e62:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008e66:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008e70:	4293      	cmp	r3, r2
 8008e72:	bf34      	ite	cc
 8008e74:	2301      	movcc	r3, #1
 8008e76:	2300      	movcs	r3, #0
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008e80:	4413      	add	r3, r2
 8008e82:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008e86:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008e8a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008e8e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008e92:	1d13      	adds	r3, r2, #4
 8008e94:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008e98:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008ea2:	1d13      	adds	r3, r2, #4
 8008ea4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008ea8:	6813      	ldr	r3, [r2, #0]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	61bb      	str	r3, [r7, #24]
 8008eae:	61fa      	str	r2, [r7, #28]
 8008eb0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	617a      	str	r2, [r7, #20]
 8008eba:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8008ebe:	462b      	mov	r3, r5
 8008ec0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	fb02 f203 	mul.w	r2, r2, r3
 8008eca:	464b      	mov	r3, r9
 8008ecc:	4621      	mov	r1, r4
 8008ece:	fb01 f303 	mul.w	r3, r1, r3
 8008ed2:	4413      	add	r3, r2
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4641      	mov	r1, r8
 8008ed8:	fba2 1201 	umull	r1, r2, r2, r1
 8008edc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008ee0:	460a      	mov	r2, r1
 8008ee2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8008ee6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008eea:	4413      	add	r3, r2
 8008eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ef0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8008ef4:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008ef8:	e9c7 349a 	strd	r3, r4, [r7, #616]	; 0x268
 8008efc:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008f00:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008f04:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008f08:	f04f 0000 	mov.w	r0, #0
 8008f0c:	f04f 0100 	mov.w	r1, #0
 8008f10:	0018      	movs	r0, r3
 8008f12:	2100      	movs	r1, #0
 8008f14:	4603      	mov	r3, r0
 8008f16:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008f1a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008f1e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008f22:	4413      	add	r3, r2
 8008f24:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008f28:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008f2c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008f30:	429a      	cmp	r2, r3
 8008f32:	bf34      	ite	cc
 8008f34:	2301      	movcc	r3, #1
 8008f36:	2300      	movcs	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008f40:	4413      	add	r3, r2
 8008f42:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008f46:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008f50:	4413      	add	r3, r2
 8008f52:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008f56:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008f60:	4293      	cmp	r3, r2
 8008f62:	bf34      	ite	cc
 8008f64:	2301      	movcc	r3, #1
 8008f66:	2300      	movcs	r3, #0
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008f70:	4413      	add	r3, r2
 8008f72:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8008f76:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008f7a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008f7e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008f82:	1d13      	adds	r3, r2, #4
 8008f84:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008f88:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008f8c:	6013      	str	r3, [r2, #0]
    for( ; i >= 8; i -= 8 )
 8008f8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f92:	3b08      	subs	r3, #8
 8008f94:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008f98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f9c:	2b07      	cmp	r3, #7
 8008f9e:	f63f ac32 	bhi.w	8008806 <mpi_mul_hlp+0x1004>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8008fa2:	e07c      	b.n	800909e <mpi_mul_hlp+0x189c>
    {
        MULADDC_INIT
        MULADDC_CORE
 8008fa4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008fa8:	1d1a      	adds	r2, r3, #4
 8008faa:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	60bb      	str	r3, [r7, #8]
 8008fb4:	60fa      	str	r2, [r7, #12]
 8008fb6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008fba:	2200      	movs	r2, #0
 8008fbc:	603b      	str	r3, [r7, #0]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008fc4:	462b      	mov	r3, r5
 8008fc6:	e9d7 8900 	ldrd	r8, r9, [r7]
 8008fca:	4642      	mov	r2, r8
 8008fcc:	fb02 f203 	mul.w	r2, r2, r3
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	fb01 f303 	mul.w	r3, r1, r3
 8008fd8:	4413      	add	r3, r2
 8008fda:	4622      	mov	r2, r4
 8008fdc:	4641      	mov	r1, r8
 8008fde:	fba2 1201 	umull	r1, r2, r2, r1
 8008fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008fe6:	460a      	mov	r2, r1
 8008fe8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008fec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ff6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8008ffa:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
 8008ffe:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
 8009002:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8009006:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800900a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	f04f 0300 	mov.w	r3, #0
 8009016:	000a      	movs	r2, r1
 8009018:	2300      	movs	r3, #0
 800901a:	4613      	mov	r3, r2
 800901c:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8009020:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8009024:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009028:	4413      	add	r3, r2
 800902a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800902e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8009032:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009036:	429a      	cmp	r2, r3
 8009038:	bf34      	ite	cc
 800903a:	2301      	movcc	r3, #1
 800903c:	2300      	movcs	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	461a      	mov	r2, r3
 8009042:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8009046:	4413      	add	r3, r2
 8009048:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800904c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8009056:	4413      	add	r3, r2
 8009058:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800905c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8009066:	429a      	cmp	r2, r3
 8009068:	bf34      	ite	cc
 800906a:	2301      	movcc	r3, #1
 800906c:	2300      	movcs	r3, #0
 800906e:	b2db      	uxtb	r3, r3
 8009070:	461a      	mov	r2, r3
 8009072:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8009076:	4413      	add	r3, r2
 8009078:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800907c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8009080:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009084:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009088:	1d1a      	adds	r2, r3, #4
 800908a:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 800908e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8009092:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 8009094:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009098:	3b01      	subs	r3, #1
 800909a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800909e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f47f af7e 	bne.w	8008fa4 <mpi_mul_hlp+0x17a2>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 80090a8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80090ac:	3301      	adds	r3, #1
 80090ae:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

    do {
        *d += c; c = ( *d < c ); d++;
 80090b2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80090bc:	441a      	add	r2, r3
 80090be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 80090ce:	429a      	cmp	r2, r3
 80090d0:	bf8c      	ite	hi
 80090d2:	2301      	movhi	r3, #1
 80090d4:	2300      	movls	r3, #0
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80090dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80090e0:	3304      	adds	r3, #4
 80090e2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    }
    while( c != 0 );
 80090e6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e1      	bne.n	80090b2 <mpi_mul_hlp+0x18b0>
}
 80090ee:	bf00      	nop
 80090f0:	bf00      	nop
 80090f2:	f507 7723 	add.w	r7, r7, #652	; 0x28c
 80090f6:	46bd      	mov	sp, r7
 80090f8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80090fc:	4770      	bx	lr

080090fe <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80090fe:	b590      	push	{r4, r7, lr}
 8009100:	b08f      	sub	sp, #60	; 0x3c
 8009102:	af00      	add	r7, sp, #0
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800910a:	f107 0320 	add.w	r3, r7, #32
 800910e:	4618      	mov	r0, r3
 8009110:	f7fd fc54 	bl	80069bc <mbedtls_mpi_init>
 8009114:	f107 0314 	add.w	r3, r7, #20
 8009118:	4618      	mov	r0, r3
 800911a:	f7fd fc4f 	bl	80069bc <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	429a      	cmp	r2, r3
 8009124:	d10c      	bne.n	8009140 <mbedtls_mpi_mul_mpi+0x42>
 8009126:	f107 0320 	add.w	r3, r7, #32
 800912a:	68b9      	ldr	r1, [r7, #8]
 800912c:	4618      	mov	r0, r3
 800912e:	f7fd fcc5 	bl	8006abc <mbedtls_mpi_copy>
 8009132:	6378      	str	r0, [r7, #52]	; 0x34
 8009134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009136:	2b00      	cmp	r3, #0
 8009138:	d17f      	bne.n	800923a <mbedtls_mpi_mul_mpi+0x13c>
 800913a:	f107 0320 	add.w	r3, r7, #32
 800913e:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	d10c      	bne.n	8009162 <mbedtls_mpi_mul_mpi+0x64>
 8009148:	f107 0314 	add.w	r3, r7, #20
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	4618      	mov	r0, r3
 8009150:	f7fd fcb4 	bl	8006abc <mbedtls_mpi_copy>
 8009154:	6378      	str	r0, [r7, #52]	; 0x34
 8009156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009158:	2b00      	cmp	r3, #0
 800915a:	d170      	bne.n	800923e <mbedtls_mpi_mul_mpi+0x140>
 800915c:	f107 0314 	add.w	r3, r7, #20
 8009160:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	633b      	str	r3, [r7, #48]	; 0x30
 8009168:	e00d      	b.n	8009186 <mbedtls_mpi_mul_mpi+0x88>
        if( A->p[i - 1] != 0 )
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009174:	3b01      	subs	r3, #1
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d106      	bne.n	800918e <mbedtls_mpi_mul_mpi+0x90>
    for( i = A->n; i > 0; i-- )
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	3b01      	subs	r3, #1
 8009184:	633b      	str	r3, [r7, #48]	; 0x30
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1ee      	bne.n	800916a <mbedtls_mpi_mul_mpi+0x6c>
 800918c:	e000      	b.n	8009190 <mbedtls_mpi_mul_mpi+0x92>
            break;
 800918e:	bf00      	nop

    for( j = B->n; j > 0; j-- )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009196:	e00d      	b.n	80091b4 <mbedtls_mpi_mul_mpi+0xb6>
        if( B->p[j - 1] != 0 )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091a2:	3b01      	subs	r3, #1
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <mbedtls_mpi_mul_mpi+0xbe>
    for( j = B->n; j > 0; j-- )
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	3b01      	subs	r3, #1
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1ee      	bne.n	8009198 <mbedtls_mpi_mul_mpi+0x9a>
 80091ba:	e000      	b.n	80091be <mbedtls_mpi_mul_mpi+0xc0>
            break;
 80091bc:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 80091be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	4413      	add	r3, r2
 80091c4:	4619      	mov	r1, r3
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7fd fc35 	bl	8006a36 <mbedtls_mpi_grow>
 80091cc:	6378      	str	r0, [r7, #52]	; 0x34
 80091ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d136      	bne.n	8009242 <mbedtls_mpi_mul_mpi+0x144>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80091d4:	2100      	movs	r1, #0
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f7fd fcc1 	bl	8006b5e <mbedtls_mpi_lset>
 80091dc:	6378      	str	r0, [r7, #52]	; 0x34
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d130      	bne.n	8009246 <mbedtls_mpi_mul_mpi+0x148>

    for( i++; j > 0; j-- )
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	3301      	adds	r3, #1
 80091e8:	633b      	str	r3, [r7, #48]	; 0x30
 80091ea:	e01a      	b.n	8009222 <mbedtls_mpi_mul_mpi+0x124>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	1e58      	subs	r0, r3, #1
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	6899      	ldr	r1, [r3, #8]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	689a      	ldr	r2, [r3, #8]
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091fe:	3b01      	subs	r3, #1
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	18d4      	adds	r4, r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800920e:	3b01      	subs	r3, #1
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4622      	mov	r2, r4
 8009218:	f7fe faf3 	bl	8007802 <mpi_mul_hlp>
    for( i++; j > 0; j-- )
 800921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921e:	3b01      	subs	r3, #1
 8009220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e1      	bne.n	80091ec <mbedtls_mpi_mul_mpi+0xee>

    X->s = A->s * B->s;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6812      	ldr	r2, [r2, #0]
 8009230:	fb03 f202 	mul.w	r2, r3, r2
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	e006      	b.n	8009248 <mbedtls_mpi_mul_mpi+0x14a>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800923a:	bf00      	nop
 800923c:	e004      	b.n	8009248 <mbedtls_mpi_mul_mpi+0x14a>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 800923e:	bf00      	nop
 8009240:	e002      	b.n	8009248 <mbedtls_mpi_mul_mpi+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8009242:	bf00      	nop
 8009244:	e000      	b.n	8009248 <mbedtls_mpi_mul_mpi+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8009246:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 8009248:	f107 0314 	add.w	r3, r7, #20
 800924c:	4618      	mov	r0, r3
 800924e:	f7fd fbcc 	bl	80069ea <mbedtls_mpi_free>
 8009252:	f107 0320 	add.w	r3, r7, #32
 8009256:	4618      	mov	r0, r3
 8009258:	f7fd fbc7 	bl	80069ea <mbedtls_mpi_free>

    return( ret );
 800925c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800925e:	4618      	mov	r0, r3
 8009260:	373c      	adds	r7, #60	; 0x3c
 8009262:	46bd      	mov	sp, r7
 8009264:	bd90      	pop	{r4, r7, pc}

08009266 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b088      	sub	sp, #32
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 8009272:	2301      	movs	r3, #1
 8009274:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8009276:	2301      	movs	r3, #1
 8009278:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800927a:	f107 0310 	add.w	r3, r7, #16
 800927e:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8009284:	f107 0314 	add.w	r3, r7, #20
 8009288:	461a      	mov	r2, r3
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7ff ff36 	bl	80090fe <mbedtls_mpi_mul_mpi>
 8009292:	4603      	mov	r3, r0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3720      	adds	r7, #32
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 800929c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a0:	b08a      	sub	sp, #40	; 0x28
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6178      	str	r0, [r7, #20]
 80092a6:	6139      	str	r1, [r7, #16]
 80092a8:	60fa      	str	r2, [r7, #12]
 80092aa:	60bb      	str	r3, [r7, #8]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <mbedtls_int_div_int+0x1e>
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d309      	bcc.n	80092ce <mbedtls_int_div_int+0x32>
    {
        if (r != NULL) *r = ~0;
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d003      	beq.n	80092c8 <mbedtls_int_div_int+0x2c>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 80092c8:	f04f 33ff 	mov.w	r3, #4294967295
 80092cc:	e03b      	b.n	8009346 <mbedtls_int_div_int+0xaa>
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2200      	movs	r2, #0
 80092d2:	469a      	mov	sl, r3
 80092d4:	4693      	mov	fp, r2
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	4653      	mov	r3, sl
 80092e0:	2200      	movs	r2, #0
 80092e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    dividend |= (mbedtls_t_udbl) u0;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2200      	movs	r2, #0
 80092ea:	461c      	mov	r4, r3
 80092ec:	4615      	mov	r5, r2
 80092ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092f2:	ea42 0804 	orr.w	r8, r2, r4
 80092f6:	ea43 0905 	orr.w	r9, r3, r5
 80092fa:	e9c7 8906 	strd	r8, r9, [r7, #24]
    quotient = dividend / d;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	607a      	str	r2, [r7, #4]
 8009306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800930a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800930e:	f7f6 ffb7 	bl	8000280 <__aeabi_uldivmod>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
 800931a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d305      	bcc.n	800932e <mbedtls_int_div_int+0x92>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
 8009322:	f04f 32ff 	mov.w	r2, #4294967295
 8009326:	f04f 0300 	mov.w	r3, #0
 800932a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if( r != NULL )
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <mbedtls_int_div_int+0xa8>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	68f9      	ldr	r1, [r7, #12]
 800933a:	fb01 f303 	mul.w	r3, r1, r3
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	601a      	str	r2, [r3, #0]

    return (mbedtls_mpi_uint) quotient;
 8009344:	6a3b      	ldr	r3, [r7, #32]

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
 8009346:	4618      	mov	r0, r3
 8009348:	3728      	adds	r7, #40	; 0x28
 800934a:	46bd      	mov	sp, r7
 800934c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009350 <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8009350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009352:	b099      	sub	sp, #100	; 0x64
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800935e:	2100      	movs	r1, #0
 8009360:	6838      	ldr	r0, [r7, #0]
 8009362:	f7fd ffdb 	bl	800731c <mbedtls_mpi_cmp_int>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d102      	bne.n	8009372 <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800936c:	f06f 030b 	mvn.w	r3, #11
 8009370:	e2bd      	b.n	80098ee <mbedtls_mpi_div_mpi+0x59e>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8009372:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009376:	4618      	mov	r0, r3
 8009378:	f7fd fb20 	bl	80069bc <mbedtls_mpi_init>
 800937c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009380:	4618      	mov	r0, r3
 8009382:	f7fd fb1b 	bl	80069bc <mbedtls_mpi_init>
 8009386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800938a:	4618      	mov	r0, r3
 800938c:	f7fd fb16 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 8009390:	f107 031c 	add.w	r3, r7, #28
 8009394:	4618      	mov	r0, r3
 8009396:	f7fd fb11 	bl	80069bc <mbedtls_mpi_init>
 800939a:	f107 0310 	add.w	r3, r7, #16
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fd fb0c 	bl	80069bc <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7fd fe9b 	bl	80070e2 <mbedtls_mpi_cmp_abs>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	da19      	bge.n	80093e6 <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d008      	beq.n	80093ca <mbedtls_mpi_div_mpi+0x7a>
 80093b8:	2100      	movs	r1, #0
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f7fd fbcf 	bl	8006b5e <mbedtls_mpi_lset>
 80093c0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80093c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f040 8247 	bne.w	8009858 <mbedtls_mpi_div_mpi+0x508>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d008      	beq.n	80093e2 <mbedtls_mpi_div_mpi+0x92>
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	68b8      	ldr	r0, [r7, #8]
 80093d4:	f7fd fb72 	bl	8006abc <mbedtls_mpi_copy>
 80093d8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80093da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f040 823d 	bne.w	800985c <mbedtls_mpi_div_mpi+0x50c>
        return( 0 );
 80093e2:	2300      	movs	r3, #0
 80093e4:	e283      	b.n	80098ee <mbedtls_mpi_div_mpi+0x59e>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 80093e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fd fb65 	bl	8006abc <mbedtls_mpi_copy>
 80093f2:	65f8      	str	r0, [r7, #92]	; 0x5c
 80093f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f040 8232 	bne.w	8009860 <mbedtls_mpi_div_mpi+0x510>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 80093fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	4618      	mov	r0, r3
 8009404:	f7fd fb5a 	bl	8006abc <mbedtls_mpi_copy>
 8009408:	65f8      	str	r0, [r7, #92]	; 0x5c
 800940a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800940c:	2b00      	cmp	r3, #0
 800940e:	f040 8229 	bne.w	8009864 <mbedtls_mpi_div_mpi+0x514>
    X.s = Y.s = 1;
 8009412:	2301      	movs	r3, #1
 8009414:	637b      	str	r3, [r7, #52]	; 0x34
 8009416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009418:	643b      	str	r3, [r7, #64]	; 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	1c9a      	adds	r2, r3, #2
 8009420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f7fd fb05 	bl	8006a36 <mbedtls_mpi_grow>
 800942c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800942e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009430:	2b00      	cmp	r3, #0
 8009432:	f040 8219 	bne.w	8009868 <mbedtls_mpi_div_mpi+0x518>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8009436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800943a:	2100      	movs	r1, #0
 800943c:	4618      	mov	r0, r3
 800943e:	f7fd fb8e 	bl	8006b5e <mbedtls_mpi_lset>
 8009442:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009446:	2b00      	cmp	r3, #0
 8009448:	f040 8210 	bne.w	800986c <mbedtls_mpi_div_mpi+0x51c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 800944c:	f107 031c 	add.w	r3, r7, #28
 8009450:	2102      	movs	r1, #2
 8009452:	4618      	mov	r0, r3
 8009454:	f7fd faef 	bl	8006a36 <mbedtls_mpi_grow>
 8009458:	65f8      	str	r0, [r7, #92]	; 0x5c
 800945a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800945c:	2b00      	cmp	r3, #0
 800945e:	f040 8207 	bne.w	8009870 <mbedtls_mpi_div_mpi+0x520>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8009462:	f107 0310 	add.w	r3, r7, #16
 8009466:	2103      	movs	r1, #3
 8009468:	4618      	mov	r0, r3
 800946a:	f7fd fae4 	bl	8006a36 <mbedtls_mpi_grow>
 800946e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009472:	2b00      	cmp	r3, #0
 8009474:	f040 81fe 	bne.w	8009874 <mbedtls_mpi_div_mpi+0x524>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 8009478:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800947c:	4618      	mov	r0, r3
 800947e:	f7fd fc11 	bl	8006ca4 <mbedtls_mpi_bitlen>
 8009482:	4603      	mov	r3, r0
 8009484:	f003 031f 	and.w	r3, r3, #31
 8009488:	657b      	str	r3, [r7, #84]	; 0x54
    if( k < biL - 1 )
 800948a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800948c:	2b1e      	cmp	r3, #30
 800948e:	d819      	bhi.n	80094c4 <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 8009490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009492:	f1c3 031f 	rsb	r3, r3, #31
 8009496:	657b      	str	r3, [r7, #84]	; 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8009498:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800949c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fd fcdf 	bl	8006e62 <mbedtls_mpi_shift_l>
 80094a4:	65f8      	str	r0, [r7, #92]	; 0x5c
 80094a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f040 81e5 	bne.w	8009878 <mbedtls_mpi_div_mpi+0x528>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 80094ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80094b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fd fcd4 	bl	8006e62 <mbedtls_mpi_shift_l>
 80094ba:	65f8      	str	r0, [r7, #92]	; 0x5c
 80094bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <mbedtls_mpi_div_mpi+0x178>
 80094c2:	e1fa      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    }
    else k = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	657b      	str	r3, [r7, #84]	; 0x54

    n = X.n - 1;
 80094c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ca:	3b01      	subs	r3, #1
 80094cc:	653b      	str	r3, [r7, #80]	; 0x50
    t = Y.n - 1;
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	3b01      	subs	r3, #1
 80094d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80094d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80094e0:	4611      	mov	r1, r2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fd fcbd 	bl	8006e62 <mbedtls_mpi_shift_l>
 80094e8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80094ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f040 81c5 	bne.w	800987c <mbedtls_mpi_div_mpi+0x52c>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 80094f2:	e016      	b.n	8009522 <mbedtls_mpi_div_mpi+0x1d2>
    {
        Z.p[n - t]++;
 80094f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fa:	1acb      	subs	r3, r1, r3
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	3201      	adds	r2, #1
 8009504:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8009506:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800950a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800950e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe f8e3 	bl	80076de <mbedtls_mpi_sub_mpi>
 8009518:	65f8      	str	r0, [r7, #92]	; 0x5c
 800951a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800951c:	2b00      	cmp	r3, #0
 800951e:	f040 81af 	bne.w	8009880 <mbedtls_mpi_div_mpi+0x530>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8009522:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009526:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f7fd fe5a 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	dadd      	bge.n	80094f4 <mbedtls_mpi_div_mpi+0x1a4>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8009538:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800953a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009544:	4611      	mov	r1, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f7fd fd30 	bl	8006fac <mbedtls_mpi_shift_r>
 800954c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800954e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009550:	2b00      	cmp	r3, #0
 8009552:	f040 8197 	bne.w	8009884 <mbedtls_mpi_div_mpi+0x534>

    for( i = n; i > t ; i-- )
 8009556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009558:	65bb      	str	r3, [r7, #88]	; 0x58
 800955a:	e13e      	b.n	80097da <mbedtls_mpi_div_mpi+0x48a>
    {
        if( X.p[i] >= Y.p[t] )
 800955c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800955e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d30c      	bcc.n	800958e <mbedtls_mpi_div_mpi+0x23e>
            Z.p[i - t - 1] = ~0;
 8009574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957a:	1acb      	subs	r3, r1, r3
 800957c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009580:	3b01      	subs	r3, #1
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	f04f 32ff 	mov.w	r2, #4294967295
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	e021      	b.n	80095d2 <mbedtls_mpi_div_mpi+0x282>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800958e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	6818      	ldr	r0, [r3, #0]
 8009598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800959a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800959c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095a0:	3b01      	subs	r3, #1
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 80095a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80095b0:	681e      	ldr	r6, [r3, #0]
 80095b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b8:	1acb      	subs	r3, r1, r3
 80095ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095be:	3b01      	subs	r3, #1
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	18d4      	adds	r4, r2, r3
 80095c4:	2300      	movs	r3, #0
 80095c6:	4632      	mov	r2, r6
 80095c8:	4629      	mov	r1, r5
 80095ca:	f7ff fe67 	bl	800929c <mbedtls_int_div_int>
 80095ce:	4603      	mov	r3, r0
 80095d0:	6023      	str	r3, [r4, #0]
        }

        Z.p[i - t - 1]++;
 80095d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d8:	1acb      	subs	r3, r1, r3
 80095da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095de:	3b01      	subs	r3, #1
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	3201      	adds	r2, #1
 80095e8:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 80095ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f0:	1acb      	subs	r3, r1, r3
 80095f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095f6:	3b01      	subs	r3, #1
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	3a01      	subs	r2, #1
 8009600:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8009602:	f107 031c 	add.w	r3, r7, #28
 8009606:	2100      	movs	r1, #0
 8009608:	4618      	mov	r0, r3
 800960a:	f7fd faa8 	bl	8006b5e <mbedtls_mpi_lset>
 800960e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009612:	2b00      	cmp	r3, #0
 8009614:	f040 8138 	bne.w	8009888 <mbedtls_mpi_div_mpi+0x538>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8009618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d008      	beq.n	8009630 <mbedtls_mpi_div_mpi+0x2e0>
 800961e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009626:	3b01      	subs	r3, #1
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	e000      	b.n	8009632 <mbedtls_mpi_div_mpi+0x2e2>
 8009630:	2300      	movs	r3, #0
 8009632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009634:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 8009636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	441a      	add	r2, r3
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	3304      	adds	r3, #4
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8009646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009648:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800964a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800964c:	1acb      	subs	r3, r1, r3
 800964e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009652:	3b01      	subs	r3, #1
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	f107 011c 	add.w	r1, r7, #28
 800965e:	f107 031c 	add.w	r3, r7, #28
 8009662:	4618      	mov	r0, r3
 8009664:	f7ff fdff 	bl	8009266 <mbedtls_mpi_mul_int>
 8009668:	65f8      	str	r0, [r7, #92]	; 0x5c
 800966a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800966c:	2b00      	cmp	r3, #0
 800966e:	f040 810d 	bne.w	800988c <mbedtls_mpi_div_mpi+0x53c>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8009672:	f107 0310 	add.w	r3, r7, #16
 8009676:	2100      	movs	r1, #0
 8009678:	4618      	mov	r0, r3
 800967a:	f7fd fa70 	bl	8006b5e <mbedtls_mpi_lset>
 800967e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009682:	2b00      	cmp	r3, #0
 8009684:	f040 8104 	bne.w	8009890 <mbedtls_mpi_div_mpi+0x540>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8009688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800968a:	2b01      	cmp	r3, #1
 800968c:	d908      	bls.n	80096a0 <mbedtls_mpi_div_mpi+0x350>
 800968e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009692:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009696:	3b02      	subs	r3, #2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	e000      	b.n	80096a2 <mbedtls_mpi_div_mpi+0x352>
 80096a0:	2300      	movs	r3, #0
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80096a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d008      	beq.n	80096be <mbedtls_mpi_div_mpi+0x36e>
 80096ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096b4:	3b01      	subs	r3, #1
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	e000      	b.n	80096c0 <mbedtls_mpi_div_mpi+0x370>
 80096be:	2300      	movs	r3, #0
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	3204      	adds	r2, #4
 80096c4:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 80096c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	441a      	add	r2, r3
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	3308      	adds	r3, #8
 80096d2:	6812      	ldr	r2, [r2, #0]
 80096d4:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80096d6:	f107 0210 	add.w	r2, r7, #16
 80096da:	f107 031c 	add.w	r3, r7, #28
 80096de:	4611      	mov	r1, r2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd fd80 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f73f af7e 	bgt.w	80095ea <mbedtls_mpi_div_mpi+0x29a>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80096ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f4:	1acb      	subs	r3, r1, r3
 80096f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096fa:	3b01      	subs	r3, #1
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009706:	f107 031c 	add.w	r3, r7, #28
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fdab 	bl	8009266 <mbedtls_mpi_mul_int>
 8009710:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009714:	2b00      	cmp	r3, #0
 8009716:	f040 80bd 	bne.w	8009894 <mbedtls_mpi_div_mpi+0x544>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800971a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800971c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	f107 031c 	add.w	r3, r7, #28
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f7fd fb99 	bl	8006e62 <mbedtls_mpi_shift_l>
 8009730:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009734:	2b00      	cmp	r3, #0
 8009736:	f040 80af 	bne.w	8009898 <mbedtls_mpi_div_mpi+0x548>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800973a:	f107 021c 	add.w	r2, r7, #28
 800973e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8009742:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009746:	4618      	mov	r0, r3
 8009748:	f7fd ffc9 	bl	80076de <mbedtls_mpi_sub_mpi>
 800974c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800974e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009750:	2b00      	cmp	r3, #0
 8009752:	f040 80a3 	bne.w	800989c <mbedtls_mpi_div_mpi+0x54c>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 8009756:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800975a:	2100      	movs	r1, #0
 800975c:	4618      	mov	r0, r3
 800975e:	f7fd fddd 	bl	800731c <mbedtls_mpi_cmp_int>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	da35      	bge.n	80097d4 <mbedtls_mpi_div_mpi+0x484>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8009768:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800976c:	f107 031c 	add.w	r3, r7, #28
 8009770:	4611      	mov	r1, r2
 8009772:	4618      	mov	r0, r3
 8009774:	f7fd f9a2 	bl	8006abc <mbedtls_mpi_copy>
 8009778:	65f8      	str	r0, [r7, #92]	; 0x5c
 800977a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800977c:	2b00      	cmp	r3, #0
 800977e:	f040 808f 	bne.w	80098a0 <mbedtls_mpi_div_mpi+0x550>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8009782:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	3b01      	subs	r3, #1
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	f107 031c 	add.w	r3, r7, #28
 8009790:	4611      	mov	r1, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f7fd fb65 	bl	8006e62 <mbedtls_mpi_shift_l>
 8009798:	65f8      	str	r0, [r7, #92]	; 0x5c
 800979a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800979c:	2b00      	cmp	r3, #0
 800979e:	f040 8081 	bne.w	80098a4 <mbedtls_mpi_div_mpi+0x554>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80097a2:	f107 021c 	add.w	r2, r7, #28
 80097a6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80097aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fd ff4b 	bl	800764a <mbedtls_mpi_add_mpi>
 80097b4:	65f8      	str	r0, [r7, #92]	; 0x5c
 80097b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d175      	bne.n	80098a8 <mbedtls_mpi_div_mpi+0x558>
            Z.p[i - t - 1]--;
 80097bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c2:	1acb      	subs	r3, r1, r3
 80097c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097c8:	3b01      	subs	r3, #1
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	3a01      	subs	r2, #1
 80097d2:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 80097d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097d6:	3b01      	subs	r3, #1
 80097d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80097da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097de:	429a      	cmp	r2, r3
 80097e0:	f63f aebc 	bhi.w	800955c <mbedtls_mpi_div_mpi+0x20c>
        }
    }

    if( Q != NULL )
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d011      	beq.n	800980e <mbedtls_mpi_div_mpi+0x4be>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80097ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80097ee:	4619      	mov	r1, r3
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f7fd f963 	bl	8006abc <mbedtls_mpi_copy>
 80097f6:	65f8      	str	r0, [r7, #92]	; 0x5c
 80097f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d156      	bne.n	80098ac <mbedtls_mpi_div_mpi+0x55c>
        Q->s = A->s * B->s;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	6812      	ldr	r2, [r2, #0]
 8009806:	fb03 f202 	mul.w	r2, r3, r2
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d04d      	beq.n	80098b0 <mbedtls_mpi_div_mpi+0x560>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 8009814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009818:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800981a:	4618      	mov	r0, r3
 800981c:	f7fd fbc6 	bl	8006fac <mbedtls_mpi_shift_r>
 8009820:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d145      	bne.n	80098b4 <mbedtls_mpi_div_mpi+0x564>
        X.s = A->s;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	643b      	str	r3, [r7, #64]	; 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800982e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009832:	4619      	mov	r1, r3
 8009834:	68b8      	ldr	r0, [r7, #8]
 8009836:	f7fd f941 	bl	8006abc <mbedtls_mpi_copy>
 800983a:	65f8      	str	r0, [r7, #92]	; 0x5c
 800983c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d13a      	bne.n	80098b8 <mbedtls_mpi_div_mpi+0x568>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 8009842:	2100      	movs	r1, #0
 8009844:	68b8      	ldr	r0, [r7, #8]
 8009846:	f7fd fd69 	bl	800731c <mbedtls_mpi_cmp_int>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d12f      	bne.n	80098b0 <mbedtls_mpi_div_mpi+0x560>
            R->s = 1;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2201      	movs	r2, #1
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	e030      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8009858:	bf00      	nop
 800985a:	e02e      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800985c:	bf00      	nop
 800985e:	e02c      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8009860:	bf00      	nop
 8009862:	e02a      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8009864:	bf00      	nop
 8009866:	e028      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8009868:	bf00      	nop
 800986a:	e026      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800986c:	bf00      	nop
 800986e:	e024      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8009870:	bf00      	nop
 8009872:	e022      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8009874:	bf00      	nop
 8009876:	e020      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8009878:	bf00      	nop
 800987a:	e01e      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800987c:	bf00      	nop
 800987e:	e01c      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8009880:	bf00      	nop
 8009882:	e01a      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8009884:	bf00      	nop
 8009886:	e018      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8009888:	bf00      	nop
 800988a:	e016      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800988c:	bf00      	nop
 800988e:	e014      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8009890:	bf00      	nop
 8009892:	e012      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8009894:	bf00      	nop
 8009896:	e010      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8009898:	bf00      	nop
 800989a:	e00e      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800989c:	bf00      	nop
 800989e:	e00c      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80098a0:	bf00      	nop
 80098a2:	e00a      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80098a4:	bf00      	nop
 80098a6:	e008      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80098a8:	bf00      	nop
 80098aa:	e006      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80098ac:	bf00      	nop
 80098ae:	e004      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
    }

cleanup:
 80098b0:	bf00      	nop
 80098b2:	e002      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80098b4:	bf00      	nop
 80098b6:	e000      	b.n	80098ba <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80098b8:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 80098ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fd f893 	bl	80069ea <mbedtls_mpi_free>
 80098c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd f88e 	bl	80069ea <mbedtls_mpi_free>
 80098ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fd f889 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 80098d8:	f107 031c 	add.w	r3, r7, #28
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fd f884 	bl	80069ea <mbedtls_mpi_free>
 80098e2:	f107 0310 	add.w	r3, r7, #16
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fd f87f 	bl	80069ea <mbedtls_mpi_free>

    return( ret );
 80098ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3764      	adds	r7, #100	; 0x64
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098f6 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b086      	sub	sp, #24
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	60f8      	str	r0, [r7, #12]
 80098fe:	60b9      	str	r1, [r7, #8]
 8009900:	607a      	str	r2, [r7, #4]
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 8009902:	2100      	movs	r1, #0
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7fd fd09 	bl	800731c <mbedtls_mpi_cmp_int>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	da02      	bge.n	8009916 <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8009910:	f06f 0309 	mvn.w	r3, #9
 8009914:	e032      	b.n	800997c <mbedtls_mpi_mod_mpi+0x86>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	68f9      	ldr	r1, [r7, #12]
 800991c:	2000      	movs	r0, #0
 800991e:	f7ff fd17 	bl	8009350 <mbedtls_mpi_div_mpi>
 8009922:	6178      	str	r0, [r7, #20]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d122      	bne.n	8009970 <mbedtls_mpi_mod_mpi+0x7a>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800992a:	e008      	b.n	800993e <mbedtls_mpi_mod_mpi+0x48>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f7fd fe8a 	bl	800764a <mbedtls_mpi_add_mpi>
 8009936:	6178      	str	r0, [r7, #20]
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d11a      	bne.n	8009974 <mbedtls_mpi_mod_mpi+0x7e>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800993e:	2100      	movs	r1, #0
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7fd fceb 	bl	800731c <mbedtls_mpi_cmp_int>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	dbef      	blt.n	800992c <mbedtls_mpi_mod_mpi+0x36>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800994c:	e008      	b.n	8009960 <mbedtls_mpi_mod_mpi+0x6a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	68f9      	ldr	r1, [r7, #12]
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7fd fec3 	bl	80076de <mbedtls_mpi_sub_mpi>
 8009958:	6178      	str	r0, [r7, #20]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10b      	bne.n	8009978 <mbedtls_mpi_mod_mpi+0x82>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7fd fc3f 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	daef      	bge.n	800994e <mbedtls_mpi_mod_mpi+0x58>

cleanup:
 800996e:	e004      	b.n	800997a <mbedtls_mpi_mod_mpi+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8009970:	bf00      	nop
 8009972:	e002      	b.n	800997a <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8009974:	bf00      	nop
 8009976:	e000      	b.n	800997a <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8009978:	bf00      	nop

    return( ret );
 800997a:	697b      	ldr	r3, [r7, #20]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint x, m0 = N->p[0];
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	60fb      	str	r3, [r7, #12]
    unsigned int i;

    x  = m0;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	617b      	str	r3, [r7, #20]
    x += ( ( m0 + 2 ) & 4 ) << 1;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3302      	adds	r3, #2
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	f003 0308 	and.w	r3, r3, #8
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	4413      	add	r3, r2
 80099a8:	617b      	str	r3, [r7, #20]

    for( i = biL; i >= 8; i /= 2 )
 80099aa:	2320      	movs	r3, #32
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	e00c      	b.n	80099ca <mpi_montg_init+0x46>
        x *= ( 2 - ( m0 * x ) );
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	fb02 f303 	mul.w	r3, r2, r3
 80099b8:	f1c3 0202 	rsb	r2, r3, #2
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	fb02 f303 	mul.w	r3, r2, r3
 80099c2:	617b      	str	r3, [r7, #20]
    for( i = biL; i >= 8; i /= 2 )
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	085b      	lsrs	r3, r3, #1
 80099c8:	613b      	str	r3, [r7, #16]
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b07      	cmp	r3, #7
 80099ce:	d8ef      	bhi.n	80099b0 <mpi_montg_init+0x2c>

    *mm = ~x + 1;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	425a      	negs	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	601a      	str	r2, [r3, #0]
}
 80099d8:	bf00      	nop
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08a      	sub	sp, #40	; 0x28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	603b      	str	r3, [r7, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	3301      	adds	r3, #1
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d303      	bcc.n	8009a08 <mpi_montmul+0x24>
 8009a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d102      	bne.n	8009a0e <mpi_montmul+0x2a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8009a08:	f06f 0303 	mvn.w	r3, #3
 8009a0c:	e06f      	b.n	8009aee <mpi_montmul+0x10a>

    memset( T->p, 0, T->n * ciL );
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	6898      	ldr	r0, [r3, #8]
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	461a      	mov	r2, r3
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	f013 ff24 	bl	801d868 <memset>

    d = T->p;
 8009a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	623b      	str	r3, [r7, #32]
    n = N->n;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	61fb      	str	r3, [r7, #28]
    m = ( B->n < n ) ? B->n : n;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	69fa      	ldr	r2, [r7, #28]
 8009a32:	4293      	cmp	r3, r2
 8009a34:	bf28      	it	cs
 8009a36:	4613      	movcs	r3, r2
 8009a38:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < n; i++ )
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009a3e:	e030      	b.n	8009aa2 <mpi_montmul+0xbe>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	617b      	str	r3, [r7, #20]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6979      	ldr	r1, [r7, #20]
 8009a5a:	fb01 f303 	mul.w	r3, r1, r3
 8009a5e:	441a      	add	r2, r3
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	fb02 f303 	mul.w	r3, r2, r3
 8009a66:	613b      	str	r3, [r7, #16]

        mpi_mul_hlp( m, B->p, d, u0 );
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	6899      	ldr	r1, [r3, #8]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	6a3a      	ldr	r2, [r7, #32]
 8009a70:	69b8      	ldr	r0, [r7, #24]
 8009a72:	f7fd fec6 	bl	8007802 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6899      	ldr	r1, [r3, #8]
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	6a3a      	ldr	r2, [r7, #32]
 8009a7e:	69f8      	ldr	r0, [r7, #28]
 8009a80:	f7fd febf 	bl	8007802 <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	1d1a      	adds	r2, r3, #4
 8009a88:	623a      	str	r2, [r7, #32]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	3301      	adds	r3, #1
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	6a3a      	ldr	r2, [r7, #32]
 8009a96:	4413      	add	r3, r2
 8009a98:	2200      	movs	r2, #0
 8009a9a:	601a      	str	r2, [r3, #0]
    for( i = 0; i < n; i++ )
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8009aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d3ca      	bcc.n	8009a40 <mpi_montmul+0x5c>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6898      	ldr	r0, [r3, #8]
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	6a39      	ldr	r1, [r7, #32]
 8009ab8:	f013 feae 	bl	801d818 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 8009abc:	6879      	ldr	r1, [r7, #4]
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7fd fb0f 	bl	80070e2 <mbedtls_mpi_cmp_abs>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	db08      	blt.n	8009adc <mpi_montmul+0xf8>
        mpi_sub_hlp( n, N->p, A->p );
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6899      	ldr	r1, [r3, #8]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	69f8      	ldr	r0, [r7, #28]
 8009ad6:	f7fd fcf7 	bl	80074c8 <mpi_sub_hlp>
 8009ada:	e007      	b.n	8009aec <mpi_montmul+0x108>
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6899      	ldr	r1, [r3, #8]
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	69f8      	ldr	r0, [r7, #28]
 8009ae8:	f7fd fcee 	bl	80074c8 <mpi_sub_hlp>

    return( 0 );
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3728      	adds	r7, #40	; 0x28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <mpi_montred>:

/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b08a      	sub	sp, #40	; 0x28
 8009afa:	af02      	add	r7, sp, #8
 8009afc:	60f8      	str	r0, [r7, #12]
 8009afe:	60b9      	str	r1, [r7, #8]
 8009b00:	607a      	str	r2, [r7, #4]
 8009b02:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint z = 1;
 8009b04:	2301      	movs	r3, #1
 8009b06:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	613b      	str	r3, [r7, #16]
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	617b      	str	r3, [r7, #20]
    U.p = &z;
 8009b10:	f107 031c 	add.w	r3, r7, #28
 8009b14:	61bb      	str	r3, [r7, #24]

    return( mpi_montmul( A, &U, N, mm, T ) );
 8009b16:	f107 0110 	add.w	r1, r7, #16
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f7ff ff5e 	bl	80099e4 <mpi_montmul>
 8009b28:	4603      	mov	r3, r0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3720      	adds	r7, #32
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 8009b32:	b590      	push	{r4, r7, lr}
 8009b34:	f2ad 6d74 	subw	sp, sp, #1652	; 0x674
 8009b38:	af02      	add	r7, sp, #8
 8009b3a:	f507 64cd 	add.w	r4, r7, #1640	; 0x668
 8009b3e:	f2a4 645c 	subw	r4, r4, #1628	; 0x65c
 8009b42:	6020      	str	r0, [r4, #0]
 8009b44:	f507 60cd 	add.w	r0, r7, #1640	; 0x668
 8009b48:	f5a0 60cc 	sub.w	r0, r0, #1632	; 0x660
 8009b4c:	6001      	str	r1, [r0, #0]
 8009b4e:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8009b52:	f2a1 6164 	subw	r1, r1, #1636	; 0x664
 8009b56:	600a      	str	r2, [r1, #0]
 8009b58:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8009b5c:	f5a2 62cd 	sub.w	r2, r2, #1640	; 0x668
 8009b60:	6013      	str	r3, [r2, #0]
    int ret;
    size_t wbits, wsize, one = 1;
 8009b62:	2301      	movs	r3, #1
 8009b64:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 8009b68:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009b6c:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009b70:	2100      	movs	r1, #0
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	f7fd fbd2 	bl	800731c <mbedtls_mpi_cmp_int>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dd0a      	ble.n	8009b94 <mbedtls_mpi_exp_mod+0x62>
 8009b7e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009b82:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d103      	bne.n	8009b9c <mbedtls_mpi_exp_mod+0x6a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8009b94:	f06f 0303 	mvn.w	r3, #3
 8009b98:	f000 bc71 	b.w	800a47e <mbedtls_mpi_exp_mod+0x94c>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 8009b9c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009ba0:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	f7fd fbb8 	bl	800731c <mbedtls_mpi_cmp_int>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	da03      	bge.n	8009bba <mbedtls_mpi_exp_mod+0x88>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8009bb2:	f06f 0303 	mvn.w	r3, #3
 8009bb6:	f000 bc62 	b.w	800a47e <mbedtls_mpi_exp_mod+0x94c>

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
 8009bba:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009bbe:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009bc2:	f207 6234 	addw	r2, r7, #1588	; 0x634
 8009bc6:	6819      	ldr	r1, [r3, #0]
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f7ff fedb 	bl	8009984 <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
 8009bce:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fc fef2 	bl	80069bc <mbedtls_mpi_init>
 8009bd8:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fc feed 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
 8009be2:	f107 0310 	add.w	r3, r7, #16
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fc fee8 	bl	80069bc <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
 8009bec:	f107 031c 	add.w	r3, r7, #28
 8009bf0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f013 fe36 	bl	801d868 <memset>

    i = mbedtls_mpi_bitlen( E );
 8009bfc:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009c00:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	f7fd f84d 	bl	8006ca4 <mbedtls_mpi_bitlen>
 8009c0a:	f8c7 0658 	str.w	r0, [r7, #1624]	; 0x658

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8009c0e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009c12:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8009c16:	d213      	bcs.n	8009c40 <mbedtls_mpi_exp_mod+0x10e>
 8009c18:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009c1c:	2bef      	cmp	r3, #239	; 0xef
 8009c1e:	d80d      	bhi.n	8009c3c <mbedtls_mpi_exp_mod+0x10a>
 8009c20:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009c24:	2b4f      	cmp	r3, #79	; 0x4f
 8009c26:	d807      	bhi.n	8009c38 <mbedtls_mpi_exp_mod+0x106>
 8009c28:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009c2c:	2b17      	cmp	r3, #23
 8009c2e:	d901      	bls.n	8009c34 <mbedtls_mpi_exp_mod+0x102>
 8009c30:	2303      	movs	r3, #3
 8009c32:	e006      	b.n	8009c42 <mbedtls_mpi_exp_mod+0x110>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e004      	b.n	8009c42 <mbedtls_mpi_exp_mod+0x110>
 8009c38:	2304      	movs	r3, #4
 8009c3a:	e002      	b.n	8009c42 <mbedtls_mpi_exp_mod+0x110>
 8009c3c:	2305      	movs	r3, #5
 8009c3e:	e000      	b.n	8009c42 <mbedtls_mpi_exp_mod+0x110>
 8009c40:	2306      	movs	r3, #6
 8009c42:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
 8009c46:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8009c4a:	2b06      	cmp	r3, #6
 8009c4c:	d902      	bls.n	8009c54 <mbedtls_mpi_exp_mod+0x122>
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
 8009c4e:	2306      	movs	r3, #6
 8009c50:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c

    j = N->n + 1;
 8009c54:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009c58:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	3301      	adds	r3, #1
 8009c62:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8009c66:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009c6a:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8009c6e:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 8009c72:	6818      	ldr	r0, [r3, #0]
 8009c74:	f7fc fedf 	bl	8006a36 <mbedtls_mpi_grow>
 8009c78:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009c7c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f040 838a 	bne.w	800a39a <mbedtls_mpi_exp_mod+0x868>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 8009c86:	f107 031c 	add.w	r3, r7, #28
 8009c8a:	330c      	adds	r3, #12
 8009c8c:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fc fed0 	bl	8006a36 <mbedtls_mpi_grow>
 8009c96:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009c9a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f040 837d 	bne.w	800a39e <mbedtls_mpi_exp_mod+0x86c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 8009ca4:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8009ca8:	005a      	lsls	r2, r3, #1
 8009caa:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8009cae:	4611      	mov	r1, r2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fc fec0 	bl	8006a36 <mbedtls_mpi_grow>
 8009cb6:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009cba:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f040 836f 	bne.w	800a3a2 <mbedtls_mpi_exp_mod+0x870>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 8009cc4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009cc8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd4:	bf0c      	ite	eq
 8009cd6:	2301      	moveq	r3, #1
 8009cd8:	2300      	movne	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
    if( neg )
 8009ce0:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01d      	beq.n	8009d24 <mbedtls_mpi_exp_mod+0x1f2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 8009ce8:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009cec:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009cf0:	f107 0210 	add.w	r2, r7, #16
 8009cf4:	6819      	ldr	r1, [r3, #0]
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7fc fee0 	bl	8006abc <mbedtls_mpi_copy>
 8009cfc:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009d00:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f040 834e 	bne.w	800a3a6 <mbedtls_mpi_exp_mod+0x874>
        Apos.s = 1;
 8009d0a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009d0e:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8009d12:	2201      	movs	r2, #1
 8009d14:	601a      	str	r2, [r3, #0]
        A = &Apos;
 8009d16:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009d1a:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009d1e:	f107 0210 	add.w	r2, r7, #16
 8009d22:	601a      	str	r2, [r3, #0]
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 8009d24:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <mbedtls_mpi_exp_mod+0x204>
 8009d2c:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d13f      	bne.n	8009db6 <mbedtls_mpi_exp_mod+0x284>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 8009d36:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fc ff0e 	bl	8006b5e <mbedtls_mpi_lset>
 8009d42:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009d46:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f040 832d 	bne.w	800a3aa <mbedtls_mpi_exp_mod+0x878>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 8009d50:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009d54:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	019a      	lsls	r2, r3, #6
 8009d5e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009d62:	4611      	mov	r1, r2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fd f87c 	bl	8006e62 <mbedtls_mpi_shift_l>
 8009d6a:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009d6e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f040 831b 	bne.w	800a3ae <mbedtls_mpi_exp_mod+0x87c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 8009d78:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009d7c:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009d80:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8009d84:	f507 60c5 	add.w	r0, r7, #1576	; 0x628
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	f7ff fdb4 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 8009d8e:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009d92:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f040 830b 	bne.w	800a3b2 <mbedtls_mpi_exp_mod+0x880>

        if( _RR != NULL )
 8009d9c:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d010      	beq.n	8009dc6 <mbedtls_mpi_exp_mod+0x294>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 8009da4:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009da8:	220c      	movs	r2, #12
 8009daa:	4619      	mov	r1, r3
 8009dac:	f8d7 0678 	ldr.w	r0, [r7, #1656]	; 0x678
 8009db0:	f013 fd32 	bl	801d818 <memcpy>
        if( _RR != NULL )
 8009db4:	e007      	b.n	8009dc6 <mbedtls_mpi_exp_mod+0x294>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 8009db6:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8009dba:	220c      	movs	r2, #12
 8009dbc:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f013 fd29 	bl	801d818 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 8009dc6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009dca:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 8009dce:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009dd2:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009dd6:	6811      	ldr	r1, [r2, #0]
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	f7fd fa04 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	db16      	blt.n	8009e12 <mbedtls_mpi_exp_mod+0x2e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 8009de4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009de8:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 8009dec:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009df0:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009df4:	f107 011c 	add.w	r1, r7, #28
 8009df8:	f101 000c 	add.w	r0, r1, #12
 8009dfc:	6812      	ldr	r2, [r2, #0]
 8009dfe:	6819      	ldr	r1, [r3, #0]
 8009e00:	f7ff fd79 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 8009e04:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009e08:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d012      	beq.n	8009e36 <mbedtls_mpi_exp_mod+0x304>
 8009e10:	e2f0      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 8009e12:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009e16:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8009e1a:	f107 021c 	add.w	r2, r7, #28
 8009e1e:	320c      	adds	r2, #12
 8009e20:	6819      	ldr	r1, [r3, #0]
 8009e22:	4610      	mov	r0, r2
 8009e24:	f7fc fe4a 	bl	8006abc <mbedtls_mpi_copy>
 8009e28:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009e2c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 82c0 	bne.w	800a3b6 <mbedtls_mpi_exp_mod+0x884>

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 8009e36:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 8009e3a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009e3e:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 8009e42:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8009e46:	f107 031c 	add.w	r3, r7, #28
 8009e4a:	f103 000c 	add.w	r0, r3, #12
 8009e4e:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	4623      	mov	r3, r4
 8009e56:	6812      	ldr	r2, [r2, #0]
 8009e58:	f7ff fdc4 	bl	80099e4 <mpi_montmul>
 8009e5c:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009e60:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f040 82a8 	bne.w	800a3ba <mbedtls_mpi_exp_mod+0x888>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 8009e6a:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 8009e6e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009e72:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8009e76:	4611      	mov	r1, r2
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	f7fc fe1f 	bl	8006abc <mbedtls_mpi_copy>
 8009e7e:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009e82:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f040 8299 	bne.w	800a3be <mbedtls_mpi_exp_mod+0x88c>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 8009e8c:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 8009e90:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8009e94:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8009e98:	f5a1 61cd 	sub.w	r1, r1, #1640	; 0x668
 8009e9c:	f507 60cd 	add.w	r0, r7, #1640	; 0x668
 8009ea0:	f2a0 605c 	subw	r0, r0, #1628	; 0x65c
 8009ea4:	6809      	ldr	r1, [r1, #0]
 8009ea6:	6800      	ldr	r0, [r0, #0]
 8009ea8:	f7ff fe25 	bl	8009af6 <mpi_montred>
 8009eac:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009eb0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 8284 	bne.w	800a3c2 <mbedtls_mpi_exp_mod+0x890>

    if( wsize > 1 )
 8009eba:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	f240 80df 	bls.w	800a082 <mbedtls_mpi_exp_mod+0x550>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 8009ec4:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 8009ece:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed2:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 8009ed6:	f107 011c 	add.w	r1, r7, #28
 8009eda:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 8009ede:	4613      	mov	r3, r2
 8009ee0:	005b      	lsls	r3, r3, #1
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	18ca      	adds	r2, r1, r3
 8009ee8:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009eec:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7fc fd9c 	bl	8006a36 <mbedtls_mpi_grow>
 8009efe:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009f02:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f040 825d 	bne.w	800a3c6 <mbedtls_mpi_exp_mod+0x894>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 8009f0c:	f107 011c 	add.w	r1, r7, #28
 8009f10:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 8009f14:	4613      	mov	r3, r2
 8009f16:	005b      	lsls	r3, r3, #1
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	18ca      	adds	r2, r1, r3
 8009f1e:	f107 031c 	add.w	r3, r7, #28
 8009f22:	330c      	adds	r3, #12
 8009f24:	4619      	mov	r1, r3
 8009f26:	4610      	mov	r0, r2
 8009f28:	f7fc fdc8 	bl	8006abc <mbedtls_mpi_copy>
 8009f2c:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009f30:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f040 8248 	bne.w	800a3ca <mbedtls_mpi_exp_mod+0x898>

        for( i = 0; i < wsize - 1; i++ )
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8009f40:	e02a      	b.n	8009f98 <mbedtls_mpi_exp_mod+0x466>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 8009f42:	f107 011c 	add.w	r1, r7, #28
 8009f46:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	18c8      	adds	r0, r1, r3
 8009f54:	f107 011c 	add.w	r1, r7, #28
 8009f58:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4419      	add	r1, r3
 8009f66:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 8009f6a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009f6e:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 8009f72:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	4623      	mov	r3, r4
 8009f7a:	6812      	ldr	r2, [r2, #0]
 8009f7c:	f7ff fd32 	bl	80099e4 <mpi_montmul>
 8009f80:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009f84:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f040 8220 	bne.w	800a3ce <mbedtls_mpi_exp_mod+0x89c>
        for( i = 0; i < wsize - 1; i++ )
 8009f8e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009f92:	3301      	adds	r3, #1
 8009f94:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8009f98:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d3cd      	bcc.n	8009f42 <mbedtls_mpi_exp_mod+0x410>

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 8009fa6:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8009faa:	3301      	adds	r3, #1
 8009fac:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8009fb0:	e05d      	b.n	800a06e <mbedtls_mpi_exp_mod+0x53c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 8009fb2:	f107 011c 	add.w	r1, r7, #28
 8009fb6:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8009fba:	4613      	mov	r3, r2
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	4413      	add	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	18ca      	adds	r2, r1, r3
 8009fc4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8009fc8:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	f7fc fd2e 	bl	8006a36 <mbedtls_mpi_grow>
 8009fda:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8009fde:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f040 81f5 	bne.w	800a3d2 <mbedtls_mpi_exp_mod+0x8a0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 8009fe8:	f107 011c 	add.w	r1, r7, #28
 8009fec:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	18c8      	adds	r0, r1, r3
 8009ffa:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8009ffe:	1e5a      	subs	r2, r3, #1
 800a000:	f107 011c 	add.w	r1, r7, #28
 800a004:	4613      	mov	r3, r2
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	440b      	add	r3, r1
 800a00e:	4619      	mov	r1, r3
 800a010:	f7fc fd54 	bl	8006abc <mbedtls_mpi_copy>
 800a014:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a018:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f040 81da 	bne.w	800a3d6 <mbedtls_mpi_exp_mod+0x8a4>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800a022:	f107 011c 	add.w	r1, r7, #28
 800a026:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a02a:	4613      	mov	r3, r2
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	18c8      	adds	r0, r1, r3
 800a034:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a038:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a03c:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a040:	f107 031c 	add.w	r3, r7, #28
 800a044:	f103 010c 	add.w	r1, r3, #12
 800a048:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	4623      	mov	r3, r4
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	f7ff fcc7 	bl	80099e4 <mpi_montmul>
 800a056:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a05a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f040 81bb 	bne.w	800a3da <mbedtls_mpi_exp_mod+0x8a8>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800a064:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a068:	3301      	adds	r3, #1
 800a06a:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a06e:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a072:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a076:	fa02 f303 	lsl.w	r3, r2, r3
 800a07a:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a07e:	429a      	cmp	r2, r3
 800a080:	d397      	bcc.n	8009fb2 <mbedtls_mpi_exp_mod+0x480>
        }
    }

    nblimbs = E->n;
 800a082:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a086:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    bufsize = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
    nbits   = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
    wbits   = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
    state   = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

    while( 1 )
    {
        if( bufsize == 0 )
 800a0aa:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10c      	bne.n	800a0cc <mbedtls_mpi_exp_mod+0x59a>
        {
            if( nblimbs == 0 )
 800a0b2:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 80ca 	beq.w	800a250 <mbedtls_mpi_exp_mod+0x71e>
                break;

            nblimbs--;
 800a0bc:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 800a0c6:	2320      	movs	r3, #32
 800a0c8:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
        }

        bufsize--;
 800a0cc:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650

        ei = (E->p[nblimbs] >> bufsize) & 1;
 800a0d6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a0da:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 800a0fc:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800a100:	2b00      	cmp	r3, #0
 800a102:	d104      	bne.n	800a10e <mbedtls_mpi_exp_mod+0x5dc>
 800a104:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 809d 	beq.w	800a248 <mbedtls_mpi_exp_mod+0x716>
            continue;

        if( ei == 0 && state == 1 )
 800a10e:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800a112:	2b00      	cmp	r3, #0
 800a114:	d121      	bne.n	800a15a <mbedtls_mpi_exp_mod+0x628>
 800a116:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d11d      	bne.n	800a15a <mbedtls_mpi_exp_mod+0x628>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a11e:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a122:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a126:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a12a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a12e:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 800a132:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a136:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a13a:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	4623      	mov	r3, r4
 800a142:	6812      	ldr	r2, [r2, #0]
 800a144:	6809      	ldr	r1, [r1, #0]
 800a146:	6800      	ldr	r0, [r0, #0]
 800a148:	f7ff fc4c 	bl	80099e4 <mpi_montmul>
 800a14c:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a150:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a154:	2b00      	cmp	r3, #0
 800a156:	d079      	beq.n	800a24c <mbedtls_mpi_exp_mod+0x71a>
 800a158:	e14c      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
        }

        /*
         * add ei to current window
         */
        state = 2;
 800a15a:	2302      	movs	r3, #2
 800a15c:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

        nbits++;
 800a160:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800a164:	3301      	adds	r3, #1
 800a166:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
        wbits |= ( ei << ( wsize - nbits ) );
 800a16a:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800a16e:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 800a178:	fa02 f303 	lsl.w	r3, r2, r3
 800a17c:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800a180:	4313      	orrs	r3, r2
 800a182:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660

        if( nbits == wsize )
 800a186:	f8d7 264c 	ldr.w	r2, [r7, #1612]	; 0x64c
 800a18a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a18e:	429a      	cmp	r2, r3
 800a190:	d18b      	bne.n	800a0aa <mbedtls_mpi_exp_mod+0x578>
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 800a192:	2300      	movs	r3, #0
 800a194:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a198:	e022      	b.n	800a1e0 <mbedtls_mpi_exp_mod+0x6ae>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a19a:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a19e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a1a2:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a1a6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a1aa:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 800a1ae:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a1b2:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a1b6:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	4623      	mov	r3, r4
 800a1be:	6812      	ldr	r2, [r2, #0]
 800a1c0:	6809      	ldr	r1, [r1, #0]
 800a1c2:	6800      	ldr	r0, [r0, #0]
 800a1c4:	f7ff fc0e 	bl	80099e4 <mpi_montmul>
 800a1c8:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a1cc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f040 8104 	bne.w	800a3de <mbedtls_mpi_exp_mod+0x8ac>
            for( i = 0; i < wsize; i++ )
 800a1d6:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a1da:	3301      	adds	r3, #1
 800a1dc:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a1e0:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a1e4:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d3d6      	bcc.n	800a19a <mbedtls_mpi_exp_mod+0x668>

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800a1ec:	f107 011c 	add.w	r1, r7, #28
 800a1f0:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4419      	add	r1, r3
 800a1fe:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a202:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a206:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a20a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a20e:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a212:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	4623      	mov	r3, r4
 800a21a:	6812      	ldr	r2, [r2, #0]
 800a21c:	6800      	ldr	r0, [r0, #0]
 800a21e:	f7ff fbe1 	bl	80099e4 <mpi_montmul>
 800a222:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a226:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f040 80d9 	bne.w	800a3e2 <mbedtls_mpi_exp_mod+0x8b0>

            state--;
 800a230:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800a234:	3b01      	subs	r3, #1
 800a236:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
            nbits = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
            wbits = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 800a246:	e730      	b.n	800a0aa <mbedtls_mpi_exp_mod+0x578>
            continue;
 800a248:	bf00      	nop
 800a24a:	e72e      	b.n	800a0aa <mbedtls_mpi_exp_mod+0x578>
            continue;
 800a24c:	bf00      	nop
        if( bufsize == 0 )
 800a24e:	e72c      	b.n	800a0aa <mbedtls_mpi_exp_mod+0x578>
                break;
 800a250:	bf00      	nop
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 800a252:	2300      	movs	r3, #0
 800a254:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a258:	e04d      	b.n	800a2f6 <mbedtls_mpi_exp_mod+0x7c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a25a:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a25e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a262:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a266:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a26a:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 800a26e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a272:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a276:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	4623      	mov	r3, r4
 800a27e:	6812      	ldr	r2, [r2, #0]
 800a280:	6809      	ldr	r1, [r1, #0]
 800a282:	6800      	ldr	r0, [r0, #0]
 800a284:	f7ff fbae 	bl	80099e4 <mpi_montmul>
 800a288:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a28c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a290:	2b00      	cmp	r3, #0
 800a292:	f040 80a8 	bne.w	800a3e6 <mbedtls_mpi_exp_mod+0x8b4>

        wbits <<= 1;
 800a296:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660

        if( ( wbits & ( one << wsize ) ) != 0 )
 800a2a0:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a2a4:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a2a8:	409a      	lsls	r2, r3
 800a2aa:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d01b      	beq.n	800a2ec <mbedtls_mpi_exp_mod+0x7ba>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800a2b4:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 800a2b8:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a2bc:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 800a2c0:	f107 031c 	add.w	r3, r7, #28
 800a2c4:	f103 010c 	add.w	r1, r3, #12
 800a2c8:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a2cc:	f2a3 605c 	subw	r0, r3, #1628	; 0x65c
 800a2d0:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	4623      	mov	r3, r4
 800a2d8:	6812      	ldr	r2, [r2, #0]
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	f7ff fb82 	bl	80099e4 <mpi_montmul>
 800a2e0:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a2e4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d17e      	bne.n	800a3ea <mbedtls_mpi_exp_mod+0x8b8>
    for( i = 0; i < nbits; i++ )
 800a2ec:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a2f6:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a2fa:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d3ab      	bcc.n	800a25a <mbedtls_mpi_exp_mod+0x728>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800a302:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 800a306:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a30a:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 800a30e:	f5a1 61cd 	sub.w	r1, r1, #1640	; 0x668
 800a312:	f507 60cd 	add.w	r0, r7, #1640	; 0x668
 800a316:	f2a0 605c 	subw	r0, r0, #1628	; 0x65c
 800a31a:	6809      	ldr	r1, [r1, #0]
 800a31c:	6800      	ldr	r0, [r0, #0]
 800a31e:	f7ff fbea 	bl	8009af6 <mpi_montred>
 800a322:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a326:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d15f      	bne.n	800a3ee <mbedtls_mpi_exp_mod+0x8bc>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 800a32e:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d05d      	beq.n	800a3f2 <mbedtls_mpi_exp_mod+0x8c0>
 800a336:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a33a:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d055      	beq.n	800a3f2 <mbedtls_mpi_exp_mod+0x8c0>
 800a346:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a34a:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d04a      	beq.n	800a3f2 <mbedtls_mpi_exp_mod+0x8c0>
    {
        X->s = -1;
 800a35c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a360:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f04f 32ff 	mov.w	r2, #4294967295
 800a36a:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 800a36c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a370:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 800a374:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a378:	f5a3 61cd 	sub.w	r1, r3, #1640	; 0x668
 800a37c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800a380:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	6809      	ldr	r1, [r1, #0]
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	f7fd f95e 	bl	800764a <mbedtls_mpi_add_mpi>
 800a38e:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 800a392:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a396:	2b00      	cmp	r3, #0
    }

cleanup:
 800a398:	e02b      	b.n	800a3f2 <mbedtls_mpi_exp_mod+0x8c0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800a39a:	bf00      	nop
 800a39c:	e02a      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800a39e:	bf00      	nop
 800a3a0:	e028      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800a3a2:	bf00      	nop
 800a3a4:	e026      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 800a3a6:	bf00      	nop
 800a3a8:	e024      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 800a3aa:	bf00      	nop
 800a3ac:	e022      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 800a3ae:	bf00      	nop
 800a3b0:	e020      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 800a3b2:	bf00      	nop
 800a3b4:	e01e      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 800a3b6:	bf00      	nop
 800a3b8:	e01c      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800a3ba:	bf00      	nop
 800a3bc:	e01a      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 800a3be:	bf00      	nop
 800a3c0:	e018      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800a3c2:	bf00      	nop
 800a3c4:	e016      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800a3c6:	bf00      	nop
 800a3c8:	e014      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800a3ca:	bf00      	nop
 800a3cc:	e012      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800a3ce:	bf00      	nop
 800a3d0:	e010      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800a3d2:	bf00      	nop
 800a3d4:	e00e      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800a3d6:	bf00      	nop
 800a3d8:	e00c      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800a3da:	bf00      	nop
 800a3dc:	e00a      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a3de:	bf00      	nop
 800a3e0:	e008      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800a3e2:	bf00      	nop
 800a3e4:	e006      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800a3e6:	bf00      	nop
 800a3e8:	e004      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800a3ea:	bf00      	nop
 800a3ec:	e002      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800a3ee:	bf00      	nop
 800a3f0:	e000      	b.n	800a3f4 <mbedtls_mpi_exp_mod+0x8c2>
cleanup:
 800a3f2:	bf00      	nop

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800a3f4:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a402:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a406:	e010      	b.n	800a42a <mbedtls_mpi_exp_mod+0x8f8>
        mbedtls_mpi_free( &W[i] );
 800a408:	f107 011c 	add.w	r1, r7, #28
 800a40c:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a410:	4613      	mov	r3, r2
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fc fae5 	bl	80069ea <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800a420:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800a424:	3301      	adds	r3, #1
 800a426:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800a42a:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 800a42e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800a432:	fa02 f303 	lsl.w	r3, r2, r3
 800a436:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d3e4      	bcc.n	800a408 <mbedtls_mpi_exp_mod+0x8d6>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 800a43e:	f107 031c 	add.w	r3, r7, #28
 800a442:	330c      	adds	r3, #12
 800a444:	4618      	mov	r0, r3
 800a446:	f7fc fad0 	bl	80069ea <mbedtls_mpi_free>
 800a44a:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fc facb 	bl	80069ea <mbedtls_mpi_free>
 800a454:	f107 0310 	add.w	r3, r7, #16
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fc fac6 	bl	80069ea <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 800a45e:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 800a462:	2b00      	cmp	r3, #0
 800a464:	d004      	beq.n	800a470 <mbedtls_mpi_exp_mod+0x93e>
 800a466:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d104      	bne.n	800a47a <mbedtls_mpi_exp_mod+0x948>
        mbedtls_mpi_free( &RR );
 800a470:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800a474:	4618      	mov	r0, r3
 800a476:	f7fc fab8 	bl	80069ea <mbedtls_mpi_free>

    return( ret );
 800a47a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
}
 800a47e:	4618      	mov	r0, r3
 800a480:	f207 676c 	addw	r7, r7, #1644	; 0x66c
 800a484:	46bd      	mov	sp, r7
 800a486:	bd90      	pop	{r4, r7, pc}

0800a488 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b090      	sub	sp, #64	; 0x40
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
    int ret;
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800a494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fc fa8f 	bl	80069bc <mbedtls_mpi_init>
 800a49e:	f107 031c 	add.w	r3, r7, #28
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fc fa8a 	bl	80069bc <mbedtls_mpi_init>
 800a4a8:	f107 0310 	add.w	r3, r7, #16
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fc fa85 	bl	80069bc <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800a4b2:	f107 031c 	add.w	r3, r7, #28
 800a4b6:	68b9      	ldr	r1, [r7, #8]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fc faff 	bl	8006abc <mbedtls_mpi_copy>
 800a4be:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f040 80af 	bne.w	800a626 <mbedtls_mpi_gcd+0x19e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800a4c8:	f107 0310 	add.w	r3, r7, #16
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fc faf4 	bl	8006abc <mbedtls_mpi_copy>
 800a4d4:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f040 80a6 	bne.w	800a62a <mbedtls_mpi_gcd+0x1a2>

    lz = mbedtls_mpi_lsb( &TA );
 800a4de:	f107 031c 	add.w	r3, r7, #28
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fc fb8a 	bl	8006bfc <mbedtls_mpi_lsb>
 800a4e8:	63b8      	str	r0, [r7, #56]	; 0x38
    lzt = mbedtls_mpi_lsb( &TB );
 800a4ea:	f107 0310 	add.w	r3, r7, #16
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fc fb84 	bl	8006bfc <mbedtls_mpi_lsb>
 800a4f4:	6378      	str	r0, [r7, #52]	; 0x34

    if( lzt < lz )
 800a4f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d201      	bcs.n	800a502 <mbedtls_mpi_gcd+0x7a>
        lz = lzt;
 800a4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a500:	63bb      	str	r3, [r7, #56]	; 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800a502:	f107 031c 	add.w	r3, r7, #28
 800a506:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fc fd4f 	bl	8006fac <mbedtls_mpi_shift_r>
 800a50e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a512:	2b00      	cmp	r3, #0
 800a514:	f040 808b 	bne.w	800a62e <mbedtls_mpi_gcd+0x1a6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800a518:	f107 0310 	add.w	r3, r7, #16
 800a51c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fc fd44 	bl	8006fac <mbedtls_mpi_shift_r>
 800a524:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f040 8082 	bne.w	800a632 <mbedtls_mpi_gcd+0x1aa>

    TA.s = TB.s = 1;
 800a52e:	2301      	movs	r3, #1
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	61fb      	str	r3, [r7, #28]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800a536:	e059      	b.n	800a5ec <mbedtls_mpi_gcd+0x164>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800a538:	f107 031c 	add.w	r3, r7, #28
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fc fb5d 	bl	8006bfc <mbedtls_mpi_lsb>
 800a542:	4602      	mov	r2, r0
 800a544:	f107 031c 	add.w	r3, r7, #28
 800a548:	4611      	mov	r1, r2
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fc fd2e 	bl	8006fac <mbedtls_mpi_shift_r>
 800a550:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a554:	2b00      	cmp	r3, #0
 800a556:	d16e      	bne.n	800a636 <mbedtls_mpi_gcd+0x1ae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800a558:	f107 0310 	add.w	r3, r7, #16
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fc fb4d 	bl	8006bfc <mbedtls_mpi_lsb>
 800a562:	4602      	mov	r2, r0
 800a564:	f107 0310 	add.w	r3, r7, #16
 800a568:	4611      	mov	r1, r2
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fc fd1e 	bl	8006fac <mbedtls_mpi_shift_r>
 800a570:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d160      	bne.n	800a63a <mbedtls_mpi_gcd+0x1b2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800a578:	f107 0210 	add.w	r2, r7, #16
 800a57c:	f107 031c 	add.w	r3, r7, #28
 800a580:	4611      	mov	r1, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f7fc fe2f 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	db17      	blt.n	800a5be <mbedtls_mpi_gcd+0x136>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800a58e:	f107 0210 	add.w	r2, r7, #16
 800a592:	f107 011c 	add.w	r1, r7, #28
 800a596:	f107 031c 	add.w	r3, r7, #28
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fc fff1 	bl	8007582 <mbedtls_mpi_sub_abs>
 800a5a0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d14a      	bne.n	800a63e <mbedtls_mpi_gcd+0x1b6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800a5a8:	f107 031c 	add.w	r3, r7, #28
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fc fcfc 	bl	8006fac <mbedtls_mpi_shift_r>
 800a5b4:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d017      	beq.n	800a5ec <mbedtls_mpi_gcd+0x164>
 800a5bc:	e046      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800a5be:	f107 021c 	add.w	r2, r7, #28
 800a5c2:	f107 0110 	add.w	r1, r7, #16
 800a5c6:	f107 0310 	add.w	r3, r7, #16
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fc ffd9 	bl	8007582 <mbedtls_mpi_sub_abs>
 800a5d0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d134      	bne.n	800a642 <mbedtls_mpi_gcd+0x1ba>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800a5d8:	f107 0310 	add.w	r3, r7, #16
 800a5dc:	2101      	movs	r1, #1
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fc fce4 	bl	8006fac <mbedtls_mpi_shift_r>
 800a5e4:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d12c      	bne.n	800a646 <mbedtls_mpi_gcd+0x1be>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800a5ec:	f107 031c 	add.w	r3, r7, #28
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fc fe92 	bl	800731c <mbedtls_mpi_cmp_int>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d19c      	bne.n	800a538 <mbedtls_mpi_gcd+0xb0>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800a5fe:	f107 0310 	add.w	r3, r7, #16
 800a602:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a604:	4618      	mov	r0, r3
 800a606:	f7fc fc2c 	bl	8006e62 <mbedtls_mpi_shift_l>
 800a60a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d11b      	bne.n	800a64a <mbedtls_mpi_gcd+0x1c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800a612:	f107 0310 	add.w	r3, r7, #16
 800a616:	4619      	mov	r1, r3
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7fc fa4f 	bl	8006abc <mbedtls_mpi_copy>
 800a61e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a622:	2b00      	cmp	r3, #0

cleanup:
 800a624:	e012      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800a626:	bf00      	nop
 800a628:	e010      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800a62a:	bf00      	nop
 800a62c:	e00e      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800a62e:	bf00      	nop
 800a630:	e00c      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800a632:	bf00      	nop
 800a634:	e00a      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800a636:	bf00      	nop
 800a638:	e008      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800a63a:	bf00      	nop
 800a63c:	e006      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800a63e:	bf00      	nop
 800a640:	e004      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800a642:	bf00      	nop
 800a644:	e002      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800a646:	bf00      	nop
 800a648:	e000      	b.n	800a64c <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800a64a:	bf00      	nop

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800a64c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a650:	4618      	mov	r0, r3
 800a652:	f7fc f9ca 	bl	80069ea <mbedtls_mpi_free>
 800a656:	f107 031c 	add.w	r3, r7, #28
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fc f9c5 	bl	80069ea <mbedtls_mpi_free>
 800a660:	f107 0310 	add.w	r3, r7, #16
 800a664:	4618      	mov	r0, r3
 800a666:	f7fc f9c0 	bl	80069ea <mbedtls_mpi_free>

    return( ret );
 800a66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3740      	adds	r7, #64	; 0x40
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800a674:	b590      	push	{r4, r7, lr}
 800a676:	b0c7      	sub	sp, #284	; 0x11c
 800a678:	af00      	add	r7, sp, #0
 800a67a:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800a67e:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800a682:	6020      	str	r0, [r4, #0]
 800a684:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800a688:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 800a68c:	6001      	str	r1, [r0, #0]
 800a68e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800a692:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800a696:	600a      	str	r2, [r1, #0]
 800a698:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800a69c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800a6a0:	6013      	str	r3, [r2, #0]
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 800a6a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a6a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b0:	d902      	bls.n	800a6b8 <mbedtls_mpi_fill_random+0x44>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a6b2:	f06f 0303 	mvn.w	r3, #3
 800a6b6:	e035      	b.n	800a724 <mbedtls_mpi_fill_random+0xb0>

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800a6b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a6bc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800a6c0:	f107 0114 	add.w	r1, r7, #20
 800a6c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a6c8:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 800a6cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a6d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6812      	ldr	r2, [r2, #0]
 800a6d8:	6800      	ldr	r0, [r0, #0]
 800a6da:	4798      	blx	r3
 800a6dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800a6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d113      	bne.n	800a710 <mbedtls_mpi_fill_random+0x9c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 800a6e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a6ec:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800a6f0:	f107 0114 	add.w	r1, r7, #20
 800a6f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a6f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a6fc:	6812      	ldr	r2, [r2, #0]
 800a6fe:	6818      	ldr	r0, [r3, #0]
 800a700:	f7fc fb12 	bl	8006d28 <mbedtls_mpi_read_binary>
 800a704:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800a708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a70c:	2b00      	cmp	r3, #0

cleanup:
 800a70e:	e000      	b.n	800a712 <mbedtls_mpi_fill_random+0x9e>
    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800a710:	bf00      	nop
    mbedtls_zeroize( buf, sizeof( buf ) );
 800a712:	f107 0314 	add.w	r3, r7, #20
 800a716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fc f935 	bl	800698a <mbedtls_zeroize>
    return( ret );
 800a720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 800a724:	4618      	mov	r0, r3
 800a726:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd90      	pop	{r4, r7, pc}

0800a72e <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b0a0      	sub	sp, #128	; 0x80
 800a732:	af00      	add	r7, sp, #0
 800a734:	60f8      	str	r0, [r7, #12]
 800a736:	60b9      	str	r1, [r7, #8]
 800a738:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800a73a:	2101      	movs	r1, #1
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7fc fded 	bl	800731c <mbedtls_mpi_cmp_int>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	dc02      	bgt.n	800a74e <mbedtls_mpi_inv_mod+0x20>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a748:	f06f 0303 	mvn.w	r3, #3
 800a74c:	e23e      	b.n	800abcc <mbedtls_mpi_inv_mod+0x49e>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 800a74e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a752:	4618      	mov	r0, r3
 800a754:	f7fc f932 	bl	80069bc <mbedtls_mpi_init>
 800a758:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fc f92d 	bl	80069bc <mbedtls_mpi_init>
 800a762:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a766:	4618      	mov	r0, r3
 800a768:	f7fc f928 	bl	80069bc <mbedtls_mpi_init>
 800a76c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a770:	4618      	mov	r0, r3
 800a772:	f7fc f923 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 800a776:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fc f91e 	bl	80069bc <mbedtls_mpi_init>
 800a780:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a784:	4618      	mov	r0, r3
 800a786:	f7fc f919 	bl	80069bc <mbedtls_mpi_init>
 800a78a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fc f914 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 800a794:	f107 031c 	add.w	r3, r7, #28
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fc f90f 	bl	80069bc <mbedtls_mpi_init>
 800a79e:	f107 0310 	add.w	r3, r7, #16
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fc f90a 	bl	80069bc <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800a7a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	68b9      	ldr	r1, [r7, #8]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7ff fe69 	bl	800a488 <mbedtls_mpi_gcd>
 800a7b6:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a7b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f040 81a5 	bne.w	800ab0a <mbedtls_mpi_inv_mod+0x3dc>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800a7c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fc fda8 	bl	800731c <mbedtls_mpi_cmp_int>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <mbedtls_mpi_inv_mod+0xac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800a7d2:	f06f 030d 	mvn.w	r3, #13
 800a7d6:	67fb      	str	r3, [r7, #124]	; 0x7c
        goto cleanup;
 800a7d8:	e1ca      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800a7da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	68b9      	ldr	r1, [r7, #8]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff f887 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 800a7e8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a7ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f040 818e 	bne.w	800ab0e <mbedtls_mpi_inv_mod+0x3e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800a7f2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800a7f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fc f95d 	bl	8006abc <mbedtls_mpi_copy>
 800a802:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a806:	2b00      	cmp	r3, #0
 800a808:	f040 8183 	bne.w	800ab12 <mbedtls_mpi_inv_mod+0x3e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800a80c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4618      	mov	r0, r3
 800a814:	f7fc f952 	bl	8006abc <mbedtls_mpi_copy>
 800a818:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a81a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f040 817a 	bne.w	800ab16 <mbedtls_mpi_inv_mod+0x3e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800a822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a826:	6879      	ldr	r1, [r7, #4]
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fc f947 	bl	8006abc <mbedtls_mpi_copy>
 800a82e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a830:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a832:	2b00      	cmp	r3, #0
 800a834:	f040 8171 	bne.w	800ab1a <mbedtls_mpi_inv_mod+0x3ec>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800a838:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a83c:	2101      	movs	r1, #1
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fc f98d 	bl	8006b5e <mbedtls_mpi_lset>
 800a844:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f040 8168 	bne.w	800ab1e <mbedtls_mpi_inv_mod+0x3f0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800a84e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a852:	2100      	movs	r1, #0
 800a854:	4618      	mov	r0, r3
 800a856:	f7fc f982 	bl	8006b5e <mbedtls_mpi_lset>
 800a85a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a85c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f040 815f 	bne.w	800ab22 <mbedtls_mpi_inv_mod+0x3f4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800a864:	f107 031c 	add.w	r3, r7, #28
 800a868:	2100      	movs	r1, #0
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fc f977 	bl	8006b5e <mbedtls_mpi_lset>
 800a870:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a872:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a874:	2b00      	cmp	r3, #0
 800a876:	f040 8156 	bne.w	800ab26 <mbedtls_mpi_inv_mod+0x3f8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800a87a:	f107 0310 	add.w	r3, r7, #16
 800a87e:	2101      	movs	r1, #1
 800a880:	4618      	mov	r0, r3
 800a882:	f7fc f96c 	bl	8006b5e <mbedtls_mpi_lset>
 800a886:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a888:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f040 814d 	bne.w	800ab2a <mbedtls_mpi_inv_mod+0x3fc>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 800a890:	e048      	b.n	800a924 <mbedtls_mpi_inv_mod+0x1f6>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800a892:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a896:	2101      	movs	r1, #1
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fc fb87 	bl	8006fac <mbedtls_mpi_shift_r>
 800a89e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a8a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f040 8143 	bne.w	800ab2e <mbedtls_mpi_inv_mod+0x400>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800a8a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <mbedtls_mpi_inv_mod+0x192>
 800a8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d01b      	beq.n	800a8f8 <mbedtls_mpi_inv_mod+0x1ca>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800a8c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a8c4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800a8c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fc febc 	bl	800764a <mbedtls_mpi_add_mpi>
 800a8d2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a8d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f040 812b 	bne.w	800ab32 <mbedtls_mpi_inv_mod+0x404>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800a8dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800a8e0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a8e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fc fef8 	bl	80076de <mbedtls_mpi_sub_mpi>
 800a8ee:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a8f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f040 811f 	bne.w	800ab36 <mbedtls_mpi_inv_mod+0x408>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800a8f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fc fb54 	bl	8006fac <mbedtls_mpi_shift_r>
 800a904:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f040 8116 	bne.w	800ab3a <mbedtls_mpi_inv_mod+0x40c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800a90e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a912:	2101      	movs	r1, #1
 800a914:	4618      	mov	r0, r3
 800a916:	f7fc fb49 	bl	8006fac <mbedtls_mpi_shift_r>
 800a91a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a91c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f040 810d 	bne.w	800ab3e <mbedtls_mpi_inv_mod+0x410>
        while( ( TU.p[0] & 1 ) == 0 )
 800a924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0301 	and.w	r3, r3, #1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0b0      	beq.n	800a892 <mbedtls_mpi_inv_mod+0x164>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 800a930:	e048      	b.n	800a9c4 <mbedtls_mpi_inv_mod+0x296>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800a932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a936:	2101      	movs	r1, #1
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fc fb37 	bl	8006fac <mbedtls_mpi_shift_r>
 800a93e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a940:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a942:	2b00      	cmp	r3, #0
 800a944:	f040 80fd 	bne.w	800ab42 <mbedtls_mpi_inv_mod+0x414>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	d105      	bne.n	800a960 <mbedtls_mpi_inv_mod+0x232>
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d01b      	beq.n	800a998 <mbedtls_mpi_inv_mod+0x26a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800a960:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a964:	f107 011c 	add.w	r1, r7, #28
 800a968:	f107 031c 	add.w	r3, r7, #28
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fc fe6c 	bl	800764a <mbedtls_mpi_add_mpi>
 800a972:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a976:	2b00      	cmp	r3, #0
 800a978:	f040 80e5 	bne.w	800ab46 <mbedtls_mpi_inv_mod+0x418>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800a97c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800a980:	f107 0110 	add.w	r1, r7, #16
 800a984:	f107 0310 	add.w	r3, r7, #16
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fc fea8 	bl	80076de <mbedtls_mpi_sub_mpi>
 800a98e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a990:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a992:	2b00      	cmp	r3, #0
 800a994:	f040 80d9 	bne.w	800ab4a <mbedtls_mpi_inv_mod+0x41c>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800a998:	f107 031c 	add.w	r3, r7, #28
 800a99c:	2101      	movs	r1, #1
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fc fb04 	bl	8006fac <mbedtls_mpi_shift_r>
 800a9a4:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a9a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f040 80d0 	bne.w	800ab4e <mbedtls_mpi_inv_mod+0x420>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800a9ae:	f107 0310 	add.w	r3, r7, #16
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fc faf9 	bl	8006fac <mbedtls_mpi_shift_r>
 800a9ba:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a9bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f040 80c7 	bne.w	800ab52 <mbedtls_mpi_inv_mod+0x424>
        while( ( TV.p[0] & 1 ) == 0 )
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0b0      	beq.n	800a932 <mbedtls_mpi_inv_mod+0x204>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800a9d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a9d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a9d8:	4611      	mov	r1, r2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fc fc03 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	db29      	blt.n	800aa3a <mbedtls_mpi_inv_mod+0x30c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800a9e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a9ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a9ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fc fe73 	bl	80076de <mbedtls_mpi_sub_mpi>
 800a9f8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800a9fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f040 80aa 	bne.w	800ab56 <mbedtls_mpi_inv_mod+0x428>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800aa02:	f107 021c 	add.w	r2, r7, #28
 800aa06:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800aa0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fc fe65 	bl	80076de <mbedtls_mpi_sub_mpi>
 800aa14:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f040 809e 	bne.w	800ab5a <mbedtls_mpi_inv_mod+0x42c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800aa1e:	f107 0210 	add.w	r2, r7, #16
 800aa22:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800aa26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fc fe57 	bl	80076de <mbedtls_mpi_sub_mpi>
 800aa30:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d028      	beq.n	800aa8a <mbedtls_mpi_inv_mod+0x35c>
 800aa38:	e09a      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800aa3a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aa3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aa42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fc fe49 	bl	80076de <mbedtls_mpi_sub_mpi>
 800aa4c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f040 8084 	bne.w	800ab5e <mbedtls_mpi_inv_mod+0x430>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800aa56:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800aa5a:	f107 011c 	add.w	r1, r7, #28
 800aa5e:	f107 031c 	add.w	r3, r7, #28
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fc fe3b 	bl	80076de <mbedtls_mpi_sub_mpi>
 800aa68:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d178      	bne.n	800ab62 <mbedtls_mpi_inv_mod+0x434>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800aa70:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800aa74:	f107 0110 	add.w	r1, r7, #16
 800aa78:	f107 0310 	add.w	r3, r7, #16
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fc fe2e 	bl	80076de <mbedtls_mpi_sub_mpi>
 800aa82:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d16d      	bne.n	800ab66 <mbedtls_mpi_inv_mod+0x438>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800aa8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fc fc43 	bl	800731c <mbedtls_mpi_cmp_int>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f47f af43 	bne.w	800a924 <mbedtls_mpi_inv_mod+0x1f6>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800aa9e:	e00b      	b.n	800aab8 <mbedtls_mpi_inv_mod+0x38a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800aaa0:	f107 011c 	add.w	r1, r7, #28
 800aaa4:	f107 031c 	add.w	r3, r7, #28
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fc fdcd 	bl	800764a <mbedtls_mpi_add_mpi>
 800aab0:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d158      	bne.n	800ab6a <mbedtls_mpi_inv_mod+0x43c>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800aab8:	f107 031c 	add.w	r3, r7, #28
 800aabc:	2100      	movs	r1, #0
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fc fc2c 	bl	800731c <mbedtls_mpi_cmp_int>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	dbea      	blt.n	800aaa0 <mbedtls_mpi_inv_mod+0x372>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800aaca:	e00b      	b.n	800aae4 <mbedtls_mpi_inv_mod+0x3b6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800aacc:	f107 011c 	add.w	r1, r7, #28
 800aad0:	f107 031c 	add.w	r3, r7, #28
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fc fe01 	bl	80076de <mbedtls_mpi_sub_mpi>
 800aadc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d144      	bne.n	800ab6e <mbedtls_mpi_inv_mod+0x440>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800aae4:	f107 031c 	add.w	r3, r7, #28
 800aae8:	6879      	ldr	r1, [r7, #4]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fc fb7b 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	daea      	bge.n	800aacc <mbedtls_mpi_inv_mod+0x39e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800aaf6:	f107 031c 	add.w	r3, r7, #28
 800aafa:	4619      	mov	r1, r3
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f7fb ffdd 	bl	8006abc <mbedtls_mpi_copy>
 800ab02:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ab04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab06:	2b00      	cmp	r3, #0

cleanup:
 800ab08:	e032      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800ab0a:	bf00      	nop
 800ab0c:	e030      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800ab0e:	bf00      	nop
 800ab10:	e02e      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800ab12:	bf00      	nop
 800ab14:	e02c      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800ab16:	bf00      	nop
 800ab18:	e02a      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800ab1a:	bf00      	nop
 800ab1c:	e028      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800ab1e:	bf00      	nop
 800ab20:	e026      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800ab22:	bf00      	nop
 800ab24:	e024      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800ab26:	bf00      	nop
 800ab28:	e022      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800ab2a:	bf00      	nop
 800ab2c:	e020      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800ab2e:	bf00      	nop
 800ab30:	e01e      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800ab32:	bf00      	nop
 800ab34:	e01c      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800ab36:	bf00      	nop
 800ab38:	e01a      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800ab3a:	bf00      	nop
 800ab3c:	e018      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800ab3e:	bf00      	nop
 800ab40:	e016      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800ab42:	bf00      	nop
 800ab44:	e014      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800ab46:	bf00      	nop
 800ab48:	e012      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800ab4a:	bf00      	nop
 800ab4c:	e010      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800ab4e:	bf00      	nop
 800ab50:	e00e      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800ab52:	bf00      	nop
 800ab54:	e00c      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800ab56:	bf00      	nop
 800ab58:	e00a      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800ab5a:	bf00      	nop
 800ab5c:	e008      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800ab5e:	bf00      	nop
 800ab60:	e006      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800ab62:	bf00      	nop
 800ab64:	e004      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800ab66:	bf00      	nop
 800ab68:	e002      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800ab6a:	bf00      	nop
 800ab6c:	e000      	b.n	800ab70 <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800ab6e:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800ab70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fb ff38 	bl	80069ea <mbedtls_mpi_free>
 800ab7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fb ff33 	bl	80069ea <mbedtls_mpi_free>
 800ab84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fb ff2e 	bl	80069ea <mbedtls_mpi_free>
 800ab8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fb ff29 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800ab98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fb ff24 	bl	80069ea <mbedtls_mpi_free>
 800aba2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fb ff1f 	bl	80069ea <mbedtls_mpi_free>
 800abac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fb ff1a 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800abb6:	f107 031c 	add.w	r3, r7, #28
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fb ff15 	bl	80069ea <mbedtls_mpi_free>
 800abc0:	f107 0310 	add.w	r3, r7, #16
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fb ff10 	bl	80069ea <mbedtls_mpi_free>

    return( ret );
 800abca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3780      	adds	r7, #128	; 0x80
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <mbedtls_cipher_get_block_size>:
 *
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <mbedtls_cipher_get_block_size+0x16>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <mbedtls_cipher_get_block_size+0x1a>
        return 0;
 800abea:	2300      	movs	r3, #0
 800abec:	e002      	b.n	800abf4 <mbedtls_cipher_get_block_size+0x20>

    return ctx->cipher_info->block_size;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	695b      	ldr	r3, [r3, #20]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <mbedtls_cipher_get_iv_size>:
 * \return      <ul><li>If no IV has been set: the recommended IV size.
 *              0 for ciphers not using IV or nonce.</li>
 *              <li>If IV has already been set: the actual size.</li></ul>
 */
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <mbedtls_cipher_get_iv_size+0x16>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <mbedtls_cipher_get_iv_size+0x1a>
        return 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	e009      	b.n	800ac2e <mbedtls_cipher_get_iv_size+0x2e>

    if( ctx->iv_size != 0 )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <mbedtls_cipher_get_iv_size+0x28>
        return (int) ctx->iv_size;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac26:	e002      	b.n	800ac2e <mbedtls_cipher_get_iv_size+0x2e>

    return (int) ctx->cipher_info->iv_size;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <mbedtls_zeroize>:
#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800ac3a:	b480      	push	{r7}
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	e004      	b.n	800ac54 <mbedtls_zeroize+0x1a>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	60fa      	str	r2, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	701a      	strb	r2, [r3, #0]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	1e5a      	subs	r2, r3, #1
 800ac58:	603a      	str	r2, [r7, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1f5      	bne.n	800ac4a <mbedtls_zeroize+0x10>
}
 800ac5e:	bf00      	nop
 800ac60:	bf00      	nop
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4603      	mov	r3, r0
 800ac74:	71fb      	strb	r3, [r7, #7]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800ac76:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <mbedtls_cipher_info_from_type+0x3c>)
 800ac78:	60fb      	str	r3, [r7, #12]
 800ac7a:	e00a      	b.n	800ac92 <mbedtls_cipher_info_from_type+0x26>
        if( def->type == cipher_type )
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	79fa      	ldrb	r2, [r7, #7]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d102      	bne.n	800ac8c <mbedtls_cipher_info_from_type+0x20>
            return( def->info );
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	e007      	b.n	800ac9c <mbedtls_cipher_info_from_type+0x30>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3308      	adds	r3, #8
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1f0      	bne.n	800ac7c <mbedtls_cipher_info_from_type+0x10>

    return( NULL );
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr
 800aca8:	08024284 	.word	0x08024284

0800acac <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	6039      	str	r1, [r7, #0]
 800acb6:	71fb      	strb	r3, [r7, #7]
 800acb8:	4613      	mov	r3, r2
 800acba:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800acbc:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <mbedtls_cipher_info_from_values+0x60>)
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	e018      	b.n	800acf4 <mbedtls_cipher_info_from_values+0x48>
        if( def->info->base->cipher == cipher_id &&
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	79fa      	ldrb	r2, [r7, #7]
 800accc:	429a      	cmp	r2, r3
 800acce:	d10e      	bne.n	800acee <mbedtls_cipher_info_from_values+0x42>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
        if( def->info->base->cipher == cipher_id &&
 800acd8:	429a      	cmp	r2, r3
 800acda:	d108      	bne.n	800acee <mbedtls_cipher_info_from_values+0x42>
            def->info->mode == mode )
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	785b      	ldrb	r3, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800ace2:	79ba      	ldrb	r2, [r7, #6]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d102      	bne.n	800acee <mbedtls_cipher_info_from_values+0x42>
            return( def->info );
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	e007      	b.n	800acfe <mbedtls_cipher_info_from_values+0x52>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	3308      	adds	r3, #8
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1e2      	bne.n	800acc2 <mbedtls_cipher_info_from_values+0x16>

    return( NULL );
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	08024284 	.word	0x08024284

0800ad10 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800ad18:	2240      	movs	r2, #64	; 0x40
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f012 fda3 	bl	801d868 <memset>
}
 800ad22:	bf00      	nop
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <mbedtls_cipher_free>:

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d010      	beq.n	800ad5a <mbedtls_cipher_free+0x30>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d007      	beq.n	800ad50 <mbedtls_cipher_free+0x26>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	4798      	blx	r3

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800ad50:	2140      	movs	r1, #64	; 0x40
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff ff71 	bl	800ac3a <mbedtls_zeroize>
 800ad58:	e000      	b.n	800ad5c <mbedtls_cipher_free+0x32>
        return;
 800ad5a:	bf00      	nop
}
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
    if( NULL == cipher_info || NULL == ctx )
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <mbedtls_cipher_setup+0x16>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <mbedtls_cipher_setup+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ad7a:	4b10      	ldr	r3, [pc, #64]	; (800adbc <mbedtls_cipher_setup+0x58>)
 800ad7c:	e019      	b.n	800adb2 <mbedtls_cipher_setup+0x4e>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800ad7e:	2240      	movs	r2, #64	; 0x40
 800ad80:	2100      	movs	r1, #0
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f012 fd70 	bl	801d868 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	4798      	blx	r3
 800ad90:	4602      	mov	r2, r0
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	63da      	str	r2, [r3, #60]	; 0x3c
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <mbedtls_cipher_setup+0x3e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 800ad9e:	4b08      	ldr	r3, [pc, #32]	; (800adc0 <mbedtls_cipher_setup+0x5c>)
 800ada0:	e007      	b.n	800adb2 <mbedtls_cipher_setup+0x4e>

    ctx->cipher_info = cipher_info;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	601a      	str	r2, [r3, #0]
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 800ada8:	2104      	movs	r1, #4
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 face 	bl	800b34c <mbedtls_cipher_set_padding_mode>
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	ffff9f00 	.word	0xffff9f00
 800adc0:	ffff9e80 	.word	0xffff9e80

0800adc4 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	70fb      	strb	r3, [r7, #3]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <mbedtls_cipher_setkey+0x1c>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <mbedtls_cipher_setkey+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ade0:	4b23      	ldr	r3, [pc, #140]	; (800ae70 <mbedtls_cipher_setkey+0xac>)
 800ade2:	e040      	b.n	800ae66 <mbedtls_cipher_setkey+0xa2>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d108      	bne.n	800ae04 <mbedtls_cipher_setkey+0x40>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	461a      	mov	r2, r3
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d001      	beq.n	800ae04 <mbedtls_cipher_setkey+0x40>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ae00:	4b1b      	ldr	r3, [pc, #108]	; (800ae70 <mbedtls_cipher_setkey+0xac>)
 800ae02:	e030      	b.n	800ae66 <mbedtls_cipher_setkey+0xa2>
    }

    ctx->key_bitlen = key_bitlen;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	78fa      	ldrb	r2, [r7, #3]
 800ae0e:	721a      	strb	r2, [r3, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 800ae10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d009      	beq.n	800ae2c <mbedtls_cipher_setkey+0x68>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	d004      	beq.n	800ae2c <mbedtls_cipher_setkey+0x68>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800ae28:	2b05      	cmp	r3, #5
 800ae2a:	d10b      	bne.n	800ae44 <mbedtls_cipher_setkey+0x80>
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                ctx->key_bitlen );
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	6852      	ldr	r2, [r2, #4]
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	4798      	blx	r3
 800ae40:	4603      	mov	r3, r0
 800ae42:	e010      	b.n	800ae66 <mbedtls_cipher_setkey+0xa2>
    }

    if( MBEDTLS_DECRYPT == operation )
 800ae44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10b      	bne.n	800ae64 <mbedtls_cipher_setkey+0xa0>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                ctx->key_bitlen );
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	6852      	ldr	r2, [r2, #4]
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800ae5c:	68b9      	ldr	r1, [r7, #8]
 800ae5e:	4798      	blx	r3
 800ae60:	4603      	mov	r3, r0
 800ae62:	e000      	b.n	800ae66 <mbedtls_cipher_setkey+0xa2>

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ae64:	4b02      	ldr	r3, [pc, #8]	; (800ae70 <mbedtls_cipher_setkey+0xac>)
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	ffff9f00 	.word	0xffff9f00

0800ae74 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d006      	beq.n	800ae94 <mbedtls_cipher_set_iv+0x20>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d002      	beq.n	800ae94 <mbedtls_cipher_set_iv+0x20>
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <mbedtls_cipher_set_iv+0x24>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ae94:	4b14      	ldr	r3, [pc, #80]	; (800aee8 <mbedtls_cipher_set_iv+0x74>)
 800ae96:	e023      	b.n	800aee0 <mbedtls_cipher_set_iv+0x6c>

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b10      	cmp	r3, #16
 800ae9c:	d901      	bls.n	800aea2 <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800ae9e:	4b13      	ldr	r3, [pc, #76]	; (800aeec <mbedtls_cipher_set_iv+0x78>)
 800aea0:	e01e      	b.n	800aee0 <mbedtls_cipher_set_iv+0x6c>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <mbedtls_cipher_set_iv+0x42>
        actual_iv_size = iv_len;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	e009      	b.n	800aeca <mbedtls_cipher_set_iv+0x56>
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	617b      	str	r3, [r7, #20]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d901      	bls.n	800aeca <mbedtls_cipher_set_iv+0x56>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <mbedtls_cipher_set_iv+0x74>)
 800aec8:	e00a      	b.n	800aee0 <mbedtls_cipher_set_iv+0x6c>
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3328      	adds	r3, #40	; 0x28
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	68b9      	ldr	r1, [r7, #8]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f012 fca0 	bl	801d818 <memcpy>
    ctx->iv_size = actual_iv_size;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	639a      	str	r2, [r3, #56]	; 0x38

    return( 0 );
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	ffff9f00 	.word	0xffff9f00
 800aeec:	ffff9f80 	.word	0xffff9f80

0800aef0 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d003      	beq.n	800af06 <mbedtls_cipher_reset+0x16>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <mbedtls_cipher_reset+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800af06:	4b06      	ldr	r3, [pc, #24]	; (800af20 <mbedtls_cipher_reset+0x30>)
 800af08:	e003      	b.n	800af12 <mbedtls_cipher_reset+0x22>

    ctx->unprocessed_len = 0;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	625a      	str	r2, [r3, #36]	; 0x24

    return( 0 );
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	ffff9f00 	.word	0xffff9f00

0800af24 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 800af24:	b5b0      	push	{r4, r5, r7, lr}
 800af26:	b08a      	sub	sp, #40	; 0x28
 800af28:	af02      	add	r7, sp, #8
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	603b      	str	r3, [r7, #0]
    int ret;
    size_t block_size = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	61bb      	str	r3, [r7, #24]

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d006      	beq.n	800af4a <mbedtls_cipher_update+0x26>
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <mbedtls_cipher_update+0x26>
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <mbedtls_cipher_update+0x2a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800af4a:	4b90      	ldr	r3, [pc, #576]	; (800b18c <mbedtls_cipher_update+0x268>)
 800af4c:	e125      	b.n	800b19a <mbedtls_cipher_update+0x276>
    }

    *olen = 0;
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	2200      	movs	r2, #0
 800af52:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f7ff fe3d 	bl	800abd4 <mbedtls_cipher_get_block_size>
 800af5a:	61b8      	str	r0, [r7, #24]

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	785b      	ldrb	r3, [r3, #1]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d11c      	bne.n	800afa0 <mbedtls_cipher_update+0x7c>
    {
        if( ilen != block_size )
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d001      	beq.n	800af72 <mbedtls_cipher_update+0x4e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800af6e:	4b88      	ldr	r3, [pc, #544]	; (800b190 <mbedtls_cipher_update+0x26c>)
 800af70:	e113      	b.n	800b19a <mbedtls_cipher_update+0x276>

        *olen = ilen;
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	601a      	str	r2, [r3, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	685c      	ldr	r4, [r3, #4]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	47a0      	blx	r4
 800af90:	6178      	str	r0, [r7, #20]
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <mbedtls_cipher_update+0x78>
                    ctx->operation, input, output ) ) )
        {
            return( ret );
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	e0fe      	b.n	800b19a <mbedtls_cipher_update+0x276>
        }

        return( 0 );
 800af9c:	2300      	movs	r3, #0
 800af9e:	e0fc      	b.n	800b19a <mbedtls_cipher_update+0x276>
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	2b06      	cmp	r3, #6
 800afa8:	d10b      	bne.n	800afc2 <mbedtls_cipher_update+0x9e>
    {
        *olen = ilen;
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	601a      	str	r2, [r3, #0]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	6879      	ldr	r1, [r7, #4]
 800afba:	f002 fce8 	bl	800d98e <mbedtls_gcm_update>
 800afbe:	4603      	mov	r3, r0
 800afc0:	e0eb      	b.n	800b19a <mbedtls_cipher_update+0x276>
                           output );
    }
#endif

    if ( 0 == block_size )
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <mbedtls_cipher_update+0xa8>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 800afc8:	4b72      	ldr	r3, [pc, #456]	; (800b194 <mbedtls_cipher_update+0x270>)
 800afca:	e0e6      	b.n	800b19a <mbedtls_cipher_update+0x276>
    }

    if( input == output &&
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d10f      	bne.n	800aff4 <mbedtls_cipher_update+0xd0>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if( input == output &&
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d109      	bne.n	800aff0 <mbedtls_cipher_update+0xcc>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	69ba      	ldr	r2, [r7, #24]
 800afe0:	fbb3 f2f2 	udiv	r2, r3, r2
 800afe4:	69b9      	ldr	r1, [r7, #24]
 800afe6:	fb01 f202 	mul.w	r2, r1, r2
 800afea:	1a9b      	subs	r3, r3, r2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <mbedtls_cipher_update+0xd0>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800aff0:	4b66      	ldr	r3, [pc, #408]	; (800b18c <mbedtls_cipher_update+0x268>)
 800aff2:	e0d2      	b.n	800b19a <mbedtls_cipher_update+0x276>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	785b      	ldrb	r3, [r3, #1]
 800affa:	2b02      	cmp	r3, #2
 800affc:	f040 80cc 	bne.w	800b198 <mbedtls_cipher_update+0x274>
    {
        size_t copy_len = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <mbedtls_cipher_update+0xf8>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	1ad3      	subs	r3, r2, r3
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d90b      	bls.n	800b034 <mbedtls_cipher_update+0x110>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen <= block_size - ctx->unprocessed_len ) ||
 800b022:	2b01      	cmp	r3, #1
 800b024:	d119      	bne.n	800b05a <mbedtls_cipher_update+0x136>
                ilen < block_size - ctx->unprocessed_len ) )
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02a:	69ba      	ldr	r2, [r7, #24]
 800b02c:	1ad3      	subs	r3, r2, r3
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	429a      	cmp	r2, r3
 800b032:	d212      	bcs.n	800b05a <mbedtls_cipher_update+0x136>
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b038:	3310      	adds	r3, #16
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	4413      	add	r3, r2
 800b03e:	3304      	adds	r3, #4
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	68b9      	ldr	r1, [r7, #8]
 800b044:	4618      	mov	r0, r3
 800b046:	f012 fbe7 	bl	801d818 <memcpy>
                    ilen );

            ctx->unprocessed_len += ilen;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	441a      	add	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	625a      	str	r2, [r3, #36]	; 0x24
            return( 0 );
 800b056:	2300      	movs	r3, #0
 800b058:	e09f      	b.n	800b19a <mbedtls_cipher_update+0x276>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d03e      	beq.n	800b0e0 <mbedtls_cipher_update+0x1bc>
        {
            copy_len = block_size - ctx->unprocessed_len;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	69ba      	ldr	r2, [r7, #24]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	61fb      	str	r3, [r7, #28]

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	3310      	adds	r3, #16
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	4413      	add	r3, r2
 800b076:	3304      	adds	r3, #4
 800b078:	69fa      	ldr	r2, [r7, #28]
 800b07a:	68b9      	ldr	r1, [r7, #8]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f012 fbcb 	bl	801d818 <memcpy>
                    copy_len );

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	689c      	ldr	r4, [r3, #8]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, block_size, ctx->iv,
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f103 0528 	add.w	r5, r3, #40	; 0x28
                    ctx->unprocessed_data, output ) ) )
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3314      	adds	r3, #20
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	9201      	str	r2, [sp, #4]
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	462b      	mov	r3, r5
 800b0a6:	69ba      	ldr	r2, [r7, #24]
 800b0a8:	47a0      	blx	r4
 800b0aa:	6178      	str	r0, [r7, #20]
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <mbedtls_cipher_update+0x192>
            {
                return( ret );
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	e071      	b.n	800b19a <mbedtls_cipher_update+0x276>
            }

            *olen += block_size;
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	441a      	add	r2, r3
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	601a      	str	r2, [r3, #0]
            output += block_size;
 800b0c2:	683a      	ldr	r2, [r7, #0]
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	625a      	str	r2, [r3, #36]	; 0x24

            input += copy_len;
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d02d      	beq.n	800b142 <mbedtls_cipher_update+0x21e>
        {
            if( 0 == block_size )
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <mbedtls_cipher_update+0x1cc>
            {
                return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 800b0ec:	4b29      	ldr	r3, [pc, #164]	; (800b194 <mbedtls_cipher_update+0x270>)
 800b0ee:	e054      	b.n	800b19a <mbedtls_cipher_update+0x276>
            }

            copy_len = ilen % block_size;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0f8:	69b9      	ldr	r1, [r7, #24]
 800b0fa:	fb01 f202 	mul.w	r2, r1, r2
 800b0fe:	1a9b      	subs	r3, r3, r2
 800b100:	61fb      	str	r3, [r7, #28]
            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d106      	bne.n	800b116 <mbedtls_cipher_update+0x1f2>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <mbedtls_cipher_update+0x1f2>
                copy_len = block_size;
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	61fb      	str	r3, [r7, #28]

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f103 0014 	add.w	r0, r3, #20
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	4413      	add	r3, r2
 800b126:	69fa      	ldr	r2, [r7, #28]
 800b128:	4619      	mov	r1, r3
 800b12a:	f012 fb75 	bl	801d818 <memcpy>
                    copy_len );

            ctx->unprocessed_len += copy_len;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	441a      	add	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	625a      	str	r2, [r3, #36]	; 0x24
            ilen -= copy_len;
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d01e      	beq.n	800b186 <mbedtls_cipher_update+0x262>
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	689c      	ldr	r4, [r3, #8]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f103 0228 	add.w	r2, r3, #40	; 0x28
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	9301      	str	r3, [sp, #4]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	4613      	mov	r3, r2
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	47a0      	blx	r4
 800b16e:	6178      	str	r0, [r7, #20]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <mbedtls_cipher_update+0x256>
            {
                return( ret );
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	e00f      	b.n	800b19a <mbedtls_cipher_update+0x276>
            }

            *olen += ilen;
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	441a      	add	r2, r3
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	601a      	str	r2, [r3, #0]
        }

        return( 0 );
 800b186:	2300      	movs	r3, #0
 800b188:	e007      	b.n	800b19a <mbedtls_cipher_update+0x276>
 800b18a:	bf00      	nop
 800b18c:	ffff9f00 	.word	0xffff9f00
 800b190:	ffff9d80 	.word	0xffff9d80
 800b194:	ffff9c80 	.word	0xffff9c80

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b198:	4b02      	ldr	r3, [pc, #8]	; (800b1a4 <mbedtls_cipher_update+0x280>)
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3720      	adds	r7, #32
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	ffff9f80 	.word	0xffff9f80

0800b1a8 <get_no_padding>:
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
    if( NULL == input || NULL == data_len )
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <get_no_padding+0x18>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <get_no_padding+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b1c0:	4b05      	ldr	r3, [pc, #20]	; (800b1d8 <get_no_padding+0x30>)
 800b1c2:	e003      	b.n	800b1cc <get_no_padding+0x24>

    *data_len = input_len;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	601a      	str	r2, [r3, #0]

    return( 0 );
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	ffff9f00 	.word	0xffff9f00

0800b1dc <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 800b1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1de:	b089      	sub	sp, #36	; 0x24
 800b1e0:	af02      	add	r7, sp, #8
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d006      	beq.n	800b1fc <mbedtls_cipher_finish+0x20>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <mbedtls_cipher_finish+0x20>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <mbedtls_cipher_finish+0x24>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b1fc:	4b50      	ldr	r3, [pc, #320]	; (800b340 <mbedtls_cipher_finish+0x164>)
 800b1fe:	e09a      	b.n	800b336 <mbedtls_cipher_finish+0x15a>

    *olen = 0;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	601a      	str	r2, [r3, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	785b      	ldrb	r3, [r3, #1]
 800b20c:	2b03      	cmp	r3, #3
 800b20e:	d00e      	beq.n	800b22e <mbedtls_cipher_finish+0x52>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b216:	2b05      	cmp	r3, #5
 800b218:	d009      	beq.n	800b22e <mbedtls_cipher_finish+0x52>
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
 800b220:	2b06      	cmp	r3, #6
 800b222:	d004      	beq.n	800b22e <mbedtls_cipher_finish+0x52>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 800b22a:	2b07      	cmp	r3, #7
 800b22c:	d101      	bne.n	800b232 <mbedtls_cipher_finish+0x56>
    {
        return( 0 );
 800b22e:	2300      	movs	r3, #0
 800b230:	e081      	b.n	800b336 <mbedtls_cipher_finish+0x15a>
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	785b      	ldrb	r3, [r3, #1]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d107      	bne.n	800b24c <mbedtls_cipher_finish+0x70>
    {
        if( ctx->unprocessed_len != 0 )
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <mbedtls_cipher_finish+0x6c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b244:	4b3f      	ldr	r3, [pc, #252]	; (800b344 <mbedtls_cipher_finish+0x168>)
 800b246:	e076      	b.n	800b336 <mbedtls_cipher_finish+0x15a>

        return( 0 );
 800b248:	2300      	movs	r3, #0
 800b24a:	e074      	b.n	800b336 <mbedtls_cipher_finish+0x15a>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	785b      	ldrb	r3, [r3, #1]
 800b252:	2b02      	cmp	r3, #2
 800b254:	d16e      	bne.n	800b334 <mbedtls_cipher_finish+0x158>
    {
        int ret = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	617b      	str	r3, [r7, #20]

        if( MBEDTLS_ENCRYPT == ctx->operation )
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d11b      	bne.n	800b29c <mbedtls_cipher_finish+0xc0>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d107      	bne.n	800b27c <mbedtls_cipher_finish+0xa0>
            {
                if( 0 != ctx->unprocessed_len )
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <mbedtls_cipher_finish+0x9c>
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b274:	4b33      	ldr	r3, [pc, #204]	; (800b344 <mbedtls_cipher_finish+0x168>)
 800b276:	e05e      	b.n	800b336 <mbedtls_cipher_finish+0x15a>

                return( 0 );
 800b278:	2300      	movs	r3, #0
 800b27a:	e05c      	b.n	800b336 <mbedtls_cipher_finish+0x15a>
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	68dc      	ldr	r4, [r3, #12]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f103 0514 	add.w	r5, r3, #20
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f7ff fcba 	bl	800ac00 <mbedtls_cipher_get_iv_size>
 800b28c:	4603      	mov	r3, r0
 800b28e:	4619      	mov	r1, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b294:	461a      	mov	r2, r3
 800b296:	4628      	mov	r0, r5
 800b298:	47a0      	blx	r4
 800b29a:	e013      	b.n	800b2c4 <mbedtls_cipher_finish+0xe8>
                    ctx->unprocessed_len );
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f7ff fc99 	bl	800abd4 <mbedtls_cipher_get_block_size>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d00b      	beq.n	800b2c4 <mbedtls_cipher_finish+0xe8>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d105      	bne.n	800b2c0 <mbedtls_cipher_finish+0xe4>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <mbedtls_cipher_finish+0xe4>
                return( 0 );
 800b2bc:	2300      	movs	r3, #0
 800b2be:	e03a      	b.n	800b336 <mbedtls_cipher_finish+0x15a>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b2c0:	4b20      	ldr	r3, [pc, #128]	; (800b344 <mbedtls_cipher_finish+0x168>)
 800b2c2:	e038      	b.n	800b336 <mbedtls_cipher_finish+0x15a>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	689c      	ldr	r4, [r3, #8]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f993 6008 	ldrsb.w	r6, [r3, #8]
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f7ff fc7c 	bl	800abd4 <mbedtls_cipher_get_block_size>
                ctx->operation, mbedtls_cipher_get_block_size( ctx ), ctx->iv,
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f103 0128 	add.w	r1, r3, #40	; 0x28
                ctx->unprocessed_data, output ) ) )
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3314      	adds	r3, #20
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	9201      	str	r2, [sp, #4]
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	47a0      	blx	r4
 800b2f6:	6178      	str	r0, [r7, #20]
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <mbedtls_cipher_finish+0x126>
        {
            return( ret );
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	e019      	b.n	800b336 <mbedtls_cipher_finish+0x15a>
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10b      	bne.n	800b324 <mbedtls_cipher_finish+0x148>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	691c      	ldr	r4, [r3, #16]
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f7ff fc5f 	bl	800abd4 <mbedtls_cipher_get_block_size>
 800b316:	4603      	mov	r3, r0
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	4619      	mov	r1, r3
 800b31c:	68b8      	ldr	r0, [r7, #8]
 800b31e:	47a0      	blx	r4
 800b320:	4603      	mov	r3, r0
 800b322:	e008      	b.n	800b336 <mbedtls_cipher_finish+0x15a>
                                     olen );

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f7ff fc55 	bl	800abd4 <mbedtls_cipher_get_block_size>
 800b32a:	4602      	mov	r2, r0
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	601a      	str	r2, [r3, #0]
        return( 0 );
 800b330:	2300      	movs	r3, #0
 800b332:	e000      	b.n	800b336 <mbedtls_cipher_finish+0x15a>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b334:	4b04      	ldr	r3, [pc, #16]	; (800b348 <mbedtls_cipher_finish+0x16c>)
}
 800b336:	4618      	mov	r0, r3
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b33e:	bf00      	nop
 800b340:	ffff9f00 	.word	0xffff9f00
 800b344:	ffff9d80 	.word	0xffff9d80
 800b348:	ffff9f80 	.word	0xffff9f80

0800b34c <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	460b      	mov	r3, r1
 800b356:	70fb      	strb	r3, [r7, #3]
    if( NULL == ctx ||
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d004      	beq.n	800b368 <mbedtls_cipher_set_padding_mode+0x1c>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	785b      	ldrb	r3, [r3, #1]
    if( NULL == ctx ||
 800b364:	2b02      	cmp	r3, #2
 800b366:	d001      	beq.n	800b36c <mbedtls_cipher_set_padding_mode+0x20>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b368:	4b0a      	ldr	r3, [pc, #40]	; (800b394 <mbedtls_cipher_set_padding_mode+0x48>)
 800b36a:	e00c      	b.n	800b386 <mbedtls_cipher_set_padding_mode+0x3a>
    }

    switch( mode )
 800b36c:	78fb      	ldrb	r3, [r7, #3]
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d108      	bne.n	800b384 <mbedtls_cipher_set_padding_mode+0x38>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_no_padding;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a07      	ldr	r2, [pc, #28]	; (800b398 <mbedtls_cipher_set_padding_mode+0x4c>)
 800b37c:	611a      	str	r2, [r3, #16]
        break;
 800b37e:	bf00      	nop

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 800b380:	2300      	movs	r3, #0
 800b382:	e000      	b.n	800b386 <mbedtls_cipher_set_padding_mode+0x3a>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b384:	4b05      	ldr	r3, [pc, #20]	; (800b39c <mbedtls_cipher_set_padding_mode+0x50>)
}
 800b386:	4618      	mov	r0, r3
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	ffff9f00 	.word	0xffff9f00
 800b398:	0800b1a9 	.word	0x0800b1a9
 800b39c:	ffff9f80 	.word	0xffff9f80

0800b3a0 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b088      	sub	sp, #32
 800b3a4:	af02      	add	r7, sp, #8
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	603b      	str	r3, [r7, #0]
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f7ff fd5e 	bl	800ae74 <mbedtls_cipher_set_iv>
 800b3b8:	6178      	str	r0, [r7, #20]
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <mbedtls_cipher_crypt+0x24>
        return( ret );
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	e02d      	b.n	800b420 <mbedtls_cipher_crypt+0x80>

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7ff fd93 	bl	800aef0 <mbedtls_cipher_reset>
 800b3ca:	6178      	str	r0, [r7, #20]
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <mbedtls_cipher_crypt+0x36>
        return( ret );
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	e024      	b.n	800b420 <mbedtls_cipher_crypt+0x80>

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 800b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	6a3a      	ldr	r2, [r7, #32]
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff fd9f 	bl	800af24 <mbedtls_cipher_update>
 800b3e6:	6178      	str	r0, [r7, #20]
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <mbedtls_cipher_crypt+0x52>
        return( ret );
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	e016      	b.n	800b420 <mbedtls_cipher_crypt+0x80>

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 800b3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f107 0210 	add.w	r2, r7, #16
 800b3fe:	4619      	mov	r1, r3
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f7ff feeb 	bl	800b1dc <mbedtls_cipher_finish>
 800b406:	6178      	str	r0, [r7, #20]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <mbedtls_cipher_crypt+0x72>
        return( ret );
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	e006      	b.n	800b420 <mbedtls_cipher_crypt+0x80>

    *olen += finish_olen;
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	441a      	add	r2, r3
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	601a      	str	r2, [r3, #0]

    return( 0 );
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08c      	sub	sp, #48	; 0x30
 800b42c:	af08      	add	r7, sp, #32
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	785b      	ldrb	r3, [r3, #1]
 800b43c:	2b06      	cmp	r3, #6
 800b43e:	d119      	bne.n	800b474 <mbedtls_cipher_auth_encrypt+0x4c>
    {
        *olen = ilen;
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	6a3a      	ldr	r2, [r7, #32]
 800b444:	601a      	str	r2, [r3, #0]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44c:	9306      	str	r3, [sp, #24]
 800b44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b450:	9305      	str	r3, [sp, #20]
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	9304      	str	r3, [sp, #16]
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	9303      	str	r3, [sp, #12]
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	9302      	str	r3, [sp, #8]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	9301      	str	r3, [sp, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	6a3a      	ldr	r2, [r7, #32]
 800b46a:	2101      	movs	r1, #1
 800b46c:	f002 fcac 	bl	800ddc8 <mbedtls_gcm_crypt_and_tag>
 800b470:	4603      	mov	r3, r0
 800b472:	e000      	b.n	800b476 <mbedtls_cipher_auth_encrypt+0x4e>
                                     iv, iv_len, ad, ad_len, input, output,
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b474:	4b02      	ldr	r3, [pc, #8]	; (800b480 <mbedtls_cipher_auth_encrypt+0x58>)
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	ffff9f80 	.word	0xffff9f80

0800b484 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b08c      	sub	sp, #48	; 0x30
 800b488:	af06      	add	r7, sp, #24
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	785b      	ldrb	r3, [r3, #1]
 800b498:	2b06      	cmp	r3, #6
 800b49a:	d11e      	bne.n	800b4da <mbedtls_cipher_auth_decrypt+0x56>
    {
        int ret;

        *olen = ilen;
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4a0:	601a      	str	r2, [r3, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a8:	9305      	str	r3, [sp, #20]
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	9304      	str	r3, [sp, #16]
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b0:	9303      	str	r3, [sp, #12]
 800b4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b4:	9302      	str	r3, [sp, #8]
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4c4:	f002 fcb3 	bl	800de2e <mbedtls_gcm_auth_decrypt>
 800b4c8:	6178      	str	r0, [r7, #20]
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f113 0f12 	cmn.w	r3, #18
 800b4d0:	d101      	bne.n	800b4d6 <mbedtls_cipher_auth_decrypt+0x52>
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 800b4d2:	4b04      	ldr	r3, [pc, #16]	; (800b4e4 <mbedtls_cipher_auth_decrypt+0x60>)
 800b4d4:	617b      	str	r3, [r7, #20]

        return( ret );
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	e000      	b.n	800b4dc <mbedtls_cipher_auth_decrypt+0x58>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b4da:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <mbedtls_cipher_auth_decrypt+0x64>)
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	ffff9d00 	.word	0xffff9d00
 800b4e8:	ffff9f80 	.word	0xffff9f80

0800b4ec <gcm_ctx_alloc>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 800b4f2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	f012 f93c 	bl	801d774 <calloc>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d002      	beq.n	800b50c <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f001 fd65 	bl	800cfd6 <mbedtls_gcm_init>

    return( ctx );
 800b50c:	687b      	ldr	r3, [r7, #4]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <gcm_ctx_free>:

static void gcm_ctx_free( void *ctx )
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b082      	sub	sp, #8
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free( ctx );
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f002 fcd1 	bl	800dec6 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f012 f95f 	bl	801d7e8 <free>
}
 800b52a:	bf00      	nop
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	607a      	str	r2, [r7, #4]
 800b53c:	603b      	str	r3, [r7, #0]
 800b53e:	460b      	mov	r3, r1
 800b540:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800b542:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7fa fd86 	bl	800605c <mbedtls_aes_crypt_ecb>
 800b550:	4603      	mov	r3, r0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b086      	sub	sp, #24
 800b55e:	af02      	add	r7, sp, #8
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	603b      	str	r3, [r7, #0]
 800b566:	460b      	mov	r3, r1
 800b568:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 800b56a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f7fa fd89 	bl	8006092 <mbedtls_aes_crypt_cbc>
 800b580:	4603      	mov	r3, r0
                          output );
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <aes_setkey_dec_wrap>:
}
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	68b9      	ldr	r1, [r7, #8]
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f7f9 fe6a 	bl	8005274 <mbedtls_aes_setkey_dec>
 800b5a0:	4603      	mov	r3, r0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	68b9      	ldr	r1, [r7, #8]
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7f9 fc7a 	bl	8004eb4 <mbedtls_aes_setkey_enc>
 800b5c0:	4603      	mov	r3, r0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <aes_ctx_alloc>:

static void * aes_ctx_alloc( void )
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 800b5d0:	f44f 718c 	mov.w	r1, #280	; 0x118
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	f012 f8cd 	bl	801d774 <calloc>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	607b      	str	r3, [r7, #4]

    if( aes == NULL )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <aes_ctx_alloc+0x1e>
        return( NULL );
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	e003      	b.n	800b5f0 <aes_ctx_alloc+0x26>

    mbedtls_aes_init( aes );
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7f9 fc43 	bl	8004e74 <mbedtls_aes_init>

    return( aes );
 800b5ee:	687b      	ldr	r3, [r7, #4]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <aes_ctx_free>:

static void aes_ctx_free( void *ctx )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7f9 fc45 	bl	8004e90 <mbedtls_aes_free>
    mbedtls_free( ctx );
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f012 f8ee 	bl	801d7e8 <free>
}
 800b60c:	bf00      	nop
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	2102      	movs	r1, #2
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f001 fe5d 	bl	800d2e6 <mbedtls_gcm_setkey>
 800b62c:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800b63e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800b642:	2100      	movs	r1, #0
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f012 f90f 	bl	801d868 <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <mbedtls_debug_set_threshold>:
#define DEBUG_BUF_SIZE      512

static int debug_threshold = 0;

void mbedtls_debug_set_threshold( int threshold )
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
    debug_threshold = threshold;
 800b65c:	4a04      	ldr	r2, [pc, #16]	; (800b670 <mbedtls_debug_set_threshold+0x1c>)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6013      	str	r3, [r2, #0]
}
 800b662:	bf00      	nop
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	200028e0 	.word	0x200028e0

0800b674 <debug_send_line>:
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
                                    const char *file, int line,
                                    const char *str )
{
 800b674:	b590      	push	{r4, r7, lr}
 800b676:	b087      	sub	sp, #28
 800b678:	af02      	add	r7, sp, #8
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
 800b680:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	691c      	ldr	r4, [r3, #16]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6958      	ldr	r0, [r3, #20]
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	68b9      	ldr	r1, [r7, #8]
 800b698:	47a0      	blx	r4
#endif
}
 800b69a:	bf00      	nop
 800b69c:	3714      	adds	r7, #20
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd90      	pop	{r4, r7, pc}
	...

0800b6a4 <mbedtls_debug_print_msg>:

void mbedtls_debug_print_msg( const mbedtls_ssl_context *ssl, int level,
                              const char *file, int line,
                              const char *format, ... )
{
 800b6a4:	b590      	push	{r4, r7, lr}
 800b6a6:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800b6aa:	af02      	add	r7, sp, #8
 800b6ac:	f507 7406 	add.w	r4, r7, #536	; 0x218
 800b6b0:	f5a4 7403 	sub.w	r4, r4, #524	; 0x20c
 800b6b4:	6020      	str	r0, [r4, #0]
 800b6b6:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800b6ba:	f5a0 7004 	sub.w	r0, r0, #528	; 0x210
 800b6be:	6001      	str	r1, [r0, #0]
 800b6c0:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800b6c4:	f5a1 7105 	sub.w	r1, r1, #532	; 0x214
 800b6c8:	600a      	str	r2, [r1, #0]
 800b6ca:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800b6ce:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800b6d2:	6013      	str	r3, [r2, #0]
    va_list argp;
    char str[DEBUG_BUF_SIZE];
    int ret;

    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 800b6d4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b6d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d05e      	beq.n	800b7a0 <mbedtls_debug_print_msg+0xfc>
 800b6e2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b6e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d056      	beq.n	800b7a0 <mbedtls_debug_print_msg+0xfc>
 800b6f2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b6f6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d04d      	beq.n	800b7a0 <mbedtls_debug_print_msg+0xfc>
 800b704:	4b29      	ldr	r3, [pc, #164]	; (800b7ac <mbedtls_debug_print_msg+0x108>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800b70c:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800b710:	6812      	ldr	r2, [r2, #0]
 800b712:	429a      	cmp	r2, r3
 800b714:	dc44      	bgt.n	800b7a0 <mbedtls_debug_print_msg+0xfc>
        return;

    va_start( argp, format );
 800b716:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800b71a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
        str[DEBUG_BUF_SIZE-1] = '\0';
        ret = -1;
    }
#endif
#else
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 800b71e:	f107 0010 	add.w	r0, r7, #16
 800b722:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b726:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800b72a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b72e:	f012 fb19 	bl	801dd64 <vsniprintf>
 800b732:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
#endif
    va_end( argp );

    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 800b736:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	db16      	blt.n	800b76c <mbedtls_debug_print_msg+0xc8>
 800b73e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b742:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800b746:	dc11      	bgt.n	800b76c <mbedtls_debug_print_msg+0xc8>
    {
        str[ret]     = '\n';
 800b748:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b74c:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800b750:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b754:	4413      	add	r3, r2
 800b756:	220a      	movs	r2, #10
 800b758:	701a      	strb	r2, [r3, #0]
        str[ret + 1] = '\0';
 800b75a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b75e:	3301      	adds	r3, #1
 800b760:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800b764:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800b768:	2100      	movs	r1, #0
 800b76a:	54d1      	strb	r1, [r2, r3]
    }

    debug_send_line( ssl, level, file, line, str );
 800b76c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b770:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800b774:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800b778:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800b77c:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800b780:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800b784:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800b788:	f5a0 7003 	sub.w	r0, r0, #524	; 0x20c
 800b78c:	f107 0410 	add.w	r4, r7, #16
 800b790:	9400      	str	r4, [sp, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6812      	ldr	r2, [r2, #0]
 800b796:	6809      	ldr	r1, [r1, #0]
 800b798:	6800      	ldr	r0, [r0, #0]
 800b79a:	f7ff ff6b 	bl	800b674 <debug_send_line>
 800b79e:	e000      	b.n	800b7a2 <mbedtls_debug_print_msg+0xfe>
        return;
 800b7a0:	bf00      	nop
}
 800b7a2:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd90      	pop	{r4, r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	200028e0 	.word	0x200028e0

0800b7b0 <mbedtls_debug_print_ret>:

void mbedtls_debug_print_ret( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, int ret )
{
 800b7b0:	b590      	push	{r4, r7, lr}
 800b7b2:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800b7b6:	af02      	add	r7, sp, #8
 800b7b8:	f507 7404 	add.w	r4, r7, #528	; 0x210
 800b7bc:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 800b7c0:	6020      	str	r0, [r4, #0]
 800b7c2:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800b7c6:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 800b7ca:	6001      	str	r1, [r0, #0]
 800b7cc:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800b7d0:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 800b7d4:	600a      	str	r2, [r1, #0]
 800b7d6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800b7da:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800b7de:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 800b7e0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800b7e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d040      	beq.n	800b872 <mbedtls_debug_print_ret+0xc2>
 800b7f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800b7f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d037      	beq.n	800b872 <mbedtls_debug_print_ret+0xc2>
 800b802:	4b1f      	ldr	r3, [pc, #124]	; (800b880 <mbedtls_debug_print_ret+0xd0>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800b80a:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800b80e:	6812      	ldr	r2, [r2, #0]
 800b810:	429a      	cmp	r2, r3
 800b812:	dc2e      	bgt.n	800b872 <mbedtls_debug_print_ret+0xc2>
    /*
     * With non-blocking I/O and examples that just retry immediately,
     * the logs would be quickly flooded with WANT_READ, so ignore that.
     * Don't ignore WANT_WRITE however, since is is usually rare.
     */
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 800b814:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800b818:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 800b81c:	d02b      	beq.n	800b876 <mbedtls_debug_print_ret+0xc6>
        return;

    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 800b81e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800b822:	425b      	negs	r3, r3
 800b824:	f107 0010 	add.w	r0, r7, #16
 800b828:	9301      	str	r3, [sp, #4]
 800b82a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800b834:	4a13      	ldr	r2, [pc, #76]	; (800b884 <mbedtls_debug_print_ret+0xd4>)
 800b836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b83a:	f012 fa1d 	bl	801dc78 <sniprintf>
              text, ret, -ret );

    debug_send_line( ssl, level, file, line, str );
 800b83e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800b842:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800b846:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800b84a:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 800b84e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800b852:	f5a1 7102 	sub.w	r1, r1, #520	; 0x208
 800b856:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800b85a:	f5a0 7001 	sub.w	r0, r0, #516	; 0x204
 800b85e:	f107 0410 	add.w	r4, r7, #16
 800b862:	9400      	str	r4, [sp, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6812      	ldr	r2, [r2, #0]
 800b868:	6809      	ldr	r1, [r1, #0]
 800b86a:	6800      	ldr	r0, [r0, #0]
 800b86c:	f7ff ff02 	bl	800b674 <debug_send_line>
 800b870:	e002      	b.n	800b878 <mbedtls_debug_print_ret+0xc8>
        return;
 800b872:	bf00      	nop
 800b874:	e000      	b.n	800b878 <mbedtls_debug_print_ret+0xc8>
        return;
 800b876:	bf00      	nop
}
 800b878:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd90      	pop	{r4, r7, pc}
 800b880:	200028e0 	.word	0x200028e0
 800b884:	0801f220 	.word	0x0801f220

0800b888 <mbedtls_debug_print_buf>:

void mbedtls_debug_print_buf( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line, const char *text,
                      const unsigned char *buf, size_t len )
{
 800b888:	b590      	push	{r4, r7, lr}
 800b88a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800b88e:	af02      	add	r7, sp, #8
 800b890:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800b894:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 800b898:	6020      	str	r0, [r4, #0]
 800b89a:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800b89e:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 800b8a2:	6001      	str	r1, [r0, #0]
 800b8a4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800b8a8:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 800b8ac:	600a      	str	r2, [r1, #0]
 800b8ae:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800b8b2:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 800b8b6:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    char txt[17];
    size_t i, idx = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 800b8be:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b8c2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f000 8136 	beq.w	800bb3c <mbedtls_debug_print_buf+0x2b4>
 800b8d0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b8d4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f000 812c 	beq.w	800bb3c <mbedtls_debug_print_buf+0x2b4>
 800b8e4:	4b98      	ldr	r3, [pc, #608]	; (800bb48 <mbedtls_debug_print_buf+0x2c0>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800b8ec:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800b8f0:	6812      	ldr	r2, [r2, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	f300 8122 	bgt.w	800bb3c <mbedtls_debug_print_buf+0x2b4>
        return;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 800b8f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b8fc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800b900:	18d0      	adds	r0, r2, r3
 800b902:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800b906:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800b90a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800b914:	4a8d      	ldr	r2, [pc, #564]	; (800bb4c <mbedtls_debug_print_buf+0x2c4>)
 800b916:	f012 f9af 	bl	801dc78 <sniprintf>
              text, (unsigned int) len );

    debug_send_line( ssl, level, file, line, str );
 800b91a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b91e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b922:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800b926:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800b92a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800b92e:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800b932:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800b936:	f5a0 7009 	sub.w	r0, r0, #548	; 0x224
 800b93a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b93e:	9400      	str	r4, [sp, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6812      	ldr	r2, [r2, #0]
 800b944:	6809      	ldr	r1, [r1, #0]
 800b946:	6800      	ldr	r0, [r0, #0]
 800b948:	f7ff fe94 	bl	800b674 <debug_send_line>

    idx = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    memset( txt, 0, sizeof( txt ) );
 800b952:	f107 0314 	add.w	r3, r7, #20
 800b956:	2211      	movs	r2, #17
 800b958:	2100      	movs	r1, #0
 800b95a:	4618      	mov	r0, r3
 800b95c:	f011 ff84 	bl	801d868 <memset>
    for( i = 0; i < len; i++ )
 800b960:	2300      	movs	r3, #0
 800b962:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800b966:	e094      	b.n	800ba92 <mbedtls_debug_print_buf+0x20a>
    {
        if( i >= 4096 )
 800b968:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b96c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b970:	f080 8097 	bcs.w	800baa2 <mbedtls_debug_print_buf+0x21a>
            break;

        if( i % 16 == 0 )
 800b974:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b978:	f003 030f 	and.w	r3, r3, #15
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d149      	bne.n	800ba14 <mbedtls_debug_print_buf+0x18c>
        {
            if( i > 0 )
 800b980:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d030      	beq.n	800b9ea <mbedtls_debug_print_buf+0x162>
            {
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 800b988:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b98c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800b990:	18d0      	adds	r0, r2, r3
 800b992:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800b996:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800b99a:	f107 0314 	add.w	r3, r7, #20
 800b99e:	4a6c      	ldr	r2, [pc, #432]	; (800bb50 <mbedtls_debug_print_buf+0x2c8>)
 800b9a0:	f012 f96a 	bl	801dc78 <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 800b9a4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b9a8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b9ac:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800b9b0:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800b9b4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800b9b8:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800b9bc:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800b9c0:	f5a0 7009 	sub.w	r0, r0, #548	; 0x224
 800b9c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b9c8:	9400      	str	r4, [sp, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6812      	ldr	r2, [r2, #0]
 800b9ce:	6809      	ldr	r1, [r1, #0]
 800b9d0:	6800      	ldr	r0, [r0, #0]
 800b9d2:	f7ff fe4f 	bl	800b674 <debug_send_line>

                idx = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
                memset( txt, 0, sizeof( txt ) );
 800b9dc:	f107 0314 	add.w	r3, r7, #20
 800b9e0:	2211      	movs	r2, #17
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f011 ff3f 	bl	801d868 <memset>
            }

            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 800b9ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b9ee:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800b9f2:	18d0      	adds	r0, r2, r3
 800b9f4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800b9f8:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800b9fc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ba00:	4a54      	ldr	r2, [pc, #336]	; (800bb54 <mbedtls_debug_print_buf+0x2cc>)
 800ba02:	f012 f939 	bl	801dc78 <sniprintf>
 800ba06:	4603      	mov	r3, r0
 800ba08:	461a      	mov	r2, r3
 800ba0a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800ba0e:	4413      	add	r3, r2
 800ba10:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
                             (unsigned int) i );

        }

        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 800ba14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ba18:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800ba1c:	18d0      	adds	r0, r2, r3
 800ba1e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800ba22:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
                         (unsigned int) buf[i] );
 800ba26:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800ba2a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ba2e:	4413      	add	r3, r2
 800ba30:	781b      	ldrb	r3, [r3, #0]
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 800ba32:	4a49      	ldr	r2, [pc, #292]	; (800bb58 <mbedtls_debug_print_buf+0x2d0>)
 800ba34:	f012 f920 	bl	801dc78 <sniprintf>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800ba40:	4413      	add	r3, r2
 800ba42:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 800ba46:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800ba4a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ba4e:	4413      	add	r3, r2
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b1f      	cmp	r3, #31
 800ba54:	d90e      	bls.n	800ba74 <mbedtls_debug_print_buf+0x1ec>
 800ba56:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800ba5a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ba5e:	4413      	add	r3, r2
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b7e      	cmp	r3, #126	; 0x7e
 800ba64:	d806      	bhi.n	800ba74 <mbedtls_debug_print_buf+0x1ec>
 800ba66:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800ba6a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ba6e:	4413      	add	r3, r2
 800ba70:	7819      	ldrb	r1, [r3, #0]
 800ba72:	e000      	b.n	800ba76 <mbedtls_debug_print_buf+0x1ee>
 800ba74:	212e      	movs	r1, #46	; 0x2e
 800ba76:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ba7a:	f003 030f 	and.w	r3, r3, #15
 800ba7e:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800ba82:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 800ba86:	54d1      	strb	r1, [r2, r3]
    for( i = 0; i < len; i++ )
 800ba88:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800ba92:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800ba96:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	f4ff af64 	bcc.w	800b968 <mbedtls_debug_print_buf+0xe0>
 800baa0:	e000      	b.n	800baa4 <mbedtls_debug_print_buf+0x21c>
            break;
 800baa2:	bf00      	nop
    }

    if( len > 0 )
 800baa4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d048      	beq.n	800bb3e <mbedtls_debug_print_buf+0x2b6>
    {
        for( /* i = i */; i % 16 != 0; i++ )
 800baac:	e018      	b.n	800bae0 <mbedtls_debug_print_buf+0x258>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 800baae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bab2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bab6:	18d0      	adds	r0, r2, r3
 800bab8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800babc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bac0:	4a26      	ldr	r2, [pc, #152]	; (800bb5c <mbedtls_debug_print_buf+0x2d4>)
 800bac2:	4619      	mov	r1, r3
 800bac4:	f012 f8d8 	bl	801dc78 <sniprintf>
 800bac8:	4603      	mov	r3, r0
 800baca:	461a      	mov	r2, r3
 800bacc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bad0:	4413      	add	r3, r2
 800bad2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
        for( /* i = i */; i % 16 != 0; i++ )
 800bad6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bada:	3301      	adds	r3, #1
 800badc:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bae0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bae4:	f003 030f 	and.w	r3, r3, #15
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e0      	bne.n	800baae <mbedtls_debug_print_buf+0x226>

        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 800baec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800baf0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800baf4:	18d0      	adds	r0, r2, r3
 800baf6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bafa:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800bafe:	f107 0314 	add.w	r3, r7, #20
 800bb02:	4a13      	ldr	r2, [pc, #76]	; (800bb50 <mbedtls_debug_print_buf+0x2c8>)
 800bb04:	f012 f8b8 	bl	801dc78 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 800bb08:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bb0c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bb10:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800bb14:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800bb18:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800bb1c:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800bb20:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800bb24:	f5a0 7009 	sub.w	r0, r0, #548	; 0x224
 800bb28:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bb2c:	9400      	str	r4, [sp, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6812      	ldr	r2, [r2, #0]
 800bb32:	6809      	ldr	r1, [r1, #0]
 800bb34:	6800      	ldr	r0, [r0, #0]
 800bb36:	f7ff fd9d 	bl	800b674 <debug_send_line>
 800bb3a:	e000      	b.n	800bb3e <mbedtls_debug_print_buf+0x2b6>
        return;
 800bb3c:	bf00      	nop
    }
}
 800bb3e:	f507 770d 	add.w	r7, r7, #564	; 0x234
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd90      	pop	{r4, r7, pc}
 800bb46:	bf00      	nop
 800bb48:	200028e0 	.word	0x200028e0
 800bb4c:	0801f23c 	.word	0x0801f23c
 800bb50:	0801f258 	.word	0x0801f258
 800bb54:	0801f260 	.word	0x0801f260
 800bb58:	0801f268 	.word	0x0801f268
 800bb5c:	0801f270 	.word	0x0801f270

0800bb60 <mbedtls_debug_print_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_mpi *X )
{
 800bb60:	b590      	push	{r4, r7, lr}
 800bb62:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800bb66:	af02      	add	r7, sp, #8
 800bb68:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800bb6c:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800bb70:	6020      	str	r0, [r4, #0]
 800bb72:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800bb76:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800bb7a:	6001      	str	r1, [r0, #0]
 800bb7c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800bb80:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 800bb84:	600a      	str	r2, [r1, #0]
 800bb86:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800bb8a:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800bb8e:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    int j, k, zeros = 1;
 800bb90:	2301      	movs	r3, #1
 800bb92:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    size_t i, n, idx = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 800bb9c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800bba0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 8172 	beq.w	800be92 <mbedtls_debug_print_mpi+0x332>
 800bbae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800bbb2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8168 	beq.w	800be92 <mbedtls_debug_print_mpi+0x332>
 800bbc2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f000 8163 	beq.w	800be92 <mbedtls_debug_print_mpi+0x332>
 800bbcc:	4bb3      	ldr	r3, [pc, #716]	; (800be9c <mbedtls_debug_print_mpi+0x33c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800bbd4:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 800bbd8:	6812      	ldr	r2, [r2, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	f300 8159 	bgt.w	800be92 <mbedtls_debug_print_mpi+0x332>
        return;

    for( n = X->n - 1; n > 0; n-- )
 800bbe0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800bbec:	e00e      	b.n	800bc0c <mbedtls_debug_print_mpi+0xac>
        if( X->p[n] != 0 )
 800bbee:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bbf2:	689a      	ldr	r2, [r3, #8]
 800bbf4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4413      	add	r3, r2
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d109      	bne.n	800bc16 <mbedtls_debug_print_mpi+0xb6>
    for( n = X->n - 1; n > 0; n-- )
 800bc02:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bc06:	3b01      	subs	r3, #1
 800bc08:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800bc0c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1ec      	bne.n	800bbee <mbedtls_debug_print_mpi+0x8e>
 800bc14:	e000      	b.n	800bc18 <mbedtls_debug_print_mpi+0xb8>
            break;
 800bc16:	bf00      	nop

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 800bc18:	231f      	movs	r3, #31
 800bc1a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bc1e:	e014      	b.n	800bc4a <mbedtls_debug_print_mpi+0xea>
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 800bc20:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bc24:	689a      	ldr	r2, [r3, #8]
 800bc26:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bc34:	fa22 f303 	lsr.w	r3, r2, r3
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d109      	bne.n	800bc54 <mbedtls_debug_print_mpi+0xf4>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 800bc40:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bc44:	3b01      	subs	r3, #1
 800bc46:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bc4a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	dae6      	bge.n	800bc20 <mbedtls_debug_print_mpi+0xc0>
 800bc52:	e000      	b.n	800bc56 <mbedtls_debug_print_mpi+0xf6>
            break;
 800bc54:	bf00      	nop

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 800bc56:	f107 0210 	add.w	r2, r7, #16
 800bc5a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bc5e:	18d0      	adds	r0, r2, r3
 800bc60:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bc64:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 800bc68:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bc72:	4413      	add	r3, r2
 800bc74:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bc7c:	4a88      	ldr	r2, [pc, #544]	; (800bea0 <mbedtls_debug_print_mpi+0x340>)
 800bc7e:	f011 fffb 	bl	801dc78 <sniprintf>

    debug_send_line( ssl, level, file, line, str );
 800bc82:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800bc86:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800bc8a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800bc8e:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800bc92:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800bc96:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800bc9a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800bc9e:	f5a0 7007 	sub.w	r0, r0, #540	; 0x21c
 800bca2:	f107 0410 	add.w	r4, r7, #16
 800bca6:	9400      	str	r4, [sp, #0]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	6812      	ldr	r2, [r2, #0]
 800bcac:	6809      	ldr	r1, [r1, #0]
 800bcae:	6800      	ldr	r0, [r0, #0]
 800bcb0:	f7ff fce0 	bl	800b674 <debug_send_line>

    idx = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    for( i = n + 1, j = 0; i > 0; i-- )
 800bcba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bcca:	e09e      	b.n	800be0a <mbedtls_debug_print_mpi+0x2aa>
    {
        if( zeros && X->p[i - 1] == 0 )
 800bccc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00d      	beq.n	800bcf0 <mbedtls_debug_print_mpi+0x190>
 800bcd4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bcd8:	689a      	ldr	r2, [r3, #8]
 800bcda:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800bcde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bce2:	3b01      	subs	r3, #1
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4413      	add	r3, r2
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 8087 	beq.w	800bdfe <mbedtls_debug_print_mpi+0x29e>
            continue;

        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800bcf6:	e07c      	b.n	800bdf2 <mbedtls_debug_print_mpi+0x292>
        {
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 800bcf8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d012      	beq.n	800bd26 <mbedtls_debug_print_mpi+0x1c6>
 800bd00:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bd04:	689a      	ldr	r2, [r3, #8]
 800bd06:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800bd0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800bd1a:	00db      	lsls	r3, r3, #3
 800bd1c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d05f      	beq.n	800bde6 <mbedtls_debug_print_mpi+0x286>
                continue;
            else
                zeros = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

            if( j % 16 == 0 )
 800bd2c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bd30:	f003 030f 	and.w	r3, r3, #15
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d12c      	bne.n	800bd92 <mbedtls_debug_print_mpi+0x232>
            {
                if( j > 0 )
 800bd38:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	dd28      	ble.n	800bd92 <mbedtls_debug_print_mpi+0x232>
                {
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 800bd40:	f107 0210 	add.w	r2, r7, #16
 800bd44:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bd48:	18d0      	adds	r0, r2, r3
 800bd4a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bd4e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd52:	4a54      	ldr	r2, [pc, #336]	; (800bea4 <mbedtls_debug_print_mpi+0x344>)
 800bd54:	4619      	mov	r1, r3
 800bd56:	f011 ff8f 	bl	801dc78 <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 800bd5a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800bd5e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800bd62:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800bd66:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800bd6a:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800bd6e:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800bd72:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800bd76:	f5a0 7007 	sub.w	r0, r0, #540	; 0x21c
 800bd7a:	f107 0410 	add.w	r4, r7, #16
 800bd7e:	9400      	str	r4, [sp, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6812      	ldr	r2, [r2, #0]
 800bd84:	6809      	ldr	r1, [r1, #0]
 800bd86:	6800      	ldr	r0, [r0, #0]
 800bd88:	f7ff fc74 	bl	800b674 <debug_send_line>
                    idx = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                }
            }

            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 800bd92:	f107 0210 	add.w	r2, r7, #16
 800bd96:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bd9a:	18d0      	adds	r0, r2, r3
 800bd9c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bda0:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 800bda4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800bda8:	689a      	ldr	r2, [r3, #8]
 800bdaa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800bdae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4413      	add	r3, r2
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	fa22 f303 	lsr.w	r3, r2, r3
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	4a38      	ldr	r2, [pc, #224]	; (800bea8 <mbedtls_debug_print_mpi+0x348>)
 800bdc8:	f011 ff56 	bl	801dc78 <sniprintf>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	461a      	mov	r2, r3
 800bdd0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

            j++;
 800bdda:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800bdde:	3301      	adds	r3, #1
 800bde0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bde4:	e000      	b.n	800bde8 <mbedtls_debug_print_mpi+0x288>
                continue;
 800bde6:	bf00      	nop
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 800bde8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800bdec:	3b01      	subs	r3, #1
 800bdee:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800bdf2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f6bf af7e 	bge.w	800bcf8 <mbedtls_debug_print_mpi+0x198>
 800bdfc:	e000      	b.n	800be00 <mbedtls_debug_print_mpi+0x2a0>
            continue;
 800bdfe:	bf00      	nop
    for( i = n + 1, j = 0; i > 0; i-- )
 800be00:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800be04:	3b01      	subs	r3, #1
 800be06:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800be0a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f47f af5c 	bne.w	800bccc <mbedtls_debug_print_mpi+0x16c>
        }

    }

    if( zeros == 1 )
 800be14:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d113      	bne.n	800be44 <mbedtls_debug_print_mpi+0x2e4>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 800be1c:	f107 0210 	add.w	r2, r7, #16
 800be20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800be24:	18d0      	adds	r0, r2, r3
 800be26:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800be2a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800be2e:	4a1f      	ldr	r2, [pc, #124]	; (800beac <mbedtls_debug_print_mpi+0x34c>)
 800be30:	4619      	mov	r1, r3
 800be32:	f011 ff21 	bl	801dc78 <sniprintf>
 800be36:	4603      	mov	r3, r0
 800be38:	461a      	mov	r2, r3
 800be3a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800be3e:	4413      	add	r3, r2
 800be40:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 800be44:	f107 0210 	add.w	r2, r7, #16
 800be48:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800be4c:	18d0      	adds	r0, r2, r3
 800be4e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800be52:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800be56:	4a13      	ldr	r2, [pc, #76]	; (800bea4 <mbedtls_debug_print_mpi+0x344>)
 800be58:	4619      	mov	r1, r3
 800be5a:	f011 ff0d 	bl	801dc78 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 800be5e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800be62:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800be66:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800be6a:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800be6e:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800be72:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800be76:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800be7a:	f5a0 7007 	sub.w	r0, r0, #540	; 0x21c
 800be7e:	f107 0410 	add.w	r4, r7, #16
 800be82:	9400      	str	r4, [sp, #0]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	6812      	ldr	r2, [r2, #0]
 800be88:	6809      	ldr	r1, [r1, #0]
 800be8a:	6800      	ldr	r0, [r0, #0]
 800be8c:	f7ff fbf2 	bl	800b674 <debug_send_line>
 800be90:	e000      	b.n	800be94 <mbedtls_debug_print_mpi+0x334>
        return;
 800be92:	bf00      	nop
}
 800be94:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd90      	pop	{r4, r7, pc}
 800be9c:	200028e0 	.word	0x200028e0
 800bea0:	0801f274 	.word	0x0801f274
 800bea4:	0801f294 	.word	0x0801f294
 800bea8:	0801f268 	.word	0x0801f268
 800beac:	0801f298 	.word	0x0801f298

0800beb0 <debug_print_pk>:

#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void debug_print_pk( const mbedtls_ssl_context *ssl, int level,
                            const char *file, int line,
                            const char *text, const mbedtls_pk_context *pk )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b094      	sub	sp, #80	; 0x50
 800beb4:	af02      	add	r7, sp, #8
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]
    size_t i;
    mbedtls_pk_debug_item items[MBEDTLS_PK_DEBUG_MAX_ITEMS];
    char name[16];

    memset( items, 0, sizeof( items ) );
 800bebe:	f107 0320 	add.w	r3, r7, #32
 800bec2:	2224      	movs	r2, #36	; 0x24
 800bec4:	2100      	movs	r1, #0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f011 fcce 	bl	801d868 <memset>

    if( mbedtls_pk_debug( pk, items ) != 0 )
 800becc:	f107 0320 	add.w	r3, r7, #32
 800bed0:	4619      	mov	r1, r3
 800bed2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bed4:	f002 ffa0 	bl	800ee18 <mbedtls_pk_debug>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d008      	beq.n	800bef0 <debug_print_pk+0x40>
    {
        debug_send_line( ssl, level, file, line,
 800bede:	4b2e      	ldr	r3, [pc, #184]	; (800bf98 <debug_print_pk+0xe8>)
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	68b9      	ldr	r1, [r7, #8]
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff fbc3 	bl	800b674 <debug_send_line>
                          "invalid PK context\n" );
        return;
 800beee:	e04f      	b.n	800bf90 <debug_print_pk+0xe0>
    }

    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 800bef0:	2300      	movs	r3, #0
 800bef2:	647b      	str	r3, [r7, #68]	; 0x44
 800bef4:	e047      	b.n	800bf86 <debug_print_pk+0xd6>
    {
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 800bef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bef8:	4613      	mov	r3, r2
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	4413      	add	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	3348      	adds	r3, #72	; 0x48
 800bf02:	443b      	add	r3, r7
 800bf04:	3b28      	subs	r3, #40	; 0x28
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d040      	beq.n	800bf8e <debug_print_pk+0xde>
            return;

        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 800bf0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf0e:	4613      	mov	r3, r2
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	4413      	add	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	3348      	adds	r3, #72	; 0x48
 800bf18:	443b      	add	r3, r7
 800bf1a:	3b24      	subs	r3, #36	; 0x24
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f107 0010 	add.w	r0, r7, #16
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf26:	4a1d      	ldr	r2, [pc, #116]	; (800bf9c <debug_print_pk+0xec>)
 800bf28:	2110      	movs	r1, #16
 800bf2a:	f011 fea5 	bl	801dc78 <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 800bf2e:	2300      	movs	r3, #0
 800bf30:	77fb      	strb	r3, [r7, #31]

        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 800bf32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf34:	4613      	mov	r3, r2
 800bf36:	005b      	lsls	r3, r3, #1
 800bf38:	4413      	add	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	3348      	adds	r3, #72	; 0x48
 800bf3e:	443b      	add	r3, r7
 800bf40:	3b28      	subs	r3, #40	; 0x28
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d113      	bne.n	800bf70 <debug_print_pk+0xc0>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 800bf48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	005b      	lsls	r3, r3, #1
 800bf4e:	4413      	add	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	3348      	adds	r3, #72	; 0x48
 800bf54:	443b      	add	r3, r7
 800bf56:	3b20      	subs	r3, #32
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	9301      	str	r3, [sp, #4]
 800bf5c:	f107 0310 	add.w	r3, r7, #16
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	68b9      	ldr	r1, [r7, #8]
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f7ff fdf9 	bl	800bb60 <mbedtls_debug_print_mpi>
 800bf6e:	e007      	b.n	800bf80 <debug_print_pk+0xd0>
#if defined(MBEDTLS_ECP_C)
        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )
            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );
        else
#endif
            debug_send_line( ssl, level, file, line,
 800bf70:	4b0b      	ldr	r3, [pc, #44]	; (800bfa0 <debug_print_pk+0xf0>)
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	68b9      	ldr	r1, [r7, #8]
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fb7a 	bl	800b674 <debug_send_line>
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 800bf80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf82:	3301      	adds	r3, #1
 800bf84:	647b      	str	r3, [r7, #68]	; 0x44
 800bf86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d9b4      	bls.n	800bef6 <debug_print_pk+0x46>
 800bf8c:	e000      	b.n	800bf90 <debug_print_pk+0xe0>
            return;
 800bf8e:	bf00      	nop
                              "should not happen\n" );
    }
}
 800bf90:	3748      	adds	r7, #72	; 0x48
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	0801f29c 	.word	0x0801f29c
 800bf9c:	0801f2b0 	.word	0x0801f2b0
 800bfa0:	0801f2b8 	.word	0x0801f2b8

0800bfa4 <debug_print_line_by_line>:

static void debug_print_line_by_line( const mbedtls_ssl_context *ssl, int level,
                                      const char *file, int line, const char *text )
{
 800bfa4:	b590      	push	{r4, r7, lr}
 800bfa6:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800bfaa:	af02      	add	r7, sp, #8
 800bfac:	f507 7408 	add.w	r4, r7, #544	; 0x220
 800bfb0:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 800bfb4:	6020      	str	r0, [r4, #0]
 800bfb6:	f507 7008 	add.w	r0, r7, #544	; 0x220
 800bfba:	f5a0 7006 	sub.w	r0, r0, #536	; 0x218
 800bfbe:	6001      	str	r1, [r0, #0]
 800bfc0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 800bfc4:	f5a1 7107 	sub.w	r1, r1, #540	; 0x21c
 800bfc8:	600a      	str	r2, [r1, #0]
 800bfca:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800bfce:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 800bfd2:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    const char *start, *cur;

    start = text;
 800bfd4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800bfd8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    for( cur = text; *cur != '\0'; cur++ )
 800bfdc:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800bfe0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800bfe4:	e04a      	b.n	800c07c <debug_print_line_by_line+0xd8>
    {
        if( *cur == '\n' )
 800bfe6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b0a      	cmp	r3, #10
 800bfee:	d140      	bne.n	800c072 <debug_print_line_by_line+0xce>
        {
            size_t len = cur - start + 1;
 800bff0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800bff4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	3301      	adds	r3, #1
 800bffc:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
            if( len > DEBUG_BUF_SIZE - 1 )
 800c000:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c008:	d303      	bcc.n	800c012 <debug_print_line_by_line+0x6e>
                len = DEBUG_BUF_SIZE - 1;
 800c00a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800c00e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

            memcpy( str, start, len );
 800c012:	f107 0314 	add.w	r3, r7, #20
 800c016:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800c01a:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800c01e:	4618      	mov	r0, r3
 800c020:	f011 fbfa 	bl	801d818 <memcpy>
            str[len] = '\0';
 800c024:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c028:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800c02c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c030:	4413      	add	r3, r2
 800c032:	2200      	movs	r2, #0
 800c034:	701a      	strb	r2, [r3, #0]

            debug_send_line( ssl, level, file, line, str );
 800c036:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c03a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800c03e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800c042:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 800c046:	f507 7108 	add.w	r1, r7, #544	; 0x220
 800c04a:	f5a1 7106 	sub.w	r1, r1, #536	; 0x218
 800c04e:	f507 7008 	add.w	r0, r7, #544	; 0x220
 800c052:	f5a0 7005 	sub.w	r0, r0, #532	; 0x214
 800c056:	f107 0414 	add.w	r4, r7, #20
 800c05a:	9400      	str	r4, [sp, #0]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6812      	ldr	r2, [r2, #0]
 800c060:	6809      	ldr	r1, [r1, #0]
 800c062:	6800      	ldr	r0, [r0, #0]
 800c064:	f7ff fb06 	bl	800b674 <debug_send_line>

            start = cur + 1;
 800c068:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c06c:	3301      	adds	r3, #1
 800c06e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    for( cur = text; *cur != '\0'; cur++ )
 800c072:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c076:	3301      	adds	r3, #1
 800c078:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c07c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1af      	bne.n	800bfe6 <debug_print_line_by_line+0x42>
        }
    }
}
 800c086:	bf00      	nop
 800c088:	bf00      	nop
 800c08a:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd90      	pop	{r4, r7, pc}
	...

0800c094 <mbedtls_debug_print_crt>:

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 800c094:	b590      	push	{r4, r7, lr}
 800c096:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 800c09a:	af02      	add	r7, sp, #8
 800c09c:	f507 64c3 	add.w	r4, r7, #1560	; 0x618
 800c0a0:	f2a4 640c 	subw	r4, r4, #1548	; 0x60c
 800c0a4:	6020      	str	r0, [r4, #0]
 800c0a6:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c0aa:	f5a0 60c2 	sub.w	r0, r0, #1552	; 0x610
 800c0ae:	6001      	str	r1, [r0, #0]
 800c0b0:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c0b4:	f2a1 6114 	subw	r1, r1, #1556	; 0x614
 800c0b8:	600a      	str	r2, [r1, #0]
 800c0ba:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c0be:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 800c0c2:	6013      	str	r3, [r2, #0]
    char str[DEBUG_BUF_SIZE];
    int i = 0;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 800c0ca:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c0ce:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 808c 	beq.w	800c1f4 <mbedtls_debug_print_crt+0x160>
 800c0dc:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c0e0:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f000 8082 	beq.w	800c1f4 <mbedtls_debug_print_crt+0x160>
 800c0f0:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d07d      	beq.n	800c1f4 <mbedtls_debug_print_crt+0x160>
 800c0f8:	4b41      	ldr	r3, [pc, #260]	; (800c200 <mbedtls_debug_print_crt+0x16c>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c100:	f5a2 62c2 	sub.w	r2, r2, #1552	; 0x610
 800c104:	6812      	ldr	r2, [r2, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	dc74      	bgt.n	800c1f4 <mbedtls_debug_print_crt+0x160>
        return;

    while( crt != NULL )
 800c10a:	e06e      	b.n	800c1ea <mbedtls_debug_print_crt+0x156>
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 800c10c:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c110:	3301      	adds	r3, #1
 800c112:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800c116:	f207 4014 	addw	r0, r7, #1044	; 0x414
 800c11a:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c124:	4a37      	ldr	r2, [pc, #220]	; (800c204 <mbedtls_debug_print_crt+0x170>)
 800c126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c12a:	f011 fda5 	bl	801dc78 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 800c12e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c132:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800c136:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c13a:	f2a2 6214 	subw	r2, r2, #1556	; 0x614
 800c13e:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c142:	f5a1 61c2 	sub.w	r1, r1, #1552	; 0x610
 800c146:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c14a:	f2a0 600c 	subw	r0, r0, #1548	; 0x60c
 800c14e:	f207 4414 	addw	r4, r7, #1044	; 0x414
 800c152:	9400      	str	r4, [sp, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	6812      	ldr	r2, [r2, #0]
 800c158:	6809      	ldr	r1, [r1, #0]
 800c15a:	6800      	ldr	r0, [r0, #0]
 800c15c:	f7ff fa8a 	bl	800b674 <debug_send_line>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 800c160:	f107 0014 	add.w	r0, r7, #20
 800c164:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c168:	4a27      	ldr	r2, [pc, #156]	; (800c208 <mbedtls_debug_print_crt+0x174>)
 800c16a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c16e:	f00f f8ef 	bl	801b350 <mbedtls_x509_crt_info>
        debug_print_line_by_line( ssl, level, file, line, buf );
 800c172:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c176:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800c17a:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c17e:	f2a2 6214 	subw	r2, r2, #1556	; 0x614
 800c182:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c186:	f5a1 61c2 	sub.w	r1, r1, #1552	; 0x610
 800c18a:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c18e:	f2a0 600c 	subw	r0, r0, #1548	; 0x60c
 800c192:	f107 0414 	add.w	r4, r7, #20
 800c196:	9400      	str	r4, [sp, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	6812      	ldr	r2, [r2, #0]
 800c19c:	6809      	ldr	r1, [r1, #0]
 800c19e:	6800      	ldr	r0, [r0, #0]
 800c1a0:	f7ff ff00 	bl	800bfa4 <debug_print_line_by_line>

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );
 800c1a4:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c1a8:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 800c1ac:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800c1b0:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800c1b4:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800c1b8:	f2a2 6214 	subw	r2, r2, #1556	; 0x614
 800c1bc:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800c1c0:	f5a1 61c2 	sub.w	r1, r1, #1552	; 0x610
 800c1c4:	f507 60c3 	add.w	r0, r7, #1560	; 0x618
 800c1c8:	f2a0 600c 	subw	r0, r0, #1548	; 0x60c
 800c1cc:	9401      	str	r4, [sp, #4]
 800c1ce:	4c0f      	ldr	r4, [pc, #60]	; (800c20c <mbedtls_debug_print_crt+0x178>)
 800c1d0:	9400      	str	r4, [sp, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6812      	ldr	r2, [r2, #0]
 800c1d6:	6809      	ldr	r1, [r1, #0]
 800c1d8:	6800      	ldr	r0, [r0, #0]
 800c1da:	f7ff fe69 	bl	800beb0 <debug_print_pk>

        crt = crt->next;
 800c1de:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c1e2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c1e6:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
    while( crt != NULL )
 800c1ea:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d18c      	bne.n	800c10c <mbedtls_debug_print_crt+0x78>
 800c1f2:	e000      	b.n	800c1f6 <mbedtls_debug_print_crt+0x162>
        return;
 800c1f4:	bf00      	nop
    }
}
 800c1f6:	f207 671c 	addw	r7, r7, #1564	; 0x61c
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd90      	pop	{r4, r7, pc}
 800c1fe:	bf00      	nop
 800c200:	200028e0 	.word	0x200028e0
 800c204:	0801f2cc 	.word	0x0801f2cc
 800c208:	0801f2d8 	.word	0x0801f2d8
 800c20c:	0801f2dc 	.word	0x0801f2dc

0800c210 <mbedtls_strerror>:
#include "mbedtls/xtea.h"
#endif


void mbedtls_strerror( int ret, char *buf, size_t buflen )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
    size_t len;
    int use_ret;

    if( buflen == 0 )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f000 8683 	beq.w	800cf2a <mbedtls_strerror+0xd1a>
        return;

    memset( buf, 0x00, buflen );
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	2100      	movs	r1, #0
 800c228:	68b8      	ldr	r0, [r7, #8]
 800c22a:	f011 fb1d 	bl	801d868 <memset>

    if( ret < 0 )
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	da02      	bge.n	800c23a <mbedtls_strerror+0x2a>
        ret = -ret;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	425b      	negs	r3, r3
 800c238:	60fb      	str	r3, [r7, #12]

    if( ret & 0xFF80 )
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	f64f 7380 	movw	r3, #65408	; 0xff80
 800c240:	4013      	ands	r3, r2
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 8504 	beq.w	800cc50 <mbedtls_strerror+0xa40>
    {
        use_ret = ret & 0xFF80;
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800c24e:	4013      	ands	r3, r2
 800c250:	617b      	str	r3, [r7, #20]

        // High level error codes
        //
        // BEGIN generated code
#if defined(MBEDTLS_CIPHER_C)
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE) )
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	f5b3 4fc1 	cmp.w	r3, #24704	; 0x6080
 800c258:	d104      	bne.n	800c264 <mbedtls_strerror+0x54>
            mbedtls_snprintf( buf, buflen, "CIPHER - The selected feature is not available" );
 800c25a:	4a97      	ldr	r2, [pc, #604]	; (800c4b8 <mbedtls_strerror+0x2a8>)
 800c25c:	6879      	ldr	r1, [r7, #4]
 800c25e:	68b8      	ldr	r0, [r7, #8]
 800c260:	f011 fd0a 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA) )
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 800c26a:	d104      	bne.n	800c276 <mbedtls_strerror+0x66>
            mbedtls_snprintf( buf, buflen, "CIPHER - Bad input parameters" );
 800c26c:	4a93      	ldr	r2, [pc, #588]	; (800c4bc <mbedtls_strerror+0x2ac>)
 800c26e:	6879      	ldr	r1, [r7, #4]
 800c270:	68b8      	ldr	r0, [r7, #8]
 800c272:	f011 fd01 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED) )
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 800c27c:	d104      	bne.n	800c288 <mbedtls_strerror+0x78>
            mbedtls_snprintf( buf, buflen, "CIPHER - Failed to allocate memory" );
 800c27e:	4a90      	ldr	r2, [pc, #576]	; (800c4c0 <mbedtls_strerror+0x2b0>)
 800c280:	6879      	ldr	r1, [r7, #4]
 800c282:	68b8      	ldr	r0, [r7, #8]
 800c284:	f011 fcf8 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_PADDING) )
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 800c28e:	d104      	bne.n	800c29a <mbedtls_strerror+0x8a>
            mbedtls_snprintf( buf, buflen, "CIPHER - Input data contains invalid padding and is rejected" );
 800c290:	4a8c      	ldr	r2, [pc, #560]	; (800c4c4 <mbedtls_strerror+0x2b4>)
 800c292:	6879      	ldr	r1, [r7, #4]
 800c294:	68b8      	ldr	r0, [r7, #8]
 800c296:	f011 fcef 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED) )
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 800c2a0:	d104      	bne.n	800c2ac <mbedtls_strerror+0x9c>
            mbedtls_snprintf( buf, buflen, "CIPHER - Decryption of block requires a full block" );
 800c2a2:	4a89      	ldr	r2, [pc, #548]	; (800c4c8 <mbedtls_strerror+0x2b8>)
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	68b8      	ldr	r0, [r7, #8]
 800c2a8:	f011 fce6 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_AUTH_FAILED) )
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 800c2b2:	d104      	bne.n	800c2be <mbedtls_strerror+0xae>
            mbedtls_snprintf( buf, buflen, "CIPHER - Authentication failed (for AEAD modes)" );
 800c2b4:	4a85      	ldr	r2, [pc, #532]	; (800c4cc <mbedtls_strerror+0x2bc>)
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	68b8      	ldr	r0, [r7, #8]
 800c2ba:	f011 fcdd 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT) )
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	f5b3 4fc7 	cmp.w	r3, #25472	; 0x6380
 800c2c4:	d104      	bne.n	800c2d0 <mbedtls_strerror+0xc0>
            mbedtls_snprintf( buf, buflen, "CIPHER - The context is invalid. For example, because it was freed" );
 800c2c6:	4a82      	ldr	r2, [pc, #520]	; (800c4d0 <mbedtls_strerror+0x2c0>)
 800c2c8:	6879      	ldr	r1, [r7, #4]
 800c2ca:	68b8      	ldr	r0, [r7, #8]
 800c2cc:	f011 fcd4 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED) )
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 800c2d6:	d104      	bne.n	800c2e2 <mbedtls_strerror+0xd2>
            mbedtls_snprintf( buf, buflen, "CIPHER - Cipher hardware accelerator failed" );
 800c2d8:	4a7e      	ldr	r2, [pc, #504]	; (800c4d4 <mbedtls_strerror+0x2c4>)
 800c2da:	6879      	ldr	r1, [r7, #4]
 800c2dc:	68b8      	ldr	r0, [r7, #8]
 800c2de:	f011 fccb 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_HW_ACCEL_FAILED) )
            mbedtls_snprintf( buf, buflen, "ECP - ECP hardware accelerator failed" );
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_MD_C)
        if( use_ret == -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE) )
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f5b3 4fa1 	cmp.w	r3, #20608	; 0x5080
 800c2e8:	d104      	bne.n	800c2f4 <mbedtls_strerror+0xe4>
            mbedtls_snprintf( buf, buflen, "MD - The selected feature is not available" );
 800c2ea:	4a7b      	ldr	r2, [pc, #492]	; (800c4d8 <mbedtls_strerror+0x2c8>)
 800c2ec:	6879      	ldr	r1, [r7, #4]
 800c2ee:	68b8      	ldr	r0, [r7, #8]
 800c2f0:	f011 fcc2 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_BAD_INPUT_DATA) )
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	f5b3 4fa2 	cmp.w	r3, #20736	; 0x5100
 800c2fa:	d104      	bne.n	800c306 <mbedtls_strerror+0xf6>
            mbedtls_snprintf( buf, buflen, "MD - Bad input parameters to function" );
 800c2fc:	4a77      	ldr	r2, [pc, #476]	; (800c4dc <mbedtls_strerror+0x2cc>)
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	68b8      	ldr	r0, [r7, #8]
 800c302:	f011 fcb9 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_ALLOC_FAILED) )
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f5b3 4fa3 	cmp.w	r3, #20864	; 0x5180
 800c30c:	d104      	bne.n	800c318 <mbedtls_strerror+0x108>
            mbedtls_snprintf( buf, buflen, "MD - Failed to allocate memory" );
 800c30e:	4a74      	ldr	r2, [pc, #464]	; (800c4e0 <mbedtls_strerror+0x2d0>)
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	68b8      	ldr	r0, [r7, #8]
 800c314:	f011 fcb0 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_FILE_IO_ERROR) )
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800c31e:	d104      	bne.n	800c32a <mbedtls_strerror+0x11a>
            mbedtls_snprintf( buf, buflen, "MD - Opening or reading of file failed" );
 800c320:	4a70      	ldr	r2, [pc, #448]	; (800c4e4 <mbedtls_strerror+0x2d4>)
 800c322:	6879      	ldr	r1, [r7, #4]
 800c324:	68b8      	ldr	r0, [r7, #8]
 800c326:	f011 fca7 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_HW_ACCEL_FAILED) )
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f5b3 4fa5 	cmp.w	r3, #21120	; 0x5280
 800c330:	d104      	bne.n	800c33c <mbedtls_strerror+0x12c>
            mbedtls_snprintf( buf, buflen, "MD - MD hardware accelerator failed" );
 800c332:	4a6d      	ldr	r2, [pc, #436]	; (800c4e8 <mbedtls_strerror+0x2d8>)
 800c334:	6879      	ldr	r1, [r7, #4]
 800c336:	68b8      	ldr	r0, [r7, #8]
 800c338:	f011 fc9e 	bl	801dc78 <sniprintf>
#endif /* MBEDTLS_MD_C */

#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)
        if( use_ret == -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) )
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800c342:	d104      	bne.n	800c34e <mbedtls_strerror+0x13e>
            mbedtls_snprintf( buf, buflen, "PEM - No PEM header or footer found" );
 800c344:	4a69      	ldr	r2, [pc, #420]	; (800c4ec <mbedtls_strerror+0x2dc>)
 800c346:	6879      	ldr	r1, [r7, #4]
 800c348:	68b8      	ldr	r0, [r7, #8]
 800c34a:	f011 fc95 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_DATA) )
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 800c354:	d104      	bne.n	800c360 <mbedtls_strerror+0x150>
            mbedtls_snprintf( buf, buflen, "PEM - PEM string is not as expected" );
 800c356:	4a66      	ldr	r2, [pc, #408]	; (800c4f0 <mbedtls_strerror+0x2e0>)
 800c358:	6879      	ldr	r1, [r7, #4]
 800c35a:	68b8      	ldr	r0, [r7, #8]
 800c35c:	f011 fc8c 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_ALLOC_FAILED) )
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 800c366:	d104      	bne.n	800c372 <mbedtls_strerror+0x162>
            mbedtls_snprintf( buf, buflen, "PEM - Failed to allocate memory" );
 800c368:	4a62      	ldr	r2, [pc, #392]	; (800c4f4 <mbedtls_strerror+0x2e4>)
 800c36a:	6879      	ldr	r1, [r7, #4]
 800c36c:	68b8      	ldr	r0, [r7, #8]
 800c36e:	f011 fc83 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_ENC_IV) )
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800c378:	d104      	bne.n	800c384 <mbedtls_strerror+0x174>
            mbedtls_snprintf( buf, buflen, "PEM - RSA IV is not in hex-format" );
 800c37a:	4a5f      	ldr	r2, [pc, #380]	; (800c4f8 <mbedtls_strerror+0x2e8>)
 800c37c:	6879      	ldr	r1, [r7, #4]
 800c37e:	68b8      	ldr	r0, [r7, #8]
 800c380:	f011 fc7a 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG) )
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800c38a:	d104      	bne.n	800c396 <mbedtls_strerror+0x186>
            mbedtls_snprintf( buf, buflen, "PEM - Unsupported key encryption algorithm" );
 800c38c:	4a5b      	ldr	r2, [pc, #364]	; (800c4fc <mbedtls_strerror+0x2ec>)
 800c38e:	6879      	ldr	r1, [r7, #4]
 800c390:	68b8      	ldr	r0, [r7, #8]
 800c392:	f011 fc71 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED) )
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 800c39c:	d104      	bne.n	800c3a8 <mbedtls_strerror+0x198>
            mbedtls_snprintf( buf, buflen, "PEM - Private key password can't be empty" );
 800c39e:	4a58      	ldr	r2, [pc, #352]	; (800c500 <mbedtls_strerror+0x2f0>)
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	68b8      	ldr	r0, [r7, #8]
 800c3a4:	f011 fc68 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH) )
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	f5b3 5f9c 	cmp.w	r3, #4992	; 0x1380
 800c3ae:	d104      	bne.n	800c3ba <mbedtls_strerror+0x1aa>
            mbedtls_snprintf( buf, buflen, "PEM - Given private key password does not allow for correct decryption" );
 800c3b0:	4a54      	ldr	r2, [pc, #336]	; (800c504 <mbedtls_strerror+0x2f4>)
 800c3b2:	6879      	ldr	r1, [r7, #4]
 800c3b4:	68b8      	ldr	r0, [r7, #8]
 800c3b6:	f011 fc5f 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE) )
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c3c0:	d104      	bne.n	800c3cc <mbedtls_strerror+0x1bc>
            mbedtls_snprintf( buf, buflen, "PEM - Unavailable feature, e.g. hashing/encryption combination" );
 800c3c2:	4a51      	ldr	r2, [pc, #324]	; (800c508 <mbedtls_strerror+0x2f8>)
 800c3c4:	6879      	ldr	r1, [r7, #4]
 800c3c6:	68b8      	ldr	r0, [r7, #8]
 800c3c8:	f011 fc56 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA) )
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	f5b3 5fa4 	cmp.w	r3, #5248	; 0x1480
 800c3d2:	d104      	bne.n	800c3de <mbedtls_strerror+0x1ce>
            mbedtls_snprintf( buf, buflen, "PEM - Bad input parameters to function" );
 800c3d4:	4a4d      	ldr	r2, [pc, #308]	; (800c50c <mbedtls_strerror+0x2fc>)
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	68b8      	ldr	r0, [r7, #8]
 800c3da:	f011 fc4d 	bl	801dc78 <sniprintf>
#endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */

#if defined(MBEDTLS_PK_C)
        if( use_ret == -(MBEDTLS_ERR_PK_ALLOC_FAILED) )
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
 800c3e4:	d104      	bne.n	800c3f0 <mbedtls_strerror+0x1e0>
            mbedtls_snprintf( buf, buflen, "PK - Memory allocation failed" );
 800c3e6:	4a4a      	ldr	r2, [pc, #296]	; (800c510 <mbedtls_strerror+0x300>)
 800c3e8:	6879      	ldr	r1, [r7, #4]
 800c3ea:	68b8      	ldr	r0, [r7, #8]
 800c3ec:	f011 fc44 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_TYPE_MISMATCH) )
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800c3f6:	d104      	bne.n	800c402 <mbedtls_strerror+0x1f2>
            mbedtls_snprintf( buf, buflen, "PK - Type mismatch, eg attempt to encrypt with an ECDSA key" );
 800c3f8:	4a46      	ldr	r2, [pc, #280]	; (800c514 <mbedtls_strerror+0x304>)
 800c3fa:	6879      	ldr	r1, [r7, #4]
 800c3fc:	68b8      	ldr	r0, [r7, #8]
 800c3fe:	f011 fc3b 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_BAD_INPUT_DATA) )
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800c408:	d104      	bne.n	800c414 <mbedtls_strerror+0x204>
            mbedtls_snprintf( buf, buflen, "PK - Bad input parameters to function" );
 800c40a:	4a43      	ldr	r2, [pc, #268]	; (800c518 <mbedtls_strerror+0x308>)
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	68b8      	ldr	r0, [r7, #8]
 800c410:	f011 fc32 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_FILE_IO_ERROR) )
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 800c41a:	d104      	bne.n	800c426 <mbedtls_strerror+0x216>
            mbedtls_snprintf( buf, buflen, "PK - Read/write of file failed" );
 800c41c:	4a3f      	ldr	r2, [pc, #252]	; (800c51c <mbedtls_strerror+0x30c>)
 800c41e:	6879      	ldr	r1, [r7, #4]
 800c420:	68b8      	ldr	r0, [r7, #8]
 800c422:	f011 fc29 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION) )
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f5b3 5f76 	cmp.w	r3, #15744	; 0x3d80
 800c42c:	d104      	bne.n	800c438 <mbedtls_strerror+0x228>
            mbedtls_snprintf( buf, buflen, "PK - Unsupported key version" );
 800c42e:	4a3c      	ldr	r2, [pc, #240]	; (800c520 <mbedtls_strerror+0x310>)
 800c430:	6879      	ldr	r1, [r7, #4]
 800c432:	68b8      	ldr	r0, [r7, #8]
 800c434:	f011 fc20 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT) )
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f5b3 5f74 	cmp.w	r3, #15616	; 0x3d00
 800c43e:	d104      	bne.n	800c44a <mbedtls_strerror+0x23a>
            mbedtls_snprintf( buf, buflen, "PK - Invalid key tag or value" );
 800c440:	4a38      	ldr	r2, [pc, #224]	; (800c524 <mbedtls_strerror+0x314>)
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	68b8      	ldr	r0, [r7, #8]
 800c446:	f011 fc17 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG) )
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	f5b3 5f72 	cmp.w	r3, #15488	; 0x3c80
 800c450:	d104      	bne.n	800c45c <mbedtls_strerror+0x24c>
            mbedtls_snprintf( buf, buflen, "PK - Key algorithm is unsupported (only RSA and EC are supported)" );
 800c452:	4a35      	ldr	r2, [pc, #212]	; (800c528 <mbedtls_strerror+0x318>)
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	68b8      	ldr	r0, [r7, #8]
 800c458:	f011 fc0e 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED) )
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800c462:	d104      	bne.n	800c46e <mbedtls_strerror+0x25e>
            mbedtls_snprintf( buf, buflen, "PK - Private key password can't be empty" );
 800c464:	4a31      	ldr	r2, [pc, #196]	; (800c52c <mbedtls_strerror+0x31c>)
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	68b8      	ldr	r0, [r7, #8]
 800c46a:	f011 fc05 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH) )
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f5b3 5f6e 	cmp.w	r3, #15232	; 0x3b80
 800c474:	d104      	bne.n	800c480 <mbedtls_strerror+0x270>
            mbedtls_snprintf( buf, buflen, "PK - Given private key password does not allow for correct decryption" );
 800c476:	4a2e      	ldr	r2, [pc, #184]	; (800c530 <mbedtls_strerror+0x320>)
 800c478:	6879      	ldr	r1, [r7, #4]
 800c47a:	68b8      	ldr	r0, [r7, #8]
 800c47c:	f011 fbfc 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_PUBKEY) )
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f5b3 5f6c 	cmp.w	r3, #15104	; 0x3b00
 800c486:	d104      	bne.n	800c492 <mbedtls_strerror+0x282>
            mbedtls_snprintf( buf, buflen, "PK - The pubkey tag or value is invalid (only RSA and EC are supported)" );
 800c488:	4a2a      	ldr	r2, [pc, #168]	; (800c534 <mbedtls_strerror+0x324>)
 800c48a:	6879      	ldr	r1, [r7, #4]
 800c48c:	68b8      	ldr	r0, [r7, #8]
 800c48e:	f011 fbf3 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_ALG) )
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f5b3 5f6a 	cmp.w	r3, #14976	; 0x3a80
 800c498:	d104      	bne.n	800c4a4 <mbedtls_strerror+0x294>
            mbedtls_snprintf( buf, buflen, "PK - The algorithm tag or value is invalid" );
 800c49a:	4a27      	ldr	r2, [pc, #156]	; (800c538 <mbedtls_strerror+0x328>)
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	68b8      	ldr	r0, [r7, #8]
 800c4a0:	f011 fbea 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE) )
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 800c4aa:	d149      	bne.n	800c540 <mbedtls_strerror+0x330>
            mbedtls_snprintf( buf, buflen, "PK - Elliptic curve is unsupported (only NIST curves are supported)" );
 800c4ac:	4a23      	ldr	r2, [pc, #140]	; (800c53c <mbedtls_strerror+0x32c>)
 800c4ae:	6879      	ldr	r1, [r7, #4]
 800c4b0:	68b8      	ldr	r0, [r7, #8]
 800c4b2:	f011 fbe1 	bl	801dc78 <sniprintf>
 800c4b6:	e043      	b.n	800c540 <mbedtls_strerror+0x330>
 800c4b8:	0801f2e4 	.word	0x0801f2e4
 800c4bc:	0801f314 	.word	0x0801f314
 800c4c0:	0801f334 	.word	0x0801f334
 800c4c4:	0801f358 	.word	0x0801f358
 800c4c8:	0801f398 	.word	0x0801f398
 800c4cc:	0801f3cc 	.word	0x0801f3cc
 800c4d0:	0801f3fc 	.word	0x0801f3fc
 800c4d4:	0801f440 	.word	0x0801f440
 800c4d8:	0801f46c 	.word	0x0801f46c
 800c4dc:	0801f498 	.word	0x0801f498
 800c4e0:	0801f4c0 	.word	0x0801f4c0
 800c4e4:	0801f4e0 	.word	0x0801f4e0
 800c4e8:	0801f508 	.word	0x0801f508
 800c4ec:	0801f52c 	.word	0x0801f52c
 800c4f0:	0801f550 	.word	0x0801f550
 800c4f4:	0801f574 	.word	0x0801f574
 800c4f8:	0801f594 	.word	0x0801f594
 800c4fc:	0801f5b8 	.word	0x0801f5b8
 800c500:	0801f5e4 	.word	0x0801f5e4
 800c504:	0801f610 	.word	0x0801f610
 800c508:	0801f658 	.word	0x0801f658
 800c50c:	0801f698 	.word	0x0801f698
 800c510:	0801f6c0 	.word	0x0801f6c0
 800c514:	0801f6e0 	.word	0x0801f6e0
 800c518:	0801f71c 	.word	0x0801f71c
 800c51c:	0801f744 	.word	0x0801f744
 800c520:	0801f764 	.word	0x0801f764
 800c524:	0801f784 	.word	0x0801f784
 800c528:	0801f7a4 	.word	0x0801f7a4
 800c52c:	0801f7e8 	.word	0x0801f7e8
 800c530:	0801f814 	.word	0x0801f814
 800c534:	0801f85c 	.word	0x0801f85c
 800c538:	0801f8a4 	.word	0x0801f8a4
 800c53c:	0801f8d0 	.word	0x0801f8d0
        if( use_ret == -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE) )
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 800c546:	d104      	bne.n	800c552 <mbedtls_strerror+0x342>
            mbedtls_snprintf( buf, buflen, "PK - Unavailable feature, e.g. RSA disabled for RSA key" );
 800c548:	4a80      	ldr	r2, [pc, #512]	; (800c74c <mbedtls_strerror+0x53c>)
 800c54a:	6879      	ldr	r1, [r7, #4]
 800c54c:	68b8      	ldr	r0, [r7, #8]
 800c54e:	f011 fb93 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH) )
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f5b3 5f64 	cmp.w	r3, #14592	; 0x3900
 800c558:	d104      	bne.n	800c564 <mbedtls_strerror+0x354>
            mbedtls_snprintf( buf, buflen, "PK - The signature is valid but its length is less than expected" );
 800c55a:	4a7d      	ldr	r2, [pc, #500]	; (800c750 <mbedtls_strerror+0x540>)
 800c55c:	6879      	ldr	r1, [r7, #4]
 800c55e:	68b8      	ldr	r0, [r7, #8]
 800c560:	f011 fb8a 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_HW_ACCEL_FAILED) )
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	f5b3 5f62 	cmp.w	r3, #14464	; 0x3880
 800c56a:	d104      	bne.n	800c576 <mbedtls_strerror+0x366>
            mbedtls_snprintf( buf, buflen, "PK - PK hardware accelerator failed" );
 800c56c:	4a79      	ldr	r2, [pc, #484]	; (800c754 <mbedtls_strerror+0x544>)
 800c56e:	6879      	ldr	r1, [r7, #4]
 800c570:	68b8      	ldr	r0, [r7, #8]
 800c572:	f011 fb81 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH) )
            mbedtls_snprintf( buf, buflen, "PKCS5 - Given private key password does not allow for correct decryption" );
#endif /* MBEDTLS_PKCS5_C */

#if defined(MBEDTLS_RSA_C)
        if( use_ret == -(MBEDTLS_ERR_RSA_BAD_INPUT_DATA) )
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	f5b3 4f81 	cmp.w	r3, #16512	; 0x4080
 800c57c:	d104      	bne.n	800c588 <mbedtls_strerror+0x378>
            mbedtls_snprintf( buf, buflen, "RSA - Bad input parameters to function" );
 800c57e:	4a76      	ldr	r2, [pc, #472]	; (800c758 <mbedtls_strerror+0x548>)
 800c580:	6879      	ldr	r1, [r7, #4]
 800c582:	68b8      	ldr	r0, [r7, #8]
 800c584:	f011 fb78 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_INVALID_PADDING) )
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	f5b3 4f82 	cmp.w	r3, #16640	; 0x4100
 800c58e:	d104      	bne.n	800c59a <mbedtls_strerror+0x38a>
            mbedtls_snprintf( buf, buflen, "RSA - Input data contains invalid padding and is rejected" );
 800c590:	4a72      	ldr	r2, [pc, #456]	; (800c75c <mbedtls_strerror+0x54c>)
 800c592:	6879      	ldr	r1, [r7, #4]
 800c594:	68b8      	ldr	r0, [r7, #8]
 800c596:	f011 fb6f 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_GEN_FAILED) )
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f5b3 4f83 	cmp.w	r3, #16768	; 0x4180
 800c5a0:	d104      	bne.n	800c5ac <mbedtls_strerror+0x39c>
            mbedtls_snprintf( buf, buflen, "RSA - Something failed during generation of a key" );
 800c5a2:	4a6f      	ldr	r2, [pc, #444]	; (800c760 <mbedtls_strerror+0x550>)
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	68b8      	ldr	r0, [r7, #8]
 800c5a8:	f011 fb66 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_CHECK_FAILED) )
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 800c5b2:	d104      	bne.n	800c5be <mbedtls_strerror+0x3ae>
            mbedtls_snprintf( buf, buflen, "RSA - Key failed to pass the validity check of the library" );
 800c5b4:	4a6b      	ldr	r2, [pc, #428]	; (800c764 <mbedtls_strerror+0x554>)
 800c5b6:	6879      	ldr	r1, [r7, #4]
 800c5b8:	68b8      	ldr	r0, [r7, #8]
 800c5ba:	f011 fb5d 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_PUBLIC_FAILED) )
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	f5b3 4f85 	cmp.w	r3, #17024	; 0x4280
 800c5c4:	d104      	bne.n	800c5d0 <mbedtls_strerror+0x3c0>
            mbedtls_snprintf( buf, buflen, "RSA - The public key operation failed" );
 800c5c6:	4a68      	ldr	r2, [pc, #416]	; (800c768 <mbedtls_strerror+0x558>)
 800c5c8:	6879      	ldr	r1, [r7, #4]
 800c5ca:	68b8      	ldr	r0, [r7, #8]
 800c5cc:	f011 fb54 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_PRIVATE_FAILED) )
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 800c5d6:	d104      	bne.n	800c5e2 <mbedtls_strerror+0x3d2>
            mbedtls_snprintf( buf, buflen, "RSA - The private key operation failed" );
 800c5d8:	4a64      	ldr	r2, [pc, #400]	; (800c76c <mbedtls_strerror+0x55c>)
 800c5da:	6879      	ldr	r1, [r7, #4]
 800c5dc:	68b8      	ldr	r0, [r7, #8]
 800c5de:	f011 fb4b 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_VERIFY_FAILED) )
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f5b3 4f87 	cmp.w	r3, #17280	; 0x4380
 800c5e8:	d104      	bne.n	800c5f4 <mbedtls_strerror+0x3e4>
            mbedtls_snprintf( buf, buflen, "RSA - The PKCS#1 verification failed" );
 800c5ea:	4a61      	ldr	r2, [pc, #388]	; (800c770 <mbedtls_strerror+0x560>)
 800c5ec:	6879      	ldr	r1, [r7, #4]
 800c5ee:	68b8      	ldr	r0, [r7, #8]
 800c5f0:	f011 fb42 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE) )
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800c5fa:	d104      	bne.n	800c606 <mbedtls_strerror+0x3f6>
            mbedtls_snprintf( buf, buflen, "RSA - The output buffer for decryption is not large enough" );
 800c5fc:	4a5d      	ldr	r2, [pc, #372]	; (800c774 <mbedtls_strerror+0x564>)
 800c5fe:	6879      	ldr	r1, [r7, #4]
 800c600:	68b8      	ldr	r0, [r7, #8]
 800c602:	f011 fb39 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_RNG_FAILED) )
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	f5b3 4f89 	cmp.w	r3, #17536	; 0x4480
 800c60c:	d104      	bne.n	800c618 <mbedtls_strerror+0x408>
            mbedtls_snprintf( buf, buflen, "RSA - The random generator failed to generate non-zeros" );
 800c60e:	4a5a      	ldr	r2, [pc, #360]	; (800c778 <mbedtls_strerror+0x568>)
 800c610:	6879      	ldr	r1, [r7, #4]
 800c612:	68b8      	ldr	r0, [r7, #8]
 800c614:	f011 fb30 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION) )
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	f5b3 4f8a 	cmp.w	r3, #17664	; 0x4500
 800c61e:	d104      	bne.n	800c62a <mbedtls_strerror+0x41a>
            mbedtls_snprintf( buf, buflen, "RSA - The implementation does not offer the requested operation, for example, because of security violations or lack of functionality" );
 800c620:	4a56      	ldr	r2, [pc, #344]	; (800c77c <mbedtls_strerror+0x56c>)
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	68b8      	ldr	r0, [r7, #8]
 800c626:	f011 fb27 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_RSA_HW_ACCEL_FAILED) )
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f5b3 4f8b 	cmp.w	r3, #17792	; 0x4580
 800c630:	d104      	bne.n	800c63c <mbedtls_strerror+0x42c>
            mbedtls_snprintf( buf, buflen, "RSA - RSA hardware accelerator failed" );
 800c632:	4a53      	ldr	r2, [pc, #332]	; (800c780 <mbedtls_strerror+0x570>)
 800c634:	6879      	ldr	r1, [r7, #4]
 800c636:	68b8      	ldr	r0, [r7, #8]
 800c638:	f011 fb1e 	bl	801dc78 <sniprintf>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_SSL_TLS_C)
        if( use_ret == -(MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE) )
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
 800c642:	d104      	bne.n	800c64e <mbedtls_strerror+0x43e>
            mbedtls_snprintf( buf, buflen, "SSL - The requested feature is not available" );
 800c644:	4a4f      	ldr	r2, [pc, #316]	; (800c784 <mbedtls_strerror+0x574>)
 800c646:	6879      	ldr	r1, [r7, #4]
 800c648:	68b8      	ldr	r0, [r7, #8]
 800c64a:	f011 fb15 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_INPUT_DATA) )
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f5b3 4fe2 	cmp.w	r3, #28928	; 0x7100
 800c654:	d104      	bne.n	800c660 <mbedtls_strerror+0x450>
            mbedtls_snprintf( buf, buflen, "SSL - Bad input parameters to function" );
 800c656:	4a4c      	ldr	r2, [pc, #304]	; (800c788 <mbedtls_strerror+0x578>)
 800c658:	6879      	ldr	r1, [r7, #4]
 800c65a:	68b8      	ldr	r0, [r7, #8]
 800c65c:	f011 fb0c 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_MAC) )
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f5b3 4fe3 	cmp.w	r3, #29056	; 0x7180
 800c666:	d104      	bne.n	800c672 <mbedtls_strerror+0x462>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of the message MAC failed" );
 800c668:	4a48      	ldr	r2, [pc, #288]	; (800c78c <mbedtls_strerror+0x57c>)
 800c66a:	6879      	ldr	r1, [r7, #4]
 800c66c:	68b8      	ldr	r0, [r7, #8]
 800c66e:	f011 fb03 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_RECORD) )
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 800c678:	d104      	bne.n	800c684 <mbedtls_strerror+0x474>
            mbedtls_snprintf( buf, buflen, "SSL - An invalid SSL record was received" );
 800c67a:	4a45      	ldr	r2, [pc, #276]	; (800c790 <mbedtls_strerror+0x580>)
 800c67c:	6879      	ldr	r1, [r7, #4]
 800c67e:	68b8      	ldr	r0, [r7, #8]
 800c680:	f011 fafa 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CONN_EOF) )
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	f5b3 4fe5 	cmp.w	r3, #29312	; 0x7280
 800c68a:	d104      	bne.n	800c696 <mbedtls_strerror+0x486>
            mbedtls_snprintf( buf, buflen, "SSL - The connection indicated an EOF" );
 800c68c:	4a41      	ldr	r2, [pc, #260]	; (800c794 <mbedtls_strerror+0x584>)
 800c68e:	6879      	ldr	r1, [r7, #4]
 800c690:	68b8      	ldr	r0, [r7, #8]
 800c692:	f011 faf1 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_CIPHER) )
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 800c69c:	d104      	bne.n	800c6a8 <mbedtls_strerror+0x498>
            mbedtls_snprintf( buf, buflen, "SSL - An unknown cipher was received" );
 800c69e:	4a3e      	ldr	r2, [pc, #248]	; (800c798 <mbedtls_strerror+0x588>)
 800c6a0:	6879      	ldr	r1, [r7, #4]
 800c6a2:	68b8      	ldr	r0, [r7, #8]
 800c6a4:	f011 fae8 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN) )
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	f5b3 4fe7 	cmp.w	r3, #29568	; 0x7380
 800c6ae:	d104      	bne.n	800c6ba <mbedtls_strerror+0x4aa>
            mbedtls_snprintf( buf, buflen, "SSL - The server has no ciphersuites in common with the client" );
 800c6b0:	4a3a      	ldr	r2, [pc, #232]	; (800c79c <mbedtls_strerror+0x58c>)
 800c6b2:	6879      	ldr	r1, [r7, #4]
 800c6b4:	68b8      	ldr	r0, [r7, #8]
 800c6b6:	f011 fadf 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_RNG) )
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f5b3 4fe8 	cmp.w	r3, #29696	; 0x7400
 800c6c0:	d104      	bne.n	800c6cc <mbedtls_strerror+0x4bc>
            mbedtls_snprintf( buf, buflen, "SSL - No RNG was provided to the SSL module" );
 800c6c2:	4a37      	ldr	r2, [pc, #220]	; (800c7a0 <mbedtls_strerror+0x590>)
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	68b8      	ldr	r0, [r7, #8]
 800c6c8:	f011 fad6 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE) )
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	f5b3 4fe9 	cmp.w	r3, #29824	; 0x7480
 800c6d2:	d104      	bne.n	800c6de <mbedtls_strerror+0x4ce>
            mbedtls_snprintf( buf, buflen, "SSL - No client certification received from the client, but required by the authentication mode" );
 800c6d4:	4a33      	ldr	r2, [pc, #204]	; (800c7a4 <mbedtls_strerror+0x594>)
 800c6d6:	6879      	ldr	r1, [r7, #4]
 800c6d8:	68b8      	ldr	r0, [r7, #8]
 800c6da:	f011 facd 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE) )
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f5b3 4fea 	cmp.w	r3, #29952	; 0x7500
 800c6e4:	d104      	bne.n	800c6f0 <mbedtls_strerror+0x4e0>
            mbedtls_snprintf( buf, buflen, "SSL - Our own certificate(s) is/are too large to send in an SSL message" );
 800c6e6:	4a30      	ldr	r2, [pc, #192]	; (800c7a8 <mbedtls_strerror+0x598>)
 800c6e8:	6879      	ldr	r1, [r7, #4]
 800c6ea:	68b8      	ldr	r0, [r7, #8]
 800c6ec:	f011 fac4 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED) )
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f5b3 4feb 	cmp.w	r3, #30080	; 0x7580
 800c6f6:	d104      	bne.n	800c702 <mbedtls_strerror+0x4f2>
            mbedtls_snprintf( buf, buflen, "SSL - The own certificate is not set, but needed by the server" );
 800c6f8:	4a2c      	ldr	r2, [pc, #176]	; (800c7ac <mbedtls_strerror+0x59c>)
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	68b8      	ldr	r0, [r7, #8]
 800c6fe:	f011 fabb 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED) )
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	f5b3 4fec 	cmp.w	r3, #30208	; 0x7600
 800c708:	d104      	bne.n	800c714 <mbedtls_strerror+0x504>
            mbedtls_snprintf( buf, buflen, "SSL - The own private key or pre-shared key is not set, but needed" );
 800c70a:	4a29      	ldr	r2, [pc, #164]	; (800c7b0 <mbedtls_strerror+0x5a0>)
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	68b8      	ldr	r0, [r7, #8]
 800c710:	f011 fab2 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED) )
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	f5b3 4fed 	cmp.w	r3, #30336	; 0x7680
 800c71a:	d104      	bne.n	800c726 <mbedtls_strerror+0x516>
            mbedtls_snprintf( buf, buflen, "SSL - No CA Chain is set, but required to operate" );
 800c71c:	4a25      	ldr	r2, [pc, #148]	; (800c7b4 <mbedtls_strerror+0x5a4>)
 800c71e:	6879      	ldr	r1, [r7, #4]
 800c720:	68b8      	ldr	r0, [r7, #8]
 800c722:	f011 faa9 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE) )
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f5b3 4fee 	cmp.w	r3, #30464	; 0x7700
 800c72c:	d104      	bne.n	800c738 <mbedtls_strerror+0x528>
            mbedtls_snprintf( buf, buflen, "SSL - An unexpected message was received from our peer" );
 800c72e:	4a22      	ldr	r2, [pc, #136]	; (800c7b8 <mbedtls_strerror+0x5a8>)
 800c730:	6879      	ldr	r1, [r7, #4]
 800c732:	68b8      	ldr	r0, [r7, #8]
 800c734:	f011 faa0 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE) )
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f5b3 4fef 	cmp.w	r3, #30592	; 0x7780
 800c73e:	d13f      	bne.n	800c7c0 <mbedtls_strerror+0x5b0>
        {
            mbedtls_snprintf( buf, buflen, "SSL - A fatal alert message was received from our peer" );
 800c740:	4a1e      	ldr	r2, [pc, #120]	; (800c7bc <mbedtls_strerror+0x5ac>)
 800c742:	6879      	ldr	r1, [r7, #4]
 800c744:	68b8      	ldr	r0, [r7, #8]
 800c746:	f011 fa97 	bl	801dc78 <sniprintf>
            return;
 800c74a:	e3f5      	b.n	800cf38 <mbedtls_strerror+0xd28>
 800c74c:	0801f914 	.word	0x0801f914
 800c750:	0801f94c 	.word	0x0801f94c
 800c754:	0801f990 	.word	0x0801f990
 800c758:	0801f9b4 	.word	0x0801f9b4
 800c75c:	0801f9dc 	.word	0x0801f9dc
 800c760:	0801fa18 	.word	0x0801fa18
 800c764:	0801fa4c 	.word	0x0801fa4c
 800c768:	0801fa88 	.word	0x0801fa88
 800c76c:	0801fab0 	.word	0x0801fab0
 800c770:	0801fad8 	.word	0x0801fad8
 800c774:	0801fb00 	.word	0x0801fb00
 800c778:	0801fb3c 	.word	0x0801fb3c
 800c77c:	0801fb74 	.word	0x0801fb74
 800c780:	0801fbfc 	.word	0x0801fbfc
 800c784:	0801fc24 	.word	0x0801fc24
 800c788:	0801fc54 	.word	0x0801fc54
 800c78c:	0801fc7c 	.word	0x0801fc7c
 800c790:	0801fcac 	.word	0x0801fcac
 800c794:	0801fcd8 	.word	0x0801fcd8
 800c798:	0801fd00 	.word	0x0801fd00
 800c79c:	0801fd28 	.word	0x0801fd28
 800c7a0:	0801fd68 	.word	0x0801fd68
 800c7a4:	0801fd94 	.word	0x0801fd94
 800c7a8:	0801fdf4 	.word	0x0801fdf4
 800c7ac:	0801fe3c 	.word	0x0801fe3c
 800c7b0:	0801fe7c 	.word	0x0801fe7c
 800c7b4:	0801fec0 	.word	0x0801fec0
 800c7b8:	0801fef4 	.word	0x0801fef4
 800c7bc:	0801ff2c 	.word	0x0801ff2c
        }
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED) )
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800c7c6:	d104      	bne.n	800c7d2 <mbedtls_strerror+0x5c2>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of our peer failed" );
 800c7c8:	4a97      	ldr	r2, [pc, #604]	; (800ca28 <mbedtls_strerror+0x818>)
 800c7ca:	6879      	ldr	r1, [r7, #4]
 800c7cc:	68b8      	ldr	r0, [r7, #8]
 800c7ce:	f011 fa53 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY) )
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f5b3 4ff1 	cmp.w	r3, #30848	; 0x7880
 800c7d8:	d104      	bne.n	800c7e4 <mbedtls_strerror+0x5d4>
            mbedtls_snprintf( buf, buflen, "SSL - The peer notified us that the connection is going to be closed" );
 800c7da:	4a94      	ldr	r2, [pc, #592]	; (800ca2c <mbedtls_strerror+0x81c>)
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	68b8      	ldr	r0, [r7, #8]
 800c7e0:	f011 fa4a 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO) )
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f5b3 4ff2 	cmp.w	r3, #30976	; 0x7900
 800c7ea:	d104      	bne.n	800c7f6 <mbedtls_strerror+0x5e6>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientHello handshake message failed" );
 800c7ec:	4a90      	ldr	r2, [pc, #576]	; (800ca30 <mbedtls_strerror+0x820>)
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	68b8      	ldr	r0, [r7, #8]
 800c7f2:	f011 fa41 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO) )
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f5b3 4ff3 	cmp.w	r3, #31104	; 0x7980
 800c7fc:	d104      	bne.n	800c808 <mbedtls_strerror+0x5f8>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHello handshake message failed" );
 800c7fe:	4a8d      	ldr	r2, [pc, #564]	; (800ca34 <mbedtls_strerror+0x824>)
 800c800:	6879      	ldr	r1, [r7, #4]
 800c802:	68b8      	ldr	r0, [r7, #8]
 800c804:	f011 fa38 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE) )
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	f5b3 4ff4 	cmp.w	r3, #31232	; 0x7a00
 800c80e:	d104      	bne.n	800c81a <mbedtls_strerror+0x60a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Certificate handshake message failed" );
 800c810:	4a89      	ldr	r2, [pc, #548]	; (800ca38 <mbedtls_strerror+0x828>)
 800c812:	6879      	ldr	r1, [r7, #4]
 800c814:	68b8      	ldr	r0, [r7, #8]
 800c816:	f011 fa2f 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST) )
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f5b3 4ff5 	cmp.w	r3, #31360	; 0x7a80
 800c820:	d104      	bne.n	800c82c <mbedtls_strerror+0x61c>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateRequest handshake message failed" );
 800c822:	4a86      	ldr	r2, [pc, #536]	; (800ca3c <mbedtls_strerror+0x82c>)
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	68b8      	ldr	r0, [r7, #8]
 800c828:	f011 fa26 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE) )
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f5b3 4ff6 	cmp.w	r3, #31488	; 0x7b00
 800c832:	d104      	bne.n	800c83e <mbedtls_strerror+0x62e>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerKeyExchange handshake message failed" );
 800c834:	4a82      	ldr	r2, [pc, #520]	; (800ca40 <mbedtls_strerror+0x830>)
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	68b8      	ldr	r0, [r7, #8]
 800c83a:	f011 fa1d 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE) )
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f5b3 4ff7 	cmp.w	r3, #31616	; 0x7b80
 800c844:	d104      	bne.n	800c850 <mbedtls_strerror+0x640>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHelloDone handshake message failed" );
 800c846:	4a7f      	ldr	r2, [pc, #508]	; (800ca44 <mbedtls_strerror+0x834>)
 800c848:	6879      	ldr	r1, [r7, #4]
 800c84a:	68b8      	ldr	r0, [r7, #8]
 800c84c:	f011 fa14 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE) )
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 800c856:	d104      	bne.n	800c862 <mbedtls_strerror+0x652>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed" );
 800c858:	4a7b      	ldr	r2, [pc, #492]	; (800ca48 <mbedtls_strerror+0x838>)
 800c85a:	6879      	ldr	r1, [r7, #4]
 800c85c:	68b8      	ldr	r0, [r7, #8]
 800c85e:	f011 fa0b 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP) )
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f5b3 4ff9 	cmp.w	r3, #31872	; 0x7c80
 800c868:	d104      	bne.n	800c874 <mbedtls_strerror+0x664>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public" );
 800c86a:	4a78      	ldr	r2, [pc, #480]	; (800ca4c <mbedtls_strerror+0x83c>)
 800c86c:	6879      	ldr	r1, [r7, #4]
 800c86e:	68b8      	ldr	r0, [r7, #8]
 800c870:	f011 fa02 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS) )
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800c87a:	d104      	bne.n	800c886 <mbedtls_strerror+0x676>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret" );
 800c87c:	4a74      	ldr	r2, [pc, #464]	; (800ca50 <mbedtls_strerror+0x840>)
 800c87e:	6879      	ldr	r1, [r7, #4]
 800c880:	68b8      	ldr	r0, [r7, #8]
 800c882:	f011 f9f9 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY) )
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f5b3 4ffb 	cmp.w	r3, #32128	; 0x7d80
 800c88c:	d104      	bne.n	800c898 <mbedtls_strerror+0x688>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateVerify handshake message failed" );
 800c88e:	4a71      	ldr	r2, [pc, #452]	; (800ca54 <mbedtls_strerror+0x844>)
 800c890:	6879      	ldr	r1, [r7, #4]
 800c892:	68b8      	ldr	r0, [r7, #8]
 800c894:	f011 f9f0 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC) )
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 800c89e:	d104      	bne.n	800c8aa <mbedtls_strerror+0x69a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ChangeCipherSpec handshake message failed" );
 800c8a0:	4a6d      	ldr	r2, [pc, #436]	; (800ca58 <mbedtls_strerror+0x848>)
 800c8a2:	6879      	ldr	r1, [r7, #4]
 800c8a4:	68b8      	ldr	r0, [r7, #8]
 800c8a6:	f011 f9e7 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_FINISHED) )
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f5b3 4ffd 	cmp.w	r3, #32384	; 0x7e80
 800c8b0:	d104      	bne.n	800c8bc <mbedtls_strerror+0x6ac>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Finished handshake message failed" );
 800c8b2:	4a6a      	ldr	r2, [pc, #424]	; (800ca5c <mbedtls_strerror+0x84c>)
 800c8b4:	6879      	ldr	r1, [r7, #4]
 800c8b6:	68b8      	ldr	r0, [r7, #8]
 800c8b8:	f011 f9de 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_ALLOC_FAILED) )
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 800c8c2:	d104      	bne.n	800c8ce <mbedtls_strerror+0x6be>
            mbedtls_snprintf( buf, buflen, "SSL - Memory allocation failed" );
 800c8c4:	4a66      	ldr	r2, [pc, #408]	; (800ca60 <mbedtls_strerror+0x850>)
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	68b8      	ldr	r0, [r7, #8]
 800c8ca:	f011 f9d5 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FAILED) )
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	f5b3 4fff 	cmp.w	r3, #32640	; 0x7f80
 800c8d4:	d104      	bne.n	800c8e0 <mbedtls_strerror+0x6d0>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function returned with error" );
 800c8d6:	4a63      	ldr	r2, [pc, #396]	; (800ca64 <mbedtls_strerror+0x854>)
 800c8d8:	6879      	ldr	r1, [r7, #4]
 800c8da:	68b8      	ldr	r0, [r7, #8]
 800c8dc:	f011 f9cc 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH) )
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f5b3 4fdf 	cmp.w	r3, #28544	; 0x6f80
 800c8e6:	d104      	bne.n	800c8f2 <mbedtls_strerror+0x6e2>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function skipped / left alone data" );
 800c8e8:	4a5f      	ldr	r2, [pc, #380]	; (800ca68 <mbedtls_strerror+0x858>)
 800c8ea:	6879      	ldr	r1, [r7, #4]
 800c8ec:	68b8      	ldr	r0, [r7, #8]
 800c8ee:	f011 f9c3 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_COMPRESSION_FAILED) )
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f5b3 4fde 	cmp.w	r3, #28416	; 0x6f00
 800c8f8:	d104      	bne.n	800c904 <mbedtls_strerror+0x6f4>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the compression / decompression failed" );
 800c8fa:	4a5c      	ldr	r2, [pc, #368]	; (800ca6c <mbedtls_strerror+0x85c>)
 800c8fc:	6879      	ldr	r1, [r7, #4]
 800c8fe:	68b8      	ldr	r0, [r7, #8]
 800c900:	f011 f9ba 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION) )
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f5b3 4fdd 	cmp.w	r3, #28288	; 0x6e80
 800c90a:	d104      	bne.n	800c916 <mbedtls_strerror+0x706>
            mbedtls_snprintf( buf, buflen, "SSL - Handshake protocol not within min/max boundaries" );
 800c90c:	4a58      	ldr	r2, [pc, #352]	; (800ca70 <mbedtls_strerror+0x860>)
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	68b8      	ldr	r0, [r7, #8]
 800c912:	f011 f9b1 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET) )
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	f5b3 4fdc 	cmp.w	r3, #28160	; 0x6e00
 800c91c:	d104      	bne.n	800c928 <mbedtls_strerror+0x718>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the NewSessionTicket handshake message failed" );
 800c91e:	4a55      	ldr	r2, [pc, #340]	; (800ca74 <mbedtls_strerror+0x864>)
 800c920:	6879      	ldr	r1, [r7, #4]
 800c922:	68b8      	ldr	r0, [r7, #8]
 800c924:	f011 f9a8 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED) )
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f5b3 4fdb 	cmp.w	r3, #28032	; 0x6d80
 800c92e:	d104      	bne.n	800c93a <mbedtls_strerror+0x72a>
            mbedtls_snprintf( buf, buflen, "SSL - Session ticket has expired" );
 800c930:	4a51      	ldr	r2, [pc, #324]	; (800ca78 <mbedtls_strerror+0x868>)
 800c932:	6879      	ldr	r1, [r7, #4]
 800c934:	68b8      	ldr	r0, [r7, #8]
 800c936:	f011 f99f 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH) )
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	f5b3 4fda 	cmp.w	r3, #27904	; 0x6d00
 800c940:	d104      	bne.n	800c94c <mbedtls_strerror+0x73c>
            mbedtls_snprintf( buf, buflen, "SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)" );
 800c942:	4a4e      	ldr	r2, [pc, #312]	; (800ca7c <mbedtls_strerror+0x86c>)
 800c944:	6879      	ldr	r1, [r7, #4]
 800c946:	68b8      	ldr	r0, [r7, #8]
 800c948:	f011 f996 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY) )
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	f5b3 4fd9 	cmp.w	r3, #27776	; 0x6c80
 800c952:	d104      	bne.n	800c95e <mbedtls_strerror+0x74e>
            mbedtls_snprintf( buf, buflen, "SSL - Unknown identity received (eg, PSK identity)" );
 800c954:	4a4a      	ldr	r2, [pc, #296]	; (800ca80 <mbedtls_strerror+0x870>)
 800c956:	6879      	ldr	r1, [r7, #4]
 800c958:	68b8      	ldr	r0, [r7, #8]
 800c95a:	f011 f98d 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INTERNAL_ERROR) )
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	f5b3 4fd8 	cmp.w	r3, #27648	; 0x6c00
 800c964:	d104      	bne.n	800c970 <mbedtls_strerror+0x760>
            mbedtls_snprintf( buf, buflen, "SSL - Internal error (eg, unexpected failure in lower-level module)" );
 800c966:	4a47      	ldr	r2, [pc, #284]	; (800ca84 <mbedtls_strerror+0x874>)
 800c968:	6879      	ldr	r1, [r7, #4]
 800c96a:	68b8      	ldr	r0, [r7, #8]
 800c96c:	f011 f984 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_COUNTER_WRAPPING) )
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	f5b3 4fd7 	cmp.w	r3, #27520	; 0x6b80
 800c976:	d104      	bne.n	800c982 <mbedtls_strerror+0x772>
            mbedtls_snprintf( buf, buflen, "SSL - A counter would wrap (eg, too many messages exchanged)" );
 800c978:	4a43      	ldr	r2, [pc, #268]	; (800ca88 <mbedtls_strerror+0x878>)
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	68b8      	ldr	r0, [r7, #8]
 800c97e:	f011 f97b 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO) )
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f5b3 4fd6 	cmp.w	r3, #27392	; 0x6b00
 800c988:	d104      	bne.n	800c994 <mbedtls_strerror+0x784>
            mbedtls_snprintf( buf, buflen, "SSL - Unexpected message at ServerHello in renegotiation" );
 800c98a:	4a40      	ldr	r2, [pc, #256]	; (800ca8c <mbedtls_strerror+0x87c>)
 800c98c:	6879      	ldr	r1, [r7, #4]
 800c98e:	68b8      	ldr	r0, [r7, #8]
 800c990:	f011 f972 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED) )
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	f5b3 4fd5 	cmp.w	r3, #27264	; 0x6a80
 800c99a:	d104      	bne.n	800c9a6 <mbedtls_strerror+0x796>
            mbedtls_snprintf( buf, buflen, "SSL - DTLS client must retry for hello verification" );
 800c99c:	4a3c      	ldr	r2, [pc, #240]	; (800ca90 <mbedtls_strerror+0x880>)
 800c99e:	6879      	ldr	r1, [r7, #4]
 800c9a0:	68b8      	ldr	r0, [r7, #8]
 800c9a2:	f011 f969 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL) )
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f5b3 4fd4 	cmp.w	r3, #27136	; 0x6a00
 800c9ac:	d104      	bne.n	800c9b8 <mbedtls_strerror+0x7a8>
            mbedtls_snprintf( buf, buflen, "SSL - A buffer is too small to receive or write a message" );
 800c9ae:	4a39      	ldr	r2, [pc, #228]	; (800ca94 <mbedtls_strerror+0x884>)
 800c9b0:	6879      	ldr	r1, [r7, #4]
 800c9b2:	68b8      	ldr	r0, [r7, #8]
 800c9b4:	f011 f960 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE) )
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	f5b3 4fd3 	cmp.w	r3, #27008	; 0x6980
 800c9be:	d104      	bne.n	800c9ca <mbedtls_strerror+0x7ba>
            mbedtls_snprintf( buf, buflen, "SSL - None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages)" );
 800c9c0:	4a35      	ldr	r2, [pc, #212]	; (800ca98 <mbedtls_strerror+0x888>)
 800c9c2:	6879      	ldr	r1, [r7, #4]
 800c9c4:	68b8      	ldr	r0, [r7, #8]
 800c9c6:	f011 f957 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_READ) )
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	f5b3 4fd2 	cmp.w	r3, #26880	; 0x6900
 800c9d0:	d104      	bne.n	800c9dc <mbedtls_strerror+0x7cc>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a read call" );
 800c9d2:	4a32      	ldr	r2, [pc, #200]	; (800ca9c <mbedtls_strerror+0x88c>)
 800c9d4:	6879      	ldr	r1, [r7, #4]
 800c9d6:	68b8      	ldr	r0, [r7, #8]
 800c9d8:	f011 f94e 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_WRITE) )
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f5b3 4fd1 	cmp.w	r3, #26752	; 0x6880
 800c9e2:	d104      	bne.n	800c9ee <mbedtls_strerror+0x7de>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a write call" );
 800c9e4:	4a2e      	ldr	r2, [pc, #184]	; (800caa0 <mbedtls_strerror+0x890>)
 800c9e6:	6879      	ldr	r1, [r7, #4]
 800c9e8:	68b8      	ldr	r0, [r7, #8]
 800c9ea:	f011 f945 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_TIMEOUT) )
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
 800c9f4:	d104      	bne.n	800ca00 <mbedtls_strerror+0x7f0>
            mbedtls_snprintf( buf, buflen, "SSL - The operation timed out" );
 800c9f6:	4a2b      	ldr	r2, [pc, #172]	; (800caa4 <mbedtls_strerror+0x894>)
 800c9f8:	6879      	ldr	r1, [r7, #4]
 800c9fa:	68b8      	ldr	r0, [r7, #8]
 800c9fc:	f011 f93c 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CLIENT_RECONNECT) )
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	f5b3 4fcf 	cmp.w	r3, #26496	; 0x6780
 800ca06:	d104      	bne.n	800ca12 <mbedtls_strerror+0x802>
            mbedtls_snprintf( buf, buflen, "SSL - The client initiated a reconnect from the same port" );
 800ca08:	4a27      	ldr	r2, [pc, #156]	; (800caa8 <mbedtls_strerror+0x898>)
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	68b8      	ldr	r0, [r7, #8]
 800ca0e:	f011 f933 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_RECORD) )
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f5b3 4fce 	cmp.w	r3, #26368	; 0x6700
 800ca18:	d14a      	bne.n	800cab0 <mbedtls_strerror+0x8a0>
            mbedtls_snprintf( buf, buflen, "SSL - Record header looks valid but is not expected" );
 800ca1a:	4a24      	ldr	r2, [pc, #144]	; (800caac <mbedtls_strerror+0x89c>)
 800ca1c:	6879      	ldr	r1, [r7, #4]
 800ca1e:	68b8      	ldr	r0, [r7, #8]
 800ca20:	f011 f92a 	bl	801dc78 <sniprintf>
 800ca24:	e044      	b.n	800cab0 <mbedtls_strerror+0x8a0>
 800ca26:	bf00      	nop
 800ca28:	0801ff64 	.word	0x0801ff64
 800ca2c:	0801ff8c 	.word	0x0801ff8c
 800ca30:	0801ffd4 	.word	0x0801ffd4
 800ca34:	08020014 	.word	0x08020014
 800ca38:	08020054 	.word	0x08020054
 800ca3c:	08020094 	.word	0x08020094
 800ca40:	080200d8 	.word	0x080200d8
 800ca44:	0802011c 	.word	0x0802011c
 800ca48:	08020160 	.word	0x08020160
 800ca4c:	080201a4 	.word	0x080201a4
 800ca50:	08020204 	.word	0x08020204
 800ca54:	08020268 	.word	0x08020268
 800ca58:	080202ac 	.word	0x080202ac
 800ca5c:	080202f0 	.word	0x080202f0
 800ca60:	0802032c 	.word	0x0802032c
 800ca64:	0802034c 	.word	0x0802034c
 800ca68:	08020388 	.word	0x08020388
 800ca6c:	080203c8 	.word	0x080203c8
 800ca70:	08020404 	.word	0x08020404
 800ca74:	0802043c 	.word	0x0802043c
 800ca78:	08020480 	.word	0x08020480
 800ca7c:	080204a4 	.word	0x080204a4
 800ca80:	080204fc 	.word	0x080204fc
 800ca84:	08020530 	.word	0x08020530
 800ca88:	08020574 	.word	0x08020574
 800ca8c:	080205b4 	.word	0x080205b4
 800ca90:	080205f0 	.word	0x080205f0
 800ca94:	08020624 	.word	0x08020624
 800ca98:	08020660 	.word	0x08020660
 800ca9c:	080206c4 	.word	0x080206c4
 800caa0:	080206ec 	.word	0x080206ec
 800caa4:	08020714 	.word	0x08020714
 800caa8:	08020734 	.word	0x08020734
 800caac:	08020770 	.word	0x08020770
        if( use_ret == -(MBEDTLS_ERR_SSL_NON_FATAL) )
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	f5b3 4fcd 	cmp.w	r3, #26240	; 0x6680
 800cab6:	d104      	bne.n	800cac2 <mbedtls_strerror+0x8b2>
            mbedtls_snprintf( buf, buflen, "SSL - The alert message received indicates a non-fatal error" );
 800cab8:	4a97      	ldr	r2, [pc, #604]	; (800cd18 <mbedtls_strerror+0xb08>)
 800caba:	6879      	ldr	r1, [r7, #4]
 800cabc:	68b8      	ldr	r0, [r7, #8]
 800cabe:	f011 f8db 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH) )
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f5b3 4fcc 	cmp.w	r3, #26112	; 0x6600
 800cac8:	d104      	bne.n	800cad4 <mbedtls_strerror+0x8c4>
            mbedtls_snprintf( buf, buflen, "SSL - Couldn't set the hash for verifying CertificateVerify" );
 800caca:	4a94      	ldr	r2, [pc, #592]	; (800cd1c <mbedtls_strerror+0xb0c>)
 800cacc:	6879      	ldr	r1, [r7, #4]
 800cace:	68b8      	ldr	r0, [r7, #8]
 800cad0:	f011 f8d2 	bl	801dc78 <sniprintf>
#endif /* MBEDTLS_SSL_TLS_C */

#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)
        if( use_ret == -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE) )
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f5b3 5f02 	cmp.w	r3, #8320	; 0x2080
 800cada:	d104      	bne.n	800cae6 <mbedtls_strerror+0x8d6>
            mbedtls_snprintf( buf, buflen, "X509 - Unavailable feature, e.g. RSA hashing/encryption combination" );
 800cadc:	4a90      	ldr	r2, [pc, #576]	; (800cd20 <mbedtls_strerror+0xb10>)
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	68b8      	ldr	r0, [r7, #8]
 800cae2:	f011 f8c9 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_OID) )
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
 800caec:	d104      	bne.n	800caf8 <mbedtls_strerror+0x8e8>
            mbedtls_snprintf( buf, buflen, "X509 - Requested OID is unknown" );
 800caee:	4a8d      	ldr	r2, [pc, #564]	; (800cd24 <mbedtls_strerror+0xb14>)
 800caf0:	6879      	ldr	r1, [r7, #4]
 800caf2:	68b8      	ldr	r0, [r7, #8]
 800caf4:	f011 f8c0 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_FORMAT) )
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 800cafe:	d104      	bne.n	800cb0a <mbedtls_strerror+0x8fa>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected" );
 800cb00:	4a89      	ldr	r2, [pc, #548]	; (800cd28 <mbedtls_strerror+0xb18>)
 800cb02:	6879      	ldr	r1, [r7, #4]
 800cb04:	68b8      	ldr	r0, [r7, #8]
 800cb06:	f011 f8b7 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_VERSION) )
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 800cb10:	d104      	bne.n	800cb1c <mbedtls_strerror+0x90c>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR version element is invalid" );
 800cb12:	4a86      	ldr	r2, [pc, #536]	; (800cd2c <mbedtls_strerror+0xb1c>)
 800cb14:	6879      	ldr	r1, [r7, #4]
 800cb16:	68b8      	ldr	r0, [r7, #8]
 800cb18:	f011 f8ae 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SERIAL) )
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
 800cb22:	d104      	bne.n	800cb2e <mbedtls_strerror+0x91e>
            mbedtls_snprintf( buf, buflen, "X509 - The serial tag or value is invalid" );
 800cb24:	4a82      	ldr	r2, [pc, #520]	; (800cd30 <mbedtls_strerror+0xb20>)
 800cb26:	6879      	ldr	r1, [r7, #4]
 800cb28:	68b8      	ldr	r0, [r7, #8]
 800cb2a:	f011 f8a5 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_ALG) )
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800cb34:	d104      	bne.n	800cb40 <mbedtls_strerror+0x930>
            mbedtls_snprintf( buf, buflen, "X509 - The algorithm tag or value is invalid" );
 800cb36:	4a7f      	ldr	r2, [pc, #508]	; (800cd34 <mbedtls_strerror+0xb24>)
 800cb38:	6879      	ldr	r1, [r7, #4]
 800cb3a:	68b8      	ldr	r0, [r7, #8]
 800cb3c:	f011 f89c 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_NAME) )
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 800cb46:	d104      	bne.n	800cb52 <mbedtls_strerror+0x942>
            mbedtls_snprintf( buf, buflen, "X509 - The name tag or value is invalid" );
 800cb48:	4a7b      	ldr	r2, [pc, #492]	; (800cd38 <mbedtls_strerror+0xb28>)
 800cb4a:	6879      	ldr	r1, [r7, #4]
 800cb4c:	68b8      	ldr	r0, [r7, #8]
 800cb4e:	f011 f893 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_DATE) )
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800cb58:	d104      	bne.n	800cb64 <mbedtls_strerror+0x954>
            mbedtls_snprintf( buf, buflen, "X509 - The date tag or value is invalid" );
 800cb5a:	4a78      	ldr	r2, [pc, #480]	; (800cd3c <mbedtls_strerror+0xb2c>)
 800cb5c:	6879      	ldr	r1, [r7, #4]
 800cb5e:	68b8      	ldr	r0, [r7, #8]
 800cb60:	f011 f88a 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SIGNATURE) )
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	f5b3 5f12 	cmp.w	r3, #9344	; 0x2480
 800cb6a:	d104      	bne.n	800cb76 <mbedtls_strerror+0x966>
            mbedtls_snprintf( buf, buflen, "X509 - The signature tag or value invalid" );
 800cb6c:	4a74      	ldr	r2, [pc, #464]	; (800cd40 <mbedtls_strerror+0xb30>)
 800cb6e:	6879      	ldr	r1, [r7, #4]
 800cb70:	68b8      	ldr	r0, [r7, #8]
 800cb72:	f011 f881 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS) )
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 800cb7c:	d104      	bne.n	800cb88 <mbedtls_strerror+0x978>
            mbedtls_snprintf( buf, buflen, "X509 - The extension tag or value is invalid" );
 800cb7e:	4a71      	ldr	r2, [pc, #452]	; (800cd44 <mbedtls_strerror+0xb34>)
 800cb80:	6879      	ldr	r1, [r7, #4]
 800cb82:	68b8      	ldr	r0, [r7, #8]
 800cb84:	f011 f878 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_VERSION) )
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800cb8e:	d104      	bne.n	800cb9a <mbedtls_strerror+0x98a>
            mbedtls_snprintf( buf, buflen, "X509 - CRT/CRL/CSR has an unsupported version number" );
 800cb90:	4a6d      	ldr	r2, [pc, #436]	; (800cd48 <mbedtls_strerror+0xb38>)
 800cb92:	6879      	ldr	r1, [r7, #4]
 800cb94:	68b8      	ldr	r0, [r7, #8]
 800cb96:	f011 f86f 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG) )
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 800cba0:	d104      	bne.n	800cbac <mbedtls_strerror+0x99c>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithm (oid) is unsupported" );
 800cba2:	4a6a      	ldr	r2, [pc, #424]	; (800cd4c <mbedtls_strerror+0xb3c>)
 800cba4:	6879      	ldr	r1, [r7, #4]
 800cba6:	68b8      	ldr	r0, [r7, #8]
 800cba8:	f011 f866 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_SIG_MISMATCH) )
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	f5b3 5f1a 	cmp.w	r3, #9856	; 0x2680
 800cbb2:	d104      	bne.n	800cbbe <mbedtls_strerror+0x9ae>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithms do not match. (see \\c ::mbedtls_x509_crt sig_oid)" );
 800cbb4:	4a66      	ldr	r2, [pc, #408]	; (800cd50 <mbedtls_strerror+0xb40>)
 800cbb6:	6879      	ldr	r1, [r7, #4]
 800cbb8:	68b8      	ldr	r0, [r7, #8]
 800cbba:	f011 f85d 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) )
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	f5b3 5f1c 	cmp.w	r3, #9984	; 0x2700
 800cbc4:	d104      	bne.n	800cbd0 <mbedtls_strerror+0x9c0>
            mbedtls_snprintf( buf, buflen, "X509 - Certificate verification failed, e.g. CRL, CA or signature check failed" );
 800cbc6:	4a63      	ldr	r2, [pc, #396]	; (800cd54 <mbedtls_strerror+0xb44>)
 800cbc8:	6879      	ldr	r1, [r7, #4]
 800cbca:	68b8      	ldr	r0, [r7, #8]
 800cbcc:	f011 f854 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT) )
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	f5b3 5f1e 	cmp.w	r3, #10112	; 0x2780
 800cbd6:	d104      	bne.n	800cbe2 <mbedtls_strerror+0x9d2>
            mbedtls_snprintf( buf, buflen, "X509 - Format not recognized as DER or PEM" );
 800cbd8:	4a5f      	ldr	r2, [pc, #380]	; (800cd58 <mbedtls_strerror+0xb48>)
 800cbda:	6879      	ldr	r1, [r7, #4]
 800cbdc:	68b8      	ldr	r0, [r7, #8]
 800cbde:	f011 f84b 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_BAD_INPUT_DATA) )
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cbe8:	d104      	bne.n	800cbf4 <mbedtls_strerror+0x9e4>
            mbedtls_snprintf( buf, buflen, "X509 - Input invalid" );
 800cbea:	4a5c      	ldr	r2, [pc, #368]	; (800cd5c <mbedtls_strerror+0xb4c>)
 800cbec:	6879      	ldr	r1, [r7, #4]
 800cbee:	68b8      	ldr	r0, [r7, #8]
 800cbf0:	f011 f842 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_ALLOC_FAILED) )
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	f5b3 5f22 	cmp.w	r3, #10368	; 0x2880
 800cbfa:	d104      	bne.n	800cc06 <mbedtls_strerror+0x9f6>
            mbedtls_snprintf( buf, buflen, "X509 - Allocation of memory failed" );
 800cbfc:	4a58      	ldr	r2, [pc, #352]	; (800cd60 <mbedtls_strerror+0xb50>)
 800cbfe:	6879      	ldr	r1, [r7, #4]
 800cc00:	68b8      	ldr	r0, [r7, #8]
 800cc02:	f011 f839 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FILE_IO_ERROR) )
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
 800cc0c:	d104      	bne.n	800cc18 <mbedtls_strerror+0xa08>
            mbedtls_snprintf( buf, buflen, "X509 - Read/write of file failed" );
 800cc0e:	4a55      	ldr	r2, [pc, #340]	; (800cd64 <mbedtls_strerror+0xb54>)
 800cc10:	6879      	ldr	r1, [r7, #4]
 800cc12:	68b8      	ldr	r0, [r7, #8]
 800cc14:	f011 f830 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	f5b3 5f26 	cmp.w	r3, #10624	; 0x2980
 800cc1e:	d104      	bne.n	800cc2a <mbedtls_strerror+0xa1a>
            mbedtls_snprintf( buf, buflen, "X509 - Destination buffer is too small" );
 800cc20:	4a51      	ldr	r2, [pc, #324]	; (800cd68 <mbedtls_strerror+0xb58>)
 800cc22:	6879      	ldr	r1, [r7, #4]
 800cc24:	68b8      	ldr	r0, [r7, #8]
 800cc26:	f011 f827 	bl	801dc78 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc30:	d104      	bne.n	800cc3c <mbedtls_strerror+0xa2c>
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
 800cc32:	4a4e      	ldr	r2, [pc, #312]	; (800cd6c <mbedtls_strerror+0xb5c>)
 800cc34:	6879      	ldr	r1, [r7, #4]
 800cc36:	68b8      	ldr	r0, [r7, #8]
 800cc38:	f011 f81e 	bl	801dc78 <sniprintf>
#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */
        // END generated code

        if( strlen( buf ) == 0 )
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d105      	bne.n	800cc50 <mbedtls_strerror+0xa40>
            mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	4a4a      	ldr	r2, [pc, #296]	; (800cd70 <mbedtls_strerror+0xb60>)
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	68b8      	ldr	r0, [r7, #8]
 800cc4c:	f011 f814 	bl	801dc78 <sniprintf>
    }

    use_ret = ret & ~0xFF80;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc5a:	617b      	str	r3, [r7, #20]

    if( use_ret == 0 )
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f000 8165 	beq.w	800cf2e <mbedtls_strerror+0xd1e>
        return;

    // If high level code is present, make a concatenation between both
    // error strings.
    //
    len = strlen( buf );
 800cc64:	68b8      	ldr	r0, [r7, #8]
 800cc66:	f7f3 fab3 	bl	80001d0 <strlen>
 800cc6a:	6138      	str	r0, [r7, #16]

    if( len > 0 )
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d019      	beq.n	800cca6 <mbedtls_strerror+0xa96>
    {
        if( buflen - len < 5 )
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	f240 815a 	bls.w	800cf32 <mbedtls_strerror+0xd22>
            return;

        mbedtls_snprintf( buf + len, buflen - len, " : " );
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	18d0      	adds	r0, r2, r3
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	4a3a      	ldr	r2, [pc, #232]	; (800cd74 <mbedtls_strerror+0xb64>)
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	f010 fff3 	bl	801dc78 <sniprintf>

        buf += len + 3;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	3303      	adds	r3, #3
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	4413      	add	r3, r2
 800cc9a:	60bb      	str	r3, [r7, #8]
        buflen -= len + 3;
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	3b03      	subs	r3, #3
 800cca4:	607b      	str	r3, [r7, #4]

    // Low level error codes
    //
    // BEGIN generated code
#if defined(MBEDTLS_AES_C)
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH) )
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	2b20      	cmp	r3, #32
 800ccaa:	d104      	bne.n	800ccb6 <mbedtls_strerror+0xaa6>
        mbedtls_snprintf( buf, buflen, "AES - Invalid key length" );
 800ccac:	4a32      	ldr	r2, [pc, #200]	; (800cd78 <mbedtls_strerror+0xb68>)
 800ccae:	6879      	ldr	r1, [r7, #4]
 800ccb0:	68b8      	ldr	r0, [r7, #8]
 800ccb2:	f010 ffe1 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH) )
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b22      	cmp	r3, #34	; 0x22
 800ccba:	d104      	bne.n	800ccc6 <mbedtls_strerror+0xab6>
        mbedtls_snprintf( buf, buflen, "AES - Invalid data input length" );
 800ccbc:	4a2f      	ldr	r2, [pc, #188]	; (800cd7c <mbedtls_strerror+0xb6c>)
 800ccbe:	6879      	ldr	r1, [r7, #4]
 800ccc0:	68b8      	ldr	r0, [r7, #8]
 800ccc2:	f010 ffd9 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE) )
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	2b23      	cmp	r3, #35	; 0x23
 800ccca:	d104      	bne.n	800ccd6 <mbedtls_strerror+0xac6>
        mbedtls_snprintf( buf, buflen, "AES - Feature not available. For example, an unsupported AES key size" );
 800cccc:	4a2c      	ldr	r2, [pc, #176]	; (800cd80 <mbedtls_strerror+0xb70>)
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	68b8      	ldr	r0, [r7, #8]
 800ccd2:	f010 ffd1 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_HW_ACCEL_FAILED) )
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	2b25      	cmp	r3, #37	; 0x25
 800ccda:	d104      	bne.n	800cce6 <mbedtls_strerror+0xad6>
        mbedtls_snprintf( buf, buflen, "AES - AES hardware accelerator failed" );
 800ccdc:	4a29      	ldr	r2, [pc, #164]	; (800cd84 <mbedtls_strerror+0xb74>)
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	68b8      	ldr	r0, [r7, #8]
 800cce2:	f010 ffc9 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ARC4_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "ARC4 - ARC4 hardware accelerator failed" );
#endif /* MBEDTLS_ARC4_C */

#if defined(MBEDTLS_ASN1_PARSE_C)
    if( use_ret == -(MBEDTLS_ERR_ASN1_OUT_OF_DATA) )
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	2b60      	cmp	r3, #96	; 0x60
 800ccea:	d104      	bne.n	800ccf6 <mbedtls_strerror+0xae6>
        mbedtls_snprintf( buf, buflen, "ASN1 - Out of data when parsing an ASN1 data structure" );
 800ccec:	4a26      	ldr	r2, [pc, #152]	; (800cd88 <mbedtls_strerror+0xb78>)
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	68b8      	ldr	r0, [r7, #8]
 800ccf2:	f010 ffc1 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) )
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	2b62      	cmp	r3, #98	; 0x62
 800ccfa:	d104      	bne.n	800cd06 <mbedtls_strerror+0xaf6>
        mbedtls_snprintf( buf, buflen, "ASN1 - ASN1 tag was of an unexpected value" );
 800ccfc:	4a23      	ldr	r2, [pc, #140]	; (800cd8c <mbedtls_strerror+0xb7c>)
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	68b8      	ldr	r0, [r7, #8]
 800cd02:	f010 ffb9 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_LENGTH) )
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	2b64      	cmp	r3, #100	; 0x64
 800cd0a:	d143      	bne.n	800cd94 <mbedtls_strerror+0xb84>
        mbedtls_snprintf( buf, buflen, "ASN1 - Error when trying to determine the length or invalid length" );
 800cd0c:	4a20      	ldr	r2, [pc, #128]	; (800cd90 <mbedtls_strerror+0xb80>)
 800cd0e:	6879      	ldr	r1, [r7, #4]
 800cd10:	68b8      	ldr	r0, [r7, #8]
 800cd12:	f010 ffb1 	bl	801dc78 <sniprintf>
 800cd16:	e03d      	b.n	800cd94 <mbedtls_strerror+0xb84>
 800cd18:	080207a4 	.word	0x080207a4
 800cd1c:	080207e4 	.word	0x080207e4
 800cd20:	08020820 	.word	0x08020820
 800cd24:	08020864 	.word	0x08020864
 800cd28:	08020884 	.word	0x08020884
 800cd2c:	080208cc 	.word	0x080208cc
 800cd30:	08020900 	.word	0x08020900
 800cd34:	0802092c 	.word	0x0802092c
 800cd38:	0802095c 	.word	0x0802095c
 800cd3c:	08020984 	.word	0x08020984
 800cd40:	080209ac 	.word	0x080209ac
 800cd44:	080209d8 	.word	0x080209d8
 800cd48:	08020a08 	.word	0x08020a08
 800cd4c:	08020a40 	.word	0x08020a40
 800cd50:	08020a70 	.word	0x08020a70
 800cd54:	08020ac0 	.word	0x08020ac0
 800cd58:	08020b10 	.word	0x08020b10
 800cd5c:	08020b3c 	.word	0x08020b3c
 800cd60:	08020b54 	.word	0x08020b54
 800cd64:	08020b78 	.word	0x08020b78
 800cd68:	08020b9c 	.word	0x08020b9c
 800cd6c:	08020bc4 	.word	0x08020bc4
 800cd70:	08020c18 	.word	0x08020c18
 800cd74:	08020c34 	.word	0x08020c34
 800cd78:	08020c38 	.word	0x08020c38
 800cd7c:	08020c54 	.word	0x08020c54
 800cd80:	08020c74 	.word	0x08020c74
 800cd84:	08020cbc 	.word	0x08020cbc
 800cd88:	08020ce4 	.word	0x08020ce4
 800cd8c:	08020d1c 	.word	0x08020d1c
 800cd90:	08020d48 	.word	0x08020d48
    if( use_ret == -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH) )
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2b66      	cmp	r3, #102	; 0x66
 800cd98:	d104      	bne.n	800cda4 <mbedtls_strerror+0xb94>
        mbedtls_snprintf( buf, buflen, "ASN1 - Actual length differs from expected length" );
 800cd9a:	4a69      	ldr	r2, [pc, #420]	; (800cf40 <mbedtls_strerror+0xd30>)
 800cd9c:	6879      	ldr	r1, [r7, #4]
 800cd9e:	68b8      	ldr	r0, [r7, #8]
 800cda0:	f010 ff6a 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_DATA) )
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	2b68      	cmp	r3, #104	; 0x68
 800cda8:	d104      	bne.n	800cdb4 <mbedtls_strerror+0xba4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Data is invalid. (not used)" );
 800cdaa:	4a66      	ldr	r2, [pc, #408]	; (800cf44 <mbedtls_strerror+0xd34>)
 800cdac:	6879      	ldr	r1, [r7, #4]
 800cdae:	68b8      	ldr	r0, [r7, #8]
 800cdb0:	f010 ff62 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_ALLOC_FAILED) )
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	2b6a      	cmp	r3, #106	; 0x6a
 800cdb8:	d104      	bne.n	800cdc4 <mbedtls_strerror+0xbb4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Memory allocation failed" );
 800cdba:	4a63      	ldr	r2, [pc, #396]	; (800cf48 <mbedtls_strerror+0xd38>)
 800cdbc:	6879      	ldr	r1, [r7, #4]
 800cdbe:	68b8      	ldr	r0, [r7, #8]
 800cdc0:	f010 ff5a 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL) )
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2b6c      	cmp	r3, #108	; 0x6c
 800cdc8:	d104      	bne.n	800cdd4 <mbedtls_strerror+0xbc4>
        mbedtls_snprintf( buf, buflen, "ASN1 - Buffer too small when writing ASN.1 data structure" );
 800cdca:	4a60      	ldr	r2, [pc, #384]	; (800cf4c <mbedtls_strerror+0xd3c>)
 800cdcc:	6879      	ldr	r1, [r7, #4]
 800cdce:	68b8      	ldr	r0, [r7, #8]
 800cdd0:	f010 ff52 	bl	801dc78 <sniprintf>
#endif /* MBEDTLS_ASN1_PARSE_C */

#if defined(MBEDTLS_BASE64_C)
    if( use_ret == -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL) )
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd8:	d104      	bne.n	800cde4 <mbedtls_strerror+0xbd4>
        mbedtls_snprintf( buf, buflen, "BASE64 - Output buffer too small" );
 800cdda:	4a5d      	ldr	r2, [pc, #372]	; (800cf50 <mbedtls_strerror+0xd40>)
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	68b8      	ldr	r0, [r7, #8]
 800cde0:	f010 ff4a 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER) )
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	2b2c      	cmp	r3, #44	; 0x2c
 800cde8:	d104      	bne.n	800cdf4 <mbedtls_strerror+0xbe4>
        mbedtls_snprintf( buf, buflen, "BASE64 - Invalid character in input" );
 800cdea:	4a5a      	ldr	r2, [pc, #360]	; (800cf54 <mbedtls_strerror+0xd44>)
 800cdec:	6879      	ldr	r1, [r7, #4]
 800cdee:	68b8      	ldr	r0, [r7, #8]
 800cdf0:	f010 ff42 	bl	801dc78 <sniprintf>
#endif /* MBEDTLS_BASE64_C */

#if defined(MBEDTLS_BIGNUM_C)
    if( use_ret == -(MBEDTLS_ERR_MPI_FILE_IO_ERROR) )
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d104      	bne.n	800ce04 <mbedtls_strerror+0xbf4>
        mbedtls_snprintf( buf, buflen, "BIGNUM - An error occurred while reading from or writing to a file" );
 800cdfa:	4a57      	ldr	r2, [pc, #348]	; (800cf58 <mbedtls_strerror+0xd48>)
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	68b8      	ldr	r0, [r7, #8]
 800ce00:	f010 ff3a 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA) )
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2b04      	cmp	r3, #4
 800ce08:	d104      	bne.n	800ce14 <mbedtls_strerror+0xc04>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Bad input parameters to function" );
 800ce0a:	4a54      	ldr	r2, [pc, #336]	; (800cf5c <mbedtls_strerror+0xd4c>)
 800ce0c:	6879      	ldr	r1, [r7, #4]
 800ce0e:	68b8      	ldr	r0, [r7, #8]
 800ce10:	f010 ff32 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_INVALID_CHARACTER) )
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2b06      	cmp	r3, #6
 800ce18:	d104      	bne.n	800ce24 <mbedtls_strerror+0xc14>
        mbedtls_snprintf( buf, buflen, "BIGNUM - There is an invalid character in the digit string" );
 800ce1a:	4a51      	ldr	r2, [pc, #324]	; (800cf60 <mbedtls_strerror+0xd50>)
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	68b8      	ldr	r0, [r7, #8]
 800ce20:	f010 ff2a 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL) )
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	2b08      	cmp	r3, #8
 800ce28:	d104      	bne.n	800ce34 <mbedtls_strerror+0xc24>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The buffer is too small to write to" );
 800ce2a:	4a4e      	ldr	r2, [pc, #312]	; (800cf64 <mbedtls_strerror+0xd54>)
 800ce2c:	6879      	ldr	r1, [r7, #4]
 800ce2e:	68b8      	ldr	r0, [r7, #8]
 800ce30:	f010 ff22 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE) )
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	2b0a      	cmp	r3, #10
 800ce38:	d104      	bne.n	800ce44 <mbedtls_strerror+0xc34>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are negative or result in illegal output" );
 800ce3a:	4a4b      	ldr	r2, [pc, #300]	; (800cf68 <mbedtls_strerror+0xd58>)
 800ce3c:	6879      	ldr	r1, [r7, #4]
 800ce3e:	68b8      	ldr	r0, [r7, #8]
 800ce40:	f010 ff1a 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO) )
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	2b0c      	cmp	r3, #12
 800ce48:	d104      	bne.n	800ce54 <mbedtls_strerror+0xc44>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input argument for division is zero, which is not allowed" );
 800ce4a:	4a48      	ldr	r2, [pc, #288]	; (800cf6c <mbedtls_strerror+0xd5c>)
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	68b8      	ldr	r0, [r7, #8]
 800ce50:	f010 ff12 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE) )
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	2b0e      	cmp	r3, #14
 800ce58:	d104      	bne.n	800ce64 <mbedtls_strerror+0xc54>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are not acceptable" );
 800ce5a:	4a45      	ldr	r2, [pc, #276]	; (800cf70 <mbedtls_strerror+0xd60>)
 800ce5c:	6879      	ldr	r1, [r7, #4]
 800ce5e:	68b8      	ldr	r0, [r7, #8]
 800ce60:	f010 ff0a 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_ALLOC_FAILED) )
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2b10      	cmp	r3, #16
 800ce68:	d104      	bne.n	800ce74 <mbedtls_strerror+0xc64>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Memory allocation failed" );
 800ce6a:	4a42      	ldr	r2, [pc, #264]	; (800cf74 <mbedtls_strerror+0xd64>)
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	68b8      	ldr	r0, [r7, #8]
 800ce70:	f010 ff02 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CMAC_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "CMAC - CMAC hardware accelerator failed" );
#endif /* MBEDTLS_CMAC_C */

#if defined(MBEDTLS_CTR_DRBG_C)
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED) )
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	2b34      	cmp	r3, #52	; 0x34
 800ce78:	d104      	bne.n	800ce84 <mbedtls_strerror+0xc74>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The entropy source failed" );
 800ce7a:	4a3f      	ldr	r2, [pc, #252]	; (800cf78 <mbedtls_strerror+0xd68>)
 800ce7c:	6879      	ldr	r1, [r7, #4]
 800ce7e:	68b8      	ldr	r0, [r7, #8]
 800ce80:	f010 fefa 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG) )
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	2b36      	cmp	r3, #54	; 0x36
 800ce88:	d104      	bne.n	800ce94 <mbedtls_strerror+0xc84>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The requested random buffer length is too big" );
 800ce8a:	4a3c      	ldr	r2, [pc, #240]	; (800cf7c <mbedtls_strerror+0xd6c>)
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	68b8      	ldr	r0, [r7, #8]
 800ce90:	f010 fef2 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG) )
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2b38      	cmp	r3, #56	; 0x38
 800ce98:	d104      	bne.n	800cea4 <mbedtls_strerror+0xc94>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The input (entropy + additional data) is too large" );
 800ce9a:	4a39      	ldr	r2, [pc, #228]	; (800cf80 <mbedtls_strerror+0xd70>)
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	68b8      	ldr	r0, [r7, #8]
 800cea0:	f010 feea 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR) )
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	2b3a      	cmp	r3, #58	; 0x3a
 800cea8:	d104      	bne.n	800ceb4 <mbedtls_strerror+0xca4>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - Read or write error in file" );
 800ceaa:	4a36      	ldr	r2, [pc, #216]	; (800cf84 <mbedtls_strerror+0xd74>)
 800ceac:	6879      	ldr	r1, [r7, #4]
 800ceae:	68b8      	ldr	r0, [r7, #8]
 800ceb0:	f010 fee2 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR) )
        mbedtls_snprintf( buf, buflen, "ENTROPY - Read/write error in file" );
#endif /* MBEDTLS_ENTROPY_C */

#if defined(MBEDTLS_GCM_C)
    if( use_ret == -(MBEDTLS_ERR_GCM_AUTH_FAILED) )
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2b12      	cmp	r3, #18
 800ceb8:	d104      	bne.n	800cec4 <mbedtls_strerror+0xcb4>
        mbedtls_snprintf( buf, buflen, "GCM - Authenticated decryption failed" );
 800ceba:	4a33      	ldr	r2, [pc, #204]	; (800cf88 <mbedtls_strerror+0xd78>)
 800cebc:	6879      	ldr	r1, [r7, #4]
 800cebe:	68b8      	ldr	r0, [r7, #8]
 800cec0:	f010 feda 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_GCM_HW_ACCEL_FAILED) )
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	2b13      	cmp	r3, #19
 800cec8:	d104      	bne.n	800ced4 <mbedtls_strerror+0xcc4>
        mbedtls_snprintf( buf, buflen, "GCM - GCM hardware accelerator failed" );
 800ceca:	4a30      	ldr	r2, [pc, #192]	; (800cf8c <mbedtls_strerror+0xd7c>)
 800cecc:	6879      	ldr	r1, [r7, #4]
 800cece:	68b8      	ldr	r0, [r7, #8]
 800ced0:	f010 fed2 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_GCM_BAD_INPUT) )
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	2b14      	cmp	r3, #20
 800ced8:	d104      	bne.n	800cee4 <mbedtls_strerror+0xcd4>
        mbedtls_snprintf( buf, buflen, "GCM - Bad input parameters to function" );
 800ceda:	4a2d      	ldr	r2, [pc, #180]	; (800cf90 <mbedtls_strerror+0xd80>)
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	68b8      	ldr	r0, [r7, #8]
 800cee0:	f010 feca 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_NET_INVALID_CONTEXT) )
        mbedtls_snprintf( buf, buflen, "NET - The context is invalid, eg because it was free()ed" );
#endif /* MBEDTLS_NET_C */

#if defined(MBEDTLS_OID_C)
    if( use_ret == -(MBEDTLS_ERR_OID_NOT_FOUND) )
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	2b2e      	cmp	r3, #46	; 0x2e
 800cee8:	d104      	bne.n	800cef4 <mbedtls_strerror+0xce4>
        mbedtls_snprintf( buf, buflen, "OID - OID is not found" );
 800ceea:	4a2a      	ldr	r2, [pc, #168]	; (800cf94 <mbedtls_strerror+0xd84>)
 800ceec:	6879      	ldr	r1, [r7, #4]
 800ceee:	68b8      	ldr	r0, [r7, #8]
 800cef0:	f010 fec2 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_OID_BUF_TOO_SMALL) )
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b0b      	cmp	r3, #11
 800cef8:	d104      	bne.n	800cf04 <mbedtls_strerror+0xcf4>
        mbedtls_snprintf( buf, buflen, "OID - output buffer is too small" );
 800cefa:	4a27      	ldr	r2, [pc, #156]	; (800cf98 <mbedtls_strerror+0xd88>)
 800cefc:	6879      	ldr	r1, [r7, #4]
 800cefe:	68b8      	ldr	r0, [r7, #8]
 800cf00:	f010 feba 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_SHA1_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "SHA1 - SHA-1 hardware accelerator failed" );
#endif /* MBEDTLS_SHA1_C */

#if defined(MBEDTLS_SHA256_C)
    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	2b37      	cmp	r3, #55	; 0x37
 800cf08:	d104      	bne.n	800cf14 <mbedtls_strerror+0xd04>
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 hardware accelerator failed" );
 800cf0a:	4a24      	ldr	r2, [pc, #144]	; (800cf9c <mbedtls_strerror+0xd8c>)
 800cf0c:	6879      	ldr	r1, [r7, #4]
 800cf0e:	68b8      	ldr	r0, [r7, #8]
 800cf10:	f010 feb2 	bl	801dc78 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "XTEA - XTEA hardware accelerator failed" );
#endif /* MBEDTLS_XTEA_C */
    // END generated code

    if( strlen( buf ) != 0 )
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d10c      	bne.n	800cf36 <mbedtls_strerror+0xd26>
        return;

    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	4a20      	ldr	r2, [pc, #128]	; (800cfa0 <mbedtls_strerror+0xd90>)
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	68b8      	ldr	r0, [r7, #8]
 800cf24:	f010 fea8 	bl	801dc78 <sniprintf>
 800cf28:	e006      	b.n	800cf38 <mbedtls_strerror+0xd28>
        return;
 800cf2a:	bf00      	nop
 800cf2c:	e004      	b.n	800cf38 <mbedtls_strerror+0xd28>
        return;
 800cf2e:	bf00      	nop
 800cf30:	e002      	b.n	800cf38 <mbedtls_strerror+0xd28>
            return;
 800cf32:	bf00      	nop
 800cf34:	e000      	b.n	800cf38 <mbedtls_strerror+0xd28>
        return;
 800cf36:	bf00      	nop
}
 800cf38:	3718      	adds	r7, #24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	08020d8c 	.word	0x08020d8c
 800cf44:	08020dc0 	.word	0x08020dc0
 800cf48:	08020de4 	.word	0x08020de4
 800cf4c:	08020e04 	.word	0x08020e04
 800cf50:	08020e40 	.word	0x08020e40
 800cf54:	08020e64 	.word	0x08020e64
 800cf58:	08020e88 	.word	0x08020e88
 800cf5c:	08020ecc 	.word	0x08020ecc
 800cf60:	08020ef8 	.word	0x08020ef8
 800cf64:	08020f34 	.word	0x08020f34
 800cf68:	08020f64 	.word	0x08020f64
 800cf6c:	08020fac 	.word	0x08020fac
 800cf70:	08020ff4 	.word	0x08020ff4
 800cf74:	08021024 	.word	0x08021024
 800cf78:	08021048 	.word	0x08021048
 800cf7c:	08021070 	.word	0x08021070
 800cf80:	080210ac 	.word	0x080210ac
 800cf84:	080210ec 	.word	0x080210ec
 800cf88:	08021114 	.word	0x08021114
 800cf8c:	0802113c 	.word	0x0802113c
 800cf90:	08021164 	.word	0x08021164
 800cf94:	0802118c 	.word	0x0802118c
 800cf98:	080211a4 	.word	0x080211a4
 800cf9c:	080211c8 	.word	0x080211c8
 800cfa0:	08020c18 	.word	0x08020c18

0800cfa4 <mbedtls_zeroize>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	60fb      	str	r3, [r7, #12]
 800cfb2:	e004      	b.n	800cfbe <mbedtls_zeroize+0x1a>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	60fa      	str	r2, [r7, #12]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	701a      	strb	r2, [r3, #0]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	1e5a      	subs	r2, r3, #1
 800cfc2:	603a      	str	r2, [r7, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1f5      	bne.n	800cfb4 <mbedtls_zeroize+0x10>
}
 800cfc8:	bf00      	nop
 800cfca:	bf00      	nop
 800cfcc:	3714      	adds	r7, #20
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr

0800cfd6 <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
 800cfd6:	b580      	push	{r7, lr}
 800cfd8:	b082      	sub	sp, #8
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 800cfde:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f010 fc3f 	bl	801d868 <memset>
}
 800cfea:	bf00      	nop
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table( mbedtls_gcm_context *ctx )
{
 800cff2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cff6:	b0a8      	sub	sp, #160	; 0xa0
 800cff8:	af02      	add	r7, sp, #8
 800cffa:	6478      	str	r0, [r7, #68]	; 0x44
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	64bb      	str	r3, [r7, #72]	; 0x48

    memset( h, 0, 16 );
 800d000:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d004:	2210      	movs	r2, #16
 800d006:	2100      	movs	r1, #0
 800d008:	4618      	mov	r0, r3
 800d00a:	f010 fc2d 	bl	801d868 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 800d00e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d010:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d014:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800d018:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	4613      	mov	r3, r2
 800d020:	2210      	movs	r2, #16
 800d022:	f7fd ff7f 	bl	800af24 <mbedtls_cipher_update>
 800d026:	67f8      	str	r0, [r7, #124]	; 0x7c
 800d028:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d001      	beq.n	800d032 <gcm_gen_table+0x40>
        return( ret );
 800d02e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d030:	e154      	b.n	800d2dc <gcm_gen_table+0x2ea>

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
 800d032:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d036:	061a      	lsls	r2, r3, #24
 800d038:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d03c:	041b      	lsls	r3, r3, #16
 800d03e:	431a      	orrs	r2, r3
 800d040:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d044:	021b      	lsls	r3, r3, #8
 800d046:	431a      	orrs	r2, r3
 800d048:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d04c:	4313      	orrs	r3, r2
 800d04e:	2200      	movs	r2, #0
 800d050:	4698      	mov	r8, r3
 800d052:	4691      	mov	r9, r2
 800d054:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
    GET_UINT32_BE( lo, h,  4  );
 800d058:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d05c:	061a      	lsls	r2, r3, #24
 800d05e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800d062:	041b      	lsls	r3, r3, #16
 800d064:	431a      	orrs	r2, r3
 800d066:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800d06a:	021b      	lsls	r3, r3, #8
 800d06c:	431a      	orrs	r2, r3
 800d06e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d072:	4313      	orrs	r3, r2
 800d074:	2200      	movs	r2, #0
 800d076:	623b      	str	r3, [r7, #32]
 800d078:	627a      	str	r2, [r7, #36]	; 0x24
 800d07a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d07e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    vh = (uint64_t) hi << 32 | lo;
 800d082:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d086:	f04f 0000 	mov.w	r0, #0
 800d08a:	f04f 0100 	mov.w	r1, #0
 800d08e:	0011      	movs	r1, r2
 800d090:	2000      	movs	r0, #0
 800d092:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d096:	ea42 0400 	orr.w	r4, r2, r0
 800d09a:	ea43 0501 	orr.w	r5, r3, r1
 800d09e:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80

    GET_UINT32_BE( hi, h,  8  );
 800d0a2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d0a6:	061a      	lsls	r2, r3, #24
 800d0a8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800d0ac:	041b      	lsls	r3, r3, #16
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800d0b4:	021b      	lsls	r3, r3, #8
 800d0b6:	431a      	orrs	r2, r3
 800d0b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	2200      	movs	r2, #0
 800d0c0:	61bb      	str	r3, [r7, #24]
 800d0c2:	61fa      	str	r2, [r7, #28]
 800d0c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d0c8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    GET_UINT32_BE( lo, h,  12 );
 800d0cc:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800d0d0:	061a      	lsls	r2, r3, #24
 800d0d2:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800d0d6:	041b      	lsls	r3, r3, #16
 800d0d8:	431a      	orrs	r2, r3
 800d0da:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800d0de:	021b      	lsls	r3, r3, #8
 800d0e0:	431a      	orrs	r2, r3
 800d0e2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	613b      	str	r3, [r7, #16]
 800d0ec:	617a      	str	r2, [r7, #20]
 800d0ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d0f2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    vl = (uint64_t) hi << 32 | lo;
 800d0f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d0fa:	f04f 0000 	mov.w	r0, #0
 800d0fe:	f04f 0100 	mov.w	r1, #0
 800d102:	0011      	movs	r1, r2
 800d104:	2000      	movs	r0, #0
 800d106:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d10a:	ea42 0a00 	orr.w	sl, r2, r0
 800d10e:	ea43 0b01 	orr.w	fp, r3, r1
 800d112:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 800d116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d118:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d11c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    ctx->HH[8] = vh;
 800d120:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d122:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d126:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 800d12a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d12c:	f04f 0200 	mov.w	r2, #0
 800d130:	f04f 0300 	mov.w	r3, #0
 800d134:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    ctx->HL[0] = 0;
 800d138:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d13a:	f04f 0200 	mov.w	r2, #0
 800d13e:	f04f 0300 	mov.w	r3, #0
 800d142:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    for( i = 4; i > 0; i >>= 1 )
 800d146:	2304      	movs	r3, #4
 800d148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d14c:	e05b      	b.n	800d206 <gcm_gen_table+0x214>
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 800d14e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d152:	f003 0201 	and.w	r2, r3, #1
 800d156:	4613      	mov	r3, r2
 800d158:	0152      	lsls	r2, r2, #5
 800d15a:	1a9b      	subs	r3, r3, r2
 800d15c:	061b      	lsls	r3, r3, #24
 800d15e:	65fb      	str	r3, [r7, #92]	; 0x5c
        vl  = ( vh << 63 ) | ( vl >> 1 );
 800d160:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d164:	f04f 0400 	mov.w	r4, #0
 800d168:	f04f 0500 	mov.w	r5, #0
 800d16c:	07d5      	lsls	r5, r2, #31
 800d16e:	2400      	movs	r4, #0
 800d170:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d174:	f04f 0000 	mov.w	r0, #0
 800d178:	f04f 0100 	mov.w	r1, #0
 800d17c:	0850      	lsrs	r0, r2, #1
 800d17e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d182:	0859      	lsrs	r1, r3, #1
 800d184:	ea44 0300 	orr.w	r3, r4, r0
 800d188:	60bb      	str	r3, [r7, #8]
 800d18a:	ea45 0301 	orr.w	r3, r5, r1
 800d18e:	60fb      	str	r3, [r7, #12]
 800d190:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d194:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 800d198:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d19c:	f04f 0000 	mov.w	r0, #0
 800d1a0:	f04f 0100 	mov.w	r1, #0
 800d1a4:	0850      	lsrs	r0, r2, #1
 800d1a6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d1aa:	0859      	lsrs	r1, r3, #1
 800d1ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1b2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d1b4:	f04f 0200 	mov.w	r2, #0
 800d1b8:	f04f 0300 	mov.w	r3, #0
 800d1bc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d1be:	0023      	movs	r3, r4
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	ea80 0402 	eor.w	r4, r0, r2
 800d1c6:	603c      	str	r4, [r7, #0]
 800d1c8:	404b      	eors	r3, r1
 800d1ca:	607b      	str	r3, [r7, #4]
 800d1cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d1d0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

        ctx->HL[i] = vl;
 800d1d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1da:	3308      	adds	r3, #8
 800d1dc:	00db      	lsls	r3, r3, #3
 800d1de:	18d1      	adds	r1, r2, r3
 800d1e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d1e4:	e9c1 2300 	strd	r2, r3, [r1]
        ctx->HH[i] = vh;
 800d1e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1ee:	3318      	adds	r3, #24
 800d1f0:	00db      	lsls	r3, r3, #3
 800d1f2:	18d1      	adds	r1, r2, r3
 800d1f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d1f8:	e9c1 2300 	strd	r2, r3, [r1]
    for( i = 4; i > 0; i >>= 1 )
 800d1fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d200:	105b      	asrs	r3, r3, #1
 800d202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	dc9f      	bgt.n	800d14e <gcm_gen_table+0x15c>
    }

    for( i = 2; i <= 8; i *= 2 )
 800d20e:	2302      	movs	r3, #2
 800d210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d214:	e05d      	b.n	800d2d2 <gcm_gen_table+0x2e0>
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 800d216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d218:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800d21c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d220:	00db      	lsls	r3, r3, #3
 800d222:	4413      	add	r3, r2
 800d224:	667b      	str	r3, [r7, #100]	; 0x64
 800d226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d228:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800d22c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d230:	00db      	lsls	r3, r3, #3
 800d232:	4413      	add	r3, r2
 800d234:	663b      	str	r3, [r7, #96]	; 0x60
        vh = *HiH;
 800d236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
        vl = *HiL;
 800d240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        for( j = 1; j < i; j++ )
 800d24a:	2301      	movs	r3, #1
 800d24c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d250:	e034      	b.n	800d2bc <gcm_gen_table+0x2ca>
        {
            HiH[j] = vh ^ ctx->HH[j];
 800d252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d258:	3318      	adds	r3, #24
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	4413      	add	r3, r2
 800d25e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d262:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d26a:	18d4      	adds	r4, r2, r3
 800d26c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d270:	ea80 0502 	eor.w	r5, r0, r2
 800d274:	633d      	str	r5, [r7, #48]	; 0x30
 800d276:	404b      	eors	r3, r1
 800d278:	637b      	str	r3, [r7, #52]	; 0x34
 800d27a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d27e:	e9c4 2300 	strd	r2, r3, [r4]
            HiL[j] = vl ^ ctx->HL[j];
 800d282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d288:	3308      	adds	r3, #8
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	4413      	add	r3, r2
 800d28e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d292:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d296:	00db      	lsls	r3, r3, #3
 800d298:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d29a:	18d4      	adds	r4, r2, r3
 800d29c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d2a0:	ea80 0502 	eor.w	r5, r0, r2
 800d2a4:	62bd      	str	r5, [r7, #40]	; 0x28
 800d2a6:	404b      	eors	r3, r1
 800d2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d2ae:	e9c4 2300 	strd	r2, r3, [r4]
        for( j = 1; j < i; j++ )
 800d2b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d2bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d2c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	dbc4      	blt.n	800d252 <gcm_gen_table+0x260>
    for( i = 2; i <= 8; i *= 2 )
 800d2c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2cc:	005b      	lsls	r3, r3, #1
 800d2ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2d6:	2b08      	cmp	r3, #8
 800d2d8:	dd9d      	ble.n	800d216 <gcm_gen_table+0x224>
        }
    }

    return( 0 );
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3798      	adds	r7, #152	; 0x98
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d2e6 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b086      	sub	sp, #24
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	60f8      	str	r0, [r7, #12]
 800d2ee:	607a      	str	r2, [r7, #4]
 800d2f0:	603b      	str	r3, [r7, #0]
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	72fb      	strb	r3, [r7, #11]
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	7afb      	ldrb	r3, [r7, #11]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fd fcd5 	bl	800acac <mbedtls_cipher_info_from_values>
 800d302:	6178      	str	r0, [r7, #20]
    if( cipher_info == NULL )
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d102      	bne.n	800d310 <mbedtls_gcm_setkey+0x2a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d30a:	f06f 0313 	mvn.w	r3, #19
 800d30e:	e02b      	b.n	800d368 <mbedtls_gcm_setkey+0x82>

    if( cipher_info->block_size != 16 )
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	2b10      	cmp	r3, #16
 800d316:	d002      	beq.n	800d31e <mbedtls_gcm_setkey+0x38>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d318:	f06f 0313 	mvn.w	r3, #19
 800d31c:	e024      	b.n	800d368 <mbedtls_gcm_setkey+0x82>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	4618      	mov	r0, r3
 800d322:	f7fd fd02 	bl	800ad2a <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6979      	ldr	r1, [r7, #20]
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fd fd1a 	bl	800ad64 <mbedtls_cipher_setup>
 800d330:	6138      	str	r0, [r7, #16]
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d001      	beq.n	800d33c <mbedtls_gcm_setkey+0x56>
        return( ret );
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	e015      	b.n	800d368 <mbedtls_gcm_setkey+0x82>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	2301      	movs	r3, #1
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	f7fd fd3e 	bl	800adc4 <mbedtls_cipher_setkey>
 800d348:	6138      	str	r0, [r7, #16]
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <mbedtls_gcm_setkey+0x6e>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	e009      	b.n	800d368 <mbedtls_gcm_setkey+0x82>
    }

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f7ff fe4c 	bl	800cff2 <gcm_gen_table>
 800d35a:	6138      	str	r0, [r7, #16]
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <mbedtls_gcm_setkey+0x80>
        return( ret );
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	e000      	b.n	800d368 <mbedtls_gcm_setkey+0x82>

    return( 0 );
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3718      	adds	r7, #24
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 800d370:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d374:	b099      	sub	sp, #100	; 0x64
 800d376:	af00      	add	r7, sp, #0
 800d378:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d37a:	63b9      	str	r1, [r7, #56]	; 0x38
 800d37c:	637a      	str	r2, [r7, #52]	; 0x34
    int i = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 800d382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d384:	330f      	adds	r3, #15
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	f003 030f 	and.w	r3, r3, #15
 800d38c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    zh = ctx->HH[lo];
 800d390:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d396:	3318      	adds	r3, #24
 800d398:	00db      	lsls	r3, r3, #3
 800d39a:	4413      	add	r3, r2
 800d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    zl = ctx->HL[lo];
 800d3a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d3a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3aa:	3308      	adds	r3, #8
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	4413      	add	r3, r2
 800d3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    for( i = 15; i >= 0; i-- )
 800d3b8:	230f      	movs	r3, #15
 800d3ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3bc:	e0e6      	b.n	800d58c <gcm_mult+0x21c>
    {
        lo = x[i] & 0xf;
 800d3be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	4413      	add	r3, r2
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	f003 030f 	and.w	r3, r3, #15
 800d3ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        hi = x[i] >> 4;
 800d3ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d2:	4413      	add	r3, r2
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	091b      	lsrs	r3, r3, #4
 800d3d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        if( i != 15 )
 800d3dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3de:	2b0f      	cmp	r3, #15
 800d3e0:	d068      	beq.n	800d4b4 <gcm_mult+0x144>
        {
            rem = (unsigned char) zl & 0xf;
 800d3e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d3e6:	f003 030f 	and.w	r3, r3, #15
 800d3ea:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            zl = ( zh << 60 ) | ( zl >> 4 );
 800d3ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d3f2:	f04f 0400 	mov.w	r4, #0
 800d3f6:	f04f 0500 	mov.w	r5, #0
 800d3fa:	0715      	lsls	r5, r2, #28
 800d3fc:	2400      	movs	r4, #0
 800d3fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d402:	f04f 0000 	mov.w	r0, #0
 800d406:	f04f 0100 	mov.w	r1, #0
 800d40a:	0910      	lsrs	r0, r2, #4
 800d40c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d410:	0919      	lsrs	r1, r3, #4
 800d412:	ea44 0300 	orr.w	r3, r4, r0
 800d416:	62bb      	str	r3, [r7, #40]	; 0x28
 800d418:	ea45 0301 	orr.w	r3, r5, r1
 800d41c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d41e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d422:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
            zh = ( zh >> 4 );
 800d426:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d42a:	f04f 0000 	mov.w	r0, #0
 800d42e:	f04f 0100 	mov.w	r1, #0
 800d432:	0910      	lsrs	r0, r2, #4
 800d434:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d438:	0919      	lsrs	r1, r3, #4
 800d43a:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
            zh ^= (uint64_t) last4[rem] << 48;
 800d43e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d442:	4ab6      	ldr	r2, [pc, #728]	; (800d71c <gcm_mult+0x3ac>)
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	4413      	add	r3, r2
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	f04f 0000 	mov.w	r0, #0
 800d450:	f04f 0100 	mov.w	r1, #0
 800d454:	0411      	lsls	r1, r2, #16
 800d456:	2000      	movs	r0, #0
 800d458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d45c:	ea82 0400 	eor.w	r4, r2, r0
 800d460:	623c      	str	r4, [r7, #32]
 800d462:	404b      	eors	r3, r1
 800d464:	627b      	str	r3, [r7, #36]	; 0x24
 800d466:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d46a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zh ^= ctx->HH[lo];
 800d46e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d474:	3318      	adds	r3, #24
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	4413      	add	r3, r2
 800d47a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d47e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d482:	ea82 0400 	eor.w	r4, r2, r0
 800d486:	61bc      	str	r4, [r7, #24]
 800d488:	404b      	eors	r3, r1
 800d48a:	61fb      	str	r3, [r7, #28]
 800d48c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d490:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zl ^= ctx->HL[lo];
 800d494:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d49a:	3308      	adds	r3, #8
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	4413      	add	r3, r2
 800d4a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d4a8:	ea82 0800 	eor.w	r8, r2, r0
 800d4ac:	ea83 0901 	eor.w	r9, r3, r1
 800d4b0:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48

        }

        rem = (unsigned char) zl & 0xf;
 800d4b4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d4b8:	f003 030f 	and.w	r3, r3, #15
 800d4bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        zl = ( zh << 60 ) | ( zl >> 4 );
 800d4c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d4c4:	f04f 0400 	mov.w	r4, #0
 800d4c8:	f04f 0500 	mov.w	r5, #0
 800d4cc:	0715      	lsls	r5, r2, #28
 800d4ce:	2400      	movs	r4, #0
 800d4d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d4d4:	f04f 0000 	mov.w	r0, #0
 800d4d8:	f04f 0100 	mov.w	r1, #0
 800d4dc:	0910      	lsrs	r0, r2, #4
 800d4de:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d4e2:	0919      	lsrs	r1, r3, #4
 800d4e4:	ea44 0300 	orr.w	r3, r4, r0
 800d4e8:	613b      	str	r3, [r7, #16]
 800d4ea:	ea45 0301 	orr.w	r3, r5, r1
 800d4ee:	617b      	str	r3, [r7, #20]
 800d4f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d4f4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        zh = ( zh >> 4 );
 800d4f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d4fc:	f04f 0000 	mov.w	r0, #0
 800d500:	f04f 0100 	mov.w	r1, #0
 800d504:	0910      	lsrs	r0, r2, #4
 800d506:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d50a:	0919      	lsrs	r1, r3, #4
 800d50c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
        zh ^= (uint64_t) last4[rem] << 48;
 800d510:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d514:	4a81      	ldr	r2, [pc, #516]	; (800d71c <gcm_mult+0x3ac>)
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	4413      	add	r3, r2
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	f04f 0000 	mov.w	r0, #0
 800d522:	f04f 0100 	mov.w	r1, #0
 800d526:	0411      	lsls	r1, r2, #16
 800d528:	2000      	movs	r0, #0
 800d52a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d52e:	ea82 0400 	eor.w	r4, r2, r0
 800d532:	60bc      	str	r4, [r7, #8]
 800d534:	404b      	eors	r3, r1
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d53c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zh ^= ctx->HH[hi];
 800d540:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d546:	3318      	adds	r3, #24
 800d548:	00db      	lsls	r3, r3, #3
 800d54a:	4413      	add	r3, r2
 800d54c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d554:	ea82 0400 	eor.w	r4, r2, r0
 800d558:	603c      	str	r4, [r7, #0]
 800d55a:	404b      	eors	r3, r1
 800d55c:	607b      	str	r3, [r7, #4]
 800d55e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d562:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zl ^= ctx->HL[hi];
 800d566:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d56a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d56c:	3308      	adds	r3, #8
 800d56e:	00db      	lsls	r3, r3, #3
 800d570:	4413      	add	r3, r2
 800d572:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d576:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d57a:	ea82 0a00 	eor.w	sl, r2, r0
 800d57e:	ea83 0b01 	eor.w	fp, r3, r1
 800d582:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
    for( i = 15; i >= 0; i-- )
 800d586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d588:	3b01      	subs	r3, #1
 800d58a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d58c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f6bf af15 	bge.w	800d3be <gcm_mult+0x4e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 800d594:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d598:	f04f 0200 	mov.w	r2, #0
 800d59c:	f04f 0300 	mov.w	r3, #0
 800d5a0:	0e0a      	lsrs	r2, r1, #24
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	b2d2      	uxtb	r2, r2
 800d5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a8:	701a      	strb	r2, [r3, #0]
 800d5aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d5ae:	f04f 0200 	mov.w	r2, #0
 800d5b2:	f04f 0300 	mov.w	r3, #0
 800d5b6:	0c0a      	lsrs	r2, r1, #16
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d5bc:	3101      	adds	r1, #1
 800d5be:	b2d3      	uxtb	r3, r2
 800d5c0:	700b      	strb	r3, [r1, #0]
 800d5c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d5c6:	f04f 0200 	mov.w	r2, #0
 800d5ca:	f04f 0300 	mov.w	r3, #0
 800d5ce:	0a0a      	lsrs	r2, r1, #8
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d5d4:	3102      	adds	r1, #2
 800d5d6:	b2d3      	uxtb	r3, r2
 800d5d8:	700b      	strb	r3, [r1, #0]
 800d5da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d5de:	f04f 0200 	mov.w	r2, #0
 800d5e2:	f04f 0300 	mov.w	r3, #0
 800d5e6:	000a      	movs	r2, r1
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d5ec:	3103      	adds	r1, #3
 800d5ee:	b2d3      	uxtb	r3, r2
 800d5f0:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zh, output, 4 );
 800d5f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d5f6:	f04f 0200 	mov.w	r2, #0
 800d5fa:	f04f 0300 	mov.w	r3, #0
 800d5fe:	0e02      	lsrs	r2, r0, #24
 800d600:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d604:	0e0b      	lsrs	r3, r1, #24
 800d606:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d608:	3104      	adds	r1, #4
 800d60a:	b2d3      	uxtb	r3, r2
 800d60c:	700b      	strb	r3, [r1, #0]
 800d60e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d612:	f04f 0200 	mov.w	r2, #0
 800d616:	f04f 0300 	mov.w	r3, #0
 800d61a:	0c02      	lsrs	r2, r0, #16
 800d61c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d620:	0c0b      	lsrs	r3, r1, #16
 800d622:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d624:	3105      	adds	r1, #5
 800d626:	b2d3      	uxtb	r3, r2
 800d628:	700b      	strb	r3, [r1, #0]
 800d62a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d62e:	f04f 0200 	mov.w	r2, #0
 800d632:	f04f 0300 	mov.w	r3, #0
 800d636:	0a02      	lsrs	r2, r0, #8
 800d638:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d63c:	0a0b      	lsrs	r3, r1, #8
 800d63e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d640:	3106      	adds	r1, #6
 800d642:	b2d3      	uxtb	r3, r2
 800d644:	700b      	strb	r3, [r1, #0]
 800d646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d648:	3307      	adds	r3, #7
 800d64a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d64e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 800d650:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d654:	f04f 0200 	mov.w	r2, #0
 800d658:	f04f 0300 	mov.w	r3, #0
 800d65c:	0e0a      	lsrs	r2, r1, #24
 800d65e:	2300      	movs	r3, #0
 800d660:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d662:	3108      	adds	r1, #8
 800d664:	b2d3      	uxtb	r3, r2
 800d666:	700b      	strb	r3, [r1, #0]
 800d668:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d66c:	f04f 0200 	mov.w	r2, #0
 800d670:	f04f 0300 	mov.w	r3, #0
 800d674:	0c0a      	lsrs	r2, r1, #16
 800d676:	2300      	movs	r3, #0
 800d678:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d67a:	3109      	adds	r1, #9
 800d67c:	b2d3      	uxtb	r3, r2
 800d67e:	700b      	strb	r3, [r1, #0]
 800d680:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d684:	f04f 0200 	mov.w	r2, #0
 800d688:	f04f 0300 	mov.w	r3, #0
 800d68c:	0a0a      	lsrs	r2, r1, #8
 800d68e:	2300      	movs	r3, #0
 800d690:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d692:	310a      	adds	r1, #10
 800d694:	b2d3      	uxtb	r3, r2
 800d696:	700b      	strb	r3, [r1, #0]
 800d698:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d69c:	f04f 0200 	mov.w	r2, #0
 800d6a0:	f04f 0300 	mov.w	r3, #0
 800d6a4:	000a      	movs	r2, r1
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d6aa:	310b      	adds	r1, #11
 800d6ac:	b2d3      	uxtb	r3, r2
 800d6ae:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zl, output, 12 );
 800d6b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d6b4:	f04f 0200 	mov.w	r2, #0
 800d6b8:	f04f 0300 	mov.w	r3, #0
 800d6bc:	0e02      	lsrs	r2, r0, #24
 800d6be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d6c2:	0e0b      	lsrs	r3, r1, #24
 800d6c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d6c6:	310c      	adds	r1, #12
 800d6c8:	b2d3      	uxtb	r3, r2
 800d6ca:	700b      	strb	r3, [r1, #0]
 800d6cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d6d0:	f04f 0200 	mov.w	r2, #0
 800d6d4:	f04f 0300 	mov.w	r3, #0
 800d6d8:	0c02      	lsrs	r2, r0, #16
 800d6da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d6de:	0c0b      	lsrs	r3, r1, #16
 800d6e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d6e2:	310d      	adds	r1, #13
 800d6e4:	b2d3      	uxtb	r3, r2
 800d6e6:	700b      	strb	r3, [r1, #0]
 800d6e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d6ec:	f04f 0200 	mov.w	r2, #0
 800d6f0:	f04f 0300 	mov.w	r3, #0
 800d6f4:	0a02      	lsrs	r2, r0, #8
 800d6f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d6fa:	0a0b      	lsrs	r3, r1, #8
 800d6fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d6fe:	310e      	adds	r1, #14
 800d700:	b2d3      	uxtb	r3, r2
 800d702:	700b      	strb	r3, [r1, #0]
 800d704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d706:	330f      	adds	r3, #15
 800d708:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d70c:	701a      	strb	r2, [r3, #0]
}
 800d70e:	bf00      	nop
 800d710:	3764      	adds	r7, #100	; 0x64
 800d712:	46bd      	mov	sp, r7
 800d714:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	080242d8 	.word	0x080242d8

0800d720 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 800d720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d724:	b090      	sub	sp, #64	; 0x40
 800d726:	af02      	add	r7, sp, #8
 800d728:	60f8      	str	r0, [r7, #12]
 800d72a:	60b9      	str	r1, [r7, #8]
 800d72c:	607a      	str	r2, [r7, #4]
 800d72e:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 800d730:	2300      	movs	r3, #0
 800d732:	617b      	str	r3, [r7, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d019      	beq.n	800d76e <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	2200      	movs	r2, #0
 800d73e:	469a      	mov	sl, r3
 800d740:	4693      	mov	fp, r2
 800d742:	f04f 0200 	mov.w	r2, #0
 800d746:	f04f 0300 	mov.w	r3, #0
 800d74a:	ea4f 725b 	mov.w	r2, fp, lsr #29
 800d74e:	2300      	movs	r3, #0
    if( iv_len == 0 ||
 800d750:	4313      	orrs	r3, r2
 800d752:	d10c      	bne.n	800d76e <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) add_len ) >> 61 != 0 )
 800d754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d756:	2200      	movs	r2, #0
 800d758:	4698      	mov	r8, r3
 800d75a:	4691      	mov	r9, r2
 800d75c:	f04f 0200 	mov.w	r2, #0
 800d760:	f04f 0300 	mov.w	r3, #0
 800d764:	ea4f 7259 	mov.w	r2, r9, lsr #29
 800d768:	2300      	movs	r3, #0
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800d76a:	4313      	orrs	r3, r2
 800d76c:	d002      	beq.n	800d774 <mbedtls_gcm_starts+0x54>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d76e:	f06f 0313 	mvn.w	r3, #19
 800d772:	e107      	b.n	800d984 <mbedtls_gcm_starts+0x264>
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d77a:	2210      	movs	r2, #16
 800d77c:	2100      	movs	r1, #0
 800d77e:	4618      	mov	r0, r3
 800d780:	f010 f872 	bl	801d868 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800d78a:	2210      	movs	r2, #16
 800d78c:	2100      	movs	r1, #0
 800d78e:	4618      	mov	r0, r3
 800d790:	f010 f86a 	bl	801d868 <memset>

    ctx->mode = mode;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ctx->len = 0;
 800d79c:	68f9      	ldr	r1, [r7, #12]
 800d79e:	f04f 0200 	mov.w	r2, #0
 800d7a2:	f04f 0300 	mov.w	r3, #0
 800d7a6:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    ctx->add_len = 0;
 800d7aa:	68f9      	ldr	r1, [r7, #12]
 800d7ac:	f04f 0200 	mov.w	r2, #0
 800d7b0:	f04f 0300 	mov.w	r3, #0
 800d7b4:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148

    if( iv_len == 12 )
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	2b0c      	cmp	r3, #12
 800d7bc:	d10c      	bne.n	800d7d8 <mbedtls_gcm_starts+0xb8>
    {
        memcpy( ctx->y, iv, iv_len );
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	6879      	ldr	r1, [r7, #4]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f010 f825 	bl	801d818 <memcpy>
        ctx->y[15] = 1;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 800d7d6:	e07f      	b.n	800d8d8 <mbedtls_gcm_starts+0x1b8>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 800d7d8:	f107 0318 	add.w	r3, r7, #24
 800d7dc:	2210      	movs	r2, #16
 800d7de:	2100      	movs	r1, #0
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f010 f841 	bl	801d868 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	00db      	lsls	r3, r3, #3
 800d7ea:	0e1b      	lsrs	r3, r3, #24
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	00db      	lsls	r3, r3, #3
 800d7f6:	0c1b      	lsrs	r3, r3, #16
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	00db      	lsls	r3, r3, #3
 800d802:	0a1b      	lsrs	r3, r3, #8
 800d804:	b2db      	uxtb	r3, r3
 800d806:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	b2db      	uxtb	r3, r3
 800d812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        p = iv;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 800d81a:	e033      	b.n	800d884 <mbedtls_gcm_starts+0x164>
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	2b10      	cmp	r3, #16
 800d820:	bf28      	it	cs
 800d822:	2310      	movcs	r3, #16
 800d824:	62fb      	str	r3, [r7, #44]	; 0x2c

            for( i = 0; i < use_len; i++ )
 800d826:	2300      	movs	r3, #0
 800d828:	637b      	str	r3, [r7, #52]	; 0x34
 800d82a:	e015      	b.n	800d858 <mbedtls_gcm_starts+0x138>
                ctx->y[i] ^= p[i];
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d830:	4413      	add	r3, r2
 800d832:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d836:	781a      	ldrb	r2, [r3, #0]
 800d838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d83c:	440b      	add	r3, r1
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	4053      	eors	r3, r2
 800d842:	b2d9      	uxtb	r1, r3
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d848:	4413      	add	r3, r2
 800d84a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d84e:	460a      	mov	r2, r1
 800d850:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < use_len; i++ )
 800d852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d854:	3301      	adds	r3, #1
 800d856:	637b      	str	r3, [r7, #52]	; 0x34
 800d858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d3e5      	bcc.n	800d82c <mbedtls_gcm_starts+0x10c>

            gcm_mult( ctx, ctx->y, ctx->y );
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d86c:	461a      	mov	r2, r3
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f7ff fd7e 	bl	800d370 <gcm_mult>

            iv_len -= use_len;
 800d874:	683a      	ldr	r2, [r7, #0]
 800d876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	603b      	str	r3, [r7, #0]
            p += use_len;
 800d87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d880:	4413      	add	r3, r2
 800d882:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1c8      	bne.n	800d81c <mbedtls_gcm_starts+0xfc>
        }

        for( i = 0; i < 16; i++ )
 800d88a:	2300      	movs	r3, #0
 800d88c:	637b      	str	r3, [r7, #52]	; 0x34
 800d88e:	e016      	b.n	800d8be <mbedtls_gcm_starts+0x19e>
            ctx->y[i] ^= work_buf[i];
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d894:	4413      	add	r3, r2
 800d896:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d89a:	781a      	ldrb	r2, [r3, #0]
 800d89c:	f107 0118 	add.w	r1, r7, #24
 800d8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a2:	440b      	add	r3, r1
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	4053      	eors	r3, r2
 800d8a8:	b2d9      	uxtb	r1, r3
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ae:	4413      	add	r3, r2
 800d8b0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d8b4:	460a      	mov	r2, r1
 800d8b6:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800d8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	637b      	str	r3, [r7, #52]	; 0x34
 800d8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c0:	2b0f      	cmp	r3, #15
 800d8c2:	d9e5      	bls.n	800d890 <mbedtls_gcm_starts+0x170>

        gcm_mult( ctx, ctx->y, ctx->y );
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f7ff fd4c 	bl	800d370 <gcm_mult>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 800d8e6:	f107 0314 	add.w	r3, r7, #20
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	2210      	movs	r2, #16
 800d8f0:	f7fd fb18 	bl	800af24 <mbedtls_cipher_update>
 800d8f4:	62b8      	str	r0, [r7, #40]	; 0x28
 800d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d001      	beq.n	800d900 <mbedtls_gcm_starts+0x1e0>
                             &olen ) ) != 0 )
    {
        return( ret );
 800d8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fe:	e041      	b.n	800d984 <mbedtls_gcm_starts+0x264>
    }

    ctx->add_len = add_len;
 800d900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d902:	2200      	movs	r2, #0
 800d904:	461c      	mov	r4, r3
 800d906:	4615      	mov	r5, r2
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	e9c3 4552 	strd	r4, r5, [r3, #328]	; 0x148
    p = add;
 800d90e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d910:	633b      	str	r3, [r7, #48]	; 0x30
    while( add_len > 0 )
 800d912:	e033      	b.n	800d97c <mbedtls_gcm_starts+0x25c>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 800d914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d916:	2b10      	cmp	r3, #16
 800d918:	bf28      	it	cs
 800d91a:	2310      	movcs	r3, #16
 800d91c:	62fb      	str	r3, [r7, #44]	; 0x2c

        for( i = 0; i < use_len; i++ )
 800d91e:	2300      	movs	r3, #0
 800d920:	637b      	str	r3, [r7, #52]	; 0x34
 800d922:	e015      	b.n	800d950 <mbedtls_gcm_starts+0x230>
            ctx->buf[i] ^= p[i];
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d928:	4413      	add	r3, r2
 800d92a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800d92e:	781a      	ldrb	r2, [r3, #0]
 800d930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d934:	440b      	add	r3, r1
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	4053      	eors	r3, r2
 800d93a:	b2d9      	uxtb	r1, r3
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d940:	4413      	add	r3, r2
 800d942:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800d946:	460a      	mov	r2, r1
 800d948:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 800d94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94c:	3301      	adds	r3, #1
 800d94e:	637b      	str	r3, [r7, #52]	; 0x34
 800d950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d954:	429a      	cmp	r2, r3
 800d956:	d3e5      	bcc.n	800d924 <mbedtls_gcm_starts+0x204>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800d964:	461a      	mov	r2, r3
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f7ff fd02 	bl	800d370 <gcm_mult>

        add_len -= use_len;
 800d96c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	65fb      	str	r3, [r7, #92]	; 0x5c
        p += use_len;
 800d974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	4413      	add	r3, r2
 800d97a:	633b      	str	r3, [r7, #48]	; 0x30
    while( add_len > 0 )
 800d97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1c8      	bne.n	800d914 <mbedtls_gcm_starts+0x1f4>
    }

    return( 0 );
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3738      	adds	r7, #56	; 0x38
 800d988:	46bd      	mov	sp, r7
 800d98a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d98e <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 800d98e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d992:	b096      	sub	sp, #88	; 0x58
 800d994:	af02      	add	r7, sp, #8
 800d996:	6278      	str	r0, [r7, #36]	; 0x24
 800d998:	6239      	str	r1, [r7, #32]
 800d99a:	61fa      	str	r2, [r7, #28]
 800d99c:	61bb      	str	r3, [r7, #24]
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	647b      	str	r3, [r7, #68]	; 0x44
    size_t use_len, olen = 0;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	62bb      	str	r3, [r7, #40]	; 0x28

    if( output > input && (size_t) ( output - input ) < length )
 800d9a6:	69ba      	ldr	r2, [r7, #24]
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d909      	bls.n	800d9c2 <mbedtls_gcm_update+0x34>
 800d9ae:	69ba      	ldr	r2, [r7, #24]
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	1ad3      	subs	r3, r2, r3
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	6a3b      	ldr	r3, [r7, #32]
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d902      	bls.n	800d9c2 <mbedtls_gcm_update+0x34>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d9bc:	f06f 0313 	mvn.w	r3, #19
 800d9c0:	e0d8      	b.n	800db74 <mbedtls_gcm_update+0x1e6>

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800d9c8:	6a39      	ldr	r1, [r7, #32]
 800d9ca:	2000      	movs	r0, #0
 800d9cc:	6139      	str	r1, [r7, #16]
 800d9ce:	6178      	str	r0, [r7, #20]
 800d9d0:	6939      	ldr	r1, [r7, #16]
 800d9d2:	eb12 0801 	adds.w	r8, r2, r1
 800d9d6:	6979      	ldr	r1, [r7, #20]
 800d9d8:	eb43 0901 	adc.w	r9, r3, r1
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9de:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800d9e2:	4590      	cmp	r8, r2
 800d9e4:	eb79 0303 	sbcs.w	r3, r9, r3
 800d9e8:	d313      	bcc.n	800da12 <mbedtls_gcm_update+0x84>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ec:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800d9f0:	6a39      	ldr	r1, [r7, #32]
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d9fc:	4641      	mov	r1, r8
 800d9fe:	1854      	adds	r4, r2, r1
 800da00:	4649      	mov	r1, r9
 800da02:	eb43 0101 	adc.w	r1, r3, r1
 800da06:	460d      	mov	r5, r1
    if( ctx->len + length < ctx->len ||
 800da08:	f114 0f1f 	cmn.w	r4, #31
 800da0c:	f175 030f 	sbcs.w	r3, r5, #15
 800da10:	d302      	bcc.n	800da18 <mbedtls_gcm_update+0x8a>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800da12:	f06f 0313 	mvn.w	r3, #19
 800da16:	e0ad      	b.n	800db74 <mbedtls_gcm_update+0x1e6>
    }

    ctx->len += length;
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800da1e:	6a39      	ldr	r1, [r7, #32]
 800da20:	2000      	movs	r0, #0
 800da22:	468a      	mov	sl, r1
 800da24:	4683      	mov	fp, r0
 800da26:	eb12 010a 	adds.w	r1, r2, sl
 800da2a:	6039      	str	r1, [r7, #0]
 800da2c:	eb43 030b 	adc.w	r3, r3, fp
 800da30:	607b      	str	r3, [r7, #4]
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	e9d7 1200 	ldrd	r1, r2, [r7]
 800da38:	e9c3 1250 	strd	r1, r2, [r3, #320]	; 0x140

    p = input;
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	64bb      	str	r3, [r7, #72]	; 0x48
    while( length > 0 )
 800da40:	e093      	b.n	800db6a <mbedtls_gcm_update+0x1dc>
    {
        use_len = ( length < 16 ) ? length : 16;
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	2b10      	cmp	r3, #16
 800da46:	bf28      	it	cs
 800da48:	2310      	movcs	r3, #16
 800da4a:	643b      	str	r3, [r7, #64]	; 0x40

        for( i = 16; i > 12; i-- )
 800da4c:	2310      	movs	r3, #16
 800da4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da50:	e014      	b.n	800da7c <mbedtls_gcm_update+0xee>
            if( ++ctx->y[i - 1] != 0 )
 800da52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da54:	3b01      	subs	r3, #1
 800da56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da58:	441a      	add	r2, r3
 800da5a:	f892 2160 	ldrb.w	r2, [r2, #352]	; 0x160
 800da5e:	3201      	adds	r2, #1
 800da60:	b2d1      	uxtb	r1, r2
 800da62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da64:	441a      	add	r2, r3
 800da66:	f882 1160 	strb.w	r1, [r2, #352]	; 0x160
 800da6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da6c:	4413      	add	r3, r2
 800da6e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <mbedtls_gcm_update+0xf6>
        for( i = 16; i > 12; i-- )
 800da76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da78:	3b01      	subs	r3, #1
 800da7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da7e:	2b0c      	cmp	r3, #12
 800da80:	d8e7      	bhi.n	800da52 <mbedtls_gcm_update+0xc4>
 800da82:	e000      	b.n	800da86 <mbedtls_gcm_update+0xf8>
                break;
 800da84:	bf00      	nop

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 800da86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 800da8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800da92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da96:	9300      	str	r3, [sp, #0]
 800da98:	4613      	mov	r3, r2
 800da9a:	2210      	movs	r2, #16
 800da9c:	f7fd fa42 	bl	800af24 <mbedtls_cipher_update>
 800daa0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800daa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <mbedtls_gcm_update+0x11e>
                                   &olen ) ) != 0 )
        {
            return( ret );
 800daa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daaa:	e063      	b.n	800db74 <mbedtls_gcm_update+0x1e6>
        }

        for( i = 0; i < use_len; i++ )
 800daac:	2300      	movs	r3, #0
 800daae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dab0:	e041      	b.n	800db36 <mbedtls_gcm_update+0x1a8>
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 800dab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d112      	bne.n	800dae2 <mbedtls_gcm_update+0x154>
                ctx->buf[i] ^= p[i];
 800dabc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dabe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dac0:	4413      	add	r3, r2
 800dac2:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dac6:	781a      	ldrb	r2, [r3, #0]
 800dac8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800daca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dacc:	440b      	add	r3, r1
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	4053      	eors	r3, r2
 800dad2:	b2d9      	uxtb	r1, r3
 800dad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dad8:	4413      	add	r3, r2
 800dada:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dade:	460a      	mov	r2, r1
 800dae0:	701a      	strb	r2, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 800dae2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800dae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dae8:	4413      	add	r3, r2
 800daea:	7819      	ldrb	r1, [r3, #0]
 800daec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800daee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf0:	4413      	add	r3, r2
 800daf2:	781a      	ldrb	r2, [r3, #0]
 800daf4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800daf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf8:	4403      	add	r3, r0
 800dafa:	404a      	eors	r2, r1
 800dafc:	b2d2      	uxtb	r2, r2
 800dafe:	701a      	strb	r2, [r3, #0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800db06:	2b01      	cmp	r3, #1
 800db08:	d112      	bne.n	800db30 <mbedtls_gcm_update+0x1a2>
                ctx->buf[i] ^= out_p[i];
 800db0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db0e:	4413      	add	r3, r2
 800db10:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800db14:	781a      	ldrb	r2, [r3, #0]
 800db16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db1a:	440b      	add	r3, r1
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	4053      	eors	r3, r2
 800db20:	b2d9      	uxtb	r1, r3
 800db22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db26:	4413      	add	r3, r2
 800db28:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800db2c:	460a      	mov	r2, r1
 800db2e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 800db30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db32:	3301      	adds	r3, #1
 800db34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d3b9      	bcc.n	800dab2 <mbedtls_gcm_update+0x124>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800db3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db40:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800db4a:	461a      	mov	r2, r3
 800db4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db4e:	f7ff fc0f 	bl	800d370 <gcm_mult>

        length -= use_len;
 800db52:	6a3a      	ldr	r2, [r7, #32]
 800db54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db56:	1ad3      	subs	r3, r2, r3
 800db58:	623b      	str	r3, [r7, #32]
        p += use_len;
 800db5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db5e:	4413      	add	r3, r2
 800db60:	64bb      	str	r3, [r7, #72]	; 0x48
        out_p += use_len;
 800db62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db66:	4413      	add	r3, r2
 800db68:	647b      	str	r3, [r7, #68]	; 0x44
    while( length > 0 )
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	f47f af68 	bne.w	800da42 <mbedtls_gcm_update+0xb4>
    }

    return( 0 );
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3750      	adds	r7, #80	; 0x50
 800db78:	46bd      	mov	sp, r7
 800db7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db7e <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b08e      	sub	sp, #56	; 0x38
 800db82:	af00      	add	r7, sp, #0
 800db84:	60f8      	str	r0, [r7, #12]
 800db86:	60b9      	str	r1, [r7, #8]
 800db88:	607a      	str	r2, [r7, #4]
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800db90:	f04f 0200 	mov.w	r2, #0
 800db94:	f04f 0300 	mov.w	r3, #0
 800db98:	00cb      	lsls	r3, r1, #3
 800db9a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800db9e:	00c2      	lsls	r2, r0, #3
 800dba0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    uint64_t orig_add_len = ctx->add_len * 8;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	; 0x148
 800dbaa:	f04f 0200 	mov.w	r2, #0
 800dbae:	f04f 0300 	mov.w	r3, #0
 800dbb2:	00cb      	lsls	r3, r1, #3
 800dbb4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800dbb8:	00c2      	lsls	r2, r0, #3
 800dbba:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if( tag_len > 16 || tag_len < 4 )
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b10      	cmp	r3, #16
 800dbc2:	d802      	bhi.n	800dbca <mbedtls_gcm_finish+0x4c>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b03      	cmp	r3, #3
 800dbc8:	d802      	bhi.n	800dbd0 <mbedtls_gcm_finish+0x52>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800dbca:	f06f 0313 	mvn.w	r3, #19
 800dbce:	e0f7      	b.n	800ddc0 <mbedtls_gcm_finish+0x242>

    memcpy( tag, ctx->base_ectr, tag_len );
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	4619      	mov	r1, r3
 800dbda:	68b8      	ldr	r0, [r7, #8]
 800dbdc:	f00f fe1c 	bl	801d818 <memcpy>

    if( orig_len || orig_add_len )
 800dbe0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	d104      	bne.n	800dbf2 <mbedtls_gcm_finish+0x74>
 800dbe8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dbec:	4313      	orrs	r3, r2
 800dbee:	f000 80e6 	beq.w	800ddbe <mbedtls_gcm_finish+0x240>
    {
        memset( work_buf, 0x00, 16 );
 800dbf2:	f107 0310 	add.w	r3, r7, #16
 800dbf6:	2210      	movs	r2, #16
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f00f fe34 	bl	801d868 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 800dc00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc04:	f04f 0200 	mov.w	r2, #0
 800dc08:	f04f 0300 	mov.w	r3, #0
 800dc0c:	0e0a      	lsrs	r2, r1, #24
 800dc0e:	2300      	movs	r3, #0
 800dc10:	b2d3      	uxtb	r3, r2
 800dc12:	743b      	strb	r3, [r7, #16]
 800dc14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc18:	f04f 0200 	mov.w	r2, #0
 800dc1c:	f04f 0300 	mov.w	r3, #0
 800dc20:	0c0a      	lsrs	r2, r1, #16
 800dc22:	2300      	movs	r3, #0
 800dc24:	b2d3      	uxtb	r3, r2
 800dc26:	747b      	strb	r3, [r7, #17]
 800dc28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc2c:	f04f 0200 	mov.w	r2, #0
 800dc30:	f04f 0300 	mov.w	r3, #0
 800dc34:	0a0a      	lsrs	r2, r1, #8
 800dc36:	2300      	movs	r3, #0
 800dc38:	b2d3      	uxtb	r3, r2
 800dc3a:	74bb      	strb	r3, [r7, #18]
 800dc3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc40:	f04f 0200 	mov.w	r2, #0
 800dc44:	f04f 0300 	mov.w	r3, #0
 800dc48:	000a      	movs	r2, r1
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	b2d3      	uxtb	r3, r2
 800dc4e:	74fb      	strb	r3, [r7, #19]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 800dc50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc54:	f04f 0200 	mov.w	r2, #0
 800dc58:	f04f 0300 	mov.w	r3, #0
 800dc5c:	0e02      	lsrs	r2, r0, #24
 800dc5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dc62:	0e0b      	lsrs	r3, r1, #24
 800dc64:	b2d3      	uxtb	r3, r2
 800dc66:	753b      	strb	r3, [r7, #20]
 800dc68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc6c:	f04f 0200 	mov.w	r2, #0
 800dc70:	f04f 0300 	mov.w	r3, #0
 800dc74:	0c02      	lsrs	r2, r0, #16
 800dc76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dc7a:	0c0b      	lsrs	r3, r1, #16
 800dc7c:	b2d3      	uxtb	r3, r2
 800dc7e:	757b      	strb	r3, [r7, #21]
 800dc80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc84:	f04f 0200 	mov.w	r2, #0
 800dc88:	f04f 0300 	mov.w	r3, #0
 800dc8c:	0a02      	lsrs	r2, r0, #8
 800dc8e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800dc92:	0a0b      	lsrs	r3, r1, #8
 800dc94:	b2d3      	uxtb	r3, r2
 800dc96:	75bb      	strb	r3, [r7, #22]
 800dc98:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc9c:	75fb      	strb	r3, [r7, #23]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 800dc9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dca2:	f04f 0200 	mov.w	r2, #0
 800dca6:	f04f 0300 	mov.w	r3, #0
 800dcaa:	0e0a      	lsrs	r2, r1, #24
 800dcac:	2300      	movs	r3, #0
 800dcae:	b2d3      	uxtb	r3, r2
 800dcb0:	763b      	strb	r3, [r7, #24]
 800dcb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dcb6:	f04f 0200 	mov.w	r2, #0
 800dcba:	f04f 0300 	mov.w	r3, #0
 800dcbe:	0c0a      	lsrs	r2, r1, #16
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	b2d3      	uxtb	r3, r2
 800dcc4:	767b      	strb	r3, [r7, #25]
 800dcc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	f04f 0300 	mov.w	r3, #0
 800dcd2:	0a0a      	lsrs	r2, r1, #8
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	b2d3      	uxtb	r3, r2
 800dcd8:	76bb      	strb	r3, [r7, #26]
 800dcda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dcde:	f04f 0200 	mov.w	r2, #0
 800dce2:	f04f 0300 	mov.w	r3, #0
 800dce6:	000a      	movs	r2, r1
 800dce8:	2300      	movs	r3, #0
 800dcea:	b2d3      	uxtb	r3, r2
 800dcec:	76fb      	strb	r3, [r7, #27]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 800dcee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dcf2:	f04f 0200 	mov.w	r2, #0
 800dcf6:	f04f 0300 	mov.w	r3, #0
 800dcfa:	0e02      	lsrs	r2, r0, #24
 800dcfc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dd00:	0e0b      	lsrs	r3, r1, #24
 800dd02:	b2d3      	uxtb	r3, r2
 800dd04:	773b      	strb	r3, [r7, #28]
 800dd06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dd0a:	f04f 0200 	mov.w	r2, #0
 800dd0e:	f04f 0300 	mov.w	r3, #0
 800dd12:	0c02      	lsrs	r2, r0, #16
 800dd14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dd18:	0c0b      	lsrs	r3, r1, #16
 800dd1a:	b2d3      	uxtb	r3, r2
 800dd1c:	777b      	strb	r3, [r7, #29]
 800dd1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dd22:	f04f 0200 	mov.w	r2, #0
 800dd26:	f04f 0300 	mov.w	r3, #0
 800dd2a:	0a02      	lsrs	r2, r0, #8
 800dd2c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800dd30:	0a0b      	lsrs	r3, r1, #8
 800dd32:	b2d3      	uxtb	r3, r2
 800dd34:	77bb      	strb	r3, [r7, #30]
 800dd36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dd3a:	77fb      	strb	r3, [r7, #31]

        for( i = 0; i < 16; i++ )
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd40:	e016      	b.n	800dd70 <mbedtls_gcm_finish+0x1f2>
            ctx->buf[i] ^= work_buf[i];
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd46:	4413      	add	r3, r2
 800dd48:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dd4c:	781a      	ldrb	r2, [r3, #0]
 800dd4e:	f107 0110 	add.w	r1, r7, #16
 800dd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd54:	440b      	add	r3, r1
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	4053      	eors	r3, r2
 800dd5a:	b2d9      	uxtb	r1, r3
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd60:	4413      	add	r3, r2
 800dd62:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dd66:	460a      	mov	r2, r1
 800dd68:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800dd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd72:	2b0f      	cmp	r3, #15
 800dd74:	d9e5      	bls.n	800dd42 <mbedtls_gcm_finish+0x1c4>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dd82:	461a      	mov	r2, r3
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f7ff faf3 	bl	800d370 <gcm_mult>

        for( i = 0; i < tag_len; i++ )
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	637b      	str	r3, [r7, #52]	; 0x34
 800dd8e:	e012      	b.n	800ddb6 <mbedtls_gcm_finish+0x238>
            tag[i] ^= ctx->buf[i];
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd94:	4413      	add	r3, r2
 800dd96:	7819      	ldrb	r1, [r3, #0]
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd9c:	4413      	add	r3, r2
 800dd9e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dda2:	781a      	ldrb	r2, [r3, #0]
 800dda4:	68b8      	ldr	r0, [r7, #8]
 800dda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dda8:	4403      	add	r3, r0
 800ddaa:	404a      	eors	r2, r1
 800ddac:	b2d2      	uxtb	r2, r2
 800ddae:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < tag_len; i++ )
 800ddb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	637b      	str	r3, [r7, #52]	; 0x34
 800ddb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d3e8      	bcc.n	800dd90 <mbedtls_gcm_finish+0x212>
    }

    return( 0 );
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3738      	adds	r7, #56	; 0x38
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b088      	sub	sp, #32
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
 800ddd4:	603b      	str	r3, [r7, #0]
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 800ddd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	6a3b      	ldr	r3, [r7, #32]
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	68b9      	ldr	r1, [r7, #8]
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f7ff fc9b 	bl	800d720 <mbedtls_gcm_starts>
 800ddea:	6178      	str	r0, [r7, #20]
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <mbedtls_gcm_crypt_and_tag+0x2e>
        return( ret );
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	e017      	b.n	800de26 <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f7ff fdc6 	bl	800d98e <mbedtls_gcm_update>
 800de02:	6178      	str	r0, [r7, #20]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d001      	beq.n	800de0e <mbedtls_gcm_crypt_and_tag+0x46>
        return( ret );
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	e00b      	b.n	800de26 <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 800de0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f7ff feb3 	bl	800db7e <mbedtls_gcm_finish>
 800de18:	6178      	str	r0, [r7, #20]
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <mbedtls_gcm_crypt_and_tag+0x5c>
        return( ret );
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	e000      	b.n	800de26 <mbedtls_gcm_crypt_and_tag+0x5e>

    return( 0 );
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	3718      	adds	r7, #24
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b094      	sub	sp, #80	; 0x50
 800de32:	af08      	add	r7, sp, #32
 800de34:	60f8      	str	r0, [r7, #12]
 800de36:	60b9      	str	r1, [r7, #8]
 800de38:	607a      	str	r2, [r7, #4]
 800de3a:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 800de3c:	f107 0314 	add.w	r3, r7, #20
 800de40:	9306      	str	r3, [sp, #24]
 800de42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de44:	9305      	str	r3, [sp, #20]
 800de46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de48:	9304      	str	r3, [sp, #16]
 800de4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de4c:	9303      	str	r3, [sp, #12]
 800de4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de50:	9302      	str	r3, [sp, #8]
 800de52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	2100      	movs	r1, #0
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f7ff ffb1 	bl	800ddc8 <mbedtls_gcm_crypt_and_tag>
 800de66:	6278      	str	r0, [r7, #36]	; 0x24
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <mbedtls_gcm_auth_decrypt+0x44>
                                   iv, iv_len, add, add_len,
                                   input, output, tag_len, check_tag ) ) != 0 )
    {
        return( ret );
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	e025      	b.n	800debe <mbedtls_gcm_auth_decrypt+0x90>
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800de72:	2300      	movs	r3, #0
 800de74:	62bb      	str	r3, [r7, #40]	; 0x28
 800de76:	2300      	movs	r3, #0
 800de78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de7a:	e011      	b.n	800dea0 <mbedtls_gcm_auth_decrypt+0x72>
        diff |= tag[i] ^ check_tag[i];
 800de7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de80:	4413      	add	r3, r2
 800de82:	781a      	ldrb	r2, [r3, #0]
 800de84:	f107 0114 	add.w	r1, r7, #20
 800de88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8a:	440b      	add	r3, r1
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	4053      	eors	r3, r2
 800de90:	b2db      	uxtb	r3, r3
 800de92:	461a      	mov	r2, r3
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	4313      	orrs	r3, r2
 800de98:	62bb      	str	r3, [r7, #40]	; 0x28
    for( diff = 0, i = 0; i < tag_len; i++ )
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	3301      	adds	r3, #1
 800de9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d3e9      	bcc.n	800de7c <mbedtls_gcm_auth_decrypt+0x4e>

    if( diff != 0 )
 800dea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d006      	beq.n	800debc <mbedtls_gcm_auth_decrypt+0x8e>
    {
        mbedtls_zeroize( output, length );
 800deae:	68b9      	ldr	r1, [r7, #8]
 800deb0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800deb2:	f7ff f877 	bl	800cfa4 <mbedtls_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 800deb6:	f06f 0311 	mvn.w	r3, #17
 800deba:	e000      	b.n	800debe <mbedtls_gcm_auth_decrypt+0x90>
    }

    return( 0 );
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3730      	adds	r7, #48	; 0x30
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b082      	sub	sp, #8
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fc ff2a 	bl	800ad2a <mbedtls_cipher_free>
    mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 800ded6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7ff f862 	bl	800cfa4 <mbedtls_zeroize>
}
 800dee0:	bf00      	nop
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <mbedtls_zeroize>:
#if defined(MBEDTLS_FS_IO)
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	60fb      	str	r3, [r7, #12]
 800def6:	e004      	b.n	800df02 <mbedtls_zeroize+0x1a>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	1c5a      	adds	r2, r3, #1
 800defc:	60fa      	str	r2, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	1e5a      	subs	r2, r3, #1
 800df06:	603a      	str	r2, [r7, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1f5      	bne.n	800def8 <mbedtls_zeroize+0x10>
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	3714      	adds	r7, #20
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
	...

0800df1c <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	4603      	mov	r3, r0
 800df24:	71fb      	strb	r3, [r7, #7]
    switch( md_type )
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	2b05      	cmp	r3, #5
 800df2a:	d002      	beq.n	800df32 <mbedtls_md_info_from_type+0x16>
 800df2c:	2b06      	cmp	r3, #6
 800df2e:	d002      	beq.n	800df36 <mbedtls_md_info_from_type+0x1a>
 800df30:	e003      	b.n	800df3a <mbedtls_md_info_from_type+0x1e>
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
 800df32:	4b05      	ldr	r3, [pc, #20]	; (800df48 <mbedtls_md_info_from_type+0x2c>)
 800df34:	e002      	b.n	800df3c <mbedtls_md_info_from_type+0x20>
        case MBEDTLS_MD_SHA256:
            return( &mbedtls_sha256_info );
 800df36:	4b05      	ldr	r3, [pc, #20]	; (800df4c <mbedtls_md_info_from_type+0x30>)
 800df38:	e000      	b.n	800df3c <mbedtls_md_info_from_type+0x20>
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 800df3a:	2300      	movs	r3, #0
    }
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr
 800df48:	08024358 	.word	0x08024358
 800df4c:	08024388 	.word	0x08024388

0800df50 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 800df58:	220c      	movs	r2, #12
 800df5a:	2100      	movs	r1, #0
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f00f fc83 	bl	801d868 <memset>
}
 800df62:	bf00      	nop
 800df64:	3708      	adds	r7, #8
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b082      	sub	sp, #8
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->md_info == NULL )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d026      	beq.n	800dfc6 <mbedtls_md_free+0x5c>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d022      	beq.n	800dfc6 <mbedtls_md_free+0x5c>
        return;

    if( ctx->md_ctx != NULL )
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d006      	beq.n	800df96 <mbedtls_md_free+0x2c>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	6852      	ldr	r2, [r2, #4]
 800df92:	4610      	mov	r0, r2
 800df94:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00e      	beq.n	800dfbc <mbedtls_md_free+0x52>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	689a      	ldr	r2, [r3, #8]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	005b      	lsls	r3, r3, #1
 800dfaa:	4619      	mov	r1, r3
 800dfac:	4610      	mov	r0, r2
 800dfae:	f7ff ff9b 	bl	800dee8 <mbedtls_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f00f fc16 	bl	801d7e8 <free>
    }

    mbedtls_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 800dfbc:	210c      	movs	r1, #12
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff ff92 	bl	800dee8 <mbedtls_zeroize>
 800dfc4:	e000      	b.n	800dfc8 <mbedtls_md_free+0x5e>
        return;
 800dfc6:	bf00      	nop
}
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
	...

0800dfd0 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
    if( md_info == NULL || ctx == NULL )
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d002      	beq.n	800dfe8 <mbedtls_md_setup+0x18>
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <mbedtls_md_setup+0x1c>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800dfe8:	4b17      	ldr	r3, [pc, #92]	; (800e048 <mbedtls_md_setup+0x78>)
 800dfea:	e028      	b.n	800e03e <mbedtls_md_setup+0x6e>

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	6a1b      	ldr	r3, [r3, #32]
 800dff0:	4798      	blx	r3
 800dff2:	4602      	mov	r2, r0
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	605a      	str	r2, [r3, #4]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d101      	bne.n	800e004 <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800e000:	4b12      	ldr	r3, [pc, #72]	; (800e04c <mbedtls_md_setup+0x7c>)
 800e002:	e01c      	b.n	800e03e <mbedtls_md_setup+0x6e>

    if( hmac != 0 )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d015      	beq.n	800e036 <mbedtls_md_setup+0x66>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	68db      	ldr	r3, [r3, #12]
 800e00e:	4619      	mov	r1, r3
 800e010:	2002      	movs	r0, #2
 800e012:	f00f fbaf 	bl	801d774 <calloc>
 800e016:	4603      	mov	r3, r0
 800e018:	461a      	mov	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	609a      	str	r2, [r3, #8]
        if( ctx->hmac_ctx == NULL )
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d107      	bne.n	800e036 <mbedtls_md_setup+0x66>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	6852      	ldr	r2, [r2, #4]
 800e02e:	4610      	mov	r0, r2
 800e030:	4798      	blx	r3
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800e032:	4b06      	ldr	r3, [pc, #24]	; (800e04c <mbedtls_md_setup+0x7c>)
 800e034:	e003      	b.n	800e03e <mbedtls_md_setup+0x6e>
        }
    }

    ctx->md_info = md_info;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	68ba      	ldr	r2, [r7, #8]
 800e03a:	601a      	str	r2, [r3, #0]

    return( 0 );
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	ffffaf00 	.word	0xffffaf00
 800e04c:	ffffae80 	.word	0xffffae80

0800e050 <mbedtls_md>:
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	603b      	str	r3, [r7, #0]
    if( md_info == NULL )
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d101      	bne.n	800e068 <mbedtls_md+0x18>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e064:	4b06      	ldr	r3, [pc, #24]	; (800e080 <mbedtls_md+0x30>)
 800e066:	e006      	b.n	800e076 <mbedtls_md+0x26>

    return( md_info->digest_func( input, ilen, output ) );
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	69db      	ldr	r3, [r3, #28]
 800e06c:	683a      	ldr	r2, [r7, #0]
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	68b8      	ldr	r0, [r7, #8]
 800e072:	4798      	blx	r3
 800e074:	4603      	mov	r3, r0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	ffffaf00 	.word	0xffffaf00

0800e084 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b090      	sub	sp, #64	; 0x40
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d007      	beq.n	800e0a6 <mbedtls_md_hmac_starts+0x22>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d003      	beq.n	800e0a6 <mbedtls_md_hmac_starts+0x22>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d101      	bne.n	800e0aa <mbedtls_md_hmac_starts+0x26>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e0a6:	4b4f      	ldr	r3, [pc, #316]	; (800e1e4 <mbedtls_md_hmac_starts+0x160>)
 800e0a8:	e098      	b.n	800e1dc <mbedtls_md_hmac_starts+0x158>

    if( keylen > (size_t) ctx->md_info->block_size )
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d92a      	bls.n	800e10e <mbedtls_md_hmac_starts+0x8a>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	6852      	ldr	r2, [r2, #4]
 800e0c2:	4610      	mov	r0, r2
 800e0c4:	4798      	blx	r3
 800e0c6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d178      	bne.n	800e1c0 <mbedtls_md_hmac_starts+0x13c>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	695b      	ldr	r3, [r3, #20]
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	6850      	ldr	r0, [r2, #4]
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	68b9      	ldr	r1, [r7, #8]
 800e0dc:	4798      	blx	r3
 800e0de:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d16e      	bne.n	800e1c4 <mbedtls_md_hmac_starts+0x140>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	699b      	ldr	r3, [r3, #24]
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	6852      	ldr	r2, [r2, #4]
 800e0f0:	f107 0110 	add.w	r1, r7, #16
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4798      	blx	r3
 800e0f8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d163      	bne.n	800e1c8 <mbedtls_md_hmac_starts+0x144>
            goto cleanup;

        keylen = ctx->md_info->size;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	607b      	str	r3, [r7, #4]
        key = sum;
 800e108:	f107 0310 	add.w	r3, r7, #16
 800e10c:	60bb      	str	r3, [r7, #8]
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	637b      	str	r3, [r7, #52]	; 0x34
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	6812      	ldr	r2, [r2, #0]
 800e11c:	68d2      	ldr	r2, [r2, #12]
 800e11e:	4413      	add	r3, r2
 800e120:	633b      	str	r3, [r7, #48]	; 0x30

    memset( ipad, 0x36, ctx->md_info->block_size );
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	461a      	mov	r2, r3
 800e12a:	2136      	movs	r1, #54	; 0x36
 800e12c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e12e:	f00f fb9b 	bl	801d868 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	461a      	mov	r2, r3
 800e13a:	215c      	movs	r1, #92	; 0x5c
 800e13c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e13e:	f00f fb93 	bl	801d868 <memset>

    for( i = 0; i < keylen; i++ )
 800e142:	2300      	movs	r3, #0
 800e144:	63bb      	str	r3, [r7, #56]	; 0x38
 800e146:	e01e      	b.n	800e186 <mbedtls_md_hmac_starts+0x102>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800e148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14c:	4413      	add	r3, r2
 800e14e:	7819      	ldrb	r1, [r3, #0]
 800e150:	68ba      	ldr	r2, [r7, #8]
 800e152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e154:	4413      	add	r3, r2
 800e156:	781a      	ldrb	r2, [r3, #0]
 800e158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	4403      	add	r3, r0
 800e15e:	404a      	eors	r2, r1
 800e160:	b2d2      	uxtb	r2, r2
 800e162:	701a      	strb	r2, [r3, #0]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800e164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e168:	4413      	add	r3, r2
 800e16a:	7819      	ldrb	r1, [r3, #0]
 800e16c:	68ba      	ldr	r2, [r7, #8]
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	4413      	add	r3, r2
 800e172:	781a      	ldrb	r2, [r3, #0]
 800e174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e178:	4403      	add	r3, r0
 800e17a:	404a      	eors	r2, r1
 800e17c:	b2d2      	uxtb	r2, r2
 800e17e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < keylen; i++ )
 800e180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e182:	3301      	adds	r3, #1
 800e184:	63bb      	str	r3, [r7, #56]	; 0x38
 800e186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d3dc      	bcc.n	800e148 <mbedtls_md_hmac_starts+0xc4>
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	68fa      	ldr	r2, [r7, #12]
 800e196:	6852      	ldr	r2, [r2, #4]
 800e198:	4610      	mov	r0, r2
 800e19a:	4798      	blx	r3
 800e19c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d113      	bne.n	800e1cc <mbedtls_md_hmac_starts+0x148>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	695b      	ldr	r3, [r3, #20]
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	6850      	ldr	r0, [r2, #4]
                                           ctx->md_info->block_size ) ) != 0 )
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	6812      	ldr	r2, [r2, #0]
 800e1b2:	68d2      	ldr	r2, [r2, #12]
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e1b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e1b6:	4798      	blx	r3
 800e1b8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1bc:	2b00      	cmp	r3, #0
        goto cleanup;

cleanup:
 800e1be:	e006      	b.n	800e1ce <mbedtls_md_hmac_starts+0x14a>
            goto cleanup;
 800e1c0:	bf00      	nop
 800e1c2:	e004      	b.n	800e1ce <mbedtls_md_hmac_starts+0x14a>
            goto cleanup;
 800e1c4:	bf00      	nop
 800e1c6:	e002      	b.n	800e1ce <mbedtls_md_hmac_starts+0x14a>
            goto cleanup;
 800e1c8:	bf00      	nop
 800e1ca:	e000      	b.n	800e1ce <mbedtls_md_hmac_starts+0x14a>
        goto cleanup;
 800e1cc:	bf00      	nop
    mbedtls_zeroize( sum, sizeof( sum ) );
 800e1ce:	f107 0310 	add.w	r3, r7, #16
 800e1d2:	2120      	movs	r1, #32
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7ff fe87 	bl	800dee8 <mbedtls_zeroize>

    return( ret );
 800e1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3740      	adds	r7, #64	; 0x40
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	ffffaf00 	.word	0xffffaf00

0800e1e8 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d007      	beq.n	800e20a <mbedtls_md_hmac_update+0x22>
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d003      	beq.n	800e20a <mbedtls_md_hmac_update+0x22>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d101      	bne.n	800e20e <mbedtls_md_hmac_update+0x26>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e20a:	4b07      	ldr	r3, [pc, #28]	; (800e228 <mbedtls_md_hmac_update+0x40>)
 800e20c:	e008      	b.n	800e220 <mbedtls_md_hmac_update+0x38>

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	695b      	ldr	r3, [r3, #20]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	6850      	ldr	r0, [r2, #4]
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	68b9      	ldr	r1, [r7, #8]
 800e21c:	4798      	blx	r3
 800e21e:	4603      	mov	r3, r0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	ffffaf00 	.word	0xffffaf00

0800e22c <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08c      	sub	sp, #48	; 0x30
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d007      	beq.n	800e24c <mbedtls_md_hmac_finish+0x20>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d003      	beq.n	800e24c <mbedtls_md_hmac_finish+0x20>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d101      	bne.n	800e250 <mbedtls_md_hmac_finish+0x24>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e24c:	4b29      	ldr	r3, [pc, #164]	; (800e2f4 <mbedtls_md_hmac_finish+0xc8>)
 800e24e:	e04c      	b.n	800e2ea <mbedtls_md_hmac_finish+0xbe>

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	6812      	ldr	r2, [r2, #0]
 800e258:	68d2      	ldr	r2, [r2, #12]
 800e25a:	4413      	add	r3, r2
 800e25c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	6852      	ldr	r2, [r2, #4]
 800e268:	f107 0108 	add.w	r1, r7, #8
 800e26c:	4610      	mov	r0, r2
 800e26e:	4798      	blx	r3
 800e270:	62b8      	str	r0, [r7, #40]	; 0x28
 800e272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <mbedtls_md_hmac_finish+0x50>
        return( ret );
 800e278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27a:	e036      	b.n	800e2ea <mbedtls_md_hmac_finish+0xbe>
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	6852      	ldr	r2, [r2, #4]
 800e286:	4610      	mov	r0, r2
 800e288:	4798      	blx	r3
 800e28a:	62b8      	str	r0, [r7, #40]	; 0x28
 800e28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d001      	beq.n	800e296 <mbedtls_md_hmac_finish+0x6a>
        return( ret );
 800e292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e294:	e029      	b.n	800e2ea <mbedtls_md_hmac_finish+0xbe>
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	695b      	ldr	r3, [r3, #20]
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	6850      	ldr	r0, [r2, #4]
                                           ctx->md_info->block_size ) ) != 0 )
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	6812      	ldr	r2, [r2, #0]
 800e2a4:	68d2      	ldr	r2, [r2, #12]
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 800e2a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2a8:	4798      	blx	r3
 800e2aa:	62b8      	str	r0, [r7, #40]	; 0x28
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <mbedtls_md_hmac_finish+0x8a>
        return( ret );
 800e2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b4:	e019      	b.n	800e2ea <mbedtls_md_hmac_finish+0xbe>
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	695b      	ldr	r3, [r3, #20]
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	6850      	ldr	r0, [r2, #4]
                                           ctx->md_info->size ) ) != 0 )
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	6812      	ldr	r2, [r2, #0]
 800e2c4:	6892      	ldr	r2, [r2, #8]
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 800e2c6:	f107 0108 	add.w	r1, r7, #8
 800e2ca:	4798      	blx	r3
 800e2cc:	62b8      	str	r0, [r7, #40]	; 0x28
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d001      	beq.n	800e2d8 <mbedtls_md_hmac_finish+0xac>
        return( ret );
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	e008      	b.n	800e2ea <mbedtls_md_hmac_finish+0xbe>
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	699b      	ldr	r3, [r3, #24]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	6852      	ldr	r2, [r2, #4]
 800e2e2:	6839      	ldr	r1, [r7, #0]
 800e2e4:	4610      	mov	r0, r2
 800e2e6:	4798      	blx	r3
 800e2e8:	4603      	mov	r3, r0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3730      	adds	r7, #48	; 0x30
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	ffffaf00 	.word	0xffffaf00

0800e2f8 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d007      	beq.n	800e316 <mbedtls_md_hmac_reset+0x1e>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d003      	beq.n	800e316 <mbedtls_md_hmac_reset+0x1e>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d101      	bne.n	800e31a <mbedtls_md_hmac_reset+0x22>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e316:	4b10      	ldr	r3, [pc, #64]	; (800e358 <mbedtls_md_hmac_reset+0x60>)
 800e318:	e01a      	b.n	800e350 <mbedtls_md_hmac_reset+0x58>

    ipad = (unsigned char *) ctx->hmac_ctx;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	60fb      	str	r3, [r7, #12]

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	6852      	ldr	r2, [r2, #4]
 800e32a:	4610      	mov	r0, r2
 800e32c:	4798      	blx	r3
 800e32e:	60b8      	str	r0, [r7, #8]
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d001      	beq.n	800e33a <mbedtls_md_hmac_reset+0x42>
        return( ret );
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	e00a      	b.n	800e350 <mbedtls_md_hmac_reset+0x58>
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	695b      	ldr	r3, [r3, #20]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	6850      	ldr	r0, [r2, #4]
                                       ctx->md_info->block_size ) );
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	6812      	ldr	r2, [r2, #0]
 800e348:	68d2      	ldr	r2, [r2, #12]
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800e34a:	68f9      	ldr	r1, [r7, #12]
 800e34c:	4798      	blx	r3
 800e34e:	4603      	mov	r3, r0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	ffffaf00 	.word	0xffffaf00

0800e35c <mbedtls_md_process>:

    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
    if( ctx == NULL || ctx->md_info == NULL )
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d003      	beq.n	800e374 <mbedtls_md_process+0x18>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d101      	bne.n	800e378 <mbedtls_md_process+0x1c>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800e374:	4b07      	ldr	r3, [pc, #28]	; (800e394 <mbedtls_md_process+0x38>)
 800e376:	e008      	b.n	800e38a <mbedtls_md_process+0x2e>

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	6852      	ldr	r2, [r2, #4]
 800e382:	6839      	ldr	r1, [r7, #0]
 800e384:	4610      	mov	r0, r2
 800e386:	4798      	blx	r3
 800e388:	4603      	mov	r3, r0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	ffffaf00 	.word	0xffffaf00

0800e398 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
    if( md_info == NULL )
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d101      	bne.n	800e3aa <mbedtls_md_get_size+0x12>
        return( 0 );
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	e002      	b.n	800e3b0 <mbedtls_md_get_size+0x18>

    return md_info->size;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	689b      	ldr	r3, [r3, #8]
 800e3ae:	b2db      	uxtb	r3, r3
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <sha224_starts_wrap>:
 * Wrappers for generic message digests
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f003 f8f6 	bl	80115b8 <mbedtls_sha256_starts_ret>
 800e3cc:	4603      	mov	r3, r0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3708      	adds	r7, #8
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <sha224_update_wrap>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b084      	sub	sp, #16
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	60f8      	str	r0, [r7, #12]
 800e3de:	60b9      	str	r1, [r7, #8]
 800e3e0:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	68b9      	ldr	r1, [r7, #8]
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f004 fe9a 	bl	8013120 <mbedtls_sha256_update_ret>
 800e3ec:	4603      	mov	r3, r0
                                       input, ilen ) );
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <sha224_finish_wrap>:

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b082      	sub	sp, #8
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
 800e3fe:	6039      	str	r1, [r7, #0]
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 800e400:	6839      	ldr	r1, [r7, #0]
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f004 ff02 	bl	801320c <mbedtls_sha256_finish_ret>
 800e408:	4603      	mov	r3, r0
                                       output ) );
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <sha224_wrap>:

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b084      	sub	sp, #16
 800e416:	af00      	add	r7, sp, #0
 800e418:	60f8      	str	r0, [r7, #12]
 800e41a:	60b9      	str	r1, [r7, #8]
 800e41c:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 800e41e:	2301      	movs	r3, #1
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	68b9      	ldr	r1, [r7, #8]
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f005 f82b 	bl	8013480 <mbedtls_sha256_ret>
 800e42a:	4603      	mov	r3, r0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <sha224_ctx_alloc>:

static void *sha224_ctx_alloc( void )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 800e43a:	216c      	movs	r1, #108	; 0x6c
 800e43c:	2001      	movs	r0, #1
 800e43e:	f00f f999 	bl	801d774 <calloc>
 800e442:	4603      	mov	r3, r0
 800e444:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d002      	beq.n	800e452 <sha224_ctx_alloc+0x1e>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f003 f885 	bl	801155c <mbedtls_sha256_init>

    return( ctx );
 800e452:	687b      	ldr	r3, [r7, #4]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <sha224_ctx_free>:

static void sha224_ctx_free( void *ctx )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f003 f886 	bl	8011576 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f00f f9bc 	bl	801d7e8 <free>
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <sha224_clone_wrap>:

static void sha224_clone_wrap( void *dst, const void *src )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 800e482:	6839      	ldr	r1, [r7, #0]
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f003 f886 	bl	8011596 <mbedtls_sha256_clone>
                    (const mbedtls_sha256_context *) src );
}
 800e48a:	bf00      	nop
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <sha224_process_wrap>:

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b082      	sub	sp, #8
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
 800e49a:	6039      	str	r1, [r7, #0]
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 800e49c:	6839      	ldr	r1, [r7, #0]
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f003 f8f4 	bl	801168c <mbedtls_internal_sha256_process>
 800e4a4:	4603      	mov	r3, r0
                                             data ) );
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3708      	adds	r7, #8
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <sha256_starts_wrap>:
    sha224_clone_wrap,
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b082      	sub	sp, #8
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f003 f87d 	bl	80115b8 <mbedtls_sha256_starts_ret>
 800e4be:	4603      	mov	r3, r0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <sha256_wrap>:

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	68b9      	ldr	r1, [r7, #8]
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f004 ffd0 	bl	8013480 <mbedtls_sha256_ret>
 800e4e0:	4603      	mov	r3, r0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3710      	adds	r7, #16
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
	...

0800e4ec <oid_x520_attr_from_asn1>:
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	4b16      	ldr	r3, [pc, #88]	; (800e550 <oid_x520_attr_from_asn1+0x64>)
 800e4f6:	60fb      	str	r3, [r7, #12]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	60bb      	str	r3, [r7, #8]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d002      	beq.n	800e508 <oid_x520_attr_from_asn1+0x1c>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d11a      	bne.n	800e53e <oid_x520_attr_from_asn1+0x52>
 800e508:	2300      	movs	r3, #0
 800e50a:	e01d      	b.n	800e548 <oid_x520_attr_from_asn1+0x5c>
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	685a      	ldr	r2, [r3, #4]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	429a      	cmp	r2, r3
 800e516:	d10d      	bne.n	800e534 <oid_x520_attr_from_asn1+0x48>
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	6818      	ldr	r0, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6899      	ldr	r1, [r3, #8]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	461a      	mov	r2, r3
 800e526:	f00f f967 	bl	801d7f8 <memcmp>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d101      	bne.n	800e534 <oid_x520_attr_from_asn1+0x48>
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	e009      	b.n	800e548 <oid_x520_attr_from_asn1+0x5c>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3314      	adds	r3, #20
 800e538:	60fb      	str	r3, [r7, #12]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	60bb      	str	r3, [r7, #8]
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1e2      	bne.n	800e50c <oid_x520_attr_from_asn1+0x20>
 800e546:	2300      	movs	r3, #0
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	080243b8 	.word	0x080243b8

0800e554 <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7ff ffc4 	bl	800e4ec <oid_x520_attr_from_asn1>
 800e564:	60f8      	str	r0, [r7, #12]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d102      	bne.n	800e572 <mbedtls_oid_get_attr_short_name+0x1e>
 800e56c:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e570:	e004      	b.n	800e57c <mbedtls_oid_get_attr_short_name+0x28>
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	691a      	ldr	r2, [r3, #16]
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	601a      	str	r2, [r3, #0]
 800e57a:	2300      	movs	r3, #0
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <oid_x509_ext_from_asn1>:
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	4b16      	ldr	r3, [pc, #88]	; (800e5e8 <oid_x509_ext_from_asn1+0x64>)
 800e58e:	60fb      	str	r3, [r7, #12]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	60bb      	str	r3, [r7, #8]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d002      	beq.n	800e5a0 <oid_x509_ext_from_asn1+0x1c>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d11a      	bne.n	800e5d6 <oid_x509_ext_from_asn1+0x52>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	e01d      	b.n	800e5e0 <oid_x509_ext_from_asn1+0x5c>
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	685a      	ldr	r2, [r3, #4]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d10d      	bne.n	800e5cc <oid_x509_ext_from_asn1+0x48>
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	6818      	ldr	r0, [r3, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6899      	ldr	r1, [r3, #8]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	461a      	mov	r2, r3
 800e5be:	f00f f91b 	bl	801d7f8 <memcmp>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d101      	bne.n	800e5cc <oid_x509_ext_from_asn1+0x48>
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	e009      	b.n	800e5e0 <oid_x509_ext_from_asn1+0x5c>
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	3314      	adds	r3, #20
 800e5d0:	60fb      	str	r3, [r7, #12]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	60bb      	str	r3, [r7, #8]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d1e2      	bne.n	800e5a4 <oid_x509_ext_from_asn1+0x20>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	08024548 	.word	0x08024548

0800e5ec <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7ff ffc4 	bl	800e584 <oid_x509_ext_from_asn1>
 800e5fc:	60f8      	str	r0, [r7, #12]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d102      	bne.n	800e60a <mbedtls_oid_get_x509_ext_type+0x1e>
 800e604:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e608:	e004      	b.n	800e614 <mbedtls_oid_get_x509_ext_type+0x28>
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	691a      	ldr	r2, [r3, #16]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	601a      	str	r2, [r3, #0]
 800e612:	2300      	movs	r3, #0
 800e614:	4618      	mov	r0, r3
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <oid_ext_key_usage_from_asn1>:
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	4b16      	ldr	r3, [pc, #88]	; (800e680 <oid_ext_key_usage_from_asn1+0x64>)
 800e626:	60fb      	str	r3, [r7, #12]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	60bb      	str	r3, [r7, #8]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <oid_ext_key_usage_from_asn1+0x1c>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d11a      	bne.n	800e66e <oid_ext_key_usage_from_asn1+0x52>
 800e638:	2300      	movs	r3, #0
 800e63a:	e01d      	b.n	800e678 <oid_ext_key_usage_from_asn1+0x5c>
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	685a      	ldr	r2, [r3, #4]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	429a      	cmp	r2, r3
 800e646:	d10d      	bne.n	800e664 <oid_ext_key_usage_from_asn1+0x48>
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	6818      	ldr	r0, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6899      	ldr	r1, [r3, #8]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	461a      	mov	r2, r3
 800e656:	f00f f8cf 	bl	801d7f8 <memcmp>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d101      	bne.n	800e664 <oid_ext_key_usage_from_asn1+0x48>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	e009      	b.n	800e678 <oid_ext_key_usage_from_asn1+0x5c>
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	3310      	adds	r3, #16
 800e668:	60fb      	str	r3, [r7, #12]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	60bb      	str	r3, [r7, #8]
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1e2      	bne.n	800e63c <oid_ext_key_usage_from_asn1+0x20>
 800e676:	2300      	movs	r3, #0
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	080245c0 	.word	0x080245c0

0800e684 <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff ffc4 	bl	800e61c <oid_ext_key_usage_from_asn1>
 800e694:	60f8      	str	r0, [r7, #12]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d102      	bne.n	800e6a2 <mbedtls_oid_get_extended_key_usage+0x1e>
 800e69c:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e6a0:	e004      	b.n	800e6ac <mbedtls_oid_get_extended_key_usage+0x28>
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	68da      	ldr	r2, [r3, #12]
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	601a      	str	r2, [r3, #0]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <oid_sig_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	4b16      	ldr	r3, [pc, #88]	; (800e718 <oid_sig_alg_from_asn1+0x64>)
 800e6be:	60fb      	str	r3, [r7, #12]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	60bb      	str	r3, [r7, #8]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d002      	beq.n	800e6d0 <oid_sig_alg_from_asn1+0x1c>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d11a      	bne.n	800e706 <oid_sig_alg_from_asn1+0x52>
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	e01d      	b.n	800e710 <oid_sig_alg_from_asn1+0x5c>
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	685a      	ldr	r2, [r3, #4]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d10d      	bne.n	800e6fc <oid_sig_alg_from_asn1+0x48>
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	6818      	ldr	r0, [r3, #0]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6899      	ldr	r1, [r3, #8]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	f00f f883 	bl	801d7f8 <memcmp>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d101      	bne.n	800e6fc <oid_sig_alg_from_asn1+0x48>
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	e009      	b.n	800e710 <oid_sig_alg_from_asn1+0x5c>
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	3314      	adds	r3, #20
 800e700:	60fb      	str	r3, [r7, #12]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	60bb      	str	r3, [r7, #8]
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1e2      	bne.n	800e6d4 <oid_sig_alg_from_asn1+0x20>
 800e70e:	2300      	movs	r3, #0
 800e710:	4618      	mov	r0, r3
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	08024630 	.word	0x08024630

0800e71c <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7ff ffc4 	bl	800e6b4 <oid_sig_alg_from_asn1>
 800e72c:	60f8      	str	r0, [r7, #12]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d102      	bne.n	800e73a <mbedtls_oid_get_sig_alg_desc+0x1e>
 800e734:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e738:	e004      	b.n	800e744 <mbedtls_oid_get_sig_alg_desc+0x28>
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	68da      	ldr	r2, [r3, #12]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	601a      	str	r2, [r3, #0]
 800e742:	2300      	movs	r3, #0
 800e744:	4618      	mov	r0, r3
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f7ff ffab 	bl	800e6b4 <oid_sig_alg_from_asn1>
 800e75e:	6178      	str	r0, [r7, #20]
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d102      	bne.n	800e76c <mbedtls_oid_get_sig_alg+0x20>
 800e766:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e76a:	e008      	b.n	800e77e <mbedtls_oid_get_sig_alg+0x32>
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	7c1a      	ldrb	r2, [r3, #16]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	701a      	strb	r2, [r3, #0]
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	7c5a      	ldrb	r2, [r3, #17]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	701a      	strb	r2, [r3, #0]
 800e77c:	2300      	movs	r3, #0
 800e77e:	4618      	mov	r0, r3
 800e780:	3718      	adds	r7, #24
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
	...

0800e788 <oid_pk_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	4b16      	ldr	r3, [pc, #88]	; (800e7ec <oid_pk_alg_from_asn1+0x64>)
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	60bb      	str	r3, [r7, #8]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d002      	beq.n	800e7a4 <oid_pk_alg_from_asn1+0x1c>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d11a      	bne.n	800e7da <oid_pk_alg_from_asn1+0x52>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	e01d      	b.n	800e7e4 <oid_pk_alg_from_asn1+0x5c>
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d10d      	bne.n	800e7d0 <oid_pk_alg_from_asn1+0x48>
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	6818      	ldr	r0, [r3, #0]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6899      	ldr	r1, [r3, #8]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	f00f f819 	bl	801d7f8 <memcmp>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d101      	bne.n	800e7d0 <oid_pk_alg_from_asn1+0x48>
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	e009      	b.n	800e7e4 <oid_pk_alg_from_asn1+0x5c>
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	3314      	adds	r3, #20
 800e7d4:	60fb      	str	r3, [r7, #12]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	60bb      	str	r3, [r7, #8]
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1e2      	bne.n	800e7a8 <oid_pk_alg_from_asn1+0x20>
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	08024680 	.word	0x08024680

0800e7f0 <mbedtls_oid_get_pk_alg>:
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f7ff ffc4 	bl	800e788 <oid_pk_alg_from_asn1>
 800e800:	60f8      	str	r0, [r7, #12]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d102      	bne.n	800e80e <mbedtls_oid_get_pk_alg+0x1e>
 800e808:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e80c:	e004      	b.n	800e818 <mbedtls_oid_get_pk_alg+0x28>
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	7c1a      	ldrb	r2, [r3, #16]
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	701a      	strb	r2, [r3, #0]
 800e816:	2300      	movs	r3, #0
 800e818:	4618      	mov	r0, r3
 800e81a:	3710      	adds	r7, #16
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 800e820:	b480      	push	{r7}
 800e822:	b087      	sub	sp, #28
 800e824:	af00      	add	r7, sp, #0
 800e826:	4603      	mov	r3, r0
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
 800e82c:	73fb      	strb	r3, [r7, #15]
 800e82e:	4b10      	ldr	r3, [pc, #64]	; (800e870 <mbedtls_oid_get_oid_by_md+0x50>)
 800e830:	617b      	str	r3, [r7, #20]
 800e832:	e011      	b.n	800e858 <mbedtls_oid_get_oid_by_md+0x38>
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	7c1b      	ldrb	r3, [r3, #16]
 800e838:	7bfa      	ldrb	r2, [r7, #15]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d109      	bne.n	800e852 <mbedtls_oid_get_oid_by_md+0x32>
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	685a      	ldr	r2, [r3, #4]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	601a      	str	r2, [r3, #0]
 800e84e:	2300      	movs	r3, #0
 800e850:	e008      	b.n	800e864 <mbedtls_oid_get_oid_by_md+0x44>
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	3314      	adds	r3, #20
 800e856:	617b      	str	r3, [r7, #20]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1e9      	bne.n	800e834 <mbedtls_oid_get_oid_by_md+0x14>
 800e860:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800e864:	4618      	mov	r0, r3
 800e866:	371c      	adds	r7, #28
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	080246d0 	.word	0x080246d0

0800e874 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	60fb      	str	r3, [r7, #12]
 800e882:	e004      	b.n	800e88e <mbedtls_zeroize+0x1a>
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	1c5a      	adds	r2, r3, #1
 800e888:	60fa      	str	r2, [r7, #12]
 800e88a:	2200      	movs	r2, #0
 800e88c:	701a      	strb	r2, [r3, #0]
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	1e5a      	subs	r2, r3, #1
 800e892:	603a      	str	r2, [r7, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1f5      	bne.n	800e884 <mbedtls_zeroize+0x10>
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	3714      	adds	r7, #20
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <mbedtls_pem_init>:

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b082      	sub	sp, #8
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 800e8ae:	220c      	movs	r2, #12
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f00e ffd8 	bl	801d868 <memset>
}
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b08e      	sub	sp, #56	; 0x38
 800e8c4:	af02      	add	r7, sp, #8
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
 800e8cc:	603b      	str	r3, [r7, #0]
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d101      	bne.n	800e8d8 <mbedtls_pem_read_buffer+0x18>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 800e8d4:	4b63      	ldr	r3, [pc, #396]	; (800ea64 <mbedtls_pem_read_buffer+0x1a4>)
 800e8d6:	e0c0      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>

    s1 = (unsigned char *) strstr( (const char *) data, header );
 800e8d8:	68b9      	ldr	r1, [r7, #8]
 800e8da:	6838      	ldr	r0, [r7, #0]
 800e8dc:	f00f fa00 	bl	801dce0 <strstr>
 800e8e0:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( s1 == NULL )
 800e8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d101      	bne.n	800e8ec <mbedtls_pem_read_buffer+0x2c>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800e8e8:	4b5f      	ldr	r3, [pc, #380]	; (800ea68 <mbedtls_pem_read_buffer+0x1a8>)
 800e8ea:	e0b6      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 800e8ec:	6879      	ldr	r1, [r7, #4]
 800e8ee:	6838      	ldr	r0, [r7, #0]
 800e8f0:	f00f f9f6 	bl	801dce0 <strstr>
 800e8f4:	6278      	str	r0, [r7, #36]	; 0x24

    if( s2 == NULL || s2 <= s1 )
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d003      	beq.n	800e904 <mbedtls_pem_read_buffer+0x44>
 800e8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e900:	429a      	cmp	r2, r3
 800e902:	d801      	bhi.n	800e908 <mbedtls_pem_read_buffer+0x48>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800e904:	4b58      	ldr	r3, [pc, #352]	; (800ea68 <mbedtls_pem_read_buffer+0x1a8>)
 800e906:	e0a8      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>

    s1 += strlen( header );
 800e908:	68b8      	ldr	r0, [r7, #8]
 800e90a:	f7f1 fc61 	bl	80001d0 <strlen>
 800e90e:	4602      	mov	r2, r0
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	4413      	add	r3, r2
 800e914:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == ' '  ) s1++;
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	2b20      	cmp	r3, #32
 800e91c:	d102      	bne.n	800e924 <mbedtls_pem_read_buffer+0x64>
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	3301      	adds	r3, #1
 800e922:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == '\r' ) s1++;
 800e924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	2b0d      	cmp	r3, #13
 800e92a:	d102      	bne.n	800e932 <mbedtls_pem_read_buffer+0x72>
 800e92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92e:	3301      	adds	r3, #1
 800e930:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == '\n' ) s1++;
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2b0a      	cmp	r3, #10
 800e938:	d110      	bne.n	800e95c <mbedtls_pem_read_buffer+0x9c>
 800e93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93c:	3301      	adds	r3, #1
 800e93e:	62fb      	str	r3, [r7, #44]	; 0x2c
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
 800e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e942:	62bb      	str	r3, [r7, #40]	; 0x28
    end += strlen( footer );
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f7f1 fc43 	bl	80001d0 <strlen>
 800e94a:	4602      	mov	r2, r0
 800e94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94e:	4413      	add	r3, r2
 800e950:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == ' '  ) end++;
 800e952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	2b20      	cmp	r3, #32
 800e958:	d105      	bne.n	800e966 <mbedtls_pem_read_buffer+0xa6>
 800e95a:	e001      	b.n	800e960 <mbedtls_pem_read_buffer+0xa0>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800e95c:	4b42      	ldr	r3, [pc, #264]	; (800ea68 <mbedtls_pem_read_buffer+0x1a8>)
 800e95e:	e07c      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>
    if( *end == ' '  ) end++;
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	3301      	adds	r3, #1
 800e964:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == '\r' ) end++;
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	2b0d      	cmp	r3, #13
 800e96c:	d102      	bne.n	800e974 <mbedtls_pem_read_buffer+0xb4>
 800e96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e970:	3301      	adds	r3, #1
 800e972:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == '\n' ) end++;
 800e974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	2b0a      	cmp	r3, #10
 800e97a:	d102      	bne.n	800e982 <mbedtls_pem_read_buffer+0xc2>
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	3301      	adds	r3, #1
 800e980:	62bb      	str	r3, [r7, #40]	; 0x28
    *use_len = end - data;
 800e982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	461a      	mov	r2, r3
 800e98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e98c:	601a      	str	r2, [r3, #0]

    enc = 0;
 800e98e:	2300      	movs	r3, #0
 800e990:	623b      	str	r3, [r7, #32]

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 800e992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	2b15      	cmp	r3, #21
 800e99a:	dd09      	ble.n	800e9b0 <mbedtls_pem_read_buffer+0xf0>
 800e99c:	2216      	movs	r2, #22
 800e99e:	4933      	ldr	r1, [pc, #204]	; (800ea6c <mbedtls_pem_read_buffer+0x1ac>)
 800e9a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9a2:	f00e ff29 	bl	801d7f8 <memcmp>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d101      	bne.n	800e9b0 <mbedtls_pem_read_buffer+0xf0>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 800e9ac:	4b30      	ldr	r3, [pc, #192]	; (800ea70 <mbedtls_pem_read_buffer+0x1b0>)
 800e9ae:	e054      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 800e9b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d301      	bcc.n	800e9bc <mbedtls_pem_read_buffer+0xfc>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 800e9b8:	4b2e      	ldr	r3, [pc, #184]	; (800ea74 <mbedtls_pem_read_buffer+0x1b4>)
 800e9ba:	e04e      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 800e9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c0:	1ad3      	subs	r3, r2, r3
 800e9c2:	f107 0214 	add.w	r2, r7, #20
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	f7f7 fea7 	bl	8006720 <mbedtls_base64_decode>
 800e9d2:	61f8      	str	r0, [r7, #28]

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	f113 0f2c 	cmn.w	r3, #44	; 0x2c
 800e9da:	d103      	bne.n	800e9e4 <mbedtls_pem_read_buffer+0x124>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800e9e2:	e03a      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	2001      	movs	r0, #1
 800e9ea:	f00e fec3 	bl	801d774 <calloc>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	61bb      	str	r3, [r7, #24]
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d101      	bne.n	800e9fc <mbedtls_pem_read_buffer+0x13c>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 800e9f8:	4b1f      	ldr	r3, [pc, #124]	; (800ea78 <mbedtls_pem_read_buffer+0x1b8>)
 800e9fa:	e02e      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 800e9fc:	6979      	ldr	r1, [r7, #20]
 800e9fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea02:	1ad3      	subs	r3, r2, r3
 800ea04:	f107 0214 	add.w	r2, r7, #20
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0c:	69b8      	ldr	r0, [r7, #24]
 800ea0e:	f7f7 fe87 	bl	8006720 <mbedtls_base64_decode>
 800ea12:	61f8      	str	r0, [r7, #28]
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00b      	beq.n	800ea32 <mbedtls_pem_read_buffer+0x172>
    {
        mbedtls_zeroize( buf, len );
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	69b8      	ldr	r0, [r7, #24]
 800ea20:	f7ff ff28 	bl	800e874 <mbedtls_zeroize>
        mbedtls_free( buf );
 800ea24:	69b8      	ldr	r0, [r7, #24]
 800ea26:	f00e fedf 	bl	801d7e8 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800ea30:	e013      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>
    }

    if( enc != 0 )
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d009      	beq.n	800ea4c <mbedtls_pem_read_buffer+0x18c>
            mbedtls_zeroize( buf, len );
            mbedtls_free( buf );
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
        }
#else
        mbedtls_zeroize( buf, len );
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	69b8      	ldr	r0, [r7, #24]
 800ea3e:	f7ff ff19 	bl	800e874 <mbedtls_zeroize>
        mbedtls_free( buf );
 800ea42:	69b8      	ldr	r0, [r7, #24]
 800ea44:	f00e fed0 	bl	801d7e8 <free>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 800ea48:	4b09      	ldr	r3, [pc, #36]	; (800ea70 <mbedtls_pem_read_buffer+0x1b0>)
 800ea4a:	e006      	b.n	800ea5a <mbedtls_pem_read_buffer+0x19a>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	69ba      	ldr	r2, [r7, #24]
 800ea50:	601a      	str	r2, [r3, #0]
    ctx->buflen = len;
 800ea52:	697a      	ldr	r2, [r7, #20]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	605a      	str	r2, [r3, #4]

    return( 0 );
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3730      	adds	r7, #48	; 0x30
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	ffffeb80 	.word	0xffffeb80
 800ea68:	ffffef80 	.word	0xffffef80
 800ea6c:	08021990 	.word	0x08021990
 800ea70:	ffffec00 	.word	0xffffec00
 800ea74:	ffffef00 	.word	0xffffef00
 800ea78:	ffffee80 	.word	0xffffee80

0800ea7c <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
    if( ctx->buf != NULL )
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d007      	beq.n	800ea9c <mbedtls_pem_free+0x20>
        mbedtls_zeroize( ctx->buf, ctx->buflen );
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	4619      	mov	r1, r3
 800ea96:	4610      	mov	r0, r2
 800ea98:	f7ff feec 	bl	800e874 <mbedtls_zeroize>
    mbedtls_free( ctx->buf );
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f00e fea1 	bl	801d7e8 <free>
    mbedtls_free( ctx->info );
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f00e fe9c 	bl	801d7e8 <free>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 800eab0:	210c      	movs	r1, #12
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7ff fede 	bl	800e874 <mbedtls_zeroize>
}
 800eab8:	bf00      	nop
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <mbedtls_zeroize>:

#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	60fb      	str	r3, [r7, #12]
 800eace:	e004      	b.n	800eada <mbedtls_zeroize+0x1a>
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	60fa      	str	r2, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	701a      	strb	r2, [r3, #0]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	1e5a      	subs	r2, r3, #1
 800eade:	603a      	str	r2, [r7, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1f5      	bne.n	800ead0 <mbedtls_zeroize+0x10>
}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop
 800eae8:	3714      	adds	r7, #20
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr

0800eaf2 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00f      	beq.n	800eb20 <mbedtls_pk_free+0x2e>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00b      	beq.n	800eb20 <mbedtls_pk_free+0x2e>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	6852      	ldr	r2, [r2, #4]
 800eb12:	4610      	mov	r0, r2
 800eb14:	4798      	blx	r3

    mbedtls_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 800eb16:	2108      	movs	r1, #8
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7ff ffd1 	bl	800eac0 <mbedtls_zeroize>
 800eb1e:	e000      	b.n	800eb22 <mbedtls_pk_free+0x30>
        return;
 800eb20:	bf00      	nop
}
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	4603      	mov	r3, r0
 800eb30:	71fb      	strb	r3, [r7, #7]
    switch( pk_type ) {
 800eb32:	79fb      	ldrb	r3, [r7, #7]
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d101      	bne.n	800eb3c <mbedtls_pk_info_from_type+0x14>
#if defined(MBEDTLS_RSA_C)
        case MBEDTLS_PK_RSA:
            return( &mbedtls_rsa_info );
 800eb38:	4b04      	ldr	r3, [pc, #16]	; (800eb4c <mbedtls_pk_info_from_type+0x24>)
 800eb3a:	e000      	b.n	800eb3e <mbedtls_pk_info_from_type+0x16>
        case MBEDTLS_PK_ECDSA:
            return( &mbedtls_ecdsa_info );
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
 800eb3c:	2300      	movs	r3, #0
    }
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop
 800eb4c:	0802470c 	.word	0x0802470c

0800eb50 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d006      	beq.n	800eb6e <mbedtls_pk_setup+0x1e>
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <mbedtls_pk_setup+0x1e>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <mbedtls_pk_setup+0x22>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800eb6e:	4b0b      	ldr	r3, [pc, #44]	; (800eb9c <mbedtls_pk_setup+0x4c>)
 800eb70:	e00f      	b.n	800eb92 <mbedtls_pk_setup+0x42>

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb76:	4798      	blx	r3
 800eb78:	4602      	mov	r2, r0
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	605a      	str	r2, [r3, #4]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d101      	bne.n	800eb8a <mbedtls_pk_setup+0x3a>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 800eb86:	4b06      	ldr	r3, [pc, #24]	; (800eba0 <mbedtls_pk_setup+0x50>)
 800eb88:	e003      	b.n	800eb92 <mbedtls_pk_setup+0x42>

    ctx->pk_info = info;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	683a      	ldr	r2, [r7, #0]
 800eb8e:	601a      	str	r2, [r3, #0]

    return( 0 );
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3708      	adds	r7, #8
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	ffffc180 	.word	0xffffc180
 800eba0:	ffffc080 	.word	0xffffc080

0800eba4 <mbedtls_pk_can_do>:

/*
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	460b      	mov	r3, r1
 800ebae:	70fb      	strb	r3, [r7, #3]
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d003      	beq.n	800ebbe <mbedtls_pk_can_do+0x1a>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d101      	bne.n	800ebc2 <mbedtls_pk_can_do+0x1e>
        return( 0 );
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	e006      	b.n	800ebd0 <mbedtls_pk_can_do+0x2c>

    return( ctx->pk_info->can_do( type ) );
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	78fa      	ldrb	r2, [r7, #3]
 800ebca:	4610      	mov	r0, r2
 800ebcc:	4798      	blx	r3
 800ebce:	4603      	mov	r3, r0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <pk_hashlen_helper>:

/*
 * Helper for mbedtls_pk_sign and mbedtls_pk_verify
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	4603      	mov	r3, r0
 800ebe0:	6039      	str	r1, [r7, #0]
 800ebe2:	71fb      	strb	r3, [r7, #7]
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <pk_hashlen_helper+0x18>
        return( 0 );
 800ebec:	2300      	movs	r3, #0
 800ebee:	e012      	b.n	800ec16 <pk_hashlen_helper+0x3e>

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 800ebf0:	79fb      	ldrb	r3, [r7, #7]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7ff f992 	bl	800df1c <mbedtls_md_info_from_type>
 800ebf8:	60f8      	str	r0, [r7, #12]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d102      	bne.n	800ec06 <pk_hashlen_helper+0x2e>
        return( -1 );
 800ec00:	f04f 33ff 	mov.w	r3, #4294967295
 800ec04:	e007      	b.n	800ec16 <pk_hashlen_helper+0x3e>

    *hash_len = mbedtls_md_get_size( md_info );
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f7ff fbc6 	bl	800e398 <mbedtls_md_get_size>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	461a      	mov	r2, r3
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	601a      	str	r2, [r3, #0]
    return( 0 );
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 800ec20:	b590      	push	{r4, r7, lr}
 800ec22:	b087      	sub	sp, #28
 800ec24:	af02      	add	r7, sp, #8
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	607a      	str	r2, [r7, #4]
 800ec2a:	603b      	str	r3, [r7, #0]
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	72fb      	strb	r3, [r7, #11]
    if( ctx == NULL || ctx->pk_info == NULL ||
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00c      	beq.n	800ec50 <mbedtls_pk_verify+0x30>
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d008      	beq.n	800ec50 <mbedtls_pk_verify+0x30>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
 800ec3e:	463a      	mov	r2, r7
 800ec40:	7afb      	ldrb	r3, [r7, #11]
 800ec42:	4611      	mov	r1, r2
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7ff ffc7 	bl	800ebd8 <pk_hashlen_helper>
 800ec4a:	4603      	mov	r3, r0
    if( ctx == NULL || ctx->pk_info == NULL ||
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d001      	beq.n	800ec54 <mbedtls_pk_verify+0x34>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ec50:	4b0d      	ldr	r3, [pc, #52]	; (800ec88 <mbedtls_pk_verify+0x68>)
 800ec52:	e015      	b.n	800ec80 <mbedtls_pk_verify+0x60>

    if( ctx->pk_info->verify_func == NULL )
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	691b      	ldr	r3, [r3, #16]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d101      	bne.n	800ec62 <mbedtls_pk_verify+0x42>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800ec5e:	4b0b      	ldr	r3, [pc, #44]	; (800ec8c <mbedtls_pk_verify+0x6c>)
 800ec60:	e00e      	b.n	800ec80 <mbedtls_pk_verify+0x60>

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	691c      	ldr	r4, [r3, #16]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6858      	ldr	r0, [r3, #4]
 800ec6c:	683a      	ldr	r2, [r7, #0]
 800ec6e:	7af9      	ldrb	r1, [r7, #11]
 800ec70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec72:	9301      	str	r3, [sp, #4]
 800ec74:	6a3b      	ldr	r3, [r7, #32]
 800ec76:	9300      	str	r3, [sp, #0]
 800ec78:	4613      	mov	r3, r2
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	47a0      	blx	r4
 800ec7e:	4603      	mov	r3, r0
                                       sig, sig_len ) );
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3714      	adds	r7, #20
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd90      	pop	{r4, r7, pc}
 800ec88:	ffffc180 	.word	0xffffc180
 800ec8c:	ffffc100 	.word	0xffffc100

0800ec90 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af02      	add	r7, sp, #8
 800ec96:	60b9      	str	r1, [r7, #8]
 800ec98:	607a      	str	r2, [r7, #4]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	73fb      	strb	r3, [r7, #15]
 800eca0:	4613      	mov	r3, r2
 800eca2:	73bb      	strb	r3, [r7, #14]
    if( ctx == NULL || ctx->pk_info == NULL )
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d003      	beq.n	800ecb2 <mbedtls_pk_verify_ext+0x22>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d101      	bne.n	800ecb6 <mbedtls_pk_verify_ext+0x26>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ecb2:	4b12      	ldr	r3, [pc, #72]	; (800ecfc <mbedtls_pk_verify_ext+0x6c>)
 800ecb4:	e01e      	b.n	800ecf4 <mbedtls_pk_verify_ext+0x64>

    if( ! mbedtls_pk_can_do( ctx, type ) )
 800ecb6:	7bfb      	ldrb	r3, [r7, #15]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7ff ff72 	bl	800eba4 <mbedtls_pk_can_do>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d101      	bne.n	800ecca <mbedtls_pk_verify_ext+0x3a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800ecc6:	4b0e      	ldr	r3, [pc, #56]	; (800ed00 <mbedtls_pk_verify_ext+0x70>)
 800ecc8:	e014      	b.n	800ecf4 <mbedtls_pk_verify_ext+0x64>

    if( type == MBEDTLS_PK_RSASSA_PSS )
 800ecca:	7bfb      	ldrb	r3, [r7, #15]
 800eccc:	2b06      	cmp	r3, #6
 800ecce:	d101      	bne.n	800ecd4 <mbedtls_pk_verify_ext+0x44>
        if( sig_len > mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
#else
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 800ecd0:	4b0c      	ldr	r3, [pc, #48]	; (800ed04 <mbedtls_pk_verify_ext+0x74>)
 800ecd2:	e00f      	b.n	800ecf4 <mbedtls_pk_verify_ext+0x64>
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d001      	beq.n	800ecde <mbedtls_pk_verify_ext+0x4e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ecda:	4b08      	ldr	r3, [pc, #32]	; (800ecfc <mbedtls_pk_verify_ext+0x6c>)
 800ecdc:	e00a      	b.n	800ecf4 <mbedtls_pk_verify_ext+0x64>

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 800ecde:	7bb9      	ldrb	r1, [r7, #14]
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	9301      	str	r3, [sp, #4]
 800ece4:	6a3b      	ldr	r3, [r7, #32]
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	69ba      	ldr	r2, [r7, #24]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff ff97 	bl	800ec20 <mbedtls_pk_verify>
 800ecf2:	4603      	mov	r3, r0
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	ffffc180 	.word	0xffffc180
 800ed00:	ffffc100 	.word	0xffffc100
 800ed04:	ffffc680 	.word	0xffffc680

0800ed08 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800ed08:	b590      	push	{r4, r7, lr}
 800ed0a:	b089      	sub	sp, #36	; 0x24
 800ed0c:	af04      	add	r7, sp, #16
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	607a      	str	r2, [r7, #4]
 800ed12:	603b      	str	r3, [r7, #0]
 800ed14:	460b      	mov	r3, r1
 800ed16:	72fb      	strb	r3, [r7, #11]
    if( ctx == NULL || ctx->pk_info == NULL ||
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00c      	beq.n	800ed38 <mbedtls_pk_sign+0x30>
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d008      	beq.n	800ed38 <mbedtls_pk_sign+0x30>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
 800ed26:	463a      	mov	r2, r7
 800ed28:	7afb      	ldrb	r3, [r7, #11]
 800ed2a:	4611      	mov	r1, r2
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7ff ff53 	bl	800ebd8 <pk_hashlen_helper>
 800ed32:	4603      	mov	r3, r0
    if( ctx == NULL || ctx->pk_info == NULL ||
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d001      	beq.n	800ed3c <mbedtls_pk_sign+0x34>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ed38:	4b0f      	ldr	r3, [pc, #60]	; (800ed78 <mbedtls_pk_sign+0x70>)
 800ed3a:	e019      	b.n	800ed70 <mbedtls_pk_sign+0x68>

    if( ctx->pk_info->sign_func == NULL )
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	695b      	ldr	r3, [r3, #20]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d101      	bne.n	800ed4a <mbedtls_pk_sign+0x42>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800ed46:	4b0d      	ldr	r3, [pc, #52]	; (800ed7c <mbedtls_pk_sign+0x74>)
 800ed48:	e012      	b.n	800ed70 <mbedtls_pk_sign+0x68>

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	695c      	ldr	r4, [r3, #20]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	6858      	ldr	r0, [r3, #4]
 800ed54:	683a      	ldr	r2, [r7, #0]
 800ed56:	7af9      	ldrb	r1, [r7, #11]
 800ed58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5a:	9303      	str	r3, [sp, #12]
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	9302      	str	r3, [sp, #8]
 800ed60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed62:	9301      	str	r3, [sp, #4]
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	4613      	mov	r3, r2
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	47a0      	blx	r4
 800ed6e:	4603      	mov	r3, r0
                                     sig, sig_len, f_rng, p_rng ) );
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd90      	pop	{r4, r7, pc}
 800ed78:	ffffc180 	.word	0xffffc180
 800ed7c:	ffffc100 	.word	0xffffc100

0800ed80 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800ed80:	b590      	push	{r4, r7, lr}
 800ed82:	b089      	sub	sp, #36	; 0x24
 800ed84:	af04      	add	r7, sp, #16
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	603b      	str	r3, [r7, #0]
    if( ctx == NULL || ctx->pk_info == NULL )
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d003      	beq.n	800ed9c <mbedtls_pk_encrypt+0x1c>
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d101      	bne.n	800eda0 <mbedtls_pk_encrypt+0x20>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ed9c:	4b0f      	ldr	r3, [pc, #60]	; (800eddc <mbedtls_pk_encrypt+0x5c>)
 800ed9e:	e018      	b.n	800edd2 <mbedtls_pk_encrypt+0x52>

    if( ctx->pk_info->encrypt_func == NULL )
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	69db      	ldr	r3, [r3, #28]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d101      	bne.n	800edae <mbedtls_pk_encrypt+0x2e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800edaa:	4b0d      	ldr	r3, [pc, #52]	; (800ede0 <mbedtls_pk_encrypt+0x60>)
 800edac:	e011      	b.n	800edd2 <mbedtls_pk_encrypt+0x52>

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	69dc      	ldr	r4, [r3, #28]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6858      	ldr	r0, [r3, #4]
 800edb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edba:	9303      	str	r3, [sp, #12]
 800edbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbe:	9302      	str	r3, [sp, #8]
 800edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc2:	9301      	str	r3, [sp, #4]
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	68b9      	ldr	r1, [r7, #8]
 800edce:	47a0      	blx	r4
 800edd0:	4603      	mov	r3, r0
                output, olen, osize, f_rng, p_rng ) );
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3714      	adds	r7, #20
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd90      	pop	{r4, r7, pc}
 800edda:	bf00      	nop
 800eddc:	ffffc180 	.word	0xffffc180
 800ede0:	ffffc100 	.word	0xffffc100

0800ede4 <mbedtls_pk_get_bitlen>:

/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d003      	beq.n	800edfa <mbedtls_pk_get_bitlen+0x16>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d101      	bne.n	800edfe <mbedtls_pk_get_bitlen+0x1a>
        return( 0 );
 800edfa:	2300      	movs	r3, #0
 800edfc:	e007      	b.n	800ee0e <mbedtls_pk_get_bitlen+0x2a>

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	6852      	ldr	r2, [r2, #4]
 800ee08:	4610      	mov	r0, r2
 800ee0a:	4798      	blx	r3
 800ee0c:	4603      	mov	r3, r0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
	...

0800ee18 <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
    if( ctx == NULL || ctx->pk_info == NULL )
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d003      	beq.n	800ee30 <mbedtls_pk_debug+0x18>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d101      	bne.n	800ee34 <mbedtls_pk_debug+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ee30:	4b0a      	ldr	r3, [pc, #40]	; (800ee5c <mbedtls_pk_debug+0x44>)
 800ee32:	e00f      	b.n	800ee54 <mbedtls_pk_debug+0x3c>

    if( ctx->pk_info->debug_func == NULL )
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d101      	bne.n	800ee42 <mbedtls_pk_debug+0x2a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800ee3e:	4b08      	ldr	r3, [pc, #32]	; (800ee60 <mbedtls_pk_debug+0x48>)
 800ee40:	e008      	b.n	800ee54 <mbedtls_pk_debug+0x3c>

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	6852      	ldr	r2, [r2, #4]
 800ee4c:	6839      	ldr	r1, [r7, #0]
 800ee4e:	4610      	mov	r0, r2
 800ee50:	4798      	blx	r3
    return( 0 );
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	ffffc180 	.word	0xffffc180
 800ee60:	ffffc100 	.word	0xffffc100

0800ee64 <mbedtls_pk_get_name>:

/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d003      	beq.n	800ee7a <mbedtls_pk_get_name+0x16>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d101      	bne.n	800ee7e <mbedtls_pk_get_name+0x1a>
        return( "invalid PK" );
 800ee7a:	4b05      	ldr	r3, [pc, #20]	; (800ee90 <mbedtls_pk_get_name+0x2c>)
 800ee7c:	e002      	b.n	800ee84 <mbedtls_pk_get_name+0x20>

    return( ctx->pk_info->name );
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	685b      	ldr	r3, [r3, #4]
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr
 800ee90:	080219a8 	.word	0x080219a8

0800ee94 <mbedtls_pk_get_type>:

/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d003      	beq.n	800eeaa <mbedtls_pk_get_type+0x16>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d101      	bne.n	800eeae <mbedtls_pk_get_type+0x1a>
        return( MBEDTLS_PK_NONE );
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e002      	b.n	800eeb4 <mbedtls_pk_get_type+0x20>

    return( ctx->pk_info->type );
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	781b      	ldrb	r3, [r3, #0]
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr

0800eec0 <rsa_can_do>:
}
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	4603      	mov	r3, r0
 800eec8:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_RSA ||
 800eeca:	79fb      	ldrb	r3, [r7, #7]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d002      	beq.n	800eed6 <rsa_can_do+0x16>
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	2b06      	cmp	r3, #6
 800eed4:	d101      	bne.n	800eeda <rsa_can_do+0x1a>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e000      	b.n	800eedc <rsa_can_do+0x1c>
 800eeda:	2300      	movs	r3, #0
            type == MBEDTLS_PK_RSASSA_PSS );
}
 800eedc:	4618      	mov	r0, r3
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <rsa_get_bitlen>:

static size_t rsa_get_bitlen( const void *ctx )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	60fb      	str	r3, [r7, #12]
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f000 fd09 	bl	800f90c <mbedtls_rsa_get_len>
 800eefa:	4603      	mov	r3, r0
 800eefc:	00db      	lsls	r3, r3, #3
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
	...

0800ef08 <rsa_verify_wrap>:

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b08c      	sub	sp, #48	; 0x30
 800ef0c:	af04      	add	r7, sp, #16
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	607a      	str	r2, [r7, #4]
 800ef12:	603b      	str	r3, [r7, #0]
 800ef14:	460b      	mov	r3, r1
 800ef16:	72fb      	strb	r3, [r7, #11]
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	61fb      	str	r3, [r7, #28]
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 800ef1c:	69f8      	ldr	r0, [r7, #28]
 800ef1e:	f000 fcf5 	bl	800f90c <mbedtls_rsa_get_len>
 800ef22:	61b8      	str	r0, [r7, #24]
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 800ef24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d201      	bcs.n	800ef30 <rsa_verify_wrap+0x28>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 800ef2c:	4b10      	ldr	r3, [pc, #64]	; (800ef70 <rsa_verify_wrap+0x68>)
 800ef2e:	e01a      	b.n	800ef66 <rsa_verify_wrap+0x5e>

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 800ef30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef32:	9303      	str	r3, [sp, #12]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	9302      	str	r3, [sp, #8]
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	9301      	str	r3, [sp, #4]
 800ef3c:	7afb      	ldrb	r3, [r7, #11]
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	2300      	movs	r3, #0
 800ef42:	2200      	movs	r2, #0
 800ef44:	2100      	movs	r1, #0
 800ef46:	69f8      	ldr	r0, [r7, #28]
 800ef48:	f001 fde8 	bl	8010b1c <mbedtls_rsa_pkcs1_verify>
 800ef4c:	6178      	str	r0, [r7, #20]
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d001      	beq.n	800ef58 <rsa_verify_wrap+0x50>
                                  MBEDTLS_RSA_PUBLIC, md_alg,
                                  (unsigned int) hash_len, hash, sig ) ) != 0 )
        return( ret );
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	e006      	b.n	800ef66 <rsa_verify_wrap+0x5e>

    if( sig_len > rsa_len )
 800ef58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d901      	bls.n	800ef64 <rsa_verify_wrap+0x5c>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 800ef60:	4b04      	ldr	r3, [pc, #16]	; (800ef74 <rsa_verify_wrap+0x6c>)
 800ef62:	e000      	b.n	800ef66 <rsa_verify_wrap+0x5e>

    return( 0 );
 800ef64:	2300      	movs	r3, #0
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3720      	adds	r7, #32
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	ffffbc80 	.word	0xffffbc80
 800ef74:	ffffc700 	.word	0xffffc700

0800ef78 <rsa_sign_wrap>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b08a      	sub	sp, #40	; 0x28
 800ef7c:	af04      	add	r7, sp, #16
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	607a      	str	r2, [r7, #4]
 800ef82:	603b      	str	r3, [r7, #0]
 800ef84:	460b      	mov	r3, r1
 800ef86:	72fb      	strb	r3, [r7, #11]
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	617b      	str	r3, [r7, #20]
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 800ef8c:	6978      	ldr	r0, [r7, #20]
 800ef8e:	f000 fcbd 	bl	800f90c <mbedtls_rsa_get_len>
 800ef92:	4602      	mov	r2, r0
 800ef94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef96:	601a      	str	r2, [r3, #0]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 800ef98:	6a3b      	ldr	r3, [r7, #32]
 800ef9a:	9303      	str	r3, [sp, #12]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	9302      	str	r3, [sp, #8]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	9301      	str	r3, [sp, #4]
 800efa4:	7afb      	ldrb	r3, [r7, #11]
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	2301      	movs	r3, #1
 800efaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efae:	6978      	ldr	r0, [r7, #20]
 800efb0:	f001 fd0e 	bl	80109d0 <mbedtls_rsa_pkcs1_sign>
 800efb4:	4603      	mov	r3, r0
                md_alg, (unsigned int) hash_len, hash, sig ) );
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3718      	adds	r7, #24
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
	...

0800efc0 <rsa_decrypt_wrap>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b08a      	sub	sp, #40	; 0x28
 800efc4:	af04      	add	r7, sp, #16
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
 800efcc:	603b      	str	r3, [r7, #0]
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	617b      	str	r3, [r7, #20]

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 800efd2:	6978      	ldr	r0, [r7, #20]
 800efd4:	f000 fc9a 	bl	800f90c <mbedtls_rsa_get_len>
 800efd8:	4602      	mov	r2, r0
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4293      	cmp	r3, r2
 800efde:	d001      	beq.n	800efe4 <rsa_decrypt_wrap+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800efe0:	4b0a      	ldr	r3, [pc, #40]	; (800f00c <rsa_decrypt_wrap+0x4c>)
 800efe2:	e00e      	b.n	800f002 <rsa_decrypt_wrap+0x42>

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	9303      	str	r3, [sp, #12]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	9302      	str	r3, [sp, #8]
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	9301      	str	r3, [sp, #4]
 800eff0:	6a3b      	ldr	r3, [r7, #32]
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	2301      	movs	r3, #1
 800eff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800effa:	6978      	ldr	r0, [r7, #20]
 800effc:	f001 fb4a 	bl	8010694 <mbedtls_rsa_pkcs1_decrypt>
 800f000:	4603      	mov	r3, r0
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
}
 800f002:	4618      	mov	r0, r3
 800f004:	3718      	adds	r7, #24
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	ffffbf80 	.word	0xffffbf80

0800f010 <rsa_encrypt_wrap>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b08a      	sub	sp, #40	; 0x28
 800f014:	af04      	add	r7, sp, #16
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
 800f01c:	603b      	str	r3, [r7, #0]
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	617b      	str	r3, [r7, #20]
    *olen = mbedtls_rsa_get_len( rsa );
 800f022:	6978      	ldr	r0, [r7, #20]
 800f024:	f000 fc72 	bl	800f90c <mbedtls_rsa_get_len>
 800f028:	4602      	mov	r2, r0
 800f02a:	6a3b      	ldr	r3, [r7, #32]
 800f02c:	601a      	str	r2, [r3, #0]

    if( *olen > osize )
 800f02e:	6a3b      	ldr	r3, [r7, #32]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f034:	429a      	cmp	r2, r3
 800f036:	d201      	bcs.n	800f03c <rsa_encrypt_wrap+0x2c>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );
 800f038:	4b09      	ldr	r3, [pc, #36]	; (800f060 <rsa_encrypt_wrap+0x50>)
 800f03a:	e00c      	b.n	800f056 <rsa_encrypt_wrap+0x46>

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	9302      	str	r3, [sp, #8]
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	2300      	movs	r3, #0
 800f04a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f04c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f04e:	6978      	ldr	r0, [r7, #20]
 800f050:	f001 f96a 	bl	8010328 <mbedtls_rsa_pkcs1_encrypt>
 800f054:	4603      	mov	r3, r0
                                       ilen, input, output ) );
}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	ffffbc00 	.word	0xffffbc00

0800f064 <rsa_check_pair_wrap>:

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 800f06e:	6839      	ldr	r1, [r7, #0]
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fce7 	bl	800fa44 <mbedtls_rsa_check_pub_priv>
 800f076:	4603      	mov	r3, r0
                                (const mbedtls_rsa_context *) prv ) );
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <rsa_alloc_wrap>:

static void *rsa_alloc_wrap( void )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 800f086:	21ac      	movs	r1, #172	; 0xac
 800f088:	2001      	movs	r0, #1
 800f08a:	f00e fb73 	bl	801d774 <calloc>
 800f08e:	4603      	mov	r3, r0
 800f090:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d004      	beq.n	800f0a2 <rsa_alloc_wrap+0x22>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 800f098:	2200      	movs	r2, #0
 800f09a:	2100      	movs	r1, #0
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 fc0d 	bl	800f8bc <mbedtls_rsa_init>

    return( ctx );
 800f0a2:	687b      	ldr	r3, [r7, #4]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <rsa_free_wrap>:

static void rsa_free_wrap( void *ctx )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f001 fd55 	bl	8010b64 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f00e fb94 	bl	801d7e8 <free>
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <rsa_debug>:

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
    items->type = MBEDTLS_PK_DEBUG_MPI;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	701a      	strb	r2, [r3, #0]
    items->name = "rsa.N";
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	4a0d      	ldr	r2, [pc, #52]	; (800f110 <rsa_debug+0x48>)
 800f0dc:	605a      	str	r2, [r3, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f103 0208 	add.w	r2, r3, #8
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	609a      	str	r2, [r3, #8]

    items++;
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	330c      	adds	r3, #12
 800f0ec:	603b      	str	r3, [r7, #0]

    items->type = MBEDTLS_PK_DEBUG_MPI;
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	701a      	strb	r2, [r3, #0]
    items->name = "rsa.E";
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	4a07      	ldr	r2, [pc, #28]	; (800f114 <rsa_debug+0x4c>)
 800f0f8:	605a      	str	r2, [r3, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f103 0214 	add.w	r2, r3, #20
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	609a      	str	r2, [r3, #8]
}
 800f104:	bf00      	nop
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr
 800f110:	080219b4 	.word	0x080219b4
 800f114:	080219bc 	.word	0x080219bc

0800f118 <mbedtls_pk_rsa>:
 *
 * \warning You must make sure the PK context actually holds an RSA context
 * before using this function!
 */
static inline mbedtls_rsa_context *mbedtls_pk_rsa( const mbedtls_pk_context pk )
{
 800f118:	b480      	push	{r7}
 800f11a:	b083      	sub	sp, #12
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	463b      	mov	r3, r7
 800f120:	e883 0003 	stmia.w	r3, {r0, r1}
    return( (mbedtls_rsa_context *) (pk).pk_ctx );
 800f124:	687b      	ldr	r3, [r7, #4]
}
 800f126:	4618      	mov	r0, r3
 800f128:	370c      	adds	r7, #12
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
	...

0800f134 <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b08e      	sub	sp, #56	; 0x38
 800f138:	af08      	add	r7, sp, #32
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800f140:	f107 0210 	add.w	r2, r7, #16
 800f144:	2330      	movs	r3, #48	; 0x30
 800f146:	68b9      	ldr	r1, [r7, #8]
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f7f7 f8ff 	bl	800634c <mbedtls_asn1_get_tag>
 800f14e:	6178      	str	r0, [r7, #20]
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d003      	beq.n	800f15e <pk_get_rsapubkey+0x2a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f15c:	e07e      	b.n	800f25c <pk_get_rsapubkey+0x128>

    if( *p + len != end )
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	4413      	add	r3, r2
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d001      	beq.n	800f170 <pk_get_rsapubkey+0x3c>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 800f16c:	4b3d      	ldr	r3, [pc, #244]	; (800f264 <pk_get_rsapubkey+0x130>)
 800f16e:	e075      	b.n	800f25c <pk_get_rsapubkey+0x128>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800f170:	f107 0210 	add.w	r2, r7, #16
 800f174:	2302      	movs	r3, #2
 800f176:	68b9      	ldr	r1, [r7, #8]
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f7f7 f8e7 	bl	800634c <mbedtls_asn1_get_tag>
 800f17e:	6178      	str	r0, [r7, #20]
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d003      	beq.n	800f18e <pk_get_rsapubkey+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f18c:	e066      	b.n	800f25c <pk_get_rsapubkey+0x128>

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6819      	ldr	r1, [r3, #0]
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	2300      	movs	r3, #0
 800f196:	9306      	str	r3, [sp, #24]
 800f198:	2300      	movs	r3, #0
 800f19a:	9305      	str	r3, [sp, #20]
 800f19c:	2300      	movs	r3, #0
 800f19e:	9304      	str	r3, [sp, #16]
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	9303      	str	r3, [sp, #12]
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	9302      	str	r3, [sp, #8]
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	9301      	str	r3, [sp, #4]
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	9300      	str	r3, [sp, #0]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 f961 	bl	800f47a <mbedtls_rsa_import_raw>
 800f1b8:	6178      	str	r0, [r7, #20]
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d001      	beq.n	800f1c4 <pk_get_rsapubkey+0x90>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 800f1c0:	4b29      	ldr	r3, [pc, #164]	; (800f268 <pk_get_rsapubkey+0x134>)
 800f1c2:	e04b      	b.n	800f25c <pk_get_rsapubkey+0x128>

    *p += len;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	441a      	add	r2, r3
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	601a      	str	r2, [r3, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800f1d0:	f107 0210 	add.w	r2, r7, #16
 800f1d4:	2302      	movs	r3, #2
 800f1d6:	68b9      	ldr	r1, [r7, #8]
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f7f7 f8b7 	bl	800634c <mbedtls_asn1_get_tag>
 800f1de:	6178      	str	r0, [r7, #20]
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d003      	beq.n	800f1ee <pk_get_rsapubkey+0xba>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f1ec:	e036      	b.n	800f25c <pk_get_rsapubkey+0x128>

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	693a      	ldr	r2, [r7, #16]
 800f1f4:	9206      	str	r2, [sp, #24]
 800f1f6:	9305      	str	r3, [sp, #20]
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	9304      	str	r3, [sp, #16]
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	9303      	str	r3, [sp, #12]
 800f200:	2300      	movs	r3, #0
 800f202:	9302      	str	r3, [sp, #8]
 800f204:	2300      	movs	r3, #0
 800f206:	9301      	str	r3, [sp, #4]
 800f208:	2300      	movs	r3, #0
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	2300      	movs	r3, #0
 800f20e:	2200      	movs	r2, #0
 800f210:	2100      	movs	r1, #0
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 f931 	bl	800f47a <mbedtls_rsa_import_raw>
 800f218:	6178      	str	r0, [r7, #20]
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d001      	beq.n	800f224 <pk_get_rsapubkey+0xf0>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 800f220:	4b11      	ldr	r3, [pc, #68]	; (800f268 <pk_get_rsapubkey+0x134>)
 800f222:	e01b      	b.n	800f25c <pk_get_rsapubkey+0x128>

    *p += len;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	441a      	add	r2, r3
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	601a      	str	r2, [r3, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 fa1b 	bl	800f66c <mbedtls_rsa_complete>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d105      	bne.n	800f248 <pk_get_rsapubkey+0x114>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 fb71 	bl	800f924 <mbedtls_rsa_check_pubkey>
 800f242:	4603      	mov	r3, r0
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <pk_get_rsapubkey+0x118>
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 800f248:	4b07      	ldr	r3, [pc, #28]	; (800f268 <pk_get_rsapubkey+0x134>)
 800f24a:	e007      	b.n	800f25c <pk_get_rsapubkey+0x128>
    }

    if( *p != end )
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	429a      	cmp	r2, r3
 800f254:	d001      	beq.n	800f25a <pk_get_rsapubkey+0x126>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 800f256:	4b03      	ldr	r3, [pc, #12]	; (800f264 <pk_get_rsapubkey+0x130>)
 800f258:	e000      	b.n	800f25c <pk_get_rsapubkey+0x128>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 800f25a:	2300      	movs	r3, #0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3718      	adds	r7, #24
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	ffffc49a 	.word	0xffffc49a
 800f268:	ffffc500 	.word	0xffffc500

0800f26c <pk_get_pk_alg>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b088      	sub	sp, #32
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 800f27a:	220c      	movs	r2, #12
 800f27c:	2100      	movs	r1, #0
 800f27e:	6838      	ldr	r0, [r7, #0]
 800f280:	f00e faf2 	bl	801d868 <memset>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 800f284:	f107 0210 	add.w	r2, r7, #16
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	68b9      	ldr	r1, [r7, #8]
 800f28c:	68f8      	ldr	r0, [r7, #12]
 800f28e:	f7f7 f9cc 	bl	800662a <mbedtls_asn1_get_alg>
 800f292:	61f8      	str	r0, [r7, #28]
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d003      	beq.n	800f2a2 <pk_get_pk_alg+0x36>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	f5a3 536a 	sub.w	r3, r3, #14976	; 0x3a80
 800f2a0:	e01d      	b.n	800f2de <pk_get_pk_alg+0x72>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 800f2a2:	f107 0310 	add.w	r3, r7, #16
 800f2a6:	6879      	ldr	r1, [r7, #4]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7ff faa1 	bl	800e7f0 <mbedtls_oid_get_pk_alg>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d001      	beq.n	800f2b8 <pk_get_pk_alg+0x4c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 800f2b4:	4b0c      	ldr	r3, [pc, #48]	; (800f2e8 <pk_get_pk_alg+0x7c>)
 800f2b6:	e012      	b.n	800f2de <pk_get_pk_alg+0x72>

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d10d      	bne.n	800f2dc <pk_get_pk_alg+0x70>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 800f2c4:	2b05      	cmp	r3, #5
 800f2c6:	d003      	beq.n	800f2d0 <pk_get_pk_alg+0x64>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d103      	bne.n	800f2d8 <pk_get_pk_alg+0x6c>
                params->len != 0 ) )
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	685b      	ldr	r3, [r3, #4]
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d001      	beq.n	800f2dc <pk_get_pk_alg+0x70>
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 800f2d8:	4b04      	ldr	r3, [pc, #16]	; (800f2ec <pk_get_pk_alg+0x80>)
 800f2da:	e000      	b.n	800f2de <pk_get_pk_alg+0x72>
    }

    return( 0 );
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3720      	adds	r7, #32
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	ffffc380 	.word	0xffffc380
 800f2ec:	ffffc580 	.word	0xffffc580

0800f2f0 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08c      	sub	sp, #48	; 0x30
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	75fb      	strb	r3, [r7, #23]
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800f300:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f304:	2330      	movs	r3, #48	; 0x30
 800f306:	68b9      	ldr	r1, [r7, #8]
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f7f7 f81f 	bl	800634c <mbedtls_asn1_get_tag>
 800f30e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	2b00      	cmp	r3, #0
 800f314:	d003      	beq.n	800f31e <mbedtls_pk_parse_subpubkey+0x2e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 800f31c:	e061      	b.n	800f3e2 <mbedtls_pk_parse_subpubkey+0xf2>
    }

    end = *p + len;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	4413      	add	r3, r2
 800f326:	60bb      	str	r3, [r7, #8]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 800f328:	f107 0318 	add.w	r3, r7, #24
 800f32c:	f107 0217 	add.w	r2, r7, #23
 800f330:	68b9      	ldr	r1, [r7, #8]
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f7ff ff9a 	bl	800f26c <pk_get_pk_alg>
 800f338:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d001      	beq.n	800f344 <mbedtls_pk_parse_subpubkey+0x54>
        return( ret );
 800f340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f342:	e04e      	b.n	800f3e2 <mbedtls_pk_parse_subpubkey+0xf2>

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 800f344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f348:	461a      	mov	r2, r3
 800f34a:	68b9      	ldr	r1, [r7, #8]
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f7f7 f8d9 	bl	8006504 <mbedtls_asn1_get_bitstring_null>
 800f352:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	2b00      	cmp	r3, #0
 800f358:	d003      	beq.n	800f362 <mbedtls_pk_parse_subpubkey+0x72>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800f35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35c:	f5a3 536c 	sub.w	r3, r3, #15104	; 0x3b00
 800f360:	e03f      	b.n	800f3e2 <mbedtls_pk_parse_subpubkey+0xf2>

    if( *p + len != end )
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f368:	4413      	add	r3, r2
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d001      	beq.n	800f374 <mbedtls_pk_parse_subpubkey+0x84>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 800f370:	4b1e      	ldr	r3, [pc, #120]	; (800f3ec <mbedtls_pk_parse_subpubkey+0xfc>)
 800f372:	e036      	b.n	800f3e2 <mbedtls_pk_parse_subpubkey+0xf2>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 800f374:	7dfb      	ldrb	r3, [r7, #23]
 800f376:	4618      	mov	r0, r3
 800f378:	f7ff fbd6 	bl	800eb28 <mbedtls_pk_info_from_type>
 800f37c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	2b00      	cmp	r3, #0
 800f382:	d101      	bne.n	800f388 <mbedtls_pk_parse_subpubkey+0x98>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 800f384:	4b1a      	ldr	r3, [pc, #104]	; (800f3f0 <mbedtls_pk_parse_subpubkey+0x100>)
 800f386:	e02c      	b.n	800f3e2 <mbedtls_pk_parse_subpubkey+0xf2>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 800f388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff fbe0 	bl	800eb50 <mbedtls_pk_setup>
 800f390:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <mbedtls_pk_parse_subpubkey+0xac>
        return( ret );
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	e022      	b.n	800f3e2 <mbedtls_pk_parse_subpubkey+0xf2>

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 800f39c:	7dfb      	ldrb	r3, [r7, #23]
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d10c      	bne.n	800f3bc <mbedtls_pk_parse_subpubkey+0xcc>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f3a8:	f7ff feb6 	bl	800f118 <mbedtls_pk_rsa>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	68b9      	ldr	r1, [r7, #8]
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f7ff febe 	bl	800f134 <pk_get_rsapubkey>
 800f3b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f3ba:	e001      	b.n	800f3c0 <mbedtls_pk_parse_subpubkey+0xd0>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 800f3bc:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <mbedtls_pk_parse_subpubkey+0x100>)
 800f3be:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ret == 0 && *p != end )
 800f3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d106      	bne.n	800f3d4 <mbedtls_pk_parse_subpubkey+0xe4>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d001      	beq.n	800f3d4 <mbedtls_pk_parse_subpubkey+0xe4>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 800f3d0:	4b06      	ldr	r3, [pc, #24]	; (800f3ec <mbedtls_pk_parse_subpubkey+0xfc>)
 800f3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;

    if( ret != 0 )
 800f3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d002      	beq.n	800f3e0 <mbedtls_pk_parse_subpubkey+0xf0>
        mbedtls_pk_free( pk );
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7ff fb89 	bl	800eaf2 <mbedtls_pk_free>

    return( ret );
 800f3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3730      	adds	r7, #48	; 0x30
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	ffffc49a 	.word	0xffffc49a
 800f3f0:	ffffc380 	.word	0xffffc380

0800f3f4 <mbedtls_zeroize>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800f3f4:	b480      	push	{r7}
 800f3f6:	b085      	sub	sp, #20
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	60fb      	str	r3, [r7, #12]
 800f402:	e004      	b.n	800f40e <mbedtls_zeroize+0x1a>
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	1c5a      	adds	r2, r3, #1
 800f408:	60fa      	str	r2, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	701a      	strb	r2, [r3, #0]
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	1e5a      	subs	r2, r3, #1
 800f412:	603a      	str	r2, [r7, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d1f5      	bne.n	800f404 <mbedtls_zeroize+0x10>
}
 800f418:	bf00      	nop
 800f41a:	bf00      	nop
 800f41c:	3714      	adds	r7, #20
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <mbedtls_safer_memcmp>:

/* constant-time buffer comparison */
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
 800f426:	b480      	push	{r7}
 800f428:	b089      	sub	sp, #36	; 0x24
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	60f8      	str	r0, [r7, #12]
 800f42e:	60b9      	str	r1, [r7, #8]
 800f430:	607a      	str	r2, [r7, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	617b      	str	r3, [r7, #20]
    const unsigned char *B = (const unsigned char *) b;
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	613b      	str	r3, [r7, #16]
    unsigned char diff = 0;
 800f43a:	2300      	movs	r3, #0
 800f43c:	76fb      	strb	r3, [r7, #27]

    for( i = 0; i < n; i++ )
 800f43e:	2300      	movs	r3, #0
 800f440:	61fb      	str	r3, [r7, #28]
 800f442:	e00f      	b.n	800f464 <mbedtls_safer_memcmp+0x3e>
        diff |= A[i] ^ B[i];
 800f444:	697a      	ldr	r2, [r7, #20]
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	4413      	add	r3, r2
 800f44a:	781a      	ldrb	r2, [r3, #0]
 800f44c:	6939      	ldr	r1, [r7, #16]
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	440b      	add	r3, r1
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	4053      	eors	r3, r2
 800f456:	b2da      	uxtb	r2, r3
 800f458:	7efb      	ldrb	r3, [r7, #27]
 800f45a:	4313      	orrs	r3, r2
 800f45c:	76fb      	strb	r3, [r7, #27]
    for( i = 0; i < n; i++ )
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	3301      	adds	r3, #1
 800f462:	61fb      	str	r3, [r7, #28]
 800f464:	69fa      	ldr	r2, [r7, #28]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d3eb      	bcc.n	800f444 <mbedtls_safer_memcmp+0x1e>

    return( diff );
 800f46c:	7efb      	ldrb	r3, [r7, #27]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3724      	adds	r7, #36	; 0x24
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr

0800f47a <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b086      	sub	sp, #24
 800f47e:	af00      	add	r7, sp, #0
 800f480:	60f8      	str	r0, [r7, #12]
 800f482:	60b9      	str	r1, [r7, #8]
 800f484:	607a      	str	r2, [r7, #4]
 800f486:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800f488:	2300      	movs	r3, #0
 800f48a:	617b      	str	r3, [r7, #20]

    if( N != NULL )
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d012      	beq.n	800f4b8 <mbedtls_rsa_import_raw+0x3e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	3308      	adds	r3, #8
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	68b9      	ldr	r1, [r7, #8]
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7f7 fc44 	bl	8006d28 <mbedtls_mpi_read_binary>
 800f4a0:	6178      	str	r0, [r7, #20]
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d13f      	bne.n	800f528 <mbedtls_rsa_import_raw+0xae>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7f7 fc2d 	bl	8006d0c <mbedtls_mpi_size>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	605a      	str	r2, [r3, #4]
    }

    if( P != NULL )
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00a      	beq.n	800f4d4 <mbedtls_rsa_import_raw+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	332c      	adds	r3, #44	; 0x2c
 800f4c2:	6a3a      	ldr	r2, [r7, #32]
 800f4c4:	6839      	ldr	r1, [r7, #0]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7f7 fc2e 	bl	8006d28 <mbedtls_mpi_read_binary>
 800f4cc:	6178      	str	r0, [r7, #20]
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d12b      	bne.n	800f52c <mbedtls_rsa_import_raw+0xb2>

    if( Q != NULL )
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d00a      	beq.n	800f4f0 <mbedtls_rsa_import_raw+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	3338      	adds	r3, #56	; 0x38
 800f4de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7f7 fc20 	bl	8006d28 <mbedtls_mpi_read_binary>
 800f4e8:	6178      	str	r0, [r7, #20]
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d11f      	bne.n	800f530 <mbedtls_rsa_import_raw+0xb6>

    if( D != NULL )
 800f4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d00a      	beq.n	800f50c <mbedtls_rsa_import_raw+0x92>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	3320      	adds	r3, #32
 800f4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7f7 fc12 	bl	8006d28 <mbedtls_mpi_read_binary>
 800f504:	6178      	str	r0, [r7, #20]
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d113      	bne.n	800f534 <mbedtls_rsa_import_raw+0xba>

    if( E != NULL )
 800f50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d012      	beq.n	800f538 <mbedtls_rsa_import_raw+0xbe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3314      	adds	r3, #20
 800f516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f518:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7f7 fc04 	bl	8006d28 <mbedtls_mpi_read_binary>
 800f520:	6178      	str	r0, [r7, #20]
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	2b00      	cmp	r3, #0

cleanup:
 800f526:	e007      	b.n	800f538 <mbedtls_rsa_import_raw+0xbe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 800f528:	bf00      	nop
 800f52a:	e006      	b.n	800f53a <mbedtls_rsa_import_raw+0xc0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 800f52c:	bf00      	nop
 800f52e:	e004      	b.n	800f53a <mbedtls_rsa_import_raw+0xc0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 800f530:	bf00      	nop
 800f532:	e002      	b.n	800f53a <mbedtls_rsa_import_raw+0xc0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 800f534:	bf00      	nop
 800f536:	e000      	b.n	800f53a <mbedtls_rsa_import_raw+0xc0>
cleanup:
 800f538:	bf00      	nop

    if( ret != 0 )
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d003      	beq.n	800f548 <mbedtls_rsa_import_raw+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800f546:	e000      	b.n	800f54a <mbedtls_rsa_import_raw+0xd0>

    return( 0 );
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
	...

0800f554 <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
 800f554:	b590      	push	{r4, r7, lr}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	685c      	ldr	r4, [r3, #4]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	3308      	adds	r3, #8
 800f568:	4618      	mov	r0, r3
 800f56a:	f7f7 fbcf 	bl	8006d0c <mbedtls_mpi_size>
 800f56e:	4603      	mov	r3, r0
 800f570:	429c      	cmp	r4, r3
 800f572:	d104      	bne.n	800f57e <rsa_check_context+0x2a>
        ctx->len > MBEDTLS_MPI_MAX_SIZE )
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	685b      	ldr	r3, [r3, #4]
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 800f578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f57c:	d901      	bls.n	800f582 <rsa_check_context+0x2e>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f57e:	4b3a      	ldr	r3, [pc, #232]	; (800f668 <rsa_check_context+0x114>)
 800f580:	e06d      	b.n	800f65e <rsa_check_context+0x10a>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	3308      	adds	r3, #8
 800f586:	2100      	movs	r1, #0
 800f588:	4618      	mov	r0, r3
 800f58a:	f7f7 fec7 	bl	800731c <mbedtls_mpi_cmp_int>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	dd08      	ble.n	800f5a6 <rsa_check_context+0x52>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	3308      	adds	r3, #8
 800f598:	2100      	movs	r1, #0
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7f7 fb0d 	bl	8006bba <mbedtls_mpi_get_bit>
 800f5a0:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d101      	bne.n	800f5aa <rsa_check_context+0x56>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f5a6:	4b30      	ldr	r3, [pc, #192]	; (800f668 <rsa_check_context+0x114>)
 800f5a8:	e059      	b.n	800f65e <rsa_check_context+0x10a>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d025      	beq.n	800f5fc <rsa_check_context+0xa8>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	332c      	adds	r3, #44	; 0x2c
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7f7 feb0 	bl	800731c <mbedtls_mpi_cmp_int>
 800f5bc:	4603      	mov	r3, r0
    if( is_priv &&
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	dd1a      	ble.n	800f5f8 <rsa_check_context+0xa4>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	332c      	adds	r3, #44	; 0x2c
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7f7 faf6 	bl	8006bba <mbedtls_mpi_get_bit>
 800f5ce:	4603      	mov	r3, r0
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d011      	beq.n	800f5f8 <rsa_check_context+0xa4>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	3338      	adds	r3, #56	; 0x38
 800f5d8:	2100      	movs	r1, #0
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7f7 fe9e 	bl	800731c <mbedtls_mpi_cmp_int>
 800f5e0:	4603      	mov	r3, r0
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	dd08      	ble.n	800f5f8 <rsa_check_context+0xa4>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	3338      	adds	r3, #56	; 0x38
 800f5ea:	2100      	movs	r1, #0
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7f7 fae4 	bl	8006bba <mbedtls_mpi_get_bit>
 800f5f2:	4603      	mov	r3, r0
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d101      	bne.n	800f5fc <rsa_check_context+0xa8>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f5f8:	4b1b      	ldr	r3, [pc, #108]	; (800f668 <rsa_check_context+0x114>)
 800f5fa:	e030      	b.n	800f65e <rsa_check_context+0x10a>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	3314      	adds	r3, #20
 800f600:	2100      	movs	r1, #0
 800f602:	4618      	mov	r0, r3
 800f604:	f7f7 fe8a 	bl	800731c <mbedtls_mpi_cmp_int>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	dc01      	bgt.n	800f612 <rsa_check_context+0xbe>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f60e:	4b16      	ldr	r3, [pc, #88]	; (800f668 <rsa_check_context+0x114>)
 800f610:	e025      	b.n	800f65e <rsa_check_context+0x10a>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d013      	beq.n	800f640 <rsa_check_context+0xec>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	3344      	adds	r3, #68	; 0x44
 800f61c:	2100      	movs	r1, #0
 800f61e:	4618      	mov	r0, r3
 800f620:	f7f7 fe7c 	bl	800731c <mbedtls_mpi_cmp_int>
 800f624:	4603      	mov	r3, r0
    if( is_priv &&
 800f626:	2b00      	cmp	r3, #0
 800f628:	dd08      	ble.n	800f63c <rsa_check_context+0xe8>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3350      	adds	r3, #80	; 0x50
 800f62e:	2100      	movs	r1, #0
 800f630:	4618      	mov	r0, r3
 800f632:	f7f7 fe73 	bl	800731c <mbedtls_mpi_cmp_int>
 800f636:	4603      	mov	r3, r0
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 800f638:	2b00      	cmp	r3, #0
 800f63a:	dc01      	bgt.n	800f640 <rsa_check_context+0xec>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f63c:	4b0a      	ldr	r3, [pc, #40]	; (800f668 <rsa_check_context+0x114>)
 800f63e:	e00e      	b.n	800f65e <rsa_check_context+0x10a>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00a      	beq.n	800f65c <rsa_check_context+0x108>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	335c      	adds	r3, #92	; 0x5c
 800f64a:	2100      	movs	r1, #0
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7f7 fe65 	bl	800731c <mbedtls_mpi_cmp_int>
 800f652:	4603      	mov	r3, r0
    if( is_priv &&
 800f654:	2b00      	cmp	r3, #0
 800f656:	dc01      	bgt.n	800f65c <rsa_check_context+0x108>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f658:	4b03      	ldr	r3, [pc, #12]	; (800f668 <rsa_check_context+0x114>)
 800f65a:	e000      	b.n	800f65e <rsa_check_context+0x10a>
    }
#endif

    return( 0 );
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3714      	adds	r7, #20
 800f662:	46bd      	mov	sp, r7
 800f664:	bd90      	pop	{r4, r7, pc}
 800f666:	bf00      	nop
 800f668:	ffffbf80 	.word	0xffffbf80

0800f66c <mbedtls_rsa_complete>:

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 800f66c:	b5b0      	push	{r4, r5, r7, lr}
 800f66e:	b090      	sub	sp, #64	; 0x40
 800f670:	af02      	add	r7, sp, #8
 800f672:	6078      	str	r0, [r7, #4]
    int ret = 0;
 800f674:	2300      	movs	r3, #0
 800f676:	637b      	str	r3, [r7, #52]	; 0x34

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	3308      	adds	r3, #8
 800f67c:	2100      	movs	r1, #0
 800f67e:	4618      	mov	r0, r3
 800f680:	f7f7 fe4c 	bl	800731c <mbedtls_mpi_cmp_int>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	bf14      	ite	ne
 800f68a:	2301      	movne	r3, #1
 800f68c:	2300      	moveq	r3, #0
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	633b      	str	r3, [r7, #48]	; 0x30
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	332c      	adds	r3, #44	; 0x2c
 800f696:	2100      	movs	r1, #0
 800f698:	4618      	mov	r0, r3
 800f69a:	f7f7 fe3f 	bl	800731c <mbedtls_mpi_cmp_int>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	bf14      	ite	ne
 800f6a4:	2301      	movne	r3, #1
 800f6a6:	2300      	moveq	r3, #0
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	3338      	adds	r3, #56	; 0x38
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7f7 fe32 	bl	800731c <mbedtls_mpi_cmp_int>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	bf14      	ite	ne
 800f6be:	2301      	movne	r3, #1
 800f6c0:	2300      	moveq	r3, #0
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	62bb      	str	r3, [r7, #40]	; 0x28
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3320      	adds	r3, #32
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7f7 fe25 	bl	800731c <mbedtls_mpi_cmp_int>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	bf14      	ite	ne
 800f6d8:	2301      	movne	r3, #1
 800f6da:	2300      	moveq	r3, #0
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	627b      	str	r3, [r7, #36]	; 0x24
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	3314      	adds	r3, #20
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7f7 fe18 	bl	800731c <mbedtls_mpi_cmp_int>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	bf14      	ite	ne
 800f6f2:	2301      	movne	r3, #1
 800f6f4:	2300      	moveq	r3, #0
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	623b      	str	r3, [r7, #32]
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 800f6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00a      	beq.n	800f716 <mbedtls_rsa_complete+0xaa>
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	2b00      	cmp	r3, #0
 800f704:	d007      	beq.n	800f716 <mbedtls_rsa_complete+0xaa>
 800f706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d004      	beq.n	800f716 <mbedtls_rsa_complete+0xaa>
 800f70c:	6a3b      	ldr	r3, [r7, #32]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d001      	beq.n	800f716 <mbedtls_rsa_complete+0xaa>
 800f712:	2301      	movs	r3, #1
 800f714:	e000      	b.n	800f718 <mbedtls_rsa_complete+0xac>
 800f716:	2300      	movs	r3, #0
 800f718:	61fb      	str	r3, [r7, #28]
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 800f71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00d      	beq.n	800f73c <mbedtls_rsa_complete+0xd0>
 800f720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f722:	2b00      	cmp	r3, #0
 800f724:	d10a      	bne.n	800f73c <mbedtls_rsa_complete+0xd0>
 800f726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d107      	bne.n	800f73c <mbedtls_rsa_complete+0xd0>
 800f72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d004      	beq.n	800f73c <mbedtls_rsa_complete+0xd0>
 800f732:	6a3b      	ldr	r3, [r7, #32]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d001      	beq.n	800f73c <mbedtls_rsa_complete+0xd0>
 800f738:	2301      	movs	r3, #1
 800f73a:	e000      	b.n	800f73e <mbedtls_rsa_complete+0xd2>
 800f73c:	2300      	movs	r3, #0
 800f73e:	61bb      	str	r3, [r7, #24]
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 800f740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00a      	beq.n	800f75c <mbedtls_rsa_complete+0xf0>
 800f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d007      	beq.n	800f75c <mbedtls_rsa_complete+0xf0>
 800f74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d104      	bne.n	800f75c <mbedtls_rsa_complete+0xf0>
 800f752:	6a3b      	ldr	r3, [r7, #32]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <mbedtls_rsa_complete+0xf0>
 800f758:	2301      	movs	r3, #1
 800f75a:	e000      	b.n	800f75e <mbedtls_rsa_complete+0xf2>
 800f75c:	2300      	movs	r3, #0
 800f75e:	617b      	str	r3, [r7, #20]
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 800f760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f762:	2b00      	cmp	r3, #0
 800f764:	d00d      	beq.n	800f782 <mbedtls_rsa_complete+0x116>
 800f766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d10a      	bne.n	800f782 <mbedtls_rsa_complete+0x116>
 800f76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d107      	bne.n	800f782 <mbedtls_rsa_complete+0x116>
 800f772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f774:	2b00      	cmp	r3, #0
 800f776:	d104      	bne.n	800f782 <mbedtls_rsa_complete+0x116>
 800f778:	6a3b      	ldr	r3, [r7, #32]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <mbedtls_rsa_complete+0x116>
 800f77e:	2301      	movs	r3, #1
 800f780:	e000      	b.n	800f784 <mbedtls_rsa_complete+0x118>
 800f782:	2300      	movs	r3, #0
 800f784:	613b      	str	r3, [r7, #16]

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d105      	bne.n	800f798 <mbedtls_rsa_complete+0x12c>
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d102      	bne.n	800f798 <mbedtls_rsa_complete+0x12c>
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <mbedtls_rsa_complete+0x130>
 800f798:	2301      	movs	r3, #1
 800f79a:	e000      	b.n	800f79e <mbedtls_rsa_complete+0x132>
 800f79c:	2300      	movs	r3, #0
 800f79e:	60fb      	str	r3, [r7, #12]

    if( !is_priv && !is_pub )
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d104      	bne.n	800f7b0 <mbedtls_rsa_complete+0x144>
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d101      	bne.n	800f7b0 <mbedtls_rsa_complete+0x144>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800f7ac:	4b42      	ldr	r3, [pc, #264]	; (800f8b8 <mbedtls_rsa_complete+0x24c>)
 800f7ae:	e07f      	b.n	800f8b0 <mbedtls_rsa_complete+0x244>

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 800f7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d120      	bne.n	800f7f8 <mbedtls_rsa_complete+0x18c>
 800f7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d01d      	beq.n	800f7f8 <mbedtls_rsa_complete+0x18c>
 800f7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d01a      	beq.n	800f7f8 <mbedtls_rsa_complete+0x18c>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f103 0008 	add.w	r0, r3, #8
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f103 012c 	add.w	r1, r3, #44	; 0x2c
                                         &ctx->Q ) ) != 0 )
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	3338      	adds	r3, #56	; 0x38
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	f7f9 fc93 	bl	80090fe <mbedtls_mpi_mul_mpi>
 800f7d8:	6378      	str	r0, [r7, #52]	; 0x34
 800f7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d003      	beq.n	800f7e8 <mbedtls_rsa_complete+0x17c>
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800f7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7e2:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800f7e6:	e063      	b.n	800f8b0 <mbedtls_rsa_complete+0x244>
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	3308      	adds	r3, #8
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7f7 fa8d 	bl	8006d0c <mbedtls_mpi_size>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	605a      	str	r2, [r3, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 800f7f8:	69bb      	ldr	r3, [r7, #24]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d019      	beq.n	800f832 <mbedtls_rsa_complete+0x1c6>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f103 0008 	add.w	r0, r3, #8
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f103 0114 	add.w	r1, r3, #20
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f103 0220 	add.w	r2, r3, #32
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	3338      	adds	r3, #56	; 0x38
 800f81a:	9300      	str	r3, [sp, #0]
 800f81c:	4623      	mov	r3, r4
 800f81e:	f001 f9eb 	bl	8010bf8 <mbedtls_rsa_deduce_primes>
 800f822:	6378      	str	r0, [r7, #52]	; 0x34
                                         &ctx->P, &ctx->Q );
        if( ret != 0 )
 800f824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f826:	2b00      	cmp	r3, #0
 800f828:	d01b      	beq.n	800f862 <mbedtls_rsa_complete+0x1f6>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800f82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f82c:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800f830:	e03e      	b.n	800f8b0 <mbedtls_rsa_complete+0x244>

    }
    else if( d_missing )
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d014      	beq.n	800f862 <mbedtls_rsa_complete+0x1f6>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
                                                         &ctx->Q,
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f103 0138 	add.w	r1, r3, #56	; 0x38
                                                         &ctx->E,
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f103 0214 	add.w	r2, r3, #20
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	3320      	adds	r3, #32
 800f84e:	f001 fb57 	bl	8010f00 <mbedtls_rsa_deduce_private_exponent>
 800f852:	6378      	str	r0, [r7, #52]	; 0x34
 800f854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f856:	2b00      	cmp	r3, #0
 800f858:	d003      	beq.n	800f862 <mbedtls_rsa_complete+0x1f6>
                                                         &ctx->D ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800f85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f85c:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800f860:	e026      	b.n	800f8b0 <mbedtls_rsa_complete+0x244>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d01d      	beq.n	800f8a4 <mbedtls_rsa_complete+0x238>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f103 0420 	add.w	r4, r3, #32
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f103 0544 	add.w	r5, r3, #68	; 0x44
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	3350      	adds	r3, #80	; 0x50
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	325c      	adds	r2, #92	; 0x5c
 800f888:	9201      	str	r2, [sp, #4]
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	462b      	mov	r3, r5
 800f88e:	4622      	mov	r2, r4
 800f890:	f001 fdec 	bl	801146c <mbedtls_rsa_deduce_crt>
 800f894:	6378      	str	r0, [r7, #52]	; 0x34
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
        if( ret != 0 )
 800f896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d003      	beq.n	800f8a4 <mbedtls_rsa_complete+0x238>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 800f89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f89e:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800f8a2:	e005      	b.n	800f8b0 <mbedtls_rsa_complete+0x244>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	68f9      	ldr	r1, [r7, #12]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7ff fe53 	bl	800f554 <rsa_check_context>
 800f8ae:	4603      	mov	r3, r0
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3738      	adds	r7, #56	; 0x38
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bdb0      	pop	{r4, r5, r7, pc}
 800f8b8:	ffffbf80 	.word	0xffffbf80

0800f8bc <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	60b9      	str	r1, [r7, #8]
 800f8c6:	607a      	str	r2, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 800f8c8:	22ac      	movs	r2, #172	; 0xac
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f00d ffcb 	bl	801d868 <memset>

    mbedtls_rsa_set_padding( ctx, padding, hash_id );
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	68b9      	ldr	r1, [r7, #8]
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f000 f804 	bl	800f8e4 <mbedtls_rsa_set_padding>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 800f8dc:	bf00      	nop
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <mbedtls_rsa_set_padding>:

/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b085      	sub	sp, #20
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
    ctx->padding = padding;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    ctx->hash_id = hash_id;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800f900:	bf00      	nop
 800f902:	3714      	adds	r7, #20
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <mbedtls_rsa_get_len>:
/*
 * Get length in bytes of RSA modulus
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
    return( ctx->len );
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	685b      	ldr	r3, [r3, #4]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 800f92c:	2200      	movs	r2, #0
 800f92e:	2100      	movs	r1, #0
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7ff fe0f 	bl	800f554 <rsa_check_context>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d001      	beq.n	800f940 <mbedtls_rsa_check_pubkey+0x1c>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800f93c:	4b17      	ldr	r3, [pc, #92]	; (800f99c <mbedtls_rsa_check_pubkey+0x78>)
 800f93e:	e029      	b.n	800f994 <mbedtls_rsa_check_pubkey+0x70>

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3308      	adds	r3, #8
 800f944:	4618      	mov	r0, r3
 800f946:	f7f7 f9ad 	bl	8006ca4 <mbedtls_mpi_bitlen>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b7f      	cmp	r3, #127	; 0x7f
 800f94e:	d801      	bhi.n	800f954 <mbedtls_rsa_check_pubkey+0x30>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800f950:	4b12      	ldr	r3, [pc, #72]	; (800f99c <mbedtls_rsa_check_pubkey+0x78>)
 800f952:	e01f      	b.n	800f994 <mbedtls_rsa_check_pubkey+0x70>
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	3314      	adds	r3, #20
 800f958:	2100      	movs	r1, #0
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7f7 f92d 	bl	8006bba <mbedtls_mpi_get_bit>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d013      	beq.n	800f98e <mbedtls_rsa_check_pubkey+0x6a>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3314      	adds	r3, #20
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7f7 f99a 	bl	8006ca4 <mbedtls_mpi_bitlen>
 800f970:	4603      	mov	r3, r0
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 800f972:	2b01      	cmp	r3, #1
 800f974:	d90b      	bls.n	800f98e <mbedtls_rsa_check_pubkey+0x6a>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f103 0214 	add.w	r2, r3, #20
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	3308      	adds	r3, #8
 800f980:	4619      	mov	r1, r3
 800f982:	4610      	mov	r0, r2
 800f984:	f7f7 fc2f 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 800f988:	4603      	mov	r3, r0
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	db01      	blt.n	800f992 <mbedtls_rsa_check_pubkey+0x6e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800f98e:	4b03      	ldr	r3, [pc, #12]	; (800f99c <mbedtls_rsa_check_pubkey+0x78>)
 800f990:	e000      	b.n	800f994 <mbedtls_rsa_check_pubkey+0x70>
    }

    return( 0 );
 800f992:	2300      	movs	r3, #0
}
 800f994:	4618      	mov	r0, r3
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	ffffbe00 	.word	0xffffbe00

0800f9a0 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 800f9a0:	b5b0      	push	{r4, r5, r7, lr}
 800f9a2:	b086      	sub	sp, #24
 800f9a4:	af04      	add	r7, sp, #16
 800f9a6:	6078      	str	r0, [r7, #4]
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7ff ffbb 	bl	800f924 <mbedtls_rsa_check_pubkey>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d107      	bne.n	800f9c4 <mbedtls_rsa_check_privkey+0x24>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	2101      	movs	r1, #1
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7ff fdcb 	bl	800f554 <rsa_check_context>
 800f9be:	4603      	mov	r3, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d001      	beq.n	800f9c8 <mbedtls_rsa_check_privkey+0x28>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800f9c4:	4b1e      	ldr	r3, [pc, #120]	; (800fa40 <mbedtls_rsa_check_privkey+0xa0>)
 800f9c6:	e036      	b.n	800fa36 <mbedtls_rsa_check_privkey+0x96>
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f103 0008 	add.w	r0, r3, #8
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f103 0420 	add.w	r4, r3, #32
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	3314      	adds	r3, #20
 800f9e4:	2500      	movs	r5, #0
 800f9e6:	9502      	str	r5, [sp, #8]
 800f9e8:	2500      	movs	r5, #0
 800f9ea:	9501      	str	r5, [sp, #4]
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	4623      	mov	r3, r4
 800f9f0:	f001 fc12 	bl	8011218 <mbedtls_rsa_validate_params>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d001      	beq.n	800f9fe <mbedtls_rsa_check_privkey+0x5e>
                                     &ctx->D, &ctx->E, NULL, NULL ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800f9fa:	4b11      	ldr	r3, [pc, #68]	; (800fa40 <mbedtls_rsa_check_privkey+0xa0>)
 800f9fc:	e01b      	b.n	800fa36 <mbedtls_rsa_check_privkey+0x96>
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f103 0420 	add.w	r4, r3, #32
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f103 0544 	add.w	r5, r3, #68	; 0x44
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	3350      	adds	r3, #80	; 0x50
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	325c      	adds	r2, #92	; 0x5c
 800fa1e:	9201      	str	r2, [sp, #4]
 800fa20:	9300      	str	r3, [sp, #0]
 800fa22:	462b      	mov	r3, r5
 800fa24:	4622      	mov	r2, r4
 800fa26:	f001 fb01 	bl	801102c <mbedtls_rsa_validate_crt>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d001      	beq.n	800fa34 <mbedtls_rsa_check_privkey+0x94>
                                       &ctx->DP, &ctx->DQ, &ctx->QP ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fa30:	4b03      	ldr	r3, [pc, #12]	; (800fa40 <mbedtls_rsa_check_privkey+0xa0>)
 800fa32:	e000      	b.n	800fa36 <mbedtls_rsa_check_privkey+0x96>
    }
#endif

    return( 0 );
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bdb0      	pop	{r4, r5, r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	ffffbe00 	.word	0xffffbe00

0800fa44 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7ff ff68 	bl	800f924 <mbedtls_rsa_check_pubkey>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d105      	bne.n	800fa66 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 800fa5a:	6838      	ldr	r0, [r7, #0]
 800fa5c:	f7ff ffa0 	bl	800f9a0 <mbedtls_rsa_check_privkey>
 800fa60:	4603      	mov	r3, r0
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d001      	beq.n	800fa6a <mbedtls_rsa_check_pub_priv+0x26>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fa66:	4b10      	ldr	r3, [pc, #64]	; (800faa8 <mbedtls_rsa_check_pub_priv+0x64>)
 800fa68:	e01a      	b.n	800faa0 <mbedtls_rsa_check_pub_priv+0x5c>
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f103 0208 	add.w	r2, r3, #8
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	3308      	adds	r3, #8
 800fa74:	4619      	mov	r1, r3
 800fa76:	4610      	mov	r0, r2
 800fa78:	f7f7 fbb5 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d10b      	bne.n	800fa9a <mbedtls_rsa_check_pub_priv+0x56>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f103 0214 	add.w	r2, r3, #20
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	3314      	adds	r3, #20
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	4610      	mov	r0, r2
 800fa90:	f7f7 fba9 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 800fa94:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <mbedtls_rsa_check_pub_priv+0x5a>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800fa9a:	4b03      	ldr	r3, [pc, #12]	; (800faa8 <mbedtls_rsa_check_pub_priv+0x64>)
 800fa9c:	e000      	b.n	800faa0 <mbedtls_rsa_check_pub_priv+0x5c>
    }

    return( 0 );
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	ffffbe00 	.word	0xffffbe00

0800faac <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 800faac:	b590      	push	{r4, r7, lr}
 800faae:	b08d      	sub	sp, #52	; 0x34
 800fab0:	af02      	add	r7, sp, #8
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 800fab8:	2200      	movs	r2, #0
 800faba:	2100      	movs	r1, #0
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f7ff fd49 	bl	800f554 <rsa_check_context>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <mbedtls_rsa_public+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fac8:	4b2c      	ldr	r3, [pc, #176]	; (800fb7c <mbedtls_rsa_public+0xd0>)
 800faca:	e052      	b.n	800fb72 <mbedtls_rsa_public+0xc6>

    mbedtls_mpi_init( &T );
 800facc:	f107 0314 	add.w	r3, r7, #20
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7f6 ff73 	bl	80069bc <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	685a      	ldr	r2, [r3, #4]
 800fada:	f107 0314 	add.w	r3, r7, #20
 800fade:	68b9      	ldr	r1, [r7, #8]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7f7 f921 	bl	8006d28 <mbedtls_mpi_read_binary>
 800fae6:	6278      	str	r0, [r7, #36]	; 0x24
 800fae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faea:	2b00      	cmp	r3, #0
 800faec:	d131      	bne.n	800fb52 <mbedtls_rsa_public+0xa6>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f103 0208 	add.w	r2, r3, #8
 800faf4:	f107 0314 	add.w	r3, r7, #20
 800faf8:	4611      	mov	r1, r2
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7f7 fb73 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	db03      	blt.n	800fb0e <mbedtls_rsa_public+0x62>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 800fb06:	f06f 0303 	mvn.w	r3, #3
 800fb0a:	627b      	str	r3, [r7, #36]	; 0x24
        goto cleanup;
 800fb0c:	e024      	b.n	800fb58 <mbedtls_rsa_public+0xac>
    }

    olen = ctx->len;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	623b      	str	r3, [r7, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f103 0214 	add.w	r2, r3, #20
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f103 0408 	add.w	r4, r3, #8
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	3368      	adds	r3, #104	; 0x68
 800fb24:	f107 0114 	add.w	r1, r7, #20
 800fb28:	f107 0014 	add.w	r0, r7, #20
 800fb2c:	9300      	str	r3, [sp, #0]
 800fb2e:	4623      	mov	r3, r4
 800fb30:	f7f9 ffff 	bl	8009b32 <mbedtls_mpi_exp_mod>
 800fb34:	6278      	str	r0, [r7, #36]	; 0x24
 800fb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d10c      	bne.n	800fb56 <mbedtls_rsa_public+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 800fb3c:	f107 0314 	add.w	r3, r7, #20
 800fb40:	6a3a      	ldr	r2, [r7, #32]
 800fb42:	6879      	ldr	r1, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7f7 f94d 	bl	8006de4 <mbedtls_mpi_write_binary>
 800fb4a:	6278      	str	r0, [r7, #36]	; 0x24
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4e:	2b00      	cmp	r3, #0

cleanup:
 800fb50:	e002      	b.n	800fb58 <mbedtls_rsa_public+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 800fb52:	bf00      	nop
 800fb54:	e000      	b.n	800fb58 <mbedtls_rsa_public+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 800fb56:	bf00      	nop
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 800fb58:	f107 0314 	add.w	r3, r7, #20
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7f6 ff44 	bl	80069ea <mbedtls_mpi_free>

    if( ret != 0 )
 800fb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d003      	beq.n	800fb70 <mbedtls_rsa_public+0xc4>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 800fb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6a:	f5a3 4385 	sub.w	r3, r3, #17024	; 0x4280
 800fb6e:	e000      	b.n	800fb72 <mbedtls_rsa_public+0xc6>

    return( 0 );
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	372c      	adds	r7, #44	; 0x2c
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd90      	pop	{r4, r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	ffffbf80 	.word	0xffffbf80

0800fb80 <rsa_prepare_blinding>:
 *  DSS, and other systems. In : Advances in Cryptology-CRYPTO'96. Springer
 *  Berlin Heidelberg, 1996. p. 104-113.
 */
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800fb80:	b590      	push	{r4, r7, lr}
 800fb82:	b089      	sub	sp, #36	; 0x24
 800fb84:	af02      	add	r7, sp, #8
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	607a      	str	r2, [r7, #4]
    int ret, count = 0;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	613b      	str	r3, [r7, #16]

    if( ctx->Vf.p != NULL )
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d03b      	beq.n	800fc12 <rsa_prepare_blinding+0x92>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	338c      	adds	r3, #140	; 0x8c
 800fbaa:	461a      	mov	r2, r3
 800fbac:	f7f9 faa7 	bl	80090fe <mbedtls_mpi_mul_mpi>
 800fbb0:	6178      	str	r0, [r7, #20]
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d17e      	bne.n	800fcb6 <rsa_prepare_blinding+0x136>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	3308      	adds	r3, #8
 800fbc8:	461a      	mov	r2, r3
 800fbca:	f7f9 fe94 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 800fbce:	6178      	str	r0, [r7, #20]
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d171      	bne.n	800fcba <rsa_prepare_blinding+0x13a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	3398      	adds	r3, #152	; 0x98
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	f7f9 fa89 	bl	80090fe <mbedtls_mpi_mul_mpi>
 800fbec:	6178      	str	r0, [r7, #20]
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d164      	bne.n	800fcbe <rsa_prepare_blinding+0x13e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3308      	adds	r3, #8
 800fc04:	461a      	mov	r2, r3
 800fc06:	f7f9 fe76 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 800fc0a:	6178      	str	r0, [r7, #20]
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	2b00      	cmp	r3, #0

        goto cleanup;
 800fc10:	e05c      	b.n	800fccc <rsa_prepare_blinding+0x14c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	1c5a      	adds	r2, r3, #1
 800fc16:	613a      	str	r2, [r7, #16]
 800fc18:	2b0a      	cmp	r3, #10
 800fc1a:	dd01      	ble.n	800fc20 <rsa_prepare_blinding+0xa0>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 800fc1c:	4b2e      	ldr	r3, [pc, #184]	; (800fcd8 <rsa_prepare_blinding+0x158>)
 800fc1e:	e056      	b.n	800fcce <rsa_prepare_blinding+0x14e>

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	1e59      	subs	r1, r3, #1
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	68ba      	ldr	r2, [r7, #8]
 800fc30:	f7fa fd20 	bl	800a674 <mbedtls_mpi_fill_random>
 800fc34:	6178      	str	r0, [r7, #20]
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d142      	bne.n	800fcc2 <rsa_prepare_blinding+0x142>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	3308      	adds	r3, #8
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	f7fa fc1b 	bl	800a488 <mbedtls_mpi_gcd>
 800fc52:	6178      	str	r0, [r7, #20]
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d135      	bne.n	800fcc6 <rsa_prepare_blinding+0x146>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	338c      	adds	r3, #140	; 0x8c
 800fc5e:	2101      	movs	r1, #1
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7f7 fb5b 	bl	800731c <mbedtls_mpi_cmp_int>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d1d2      	bne.n	800fc12 <rsa_prepare_blinding+0x92>

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	3308      	adds	r3, #8
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	f7fa fd56 	bl	800a72e <mbedtls_mpi_inv_mod>
 800fc82:	6178      	str	r0, [r7, #20]
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d11f      	bne.n	800fcca <rsa_prepare_blinding+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f103 0214 	add.w	r2, r3, #20
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f103 0408 	add.w	r4, r3, #8
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	3368      	adds	r3, #104	; 0x68
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	4623      	mov	r3, r4
 800fcaa:	f7f9 ff42 	bl	8009b32 <mbedtls_mpi_exp_mod>
 800fcae:	6178      	str	r0, [r7, #20]
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	2b00      	cmp	r3, #0


cleanup:
 800fcb4:	e00a      	b.n	800fccc <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 800fcb6:	bf00      	nop
 800fcb8:	e008      	b.n	800fccc <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 800fcba:	bf00      	nop
 800fcbc:	e006      	b.n	800fccc <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 800fcbe:	bf00      	nop
 800fcc0:	e004      	b.n	800fccc <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 800fcc2:	bf00      	nop
 800fcc4:	e002      	b.n	800fccc <rsa_prepare_blinding+0x14c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 800fcc6:	bf00      	nop
 800fcc8:	e000      	b.n	800fccc <rsa_prepare_blinding+0x14c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 800fcca:	bf00      	nop
    return( ret );
 800fccc:	697b      	ldr	r3, [r7, #20]
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	371c      	adds	r7, #28
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd90      	pop	{r4, r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	ffffbb80 	.word	0xffffbb80

0800fcdc <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 800fcdc:	b590      	push	{r4, r7, lr}
 800fcde:	b0a9      	sub	sp, #164	; 0xa4
 800fce0:	af02      	add	r7, sp, #8
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]
 800fce8:	603b      	str	r3, [r7, #0]
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3344      	adds	r3, #68	; 0x44
 800fcee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    mbedtls_mpi *DQ = &ctx->DQ;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	3350      	adds	r3, #80	; 0x50
 800fcf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	bf14      	ite	ne
 800fd00:	2301      	movne	r3, #1
 800fd02:	2300      	moveq	r3, #0
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	461a      	mov	r2, r3
 800fd08:	2101      	movs	r1, #1
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	f7ff fc22 	bl	800f554 <rsa_check_context>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d001      	beq.n	800fd1a <mbedtls_rsa_private+0x3e>
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800fd16:	4b2b      	ldr	r3, [pc, #172]	; (800fdc4 <mbedtls_rsa_private+0xe8>)
 800fd18:	e263      	b.n	80101e2 <mbedtls_rsa_private+0x506>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 800fd1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7f6 fe4c 	bl	80069bc <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 800fd24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7f6 fe47 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 800fd2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7f6 fe42 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 800fd38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7f6 fe3d 	bl	80069bc <mbedtls_mpi_init>

    if( f_rng != NULL )
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d009      	beq.n	800fd5c <mbedtls_rsa_private+0x80>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 800fd48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7f6 fe35 	bl	80069bc <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 800fd52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7f6 fe30 	bl	80069bc <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 800fd5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7f6 fe2b 	bl	80069bc <mbedtls_mpi_init>
 800fd66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7f6 fe26 	bl	80069bc <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 800fd70:	f107 031c 	add.w	r3, r7, #28
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7f6 fe21 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 800fd7a:	f107 0310 	add.w	r3, r7, #16
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7f6 fe1c 	bl	80069bc <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	685a      	ldr	r2, [r3, #4]
 800fd88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fd8c:	6839      	ldr	r1, [r7, #0]
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7f6 ffca 	bl	8006d28 <mbedtls_mpi_read_binary>
 800fd94:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fd98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f040 81b4 	bne.w	801010a <mbedtls_rsa_private+0x42e>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f103 0208 	add.w	r2, r3, #8
 800fda8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fdac:	4611      	mov	r1, r2
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7f7 fa19 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	db06      	blt.n	800fdc8 <mbedtls_rsa_private+0xec>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 800fdba:	f06f 0303 	mvn.w	r3, #3
 800fdbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        goto cleanup;
 800fdc2:	e1cf      	b.n	8010164 <mbedtls_rsa_private+0x488>
 800fdc4:	ffffbf80 	.word	0xffffbf80
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 800fdc8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800fdcc:	f107 031c 	add.w	r3, r7, #28
 800fdd0:	4611      	mov	r1, r2
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7f6 fe72 	bl	8006abc <mbedtls_mpi_copy>
 800fdd8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f040 8194 	bne.w	801010e <mbedtls_rsa_private+0x432>

    if( f_rng != NULL )
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 80b4 	beq.w	800ff56 <mbedtls_rsa_private+0x27a>
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	68b9      	ldr	r1, [r7, #8]
 800fdf2:	68f8      	ldr	r0, [r7, #12]
 800fdf4:	f7ff fec4 	bl	800fb80 <rsa_prepare_blinding>
 800fdf8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fdfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	f040 8186 	bne.w	8010112 <mbedtls_rsa_private+0x436>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 800fe0c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800fe10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7f9 f972 	bl	80090fe <mbedtls_mpi_mul_mpi>
 800fe1a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fe1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	f040 8177 	bne.w	8010116 <mbedtls_rsa_private+0x43a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f103 0208 	add.w	r2, r3, #8
 800fe2e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800fe32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7f9 fd5d 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 800fe3c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fe40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f040 8168 	bne.w	801011a <mbedtls_rsa_private+0x43e>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800fe50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fe54:	2201      	movs	r2, #1
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7f7 fcaf 	bl	80077ba <mbedtls_mpi_sub_int>
 800fe5c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fe60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f040 815a 	bne.w	801011e <mbedtls_rsa_private+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fe70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fe74:	2201      	movs	r2, #1
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7f7 fc9f 	bl	80077ba <mbedtls_mpi_sub_int>
 800fe7c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fe80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f040 814c 	bne.w	8010122 <mbedtls_rsa_private+0x446>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 800fe8a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	68ba      	ldr	r2, [r7, #8]
 800fe92:	211c      	movs	r1, #28
 800fe94:	f7fa fbee 	bl	800a674 <mbedtls_mpi_fill_random>
 800fe98:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fe9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f040 8140 	bne.w	8010126 <mbedtls_rsa_private+0x44a>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 800fea6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800feaa:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800feae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7f9 f923 	bl	80090fe <mbedtls_mpi_mul_mpi>
 800feb8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800febc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f040 8132 	bne.w	801012a <mbedtls_rsa_private+0x44e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800fecc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800fed0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7f7 fbb8 	bl	800764a <mbedtls_mpi_add_mpi>
 800feda:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f040 8123 	bne.w	801012e <mbedtls_rsa_private+0x452>
                    &ctx->DP ) );

        DP = &DP_blind;
 800fee8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800feec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 800fef0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	211c      	movs	r1, #28
 800fefa:	f7fa fbbb 	bl	800a674 <mbedtls_mpi_fill_random>
 800fefe:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ff02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f040 8113 	bne.w	8010132 <mbedtls_rsa_private+0x456>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 800ff0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ff10:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800ff14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7f9 f8f0 	bl	80090fe <mbedtls_mpi_mul_mpi>
 800ff1e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ff22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f040 8105 	bne.w	8010136 <mbedtls_rsa_private+0x45a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ff32:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ff36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7f7 fb85 	bl	800764a <mbedtls_mpi_add_mpi>
 800ff40:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ff44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f040 80f6 	bne.w	801013a <mbedtls_rsa_private+0x45e>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 800ff4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	3374      	adds	r3, #116	; 0x74
 800ff60:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800ff64:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800ff68:	9300      	str	r3, [sp, #0]
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ff70:	f7f9 fddf 	bl	8009b32 <mbedtls_mpi_exp_mod>
 800ff74:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ff78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f040 80de 	bne.w	801013e <mbedtls_rsa_private+0x462>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	3380      	adds	r3, #128	; 0x80
 800ff8c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800ff90:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	4613      	mov	r3, r2
 800ff98:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ff9c:	f7f9 fdc9 	bl	8009b32 <mbedtls_mpi_exp_mod>
 800ffa0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ffa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f040 80ca 	bne.w	8010142 <mbedtls_rsa_private+0x466>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 800ffae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ffb2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800ffb6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7f7 fb8f 	bl	80076de <mbedtls_mpi_sub_mpi>
 800ffc0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ffc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f040 80bc 	bne.w	8010146 <mbedtls_rsa_private+0x46a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 800ffd4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800ffd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7f9 f88e 	bl	80090fe <mbedtls_mpi_mul_mpi>
 800ffe2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ffe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f040 80ad 	bne.w	801014a <mbedtls_rsa_private+0x46e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800fff6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800fffa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fffe:	4618      	mov	r0, r3
 8010000:	f7f9 fc79 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 8010004:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801000c:	2b00      	cmp	r3, #0
 801000e:	f040 809e 	bne.w	801014e <mbedtls_rsa_private+0x472>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010018:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801001c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010020:	4618      	mov	r0, r3
 8010022:	f7f9 f86c 	bl	80090fe <mbedtls_mpi_mul_mpi>
 8010026:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801002a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801002e:	2b00      	cmp	r3, #0
 8010030:	f040 808f 	bne.w	8010152 <mbedtls_rsa_private+0x476>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8010034:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010038:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801003c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010040:	4618      	mov	r0, r3
 8010042:	f7f7 fb02 	bl	800764a <mbedtls_mpi_add_mpi>
 8010046:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801004a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801004e:	2b00      	cmp	r3, #0
 8010050:	f040 8081 	bne.w	8010156 <mbedtls_rsa_private+0x47a>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d01f      	beq.n	801009a <mbedtls_rsa_private+0x3be>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8010060:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010064:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010068:	4618      	mov	r0, r3
 801006a:	f7f9 f848 	bl	80090fe <mbedtls_mpi_mul_mpi>
 801006e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010072:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010076:	2b00      	cmp	r3, #0
 8010078:	d16f      	bne.n	801015a <mbedtls_rsa_private+0x47e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f103 0208 	add.w	r2, r3, #8
 8010080:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010084:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010088:	4618      	mov	r0, r3
 801008a:	f7f9 fc34 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 801008e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010092:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010096:	2b00      	cmp	r3, #0
 8010098:	d161      	bne.n	801015e <mbedtls_rsa_private+0x482>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f103 0214 	add.w	r2, r3, #20
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f103 0408 	add.w	r4, r3, #8
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	3368      	adds	r3, #104	; 0x68
 80100aa:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80100ae:	f107 0010 	add.w	r0, r7, #16
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	4623      	mov	r3, r4
 80100b6:	f7f9 fd3c 	bl	8009b32 <mbedtls_mpi_exp_mod>
 80100ba:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80100be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d14d      	bne.n	8010162 <mbedtls_rsa_private+0x486>
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 80100c6:	f107 021c 	add.w	r2, r7, #28
 80100ca:	f107 0310 	add.w	r3, r7, #16
 80100ce:	4611      	mov	r1, r2
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7f7 f888 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d003      	beq.n	80100e4 <mbedtls_rsa_private+0x408>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80100dc:	4b43      	ldr	r3, [pc, #268]	; (80101ec <mbedtls_rsa_private+0x510>)
 80100de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        goto cleanup;
 80100e2:	e03f      	b.n	8010164 <mbedtls_rsa_private+0x488>
    }

    olen = ctx->len;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80100ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80100f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80100f4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7f6 fe73 	bl	8006de4 <mbedtls_mpi_write_binary>
 80100fe:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010102:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010106:	2b00      	cmp	r3, #0

cleanup:
 8010108:	e02c      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 801010a:	bf00      	nop
 801010c:	e02a      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 801010e:	bf00      	nop
 8010110:	e028      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 8010112:	bf00      	nop
 8010114:	e026      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8010116:	bf00      	nop
 8010118:	e024      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 801011a:	bf00      	nop
 801011c:	e022      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 801011e:	bf00      	nop
 8010120:	e020      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8010122:	bf00      	nop
 8010124:	e01e      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8010126:	bf00      	nop
 8010128:	e01c      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 801012a:	bf00      	nop
 801012c:	e01a      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 801012e:	bf00      	nop
 8010130:	e018      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8010132:	bf00      	nop
 8010134:	e016      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8010136:	bf00      	nop
 8010138:	e014      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 801013a:	bf00      	nop
 801013c:	e012      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 801013e:	bf00      	nop
 8010140:	e010      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8010142:	bf00      	nop
 8010144:	e00e      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8010146:	bf00      	nop
 8010148:	e00c      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 801014a:	bf00      	nop
 801014c:	e00a      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 801014e:	bf00      	nop
 8010150:	e008      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8010152:	bf00      	nop
 8010154:	e006      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8010156:	bf00      	nop
 8010158:	e004      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 801015a:	bf00      	nop
 801015c:	e002      	b.n	8010164 <mbedtls_rsa_private+0x488>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 801015e:	bf00      	nop
 8010160:	e000      	b.n	8010164 <mbedtls_rsa_private+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 8010162:	bf00      	nop
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 8010164:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010168:	4618      	mov	r0, r3
 801016a:	f7f6 fc3e 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801016e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010172:	4618      	mov	r0, r3
 8010174:	f7f6 fc39 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8010178:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801017c:	4618      	mov	r0, r3
 801017e:	f7f6 fc34 	bl	80069ea <mbedtls_mpi_free>

    if( f_rng != NULL )
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d009      	beq.n	801019c <mbedtls_rsa_private+0x4c0>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 8010188:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801018c:	4618      	mov	r0, r3
 801018e:	f7f6 fc2c 	bl	80069ea <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8010192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010196:	4618      	mov	r0, r3
 8010198:	f7f6 fc27 	bl	80069ea <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 801019c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7f6 fc22 	bl	80069ea <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 80101a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7f6 fc1d 	bl	80069ea <mbedtls_mpi_free>
 80101b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7f6 fc18 	bl	80069ea <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 80101ba:	f107 0310 	add.w	r3, r7, #16
 80101be:	4618      	mov	r0, r3
 80101c0:	f7f6 fc13 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 80101c4:	f107 031c 	add.w	r3, r7, #28
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7f6 fc0e 	bl	80069ea <mbedtls_mpi_free>

    if( ret != 0 )
 80101ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d004      	beq.n	80101e0 <mbedtls_rsa_private+0x504>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 80101d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80101da:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
 80101de:	e000      	b.n	80101e2 <mbedtls_rsa_private+0x506>

    return( 0 );
 80101e0:	2300      	movs	r3, #0
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	379c      	adds	r7, #156	; 0x9c
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd90      	pop	{r4, r7, pc}
 80101ea:	bf00      	nop
 80101ec:	ffffbc80 	.word	0xffffbc80

080101f0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b08c      	sub	sp, #48	; 0x30
 80101f4:	af02      	add	r7, sp, #8
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	603b      	str	r3, [r7, #0]
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;
 80101fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010200:	623b      	str	r3, [r7, #32]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	2b01      	cmp	r3, #1
 8010206:	d106      	bne.n	8010216 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801020e:	2b00      	cmp	r3, #0
 8010210:	d001      	beq.n	8010216 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010212:	4b44      	ldr	r3, [pc, #272]	; (8010324 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x134>)
 8010214:	e081      	b.n	801031a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d005      	beq.n	8010228 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x38>
 801021c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021e:	2b00      	cmp	r3, #0
 8010220:	d002      	beq.n	8010228 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x38>
 8010222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010228:	4b3e      	ldr	r3, [pc, #248]	; (8010324 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x134>)
 801022a:	e076      	b.n	801031a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

    olen = ctx->len;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	61bb      	str	r3, [r7, #24]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8010232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010234:	f113 0f0c 	cmn.w	r3, #12
 8010238:	d804      	bhi.n	8010244 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x54>
 801023a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801023c:	330b      	adds	r3, #11
 801023e:	69ba      	ldr	r2, [r7, #24]
 8010240:	429a      	cmp	r2, r3
 8010242:	d201      	bcs.n	8010248 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x58>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010244:	4b37      	ldr	r3, [pc, #220]	; (8010324 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x134>)
 8010246:	e068      	b.n	801031a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

    nb_pad = olen - 3 - ilen;
 8010248:	69ba      	ldr	r2, [r7, #24]
 801024a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	3b03      	subs	r3, #3
 8010250:	627b      	str	r3, [r7, #36]	; 0x24

    *p++ = 0;
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	1c5a      	adds	r2, r3, #1
 8010256:	623a      	str	r2, [r7, #32]
 8010258:	2200      	movs	r2, #0
 801025a:	701a      	strb	r2, [r3, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d12d      	bne.n	80102be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 8010262:	6a3b      	ldr	r3, [r7, #32]
 8010264:	1c5a      	adds	r2, r3, #1
 8010266:	623a      	str	r2, [r7, #32]
 8010268:	2202      	movs	r2, #2
 801026a:	701a      	strb	r2, [r3, #0]

        while( nb_pad-- > 0 )
 801026c:	e021      	b.n	80102b2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
        {
            int rng_dl = 100;
 801026e:	2364      	movs	r3, #100	; 0x64
 8010270:	61fb      	str	r3, [r7, #28]

            do {
                ret = f_rng( p_rng, p, 1 );
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	2201      	movs	r2, #1
 8010276:	6a39      	ldr	r1, [r7, #32]
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	4798      	blx	r3
 801027c:	6178      	str	r0, [r7, #20]
            } while( *p == 0 && --rng_dl && ret == 0 );
 801027e:	6a3b      	ldr	r3, [r7, #32]
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d108      	bne.n	8010298 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa8>
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	3b01      	subs	r3, #1
 801028a:	61fb      	str	r3, [r7, #28]
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d002      	beq.n	8010298 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa8>
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d0ec      	beq.n	8010272 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d002      	beq.n	80102a4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb4>
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d003      	beq.n	80102ac <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbc>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	f5a3 4389 	sub.w	r3, r3, #17536	; 0x4480
 80102aa:	e036      	b.n	801031a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x12a>

            p++;
 80102ac:	6a3b      	ldr	r3, [r7, #32]
 80102ae:	3301      	adds	r3, #1
 80102b0:	623b      	str	r3, [r7, #32]
        while( nb_pad-- > 0 )
 80102b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b4:	1e5a      	subs	r2, r3, #1
 80102b6:	627a      	str	r2, [r7, #36]	; 0x24
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d1d8      	bne.n	801026e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7e>
 80102bc:	e00f      	b.n	80102de <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xee>
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 80102be:	6a3b      	ldr	r3, [r7, #32]
 80102c0:	1c5a      	adds	r2, r3, #1
 80102c2:	623a      	str	r2, [r7, #32]
 80102c4:	2201      	movs	r2, #1
 80102c6:	701a      	strb	r2, [r3, #0]

        while( nb_pad-- > 0 )
 80102c8:	e004      	b.n	80102d4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe4>
            *p++ = 0xFF;
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	1c5a      	adds	r2, r3, #1
 80102ce:	623a      	str	r2, [r7, #32]
 80102d0:	22ff      	movs	r2, #255	; 0xff
 80102d2:	701a      	strb	r2, [r3, #0]
        while( nb_pad-- > 0 )
 80102d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d6:	1e5a      	subs	r2, r3, #1
 80102d8:	627a      	str	r2, [r7, #36]	; 0x24
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1f5      	bne.n	80102ca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
    }

    *p++ = 0;
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	1c5a      	adds	r2, r3, #1
 80102e2:	623a      	str	r2, [r7, #32]
 80102e4:	2200      	movs	r2, #0
 80102e6:	701a      	strb	r2, [r3, #0]
    memcpy( p, input, ilen );
 80102e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80102ec:	6a38      	ldr	r0, [r7, #32]
 80102ee:	f00d fa93 	bl	801d818 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d106      	bne.n	8010306 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x116>
            ? mbedtls_rsa_public(  ctx, output, output )
 80102f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102fc:	68f8      	ldr	r0, [r7, #12]
 80102fe:	f7ff fbd5 	bl	800faac <mbedtls_rsa_public>
 8010302:	4603      	mov	r3, r0
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8010304:	e008      	b.n	8010318 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x128>
 8010306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010308:	9300      	str	r3, [sp, #0]
 801030a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	68b9      	ldr	r1, [r7, #8]
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f7ff fce3 	bl	800fcdc <mbedtls_rsa_private>
 8010316:	4603      	mov	r3, r0
 8010318:	bf00      	nop
}
 801031a:	4618      	mov	r0, r3
 801031c:	3728      	adds	r7, #40	; 0x28
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	ffffbf80 	.word	0xffffbf80

08010328 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b088      	sub	sp, #32
 801032c:	af04      	add	r7, sp, #16
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
 8010334:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801033c:	2b00      	cmp	r3, #0
 801033e:	d10d      	bne.n	801035c <mbedtls_rsa_pkcs1_encrypt+0x34>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8010340:	6a3b      	ldr	r3, [r7, #32]
 8010342:	9302      	str	r3, [sp, #8]
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	9301      	str	r3, [sp, #4]
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	68b9      	ldr	r1, [r7, #8]
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f7ff ff4c 	bl	80101f0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
 8010358:	4603      	mov	r3, r0
 801035a:	e000      	b.n	801035e <mbedtls_rsa_pkcs1_encrypt+0x36>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 801035c:	4b02      	ldr	r3, [pc, #8]	; (8010368 <mbedtls_rsa_pkcs1_encrypt+0x40>)
    }
}
 801035e:	4618      	mov	r0, r3
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	ffffbf00 	.word	0xffffbf00

0801036c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 801036c:	b590      	push	{r4, r7, lr}
 801036e:	b0cd      	sub	sp, #308	; 0x134
 8010370:	af02      	add	r7, sp, #8
 8010372:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8010376:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 801037a:	6020      	str	r0, [r4, #0]
 801037c:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8010380:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8010384:	6001      	str	r1, [r0, #0]
 8010386:	f507 7194 	add.w	r1, r7, #296	; 0x128
 801038a:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 801038e:	600a      	str	r2, [r1, #0]
 8010390:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8010394:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8010398:	6013      	str	r3, [r2, #0]
    int ret;
    size_t ilen, pad_count = 0, i;
 801039a:	2300      	movs	r3, #0
 801039c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    unsigned char *p, bad, pad_done = 0;
 80103a0:	2300      	movs	r3, #0
 80103a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80103a6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80103aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d10a      	bne.n	80103ca <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5e>
 80103b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80103b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d001      	beq.n	80103ca <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80103c6:	4bb0      	ldr	r3, [pc, #704]	; (8010688 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x31c>)
 80103c8:	e159      	b.n	801067e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x312>

    ilen = ctx->len;
 80103ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80103ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    if( ilen < 16 || ilen > sizeof( buf ) )
 80103da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80103de:	2b0f      	cmp	r3, #15
 80103e0:	d904      	bls.n	80103ec <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x80>
 80103e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80103e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103ea:	d901      	bls.n	80103f0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80103ec:	4ba6      	ldr	r3, [pc, #664]	; (8010688 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x31c>)
 80103ee:	e146      	b.n	801067e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x312>

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80103f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80103f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d10c      	bne.n	8010418 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xac>
          ? mbedtls_rsa_public(  ctx, input, buf )
 80103fe:	f107 0210 	add.w	r2, r7, #16
 8010402:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010406:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801040a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 801040e:	6818      	ldr	r0, [r3, #0]
 8010410:	f7ff fb4c 	bl	800faac <mbedtls_rsa_public>
 8010414:	4603      	mov	r3, r0
 8010416:	e016      	b.n	8010446 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xda>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8010418:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801041c:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8010420:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010424:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8010428:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801042c:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8010430:	f107 0310 	add.w	r3, r7, #16
 8010434:	9300      	str	r3, [sp, #0]
 8010436:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801043a:	6812      	ldr	r2, [r2, #0]
 801043c:	6809      	ldr	r1, [r1, #0]
 801043e:	6800      	ldr	r0, [r0, #0]
 8010440:	f7ff fc4c 	bl	800fcdc <mbedtls_rsa_private>
 8010444:	4603      	mov	r3, r0
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 8010446:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    if( ret != 0 )
 801044a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801044e:	2b00      	cmp	r3, #0
 8010450:	f040 810b 	bne.w	801066a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2fe>
        goto cleanup;

    p = buf;
 8010454:	f107 0310 	add.w	r3, r7, #16
 8010458:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bad = 0;
 801045c:	2300      	movs	r3, #0
 801045e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 8010462:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 801046c:	781a      	ldrb	r2, [r3, #0]
 801046e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010472:	4313      	orrs	r3, r2
 8010474:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8010478:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801047c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2b01      	cmp	r3, #1
 8010484:	d15f      	bne.n	8010546 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1da>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8010486:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801048a:	1c5a      	adds	r2, r3, #1
 801048c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	f083 0302 	eor.w	r3, r3, #2
 8010496:	b2db      	uxtb	r3, r3
 8010498:	b25a      	sxtb	r2, r3
 801049a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 801049e:	4313      	orrs	r3, r2
 80104a0:	b25b      	sxtb	r3, r3
 80104a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80104a6:	2300      	movs	r3, #0
 80104a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80104ac:	e031      	b.n	8010512 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a6>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80104ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80104b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80104b6:	4413      	add	r3, r2
 80104b8:	781a      	ldrb	r2, [r3, #0]
 80104ba:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80104be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80104c2:	440b      	add	r3, r1
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	425b      	negs	r3, r3
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	4313      	orrs	r3, r2
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	09db      	lsrs	r3, r3, #7
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	f083 0301 	eor.w	r3, r3, #1
 80104d6:	b2da      	uxtb	r2, r3
 80104d8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80104dc:	4313      	orrs	r3, r2
 80104de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80104e2:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80104e6:	425b      	negs	r3, r3
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80104ee:	4313      	orrs	r3, r2
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	09db      	lsrs	r3, r3, #7
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	f083 0301 	eor.w	r3, r3, #1
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	461a      	mov	r2, r3
 80104fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010502:	4413      	add	r3, r2
 8010504:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( i = 0; i < ilen - 3; i++ )
 8010508:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801050c:	3301      	adds	r3, #1
 801050e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010512:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010516:	3b03      	subs	r3, #3
 8010518:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801051c:	429a      	cmp	r2, r3
 801051e:	d3c6      	bcc.n	80104ae <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x142>
        }

        p += pad_count;
 8010520:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010524:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010528:	4413      	add	r3, r2
 801052a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        bad |= *p++; /* Must be zero */
 801052e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010532:	1c5a      	adds	r2, r3, #1
 8010534:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8010538:	781a      	ldrb	r2, [r3, #0]
 801053a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801053e:	4313      	orrs	r3, r2
 8010540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8010544:	e050      	b.n	80105e8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x27c>
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8010546:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801054a:	1c5a      	adds	r2, r3, #1
 801054c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	f083 0301 	eor.w	r3, r3, #1
 8010556:	b2db      	uxtb	r3, r3
 8010558:	b25a      	sxtb	r2, r3
 801055a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 801055e:	4313      	orrs	r3, r2
 8010560:	b25b      	sxtb	r3, r3
 8010562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8010566:	2300      	movs	r3, #0
 8010568:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801056c:	e023      	b.n	80105b6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x24a>
        {
            pad_done |= ( p[i] != 0xFF );
 801056e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010572:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010576:	4413      	add	r3, r2
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	2bff      	cmp	r3, #255	; 0xff
 801057c:	bf14      	ite	ne
 801057e:	2301      	movne	r3, #1
 8010580:	2300      	moveq	r3, #0
 8010582:	b2db      	uxtb	r3, r3
 8010584:	b25a      	sxtb	r2, r3
 8010586:	f997 3116 	ldrsb.w	r3, [r7, #278]	; 0x116
 801058a:	4313      	orrs	r3, r2
 801058c:	b25b      	sxtb	r3, r3
 801058e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
            pad_count += ( pad_done == 0 );
 8010592:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8010596:	2b00      	cmp	r3, #0
 8010598:	bf0c      	ite	eq
 801059a:	2301      	moveq	r3, #1
 801059c:	2300      	movne	r3, #0
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	461a      	mov	r2, r3
 80105a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80105a6:	4413      	add	r3, r2
 80105a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( i = 0; i < ilen - 3; i++ )
 80105ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80105b0:	3301      	adds	r3, #1
 80105b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80105b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80105ba:	3b03      	subs	r3, #3
 80105bc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d3d4      	bcc.n	801056e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x202>
        }

        p += pad_count;
 80105c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80105c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80105cc:	4413      	add	r3, r2
 80105ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        bad |= *p++; /* Must be zero */
 80105d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80105d6:	1c5a      	adds	r2, r3, #1
 80105d8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80105dc:	781a      	ldrb	r2, [r3, #0]
 80105de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80105e2:	4313      	orrs	r3, r2
 80105e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    }

    bad |= ( pad_count < 8 );
 80105e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80105ec:	2b07      	cmp	r3, #7
 80105ee:	bf94      	ite	ls
 80105f0:	2301      	movls	r3, #1
 80105f2:	2300      	movhi	r3, #0
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	b25a      	sxtb	r2, r3
 80105f8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80105fc:	4313      	orrs	r3, r2
 80105fe:	b25b      	sxtb	r3, r3
 8010600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    if( bad )
 8010604:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010608:	2b00      	cmp	r3, #0
 801060a:	d003      	beq.n	8010614 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2a8>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 801060c:	4b1f      	ldr	r3, [pc, #124]	; (801068c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x320>)
 801060e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        goto cleanup;
 8010612:	e02b      	b.n	801066c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x300>
    }

    if( ilen - ( p - buf ) > output_max_len )
 8010614:	f107 0310 	add.w	r3, r7, #16
 8010618:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	461a      	mov	r2, r3
 8010620:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010624:	1a9b      	subs	r3, r3, r2
 8010626:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801062a:	429a      	cmp	r2, r3
 801062c:	d203      	bcs.n	8010636 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2ca>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 801062e:	4b18      	ldr	r3, [pc, #96]	; (8010690 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x324>)
 8010630:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        goto cleanup;
 8010634:	e01a      	b.n	801066c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x300>
    }

    *olen = ilen - (p - buf);
 8010636:	f107 0310 	add.w	r3, r7, #16
 801063a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801063e:	1ad3      	subs	r3, r2, r3
 8010640:	461a      	mov	r2, r3
 8010642:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010646:	1a9a      	subs	r2, r3, r2
 8010648:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801064c:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 801064e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	461a      	mov	r2, r3
 8010656:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801065a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 801065e:	f00d f8db 	bl	801d818 <memcpy>
    ret = 0;
 8010662:	2300      	movs	r3, #0
 8010664:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8010668:	e000      	b.n	801066c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x300>
        goto cleanup;
 801066a:	bf00      	nop

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 801066c:	f107 0310 	add.w	r3, r7, #16
 8010670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010674:	4618      	mov	r0, r3
 8010676:	f7fe febd 	bl	800f3f4 <mbedtls_zeroize>

    return( ret );
 801067a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
}
 801067e:	4618      	mov	r0, r3
 8010680:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8010684:	46bd      	mov	sp, r7
 8010686:	bd90      	pop	{r4, r7, pc}
 8010688:	ffffbf80 	.word	0xffffbf80
 801068c:	ffffbf00 	.word	0xffffbf00
 8010690:	ffffbc00 	.word	0xffffbc00

08010694 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b088      	sub	sp, #32
 8010698:	af04      	add	r7, sp, #16
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	60b9      	str	r1, [r7, #8]
 801069e:	607a      	str	r2, [r7, #4]
 80106a0:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d10f      	bne.n	80106cc <mbedtls_rsa_pkcs1_decrypt+0x38>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 80106ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ae:	9303      	str	r3, [sp, #12]
 80106b0:	6a3b      	ldr	r3, [r7, #32]
 80106b2:	9302      	str	r3, [sp, #8]
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	9301      	str	r3, [sp, #4]
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	687a      	ldr	r2, [r7, #4]
 80106c0:	68b9      	ldr	r1, [r7, #8]
 80106c2:	68f8      	ldr	r0, [r7, #12]
 80106c4:	f7ff fe52 	bl	801036c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
 80106c8:	4603      	mov	r3, r0
 80106ca:	e000      	b.n	80106ce <mbedtls_rsa_pkcs1_decrypt+0x3a>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80106cc:	4b02      	ldr	r3, [pc, #8]	; (80106d8 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	ffffbf00 	.word	0xffffbf00

080106dc <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b08a      	sub	sp, #40	; 0x28
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60b9      	str	r1, [r7, #8]
 80106e4:	607a      	str	r2, [r7, #4]
 80106e6:	603b      	str	r3, [r7, #0]
 80106e8:	4603      	mov	r3, r0
 80106ea:	73fb      	strb	r3, [r7, #15]
    size_t oid_size  = 0;
 80106ec:	2300      	movs	r3, #0
 80106ee:	61bb      	str	r3, [r7, #24]
    size_t nb_pad    = dst_len;
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char *p = dst;
 80106f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f6:	623b      	str	r3, [r7, #32]
    const char *oid  = NULL;
 80106f8:	2300      	movs	r3, #0
 80106fa:	617b      	str	r3, [r7, #20]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d041      	beq.n	8010786 <rsa_rsassa_pkcs1_v15_encode+0xaa>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8010702:	7bfb      	ldrb	r3, [r7, #15]
 8010704:	4618      	mov	r0, r3
 8010706:	f7fd fc09 	bl	800df1c <mbedtls_md_info_from_type>
 801070a:	61f8      	str	r0, [r7, #28]
        if( md_info == NULL )
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d101      	bne.n	8010716 <rsa_rsassa_pkcs1_v15_encode+0x3a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010712:	4b68      	ldr	r3, [pc, #416]	; (80108b4 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010714:	e0c9      	b.n	80108aa <rsa_rsassa_pkcs1_v15_encode+0x1ce>

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 8010716:	f107 0218 	add.w	r2, r7, #24
 801071a:	f107 0114 	add.w	r1, r7, #20
 801071e:	7bfb      	ldrb	r3, [r7, #15]
 8010720:	4618      	mov	r0, r3
 8010722:	f7fe f87d 	bl	800e820 <mbedtls_oid_get_oid_by_md>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	d001      	beq.n	8010730 <rsa_rsassa_pkcs1_v15_encode+0x54>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801072c:	4b61      	ldr	r3, [pc, #388]	; (80108b4 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 801072e:	e0bc      	b.n	80108aa <rsa_rsassa_pkcs1_v15_encode+0x1ce>

        hashlen = mbedtls_md_get_size( md_info );
 8010730:	69f8      	ldr	r0, [r7, #28]
 8010732:	f7fd fe31 	bl	800e398 <mbedtls_md_get_size>
 8010736:	4603      	mov	r3, r0
 8010738:	60bb      	str	r3, [r7, #8]

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 801073a:	69ba      	ldr	r2, [r7, #24]
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	4413      	add	r3, r2
 8010740:	3308      	adds	r3, #8
 8010742:	2b7f      	cmp	r3, #127	; 0x7f
 8010744:	d80c      	bhi.n	8010760 <rsa_rsassa_pkcs1_v15_encode+0x84>
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	f113 0f0b 	cmn.w	r3, #11
 801074c:	d808      	bhi.n	8010760 <rsa_rsassa_pkcs1_v15_encode+0x84>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 801074e:	69ba      	ldr	r2, [r7, #24]
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	4413      	add	r3, r2
 8010754:	f103 020a 	add.w	r2, r3, #10
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	330a      	adds	r3, #10
            10 + hashlen            <  hashlen      ||
 801075c:	429a      	cmp	r2, r3
 801075e:	d201      	bcs.n	8010764 <rsa_rsassa_pkcs1_v15_encode+0x88>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010760:	4b54      	ldr	r3, [pc, #336]	; (80108b4 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010762:	e0a2      	b.n	80108aa <rsa_rsassa_pkcs1_v15_encode+0x1ce>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 8010764:	69ba      	ldr	r2, [r7, #24]
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	4413      	add	r3, r2
 801076a:	330a      	adds	r3, #10
 801076c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801076e:	429a      	cmp	r2, r3
 8010770:	d201      	bcs.n	8010776 <rsa_rsassa_pkcs1_v15_encode+0x9a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010772:	4b50      	ldr	r3, [pc, #320]	; (80108b4 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010774:	e099      	b.n	80108aa <rsa_rsassa_pkcs1_v15_encode+0x1ce>
        nb_pad -= 10 + hashlen + oid_size;
 8010776:	69ba      	ldr	r2, [r7, #24]
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	4413      	add	r3, r2
 801077c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	3b0a      	subs	r3, #10
 8010782:	627b      	str	r3, [r7, #36]	; 0x24
 8010784:	e009      	b.n	801079a <rsa_rsassa_pkcs1_v15_encode+0xbe>
    }
    else
    {
        if( nb_pad < hashlen )
 8010786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	429a      	cmp	r2, r3
 801078c:	d201      	bcs.n	8010792 <rsa_rsassa_pkcs1_v15_encode+0xb6>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801078e:	4b49      	ldr	r3, [pc, #292]	; (80108b4 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 8010790:	e08b      	b.n	80108aa <rsa_rsassa_pkcs1_v15_encode+0x1ce>

        nb_pad -= hashlen;
 8010792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	1ad3      	subs	r3, r2, r3
 8010798:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 801079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079c:	2b0a      	cmp	r3, #10
 801079e:	d801      	bhi.n	80107a4 <rsa_rsassa_pkcs1_v15_encode+0xc8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80107a0:	4b44      	ldr	r3, [pc, #272]	; (80108b4 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 80107a2:	e082      	b.n	80108aa <rsa_rsassa_pkcs1_v15_encode+0x1ce>
    nb_pad -= 3;
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a6:	3b03      	subs	r3, #3
 80107a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	1c5a      	adds	r2, r3, #1
 80107ae:	623a      	str	r2, [r7, #32]
 80107b0:	2200      	movs	r2, #0
 80107b2:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_RSA_SIGN;
 80107b4:	6a3b      	ldr	r3, [r7, #32]
 80107b6:	1c5a      	adds	r2, r3, #1
 80107b8:	623a      	str	r2, [r7, #32]
 80107ba:	2201      	movs	r2, #1
 80107bc:	701a      	strb	r2, [r3, #0]
    memset( p, 0xFF, nb_pad );
 80107be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c0:	21ff      	movs	r1, #255	; 0xff
 80107c2:	6a38      	ldr	r0, [r7, #32]
 80107c4:	f00d f850 	bl	801d868 <memset>
    p += nb_pad;
 80107c8:	6a3a      	ldr	r2, [r7, #32]
 80107ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107cc:	4413      	add	r3, r2
 80107ce:	623b      	str	r3, [r7, #32]
    *p++ = 0;
 80107d0:	6a3b      	ldr	r3, [r7, #32]
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	623a      	str	r2, [r7, #32]
 80107d6:	2200      	movs	r2, #0
 80107d8:	701a      	strb	r2, [r3, #0]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
 80107da:	7bfb      	ldrb	r3, [r7, #15]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d106      	bne.n	80107ee <rsa_rsassa_pkcs1_v15_encode+0x112>
    {
        memcpy( p, hash, hashlen );
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	6879      	ldr	r1, [r7, #4]
 80107e4:	6a38      	ldr	r0, [r7, #32]
 80107e6:	f00d f817 	bl	801d818 <memcpy>
        return( 0 );
 80107ea:	2300      	movs	r3, #0
 80107ec:	e05d      	b.n	80108aa <rsa_rsassa_pkcs1_v15_encode+0x1ce>
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80107ee:	6a3b      	ldr	r3, [r7, #32]
 80107f0:	1c5a      	adds	r2, r3, #1
 80107f2:	623a      	str	r2, [r7, #32]
 80107f4:	2230      	movs	r2, #48	; 0x30
 80107f6:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	b2da      	uxtb	r2, r3
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	4413      	add	r3, r2
 8010802:	b2da      	uxtb	r2, r3
 8010804:	6a3b      	ldr	r3, [r7, #32]
 8010806:	1c59      	adds	r1, r3, #1
 8010808:	6239      	str	r1, [r7, #32]
 801080a:	3208      	adds	r2, #8
 801080c:	b2d2      	uxtb	r2, r2
 801080e:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8010810:	6a3b      	ldr	r3, [r7, #32]
 8010812:	1c5a      	adds	r2, r3, #1
 8010814:	623a      	str	r2, [r7, #32]
 8010816:	2230      	movs	r2, #48	; 0x30
 8010818:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( 0x04 + oid_size );
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	b2da      	uxtb	r2, r3
 801081e:	6a3b      	ldr	r3, [r7, #32]
 8010820:	1c59      	adds	r1, r3, #1
 8010822:	6239      	str	r1, [r7, #32]
 8010824:	3204      	adds	r2, #4
 8010826:	b2d2      	uxtb	r2, r2
 8010828:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_ASN1_OID;
 801082a:	6a3b      	ldr	r3, [r7, #32]
 801082c:	1c5a      	adds	r2, r3, #1
 801082e:	623a      	str	r2, [r7, #32]
 8010830:	2206      	movs	r2, #6
 8010832:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char) oid_size;
 8010834:	69b9      	ldr	r1, [r7, #24]
 8010836:	6a3b      	ldr	r3, [r7, #32]
 8010838:	1c5a      	adds	r2, r3, #1
 801083a:	623a      	str	r2, [r7, #32]
 801083c:	b2ca      	uxtb	r2, r1
 801083e:	701a      	strb	r2, [r3, #0]
    memcpy( p, oid, oid_size );
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	69ba      	ldr	r2, [r7, #24]
 8010844:	4619      	mov	r1, r3
 8010846:	6a38      	ldr	r0, [r7, #32]
 8010848:	f00c ffe6 	bl	801d818 <memcpy>
    p += oid_size;
 801084c:	69bb      	ldr	r3, [r7, #24]
 801084e:	6a3a      	ldr	r2, [r7, #32]
 8010850:	4413      	add	r3, r2
 8010852:	623b      	str	r3, [r7, #32]
    *p++ = MBEDTLS_ASN1_NULL;
 8010854:	6a3b      	ldr	r3, [r7, #32]
 8010856:	1c5a      	adds	r2, r3, #1
 8010858:	623a      	str	r2, [r7, #32]
 801085a:	2205      	movs	r2, #5
 801085c:	701a      	strb	r2, [r3, #0]
    *p++ = 0x00;
 801085e:	6a3b      	ldr	r3, [r7, #32]
 8010860:	1c5a      	adds	r2, r3, #1
 8010862:	623a      	str	r2, [r7, #32]
 8010864:	2200      	movs	r2, #0
 8010866:	701a      	strb	r2, [r3, #0]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8010868:	6a3b      	ldr	r3, [r7, #32]
 801086a:	1c5a      	adds	r2, r3, #1
 801086c:	623a      	str	r2, [r7, #32]
 801086e:	2204      	movs	r2, #4
 8010870:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char) hashlen;
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	1c5a      	adds	r2, r3, #1
 8010876:	623a      	str	r2, [r7, #32]
 8010878:	68ba      	ldr	r2, [r7, #8]
 801087a:	b2d2      	uxtb	r2, r2
 801087c:	701a      	strb	r2, [r3, #0]
    memcpy( p, hash, hashlen );
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	6879      	ldr	r1, [r7, #4]
 8010882:	6a38      	ldr	r0, [r7, #32]
 8010884:	f00c ffc8 	bl	801d818 <memcpy>
    p += hashlen;
 8010888:	6a3a      	ldr	r2, [r7, #32]
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	4413      	add	r3, r2
 801088e:	623b      	str	r3, [r7, #32]

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 8010890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	4413      	add	r3, r2
 8010896:	6a3a      	ldr	r2, [r7, #32]
 8010898:	429a      	cmp	r2, r3
 801089a:	d005      	beq.n	80108a8 <rsa_rsassa_pkcs1_v15_encode+0x1cc>
    {
        mbedtls_zeroize( dst, dst_len );
 801089c:	6839      	ldr	r1, [r7, #0]
 801089e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108a0:	f7fe fda8 	bl	800f3f4 <mbedtls_zeroize>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80108a4:	4b03      	ldr	r3, [pc, #12]	; (80108b4 <rsa_rsassa_pkcs1_v15_encode+0x1d8>)
 80108a6:	e000      	b.n	80108aa <rsa_rsassa_pkcs1_v15_encode+0x1ce>
    }

    return( 0 );
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3728      	adds	r7, #40	; 0x28
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop
 80108b4:	ffffbf80 	.word	0xffffbf80

080108b8 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b08a      	sub	sp, #40	; 0x28
 80108bc:	af02      	add	r7, sp, #8
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
 80108c4:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;
 80108c6:	2300      	movs	r3, #0
 80108c8:	61bb      	str	r3, [r7, #24]
 80108ca:	2300      	movs	r3, #0
 80108cc:	617b      	str	r3, [r7, #20]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d106      	bne.n	80108e2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x2a>
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d001      	beq.n	80108e2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80108de:	4b3a      	ldr	r3, [pc, #232]	; (80109c8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x110>)
 80108e0:	e06d      	b.n	80109be <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	685a      	ldr	r2, [r3, #4]
 80108e6:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 80108ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ec:	9300      	str	r3, [sp, #0]
 80108ee:	4613      	mov	r3, r2
 80108f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108f4:	f7ff fef2 	bl	80106dc <rsa_rsassa_pkcs1_v15_encode>
 80108f8:	61f8      	str	r0, [r7, #28]
 80108fa:	69fb      	ldr	r3, [r7, #28]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d001      	beq.n	8010904 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x4c>
                                             ctx->len, sig ) ) != 0 )
        return( ret );
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	e05c      	b.n	80109be <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d106      	bne.n	8010918 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 801090a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801090c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801090e:	68f8      	ldr	r0, [r7, #12]
 8010910:	f7ff f8cc 	bl	800faac <mbedtls_rsa_public>
 8010914:	4603      	mov	r3, r0
 8010916:	e052      	b.n	80109be <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = mbedtls_calloc( 1, ctx->len );
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	685b      	ldr	r3, [r3, #4]
 801091c:	4619      	mov	r1, r3
 801091e:	2001      	movs	r0, #1
 8010920:	f00c ff28 	bl	801d774 <calloc>
 8010924:	4603      	mov	r3, r0
 8010926:	61bb      	str	r3, [r7, #24]
    if( sig_try == NULL )
 8010928:	69bb      	ldr	r3, [r7, #24]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d102      	bne.n	8010934 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x7c>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 801092e:	f06f 030f 	mvn.w	r3, #15
 8010932:	e044      	b.n	80109be <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>

    verif = mbedtls_calloc( 1, ctx->len );
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	4619      	mov	r1, r3
 801093a:	2001      	movs	r0, #1
 801093c:	f00c ff1a 	bl	801d774 <calloc>
 8010940:	4603      	mov	r3, r0
 8010942:	617b      	str	r3, [r7, #20]
    if( verif == NULL )
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d105      	bne.n	8010956 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9e>
    {
        mbedtls_free( sig_try );
 801094a:	69b8      	ldr	r0, [r7, #24]
 801094c:	f00c ff4c 	bl	801d7e8 <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8010950:	f06f 030f 	mvn.w	r3, #15
 8010954:	e033      	b.n	80109be <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x106>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	9300      	str	r3, [sp, #0]
 801095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	68b9      	ldr	r1, [r7, #8]
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f7ff f9bb 	bl	800fcdc <mbedtls_rsa_private>
 8010966:	61f8      	str	r0, [r7, #28]
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d11d      	bne.n	80109aa <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	69b9      	ldr	r1, [r7, #24]
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f7ff f89a 	bl	800faac <mbedtls_rsa_public>
 8010978:	61f8      	str	r0, [r7, #28]
 801097a:	69fb      	ldr	r3, [r7, #28]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d116      	bne.n	80109ae <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf6>

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	461a      	mov	r2, r3
 8010986:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010988:	6978      	ldr	r0, [r7, #20]
 801098a:	f7fe fd4c 	bl	800f426 <mbedtls_safer_memcmp>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	d002      	beq.n	801099a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xe2>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8010994:	4b0d      	ldr	r3, [pc, #52]	; (80109cc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x114>)
 8010996:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 8010998:	e00a      	b.n	80109b0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>
    }

    memcpy( sig, sig_try, ctx->len );
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	461a      	mov	r2, r3
 80109a0:	69b9      	ldr	r1, [r7, #24]
 80109a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80109a4:	f00c ff38 	bl	801d818 <memcpy>
 80109a8:	e002      	b.n	80109b0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80109aa:	bf00      	nop
 80109ac:	e000      	b.n	80109b0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80109ae:	bf00      	nop

cleanup:
    mbedtls_free( sig_try );
 80109b0:	69b8      	ldr	r0, [r7, #24]
 80109b2:	f00c ff19 	bl	801d7e8 <free>
    mbedtls_free( verif );
 80109b6:	6978      	ldr	r0, [r7, #20]
 80109b8:	f00c ff16 	bl	801d7e8 <free>

    return( ret );
 80109bc:	69fb      	ldr	r3, [r7, #28]
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3720      	adds	r7, #32
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	ffffbf80 	.word	0xffffbf80
 80109cc:	ffffbd00 	.word	0xffffbd00

080109d0 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b088      	sub	sp, #32
 80109d4:	af04      	add	r7, sp, #16
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	607a      	str	r2, [r7, #4]
 80109dc:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d10f      	bne.n	8010a08 <mbedtls_rsa_pkcs1_sign+0x38>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 80109e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ea:	9303      	str	r3, [sp, #12]
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	9302      	str	r3, [sp, #8]
 80109f0:	69fb      	ldr	r3, [r7, #28]
 80109f2:	9301      	str	r3, [sp, #4]
 80109f4:	7e3b      	ldrb	r3, [r7, #24]
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	68b9      	ldr	r1, [r7, #8]
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f7ff ff5a 	bl	80108b8 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
 8010a04:	4603      	mov	r3, r0
 8010a06:	e000      	b.n	8010a0a <mbedtls_rsa_pkcs1_sign+0x3a>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8010a08:	4b02      	ldr	r3, [pc, #8]	; (8010a14 <mbedtls_rsa_pkcs1_sign+0x44>)
    }
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	ffffbf00 	.word	0xffffbf00

08010a18 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b08a      	sub	sp, #40	; 0x28
 8010a1c:	af02      	add	r7, sp, #8
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	607a      	str	r2, [r7, #4]
 8010a24:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	61fb      	str	r3, [r7, #28]
    const size_t sig_len = ctx->len;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	617b      	str	r3, [r7, #20]
    unsigned char *encoded = NULL, *encoded_expected = NULL;
 8010a30:	2300      	movs	r3, #0
 8010a32:	613b      	str	r3, [r7, #16]
 8010a34:	2300      	movs	r3, #0
 8010a36:	61bb      	str	r3, [r7, #24]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d106      	bne.n	8010a4c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d001      	beq.n	8010a4c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8010a48:	4b32      	ldr	r3, [pc, #200]	; (8010b14 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xfc>)
 8010a4a:	e05f      	b.n	8010b0c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xf4>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8010a4c:	6979      	ldr	r1, [r7, #20]
 8010a4e:	2001      	movs	r0, #1
 8010a50:	f00c fe90 	bl	801d774 <calloc>
 8010a54:	4603      	mov	r3, r0
 8010a56:	613b      	str	r3, [r7, #16]
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d008      	beq.n	8010a70 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
        ( encoded_expected = mbedtls_calloc( 1, sig_len ) ) == NULL )
 8010a5e:	6979      	ldr	r1, [r7, #20]
 8010a60:	2001      	movs	r0, #1
 8010a62:	f00c fe87 	bl	801d774 <calloc>
 8010a66:	4603      	mov	r3, r0
 8010a68:	61bb      	str	r3, [r7, #24]
    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d103      	bne.n	8010a78 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x60>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8010a70:	f06f 030f 	mvn.w	r3, #15
 8010a74:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 8010a76:	e034      	b.n	8010ae2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 8010a78:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8010a7c:	69bb      	ldr	r3, [r7, #24]
 8010a7e:	9300      	str	r3, [sp, #0]
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a86:	f7ff fe29 	bl	80106dc <rsa_rsassa_pkcs1_v15_encode>
 8010a8a:	61f8      	str	r0, [r7, #28]
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d122      	bne.n	8010ad8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc0>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d106      	bne.n	8010aa6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8e>
          ? mbedtls_rsa_public(  ctx, sig, encoded )
 8010a98:	693a      	ldr	r2, [r7, #16]
 8010a9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010a9c:	68f8      	ldr	r0, [r7, #12]
 8010a9e:	f7ff f805 	bl	800faac <mbedtls_rsa_public>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	e008      	b.n	8010ab8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	9300      	str	r3, [sp, #0]
 8010aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	68b9      	ldr	r1, [r7, #8]
 8010ab0:	68f8      	ldr	r0, [r7, #12]
 8010ab2:	f7ff f913 	bl	800fcdc <mbedtls_rsa_private>
 8010ab6:	4603      	mov	r3, r0
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 8010ab8:	61fb      	str	r3, [r7, #28]
    if( ret != 0 )
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d10d      	bne.n	8010adc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>

    /*
     * Compare
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
 8010ac0:	697a      	ldr	r2, [r7, #20]
 8010ac2:	69b9      	ldr	r1, [r7, #24]
 8010ac4:	6938      	ldr	r0, [r7, #16]
 8010ac6:	f7fe fcae 	bl	800f426 <mbedtls_safer_memcmp>
 8010aca:	61f8      	str	r0, [r7, #28]
 8010acc:	69fb      	ldr	r3, [r7, #28]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d006      	beq.n	8010ae0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8010ad2:	4b11      	ldr	r3, [pc, #68]	; (8010b18 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x100>)
 8010ad4:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 8010ad6:	e004      	b.n	8010ae2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
        goto cleanup;
 8010ad8:	bf00      	nop
 8010ada:	e002      	b.n	8010ae2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
        goto cleanup;
 8010adc:	bf00      	nop
 8010ade:	e000      	b.n	8010ae2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
    }

cleanup:
 8010ae0:	bf00      	nop

    if( encoded != NULL )
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d006      	beq.n	8010af6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xde>
    {
        mbedtls_zeroize( encoded, sig_len );
 8010ae8:	6979      	ldr	r1, [r7, #20]
 8010aea:	6938      	ldr	r0, [r7, #16]
 8010aec:	f7fe fc82 	bl	800f3f4 <mbedtls_zeroize>
        mbedtls_free( encoded );
 8010af0:	6938      	ldr	r0, [r7, #16]
 8010af2:	f00c fe79 	bl	801d7e8 <free>
    }

    if( encoded_expected != NULL )
 8010af6:	69bb      	ldr	r3, [r7, #24]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d006      	beq.n	8010b0a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xf2>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 8010afc:	6979      	ldr	r1, [r7, #20]
 8010afe:	69b8      	ldr	r0, [r7, #24]
 8010b00:	f7fe fc78 	bl	800f3f4 <mbedtls_zeroize>
        mbedtls_free( encoded_expected );
 8010b04:	69b8      	ldr	r0, [r7, #24]
 8010b06:	f00c fe6f 	bl	801d7e8 <free>
    }

    return( ret );
 8010b0a:	69fb      	ldr	r3, [r7, #28]
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3720      	adds	r7, #32
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	ffffbf80 	.word	0xffffbf80
 8010b18:	ffffbc80 	.word	0xffffbc80

08010b1c <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b088      	sub	sp, #32
 8010b20:	af04      	add	r7, sp, #16
 8010b22:	60f8      	str	r0, [r7, #12]
 8010b24:	60b9      	str	r1, [r7, #8]
 8010b26:	607a      	str	r2, [r7, #4]
 8010b28:	603b      	str	r3, [r7, #0]
    switch( ctx->padding )
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d10f      	bne.n	8010b54 <mbedtls_rsa_pkcs1_verify+0x38>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 8010b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b36:	9303      	str	r3, [sp, #12]
 8010b38:	6a3b      	ldr	r3, [r7, #32]
 8010b3a:	9302      	str	r3, [sp, #8]
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	9301      	str	r3, [sp, #4]
 8010b40:	7e3b      	ldrb	r3, [r7, #24]
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	68b9      	ldr	r1, [r7, #8]
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	f7ff ff64 	bl	8010a18 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
 8010b50:	4603      	mov	r3, r0
 8010b52:	e000      	b.n	8010b56 <mbedtls_rsa_pkcs1_verify+0x3a>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8010b54:	4b02      	ldr	r3, [pc, #8]	; (8010b60 <mbedtls_rsa_pkcs1_verify+0x44>)
    }
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	ffffbf00 	.word	0xffffbf00

08010b64 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	338c      	adds	r3, #140	; 0x8c
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7f5 ff3a 	bl	80069ea <mbedtls_mpi_free>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	3398      	adds	r3, #152	; 0x98
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7f5 ff35 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	3368      	adds	r3, #104	; 0x68
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7f5 ff30 	bl	80069ea <mbedtls_mpi_free>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	3320      	adds	r3, #32
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7f5 ff2b 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	3338      	adds	r3, #56	; 0x38
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7f5 ff26 	bl	80069ea <mbedtls_mpi_free>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	332c      	adds	r3, #44	; 0x2c
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7f5 ff21 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	3314      	adds	r3, #20
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7f5 ff1c 	bl	80069ea <mbedtls_mpi_free>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	3308      	adds	r3, #8
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7f5 ff17 	bl	80069ea <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	3380      	adds	r3, #128	; 0x80
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7f5 ff12 	bl	80069ea <mbedtls_mpi_free>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	3374      	adds	r3, #116	; 0x74
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7f5 ff0d 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	335c      	adds	r3, #92	; 0x5c
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7f5 ff08 	bl	80069ea <mbedtls_mpi_free>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	3350      	adds	r3, #80	; 0x50
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7f5 ff03 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	3344      	adds	r3, #68	; 0x44
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7f5 fefe 	bl	80069ea <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8010bee:	bf00      	nop
 8010bf0:	3708      	adds	r7, #8
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
	...

08010bf8 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 8010bf8:	b5b0      	push	{r4, r5, r7, lr}
 8010bfa:	b09e      	sub	sp, #120	; 0x78
 8010bfc:	af02      	add	r7, sp, #8
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
 8010c04:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 8010c0a:	4bb4      	ldr	r3, [pc, #720]	; (8010edc <mbedtls_rsa_deduce_primes+0x2e4>)
 8010c0c:	f107 0410 	add.w	r4, r7, #16
 8010c10:	461d      	mov	r5, r3
 8010c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010c22:	6020      	str	r0, [r4, #0]
 8010c24:	3404      	adds	r4, #4
 8010c26:	8021      	strh	r1, [r4, #0]
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );
 8010c28:	2336      	movs	r3, #54	; 0x36
 8010c2a:	667b      	str	r3, [r7, #100]	; 0x64

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d00c      	beq.n	8010c4c <mbedtls_rsa_deduce_primes+0x54>
 8010c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d008      	beq.n	8010c4c <mbedtls_rsa_deduce_primes+0x54>
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	689b      	ldr	r3, [r3, #8]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d104      	bne.n	8010c4c <mbedtls_rsa_deduce_primes+0x54>
 8010c42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c46:	689b      	ldr	r3, [r3, #8]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d002      	beq.n	8010c52 <mbedtls_rsa_deduce_primes+0x5a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8010c4c:	f06f 0303 	mvn.w	r3, #3
 8010c50:	e152      	b.n	8010ef8 <mbedtls_rsa_deduce_primes+0x300>

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8010c52:	2100      	movs	r1, #0
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	f7f6 fb61 	bl	800731c <mbedtls_mpi_cmp_int>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	dd1b      	ble.n	8010c98 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8010c60:	2101      	movs	r1, #1
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f7f6 fb5a 	bl	800731c <mbedtls_mpi_cmp_int>
 8010c68:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	dd14      	ble.n	8010c98 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8010c6e:	68f9      	ldr	r1, [r7, #12]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f7f6 fab8 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 8010c76:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	da0d      	bge.n	8010c98 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8010c7c:	2101      	movs	r1, #1
 8010c7e:	68b8      	ldr	r0, [r7, #8]
 8010c80:	f7f6 fb4c 	bl	800731c <mbedtls_mpi_cmp_int>
 8010c84:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	dd06      	ble.n	8010c98 <mbedtls_rsa_deduce_primes+0xa0>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8010c8a:	68f9      	ldr	r1, [r7, #12]
 8010c8c:	68b8      	ldr	r0, [r7, #8]
 8010c8e:	f7f6 faaa 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 8010c92:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	db02      	blt.n	8010c9e <mbedtls_rsa_deduce_primes+0xa6>
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8010c98:	f06f 0303 	mvn.w	r3, #3
 8010c9c:	e12c      	b.n	8010ef8 <mbedtls_rsa_deduce_primes+0x300>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 8010c9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7f5 fe8a 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 8010ca8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7f5 fe85 	bl	80069bc <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 8010cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010cb6:	68ba      	ldr	r2, [r7, #8]
 8010cb8:	6879      	ldr	r1, [r7, #4]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7f8 fa1f 	bl	80090fe <mbedtls_mpi_mul_mpi>
 8010cc0:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f040 80f7 	bne.w	8010eb8 <mbedtls_rsa_deduce_primes+0x2c0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 8010cca:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8010cce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7f6 fd70 	bl	80077ba <mbedtls_mpi_sub_int>
 8010cda:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	f040 80ec 	bne.w	8010ebc <mbedtls_rsa_deduce_primes+0x2c4>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 8010ce4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7f5 ff87 	bl	8006bfc <mbedtls_mpi_lsb>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010cf4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d103      	bne.n	8010d04 <mbedtls_rsa_deduce_primes+0x10c>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8010cfc:	f06f 0303 	mvn.w	r3, #3
 8010d00:	66fb      	str	r3, [r7, #108]	; 0x6c
        goto cleanup;
 8010d02:	e0ee      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 8010d04:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8010d08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010d0c:	4611      	mov	r1, r2
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7f6 f94c 	bl	8006fac <mbedtls_mpi_shift_r>
 8010d14:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f040 80d1 	bne.w	8010ec0 <mbedtls_rsa_deduce_primes+0x2c8>
    /*
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    if( N->p[0] % 8 == 1 )
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	689b      	ldr	r3, [r3, #8]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f003 0307 	and.w	r3, r3, #7
 8010d2e:	2b01      	cmp	r3, #1
 8010d30:	f040 80b6 	bne.w	8010ea0 <mbedtls_rsa_deduce_primes+0x2a8>
        attempt = 1;
 8010d34:	2301      	movs	r3, #1
 8010d36:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    for( ; attempt < num_primes; ++attempt )
 8010d3a:	e0b1      	b.n	8010ea0 <mbedtls_rsa_deduce_primes+0x2a8>
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 8010d3c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8010d40:	3370      	adds	r3, #112	; 0x70
 8010d42:	443b      	add	r3, r7
 8010d44:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8010d48:	461a      	mov	r2, r3
 8010d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d4e:	4611      	mov	r1, r2
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7f5 ff04 	bl	8006b5e <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8010d56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d5a:	68fa      	ldr	r2, [r7, #12]
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	6838      	ldr	r0, [r7, #0]
 8010d60:	f7f9 fb92 	bl	800a488 <mbedtls_mpi_gcd>
 8010d64:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f040 80ab 	bne.w	8010ec4 <mbedtls_rsa_deduce_primes+0x2cc>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 8010d6e:	2101      	movs	r1, #1
 8010d70:	6838      	ldr	r0, [r7, #0]
 8010d72:	f7f6 fad3 	bl	800731c <mbedtls_mpi_cmp_int>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	f040 808b 	bne.w	8010e94 <mbedtls_rsa_deduce_primes+0x29c>
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 8010d7e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010d82:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010d86:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8010d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d8e:	9300      	str	r3, [sp, #0]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f7f8 fece 	bl	8009b32 <mbedtls_mpi_exp_mod>
 8010d96:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f040 8094 	bne.w	8010ec8 <mbedtls_rsa_deduce_primes+0x2d0>
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 8010da0:	2301      	movs	r3, #1
 8010da2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8010da6:	e063      	b.n	8010e70 <mbedtls_rsa_deduce_primes+0x278>
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 8010da8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010dac:	2101      	movs	r1, #1
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7f6 fab4 	bl	800731c <mbedtls_mpi_cmp_int>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d061      	beq.n	8010e7e <mbedtls_rsa_deduce_primes+0x286>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 8010dba:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010dbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7f6 fcd4 	bl	8007772 <mbedtls_mpi_add_int>
 8010dca:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d17c      	bne.n	8010ecc <mbedtls_rsa_deduce_primes+0x2d4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8010dd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	4619      	mov	r1, r3
 8010dda:	6838      	ldr	r0, [r7, #0]
 8010ddc:	f7f9 fb54 	bl	800a488 <mbedtls_mpi_gcd>
 8010de0:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d173      	bne.n	8010ed0 <mbedtls_rsa_deduce_primes+0x2d8>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8010de8:	2101      	movs	r1, #1
 8010dea:	6838      	ldr	r0, [r7, #0]
 8010dec:	f7f6 fa96 	bl	800731c <mbedtls_mpi_cmp_int>
 8010df0:	4603      	mov	r3, r0
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d112      	bne.n	8010e1c <mbedtls_rsa_deduce_primes+0x224>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 8010df6:	68f9      	ldr	r1, [r7, #12]
 8010df8:	6838      	ldr	r0, [r7, #0]
 8010dfa:	f7f6 f9f4 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 8010dfe:	4603      	mov	r3, r0
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8010e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e04:	d10a      	bne.n	8010e1c <mbedtls_rsa_deduce_primes+0x224>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	68fa      	ldr	r2, [r7, #12]
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010e10:	f7f8 fa9e 	bl	8009350 <mbedtls_mpi_div_mpi>
 8010e14:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e18:	2b00      	cmp	r3, #0
                goto cleanup;
 8010e1a:	e062      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8010e1c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010e20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e24:	2201      	movs	r2, #1
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7f6 fcc7 	bl	80077ba <mbedtls_mpi_sub_int>
 8010e2c:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d14f      	bne.n	8010ed4 <mbedtls_rsa_deduce_primes+0x2dc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 8010e34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010e38:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7f8 f95c 	bl	80090fe <mbedtls_mpi_mul_mpi>
 8010e46:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d144      	bne.n	8010ed8 <mbedtls_rsa_deduce_primes+0x2e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 8010e4e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010e52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7f8 fd4c 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 8010e5e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d13c      	bne.n	8010ee0 <mbedtls_rsa_deduce_primes+0x2e8>
        for( iter = 1; iter <= order; ++iter )
 8010e66:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8010e70:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8010e74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d995      	bls.n	8010da8 <mbedtls_rsa_deduce_primes+0x1b0>
 8010e7c:	e000      	b.n	8010e80 <mbedtls_rsa_deduce_primes+0x288>
                break;
 8010e7e:	bf00      	nop
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 8010e80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e84:	2101      	movs	r1, #1
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7f6 fa48 	bl	800731c <mbedtls_mpi_cmp_int>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d10d      	bne.n	8010eae <mbedtls_rsa_deduce_primes+0x2b6>
 8010e92:	e000      	b.n	8010e96 <mbedtls_rsa_deduce_primes+0x29e>
            continue;
 8010e94:	bf00      	nop
    for( ; attempt < num_primes; ++attempt )
 8010e96:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8010ea0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8010ea4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	f63f af48 	bhi.w	8010d3c <mbedtls_rsa_deduce_primes+0x144>
 8010eac:	e000      	b.n	8010eb0 <mbedtls_rsa_deduce_primes+0x2b8>
        {
            break;
 8010eae:	bf00      	nop
        }
    }

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8010eb0:	f06f 0303 	mvn.w	r3, #3
 8010eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010eb6:	e014      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 8010eb8:	bf00      	nop
 8010eba:	e012      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 8010ebc:	bf00      	nop
 8010ebe:	e010      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 8010ec0:	bf00      	nop
 8010ec2:	e00e      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8010ec4:	bf00      	nop
 8010ec6:	e00c      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 8010ec8:	bf00      	nop
 8010eca:	e00a      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 8010ecc:	bf00      	nop
 8010ece:	e008      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8010ed0:	bf00      	nop
 8010ed2:	e006      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8010ed4:	bf00      	nop
 8010ed6:	e004      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 8010ed8:	bf00      	nop
 8010eda:	e002      	b.n	8010ee2 <mbedtls_rsa_deduce_primes+0x2ea>
 8010edc:	080219c8 	.word	0x080219c8
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 8010ee0:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &K );
 8010ee2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7f5 fd7f 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 8010eec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7f5 fd7a 	bl	80069ea <mbedtls_mpi_free>
    return( ret );
 8010ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3770      	adds	r7, #112	; 0x70
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bdb0      	pop	{r4, r5, r7, pc}

08010f00 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b08c      	sub	sp, #48	; 0x30
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	607a      	str	r2, [r7, #4]
 8010f0c:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d006      	beq.n	8010f26 <mbedtls_rsa_deduce_private_exponent+0x26>
 8010f18:	2100      	movs	r1, #0
 8010f1a:	6838      	ldr	r0, [r7, #0]
 8010f1c:	f7f6 f9fe 	bl	800731c <mbedtls_mpi_cmp_int>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d002      	beq.n	8010f2c <mbedtls_rsa_deduce_private_exponent+0x2c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8010f26:	f06f 0303 	mvn.w	r3, #3
 8010f2a:	e07b      	b.n	8011024 <mbedtls_rsa_deduce_private_exponent+0x124>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8010f2c:	2101      	movs	r1, #1
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f7f6 f9f4 	bl	800731c <mbedtls_mpi_cmp_int>
 8010f34:	4603      	mov	r3, r0
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	dd0d      	ble.n	8010f56 <mbedtls_rsa_deduce_private_exponent+0x56>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8010f3a:	2101      	movs	r1, #1
 8010f3c:	68b8      	ldr	r0, [r7, #8]
 8010f3e:	f7f6 f9ed 	bl	800731c <mbedtls_mpi_cmp_int>
 8010f42:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	dd06      	ble.n	8010f56 <mbedtls_rsa_deduce_private_exponent+0x56>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 8010f48:	2100      	movs	r1, #0
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7f6 f9e6 	bl	800731c <mbedtls_mpi_cmp_int>
 8010f50:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d102      	bne.n	8010f5c <mbedtls_rsa_deduce_private_exponent+0x5c>
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8010f56:	f06f 0303 	mvn.w	r3, #3
 8010f5a:	e063      	b.n	8011024 <mbedtls_rsa_deduce_private_exponent+0x124>
    }

    mbedtls_mpi_init( &K );
 8010f5c:	f107 0320 	add.w	r3, r7, #32
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7f5 fd2b 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8010f66:	f107 0314 	add.w	r3, r7, #20
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7f5 fd26 	bl	80069bc <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8010f70:	f107 0320 	add.w	r3, r7, #32
 8010f74:	2201      	movs	r2, #1
 8010f76:	68f9      	ldr	r1, [r7, #12]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7f6 fc1e 	bl	80077ba <mbedtls_mpi_sub_int>
 8010f7e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d13a      	bne.n	8010ffc <mbedtls_rsa_deduce_private_exponent+0xfc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8010f86:	f107 0314 	add.w	r3, r7, #20
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	68b9      	ldr	r1, [r7, #8]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7f6 fc13 	bl	80077ba <mbedtls_mpi_sub_int>
 8010f94:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d131      	bne.n	8011000 <mbedtls_rsa_deduce_private_exponent+0x100>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 8010f9c:	f107 0214 	add.w	r2, r7, #20
 8010fa0:	f107 0320 	add.w	r3, r7, #32
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	6838      	ldr	r0, [r7, #0]
 8010fa8:	f7f9 fa6e 	bl	800a488 <mbedtls_mpi_gcd>
 8010fac:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d127      	bne.n	8011004 <mbedtls_rsa_deduce_private_exponent+0x104>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 8010fb4:	f107 0214 	add.w	r2, r7, #20
 8010fb8:	f107 0120 	add.w	r1, r7, #32
 8010fbc:	f107 0320 	add.w	r3, r7, #32
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7f8 f89c 	bl	80090fe <mbedtls_mpi_mul_mpi>
 8010fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d11c      	bne.n	8011008 <mbedtls_rsa_deduce_private_exponent+0x108>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 8010fce:	f107 0220 	add.w	r2, r7, #32
 8010fd2:	f107 0020 	add.w	r0, r7, #32
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	2100      	movs	r1, #0
 8010fda:	f7f8 f9b9 	bl	8009350 <mbedtls_mpi_div_mpi>
 8010fde:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d112      	bne.n	801100c <mbedtls_rsa_deduce_private_exponent+0x10c>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 8010fe6:	f107 0320 	add.w	r3, r7, #32
 8010fea:	461a      	mov	r2, r3
 8010fec:	6879      	ldr	r1, [r7, #4]
 8010fee:	6838      	ldr	r0, [r7, #0]
 8010ff0:	f7f9 fb9d 	bl	800a72e <mbedtls_mpi_inv_mod>
 8010ff4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff8:	2b00      	cmp	r3, #0

cleanup:
 8010ffa:	e008      	b.n	801100e <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8010ffc:	bf00      	nop
 8010ffe:	e006      	b.n	801100e <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8011000:	bf00      	nop
 8011002:	e004      	b.n	801100e <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 8011004:	bf00      	nop
 8011006:	e002      	b.n	801100e <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 8011008:	bf00      	nop
 801100a:	e000      	b.n	801100e <mbedtls_rsa_deduce_private_exponent+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 801100c:	bf00      	nop

    mbedtls_mpi_free( &K );
 801100e:	f107 0320 	add.w	r3, r7, #32
 8011012:	4618      	mov	r0, r3
 8011014:	f7f5 fce9 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8011018:	f107 0314 	add.w	r3, r7, #20
 801101c:	4618      	mov	r0, r3
 801101e:	f7f5 fce4 	bl	80069ea <mbedtls_mpi_free>

    return( ret );
 8011022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011024:	4618      	mov	r0, r3
 8011026:	3730      	adds	r7, #48	; 0x30
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b08c      	sub	sp, #48	; 0x30
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
 8011038:	603b      	str	r3, [r7, #0]
    int ret = 0;
 801103a:	2300      	movs	r3, #0
 801103c:	62fb      	str	r3, [r7, #44]	; 0x2c

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 801103e:	f107 0320 	add.w	r3, r7, #32
 8011042:	4618      	mov	r0, r3
 8011044:	f7f5 fcba 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8011048:	f107 0314 	add.w	r3, r7, #20
 801104c:	4618      	mov	r0, r3
 801104e:	f7f5 fcb5 	bl	80069bc <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d037      	beq.n	80110c8 <mbedtls_rsa_validate_crt+0x9c>
    {
        if( P == NULL )
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d102      	bne.n	8011064 <mbedtls_rsa_validate_crt+0x38>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 801105e:	4b6c      	ldr	r3, [pc, #432]	; (8011210 <mbedtls_rsa_validate_crt+0x1e4>)
 8011060:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011062:	e0b7      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8011064:	f107 0320 	add.w	r3, r7, #32
 8011068:	2201      	movs	r2, #1
 801106a:	68f9      	ldr	r1, [r7, #12]
 801106c:	4618      	mov	r0, r3
 801106e:	f7f6 fba4 	bl	80077ba <mbedtls_mpi_sub_int>
 8011072:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011076:	2b00      	cmp	r3, #0
 8011078:	f040 8099 	bne.w	80111ae <mbedtls_rsa_validate_crt+0x182>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 801107c:	f107 0314 	add.w	r3, r7, #20
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	6839      	ldr	r1, [r7, #0]
 8011084:	4618      	mov	r0, r3
 8011086:	f7f6 fb2a 	bl	80076de <mbedtls_mpi_sub_mpi>
 801108a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108e:	2b00      	cmp	r3, #0
 8011090:	f040 808f 	bne.w	80111b2 <mbedtls_rsa_validate_crt+0x186>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8011094:	f107 0220 	add.w	r2, r7, #32
 8011098:	f107 0114 	add.w	r1, r7, #20
 801109c:	f107 0314 	add.w	r3, r7, #20
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7f8 fc28 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 80110a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	f040 8083 	bne.w	80111b6 <mbedtls_rsa_validate_crt+0x18a>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80110b0:	f107 0314 	add.w	r3, r7, #20
 80110b4:	2100      	movs	r1, #0
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7f6 f930 	bl	800731c <mbedtls_mpi_cmp_int>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d002      	beq.n	80110c8 <mbedtls_rsa_validate_crt+0x9c>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80110c2:	4b54      	ldr	r3, [pc, #336]	; (8011214 <mbedtls_rsa_validate_crt+0x1e8>)
 80110c4:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80110c6:	e085      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 80110c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d034      	beq.n	8011138 <mbedtls_rsa_validate_crt+0x10c>
    {
        if( Q == NULL )
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d102      	bne.n	80110da <mbedtls_rsa_validate_crt+0xae>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 80110d4:	4b4e      	ldr	r3, [pc, #312]	; (8011210 <mbedtls_rsa_validate_crt+0x1e4>)
 80110d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80110d8:	e07c      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 80110da:	f107 0320 	add.w	r3, r7, #32
 80110de:	2201      	movs	r2, #1
 80110e0:	68b9      	ldr	r1, [r7, #8]
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7f6 fb69 	bl	80077ba <mbedtls_mpi_sub_int>
 80110e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80110ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d164      	bne.n	80111ba <mbedtls_rsa_validate_crt+0x18e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 80110f0:	f107 0314 	add.w	r3, r7, #20
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7f6 faf0 	bl	80076de <mbedtls_mpi_sub_mpi>
 80110fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	2b00      	cmp	r3, #0
 8011104:	d15b      	bne.n	80111be <mbedtls_rsa_validate_crt+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8011106:	f107 0220 	add.w	r2, r7, #32
 801110a:	f107 0114 	add.w	r1, r7, #20
 801110e:	f107 0314 	add.w	r3, r7, #20
 8011112:	4618      	mov	r0, r3
 8011114:	f7f8 fbef 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 8011118:	62f8      	str	r0, [r7, #44]	; 0x2c
 801111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111c:	2b00      	cmp	r3, #0
 801111e:	d150      	bne.n	80111c2 <mbedtls_rsa_validate_crt+0x196>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 8011120:	f107 0314 	add.w	r3, r7, #20
 8011124:	2100      	movs	r1, #0
 8011126:	4618      	mov	r0, r3
 8011128:	f7f6 f8f8 	bl	800731c <mbedtls_mpi_cmp_int>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d002      	beq.n	8011138 <mbedtls_rsa_validate_crt+0x10c>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011132:	4b38      	ldr	r3, [pc, #224]	; (8011214 <mbedtls_rsa_validate_crt+0x1e8>)
 8011134:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011136:	e04d      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 8011138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801113a:	2b00      	cmp	r3, #0
 801113c:	d043      	beq.n	80111c6 <mbedtls_rsa_validate_crt+0x19a>
    {
        if( P == NULL || Q == NULL )
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d002      	beq.n	801114a <mbedtls_rsa_validate_crt+0x11e>
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d102      	bne.n	8011150 <mbedtls_rsa_validate_crt+0x124>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 801114a:	4b31      	ldr	r3, [pc, #196]	; (8011210 <mbedtls_rsa_validate_crt+0x1e4>)
 801114c:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 801114e:	e041      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 8011150:	f107 0320 	add.w	r3, r7, #32
 8011154:	68ba      	ldr	r2, [r7, #8]
 8011156:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011158:	4618      	mov	r0, r3
 801115a:	f7f7 ffd0 	bl	80090fe <mbedtls_mpi_mul_mpi>
 801115e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011162:	2b00      	cmp	r3, #0
 8011164:	d131      	bne.n	80111ca <mbedtls_rsa_validate_crt+0x19e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011166:	f107 0120 	add.w	r1, r7, #32
 801116a:	f107 0320 	add.w	r3, r7, #32
 801116e:	2201      	movs	r2, #1
 8011170:	4618      	mov	r0, r3
 8011172:	f7f6 fb22 	bl	80077ba <mbedtls_mpi_sub_int>
 8011176:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117a:	2b00      	cmp	r3, #0
 801117c:	d127      	bne.n	80111ce <mbedtls_rsa_validate_crt+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 801117e:	f107 0120 	add.w	r1, r7, #32
 8011182:	f107 0320 	add.w	r3, r7, #32
 8011186:	68fa      	ldr	r2, [r7, #12]
 8011188:	4618      	mov	r0, r3
 801118a:	f7f8 fbb4 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 801118e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011192:	2b00      	cmp	r3, #0
 8011194:	d11d      	bne.n	80111d2 <mbedtls_rsa_validate_crt+0x1a6>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8011196:	f107 0320 	add.w	r3, r7, #32
 801119a:	2100      	movs	r1, #0
 801119c:	4618      	mov	r0, r3
 801119e:	f7f6 f8bd 	bl	800731c <mbedtls_mpi_cmp_int>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d00e      	beq.n	80111c6 <mbedtls_rsa_validate_crt+0x19a>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80111a8:	4b1a      	ldr	r3, [pc, #104]	; (8011214 <mbedtls_rsa_validate_crt+0x1e8>)
 80111aa:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80111ac:	e012      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80111ae:	bf00      	nop
 80111b0:	e010      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 80111b2:	bf00      	nop
 80111b4:	e00e      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80111b6:	bf00      	nop
 80111b8:	e00c      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 80111ba:	bf00      	nop
 80111bc:	e00a      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 80111be:	bf00      	nop
 80111c0:	e008      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80111c2:	bf00      	nop
 80111c4:	e006      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        }
    }

cleanup:
 80111c6:	bf00      	nop
 80111c8:	e004      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 80111ca:	bf00      	nop
 80111cc:	e002      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80111ce:	bf00      	nop
 80111d0:	e000      	b.n	80111d4 <mbedtls_rsa_validate_crt+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 80111d2:	bf00      	nop

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 80111d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00b      	beq.n	80111f2 <mbedtls_rsa_validate_crt+0x1c6>
 80111da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111dc:	f513 4f84 	cmn.w	r3, #16896	; 0x4200
 80111e0:	d007      	beq.n	80111f2 <mbedtls_rsa_validate_crt+0x1c6>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 80111e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e4:	f513 4f81 	cmn.w	r3, #16512	; 0x4080
 80111e8:	d003      	beq.n	80111f2 <mbedtls_rsa_validate_crt+0x1c6>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ec:	f5a3 4384 	sub.w	r3, r3, #16896	; 0x4200
 80111f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    mbedtls_mpi_free( &K );
 80111f2:	f107 0320 	add.w	r3, r7, #32
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7f5 fbf7 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80111fc:	f107 0314 	add.w	r3, r7, #20
 8011200:	4618      	mov	r0, r3
 8011202:	f7f5 fbf2 	bl	80069ea <mbedtls_mpi_free>

    return( ret );
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011208:	4618      	mov	r0, r3
 801120a:	3730      	adds	r7, #48	; 0x30
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	ffffbf80 	.word	0xffffbf80
 8011214:	ffffbe00 	.word	0xffffbe00

08011218 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b08c      	sub	sp, #48	; 0x30
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]
 8011224:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8011226:	2300      	movs	r3, #0
 8011228:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 801122a:	f107 0320 	add.w	r3, r7, #32
 801122e:	4618      	mov	r0, r3
 8011230:	f7f5 fbc4 	bl	80069bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8011234:	f107 0314 	add.w	r3, r7, #20
 8011238:	4618      	mov	r0, r3
 801123a:	f7f5 fbbf 	bl	80069bc <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d024      	beq.n	801128e <mbedtls_rsa_validate_params+0x76>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d021      	beq.n	801128e <mbedtls_rsa_validate_params+0x76>
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d01e      	beq.n	801128e <mbedtls_rsa_validate_params+0x76>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 8011250:	f107 0320 	add.w	r3, r7, #32
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	68b9      	ldr	r1, [r7, #8]
 8011258:	4618      	mov	r0, r3
 801125a:	f7f7 ff50 	bl	80090fe <mbedtls_mpi_mul_mpi>
 801125e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011262:	2b00      	cmp	r3, #0
 8011264:	f040 80d2 	bne.w	801140c <mbedtls_rsa_validate_params+0x1f4>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8011268:	2101      	movs	r1, #1
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f7f6 f856 	bl	800731c <mbedtls_mpi_cmp_int>
 8011270:	4603      	mov	r3, r0
 8011272:	2b00      	cmp	r3, #0
 8011274:	dd08      	ble.n	8011288 <mbedtls_rsa_validate_params+0x70>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 8011276:	f107 0320 	add.w	r3, r7, #32
 801127a:	68f9      	ldr	r1, [r7, #12]
 801127c:	4618      	mov	r0, r3
 801127e:	f7f5 ffb2 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 8011282:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8011284:	2b00      	cmp	r3, #0
 8011286:	d002      	beq.n	801128e <mbedtls_rsa_validate_params+0x76>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011288:	4b77      	ldr	r3, [pc, #476]	; (8011468 <mbedtls_rsa_validate_params+0x250>)
 801128a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 801128c:	e0d1      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d024      	beq.n	80112de <mbedtls_rsa_validate_params+0xc6>
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d021      	beq.n	80112de <mbedtls_rsa_validate_params+0xc6>
 801129a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129c:	2b00      	cmp	r3, #0
 801129e:	d01e      	beq.n	80112de <mbedtls_rsa_validate_params+0xc6>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80112a0:	2101      	movs	r1, #1
 80112a2:	6838      	ldr	r0, [r7, #0]
 80112a4:	f7f6 f83a 	bl	800731c <mbedtls_mpi_cmp_int>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	dd14      	ble.n	80112d8 <mbedtls_rsa_validate_params+0xc0>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80112ae:	2101      	movs	r1, #1
 80112b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112b2:	f7f6 f833 	bl	800731c <mbedtls_mpi_cmp_int>
 80112b6:	4603      	mov	r3, r0
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	dd0d      	ble.n	80112d8 <mbedtls_rsa_validate_params+0xc0>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80112bc:	68f9      	ldr	r1, [r7, #12]
 80112be:	6838      	ldr	r0, [r7, #0]
 80112c0:	f7f5 ff91 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 80112c4:	4603      	mov	r3, r0
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	da06      	bge.n	80112d8 <mbedtls_rsa_validate_params+0xc0>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80112ca:	68f9      	ldr	r1, [r7, #12]
 80112cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112ce:	f7f5 ff8a 	bl	80071e6 <mbedtls_mpi_cmp_mpi>
 80112d2:	4603      	mov	r3, r0
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	db02      	blt.n	80112de <mbedtls_rsa_validate_params+0xc6>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80112d8:	4b63      	ldr	r3, [pc, #396]	; (8011468 <mbedtls_rsa_validate_params+0x250>)
 80112da:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80112dc:	e0a9      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	f000 8095 	beq.w	8011410 <mbedtls_rsa_validate_params+0x1f8>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	f000 8091 	beq.w	8011410 <mbedtls_rsa_validate_params+0x1f8>
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	f000 808d 	beq.w	8011410 <mbedtls_rsa_validate_params+0x1f8>
 80112f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f000 8089 	beq.w	8011410 <mbedtls_rsa_validate_params+0x1f8>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80112fe:	2101      	movs	r1, #1
 8011300:	68b8      	ldr	r0, [r7, #8]
 8011302:	f7f6 f80b 	bl	800731c <mbedtls_mpi_cmp_int>
 8011306:	4603      	mov	r3, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	dd06      	ble.n	801131a <mbedtls_rsa_validate_params+0x102>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 801130c:	2101      	movs	r1, #1
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f7f6 f804 	bl	800731c <mbedtls_mpi_cmp_int>
 8011314:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8011316:	2b00      	cmp	r3, #0
 8011318:	dc02      	bgt.n	8011320 <mbedtls_rsa_validate_params+0x108>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801131a:	4b53      	ldr	r3, [pc, #332]	; (8011468 <mbedtls_rsa_validate_params+0x250>)
 801131c:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 801131e:	e088      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8011320:	f107 0320 	add.w	r3, r7, #32
 8011324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011326:	6839      	ldr	r1, [r7, #0]
 8011328:	4618      	mov	r0, r3
 801132a:	f7f7 fee8 	bl	80090fe <mbedtls_mpi_mul_mpi>
 801132e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011332:	2b00      	cmp	r3, #0
 8011334:	d16e      	bne.n	8011414 <mbedtls_rsa_validate_params+0x1fc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011336:	f107 0120 	add.w	r1, r7, #32
 801133a:	f107 0320 	add.w	r3, r7, #32
 801133e:	2201      	movs	r2, #1
 8011340:	4618      	mov	r0, r3
 8011342:	f7f6 fa3a 	bl	80077ba <mbedtls_mpi_sub_int>
 8011346:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134a:	2b00      	cmp	r3, #0
 801134c:	d164      	bne.n	8011418 <mbedtls_rsa_validate_params+0x200>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 801134e:	f107 0314 	add.w	r3, r7, #20
 8011352:	2201      	movs	r2, #1
 8011354:	68b9      	ldr	r1, [r7, #8]
 8011356:	4618      	mov	r0, r3
 8011358:	f7f6 fa2f 	bl	80077ba <mbedtls_mpi_sub_int>
 801135c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011360:	2b00      	cmp	r3, #0
 8011362:	d15b      	bne.n	801141c <mbedtls_rsa_validate_params+0x204>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8011364:	f107 0214 	add.w	r2, r7, #20
 8011368:	f107 0120 	add.w	r1, r7, #32
 801136c:	f107 0320 	add.w	r3, r7, #32
 8011370:	4618      	mov	r0, r3
 8011372:	f7f8 fac0 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 8011376:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137a:	2b00      	cmp	r3, #0
 801137c:	d150      	bne.n	8011420 <mbedtls_rsa_validate_params+0x208>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 801137e:	f107 0320 	add.w	r3, r7, #32
 8011382:	2100      	movs	r1, #0
 8011384:	4618      	mov	r0, r3
 8011386:	f7f5 ffc9 	bl	800731c <mbedtls_mpi_cmp_int>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d002      	beq.n	8011396 <mbedtls_rsa_validate_params+0x17e>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011390:	4b35      	ldr	r3, [pc, #212]	; (8011468 <mbedtls_rsa_validate_params+0x250>)
 8011392:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011394:	e04d      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8011396:	f107 0320 	add.w	r3, r7, #32
 801139a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801139c:	6839      	ldr	r1, [r7, #0]
 801139e:	4618      	mov	r0, r3
 80113a0:	f7f7 fead 	bl	80090fe <mbedtls_mpi_mul_mpi>
 80113a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80113a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d13b      	bne.n	8011424 <mbedtls_rsa_validate_params+0x20c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80113ac:	f107 0120 	add.w	r1, r7, #32
 80113b0:	f107 0320 	add.w	r3, r7, #32
 80113b4:	2201      	movs	r2, #1
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7f6 f9ff 	bl	80077ba <mbedtls_mpi_sub_int>
 80113bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80113be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d131      	bne.n	8011428 <mbedtls_rsa_validate_params+0x210>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80113c4:	f107 0314 	add.w	r3, r7, #20
 80113c8:	2201      	movs	r2, #1
 80113ca:	6879      	ldr	r1, [r7, #4]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7f6 f9f4 	bl	80077ba <mbedtls_mpi_sub_int>
 80113d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80113d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d128      	bne.n	801142c <mbedtls_rsa_validate_params+0x214>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80113da:	f107 0214 	add.w	r2, r7, #20
 80113de:	f107 0120 	add.w	r1, r7, #32
 80113e2:	f107 0320 	add.w	r3, r7, #32
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7f8 fa85 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 80113ec:	62f8      	str	r0, [r7, #44]	; 0x2c
 80113ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d11d      	bne.n	8011430 <mbedtls_rsa_validate_params+0x218>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80113f4:	f107 0320 	add.w	r3, r7, #32
 80113f8:	2100      	movs	r1, #0
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7f5 ff8e 	bl	800731c <mbedtls_mpi_cmp_int>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	d004      	beq.n	8011410 <mbedtls_rsa_validate_params+0x1f8>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011406:	4b18      	ldr	r3, [pc, #96]	; (8011468 <mbedtls_rsa_validate_params+0x250>)
 8011408:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 801140a:	e012      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 801140c:	bf00      	nop
 801140e:	e010      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        }
    }

cleanup:
 8011410:	bf00      	nop
 8011412:	e00e      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8011414:	bf00      	nop
 8011416:	e00c      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011418:	bf00      	nop
 801141a:	e00a      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 801141c:	bf00      	nop
 801141e:	e008      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8011420:	bf00      	nop
 8011422:	e006      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8011424:	bf00      	nop
 8011426:	e004      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8011428:	bf00      	nop
 801142a:	e002      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 801142c:	bf00      	nop
 801142e:	e000      	b.n	8011432 <mbedtls_rsa_validate_params+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8011430:	bf00      	nop

    mbedtls_mpi_free( &K );
 8011432:	f107 0320 	add.w	r3, r7, #32
 8011436:	4618      	mov	r0, r3
 8011438:	f7f5 fad7 	bl	80069ea <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 801143c:	f107 0314 	add.w	r3, r7, #20
 8011440:	4618      	mov	r0, r3
 8011442:	f7f5 fad2 	bl	80069ea <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 8011446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011448:	2b00      	cmp	r3, #0
 801144a:	d007      	beq.n	801145c <mbedtls_rsa_validate_params+0x244>
 801144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144e:	f513 4f84 	cmn.w	r3, #16896	; 0x4200
 8011452:	d003      	beq.n	801145c <mbedtls_rsa_validate_params+0x244>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8011454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011456:	f5a3 4384 	sub.w	r3, r3, #16896	; 0x4200
 801145a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return( ret );
 801145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801145e:	4618      	mov	r0, r3
 8011460:	3730      	adds	r7, #48	; 0x30
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	ffffbe00 	.word	0xffffbe00

0801146c <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b088      	sub	sp, #32
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	607a      	str	r2, [r7, #4]
 8011478:	603b      	str	r3, [r7, #0]
    int ret = 0;
 801147a:	2300      	movs	r3, #0
 801147c:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 801147e:	f107 0310 	add.w	r3, r7, #16
 8011482:	4618      	mov	r0, r3
 8011484:	f7f5 fa9a 	bl	80069bc <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d015      	beq.n	80114ba <mbedtls_rsa_deduce_crt+0x4e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 801148e:	f107 0310 	add.w	r3, r7, #16
 8011492:	2201      	movs	r2, #1
 8011494:	68f9      	ldr	r1, [r7, #12]
 8011496:	4618      	mov	r0, r3
 8011498:	f7f6 f98f 	bl	80077ba <mbedtls_mpi_sub_int>
 801149c:	61f8      	str	r0, [r7, #28]
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d12f      	bne.n	8011504 <mbedtls_rsa_deduce_crt+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 80114a4:	f107 0310 	add.w	r3, r7, #16
 80114a8:	461a      	mov	r2, r3
 80114aa:	6879      	ldr	r1, [r7, #4]
 80114ac:	6838      	ldr	r0, [r7, #0]
 80114ae:	f7f8 fa22 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 80114b2:	61f8      	str	r0, [r7, #28]
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d126      	bne.n	8011508 <mbedtls_rsa_deduce_crt+0x9c>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 80114ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d015      	beq.n	80114ec <mbedtls_rsa_deduce_crt+0x80>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 80114c0:	f107 0310 	add.w	r3, r7, #16
 80114c4:	2201      	movs	r2, #1
 80114c6:	68b9      	ldr	r1, [r7, #8]
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7f6 f976 	bl	80077ba <mbedtls_mpi_sub_int>
 80114ce:	61f8      	str	r0, [r7, #28]
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d11a      	bne.n	801150c <mbedtls_rsa_deduce_crt+0xa0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 80114d6:	f107 0310 	add.w	r3, r7, #16
 80114da:	461a      	mov	r2, r3
 80114dc:	6879      	ldr	r1, [r7, #4]
 80114de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114e0:	f7f8 fa09 	bl	80098f6 <mbedtls_mpi_mod_mpi>
 80114e4:	61f8      	str	r0, [r7, #28]
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d111      	bne.n	8011510 <mbedtls_rsa_deduce_crt+0xa4>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 80114ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d010      	beq.n	8011514 <mbedtls_rsa_deduce_crt+0xa8>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 80114f2:	68fa      	ldr	r2, [r7, #12]
 80114f4:	68b9      	ldr	r1, [r7, #8]
 80114f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114f8:	f7f9 f919 	bl	800a72e <mbedtls_mpi_inv_mod>
 80114fc:	61f8      	str	r0, [r7, #28]
 80114fe:	69fb      	ldr	r3, [r7, #28]
 8011500:	2b00      	cmp	r3, #0
    }

cleanup:
 8011502:	e007      	b.n	8011514 <mbedtls_rsa_deduce_crt+0xa8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 8011504:	bf00      	nop
 8011506:	e006      	b.n	8011516 <mbedtls_rsa_deduce_crt+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 8011508:	bf00      	nop
 801150a:	e004      	b.n	8011516 <mbedtls_rsa_deduce_crt+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 801150c:	bf00      	nop
 801150e:	e002      	b.n	8011516 <mbedtls_rsa_deduce_crt+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 8011510:	bf00      	nop
 8011512:	e000      	b.n	8011516 <mbedtls_rsa_deduce_crt+0xaa>
cleanup:
 8011514:	bf00      	nop
    mbedtls_mpi_free( &K );
 8011516:	f107 0310 	add.w	r3, r7, #16
 801151a:	4618      	mov	r0, r3
 801151c:	f7f5 fa65 	bl	80069ea <mbedtls_mpi_free>

    return( ret );
 8011520:	69fb      	ldr	r3, [r7, #28]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3720      	adds	r7, #32
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 801152a:	b480      	push	{r7}
 801152c:	b085      	sub	sp, #20
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
 8011532:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	60fb      	str	r3, [r7, #12]
 8011538:	e004      	b.n	8011544 <mbedtls_zeroize+0x1a>
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	1c5a      	adds	r2, r3, #1
 801153e:	60fa      	str	r2, [r7, #12]
 8011540:	2200      	movs	r2, #0
 8011542:	701a      	strb	r2, [r3, #0]
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	1e5a      	subs	r2, r3, #1
 8011548:	603a      	str	r2, [r7, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d1f5      	bne.n	801153a <mbedtls_zeroize+0x10>
}
 801154e:	bf00      	nop
 8011550:	bf00      	nop
 8011552:	3714      	adds	r7, #20
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8011564:	226c      	movs	r2, #108	; 0x6c
 8011566:	2100      	movs	r1, #0
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f00c f97d 	bl	801d868 <memset>
}
 801156e:	bf00      	nop
 8011570:	3708      	adds	r7, #8
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8011576:	b580      	push	{r7, lr}
 8011578:	b082      	sub	sp, #8
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d004      	beq.n	801158e <mbedtls_sha256_free+0x18>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8011584:	216c      	movs	r1, #108	; 0x6c
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f7ff ffcf 	bl	801152a <mbedtls_zeroize>
 801158c:	e000      	b.n	8011590 <mbedtls_sha256_free+0x1a>
        return;
 801158e:	bf00      	nop
}
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b082      	sub	sp, #8
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	6039      	str	r1, [r7, #0]
    *dst = *src;
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	4610      	mov	r0, r2
 80115a6:	4619      	mov	r1, r3
 80115a8:	236c      	movs	r3, #108	; 0x6c
 80115aa:	461a      	mov	r2, r3
 80115ac:	f00c f934 	bl	801d818 <memcpy>
}
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 80115b8:	b480      	push	{r7}
 80115ba:	b083      	sub	sp, #12
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
    ctx->total[0] = 0;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2200      	movs	r2, #0
 80115c6:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2200      	movs	r2, #0
 80115cc:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d118      	bne.n	8011606 <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	4a1d      	ldr	r2, [pc, #116]	; (801164c <mbedtls_sha256_starts_ret+0x94>)
 80115d8:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4a1c      	ldr	r2, [pc, #112]	; (8011650 <mbedtls_sha256_starts_ret+0x98>)
 80115de:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	4a1c      	ldr	r2, [pc, #112]	; (8011654 <mbedtls_sha256_starts_ret+0x9c>)
 80115e4:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4a1b      	ldr	r2, [pc, #108]	; (8011658 <mbedtls_sha256_starts_ret+0xa0>)
 80115ea:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4a1b      	ldr	r2, [pc, #108]	; (801165c <mbedtls_sha256_starts_ret+0xa4>)
 80115f0:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	4a1a      	ldr	r2, [pc, #104]	; (8011660 <mbedtls_sha256_starts_ret+0xa8>)
 80115f6:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	4a1a      	ldr	r2, [pc, #104]	; (8011664 <mbedtls_sha256_starts_ret+0xac>)
 80115fc:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4a19      	ldr	r2, [pc, #100]	; (8011668 <mbedtls_sha256_starts_ret+0xb0>)
 8011602:	625a      	str	r2, [r3, #36]	; 0x24
 8011604:	e017      	b.n	8011636 <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4a18      	ldr	r2, [pc, #96]	; (801166c <mbedtls_sha256_starts_ret+0xb4>)
 801160a:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	4a18      	ldr	r2, [pc, #96]	; (8011670 <mbedtls_sha256_starts_ret+0xb8>)
 8011610:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	4a17      	ldr	r2, [pc, #92]	; (8011674 <mbedtls_sha256_starts_ret+0xbc>)
 8011616:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	4a17      	ldr	r2, [pc, #92]	; (8011678 <mbedtls_sha256_starts_ret+0xc0>)
 801161c:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	4a16      	ldr	r2, [pc, #88]	; (801167c <mbedtls_sha256_starts_ret+0xc4>)
 8011622:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4a16      	ldr	r2, [pc, #88]	; (8011680 <mbedtls_sha256_starts_ret+0xc8>)
 8011628:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	4a15      	ldr	r2, [pc, #84]	; (8011684 <mbedtls_sha256_starts_ret+0xcc>)
 801162e:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	4a15      	ldr	r2, [pc, #84]	; (8011688 <mbedtls_sha256_starts_ret+0xd0>)
 8011634:	625a      	str	r2, [r3, #36]	; 0x24
    }

    ctx->is224 = is224;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	683a      	ldr	r2, [r7, #0]
 801163a:	669a      	str	r2, [r3, #104]	; 0x68

    return( 0 );
 801163c:	2300      	movs	r3, #0
}
 801163e:	4618      	mov	r0, r3
 8011640:	370c      	adds	r7, #12
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	6a09e667 	.word	0x6a09e667
 8011650:	bb67ae85 	.word	0xbb67ae85
 8011654:	3c6ef372 	.word	0x3c6ef372
 8011658:	a54ff53a 	.word	0xa54ff53a
 801165c:	510e527f 	.word	0x510e527f
 8011660:	9b05688c 	.word	0x9b05688c
 8011664:	1f83d9ab 	.word	0x1f83d9ab
 8011668:	5be0cd19 	.word	0x5be0cd19
 801166c:	c1059ed8 	.word	0xc1059ed8
 8011670:	367cd507 	.word	0x367cd507
 8011674:	3070dd17 	.word	0x3070dd17
 8011678:	f70e5939 	.word	0xf70e5939
 801167c:	ffc00b31 	.word	0xffc00b31
 8011680:	68581511 	.word	0x68581511
 8011684:	64f98fa7 	.word	0x64f98fa7
 8011688:	befa4fa4 	.word	0xbefa4fa4

0801168c <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 801168c:	b490      	push	{r4, r7}
 801168e:	b0ce      	sub	sp, #312	; 0x138
 8011690:	af00      	add	r7, sp, #0
 8011692:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011696:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801169a:	6018      	str	r0, [r3, #0]
 801169c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80116a0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80116a4:	6019      	str	r1, [r3, #0]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80116a6:	2300      	movs	r3, #0
 80116a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80116ac:	e016      	b.n	80116dc <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 80116ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80116b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80116bc:	3202      	adds	r2, #2
 80116be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80116c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80116c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116ca:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80116ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 80116d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116d6:	3301      	adds	r3, #1
 80116d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80116dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116e0:	2b07      	cmp	r3, #7
 80116e2:	d9e4      	bls.n	80116ae <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80116e4:	2300      	movs	r3, #0
 80116e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80116ea:	e03e      	b.n	801176a <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 80116ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80116f6:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80116fa:	6812      	ldr	r2, [r2, #0]
 80116fc:	4413      	add	r3, r2
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	061a      	lsls	r2, r3, #24
 8011702:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011706:	009b      	lsls	r3, r3, #2
 8011708:	3301      	adds	r3, #1
 801170a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 801170e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8011712:	6809      	ldr	r1, [r1, #0]
 8011714:	440b      	add	r3, r1
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	041b      	lsls	r3, r3, #16
 801171a:	431a      	orrs	r2, r3
 801171c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	3302      	adds	r3, #2
 8011724:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8011728:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 801172c:	6809      	ldr	r1, [r1, #0]
 801172e:	440b      	add	r3, r1
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	021b      	lsls	r3, r3, #8
 8011734:	4313      	orrs	r3, r2
 8011736:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801173a:	0092      	lsls	r2, r2, #2
 801173c:	3203      	adds	r2, #3
 801173e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8011742:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8011746:	6809      	ldr	r1, [r1, #0]
 8011748:	440a      	add	r2, r1
 801174a:	7812      	ldrb	r2, [r2, #0]
 801174c:	ea43 0102 	orr.w	r1, r3, r2
 8011750:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011754:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011758:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8011760:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011764:	3301      	adds	r3, #1
 8011766:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801176a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801176e:	2b0f      	cmp	r3, #15
 8011770:	d9bc      	bls.n	80116ec <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 8011772:	2300      	movs	r3, #0
 8011774:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011778:	f000 bcba 	b.w	80120f0 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 801177c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011784:	69da      	ldr	r2, [r3, #28]
 8011786:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801178a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801178e:	691b      	ldr	r3, [r3, #16]
 8011790:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011794:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801179c:	691b      	ldr	r3, [r3, #16]
 801179e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80117a2:	4059      	eors	r1, r3
 80117a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80117a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117ac:	691b      	ldr	r3, [r3, #16]
 80117ae:	ea4f 6373 	mov.w	r3, r3, ror #25
 80117b2:	404b      	eors	r3, r1
 80117b4:	441a      	add	r2, r3
 80117b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80117ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117be:	6999      	ldr	r1, [r3, #24]
 80117c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80117c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117c8:	6918      	ldr	r0, [r3, #16]
 80117ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80117ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117d2:	695c      	ldr	r4, [r3, #20]
 80117d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80117d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117dc:	699b      	ldr	r3, [r3, #24]
 80117de:	4063      	eors	r3, r4
 80117e0:	4003      	ands	r3, r0
 80117e2:	404b      	eors	r3, r1
 80117e4:	441a      	add	r2, r3
 80117e6:	49e0      	ldr	r1, [pc, #896]	; (8011b68 <mbedtls_internal_sha256_process+0x4dc>)
 80117e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80117f0:	441a      	add	r2, r3
 80117f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80117f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80117fa:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80117fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011802:	4413      	add	r3, r2
 8011804:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011808:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801180c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011816:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801181a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011824:	405a      	eors	r2, r3
 8011826:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801182a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011834:	405a      	eors	r2, r3
 8011836:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801183a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801183e:	6819      	ldr	r1, [r3, #0]
 8011840:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	4019      	ands	r1, r3
 801184c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011854:	6898      	ldr	r0, [r3, #8]
 8011856:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801185a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801185e:	681c      	ldr	r4, [r3, #0]
 8011860:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011864:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	4323      	orrs	r3, r4
 801186c:	4003      	ands	r3, r0
 801186e:	430b      	orrs	r3, r1
 8011870:	4413      	add	r3, r2
 8011872:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011876:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801187a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801187e:	68da      	ldr	r2, [r3, #12]
 8011880:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011884:	441a      	add	r2, r3
 8011886:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801188a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801188e:	60da      	str	r2, [r3, #12]
 8011890:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011898:	441a      	add	r2, r3
 801189a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801189e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80118a2:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80118a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80118a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80118ac:	699a      	ldr	r2, [r3, #24]
 80118ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80118b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80118bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80118c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80118c4:	68db      	ldr	r3, [r3, #12]
 80118c6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80118ca:	4059      	eors	r1, r3
 80118cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80118d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80118da:	404b      	eors	r3, r1
 80118dc:	441a      	add	r2, r3
 80118de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80118e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80118e6:	6959      	ldr	r1, [r3, #20]
 80118e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80118ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80118f0:	68d8      	ldr	r0, [r3, #12]
 80118f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80118f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80118fa:	691c      	ldr	r4, [r3, #16]
 80118fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011900:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011904:	695b      	ldr	r3, [r3, #20]
 8011906:	4063      	eors	r3, r4
 8011908:	4003      	ands	r3, r0
 801190a:	404b      	eors	r3, r1
 801190c:	441a      	add	r2, r3
 801190e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011912:	3301      	adds	r3, #1
 8011914:	4994      	ldr	r1, [pc, #592]	; (8011b68 <mbedtls_internal_sha256_process+0x4dc>)
 8011916:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801191a:	441a      	add	r2, r3
 801191c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011920:	1c59      	adds	r1, r3, #1
 8011922:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011926:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801192a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801192e:	4413      	add	r3, r2
 8011930:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011934:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801193c:	69db      	ldr	r3, [r3, #28]
 801193e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011942:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801194a:	69db      	ldr	r3, [r3, #28]
 801194c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011950:	405a      	eors	r2, r3
 8011952:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011956:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801195a:	69db      	ldr	r3, [r3, #28]
 801195c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011960:	405a      	eors	r2, r3
 8011962:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801196a:	69d9      	ldr	r1, [r3, #28]
 801196c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	4019      	ands	r1, r3
 8011978:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801197c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011980:	6858      	ldr	r0, [r3, #4]
 8011982:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801198a:	69dc      	ldr	r4, [r3, #28]
 801198c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	4323      	orrs	r3, r4
 8011998:	4003      	ands	r3, r0
 801199a:	430b      	orrs	r3, r1
 801199c:	4413      	add	r3, r2
 801199e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80119a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119aa:	689a      	ldr	r2, [r3, #8]
 80119ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80119b0:	441a      	add	r2, r3
 80119b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119ba:	609a      	str	r2, [r3, #8]
 80119bc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80119c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80119c4:	441a      	add	r2, r3
 80119c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119ce:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80119d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119d8:	695a      	ldr	r2, [r3, #20]
 80119da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119e2:	689b      	ldr	r3, [r3, #8]
 80119e4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80119e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80119f0:	689b      	ldr	r3, [r3, #8]
 80119f2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80119f6:	4059      	eors	r1, r3
 80119f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80119fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a00:	689b      	ldr	r3, [r3, #8]
 8011a02:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011a06:	404b      	eors	r3, r1
 8011a08:	441a      	add	r2, r3
 8011a0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a12:	6919      	ldr	r1, [r3, #16]
 8011a14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a1c:	6898      	ldr	r0, [r3, #8]
 8011a1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a26:	68dc      	ldr	r4, [r3, #12]
 8011a28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a30:	691b      	ldr	r3, [r3, #16]
 8011a32:	4063      	eors	r3, r4
 8011a34:	4003      	ands	r3, r0
 8011a36:	404b      	eors	r3, r1
 8011a38:	441a      	add	r2, r3
 8011a3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011a3e:	3302      	adds	r3, #2
 8011a40:	4949      	ldr	r1, [pc, #292]	; (8011b68 <mbedtls_internal_sha256_process+0x4dc>)
 8011a42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011a46:	441a      	add	r2, r3
 8011a48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011a4c:	1c99      	adds	r1, r3, #2
 8011a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011a60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a68:	699b      	ldr	r3, [r3, #24]
 8011a6a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011a6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a76:	699b      	ldr	r3, [r3, #24]
 8011a78:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011a7c:	405a      	eors	r2, r3
 8011a7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a86:	699b      	ldr	r3, [r3, #24]
 8011a88:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011a8c:	405a      	eors	r2, r3
 8011a8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a96:	6999      	ldr	r1, [r3, #24]
 8011a98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011a9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011aa0:	69db      	ldr	r3, [r3, #28]
 8011aa2:	4019      	ands	r1, r3
 8011aa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011aa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011aac:	6818      	ldr	r0, [r3, #0]
 8011aae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ab2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ab6:	699c      	ldr	r4, [r3, #24]
 8011ab8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ac0:	69db      	ldr	r3, [r3, #28]
 8011ac2:	4323      	orrs	r3, r4
 8011ac4:	4003      	ands	r3, r0
 8011ac6:	430b      	orrs	r3, r1
 8011ac8:	4413      	add	r3, r2
 8011aca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011ace:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ad6:	685a      	ldr	r2, [r3, #4]
 8011ad8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011adc:	441a      	add	r2, r3
 8011ade:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ae6:	605a      	str	r2, [r3, #4]
 8011ae8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011af0:	441a      	add	r2, r3
 8011af2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011afa:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8011afc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b04:	691a      	ldr	r2, [r3, #16]
 8011b06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011b14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011b22:	4059      	eors	r1, r3
 8011b24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011b32:	404b      	eors	r3, r1
 8011b34:	441a      	add	r2, r3
 8011b36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b3e:	68d9      	ldr	r1, [r3, #12]
 8011b40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b48:	6858      	ldr	r0, [r3, #4]
 8011b4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b52:	689c      	ldr	r4, [r3, #8]
 8011b54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	4063      	eors	r3, r4
 8011b60:	4003      	ands	r3, r0
 8011b62:	404b      	eors	r3, r1
 8011b64:	441a      	add	r2, r3
 8011b66:	e001      	b.n	8011b6c <mbedtls_internal_sha256_process+0x4e0>
 8011b68:	0802473c 	.word	0x0802473c
 8011b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b70:	3303      	adds	r3, #3
 8011b72:	49e0      	ldr	r1, [pc, #896]	; (8011ef4 <mbedtls_internal_sha256_process+0x868>)
 8011b74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011b78:	441a      	add	r2, r3
 8011b7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b7e:	1cd9      	adds	r1, r3, #3
 8011b80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b8c:	4413      	add	r3, r2
 8011b8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011b92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b9a:	695b      	ldr	r3, [r3, #20]
 8011b9c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011ba0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ba8:	695b      	ldr	r3, [r3, #20]
 8011baa:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011bae:	405a      	eors	r2, r3
 8011bb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bb8:	695b      	ldr	r3, [r3, #20]
 8011bba:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011bbe:	405a      	eors	r2, r3
 8011bc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bc8:	6959      	ldr	r1, [r3, #20]
 8011bca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bd2:	699b      	ldr	r3, [r3, #24]
 8011bd4:	4019      	ands	r1, r3
 8011bd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bde:	69d8      	ldr	r0, [r3, #28]
 8011be0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011be8:	695c      	ldr	r4, [r3, #20]
 8011bea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bf2:	699b      	ldr	r3, [r3, #24]
 8011bf4:	4323      	orrs	r3, r4
 8011bf6:	4003      	ands	r3, r0
 8011bf8:	430b      	orrs	r3, r1
 8011bfa:	4413      	add	r3, r2
 8011bfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011c00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011c0e:	441a      	add	r2, r3
 8011c10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c18:	601a      	str	r2, [r3, #0]
 8011c1a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011c22:	441a      	add	r2, r3
 8011c24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c2c:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8011c2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c36:	68da      	ldr	r2, [r3, #12]
 8011c38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011c46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011c54:	4059      	eors	r1, r3
 8011c56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011c64:	404b      	eors	r3, r1
 8011c66:	441a      	add	r2, r3
 8011c68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c70:	6899      	ldr	r1, [r3, #8]
 8011c72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c7a:	6818      	ldr	r0, [r3, #0]
 8011c7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c84:	685c      	ldr	r4, [r3, #4]
 8011c86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c8e:	689b      	ldr	r3, [r3, #8]
 8011c90:	4063      	eors	r3, r4
 8011c92:	4003      	ands	r3, r0
 8011c94:	404b      	eors	r3, r1
 8011c96:	441a      	add	r2, r3
 8011c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c9c:	3304      	adds	r3, #4
 8011c9e:	4995      	ldr	r1, [pc, #596]	; (8011ef4 <mbedtls_internal_sha256_process+0x868>)
 8011ca0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011ca4:	441a      	add	r2, r3
 8011ca6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011caa:	1d19      	adds	r1, r3, #4
 8011cac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011cb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011cb8:	4413      	add	r3, r2
 8011cba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011cbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cc6:	691b      	ldr	r3, [r3, #16]
 8011cc8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011ccc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cd4:	691b      	ldr	r3, [r3, #16]
 8011cd6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011cda:	405a      	eors	r2, r3
 8011cdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ce4:	691b      	ldr	r3, [r3, #16]
 8011ce6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011cea:	405a      	eors	r2, r3
 8011cec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cf4:	6919      	ldr	r1, [r3, #16]
 8011cf6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011cfe:	695b      	ldr	r3, [r3, #20]
 8011d00:	4019      	ands	r1, r3
 8011d02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d0a:	6998      	ldr	r0, [r3, #24]
 8011d0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d14:	691c      	ldr	r4, [r3, #16]
 8011d16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d1e:	695b      	ldr	r3, [r3, #20]
 8011d20:	4323      	orrs	r3, r4
 8011d22:	4003      	ands	r3, r0
 8011d24:	430b      	orrs	r3, r1
 8011d26:	4413      	add	r3, r2
 8011d28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011d2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d34:	69da      	ldr	r2, [r3, #28]
 8011d36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011d3a:	441a      	add	r2, r3
 8011d3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d44:	61da      	str	r2, [r3, #28]
 8011d46:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011d4e:	441a      	add	r2, r3
 8011d50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d58:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8011d5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d62:	689a      	ldr	r2, [r3, #8]
 8011d64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d6c:	69db      	ldr	r3, [r3, #28]
 8011d6e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011d72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d7a:	69db      	ldr	r3, [r3, #28]
 8011d7c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011d80:	4059      	eors	r1, r3
 8011d82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d8a:	69db      	ldr	r3, [r3, #28]
 8011d8c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011d90:	404b      	eors	r3, r1
 8011d92:	441a      	add	r2, r3
 8011d94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011d9c:	6859      	ldr	r1, [r3, #4]
 8011d9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011da2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011da6:	69d8      	ldr	r0, [r3, #28]
 8011da8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011db0:	681c      	ldr	r4, [r3, #0]
 8011db2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	4063      	eors	r3, r4
 8011dbe:	4003      	ands	r3, r0
 8011dc0:	404b      	eors	r3, r1
 8011dc2:	441a      	add	r2, r3
 8011dc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011dc8:	3305      	adds	r3, #5
 8011dca:	494a      	ldr	r1, [pc, #296]	; (8011ef4 <mbedtls_internal_sha256_process+0x868>)
 8011dcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011dd0:	441a      	add	r2, r3
 8011dd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011dd6:	1d59      	adds	r1, r3, #5
 8011dd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ddc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011de0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011de4:	4413      	add	r3, r2
 8011de6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011dea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011df8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011e06:	405a      	eors	r2, r3
 8011e08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e10:	68db      	ldr	r3, [r3, #12]
 8011e12:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011e16:	405a      	eors	r2, r3
 8011e18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e20:	68d9      	ldr	r1, [r3, #12]
 8011e22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e2a:	691b      	ldr	r3, [r3, #16]
 8011e2c:	4019      	ands	r1, r3
 8011e2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e36:	6958      	ldr	r0, [r3, #20]
 8011e38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e40:	68dc      	ldr	r4, [r3, #12]
 8011e42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e4a:	691b      	ldr	r3, [r3, #16]
 8011e4c:	4323      	orrs	r3, r4
 8011e4e:	4003      	ands	r3, r0
 8011e50:	430b      	orrs	r3, r1
 8011e52:	4413      	add	r3, r2
 8011e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011e58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e60:	699a      	ldr	r2, [r3, #24]
 8011e62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011e66:	441a      	add	r2, r3
 8011e68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e70:	619a      	str	r2, [r3, #24]
 8011e72:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011e7a:	441a      	add	r2, r3
 8011e7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e84:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8011e86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e8e:	685a      	ldr	r2, [r3, #4]
 8011e90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e98:	699b      	ldr	r3, [r3, #24]
 8011e9a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011e9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ea6:	699b      	ldr	r3, [r3, #24]
 8011ea8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011eac:	4059      	eors	r1, r3
 8011eae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011eb6:	699b      	ldr	r3, [r3, #24]
 8011eb8:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011ebc:	404b      	eors	r3, r1
 8011ebe:	441a      	add	r2, r3
 8011ec0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ec4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ec8:	6819      	ldr	r1, [r3, #0]
 8011eca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ed2:	6998      	ldr	r0, [r3, #24]
 8011ed4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011edc:	69dc      	ldr	r4, [r3, #28]
 8011ede:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	4063      	eors	r3, r4
 8011eea:	4003      	ands	r3, r0
 8011eec:	404b      	eors	r3, r1
 8011eee:	441a      	add	r2, r3
 8011ef0:	e002      	b.n	8011ef8 <mbedtls_internal_sha256_process+0x86c>
 8011ef2:	bf00      	nop
 8011ef4:	0802473c 	.word	0x0802473c
 8011ef8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011efc:	3306      	adds	r3, #6
 8011efe:	4981      	ldr	r1, [pc, #516]	; (8012104 <mbedtls_internal_sha256_process+0xa78>)
 8011f00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011f04:	441a      	add	r2, r3
 8011f06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f0a:	1d99      	adds	r1, r3, #6
 8011f0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f18:	4413      	add	r3, r2
 8011f1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011f1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f26:	689b      	ldr	r3, [r3, #8]
 8011f28:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011f2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f34:	689b      	ldr	r3, [r3, #8]
 8011f36:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011f3a:	405a      	eors	r2, r3
 8011f3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011f4a:	405a      	eors	r2, r3
 8011f4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f54:	6899      	ldr	r1, [r3, #8]
 8011f56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	4019      	ands	r1, r3
 8011f62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f6a:	6918      	ldr	r0, [r3, #16]
 8011f6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f74:	689c      	ldr	r4, [r3, #8]
 8011f76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	4323      	orrs	r3, r4
 8011f82:	4003      	ands	r3, r0
 8011f84:	430b      	orrs	r3, r1
 8011f86:	4413      	add	r3, r2
 8011f88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011f8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f94:	695a      	ldr	r2, [r3, #20]
 8011f96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011f9a:	441a      	add	r2, r3
 8011f9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fa4:	615a      	str	r2, [r3, #20]
 8011fa6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011fae:	441a      	add	r2, r3
 8011fb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fb8:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8011fba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fcc:	695b      	ldr	r3, [r3, #20]
 8011fce:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011fd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fda:	695b      	ldr	r3, [r3, #20]
 8011fdc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011fe0:	4059      	eors	r1, r3
 8011fe2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011fe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011fea:	695b      	ldr	r3, [r3, #20]
 8011fec:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011ff0:	404b      	eors	r3, r1
 8011ff2:	441a      	add	r2, r3
 8011ff4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ffc:	69d9      	ldr	r1, [r3, #28]
 8011ffe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012002:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012006:	6958      	ldr	r0, [r3, #20]
 8012008:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801200c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012010:	699c      	ldr	r4, [r3, #24]
 8012012:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801201a:	69db      	ldr	r3, [r3, #28]
 801201c:	4063      	eors	r3, r4
 801201e:	4003      	ands	r3, r0
 8012020:	404b      	eors	r3, r1
 8012022:	441a      	add	r2, r3
 8012024:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012028:	3307      	adds	r3, #7
 801202a:	4936      	ldr	r1, [pc, #216]	; (8012104 <mbedtls_internal_sha256_process+0xa78>)
 801202c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012030:	441a      	add	r2, r3
 8012032:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012036:	1dd9      	adds	r1, r3, #7
 8012038:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801203c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012040:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012044:	4413      	add	r3, r2
 8012046:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801204a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801204e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012058:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801205c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012066:	405a      	eors	r2, r3
 8012068:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801206c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012076:	405a      	eors	r2, r3
 8012078:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801207c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012080:	6859      	ldr	r1, [r3, #4]
 8012082:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012086:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	4019      	ands	r1, r3
 801208e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012096:	68d8      	ldr	r0, [r3, #12]
 8012098:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801209c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120a0:	685c      	ldr	r4, [r3, #4]
 80120a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	4323      	orrs	r3, r4
 80120ae:	4003      	ands	r3, r0
 80120b0:	430b      	orrs	r3, r1
 80120b2:	4413      	add	r3, r2
 80120b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80120b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120c0:	691a      	ldr	r2, [r3, #16]
 80120c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80120c6:	441a      	add	r2, r3
 80120c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120d0:	611a      	str	r2, [r3, #16]
 80120d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80120d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80120da:	441a      	add	r2, r3
 80120dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80120e4:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 80120e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80120ea:	3308      	adds	r3, #8
 80120ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80120f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80120f4:	2b0f      	cmp	r3, #15
 80120f6:	f67f ab41 	bls.w	801177c <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 80120fa:	2310      	movs	r3, #16
 80120fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8012100:	f000 bfd5 	b.w	80130ae <mbedtls_internal_sha256_process+0x1a22>
 8012104:	0802473c 	.word	0x0802473c
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8012108:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801210c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012110:	69da      	ldr	r2, [r3, #28]
 8012112:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012116:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801211a:	691b      	ldr	r3, [r3, #16]
 801211c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012120:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012128:	691b      	ldr	r3, [r3, #16]
 801212a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801212e:	4059      	eors	r1, r3
 8012130:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012134:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012138:	691b      	ldr	r3, [r3, #16]
 801213a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801213e:	404b      	eors	r3, r1
 8012140:	441a      	add	r2, r3
 8012142:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801214a:	6999      	ldr	r1, [r3, #24]
 801214c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012150:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012154:	6918      	ldr	r0, [r3, #16]
 8012156:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801215a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801215e:	695c      	ldr	r4, [r3, #20]
 8012160:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012168:	699b      	ldr	r3, [r3, #24]
 801216a:	4063      	eors	r3, r4
 801216c:	4003      	ands	r3, r0
 801216e:	404b      	eors	r3, r1
 8012170:	441a      	add	r2, r3
 8012172:	49ec      	ldr	r1, [pc, #944]	; (8012524 <mbedtls_internal_sha256_process+0xe98>)
 8012174:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012178:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801217c:	441a      	add	r2, r3
 801217e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012182:	1e99      	subs	r1, r3, #2
 8012184:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012188:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801218c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012190:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012194:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012198:	1e98      	subs	r0, r3, #2
 801219a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801219e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80121a6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80121aa:	4059      	eors	r1, r3
 80121ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80121b0:	1e98      	subs	r0, r3, #2
 80121b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80121be:	0a9b      	lsrs	r3, r3, #10
 80121c0:	4059      	eors	r1, r3
 80121c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80121c6:	1fd8      	subs	r0, r3, #7
 80121c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80121d4:	4419      	add	r1, r3
 80121d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80121da:	f1a3 000f 	sub.w	r0, r3, #15
 80121de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80121ea:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80121ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80121f2:	f1a3 040f 	sub.w	r4, r3, #15
 80121f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012202:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012206:	4058      	eors	r0, r3
 8012208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801220c:	f1a3 040f 	sub.w	r4, r3, #15
 8012210:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012214:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012218:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801221c:	08db      	lsrs	r3, r3, #3
 801221e:	4043      	eors	r3, r0
 8012220:	4419      	add	r1, r3
 8012222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012226:	f1a3 0010 	sub.w	r0, r3, #16
 801222a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801222e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012232:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012236:	18c8      	adds	r0, r1, r3
 8012238:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801223c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012240:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012244:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8012248:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801224c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012250:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012258:	4413      	add	r3, r2
 801225a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801225e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801226c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	ea4f 3373 	mov.w	r3, r3, ror #13
 801227a:	405a      	eors	r2, r3
 801227c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801228a:	405a      	eors	r2, r3
 801228c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012290:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012294:	6819      	ldr	r1, [r3, #0]
 8012296:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801229a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	4019      	ands	r1, r3
 80122a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122aa:	6898      	ldr	r0, [r3, #8]
 80122ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122b4:	681c      	ldr	r4, [r3, #0]
 80122b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	4323      	orrs	r3, r4
 80122c2:	4003      	ands	r3, r0
 80122c4:	430b      	orrs	r3, r1
 80122c6:	4413      	add	r3, r2
 80122c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80122cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122d4:	68da      	ldr	r2, [r3, #12]
 80122d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80122da:	441a      	add	r2, r3
 80122dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122e4:	60da      	str	r2, [r3, #12]
 80122e6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80122ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80122ee:	441a      	add	r2, r3
 80122f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80122f8:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80122fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012302:	699a      	ldr	r2, [r3, #24]
 8012304:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012308:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012312:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801231a:	68db      	ldr	r3, [r3, #12]
 801231c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012320:	4059      	eors	r1, r3
 8012322:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801232a:	68db      	ldr	r3, [r3, #12]
 801232c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012330:	404b      	eors	r3, r1
 8012332:	441a      	add	r2, r3
 8012334:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801233c:	6959      	ldr	r1, [r3, #20]
 801233e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012346:	68d8      	ldr	r0, [r3, #12]
 8012348:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801234c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012350:	691c      	ldr	r4, [r3, #16]
 8012352:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801235a:	695b      	ldr	r3, [r3, #20]
 801235c:	4063      	eors	r3, r4
 801235e:	4003      	ands	r3, r0
 8012360:	404b      	eors	r3, r1
 8012362:	441a      	add	r2, r3
 8012364:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012368:	3301      	adds	r3, #1
 801236a:	496e      	ldr	r1, [pc, #440]	; (8012524 <mbedtls_internal_sha256_process+0xe98>)
 801236c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012370:	441a      	add	r2, r3
 8012372:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012376:	1e59      	subs	r1, r3, #1
 8012378:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801237c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012380:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012384:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012388:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801238c:	1e58      	subs	r0, r3, #1
 801238e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012392:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012396:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801239a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801239e:	4059      	eors	r1, r3
 80123a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80123a4:	1e58      	subs	r0, r3, #1
 80123a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123b2:	0a9b      	lsrs	r3, r3, #10
 80123b4:	4059      	eors	r1, r3
 80123b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80123ba:	1f98      	subs	r0, r3, #6
 80123bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123c8:	4419      	add	r1, r3
 80123ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80123ce:	f1a3 000e 	sub.w	r0, r3, #14
 80123d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123de:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80123e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80123e6:	f1a3 040e 	sub.w	r4, r3, #14
 80123ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80123ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123f2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80123f6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80123fa:	4058      	eors	r0, r3
 80123fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012400:	f1a3 040e 	sub.w	r4, r3, #14
 8012404:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012408:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801240c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012410:	08db      	lsrs	r3, r3, #3
 8012412:	4043      	eors	r3, r0
 8012414:	18c8      	adds	r0, r1, r3
 8012416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801241a:	f1a3 010f 	sub.w	r1, r3, #15
 801241e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012422:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012426:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801242a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801242e:	3301      	adds	r3, #1
 8012430:	4408      	add	r0, r1
 8012432:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012436:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801243a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801243e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012442:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012446:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801244a:	4413      	add	r3, r2
 801244c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012450:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012458:	69db      	ldr	r3, [r3, #28]
 801245a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801245e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012466:	69db      	ldr	r3, [r3, #28]
 8012468:	ea4f 3373 	mov.w	r3, r3, ror #13
 801246c:	405a      	eors	r2, r3
 801246e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012472:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012476:	69db      	ldr	r3, [r3, #28]
 8012478:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801247c:	405a      	eors	r2, r3
 801247e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012482:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012486:	69d9      	ldr	r1, [r3, #28]
 8012488:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801248c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	4019      	ands	r1, r3
 8012494:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801249c:	6858      	ldr	r0, [r3, #4]
 801249e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124a6:	69dc      	ldr	r4, [r3, #28]
 80124a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	4323      	orrs	r3, r4
 80124b4:	4003      	ands	r3, r0
 80124b6:	430b      	orrs	r3, r1
 80124b8:	4413      	add	r3, r2
 80124ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80124be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124c6:	689a      	ldr	r2, [r3, #8]
 80124c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80124cc:	441a      	add	r2, r3
 80124ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124d6:	609a      	str	r2, [r3, #8]
 80124d8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80124dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124e0:	441a      	add	r2, r3
 80124e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124ea:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80124ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124f4:	695a      	ldr	r2, [r3, #20]
 80124f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80124fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012504:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801250c:	689b      	ldr	r3, [r3, #8]
 801250e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012512:	4059      	eors	r1, r3
 8012514:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801251c:	689b      	ldr	r3, [r3, #8]
 801251e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012522:	e001      	b.n	8012528 <mbedtls_internal_sha256_process+0xe9c>
 8012524:	0802473c 	.word	0x0802473c
 8012528:	404b      	eors	r3, r1
 801252a:	441a      	add	r2, r3
 801252c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012534:	6919      	ldr	r1, [r3, #16]
 8012536:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801253a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801253e:	6898      	ldr	r0, [r3, #8]
 8012540:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012548:	68dc      	ldr	r4, [r3, #12]
 801254a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801254e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012552:	691b      	ldr	r3, [r3, #16]
 8012554:	4063      	eors	r3, r4
 8012556:	4003      	ands	r3, r0
 8012558:	404b      	eors	r3, r1
 801255a:	441a      	add	r2, r3
 801255c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012560:	3302      	adds	r3, #2
 8012562:	49ec      	ldr	r1, [pc, #944]	; (8012914 <mbedtls_internal_sha256_process+0x1288>)
 8012564:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012568:	441a      	add	r2, r3
 801256a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801256e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012572:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012576:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801257a:	ea4f 4173 	mov.w	r1, r3, ror #17
 801257e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012582:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012586:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 801258a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801258e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012592:	4059      	eors	r1, r3
 8012594:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012598:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801259c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80125a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80125a4:	0a9b      	lsrs	r3, r3, #10
 80125a6:	4059      	eors	r1, r3
 80125a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80125ac:	1f58      	subs	r0, r3, #5
 80125ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80125ba:	4419      	add	r1, r3
 80125bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80125c0:	f1a3 000d 	sub.w	r0, r3, #13
 80125c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80125d0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80125d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80125d8:	f1a3 040d 	sub.w	r4, r3, #13
 80125dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80125e8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80125ec:	4058      	eors	r0, r3
 80125ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80125f2:	f1a3 040d 	sub.w	r4, r3, #13
 80125f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80125fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012602:	08db      	lsrs	r3, r3, #3
 8012604:	4043      	eors	r3, r0
 8012606:	18c8      	adds	r0, r1, r3
 8012608:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801260c:	f1a3 010e 	sub.w	r1, r3, #14
 8012610:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012614:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012618:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801261c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012620:	3302      	adds	r3, #2
 8012622:	4408      	add	r0, r1
 8012624:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012628:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801262c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012630:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012634:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012638:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801263c:	4413      	add	r3, r2
 801263e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012642:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801264a:	699b      	ldr	r3, [r3, #24]
 801264c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012650:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012654:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012658:	699b      	ldr	r3, [r3, #24]
 801265a:	ea4f 3373 	mov.w	r3, r3, ror #13
 801265e:	405a      	eors	r2, r3
 8012660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012668:	699b      	ldr	r3, [r3, #24]
 801266a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801266e:	405a      	eors	r2, r3
 8012670:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012678:	6999      	ldr	r1, [r3, #24]
 801267a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801267e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012682:	69db      	ldr	r3, [r3, #28]
 8012684:	4019      	ands	r1, r3
 8012686:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801268a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801268e:	6818      	ldr	r0, [r3, #0]
 8012690:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012698:	699c      	ldr	r4, [r3, #24]
 801269a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801269e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126a2:	69db      	ldr	r3, [r3, #28]
 80126a4:	4323      	orrs	r3, r4
 80126a6:	4003      	ands	r3, r0
 80126a8:	430b      	orrs	r3, r1
 80126aa:	4413      	add	r3, r2
 80126ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80126b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126b8:	685a      	ldr	r2, [r3, #4]
 80126ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80126be:	441a      	add	r2, r3
 80126c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126c8:	605a      	str	r2, [r3, #4]
 80126ca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80126ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80126d2:	441a      	add	r2, r3
 80126d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126dc:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80126de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126e6:	691a      	ldr	r2, [r3, #16]
 80126e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80126f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80126fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012704:	4059      	eors	r1, r3
 8012706:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801270a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012714:	404b      	eors	r3, r1
 8012716:	441a      	add	r2, r3
 8012718:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801271c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012720:	68d9      	ldr	r1, [r3, #12]
 8012722:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012726:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801272a:	6858      	ldr	r0, [r3, #4]
 801272c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012734:	689c      	ldr	r4, [r3, #8]
 8012736:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801273a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	4063      	eors	r3, r4
 8012742:	4003      	ands	r3, r0
 8012744:	404b      	eors	r3, r1
 8012746:	441a      	add	r2, r3
 8012748:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801274c:	3303      	adds	r3, #3
 801274e:	4971      	ldr	r1, [pc, #452]	; (8012914 <mbedtls_internal_sha256_process+0x1288>)
 8012750:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012754:	441a      	add	r2, r3
 8012756:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801275a:	1c59      	adds	r1, r3, #1
 801275c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012760:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012764:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012768:	ea4f 4173 	mov.w	r1, r3, ror #17
 801276c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012770:	1c58      	adds	r0, r3, #1
 8012772:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012776:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801277a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801277e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012782:	4059      	eors	r1, r3
 8012784:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012788:	1c58      	adds	r0, r3, #1
 801278a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801278e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012792:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012796:	0a9b      	lsrs	r3, r3, #10
 8012798:	4059      	eors	r1, r3
 801279a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801279e:	1f18      	subs	r0, r3, #4
 80127a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80127ac:	4419      	add	r1, r3
 80127ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80127b2:	f1a3 000c 	sub.w	r0, r3, #12
 80127b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80127c2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80127c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80127ca:	f1a3 040c 	sub.w	r4, r3, #12
 80127ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80127da:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80127de:	4058      	eors	r0, r3
 80127e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80127e4:	f1a3 040c 	sub.w	r4, r3, #12
 80127e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80127ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80127f4:	08db      	lsrs	r3, r3, #3
 80127f6:	4043      	eors	r3, r0
 80127f8:	18c8      	adds	r0, r1, r3
 80127fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80127fe:	f1a3 010d 	sub.w	r1, r3, #13
 8012802:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012806:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801280a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801280e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012812:	3303      	adds	r3, #3
 8012814:	4408      	add	r0, r1
 8012816:	f507 719c 	add.w	r1, r7, #312	; 0x138
 801281a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801281e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012822:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012826:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801282a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801282e:	4413      	add	r3, r2
 8012830:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012834:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801283c:	695b      	ldr	r3, [r3, #20]
 801283e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012842:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801284a:	695b      	ldr	r3, [r3, #20]
 801284c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012850:	405a      	eors	r2, r3
 8012852:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801285a:	695b      	ldr	r3, [r3, #20]
 801285c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012860:	405a      	eors	r2, r3
 8012862:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801286a:	6959      	ldr	r1, [r3, #20]
 801286c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012874:	699b      	ldr	r3, [r3, #24]
 8012876:	4019      	ands	r1, r3
 8012878:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801287c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012880:	69d8      	ldr	r0, [r3, #28]
 8012882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801288a:	695c      	ldr	r4, [r3, #20]
 801288c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012894:	699b      	ldr	r3, [r3, #24]
 8012896:	4323      	orrs	r3, r4
 8012898:	4003      	ands	r3, r0
 801289a:	430b      	orrs	r3, r1
 801289c:	4413      	add	r3, r2
 801289e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80128a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80128b0:	441a      	add	r2, r3
 80128b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128ba:	601a      	str	r2, [r3, #0]
 80128bc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80128c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80128c4:	441a      	add	r2, r3
 80128c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128ce:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80128d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128d8:	68da      	ldr	r2, [r3, #12]
 80128da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80128e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80128f6:	4059      	eors	r1, r3
 80128f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80128fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012906:	404b      	eors	r3, r1
 8012908:	441a      	add	r2, r3
 801290a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801290e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012912:	e001      	b.n	8012918 <mbedtls_internal_sha256_process+0x128c>
 8012914:	0802473c 	.word	0x0802473c
 8012918:	6899      	ldr	r1, [r3, #8]
 801291a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801291e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012922:	6818      	ldr	r0, [r3, #0]
 8012924:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801292c:	685c      	ldr	r4, [r3, #4]
 801292e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012936:	689b      	ldr	r3, [r3, #8]
 8012938:	4063      	eors	r3, r4
 801293a:	4003      	ands	r3, r0
 801293c:	404b      	eors	r3, r1
 801293e:	441a      	add	r2, r3
 8012940:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012944:	3304      	adds	r3, #4
 8012946:	49ec      	ldr	r1, [pc, #944]	; (8012cf8 <mbedtls_internal_sha256_process+0x166c>)
 8012948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801294c:	441a      	add	r2, r3
 801294e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012952:	1c99      	adds	r1, r3, #2
 8012954:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801295c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012960:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012968:	1c98      	adds	r0, r3, #2
 801296a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801296e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012972:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012976:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801297a:	4059      	eors	r1, r3
 801297c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012980:	1c98      	adds	r0, r3, #2
 8012982:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801298a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801298e:	0a9b      	lsrs	r3, r3, #10
 8012990:	4059      	eors	r1, r3
 8012992:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012996:	1ed8      	subs	r0, r3, #3
 8012998:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801299c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80129a4:	4419      	add	r1, r3
 80129a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129aa:	f1a3 000b 	sub.w	r0, r3, #11
 80129ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80129ba:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80129be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129c2:	f1a3 040b 	sub.w	r4, r3, #11
 80129c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80129d2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80129d6:	4058      	eors	r0, r3
 80129d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129dc:	f1a3 040b 	sub.w	r4, r3, #11
 80129e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80129ec:	08db      	lsrs	r3, r3, #3
 80129ee:	4043      	eors	r3, r0
 80129f0:	18c8      	adds	r0, r1, r3
 80129f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80129f6:	f1a3 010c 	sub.w	r1, r3, #12
 80129fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80129fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a02:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a0a:	3304      	adds	r3, #4
 8012a0c:	4408      	add	r0, r1
 8012a0e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012a12:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012a16:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012a1a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012a1e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012a22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012a26:	4413      	add	r3, r2
 8012a28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012a2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a34:	691b      	ldr	r3, [r3, #16]
 8012a36:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012a3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a42:	691b      	ldr	r3, [r3, #16]
 8012a44:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012a48:	405a      	eors	r2, r3
 8012a4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a52:	691b      	ldr	r3, [r3, #16]
 8012a54:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012a58:	405a      	eors	r2, r3
 8012a5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a62:	6919      	ldr	r1, [r3, #16]
 8012a64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a6c:	695b      	ldr	r3, [r3, #20]
 8012a6e:	4019      	ands	r1, r3
 8012a70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a78:	6998      	ldr	r0, [r3, #24]
 8012a7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a82:	691c      	ldr	r4, [r3, #16]
 8012a84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a8c:	695b      	ldr	r3, [r3, #20]
 8012a8e:	4323      	orrs	r3, r4
 8012a90:	4003      	ands	r3, r0
 8012a92:	430b      	orrs	r3, r1
 8012a94:	4413      	add	r3, r2
 8012a96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012a9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012aa2:	69da      	ldr	r2, [r3, #28]
 8012aa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012aa8:	441a      	add	r2, r3
 8012aaa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ab2:	61da      	str	r2, [r3, #28]
 8012ab4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012abc:	441a      	add	r2, r3
 8012abe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ac6:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8012ac8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ad0:	689a      	ldr	r2, [r3, #8]
 8012ad2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ada:	69db      	ldr	r3, [r3, #28]
 8012adc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012ae0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ae8:	69db      	ldr	r3, [r3, #28]
 8012aea:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012aee:	4059      	eors	r1, r3
 8012af0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012af8:	69db      	ldr	r3, [r3, #28]
 8012afa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012afe:	404b      	eors	r3, r1
 8012b00:	441a      	add	r2, r3
 8012b02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b0a:	6859      	ldr	r1, [r3, #4]
 8012b0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b14:	69d8      	ldr	r0, [r3, #28]
 8012b16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b1e:	681c      	ldr	r4, [r3, #0]
 8012b20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	4063      	eors	r3, r4
 8012b2c:	4003      	ands	r3, r0
 8012b2e:	404b      	eors	r3, r1
 8012b30:	441a      	add	r2, r3
 8012b32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b36:	3305      	adds	r3, #5
 8012b38:	496f      	ldr	r1, [pc, #444]	; (8012cf8 <mbedtls_internal_sha256_process+0x166c>)
 8012b3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012b3e:	441a      	add	r2, r3
 8012b40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b44:	1cd9      	adds	r1, r3, #3
 8012b46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b52:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012b56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b5a:	1cd8      	adds	r0, r3, #3
 8012b5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012b68:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012b6c:	4059      	eors	r1, r3
 8012b6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b72:	1cd8      	adds	r0, r3, #3
 8012b74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b7c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012b80:	0a9b      	lsrs	r3, r3, #10
 8012b82:	4059      	eors	r1, r3
 8012b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b88:	1e98      	subs	r0, r3, #2
 8012b8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012b96:	4419      	add	r1, r3
 8012b98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b9c:	f1a3 000a 	sub.w	r0, r3, #10
 8012ba0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ba4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ba8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012bac:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012bb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012bb4:	f1a3 040a 	sub.w	r4, r3, #10
 8012bb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012bbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bc0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012bc4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012bc8:	4058      	eors	r0, r3
 8012bca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012bce:	f1a3 040a 	sub.w	r4, r3, #10
 8012bd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012bd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bda:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012bde:	08db      	lsrs	r3, r3, #3
 8012be0:	4043      	eors	r3, r0
 8012be2:	18c8      	adds	r0, r1, r3
 8012be4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012be8:	f1a3 010b 	sub.w	r1, r3, #11
 8012bec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012bf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bf4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012bf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012bfc:	3305      	adds	r3, #5
 8012bfe:	4408      	add	r0, r1
 8012c00:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012c04:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012c08:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012c0c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012c10:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012c14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012c18:	4413      	add	r3, r2
 8012c1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012c1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c26:	68db      	ldr	r3, [r3, #12]
 8012c28:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012c2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c34:	68db      	ldr	r3, [r3, #12]
 8012c36:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012c3a:	405a      	eors	r2, r3
 8012c3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c44:	68db      	ldr	r3, [r3, #12]
 8012c46:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012c4a:	405a      	eors	r2, r3
 8012c4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c54:	68d9      	ldr	r1, [r3, #12]
 8012c56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c5e:	691b      	ldr	r3, [r3, #16]
 8012c60:	4019      	ands	r1, r3
 8012c62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c6a:	6958      	ldr	r0, [r3, #20]
 8012c6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c74:	68dc      	ldr	r4, [r3, #12]
 8012c76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c7e:	691b      	ldr	r3, [r3, #16]
 8012c80:	4323      	orrs	r3, r4
 8012c82:	4003      	ands	r3, r0
 8012c84:	430b      	orrs	r3, r1
 8012c86:	4413      	add	r3, r2
 8012c88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012c8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c94:	699a      	ldr	r2, [r3, #24]
 8012c96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012c9a:	441a      	add	r2, r3
 8012c9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ca4:	619a      	str	r2, [r3, #24]
 8012ca6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012cae:	441a      	add	r2, r3
 8012cb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cb8:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8012cba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cc2:	685a      	ldr	r2, [r3, #4]
 8012cc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ccc:	699b      	ldr	r3, [r3, #24]
 8012cce:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012cd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cda:	699b      	ldr	r3, [r3, #24]
 8012cdc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012ce0:	4059      	eors	r1, r3
 8012ce2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ce6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cea:	699b      	ldr	r3, [r3, #24]
 8012cec:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012cf0:	404b      	eors	r3, r1
 8012cf2:	441a      	add	r2, r3
 8012cf4:	e002      	b.n	8012cfc <mbedtls_internal_sha256_process+0x1670>
 8012cf6:	bf00      	nop
 8012cf8:	0802473c 	.word	0x0802473c
 8012cfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d04:	6819      	ldr	r1, [r3, #0]
 8012d06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d0e:	6998      	ldr	r0, [r3, #24]
 8012d10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d18:	69dc      	ldr	r4, [r3, #28]
 8012d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	4063      	eors	r3, r4
 8012d26:	4003      	ands	r3, r0
 8012d28:	404b      	eors	r3, r1
 8012d2a:	441a      	add	r2, r3
 8012d2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d30:	3306      	adds	r3, #6
 8012d32:	49e3      	ldr	r1, [pc, #908]	; (80130c0 <mbedtls_internal_sha256_process+0x1a34>)
 8012d34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012d38:	441a      	add	r2, r3
 8012d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d3e:	1d19      	adds	r1, r3, #4
 8012d40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d4c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012d50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d54:	1d18      	adds	r0, r3, #4
 8012d56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012d62:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012d66:	4059      	eors	r1, r3
 8012d68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d6c:	1d18      	adds	r0, r3, #4
 8012d6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012d7a:	0a9b      	lsrs	r3, r3, #10
 8012d7c:	4059      	eors	r1, r3
 8012d7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d82:	1e58      	subs	r0, r3, #1
 8012d84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012d90:	4419      	add	r1, r3
 8012d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d96:	f1a3 0009 	sub.w	r0, r3, #9
 8012d9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012da2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012da6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012daa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012dae:	f1a3 0409 	sub.w	r4, r3, #9
 8012db2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012db6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012dbe:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012dc2:	4058      	eors	r0, r3
 8012dc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012dc8:	f1a3 0409 	sub.w	r4, r3, #9
 8012dcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012dd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dd4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012dd8:	08db      	lsrs	r3, r3, #3
 8012dda:	4043      	eors	r3, r0
 8012ddc:	18c8      	adds	r0, r1, r3
 8012dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012de2:	f1a3 010a 	sub.w	r1, r3, #10
 8012de6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012dea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012df2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012df6:	3306      	adds	r3, #6
 8012df8:	4408      	add	r0, r1
 8012dfa:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012dfe:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012e02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012e06:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012e0a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012e0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012e12:	4413      	add	r3, r2
 8012e14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012e18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e20:	689b      	ldr	r3, [r3, #8]
 8012e22:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012e26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e2e:	689b      	ldr	r3, [r3, #8]
 8012e30:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012e34:	405a      	eors	r2, r3
 8012e36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e3e:	689b      	ldr	r3, [r3, #8]
 8012e40:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012e44:	405a      	eors	r2, r3
 8012e46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e4e:	6899      	ldr	r1, [r3, #8]
 8012e50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	4019      	ands	r1, r3
 8012e5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e64:	6918      	ldr	r0, [r3, #16]
 8012e66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e6e:	689c      	ldr	r4, [r3, #8]
 8012e70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e78:	68db      	ldr	r3, [r3, #12]
 8012e7a:	4323      	orrs	r3, r4
 8012e7c:	4003      	ands	r3, r0
 8012e7e:	430b      	orrs	r3, r1
 8012e80:	4413      	add	r3, r2
 8012e82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012e86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e8e:	695a      	ldr	r2, [r3, #20]
 8012e90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012e94:	441a      	add	r2, r3
 8012e96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e9e:	615a      	str	r2, [r3, #20]
 8012ea0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ea8:	441a      	add	r2, r3
 8012eaa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012eb2:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8012eb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ebc:	681a      	ldr	r2, [r3, #0]
 8012ebe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ec2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ec6:	695b      	ldr	r3, [r3, #20]
 8012ec8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012ecc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ed0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ed4:	695b      	ldr	r3, [r3, #20]
 8012ed6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012eda:	4059      	eors	r1, r3
 8012edc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ee4:	695b      	ldr	r3, [r3, #20]
 8012ee6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012eea:	404b      	eors	r3, r1
 8012eec:	441a      	add	r2, r3
 8012eee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ef2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ef6:	69d9      	ldr	r1, [r3, #28]
 8012ef8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f00:	6958      	ldr	r0, [r3, #20]
 8012f02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f0a:	699c      	ldr	r4, [r3, #24]
 8012f0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f14:	69db      	ldr	r3, [r3, #28]
 8012f16:	4063      	eors	r3, r4
 8012f18:	4003      	ands	r3, r0
 8012f1a:	404b      	eors	r3, r1
 8012f1c:	441a      	add	r2, r3
 8012f1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f22:	3307      	adds	r3, #7
 8012f24:	4966      	ldr	r1, [pc, #408]	; (80130c0 <mbedtls_internal_sha256_process+0x1a34>)
 8012f26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012f2a:	441a      	add	r2, r3
 8012f2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f30:	1d59      	adds	r1, r3, #5
 8012f32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012f3e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012f42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f46:	1d58      	adds	r0, r3, #5
 8012f48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012f54:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012f58:	4059      	eors	r1, r3
 8012f5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f5e:	1d58      	adds	r0, r3, #5
 8012f60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012f6c:	0a9b      	lsrs	r3, r3, #10
 8012f6e:	4059      	eors	r1, r3
 8012f70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f78:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8012f7c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012f80:	4419      	add	r1, r3
 8012f82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f86:	f1a3 0008 	sub.w	r0, r3, #8
 8012f8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012f8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012f96:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8012f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012f9e:	f1a3 0408 	sub.w	r4, r3, #8
 8012fa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fa6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012faa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012fae:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012fb2:	4058      	eors	r0, r3
 8012fb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012fb8:	f1a3 0408 	sub.w	r4, r3, #8
 8012fbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fc0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012fc4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012fc8:	08db      	lsrs	r3, r3, #3
 8012fca:	4043      	eors	r3, r0
 8012fcc:	18c8      	adds	r0, r1, r3
 8012fce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012fd2:	f1a3 0109 	sub.w	r1, r3, #9
 8012fd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012fde:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012fe2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012fe6:	3307      	adds	r3, #7
 8012fe8:	4408      	add	r0, r1
 8012fea:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012fee:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012ff2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012ff6:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8012ffa:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012ffe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013002:	4413      	add	r3, r2
 8013004:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8013008:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801300c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013016:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801301a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013024:	405a      	eors	r2, r3
 8013026:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801302a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013034:	405a      	eors	r2, r3
 8013036:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801303a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801303e:	6859      	ldr	r1, [r3, #4]
 8013040:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013048:	689b      	ldr	r3, [r3, #8]
 801304a:	4019      	ands	r1, r3
 801304c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013054:	68d8      	ldr	r0, [r3, #12]
 8013056:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801305a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801305e:	685c      	ldr	r4, [r3, #4]
 8013060:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013068:	689b      	ldr	r3, [r3, #8]
 801306a:	4323      	orrs	r3, r4
 801306c:	4003      	ands	r3, r0
 801306e:	430b      	orrs	r3, r1
 8013070:	4413      	add	r3, r2
 8013072:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013076:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801307a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801307e:	691a      	ldr	r2, [r3, #16]
 8013080:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013084:	441a      	add	r2, r3
 8013086:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801308a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801308e:	611a      	str	r2, [r3, #16]
 8013090:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8013094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013098:	441a      	add	r2, r3
 801309a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801309e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130a2:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 80130a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80130a8:	3308      	adds	r3, #8
 80130aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80130ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80130b2:	2b3f      	cmp	r3, #63	; 0x3f
 80130b4:	f67f a828 	bls.w	8012108 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80130b8:	2300      	movs	r3, #0
 80130ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80130be:	e023      	b.n	8013108 <mbedtls_internal_sha256_process+0x1a7c>
 80130c0:	0802473c 	.word	0x0802473c
        ctx->state[i] += A[i];
 80130c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80130d2:	3202      	adds	r2, #2
 80130d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80130d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130e0:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80130e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80130e8:	18d1      	adds	r1, r2, r3
 80130ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80130f8:	3202      	adds	r2, #2
 80130fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 80130fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013102:	3301      	adds	r3, #1
 8013104:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8013108:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801310c:	2b07      	cmp	r3, #7
 801310e:	d9d9      	bls.n	80130c4 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8013110:	2300      	movs	r3, #0
}
 8013112:	4618      	mov	r0, r3
 8013114:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8013118:	46bd      	mov	sp, r7
 801311a:	bc90      	pop	{r4, r7}
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop

08013120 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b088      	sub	sp, #32
 8013124:	af00      	add	r7, sp, #0
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d101      	bne.n	8013136 <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 8013132:	2300      	movs	r3, #0
 8013134:	e065      	b.n	8013202 <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801313e:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8013146:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	681a      	ldr	r2, [r3, #0]
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	441a      	add	r2, r3
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	687a      	ldr	r2, [r7, #4]
 8013162:	429a      	cmp	r2, r3
 8013164:	d904      	bls.n	8013170 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	685b      	ldr	r3, [r3, #4]
 801316a:	1c5a      	adds	r2, r3, #1
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d034      	beq.n	80131e0 <mbedtls_sha256_update_ret+0xc0>
 8013176:	687a      	ldr	r2, [r7, #4]
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	429a      	cmp	r2, r3
 801317c:	d330      	bcc.n	80131e0 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	4413      	add	r3, r2
 8013188:	69ba      	ldr	r2, [r7, #24]
 801318a:	68b9      	ldr	r1, [r7, #8]
 801318c:	4618      	mov	r0, r3
 801318e:	f00a fb43 	bl	801d818 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	3328      	adds	r3, #40	; 0x28
 8013196:	4619      	mov	r1, r3
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	f7fe fa77 	bl	801168c <mbedtls_internal_sha256_process>
 801319e:	6178      	str	r0, [r7, #20]
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d001      	beq.n	80131aa <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	e02b      	b.n	8013202 <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 80131aa:	68ba      	ldr	r2, [r7, #8]
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	4413      	add	r3, r2
 80131b0:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 80131b2:	687a      	ldr	r2, [r7, #4]
 80131b4:	69bb      	ldr	r3, [r7, #24]
 80131b6:	1ad3      	subs	r3, r2, r3
 80131b8:	607b      	str	r3, [r7, #4]
        left = 0;
 80131ba:	2300      	movs	r3, #0
 80131bc:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 80131be:	e00f      	b.n	80131e0 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80131c0:	68b9      	ldr	r1, [r7, #8]
 80131c2:	68f8      	ldr	r0, [r7, #12]
 80131c4:	f7fe fa62 	bl	801168c <mbedtls_internal_sha256_process>
 80131c8:	6178      	str	r0, [r7, #20]
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d001      	beq.n	80131d4 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	e016      	b.n	8013202 <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	3340      	adds	r3, #64	; 0x40
 80131d8:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	3b40      	subs	r3, #64	; 0x40
 80131de:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2b3f      	cmp	r3, #63	; 0x3f
 80131e4:	d8ec      	bhi.n	80131c0 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d009      	beq.n	8013200 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	4413      	add	r3, r2
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	68b9      	ldr	r1, [r7, #8]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f00a fb0c 	bl	801d818 <memcpy>

    return( 0 );
 8013200:	2300      	movs	r3, #0
}
 8013202:	4618      	mov	r0, r3
 8013204:	3720      	adds	r7, #32
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
	...

0801320c <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b08a      	sub	sp, #40	; 0x28
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	6039      	str	r1, [r7, #0]
    int ret;
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	685b      	ldr	r3, [r3, #4]
 8013220:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8013222:	4313      	orrs	r3, r2
 8013224:	627b      	str	r3, [r7, #36]	; 0x24
    low  = ( ctx->total[0] <<  3 );
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	00db      	lsls	r3, r3, #3
 801322c:	623b      	str	r3, [r7, #32]

    PUT_UINT32_BE( high, msglen, 0 );
 801322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013230:	0e1b      	lsrs	r3, r3, #24
 8013232:	b2db      	uxtb	r3, r3
 8013234:	733b      	strb	r3, [r7, #12]
 8013236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013238:	0c1b      	lsrs	r3, r3, #16
 801323a:	b2db      	uxtb	r3, r3
 801323c:	737b      	strb	r3, [r7, #13]
 801323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013240:	0a1b      	lsrs	r3, r3, #8
 8013242:	b2db      	uxtb	r3, r3
 8013244:	73bb      	strb	r3, [r7, #14]
 8013246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013248:	b2db      	uxtb	r3, r3
 801324a:	73fb      	strb	r3, [r7, #15]
    PUT_UINT32_BE( low,  msglen, 4 );
 801324c:	6a3b      	ldr	r3, [r7, #32]
 801324e:	0e1b      	lsrs	r3, r3, #24
 8013250:	b2db      	uxtb	r3, r3
 8013252:	743b      	strb	r3, [r7, #16]
 8013254:	6a3b      	ldr	r3, [r7, #32]
 8013256:	0c1b      	lsrs	r3, r3, #16
 8013258:	b2db      	uxtb	r3, r3
 801325a:	747b      	strb	r3, [r7, #17]
 801325c:	6a3b      	ldr	r3, [r7, #32]
 801325e:	0a1b      	lsrs	r3, r3, #8
 8013260:	b2db      	uxtb	r3, r3
 8013262:	74bb      	strb	r3, [r7, #18]
 8013264:	6a3b      	ldr	r3, [r7, #32]
 8013266:	b2db      	uxtb	r3, r3
 8013268:	74fb      	strb	r3, [r7, #19]

    last = ctx->total[0] & 0x3F;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013272:	61fb      	str	r3, [r7, #28]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	2b37      	cmp	r3, #55	; 0x37
 8013278:	d803      	bhi.n	8013282 <mbedtls_sha256_finish_ret+0x76>
 801327a:	69fb      	ldr	r3, [r7, #28]
 801327c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013280:	e002      	b.n	8013288 <mbedtls_sha256_finish_ret+0x7c>
 8013282:	69fb      	ldr	r3, [r7, #28]
 8013284:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8013288:	61bb      	str	r3, [r7, #24]

    if( ( ret = mbedtls_sha256_update_ret( ctx, sha256_padding, padn ) ) != 0 )
 801328a:	69ba      	ldr	r2, [r7, #24]
 801328c:	497b      	ldr	r1, [pc, #492]	; (801347c <mbedtls_sha256_finish_ret+0x270>)
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f7ff ff46 	bl	8013120 <mbedtls_sha256_update_ret>
 8013294:	6178      	str	r0, [r7, #20]
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d001      	beq.n	80132a0 <mbedtls_sha256_finish_ret+0x94>
        return( ret );
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	e0e8      	b.n	8013472 <mbedtls_sha256_finish_ret+0x266>

    if( ( ret = mbedtls_sha256_update_ret( ctx, msglen, 8 ) ) != 0 )
 80132a0:	f107 030c 	add.w	r3, r7, #12
 80132a4:	2208      	movs	r2, #8
 80132a6:	4619      	mov	r1, r3
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f7ff ff39 	bl	8013120 <mbedtls_sha256_update_ret>
 80132ae:	6178      	str	r0, [r7, #20]
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d001      	beq.n	80132ba <mbedtls_sha256_finish_ret+0xae>
        return( ret );
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	e0db      	b.n	8013472 <mbedtls_sha256_finish_ret+0x266>

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	689b      	ldr	r3, [r3, #8]
 80132be:	0e1b      	lsrs	r3, r3, #24
 80132c0:	b2da      	uxtb	r2, r3
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	701a      	strb	r2, [r3, #0]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	689b      	ldr	r3, [r3, #8]
 80132ca:	0c1a      	lsrs	r2, r3, #16
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	3301      	adds	r3, #1
 80132d0:	b2d2      	uxtb	r2, r2
 80132d2:	701a      	strb	r2, [r3, #0]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	689b      	ldr	r3, [r3, #8]
 80132d8:	0a1a      	lsrs	r2, r3, #8
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	3302      	adds	r3, #2
 80132de:	b2d2      	uxtb	r2, r2
 80132e0:	701a      	strb	r2, [r3, #0]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	689a      	ldr	r2, [r3, #8]
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	3303      	adds	r3, #3
 80132ea:	b2d2      	uxtb	r2, r2
 80132ec:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	68db      	ldr	r3, [r3, #12]
 80132f2:	0e1a      	lsrs	r2, r3, #24
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	3304      	adds	r3, #4
 80132f8:	b2d2      	uxtb	r2, r2
 80132fa:	701a      	strb	r2, [r3, #0]
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	0c1a      	lsrs	r2, r3, #16
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	3305      	adds	r3, #5
 8013306:	b2d2      	uxtb	r2, r2
 8013308:	701a      	strb	r2, [r3, #0]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	68db      	ldr	r3, [r3, #12]
 801330e:	0a1a      	lsrs	r2, r3, #8
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	3306      	adds	r3, #6
 8013314:	b2d2      	uxtb	r2, r2
 8013316:	701a      	strb	r2, [r3, #0]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	68da      	ldr	r2, [r3, #12]
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	3307      	adds	r3, #7
 8013320:	b2d2      	uxtb	r2, r2
 8013322:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	691b      	ldr	r3, [r3, #16]
 8013328:	0e1a      	lsrs	r2, r3, #24
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	3308      	adds	r3, #8
 801332e:	b2d2      	uxtb	r2, r2
 8013330:	701a      	strb	r2, [r3, #0]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	691b      	ldr	r3, [r3, #16]
 8013336:	0c1a      	lsrs	r2, r3, #16
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	3309      	adds	r3, #9
 801333c:	b2d2      	uxtb	r2, r2
 801333e:	701a      	strb	r2, [r3, #0]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	691b      	ldr	r3, [r3, #16]
 8013344:	0a1a      	lsrs	r2, r3, #8
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	330a      	adds	r3, #10
 801334a:	b2d2      	uxtb	r2, r2
 801334c:	701a      	strb	r2, [r3, #0]
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	691a      	ldr	r2, [r3, #16]
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	330b      	adds	r3, #11
 8013356:	b2d2      	uxtb	r2, r2
 8013358:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	695b      	ldr	r3, [r3, #20]
 801335e:	0e1a      	lsrs	r2, r3, #24
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	330c      	adds	r3, #12
 8013364:	b2d2      	uxtb	r2, r2
 8013366:	701a      	strb	r2, [r3, #0]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	695b      	ldr	r3, [r3, #20]
 801336c:	0c1a      	lsrs	r2, r3, #16
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	330d      	adds	r3, #13
 8013372:	b2d2      	uxtb	r2, r2
 8013374:	701a      	strb	r2, [r3, #0]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	695b      	ldr	r3, [r3, #20]
 801337a:	0a1a      	lsrs	r2, r3, #8
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	330e      	adds	r3, #14
 8013380:	b2d2      	uxtb	r2, r2
 8013382:	701a      	strb	r2, [r3, #0]
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	695a      	ldr	r2, [r3, #20]
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	330f      	adds	r3, #15
 801338c:	b2d2      	uxtb	r2, r2
 801338e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	699b      	ldr	r3, [r3, #24]
 8013394:	0e1a      	lsrs	r2, r3, #24
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	3310      	adds	r3, #16
 801339a:	b2d2      	uxtb	r2, r2
 801339c:	701a      	strb	r2, [r3, #0]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	699b      	ldr	r3, [r3, #24]
 80133a2:	0c1a      	lsrs	r2, r3, #16
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	3311      	adds	r3, #17
 80133a8:	b2d2      	uxtb	r2, r2
 80133aa:	701a      	strb	r2, [r3, #0]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	699b      	ldr	r3, [r3, #24]
 80133b0:	0a1a      	lsrs	r2, r3, #8
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	3312      	adds	r3, #18
 80133b6:	b2d2      	uxtb	r2, r2
 80133b8:	701a      	strb	r2, [r3, #0]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	699a      	ldr	r2, [r3, #24]
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	3313      	adds	r3, #19
 80133c2:	b2d2      	uxtb	r2, r2
 80133c4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	69db      	ldr	r3, [r3, #28]
 80133ca:	0e1a      	lsrs	r2, r3, #24
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	3314      	adds	r3, #20
 80133d0:	b2d2      	uxtb	r2, r2
 80133d2:	701a      	strb	r2, [r3, #0]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	69db      	ldr	r3, [r3, #28]
 80133d8:	0c1a      	lsrs	r2, r3, #16
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	3315      	adds	r3, #21
 80133de:	b2d2      	uxtb	r2, r2
 80133e0:	701a      	strb	r2, [r3, #0]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	69db      	ldr	r3, [r3, #28]
 80133e6:	0a1a      	lsrs	r2, r3, #8
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	3316      	adds	r3, #22
 80133ec:	b2d2      	uxtb	r2, r2
 80133ee:	701a      	strb	r2, [r3, #0]
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	69da      	ldr	r2, [r3, #28]
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	3317      	adds	r3, #23
 80133f8:	b2d2      	uxtb	r2, r2
 80133fa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6a1b      	ldr	r3, [r3, #32]
 8013400:	0e1a      	lsrs	r2, r3, #24
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	3318      	adds	r3, #24
 8013406:	b2d2      	uxtb	r2, r2
 8013408:	701a      	strb	r2, [r3, #0]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	6a1b      	ldr	r3, [r3, #32]
 801340e:	0c1a      	lsrs	r2, r3, #16
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	3319      	adds	r3, #25
 8013414:	b2d2      	uxtb	r2, r2
 8013416:	701a      	strb	r2, [r3, #0]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6a1b      	ldr	r3, [r3, #32]
 801341c:	0a1a      	lsrs	r2, r3, #8
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	331a      	adds	r3, #26
 8013422:	b2d2      	uxtb	r2, r2
 8013424:	701a      	strb	r2, [r3, #0]
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	6a1a      	ldr	r2, [r3, #32]
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	331b      	adds	r3, #27
 801342e:	b2d2      	uxtb	r2, r2
 8013430:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013436:	2b00      	cmp	r3, #0
 8013438:	d11a      	bne.n	8013470 <mbedtls_sha256_finish_ret+0x264>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801343e:	0e1a      	lsrs	r2, r3, #24
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	331c      	adds	r3, #28
 8013444:	b2d2      	uxtb	r2, r2
 8013446:	701a      	strb	r2, [r3, #0]
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801344c:	0c1a      	lsrs	r2, r3, #16
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	331d      	adds	r3, #29
 8013452:	b2d2      	uxtb	r2, r2
 8013454:	701a      	strb	r2, [r3, #0]
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801345a:	0a1a      	lsrs	r2, r3, #8
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	331e      	adds	r3, #30
 8013460:	b2d2      	uxtb	r2, r2
 8013462:	701a      	strb	r2, [r3, #0]
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	331f      	adds	r3, #31
 801346c:	b2d2      	uxtb	r2, r2
 801346e:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8013470:	2300      	movs	r3, #0
}
 8013472:	4618      	mov	r0, r3
 8013474:	3728      	adds	r7, #40	; 0x28
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	0802483c 	.word	0x0802483c

08013480 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b0a0      	sub	sp, #128	; 0x80
 8013484:	af00      	add	r7, sp, #0
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	60b9      	str	r1, [r7, #8]
 801348a:	607a      	str	r2, [r7, #4]
 801348c:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 801348e:	f107 0310 	add.w	r3, r7, #16
 8013492:	4618      	mov	r0, r3
 8013494:	f7fe f862 	bl	801155c <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8013498:	f107 0310 	add.w	r3, r7, #16
 801349c:	6839      	ldr	r1, [r7, #0]
 801349e:	4618      	mov	r0, r3
 80134a0:	f7fe f88a 	bl	80115b8 <mbedtls_sha256_starts_ret>
 80134a4:	67f8      	str	r0, [r7, #124]	; 0x7c
 80134a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d114      	bne.n	80134d6 <mbedtls_sha256_ret+0x56>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80134ac:	f107 0310 	add.w	r3, r7, #16
 80134b0:	68ba      	ldr	r2, [r7, #8]
 80134b2:	68f9      	ldr	r1, [r7, #12]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7ff fe33 	bl	8013120 <mbedtls_sha256_update_ret>
 80134ba:	67f8      	str	r0, [r7, #124]	; 0x7c
 80134bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d10b      	bne.n	80134da <mbedtls_sha256_ret+0x5a>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 80134c2:	f107 0310 	add.w	r3, r7, #16
 80134c6:	6879      	ldr	r1, [r7, #4]
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7ff fe9f 	bl	801320c <mbedtls_sha256_finish_ret>
 80134ce:	67f8      	str	r0, [r7, #124]	; 0x7c
 80134d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134d2:	2b00      	cmp	r3, #0
        goto exit;

exit:
 80134d4:	e002      	b.n	80134dc <mbedtls_sha256_ret+0x5c>
        goto exit;
 80134d6:	bf00      	nop
 80134d8:	e000      	b.n	80134dc <mbedtls_sha256_ret+0x5c>
        goto exit;
 80134da:	bf00      	nop
    mbedtls_sha256_free( &ctx );
 80134dc:	f107 0310 	add.w	r3, r7, #16
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7fe f848 	bl	8011576 <mbedtls_sha256_free>

    return( ret );
 80134e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 80134e8:	4618      	mov	r0, r3
 80134ea:	3780      	adds	r7, #128	; 0x80
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}

080134f0 <mbedtls_ssl_list_ciphersuites>:
      0, 0, 0, 0, 0 }
};

#if defined(MBEDTLS_SSL_CIPHERSUITES)
const int *mbedtls_ssl_list_ciphersuites( void )
{
 80134f0:	b480      	push	{r7}
 80134f2:	af00      	add	r7, sp, #0
    return( ciphersuite_preference );
 80134f4:	4b02      	ldr	r3, [pc, #8]	; (8013500 <mbedtls_ssl_list_ciphersuites+0x10>)
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	46bd      	mov	sp, r7
 80134fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fe:	4770      	bx	lr
 8013500:	0802487c 	.word	0x0802487c

08013504 <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
 8013504:	b480      	push	{r7}
 8013506:	b085      	sub	sp, #20
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 801350c:	4b0b      	ldr	r3, [pc, #44]	; (801353c <mbedtls_ssl_ciphersuite_from_id+0x38>)
 801350e:	60fb      	str	r3, [r7, #12]

    while( cur->id != 0 )
 8013510:	e009      	b.n	8013526 <mbedtls_ssl_ciphersuite_from_id+0x22>
    {
        if( cur->id == ciphersuite )
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	687a      	ldr	r2, [r7, #4]
 8013518:	429a      	cmp	r2, r3
 801351a:	d101      	bne.n	8013520 <mbedtls_ssl_ciphersuite_from_id+0x1c>
            return( cur );
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	e007      	b.n	8013530 <mbedtls_ssl_ciphersuite_from_id+0x2c>

        cur++;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	3320      	adds	r3, #32
 8013524:	60fb      	str	r3, [r7, #12]
    while( cur->id != 0 )
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d1f1      	bne.n	8013512 <mbedtls_ssl_ciphersuite_from_id+0xe>
    }

    return( NULL );
 801352e:	2300      	movs	r3, #0
}
 8013530:	4618      	mov	r0, r3
 8013532:	3714      	adds	r7, #20
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr
 801353c:	0802488c 	.word	0x0802488c

08013540 <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b084      	sub	sp, #16
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f7ff ffdb 	bl	8013504 <mbedtls_ssl_ciphersuite_from_id>
 801354e:	60f8      	str	r0, [r7, #12]

    if( cur == NULL )
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d101      	bne.n	801355a <mbedtls_ssl_get_ciphersuite_name+0x1a>
        return( "unknown" );
 8013556:	4b04      	ldr	r3, [pc, #16]	; (8013568 <mbedtls_ssl_get_ciphersuite_name+0x28>)
 8013558:	e001      	b.n	801355e <mbedtls_ssl_get_ciphersuite_name+0x1e>

    return( cur->name );
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	685b      	ldr	r3, [r3, #4]
}
 801355e:	4618      	mov	r0, r3
 8013560:	3710      	adds	r7, #16
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	08021a64 	.word	0x08021a64

0801356c <mbedtls_ssl_ciphersuite_cert_req_allowed>:
    }
}
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */

static inline int mbedtls_ssl_ciphersuite_cert_req_allowed( const mbedtls_ssl_ciphersuite_t *info )
{
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
    switch( info->key_exchange )
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	7a9b      	ldrb	r3, [r3, #10]
 8013578:	2b04      	cmp	r3, #4
 801357a:	dc02      	bgt.n	8013582 <mbedtls_ssl_ciphersuite_cert_req_allowed+0x16>
 801357c:	2b00      	cmp	r3, #0
 801357e:	dc03      	bgt.n	8013588 <mbedtls_ssl_ciphersuite_cert_req_allowed+0x1c>
 8013580:	e004      	b.n	801358c <mbedtls_ssl_ciphersuite_cert_req_allowed+0x20>
 8013582:	3b09      	subs	r3, #9
 8013584:	2b01      	cmp	r3, #1
 8013586:	d801      	bhi.n	801358c <mbedtls_ssl_ciphersuite_cert_req_allowed+0x20>
        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( 1 );
 8013588:	2301      	movs	r3, #1
 801358a:	e000      	b.n	801358e <mbedtls_ssl_ciphersuite_cert_req_allowed+0x22>

        default:
            return( 0 );
 801358c:	2300      	movs	r3, #0
    }
}
 801358e:	4618      	mov	r0, r3
 8013590:	370c      	adds	r7, #12
 8013592:	46bd      	mov	sp, r7
 8013594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013598:	4770      	bx	lr

0801359a <mbedtls_ssl_own_key>:
                                mbedtls_md_type_t md );
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
 801359a:	b480      	push	{r7}
 801359c:	b085      	sub	sp, #20
 801359e:	af00      	add	r7, sp, #0
 80135a0:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d009      	beq.n	80135be <mbedtls_ssl_own_key+0x24>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d004      	beq.n	80135be <mbedtls_ssl_own_key+0x24>
        key_cert = ssl->handshake->key_cert;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	60fb      	str	r3, [r7, #12]
 80135bc:	e003      	b.n	80135c6 <mbedtls_ssl_own_key+0x2c>
    else
        key_cert = ssl->conf->key_cert;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135c4:	60fb      	str	r3, [r7, #12]

    return( key_cert == NULL ? NULL : key_cert->key );
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d002      	beq.n	80135d2 <mbedtls_ssl_own_key+0x38>
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	e000      	b.n	80135d4 <mbedtls_ssl_own_key+0x3a>
 80135d2:	2300      	movs	r3, #0
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3714      	adds	r7, #20
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr

080135e0 <mbedtls_ssl_own_cert>:

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
 80135e0:	b480      	push	{r7}
 80135e2:	b085      	sub	sp, #20
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d009      	beq.n	8013604 <mbedtls_ssl_own_cert+0x24>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d004      	beq.n	8013604 <mbedtls_ssl_own_cert+0x24>
        key_cert = ssl->handshake->key_cert;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	60fb      	str	r3, [r7, #12]
 8013602:	e003      	b.n	801360c <mbedtls_ssl_own_cert+0x2c>
    else
        key_cert = ssl->conf->key_cert;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801360a:	60fb      	str	r3, [r7, #12]

    return( key_cert == NULL ? NULL : key_cert->cert );
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d002      	beq.n	8013618 <mbedtls_ssl_own_cert+0x38>
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	e000      	b.n	801361a <mbedtls_ssl_own_cert+0x3a>
 8013618:	2300      	movs	r3, #0
}
 801361a:	4618      	mov	r0, r3
 801361c:	3714      	adds	r7, #20
 801361e:	46bd      	mov	sp, r7
 8013620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013624:	4770      	bx	lr

08013626 <mbedtls_ssl_hs_hdr_len>:
#endif
    return( 5 );
}

static inline size_t mbedtls_ssl_hs_hdr_len( const mbedtls_ssl_context *ssl )
{
 8013626:	b480      	push	{r7}
 8013628:	b083      	sub	sp, #12
 801362a:	af00      	add	r7, sp, #0
 801362c:	6078      	str	r0, [r7, #4]
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        return( 12 );
#else
    ((void) ssl);
#endif
    return( 4 );
 801362e:	2304      	movs	r3, #4
}
 8013630:	4618      	mov	r0, r3
 8013632:	370c      	adds	r7, #12
 8013634:	46bd      	mov	sp, r7
 8013636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363a:	4770      	bx	lr

0801363c <ssl_write_signature_algorithms_ext>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
 801363c:	b590      	push	{r4, r7, lr}
 801363e:	b08d      	sub	sp, #52	; 0x34
 8013640:	af02      	add	r7, sp, #8
 8013642:	60f8      	str	r0, [r7, #12]
 8013644:	60b9      	str	r1, [r7, #8]
 8013646:	607a      	str	r2, [r7, #4]
    unsigned char *p = buf;
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	61fb      	str	r3, [r7, #28]
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013656:	61bb      	str	r3, [r7, #24]
    size_t sig_alg_len = 0;
 8013658:	2300      	movs	r3, #0
 801365a:	627b      	str	r3, [r7, #36]	; 0x24
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	3306      	adds	r3, #6
 8013660:	617b      	str	r3, [r7, #20]
#endif

    *olen = 0;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2200      	movs	r2, #0
 8013666:	601a      	str	r2, [r3, #0]

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013670:	2b03      	cmp	r3, #3
 8013672:	d178      	bne.n	8013766 <ssl_write_signature_algorithms_ext+0x12a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 8013674:	4b3e      	ldr	r3, [pc, #248]	; (8013770 <ssl_write_signature_algorithms_ext+0x134>)
 8013676:	9300      	str	r3, [sp, #0]
 8013678:	23bd      	movs	r3, #189	; 0xbd
 801367a:	4a3e      	ldr	r2, [pc, #248]	; (8013774 <ssl_write_signature_algorithms_ext+0x138>)
 801367c:	2103      	movs	r1, #3
 801367e:	68f8      	ldr	r0, [r7, #12]
 8013680:	f7f8 f810 	bl	800b6a4 <mbedtls_debug_print_msg>

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801368a:	623b      	str	r3, [r7, #32]
 801368c:	e005      	b.n	801369a <ssl_write_signature_algorithms_ext+0x5e>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 801368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013690:	3302      	adds	r3, #2
 8013692:	627b      	str	r3, [r7, #36]	; 0x24
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8013694:	6a3b      	ldr	r3, [r7, #32]
 8013696:	3304      	adds	r3, #4
 8013698:	623b      	str	r3, [r7, #32]
 801369a:	6a3b      	ldr	r3, [r7, #32]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d1f5      	bne.n	801368e <ssl_write_signature_algorithms_ext+0x52>
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 80136a2:	69ba      	ldr	r2, [r7, #24]
 80136a4:	69fb      	ldr	r3, [r7, #28]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d307      	bcc.n	80136ba <ssl_write_signature_algorithms_ext+0x7e>
 80136aa:	69ba      	ldr	r2, [r7, #24]
 80136ac:	69fb      	ldr	r3, [r7, #28]
 80136ae:	1ad3      	subs	r3, r2, r3
 80136b0:	461a      	mov	r2, r3
 80136b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b4:	3306      	adds	r3, #6
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d208      	bcs.n	80136cc <ssl_write_signature_algorithms_ext+0x90>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 80136ba:	4b2f      	ldr	r3, [pc, #188]	; (8013778 <ssl_write_signature_algorithms_ext+0x13c>)
 80136bc:	9300      	str	r3, [sp, #0]
 80136be:	23cb      	movs	r3, #203	; 0xcb
 80136c0:	4a2c      	ldr	r2, [pc, #176]	; (8013774 <ssl_write_signature_algorithms_ext+0x138>)
 80136c2:	2101      	movs	r1, #1
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f7f7 ffed 	bl	800b6a4 <mbedtls_debug_print_msg>
        return;
 80136ca:	e04d      	b.n	8013768 <ssl_write_signature_algorithms_ext+0x12c>
    }

    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;
 80136cc:	2300      	movs	r3, #0
 80136ce:	627b      	str	r3, [r7, #36]	; 0x24

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136d6:	623b      	str	r3, [r7, #32]
 80136d8:	e015      	b.n	8013706 <ssl_write_signature_algorithms_ext+0xca>
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80136da:	6a3b      	ldr	r3, [r7, #32]
 80136dc:	6819      	ldr	r1, [r3, #0]
 80136de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e0:	1c5a      	adds	r2, r3, #1
 80136e2:	627a      	str	r2, [r7, #36]	; 0x24
 80136e4:	697a      	ldr	r2, [r7, #20]
 80136e6:	18d4      	adds	r4, r2, r3
 80136e8:	4608      	mov	r0, r1
 80136ea:	f005 fd41 	bl	8019170 <mbedtls_ssl_hash_from_md_alg>
 80136ee:	4603      	mov	r3, r0
 80136f0:	7023      	strb	r3, [r4, #0]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 80136f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f4:	1c5a      	adds	r2, r3, #1
 80136f6:	627a      	str	r2, [r7, #36]	; 0x24
 80136f8:	697a      	ldr	r2, [r7, #20]
 80136fa:	4413      	add	r3, r2
 80136fc:	2201      	movs	r2, #1
 80136fe:	701a      	strb	r2, [r3, #0]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8013700:	6a3b      	ldr	r3, [r7, #32]
 8013702:	3304      	adds	r3, #4
 8013704:	623b      	str	r3, [r7, #32]
 8013706:	6a3b      	ldr	r3, [r7, #32]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1e5      	bne.n	80136da <ssl_write_signature_algorithms_ext+0x9e>
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 801370e:	69fb      	ldr	r3, [r7, #28]
 8013710:	1c5a      	adds	r2, r3, #1
 8013712:	61fa      	str	r2, [r7, #28]
 8013714:	2200      	movs	r2, #0
 8013716:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	1c5a      	adds	r2, r3, #1
 801371c:	61fa      	str	r2, [r7, #28]
 801371e:	220d      	movs	r2, #13
 8013720:	701a      	strb	r2, [r3, #0]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 8013722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013724:	3302      	adds	r3, #2
 8013726:	0a19      	lsrs	r1, r3, #8
 8013728:	69fb      	ldr	r3, [r7, #28]
 801372a:	1c5a      	adds	r2, r3, #1
 801372c:	61fa      	str	r2, [r7, #28]
 801372e:	b2ca      	uxtb	r2, r1
 8013730:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 8013732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013734:	b2da      	uxtb	r2, r3
 8013736:	69fb      	ldr	r3, [r7, #28]
 8013738:	1c59      	adds	r1, r3, #1
 801373a:	61f9      	str	r1, [r7, #28]
 801373c:	3202      	adds	r2, #2
 801373e:	b2d2      	uxtb	r2, r2
 8013740:	701a      	strb	r2, [r3, #0]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 8013742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013744:	0a19      	lsrs	r1, r3, #8
 8013746:	69fb      	ldr	r3, [r7, #28]
 8013748:	1c5a      	adds	r2, r3, #1
 801374a:	61fa      	str	r2, [r7, #28]
 801374c:	b2ca      	uxtb	r2, r1
 801374e:	701a      	strb	r2, [r3, #0]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	1c5a      	adds	r2, r3, #1
 8013754:	61fa      	str	r2, [r7, #28]
 8013756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013758:	b2d2      	uxtb	r2, r2
 801375a:	701a      	strb	r2, [r3, #0]

    *olen = 6 + sig_alg_len;
 801375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375e:	1d9a      	adds	r2, r3, #6
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	601a      	str	r2, [r3, #0]
 8013764:	e000      	b.n	8013768 <ssl_write_signature_algorithms_ext+0x12c>
        return;
 8013766:	bf00      	nop
}
 8013768:	372c      	adds	r7, #44	; 0x2c
 801376a:	46bd      	mov	sp, r7
 801376c:	bd90      	pop	{r4, r7, pc}
 801376e:	bf00      	nop
 8013770:	08021a98 	.word	0x08021a98
 8013774:	08021a6c 	.word	0x08021a6c
 8013778:	08021acc 	.word	0x08021acc

0801377c <ssl_generate_random>:

/*
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013788:	3388      	adds	r3, #136	; 0x88
 801378a:	60fb      	str	r3, [r7, #12]
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	699b      	ldr	r3, [r3, #24]
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	6812      	ldr	r2, [r2, #0]
 8013796:	69d0      	ldr	r0, [r2, #28]
 8013798:	2204      	movs	r2, #4
 801379a:	68f9      	ldr	r1, [r7, #12]
 801379c:	4798      	blx	r3
 801379e:	60b8      	str	r0, [r7, #8]
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d001      	beq.n	80137aa <ssl_generate_random+0x2e>
        return( ret );
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	e012      	b.n	80137d0 <ssl_generate_random+0x54>

    p += 4;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	3304      	adds	r3, #4
 80137ae:	60fb      	str	r3, [r7, #12]
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	699b      	ldr	r3, [r3, #24]
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	6812      	ldr	r2, [r2, #0]
 80137ba:	69d0      	ldr	r0, [r2, #28]
 80137bc:	221c      	movs	r2, #28
 80137be:	68f9      	ldr	r1, [r7, #12]
 80137c0:	4798      	blx	r3
 80137c2:	60b8      	str	r0, [r7, #8]
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <ssl_generate_random+0x52>
        return( ret );
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	e000      	b.n	80137d0 <ssl_generate_random+0x54>

    return( 0 );
 80137ce:	2300      	movs	r3, #0
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3710      	adds	r7, #16
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <ssl_write_client_hello>:

static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b092      	sub	sp, #72	; 0x48
 80137dc:	af04      	add	r7, sp, #16
 80137de:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i, n, olen, ext_len = 0;
 80137e0:	2300      	movs	r3, #0
 80137e2:	62bb      	str	r3, [r7, #40]	; 0x28
    unsigned char *p, *q;
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 80137e4:	4b98      	ldr	r3, [pc, #608]	; (8013a48 <ssl_write_client_hello+0x270>)
 80137e6:	9300      	str	r3, [sp, #0]
 80137e8:	f240 23da 	movw	r3, #730	; 0x2da
 80137ec:	4a97      	ldr	r2, [pc, #604]	; (8013a4c <ssl_write_client_hello+0x274>)
 80137ee:	2102      	movs	r1, #2
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7f7 ff57 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ssl->conf->f_rng == NULL )
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	699b      	ldr	r3, [r3, #24]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d10a      	bne.n	8013816 <ssl_write_client_hello+0x3e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 8013800:	4b93      	ldr	r3, [pc, #588]	; (8013a50 <ssl_write_client_hello+0x278>)
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	f240 23de 	movw	r3, #734	; 0x2de
 8013808:	4a90      	ldr	r2, [pc, #576]	; (8013a4c <ssl_write_client_hello+0x274>)
 801380a:	2101      	movs	r1, #1
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7f7 ff49 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_NO_RNG );
 8013812:	4b90      	ldr	r3, [pc, #576]	; (8013a54 <ssl_write_client_hello+0x27c>)
 8013814:	e218      	b.n	8013c48 <ssl_write_client_hello+0x470>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801381e:	461a      	mov	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	609a      	str	r2, [r3, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 801382c:	461a      	mov	r2, r3
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	60da      	str	r2, [r3, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801383a:	2b00      	cmp	r3, #0
 801383c:	d10a      	bne.n	8013854 <ssl_write_client_hello+0x7c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 801383e:	4b86      	ldr	r3, [pc, #536]	; (8013a58 <ssl_write_client_hello+0x280>)
 8013840:	9300      	str	r3, [sp, #0]
 8013842:	f44f 733b 	mov.w	r3, #748	; 0x2ec
 8013846:	4a81      	ldr	r2, [pc, #516]	; (8013a4c <ssl_write_client_hello+0x274>)
 8013848:	2101      	movs	r1, #1
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f7f7 ff2a 	bl	800b6a4 <mbedtls_debug_print_msg>
                            "consider using mbedtls_ssl_config_defaults()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8013850:	4b82      	ldr	r3, [pc, #520]	; (8013a5c <ssl_write_client_hello+0x284>)
 8013852:	e1f9      	b.n	8013c48 <ssl_write_client_hello+0x470>
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801385a:	627b      	str	r3, [r7, #36]	; 0x24
    p = buf + 4;
 801385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385e:	3304      	adds	r3, #4
 8013860:	62fb      	str	r3, [r7, #44]	; 0x2c

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801386a:	4618      	mov	r0, r3
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013874:	4619      	mov	r1, r3
                       ssl->conf->transport, p );
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801387e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8013882:	b2db      	uxtb	r3, r3
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8013884:	461a      	mov	r2, r3
 8013886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013888:	f005 fc98 	bl	80191bc <mbedtls_ssl_write_version>
    p += 2;
 801388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388e:	3302      	adds	r3, #2
 8013890:	62fb      	str	r3, [r7, #44]	; 0x2c

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 8013892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013894:	3304      	adds	r3, #4
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	461a      	mov	r2, r3
 801389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389c:	3305      	adds	r3, #5
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	9302      	str	r3, [sp, #8]
 80138a2:	9201      	str	r2, [sp, #4]
 80138a4:	4b6e      	ldr	r3, [pc, #440]	; (8013a60 <ssl_write_client_hello+0x288>)
 80138a6:	9300      	str	r3, [sp, #0]
 80138a8:	f240 23ff 	movw	r3, #767	; 0x2ff
 80138ac:	4a67      	ldr	r2, [pc, #412]	; (8013a4c <ssl_write_client_hello+0x274>)
 80138ae:	2103      	movs	r1, #3
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f7f7 fef7 	bl	800b6a4 <mbedtls_debug_print_msg>
                   buf[4], buf[5] ) );

    if( ( ret = ssl_generate_random( ssl ) ) != 0 )
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7ff ff60 	bl	801377c <ssl_generate_random>
 80138bc:	6238      	str	r0, [r7, #32]
 80138be:	6a3b      	ldr	r3, [r7, #32]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d00c      	beq.n	80138de <ssl_write_client_hello+0x106>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 80138c4:	6a3b      	ldr	r3, [r7, #32]
 80138c6:	9301      	str	r3, [sp, #4]
 80138c8:	4b66      	ldr	r3, [pc, #408]	; (8013a64 <ssl_write_client_hello+0x28c>)
 80138ca:	9300      	str	r3, [sp, #0]
 80138cc:	f44f 7341 	mov.w	r3, #772	; 0x304
 80138d0:	4a5e      	ldr	r2, [pc, #376]	; (8013a4c <ssl_write_client_hello+0x274>)
 80138d2:	2101      	movs	r1, #1
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7f7 ff6b 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 80138da:	6a3b      	ldr	r3, [r7, #32]
 80138dc:	e1b4      	b.n	8013c48 <ssl_write_client_hello+0x470>
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138e2:	3388      	adds	r3, #136	; 0x88
 80138e4:	2220      	movs	r2, #32
 80138e6:	4619      	mov	r1, r3
 80138e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138ea:	f009 ff95 	bl	801d818 <memcpy>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 80138ee:	2320      	movs	r3, #32
 80138f0:	9302      	str	r3, [sp, #8]
 80138f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f4:	9301      	str	r3, [sp, #4]
 80138f6:	4b5c      	ldr	r3, [pc, #368]	; (8013a68 <ssl_write_client_hello+0x290>)
 80138f8:	9300      	str	r3, [sp, #0]
 80138fa:	f240 3309 	movw	r3, #777	; 0x309
 80138fe:	4a53      	ldr	r2, [pc, #332]	; (8013a4c <ssl_write_client_hello+0x274>)
 8013900:	2103      	movs	r1, #3
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f7f7 ffc0 	bl	800b888 <mbedtls_debug_print_buf>
    p += 32;
 8013908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801390a:	3320      	adds	r3, #32
 801390c:	62fb      	str	r3, [r7, #44]	; 0x2c
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013912:	689b      	ldr	r3, [r3, #8]
 8013914:	633b      	str	r3, [r7, #48]	; 0x30

    if( n < 16 || n > 32 ||
 8013916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013918:	2b0f      	cmp	r3, #15
 801391a:	d908      	bls.n	801392e <ssl_write_client_hello+0x156>
 801391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801391e:	2b20      	cmp	r3, #32
 8013920:	d805      	bhi.n	801392e <ssl_write_client_hello+0x156>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013926:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
    if( n < 16 || n > 32 ||
 801392a:	2b00      	cmp	r3, #0
 801392c:	d101      	bne.n	8013932 <ssl_write_client_hello+0x15a>
    {
        n = 0;
 801392e:	2300      	movs	r3, #0
 8013930:	633b      	str	r3, [r7, #48]	; 0x30
            ssl->session_negotiate->id_len = n = 32;
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 8013932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013934:	1c5a      	adds	r2, r3, #1
 8013936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801393a:	b2d2      	uxtb	r2, r2
 801393c:	701a      	strb	r2, [r3, #0]

    for( i = 0; i < n; i++ )
 801393e:	2300      	movs	r3, #0
 8013940:	637b      	str	r3, [r7, #52]	; 0x34
 8013942:	e00c      	b.n	801395e <ssl_write_client_hello+0x186>
        *p++ = ssl->session_negotiate->id[i];
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801394a:	1c5a      	adds	r2, r3, #1
 801394c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801394e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013950:	440a      	add	r2, r1
 8013952:	320c      	adds	r2, #12
 8013954:	7812      	ldrb	r2, [r2, #0]
 8013956:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < n; i++ )
 8013958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801395a:	3301      	adds	r3, #1
 801395c:	637b      	str	r3, [r7, #52]	; 0x34
 801395e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013962:	429a      	cmp	r2, r3
 8013964:	d3ee      	bcc.n	8013944 <ssl_write_client_hello+0x16c>

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 8013966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013968:	9301      	str	r3, [sp, #4]
 801396a:	4b40      	ldr	r3, [pc, #256]	; (8013a6c <ssl_write_client_hello+0x294>)
 801396c:	9300      	str	r3, [sp, #0]
 801396e:	f240 333e 	movw	r3, #830	; 0x33e
 8013972:	4a36      	ldr	r2, [pc, #216]	; (8013a4c <ssl_write_client_hello+0x274>)
 8013974:	2103      	movs	r1, #3
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f7f7 fe94 	bl	800b6a4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 801397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397e:	3327      	adds	r3, #39	; 0x27
 8013980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013982:	9202      	str	r2, [sp, #8]
 8013984:	9301      	str	r3, [sp, #4]
 8013986:	4b3a      	ldr	r3, [pc, #232]	; (8013a70 <ssl_write_client_hello+0x298>)
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	f240 333f 	movw	r3, #831	; 0x33f
 801398e:	4a2f      	ldr	r2, [pc, #188]	; (8013a4c <ssl_write_client_hello+0x274>)
 8013990:	2103      	movs	r1, #3
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f7f7 ff78 	bl	800b888 <mbedtls_debug_print_buf>
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	687a      	ldr	r2, [r7, #4]
 801399e:	68d2      	ldr	r2, [r2, #12]
 80139a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139a4:	61fb      	str	r3, [r7, #28]

    /* Skip writing ciphersuite length for now */
    n = 0;
 80139a6:	2300      	movs	r3, #0
 80139a8:	633b      	str	r3, [r7, #48]	; 0x30
    q = p;
 80139aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ac:	61bb      	str	r3, [r7, #24]
    p += 2;
 80139ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b0:	3302      	adds	r3, #2
 80139b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    for( i = 0; ciphersuites[i] != 0; i++ )
 80139b4:	2300      	movs	r3, #0
 80139b6:	637b      	str	r3, [r7, #52]	; 0x34
 80139b8:	e062      	b.n	8013a80 <ssl_write_client_hello+0x2a8>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 80139ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139bc:	009b      	lsls	r3, r3, #2
 80139be:	69fa      	ldr	r2, [r7, #28]
 80139c0:	4413      	add	r3, r2
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7ff fd9d 	bl	8013504 <mbedtls_ssl_ciphersuite_from_id>
 80139ca:	6138      	str	r0, [r7, #16]

        if( ciphersuite_info == NULL )
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d037      	beq.n	8013a42 <ssl_write_client_hello+0x26a>
            continue;

        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	691b      	ldr	r3, [r3, #16]
 80139d6:	687a      	ldr	r2, [r7, #4]
 80139d8:	6812      	ldr	r2, [r2, #0]
 80139da:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 80139de:	4293      	cmp	r3, r2
 80139e0:	dc4a      	bgt.n	8013a78 <ssl_write_client_hello+0x2a0>
            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	699b      	ldr	r3, [r3, #24]
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	6812      	ldr	r2, [r2, #0]
 80139ea:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 80139ee:	4293      	cmp	r3, r2
 80139f0:	db42      	blt.n	8013a78 <ssl_write_client_hello+0x2a0>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&
            mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )
            continue;
#endif

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 80139f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139f4:	009b      	lsls	r3, r3, #2
 80139f6:	69fa      	ldr	r2, [r7, #28]
 80139f8:	4413      	add	r3, r2
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	9301      	str	r3, [sp, #4]
 80139fe:	4b1d      	ldr	r3, [pc, #116]	; (8013a74 <ssl_write_client_hello+0x29c>)
 8013a00:	9300      	str	r3, [sp, #0]
 8013a02:	f240 3381 	movw	r3, #897	; 0x381
 8013a06:	4a11      	ldr	r2, [pc, #68]	; (8013a4c <ssl_write_client_hello+0x274>)
 8013a08:	2103      	movs	r1, #3
 8013a0a:	6878      	ldr	r0, [r7, #4]
 8013a0c:	f7f7 fe4a 	bl	800b6a4 <mbedtls_debug_print_msg>
                                    ciphersuites[i] ) );

        n++;
 8013a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a12:	3301      	adds	r3, #1
 8013a14:	633b      	str	r3, [r7, #48]	; 0x30
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 8013a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a18:	009b      	lsls	r3, r3, #2
 8013a1a:	69fa      	ldr	r2, [r7, #28]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	1219      	asrs	r1, r3, #8
 8013a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a24:	1c5a      	adds	r2, r3, #1
 8013a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013a28:	b2ca      	uxtb	r2, r1
 8013a2a:	701a      	strb	r2, [r3, #0]
        *p++ = (unsigned char)( ciphersuites[i]      );
 8013a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a2e:	009b      	lsls	r3, r3, #2
 8013a30:	69fa      	ldr	r2, [r7, #28]
 8013a32:	4413      	add	r3, r2
 8013a34:	6819      	ldr	r1, [r3, #0]
 8013a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a38:	1c5a      	adds	r2, r3, #1
 8013a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013a3c:	b2ca      	uxtb	r2, r1
 8013a3e:	701a      	strb	r2, [r3, #0]
 8013a40:	e01b      	b.n	8013a7a <ssl_write_client_hello+0x2a2>
            continue;
 8013a42:	bf00      	nop
 8013a44:	e019      	b.n	8013a7a <ssl_write_client_hello+0x2a2>
 8013a46:	bf00      	nop
 8013a48:	08021ae0 	.word	0x08021ae0
 8013a4c:	08021a6c 	.word	0x08021a6c
 8013a50:	08021af8 	.word	0x08021af8
 8013a54:	ffff8c00 	.word	0xffff8c00
 8013a58:	08021b08 	.word	0x08021b08
 8013a5c:	ffff8f00 	.word	0xffff8f00
 8013a60:	08021b60 	.word	0x08021b60
 8013a64:	08021b84 	.word	0x08021b84
 8013a68:	08021b98 	.word	0x08021b98
 8013a6c:	08021bb4 	.word	0x08021bb4
 8013a70:	08021bd8 	.word	0x08021bd8
 8013a74:	08021bf4 	.word	0x08021bf4
            continue;
 8013a78:	bf00      	nop
    for( i = 0; ciphersuites[i] != 0; i++ )
 8013a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a7c:	3301      	adds	r3, #1
 8013a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8013a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a82:	009b      	lsls	r3, r3, #2
 8013a84:	69fa      	ldr	r2, [r7, #28]
 8013a86:	4413      	add	r3, r2
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d195      	bne.n	80139ba <ssl_write_client_hello+0x1e2>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites (excluding SCSVs)", n ) );
 8013a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a90:	9301      	str	r3, [sp, #4]
 8013a92:	4b6f      	ldr	r3, [pc, #444]	; (8013c50 <ssl_write_client_hello+0x478>)
 8013a94:	9300      	str	r3, [sp, #0]
 8013a96:	f240 3389 	movw	r3, #905	; 0x389
 8013a9a:	4a6e      	ldr	r2, [pc, #440]	; (8013c54 <ssl_write_client_hello+0x47c>)
 8013a9c:	2103      	movs	r1, #3
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f7f7 fe00 	bl	800b6a4 <mbedtls_debug_print_msg>
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
 8013aa4:	4b6c      	ldr	r3, [pc, #432]	; (8013c58 <ssl_write_client_hello+0x480>)
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	f240 3392 	movw	r3, #914	; 0x392
 8013aac:	4a69      	ldr	r2, [pc, #420]	; (8013c54 <ssl_write_client_hello+0x47c>)
 8013aae:	2103      	movs	r1, #3
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f7f7 fdf7 	bl	800b6a4 <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 8013ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab8:	1c5a      	adds	r2, r3, #1
 8013aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013abc:	2200      	movs	r2, #0
 8013abe:	701a      	strb	r2, [r3, #0]
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 8013ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac2:	1c5a      	adds	r2, r3, #1
 8013ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013ac6:	22ff      	movs	r2, #255	; 0xff
 8013ac8:	701a      	strb	r2, [r3, #0]
        n++;
 8013aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013acc:	3301      	adds	r3, #1
 8013ace:	633b      	str	r3, [r7, #48]	; 0x30
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 8013ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad2:	09d9      	lsrs	r1, r3, #7
 8013ad4:	69bb      	ldr	r3, [r7, #24]
 8013ad6:	1c5a      	adds	r2, r3, #1
 8013ad8:	61ba      	str	r2, [r7, #24]
 8013ada:	b2ca      	uxtb	r2, r1
 8013adc:	701a      	strb	r2, [r3, #0]
    *q++ = (unsigned char)( n << 1 );
 8013ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae0:	b2da      	uxtb	r2, r3
 8013ae2:	69bb      	ldr	r3, [r7, #24]
 8013ae4:	1c59      	adds	r1, r3, #1
 8013ae6:	61b9      	str	r1, [r7, #24]
 8013ae8:	0052      	lsls	r2, r2, #1
 8013aea:	b2d2      	uxtb	r2, r2
 8013aec:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_ZLIB_SUPPORT)
    offer_compress = 1;
#else
    offer_compress = 0;
 8013aee:	2300      	movs	r3, #0
 8013af0:	75fb      	strb	r3, [r7, #23]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        offer_compress = 0;
#endif

    if( offer_compress )
 8013af2:	7dfb      	ldrb	r3, [r7, #23]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d027      	beq.n	8013b48 <ssl_write_client_hello+0x370>
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 2 ) );
 8013af8:	2302      	movs	r3, #2
 8013afa:	9301      	str	r3, [sp, #4]
 8013afc:	4b57      	ldr	r3, [pc, #348]	; (8013c5c <ssl_write_client_hello+0x484>)
 8013afe:	9300      	str	r3, [sp, #0]
 8013b00:	f240 33b9 	movw	r3, #953	; 0x3b9
 8013b04:	4a53      	ldr	r2, [pc, #332]	; (8013c54 <ssl_write_client_hello+0x47c>)
 8013b06:	2103      	movs	r1, #3
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f7f7 fdcb 	bl	800b6a4 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d %d",
 8013b0e:	2300      	movs	r3, #0
 8013b10:	9302      	str	r3, [sp, #8]
 8013b12:	2301      	movs	r3, #1
 8013b14:	9301      	str	r3, [sp, #4]
 8013b16:	4b52      	ldr	r3, [pc, #328]	; (8013c60 <ssl_write_client_hello+0x488>)
 8013b18:	9300      	str	r3, [sp, #0]
 8013b1a:	f240 33ba 	movw	r3, #954	; 0x3ba
 8013b1e:	4a4d      	ldr	r2, [pc, #308]	; (8013c54 <ssl_write_client_hello+0x47c>)
 8013b20:	2103      	movs	r1, #3
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f7f7 fdbe 	bl	800b6a4 <mbedtls_debug_print_msg>
                            MBEDTLS_SSL_COMPRESS_DEFLATE, MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 2;
 8013b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b2a:	1c5a      	adds	r2, r3, #1
 8013b2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013b2e:	2202      	movs	r2, #2
 8013b30:	701a      	strb	r2, [r3, #0]
        *p++ = MBEDTLS_SSL_COMPRESS_DEFLATE;
 8013b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b34:	1c5a      	adds	r2, r3, #1
 8013b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013b38:	2201      	movs	r2, #1
 8013b3a:	701a      	strb	r2, [r3, #0]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 8013b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b3e:	1c5a      	adds	r2, r3, #1
 8013b40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013b42:	2200      	movs	r2, #0
 8013b44:	701a      	strb	r2, [r3, #0]
 8013b46:	e01f      	b.n	8013b88 <ssl_write_client_hello+0x3b0>
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 8013b48:	2301      	movs	r3, #1
 8013b4a:	9301      	str	r3, [sp, #4]
 8013b4c:	4b43      	ldr	r3, [pc, #268]	; (8013c5c <ssl_write_client_hello+0x484>)
 8013b4e:	9300      	str	r3, [sp, #0]
 8013b50:	f240 33c3 	movw	r3, #963	; 0x3c3
 8013b54:	4a3f      	ldr	r2, [pc, #252]	; (8013c54 <ssl_write_client_hello+0x47c>)
 8013b56:	2103      	movs	r1, #3
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f7f7 fda3 	bl	800b6a4 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 8013b5e:	2300      	movs	r3, #0
 8013b60:	9301      	str	r3, [sp, #4]
 8013b62:	4b40      	ldr	r3, [pc, #256]	; (8013c64 <ssl_write_client_hello+0x48c>)
 8013b64:	9300      	str	r3, [sp, #0]
 8013b66:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 8013b6a:	4a3a      	ldr	r2, [pc, #232]	; (8013c54 <ssl_write_client_hello+0x47c>)
 8013b6c:	2103      	movs	r1, #3
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7f7 fd98 	bl	800b6a4 <mbedtls_debug_print_msg>
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 8013b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b76:	1c5a      	adds	r2, r3, #1
 8013b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	701a      	strb	r2, [r3, #0]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 8013b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b80:	1c5a      	adds	r2, r3, #1
 8013b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013b84:	2200      	movs	r2, #0
 8013b86:	701a      	strb	r2, [r3, #0]
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 8013b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8a:	3302      	adds	r3, #2
 8013b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b8e:	4413      	add	r3, r2
 8013b90:	f107 020c 	add.w	r2, r7, #12
 8013b94:	4619      	mov	r1, r3
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f7ff fd50 	bl	801363c <ssl_write_signature_algorithms_ext>
    ext_len += olen;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ba0:	4413      	add	r3, r2
 8013ba2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    /* olen unused if all extensions are disabled */
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 8013ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba6:	9301      	str	r3, [sp, #4]
 8013ba8:	4b2f      	ldr	r3, [pc, #188]	; (8013c68 <ssl_write_client_hello+0x490>)
 8013baa:	9300      	str	r3, [sp, #0]
 8013bac:	f240 430e 	movw	r3, #1038	; 0x40e
 8013bb0:	4a28      	ldr	r2, [pc, #160]	; (8013c54 <ssl_write_client_hello+0x47c>)
 8013bb2:	2103      	movs	r1, #3
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f7f7 fd75 	bl	800b6a4 <mbedtls_debug_print_msg>
                   ext_len ) );

    if( ext_len > 0 )
 8013bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d010      	beq.n	8013be2 <ssl_write_client_hello+0x40a>
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 8013bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc2:	0a19      	lsrs	r1, r3, #8
 8013bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc6:	1c5a      	adds	r2, r3, #1
 8013bc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013bca:	b2ca      	uxtb	r2, r1
 8013bcc:	701a      	strb	r2, [r3, #0]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 8013bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd0:	1c5a      	adds	r2, r3, #1
 8013bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bd6:	b2d2      	uxtb	r2, r2
 8013bd8:	701a      	strb	r2, [r3, #0]
        p += ext_len;
 8013bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bde:	4413      	add	r3, r2
 8013be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    ssl->out_msglen  = p - buf;
 8013be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be6:	1ad3      	subs	r3, r2, r3
 8013be8:	461a      	mov	r2, r3
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2216      	movs	r2, #22
 8013bf4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013bfe:	2201      	movs	r2, #1
 8013c00:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	1c5a      	adds	r2, r3, #1
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f003 f9ef 	bl	8016ff0 <mbedtls_ssl_write_record>
 8013c12:	6238      	str	r0, [r7, #32]
 8013c14:	6a3b      	ldr	r3, [r7, #32]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d00c      	beq.n	8013c34 <ssl_write_client_hello+0x45c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8013c1a:	6a3b      	ldr	r3, [r7, #32]
 8013c1c:	9301      	str	r3, [sp, #4]
 8013c1e:	4b13      	ldr	r3, [pc, #76]	; (8013c6c <ssl_write_client_hello+0x494>)
 8013c20:	9300      	str	r3, [sp, #0]
 8013c22:	f240 4325 	movw	r3, #1061	; 0x425
 8013c26:	4a0b      	ldr	r2, [pc, #44]	; (8013c54 <ssl_write_client_hello+0x47c>)
 8013c28:	2101      	movs	r1, #1
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f7f7 fdc0 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8013c30:	6a3b      	ldr	r3, [r7, #32]
 8013c32:	e009      	b.n	8013c48 <ssl_write_client_hello+0x470>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 8013c34:	4b0e      	ldr	r3, [pc, #56]	; (8013c70 <ssl_write_client_hello+0x498>)
 8013c36:	9300      	str	r3, [sp, #0]
 8013c38:	f240 4329 	movw	r3, #1065	; 0x429
 8013c3c:	4a05      	ldr	r2, [pc, #20]	; (8013c54 <ssl_write_client_hello+0x47c>)
 8013c3e:	2102      	movs	r1, #2
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f7f7 fd2f 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8013c46:	2300      	movs	r3, #0
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3738      	adds	r7, #56	; 0x38
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	08021c18 	.word	0x08021c18
 8013c54:	08021a6c 	.word	0x08021a6c
 8013c58:	08021c4c 	.word	0x08021c4c
 8013c5c:	08021c74 	.word	0x08021c74
 8013c60:	08021c94 	.word	0x08021c94
 8013c64:	08021cb8 	.word	0x08021cb8
 8013c68:	08021cd8 	.word	0x08021cd8
 8013c6c:	08021d04 	.word	0x08021d04
 8013c70:	08021d20 	.word	0x08021d20

08013c74 <ssl_parse_renegotiation_info>:

static int ssl_parse_renegotiation_info( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b086      	sub	sp, #24
 8013c78:	af02      	add	r7, sp, #8
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2b01      	cmp	r3, #1
 8013c84:	d103      	bne.n	8013c8e <ssl_parse_renegotiation_info+0x1a>
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d00f      	beq.n	8013cae <ssl_parse_renegotiation_info+0x3a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 8013c8e:	4b0c      	ldr	r3, [pc, #48]	; (8013cc0 <ssl_parse_renegotiation_info+0x4c>)
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	f44f 6389 	mov.w	r3, #1096	; 0x448
 8013c96:	4a0b      	ldr	r2, [pc, #44]	; (8013cc4 <ssl_parse_renegotiation_info+0x50>)
 8013c98:	2101      	movs	r1, #1
 8013c9a:	68f8      	ldr	r0, [r7, #12]
 8013c9c:	f7f7 fd02 	bl	800b6a4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013ca0:	2228      	movs	r2, #40	; 0x28
 8013ca2:	2102      	movs	r1, #2
 8013ca4:	68f8      	ldr	r0, [r7, #12]
 8013ca6:	f003 fe4d 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8013caa:	4b07      	ldr	r3, [pc, #28]	; (8013cc8 <ssl_parse_renegotiation_info+0x54>)
 8013cac:	e004      	b.n	8013cb8 <ssl_parse_renegotiation_info+0x44>
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    return( 0 );
 8013cb6:	2300      	movs	r3, #0
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3710      	adds	r7, #16
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	08021d38 	.word	0x08021d38
 8013cc4:	08021a6c 	.word	0x08021a6c
 8013cc8:	ffff8680 	.word	0xffff8680

08013ccc <ssl_parse_server_hello>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

static int ssl_parse_server_hello( mbedtls_ssl_context *ssl )
{
 8013ccc:	b5b0      	push	{r4, r5, r7, lr}
 8013cce:	b096      	sub	sp, #88	; 0x58
 8013cd0:	af08      	add	r7, sp, #32
 8013cd2:	6078      	str	r0, [r7, #4]
    int accept_comp;
#endif
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    int renegotiation_info_seen = 0;
#endif
    int handshake_failure = 0;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 8013cd8:	4b87      	ldr	r3, [pc, #540]	; (8013ef8 <ssl_parse_server_hello+0x22c>)
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	f240 53b2 	movw	r3, #1458	; 0x5b2
 8013ce0:	4a86      	ldr	r2, [pc, #536]	; (8013efc <ssl_parse_server_hello+0x230>)
 8013ce2:	2102      	movs	r1, #2
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f7f7 fcdd 	bl	800b6a4 <mbedtls_debug_print_msg>

    buf = ssl->in_msg;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013cee:	627b      	str	r3, [r7, #36]	; 0x24

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f003 fc8b 	bl	801760c <mbedtls_ssl_read_record>
 8013cf6:	6238      	str	r0, [r7, #32]
 8013cf8:	6a3b      	ldr	r3, [r7, #32]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d00c      	beq.n	8013d18 <ssl_parse_server_hello+0x4c>
    {
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8013cfe:	6a3b      	ldr	r3, [r7, #32]
 8013d00:	9301      	str	r3, [sp, #4]
 8013d02:	4b7f      	ldr	r3, [pc, #508]	; (8013f00 <ssl_parse_server_hello+0x234>)
 8013d04:	9300      	str	r3, [sp, #0]
 8013d06:	f240 53b9 	movw	r3, #1465	; 0x5b9
 8013d0a:	4a7c      	ldr	r2, [pc, #496]	; (8013efc <ssl_parse_server_hello+0x230>)
 8013d0c:	2101      	movs	r1, #1
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7f7 fd4e 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8013d14:	6a3b      	ldr	r3, [r7, #32]
 8013d16:	e384      	b.n	8014422 <ssl_parse_server_hello+0x756>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d1c:	2b16      	cmp	r3, #22
 8013d1e:	d00f      	beq.n	8013d40 <ssl_parse_server_hello+0x74>
            ssl->keep_current_message = 1;
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8013d20:	4b78      	ldr	r3, [pc, #480]	; (8013f04 <ssl_parse_server_hello+0x238>)
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	f240 53d3 	movw	r3, #1491	; 0x5d3
 8013d28:	4a74      	ldr	r2, [pc, #464]	; (8013efc <ssl_parse_server_hello+0x230>)
 8013d2a:	2101      	movs	r1, #1
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f7f7 fcb9 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013d32:	220a      	movs	r2, #10
 8013d34:	2102      	movs	r1, #2
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f003 fe04 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8013d3c:	4b72      	ldr	r3, [pc, #456]	; (8013f08 <ssl_parse_server_hello+0x23c>)
 8013d3e:	e370      	b.n	8014422 <ssl_parse_server_hello+0x756>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f7ff fc6e 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	3326      	adds	r3, #38	; 0x26
 8013d4e:	429c      	cmp	r4, r3
 8013d50:	d303      	bcc.n	8013d5a <ssl_parse_server_hello+0x8e>
        buf[0] != MBEDTLS_SSL_HS_SERVER_HELLO )
 8013d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d54:	781b      	ldrb	r3, [r3, #0]
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 8013d56:	2b02      	cmp	r3, #2
 8013d58:	d00f      	beq.n	8013d7a <ssl_parse_server_hello+0xae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8013d5a:	4b6a      	ldr	r3, [pc, #424]	; (8013f04 <ssl_parse_server_hello+0x238>)
 8013d5c:	9300      	str	r3, [sp, #0]
 8013d5e:	f240 53ef 	movw	r3, #1519	; 0x5ef
 8013d62:	4a66      	ldr	r2, [pc, #408]	; (8013efc <ssl_parse_server_hello+0x230>)
 8013d64:	2101      	movs	r1, #1
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f7f7 fc9c 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013d6c:	2232      	movs	r2, #50	; 0x32
 8013d6e:	2102      	movs	r1, #2
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f003 fde7 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8013d76:	4b65      	ldr	r3, [pc, #404]	; (8013f0c <ssl_parse_server_hello+0x240>)
 8013d78:	e353      	b.n	8014422 <ssl_parse_server_hello+0x756>
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f7ff fc53 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8013d80:	4602      	mov	r2, r0
 8013d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d84:	4413      	add	r3, r2
 8013d86:	627b      	str	r3, [r7, #36]	; 0x24

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 8013d88:	2302      	movs	r3, #2
 8013d8a:	9302      	str	r3, [sp, #8]
 8013d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8e:	9301      	str	r3, [sp, #4]
 8013d90:	4b5f      	ldr	r3, [pc, #380]	; (8013f10 <ssl_parse_server_hello+0x244>)
 8013d92:	9300      	str	r3, [sp, #0]
 8013d94:	f240 6302 	movw	r3, #1538	; 0x602
 8013d98:	4a58      	ldr	r2, [pc, #352]	; (8013efc <ssl_parse_server_hello+0x230>)
 8013d9a:	2103      	movs	r1, #3
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f7f7 fd73 	bl	800b888 <mbedtls_debug_print_buf>
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f103 0008 	add.w	r0, r3, #8
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f103 010c 	add.w	r1, r3, #12
                      ssl->conf->transport, buf + 0 );
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013db6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8013dba:	b2db      	uxtb	r3, r3
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc0:	f005 fa12 	bl	80191e8 <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	689b      	ldr	r3, [r3, #8]
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	6812      	ldr	r2, [r2, #0]
 8013dcc:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	db17      	blt.n	8013e04 <ssl_parse_server_hello+0x138>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	68db      	ldr	r3, [r3, #12]
 8013dd8:	687a      	ldr	r2, [r7, #4]
 8013dda:	6812      	ldr	r2, [r2, #0]
 8013ddc:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8013de0:	4293      	cmp	r3, r2
 8013de2:	db0f      	blt.n	8013e04 <ssl_parse_server_hello+0x138>
        ssl->major_ver > ssl->conf->max_major_ver ||
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	689b      	ldr	r3, [r3, #8]
 8013de8:	687a      	ldr	r2, [r7, #4]
 8013dea:	6812      	ldr	r2, [r2, #0]
 8013dec:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8013df0:	4293      	cmp	r3, r2
 8013df2:	dc07      	bgt.n	8013e04 <ssl_parse_server_hello+0x138>
        ssl->minor_ver > ssl->conf->max_minor_ver )
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	687a      	ldr	r2, [r7, #4]
 8013dfa:	6812      	ldr	r2, [r2, #0]
 8013dfc:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
        ssl->major_ver > ssl->conf->max_major_ver ||
 8013e00:	4293      	cmp	r3, r2
 8013e02:	dd2c      	ble.n	8013e5e <ssl_parse_server_hello+0x192>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8013e16:	461c      	mov	r4, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	689b      	ldr	r3, [r3, #8]
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	68d2      	ldr	r2, [r2, #12]
 8013e20:	6879      	ldr	r1, [r7, #4]
 8013e22:	6809      	ldr	r1, [r1, #0]
 8013e24:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
 8013e28:	460d      	mov	r5, r1
 8013e2a:	6879      	ldr	r1, [r7, #4]
 8013e2c:	6809      	ldr	r1, [r1, #0]
 8013e2e:	f891 104d 	ldrb.w	r1, [r1, #77]	; 0x4d
 8013e32:	9106      	str	r1, [sp, #24]
 8013e34:	9505      	str	r5, [sp, #20]
 8013e36:	9204      	str	r2, [sp, #16]
 8013e38:	9303      	str	r3, [sp, #12]
 8013e3a:	9402      	str	r4, [sp, #8]
 8013e3c:	9001      	str	r0, [sp, #4]
 8013e3e:	4b35      	ldr	r3, [pc, #212]	; (8013f14 <ssl_parse_server_hello+0x248>)
 8013e40:	9300      	str	r3, [sp, #0]
 8013e42:	f240 630b 	movw	r3, #1547	; 0x60b
 8013e46:	4a2d      	ldr	r2, [pc, #180]	; (8013efc <ssl_parse_server_hello+0x230>)
 8013e48:	2101      	movs	r1, #1
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f7f7 fc2a 	bl	800b6a4 <mbedtls_debug_print_msg>
                            " min: [%d:%d], server: [%d:%d], max: [%d:%d]",
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013e50:	2246      	movs	r2, #70	; 0x46
 8013e52:	2102      	movs	r1, #2
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f003 fd75 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 8013e5a:	4b2f      	ldr	r3, [pc, #188]	; (8013f18 <ssl_parse_server_hello+0x24c>)
 8013e5c:	e2e1      	b.n	8014422 <ssl_parse_server_hello+0x756>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu",
 8013e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e60:	3302      	adds	r3, #2
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	061a      	lsls	r2, r3, #24
 8013e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e68:	3303      	adds	r3, #3
 8013e6a:	781b      	ldrb	r3, [r3, #0]
 8013e6c:	041b      	lsls	r3, r3, #16
 8013e6e:	431a      	orrs	r2, r3
 8013e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e72:	3304      	adds	r3, #4
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	021b      	lsls	r3, r3, #8
 8013e78:	4313      	orrs	r3, r2
 8013e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e7c:	3205      	adds	r2, #5
 8013e7e:	7812      	ldrb	r2, [r2, #0]
 8013e80:	4313      	orrs	r3, r2
 8013e82:	9301      	str	r3, [sp, #4]
 8013e84:	4b25      	ldr	r3, [pc, #148]	; (8013f1c <ssl_parse_server_hello+0x250>)
 8013e86:	9300      	str	r3, [sp, #0]
 8013e88:	f240 6317 	movw	r3, #1559	; 0x617
 8013e8c:	4a1b      	ldr	r2, [pc, #108]	; (8013efc <ssl_parse_server_hello+0x230>)
 8013e8e:	2103      	movs	r1, #3
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f7f7 fc07 	bl	800b6a4 <mbedtls_debug_print_msg>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e9a:	3388      	adds	r3, #136	; 0x88
 8013e9c:	f103 0020 	add.w	r0, r3, #32
 8013ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea2:	3302      	adds	r3, #2
 8013ea4:	2220      	movs	r2, #32
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	f009 fcb6 	bl	801d818 <memcpy>

    n = buf[34];
 8013eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eae:	3322      	adds	r3, #34	; 0x22
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	61fb      	str	r3, [r7, #28]

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb6:	3302      	adds	r3, #2
 8013eb8:	2220      	movs	r2, #32
 8013eba:	9202      	str	r2, [sp, #8]
 8013ebc:	9301      	str	r3, [sp, #4]
 8013ebe:	4b18      	ldr	r3, [pc, #96]	; (8013f20 <ssl_parse_server_hello+0x254>)
 8013ec0:	9300      	str	r3, [sp, #0]
 8013ec2:	f240 6321 	movw	r3, #1569	; 0x621
 8013ec6:	4a0d      	ldr	r2, [pc, #52]	; (8013efc <ssl_parse_server_hello+0x230>)
 8013ec8:	2103      	movs	r1, #3
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f7f7 fcdc 	bl	800b888 <mbedtls_debug_print_buf>

    if( n > 32 )
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	2b20      	cmp	r3, #32
 8013ed4:	d926      	bls.n	8013f24 <ssl_parse_server_hello+0x258>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8013ed6:	4b0b      	ldr	r3, [pc, #44]	; (8013f04 <ssl_parse_server_hello+0x238>)
 8013ed8:	9300      	str	r3, [sp, #0]
 8013eda:	f240 6325 	movw	r3, #1573	; 0x625
 8013ede:	4a07      	ldr	r2, [pc, #28]	; (8013efc <ssl_parse_server_hello+0x230>)
 8013ee0:	2101      	movs	r1, #1
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f7f7 fbde 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013ee8:	2232      	movs	r2, #50	; 0x32
 8013eea:	2102      	movs	r1, #2
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f003 fd29 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8013ef2:	4b06      	ldr	r3, [pc, #24]	; (8013f0c <ssl_parse_server_hello+0x240>)
 8013ef4:	e295      	b.n	8014422 <ssl_parse_server_hello+0x756>
 8013ef6:	bf00      	nop
 8013ef8:	08021d5c 	.word	0x08021d5c
 8013efc:	08021a6c 	.word	0x08021a6c
 8013f00:	08021d74 	.word	0x08021d74
 8013f04:	08021d8c 	.word	0x08021d8c
 8013f08:	ffff8900 	.word	0xffff8900
 8013f0c:	ffff8680 	.word	0xffff8680
 8013f10:	08021da8 	.word	0x08021da8
 8013f14:	08021dc0 	.word	0x08021dc0
 8013f18:	ffff9180 	.word	0xffff9180
 8013f1c:	08021e0c 	.word	0x08021e0c
 8013f20:	08021e2c 	.word	0x08021e2c
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f7ff fb7c 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8013f2e:	4602      	mov	r2, r0
 8013f30:	69fb      	ldr	r3, [r7, #28]
 8013f32:	4413      	add	r3, r2
 8013f34:	3327      	adds	r3, #39	; 0x27
 8013f36:	429c      	cmp	r4, r3
 8013f38:	d92f      	bls.n	8013f9a <ssl_parse_server_hello+0x2ce>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 8013f3a:	69fb      	ldr	r3, [r7, #28]
 8013f3c:	3326      	adds	r3, #38	; 0x26
 8013f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f40:	4413      	add	r3, r2
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	021b      	lsls	r3, r3, #8
                  | ( buf[39 + n]       ) );
 8013f46:	69fa      	ldr	r2, [r7, #28]
 8013f48:	3227      	adds	r2, #39	; 0x27
 8013f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f4c:	440a      	add	r2, r1
 8013f4e:	7812      	ldrb	r2, [r2, #0]
 8013f50:	4313      	orrs	r3, r2
        ext_len = ( ( buf[38 + n] <<  8 )
 8013f52:	633b      	str	r3, [r7, #48]	; 0x30

        if( ( ext_len > 0 && ext_len < 4 ) ||
 8013f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d002      	beq.n	8013f60 <ssl_parse_server_hello+0x294>
 8013f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f5c:	2b03      	cmp	r3, #3
 8013f5e:	d90c      	bls.n	8013f7a <ssl_parse_server_hello+0x2ae>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f7ff fb5e 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	69fb      	ldr	r3, [r7, #28]
 8013f6e:	441a      	add	r2, r3
 8013f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f72:	4413      	add	r3, r2
 8013f74:	3328      	adds	r3, #40	; 0x28
        if( ( ext_len > 0 && ext_len < 4 ) ||
 8013f76:	429c      	cmp	r4, r3
 8013f78:	d02d      	beq.n	8013fd6 <ssl_parse_server_hello+0x30a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8013f7a:	4b80      	ldr	r3, [pc, #512]	; (801417c <ssl_parse_server_hello+0x4b0>)
 8013f7c:	9300      	str	r3, [sp, #0]
 8013f7e:	f240 6333 	movw	r3, #1587	; 0x633
 8013f82:	4a7f      	ldr	r2, [pc, #508]	; (8014180 <ssl_parse_server_hello+0x4b4>)
 8013f84:	2101      	movs	r1, #1
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7f7 fb8c 	bl	800b6a4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013f8c:	2232      	movs	r2, #50	; 0x32
 8013f8e:	2102      	movs	r1, #2
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f003 fcd7 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8013f96:	4b7b      	ldr	r3, [pc, #492]	; (8014184 <ssl_parse_server_hello+0x4b8>)
 8013f98:	e243      	b.n	8014422 <ssl_parse_server_hello+0x756>
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f7ff fb41 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	69fb      	ldr	r3, [r7, #28]
 8013fa8:	4413      	add	r3, r2
 8013faa:	3326      	adds	r3, #38	; 0x26
 8013fac:	429c      	cmp	r4, r3
 8013fae:	d102      	bne.n	8013fb6 <ssl_parse_server_hello+0x2ea>
    {
        ext_len = 0;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8013fb4:	e00f      	b.n	8013fd6 <ssl_parse_server_hello+0x30a>
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8013fb6:	4b71      	ldr	r3, [pc, #452]	; (801417c <ssl_parse_server_hello+0x4b0>)
 8013fb8:	9300      	str	r3, [sp, #0]
 8013fba:	f240 633f 	movw	r3, #1599	; 0x63f
 8013fbe:	4a70      	ldr	r2, [pc, #448]	; (8014180 <ssl_parse_server_hello+0x4b4>)
 8013fc0:	2101      	movs	r1, #1
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f7f7 fb6e 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8013fc8:	2232      	movs	r2, #50	; 0x32
 8013fca:	2102      	movs	r1, #2
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f003 fcb9 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8013fd2:	4b6c      	ldr	r3, [pc, #432]	; (8014184 <ssl_parse_server_hello+0x4b8>)
 8013fd4:	e225      	b.n	8014422 <ssl_parse_server_hello+0x756>
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 8013fd6:	69fb      	ldr	r3, [r7, #28]
 8013fd8:	3323      	adds	r3, #35	; 0x23
 8013fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fdc:	4413      	add	r3, r2
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	021b      	lsls	r3, r3, #8
 8013fe2:	69fa      	ldr	r2, [r7, #28]
 8013fe4:	3224      	adds	r2, #36	; 0x24
 8013fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013fe8:	440a      	add	r2, r1
 8013fea:	7812      	ldrb	r2, [r2, #0]
 8013fec:	4313      	orrs	r3, r2
 8013fee:	637b      	str	r3, [r7, #52]	; 0x34

    /*
     * Read and check compression
     */
    comp = buf[37 + n];
 8013ff0:	69fb      	ldr	r3, [r7, #28]
 8013ff2:	3325      	adds	r3, #37	; 0x25
 8013ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ff6:	4413      	add	r3, r2
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	76fb      	strb	r3, [r7, #27]
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 8013ffc:	7efb      	ldrb	r3, [r7, #27]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d011      	beq.n	8014026 <ssl_parse_server_hello+0x35a>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 8014002:	7efb      	ldrb	r3, [r7, #27]
 8014004:	9301      	str	r3, [sp, #4]
 8014006:	4b60      	ldr	r3, [pc, #384]	; (8014188 <ssl_parse_server_hello+0x4bc>)
 8014008:	9300      	str	r3, [sp, #0]
 801400a:	f240 635c 	movw	r3, #1628	; 0x65c
 801400e:	4a5c      	ldr	r2, [pc, #368]	; (8014180 <ssl_parse_server_hello+0x4b4>)
 8014010:	2101      	movs	r1, #1
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f7f7 fb46 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014018:	222f      	movs	r2, #47	; 0x2f
 801401a:	2102      	movs	r1, #2
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f003 fc91 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 8014022:	4b5a      	ldr	r3, [pc, #360]	; (801418c <ssl_parse_server_hello+0x4c0>)
 8014024:	e1fd      	b.n	8014422 <ssl_parse_server_hello+0x756>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801402a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801402c:	f7ff fa6a 	bl	8013504 <mbedtls_ssl_ciphersuite_from_id>
 8014030:	4603      	mov	r3, r0
 8014032:	6023      	str	r3, [r4, #0]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d111      	bne.n	8014062 <ssl_parse_server_hello+0x396>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 801403e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014040:	9301      	str	r3, [sp, #4]
 8014042:	4b53      	ldr	r3, [pc, #332]	; (8014190 <ssl_parse_server_hello+0x4c4>)
 8014044:	9300      	str	r3, [sp, #0]
 8014046:	f240 6369 	movw	r3, #1641	; 0x669
 801404a:	4a4d      	ldr	r2, [pc, #308]	; (8014180 <ssl_parse_server_hello+0x4b4>)
 801404c:	2101      	movs	r1, #1
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f7f7 fb28 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014054:	2250      	movs	r2, #80	; 0x50
 8014056:	2102      	movs	r1, #2
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f003 fc73 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801405e:	4b4d      	ldr	r3, [pc, #308]	; (8014194 <ssl_parse_server_hello+0x4c8>)
 8014060:	e1df      	b.n	8014422 <ssl_parse_server_hello+0x756>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4619      	mov	r1, r3
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f004 f9a6 	bl	80183bc <mbedtls_ssl_optimize_checksum>

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 8014070:	69fb      	ldr	r3, [r7, #28]
 8014072:	9301      	str	r3, [sp, #4]
 8014074:	4b48      	ldr	r3, [pc, #288]	; (8014198 <ssl_parse_server_hello+0x4cc>)
 8014076:	9300      	str	r3, [sp, #0]
 8014078:	f240 6371 	movw	r3, #1649	; 0x671
 801407c:	4a40      	ldr	r2, [pc, #256]	; (8014180 <ssl_parse_server_hello+0x4b4>)
 801407e:	2103      	movs	r1, #3
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f7f7 fb0f 	bl	800b6a4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 8014086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014088:	3323      	adds	r3, #35	; 0x23
 801408a:	69fa      	ldr	r2, [r7, #28]
 801408c:	9202      	str	r2, [sp, #8]
 801408e:	9301      	str	r3, [sp, #4]
 8014090:	4b42      	ldr	r3, [pc, #264]	; (801419c <ssl_parse_server_hello+0x4d0>)
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	f240 6372 	movw	r3, #1650	; 0x672
 8014098:	4a39      	ldr	r2, [pc, #228]	; (8014180 <ssl_parse_server_hello+0x4b4>)
 801409a:	2103      	movs	r1, #3
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f7f7 fbf3 	bl	800b888 <mbedtls_debug_print_buf>

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140a6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d021      	beq.n	80140f2 <ssl_parse_server_hello+0x426>
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d01e      	beq.n	80140f2 <ssl_parse_server_hello+0x426>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b8:	681b      	ldr	r3, [r3, #0]
    if( ssl->handshake->resume == 0 || n == 0 ||
 80140ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140bc:	429a      	cmp	r2, r3
 80140be:	d118      	bne.n	80140f2 <ssl_parse_server_hello+0x426>
        ssl->session_negotiate->compression != comp ||
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140c4:	685a      	ldr	r2, [r3, #4]
 80140c6:	7efb      	ldrb	r3, [r7, #27]
        ssl->session_negotiate->ciphersuite != i ||
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d112      	bne.n	80140f2 <ssl_parse_server_hello+0x426>
        ssl->session_negotiate->id_len != n ||
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140d0:	689b      	ldr	r3, [r3, #8]
        ssl->session_negotiate->compression != comp ||
 80140d2:	69fa      	ldr	r2, [r7, #28]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d10c      	bne.n	80140f2 <ssl_parse_server_hello+0x426>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140dc:	f103 000c 	add.w	r0, r3, #12
 80140e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e2:	3323      	adds	r3, #35	; 0x23
 80140e4:	69fa      	ldr	r2, [r7, #28]
 80140e6:	4619      	mov	r1, r3
 80140e8:	f009 fb86 	bl	801d7f8 <memcmp>
 80140ec:	4603      	mov	r3, r0
        ssl->session_negotiate->id_len != n ||
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d020      	beq.n	8014134 <ssl_parse_server_hello+0x468>
    {
        ssl->state++;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	1c5a      	adds	r2, r3, #1
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	605a      	str	r2, [r3, #4]
        ssl->handshake->resume = 0;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014100:	2200      	movs	r2, #0
 8014102:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801410a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801410c:	601a      	str	r2, [r3, #0]
        ssl->session_negotiate->compression = comp;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014112:	7efa      	ldrb	r2, [r7, #27]
 8014114:	605a      	str	r2, [r3, #4]
        ssl->session_negotiate->id_len = n;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801411a:	69fa      	ldr	r2, [r7, #28]
 801411c:	609a      	str	r2, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014122:	f103 000c 	add.w	r0, r3, #12
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	3323      	adds	r3, #35	; 0x23
 801412a:	69fa      	ldr	r2, [r7, #28]
 801412c:	4619      	mov	r1, r3
 801412e:	f009 fb73 	bl	801d818 <memcpy>
 8014132:	e01b      	b.n	801416c <ssl_parse_server_hello+0x4a0>
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	220c      	movs	r2, #12
 8014138:	605a      	str	r2, [r3, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f001 f9ae 	bl	801549c <mbedtls_ssl_derive_keys>
 8014140:	6238      	str	r0, [r7, #32]
 8014142:	6a3b      	ldr	r3, [r7, #32]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d011      	beq.n	801416c <ssl_parse_server_hello+0x4a0>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 8014148:	6a3b      	ldr	r3, [r7, #32]
 801414a:	9301      	str	r3, [sp, #4]
 801414c:	4b14      	ldr	r3, [pc, #80]	; (80141a0 <ssl_parse_server_hello+0x4d4>)
 801414e:	9300      	str	r3, [sp, #0]
 8014150:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8014154:	4a0a      	ldr	r2, [pc, #40]	; (8014180 <ssl_parse_server_hello+0x4b4>)
 8014156:	2101      	movs	r1, #1
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f7f7 fb29 	bl	800b7b0 <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801415e:	2250      	movs	r2, #80	; 0x50
 8014160:	2102      	movs	r1, #2
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f003 fbee 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
            return( ret );
 8014168:	6a3b      	ldr	r3, [r7, #32]
 801416a:	e15a      	b.n	8014422 <ssl_parse_server_hello+0x756>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014170:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8014174:	2b00      	cmp	r3, #0
 8014176:	d017      	beq.n	80141a8 <ssl_parse_server_hello+0x4dc>
 8014178:	4b0a      	ldr	r3, [pc, #40]	; (80141a4 <ssl_parse_server_hello+0x4d8>)
 801417a:	e016      	b.n	80141aa <ssl_parse_server_hello+0x4de>
 801417c:	08021d8c 	.word	0x08021d8c
 8014180:	08021a6c 	.word	0x08021a6c
 8014184:	ffff8680 	.word	0xffff8680
 8014188:	08021e48 	.word	0x08021e48
 801418c:	ffff8f80 	.word	0xffff8f80
 8014190:	08021e6c 	.word	0x08021e6c
 8014194:	ffff8f00 	.word	0xffff8f00
 8014198:	08021e90 	.word	0x08021e90
 801419c:	08021eb4 	.word	0x08021eb4
 80141a0:	08021ed0 	.word	0x08021ed0
 80141a4:	08021ee8 	.word	0x08021ee8
 80141a8:	4ba0      	ldr	r3, [pc, #640]	; (801442c <ssl_parse_server_hello+0x760>)
 80141aa:	9301      	str	r3, [sp, #4]
 80141ac:	4ba0      	ldr	r3, [pc, #640]	; (8014430 <ssl_parse_server_hello+0x764>)
 80141ae:	9300      	str	r3, [sp, #0]
 80141b0:	f240 6397 	movw	r3, #1687	; 0x697
 80141b4:	4a9f      	ldr	r2, [pc, #636]	; (8014434 <ssl_parse_server_hello+0x768>)
 80141b6:	2103      	movs	r1, #3
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f7f7 fa73 	bl	800b6a4 <mbedtls_debug_print_msg>
                   ssl->handshake->resume ? "a" : "no" ) );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 80141be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141c0:	9301      	str	r3, [sp, #4]
 80141c2:	4b9d      	ldr	r3, [pc, #628]	; (8014438 <ssl_parse_server_hello+0x76c>)
 80141c4:	9300      	str	r3, [sp, #0]
 80141c6:	f240 639a 	movw	r3, #1690	; 0x69a
 80141ca:	4a9a      	ldr	r2, [pc, #616]	; (8014434 <ssl_parse_server_hello+0x768>)
 80141cc:	2103      	movs	r1, #3
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f7f7 fa68 	bl	800b6a4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 80141d4:	69fb      	ldr	r3, [r7, #28]
 80141d6:	3325      	adds	r3, #37	; 0x25
 80141d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141da:	4413      	add	r3, r2
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	9301      	str	r3, [sp, #4]
 80141e0:	4b96      	ldr	r3, [pc, #600]	; (801443c <ssl_parse_server_hello+0x770>)
 80141e2:	9300      	str	r3, [sp, #0]
 80141e4:	f240 639b 	movw	r3, #1691	; 0x69b
 80141e8:	4a92      	ldr	r2, [pc, #584]	; (8014434 <ssl_parse_server_hello+0x768>)
 80141ea:	2103      	movs	r1, #3
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f7f7 fa59 	bl	800b6a4 <mbedtls_debug_print_msg>

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7ff f983 	bl	8013504 <mbedtls_ssl_ciphersuite_from_id>
 80141fe:	6178      	str	r0, [r7, #20]
    if( suite_info == NULL
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d10f      	bne.n	8014226 <ssl_parse_server_hello+0x55a>
            || ( ssl->conf->arc4_disabled &&
                suite_info->cipher == MBEDTLS_CIPHER_ARC4_128 )
#endif
        )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8014206:	4b8e      	ldr	r3, [pc, #568]	; (8014440 <ssl_parse_server_hello+0x774>)
 8014208:	9300      	str	r3, [sp, #0]
 801420a:	f240 63a5 	movw	r3, #1701	; 0x6a5
 801420e:	4a89      	ldr	r2, [pc, #548]	; (8014434 <ssl_parse_server_hello+0x768>)
 8014210:	2101      	movs	r1, #1
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f7f7 fa46 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014218:	222f      	movs	r2, #47	; 0x2f
 801421a:	2102      	movs	r1, #2
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f003 fb91 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8014222:	4b88      	ldr	r3, [pc, #544]	; (8014444 <ssl_parse_server_hello+0x778>)
 8014224:	e0fd      	b.n	8014422 <ssl_parse_server_hello+0x756>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	9301      	str	r3, [sp, #4]
 801422c:	4b86      	ldr	r3, [pc, #536]	; (8014448 <ssl_parse_server_hello+0x77c>)
 801422e:	9300      	str	r3, [sp, #0]
 8014230:	f240 63ab 	movw	r3, #1707	; 0x6ab
 8014234:	4a7f      	ldr	r2, [pc, #508]	; (8014434 <ssl_parse_server_hello+0x768>)
 8014236:	2103      	movs	r1, #3
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f7f7 fa33 	bl	800b6a4 <mbedtls_debug_print_msg>

    i = 0;
 801423e:	2300      	movs	r3, #0
 8014240:	637b      	str	r3, [r7, #52]	; 0x34
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	687a      	ldr	r2, [r7, #4]
 8014248:	68d2      	ldr	r2, [r2, #12]
 801424a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	4413      	add	r3, r2
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d10f      	bne.n	801427a <ssl_parse_server_hello+0x5ae>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801425a:	4b79      	ldr	r3, [pc, #484]	; (8014440 <ssl_parse_server_hello+0x774>)
 801425c:	9300      	str	r3, [sp, #0]
 801425e:	f240 63b2 	movw	r3, #1714	; 0x6b2
 8014262:	4a74      	ldr	r2, [pc, #464]	; (8014434 <ssl_parse_server_hello+0x768>)
 8014264:	2101      	movs	r1, #1
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f7f7 fa1c 	bl	800b6a4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801426c:	222f      	movs	r2, #47	; 0x2f
 801426e:	2102      	movs	r1, #2
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f003 fb67 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8014276:	4b73      	ldr	r3, [pc, #460]	; (8014444 <ssl_parse_server_hello+0x778>)
 8014278:	e0d3      	b.n	8014422 <ssl_parse_server_hello+0x756>
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	68d2      	ldr	r2, [r2, #12]
 8014282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014288:	1c59      	adds	r1, r3, #1
 801428a:	6379      	str	r1, [r7, #52]	; 0x34
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	4413      	add	r3, r2
 8014290:	681a      	ldr	r2, [r3, #0]
            ssl->session_negotiate->ciphersuite )
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014296:	681b      	ldr	r3, [r3, #0]
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 8014298:	429a      	cmp	r2, r3
 801429a:	d000      	beq.n	801429e <ssl_parse_server_hello+0x5d2>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 801429c:	e7d1      	b.n	8014242 <ssl_parse_server_hello+0x576>
        {
            break;
 801429e:	bf00      	nop
        }
    }

    if( comp != MBEDTLS_SSL_COMPRESS_NULL
 80142a0:	7efb      	ldrb	r3, [r7, #27]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d00f      	beq.n	80142c6 <ssl_parse_server_hello+0x5fa>
#if defined(MBEDTLS_ZLIB_SUPPORT)
        && comp != MBEDTLS_SSL_COMPRESS_DEFLATE
#endif
      )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80142a6:	4b66      	ldr	r3, [pc, #408]	; (8014440 <ssl_parse_server_hello+0x774>)
 80142a8:	9300      	str	r3, [sp, #0]
 80142aa:	f240 63c5 	movw	r3, #1733	; 0x6c5
 80142ae:	4a61      	ldr	r2, [pc, #388]	; (8014434 <ssl_parse_server_hello+0x768>)
 80142b0:	2101      	movs	r1, #1
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f7f7 f9f6 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80142b8:	222f      	movs	r2, #47	; 0x2f
 80142ba:	2102      	movs	r1, #2
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f003 fb41 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80142c2:	4b60      	ldr	r3, [pc, #384]	; (8014444 <ssl_parse_server_hello+0x778>)
 80142c4:	e0ad      	b.n	8014422 <ssl_parse_server_hello+0x756>
    }
    ssl->session_negotiate->compression = comp;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ca:	7efa      	ldrb	r2, [r7, #27]
 80142cc:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 80142ce:	69fb      	ldr	r3, [r7, #28]
 80142d0:	3328      	adds	r3, #40	; 0x28
 80142d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142d4:	4413      	add	r3, r2
 80142d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 80142d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142da:	9301      	str	r3, [sp, #4]
 80142dc:	4b5b      	ldr	r3, [pc, #364]	; (801444c <ssl_parse_server_hello+0x780>)
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	f240 63ce 	movw	r3, #1742	; 0x6ce
 80142e4:	4a53      	ldr	r2, [pc, #332]	; (8014434 <ssl_parse_server_hello+0x768>)
 80142e6:	2102      	movs	r1, #2
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f7f7 f9db 	bl	800b6a4 <mbedtls_debug_print_msg>

    while( ext_len )
 80142ee:	e068      	b.n	80143c2 <ssl_parse_server_hello+0x6f6>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 80142f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f2:	781b      	ldrb	r3, [r3, #0]
 80142f4:	021b      	lsls	r3, r3, #8
                                | ( ext[1]       ) );
 80142f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142f8:	3201      	adds	r2, #1
 80142fa:	7812      	ldrb	r2, [r2, #0]
 80142fc:	4313      	orrs	r3, r2
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 80142fe:	613b      	str	r3, [r7, #16]
        unsigned int ext_size = ( ( ext[2] <<  8 )
 8014300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014302:	3302      	adds	r3, #2
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	021b      	lsls	r3, r3, #8
                                | ( ext[3]       ) );
 8014308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801430a:	3203      	adds	r2, #3
 801430c:	7812      	ldrb	r2, [r2, #0]
 801430e:	4313      	orrs	r3, r2
        unsigned int ext_size = ( ( ext[2] <<  8 )
 8014310:	60fb      	str	r3, [r7, #12]

        if( ext_size + 4 > ext_len )
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	3304      	adds	r3, #4
 8014316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014318:	429a      	cmp	r2, r3
 801431a:	d20f      	bcs.n	801433c <ssl_parse_server_hello+0x670>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801431c:	4b48      	ldr	r3, [pc, #288]	; (8014440 <ssl_parse_server_hello+0x774>)
 801431e:	9300      	str	r3, [sp, #0]
 8014320:	f240 63d9 	movw	r3, #1753	; 0x6d9
 8014324:	4a43      	ldr	r2, [pc, #268]	; (8014434 <ssl_parse_server_hello+0x768>)
 8014326:	2101      	movs	r1, #1
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7f7 f9bb 	bl	800b6a4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801432e:	2232      	movs	r2, #50	; 0x32
 8014330:	2102      	movs	r1, #2
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f003 fb06 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8014338:	4b42      	ldr	r3, [pc, #264]	; (8014444 <ssl_parse_server_hello+0x778>)
 801433a:	e072      	b.n	8014422 <ssl_parse_server_hello+0x756>
        }

        switch( ext_id )
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	f64f 7201 	movw	r2, #65281	; 0xff01
 8014342:	4293      	cmp	r3, r2
 8014344:	d115      	bne.n	8014372 <ssl_parse_server_hello+0x6a6>
        {
        case MBEDTLS_TLS_EXT_RENEGOTIATION_INFO:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 8014346:	4b42      	ldr	r3, [pc, #264]	; (8014450 <ssl_parse_server_hello+0x784>)
 8014348:	9300      	str	r3, [sp, #0]
 801434a:	f240 63e2 	movw	r3, #1762	; 0x6e2
 801434e:	4a39      	ldr	r2, [pc, #228]	; (8014434 <ssl_parse_server_hello+0x768>)
 8014350:	2103      	movs	r1, #3
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7f7 f9a6 	bl	800b6a4 <mbedtls_debug_print_msg>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
            renegotiation_info_seen = 1;
#endif

            if( ( ret = ssl_parse_renegotiation_info( ssl, ext + 4,
 8014358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435a:	3304      	adds	r3, #4
 801435c:	68fa      	ldr	r2, [r7, #12]
 801435e:	4619      	mov	r1, r3
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f7ff fc87 	bl	8013c74 <ssl_parse_renegotiation_info>
 8014366:	6238      	str	r0, [r7, #32]
 8014368:	6a3b      	ldr	r3, [r7, #32]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d00d      	beq.n	801438a <ssl_parse_server_hello+0x6be>
                                                      ext_size ) ) != 0 )
                return( ret );
 801436e:	6a3b      	ldr	r3, [r7, #32]
 8014370:	e057      	b.n	8014422 <ssl_parse_server_hello+0x756>

            break;
#endif /* MBEDTLS_SSL_ALPN */

        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	9301      	str	r3, [sp, #4]
 8014376:	4b37      	ldr	r3, [pc, #220]	; (8014454 <ssl_parse_server_hello+0x788>)
 8014378:	9300      	str	r3, [sp, #0]
 801437a:	f240 7355 	movw	r3, #1877	; 0x755
 801437e:	4a2d      	ldr	r2, [pc, #180]	; (8014434 <ssl_parse_server_hello+0x768>)
 8014380:	2103      	movs	r1, #3
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f7f7 f98e 	bl	800b6a4 <mbedtls_debug_print_msg>
 8014388:	e000      	b.n	801438c <ssl_parse_server_hello+0x6c0>
            break;
 801438a:	bf00      	nop
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 801438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	1ad3      	subs	r3, r2, r3
 8014392:	3b04      	subs	r3, #4
 8014394:	633b      	str	r3, [r7, #48]	; 0x30
        ext += 4 + ext_size;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	3304      	adds	r3, #4
 801439a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801439c:	4413      	add	r3, r2
 801439e:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ext_len > 0 && ext_len < 4 )
 80143a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d00d      	beq.n	80143c2 <ssl_parse_server_hello+0x6f6>
 80143a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a8:	2b03      	cmp	r3, #3
 80143aa:	d80a      	bhi.n	80143c2 <ssl_parse_server_hello+0x6f6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80143ac:	4b24      	ldr	r3, [pc, #144]	; (8014440 <ssl_parse_server_hello+0x774>)
 80143ae:	9300      	str	r3, [sp, #0]
 80143b0:	f240 735e 	movw	r3, #1886	; 0x75e
 80143b4:	4a1f      	ldr	r2, [pc, #124]	; (8014434 <ssl_parse_server_hello+0x768>)
 80143b6:	2101      	movs	r1, #1
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f7f7 f973 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80143be:	4b21      	ldr	r3, [pc, #132]	; (8014444 <ssl_parse_server_hello+0x778>)
 80143c0:	e02f      	b.n	8014422 <ssl_parse_server_hello+0x756>
    while( ext_len )
 80143c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d193      	bne.n	80142f0 <ssl_parse_server_hello+0x624>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d113      	bne.n	80143fa <ssl_parse_server_hello+0x72e>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80143da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80143de:	b2db      	uxtb	r3, r3
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80143e0:	2b20      	cmp	r3, #32
 80143e2:	d10a      	bne.n	80143fa <ssl_parse_server_hello+0x72e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 80143e4:	4b1c      	ldr	r3, [pc, #112]	; (8014458 <ssl_parse_server_hello+0x78c>)
 80143e6:	9300      	str	r3, [sp, #0]
 80143e8:	f240 7369 	movw	r3, #1897	; 0x769
 80143ec:	4a11      	ldr	r2, [pc, #68]	; (8014434 <ssl_parse_server_hello+0x768>)
 80143ee:	2101      	movs	r1, #1
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f7f7 f957 	bl	800b6a4 <mbedtls_debug_print_msg>
        handshake_failure = 1;
 80143f6:	2301      	movs	r3, #1
 80143f8:	62bb      	str	r3, [r7, #40]	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
        handshake_failure = 1;
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

    if( handshake_failure == 1 )
 80143fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143fc:	2b01      	cmp	r3, #1
 80143fe:	d106      	bne.n	801440e <ssl_parse_server_hello+0x742>
    {
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014400:	2228      	movs	r2, #40	; 0x28
 8014402:	2102      	movs	r1, #2
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f003 fa9d 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801440a:	4b0e      	ldr	r3, [pc, #56]	; (8014444 <ssl_parse_server_hello+0x778>)
 801440c:	e009      	b.n	8014422 <ssl_parse_server_hello+0x756>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 801440e:	4b13      	ldr	r3, [pc, #76]	; (801445c <ssl_parse_server_hello+0x790>)
 8014410:	9300      	str	r3, [sp, #0]
 8014412:	f240 738b 	movw	r3, #1931	; 0x78b
 8014416:	4a07      	ldr	r2, [pc, #28]	; (8014434 <ssl_parse_server_hello+0x768>)
 8014418:	2102      	movs	r1, #2
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f7f7 f942 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8014420:	2300      	movs	r3, #0
}
 8014422:	4618      	mov	r0, r3
 8014424:	3738      	adds	r7, #56	; 0x38
 8014426:	46bd      	mov	sp, r7
 8014428:	bdb0      	pop	{r4, r5, r7, pc}
 801442a:	bf00      	nop
 801442c:	08021eec 	.word	0x08021eec
 8014430:	08021ef0 	.word	0x08021ef0
 8014434:	08021a6c 	.word	0x08021a6c
 8014438:	08021f0c 	.word	0x08021f0c
 801443c:	08021f34 	.word	0x08021f34
 8014440:	08021d8c 	.word	0x08021d8c
 8014444:	ffff8680 	.word	0xffff8680
 8014448:	08021f54 	.word	0x08021f54
 801444c:	08021f7c 	.word	0x08021f7c
 8014450:	08021fa8 	.word	0x08021fa8
 8014454:	08021fc8 	.word	0x08021fc8
 8014458:	08021ff0 	.word	0x08021ff0
 801445c:	08022020 	.word	0x08022020

08014460 <ssl_write_encrypted_pms>:
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
 8014460:	b5b0      	push	{r4, r5, r7, lr}
 8014462:	b08c      	sub	sp, #48	; 0x30
 8014464:	af04      	add	r7, sp, #16
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	607a      	str	r2, [r7, #4]
 801446c:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	68db      	ldr	r3, [r3, #12]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d101      	bne.n	801447a <ssl_write_encrypted_pms+0x1a>
 8014476:	2300      	movs	r3, #0
 8014478:	e000      	b.n	801447c <ssl_write_encrypted_pms+0x1c>
 801447a:	2302      	movs	r3, #2
 801447c:	61fb      	str	r3, [r7, #28]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014482:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	4413      	add	r3, r2
 801448a:	61bb      	str	r3, [r7, #24]

    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )
 801448c:	68ba      	ldr	r2, [r7, #8]
 801448e:	69fb      	ldr	r3, [r7, #28]
 8014490:	4413      	add	r3, r2
 8014492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014496:	d90a      	bls.n	80144ae <ssl_write_encrypted_pms+0x4e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small for encrypted pms" ) );
 8014498:	4b5e      	ldr	r3, [pc, #376]	; (8014614 <ssl_write_encrypted_pms+0x1b4>)
 801449a:	9300      	str	r3, [sp, #0]
 801449c:	f640 0338 	movw	r3, #2104	; 0x838
 80144a0:	4a5d      	ldr	r2, [pc, #372]	; (8014618 <ssl_write_encrypted_pms+0x1b8>)
 80144a2:	2101      	movs	r1, #1
 80144a4:	68f8      	ldr	r0, [r7, #12]
 80144a6:	f7f7 f8fd 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
 80144aa:	4b5c      	ldr	r3, [pc, #368]	; (801461c <ssl_write_encrypted_pms+0x1bc>)
 80144ac:	e0ad      	b.n	801460a <ssl_write_encrypted_pms+0x1aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80144b6:	4618      	mov	r0, r3
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80144c0:	4619      	mov	r1, r3
                       ssl->conf->transport, p );
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80144ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80144ce:	b2db      	uxtb	r3, r3
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80144d0:	461a      	mov	r2, r3
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	f004 fe72 	bl	80191bc <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	699b      	ldr	r3, [r3, #24]
 80144de:	68fa      	ldr	r2, [r7, #12]
 80144e0:	6812      	ldr	r2, [r2, #0]
 80144e2:	69d0      	ldr	r0, [r2, #28]
 80144e4:	69ba      	ldr	r2, [r7, #24]
 80144e6:	1c91      	adds	r1, r2, #2
 80144e8:	222e      	movs	r2, #46	; 0x2e
 80144ea:	4798      	blx	r3
 80144ec:	6178      	str	r0, [r7, #20]
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d00c      	beq.n	801450e <ssl_write_encrypted_pms+0xae>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 80144f4:	697b      	ldr	r3, [r7, #20]
 80144f6:	9301      	str	r3, [sp, #4]
 80144f8:	4b49      	ldr	r3, [pc, #292]	; (8014620 <ssl_write_encrypted_pms+0x1c0>)
 80144fa:	9300      	str	r3, [sp, #0]
 80144fc:	f640 0348 	movw	r3, #2120	; 0x848
 8014500:	4a45      	ldr	r2, [pc, #276]	; (8014618 <ssl_write_encrypted_pms+0x1b8>)
 8014502:	2101      	movs	r1, #1
 8014504:	68f8      	ldr	r0, [r7, #12]
 8014506:	f7f7 f953 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	e07d      	b.n	801460a <ssl_write_encrypted_pms+0x1aa>
    }

    ssl->handshake->pmslen = 48;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014512:	2230      	movs	r2, #48	; 0x30
 8014514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if( ssl->session_negotiate->peer_cert == NULL )
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801451e:	2b00      	cmp	r3, #0
 8014520:	d10a      	bne.n	8014538 <ssl_write_encrypted_pms+0xd8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 8014522:	4b40      	ldr	r3, [pc, #256]	; (8014624 <ssl_write_encrypted_pms+0x1c4>)
 8014524:	9300      	str	r3, [sp, #0]
 8014526:	f44f 6305 	mov.w	r3, #2128	; 0x850
 801452a:	4a3b      	ldr	r2, [pc, #236]	; (8014618 <ssl_write_encrypted_pms+0x1b8>)
 801452c:	2102      	movs	r1, #2
 801452e:	68f8      	ldr	r0, [r7, #12]
 8014530:	f7f7 f8b8 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014534:	4b3c      	ldr	r3, [pc, #240]	; (8014628 <ssl_write_encrypted_pms+0x1c8>)
 8014536:	e068      	b.n	801460a <ssl_write_encrypted_pms+0x1aa>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801453e:	33bc      	adds	r3, #188	; 0xbc
 8014540:	2101      	movs	r1, #1
 8014542:	4618      	mov	r0, r3
 8014544:	f7fa fb2e 	bl	800eba4 <mbedtls_pk_can_do>
 8014548:	4603      	mov	r3, r0
 801454a:	2b00      	cmp	r3, #0
 801454c:	d10a      	bne.n	8014564 <ssl_write_encrypted_pms+0x104>
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 801454e:	4b37      	ldr	r3, [pc, #220]	; (801462c <ssl_write_encrypted_pms+0x1cc>)
 8014550:	9300      	str	r3, [sp, #0]
 8014552:	f640 035a 	movw	r3, #2138	; 0x85a
 8014556:	4a30      	ldr	r2, [pc, #192]	; (8014618 <ssl_write_encrypted_pms+0x1b8>)
 8014558:	2101      	movs	r1, #1
 801455a:	68f8      	ldr	r0, [r7, #12]
 801455c:	f7f7 f8a2 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 8014560:	4b33      	ldr	r3, [pc, #204]	; (8014630 <ssl_write_encrypted_pms+0x1d0>)
 8014562:	e052      	b.n	801460a <ssl_write_encrypted_pms+0x1aa>
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801456a:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
                            p, ssl->handshake->pmslen,
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014572:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
                            ssl->out_msg + offset + len_bytes, olen,
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801457c:	68b9      	ldr	r1, [r7, #8]
 801457e:	69fb      	ldr	r3, [r7, #28]
 8014580:	440b      	add	r3, r1
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014582:	18d5      	adds	r5, r2, r3
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
 8014584:	68ba      	ldr	r2, [r7, #8]
 8014586:	69fb      	ldr	r3, [r7, #28]
 8014588:	4413      	add	r3, r2
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801458a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801458e:	68fa      	ldr	r2, [r7, #12]
 8014590:	6812      	ldr	r2, [r2, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014592:	6992      	ldr	r2, [r2, #24]
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8014594:	68f9      	ldr	r1, [r7, #12]
 8014596:	6809      	ldr	r1, [r1, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8014598:	69c9      	ldr	r1, [r1, #28]
 801459a:	9103      	str	r1, [sp, #12]
 801459c:	9202      	str	r2, [sp, #8]
 801459e:	9301      	str	r3, [sp, #4]
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	9300      	str	r3, [sp, #0]
 80145a4:	462b      	mov	r3, r5
 80145a6:	4622      	mov	r2, r4
 80145a8:	69b9      	ldr	r1, [r7, #24]
 80145aa:	f7fa fbe9 	bl	800ed80 <mbedtls_pk_encrypt>
 80145ae:	6178      	str	r0, [r7, #20]
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d00c      	beq.n	80145d0 <ssl_write_encrypted_pms+0x170>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	9301      	str	r3, [sp, #4]
 80145ba:	4b1e      	ldr	r3, [pc, #120]	; (8014634 <ssl_write_encrypted_pms+0x1d4>)
 80145bc:	9300      	str	r3, [sp, #0]
 80145be:	f640 0364 	movw	r3, #2148	; 0x864
 80145c2:	4a15      	ldr	r2, [pc, #84]	; (8014618 <ssl_write_encrypted_pms+0x1b8>)
 80145c4:	2101      	movs	r1, #1
 80145c6:	68f8      	ldr	r0, [r7, #12]
 80145c8:	f7f7 f8f2 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	e01c      	b.n	801460a <ssl_write_encrypted_pms+0x1aa>
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	2b02      	cmp	r3, #2
 80145d4:	d118      	bne.n	8014608 <ssl_write_encrypted_pms+0x1a8>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	0a19      	lsrs	r1, r3, #8
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	4413      	add	r3, r2
 80145e6:	b2ca      	uxtb	r2, r1
 80145e8:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6819      	ldr	r1, [r3, #0]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	3301      	adds	r3, #1
 80145f8:	4413      	add	r3, r2
 80145fa:	b2ca      	uxtb	r2, r1
 80145fc:	701a      	strb	r2, [r3, #0]
        *olen += 2;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	1c9a      	adds	r2, r3, #2
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	601a      	str	r2, [r3, #0]
    }
#endif

    return( 0 );
 8014608:	2300      	movs	r3, #0
}
 801460a:	4618      	mov	r0, r3
 801460c:	3720      	adds	r7, #32
 801460e:	46bd      	mov	sp, r7
 8014610:	bdb0      	pop	{r4, r5, r7, pc}
 8014612:	bf00      	nop
 8014614:	08022038 	.word	0x08022038
 8014618:	08021a6c 	.word	0x08021a6c
 801461c:	ffff9600 	.word	0xffff9600
 8014620:	0802205c 	.word	0x0802205c
 8014624:	08022064 	.word	0x08022064
 8014628:	ffff8900 	.word	0xffff8900
 801462c:	0802207c 	.word	0x0802207c
 8014630:	ffff9300 	.word	0xffff9300
 8014634:	0802209c 	.word	0x0802209c

08014638 <ssl_parse_server_key_exchange>:
}
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
 8014638:	b590      	push	{r4, r7, lr}
 801463a:	b08b      	sub	sp, #44	; 0x2c
 801463c:	af04      	add	r7, sp, #16
 801463e:	6078      	str	r0, [r7, #4]
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	617b      	str	r3, [r7, #20]
    unsigned char *p = NULL, *end = NULL;
 8014648:	2300      	movs	r3, #0
 801464a:	613b      	str	r3, [r7, #16]
 801464c:	2300      	movs	r3, #0
 801464e:	60fb      	str	r3, [r7, #12]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 8014650:	4b50      	ldr	r3, [pc, #320]	; (8014794 <ssl_parse_server_key_exchange+0x15c>)
 8014652:	9300      	str	r3, [sp, #0]
 8014654:	f640 03e6 	movw	r3, #2278	; 0x8e6
 8014658:	4a4f      	ldr	r2, [pc, #316]	; (8014798 <ssl_parse_server_key_exchange+0x160>)
 801465a:	2102      	movs	r1, #2
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f7f7 f821 	bl	800b6a4 <mbedtls_debug_print_msg>

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	7a9b      	ldrb	r3, [r3, #10]
 8014666:	2b01      	cmp	r3, #1
 8014668:	d10f      	bne.n	801468a <ssl_parse_server_key_exchange+0x52>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 801466a:	4b4c      	ldr	r3, [pc, #304]	; (801479c <ssl_parse_server_key_exchange+0x164>)
 801466c:	9300      	str	r3, [sp, #0]
 801466e:	f640 03eb 	movw	r3, #2283	; 0x8eb
 8014672:	4a49      	ldr	r2, [pc, #292]	; (8014798 <ssl_parse_server_key_exchange+0x160>)
 8014674:	2102      	movs	r1, #2
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f7f7 f814 	bl	800b6a4 <mbedtls_debug_print_msg>
        ssl->state++;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	1c5a      	adds	r2, r3, #1
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	605a      	str	r2, [r3, #4]
        return( 0 );
 8014686:	2300      	movs	r3, #0
 8014688:	e080      	b.n	801478c <ssl_parse_server_key_exchange+0x154>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	f002 ffbe 	bl	801760c <mbedtls_ssl_read_record>
 8014690:	60b8      	str	r0, [r7, #8]
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d00c      	beq.n	80146b2 <ssl_parse_server_key_exchange+0x7a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	9301      	str	r3, [sp, #4]
 801469c:	4b40      	ldr	r3, [pc, #256]	; (80147a0 <ssl_parse_server_key_exchange+0x168>)
 801469e:	9300      	str	r3, [sp, #0]
 80146a0:	f640 130b 	movw	r3, #2315	; 0x90b
 80146a4:	4a3c      	ldr	r2, [pc, #240]	; (8014798 <ssl_parse_server_key_exchange+0x160>)
 80146a6:	2101      	movs	r1, #1
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f7f7 f881 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	e06c      	b.n	801478c <ssl_parse_server_key_exchange+0x154>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146b6:	2b16      	cmp	r3, #22
 80146b8:	d00f      	beq.n	80146da <ssl_parse_server_key_exchange+0xa2>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 80146ba:	4b3a      	ldr	r3, [pc, #232]	; (80147a4 <ssl_parse_server_key_exchange+0x16c>)
 80146bc:	9300      	str	r3, [sp, #0]
 80146be:	f640 1311 	movw	r3, #2321	; 0x911
 80146c2:	4a35      	ldr	r2, [pc, #212]	; (8014798 <ssl_parse_server_key_exchange+0x160>)
 80146c4:	2101      	movs	r1, #1
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f7f6 ffec 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80146cc:	220a      	movs	r2, #10
 80146ce:	2102      	movs	r1, #2
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	f003 f937 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80146d6:	4b34      	ldr	r3, [pc, #208]	; (80147a8 <ssl_parse_server_key_exchange+0x170>)
 80146d8:	e058      	b.n	801478c <ssl_parse_server_key_exchange+0x154>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	2b0c      	cmp	r3, #12
 80146e2:	d02c      	beq.n	801473e <ssl_parse_server_key_exchange+0x106>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	7a9b      	ldrb	r3, [r3, #10]
 80146e8:	2b05      	cmp	r3, #5
 80146ea:	d003      	beq.n	80146f4 <ssl_parse_server_key_exchange+0xbc>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	7a9b      	ldrb	r3, [r3, #10]
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80146f0:	2b07      	cmp	r3, #7
 80146f2:	d114      	bne.n	801471e <ssl_parse_server_key_exchange+0xe6>
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2201      	movs	r2, #1
 80146f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            goto exit;
 80146fc:	bf00      	nop
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	1c5a      	adds	r2, r3, #1
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	605a      	str	r2, [r3, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 8014708:	4b28      	ldr	r3, [pc, #160]	; (80147ac <ssl_parse_server_key_exchange+0x174>)
 801470a:	9300      	str	r3, [sp, #0]
 801470c:	f640 2314 	movw	r3, #2580	; 0xa14
 8014710:	4a21      	ldr	r2, [pc, #132]	; (8014798 <ssl_parse_server_key_exchange+0x160>)
 8014712:	2102      	movs	r1, #2
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f7f6 ffc5 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 801471a:	2300      	movs	r3, #0
 801471c:	e036      	b.n	801478c <ssl_parse_server_key_exchange+0x154>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 801471e:	4b24      	ldr	r3, [pc, #144]	; (80147b0 <ssl_parse_server_key_exchange+0x178>)
 8014720:	9300      	str	r3, [sp, #0]
 8014722:	f640 1326 	movw	r3, #2342	; 0x926
 8014726:	4a1c      	ldr	r2, [pc, #112]	; (8014798 <ssl_parse_server_key_exchange+0x160>)
 8014728:	2101      	movs	r1, #1
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f7f6 ffba 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014730:	220a      	movs	r2, #10
 8014732:	2102      	movs	r1, #2
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f003 f905 	bl	8017944 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801473a:	4b1b      	ldr	r3, [pc, #108]	; (80147a8 <ssl_parse_server_key_exchange+0x170>)
 801473c:	e026      	b.n	801478c <ssl_parse_server_key_exchange+0x154>
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f7fe ff6f 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8014748:	4603      	mov	r3, r0
 801474a:	4423      	add	r3, r4
 801474c:	613b      	str	r3, [r7, #16]
    end = ssl->in_msg + ssl->in_hslen;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014756:	4413      	add	r3, r2
 8014758:	60fb      	str	r3, [r7, #12]
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	1ad3      	subs	r3, r2, r3
 8014760:	9302      	str	r3, [sp, #8]
 8014762:	693b      	ldr	r3, [r7, #16]
 8014764:	9301      	str	r3, [sp, #4]
 8014766:	4b13      	ldr	r3, [pc, #76]	; (80147b4 <ssl_parse_server_key_exchange+0x17c>)
 8014768:	9300      	str	r3, [sp, #0]
 801476a:	f44f 6313 	mov.w	r3, #2352	; 0x930
 801476e:	4a0a      	ldr	r2, [pc, #40]	; (8014798 <ssl_parse_server_key_exchange+0x160>)
 8014770:	2103      	movs	r1, #3
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f7f7 f888 	bl	800b888 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8014778:	4b0f      	ldr	r3, [pc, #60]	; (80147b8 <ssl_parse_server_key_exchange+0x180>)
 801477a:	9300      	str	r3, [sp, #0]
 801477c:	f640 137d 	movw	r3, #2429	; 0x97d
 8014780:	4a05      	ldr	r2, [pc, #20]	; (8014798 <ssl_parse_server_key_exchange+0x160>)
 8014782:	2101      	movs	r1, #1
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f7f6 ff8d 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801478a:	4b0c      	ldr	r3, [pc, #48]	; (80147bc <ssl_parse_server_key_exchange+0x184>)
}
 801478c:	4618      	mov	r0, r3
 801478e:	371c      	adds	r7, #28
 8014790:	46bd      	mov	sp, r7
 8014792:	bd90      	pop	{r4, r7, pc}
 8014794:	080220b8 	.word	0x080220b8
 8014798:	08021a6c 	.word	0x08021a6c
 801479c:	080220d8 	.word	0x080220d8
 80147a0:	08021d74 	.word	0x08021d74
 80147a4:	080220fc 	.word	0x080220fc
 80147a8:	ffff8900 	.word	0xffff8900
 80147ac:	08022174 	.word	0x08022174
 80147b0:	0802211c 	.word	0x0802211c
 80147b4:	0802214c 	.word	0x0802214c
 80147b8:	08022160 	.word	0x08022160
 80147bc:	ffff9400 	.word	0xffff9400

080147c0 <ssl_parse_certificate_request>:
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
}
#else /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */
static int ssl_parse_certificate_request( mbedtls_ssl_context *ssl )
{
 80147c0:	b590      	push	{r4, r7, lr}
 80147c2:	b091      	sub	sp, #68	; 0x44
 80147c4:	af04      	add	r7, sp, #16
 80147c6:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *buf;
    size_t n = 0;
 80147c8:	2300      	movs	r3, #0
 80147ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t cert_type_len = 0, dn_len = 0;
 80147cc:	2300      	movs	r3, #0
 80147ce:	627b      	str	r3, [r7, #36]	; 0x24
 80147d0:	2300      	movs	r3, #0
 80147d2:	623b      	str	r3, [r7, #32]
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	61fb      	str	r3, [r7, #28]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 80147dc:	4ba2      	ldr	r3, [pc, #648]	; (8014a68 <ssl_parse_certificate_request+0x2a8>)
 80147de:	9300      	str	r3, [sp, #0]
 80147e0:	f640 2335 	movw	r3, #2613	; 0xa35
 80147e4:	4aa1      	ldr	r2, [pc, #644]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 80147e6:	2102      	movs	r1, #2
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7f6 ff5b 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
 80147ee:	69f8      	ldr	r0, [r7, #28]
 80147f0:	f7fe febc 	bl	801356c <mbedtls_ssl_ciphersuite_cert_req_allowed>
 80147f4:	4603      	mov	r3, r0
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d10f      	bne.n	801481a <ssl_parse_certificate_request+0x5a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 80147fa:	4b9d      	ldr	r3, [pc, #628]	; (8014a70 <ssl_parse_certificate_request+0x2b0>)
 80147fc:	9300      	str	r3, [sp, #0]
 80147fe:	f640 2339 	movw	r3, #2617	; 0xa39
 8014802:	4a9a      	ldr	r2, [pc, #616]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 8014804:	2102      	movs	r1, #2
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f7f6 ff4c 	bl	800b6a4 <mbedtls_debug_print_msg>
        ssl->state++;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	685b      	ldr	r3, [r3, #4]
 8014810:	1c5a      	adds	r2, r3, #1
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	605a      	str	r2, [r3, #4]
        return( 0 );
 8014816:	2300      	movs	r3, #0
 8014818:	e121      	b.n	8014a5e <ssl_parse_certificate_request+0x29e>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f002 fef6 	bl	801760c <mbedtls_ssl_read_record>
 8014820:	61b8      	str	r0, [r7, #24]
 8014822:	69bb      	ldr	r3, [r7, #24]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d00c      	beq.n	8014842 <ssl_parse_certificate_request+0x82>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	9301      	str	r3, [sp, #4]
 801482c:	4b91      	ldr	r3, [pc, #580]	; (8014a74 <ssl_parse_certificate_request+0x2b4>)
 801482e:	9300      	str	r3, [sp, #0]
 8014830:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 8014834:	4a8d      	ldr	r2, [pc, #564]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 8014836:	2101      	movs	r1, #1
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f7f6 ffb9 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 801483e:	69bb      	ldr	r3, [r7, #24]
 8014840:	e10d      	b.n	8014a5e <ssl_parse_certificate_request+0x29e>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014846:	2b16      	cmp	r3, #22
 8014848:	d00f      	beq.n	801486a <ssl_parse_certificate_request+0xaa>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801484a:	4b8b      	ldr	r3, [pc, #556]	; (8014a78 <ssl_parse_certificate_request+0x2b8>)
 801484c:	9300      	str	r3, [sp, #0]
 801484e:	f640 2346 	movw	r3, #2630	; 0xa46
 8014852:	4a86      	ldr	r2, [pc, #536]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 8014854:	2101      	movs	r1, #1
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f7f6 ff24 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801485c:	220a      	movs	r2, #10
 801485e:	2102      	movs	r1, #2
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f003 f86f 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014866:	4b85      	ldr	r3, [pc, #532]	; (8014a7c <ssl_parse_certificate_request+0x2bc>)
 8014868:	e0f9      	b.n	8014a5e <ssl_parse_certificate_request+0x29e>
    }

    ssl->state++;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	685b      	ldr	r3, [r3, #4]
 801486e:	1c5a      	adds	r2, r3, #1
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	605a      	str	r2, [r3, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	2b0d      	cmp	r3, #13
 801487c:	bf0c      	ite	eq
 801487e:	2301      	moveq	r3, #1
 8014880:	2300      	movne	r3, #0
 8014882:	b2db      	uxtb	r3, r3
 8014884:	461a      	mov	r2, r3
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014892:	2b00      	cmp	r3, #0
 8014894:	d001      	beq.n	801489a <ssl_parse_certificate_request+0xda>
 8014896:	4b7a      	ldr	r3, [pc, #488]	; (8014a80 <ssl_parse_certificate_request+0x2c0>)
 8014898:	e000      	b.n	801489c <ssl_parse_certificate_request+0xdc>
 801489a:	4b7a      	ldr	r3, [pc, #488]	; (8014a84 <ssl_parse_certificate_request+0x2c4>)
 801489c:	9301      	str	r3, [sp, #4]
 801489e:	4b7a      	ldr	r3, [pc, #488]	; (8014a88 <ssl_parse_certificate_request+0x2c8>)
 80148a0:	9300      	str	r3, [sp, #0]
 80148a2:	f640 234f 	movw	r3, #2639	; 0xa4f
 80148a6:	4a71      	ldr	r2, [pc, #452]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 80148a8:	2103      	movs	r1, #3
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f7f6 fefa 	bl	800b6a4 <mbedtls_debug_print_msg>
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d104      	bne.n	80148c4 <ssl_parse_certificate_request+0x104>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	2201      	movs	r2, #1
 80148be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        goto exit;
 80148c2:	e0c2      	b.n	8014a4a <ssl_parse_certificate_request+0x28a>
     *  write_certificate_verify), so let's just use what we have.
     *
     *  However, we still minimally parse the message to check it is at least
     *  superficially sane.
     */
    buf = ssl->in_msg;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80148c8:	617b      	str	r3, [r7, #20]

    /* certificate_types */
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f7fe feab 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 80148d0:	4602      	mov	r2, r0
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	4413      	add	r3, r2
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	627b      	str	r3, [r7, #36]	; 0x24
    n = cert_type_len;
 80148da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7fe fe9f 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 80148e8:	4602      	mov	r2, r0
 80148ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ec:	4413      	add	r3, r2
 80148ee:	3302      	adds	r3, #2
 80148f0:	429c      	cmp	r4, r3
 80148f2:	d20f      	bcs.n	8014914 <ssl_parse_certificate_request+0x154>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 80148f4:	4b60      	ldr	r3, [pc, #384]	; (8014a78 <ssl_parse_certificate_request+0x2b8>)
 80148f6:	9300      	str	r3, [sp, #0]
 80148f8:	f640 2379 	movw	r3, #2681	; 0xa79
 80148fc:	4a5b      	ldr	r2, [pc, #364]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 80148fe:	2101      	movs	r1, #1
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	f7f6 fecf 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014906:	2232      	movs	r2, #50	; 0x32
 8014908:	2102      	movs	r1, #2
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f003 f81a 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8014910:	4b5e      	ldr	r3, [pc, #376]	; (8014a8c <ssl_parse_certificate_request+0x2cc>)
 8014912:	e0a4      	b.n	8014a5e <ssl_parse_certificate_request+0x29e>
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	2b03      	cmp	r3, #3
 801491a:	d15f      	bne.n	80149dc <ssl_parse_certificate_request+0x21c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f7fe fe82 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8014922:	4602      	mov	r2, r0
 8014924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014926:	4413      	add	r3, r2
 8014928:	3301      	adds	r3, #1
 801492a:	697a      	ldr	r2, [r7, #20]
 801492c:	4413      	add	r3, r2
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	021c      	lsls	r4, r3, #8
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f7fe fe77 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8014938:	4602      	mov	r2, r0
 801493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801493c:	4413      	add	r3, r2
 801493e:	3302      	adds	r3, #2
 8014940:	697a      	ldr	r2, [r7, #20]
 8014942:	4413      	add	r3, r2
 8014944:	781b      	ldrb	r3, [r3, #0]
 8014946:	4323      	orrs	r3, r4
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8014948:	613b      	str	r3, [r7, #16]
#if defined(MBEDTLS_DEBUG_C)
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7fe fe6b 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8014950:	4602      	mov	r2, r0
 8014952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014954:	4413      	add	r3, r2
 8014956:	3303      	adds	r3, #3
 8014958:	697a      	ldr	r2, [r7, #20]
 801495a:	4413      	add	r3, r2
 801495c:	60fb      	str	r3, [r7, #12]
        size_t i;

        for( i = 0; i < sig_alg_len; i += 2 )
 801495e:	2300      	movs	r3, #0
 8014960:	62bb      	str	r3, [r7, #40]	; 0x28
 8014962:	e017      	b.n	8014994 <ssl_parse_certificate_request+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 8014964:	68fa      	ldr	r2, [r7, #12]
 8014966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014968:	4413      	add	r3, r2
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	4619      	mov	r1, r3
 801496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014970:	3301      	adds	r3, #1
 8014972:	68fa      	ldr	r2, [r7, #12]
 8014974:	4413      	add	r3, r2
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	9302      	str	r3, [sp, #8]
 801497a:	9101      	str	r1, [sp, #4]
 801497c:	4b44      	ldr	r3, [pc, #272]	; (8014a90 <ssl_parse_certificate_request+0x2d0>)
 801497e:	9300      	str	r3, [sp, #0]
 8014980:	f640 238b 	movw	r3, #2699	; 0xa8b
 8014984:	4a39      	ldr	r2, [pc, #228]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 8014986:	2103      	movs	r1, #3
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	f7f6 fe8b 	bl	800b6a4 <mbedtls_debug_print_msg>
        for( i = 0; i < sig_alg_len; i += 2 )
 801498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014990:	3302      	adds	r3, #2
 8014992:	62bb      	str	r3, [r7, #40]	; 0x28
 8014994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	429a      	cmp	r2, r3
 801499a:	d3e3      	bcc.n	8014964 <ssl_parse_certificate_request+0x1a4>
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 801499c:	693a      	ldr	r2, [r7, #16]
 801499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a0:	4413      	add	r3, r2
 80149a2:	3302      	adds	r3, #2
 80149a4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7fe fe3b 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 80149b0:	4602      	mov	r2, r0
 80149b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b4:	4413      	add	r3, r2
 80149b6:	3302      	adds	r3, #2
 80149b8:	429c      	cmp	r4, r3
 80149ba:	d20f      	bcs.n	80149dc <ssl_parse_certificate_request+0x21c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 80149bc:	4b2e      	ldr	r3, [pc, #184]	; (8014a78 <ssl_parse_certificate_request+0x2b8>)
 80149be:	9300      	str	r3, [sp, #0]
 80149c0:	f640 2394 	movw	r3, #2708	; 0xa94
 80149c4:	4a29      	ldr	r2, [pc, #164]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 80149c6:	2101      	movs	r1, #1
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f7f6 fe6b 	bl	800b6a4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80149ce:	2232      	movs	r2, #50	; 0x32
 80149d0:	2102      	movs	r1, #2
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f002 ffb6 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 80149d8:	4b2c      	ldr	r3, [pc, #176]	; (8014a8c <ssl_parse_certificate_request+0x2cc>)
 80149da:	e040      	b.n	8014a5e <ssl_parse_certificate_request+0x29e>
        }
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f7fe fe22 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 80149e2:	4602      	mov	r2, r0
 80149e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e6:	4413      	add	r3, r2
 80149e8:	3301      	adds	r3, #1
 80149ea:	697a      	ldr	r2, [r7, #20]
 80149ec:	4413      	add	r3, r2
 80149ee:	781b      	ldrb	r3, [r3, #0]
 80149f0:	021c      	lsls	r4, r3, #8
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f7fe fe17 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 80149f8:	4602      	mov	r2, r0
 80149fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fc:	4413      	add	r3, r2
 80149fe:	3302      	adds	r3, #2
 8014a00:	697a      	ldr	r2, [r7, #20]
 8014a02:	4413      	add	r3, r2
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	4323      	orrs	r3, r4
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8014a08:	623b      	str	r3, [r7, #32]

    n += dn_len;
 8014a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a0c:	6a3b      	ldr	r3, [r7, #32]
 8014a0e:	4413      	add	r3, r2
 8014a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f7fe fe05 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a20:	4413      	add	r3, r2
 8014a22:	3303      	adds	r3, #3
 8014a24:	429c      	cmp	r4, r3
 8014a26:	d00f      	beq.n	8014a48 <ssl_parse_certificate_request+0x288>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8014a28:	4b13      	ldr	r3, [pc, #76]	; (8014a78 <ssl_parse_certificate_request+0x2b8>)
 8014a2a:	9300      	str	r3, [sp, #0]
 8014a2c:	f640 23a3 	movw	r3, #2723	; 0xaa3
 8014a30:	4a0e      	ldr	r2, [pc, #56]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 8014a32:	2101      	movs	r1, #1
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f7f6 fe35 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014a3a:	2232      	movs	r2, #50	; 0x32
 8014a3c:	2102      	movs	r1, #2
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f002 ff80 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8014a44:	4b11      	ldr	r3, [pc, #68]	; (8014a8c <ssl_parse_certificate_request+0x2cc>)
 8014a46:	e00a      	b.n	8014a5e <ssl_parse_certificate_request+0x29e>
    }

exit:
 8014a48:	bf00      	nop
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 8014a4a:	4b12      	ldr	r3, [pc, #72]	; (8014a94 <ssl_parse_certificate_request+0x2d4>)
 8014a4c:	9300      	str	r3, [sp, #0]
 8014a4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8014a52:	4a06      	ldr	r2, [pc, #24]	; (8014a6c <ssl_parse_certificate_request+0x2ac>)
 8014a54:	2102      	movs	r1, #2
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f7f6 fe24 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8014a5c:	2300      	movs	r3, #0
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3734      	adds	r7, #52	; 0x34
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd90      	pop	{r4, r7, pc}
 8014a66:	bf00      	nop
 8014a68:	08022194 	.word	0x08022194
 8014a6c:	08021a6c 	.word	0x08021a6c
 8014a70:	080221b4 	.word	0x080221b4
 8014a74:	08021d74 	.word	0x08021d74
 8014a78:	080221d8 	.word	0x080221d8
 8014a7c:	ffff8900 	.word	0xffff8900
 8014a80:	08021ee8 	.word	0x08021ee8
 8014a84:	08021eec 	.word	0x08021eec
 8014a88:	080221f8 	.word	0x080221f8
 8014a8c:	ffff8580 	.word	0xffff8580
 8014a90:	08022214 	.word	0x08022214
 8014a94:	08022240 	.word	0x08022240

08014a98 <ssl_parse_server_hello_done>:
#endif /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */

static int ssl_parse_server_hello_done( mbedtls_ssl_context *ssl )
{
 8014a98:	b590      	push	{r4, r7, lr}
 8014a9a:	b087      	sub	sp, #28
 8014a9c:	af02      	add	r7, sp, #8
 8014a9e:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 8014aa0:	4b2d      	ldr	r3, [pc, #180]	; (8014b58 <ssl_parse_server_hello_done+0xc0>)
 8014aa2:	9300      	str	r3, [sp, #0]
 8014aa4:	f640 23b4 	movw	r3, #2740	; 0xab4
 8014aa8:	4a2c      	ldr	r2, [pc, #176]	; (8014b5c <ssl_parse_server_hello_done+0xc4>)
 8014aaa:	2102      	movs	r1, #2
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f7f6 fdf9 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f002 fdaa 	bl	801760c <mbedtls_ssl_read_record>
 8014ab8:	60f8      	str	r0, [r7, #12]
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d00c      	beq.n	8014ada <ssl_parse_server_hello_done+0x42>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	9301      	str	r3, [sp, #4]
 8014ac4:	4b26      	ldr	r3, [pc, #152]	; (8014b60 <ssl_parse_server_hello_done+0xc8>)
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	f640 23b8 	movw	r3, #2744	; 0xab8
 8014acc:	4a23      	ldr	r2, [pc, #140]	; (8014b5c <ssl_parse_server_hello_done+0xc4>)
 8014ace:	2101      	movs	r1, #1
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f7f6 fe6d 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	e03a      	b.n	8014b50 <ssl_parse_server_hello_done+0xb8>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ade:	2b16      	cmp	r3, #22
 8014ae0:	d00a      	beq.n	8014af8 <ssl_parse_server_hello_done+0x60>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 8014ae2:	4b20      	ldr	r3, [pc, #128]	; (8014b64 <ssl_parse_server_hello_done+0xcc>)
 8014ae4:	9300      	str	r3, [sp, #0]
 8014ae6:	f640 23be 	movw	r3, #2750	; 0xabe
 8014aea:	4a1c      	ldr	r2, [pc, #112]	; (8014b5c <ssl_parse_server_hello_done+0xc4>)
 8014aec:	2101      	movs	r1, #1
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f7f6 fdd8 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8014af4:	4b1c      	ldr	r3, [pc, #112]	; (8014b68 <ssl_parse_server_hello_done+0xd0>)
 8014af6:	e02b      	b.n	8014b50 <ssl_parse_server_hello_done+0xb8>
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7fe fd92 	bl	8013626 <mbedtls_ssl_hs_hdr_len>
 8014b02:	4603      	mov	r3, r0
 8014b04:	429c      	cmp	r4, r3
 8014b06:	d104      	bne.n	8014b12 <ssl_parse_server_hello_done+0x7a>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b0c:	781b      	ldrb	r3, [r3, #0]
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 8014b0e:	2b0e      	cmp	r3, #14
 8014b10:	d00f      	beq.n	8014b32 <ssl_parse_server_hello_done+0x9a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 8014b12:	4b14      	ldr	r3, [pc, #80]	; (8014b64 <ssl_parse_server_hello_done+0xcc>)
 8014b14:	9300      	str	r3, [sp, #0]
 8014b16:	f640 23c5 	movw	r3, #2757	; 0xac5
 8014b1a:	4a10      	ldr	r2, [pc, #64]	; (8014b5c <ssl_parse_server_hello_done+0xc4>)
 8014b1c:	2101      	movs	r1, #1
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f7f6 fdc0 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8014b24:	2232      	movs	r2, #50	; 0x32
 8014b26:	2102      	movs	r1, #2
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f002 ff0b 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 8014b2e:	4b0f      	ldr	r3, [pc, #60]	; (8014b6c <ssl_parse_server_hello_done+0xd4>)
 8014b30:	e00e      	b.n	8014b50 <ssl_parse_server_hello_done+0xb8>
    }

    ssl->state++;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	1c5a      	adds	r2, r3, #1
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 8014b3c:	4b0c      	ldr	r3, [pc, #48]	; (8014b70 <ssl_parse_server_hello_done+0xd8>)
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	f640 23d2 	movw	r3, #2770	; 0xad2
 8014b44:	4a05      	ldr	r2, [pc, #20]	; (8014b5c <ssl_parse_server_hello_done+0xc4>)
 8014b46:	2102      	movs	r1, #2
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f7f6 fdab 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8014b4e:	2300      	movs	r3, #0
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3714      	adds	r7, #20
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd90      	pop	{r4, r7, pc}
 8014b58:	08022260 	.word	0x08022260
 8014b5c:	08021a6c 	.word	0x08021a6c
 8014b60:	08021d74 	.word	0x08021d74
 8014b64:	0802227c 	.word	0x0802227c
 8014b68:	ffff8900 	.word	0xffff8900
 8014b6c:	ffff8480 	.word	0xffff8480
 8014b70:	0802229c 	.word	0x0802229c

08014b74 <ssl_write_client_key_exchange>:

static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b088      	sub	sp, #32
 8014b78:	af02      	add	r7, sp, #8
 8014b7a:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	617b      	str	r3, [r7, #20]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 8014b84:	4b2e      	ldr	r3, [pc, #184]	; (8014c40 <ssl_write_client_key_exchange+0xcc>)
 8014b86:	9300      	str	r3, [sp, #0]
 8014b88:	f640 23de 	movw	r3, #2782	; 0xade
 8014b8c:	4a2d      	ldr	r2, [pc, #180]	; (8014c44 <ssl_write_client_key_exchange+0xd0>)
 8014b8e:	2102      	movs	r1, #2
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f7f6 fd87 	bl	800b6a4 <mbedtls_debug_print_msg>
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	7a9b      	ldrb	r3, [r3, #10]
 8014b9a:	2b01      	cmp	r3, #1
 8014b9c:	d10e      	bne.n	8014bbc <ssl_write_client_key_exchange+0x48>
    {
        i = 4;
 8014b9e:	2304      	movs	r3, #4
 8014ba0:	613b      	str	r3, [r7, #16]
        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )
 8014ba2:	f107 0208 	add.w	r2, r7, #8
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	6939      	ldr	r1, [r7, #16]
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f7ff fc58 	bl	8014460 <ssl_write_encrypted_pms>
 8014bb0:	60f8      	str	r0, [r7, #12]
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d00c      	beq.n	8014bd2 <ssl_write_client_key_exchange+0x5e>
            return( ret );
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	e03c      	b.n	8014c36 <ssl_write_client_key_exchange+0xc2>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */
    {
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8014bbc:	4b22      	ldr	r3, [pc, #136]	; (8014c48 <ssl_write_client_key_exchange+0xd4>)
 8014bbe:	9300      	str	r3, [sp, #0]
 8014bc0:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8014bc4:	4a1f      	ldr	r2, [pc, #124]	; (8014c44 <ssl_write_client_key_exchange+0xd0>)
 8014bc6:	2101      	movs	r1, #1
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f7f6 fd6b 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8014bce:	4b1f      	ldr	r3, [pc, #124]	; (8014c4c <ssl_write_client_key_exchange+0xd8>)
 8014bd0:	e031      	b.n	8014c36 <ssl_write_client_key_exchange+0xc2>
    }

    ssl->out_msglen  = i + n;
 8014bd2:	68ba      	ldr	r2, [r7, #8]
 8014bd4:	693b      	ldr	r3, [r7, #16]
 8014bd6:	441a      	add	r2, r3
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	2216      	movs	r2, #22
 8014be2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014bec:	2210      	movs	r2, #16
 8014bee:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	1c5a      	adds	r2, r3, #1
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f002 f9f8 	bl	8016ff0 <mbedtls_ssl_write_record>
 8014c00:	60f8      	str	r0, [r7, #12]
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d00c      	beq.n	8014c22 <ssl_write_client_key_exchange+0xae>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	9301      	str	r3, [sp, #4]
 8014c0c:	4b10      	ldr	r3, [pc, #64]	; (8014c50 <ssl_write_client_key_exchange+0xdc>)
 8014c0e:	9300      	str	r3, [sp, #0]
 8014c10:	f640 33cc 	movw	r3, #3020	; 0xbcc
 8014c14:	4a0b      	ldr	r2, [pc, #44]	; (8014c44 <ssl_write_client_key_exchange+0xd0>)
 8014c16:	2101      	movs	r1, #1
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f7f6 fdc9 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	e009      	b.n	8014c36 <ssl_write_client_key_exchange+0xc2>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 8014c22:	4b0c      	ldr	r3, [pc, #48]	; (8014c54 <ssl_write_client_key_exchange+0xe0>)
 8014c24:	9300      	str	r3, [sp, #0]
 8014c26:	f44f 633d 	mov.w	r3, #3024	; 0xbd0
 8014c2a:	4a06      	ldr	r2, [pc, #24]	; (8014c44 <ssl_write_client_key_exchange+0xd0>)
 8014c2c:	2102      	movs	r1, #2
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f7f6 fd38 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8014c34:	2300      	movs	r3, #0
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3718      	adds	r7, #24
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	080222b8 	.word	0x080222b8
 8014c44:	08021a6c 	.word	0x08021a6c
 8014c48:	08022160 	.word	0x08022160
 8014c4c:	ffff9400 	.word	0xffff9400
 8014c50:	08021d04 	.word	0x08021d04
 8014c54:	080222d8 	.word	0x080222d8

08014c58 <ssl_write_certificate_verify>:
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
}
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
 8014c58:	b590      	push	{r4, r7, lr}
 8014c5a:	b09b      	sub	sp, #108	; 0x6c
 8014c5c:	af04      	add	r7, sp, #16
 8014c5e:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 8014c60:	4b9b      	ldr	r3, [pc, #620]	; (8014ed0 <ssl_write_certificate_verify+0x278>)
 8014c62:	653b      	str	r3, [r7, #80]	; 0x50
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t n = 0, offset = 0;
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014c70:	2300      	movs	r3, #0
 8014c72:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char hash[48];
    unsigned char *hash_start = hash;
 8014c74:	f107 030c 	add.w	r3, r7, #12
 8014c78:	647b      	str	r3, [r7, #68]	; 0x44
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 8014c80:	4b94      	ldr	r3, [pc, #592]	; (8014ed4 <ssl_write_certificate_verify+0x27c>)
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	f640 4303 	movw	r3, #3075	; 0xc03
 8014c88:	4a93      	ldr	r2, [pc, #588]	; (8014ed8 <ssl_write_certificate_verify+0x280>)
 8014c8a:	2102      	movs	r1, #2
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f7f6 fd09 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f000 fc02 	bl	801549c <mbedtls_ssl_derive_keys>
 8014c98:	6538      	str	r0, [r7, #80]	; 0x50
 8014c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d00c      	beq.n	8014cba <ssl_write_certificate_verify+0x62>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 8014ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ca2:	9301      	str	r3, [sp, #4]
 8014ca4:	4b8d      	ldr	r3, [pc, #564]	; (8014edc <ssl_write_certificate_verify+0x284>)
 8014ca6:	9300      	str	r3, [sp, #0]
 8014ca8:	f640 4307 	movw	r3, #3079	; 0xc07
 8014cac:	4a8a      	ldr	r2, [pc, #552]	; (8014ed8 <ssl_write_certificate_verify+0x280>)
 8014cae:	2101      	movs	r1, #1
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f7f6 fd7d 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8014cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cb8:	e106      	b.n	8014ec8 <ssl_write_certificate_verify+0x270>
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8014cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cbc:	7a9b      	ldrb	r3, [r3, #10]
 8014cbe:	2b05      	cmp	r3, #5
 8014cc0:	d00f      	beq.n	8014ce2 <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
 8014cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cc4:	7a9b      	ldrb	r3, [r3, #10]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8014cc6:	2b07      	cmp	r3, #7
 8014cc8:	d00b      	beq.n	8014ce2 <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8014cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ccc:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
 8014cce:	2b08      	cmp	r3, #8
 8014cd0:	d007      	beq.n	8014ce2 <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8014cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cd4:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8014cd6:	2b06      	cmp	r3, #6
 8014cd8:	d003      	beq.n	8014ce2 <ssl_write_certificate_verify+0x8a>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
 8014cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cdc:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8014cde:	2b0b      	cmp	r3, #11
 8014ce0:	d10f      	bne.n	8014d02 <ssl_write_certificate_verify+0xaa>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 8014ce2:	4b7f      	ldr	r3, [pc, #508]	; (8014ee0 <ssl_write_certificate_verify+0x288>)
 8014ce4:	9300      	str	r3, [sp, #0]
 8014ce6:	f640 4311 	movw	r3, #3089	; 0xc11
 8014cea:	4a7b      	ldr	r2, [pc, #492]	; (8014ed8 <ssl_write_certificate_verify+0x280>)
 8014cec:	2102      	movs	r1, #2
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f7f6 fcd8 	bl	800b6a4 <mbedtls_debug_print_msg>
        ssl->state++;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	685b      	ldr	r3, [r3, #4]
 8014cf8:	1c5a      	adds	r2, r3, #1
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	605a      	str	r2, [r3, #4]
        return( 0 );
 8014cfe:	2300      	movs	r3, #0
 8014d00:	e0e2      	b.n	8014ec8 <ssl_write_certificate_verify+0x270>
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d005      	beq.n	8014d18 <ssl_write_certificate_verify+0xc0>
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f7fe fc67 	bl	80135e0 <mbedtls_ssl_own_cert>
 8014d12:	4603      	mov	r3, r0
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d10f      	bne.n	8014d38 <ssl_write_certificate_verify+0xe0>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 8014d18:	4b71      	ldr	r3, [pc, #452]	; (8014ee0 <ssl_write_certificate_verify+0x288>)
 8014d1a:	9300      	str	r3, [sp, #0]
 8014d1c:	f640 4318 	movw	r3, #3096	; 0xc18
 8014d20:	4a6d      	ldr	r2, [pc, #436]	; (8014ed8 <ssl_write_certificate_verify+0x280>)
 8014d22:	2102      	movs	r1, #2
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f7f6 fcbd 	bl	800b6a4 <mbedtls_debug_print_msg>
        ssl->state++;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	685b      	ldr	r3, [r3, #4]
 8014d2e:	1c5a      	adds	r2, r3, #1
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	605a      	str	r2, [r3, #4]
        return( 0 );
 8014d34:	2300      	movs	r3, #0
 8014d36:	e0c7      	b.n	8014ec8 <ssl_write_certificate_verify+0x270>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f7fe fc2e 	bl	801359a <mbedtls_ssl_own_key>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d10a      	bne.n	8014d5a <ssl_write_certificate_verify+0x102>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 8014d44:	4b67      	ldr	r3, [pc, #412]	; (8014ee4 <ssl_write_certificate_verify+0x28c>)
 8014d46:	9300      	str	r3, [sp, #0]
 8014d48:	f640 431f 	movw	r3, #3103	; 0xc1f
 8014d4c:	4a62      	ldr	r2, [pc, #392]	; (8014ed8 <ssl_write_certificate_verify+0x280>)
 8014d4e:	2101      	movs	r1, #1
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f7f6 fca7 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 8014d56:	4b64      	ldr	r3, [pc, #400]	; (8014ee8 <ssl_write_certificate_verify+0x290>)
 8014d58:	e0b6      	b.n	8014ec8 <ssl_write_certificate_verify+0x270>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d60:	f107 020c 	add.w	r2, r7, #12
 8014d64:	4611      	mov	r1, r2
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	68db      	ldr	r3, [r3, #12]
 8014d6e:	2b03      	cmp	r3, #3
 8014d70:	d14c      	bne.n	8014e0c <ssl_write_certificate_verify+0x1b4>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	7a5b      	ldrb	r3, [r3, #9]
 8014d7a:	2b07      	cmp	r3, #7
 8014d7c:	d109      	bne.n	8014d92 <ssl_write_certificate_verify+0x13a>
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
 8014d7e:	2307      	movs	r3, #7
 8014d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d8a:	3304      	adds	r3, #4
 8014d8c:	2205      	movs	r2, #5
 8014d8e:	701a      	strb	r2, [r3, #0]
 8014d90:	e008      	b.n	8014da4 <ssl_write_certificate_verify+0x14c>
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 8014d92:	2306      	movs	r3, #6
 8014d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d9e:	3304      	adds	r3, #4
 8014da0:	2204      	movs	r2, #4
 8014da2:	701a      	strb	r2, [r3, #0]
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f7fe fbf8 	bl	801359a <mbedtls_ssl_own_key>
 8014daa:	4602      	mov	r2, r0
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014db2:	1d5c      	adds	r4, r3, #5
 8014db4:	4610      	mov	r0, r2
 8014db6:	f004 f9b7 	bl	8019128 <mbedtls_ssl_sig_from_pk>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	7023      	strb	r3, [r4, #0]

        /* Info from md_alg will be used instead */
        hashlen = 0;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	643b      	str	r3, [r7, #64]	; 0x40
        offset = 2;
 8014dc2:	2302      	movs	r3, #2
 8014dc4:	64bb      	str	r3, [r7, #72]	; 0x48
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8014dc6:	6878      	ldr	r0, [r7, #4]
 8014dc8:	f7fe fbe7 	bl	801359a <mbedtls_ssl_own_key>
 8014dcc:	4604      	mov	r4, r0
                         ssl->out_msg + 6 + offset, &n,
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014dd6:	3306      	adds	r3, #6
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8014dd8:	4413      	add	r3, r2
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	6812      	ldr	r2, [r2, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8014dde:	6992      	ldr	r2, [r2, #24]
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8014de0:	6879      	ldr	r1, [r7, #4]
 8014de2:	6809      	ldr	r1, [r1, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8014de4:	69c9      	ldr	r1, [r1, #28]
 8014de6:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 8014dea:	9103      	str	r1, [sp, #12]
 8014dec:	9202      	str	r2, [sp, #8]
 8014dee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014df2:	9201      	str	r2, [sp, #4]
 8014df4:	9300      	str	r3, [sp, #0]
 8014df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014dfa:	4601      	mov	r1, r0
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	f7f9 ff83 	bl	800ed08 <mbedtls_pk_sign>
 8014e02:	6538      	str	r0, [r7, #80]	; 0x50
 8014e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d018      	beq.n	8014e3c <ssl_write_certificate_verify+0x1e4>
 8014e0a:	e00a      	b.n	8014e22 <ssl_write_certificate_verify+0x1ca>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8014e0c:	4b37      	ldr	r3, [pc, #220]	; (8014eec <ssl_write_certificate_verify+0x294>)
 8014e0e:	9300      	str	r3, [sp, #0]
 8014e10:	f640 436e 	movw	r3, #3182	; 0xc6e
 8014e14:	4a30      	ldr	r2, [pc, #192]	; (8014ed8 <ssl_write_certificate_verify+0x280>)
 8014e16:	2101      	movs	r1, #1
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f7f6 fc43 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8014e1e:	4b34      	ldr	r3, [pc, #208]	; (8014ef0 <ssl_write_certificate_verify+0x298>)
 8014e20:	e052      	b.n	8014ec8 <ssl_write_certificate_verify+0x270>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 8014e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e24:	9301      	str	r3, [sp, #4]
 8014e26:	4b33      	ldr	r3, [pc, #204]	; (8014ef4 <ssl_write_certificate_verify+0x29c>)
 8014e28:	9300      	str	r3, [sp, #0]
 8014e2a:	f640 4376 	movw	r3, #3190	; 0xc76
 8014e2e:	4a2a      	ldr	r2, [pc, #168]	; (8014ed8 <ssl_write_certificate_verify+0x280>)
 8014e30:	2101      	movs	r1, #1
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f7f6 fcbc 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8014e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e3a:	e045      	b.n	8014ec8 <ssl_write_certificate_verify+0x270>
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 8014e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e3e:	0a19      	lsrs	r1, r3, #8
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e48:	3304      	adds	r3, #4
 8014e4a:	4413      	add	r3, r2
 8014e4c:	b2ca      	uxtb	r2, r1
 8014e4e:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 8014e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e5a:	3305      	adds	r3, #5
 8014e5c:	4413      	add	r3, r2
 8014e5e:	b2ca      	uxtb	r2, r1
 8014e60:	701a      	strb	r2, [r3, #0]

    ssl->out_msglen  = 6 + n + offset;
 8014e62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e66:	4413      	add	r3, r2
 8014e68:	1d9a      	adds	r2, r3, #6
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2216      	movs	r2, #22
 8014e74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014e7e:	220f      	movs	r2, #15
 8014e80:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	1c5a      	adds	r2, r3, #1
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f002 f8af 	bl	8016ff0 <mbedtls_ssl_write_record>
 8014e92:	6538      	str	r0, [r7, #80]	; 0x50
 8014e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d00c      	beq.n	8014eb4 <ssl_write_certificate_verify+0x25c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8014e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e9c:	9301      	str	r3, [sp, #4]
 8014e9e:	4b16      	ldr	r3, [pc, #88]	; (8014ef8 <ssl_write_certificate_verify+0x2a0>)
 8014ea0:	9300      	str	r3, [sp, #0]
 8014ea2:	f640 4385 	movw	r3, #3205	; 0xc85
 8014ea6:	4a0c      	ldr	r2, [pc, #48]	; (8014ed8 <ssl_write_certificate_verify+0x280>)
 8014ea8:	2101      	movs	r1, #1
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7f6 fc80 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8014eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014eb2:	e009      	b.n	8014ec8 <ssl_write_certificate_verify+0x270>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 8014eb4:	4b11      	ldr	r3, [pc, #68]	; (8014efc <ssl_write_certificate_verify+0x2a4>)
 8014eb6:	9300      	str	r3, [sp, #0]
 8014eb8:	f640 4389 	movw	r3, #3209	; 0xc89
 8014ebc:	4a06      	ldr	r2, [pc, #24]	; (8014ed8 <ssl_write_certificate_verify+0x280>)
 8014ebe:	2102      	movs	r1, #2
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f7f6 fbef 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( ret );
 8014ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	375c      	adds	r7, #92	; 0x5c
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd90      	pop	{r4, r7, pc}
 8014ed0:	ffff8f80 	.word	0xffff8f80
 8014ed4:	080222f8 	.word	0x080222f8
 8014ed8:	08021a6c 	.word	0x08021a6c
 8014edc:	08021ed0 	.word	0x08021ed0
 8014ee0:	08022314 	.word	0x08022314
 8014ee4:	08022338 	.word	0x08022338
 8014ee8:	ffff8a00 	.word	0xffff8a00
 8014eec:	08022160 	.word	0x08022160
 8014ef0:	ffff9400 	.word	0xffff9400
 8014ef4:	0802235c 	.word	0x0802235c
 8014ef8:	08021d04 	.word	0x08021d04
 8014efc:	0802236c 	.word	0x0802236c

08014f00 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b086      	sub	sp, #24
 8014f04:	af02      	add	r7, sp, #8
 8014f06:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	60fb      	str	r3, [r7, #12]

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	685b      	ldr	r3, [r3, #4]
 8014f10:	2b10      	cmp	r3, #16
 8014f12:	d003      	beq.n	8014f1c <mbedtls_ssl_handshake_client_step+0x1c>
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d101      	bne.n	8014f20 <mbedtls_ssl_handshake_client_step+0x20>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8014f1c:	4b56      	ldr	r3, [pc, #344]	; (8015078 <mbedtls_ssl_handshake_client_step+0x178>)
 8014f1e:	e0a6      	b.n	801506e <mbedtls_ssl_handshake_client_step+0x16e>
    printf("handshake: %d \r\n", ssl->handshake);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f24:	4619      	mov	r1, r3
 8014f26:	4855      	ldr	r0, [pc, #340]	; (801507c <mbedtls_ssl_handshake_client_step+0x17c>)
 8014f28:	f008 fd9c 	bl	801da64 <iprintf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	685b      	ldr	r3, [r3, #4]
 8014f30:	9301      	str	r3, [sp, #4]
 8014f32:	4b53      	ldr	r3, [pc, #332]	; (8015080 <mbedtls_ssl_handshake_client_step+0x180>)
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	f640 5308 	movw	r3, #3336	; 0xd08
 8014f3a:	4a52      	ldr	r2, [pc, #328]	; (8015084 <mbedtls_ssl_handshake_client_step+0x184>)
 8014f3c:	2102      	movs	r1, #2
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	f7f6 fbb0 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f001 ff8b 	bl	8016e60 <mbedtls_ssl_flush_output>
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d001      	beq.n	8014f56 <mbedtls_ssl_handshake_client_step+0x56>
        return( ret );
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	e08b      	b.n	801506e <mbedtls_ssl_handshake_client_step+0x16e>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
    }
#endif

    switch( ssl->state )
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	685b      	ldr	r3, [r3, #4]
 8014f5a:	2b0f      	cmp	r3, #15
 8014f5c:	d878      	bhi.n	8015050 <mbedtls_ssl_handshake_client_step+0x150>
 8014f5e:	a201      	add	r2, pc, #4	; (adr r2, 8014f64 <mbedtls_ssl_handshake_client_step+0x64>)
 8014f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f64:	08014fa5 	.word	0x08014fa5
 8014f68:	08014fad 	.word	0x08014fad
 8014f6c:	08014fb7 	.word	0x08014fb7
 8014f70:	08014fc1 	.word	0x08014fc1
 8014f74:	08014fcb 	.word	0x08014fcb
 8014f78:	08014fd5 	.word	0x08014fd5
 8014f7c:	08014fdf 	.word	0x08014fdf
 8014f80:	08014fe9 	.word	0x08014fe9
 8014f84:	08014ff3 	.word	0x08014ff3
 8014f88:	08014ffd 	.word	0x08014ffd
 8014f8c:	08015007 	.word	0x08015007
 8014f90:	08015011 	.word	0x08015011
 8014f94:	0801501b 	.word	0x0801501b
 8014f98:	08015025 	.word	0x08015025
 8014f9c:	0801502f 	.word	0x0801502f
 8014fa0:	08015049 	.word	0x08015049
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2201      	movs	r2, #1
 8014fa8:	605a      	str	r2, [r3, #4]
            break;
 8014faa:	e05f      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       /*
        *  ==>   ClientHello
        */
       case MBEDTLS_SSL_CLIENT_HELLO:
           ret = ssl_write_client_hello( ssl );
 8014fac:	6878      	ldr	r0, [r7, #4]
 8014fae:	f7fe fc13 	bl	80137d8 <ssl_write_client_hello>
 8014fb2:	60f8      	str	r0, [r7, #12]
           break;
 8014fb4:	e05a      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>
        *      ( ServerKeyExchange  )
        *      ( CertificateRequest )
        *        ServerHelloDone
        */
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f7fe fe88 	bl	8013ccc <ssl_parse_server_hello>
 8014fbc:	60f8      	str	r0, [r7, #12]
           break;
 8014fbe:	e055      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f002 fe41 	bl	8017c48 <mbedtls_ssl_parse_certificate>
 8014fc6:	60f8      	str	r0, [r7, #12]
           break;
 8014fc8:	e050      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_KEY_EXCHANGE:
           ret = ssl_parse_server_key_exchange( ssl );
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7ff fb34 	bl	8014638 <ssl_parse_server_key_exchange>
 8014fd0:	60f8      	str	r0, [r7, #12]
           break;
 8014fd2:	e04b      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CERTIFICATE_REQUEST:
           ret = ssl_parse_certificate_request( ssl );
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f7ff fbf3 	bl	80147c0 <ssl_parse_certificate_request>
 8014fda:	60f8      	str	r0, [r7, #12]
           break;
 8014fdc:	e046      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_HELLO_DONE:
           ret = ssl_parse_server_hello_done( ssl );
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f7ff fd5a 	bl	8014a98 <ssl_parse_server_hello_done>
 8014fe4:	60f8      	str	r0, [r7, #12]
           break;
 8014fe6:	e041      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f002 fd13 	bl	8017a14 <mbedtls_ssl_write_certificate>
 8014fee:	60f8      	str	r0, [r7, #12]
           break;
 8014ff0:	e03c      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:
           ret = ssl_write_client_key_exchange( ssl );
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f7ff fdbe 	bl	8014b74 <ssl_write_client_key_exchange>
 8014ff8:	60f8      	str	r0, [r7, #12]
           break;
 8014ffa:	e037      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f7ff fe2b 	bl	8014c58 <ssl_write_certificate_verify>
 8015002:	60f8      	str	r0, [r7, #12]
           break;
 8015004:	e032      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f003 f8f0 	bl	80181ec <mbedtls_ssl_write_change_cipher_spec>
 801500c:	60f8      	str	r0, [r7, #12]
           break;
 801500e:	e02d      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f003 fb59 	bl	80186c8 <mbedtls_ssl_write_finished>
 8015016:	60f8      	str	r0, [r7, #12]
           break;
 8015018:	e028      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f003 f930 	bl	8018280 <mbedtls_ssl_parse_change_cipher_spec>
 8015020:	60f8      	str	r0, [r7, #12]
           break;
 8015022:	e023      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f003 fbf9 	bl	801881c <mbedtls_ssl_parse_finished>
 801502a:	60f8      	str	r0, [r7, #12]
           break;
 801502c:	e01e      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 801502e:	4b16      	ldr	r3, [pc, #88]	; (8015088 <mbedtls_ssl_handshake_client_step+0x188>)
 8015030:	9300      	str	r3, [sp, #0]
 8015032:	f640 5377 	movw	r3, #3447	; 0xd77
 8015036:	4a13      	ldr	r2, [pc, #76]	; (8015084 <mbedtls_ssl_handshake_client_step+0x184>)
 8015038:	2102      	movs	r1, #2
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f7f6 fb32 	bl	800b6a4 <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	220f      	movs	r2, #15
 8015044:	605a      	str	r2, [r3, #4]
           break;
 8015046:	e011      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f003 fad5 	bl	80185f8 <mbedtls_ssl_handshake_wrapup>
           break;
 801504e:	e00d      	b.n	801506c <mbedtls_ssl_handshake_client_step+0x16c>

       default:
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	685b      	ldr	r3, [r3, #4]
 8015054:	9301      	str	r3, [sp, #4]
 8015056:	4b0d      	ldr	r3, [pc, #52]	; (801508c <mbedtls_ssl_handshake_client_step+0x18c>)
 8015058:	9300      	str	r3, [sp, #0]
 801505a:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 801505e:	4a09      	ldr	r2, [pc, #36]	; (8015084 <mbedtls_ssl_handshake_client_step+0x184>)
 8015060:	2101      	movs	r1, #1
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f7f6 fb1e 	bl	800b6a4 <mbedtls_debug_print_msg>
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015068:	4b03      	ldr	r3, [pc, #12]	; (8015078 <mbedtls_ssl_handshake_client_step+0x178>)
 801506a:	e000      	b.n	801506e <mbedtls_ssl_handshake_client_step+0x16e>
   }

    return( ret );
 801506c:	68fb      	ldr	r3, [r7, #12]
}
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}
 8015076:	bf00      	nop
 8015078:	ffff8f00 	.word	0xffff8f00
 801507c:	08022388 	.word	0x08022388
 8015080:	0802239c 	.word	0x0802239c
 8015084:	08021a6c 	.word	0x08021a6c
 8015088:	080223b0 	.word	0x080223b0
 801508c:	080223c0 	.word	0x080223c0

08015090 <mbedtls_cipher_get_cipher_mode>:
{
 8015090:	b480      	push	{r7}
 8015092:	b083      	sub	sp, #12
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
    if( NULL == ctx || NULL == ctx->cipher_info )
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d003      	beq.n	80150a6 <mbedtls_cipher_get_cipher_mode+0x16>
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d101      	bne.n	80150aa <mbedtls_cipher_get_cipher_mode+0x1a>
        return MBEDTLS_MODE_NONE;
 80150a6:	2300      	movs	r3, #0
 80150a8:	e002      	b.n	80150b0 <mbedtls_cipher_get_cipher_mode+0x20>
    return ctx->cipher_info->mode;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	785b      	ldrb	r3, [r3, #1]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	370c      	adds	r7, #12
 80150b4:	46bd      	mov	sp, r7
 80150b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ba:	4770      	bx	lr

080150bc <mbedtls_ssl_sig_hash_set_init>:
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
    mbedtls_ssl_sig_hash_set_const_hash( set, MBEDTLS_MD_NONE );
 80150c4:	2100      	movs	r1, #0
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f004 f840 	bl	801914c <mbedtls_ssl_sig_hash_set_const_hash>
}
 80150cc:	bf00      	nop
 80150ce:	3708      	adds	r7, #8
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <mbedtls_ssl_own_cert>:
{
 80150d4:	b480      	push	{r7}
 80150d6:	b085      	sub	sp, #20
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d009      	beq.n	80150f8 <mbedtls_ssl_own_cert+0x24>
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d004      	beq.n	80150f8 <mbedtls_ssl_own_cert+0x24>
        key_cert = ssl->handshake->key_cert;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150f2:	685b      	ldr	r3, [r3, #4]
 80150f4:	60fb      	str	r3, [r7, #12]
 80150f6:	e003      	b.n	8015100 <mbedtls_ssl_own_cert+0x2c>
        key_cert = ssl->conf->key_cert;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150fe:	60fb      	str	r3, [r7, #12]
    return( key_cert == NULL ? NULL : key_cert->cert );
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d002      	beq.n	801510c <mbedtls_ssl_own_cert+0x38>
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	e000      	b.n	801510e <mbedtls_ssl_own_cert+0x3a>
 801510c:	2300      	movs	r3, #0
}
 801510e:	4618      	mov	r0, r3
 8015110:	3714      	adds	r7, #20
 8015112:	46bd      	mov	sp, r7
 8015114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015118:	4770      	bx	lr

0801511a <mbedtls_ssl_hdr_len>:
{
 801511a:	b480      	push	{r7}
 801511c:	b083      	sub	sp, #12
 801511e:	af00      	add	r7, sp, #0
 8015120:	6078      	str	r0, [r7, #4]
    return( 5 );
 8015122:	2305      	movs	r3, #5
}
 8015124:	4618      	mov	r0, r3
 8015126:	370c      	adds	r7, #12
 8015128:	46bd      	mov	sp, r7
 801512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512e:	4770      	bx	lr

08015130 <mbedtls_ssl_hs_hdr_len>:
{
 8015130:	b480      	push	{r7}
 8015132:	b083      	sub	sp, #12
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
    return( 4 );
 8015138:	2304      	movs	r3, #4
}
 801513a:	4618      	mov	r0, r3
 801513c:	370c      	adds	r7, #12
 801513e:	46bd      	mov	sp, r7
 8015140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015144:	4770      	bx	lr

08015146 <mbedtls_ssl_safer_memcmp>:
void mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl );
#endif

/* constant-time buffer comparison */
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
 8015146:	b480      	push	{r7}
 8015148:	b089      	sub	sp, #36	; 0x24
 801514a:	af00      	add	r7, sp, #0
 801514c:	60f8      	str	r0, [r7, #12]
 801514e:	60b9      	str	r1, [r7, #8]
 8015150:	607a      	str	r2, [r7, #4]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	61bb      	str	r3, [r7, #24]
    volatile const unsigned char *B = (volatile const unsigned char *) b;
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	617b      	str	r3, [r7, #20]
    volatile unsigned char diff = 0;
 801515a:	2300      	movs	r3, #0
 801515c:	74fb      	strb	r3, [r7, #19]

    for( i = 0; i < n; i++ )
 801515e:	2300      	movs	r3, #0
 8015160:	61fb      	str	r3, [r7, #28]
 8015162:	e016      	b.n	8015192 <mbedtls_ssl_safer_memcmp+0x4c>
        diff |= A[i] ^ B[i];
 8015164:	69ba      	ldr	r2, [r7, #24]
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	4413      	add	r3, r2
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	b2da      	uxtb	r2, r3
 801516e:	6979      	ldr	r1, [r7, #20]
 8015170:	69fb      	ldr	r3, [r7, #28]
 8015172:	440b      	add	r3, r1
 8015174:	781b      	ldrb	r3, [r3, #0]
 8015176:	b2db      	uxtb	r3, r3
 8015178:	4053      	eors	r3, r2
 801517a:	b2db      	uxtb	r3, r3
 801517c:	b25a      	sxtb	r2, r3
 801517e:	7cfb      	ldrb	r3, [r7, #19]
 8015180:	b2db      	uxtb	r3, r3
 8015182:	b25b      	sxtb	r3, r3
 8015184:	4313      	orrs	r3, r2
 8015186:	b25b      	sxtb	r3, r3
 8015188:	b2db      	uxtb	r3, r3
 801518a:	74fb      	strb	r3, [r7, #19]
    for( i = 0; i < n; i++ )
 801518c:	69fb      	ldr	r3, [r7, #28]
 801518e:	3301      	adds	r3, #1
 8015190:	61fb      	str	r3, [r7, #28]
 8015192:	69fa      	ldr	r2, [r7, #28]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	429a      	cmp	r2, r3
 8015198:	d3e4      	bcc.n	8015164 <mbedtls_ssl_safer_memcmp+0x1e>

    return( diff );
 801519a:	7cfb      	ldrb	r3, [r7, #19]
 801519c:	b2db      	uxtb	r3, r3
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3724      	adds	r7, #36	; 0x24
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr

080151aa <mbedtls_zeroize>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80151aa:	b480      	push	{r7}
 80151ac:	b085      	sub	sp, #20
 80151ae:	af00      	add	r7, sp, #0
 80151b0:	6078      	str	r0, [r7, #4]
 80151b2:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	60fb      	str	r3, [r7, #12]
 80151b8:	e004      	b.n	80151c4 <mbedtls_zeroize+0x1a>
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	1c5a      	adds	r2, r3, #1
 80151be:	60fa      	str	r2, [r7, #12]
 80151c0:	2200      	movs	r2, #0
 80151c2:	701a      	strb	r2, [r3, #0]
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	1e5a      	subs	r2, r3, #1
 80151c8:	603a      	str	r2, [r7, #0]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d1f5      	bne.n	80151ba <mbedtls_zeroize+0x10>
}
 80151ce:	bf00      	nop
 80151d0:	bf00      	nop
 80151d2:	3714      	adds	r7, #20
 80151d4:	46bd      	mov	sp, r7
 80151d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151da:	4770      	bx	lr

080151dc <ssl_ep_len>:

/* Length of the "epoch" field in the record header */
static inline size_t ssl_ep_len( const mbedtls_ssl_context *ssl )
{
 80151dc:	b480      	push	{r7}
 80151de:	b083      	sub	sp, #12
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        return( 2 );
#else
    ((void) ssl);
#endif
    return( 0 );
 80151e4:	2300      	movs	r3, #0
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	370c      	adds	r7, #12
 80151ea:	46bd      	mov	sp, r7
 80151ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f0:	4770      	bx	lr
	...

080151f4 <ssl_check_timer>:

/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b084      	sub	sp, #16
 80151f8:	af02      	add	r7, sp, #8
 80151fa:	6078      	str	r0, [r7, #4]
    if( ssl->f_get_timer == NULL )
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015200:	2b00      	cmp	r3, #0
 8015202:	d101      	bne.n	8015208 <ssl_check_timer+0x14>
        return( 0 );
 8015204:	2300      	movs	r3, #0
 8015206:	e014      	b.n	8015232 <ssl_check_timer+0x3e>

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8015210:	4610      	mov	r0, r2
 8015212:	4798      	blx	r3
 8015214:	4603      	mov	r3, r0
 8015216:	2b02      	cmp	r3, #2
 8015218:	d10a      	bne.n	8015230 <ssl_check_timer+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801521a:	4b08      	ldr	r3, [pc, #32]	; (801523c <ssl_check_timer+0x48>)
 801521c:	9300      	str	r3, [sp, #0]
 801521e:	2360      	movs	r3, #96	; 0x60
 8015220:	4a07      	ldr	r2, [pc, #28]	; (8015240 <ssl_check_timer+0x4c>)
 8015222:	2103      	movs	r1, #3
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7f6 fa3d 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( -1 );
 801522a:	f04f 33ff 	mov.w	r3, #4294967295
 801522e:	e000      	b.n	8015232 <ssl_check_timer+0x3e>
    }

    return( 0 );
 8015230:	2300      	movs	r3, #0
}
 8015232:	4618      	mov	r0, r3
 8015234:	3708      	adds	r7, #8
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	08022414 	.word	0x08022414
 8015240:	080223d4 	.word	0x080223d4

08015244 <tls_prf_generic>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b0b6      	sub	sp, #216	; 0xd8
 8015248:	af00      	add	r7, sp, #0
 801524a:	60b9      	str	r1, [r7, #8]
 801524c:	607a      	str	r2, [r7, #4]
 801524e:	603b      	str	r3, [r7, #0]
 8015250:	4603      	mov	r3, r0
 8015252:	73fb      	strb	r3, [r7, #15]
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 8015254:	f107 0310 	add.w	r3, r7, #16
 8015258:	4618      	mov	r0, r3
 801525a:	f7f8 fe79 	bl	800df50 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 801525e:	7bfb      	ldrb	r3, [r7, #15]
 8015260:	4618      	mov	r0, r3
 8015262:	f7f8 fe5b 	bl	800df1c <mbedtls_md_info_from_type>
 8015266:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 801526a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801526e:	2b00      	cmp	r3, #0
 8015270:	d101      	bne.n	8015276 <tls_prf_generic+0x32>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015272:	4b7b      	ldr	r3, [pc, #492]	; (8015460 <tls_prf_generic+0x21c>)
 8015274:	e0ef      	b.n	8015456 <tls_prf_generic+0x212>

    md_len = mbedtls_md_get_size( md_info );
 8015276:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801527a:	f7f9 f88d 	bl	800e398 <mbedtls_md_get_size>
 801527e:	4603      	mov	r3, r0
 8015280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 8015284:	6838      	ldr	r0, [r7, #0]
 8015286:	f7ea ffa3 	bl	80001d0 <strlen>
 801528a:	4602      	mov	r2, r0
 801528c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015290:	441a      	add	r2, r3
 8015292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015296:	4413      	add	r3, r2
 8015298:	2b80      	cmp	r3, #128	; 0x80
 801529a:	d901      	bls.n	80152a0 <tls_prf_generic+0x5c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801529c:	4b71      	ldr	r3, [pc, #452]	; (8015464 <tls_prf_generic+0x220>)
 801529e:	e0da      	b.n	8015456 <tls_prf_generic+0x212>

    nb = strlen( label );
 80152a0:	6838      	ldr	r0, [r7, #0]
 80152a2:	f7ea ff95 	bl	80001d0 <strlen>
 80152a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    memcpy( tmp + md_len, label, nb );
 80152aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80152ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80152b2:	4413      	add	r3, r2
 80152b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80152b8:	6839      	ldr	r1, [r7, #0]
 80152ba:	4618      	mov	r0, r3
 80152bc:	f008 faac 	bl	801d818 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 80152c0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80152c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80152c8:	4413      	add	r3, r2
 80152ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80152ce:	4413      	add	r3, r2
 80152d0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80152d4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80152d8:	4618      	mov	r0, r3
 80152da:	f008 fa9d 	bl	801d818 <memcpy>
    nb += rlen;
 80152de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80152e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152e6:	4413      	add	r3, r2
 80152e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80152ec:	f107 0310 	add.w	r3, r7, #16
 80152f0:	2201      	movs	r2, #1
 80152f2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7f8 fe6a 	bl	800dfd0 <mbedtls_md_setup>
 80152fc:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8015300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015304:	2b00      	cmp	r3, #0
 8015306:	d002      	beq.n	801530e <tls_prf_generic+0xca>
        return( ret );
 8015308:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801530c:	e0a3      	b.n	8015456 <tls_prf_generic+0x212>

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 801530e:	f107 0310 	add.w	r3, r7, #16
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	68b9      	ldr	r1, [r7, #8]
 8015316:	4618      	mov	r0, r3
 8015318:	f7f8 feb4 	bl	800e084 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 801531c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015324:	18d1      	adds	r1, r2, r3
 8015326:	f107 0310 	add.w	r3, r7, #16
 801532a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801532e:	4618      	mov	r0, r3
 8015330:	f7f8 ff5a 	bl	800e1e8 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 8015334:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015338:	f107 0310 	add.w	r3, r7, #16
 801533c:	4611      	mov	r1, r2
 801533e:	4618      	mov	r0, r3
 8015340:	f7f8 ff74 	bl	800e22c <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 8015344:	2300      	movs	r3, #0
 8015346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801534a:	e06c      	b.n	8015426 <tls_prf_generic+0x1e2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 801534c:	f107 0310 	add.w	r3, r7, #16
 8015350:	4618      	mov	r0, r3
 8015352:	f7f8 ffd1 	bl	800e2f8 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8015356:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801535a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801535e:	441a      	add	r2, r3
 8015360:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015364:	f107 0310 	add.w	r3, r7, #16
 8015368:	4618      	mov	r0, r3
 801536a:	f7f8 ff3d 	bl	800e1e8 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 801536e:	f107 021c 	add.w	r2, r7, #28
 8015372:	f107 0310 	add.w	r3, r7, #16
 8015376:	4611      	mov	r1, r2
 8015378:	4618      	mov	r0, r3
 801537a:	f7f8 ff57 	bl	800e22c <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 801537e:	f107 0310 	add.w	r3, r7, #16
 8015382:	4618      	mov	r0, r3
 8015384:	f7f8 ffb8 	bl	800e2f8 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 8015388:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801538c:	f107 0310 	add.w	r3, r7, #16
 8015390:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015394:	4618      	mov	r0, r3
 8015396:	f7f8 ff27 	bl	800e1e8 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 801539a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801539e:	f107 0310 	add.w	r3, r7, #16
 80153a2:	4611      	mov	r1, r2
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7f8 ff41 	bl	800e22c <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80153aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80153ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80153b2:	4413      	add	r3, r2
 80153b4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d20b      	bcs.n	80153d4 <tls_prf_generic+0x190>
 80153bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80153c0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80153c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80153c8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80153cc:	fb01 f202 	mul.w	r2, r1, r2
 80153d0:	1a9b      	subs	r3, r3, r2
 80153d2:	e001      	b.n	80153d8 <tls_prf_generic+0x194>
 80153d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80153d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        for( j = 0; j < k; j++ )
 80153dc:	2300      	movs	r3, #0
 80153de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80153e2:	e013      	b.n	801540c <tls_prf_generic+0x1c8>
            dstbuf[i + j]  = h_i[j];
 80153e4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80153e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80153ec:	4413      	add	r3, r2
 80153ee:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80153f2:	4413      	add	r3, r2
 80153f4:	f107 011c 	add.w	r1, r7, #28
 80153f8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80153fc:	440a      	add	r2, r1
 80153fe:	7812      	ldrb	r2, [r2, #0]
 8015400:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < k; j++ )
 8015402:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015406:	3301      	adds	r3, #1
 8015408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801540c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015414:	429a      	cmp	r2, r3
 8015416:	d3e5      	bcc.n	80153e4 <tls_prf_generic+0x1a0>
    for( i = 0; i < dlen; i += md_len )
 8015418:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801541c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015420:	4413      	add	r3, r2
 8015422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8015426:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801542a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801542e:	429a      	cmp	r2, r3
 8015430:	d38c      	bcc.n	801534c <tls_prf_generic+0x108>
    }

    mbedtls_md_free( &md_ctx );
 8015432:	f107 0310 	add.w	r3, r7, #16
 8015436:	4618      	mov	r0, r3
 8015438:	f7f8 fd97 	bl	800df6a <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 801543c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015440:	2180      	movs	r1, #128	; 0x80
 8015442:	4618      	mov	r0, r3
 8015444:	f7ff feb1 	bl	80151aa <mbedtls_zeroize>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 8015448:	f107 031c 	add.w	r3, r7, #28
 801544c:	2120      	movs	r1, #32
 801544e:	4618      	mov	r0, r3
 8015450:	f7ff feab 	bl	80151aa <mbedtls_zeroize>

    return( 0 );
 8015454:	2300      	movs	r3, #0
}
 8015456:	4618      	mov	r0, r3
 8015458:	37d8      	adds	r7, #216	; 0xd8
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	ffff9400 	.word	0xffff9400
 8015464:	ffff8f00 	.word	0xffff8f00

08015468 <tls_prf_sha256>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b088      	sub	sp, #32
 801546c:	af04      	add	r7, sp, #16
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	60b9      	str	r1, [r7, #8]
 8015472:	607a      	str	r2, [r7, #4]
 8015474:	603b      	str	r3, [r7, #0]
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 8015476:	6a3b      	ldr	r3, [r7, #32]
 8015478:	9303      	str	r3, [sp, #12]
 801547a:	69fb      	ldr	r3, [r7, #28]
 801547c:	9302      	str	r3, [sp, #8]
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	9301      	str	r3, [sp, #4]
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	9300      	str	r3, [sp, #0]
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	68ba      	ldr	r2, [r7, #8]
 801548a:	68f9      	ldr	r1, [r7, #12]
 801548c:	2006      	movs	r0, #6
 801548e:	f7ff fed9 	bl	8015244 <tls_prf_generic>
 8015492:	4603      	mov	r3, r0
                             label, random, rlen, dstbuf, dlen ) );
}
 8015494:	4618      	mov	r0, r3
 8015496:	3710      	adds	r7, #16
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}

0801549c <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 801549c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801549e:	b0e5      	sub	sp, #404	; 0x194
 80154a0:	af06      	add	r7, sp, #24
 80154a2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80154a6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80154aa:	6018      	str	r0, [r3, #0]
    int ret = 0;
 80154ac:	2300      	movs	r3, #0
 80154ae:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80154b2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80154b6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154be:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 80154c2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80154c6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 80154d2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80154d6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 80154e2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80154e6:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80154ea:	4b9b      	ldr	r3, [pc, #620]	; (8015758 <mbedtls_ssl_derive_keys+0x2bc>)
 80154ec:	9300      	str	r3, [sp, #0]
 80154ee:	f240 2301 	movw	r3, #513	; 0x201
 80154f2:	4a9a      	ldr	r2, [pc, #616]	; (801575c <mbedtls_ssl_derive_keys+0x2c0>)
 80154f4:	2102      	movs	r1, #2
 80154f6:	6800      	ldr	r0, [r0, #0]
 80154f8:	f7f6 f8d4 	bl	800b6a4 <mbedtls_debug_print_msg>

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80154fc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	7a1b      	ldrb	r3, [r3, #8]
 8015504:	4618      	mov	r0, r3
 8015506:	f7f5 fbb1 	bl	800ac6c <mbedtls_cipher_info_from_type>
 801550a:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
    if( cipher_info == NULL )
 801550e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015512:	2b00      	cmp	r3, #0
 8015514:	d114      	bne.n	8015540 <mbedtls_ssl_derive_keys+0xa4>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 8015516:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	7a1b      	ldrb	r3, [r3, #8]
 801551e:	461a      	mov	r2, r3
 8015520:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015524:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015528:	9201      	str	r2, [sp, #4]
 801552a:	4b8d      	ldr	r3, [pc, #564]	; (8015760 <mbedtls_ssl_derive_keys+0x2c4>)
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	f240 2306 	movw	r3, #518	; 0x206
 8015532:	4a8a      	ldr	r2, [pc, #552]	; (801575c <mbedtls_ssl_derive_keys+0x2c0>)
 8015534:	2101      	movs	r1, #1
 8015536:	6800      	ldr	r0, [r0, #0]
 8015538:	f7f6 f8b4 	bl	800b6a4 <mbedtls_debug_print_msg>
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801553c:	4b89      	ldr	r3, [pc, #548]	; (8015764 <mbedtls_ssl_derive_keys+0x2c8>)
 801553e:	e3f3      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8015540:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	7a5b      	ldrb	r3, [r3, #9]
 8015548:	4618      	mov	r0, r3
 801554a:	f7f8 fce7 	bl	800df1c <mbedtls_md_info_from_type>
 801554e:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if( md_info == NULL )
 8015552:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015556:	2b00      	cmp	r3, #0
 8015558:	d114      	bne.n	8015584 <mbedtls_ssl_derive_keys+0xe8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801555a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	7a5b      	ldrb	r3, [r3, #9]
 8015562:	461a      	mov	r2, r3
 8015564:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015568:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 801556c:	9201      	str	r2, [sp, #4]
 801556e:	4b7e      	ldr	r3, [pc, #504]	; (8015768 <mbedtls_ssl_derive_keys+0x2cc>)
 8015570:	9300      	str	r3, [sp, #0]
 8015572:	f240 230e 	movw	r3, #526	; 0x20e
 8015576:	4a79      	ldr	r2, [pc, #484]	; (801575c <mbedtls_ssl_derive_keys+0x2c0>)
 8015578:	2101      	movs	r1, #1
 801557a:	6800      	ldr	r0, [r0, #0]
 801557c:	f7f6 f892 	bl	800b6a4 <mbedtls_debug_print_msg>
                            transform->ciphersuite_info->mac ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015580:	4b78      	ldr	r3, [pc, #480]	; (8015764 <mbedtls_ssl_derive_keys+0x2c8>)
 8015582:	e3d1      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
    }
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8015584:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015588:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	2b03      	cmp	r3, #3
 8015592:	d113      	bne.n	80155bc <mbedtls_ssl_derive_keys+0x120>
    {
        handshake->tls_prf = tls_prf_sha256;
 8015594:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015598:	4a74      	ldr	r2, [pc, #464]	; (801576c <mbedtls_ssl_derive_keys+0x2d0>)
 801559a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 801559e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80155a2:	4a73      	ldr	r2, [pc, #460]	; (8015770 <mbedtls_ssl_derive_keys+0x2d4>)
 80155a4:	679a      	str	r2, [r3, #120]	; 0x78
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 80155a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80155aa:	4a72      	ldr	r2, [pc, #456]	; (8015774 <mbedtls_ssl_derive_keys+0x2d8>)
 80155ac:	67da      	str	r2, [r3, #124]	; 0x7c
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 80155ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80155b2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d161      	bne.n	801567e <mbedtls_ssl_derive_keys+0x1e2>
 80155ba:	e00e      	b.n	80155da <mbedtls_ssl_derive_keys+0x13e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80155bc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80155c0:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80155c4:	4b6c      	ldr	r3, [pc, #432]	; (8015778 <mbedtls_ssl_derive_keys+0x2dc>)
 80155c6:	9300      	str	r3, [sp, #0]
 80155c8:	f240 233e 	movw	r3, #574	; 0x23e
 80155cc:	4a63      	ldr	r2, [pc, #396]	; (801575c <mbedtls_ssl_derive_keys+0x2c0>)
 80155ce:	2101      	movs	r1, #1
 80155d0:	6800      	ldr	r0, [r0, #0]
 80155d2:	f7f6 f867 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80155d6:	4b69      	ldr	r3, [pc, #420]	; (801577c <mbedtls_ssl_derive_keys+0x2e0>)
 80155d8:	e3a6      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
    {
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 80155da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80155de:	33c8      	adds	r3, #200	; 0xc8
 80155e0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80155e4:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 80155e8:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80155ec:	f5a1 70ba 	sub.w	r0, r1, #372	; 0x174
 80155f0:	9202      	str	r2, [sp, #8]
 80155f2:	9301      	str	r3, [sp, #4]
 80155f4:	4b62      	ldr	r3, [pc, #392]	; (8015780 <mbedtls_ssl_derive_keys+0x2e4>)
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	f240 234e 	movw	r3, #590	; 0x24e
 80155fc:	4a57      	ldr	r2, [pc, #348]	; (801575c <mbedtls_ssl_derive_keys+0x2c0>)
 80155fe:	2103      	movs	r1, #3
 8015600:	6800      	ldr	r0, [r0, #0]
 8015602:	f7f6 f941 	bl	800b888 <mbedtls_debug_print_buf>
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8015606:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801560a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801560e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015612:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
 8015616:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801561a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
                                  "master secret",
                                  handshake->randbytes, 64,
 801561e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015622:	f103 0288 	add.w	r2, r3, #136	; 0x88
                                  session->master, 48 );
 8015626:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801562a:	332c      	adds	r3, #44	; 0x2c
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 801562c:	2530      	movs	r5, #48	; 0x30
 801562e:	9502      	str	r5, [sp, #8]
 8015630:	9301      	str	r3, [sp, #4]
 8015632:	2340      	movs	r3, #64	; 0x40
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	4613      	mov	r3, r2
 8015638:	4a52      	ldr	r2, [pc, #328]	; (8015784 <mbedtls_ssl_derive_keys+0x2e8>)
 801563a:	47a0      	blx	r4
 801563c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
        if( ret != 0 )
 8015640:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015644:	2b00      	cmp	r3, #0
 8015646:	d012      	beq.n	801566e <mbedtls_ssl_derive_keys+0x1d2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 8015648:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801564c:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015650:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015654:	9301      	str	r3, [sp, #4]
 8015656:	4b4c      	ldr	r3, [pc, #304]	; (8015788 <mbedtls_ssl_derive_keys+0x2ec>)
 8015658:	9300      	str	r3, [sp, #0]
 801565a:	f240 2381 	movw	r3, #641	; 0x281
 801565e:	4a3f      	ldr	r2, [pc, #252]	; (801575c <mbedtls_ssl_derive_keys+0x2c0>)
 8015660:	2101      	movs	r1, #1
 8015662:	6800      	ldr	r0, [r0, #0]
 8015664:	f7f6 f8a4 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 8015668:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801566c:	e35c      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 801566e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015672:	33c8      	adds	r3, #200	; 0xc8
 8015674:	2130      	movs	r1, #48	; 0x30
 8015676:	4618      	mov	r0, r3
 8015678:	f7ff fd97 	bl	80151aa <mbedtls_zeroize>
 801567c:	e00c      	b.n	8015698 <mbedtls_ssl_derive_keys+0x1fc>
    }
    else
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 801567e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015682:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015686:	4b41      	ldr	r3, [pc, #260]	; (801578c <mbedtls_ssl_derive_keys+0x2f0>)
 8015688:	9300      	str	r3, [sp, #0]
 801568a:	f44f 7322 	mov.w	r3, #648	; 0x288
 801568e:	4a33      	ldr	r2, [pc, #204]	; (801575c <mbedtls_ssl_derive_keys+0x2c0>)
 8015690:	2103      	movs	r1, #3
 8015692:	6800      	ldr	r0, [r0, #0]
 8015694:	f7f6 f806 	bl	800b6a4 <mbedtls_debug_print_msg>

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 8015698:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801569c:	3388      	adds	r3, #136	; 0x88
 801569e:	461c      	mov	r4, r3
 80156a0:	f507 7684 	add.w	r6, r7, #264	; 0x108
 80156a4:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80156a8:	4635      	mov	r5, r6
 80156aa:	4623      	mov	r3, r4
 80156ac:	6818      	ldr	r0, [r3, #0]
 80156ae:	6859      	ldr	r1, [r3, #4]
 80156b0:	689a      	ldr	r2, [r3, #8]
 80156b2:	68db      	ldr	r3, [r3, #12]
 80156b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80156b6:	3410      	adds	r4, #16
 80156b8:	3610      	adds	r6, #16
 80156ba:	4564      	cmp	r4, ip
 80156bc:	d1f4      	bne.n	80156a8 <mbedtls_ssl_derive_keys+0x20c>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80156be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80156c2:	f103 0088 	add.w	r0, r3, #136	; 0x88
 80156c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80156ca:	3320      	adds	r3, #32
 80156cc:	2220      	movs	r2, #32
 80156ce:	4619      	mov	r1, r3
 80156d0:	f008 f8a2 	bl	801d818 <memcpy>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80156d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80156d8:	3388      	adds	r3, #136	; 0x88
 80156da:	3320      	adds	r3, #32
 80156dc:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80156e0:	2220      	movs	r2, #32
 80156e2:	4618      	mov	r0, r3
 80156e4:	f008 f898 	bl	801d818 <memcpy>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80156e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80156ec:	2140      	movs	r1, #64	; 0x40
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7ff fd5b 	bl	80151aa <mbedtls_zeroize>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80156f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80156f8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80156fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015700:	f103 002c 	add.w	r0, r3, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 8015704:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015708:	f103 0288 	add.w	r2, r3, #136	; 0x88
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 801570c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015710:	9302      	str	r3, [sp, #8]
 8015712:	f107 0308 	add.w	r3, r7, #8
 8015716:	9301      	str	r3, [sp, #4]
 8015718:	2340      	movs	r3, #64	; 0x40
 801571a:	9300      	str	r3, [sp, #0]
 801571c:	4613      	mov	r3, r2
 801571e:	4a1c      	ldr	r2, [pc, #112]	; (8015790 <mbedtls_ssl_derive_keys+0x2f4>)
 8015720:	2130      	movs	r1, #48	; 0x30
 8015722:	47a0      	blx	r4
 8015724:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if( ret != 0 )
 8015728:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801572c:	2b00      	cmp	r3, #0
 801572e:	d031      	beq.n	8015794 <mbedtls_ssl_derive_keys+0x2f8>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 8015730:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015734:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015738:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801573c:	9301      	str	r3, [sp, #4]
 801573e:	4b12      	ldr	r3, [pc, #72]	; (8015788 <mbedtls_ssl_derive_keys+0x2ec>)
 8015740:	9300      	str	r3, [sp, #0]
 8015742:	f240 23a2 	movw	r3, #674	; 0x2a2
 8015746:	4a05      	ldr	r2, [pc, #20]	; (801575c <mbedtls_ssl_derive_keys+0x2c0>)
 8015748:	2101      	movs	r1, #1
 801574a:	6800      	ldr	r0, [r0, #0]
 801574c:	f7f6 f830 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8015750:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015754:	e2e8      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
 8015756:	bf00      	nop
 8015758:	08022424 	.word	0x08022424
 801575c:	080223d4 	.word	0x080223d4
 8015760:	08022434 	.word	0x08022434
 8015764:	ffff8f00 	.word	0xffff8f00
 8015768:	08022454 	.word	0x08022454
 801576c:	08015469 	.word	0x08015469
 8015770:	08015d51 	.word	0x08015d51
 8015774:	08018449 	.word	0x08018449
 8015778:	08022478 	.word	0x08022478
 801577c:	ffff9400 	.word	0xffff9400
 8015780:	0802248c 	.word	0x0802248c
 8015784:	080224a0 	.word	0x080224a0
 8015788:	080224b0 	.word	0x080224b0
 801578c:	080224b4 	.word	0x080224b4
 8015790:	080224d4 	.word	0x080224d4
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 8015794:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	4618      	mov	r0, r3
 801579c:	f7fd fed0 	bl	8013540 <mbedtls_ssl_get_ciphersuite_name>
 80157a0:	4603      	mov	r3, r0
 80157a2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80157a6:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 80157aa:	9301      	str	r3, [sp, #4]
 80157ac:	4bb0      	ldr	r3, [pc, #704]	; (8015a70 <mbedtls_ssl_derive_keys+0x5d4>)
 80157ae:	9300      	str	r3, [sp, #0]
 80157b0:	f240 23a6 	movw	r3, #678	; 0x2a6
 80157b4:	4aaf      	ldr	r2, [pc, #700]	; (8015a74 <mbedtls_ssl_derive_keys+0x5d8>)
 80157b6:	2103      	movs	r1, #3
 80157b8:	6800      	ldr	r0, [r0, #0]
 80157ba:	f7f5 ff73 	bl	800b6a4 <mbedtls_debug_print_msg>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 80157be:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80157c2:	332c      	adds	r3, #44	; 0x2c
 80157c4:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80157c8:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 80157cc:	2230      	movs	r2, #48	; 0x30
 80157ce:	9202      	str	r2, [sp, #8]
 80157d0:	9301      	str	r3, [sp, #4]
 80157d2:	4ba9      	ldr	r3, [pc, #676]	; (8015a78 <mbedtls_ssl_derive_keys+0x5dc>)
 80157d4:	9300      	str	r3, [sp, #0]
 80157d6:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 80157da:	4aa6      	ldr	r2, [pc, #664]	; (8015a74 <mbedtls_ssl_derive_keys+0x5d8>)
 80157dc:	2103      	movs	r1, #3
 80157de:	6800      	ldr	r0, [r0, #0]
 80157e0:	f7f6 f852 	bl	800b888 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 80157e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80157e8:	3388      	adds	r3, #136	; 0x88
 80157ea:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80157ee:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 80157f2:	2240      	movs	r2, #64	; 0x40
 80157f4:	9202      	str	r2, [sp, #8]
 80157f6:	9301      	str	r3, [sp, #4]
 80157f8:	4ba0      	ldr	r3, [pc, #640]	; (8015a7c <mbedtls_ssl_derive_keys+0x5e0>)
 80157fa:	9300      	str	r3, [sp, #0]
 80157fc:	f240 23a9 	movw	r3, #681	; 0x2a9
 8015800:	4a9c      	ldr	r2, [pc, #624]	; (8015a74 <mbedtls_ssl_derive_keys+0x5d8>)
 8015802:	2104      	movs	r1, #4
 8015804:	6800      	ldr	r0, [r0, #0]
 8015806:	f7f6 f83f 	bl	800b888 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 801580a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801580e:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015816:	9302      	str	r3, [sp, #8]
 8015818:	f107 0308 	add.w	r3, r7, #8
 801581c:	9301      	str	r3, [sp, #4]
 801581e:	4b98      	ldr	r3, [pc, #608]	; (8015a80 <mbedtls_ssl_derive_keys+0x5e4>)
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	f240 23aa 	movw	r3, #682	; 0x2aa
 8015826:	4a93      	ldr	r2, [pc, #588]	; (8015a74 <mbedtls_ssl_derive_keys+0x5d8>)
 8015828:	2104      	movs	r1, #4
 801582a:	6800      	ldr	r0, [r0, #0]
 801582c:	f7f6 f82c 	bl	800b888 <mbedtls_debug_print_buf>

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 8015830:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015834:	3388      	adds	r3, #136	; 0x88
 8015836:	2140      	movs	r1, #64	; 0x40
 8015838:	4618      	mov	r0, r3
 801583a:	f7ff fcb6 	bl	80151aa <mbedtls_zeroize>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 801583e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	08da      	lsrs	r2, r3, #3
 8015846:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801584a:	605a      	str	r2, [r3, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 801584c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015850:	785b      	ldrb	r3, [r3, #1]
 8015852:	2b06      	cmp	r3, #6
 8015854:	d004      	beq.n	8015860 <mbedtls_ssl_derive_keys+0x3c4>
        cipher_info->mode == MBEDTLS_MODE_CCM )
 8015856:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801585a:	785b      	ldrb	r3, [r3, #1]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 801585c:	2b08      	cmp	r3, #8
 801585e:	d125      	bne.n	80158ac <mbedtls_ssl_derive_keys+0x410>
    {
        transform->maclen = 0;
 8015860:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015864:	2200      	movs	r2, #0
 8015866:	615a      	str	r2, [r3, #20]
        mac_key_len = 0;
 8015868:	2300      	movs	r3, #0
 801586a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

        transform->ivlen = 12;
 801586e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015872:	220c      	movs	r2, #12
 8015874:	60da      	str	r2, [r3, #12]
        transform->fixed_ivlen = 4;
 8015876:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801587a:	2204      	movs	r2, #4
 801587c:	611a      	str	r2, [r3, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
 801587e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015882:	68da      	ldr	r2, [r3, #12]
 8015884:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015888:	691b      	ldr	r3, [r3, #16]
 801588a:	1ad3      	subs	r3, r2, r3
                            + ( transform->ciphersuite_info->flags &
 801588c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8015890:	6812      	ldr	r2, [r2, #0]
 8015892:	7f12      	ldrb	r2, [r2, #28]
 8015894:	f002 0202 	and.w	r2, r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 8015898:	2a00      	cmp	r2, #0
 801589a:	d001      	beq.n	80158a0 <mbedtls_ssl_derive_keys+0x404>
 801589c:	2208      	movs	r2, #8
 801589e:	e000      	b.n	80158a2 <mbedtls_ssl_derive_keys+0x406>
 80158a0:	2210      	movs	r2, #16
                            + ( transform->ciphersuite_info->flags &
 80158a2:	441a      	add	r2, r3
        transform->minlen = transform->ivlen - transform->fixed_ivlen
 80158a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80158a8:	609a      	str	r2, [r3, #8]
 80158aa:	e08e      	b.n	80159ca <mbedtls_ssl_derive_keys+0x52e>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 80158ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80158b0:	3338      	adds	r3, #56	; 0x38
 80158b2:	2201      	movs	r2, #1
 80158b4:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7f8 fb89 	bl	800dfd0 <mbedtls_md_setup>
 80158be:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80158c2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d10e      	bne.n	80158e8 <mbedtls_ssl_derive_keys+0x44c>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
 80158ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80158ce:	3344      	adds	r3, #68	; 0x44
 80158d0:	2201      	movs	r2, #1
 80158d2:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7f8 fb7a 	bl	800dfd0 <mbedtls_md_setup>
 80158dc:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 80158e0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d012      	beq.n	801590e <mbedtls_ssl_derive_keys+0x472>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 80158e8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80158ec:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80158f0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80158f4:	9301      	str	r3, [sp, #4]
 80158f6:	4b63      	ldr	r3, [pc, #396]	; (8015a84 <mbedtls_ssl_derive_keys+0x5e8>)
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 80158fe:	4a5d      	ldr	r2, [pc, #372]	; (8015a74 <mbedtls_ssl_derive_keys+0x5d8>)
 8015900:	2101      	movs	r1, #1
 8015902:	6800      	ldr	r0, [r0, #0]
 8015904:	f7f5 ff54 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 8015908:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801590c:	e20c      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 801590e:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8015912:	f7f8 fd41 	bl	800e398 <mbedtls_md_get_size>
 8015916:	4603      	mov	r3, r0
 8015918:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        transform->maclen = mac_key_len;
 801591c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015920:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015924:	615a      	str	r2, [r3, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 8015926:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801592a:	68da      	ldr	r2, [r3, #12]
 801592c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015930:	60da      	str	r2, [r3, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 8015932:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015936:	785b      	ldrb	r3, [r3, #1]
 8015938:	2b07      	cmp	r3, #7
 801593a:	d106      	bne.n	801594a <mbedtls_ssl_derive_keys+0x4ae>
            transform->minlen = transform->maclen;
 801593c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015940:	695a      	ldr	r2, [r3, #20]
 8015942:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015946:	609a      	str	r2, [r3, #8]
 8015948:	e03f      	b.n	80159ca <mbedtls_ssl_derive_keys+0x52e>
                                  + cipher_info->block_size;
            }
            else
#endif
            {
                transform->minlen = transform->maclen
 801594a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801594e:	695a      	ldr	r2, [r3, #20]
                                  + cipher_info->block_size
 8015950:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015954:	695b      	ldr	r3, [r3, #20]
 8015956:	18d1      	adds	r1, r2, r3
                                  - transform->maclen % cipher_info->block_size;
 8015958:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801595c:	695b      	ldr	r3, [r3, #20]
 801595e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8015962:	6952      	ldr	r2, [r2, #20]
 8015964:	fbb3 f0f2 	udiv	r0, r3, r2
 8015968:	fb00 f202 	mul.w	r2, r0, r2
 801596c:	1a9b      	subs	r3, r3, r2
 801596e:	1aca      	subs	r2, r1, r3
                transform->minlen = transform->maclen
 8015970:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015974:	609a      	str	r2, [r3, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8015976:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801597a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	68db      	ldr	r3, [r3, #12]
 8015982:	2b02      	cmp	r3, #2
 8015984:	d007      	beq.n	8015996 <mbedtls_ssl_derive_keys+0x4fa>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8015986:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801598a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	68db      	ldr	r3, [r3, #12]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8015992:	2b03      	cmp	r3, #3
 8015994:	d10a      	bne.n	80159ac <mbedtls_ssl_derive_keys+0x510>
            {
                transform->minlen += transform->ivlen;
 8015996:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801599a:	689a      	ldr	r2, [r3, #8]
 801599c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80159a0:	68db      	ldr	r3, [r3, #12]
 80159a2:	441a      	add	r2, r3
 80159a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80159a8:	609a      	str	r2, [r3, #8]
 80159aa:	e00e      	b.n	80159ca <mbedtls_ssl_derive_keys+0x52e>
            }
            else
#endif
            {
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80159ac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80159b0:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80159b4:	4b34      	ldr	r3, [pc, #208]	; (8015a88 <mbedtls_ssl_derive_keys+0x5ec>)
 80159b6:	9300      	str	r3, [sp, #0]
 80159b8:	f240 330e 	movw	r3, #782	; 0x30e
 80159bc:	4a2d      	ldr	r2, [pc, #180]	; (8015a74 <mbedtls_ssl_derive_keys+0x5d8>)
 80159be:	2101      	movs	r1, #1
 80159c0:	6800      	ldr	r0, [r0, #0]
 80159c2:	f7f5 fe6f 	bl	800b6a4 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80159c6:	4b31      	ldr	r3, [pc, #196]	; (8015a8c <mbedtls_ssl_derive_keys+0x5f0>)
 80159c8:	e1ae      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
            }
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 80159ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80159d4:	6892      	ldr	r2, [r2, #8]
 80159d6:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80159da:	68c9      	ldr	r1, [r1, #12]
 80159dc:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 80159e0:	6944      	ldr	r4, [r0, #20]
 80159e2:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 80159e6:	f5a0 70ba 	sub.w	r0, r0, #372	; 0x174
 80159ea:	9404      	str	r4, [sp, #16]
 80159ec:	9103      	str	r1, [sp, #12]
 80159ee:	9202      	str	r2, [sp, #8]
 80159f0:	9301      	str	r3, [sp, #4]
 80159f2:	4b27      	ldr	r3, [pc, #156]	; (8015a90 <mbedtls_ssl_derive_keys+0x5f4>)
 80159f4:	9300      	str	r3, [sp, #0]
 80159f6:	f44f 7345 	mov.w	r3, #788	; 0x314
 80159fa:	4a1e      	ldr	r2, [pc, #120]	; (8015a74 <mbedtls_ssl_derive_keys+0x5d8>)
 80159fc:	2103      	movs	r1, #3
 80159fe:	6800      	ldr	r0, [r0, #0]
 8015a00:	f7f5 fe50 	bl	800b6a4 <mbedtls_debug_print_msg>

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8015a04:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015a08:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015a14:	f003 0301 	and.w	r3, r3, #1
 8015a18:	b2db      	uxtb	r3, r3
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d169      	bne.n	8015af2 <mbedtls_ssl_derive_keys+0x656>
    {
        key1 = keyblk + mac_key_len * 2;
 8015a1e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015a22:	005b      	lsls	r3, r3, #1
 8015a24:	f107 0208 	add.w	r2, r7, #8
 8015a28:	4413      	add	r3, r2
 8015a2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 8015a2e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015a32:	005a      	lsls	r2, r3, #1
 8015a34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a38:	685b      	ldr	r3, [r3, #4]
 8015a3a:	4413      	add	r3, r2
 8015a3c:	f107 0208 	add.w	r2, r7, #8
 8015a40:	4413      	add	r3, r2
 8015a42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

        mac_enc = keyblk;
 8015a46:	f107 0308 	add.w	r3, r7, #8
 8015a4a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
        mac_dec = keyblk + mac_key_len;
 8015a4e:	f107 0208 	add.w	r2, r7, #8
 8015a52:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015a56:	4413      	add	r3, r2
 8015a58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 8015a5c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a60:	691b      	ldr	r3, [r3, #16]
                            transform->fixed_ivlen : transform->ivlen;
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d016      	beq.n	8015a94 <mbedtls_ssl_derive_keys+0x5f8>
 8015a66:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a6a:	691b      	ldr	r3, [r3, #16]
 8015a6c:	e015      	b.n	8015a9a <mbedtls_ssl_derive_keys+0x5fe>
 8015a6e:	bf00      	nop
 8015a70:	080224e4 	.word	0x080224e4
 8015a74:	080223d4 	.word	0x080223d4
 8015a78:	080224a0 	.word	0x080224a0
 8015a7c:	080224f8 	.word	0x080224f8
 8015a80:	08022508 	.word	0x08022508
 8015a84:	08022514 	.word	0x08022514
 8015a88:	08022478 	.word	0x08022478
 8015a8c:	ffff9400 	.word	0xffff9400
 8015a90:	08022528 	.word	0x08022528
 8015a94:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015a98:	68db      	ldr	r3, [r3, #12]
        iv_copy_len = ( transform->fixed_ivlen ) ?
 8015a9a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 8015a9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015aa2:	f103 0018 	add.w	r0, r3, #24
 8015aa6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015aaa:	685b      	ldr	r3, [r3, #4]
 8015aac:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015ab0:	4413      	add	r3, r2
 8015ab2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015ab6:	4619      	mov	r1, r3
 8015ab8:	f007 feae 	bl	801d818 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 8015abc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015ac0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8015ac4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015ac8:	685a      	ldr	r2, [r3, #4]
 8015aca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015ace:	4413      	add	r3, r2
 8015ad0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015ad4:	4413      	add	r3, r2
 8015ad6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015ada:	4619      	mov	r1, r3
 8015adc:	f007 fe9c 	bl	801d818 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8015ae0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015ae4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	68db      	ldr	r3, [r3, #12]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	dd32      	ble.n	8015b56 <mbedtls_ssl_derive_keys+0x6ba>
 8015af0:	e00e      	b.n	8015b10 <mbedtls_ssl_derive_keys+0x674>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015af2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015af6:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015afa:	4b8e      	ldr	r3, [pc, #568]	; (8015d34 <mbedtls_ssl_derive_keys+0x898>)
 8015afc:	9300      	str	r3, [sp, #0]
 8015afe:	f44f 7351 	mov.w	r3, #836	; 0x344
 8015b02:	4a8d      	ldr	r2, [pc, #564]	; (8015d38 <mbedtls_ssl_derive_keys+0x89c>)
 8015b04:	2101      	movs	r1, #1
 8015b06:	6800      	ldr	r0, [r0, #0]
 8015b08:	f7f5 fdcc 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015b0c:	4b8b      	ldr	r3, [pc, #556]	; (8015d3c <mbedtls_ssl_derive_keys+0x8a0>)
 8015b0e:	e10b      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
    {
        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 8015b10:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b14:	3338      	adds	r3, #56	; 0x38
 8015b16:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015b1a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f7f8 fab0 	bl	800e084 <mbedtls_md_hmac_starts>
        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 8015b24:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b28:	3344      	adds	r3, #68	; 0x44
 8015b2a:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015b2e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7f8 faa6 	bl	800e084 <mbedtls_md_hmac_starts>
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 8015b38:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b3c:	3350      	adds	r3, #80	; 0x50
 8015b3e:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7f5 f90e 	bl	800ad64 <mbedtls_cipher_setup>
 8015b48:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015b4c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d022      	beq.n	8015b9a <mbedtls_ssl_derive_keys+0x6fe>
 8015b54:	e00e      	b.n	8015b74 <mbedtls_ssl_derive_keys+0x6d8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015b56:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015b5a:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015b5e:	4b75      	ldr	r3, [pc, #468]	; (8015d34 <mbedtls_ssl_derive_keys+0x898>)
 8015b60:	9300      	str	r3, [sp, #0]
 8015b62:	f44f 7358 	mov.w	r3, #864	; 0x360
 8015b66:	4a74      	ldr	r2, [pc, #464]	; (8015d38 <mbedtls_ssl_derive_keys+0x89c>)
 8015b68:	2101      	movs	r1, #1
 8015b6a:	6800      	ldr	r0, [r0, #0]
 8015b6c:	f7f5 fd9a 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015b70:	4b72      	ldr	r3, [pc, #456]	; (8015d3c <mbedtls_ssl_derive_keys+0x8a0>)
 8015b72:	e0d9      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
                                 cipher_info ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 8015b74:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015b78:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015b7c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015b80:	9301      	str	r3, [sp, #4]
 8015b82:	4b6f      	ldr	r3, [pc, #444]	; (8015d40 <mbedtls_ssl_derive_keys+0x8a4>)
 8015b84:	9300      	str	r3, [sp, #0]
 8015b86:	f44f 7361 	mov.w	r3, #900	; 0x384
 8015b8a:	4a6b      	ldr	r2, [pc, #428]	; (8015d38 <mbedtls_ssl_derive_keys+0x89c>)
 8015b8c:	2101      	movs	r1, #1
 8015b8e:	6800      	ldr	r0, [r0, #0]
 8015b90:	f7f5 fe0e 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8015b94:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015b98:	e0c6      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 8015b9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b9e:	3390      	adds	r3, #144	; 0x90
 8015ba0:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7f5 f8dd 	bl	800ad64 <mbedtls_cipher_setup>
 8015baa:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015bae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d012      	beq.n	8015bdc <mbedtls_ssl_derive_keys+0x740>
                                 cipher_info ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 8015bb6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015bba:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015bbe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015bc2:	9301      	str	r3, [sp, #4]
 8015bc4:	4b5e      	ldr	r3, [pc, #376]	; (8015d40 <mbedtls_ssl_derive_keys+0x8a4>)
 8015bc6:	9300      	str	r3, [sp, #0]
 8015bc8:	f240 338b 	movw	r3, #907	; 0x38b
 8015bcc:	4a5a      	ldr	r2, [pc, #360]	; (8015d38 <mbedtls_ssl_derive_keys+0x89c>)
 8015bce:	2101      	movs	r1, #1
 8015bd0:	6800      	ldr	r0, [r0, #0]
 8015bd2:	f7f5 fded 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8015bd6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015bda:	e0a5      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 8015bdc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015be0:	f103 0050 	add.w	r0, r3, #80	; 0x50
                               cipher_info->key_bitlen,
 8015be4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015be8:	685b      	ldr	r3, [r3, #4]
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 8015bea:	461a      	mov	r2, r3
 8015bec:	2301      	movs	r3, #1
 8015bee:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8015bf2:	f7f5 f8e7 	bl	800adc4 <mbedtls_cipher_setkey>
 8015bf6:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015bfa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d012      	beq.n	8015c28 <mbedtls_ssl_derive_keys+0x78c>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 8015c02:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015c06:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015c0a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015c0e:	9301      	str	r3, [sp, #4]
 8015c10:	4b4c      	ldr	r3, [pc, #304]	; (8015d44 <mbedtls_ssl_derive_keys+0x8a8>)
 8015c12:	9300      	str	r3, [sp, #0]
 8015c14:	f240 3393 	movw	r3, #915	; 0x393
 8015c18:	4a47      	ldr	r2, [pc, #284]	; (8015d38 <mbedtls_ssl_derive_keys+0x89c>)
 8015c1a:	2101      	movs	r1, #1
 8015c1c:	6800      	ldr	r0, [r0, #0]
 8015c1e:	f7f5 fdc7 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8015c22:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015c26:	e07f      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 8015c28:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015c2c:	f103 0090 	add.w	r0, r3, #144	; 0x90
                               cipher_info->key_bitlen,
 8015c30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015c34:	685b      	ldr	r3, [r3, #4]
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 8015c36:	461a      	mov	r2, r3
 8015c38:	2300      	movs	r3, #0
 8015c3a:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8015c3e:	f7f5 f8c1 	bl	800adc4 <mbedtls_cipher_setkey>
 8015c42:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015c46:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d012      	beq.n	8015c74 <mbedtls_ssl_derive_keys+0x7d8>
                               MBEDTLS_DECRYPT ) ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 8015c4e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015c52:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015c56:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015c5a:	9301      	str	r3, [sp, #4]
 8015c5c:	4b39      	ldr	r3, [pc, #228]	; (8015d44 <mbedtls_ssl_derive_keys+0x8a8>)
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	f240 339b 	movw	r3, #923	; 0x39b
 8015c64:	4a34      	ldr	r2, [pc, #208]	; (8015d38 <mbedtls_ssl_derive_keys+0x89c>)
 8015c66:	2101      	movs	r1, #1
 8015c68:	6800      	ldr	r0, [r0, #0]
 8015c6a:	f7f5 fda1 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8015c6e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015c72:	e059      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 8015c74:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015c78:	785b      	ldrb	r3, [r3, #1]
 8015c7a:	2b02      	cmp	r3, #2
 8015c7c:	d13f      	bne.n	8015cfe <mbedtls_ssl_derive_keys+0x862>
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 8015c7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015c82:	3350      	adds	r3, #80	; 0x50
 8015c84:	2104      	movs	r1, #4
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7f5 fb60 	bl	800b34c <mbedtls_cipher_set_padding_mode>
 8015c8c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015c90:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d012      	beq.n	8015cbe <mbedtls_ssl_derive_keys+0x822>
                                             MBEDTLS_PADDING_NONE ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 8015c98:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015c9c:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015ca0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015ca4:	9301      	str	r3, [sp, #4]
 8015ca6:	4b28      	ldr	r3, [pc, #160]	; (8015d48 <mbedtls_ssl_derive_keys+0x8ac>)
 8015ca8:	9300      	str	r3, [sp, #0]
 8015caa:	f240 33a5 	movw	r3, #933	; 0x3a5
 8015cae:	4a22      	ldr	r2, [pc, #136]	; (8015d38 <mbedtls_ssl_derive_keys+0x89c>)
 8015cb0:	2101      	movs	r1, #1
 8015cb2:	6800      	ldr	r0, [r0, #0]
 8015cb4:	f7f5 fd7c 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 8015cb8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015cbc:	e034      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 8015cbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015cc2:	3390      	adds	r3, #144	; 0x90
 8015cc4:	2104      	movs	r1, #4
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7f5 fb40 	bl	800b34c <mbedtls_cipher_set_padding_mode>
 8015ccc:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8015cd0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d012      	beq.n	8015cfe <mbedtls_ssl_derive_keys+0x862>
                                             MBEDTLS_PADDING_NONE ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 8015cd8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015cdc:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015ce0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015ce4:	9301      	str	r3, [sp, #4]
 8015ce6:	4b18      	ldr	r3, [pc, #96]	; (8015d48 <mbedtls_ssl_derive_keys+0x8ac>)
 8015ce8:	9300      	str	r3, [sp, #0]
 8015cea:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 8015cee:	4a12      	ldr	r2, [pc, #72]	; (8015d38 <mbedtls_ssl_derive_keys+0x89c>)
 8015cf0:	2101      	movs	r1, #1
 8015cf2:	6800      	ldr	r0, [r0, #0]
 8015cf4:	f7f5 fd5c 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 8015cf8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015cfc:	e014      	b.n	8015d28 <mbedtls_ssl_derive_keys+0x88c>
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 8015cfe:	f107 0308 	add.w	r3, r7, #8
 8015d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7ff fa4f 	bl	80151aa <mbedtls_zeroize>
            return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
        }
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 8015d0c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8015d10:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8015d14:	4b0d      	ldr	r3, [pc, #52]	; (8015d4c <mbedtls_ssl_derive_keys+0x8b0>)
 8015d16:	9300      	str	r3, [sp, #0]
 8015d18:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8015d1c:	4a06      	ldr	r2, [pc, #24]	; (8015d38 <mbedtls_ssl_derive_keys+0x89c>)
 8015d1e:	2102      	movs	r1, #2
 8015d20:	6800      	ldr	r0, [r0, #0]
 8015d22:	f7f5 fcbf 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8015d26:	2300      	movs	r3, #0
}
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d32:	bf00      	nop
 8015d34:	08022478 	.word	0x08022478
 8015d38:	080223d4 	.word	0x080223d4
 8015d3c:	ffff9400 	.word	0xffff9400
 8015d40:	08022558 	.word	0x08022558
 8015d44:	08022570 	.word	0x08022570
 8015d48:	08022588 	.word	0x08022588
 8015d4c:	080225a8 	.word	0x080225a8

08015d50 <ssl_calc_verify_tls_sha256>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b0a2      	sub	sp, #136	; 0x88
 8015d54:	af04      	add	r7, sp, #16
 8015d56:	6078      	str	r0, [r7, #4]
 8015d58:	6039      	str	r1, [r7, #0]
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 8015d5a:	f107 030c 	add.w	r3, r7, #12
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7fb fbfc 	bl	801155c <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 8015d64:	4b1b      	ldr	r3, [pc, #108]	; (8015dd4 <ssl_calc_verify_tls_sha256+0x84>)
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	f240 432d 	movw	r3, #1069	; 0x42d
 8015d6c:	4a1a      	ldr	r2, [pc, #104]	; (8015dd8 <ssl_calc_verify_tls_sha256+0x88>)
 8015d6e:	2102      	movs	r1, #2
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f7f5 fc97 	bl	800b6a4 <mbedtls_debug_print_msg>

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d7a:	f103 0208 	add.w	r2, r3, #8
 8015d7e:	f107 030c 	add.w	r3, r7, #12
 8015d82:	4611      	mov	r1, r2
 8015d84:	4618      	mov	r0, r3
 8015d86:	f7fb fc06 	bl	8011596 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 8015d8a:	f107 030c 	add.w	r3, r7, #12
 8015d8e:	6839      	ldr	r1, [r7, #0]
 8015d90:	4618      	mov	r0, r3
 8015d92:	f7fd fa3b 	bl	801320c <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 8015d96:	2320      	movs	r3, #32
 8015d98:	9302      	str	r3, [sp, #8]
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	9301      	str	r3, [sp, #4]
 8015d9e:	4b0f      	ldr	r3, [pc, #60]	; (8015ddc <ssl_calc_verify_tls_sha256+0x8c>)
 8015da0:	9300      	str	r3, [sp, #0]
 8015da2:	f240 4332 	movw	r3, #1074	; 0x432
 8015da6:	4a0c      	ldr	r2, [pc, #48]	; (8015dd8 <ssl_calc_verify_tls_sha256+0x88>)
 8015da8:	2103      	movs	r1, #3
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f7f5 fd6c 	bl	800b888 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 8015db0:	4b0b      	ldr	r3, [pc, #44]	; (8015de0 <ssl_calc_verify_tls_sha256+0x90>)
 8015db2:	9300      	str	r3, [sp, #0]
 8015db4:	f240 4333 	movw	r3, #1075	; 0x433
 8015db8:	4a07      	ldr	r2, [pc, #28]	; (8015dd8 <ssl_calc_verify_tls_sha256+0x88>)
 8015dba:	2102      	movs	r1, #2
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f7f5 fc71 	bl	800b6a4 <mbedtls_debug_print_msg>

    mbedtls_sha256_free( &sha256 );
 8015dc2:	f107 030c 	add.w	r3, r7, #12
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7fb fbd5 	bl	8011576 <mbedtls_sha256_free>

    return;
 8015dcc:	bf00      	nop
}
 8015dce:	3778      	adds	r7, #120	; 0x78
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}
 8015dd4:	080225b8 	.word	0x080225b8
 8015dd8:	080223d4 	.word	0x080223d4
 8015ddc:	080225d0 	.word	0x080225d0
 8015de0:	080225ec 	.word	0x080225ec

08015de4 <ssl_encrypt_buf>:

/*
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
 8015de4:	b5b0      	push	{r4, r5, r7, lr}
 8015de6:	b0a4      	sub	sp, #144	; 0x90
 8015de8:	af08      	add	r7, sp, #32
 8015dea:	6078      	str	r0, [r7, #4]
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 8015dec:	2300      	movs	r3, #0
 8015dee:	66fb      	str	r3, [r7, #108]	; 0x6c

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 8015df0:	4b9c      	ldr	r3, [pc, #624]	; (8016064 <ssl_encrypt_buf+0x280>)
 8015df2:	9300      	str	r3, [sp, #0]
 8015df4:	f240 5304 	movw	r3, #1284	; 0x504
 8015df8:	4a9b      	ldr	r2, [pc, #620]	; (8016068 <ssl_encrypt_buf+0x284>)
 8015dfa:	2102      	movs	r1, #2
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f7f5 fc51 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d003      	beq.n	8015e12 <ssl_encrypt_buf+0x2e>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d10a      	bne.n	8015e28 <ssl_encrypt_buf+0x44>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015e12:	4b96      	ldr	r3, [pc, #600]	; (801606c <ssl_encrypt_buf+0x288>)
 8015e14:	9300      	str	r3, [sp, #0]
 8015e16:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 8015e1a:	4a93      	ldr	r2, [pc, #588]	; (8016068 <ssl_encrypt_buf+0x284>)
 8015e1c:	2101      	movs	r1, #1
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	f7f5 fc40 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015e24:	4b92      	ldr	r3, [pc, #584]	; (8016070 <ssl_encrypt_buf+0x28c>)
 8015e26:	e2da      	b.n	80163de <ssl_encrypt_buf+0x5fa>
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e2c:	3350      	adds	r3, #80	; 0x50
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7ff f92e 	bl	8015090 <mbedtls_cipher_get_cipher_mode>
 8015e34:	4603      	mov	r3, r0
 8015e36:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015e40:	687a      	ldr	r2, [r7, #4]
 8015e42:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8015e46:	9202      	str	r2, [sp, #8]
 8015e48:	9301      	str	r3, [sp, #4]
 8015e4a:	4b8a      	ldr	r3, [pc, #552]	; (8016074 <ssl_encrypt_buf+0x290>)
 8015e4c:	9300      	str	r3, [sp, #0]
 8015e4e:	f240 530e 	movw	r3, #1294	; 0x50e
 8015e52:	4a85      	ldr	r2, [pc, #532]	; (8016068 <ssl_encrypt_buf+0x284>)
 8015e54:	2104      	movs	r1, #4
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f7f5 fd16 	bl	800b888 <mbedtls_debug_print_buf>
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015e66:	d911      	bls.n	8015e8c <ssl_encrypt_buf+0xa8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015e72:	9202      	str	r2, [sp, #8]
 8015e74:	9301      	str	r3, [sp, #4]
 8015e76:	4b80      	ldr	r3, [pc, #512]	; (8016078 <ssl_encrypt_buf+0x294>)
 8015e78:	9300      	str	r3, [sp, #0]
 8015e7a:	f240 5313 	movw	r3, #1299	; 0x513
 8015e7e:	4a7a      	ldr	r2, [pc, #488]	; (8016068 <ssl_encrypt_buf+0x284>)
 8015e80:	2101      	movs	r1, #1
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f7f5 fc0e 	bl	800b6a4 <mbedtls_debug_print_msg>
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8015e88:	4b7c      	ldr	r3, [pc, #496]	; (801607c <ssl_encrypt_buf+0x298>)
 8015e8a:	e2a8      	b.n	80163de <ssl_encrypt_buf+0x5fa>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 8015e8c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8015e90:	2b07      	cmp	r3, #7
 8015e92:	d003      	beq.n	8015e9c <ssl_encrypt_buf+0xb8>
 8015e94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8015e98:	2b02      	cmp	r3, #2
 8015e9a:	d17d      	bne.n	8015f98 <ssl_encrypt_buf+0x1b4>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	68db      	ldr	r3, [r3, #12]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	dd6e      	ble.n	8015f82 <ssl_encrypt_buf+0x19e>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ea8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015eb2:	2208      	movs	r2, #8
 8015eb4:	4619      	mov	r1, r3
 8015eb6:	f7f8 f997 	bl	800e1e8 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ebe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015ec8:	2203      	movs	r2, #3
 8015eca:	4619      	mov	r1, r3
 8015ecc:	f7f8 f98c 	bl	800e1e8 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ed4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ede:	2202      	movs	r2, #2
 8015ee0:	4619      	mov	r1, r3
 8015ee2:	f7f8 f981 	bl	800e1e8 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015eea:	f103 0038 	add.w	r0, r3, #56	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015efa:	461a      	mov	r2, r3
 8015efc:	f7f8 f974 	bl	800e1e8 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f04:	3338      	adds	r3, #56	; 0x38
 8015f06:	f107 020c 	add.w	r2, r7, #12
 8015f0a:	4611      	mov	r1, r2
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7f8 f98d 	bl	800e22c <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f16:	3338      	adds	r3, #56	; 0x38
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f7f8 f9ed 	bl	800e2f8 <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015f2a:	18d0      	adds	r0, r2, r3
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f30:	695a      	ldr	r2, [r3, #20]
 8015f32:	f107 030c 	add.w	r3, r7, #12
 8015f36:	4619      	mov	r1, r3
 8015f38:	f007 fc6e 	bl	801d818 <memcpy>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015f48:	4413      	add	r3, r2
 8015f4a:	687a      	ldr	r2, [r7, #4]
 8015f4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015f4e:	6952      	ldr	r2, [r2, #20]
 8015f50:	9202      	str	r2, [sp, #8]
 8015f52:	9301      	str	r3, [sp, #4]
 8015f54:	4b4a      	ldr	r3, [pc, #296]	; (8016080 <ssl_encrypt_buf+0x29c>)
 8015f56:	9300      	str	r3, [sp, #0]
 8015f58:	f240 534a 	movw	r3, #1354	; 0x54a
 8015f5c:	4a42      	ldr	r2, [pc, #264]	; (8016068 <ssl_encrypt_buf+0x284>)
 8015f5e:	2104      	movs	r1, #4
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f7f5 fc91 	bl	800b888 <mbedtls_debug_print_buf>
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f70:	695b      	ldr	r3, [r3, #20]
 8015f72:	441a      	add	r2, r3
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        auth_done++;
 8015f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f7c:	3301      	adds	r3, #1
 8015f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015f80:	e00a      	b.n	8015f98 <ssl_encrypt_buf+0x1b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8015f82:	4b3a      	ldr	r3, [pc, #232]	; (801606c <ssl_encrypt_buf+0x288>)
 8015f84:	9300      	str	r3, [sp, #0]
 8015f86:	f240 5346 	movw	r3, #1350	; 0x546
 8015f8a:	4a37      	ldr	r2, [pc, #220]	; (8016068 <ssl_encrypt_buf+0x284>)
 8015f8c:	2101      	movs	r1, #1
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f7f5 fb88 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8015f94:	4b36      	ldr	r3, [pc, #216]	; (8016070 <ssl_encrypt_buf+0x28c>)
 8015f96:	e222      	b.n	80163de <ssl_encrypt_buf+0x5fa>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 8015f98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8015f9c:	2b06      	cmp	r3, #6
 8015f9e:	d004      	beq.n	8015faa <ssl_encrypt_buf+0x1c6>
 8015fa0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8015fa4:	2b08      	cmp	r3, #8
 8015fa6:	f040 8122 	bne.w	80161ee <ssl_encrypt_buf+0x40a>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	7f1b      	ldrb	r3, [r3, #28]
 8015fb2:	f003 0302 	and.w	r3, r3, #2
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d001      	beq.n	8015fbe <ssl_encrypt_buf+0x1da>
 8015fba:	2308      	movs	r3, #8
 8015fbc:	e000      	b.n	8015fc0 <ssl_encrypt_buf+0x1dc>
 8015fbe:	2310      	movs	r3, #16
 8015fc0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8015fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015fce:	2208      	movs	r2, #8
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f007 fc21 	bl	801d818 <memcpy>
        add_data[8]  = ssl->out_msgtype;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015fdc:	b2db      	uxtb	r3, r3
 8015fde:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	6898      	ldr	r0, [r3, #8]
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	68d9      	ldr	r1, [r3, #12]
                           ssl->conf->transport, add_data + 9 );
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015ff2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015ff6:	b2db      	uxtb	r3, r3
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8015ff8:	461a      	mov	r2, r3
 8015ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015ffe:	3309      	adds	r3, #9
 8016000:	f003 f8dc 	bl	80191bc <mbedtls_ssl_write_version>
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801600a:	0a1b      	lsrs	r3, r3, #8
 801600c:	b2db      	uxtb	r3, r3
 801600e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016018:	b2db      	uxtb	r3, r3
 801601a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801601e:	230d      	movs	r3, #13
 8016020:	9302      	str	r3, [sp, #8]
 8016022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016026:	9301      	str	r3, [sp, #4]
 8016028:	4b16      	ldr	r3, [pc, #88]	; (8016084 <ssl_encrypt_buf+0x2a0>)
 801602a:	9300      	str	r3, [sp, #0]
 801602c:	f240 5384 	movw	r3, #1412	; 0x584
 8016030:	4a0d      	ldr	r2, [pc, #52]	; (8016068 <ssl_encrypt_buf+0x284>)
 8016032:	2104      	movs	r1, #4
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7f5 fc27 	bl	800b888 <mbedtls_debug_print_buf>
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801603e:	68da      	ldr	r2, [r3, #12]
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016044:	691b      	ldr	r3, [r3, #16]
 8016046:	1ad3      	subs	r3, r2, r3
 8016048:	2b08      	cmp	r3, #8
 801604a:	d01d      	beq.n	8016088 <ssl_encrypt_buf+0x2a4>
        {
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801604c:	4b07      	ldr	r3, [pc, #28]	; (801606c <ssl_encrypt_buf+0x288>)
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	f240 538d 	movw	r3, #1421	; 0x58d
 8016054:	4a04      	ldr	r2, [pc, #16]	; (8016068 <ssl_encrypt_buf+0x284>)
 8016056:	2101      	movs	r1, #1
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f7f5 fb23 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801605e:	4b04      	ldr	r3, [pc, #16]	; (8016070 <ssl_encrypt_buf+0x28c>)
 8016060:	e1bd      	b.n	80163de <ssl_encrypt_buf+0x5fa>
 8016062:	bf00      	nop
 8016064:	080225fc 	.word	0x080225fc
 8016068:	080223d4 	.word	0x080223d4
 801606c:	08022478 	.word	0x08022478
 8016070:	ffff9400 	.word	0xffff9400
 8016074:	0802260c 	.word	0x0802260c
 8016078:	0802262c 	.word	0x0802262c
 801607c:	ffff8f00 	.word	0xffff8f00
 8016080:	08022654 	.word	0x08022654
 8016084:	08022664 	.word	0x08022664
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801608c:	f103 0218 	add.w	r2, r3, #24
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016094:	691b      	ldr	r3, [r3, #16]
 8016096:	18d0      	adds	r0, r2, r3
                             ssl->out_ctr, 8 );
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 801609e:	2208      	movs	r2, #8
 80160a0:	4619      	mov	r1, r3
 80160a2:	f007 fbb9 	bl	801d818 <memcpy>
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80160b2:	2208      	movs	r2, #8
 80160b4:	4619      	mov	r1, r3
 80160b6:	f007 fbaf 	bl	801d818 <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80160c4:	68d1      	ldr	r1, [r2, #12]
 80160c6:	687a      	ldr	r2, [r7, #4]
 80160c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80160ca:	6912      	ldr	r2, [r2, #16]
 80160cc:	1a8a      	subs	r2, r1, r2
 80160ce:	9202      	str	r2, [sp, #8]
 80160d0:	9301      	str	r3, [sp, #4]
 80160d2:	4b76      	ldr	r3, [pc, #472]	; (80162ac <ssl_encrypt_buf+0x4c8>)
 80160d4:	9300      	str	r3, [sp, #0]
 80160d6:	f240 5395 	movw	r3, #1429	; 0x595
 80160da:	4a75      	ldr	r2, [pc, #468]	; (80162b0 <ssl_encrypt_buf+0x4cc>)
 80160dc:	2104      	movs	r1, #4
 80160de:	6878      	ldr	r0, [r7, #4]
 80160e0:	f7f5 fbd2 	bl	800b888 <mbedtls_debug_print_buf>
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80160ea:	64fb      	str	r3, [r7, #76]	; 0x4c
        enc_msglen = ssl->out_msglen;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80160f2:	64bb      	str	r3, [r7, #72]	; 0x48
        ssl->out_msglen += ssl->transform_out->ivlen -
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160fe:	68d9      	ldr	r1, [r3, #12]
                           ssl->transform_out->fixed_ivlen;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016104:	691b      	ldr	r3, [r3, #16]
        ssl->out_msglen += ssl->transform_out->ivlen -
 8016106:	1acb      	subs	r3, r1, r3
 8016108:	441a      	add	r2, r3
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016116:	2200      	movs	r2, #0
 8016118:	9202      	str	r2, [sp, #8]
 801611a:	9301      	str	r3, [sp, #4]
 801611c:	4b65      	ldr	r3, [pc, #404]	; (80162b4 <ssl_encrypt_buf+0x4d0>)
 801611e:	9300      	str	r3, [sp, #0]
 8016120:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8016124:	4a62      	ldr	r2, [pc, #392]	; (80162b0 <ssl_encrypt_buf+0x4cc>)
 8016126:	2103      	movs	r1, #3
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f7f5 fabb 	bl	800b6a4 <mbedtls_debug_print_msg>
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016132:	f103 0050 	add.w	r0, r3, #80	; 0x50
                                         ssl->transform_out->iv_enc,
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801613a:	f103 0118 	add.w	r1, r3, #24
                                         ssl->transform_out->ivlen,
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 8016142:	68dc      	ldr	r4, [r3, #12]
 8016144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016148:	4413      	add	r3, r2
 801614a:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801614e:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8016152:	9206      	str	r2, [sp, #24]
 8016154:	9305      	str	r3, [sp, #20]
 8016156:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801615a:	9304      	str	r3, [sp, #16]
 801615c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801615e:	9303      	str	r3, [sp, #12]
 8016160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016162:	9302      	str	r3, [sp, #8]
 8016164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016166:	9301      	str	r3, [sp, #4]
 8016168:	230d      	movs	r3, #13
 801616a:	9300      	str	r3, [sp, #0]
 801616c:	462b      	mov	r3, r5
 801616e:	4622      	mov	r2, r4
 8016170:	f7f5 f95a 	bl	800b428 <mbedtls_cipher_auth_encrypt>
 8016174:	6478      	str	r0, [r7, #68]	; 0x44
 8016176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016178:	2b00      	cmp	r3, #0
 801617a:	d00c      	beq.n	8016196 <ssl_encrypt_buf+0x3b2>
                                         add_data, 13,
                                         enc_msg, enc_msglen,
                                         enc_msg, &olen,
                                         enc_msg + enc_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 801617c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801617e:	9301      	str	r3, [sp, #4]
 8016180:	4b4d      	ldr	r3, [pc, #308]	; (80162b8 <ssl_encrypt_buf+0x4d4>)
 8016182:	9300      	str	r3, [sp, #0]
 8016184:	f240 53af 	movw	r3, #1455	; 0x5af
 8016188:	4a49      	ldr	r2, [pc, #292]	; (80162b0 <ssl_encrypt_buf+0x4cc>)
 801618a:	2101      	movs	r1, #1
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f7f5 fb0f 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 8016192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016194:	e123      	b.n	80163de <ssl_encrypt_buf+0x5fa>
        }

        if( olen != enc_msglen )
 8016196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801619a:	429a      	cmp	r2, r3
 801619c:	d00a      	beq.n	80161b4 <ssl_encrypt_buf+0x3d0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801619e:	4b47      	ldr	r3, [pc, #284]	; (80162bc <ssl_encrypt_buf+0x4d8>)
 80161a0:	9300      	str	r3, [sp, #0]
 80161a2:	f240 53b5 	movw	r3, #1461	; 0x5b5
 80161a6:	4a42      	ldr	r2, [pc, #264]	; (80162b0 <ssl_encrypt_buf+0x4cc>)
 80161a8:	2101      	movs	r1, #1
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f7f5 fa7a 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80161b0:	4b43      	ldr	r3, [pc, #268]	; (80162c0 <ssl_encrypt_buf+0x4dc>)
 80161b2:	e114      	b.n	80163de <ssl_encrypt_buf+0x5fa>
        }

        ssl->out_msglen += taglen;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80161ba:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80161be:	441a      	add	r2, r3
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        auth_done++;
 80161c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161c8:	3301      	adds	r3, #1
 80161ca:	66fb      	str	r3, [r7, #108]	; 0x6c

        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 80161cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80161ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80161d0:	4413      	add	r3, r2
 80161d2:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80161d6:	9202      	str	r2, [sp, #8]
 80161d8:	9301      	str	r3, [sp, #4]
 80161da:	4b3a      	ldr	r3, [pc, #232]	; (80162c4 <ssl_encrypt_buf+0x4e0>)
 80161dc:	9300      	str	r3, [sp, #0]
 80161de:	f240 53bc 	movw	r3, #1468	; 0x5bc
 80161e2:	4a33      	ldr	r2, [pc, #204]	; (80162b0 <ssl_encrypt_buf+0x4cc>)
 80161e4:	2104      	movs	r1, #4
 80161e6:	6878      	ldr	r0, [r7, #4]
 80161e8:	f7f5 fb4e 	bl	800b888 <mbedtls_debug_print_buf>
    {
 80161ec:	e0df      	b.n	80163ae <ssl_encrypt_buf+0x5ca>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 80161ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80161f2:	2b02      	cmp	r3, #2
 80161f4:	f040 80d0 	bne.w	8016398 <ssl_encrypt_buf+0x5b4>
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 80161f8:	2300      	movs	r3, #0
 80161fa:	62fb      	str	r3, [r7, #44]	; 0x2c

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016200:	68d9      	ldr	r1, [r3, #12]
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016208:	3301      	adds	r3, #1
                 ssl->transform_out->ivlen;
 801620a:	687a      	ldr	r2, [r7, #4]
 801620c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801620e:	68d2      	ldr	r2, [r2, #12]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 8016210:	fbb3 f0f2 	udiv	r0, r3, r2
 8016214:	fb00 f202 	mul.w	r2, r0, r2
 8016218:	1a9b      	subs	r3, r3, r2
 801621a:	1acb      	subs	r3, r1, r3
 801621c:	663b      	str	r3, [r7, #96]	; 0x60
        if( padlen == ssl->transform_out->ivlen )
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016222:	68db      	ldr	r3, [r3, #12]
 8016224:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016226:	429a      	cmp	r2, r3
 8016228:	d101      	bne.n	801622e <ssl_encrypt_buf+0x44a>
            padlen = 0;
 801622a:	2300      	movs	r3, #0
 801622c:	663b      	str	r3, [r7, #96]	; 0x60

        for( i = 0; i <= padlen; i++ )
 801622e:	2300      	movs	r3, #0
 8016230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016232:	e00e      	b.n	8016252 <ssl_encrypt_buf+0x46e>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8016240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016242:	440b      	add	r3, r1
 8016244:	4413      	add	r3, r2
 8016246:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016248:	b2d2      	uxtb	r2, r2
 801624a:	701a      	strb	r2, [r3, #0]
        for( i = 0; i <= padlen; i++ )
 801624c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801624e:	3301      	adds	r3, #1
 8016250:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016252:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016256:	429a      	cmp	r2, r3
 8016258:	d9ec      	bls.n	8016234 <ssl_encrypt_buf+0x450>

        ssl->out_msglen += padlen + 1;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016262:	4413      	add	r3, r2
 8016264:	1c5a      	adds	r2, r3, #1
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        enc_msglen = ssl->out_msglen;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016272:	667b      	str	r3, [r7, #100]	; 0x64
        enc_msg = ssl->out_msg;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801627a:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	2b01      	cmp	r3, #1
 8016282:	dd40      	ble.n	8016306 <ssl_encrypt_buf+0x522>
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	699b      	ldr	r3, [r3, #24]
 801628a:	687a      	ldr	r2, [r7, #4]
 801628c:	6812      	ldr	r2, [r2, #0]
 801628e:	69d0      	ldr	r0, [r2, #28]
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016294:	f102 0118 	add.w	r1, r2, #24
                                  ssl->transform_out->ivlen );
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	6b92      	ldr	r2, [r2, #56]	; 0x38
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 801629c:	68d2      	ldr	r2, [r2, #12]
 801629e:	4798      	blx	r3
 80162a0:	6578      	str	r0, [r7, #84]	; 0x54
            if( ret != 0 )
 80162a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d00f      	beq.n	80162c8 <ssl_encrypt_buf+0x4e4>
                return( ret );
 80162a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162aa:	e098      	b.n	80163de <ssl_encrypt_buf+0x5fa>
 80162ac:	08022684 	.word	0x08022684
 80162b0:	080223d4 	.word	0x080223d4
 80162b4:	0802268c 	.word	0x0802268c
 80162b8:	080226c8 	.word	0x080226c8
 80162bc:	08022478 	.word	0x08022478
 80162c0:	ffff9400 	.word	0xffff9400
 80162c4:	080226e4 	.word	0x080226e4

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162d2:	f103 0118 	add.w	r1, r3, #24
                    ssl->transform_out->ivlen );
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 80162da:	68db      	ldr	r3, [r3, #12]
 80162dc:	461a      	mov	r2, r3
 80162de:	f007 fa9b 	bl	801d818 <memcpy>

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80162e8:	66bb      	str	r3, [r7, #104]	; 0x68
            enc_msglen = ssl->out_msglen;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80162f0:	667b      	str	r3, [r7, #100]	; 0x64
            ssl->out_msglen += ssl->transform_out->ivlen;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162fc:	68db      	ldr	r3, [r3, #12]
 80162fe:	441a      	add	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801630c:	687a      	ldr	r2, [r7, #4]
 801630e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016310:	68d2      	ldr	r2, [r2, #12]
 8016312:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016314:	3101      	adds	r1, #1
 8016316:	9103      	str	r1, [sp, #12]
 8016318:	9202      	str	r2, [sp, #8]
 801631a:	9301      	str	r3, [sp, #4]
 801631c:	4b32      	ldr	r3, [pc, #200]	; (80163e8 <ssl_encrypt_buf+0x604>)
 801631e:	9300      	str	r3, [sp, #0]
 8016320:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8016324:	4a31      	ldr	r2, [pc, #196]	; (80163ec <ssl_encrypt_buf+0x608>)
 8016326:	2103      	movs	r1, #3
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f7f5 f9bb 	bl	800b6a4 <mbedtls_debug_print_msg>
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016332:	f103 0050 	add.w	r0, r3, #80	; 0x50
                                   ssl->transform_out->iv_enc,
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801633a:	f103 0118 	add.w	r1, r3, #24
                                   ssl->transform_out->ivlen,
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 8016342:	68da      	ldr	r2, [r3, #12]
 8016344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016348:	9302      	str	r3, [sp, #8]
 801634a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801634c:	9301      	str	r3, [sp, #4]
 801634e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016350:	9300      	str	r3, [sp, #0]
 8016352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016354:	f7f5 f824 	bl	800b3a0 <mbedtls_cipher_crypt>
 8016358:	6578      	str	r0, [r7, #84]	; 0x54
 801635a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801635c:	2b00      	cmp	r3, #0
 801635e:	d00c      	beq.n	801637a <ssl_encrypt_buf+0x596>
                                   enc_msg, enc_msglen,
                                   enc_msg, &olen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 8016360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016362:	9301      	str	r3, [sp, #4]
 8016364:	4b22      	ldr	r3, [pc, #136]	; (80163f0 <ssl_encrypt_buf+0x60c>)
 8016366:	9300      	str	r3, [sp, #0]
 8016368:	f240 53fb 	movw	r3, #1531	; 0x5fb
 801636c:	4a1f      	ldr	r2, [pc, #124]	; (80163ec <ssl_encrypt_buf+0x608>)
 801636e:	2101      	movs	r1, #1
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f7f5 fa1d 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 8016376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016378:	e031      	b.n	80163de <ssl_encrypt_buf+0x5fa>
        }

        if( enc_msglen != olen )
 801637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801637c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801637e:	429a      	cmp	r2, r3
 8016380:	d015      	beq.n	80163ae <ssl_encrypt_buf+0x5ca>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016382:	4b1c      	ldr	r3, [pc, #112]	; (80163f4 <ssl_encrypt_buf+0x610>)
 8016384:	9300      	str	r3, [sp, #0]
 8016386:	f240 6301 	movw	r3, #1537	; 0x601
 801638a:	4a18      	ldr	r2, [pc, #96]	; (80163ec <ssl_encrypt_buf+0x608>)
 801638c:	2101      	movs	r1, #1
 801638e:	6878      	ldr	r0, [r7, #4]
 8016390:	f7f5 f988 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016394:	4b18      	ldr	r3, [pc, #96]	; (80163f8 <ssl_encrypt_buf+0x614>)
 8016396:	e022      	b.n	80163de <ssl_encrypt_buf+0x5fa>
    }
    else
#endif /* MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016398:	4b16      	ldr	r3, [pc, #88]	; (80163f4 <ssl_encrypt_buf+0x610>)
 801639a:	9300      	str	r3, [sp, #0]
 801639c:	f240 6337 	movw	r3, #1591	; 0x637
 80163a0:	4a12      	ldr	r2, [pc, #72]	; (80163ec <ssl_encrypt_buf+0x608>)
 80163a2:	2101      	movs	r1, #1
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f7f5 f97d 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80163aa:	4b13      	ldr	r3, [pc, #76]	; (80163f8 <ssl_encrypt_buf+0x614>)
 80163ac:	e017      	b.n	80163de <ssl_encrypt_buf+0x5fa>
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 80163ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80163b0:	2b01      	cmp	r3, #1
 80163b2:	d00a      	beq.n	80163ca <ssl_encrypt_buf+0x5e6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80163b4:	4b0f      	ldr	r3, [pc, #60]	; (80163f4 <ssl_encrypt_buf+0x610>)
 80163b6:	9300      	str	r3, [sp, #0]
 80163b8:	f240 633e 	movw	r3, #1598	; 0x63e
 80163bc:	4a0b      	ldr	r2, [pc, #44]	; (80163ec <ssl_encrypt_buf+0x608>)
 80163be:	2101      	movs	r1, #1
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f7f5 f96f 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80163c6:	4b0c      	ldr	r3, [pc, #48]	; (80163f8 <ssl_encrypt_buf+0x614>)
 80163c8:	e009      	b.n	80163de <ssl_encrypt_buf+0x5fa>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 80163ca:	4b0c      	ldr	r3, [pc, #48]	; (80163fc <ssl_encrypt_buf+0x618>)
 80163cc:	9300      	str	r3, [sp, #0]
 80163ce:	f240 6342 	movw	r3, #1602	; 0x642
 80163d2:	4a06      	ldr	r2, [pc, #24]	; (80163ec <ssl_encrypt_buf+0x608>)
 80163d4:	2102      	movs	r1, #2
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f7f5 f964 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 80163dc:	2300      	movs	r3, #0
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3770      	adds	r7, #112	; 0x70
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bdb0      	pop	{r4, r5, r7, pc}
 80163e6:	bf00      	nop
 80163e8:	080226f8 	.word	0x080226f8
 80163ec:	080223d4 	.word	0x080223d4
 80163f0:	08022748 	.word	0x08022748
 80163f4:	08022478 	.word	0x08022478
 80163f8:	ffff9400 	.word	0xffff9400
 80163fc:	08022760 	.word	0x08022760

08016400 <ssl_decrypt_buf>:

static int ssl_decrypt_buf( mbedtls_ssl_context *ssl )
{
 8016400:	b5b0      	push	{r4, r5, r7, lr}
 8016402:	b0ae      	sub	sp, #184	; 0xb8
 8016404:	af08      	add	r7, sp, #32
 8016406:	6078      	str	r0, [r7, #4]
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 8016408:	2300      	movs	r3, #0
 801640a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 801640e:	2300      	movs	r3, #0
 8016410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016414:	2301      	movs	r3, #1
 8016416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 801641a:	4b98      	ldr	r3, [pc, #608]	; (801667c <ssl_decrypt_buf+0x27c>)
 801641c:	9300      	str	r3, [sp, #0]
 801641e:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8016422:	4a97      	ldr	r2, [pc, #604]	; (8016680 <ssl_decrypt_buf+0x280>)
 8016424:	2102      	movs	r1, #2
 8016426:	6878      	ldr	r0, [r7, #4]
 8016428:	f7f5 f93c 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	6a1b      	ldr	r3, [r3, #32]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d003      	beq.n	801643c <ssl_decrypt_buf+0x3c>
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016438:	2b00      	cmp	r3, #0
 801643a:	d10b      	bne.n	8016454 <ssl_decrypt_buf+0x54>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801643c:	4b91      	ldr	r3, [pc, #580]	; (8016684 <ssl_decrypt_buf+0x284>)
 801643e:	9300      	str	r3, [sp, #0]
 8016440:	f240 6354 	movw	r3, #1620	; 0x654
 8016444:	4a8e      	ldr	r2, [pc, #568]	; (8016680 <ssl_decrypt_buf+0x280>)
 8016446:	2101      	movs	r1, #1
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f7f5 f92b 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801644e:	4b8e      	ldr	r3, [pc, #568]	; (8016688 <ssl_decrypt_buf+0x288>)
 8016450:	f000 bc36 	b.w	8016cc0 <ssl_decrypt_buf+0x8c0>
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016458:	3390      	adds	r3, #144	; 0x90
 801645a:	4618      	mov	r0, r3
 801645c:	f7fe fe18 	bl	8015090 <mbedtls_cipher_get_cipher_mode>
 8016460:	4603      	mov	r3, r0
 8016462:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    if( ssl->in_msglen < ssl->transform_in->minlen )
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801646e:	689b      	ldr	r3, [r3, #8]
 8016470:	429a      	cmp	r2, r3
 8016472:	d212      	bcs.n	801649a <ssl_decrypt_buf+0x9a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016478:	687a      	ldr	r2, [r7, #4]
 801647a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801647c:	6892      	ldr	r2, [r2, #8]
 801647e:	9202      	str	r2, [sp, #8]
 8016480:	9301      	str	r3, [sp, #4]
 8016482:	4b82      	ldr	r3, [pc, #520]	; (801668c <ssl_decrypt_buf+0x28c>)
 8016484:	9300      	str	r3, [sp, #0]
 8016486:	f240 635c 	movw	r3, #1628	; 0x65c
 801648a:	4a7d      	ldr	r2, [pc, #500]	; (8016680 <ssl_decrypt_buf+0x280>)
 801648c:	2101      	movs	r1, #1
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f7f5 f908 	bl	800b6a4 <mbedtls_debug_print_msg>
                       ssl->in_msglen, ssl->transform_in->minlen ) );
        return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016494:	4b7e      	ldr	r3, [pc, #504]	; (8016690 <ssl_decrypt_buf+0x290>)
 8016496:	f000 bc13 	b.w	8016cc0 <ssl_decrypt_buf+0x8c0>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 801649a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801649e:	2b06      	cmp	r3, #6
 80164a0:	d004      	beq.n	80164ac <ssl_decrypt_buf+0xac>
 80164a2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80164a6:	2b08      	cmp	r3, #8
 80164a8:	f040 8113 	bne.w	80166d2 <ssl_decrypt_buf+0x2d2>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	7f1b      	ldrb	r3, [r3, #28]
 80164b4:	f003 0302 	and.w	r3, r3, #2
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d001      	beq.n	80164c0 <ssl_decrypt_buf+0xc0>
 80164bc:	2308      	movs	r3, #8
 80164be:	e000      	b.n	80164c2 <ssl_decrypt_buf+0xc2>
 80164c0:	2310      	movs	r3, #16
 80164c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164ca:	68da      	ldr	r2, [r3, #12]
                                 ssl->transform_in->fixed_ivlen;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164d0:	691b      	ldr	r3, [r3, #16]
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 80164d2:	1ad3      	subs	r3, r2, r3
 80164d4:	65bb      	str	r3, [r7, #88]	; 0x58

        if( ssl->in_msglen < explicit_iv_len + taglen )
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80164da:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 80164de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80164e0:	440b      	add	r3, r1
 80164e2:	429a      	cmp	r2, r3
 80164e4:	d212      	bcs.n	801650c <ssl_decrypt_buf+0x10c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80164ee:	9203      	str	r2, [sp, #12]
 80164f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80164f2:	9202      	str	r2, [sp, #8]
 80164f4:	9301      	str	r3, [sp, #4]
 80164f6:	4b67      	ldr	r3, [pc, #412]	; (8016694 <ssl_decrypt_buf+0x294>)
 80164f8:	9300      	str	r3, [sp, #0]
 80164fa:	f240 638b 	movw	r3, #1675	; 0x68b
 80164fe:	4a60      	ldr	r2, [pc, #384]	; (8016680 <ssl_decrypt_buf+0x280>)
 8016500:	2101      	movs	r1, #1
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f7f5 f8ce 	bl	800b6a4 <mbedtls_debug_print_msg>
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016508:	4b61      	ldr	r3, [pc, #388]	; (8016690 <ssl_decrypt_buf+0x290>)
 801650a:	e3d9      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016512:	1ad2      	subs	r2, r2, r3
 8016514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016518:	1ad3      	subs	r3, r2, r3
 801651a:	657b      	str	r3, [r7, #84]	; 0x54

        dec_msg = ssl->in_msg;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016520:	653b      	str	r3, [r7, #80]	; 0x50
        dec_msg_result = ssl->in_msg;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016526:	64fb      	str	r3, [r7, #76]	; 0x4c
        ssl->in_msglen = dec_msglen;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801652c:	671a      	str	r2, [r3, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016536:	2208      	movs	r2, #8
 8016538:	4618      	mov	r0, r3
 801653a:	f007 f96d 	bl	801d818 <memcpy>
        add_data[8]  = ssl->in_msgtype;
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016542:	b2db      	uxtb	r3, r3
 8016544:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	6898      	ldr	r0, [r3, #8]
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	68d9      	ldr	r1, [r3, #12]
                           ssl->conf->transport, add_data + 9 );
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016558:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801655c:	b2db      	uxtb	r3, r3
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 801655e:	461a      	mov	r2, r3
 8016560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016564:	3309      	adds	r3, #9
 8016566:	f002 fe29 	bl	80191bc <mbedtls_ssl_write_version>
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801656e:	0a1b      	lsrs	r3, r3, #8
 8016570:	b2db      	uxtb	r3, r3
 8016572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        add_data[12] = ssl->in_msglen & 0xFF;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801657a:	b2db      	uxtb	r3, r3
 801657c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 8016580:	230d      	movs	r3, #13
 8016582:	9302      	str	r3, [sp, #8]
 8016584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016588:	9301      	str	r3, [sp, #4]
 801658a:	4b43      	ldr	r3, [pc, #268]	; (8016698 <ssl_decrypt_buf+0x298>)
 801658c:	9300      	str	r3, [sp, #0]
 801658e:	f240 639d 	movw	r3, #1693	; 0x69d
 8016592:	4a3b      	ldr	r2, [pc, #236]	; (8016680 <ssl_decrypt_buf+0x280>)
 8016594:	2104      	movs	r1, #4
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	f7f5 f976 	bl	800b888 <mbedtls_debug_print_buf>
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165a0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165a8:	691b      	ldr	r3, [r3, #16]
 80165aa:	18d0      	adds	r0, r2, r3
                ssl->in_iv,
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6e19      	ldr	r1, [r3, #96]	; 0x60
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165b4:	68da      	ldr	r2, [r3, #12]
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165ba:	691b      	ldr	r3, [r3, #16]
        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 80165bc:	1ad3      	subs	r3, r2, r3
 80165be:	461a      	mov	r2, r3
 80165c0:	f007 f92a 	bl	801d818 <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165c8:	3328      	adds	r3, #40	; 0x28
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80165ce:	68d2      	ldr	r2, [r2, #12]
 80165d0:	9202      	str	r2, [sp, #8]
 80165d2:	9301      	str	r3, [sp, #4]
 80165d4:	4b31      	ldr	r3, [pc, #196]	; (801669c <ssl_decrypt_buf+0x29c>)
 80165d6:	9300      	str	r3, [sp, #0]
 80165d8:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80165dc:	4a28      	ldr	r2, [pc, #160]	; (8016680 <ssl_decrypt_buf+0x280>)
 80165de:	2104      	movs	r1, #4
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f7f5 f951 	bl	800b888 <mbedtls_debug_print_buf>
                                     ssl->transform_in->ivlen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 80165e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80165e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165ea:	4413      	add	r3, r2
 80165ec:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80165f0:	9202      	str	r2, [sp, #8]
 80165f2:	9301      	str	r3, [sp, #4]
 80165f4:	4b2a      	ldr	r3, [pc, #168]	; (80166a0 <ssl_decrypt_buf+0x2a0>)
 80165f6:	9300      	str	r3, [sp, #0]
 80165f8:	f240 63a6 	movw	r3, #1702	; 0x6a6
 80165fc:	4a20      	ldr	r2, [pc, #128]	; (8016680 <ssl_decrypt_buf+0x280>)
 80165fe:	2104      	movs	r1, #4
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f7f5 f941 	bl	800b888 <mbedtls_debug_print_buf>

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801660a:	f103 0090 	add.w	r0, r3, #144	; 0x90
                                         ssl->transform_in->iv_dec,
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016612:	f103 0128 	add.w	r1, r3, #40	; 0x28
                                         ssl->transform_in->ivlen,
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 801661a:	68dc      	ldr	r4, [r3, #12]
                                         add_data, 13,
                                         dec_msg, dec_msglen,
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
 801661c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801661e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016620:	4413      	add	r3, r2
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 8016622:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016626:	f107 0530 	add.w	r5, r7, #48	; 0x30
 801662a:	9206      	str	r2, [sp, #24]
 801662c:	9305      	str	r3, [sp, #20]
 801662e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016632:	9304      	str	r3, [sp, #16]
 8016634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016636:	9303      	str	r3, [sp, #12]
 8016638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801663a:	9302      	str	r3, [sp, #8]
 801663c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801663e:	9301      	str	r3, [sp, #4]
 8016640:	230d      	movs	r3, #13
 8016642:	9300      	str	r3, [sp, #0]
 8016644:	462b      	mov	r3, r5
 8016646:	4622      	mov	r2, r4
 8016648:	f7f4 ff1c 	bl	800b484 <mbedtls_cipher_auth_decrypt>
 801664c:	64b8      	str	r0, [r7, #72]	; 0x48
 801664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016650:	2b00      	cmp	r3, #0
 8016652:	d029      	beq.n	80166a8 <ssl_decrypt_buf+0x2a8>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 8016654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016656:	9301      	str	r3, [sp, #4]
 8016658:	4b12      	ldr	r3, [pc, #72]	; (80166a4 <ssl_decrypt_buf+0x2a4>)
 801665a:	9300      	str	r3, [sp, #0]
 801665c:	f240 63b3 	movw	r3, #1715	; 0x6b3
 8016660:	4a07      	ldr	r2, [pc, #28]	; (8016680 <ssl_decrypt_buf+0x280>)
 8016662:	2101      	movs	r1, #1
 8016664:	6878      	ldr	r0, [r7, #4]
 8016666:	f7f5 f8a3 	bl	800b7b0 <mbedtls_debug_print_ret>

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 801666a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801666c:	f513 4fc6 	cmn.w	r3, #25344	; 0x6300
 8016670:	d101      	bne.n	8016676 <ssl_decrypt_buf+0x276>
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016672:	4b07      	ldr	r3, [pc, #28]	; (8016690 <ssl_decrypt_buf+0x290>)
 8016674:	e324      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>

            return( ret );
 8016676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016678:	e322      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
 801667a:	bf00      	nop
 801667c:	08022770 	.word	0x08022770
 8016680:	080223d4 	.word	0x080223d4
 8016684:	08022478 	.word	0x08022478
 8016688:	ffff9400 	.word	0xffff9400
 801668c:	08022780 	.word	0x08022780
 8016690:	ffff8e80 	.word	0xffff8e80
 8016694:	080227a0 	.word	0x080227a0
 8016698:	08022664 	.word	0x08022664
 801669c:	08022684 	.word	0x08022684
 80166a0:	080227d4 	.word	0x080227d4
 80166a4:	080227e0 	.word	0x080227e0
        }
        auth_done++;
 80166a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80166ac:	3301      	adds	r3, #1
 80166ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if( olen != dec_msglen )
 80166b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166b6:	429a      	cmp	r2, r3
 80166b8:	f000 81a9 	beq.w	8016a0e <ssl_decrypt_buf+0x60e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80166bc:	4b9a      	ldr	r3, [pc, #616]	; (8016928 <ssl_decrypt_buf+0x528>)
 80166be:	9300      	str	r3, [sp, #0]
 80166c0:	f240 63be 	movw	r3, #1726	; 0x6be
 80166c4:	4a99      	ldr	r2, [pc, #612]	; (801692c <ssl_decrypt_buf+0x52c>)
 80166c6:	2101      	movs	r1, #1
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f7f4 ffeb 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80166ce:	4b98      	ldr	r3, [pc, #608]	; (8016930 <ssl_decrypt_buf+0x530>)
 80166d0:	e2f6      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 80166d2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80166d6:	2b02      	cmp	r3, #2
 80166d8:	f040 818e 	bne.w	80169f8 <ssl_decrypt_buf+0x5f8>
         */
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
 80166dc:	2300      	movs	r3, #0
 80166de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        size_t olen = 0;
 80166e2:	2300      	movs	r3, #0
 80166e4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	68db      	ldr	r3, [r3, #12]
 80166ea:	2b01      	cmp	r3, #1
 80166ec:	dd07      	ble.n	80166fe <ssl_decrypt_buf+0x2fe>
            minlen += ssl->transform_in->ivlen;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166f2:	68db      	ldr	r3, [r3, #12]
 80166f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80166f8:	4413      	add	r3, r2
 80166fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016706:	68d9      	ldr	r1, [r3, #12]
 8016708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801670c:	440b      	add	r3, r1
 801670e:	429a      	cmp	r2, r3
 8016710:	d30a      	bcc.n	8016728 <ssl_decrypt_buf+0x328>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801671a:	6959      	ldr	r1, [r3, #20]
 801671c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016720:	440b      	add	r3, r1
 8016722:	3301      	adds	r3, #1
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 8016724:	429a      	cmp	r2, r3
 8016726:	d215      	bcs.n	8016754 <ssl_decrypt_buf+0x354>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801672c:	687a      	ldr	r2, [r7, #4]
 801672e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016730:	68d2      	ldr	r2, [r2, #12]
 8016732:	6879      	ldr	r1, [r7, #4]
 8016734:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016736:	6949      	ldr	r1, [r1, #20]
 8016738:	9103      	str	r1, [sp, #12]
 801673a:	9202      	str	r2, [sp, #8]
 801673c:	9301      	str	r3, [sp, #4]
 801673e:	4b7d      	ldr	r3, [pc, #500]	; (8016934 <ssl_decrypt_buf+0x534>)
 8016740:	9300      	str	r3, [sp, #0]
 8016742:	f240 63dd 	movw	r3, #1757	; 0x6dd
 8016746:	4a79      	ldr	r2, [pc, #484]	; (801692c <ssl_decrypt_buf+0x52c>)
 8016748:	2101      	movs	r1, #1
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f7f4 ffaa 	bl	800b6a4 <mbedtls_debug_print_msg>
                                "+ 1 ) ( + expl IV )", ssl->in_msglen,
                                ssl->transform_in->ivlen,
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016750:	4b79      	ldr	r3, [pc, #484]	; (8016938 <ssl_decrypt_buf+0x538>)
 8016752:	e2b5      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
        }

        dec_msglen = ssl->in_msglen;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        dec_msg = ssl->in_msg;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016760:	66fb      	str	r3, [r7, #108]	; 0x6c
        dec_msg_result = ssl->in_msg;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016766:	66bb      	str	r3, [r7, #104]	; 0x68
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801676c:	687a      	ldr	r2, [r7, #4]
 801676e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016770:	68d2      	ldr	r2, [r2, #12]
 8016772:	fbb3 f1f2 	udiv	r1, r3, r2
 8016776:	fb01 f202 	mul.w	r2, r1, r2
 801677a:	1a9b      	subs	r3, r3, r2
 801677c:	2b00      	cmp	r3, #0
 801677e:	d011      	beq.n	80167a4 <ssl_decrypt_buf+0x3a4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016784:	687a      	ldr	r2, [r7, #4]
 8016786:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016788:	68d2      	ldr	r2, [r2, #12]
 801678a:	9202      	str	r2, [sp, #8]
 801678c:	9301      	str	r3, [sp, #4]
 801678e:	4b6b      	ldr	r3, [pc, #428]	; (801693c <ssl_decrypt_buf+0x53c>)
 8016790:	9300      	str	r3, [sp, #0]
 8016792:	f44f 63e3 	mov.w	r3, #1816	; 0x718
 8016796:	4a65      	ldr	r2, [pc, #404]	; (801692c <ssl_decrypt_buf+0x52c>)
 8016798:	2101      	movs	r1, #1
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f7f4 ff82 	bl	800b6a4 <mbedtls_debug_print_msg>
                           ssl->in_msglen, ssl->transform_in->ivlen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 80167a0:	4b65      	ldr	r3, [pc, #404]	; (8016938 <ssl_decrypt_buf+0x538>)
 80167a2:	e28d      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	2b01      	cmp	r3, #1
 80167aa:	dd2d      	ble.n	8016808 <ssl_decrypt_buf+0x408>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167b0:	68db      	ldr	r3, [r3, #12]
 80167b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80167b6:	1ad3      	subs	r3, r2, r3
 80167b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            ssl->in_msglen -= ssl->transform_in->ivlen;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167c4:	68db      	ldr	r3, [r3, #12]
 80167c6:	1ad2      	subs	r2, r2, r3
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	671a      	str	r2, [r3, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 80167cc:	2300      	movs	r3, #0
 80167ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80167d2:	e012      	b.n	80167fa <ssl_decrypt_buf+0x3fa>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80167d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80167dc:	4413      	add	r3, r2
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80167e2:	7819      	ldrb	r1, [r3, #0]
 80167e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80167e8:	4413      	add	r3, r2
 80167ea:	3328      	adds	r3, #40	; 0x28
 80167ec:	460a      	mov	r2, r1
 80167ee:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 80167f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80167f4:	3301      	adds	r3, #1
 80167f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016804:	429a      	cmp	r2, r3
 8016806:	d3e5      	bcc.n	80167d4 <ssl_decrypt_buf+0x3d4>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801680c:	f103 0090 	add.w	r0, r3, #144	; 0x90
                                   ssl->transform_in->iv_dec,
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016814:	f103 0128 	add.w	r1, r3, #40	; 0x28
                                   ssl->transform_in->ivlen,
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 801681c:	68da      	ldr	r2, [r3, #12]
 801681e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016822:	9302      	str	r3, [sp, #8]
 8016824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016826:	9301      	str	r3, [sp, #4]
 8016828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801682c:	9300      	str	r3, [sp, #0]
 801682e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016830:	f7f4 fdb6 	bl	800b3a0 <mbedtls_cipher_crypt>
 8016834:	6678      	str	r0, [r7, #100]	; 0x64
 8016836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016838:	2b00      	cmp	r3, #0
 801683a:	d00c      	beq.n	8016856 <ssl_decrypt_buf+0x456>
                                   dec_msg, dec_msglen,
                                   dec_msg_result, &olen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801683c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801683e:	9301      	str	r3, [sp, #4]
 8016840:	4b3f      	ldr	r3, [pc, #252]	; (8016940 <ssl_decrypt_buf+0x540>)
 8016842:	9300      	str	r3, [sp, #0]
 8016844:	f240 7331 	movw	r3, #1841	; 0x731
 8016848:	4a38      	ldr	r2, [pc, #224]	; (801692c <ssl_decrypt_buf+0x52c>)
 801684a:	2101      	movs	r1, #1
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f7f4 ffaf 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 8016852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016854:	e234      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
        }

        if( dec_msglen != olen )
 8016856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016858:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801685c:	429a      	cmp	r2, r3
 801685e:	d00a      	beq.n	8016876 <ssl_decrypt_buf+0x476>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016860:	4b31      	ldr	r3, [pc, #196]	; (8016928 <ssl_decrypt_buf+0x528>)
 8016862:	9300      	str	r3, [sp, #0]
 8016864:	f240 7337 	movw	r3, #1847	; 0x737
 8016868:	4a30      	ldr	r2, [pc, #192]	; (801692c <ssl_decrypt_buf+0x52c>)
 801686a:	2101      	movs	r1, #1
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f7f4 ff19 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016872:	4b2f      	ldr	r3, [pc, #188]	; (8016930 <ssl_decrypt_buf+0x530>)
 8016874:	e224      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801687e:	3b01      	subs	r3, #1
 8016880:	4413      	add	r3, r2
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	3301      	adds	r3, #1
 8016886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016892:	6959      	ldr	r1, [r3, #20]
 8016894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016898:	440b      	add	r3, r1
 801689a:	429a      	cmp	r2, r3
 801689c:	d209      	bcs.n	80168b2 <ssl_decrypt_buf+0x4b2>
 801689e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d105      	bne.n	80168b2 <ssl_decrypt_buf+0x4b2>
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 80168a6:	2300      	movs	r3, #0
 80168a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            correct = 0;
 80168ac:	2300      	movs	r3, #0
 80168ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	68db      	ldr	r3, [r3, #12]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	f340 8093 	ble.w	80169e2 <ssl_decrypt_buf+0x5e2>
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 80168bc:	2300      	movs	r3, #0
 80168be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80168c0:	2301      	movs	r3, #1
 80168c2:	67bb      	str	r3, [r7, #120]	; 0x78
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80168c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80168cc:	1ad3      	subs	r3, r2, r3
 80168ce:	3b01      	subs	r3, #1
 80168d0:	663b      	str	r3, [r7, #96]	; 0x60
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( ssl->in_msglen >= padlen + 1 );
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80168d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80168da:	3301      	adds	r3, #1
 80168dc:	429a      	cmp	r2, r3
 80168de:	bf2c      	ite	cs
 80168e0:	2301      	movcs	r3, #1
 80168e2:	2300      	movcc	r3, #0
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	461a      	mov	r2, r3
 80168e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80168ec:	4013      	ands	r3, r2
 80168ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168f6:	695b      	ldr	r3, [r3, #20]
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 80168f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80168fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80168fe:	429a      	cmp	r2, r3
 8016900:	bf34      	ite	cc
 8016902:	2301      	movcc	r3, #1
 8016904:	2300      	movcs	r3, #0
 8016906:	b2db      	uxtb	r3, r3
 8016908:	461a      	mov	r2, r3
 801690a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801690e:	4013      	ands	r3, r2
 8016910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            padding_idx *= correct;
 8016914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016916:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801691a:	fb02 f303 	mul.w	r3, r2, r3
 801691e:	663b      	str	r3, [r7, #96]	; 0x60

            for( i = 1; i <= 256; i++ )
 8016920:	2301      	movs	r3, #1
 8016922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016926:	e037      	b.n	8016998 <ssl_decrypt_buf+0x598>
 8016928:	08022478 	.word	0x08022478
 801692c:	080223d4 	.word	0x080223d4
 8016930:	ffff9400 	.word	0xffff9400
 8016934:	080227fc 	.word	0x080227fc
 8016938:	ffff8e80 	.word	0xffff8e80
 801693c:	0802283c 	.word	0x0802283c
 8016940:	08022748 	.word	0x08022748
            {
                real_count &= ( i <= padlen );
 8016944:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801694c:	429a      	cmp	r2, r3
 801694e:	bf94      	ite	ls
 8016950:	2301      	movls	r3, #1
 8016952:	2300      	movhi	r3, #0
 8016954:	b2db      	uxtb	r3, r3
 8016956:	461a      	mov	r2, r3
 8016958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801695a:	4013      	ands	r3, r2
 801695c:	67bb      	str	r3, [r7, #120]	; 0x78
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016962:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016968:	440b      	add	r3, r1
 801696a:	4413      	add	r3, r2
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	461a      	mov	r2, r3
 8016970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016974:	3b01      	subs	r3, #1
 8016976:	429a      	cmp	r2, r3
 8016978:	bf0c      	ite	eq
 801697a:	2301      	moveq	r3, #1
 801697c:	2300      	movne	r3, #0
 801697e:	b2db      	uxtb	r3, r3
 8016980:	461a      	mov	r2, r3
                pad_count += real_count *
 8016982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016984:	fb02 f303 	mul.w	r3, r2, r3
 8016988:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801698a:	4413      	add	r3, r2
 801698c:	67fb      	str	r3, [r7, #124]	; 0x7c
            for( i = 1; i <= 256; i++ )
 801698e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016992:	3301      	adds	r3, #1
 8016994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016998:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801699c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169a0:	d9d0      	bls.n	8016944 <ssl_decrypt_buf+0x544>
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 80169a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80169a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80169a8:	429a      	cmp	r2, r3
 80169aa:	bf0c      	ite	eq
 80169ac:	2301      	moveq	r3, #1
 80169ae:	2300      	movne	r3, #0
 80169b0:	b2db      	uxtb	r3, r3
 80169b2:	461a      	mov	r2, r3
 80169b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80169b8:	4013      	ands	r3, r2
 80169ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 80169be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80169c2:	4613      	mov	r3, r2
 80169c4:	025b      	lsls	r3, r3, #9
 80169c6:	1a9b      	subs	r3, r3, r2
 80169c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80169cc:	4013      	ands	r3, r2
 80169ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80169d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80169da:	1ad2      	subs	r2, r2, r3
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	671a      	str	r2, [r3, #112]	; 0x70
 80169e0:	e016      	b.n	8016a10 <ssl_decrypt_buf+0x610>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80169e2:	4ba0      	ldr	r3, [pc, #640]	; (8016c64 <ssl_decrypt_buf+0x864>)
 80169e4:	9300      	str	r3, [sp, #0]
 80169e6:	f240 7391 	movw	r3, #1937	; 0x791
 80169ea:	4a9f      	ldr	r2, [pc, #636]	; (8016c68 <ssl_decrypt_buf+0x868>)
 80169ec:	2101      	movs	r1, #1
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	f7f4 fe58 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80169f4:	4b9d      	ldr	r3, [pc, #628]	; (8016c6c <ssl_decrypt_buf+0x86c>)
 80169f6:	e163      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
    }
    else
#endif /* MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80169f8:	4b9a      	ldr	r3, [pc, #616]	; (8016c64 <ssl_decrypt_buf+0x864>)
 80169fa:	9300      	str	r3, [sp, #0]
 80169fc:	f240 739b 	movw	r3, #1947	; 0x79b
 8016a00:	4a99      	ldr	r2, [pc, #612]	; (8016c68 <ssl_decrypt_buf+0x868>)
 8016a02:	2101      	movs	r1, #1
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f7f4 fe4d 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016a0a:	4b98      	ldr	r3, [pc, #608]	; (8016c6c <ssl_decrypt_buf+0x86c>)
 8016a0c:	e158      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
    {
 8016a0e:	bf00      	nop
    }

    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016a14:	687a      	ldr	r2, [r7, #4]
 8016a16:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8016a18:	9202      	str	r2, [sp, #8]
 8016a1a:	9301      	str	r3, [sp, #4]
 8016a1c:	4b94      	ldr	r3, [pc, #592]	; (8016c70 <ssl_decrypt_buf+0x870>)
 8016a1e:	9300      	str	r3, [sp, #0]
 8016a20:	f240 739f 	movw	r3, #1951	; 0x79f
 8016a24:	4a90      	ldr	r2, [pc, #576]	; (8016c68 <ssl_decrypt_buf+0x868>)
 8016a26:	2104      	movs	r1, #4
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f7f4 ff2d 	bl	800b888 <mbedtls_debug_print_buf>
    /*
     * Authenticate if not done yet.
     * Compute the MAC regardless of the padding result (RFC4346, CBCTIME).
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
 8016a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	f040 80cc 	bne.w	8016bd0 <ssl_decrypt_buf+0x7d0>
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a40:	695b      	ldr	r3, [r3, #20]
 8016a42:	1ad2      	subs	r2, r2, r3
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	671a      	str	r2, [r3, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a4c:	0a1a      	lsrs	r2, r3, #8
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a52:	b2d2      	uxtb	r2, r2
 8016a54:	701a      	strb	r2, [r3, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a5e:	3301      	adds	r3, #1
 8016a60:	b2d2      	uxtb	r2, r2
 8016a62:	701a      	strb	r2, [r3, #0]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	68db      	ldr	r3, [r3, #12]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	f340 8098 	ble.w	8016b9e <ssl_decrypt_buf+0x79e>
             *
             * We use ( ( Lx + 8 ) / 64 ) to handle 'negative Lx' values
             * correctly. (We round down instead of up, so -56 is the correct
             * value for our calculations instead of -55)
             */
            size_t j, extra_run = 0;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	647b      	str	r3, [r7, #68]	; 0x44
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a7a:	4413      	add	r3, r2
 8016a7c:	3315      	adds	r3, #21
 8016a7e:	099a      	lsrs	r2, r3, #6
                        ( 13 + ssl->in_msglen          + 8 ) / 64;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a84:	3315      	adds	r3, #21
 8016a86:	099b      	lsrs	r3, r3, #6
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 8016a88:	1ad3      	subs	r3, r2, r3
 8016a8a:	647b      	str	r3, [r7, #68]	; 0x44

            extra_run &= correct * 0xFF;
 8016a8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016a90:	4613      	mov	r3, r2
 8016a92:	021b      	lsls	r3, r3, #8
 8016a94:	1a9b      	subs	r3, r3, r2
 8016a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016a98:	4013      	ands	r3, r2
 8016a9a:	647b      	str	r3, [r7, #68]	; 0x44

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016aa0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016aa8:	2208      	movs	r2, #8
 8016aaa:	4619      	mov	r1, r3
 8016aac:	f7f7 fb9c 	bl	800e1e8 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ab4:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016abc:	2203      	movs	r2, #3
 8016abe:	4619      	mov	r1, r3
 8016ac0:	f7f7 fb92 	bl	800e1e8 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ac8:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ad0:	2202      	movs	r2, #2
 8016ad2:	4619      	mov	r1, r3
 8016ad4:	f7f7 fb88 	bl	800e1e8 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016adc:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ae8:	461a      	mov	r2, r3
 8016aea:	f7f7 fb7d 	bl	800e1e8 <mbedtls_md_hmac_update>
                             ssl->in_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016af2:	3344      	adds	r3, #68	; 0x44
 8016af4:	f107 020c 	add.w	r2, r7, #12
 8016af8:	4611      	mov	r1, r2
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7f7 fb96 	bl	800e22c <mbedtls_md_hmac_finish>
            /* Call mbedtls_md_process at least once due to cache attacks */
            for( j = 0; j < extra_run + 1; j++ )
 8016b00:	2300      	movs	r3, #0
 8016b02:	677b      	str	r3, [r7, #116]	; 0x74
 8016b04:	e00c      	b.n	8016b20 <ssl_decrypt_buf+0x720>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b0a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016b12:	4619      	mov	r1, r3
 8016b14:	4610      	mov	r0, r2
 8016b16:	f7f7 fc21 	bl	800e35c <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 8016b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	677b      	str	r3, [r7, #116]	; 0x74
 8016b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b22:	3301      	adds	r3, #1
 8016b24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016b26:	429a      	cmp	r2, r3
 8016b28:	d3ed      	bcc.n	8016b06 <ssl_decrypt_buf+0x706>

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b2e:	3344      	adds	r3, #68	; 0x44
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7f7 fbe1 	bl	800e2f8 <mbedtls_md_hmac_reset>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b3a:	695b      	ldr	r3, [r3, #20]
 8016b3c:	9302      	str	r3, [sp, #8]
 8016b3e:	f107 030c 	add.w	r3, r7, #12
 8016b42:	9301      	str	r3, [sp, #4]
 8016b44:	4b4b      	ldr	r3, [pc, #300]	; (8016c74 <ssl_decrypt_buf+0x874>)
 8016b46:	9300      	str	r3, [sp, #0]
 8016b48:	f240 73e6 	movw	r3, #2022	; 0x7e6
 8016b4c:	4a46      	ldr	r2, [pc, #280]	; (8016c68 <ssl_decrypt_buf+0x868>)
 8016b4e:	2104      	movs	r1, #4
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f7f4 fe99 	bl	800b888 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b5e:	4413      	add	r3, r2
 8016b60:	687a      	ldr	r2, [r7, #4]
 8016b62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016b64:	6952      	ldr	r2, [r2, #20]
 8016b66:	9202      	str	r2, [sp, #8]
 8016b68:	9301      	str	r3, [sp, #4]
 8016b6a:	4b43      	ldr	r3, [pc, #268]	; (8016c78 <ssl_decrypt_buf+0x878>)
 8016b6c:	9300      	str	r3, [sp, #0]
 8016b6e:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8016b72:	4a3d      	ldr	r2, [pc, #244]	; (8016c68 <ssl_decrypt_buf+0x868>)
 8016b74:	2104      	movs	r1, #4
 8016b76:	6878      	ldr	r0, [r7, #4]
 8016b78:	f7f4 fe86 	bl	800b888 <mbedtls_debug_print_buf>
                               ssl->transform_in->maclen );

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b84:	18d0      	adds	r0, r2, r3
                                      ssl->transform_in->maclen ) != 0 )
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8016b8a:	695a      	ldr	r2, [r3, #20]
 8016b8c:	f107 030c 	add.w	r3, r7, #12
 8016b90:	4619      	mov	r1, r3
 8016b92:	f7fe fad8 	bl	8015146 <mbedtls_ssl_safer_memcmp>
 8016b96:	4603      	mov	r3, r0
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d00e      	beq.n	8016bba <ssl_decrypt_buf+0x7ba>
 8016b9c:	e00a      	b.n	8016bb4 <ssl_decrypt_buf+0x7b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016b9e:	4b31      	ldr	r3, [pc, #196]	; (8016c64 <ssl_decrypt_buf+0x864>)
 8016ba0:	9300      	str	r3, [sp, #0]
 8016ba2:	f240 73e2 	movw	r3, #2018	; 0x7e2
 8016ba6:	4a30      	ldr	r2, [pc, #192]	; (8016c68 <ssl_decrypt_buf+0x868>)
 8016ba8:	2101      	movs	r1, #1
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	f7f4 fd7a 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016bb0:	4b2e      	ldr	r3, [pc, #184]	; (8016c6c <ssl_decrypt_buf+0x86c>)
 8016bb2:	e085      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
#endif
            correct = 0;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }
        auth_done++;
 8016bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 8016bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d101      	bne.n	8016bd0 <ssl_decrypt_buf+0x7d0>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016bcc:	4b2b      	ldr	r3, [pc, #172]	; (8016c7c <ssl_decrypt_buf+0x87c>)
 8016bce:	e077      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
    }
#endif /* SSL_SOME_MODES_USE_MAC */

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 8016bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016bd4:	2b01      	cmp	r3, #1
 8016bd6:	d00a      	beq.n	8016bee <ssl_decrypt_buf+0x7ee>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8016bd8:	4b22      	ldr	r3, [pc, #136]	; (8016c64 <ssl_decrypt_buf+0x864>)
 8016bda:	9300      	str	r3, [sp, #0]
 8016bdc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8016be0:	4a21      	ldr	r2, [pc, #132]	; (8016c68 <ssl_decrypt_buf+0x868>)
 8016be2:	2101      	movs	r1, #1
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f7f4 fd5d 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8016bea:	4b20      	ldr	r3, [pc, #128]	; (8016c6c <ssl_decrypt_buf+0x86c>)
 8016bec:	e068      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
    }

    if( ssl->in_msglen == 0 )
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d113      	bne.n	8016c1e <ssl_decrypt_buf+0x81e>
    {
        ssl->nb_zero++;
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016bfa:	1c5a      	adds	r2, r3, #1
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	67da      	str	r2, [r3, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016c04:	2b03      	cmp	r3, #3
 8016c06:	dd0d      	ble.n	8016c24 <ssl_decrypt_buf+0x824>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 8016c08:	4b1d      	ldr	r3, [pc, #116]	; (8016c80 <ssl_decrypt_buf+0x880>)
 8016c0a:	9300      	str	r3, [sp, #0]
 8016c0c:	f640 030d 	movw	r3, #2061	; 0x80d
 8016c10:	4a15      	ldr	r2, [pc, #84]	; (8016c68 <ssl_decrypt_buf+0x868>)
 8016c12:	2101      	movs	r1, #1
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f7f4 fd45 	bl	800b6a4 <mbedtls_debug_print_msg>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8016c1a:	4b18      	ldr	r3, [pc, #96]	; (8016c7c <ssl_decrypt_buf+0x87c>)
 8016c1c:	e050      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
        }
    }
    else
        ssl->nb_zero = 0;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	2200      	movs	r2, #0
 8016c22:	67da      	str	r2, [r3, #124]	; 0x7c
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8016c24:	2308      	movs	r3, #8
 8016c26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016c2a:	e011      	b.n	8016c50 <ssl_decrypt_buf+0x850>
            if( ++ssl->in_ctr[i - 1] != 0 )
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016c30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016c34:	3b01      	subs	r3, #1
 8016c36:	4413      	add	r3, r2
 8016c38:	781a      	ldrb	r2, [r3, #0]
 8016c3a:	3201      	adds	r2, #1
 8016c3c:	b2d2      	uxtb	r2, r2
 8016c3e:	701a      	strb	r2, [r3, #0]
 8016c40:	781b      	ldrb	r3, [r3, #0]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d11e      	bne.n	8016c84 <ssl_decrypt_buf+0x884>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8016c46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016c4a:	3b01      	subs	r3, #1
 8016c4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f7fe fac3 	bl	80151dc <ssl_ep_len>
 8016c56:	4602      	mov	r2, r0
 8016c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016c5c:	4293      	cmp	r3, r2
 8016c5e:	d8e5      	bhi.n	8016c2c <ssl_decrypt_buf+0x82c>
 8016c60:	e011      	b.n	8016c86 <ssl_decrypt_buf+0x886>
 8016c62:	bf00      	nop
 8016c64:	08022478 	.word	0x08022478
 8016c68:	080223d4 	.word	0x080223d4
 8016c6c:	ffff9400 	.word	0xffff9400
 8016c70:	0802285c 	.word	0x0802285c
 8016c74:	08022878 	.word	0x08022878
 8016c78:	08022888 	.word	0x08022888
 8016c7c:	ffff8e80 	.word	0xffff8e80
 8016c80:	08022898 	.word	0x08022898
                break;
 8016c84:	bf00      	nop

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f7fe faa8 	bl	80151dc <ssl_ep_len>
 8016c8c:	4602      	mov	r2, r0
 8016c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016c92:	4293      	cmp	r3, r2
 8016c94:	d10a      	bne.n	8016cac <ssl_decrypt_buf+0x8ac>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 8016c96:	4b0c      	ldr	r3, [pc, #48]	; (8016cc8 <ssl_decrypt_buf+0x8c8>)
 8016c98:	9300      	str	r3, [sp, #0]
 8016c9a:	f640 0324 	movw	r3, #2084	; 0x824
 8016c9e:	4a0b      	ldr	r2, [pc, #44]	; (8016ccc <ssl_decrypt_buf+0x8cc>)
 8016ca0:	2101      	movs	r1, #1
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	f7f4 fcfe 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8016ca8:	4b09      	ldr	r3, [pc, #36]	; (8016cd0 <ssl_decrypt_buf+0x8d0>)
 8016caa:	e009      	b.n	8016cc0 <ssl_decrypt_buf+0x8c0>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 8016cac:	4b09      	ldr	r3, [pc, #36]	; (8016cd4 <ssl_decrypt_buf+0x8d4>)
 8016cae:	9300      	str	r3, [sp, #0]
 8016cb0:	f640 0329 	movw	r3, #2089	; 0x829
 8016cb4:	4a05      	ldr	r2, [pc, #20]	; (8016ccc <ssl_decrypt_buf+0x8cc>)
 8016cb6:	2102      	movs	r1, #2
 8016cb8:	6878      	ldr	r0, [r7, #4]
 8016cba:	f7f4 fcf3 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8016cbe:	2300      	movs	r3, #0
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3798      	adds	r7, #152	; 0x98
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8016cc8:	080228d8 	.word	0x080228d8
 8016ccc:	080223d4 	.word	0x080223d4
 8016cd0:	ffff9480 	.word	0xffff9480
 8016cd4:	080228fc 	.word	0x080228fc

08016cd8 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 8016cd8:	b590      	push	{r4, r7, lr}
 8016cda:	b089      	sub	sp, #36	; 0x24
 8016cdc:	af04      	add	r7, sp, #16
 8016cde:	6078      	str	r0, [r7, #4]
 8016ce0:	6039      	str	r1, [r7, #0]
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 8016ce2:	4b55      	ldr	r3, [pc, #340]	; (8016e38 <mbedtls_ssl_fetch_input+0x160>)
 8016ce4:	9300      	str	r3, [sp, #0]
 8016ce6:	f640 03c6 	movw	r3, #2246	; 0x8c6
 8016cea:	4a54      	ldr	r2, [pc, #336]	; (8016e3c <mbedtls_ssl_fetch_input+0x164>)
 8016cec:	2102      	movs	r1, #2
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f7f4 fcd8 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	695b      	ldr	r3, [r3, #20]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d10e      	bne.n	8016d1a <mbedtls_ssl_fetch_input+0x42>
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	699b      	ldr	r3, [r3, #24]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d10a      	bne.n	8016d1a <mbedtls_ssl_fetch_input+0x42>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 8016d04:	4b4e      	ldr	r3, [pc, #312]	; (8016e40 <mbedtls_ssl_fetch_input+0x168>)
 8016d06:	9300      	str	r3, [sp, #0]
 8016d08:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8016d0c:	4a4b      	ldr	r2, [pc, #300]	; (8016e3c <mbedtls_ssl_fetch_input+0x164>)
 8016d0e:	2101      	movs	r1, #1
 8016d10:	6878      	ldr	r0, [r7, #4]
 8016d12:	f7f4 fcc7 	bl	800b6a4 <mbedtls_debug_print_msg>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8016d16:	4b4b      	ldr	r3, [pc, #300]	; (8016e44 <mbedtls_ssl_fetch_input+0x16c>)
 8016d18:	e08a      	b.n	8016e30 <mbedtls_ssl_fetch_input+0x158>
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d22:	1ad3      	subs	r3, r2, r3
 8016d24:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 8016d28:	331d      	adds	r3, #29
 8016d2a:	683a      	ldr	r2, [r7, #0]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d90a      	bls.n	8016d46 <mbedtls_ssl_fetch_input+0x6e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 8016d30:	4b45      	ldr	r3, [pc, #276]	; (8016e48 <mbedtls_ssl_fetch_input+0x170>)
 8016d32:	9300      	str	r3, [sp, #0]
 8016d34:	f640 03d1 	movw	r3, #2257	; 0x8d1
 8016d38:	4a40      	ldr	r2, [pc, #256]	; (8016e3c <mbedtls_ssl_fetch_input+0x164>)
 8016d3a:	2101      	movs	r1, #1
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f7f4 fcb1 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8016d42:	4b40      	ldr	r3, [pc, #256]	; (8016e44 <mbedtls_ssl_fetch_input+0x16c>)
 8016d44:	e074      	b.n	8016e30 <mbedtls_ssl_fetch_input+0x158>
        ssl->in_left = ret;
    }
    else
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d4a:	683a      	ldr	r2, [r7, #0]
 8016d4c:	9202      	str	r2, [sp, #8]
 8016d4e:	9301      	str	r3, [sp, #4]
 8016d50:	4b3e      	ldr	r3, [pc, #248]	; (8016e4c <mbedtls_ssl_fetch_input+0x174>)
 8016d52:	9300      	str	r3, [sp, #0]
 8016d54:	f640 1363 	movw	r3, #2403	; 0x963
 8016d58:	4a38      	ldr	r2, [pc, #224]	; (8016e3c <mbedtls_ssl_fetch_input+0x164>)
 8016d5a:	2102      	movs	r1, #2
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f7f4 fca1 	bl	800b6a4 <mbedtls_debug_print_msg>
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 8016d62:	e056      	b.n	8016e12 <mbedtls_ssl_fetch_input+0x13a>
        {
            len = nb_want - ssl->in_left;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d68:	683a      	ldr	r2, [r7, #0]
 8016d6a:	1ad3      	subs	r3, r2, r3
 8016d6c:	60bb      	str	r3, [r7, #8]

            if( ssl_check_timer( ssl ) != 0 )
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f7fe fa40 	bl	80151f4 <ssl_check_timer>
 8016d74:	4603      	mov	r3, r0
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d002      	beq.n	8016d80 <mbedtls_ssl_fetch_input+0xa8>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 8016d7a:	4b35      	ldr	r3, [pc, #212]	; (8016e50 <mbedtls_ssl_fetch_input+0x178>)
 8016d7c:	60fb      	str	r3, [r7, #12]
 8016d7e:	e01f      	b.n	8016dc0 <mbedtls_ssl_fetch_input+0xe8>
            else
            {
                if( ssl->f_recv_timeout != NULL )
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	699b      	ldr	r3, [r3, #24]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d00f      	beq.n	8016da8 <mbedtls_ssl_fetch_input+0xd0>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	699c      	ldr	r4, [r3, #24]
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	69d8      	ldr	r0, [r3, #28]
                                               ssl->in_hdr + ssl->in_left, len,
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 8016d98:	18d1      	adds	r1, r2, r3
                                               ssl->conf->read_timeout );
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 8016d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016da0:	68ba      	ldr	r2, [r7, #8]
 8016da2:	47a0      	blx	r4
 8016da4:	60f8      	str	r0, [r7, #12]
 8016da6:	e00b      	b.n	8016dc0 <mbedtls_ssl_fetch_input+0xe8>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	695b      	ldr	r3, [r3, #20]
 8016dac:	687a      	ldr	r2, [r7, #4]
 8016dae:	69d0      	ldr	r0, [r2, #28]
                                       ssl->in_hdr + ssl->in_left, len );
 8016db0:	687a      	ldr	r2, [r7, #4]
 8016db2:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8016db4:	687a      	ldr	r2, [r7, #4]
 8016db6:	6f52      	ldr	r2, [r2, #116]	; 0x74
                    ret = ssl->f_recv( ssl->p_bio,
 8016db8:	4411      	add	r1, r2
 8016dba:	68ba      	ldr	r2, [r7, #8]
 8016dbc:	4798      	blx	r3
 8016dbe:	60f8      	str	r0, [r7, #12]
                }
            }

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dc4:	683a      	ldr	r2, [r7, #0]
 8016dc6:	9202      	str	r2, [sp, #8]
 8016dc8:	9301      	str	r3, [sp, #4]
 8016dca:	4b20      	ldr	r3, [pc, #128]	; (8016e4c <mbedtls_ssl_fetch_input+0x174>)
 8016dcc:	9300      	str	r3, [sp, #0]
 8016dce:	f640 137b 	movw	r3, #2427	; 0x97b
 8016dd2:	4a1a      	ldr	r2, [pc, #104]	; (8016e3c <mbedtls_ssl_fetch_input+0x164>)
 8016dd4:	2102      	movs	r1, #2
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f7f4 fc64 	bl	800b6a4 <mbedtls_debug_print_msg>
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	9301      	str	r3, [sp, #4]
 8016de0:	4b1c      	ldr	r3, [pc, #112]	; (8016e54 <mbedtls_ssl_fetch_input+0x17c>)
 8016de2:	9300      	str	r3, [sp, #0]
 8016de4:	f640 137d 	movw	r3, #2429	; 0x97d
 8016de8:	4a14      	ldr	r2, [pc, #80]	; (8016e3c <mbedtls_ssl_fetch_input+0x164>)
 8016dea:	2102      	movs	r1, #2
 8016dec:	6878      	ldr	r0, [r7, #4]
 8016dee:	f7f4 fcdf 	bl	800b7b0 <mbedtls_debug_print_ret>

            if( ret == 0 )
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d101      	bne.n	8016dfc <mbedtls_ssl_fetch_input+0x124>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 8016df8:	4b17      	ldr	r3, [pc, #92]	; (8016e58 <mbedtls_ssl_fetch_input+0x180>)
 8016dfa:	e019      	b.n	8016e30 <mbedtls_ssl_fetch_input+0x158>

            if( ret < 0 )
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	da01      	bge.n	8016e06 <mbedtls_ssl_fetch_input+0x12e>
                return( ret );
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	e014      	b.n	8016e30 <mbedtls_ssl_fetch_input+0x158>

            ssl->in_left += ret;
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	441a      	add	r2, r3
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	675a      	str	r2, [r3, #116]	; 0x74
        while( ssl->in_left < nb_want )
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e16:	683a      	ldr	r2, [r7, #0]
 8016e18:	429a      	cmp	r2, r3
 8016e1a:	d8a3      	bhi.n	8016d64 <mbedtls_ssl_fetch_input+0x8c>
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 8016e1c:	4b0f      	ldr	r3, [pc, #60]	; (8016e5c <mbedtls_ssl_fetch_input+0x184>)
 8016e1e:	9300      	str	r3, [sp, #0]
 8016e20:	f640 1389 	movw	r3, #2441	; 0x989
 8016e24:	4a05      	ldr	r2, [pc, #20]	; (8016e3c <mbedtls_ssl_fetch_input+0x164>)
 8016e26:	2102      	movs	r1, #2
 8016e28:	6878      	ldr	r0, [r7, #4]
 8016e2a:	f7f4 fc3b 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8016e2e:	2300      	movs	r3, #0
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3714      	adds	r7, #20
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd90      	pop	{r4, r7, pc}
 8016e38:	0802290c 	.word	0x0802290c
 8016e3c:	080223d4 	.word	0x080223d4
 8016e40:	0802291c 	.word	0x0802291c
 8016e44:	ffff8f00 	.word	0xffff8f00
 8016e48:	08022958 	.word	0x08022958
 8016e4c:	08022978 	.word	0x08022978
 8016e50:	ffff9800 	.word	0xffff9800
 8016e54:	08022994 	.word	0x08022994
 8016e58:	ffff8d80 	.word	0xffff8d80
 8016e5c:	080229ac 	.word	0x080229ac

08016e60 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8016e60:	b590      	push	{r4, r7, lr}
 8016e62:	b08b      	sub	sp, #44	; 0x2c
 8016e64:	af04      	add	r7, sp, #16
 8016e66:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 8016e68:	4b58      	ldr	r3, [pc, #352]	; (8016fcc <mbedtls_ssl_flush_output+0x16c>)
 8016e6a:	9300      	str	r3, [sp, #0]
 8016e6c:	f640 1396 	movw	r3, #2454	; 0x996
 8016e70:	4a57      	ldr	r2, [pc, #348]	; (8016fd0 <mbedtls_ssl_flush_output+0x170>)
 8016e72:	2102      	movs	r1, #2
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f7f4 fc15 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ssl->f_send == NULL )
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	691b      	ldr	r3, [r3, #16]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d10a      	bne.n	8016e98 <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 8016e82:	4b54      	ldr	r3, [pc, #336]	; (8016fd4 <mbedtls_ssl_flush_output+0x174>)
 8016e84:	9300      	str	r3, [sp, #0]
 8016e86:	f640 139a 	movw	r3, #2458	; 0x99a
 8016e8a:	4a51      	ldr	r2, [pc, #324]	; (8016fd0 <mbedtls_ssl_flush_output+0x170>)
 8016e8c:	2101      	movs	r1, #1
 8016e8e:	6878      	ldr	r0, [r7, #4]
 8016e90:	f7f4 fc08 	bl	800b6a4 <mbedtls_debug_print_msg>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8016e94:	4b50      	ldr	r3, [pc, #320]	; (8016fd8 <mbedtls_ssl_flush_output+0x178>)
 8016e96:	e095      	b.n	8016fc4 <mbedtls_ssl_flush_output+0x164>
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d153      	bne.n	8016f4a <mbedtls_ssl_flush_output+0xea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 8016ea2:	4b4e      	ldr	r3, [pc, #312]	; (8016fdc <mbedtls_ssl_flush_output+0x17c>)
 8016ea4:	9300      	str	r3, [sp, #0]
 8016ea6:	f640 13a2 	movw	r3, #2466	; 0x9a2
 8016eaa:	4a49      	ldr	r2, [pc, #292]	; (8016fd0 <mbedtls_ssl_flush_output+0x170>)
 8016eac:	2102      	movs	r1, #2
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f7f4 fbf8 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( 0 );
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	e085      	b.n	8016fc4 <mbedtls_ssl_flush_output+0x164>
    }

    while( ssl->out_left > 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 8016eb8:	6878      	ldr	r0, [r7, #4]
 8016eba:	f7fe f92e 	bl	801511a <mbedtls_ssl_hdr_len>
 8016ebe:	4602      	mov	r2, r0
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016ec6:	4413      	add	r3, r2
 8016ec8:	687a      	ldr	r2, [r7, #4]
 8016eca:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8016ece:	9202      	str	r2, [sp, #8]
 8016ed0:	9301      	str	r3, [sp, #4]
 8016ed2:	4b43      	ldr	r3, [pc, #268]	; (8016fe0 <mbedtls_ssl_flush_output+0x180>)
 8016ed4:	9300      	str	r3, [sp, #0]
 8016ed6:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8016eda:	4a3d      	ldr	r2, [pc, #244]	; (8016fd0 <mbedtls_ssl_flush_output+0x170>)
 8016edc:	2102      	movs	r1, #2
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f7f4 fbe0 	bl	800b6a4 <mbedtls_debug_print_msg>
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8016eea:	6878      	ldr	r0, [r7, #4]
 8016eec:	f7fe f915 	bl	801511a <mbedtls_ssl_hdr_len>
 8016ef0:	4602      	mov	r2, r0
              ssl->out_msglen - ssl->out_left;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 8016ef8:	441a      	add	r2, r3
              ssl->out_msglen - ssl->out_left;
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016f00:	1ad3      	subs	r3, r2, r3
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 8016f02:	4423      	add	r3, r4
 8016f04:	613b      	str	r3, [r7, #16]
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	691b      	ldr	r3, [r3, #16]
 8016f0a:	687a      	ldr	r2, [r7, #4]
 8016f0c:	69d0      	ldr	r0, [r2, #28]
 8016f0e:	687a      	ldr	r2, [r7, #4]
 8016f10:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8016f14:	6939      	ldr	r1, [r7, #16]
 8016f16:	4798      	blx	r3
 8016f18:	60f8      	str	r0, [r7, #12]

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	9301      	str	r3, [sp, #4]
 8016f1e:	4b31      	ldr	r3, [pc, #196]	; (8016fe4 <mbedtls_ssl_flush_output+0x184>)
 8016f20:	9300      	str	r3, [sp, #0]
 8016f22:	f640 13af 	movw	r3, #2479	; 0x9af
 8016f26:	4a2a      	ldr	r2, [pc, #168]	; (8016fd0 <mbedtls_ssl_flush_output+0x170>)
 8016f28:	2102      	movs	r1, #2
 8016f2a:	6878      	ldr	r0, [r7, #4]
 8016f2c:	f7f4 fc40 	bl	800b7b0 <mbedtls_debug_print_ret>

        if( ret <= 0 )
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	dc01      	bgt.n	8016f3a <mbedtls_ssl_flush_output+0xda>
            return( ret );
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	e044      	b.n	8016fc4 <mbedtls_ssl_flush_output+0x164>

        ssl->out_left -= ret;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	1ad2      	subs	r2, r2, r3
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    while( ssl->out_left > 0 )
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d1b1      	bne.n	8016eb8 <mbedtls_ssl_flush_output+0x58>
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8016f54:	2308      	movs	r3, #8
 8016f56:	75fb      	strb	r3, [r7, #23]
 8016f58:	e00f      	b.n	8016f7a <mbedtls_ssl_flush_output+0x11a>
        if( ++ssl->out_ctr[i - 1] != 0 )
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8016f60:	7dfb      	ldrb	r3, [r7, #23]
 8016f62:	3b01      	subs	r3, #1
 8016f64:	4413      	add	r3, r2
 8016f66:	781a      	ldrb	r2, [r3, #0]
 8016f68:	3201      	adds	r2, #1
 8016f6a:	b2d2      	uxtb	r2, r2
 8016f6c:	701a      	strb	r2, [r3, #0]
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d10a      	bne.n	8016f8a <mbedtls_ssl_flush_output+0x12a>
    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8016f74:	7dfb      	ldrb	r3, [r7, #23]
 8016f76:	3b01      	subs	r3, #1
 8016f78:	75fb      	strb	r3, [r7, #23]
 8016f7a:	7dfc      	ldrb	r4, [r7, #23]
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f7fe f92d 	bl	80151dc <ssl_ep_len>
 8016f82:	4603      	mov	r3, r0
 8016f84:	429c      	cmp	r4, r3
 8016f86:	d8e8      	bhi.n	8016f5a <mbedtls_ssl_flush_output+0xfa>
 8016f88:	e000      	b.n	8016f8c <mbedtls_ssl_flush_output+0x12c>
            break;
 8016f8a:	bf00      	nop

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
 8016f8c:	7dfc      	ldrb	r4, [r7, #23]
 8016f8e:	6878      	ldr	r0, [r7, #4]
 8016f90:	f7fe f924 	bl	80151dc <ssl_ep_len>
 8016f94:	4603      	mov	r3, r0
 8016f96:	429c      	cmp	r4, r3
 8016f98:	d10a      	bne.n	8016fb0 <mbedtls_ssl_flush_output+0x150>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 8016f9a:	4b13      	ldr	r3, [pc, #76]	; (8016fe8 <mbedtls_ssl_flush_output+0x188>)
 8016f9c:	9300      	str	r3, [sp, #0]
 8016f9e:	f640 13be 	movw	r3, #2494	; 0x9be
 8016fa2:	4a0b      	ldr	r2, [pc, #44]	; (8016fd0 <mbedtls_ssl_flush_output+0x170>)
 8016fa4:	2101      	movs	r1, #1
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f7f4 fb7c 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8016fac:	4b0f      	ldr	r3, [pc, #60]	; (8016fec <mbedtls_ssl_flush_output+0x18c>)
 8016fae:	e009      	b.n	8016fc4 <mbedtls_ssl_flush_output+0x164>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 8016fb0:	4b0a      	ldr	r3, [pc, #40]	; (8016fdc <mbedtls_ssl_flush_output+0x17c>)
 8016fb2:	9300      	str	r3, [sp, #0]
 8016fb4:	f640 13c2 	movw	r3, #2498	; 0x9c2
 8016fb8:	4a05      	ldr	r2, [pc, #20]	; (8016fd0 <mbedtls_ssl_flush_output+0x170>)
 8016fba:	2102      	movs	r1, #2
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f7f4 fb71 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8016fc2:	2300      	movs	r3, #0
}
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	371c      	adds	r7, #28
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	bd90      	pop	{r4, r7, pc}
 8016fcc:	080229bc 	.word	0x080229bc
 8016fd0:	080223d4 	.word	0x080223d4
 8016fd4:	0802291c 	.word	0x0802291c
 8016fd8:	ffff8f00 	.word	0xffff8f00
 8016fdc:	080229cc 	.word	0x080229cc
 8016fe0:	080229dc 	.word	0x080229dc
 8016fe4:	08022a00 	.word	0x08022a00
 8016fe8:	08022a0c 	.word	0x08022a0c
 8016fec:	ffff9480 	.word	0xffff9480

08016ff0 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8016ff0:	b590      	push	{r4, r7, lr}
 8016ff2:	b08d      	sub	sp, #52	; 0x34
 8016ff4:	af06      	add	r7, sp, #24
 8016ff6:	6078      	str	r0, [r7, #4]
    int ret, done = 0, out_msg_type;
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	617b      	str	r3, [r7, #20]
    size_t len = ssl->out_msglen;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017002:	613b      	str	r3, [r7, #16]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 8017004:	4b86      	ldr	r3, [pc, #536]	; (8017220 <mbedtls_ssl_write_record+0x230>)
 8017006:	9300      	str	r3, [sp, #0]
 8017008:	f640 23b3 	movw	r3, #2739	; 0xab3
 801700c:	4a85      	ldr	r2, [pc, #532]	; (8017224 <mbedtls_ssl_write_record+0x234>)
 801700e:	2102      	movs	r1, #2
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f7f4 fb47 	bl	800b6a4 <mbedtls_debug_print_msg>
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801701c:	2b16      	cmp	r3, #22
 801701e:	d13d      	bne.n	801709c <mbedtls_ssl_write_record+0xac>
    {
        out_msg_type = ssl->out_msg[0];
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017026:	781b      	ldrb	r3, [r3, #0]
 8017028:	60fb      	str	r3, [r7, #12]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d00e      	beq.n	801704e <mbedtls_ssl_write_record+0x5e>
            ssl->handshake == NULL )
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 8017034:	2b00      	cmp	r3, #0
 8017036:	d10a      	bne.n	801704e <mbedtls_ssl_write_record+0x5e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8017038:	4b7b      	ldr	r3, [pc, #492]	; (8017228 <mbedtls_ssl_write_record+0x238>)
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	f640 23c5 	movw	r3, #2757	; 0xac5
 8017040:	4a78      	ldr	r2, [pc, #480]	; (8017224 <mbedtls_ssl_write_record+0x234>)
 8017042:	2101      	movs	r1, #1
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f7f4 fb2d 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801704a:	4b78      	ldr	r3, [pc, #480]	; (801722c <mbedtls_ssl_write_record+0x23c>)
 801704c:	e0e4      	b.n	8017218 <mbedtls_ssl_write_record+0x228>
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	3b04      	subs	r3, #4
 8017052:	0c1a      	lsrs	r2, r3, #16
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801705a:	3301      	adds	r3, #1
 801705c:	b2d2      	uxtb	r2, r2
 801705e:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 8017060:	693b      	ldr	r3, [r7, #16]
 8017062:	3b04      	subs	r3, #4
 8017064:	0a1a      	lsrs	r2, r3, #8
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801706c:	3302      	adds	r3, #2
 801706e:	b2d2      	uxtb	r2, r2
 8017070:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	b2da      	uxtb	r2, r3
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801707c:	3303      	adds	r3, #3
 801707e:	3a04      	subs	r2, #4
 8017080:	b2d2      	uxtb	r2, r2
 8017082:	701a      	strb	r2, [r3, #0]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d008      	beq.n	801709c <mbedtls_ssl_write_record+0xac>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801708e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017090:	687a      	ldr	r2, [r7, #4]
 8017092:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 8017096:	693a      	ldr	r2, [r7, #16]
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	4798      	blx	r3

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	f040 809c 	bne.w	80171dc <mbedtls_ssl_write_record+0x1ec>
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80170b0:	b2d2      	uxtb	r2, r2
 80170b2:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	6898      	ldr	r0, [r3, #8]
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	68d9      	ldr	r1, [r3, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80170c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80170c8:	b2db      	uxtb	r3, r3
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80170ca:	461a      	mov	r2, r3
                           ssl->conf->transport, ssl->out_hdr + 1 );
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80170d2:	3301      	adds	r3, #1
 80170d4:	f002 f872 	bl	80191bc <mbedtls_ssl_write_version>

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 80170d8:	693b      	ldr	r3, [r7, #16]
 80170da:	0a1a      	lsrs	r2, r3, #8
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170e2:	b2d2      	uxtb	r2, r2
 80170e4:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170ec:	3301      	adds	r3, #1
 80170ee:	693a      	ldr	r2, [r7, #16]
 80170f0:	b2d2      	uxtb	r2, r2
 80170f2:	701a      	strb	r2, [r3, #0]

        if( ssl->transform_out != NULL )
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d025      	beq.n	8017148 <mbedtls_ssl_write_record+0x158>
        {
            if( ( ret = ssl_encrypt_buf( ssl ) ) != 0 )
 80170fc:	6878      	ldr	r0, [r7, #4]
 80170fe:	f7fe fe71 	bl	8015de4 <ssl_encrypt_buf>
 8017102:	60b8      	str	r0, [r7, #8]
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d00c      	beq.n	8017124 <mbedtls_ssl_write_record+0x134>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 801710a:	68bb      	ldr	r3, [r7, #8]
 801710c:	9301      	str	r3, [sp, #4]
 801710e:	4b48      	ldr	r3, [pc, #288]	; (8017230 <mbedtls_ssl_write_record+0x240>)
 8017110:	9300      	str	r3, [sp, #0]
 8017112:	f640 3337 	movw	r3, #2871	; 0xb37
 8017116:	4a43      	ldr	r2, [pc, #268]	; (8017224 <mbedtls_ssl_write_record+0x234>)
 8017118:	2101      	movs	r1, #1
 801711a:	6878      	ldr	r0, [r7, #4]
 801711c:	f7f4 fb48 	bl	800b7b0 <mbedtls_debug_print_ret>
                return( ret );
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	e079      	b.n	8017218 <mbedtls_ssl_write_record+0x228>
            }

            len = ssl->out_msglen;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801712a:	613b      	str	r3, [r7, #16]
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 801712c:	693b      	ldr	r3, [r7, #16]
 801712e:	0a1a      	lsrs	r2, r3, #8
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017136:	b2d2      	uxtb	r2, r2
 8017138:	701a      	strb	r2, [r3, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017140:	3301      	adds	r3, #1
 8017142:	693a      	ldr	r2, [r7, #16]
 8017144:	b2d2      	uxtb	r2, r2
 8017146:	701a      	strb	r2, [r3, #0]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	f7fd ffe6 	bl	801511a <mbedtls_ssl_hdr_len>
 801714e:	4602      	mov	r2, r0
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017156:	441a      	add	r2, r3
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	4619      	mov	r1, r3
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801716e:	3301      	adds	r3, #1
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	4618      	mov	r0, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801717a:	3302      	adds	r3, #2
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	461c      	mov	r4, r3
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	021b      	lsls	r3, r3, #8
 801718a:	687a      	ldr	r2, [r7, #4]
 801718c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8017190:	3201      	adds	r2, #1
 8017192:	7812      	ldrb	r2, [r2, #0]
 8017194:	4313      	orrs	r3, r2
 8017196:	9304      	str	r3, [sp, #16]
 8017198:	9403      	str	r4, [sp, #12]
 801719a:	9002      	str	r0, [sp, #8]
 801719c:	9101      	str	r1, [sp, #4]
 801719e:	4b25      	ldr	r3, [pc, #148]	; (8017234 <mbedtls_ssl_write_record+0x244>)
 80171a0:	9300      	str	r3, [sp, #0]
 80171a2:	f640 3342 	movw	r3, #2882	; 0xb42
 80171a6:	4a1f      	ldr	r2, [pc, #124]	; (8017224 <mbedtls_ssl_write_record+0x234>)
 80171a8:	2103      	movs	r1, #3
 80171aa:	6878      	ldr	r0, [r7, #4]
 80171ac:	f7f4 fa7a 	bl	800b6a4 <mbedtls_debug_print_msg>
                            "version = [%d:%d], msglen = %d",
                       ssl->out_hdr[0], ssl->out_hdr[1], ssl->out_hdr[2],
                     ( ssl->out_len[0] << 8 ) | ssl->out_len[1] ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80171b6:	6878      	ldr	r0, [r7, #4]
 80171b8:	f7fd ffaf 	bl	801511a <mbedtls_ssl_hdr_len>
 80171bc:	4602      	mov	r2, r0
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80171c4:	4413      	add	r3, r2
 80171c6:	9302      	str	r3, [sp, #8]
 80171c8:	9401      	str	r4, [sp, #4]
 80171ca:	4b1b      	ldr	r3, [pc, #108]	; (8017238 <mbedtls_ssl_write_record+0x248>)
 80171cc:	9300      	str	r3, [sp, #0]
 80171ce:	f640 3347 	movw	r3, #2887	; 0xb47
 80171d2:	4a14      	ldr	r2, [pc, #80]	; (8017224 <mbedtls_ssl_write_record+0x234>)
 80171d4:	2104      	movs	r1, #4
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f7f4 fb56 	bl	800b888 <mbedtls_debug_print_buf>
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80171dc:	6878      	ldr	r0, [r7, #4]
 80171de:	f7ff fe3f 	bl	8016e60 <mbedtls_ssl_flush_output>
 80171e2:	60b8      	str	r0, [r7, #8]
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d00c      	beq.n	8017204 <mbedtls_ssl_write_record+0x214>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	9301      	str	r3, [sp, #4]
 80171ee:	4b13      	ldr	r3, [pc, #76]	; (801723c <mbedtls_ssl_write_record+0x24c>)
 80171f0:	9300      	str	r3, [sp, #0]
 80171f2:	f640 334d 	movw	r3, #2893	; 0xb4d
 80171f6:	4a0b      	ldr	r2, [pc, #44]	; (8017224 <mbedtls_ssl_write_record+0x234>)
 80171f8:	2101      	movs	r1, #1
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f7f4 fad8 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	e009      	b.n	8017218 <mbedtls_ssl_write_record+0x228>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 8017204:	4b0e      	ldr	r3, [pc, #56]	; (8017240 <mbedtls_ssl_write_record+0x250>)
 8017206:	9300      	str	r3, [sp, #0]
 8017208:	f640 3351 	movw	r3, #2897	; 0xb51
 801720c:	4a05      	ldr	r2, [pc, #20]	; (8017224 <mbedtls_ssl_write_record+0x234>)
 801720e:	2102      	movs	r1, #2
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	f7f4 fa47 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8017216:	2300      	movs	r3, #0
}
 8017218:	4618      	mov	r0, r3
 801721a:	371c      	adds	r7, #28
 801721c:	46bd      	mov	sp, r7
 801721e:	bd90      	pop	{r4, r7, pc}
 8017220:	08022a30 	.word	0x08022a30
 8017224:	080223d4 	.word	0x080223d4
 8017228:	08022478 	.word	0x08022478
 801722c:	ffff9400 	.word	0xffff9400
 8017230:	08022a40 	.word	0x08022a40
 8017234:	08022a50 	.word	0x08022a50
 8017238:	08022a8c 	.word	0x08022a8c
 801723c:	08022aac 	.word	0x08022aac
 8017240:	08022ac8 	.word	0x08022ac8

08017244 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 8017244:	b590      	push	{r4, r7, lr}
 8017246:	b087      	sub	sp, #28
 8017248:	af04      	add	r7, sp, #16
 801724a:	6078      	str	r0, [r7, #4]
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f7fd ff6d 	bl	8015130 <mbedtls_ssl_hs_hdr_len>
 8017256:	4603      	mov	r3, r0
 8017258:	429c      	cmp	r4, r3
 801725a:	d20d      	bcs.n	8017278 <mbedtls_ssl_prepare_handshake_record+0x34>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017260:	9301      	str	r3, [sp, #4]
 8017262:	4b26      	ldr	r3, [pc, #152]	; (80172fc <mbedtls_ssl_prepare_handshake_record+0xb8>)
 8017264:	9300      	str	r3, [sp, #0]
 8017266:	f640 4334 	movw	r3, #3124	; 0xc34
 801726a:	4a25      	ldr	r2, [pc, #148]	; (8017300 <mbedtls_ssl_prepare_handshake_record+0xbc>)
 801726c:	2101      	movs	r1, #1
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	f7f4 fa18 	bl	800b6a4 <mbedtls_debug_print_msg>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017274:	4b23      	ldr	r3, [pc, #140]	; (8017304 <mbedtls_ssl_prepare_handshake_record+0xc0>)
 8017276:	e03c      	b.n	80172f2 <mbedtls_ssl_prepare_handshake_record+0xae>
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f7fd ff59 	bl	8015130 <mbedtls_ssl_hs_hdr_len>
 801727e:	4601      	mov	r1, r0
                    ( ssl->in_msg[1] << 16 ) |
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017284:	3301      	adds	r3, #1
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	041a      	lsls	r2, r3, #16
                    ( ssl->in_msg[2] << 8  ) |
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801728e:	3302      	adds	r3, #2
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	021b      	lsls	r3, r3, #8
                    ( ssl->in_msg[1] << 16 ) |
 8017294:	4313      	orrs	r3, r2
                      ssl->in_msg[3] );
 8017296:	687a      	ldr	r2, [r7, #4]
 8017298:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801729a:	3203      	adds	r2, #3
 801729c:	7812      	ldrb	r2, [r2, #0]
                    ( ssl->in_msg[2] << 8  ) |
 801729e:	4313      	orrs	r3, r2
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 80172a0:	18ca      	adds	r2, r1, r3
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	679a      	str	r2, [r3, #120]	; 0x78

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172aa:	687a      	ldr	r2, [r7, #4]
 80172ac:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80172ae:	7812      	ldrb	r2, [r2, #0]
 80172b0:	4611      	mov	r1, r2
 80172b2:	687a      	ldr	r2, [r7, #4]
 80172b4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80172b6:	9203      	str	r2, [sp, #12]
 80172b8:	9102      	str	r1, [sp, #8]
 80172ba:	9301      	str	r3, [sp, #4]
 80172bc:	4b12      	ldr	r3, [pc, #72]	; (8017308 <mbedtls_ssl_prepare_handshake_record+0xc4>)
 80172be:	9300      	str	r3, [sp, #0]
 80172c0:	f640 433e 	movw	r3, #3134	; 0xc3e
 80172c4:	4a0e      	ldr	r2, [pc, #56]	; (8017300 <mbedtls_ssl_prepare_handshake_record+0xbc>)
 80172c6:	2103      	movs	r1, #3
 80172c8:	6878      	ldr	r0, [r7, #4]
 80172ca:	f7f4 f9eb 	bl	800b6a4 <mbedtls_debug_print_msg>
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    /* With TLS we don't handle fragmentation (for now) */
    if( ssl->in_msglen < ssl->in_hslen )
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80172d6:	429a      	cmp	r2, r3
 80172d8:	d20a      	bcs.n	80172f0 <mbedtls_ssl_prepare_handshake_record+0xac>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 80172da:	4b0c      	ldr	r3, [pc, #48]	; (801730c <mbedtls_ssl_prepare_handshake_record+0xc8>)
 80172dc:	9300      	str	r3, [sp, #0]
 80172de:	f640 437e 	movw	r3, #3198	; 0xc7e
 80172e2:	4a07      	ldr	r2, [pc, #28]	; (8017300 <mbedtls_ssl_prepare_handshake_record+0xbc>)
 80172e4:	2101      	movs	r1, #1
 80172e6:	6878      	ldr	r0, [r7, #4]
 80172e8:	f7f4 f9dc 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 80172ec:	4b08      	ldr	r3, [pc, #32]	; (8017310 <mbedtls_ssl_prepare_handshake_record+0xcc>)
 80172ee:	e000      	b.n	80172f2 <mbedtls_ssl_prepare_handshake_record+0xae>
    }

    return( 0 );
 80172f0:	2300      	movs	r3, #0
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	370c      	adds	r7, #12
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd90      	pop	{r4, r7, pc}
 80172fa:	bf00      	nop
 80172fc:	08022ad8 	.word	0x08022ad8
 8017300:	080223d4 	.word	0x080223d4
 8017304:	ffff8e00 	.word	0xffff8e00
 8017308:	08022af8 	.word	0x08022af8
 801730c:	08022b30 	.word	0x08022b30
 8017310:	ffff8f80 	.word	0xffff8f80

08017314 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b082      	sub	sp, #8
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	2b10      	cmp	r3, #16
 8017322:	d00c      	beq.n	801733e <mbedtls_ssl_update_handshake_status+0x2a>
        ssl->handshake != NULL )
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8017328:	2b00      	cmp	r3, #0
 801732a:	d008      	beq.n	801733e <mbedtls_ssl_update_handshake_status+0x2a>
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017332:	687a      	ldr	r2, [r7, #4]
 8017334:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8017336:	687a      	ldr	r2, [r7, #4]
 8017338:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	4798      	blx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 801733e:	bf00      	nop
 8017340:	3708      	adds	r7, #8
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
	...

08017348 <ssl_parse_record_header>:
 * 4. drop the whole datagram if this function returns anything else.
 * Point 2 is needed when the peer is resending, and we have already received
 * the first record from a datagram but are still waiting for the others.
 */
static int ssl_parse_record_header( mbedtls_ssl_context *ssl )
{
 8017348:	b590      	push	{r4, r7, lr}
 801734a:	b08b      	sub	sp, #44	; 0x2c
 801734c:	af06      	add	r7, sp, #24
 801734e:	6078      	str	r0, [r7, #4]
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8017354:	6878      	ldr	r0, [r7, #4]
 8017356:	f7fd fee0 	bl	801511a <mbedtls_ssl_hdr_len>
 801735a:	4603      	mov	r3, r0
 801735c:	9302      	str	r3, [sp, #8]
 801735e:	9401      	str	r4, [sp, #4]
 8017360:	4b6f      	ldr	r3, [pc, #444]	; (8017520 <ssl_parse_record_header+0x1d8>)
 8017362:	9300      	str	r3, [sp, #0]
 8017364:	f640 53c5 	movw	r3, #3525	; 0xdc5
 8017368:	4a6e      	ldr	r2, [pc, #440]	; (8017524 <ssl_parse_record_header+0x1dc>)
 801736a:	2104      	movs	r1, #4
 801736c:	6878      	ldr	r0, [r7, #4]
 801736e:	f7f4 fa8b 	bl	800b888 <mbedtls_debug_print_buf>

    ssl->in_msgtype =  ssl->in_hdr[0];
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017376:	781b      	ldrb	r3, [r3, #0]
 8017378:	461a      	mov	r2, r3
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	66da      	str	r2, [r3, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017382:	781b      	ldrb	r3, [r3, #0]
 8017384:	021b      	lsls	r3, r3, #8
 8017386:	687a      	ldr	r2, [r7, #4]
 8017388:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801738a:	3201      	adds	r2, #1
 801738c:	7812      	ldrb	r2, [r2, #0]
 801738e:	4313      	orrs	r3, r2
 8017390:	461a      	mov	r2, r3
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	671a      	str	r2, [r3, #112]	; 0x70
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801739e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	461a      	mov	r2, r3
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173aa:	3301      	adds	r3, #1
 80173ac:	f107 0108 	add.w	r1, r7, #8
 80173b0:	f107 000c 	add.w	r0, r7, #12
 80173b4:	f001 ff18 	bl	80191e8 <mbedtls_ssl_read_version>

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80173bc:	68fa      	ldr	r2, [r7, #12]
 80173be:	68b9      	ldr	r1, [r7, #8]
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80173c4:	9004      	str	r0, [sp, #16]
 80173c6:	9103      	str	r1, [sp, #12]
 80173c8:	9202      	str	r2, [sp, #8]
 80173ca:	9301      	str	r3, [sp, #4]
 80173cc:	4b56      	ldr	r3, [pc, #344]	; (8017528 <ssl_parse_record_header+0x1e0>)
 80173ce:	9300      	str	r3, [sp, #0]
 80173d0:	f640 53cb 	movw	r3, #3531	; 0xdcb
 80173d4:	4a53      	ldr	r2, [pc, #332]	; (8017524 <ssl_parse_record_header+0x1dc>)
 80173d6:	2103      	movs	r1, #3
 80173d8:	6878      	ldr	r0, [r7, #4]
 80173da:	f7f4 f963 	bl	800b6a4 <mbedtls_debug_print_msg>
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80173e2:	2b16      	cmp	r3, #22
 80173e4:	d01b      	beq.n	801741e <ssl_parse_record_header+0xd6>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80173ea:	2b15      	cmp	r3, #21
 80173ec:	d017      	beq.n	801741e <ssl_parse_record_header+0xd6>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&
 80173f2:	2b14      	cmp	r3, #20
 80173f4:	d013      	beq.n	801741e <ssl_parse_record_header+0xd6>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 80173fa:	2b17      	cmp	r3, #23
 80173fc:	d00f      	beq.n	801741e <ssl_parse_record_header+0xd6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 80173fe:	4b4b      	ldr	r3, [pc, #300]	; (801752c <ssl_parse_record_header+0x1e4>)
 8017400:	9300      	str	r3, [sp, #0]
 8017402:	f640 53d6 	movw	r3, #3542	; 0xdd6
 8017406:	4a47      	ldr	r2, [pc, #284]	; (8017524 <ssl_parse_record_header+0x1dc>)
 8017408:	2101      	movs	r1, #1
 801740a:	6878      	ldr	r0, [r7, #4]
 801740c:	f7f4 f94a 	bl	800b6a4 <mbedtls_debug_print_msg>
#if defined(MBEDTLS_SSL_PROTO_DTLS)
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017410:	220a      	movs	r2, #10
 8017412:	2102      	movs	r1, #2
 8017414:	6878      	ldr	r0, [r7, #4]
 8017416:	f000 fa95 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801741a:	4b45      	ldr	r3, [pc, #276]	; (8017530 <ssl_parse_record_header+0x1e8>)
 801741c:	e07c      	b.n	8017518 <ssl_parse_record_header+0x1d0>
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	689a      	ldr	r2, [r3, #8]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	429a      	cmp	r2, r3
 8017426:	d00a      	beq.n	801743e <ssl_parse_record_header+0xf6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 8017428:	4b42      	ldr	r3, [pc, #264]	; (8017534 <ssl_parse_record_header+0x1ec>)
 801742a:	9300      	str	r3, [sp, #0]
 801742c:	f640 53e6 	movw	r3, #3558	; 0xde6
 8017430:	4a3c      	ldr	r2, [pc, #240]	; (8017524 <ssl_parse_record_header+0x1dc>)
 8017432:	2101      	movs	r1, #1
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f7f4 f935 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801743a:	4b3d      	ldr	r3, [pc, #244]	; (8017530 <ssl_parse_record_header+0x1e8>)
 801743c:	e06c      	b.n	8017518 <ssl_parse_record_header+0x1d0>
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8017446:	461a      	mov	r2, r3
 8017448:	68bb      	ldr	r3, [r7, #8]
 801744a:	429a      	cmp	r2, r3
 801744c:	da0a      	bge.n	8017464 <ssl_parse_record_header+0x11c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 801744e:	4b3a      	ldr	r3, [pc, #232]	; (8017538 <ssl_parse_record_header+0x1f0>)
 8017450:	9300      	str	r3, [sp, #0]
 8017452:	f640 53ec 	movw	r3, #3564	; 0xdec
 8017456:	4a33      	ldr	r2, [pc, #204]	; (8017524 <ssl_parse_record_header+0x1dc>)
 8017458:	2101      	movs	r1, #1
 801745a:	6878      	ldr	r0, [r7, #4]
 801745c:	f7f4 f922 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017460:	4b33      	ldr	r3, [pc, #204]	; (8017530 <ssl_parse_record_header+0x1e8>)
 8017462:	e059      	b.n	8017518 <ssl_parse_record_header+0x1d0>
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017470:	1acb      	subs	r3, r1, r3
 8017472:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 8017476:	331d      	adds	r3, #29
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8017478:	429a      	cmp	r2, r3
 801747a:	d90a      	bls.n	8017492 <ssl_parse_record_header+0x14a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801747c:	4b2f      	ldr	r3, [pc, #188]	; (801753c <ssl_parse_record_header+0x1f4>)
 801747e:	9300      	str	r3, [sp, #0]
 8017480:	f640 53f4 	movw	r3, #3572	; 0xdf4
 8017484:	4a27      	ldr	r2, [pc, #156]	; (8017524 <ssl_parse_record_header+0x1dc>)
 8017486:	2101      	movs	r1, #1
 8017488:	6878      	ldr	r0, [r7, #4]
 801748a:	f7f4 f90b 	bl	800b6a4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801748e:	4b28      	ldr	r3, [pc, #160]	; (8017530 <ssl_parse_record_header+0x1e8>)
 8017490:	e042      	b.n	8017518 <ssl_parse_record_header+0x1d0>
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017496:	2b00      	cmp	r3, #0
 8017498:	d113      	bne.n	80174c2 <ssl_parse_record_header+0x17a>
    {
        if( ssl->in_msglen < 1 ||
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d004      	beq.n	80174ac <ssl_parse_record_header+0x164>
            ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if( ssl->in_msglen < 1 ||
 80174a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80174aa:	d934      	bls.n	8017516 <ssl_parse_record_header+0x1ce>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80174ac:	4b23      	ldr	r3, [pc, #140]	; (801753c <ssl_parse_record_header+0x1f4>)
 80174ae:	9300      	str	r3, [sp, #0]
 80174b0:	f640 53fe 	movw	r3, #3582	; 0xdfe
 80174b4:	4a1b      	ldr	r2, [pc, #108]	; (8017524 <ssl_parse_record_header+0x1dc>)
 80174b6:	2101      	movs	r1, #1
 80174b8:	6878      	ldr	r0, [r7, #4]
 80174ba:	f7f4 f8f3 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80174be:	4b1c      	ldr	r3, [pc, #112]	; (8017530 <ssl_parse_record_header+0x1e8>)
 80174c0:	e02a      	b.n	8017518 <ssl_parse_record_header+0x1d0>
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174ca:	689b      	ldr	r3, [r3, #8]
 80174cc:	429a      	cmp	r2, r3
 80174ce:	d20a      	bcs.n	80174e6 <ssl_parse_record_header+0x19e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80174d0:	4b1a      	ldr	r3, [pc, #104]	; (801753c <ssl_parse_record_header+0x1f4>)
 80174d2:	9300      	str	r3, [sp, #0]
 80174d4:	f640 6306 	movw	r3, #3590	; 0xe06
 80174d8:	4a12      	ldr	r2, [pc, #72]	; (8017524 <ssl_parse_record_header+0x1dc>)
 80174da:	2101      	movs	r1, #1
 80174dc:	6878      	ldr	r0, [r7, #4]
 80174de:	f7f4 f8e1 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80174e2:	4b13      	ldr	r3, [pc, #76]	; (8017530 <ssl_parse_record_header+0x1e8>)
 80174e4:	e018      	b.n	8017518 <ssl_parse_record_header+0x1d0>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	68db      	ldr	r3, [r3, #12]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	dd13      	ble.n	8017516 <ssl_parse_record_header+0x1ce>
            ssl->in_msglen > ssl->transform_in->minlen +
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174f6:	689b      	ldr	r3, [r3, #8]
                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
 80174f8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d90a      	bls.n	8017516 <ssl_parse_record_header+0x1ce>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8017500:	4b0e      	ldr	r3, [pc, #56]	; (801753c <ssl_parse_record_header+0x1f4>)
 8017502:	9300      	str	r3, [sp, #0]
 8017504:	f640 631b 	movw	r3, #3611	; 0xe1b
 8017508:	4a06      	ldr	r2, [pc, #24]	; (8017524 <ssl_parse_record_header+0x1dc>)
 801750a:	2101      	movs	r1, #1
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	f7f4 f8c9 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8017512:	4b07      	ldr	r3, [pc, #28]	; (8017530 <ssl_parse_record_header+0x1e8>)
 8017514:	e000      	b.n	8017518 <ssl_parse_record_header+0x1d0>
        }
#endif
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    return( 0 );
 8017516:	2300      	movs	r3, #0
}
 8017518:	4618      	mov	r0, r3
 801751a:	3714      	adds	r7, #20
 801751c:	46bd      	mov	sp, r7
 801751e:	bd90      	pop	{r4, r7, pc}
 8017520:	08022b5c 	.word	0x08022b5c
 8017524:	080223d4 	.word	0x080223d4
 8017528:	08022b70 	.word	0x08022b70
 801752c:	08022bac 	.word	0x08022bac
 8017530:	ffff8e00 	.word	0xffff8e00
 8017534:	08022bc0 	.word	0x08022bc0
 8017538:	08022bd8 	.word	0x08022bd8
 801753c:	08022bf0 	.word	0x08022bf0

08017540 <ssl_prepare_record_content>:

/*
 * If applicable, decrypt (and decompress) record content
 */
static int ssl_prepare_record_content( mbedtls_ssl_context *ssl )
{
 8017540:	b590      	push	{r4, r7, lr}
 8017542:	b089      	sub	sp, #36	; 0x24
 8017544:	af04      	add	r7, sp, #16
 8017546:	6078      	str	r0, [r7, #4]
    int ret, done = 0;
 8017548:	2300      	movs	r3, #0
 801754a:	60fb      	str	r3, [r7, #12]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8017550:	6878      	ldr	r0, [r7, #4]
 8017552:	f7fd fde2 	bl	801511a <mbedtls_ssl_hdr_len>
 8017556:	4602      	mov	r2, r0
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801755c:	4413      	add	r3, r2
 801755e:	9302      	str	r3, [sp, #8]
 8017560:	9401      	str	r4, [sp, #4]
 8017562:	4b24      	ldr	r3, [pc, #144]	; (80175f4 <ssl_prepare_record_content+0xb4>)
 8017564:	9300      	str	r3, [sp, #0]
 8017566:	f640 6377 	movw	r3, #3703	; 0xe77
 801756a:	4a23      	ldr	r2, [pc, #140]	; (80175f8 <ssl_prepare_record_content+0xb8>)
 801756c:	2104      	movs	r1, #4
 801756e:	6878      	ldr	r0, [r7, #4]
 8017570:	f7f4 f98a 	bl	800b888 <mbedtls_debug_print_buf>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d136      	bne.n	80175e8 <ssl_prepare_record_content+0xa8>
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801757e:	2b00      	cmp	r3, #0
 8017580:	d032      	beq.n	80175e8 <ssl_prepare_record_content+0xa8>
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 8017582:	6878      	ldr	r0, [r7, #4]
 8017584:	f7fe ff3c 	bl	8016400 <ssl_decrypt_buf>
 8017588:	60b8      	str	r0, [r7, #8]
 801758a:	68bb      	ldr	r3, [r7, #8]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d00c      	beq.n	80175aa <ssl_prepare_record_content+0x6a>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	9301      	str	r3, [sp, #4]
 8017594:	4b19      	ldr	r3, [pc, #100]	; (80175fc <ssl_prepare_record_content+0xbc>)
 8017596:	9300      	str	r3, [sp, #0]
 8017598:	f640 638e 	movw	r3, #3726	; 0xe8e
 801759c:	4a16      	ldr	r2, [pc, #88]	; (80175f8 <ssl_prepare_record_content+0xb8>)
 801759e:	2101      	movs	r1, #1
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	f7f4 f905 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	e01f      	b.n	80175ea <ssl_prepare_record_content+0xaa>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80175b2:	9202      	str	r2, [sp, #8]
 80175b4:	9301      	str	r3, [sp, #4]
 80175b6:	4b12      	ldr	r3, [pc, #72]	; (8017600 <ssl_prepare_record_content+0xc0>)
 80175b8:	9300      	str	r3, [sp, #0]
 80175ba:	f640 6392 	movw	r3, #3730	; 0xe92
 80175be:	4a0e      	ldr	r2, [pc, #56]	; (80175f8 <ssl_prepare_record_content+0xb8>)
 80175c0:	2104      	movs	r1, #4
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f7f4 f960 	bl	800b888 <mbedtls_debug_print_buf>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80175d0:	d90a      	bls.n	80175e8 <ssl_prepare_record_content+0xa8>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80175d2:	4b0c      	ldr	r3, [pc, #48]	; (8017604 <ssl_prepare_record_content+0xc4>)
 80175d4:	9300      	str	r3, [sp, #0]
 80175d6:	f640 6397 	movw	r3, #3735	; 0xe97
 80175da:	4a07      	ldr	r2, [pc, #28]	; (80175f8 <ssl_prepare_record_content+0xb8>)
 80175dc:	2101      	movs	r1, #1
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f7f4 f860 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80175e4:	4b08      	ldr	r3, [pc, #32]	; (8017608 <ssl_prepare_record_content+0xc8>)
 80175e6:	e000      	b.n	80175ea <ssl_prepare_record_content+0xaa>
    {
        mbedtls_ssl_dtls_replay_update( ssl );
    }
#endif

    return( 0 );
 80175e8:	2300      	movs	r3, #0
}
 80175ea:	4618      	mov	r0, r3
 80175ec:	3714      	adds	r7, #20
 80175ee:	46bd      	mov	sp, r7
 80175f0:	bd90      	pop	{r4, r7, pc}
 80175f2:	bf00      	nop
 80175f4:	08022c04 	.word	0x08022c04
 80175f8:	080223d4 	.word	0x080223d4
 80175fc:	08022c20 	.word	0x08022c20
 8017600:	08022c30 	.word	0x08022c30
 8017604:	08022bf0 	.word	0x08022bf0
 8017608:	ffff8e00 	.word	0xffff8e00

0801760c <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b086      	sub	sp, #24
 8017610:	af02      	add	r7, sp, #8
 8017612:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 8017614:	4b2e      	ldr	r3, [pc, #184]	; (80176d0 <mbedtls_ssl_read_record+0xc4>)
 8017616:	9300      	str	r3, [sp, #0]
 8017618:	f640 63bf 	movw	r3, #3775	; 0xebf
 801761c:	4a2d      	ldr	r2, [pc, #180]	; (80176d4 <mbedtls_ssl_read_record+0xc8>)
 801761e:	2102      	movs	r1, #2
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f7f4 f83f 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ssl->keep_current_message == 0 )
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801762c:	2b00      	cmp	r3, #0
 801762e:	d133      	bne.n	8017698 <mbedtls_ssl_read_record+0x8c>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f000 f857 	bl	80176e4 <mbedtls_ssl_read_record_layer>
 8017636:	60f8      	str	r0, [r7, #12]
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d00c      	beq.n	8017658 <mbedtls_ssl_read_record+0x4c>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	9301      	str	r3, [sp, #4]
 8017642:	4b25      	ldr	r3, [pc, #148]	; (80176d8 <mbedtls_ssl_read_record+0xcc>)
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	f640 63c7 	movw	r3, #3783	; 0xec7
 801764a:	4a22      	ldr	r2, [pc, #136]	; (80176d4 <mbedtls_ssl_read_record+0xc8>)
 801764c:	2101      	movs	r1, #1
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f7f4 f8ae 	bl	800b7b0 <mbedtls_debug_print_ret>
                return( ret );
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	e036      	b.n	80176c6 <mbedtls_ssl_read_record+0xba>
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f000 f8f3 	bl	8017844 <mbedtls_ssl_handle_message_type>
 801765e:	60f8      	str	r0, [r7, #12]

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f513 4fcd 	cmn.w	r3, #26240	; 0x6680
 8017666:	d0e3      	beq.n	8017630 <mbedtls_ssl_read_record+0x24>

        if( 0 != ret )
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d00c      	beq.n	8017688 <mbedtls_ssl_read_record+0x7c>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	9301      	str	r3, [sp, #4]
 8017672:	4b19      	ldr	r3, [pc, #100]	; (80176d8 <mbedtls_ssl_read_record+0xcc>)
 8017674:	9300      	str	r3, [sp, #0]
 8017676:	f640 63d1 	movw	r3, #3793	; 0xed1
 801767a:	4a16      	ldr	r2, [pc, #88]	; (80176d4 <mbedtls_ssl_read_record+0xc8>)
 801767c:	2101      	movs	r1, #1
 801767e:	6878      	ldr	r0, [r7, #4]
 8017680:	f7f4 f896 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	e01e      	b.n	80176c6 <mbedtls_ssl_read_record+0xba>
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801768c:	2b16      	cmp	r3, #22
 801768e:	d110      	bne.n	80176b2 <mbedtls_ssl_read_record+0xa6>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 8017690:	6878      	ldr	r0, [r7, #4]
 8017692:	f7ff fe3f 	bl	8017314 <mbedtls_ssl_update_handshake_status>
 8017696:	e00c      	b.n	80176b2 <mbedtls_ssl_read_record+0xa6>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
 8017698:	4b10      	ldr	r3, [pc, #64]	; (80176dc <mbedtls_ssl_read_record+0xd0>)
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	f640 63dc 	movw	r3, #3804	; 0xedc
 80176a0:	4a0c      	ldr	r2, [pc, #48]	; (80176d4 <mbedtls_ssl_read_record+0xc8>)
 80176a2:	2102      	movs	r1, #2
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7f3 fffd 	bl	800b6a4 <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	2200      	movs	r2, #0
 80176ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 80176b2:	4b0b      	ldr	r3, [pc, #44]	; (80176e0 <mbedtls_ssl_read_record+0xd4>)
 80176b4:	9300      	str	r3, [sp, #0]
 80176b6:	f44f 636e 	mov.w	r3, #3808	; 0xee0
 80176ba:	4a06      	ldr	r2, [pc, #24]	; (80176d4 <mbedtls_ssl_read_record+0xc8>)
 80176bc:	2102      	movs	r1, #2
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f7f3 fff0 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 80176c4:	2300      	movs	r3, #0
}
 80176c6:	4618      	mov	r0, r3
 80176c8:	3710      	adds	r7, #16
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
 80176ce:	bf00      	nop
 80176d0:	08022c4c 	.word	0x08022c4c
 80176d4:	080223d4 	.word	0x080223d4
 80176d8:	08022c5c 	.word	0x08022c5c
 80176dc:	08022c7c 	.word	0x08022c7c
 80176e0:	08022ca0 	.word	0x08022ca0

080176e4 <mbedtls_ssl_read_record_layer>:

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b088      	sub	sp, #32
 80176e8:	af04      	add	r7, sp, #16
 80176ea:	6078      	str	r0, [r7, #4]
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d03e      	beq.n	8017772 <mbedtls_ssl_read_record_layer+0x8e>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d00a      	beq.n	8017712 <mbedtls_ssl_read_record_layer+0x2e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80176fc:	4b4c      	ldr	r3, [pc, #304]	; (8017830 <mbedtls_ssl_read_record_layer+0x14c>)
 80176fe:	9300      	str	r3, [sp, #0]
 8017700:	f640 730e 	movw	r3, #3854	; 0xf0e
 8017704:	4a4b      	ldr	r2, [pc, #300]	; (8017834 <mbedtls_ssl_read_record_layer+0x150>)
 8017706:	2101      	movs	r1, #1
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f7f3 ffcb 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801770e:	4b4a      	ldr	r3, [pc, #296]	; (8017838 <mbedtls_ssl_read_record_layer+0x154>)
 8017710:	e089      	b.n	8017826 <mbedtls_ssl_read_record_layer+0x142>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801771a:	429a      	cmp	r2, r3
 801771c:	d222      	bcs.n	8017764 <mbedtls_ssl_read_record_layer+0x80>
        {
            ssl->in_msglen -= ssl->in_hslen;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017726:	1ad2      	subs	r2, r2, r3
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	671a      	str	r2, [r3, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017738:	18d1      	adds	r1, r2, r3
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801773e:	461a      	mov	r2, r3
 8017740:	f006 f878 	bl	801d834 <memmove>
                     ssl->in_msglen );

            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 801774c:	9202      	str	r2, [sp, #8]
 801774e:	9301      	str	r3, [sp, #4]
 8017750:	4b3a      	ldr	r3, [pc, #232]	; (801783c <mbedtls_ssl_read_record_layer+0x158>)
 8017752:	9300      	str	r3, [sp, #0]
 8017754:	f640 732d 	movw	r3, #3885	; 0xf2d
 8017758:	4a36      	ldr	r2, [pc, #216]	; (8017834 <mbedtls_ssl_read_record_layer+0x150>)
 801775a:	2104      	movs	r1, #4
 801775c:	6878      	ldr	r0, [r7, #4]
 801775e:	f7f4 f893 	bl	800b888 <mbedtls_debug_print_buf>
 8017762:	e002      	b.n	801776a <mbedtls_ssl_read_record_layer+0x86>
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2200      	movs	r2, #0
 8017768:	671a      	str	r2, [r3, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2200      	movs	r2, #0
 801776e:	679a      	str	r2, [r3, #120]	; 0x78
 8017770:	e008      	b.n	8017784 <mbedtls_ssl_read_record_layer+0xa0>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017776:	2b00      	cmp	r3, #0
 8017778:	d001      	beq.n	801777e <mbedtls_ssl_read_record_layer+0x9a>
    {
        return( 0 );
 801777a:	2300      	movs	r3, #0
 801777c:	e053      	b.n	8017826 <mbedtls_ssl_read_record_layer+0x142>
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2200      	movs	r2, #0
 8017782:	671a      	str	r2, [r3, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017788:	2b00      	cmp	r3, #0
 801778a:	d001      	beq.n	8017790 <mbedtls_ssl_read_record_layer+0xac>
    {
        /* There's something left to be processed in the current record. */
        return( 0 );
 801778c:	2300      	movs	r3, #0
 801778e:	e04a      	b.n	8017826 <mbedtls_ssl_read_record_layer+0x142>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f7fd fcc2 	bl	801511a <mbedtls_ssl_hdr_len>
 8017796:	4603      	mov	r3, r0
 8017798:	4619      	mov	r1, r3
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f7ff fa9c 	bl	8016cd8 <mbedtls_ssl_fetch_input>
 80177a0:	60f8      	str	r0, [r7, #12]
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d00c      	beq.n	80177c2 <mbedtls_ssl_read_record_layer+0xde>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	9301      	str	r3, [sp, #4]
 80177ac:	4b24      	ldr	r3, [pc, #144]	; (8017840 <mbedtls_ssl_read_record_layer+0x15c>)
 80177ae:	9300      	str	r3, [sp, #0]
 80177b0:	f640 7359 	movw	r3, #3929	; 0xf59
 80177b4:	4a1f      	ldr	r2, [pc, #124]	; (8017834 <mbedtls_ssl_read_record_layer+0x150>)
 80177b6:	2101      	movs	r1, #1
 80177b8:	6878      	ldr	r0, [r7, #4]
 80177ba:	f7f3 fff9 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	e031      	b.n	8017826 <mbedtls_ssl_read_record_layer+0x142>
    }

    if( ( ret = ssl_parse_record_header( ssl ) ) != 0 )
 80177c2:	6878      	ldr	r0, [r7, #4]
 80177c4:	f7ff fdc0 	bl	8017348 <ssl_parse_record_header>
 80177c8:	60f8      	str	r0, [r7, #12]
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d001      	beq.n	80177d4 <mbedtls_ssl_read_record_layer+0xf0>

            /* Get next record */
            goto read_record_header;
        }
#endif
        return( ret );
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	e028      	b.n	8017826 <mbedtls_ssl_read_record_layer+0x142>

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
                                 mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen ) ) != 0 )
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	f7fd fca0 	bl	801511a <mbedtls_ssl_hdr_len>
 80177da:	4602      	mov	r2, r0
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 80177e0:	4413      	add	r3, r2
 80177e2:	4619      	mov	r1, r3
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	f7ff fa77 	bl	8016cd8 <mbedtls_ssl_fetch_input>
 80177ea:	60f8      	str	r0, [r7, #12]
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d00c      	beq.n	801780c <mbedtls_ssl_read_record_layer+0x128>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	9301      	str	r3, [sp, #4]
 80177f6:	4b12      	ldr	r3, [pc, #72]	; (8017840 <mbedtls_ssl_read_record_layer+0x15c>)
 80177f8:	9300      	str	r3, [sp, #0]
 80177fa:	f640 7383 	movw	r3, #3971	; 0xf83
 80177fe:	4a0d      	ldr	r2, [pc, #52]	; (8017834 <mbedtls_ssl_read_record_layer+0x150>)
 8017800:	2101      	movs	r1, #1
 8017802:	6878      	ldr	r0, [r7, #4]
 8017804:	f7f3 ffd4 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	e00c      	b.n	8017826 <mbedtls_ssl_read_record_layer+0x142>
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	2200      	movs	r2, #0
 8017810:	675a      	str	r2, [r3, #116]	; 0x74

    if( ( ret = ssl_prepare_record_content( ssl ) ) != 0 )
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f7ff fe94 	bl	8017540 <ssl_prepare_record_content>
 8017818:	60f8      	str	r0, [r7, #12]
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d001      	beq.n	8017824 <mbedtls_ssl_read_record_layer+0x140>
                mbedtls_ssl_send_alert_message( ssl,
                        MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                        MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
            }
#endif
            return( ret );
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	e000      	b.n	8017826 <mbedtls_ssl_read_record_layer+0x142>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 8017824:	2300      	movs	r3, #0
}
 8017826:	4618      	mov	r0, r3
 8017828:	3710      	adds	r7, #16
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}
 801782e:	bf00      	nop
 8017830:	08022478 	.word	0x08022478
 8017834:	080223d4 	.word	0x080223d4
 8017838:	ffff9400 	.word	0xffff9400
 801783c:	08022cb0 	.word	0x08022cb0
 8017840:	08022ccc 	.word	0x08022ccc

08017844 <mbedtls_ssl_handle_message_type>:

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b088      	sub	sp, #32
 8017848:	af04      	add	r7, sp, #16
 801784a:	6078      	str	r0, [r7, #4]
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017850:	2b16      	cmp	r3, #22
 8017852:	d108      	bne.n	8017866 <mbedtls_ssl_handle_message_type+0x22>
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f7ff fcf5 	bl	8017244 <mbedtls_ssl_prepare_handshake_record>
 801785a:	60f8      	str	r0, [r7, #12]
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d001      	beq.n	8017866 <mbedtls_ssl_handle_message_type+0x22>
        {
            return( ret );
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	e05a      	b.n	801791c <mbedtls_ssl_handle_message_type+0xd8>
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801786a:	2b15      	cmp	r3, #21
 801786c:	d155      	bne.n	801791a <mbedtls_ssl_handle_message_type+0xd6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	461a      	mov	r2, r3
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801787a:	3301      	adds	r3, #1
 801787c:	781b      	ldrb	r3, [r3, #0]
 801787e:	9302      	str	r3, [sp, #8]
 8017880:	9201      	str	r2, [sp, #4]
 8017882:	4b28      	ldr	r3, [pc, #160]	; (8017924 <mbedtls_ssl_handle_message_type+0xe0>)
 8017884:	9300      	str	r3, [sp, #0]
 8017886:	f241 030a 	movw	r3, #4106	; 0x100a
 801788a:	4a27      	ldr	r2, [pc, #156]	; (8017928 <mbedtls_ssl_handle_message_type+0xe4>)
 801788c:	2102      	movs	r1, #2
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f7f3 ff08 	bl	800b6a4 <mbedtls_debug_print_msg>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017898:	781b      	ldrb	r3, [r3, #0]
 801789a:	2b02      	cmp	r3, #2
 801789c:	d10f      	bne.n	80178be <mbedtls_ssl_handle_message_type+0x7a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80178a2:	3301      	adds	r3, #1
 80178a4:	781b      	ldrb	r3, [r3, #0]
 80178a6:	9301      	str	r3, [sp, #4]
 80178a8:	4b20      	ldr	r3, [pc, #128]	; (801792c <mbedtls_ssl_handle_message_type+0xe8>)
 80178aa:	9300      	str	r3, [sp, #0]
 80178ac:	f241 0312 	movw	r3, #4114	; 0x1012
 80178b0:	4a1d      	ldr	r2, [pc, #116]	; (8017928 <mbedtls_ssl_handle_message_type+0xe4>)
 80178b2:	2101      	movs	r1, #1
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f7f3 fef5 	bl	800b6a4 <mbedtls_debug_print_msg>
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 80178ba:	4b1d      	ldr	r3, [pc, #116]	; (8017930 <mbedtls_ssl_handle_message_type+0xec>)
 80178bc:	e02e      	b.n	801791c <mbedtls_ssl_handle_message_type+0xd8>
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80178c2:	781b      	ldrb	r3, [r3, #0]
 80178c4:	2b01      	cmp	r3, #1
 80178c6:	d110      	bne.n	80178ea <mbedtls_ssl_handle_message_type+0xa6>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80178cc:	3301      	adds	r3, #1
 80178ce:	781b      	ldrb	r3, [r3, #0]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d10a      	bne.n	80178ea <mbedtls_ssl_handle_message_type+0xa6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 80178d4:	4b17      	ldr	r3, [pc, #92]	; (8017934 <mbedtls_ssl_handle_message_type+0xf0>)
 80178d6:	9300      	str	r3, [sp, #0]
 80178d8:	f241 031a 	movw	r3, #4122	; 0x101a
 80178dc:	4a12      	ldr	r2, [pc, #72]	; (8017928 <mbedtls_ssl_handle_message_type+0xe4>)
 80178de:	2102      	movs	r1, #2
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	f7f3 fedf 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 80178e6:	4b14      	ldr	r3, [pc, #80]	; (8017938 <mbedtls_ssl_handle_message_type+0xf4>)
 80178e8:	e018      	b.n	801791c <mbedtls_ssl_handle_message_type+0xd8>
        }

#if defined(MBEDTLS_SSL_RENEGOTIATION_ENABLED)
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80178ee:	781b      	ldrb	r3, [r3, #0]
 80178f0:	2b01      	cmp	r3, #1
 80178f2:	d110      	bne.n	8017916 <mbedtls_ssl_handle_message_type+0xd2>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION )
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80178f8:	3301      	adds	r3, #1
 80178fa:	781b      	ldrb	r3, [r3, #0]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80178fc:	2b64      	cmp	r3, #100	; 0x64
 80178fe:	d10a      	bne.n	8017916 <mbedtls_ssl_handle_message_type+0xd2>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
 8017900:	4b0e      	ldr	r3, [pc, #56]	; (801793c <mbedtls_ssl_handle_message_type+0xf8>)
 8017902:	9300      	str	r3, [sp, #0]
 8017904:	f241 0322 	movw	r3, #4130	; 0x1022
 8017908:	4a07      	ldr	r2, [pc, #28]	; (8017928 <mbedtls_ssl_handle_message_type+0xe4>)
 801790a:	2102      	movs	r1, #2
 801790c:	6878      	ldr	r0, [r7, #4]
 801790e:	f7f3 fec9 	bl	800b6a4 <mbedtls_debug_print_msg>
            /* Will be handled when trying to parse ServerHello */
            return( 0 );
 8017912:	2300      	movs	r3, #0
 8017914:	e002      	b.n	801791c <mbedtls_ssl_handle_message_type+0xd8>
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8017916:	4b0a      	ldr	r3, [pc, #40]	; (8017940 <mbedtls_ssl_handle_message_type+0xfc>)
 8017918:	e000      	b.n	801791c <mbedtls_ssl_handle_message_type+0xd8>
    }

    return( 0 );
 801791a:	2300      	movs	r3, #0
}
 801791c:	4618      	mov	r0, r3
 801791e:	3710      	adds	r7, #16
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}
 8017924:	08022ce4 	.word	0x08022ce4
 8017928:	080223d4 	.word	0x080223d4
 801792c:	08022d08 	.word	0x08022d08
 8017930:	ffff8880 	.word	0xffff8880
 8017934:	08022d2c 	.word	0x08022d2c
 8017938:	ffff8780 	.word	0xffff8780
 801793c:	08022d48 	.word	0x08022d48
 8017940:	ffff9980 	.word	0xffff9980

08017944 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 8017944:	b580      	push	{r7, lr}
 8017946:	b088      	sub	sp, #32
 8017948:	af04      	add	r7, sp, #16
 801794a:	6078      	str	r0, [r7, #4]
 801794c:	460b      	mov	r3, r1
 801794e:	70fb      	strb	r3, [r7, #3]
 8017950:	4613      	mov	r3, r2
 8017952:	70bb      	strb	r3, [r7, #2]
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d003      	beq.n	8017962 <mbedtls_ssl_send_alert_message+0x1e>
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d101      	bne.n	8017966 <mbedtls_ssl_send_alert_message+0x22>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8017962:	4b26      	ldr	r3, [pc, #152]	; (80179fc <mbedtls_ssl_send_alert_message+0xb8>)
 8017964:	e046      	b.n	80179f4 <mbedtls_ssl_send_alert_message+0xb0>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 8017966:	4b26      	ldr	r3, [pc, #152]	; (8017a00 <mbedtls_ssl_send_alert_message+0xbc>)
 8017968:	9300      	str	r3, [sp, #0]
 801796a:	f241 0352 	movw	r3, #4178	; 0x1052
 801796e:	4a25      	ldr	r2, [pc, #148]	; (8017a04 <mbedtls_ssl_send_alert_message+0xc0>)
 8017970:	2102      	movs	r1, #2
 8017972:	6878      	ldr	r0, [r7, #4]
 8017974:	f7f3 fe96 	bl	800b6a4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 8017978:	78fb      	ldrb	r3, [r7, #3]
 801797a:	78ba      	ldrb	r2, [r7, #2]
 801797c:	9202      	str	r2, [sp, #8]
 801797e:	9301      	str	r3, [sp, #4]
 8017980:	4b21      	ldr	r3, [pc, #132]	; (8017a08 <mbedtls_ssl_send_alert_message+0xc4>)
 8017982:	9300      	str	r3, [sp, #0]
 8017984:	f241 0353 	movw	r3, #4179	; 0x1053
 8017988:	4a1e      	ldr	r2, [pc, #120]	; (8017a04 <mbedtls_ssl_send_alert_message+0xc0>)
 801798a:	2103      	movs	r1, #3
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f7f3 fe89 	bl	800b6a4 <mbedtls_debug_print_msg>

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	2215      	movs	r2, #21
 8017996:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msglen = 2;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2202      	movs	r2, #2
 801799e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msg[0] = level;
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80179a8:	78fa      	ldrb	r2, [r7, #3]
 80179aa:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[1] = message;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80179b2:	3301      	adds	r3, #1
 80179b4:	78ba      	ldrb	r2, [r7, #2]
 80179b6:	701a      	strb	r2, [r3, #0]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80179b8:	6878      	ldr	r0, [r7, #4]
 80179ba:	f7ff fb19 	bl	8016ff0 <mbedtls_ssl_write_record>
 80179be:	60f8      	str	r0, [r7, #12]
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d00c      	beq.n	80179e0 <mbedtls_ssl_send_alert_message+0x9c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	9301      	str	r3, [sp, #4]
 80179ca:	4b10      	ldr	r3, [pc, #64]	; (8017a0c <mbedtls_ssl_send_alert_message+0xc8>)
 80179cc:	9300      	str	r3, [sp, #0]
 80179ce:	f241 035c 	movw	r3, #4188	; 0x105c
 80179d2:	4a0c      	ldr	r2, [pc, #48]	; (8017a04 <mbedtls_ssl_send_alert_message+0xc0>)
 80179d4:	2101      	movs	r1, #1
 80179d6:	6878      	ldr	r0, [r7, #4]
 80179d8:	f7f3 feea 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	e009      	b.n	80179f4 <mbedtls_ssl_send_alert_message+0xb0>
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 80179e0:	4b0b      	ldr	r3, [pc, #44]	; (8017a10 <mbedtls_ssl_send_alert_message+0xcc>)
 80179e2:	9300      	str	r3, [sp, #0]
 80179e4:	f241 035f 	movw	r3, #4191	; 0x105f
 80179e8:	4a06      	ldr	r2, [pc, #24]	; (8017a04 <mbedtls_ssl_send_alert_message+0xc0>)
 80179ea:	2102      	movs	r1, #2
 80179ec:	6878      	ldr	r0, [r7, #4]
 80179ee:	f7f3 fe59 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 80179f2:	2300      	movs	r3, #0
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	3710      	adds	r7, #16
 80179f8:	46bd      	mov	sp, r7
 80179fa:	bd80      	pop	{r7, pc}
 80179fc:	ffff8f00 	.word	0xffff8f00
 8017a00:	08022d5c 	.word	0x08022d5c
 8017a04:	080223d4 	.word	0x080223d4
 8017a08:	08022d74 	.word	0x08022d74
 8017a0c:	08022d94 	.word	0x08022d94
 8017a10:	08022db0 	.word	0x08022db0

08017a14 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b08c      	sub	sp, #48	; 0x30
 8017a18:	af04      	add	r7, sp, #16
 8017a1a:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 8017a1c:	4b81      	ldr	r3, [pc, #516]	; (8017c24 <mbedtls_ssl_write_certificate+0x210>)
 8017a1e:	617b      	str	r3, [r7, #20]
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	613b      	str	r3, [r7, #16]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 8017a28:	4b7f      	ldr	r3, [pc, #508]	; (8017c28 <mbedtls_ssl_write_certificate+0x214>)
 8017a2a:	9300      	str	r3, [sp, #0]
 8017a2c:	f241 03a1 	movw	r3, #4257	; 0x10a1
 8017a30:	4a7e      	ldr	r2, [pc, #504]	; (8017c2c <mbedtls_ssl_write_certificate+0x218>)
 8017a32:	2102      	movs	r1, #2
 8017a34:	6878      	ldr	r0, [r7, #4]
 8017a36:	f7f3 fe35 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8017a3a:	693b      	ldr	r3, [r7, #16]
 8017a3c:	7a9b      	ldrb	r3, [r3, #10]
 8017a3e:	2b05      	cmp	r3, #5
 8017a40:	d00b      	beq.n	8017a5a <mbedtls_ssl_write_certificate+0x46>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8017a42:	693b      	ldr	r3, [r7, #16]
 8017a44:	7a9b      	ldrb	r3, [r3, #10]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8017a46:	2b06      	cmp	r3, #6
 8017a48:	d007      	beq.n	8017a5a <mbedtls_ssl_write_certificate+0x46>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8017a4a:	693b      	ldr	r3, [r7, #16]
 8017a4c:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8017a4e:	2b08      	cmp	r3, #8
 8017a50:	d003      	beq.n	8017a5a <mbedtls_ssl_write_certificate+0x46>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8017a56:	2b0b      	cmp	r3, #11
 8017a58:	d10f      	bne.n	8017a7a <mbedtls_ssl_write_certificate+0x66>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 8017a5a:	4b75      	ldr	r3, [pc, #468]	; (8017c30 <mbedtls_ssl_write_certificate+0x21c>)
 8017a5c:	9300      	str	r3, [sp, #0]
 8017a5e:	f241 03a8 	movw	r3, #4264	; 0x10a8
 8017a62:	4a72      	ldr	r2, [pc, #456]	; (8017c2c <mbedtls_ssl_write_certificate+0x218>)
 8017a64:	2102      	movs	r1, #2
 8017a66:	6878      	ldr	r0, [r7, #4]
 8017a68:	f7f3 fe1c 	bl	800b6a4 <mbedtls_debug_print_msg>
        ssl->state++;
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	685b      	ldr	r3, [r3, #4]
 8017a70:	1c5a      	adds	r2, r3, #1
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	605a      	str	r2, [r3, #4]
        return( 0 );
 8017a76:	2300      	movs	r3, #0
 8017a78:	e0cf      	b.n	8017c1a <mbedtls_ssl_write_certificate+0x206>
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017a82:	f003 0301 	and.w	r3, r3, #1
 8017a86:	b2db      	uxtb	r3, r3
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d114      	bne.n	8017ab6 <mbedtls_ssl_write_certificate+0xa2>
    {
        if( ssl->client_auth == 0 )
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d10f      	bne.n	8017ab6 <mbedtls_ssl_write_certificate+0xa2>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 8017a96:	4b66      	ldr	r3, [pc, #408]	; (8017c30 <mbedtls_ssl_write_certificate+0x21c>)
 8017a98:	9300      	str	r3, [sp, #0]
 8017a9a:	f241 03b2 	movw	r3, #4274	; 0x10b2
 8017a9e:	4a63      	ldr	r2, [pc, #396]	; (8017c2c <mbedtls_ssl_write_certificate+0x218>)
 8017aa0:	2102      	movs	r1, #2
 8017aa2:	6878      	ldr	r0, [r7, #4]
 8017aa4:	f7f3 fdfe 	bl	800b6a4 <mbedtls_debug_print_msg>
            ssl->state++;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	685b      	ldr	r3, [r3, #4]
 8017aac:	1c5a      	adds	r2, r3, #1
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	605a      	str	r2, [r3, #4]
            return( 0 );
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	e0b1      	b.n	8017c1a <mbedtls_ssl_write_certificate+0x206>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED );
        }
    }
#endif

    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 8017ab6:	6878      	ldr	r0, [r7, #4]
 8017ab8:	f7fd fb0c 	bl	80150d4 <mbedtls_ssl_own_cert>
 8017abc:	4603      	mov	r3, r0
 8017abe:	9301      	str	r3, [sp, #4]
 8017ac0:	4b5c      	ldr	r3, [pc, #368]	; (8017c34 <mbedtls_ssl_write_certificate+0x220>)
 8017ac2:	9300      	str	r3, [sp, #0]
 8017ac4:	f241 03d5 	movw	r3, #4309	; 0x10d5
 8017ac8:	4a58      	ldr	r2, [pc, #352]	; (8017c2c <mbedtls_ssl_write_certificate+0x218>)
 8017aca:	2103      	movs	r1, #3
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f7f4 fae1 	bl	800c094 <mbedtls_debug_print_crt>
     *     7  .  9    length of cert. 1
     *    10  . n-1   peer certificate
     *     n  . n+2   length of cert. 2
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
 8017ad2:	2307      	movs	r3, #7
 8017ad4:	61fb      	str	r3, [r7, #28]
    crt = mbedtls_ssl_own_cert( ssl );
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7fd fafc 	bl	80150d4 <mbedtls_ssl_own_cert>
 8017adc:	61b8      	str	r0, [r7, #24]

    while( crt != NULL )
 8017ade:	e04e      	b.n	8017b7e <mbedtls_ssl_write_certificate+0x16a>
    {
        n = crt->raw.len;
 8017ae0:	69bb      	ldr	r3, [r7, #24]
 8017ae2:	685b      	ldr	r3, [r3, #4]
 8017ae4:	60fb      	str	r3, [r7, #12]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 8017ae6:	69fb      	ldr	r3, [r7, #28]
 8017ae8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8017aec:	330d      	adds	r3, #13
 8017aee:	68fa      	ldr	r2, [r7, #12]
 8017af0:	429a      	cmp	r2, r3
 8017af2:	d912      	bls.n	8017b1a <mbedtls_ssl_write_certificate+0x106>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 8017af4:	69fa      	ldr	r2, [r7, #28]
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	4413      	add	r3, r2
 8017afa:	3303      	adds	r3, #3
 8017afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017b00:	9202      	str	r2, [sp, #8]
 8017b02:	9301      	str	r3, [sp, #4]
 8017b04:	4b4c      	ldr	r3, [pc, #304]	; (8017c38 <mbedtls_ssl_write_certificate+0x224>)
 8017b06:	9300      	str	r3, [sp, #0]
 8017b08:	f241 03e8 	movw	r3, #4328	; 0x10e8
 8017b0c:	4a47      	ldr	r2, [pc, #284]	; (8017c2c <mbedtls_ssl_write_certificate+0x218>)
 8017b0e:	2101      	movs	r1, #1
 8017b10:	6878      	ldr	r0, [r7, #4]
 8017b12:	f7f3 fdc7 	bl	800b6a4 <mbedtls_debug_print_msg>
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 8017b16:	4b49      	ldr	r3, [pc, #292]	; (8017c3c <mbedtls_ssl_write_certificate+0x228>)
 8017b18:	e07f      	b.n	8017c1a <mbedtls_ssl_write_certificate+0x206>
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	0c19      	lsrs	r1, r3, #16
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8017b24:	69fb      	ldr	r3, [r7, #28]
 8017b26:	4413      	add	r3, r2
 8017b28:	b2ca      	uxtb	r2, r1
 8017b2a:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	0a19      	lsrs	r1, r3, #8
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8017b36:	69fb      	ldr	r3, [r7, #28]
 8017b38:	3301      	adds	r3, #1
 8017b3a:	4413      	add	r3, r2
 8017b3c:	b2ca      	uxtb	r2, r1
 8017b3e:	701a      	strb	r2, [r3, #0]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8017b46:	69fb      	ldr	r3, [r7, #28]
 8017b48:	3302      	adds	r3, #2
 8017b4a:	4413      	add	r3, r2
 8017b4c:	68fa      	ldr	r2, [r7, #12]
 8017b4e:	b2d2      	uxtb	r2, r2
 8017b50:	701a      	strb	r2, [r3, #0]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 8017b52:	69fb      	ldr	r3, [r7, #28]
 8017b54:	3303      	adds	r3, #3
 8017b56:	61fb      	str	r3, [r7, #28]
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8017b5e:	69fb      	ldr	r3, [r7, #28]
 8017b60:	18d0      	adds	r0, r2, r3
 8017b62:	69bb      	ldr	r3, [r7, #24]
 8017b64:	689b      	ldr	r3, [r3, #8]
 8017b66:	68fa      	ldr	r2, [r7, #12]
 8017b68:	4619      	mov	r1, r3
 8017b6a:	f005 fe55 	bl	801d818 <memcpy>
        i += n; crt = crt->next;
 8017b6e:	69fa      	ldr	r2, [r7, #28]
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	4413      	add	r3, r2
 8017b74:	61fb      	str	r3, [r7, #28]
 8017b76:	69bb      	ldr	r3, [r7, #24]
 8017b78:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8017b7c:	61bb      	str	r3, [r7, #24]
    while( crt != NULL )
 8017b7e:	69bb      	ldr	r3, [r7, #24]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d1ad      	bne.n	8017ae0 <mbedtls_ssl_write_certificate+0xcc>
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 8017b84:	69fb      	ldr	r3, [r7, #28]
 8017b86:	3b07      	subs	r3, #7
 8017b88:	0c1a      	lsrs	r2, r3, #16
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017b90:	3304      	adds	r3, #4
 8017b92:	b2d2      	uxtb	r2, r2
 8017b94:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 8017b96:	69fb      	ldr	r3, [r7, #28]
 8017b98:	3b07      	subs	r3, #7
 8017b9a:	0a1a      	lsrs	r2, r3, #8
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017ba2:	3305      	adds	r3, #5
 8017ba4:	b2d2      	uxtb	r2, r2
 8017ba6:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 8017ba8:	69fb      	ldr	r3, [r7, #28]
 8017baa:	b2da      	uxtb	r2, r3
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017bb2:	3306      	adds	r3, #6
 8017bb4:	3a07      	subs	r2, #7
 8017bb6:	b2d2      	uxtb	r2, r2
 8017bb8:	701a      	strb	r2, [r3, #0]

    ssl->out_msglen  = i;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	69fa      	ldr	r2, [r7, #28]
 8017bbe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2216      	movs	r2, #22
 8017bc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017bd0:	220b      	movs	r2, #11
 8017bd2:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	685b      	ldr	r3, [r3, #4]
 8017bd8:	1c5a      	adds	r2, r3, #1
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8017bde:	6878      	ldr	r0, [r7, #4]
 8017be0:	f7ff fa06 	bl	8016ff0 <mbedtls_ssl_write_record>
 8017be4:	6178      	str	r0, [r7, #20]
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d00c      	beq.n	8017c06 <mbedtls_ssl_write_certificate+0x1f2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	9301      	str	r3, [sp, #4]
 8017bf0:	4b13      	ldr	r3, [pc, #76]	; (8017c40 <mbedtls_ssl_write_certificate+0x22c>)
 8017bf2:	9300      	str	r3, [sp, #0]
 8017bf4:	f241 1305 	movw	r3, #4357	; 0x1105
 8017bf8:	4a0c      	ldr	r2, [pc, #48]	; (8017c2c <mbedtls_ssl_write_certificate+0x218>)
 8017bfa:	2101      	movs	r1, #1
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f7f3 fdd7 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8017c02:	697b      	ldr	r3, [r7, #20]
 8017c04:	e009      	b.n	8017c1a <mbedtls_ssl_write_certificate+0x206>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 8017c06:	4b0f      	ldr	r3, [pc, #60]	; (8017c44 <mbedtls_ssl_write_certificate+0x230>)
 8017c08:	9300      	str	r3, [sp, #0]
 8017c0a:	f241 1309 	movw	r3, #4361	; 0x1109
 8017c0e:	4a07      	ldr	r2, [pc, #28]	; (8017c2c <mbedtls_ssl_write_certificate+0x218>)
 8017c10:	2102      	movs	r1, #2
 8017c12:	6878      	ldr	r0, [r7, #4]
 8017c14:	f7f3 fd46 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( ret );
 8017c18:	697b      	ldr	r3, [r7, #20]
}
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	3720      	adds	r7, #32
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	bd80      	pop	{r7, pc}
 8017c22:	bf00      	nop
 8017c24:	ffff8f80 	.word	0xffff8f80
 8017c28:	08022dc8 	.word	0x08022dc8
 8017c2c:	080223d4 	.word	0x080223d4
 8017c30:	08022de0 	.word	0x08022de0
 8017c34:	08022dfc 	.word	0x08022dfc
 8017c38:	08022e0c 	.word	0x08022e0c
 8017c3c:	ffff8b00 	.word	0xffff8b00
 8017c40:	08022d94 	.word	0x08022d94
 8017c44:	08022e2c 	.word	0x08022e2c

08017c48 <mbedtls_ssl_parse_certificate>:

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 8017c48:	b5b0      	push	{r4, r5, r7, lr}
 8017c4a:	b08e      	sub	sp, #56	; 0x38
 8017c4c:	af04      	add	r7, sp, #16
 8017c4e:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 8017c50:	4b99      	ldr	r3, [pc, #612]	; (8017eb8 <mbedtls_ssl_parse_certificate+0x270>)
 8017c52:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	61bb      	str	r3, [r7, #24]
    int authmode = ssl->conf->authmode;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017c64:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017c68:	b2db      	uxtb	r3, r3
 8017c6a:	617b      	str	r3, [r7, #20]
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 8017c6c:	4b93      	ldr	r3, [pc, #588]	; (8017ebc <mbedtls_ssl_parse_certificate+0x274>)
 8017c6e:	9300      	str	r3, [sp, #0]
 8017c70:	f241 1316 	movw	r3, #4374	; 0x1116
 8017c74:	4a92      	ldr	r2, [pc, #584]	; (8017ec0 <mbedtls_ssl_parse_certificate+0x278>)
 8017c76:	2102      	movs	r1, #2
 8017c78:	6878      	ldr	r0, [r7, #4]
 8017c7a:	f7f3 fd13 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8017c7e:	69bb      	ldr	r3, [r7, #24]
 8017c80:	7a9b      	ldrb	r3, [r3, #10]
 8017c82:	2b05      	cmp	r3, #5
 8017c84:	d00b      	beq.n	8017c9e <mbedtls_ssl_parse_certificate+0x56>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8017c86:	69bb      	ldr	r3, [r7, #24]
 8017c88:	7a9b      	ldrb	r3, [r3, #10]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8017c8a:	2b06      	cmp	r3, #6
 8017c8c:	d007      	beq.n	8017c9e <mbedtls_ssl_parse_certificate+0x56>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8017c8e:	69bb      	ldr	r3, [r7, #24]
 8017c90:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8017c92:	2b08      	cmp	r3, #8
 8017c94:	d003      	beq.n	8017c9e <mbedtls_ssl_parse_certificate+0x56>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
 8017c96:	69bb      	ldr	r3, [r7, #24]
 8017c98:	7a9b      	ldrb	r3, [r3, #10]
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8017c9a:	2b0b      	cmp	r3, #11
 8017c9c:	d10f      	bne.n	8017cbe <mbedtls_ssl_parse_certificate+0x76>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 8017c9e:	4b89      	ldr	r3, [pc, #548]	; (8017ec4 <mbedtls_ssl_parse_certificate+0x27c>)
 8017ca0:	9300      	str	r3, [sp, #0]
 8017ca2:	f241 131d 	movw	r3, #4381	; 0x111d
 8017ca6:	4a86      	ldr	r2, [pc, #536]	; (8017ec0 <mbedtls_ssl_parse_certificate+0x278>)
 8017ca8:	2102      	movs	r1, #2
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f7f3 fcfa 	bl	800b6a4 <mbedtls_debug_print_msg>
        ssl->state++;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	685b      	ldr	r3, [r3, #4]
 8017cb4:	1c5a      	adds	r2, r3, #1
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	605a      	str	r2, [r3, #4]
        return( 0 );
 8017cba:	2300      	movs	r3, #0
 8017cbc:	e28b      	b.n	80181d6 <mbedtls_ssl_parse_certificate+0x58e>
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8017cbe:	6878      	ldr	r0, [r7, #4]
 8017cc0:	f7ff fca4 	bl	801760c <mbedtls_ssl_read_record>
 8017cc4:	6278      	str	r0, [r7, #36]	; 0x24
 8017cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d00c      	beq.n	8017ce6 <mbedtls_ssl_parse_certificate+0x9e>
    {
        /* mbedtls_ssl_read_record may have sent an alert already. We
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8017ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cce:	9301      	str	r3, [sp, #4]
 8017cd0:	4b7d      	ldr	r3, [pc, #500]	; (8017ec8 <mbedtls_ssl_parse_certificate+0x280>)
 8017cd2:	9300      	str	r3, [sp, #0]
 8017cd4:	f241 133e 	movw	r3, #4414	; 0x113e
 8017cd8:	4a79      	ldr	r2, [pc, #484]	; (8017ec0 <mbedtls_ssl_parse_certificate+0x278>)
 8017cda:	2101      	movs	r1, #1
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	f7f3 fd67 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 8017ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce4:	e277      	b.n	80181d6 <mbedtls_ssl_parse_certificate+0x58e>
    }

    ssl->state++;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	685b      	ldr	r3, [r3, #4]
 8017cea:	1c5a      	adds	r2, r3, #1
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	605a      	str	r2, [r3, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cf4:	2b16      	cmp	r3, #22
 8017cf6:	d00f      	beq.n	8017d18 <mbedtls_ssl_parse_certificate+0xd0>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8017cf8:	4b74      	ldr	r3, [pc, #464]	; (8017ecc <mbedtls_ssl_parse_certificate+0x284>)
 8017cfa:	9300      	str	r3, [sp, #0]
 8017cfc:	f241 137b 	movw	r3, #4475	; 0x117b
 8017d00:	4a6f      	ldr	r2, [pc, #444]	; (8017ec0 <mbedtls_ssl_parse_certificate+0x278>)
 8017d02:	2101      	movs	r1, #1
 8017d04:	6878      	ldr	r0, [r7, #4]
 8017d06:	f7f3 fccd 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017d0a:	220a      	movs	r2, #10
 8017d0c:	2102      	movs	r1, #2
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f7ff fe18 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8017d14:	4b6e      	ldr	r3, [pc, #440]	; (8017ed0 <mbedtls_ssl_parse_certificate+0x288>)
 8017d16:	e25e      	b.n	80181d6 <mbedtls_ssl_parse_certificate+0x58e>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017d1c:	781b      	ldrb	r3, [r3, #0]
 8017d1e:	2b0b      	cmp	r3, #11
 8017d20:	d108      	bne.n	8017d34 <mbedtls_ssl_parse_certificate+0xec>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8017d26:	6878      	ldr	r0, [r7, #4]
 8017d28:	f7fd fa02 	bl	8015130 <mbedtls_ssl_hs_hdr_len>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	3306      	adds	r3, #6
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 8017d30:	429c      	cmp	r4, r3
 8017d32:	d20f      	bcs.n	8017d54 <mbedtls_ssl_parse_certificate+0x10c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8017d34:	4b65      	ldr	r3, [pc, #404]	; (8017ecc <mbedtls_ssl_parse_certificate+0x284>)
 8017d36:	9300      	str	r3, [sp, #0]
 8017d38:	f241 1384 	movw	r3, #4484	; 0x1184
 8017d3c:	4a60      	ldr	r2, [pc, #384]	; (8017ec0 <mbedtls_ssl_parse_certificate+0x278>)
 8017d3e:	2101      	movs	r1, #1
 8017d40:	6878      	ldr	r0, [r7, #4]
 8017d42:	f7f3 fcaf 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017d46:	2232      	movs	r2, #50	; 0x32
 8017d48:	2102      	movs	r1, #2
 8017d4a:	6878      	ldr	r0, [r7, #4]
 8017d4c:	f7ff fdfa 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8017d50:	4b60      	ldr	r3, [pc, #384]	; (8017ed4 <mbedtls_ssl_parse_certificate+0x28c>)
 8017d52:	e240      	b.n	80181d6 <mbedtls_ssl_parse_certificate+0x58e>
    }

    i = mbedtls_ssl_hs_hdr_len( ssl );
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f7fd f9eb 	bl	8015130 <mbedtls_ssl_hs_hdr_len>
 8017d5a:	6238      	str	r0, [r7, #32]

    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017d60:	6a3b      	ldr	r3, [r7, #32]
 8017d62:	3301      	adds	r3, #1
 8017d64:	4413      	add	r3, r2
 8017d66:	781b      	ldrb	r3, [r3, #0]
 8017d68:	021b      	lsls	r3, r3, #8
 8017d6a:	687a      	ldr	r2, [r7, #4]
 8017d6c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8017d6e:	6a3a      	ldr	r2, [r7, #32]
 8017d70:	3202      	adds	r2, #2
 8017d72:	440a      	add	r2, r1
 8017d74:	7812      	ldrb	r2, [r2, #0]
 8017d76:	4313      	orrs	r3, r2
 8017d78:	613b      	str	r3, [r7, #16]

    if( ssl->in_msg[i] != 0 ||
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017d7e:	6a3b      	ldr	r3, [r7, #32]
 8017d80:	4413      	add	r3, r2
 8017d82:	781b      	ldrb	r3, [r3, #0]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d10a      	bne.n	8017d9e <mbedtls_ssl_parse_certificate+0x156>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8017d8c:	6878      	ldr	r0, [r7, #4]
 8017d8e:	f7fd f9cf 	bl	8015130 <mbedtls_ssl_hs_hdr_len>
 8017d92:	4602      	mov	r2, r0
 8017d94:	693b      	ldr	r3, [r7, #16]
 8017d96:	4413      	add	r3, r2
 8017d98:	3303      	adds	r3, #3
    if( ssl->in_msg[i] != 0 ||
 8017d9a:	429c      	cmp	r4, r3
 8017d9c:	d00f      	beq.n	8017dbe <mbedtls_ssl_parse_certificate+0x176>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8017d9e:	4b4b      	ldr	r3, [pc, #300]	; (8017ecc <mbedtls_ssl_parse_certificate+0x284>)
 8017da0:	9300      	str	r3, [sp, #0]
 8017da2:	f241 1394 	movw	r3, #4500	; 0x1194
 8017da6:	4a46      	ldr	r2, [pc, #280]	; (8017ec0 <mbedtls_ssl_parse_certificate+0x278>)
 8017da8:	2101      	movs	r1, #1
 8017daa:	6878      	ldr	r0, [r7, #4]
 8017dac:	f7f3 fc7a 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017db0:	2232      	movs	r2, #50	; 0x32
 8017db2:	2102      	movs	r1, #2
 8017db4:	6878      	ldr	r0, [r7, #4]
 8017db6:	f7ff fdc5 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8017dba:	4b46      	ldr	r3, [pc, #280]	; (8017ed4 <mbedtls_ssl_parse_certificate+0x28c>)
 8017dbc:	e20b      	b.n	80181d6 <mbedtls_ssl_parse_certificate+0x58e>
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d00b      	beq.n	8017de0 <mbedtls_ssl_parse_certificate+0x198>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f004 fb90 	bl	801c4f4 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017dda:	4618      	mov	r0, r3
 8017ddc:	f005 fd04 	bl	801d7e8 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8017de4:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017de8:	2001      	movs	r0, #1
 8017dea:	f005 fcc3 	bl	801d774 <calloc>
 8017dee:	4603      	mov	r3, r0
 8017df0:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017df2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d112      	bne.n	8017e1e <mbedtls_ssl_parse_certificate+0x1d6>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 8017df8:	f44f 739a 	mov.w	r3, #308	; 0x134
 8017dfc:	9301      	str	r3, [sp, #4]
 8017dfe:	4b36      	ldr	r3, [pc, #216]	; (8017ed8 <mbedtls_ssl_parse_certificate+0x290>)
 8017e00:	9300      	str	r3, [sp, #0]
 8017e02:	f241 13a4 	movw	r3, #4516	; 0x11a4
 8017e06:	4a2e      	ldr	r2, [pc, #184]	; (8017ec0 <mbedtls_ssl_parse_certificate+0x278>)
 8017e08:	2101      	movs	r1, #1
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f7f3 fc4a 	bl	800b6a4 <mbedtls_debug_print_msg>
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017e10:	2250      	movs	r2, #80	; 0x50
 8017e12:	2102      	movs	r1, #2
 8017e14:	6878      	ldr	r0, [r7, #4]
 8017e16:	f7ff fd95 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8017e1a:	4b30      	ldr	r3, [pc, #192]	; (8017edc <mbedtls_ssl_parse_certificate+0x294>)
 8017e1c:	e1db      	b.n	80181d6 <mbedtls_ssl_parse_certificate+0x58e>
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e24:	4618      	mov	r0, r3
 8017e26:	f004 fb57 	bl	801c4d8 <mbedtls_x509_crt_init>

    i += 3;
 8017e2a:	6a3b      	ldr	r3, [r7, #32]
 8017e2c:	3303      	adds	r3, #3
 8017e2e:	623b      	str	r3, [r7, #32]

    while( i < ssl->in_hslen )
 8017e30:	e099      	b.n	8017f66 <mbedtls_ssl_parse_certificate+0x31e>
    {
        if( ssl->in_msg[i] != 0 )
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017e36:	6a3b      	ldr	r3, [r7, #32]
 8017e38:	4413      	add	r3, r2
 8017e3a:	781b      	ldrb	r3, [r3, #0]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d00f      	beq.n	8017e60 <mbedtls_ssl_parse_certificate+0x218>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8017e40:	4b22      	ldr	r3, [pc, #136]	; (8017ecc <mbedtls_ssl_parse_certificate+0x284>)
 8017e42:	9300      	str	r3, [sp, #0]
 8017e44:	f241 13b3 	movw	r3, #4531	; 0x11b3
 8017e48:	4a1d      	ldr	r2, [pc, #116]	; (8017ec0 <mbedtls_ssl_parse_certificate+0x278>)
 8017e4a:	2101      	movs	r1, #1
 8017e4c:	6878      	ldr	r0, [r7, #4]
 8017e4e:	f7f3 fc29 	bl	800b6a4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017e52:	2232      	movs	r2, #50	; 0x32
 8017e54:	2102      	movs	r1, #2
 8017e56:	6878      	ldr	r0, [r7, #4]
 8017e58:	f7ff fd74 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8017e5c:	4b1d      	ldr	r3, [pc, #116]	; (8017ed4 <mbedtls_ssl_parse_certificate+0x28c>)
 8017e5e:	e1ba      	b.n	80181d6 <mbedtls_ssl_parse_certificate+0x58e>
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017e64:	6a3b      	ldr	r3, [r7, #32]
 8017e66:	3301      	adds	r3, #1
 8017e68:	4413      	add	r3, r2
 8017e6a:	781b      	ldrb	r3, [r3, #0]
 8017e6c:	021b      	lsls	r3, r3, #8
            | (unsigned int) ssl->in_msg[i + 2];
 8017e6e:	687a      	ldr	r2, [r7, #4]
 8017e70:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8017e72:	6a3a      	ldr	r2, [r7, #32]
 8017e74:	3202      	adds	r2, #2
 8017e76:	440a      	add	r2, r1
 8017e78:	7812      	ldrb	r2, [r2, #0]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 8017e7a:	4313      	orrs	r3, r2
 8017e7c:	613b      	str	r3, [r7, #16]
        i += 3;
 8017e7e:	6a3b      	ldr	r3, [r7, #32]
 8017e80:	3303      	adds	r3, #3
 8017e82:	623b      	str	r3, [r7, #32]

        if( n < 128 || i + n > ssl->in_hslen )
 8017e84:	693b      	ldr	r3, [r7, #16]
 8017e86:	2b7f      	cmp	r3, #127	; 0x7f
 8017e88:	d906      	bls.n	8017e98 <mbedtls_ssl_parse_certificate+0x250>
 8017e8a:	6a3a      	ldr	r2, [r7, #32]
 8017e8c:	693b      	ldr	r3, [r7, #16]
 8017e8e:	441a      	add	r2, r3
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e94:	429a      	cmp	r2, r3
 8017e96:	d923      	bls.n	8017ee0 <mbedtls_ssl_parse_certificate+0x298>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8017e98:	4b0c      	ldr	r3, [pc, #48]	; (8017ecc <mbedtls_ssl_parse_certificate+0x284>)
 8017e9a:	9300      	str	r3, [sp, #0]
 8017e9c:	f241 13bf 	movw	r3, #4543	; 0x11bf
 8017ea0:	4a07      	ldr	r2, [pc, #28]	; (8017ec0 <mbedtls_ssl_parse_certificate+0x278>)
 8017ea2:	2101      	movs	r1, #1
 8017ea4:	6878      	ldr	r0, [r7, #4]
 8017ea6:	f7f3 fbfd 	bl	800b6a4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8017eaa:	2232      	movs	r2, #50	; 0x32
 8017eac:	2102      	movs	r1, #2
 8017eae:	6878      	ldr	r0, [r7, #4]
 8017eb0:	f7ff fd48 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8017eb4:	4b07      	ldr	r3, [pc, #28]	; (8017ed4 <mbedtls_ssl_parse_certificate+0x28c>)
 8017eb6:	e18e      	b.n	80181d6 <mbedtls_ssl_parse_certificate+0x58e>
 8017eb8:	ffff8f80 	.word	0xffff8f80
 8017ebc:	08022e44 	.word	0x08022e44
 8017ec0:	080223d4 	.word	0x080223d4
 8017ec4:	08022e5c 	.word	0x08022e5c
 8017ec8:	08022e78 	.word	0x08022e78
 8017ecc:	08022e90 	.word	0x08022e90
 8017ed0:	ffff8900 	.word	0xffff8900
 8017ed4:	ffff8600 	.word	0xffff8600
 8017ed8:	08022ea8 	.word	0x08022ea8
 8017edc:	ffff8100 	.word	0xffff8100
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ee4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
                                  ssl->in_msg + i, n );
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017eea:	6a3b      	ldr	r3, [r7, #32]
 8017eec:	4413      	add	r3, r2
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 8017eee:	693a      	ldr	r2, [r7, #16]
 8017ef0:	4619      	mov	r1, r3
 8017ef2:	f002 fddb 	bl	801aaac <mbedtls_x509_crt_parse_der>
 8017ef6:	6278      	str	r0, [r7, #36]	; 0x24
        switch( ret )
 8017ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d02e      	beq.n	8017f5c <mbedtls_ssl_parse_certificate+0x314>
 8017efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	dc16      	bgt.n	8017f32 <mbedtls_ssl_parse_certificate+0x2ea>
 8017f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f06:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
 8017f0a:	d00f      	beq.n	8017f2c <mbedtls_ssl_parse_certificate+0x2e4>
 8017f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f0e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
 8017f12:	dc0e      	bgt.n	8017f32 <mbedtls_ssl_parse_certificate+0x2ea>
 8017f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f16:	f513 5f22 	cmn.w	r3, #10368	; 0x2880
 8017f1a:	d004      	beq.n	8017f26 <mbedtls_ssl_parse_certificate+0x2de>
 8017f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1e:	4a9a      	ldr	r2, [pc, #616]	; (8018188 <mbedtls_ssl_parse_certificate+0x540>)
 8017f20:	4293      	cmp	r3, r2
 8017f22:	d106      	bne.n	8017f32 <mbedtls_ssl_parse_certificate+0x2ea>
        {
        case 0: /*ok*/
        case MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + MBEDTLS_ERR_OID_NOT_FOUND:
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;
 8017f24:	e01a      	b.n	8017f5c <mbedtls_ssl_parse_certificate+0x314>

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 8017f26:	2350      	movs	r3, #80	; 0x50
 8017f28:	77fb      	strb	r3, [r7, #31]
            goto crt_parse_der_failed;
 8017f2a:	e004      	b.n	8017f36 <mbedtls_ssl_parse_certificate+0x2ee>

        case MBEDTLS_ERR_X509_UNKNOWN_VERSION:
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8017f2c:	232b      	movs	r3, #43	; 0x2b
 8017f2e:	77fb      	strb	r3, [r7, #31]
            goto crt_parse_der_failed;
 8017f30:	e001      	b.n	8017f36 <mbedtls_ssl_parse_certificate+0x2ee>

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 8017f32:	232a      	movs	r3, #42	; 0x2a
 8017f34:	77fb      	strb	r3, [r7, #31]
        crt_parse_der_failed:
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 8017f36:	7ffb      	ldrb	r3, [r7, #31]
 8017f38:	461a      	mov	r2, r3
 8017f3a:	2102      	movs	r1, #2
 8017f3c:	6878      	ldr	r0, [r7, #4]
 8017f3e:	f7ff fd01 	bl	8017944 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 8017f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f44:	9301      	str	r3, [sp, #4]
 8017f46:	4b91      	ldr	r3, [pc, #580]	; (801818c <mbedtls_ssl_parse_certificate+0x544>)
 8017f48:	9300      	str	r3, [sp, #0]
 8017f4a:	f241 13db 	movw	r3, #4571	; 0x11db
 8017f4e:	4a90      	ldr	r2, [pc, #576]	; (8018190 <mbedtls_ssl_parse_certificate+0x548>)
 8017f50:	2101      	movs	r1, #1
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f7f3 fc2c 	bl	800b7b0 <mbedtls_debug_print_ret>
            return( ret );
 8017f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f5a:	e13c      	b.n	80181d6 <mbedtls_ssl_parse_certificate+0x58e>
            break;
 8017f5c:	bf00      	nop
        }

        i += n;
 8017f5e:	6a3a      	ldr	r2, [r7, #32]
 8017f60:	693b      	ldr	r3, [r7, #16]
 8017f62:	4413      	add	r3, r2
 8017f64:	623b      	str	r3, [r7, #32]
    while( i < ssl->in_hslen )
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017f6a:	6a3a      	ldr	r2, [r7, #32]
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	f4ff af60 	bcc.w	8017e32 <mbedtls_ssl_parse_certificate+0x1ea>
    }

    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017f78:	9301      	str	r3, [sp, #4]
 8017f7a:	4b86      	ldr	r3, [pc, #536]	; (8018194 <mbedtls_ssl_parse_certificate+0x54c>)
 8017f7c:	9300      	str	r3, [sp, #0]
 8017f7e:	f241 13e2 	movw	r3, #4578	; 0x11e2
 8017f82:	4a83      	ldr	r2, [pc, #524]	; (8018190 <mbedtls_ssl_parse_certificate+0x548>)
 8017f84:	2103      	movs	r1, #3
 8017f86:	6878      	ldr	r0, [r7, #4]
 8017f88:	f7f4 f884 	bl	800c094 <mbedtls_debug_print_crt>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 8017f8c:	697b      	ldr	r3, [r7, #20]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	f000 8117 	beq.w	80181c2 <mbedtls_ssl_parse_certificate+0x57a>
            ca_crl   = ssl->handshake->sni_ca_crl;
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f9a:	60fb      	str	r3, [r7, #12]
            ca_crl   = ssl->conf->ca_crl;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fa2:	60bb      	str	r3, [r7, #8]

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_with_profile(
 8017fa8:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
        ret = mbedtls_x509_crt_verify_with_profile(
 8017fae:	6b5d      	ldr	r5, [r3, #52]	; 0x34
                                ssl->hostname,
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                               &ssl->session_negotiate->verify_result,
 8017fb6:	687a      	ldr	r2, [r7, #4]
 8017fb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_with_profile(
 8017fba:	3260      	adds	r2, #96	; 0x60
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 8017fbc:	6879      	ldr	r1, [r7, #4]
 8017fbe:	6809      	ldr	r1, [r1, #0]
        ret = mbedtls_x509_crt_verify_with_profile(
 8017fc0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	6800      	ldr	r0, [r0, #0]
        ret = mbedtls_x509_crt_verify_with_profile(
 8017fc6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017fc8:	9003      	str	r0, [sp, #12]
 8017fca:	9102      	str	r1, [sp, #8]
 8017fcc:	9201      	str	r2, [sp, #4]
 8017fce:	9300      	str	r3, [sp, #0]
 8017fd0:	462b      	mov	r3, r5
 8017fd2:	68ba      	ldr	r2, [r7, #8]
 8017fd4:	68f9      	ldr	r1, [r7, #12]
 8017fd6:	4620      	mov	r0, r4
 8017fd8:	f004 f908 	bl	801c1ec <mbedtls_x509_crt_verify_with_profile>
 8017fdc:	6278      	str	r0, [r7, #36]	; 0x24

        if( ret != 0 )
 8017fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d00a      	beq.n	8017ffa <mbedtls_ssl_parse_certificate+0x3b2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 8017fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe6:	9301      	str	r3, [sp, #4]
 8017fe8:	4b6b      	ldr	r3, [pc, #428]	; (8018198 <mbedtls_ssl_parse_certificate+0x550>)
 8017fea:	9300      	str	r3, [sp, #0]
 8017fec:	f241 2321 	movw	r3, #4641	; 0x1221
 8017ff0:	4a67      	ldr	r2, [pc, #412]	; (8018190 <mbedtls_ssl_parse_certificate+0x548>)
 8017ff2:	2101      	movs	r1, #1
 8017ff4:	6878      	ldr	r0, [r7, #4]
 8017ff6:	f7f3 fbdb 	bl	800b7b0 <mbedtls_debug_print_ret>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ffe:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 8018008:	f003 0301 	and.w	r3, r3, #1
 801800c:	b2db      	uxtb	r3, r3
 801800e:	2b00      	cmp	r3, #0
 8018010:	bf0c      	ite	eq
 8018012:	2301      	moveq	r3, #1
 8018014:	2300      	movne	r3, #0
 8018016:	b2db      	uxtb	r3, r3
 8018018:	461a      	mov	r2, r3
                                 &ssl->session_negotiate->verify_result ) != 0 )
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 801801e:	3360      	adds	r3, #96	; 0x60
 8018020:	69b9      	ldr	r1, [r7, #24]
 8018022:	f001 f8bb 	bl	801919c <mbedtls_ssl_check_cert_usage>
 8018026:	4603      	mov	r3, r0
 8018028:	2b00      	cmp	r3, #0
 801802a:	d00d      	beq.n	8018048 <mbedtls_ssl_parse_certificate+0x400>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
 801802c:	4b5b      	ldr	r3, [pc, #364]	; (801819c <mbedtls_ssl_parse_certificate+0x554>)
 801802e:	9300      	str	r3, [sp, #0]
 8018030:	f241 233e 	movw	r3, #4670	; 0x123e
 8018034:	4a56      	ldr	r2, [pc, #344]	; (8018190 <mbedtls_ssl_parse_certificate+0x548>)
 8018036:	2101      	movs	r1, #1
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f7f3 fb33 	bl	800b6a4 <mbedtls_debug_print_msg>
            if( ret == 0 )
 801803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018040:	2b00      	cmp	r3, #0
 8018042:	d101      	bne.n	8018048 <mbedtls_ssl_parse_certificate+0x400>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 8018044:	4b56      	ldr	r3, [pc, #344]	; (80181a0 <mbedtls_ssl_parse_certificate+0x558>)
 8018046:	627b      	str	r3, [r7, #36]	; 0x24
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	2b01      	cmp	r3, #1
 801804c:	d109      	bne.n	8018062 <mbedtls_ssl_parse_certificate+0x41a>
 801804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018050:	f513 5f1c 	cmn.w	r3, #9984	; 0x2700
 8018054:	d003      	beq.n	801805e <mbedtls_ssl_parse_certificate+0x416>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 8018056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018058:	f513 4ff4 	cmn.w	r3, #31232	; 0x7a00
 801805c:	d101      	bne.n	8018062 <mbedtls_ssl_parse_certificate+0x41a>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
 801805e:	2300      	movs	r3, #0
 8018060:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d10d      	bne.n	8018084 <mbedtls_ssl_parse_certificate+0x43c>
 8018068:	697b      	ldr	r3, [r7, #20]
 801806a:	2b02      	cmp	r3, #2
 801806c:	d10a      	bne.n	8018084 <mbedtls_ssl_parse_certificate+0x43c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801806e:	4b4d      	ldr	r3, [pc, #308]	; (80181a4 <mbedtls_ssl_parse_certificate+0x55c>)
 8018070:	9300      	str	r3, [sp, #0]
 8018072:	f241 2352 	movw	r3, #4690	; 0x1252
 8018076:	4a46      	ldr	r2, [pc, #280]	; (8018190 <mbedtls_ssl_parse_certificate+0x548>)
 8018078:	2101      	movs	r1, #1
 801807a:	6878      	ldr	r0, [r7, #4]
 801807c:	f7f3 fb12 	bl	800b6a4 <mbedtls_debug_print_msg>
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 8018080:	4b49      	ldr	r3, [pc, #292]	; (80181a8 <mbedtls_ssl_parse_certificate+0x560>)
 8018082:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if( ret != 0 )
 8018084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018086:	2b00      	cmp	r3, #0
 8018088:	d06b      	beq.n	8018162 <mbedtls_ssl_parse_certificate+0x51a>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801808e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018094:	2b00      	cmp	r3, #0
 8018096:	d002      	beq.n	801809e <mbedtls_ssl_parse_certificate+0x456>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 8018098:	2331      	movs	r3, #49	; 0x31
 801809a:	77fb      	strb	r3, [r7, #31]
 801809c:	e05b      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180a4:	f003 0304 	and.w	r3, r3, #4
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d002      	beq.n	80180b2 <mbedtls_ssl_parse_certificate+0x46a>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 80180ac:	232a      	movs	r3, #42	; 0x2a
 80180ae:	77fb      	strb	r3, [r7, #31]
 80180b0:	e051      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_KEY_USAGE )
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d002      	beq.n	80180c6 <mbedtls_ssl_parse_certificate+0x47e>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80180c0:	232b      	movs	r3, #43	; 0x2b
 80180c2:	77fb      	strb	r3, [r7, #31]
 80180c4:	e047      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXT_KEY_USAGE )
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d002      	beq.n	80180da <mbedtls_ssl_parse_certificate+0x492>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80180d4:	232b      	movs	r3, #43	; 0x2b
 80180d6:	77fb      	strb	r3, [r7, #31]
 80180d8:	e03d      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d002      	beq.n	80180ee <mbedtls_ssl_parse_certificate+0x4a6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80180e8:	232b      	movs	r3, #43	; 0x2b
 80180ea:	77fb      	strb	r3, [r7, #31]
 80180ec:	e033      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d002      	beq.n	8018102 <mbedtls_ssl_parse_certificate+0x4ba>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80180fc:	232b      	movs	r3, #43	; 0x2b
 80180fe:	77fb      	strb	r3, [r7, #31]
 8018100:	e029      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801810c:	2b00      	cmp	r3, #0
 801810e:	d002      	beq.n	8018116 <mbedtls_ssl_parse_certificate+0x4ce>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8018110:	232b      	movs	r3, #43	; 0x2b
 8018112:	77fb      	strb	r3, [r7, #31]
 8018114:	e01f      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801811a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801811c:	f003 0301 	and.w	r3, r3, #1
 8018120:	2b00      	cmp	r3, #0
 8018122:	d002      	beq.n	801812a <mbedtls_ssl_parse_certificate+0x4e2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 8018124:	232d      	movs	r3, #45	; 0x2d
 8018126:	77fb      	strb	r3, [r7, #31]
 8018128:	e015      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801812e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018130:	f003 0302 	and.w	r3, r3, #2
 8018134:	2b00      	cmp	r3, #0
 8018136:	d002      	beq.n	801813e <mbedtls_ssl_parse_certificate+0x4f6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 8018138:	232c      	movs	r3, #44	; 0x2c
 801813a:	77fb      	strb	r3, [r7, #31]
 801813c:	e00b      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018144:	f003 0308 	and.w	r3, r3, #8
 8018148:	2b00      	cmp	r3, #0
 801814a:	d002      	beq.n	8018152 <mbedtls_ssl_parse_certificate+0x50a>
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
 801814c:	2330      	movs	r3, #48	; 0x30
 801814e:	77fb      	strb	r3, [r7, #31]
 8018150:	e001      	b.n	8018156 <mbedtls_ssl_parse_certificate+0x50e>
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 8018152:	232e      	movs	r3, #46	; 0x2e
 8018154:	77fb      	strb	r3, [r7, #31]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8018156:	7ffb      	ldrb	r3, [r7, #31]
 8018158:	461a      	mov	r2, r3
 801815a:	2102      	movs	r1, #2
 801815c:	6878      	ldr	r0, [r7, #4]
 801815e:	f7ff fbf1 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                            alert );
        }

#if defined(MBEDTLS_DEBUG_C)
        if( ssl->session_negotiate->verify_result != 0 )
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018168:	2b00      	cmp	r3, #0
 801816a:	d021      	beq.n	80181b0 <mbedtls_ssl_parse_certificate+0x568>
        {
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018172:	9301      	str	r3, [sp, #4]
 8018174:	4b0d      	ldr	r3, [pc, #52]	; (80181ac <mbedtls_ssl_parse_certificate+0x564>)
 8018176:	9300      	str	r3, [sp, #0]
 8018178:	f241 2378 	movw	r3, #4728	; 0x1278
 801817c:	4a04      	ldr	r2, [pc, #16]	; (8018190 <mbedtls_ssl_parse_certificate+0x548>)
 801817e:	2103      	movs	r1, #3
 8018180:	6878      	ldr	r0, [r7, #4]
 8018182:	f7f3 fa8f 	bl	800b6a4 <mbedtls_debug_print_msg>
 8018186:	e01c      	b.n	80181c2 <mbedtls_ssl_parse_certificate+0x57a>
 8018188:	ffffd9d2 	.word	0xffffd9d2
 801818c:	08022ec0 	.word	0x08022ec0
 8018190:	080223d4 	.word	0x080223d4
 8018194:	08022edc 	.word	0x08022edc
 8018198:	08022ef0 	.word	0x08022ef0
 801819c:	08022f04 	.word	0x08022f04
 80181a0:	ffff8600 	.word	0xffff8600
 80181a4:	08022f28 	.word	0x08022f28
 80181a8:	ffff8980 	.word	0xffff8980
 80181ac:	08022f38 	.word	0x08022f38
                                        ssl->session_negotiate->verify_result ) );
        }
        else
        {
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 80181b0:	4b0b      	ldr	r3, [pc, #44]	; (80181e0 <mbedtls_ssl_parse_certificate+0x598>)
 80181b2:	9300      	str	r3, [sp, #0]
 80181b4:	f241 237d 	movw	r3, #4733	; 0x127d
 80181b8:	4a0a      	ldr	r2, [pc, #40]	; (80181e4 <mbedtls_ssl_parse_certificate+0x59c>)
 80181ba:	2103      	movs	r1, #3
 80181bc:	6878      	ldr	r0, [r7, #4]
 80181be:	f7f3 fa71 	bl	800b6a4 <mbedtls_debug_print_msg>
        }
#endif /* MBEDTLS_DEBUG_C */
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 80181c2:	4b09      	ldr	r3, [pc, #36]	; (80181e8 <mbedtls_ssl_parse_certificate+0x5a0>)
 80181c4:	9300      	str	r3, [sp, #0]
 80181c6:	f241 2382 	movw	r3, #4738	; 0x1282
 80181ca:	4a06      	ldr	r2, [pc, #24]	; (80181e4 <mbedtls_ssl_parse_certificate+0x59c>)
 80181cc:	2102      	movs	r1, #2
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f7f3 fa68 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( ret );
 80181d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80181d6:	4618      	mov	r0, r3
 80181d8:	3728      	adds	r7, #40	; 0x28
 80181da:	46bd      	mov	sp, r7
 80181dc:	bdb0      	pop	{r4, r5, r7, pc}
 80181de:	bf00      	nop
 80181e0:	08022f5c 	.word	0x08022f5c
 80181e4:	080223d4 	.word	0x080223d4
 80181e8:	08022f84 	.word	0x08022f84

080181ec <mbedtls_ssl_write_change_cipher_spec>:
          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

int mbedtls_ssl_write_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b086      	sub	sp, #24
 80181f0:	af02      	add	r7, sp, #8
 80181f2:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 80181f4:	4b1e      	ldr	r3, [pc, #120]	; (8018270 <mbedtls_ssl_write_change_cipher_spec+0x84>)
 80181f6:	9300      	str	r3, [sp, #0]
 80181f8:	f241 2392 	movw	r3, #4754	; 0x1292
 80181fc:	4a1d      	ldr	r2, [pc, #116]	; (8018274 <mbedtls_ssl_write_change_cipher_spec+0x88>)
 80181fe:	2102      	movs	r1, #2
 8018200:	6878      	ldr	r0, [r7, #4]
 8018202:	f7f3 fa4f 	bl	800b6a4 <mbedtls_debug_print_msg>

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	2214      	movs	r2, #20
 801820a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msglen  = 1;
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	2201      	movs	r2, #1
 8018212:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801821c:	2201      	movs	r2, #1
 801821e:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	685b      	ldr	r3, [r3, #4]
 8018224:	1c5a      	adds	r2, r3, #1
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	605a      	str	r2, [r3, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801822a:	6878      	ldr	r0, [r7, #4]
 801822c:	f7fe fee0 	bl	8016ff0 <mbedtls_ssl_write_record>
 8018230:	60f8      	str	r0, [r7, #12]
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d00c      	beq.n	8018252 <mbedtls_ssl_write_change_cipher_spec+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	9301      	str	r3, [sp, #4]
 801823c:	4b0e      	ldr	r3, [pc, #56]	; (8018278 <mbedtls_ssl_write_change_cipher_spec+0x8c>)
 801823e:	9300      	str	r3, [sp, #0]
 8018240:	f241 239c 	movw	r3, #4764	; 0x129c
 8018244:	4a0b      	ldr	r2, [pc, #44]	; (8018274 <mbedtls_ssl_write_change_cipher_spec+0x88>)
 8018246:	2101      	movs	r1, #1
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	f7f3 fab1 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	e009      	b.n	8018266 <mbedtls_ssl_write_change_cipher_spec+0x7a>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 8018252:	4b0a      	ldr	r3, [pc, #40]	; (801827c <mbedtls_ssl_write_change_cipher_spec+0x90>)
 8018254:	9300      	str	r3, [sp, #0]
 8018256:	f44f 5395 	mov.w	r3, #4768	; 0x12a0
 801825a:	4a06      	ldr	r2, [pc, #24]	; (8018274 <mbedtls_ssl_write_change_cipher_spec+0x88>)
 801825c:	2102      	movs	r1, #2
 801825e:	6878      	ldr	r0, [r7, #4]
 8018260:	f7f3 fa20 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8018264:	2300      	movs	r3, #0
}
 8018266:	4618      	mov	r0, r3
 8018268:	3710      	adds	r7, #16
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}
 801826e:	bf00      	nop
 8018270:	08022f9c 	.word	0x08022f9c
 8018274:	080223d4 	.word	0x080223d4
 8018278:	08022d94 	.word	0x08022d94
 801827c:	08022fb8 	.word	0x08022fb8

08018280 <mbedtls_ssl_parse_change_cipher_spec>:

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b086      	sub	sp, #24
 8018284:	af02      	add	r7, sp, #8
 8018286:	6078      	str	r0, [r7, #4]
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 8018288:	4b44      	ldr	r3, [pc, #272]	; (801839c <mbedtls_ssl_parse_change_cipher_spec+0x11c>)
 801828a:	9300      	str	r3, [sp, #0]
 801828c:	f241 23a9 	movw	r3, #4777	; 0x12a9
 8018290:	4a43      	ldr	r2, [pc, #268]	; (80183a0 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 8018292:	2102      	movs	r1, #2
 8018294:	6878      	ldr	r0, [r7, #4]
 8018296:	f7f3 fa05 	bl	800b6a4 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801829a:	6878      	ldr	r0, [r7, #4]
 801829c:	f7ff f9b6 	bl	801760c <mbedtls_ssl_read_record>
 80182a0:	60f8      	str	r0, [r7, #12]
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d00c      	beq.n	80182c2 <mbedtls_ssl_parse_change_cipher_spec+0x42>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	9301      	str	r3, [sp, #4]
 80182ac:	4b3d      	ldr	r3, [pc, #244]	; (80183a4 <mbedtls_ssl_parse_change_cipher_spec+0x124>)
 80182ae:	9300      	str	r3, [sp, #0]
 80182b0:	f241 23ad 	movw	r3, #4781	; 0x12ad
 80182b4:	4a3a      	ldr	r2, [pc, #232]	; (80183a0 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 80182b6:	2101      	movs	r1, #1
 80182b8:	6878      	ldr	r0, [r7, #4]
 80182ba:	f7f3 fa79 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	e068      	b.n	8018394 <mbedtls_ssl_parse_change_cipher_spec+0x114>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182c6:	2b14      	cmp	r3, #20
 80182c8:	d00f      	beq.n	80182ea <mbedtls_ssl_parse_change_cipher_spec+0x6a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 80182ca:	4b37      	ldr	r3, [pc, #220]	; (80183a8 <mbedtls_ssl_parse_change_cipher_spec+0x128>)
 80182cc:	9300      	str	r3, [sp, #0]
 80182ce:	f241 23b3 	movw	r3, #4787	; 0x12b3
 80182d2:	4a33      	ldr	r2, [pc, #204]	; (80183a0 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 80182d4:	2101      	movs	r1, #1
 80182d6:	6878      	ldr	r0, [r7, #4]
 80182d8:	f7f3 f9e4 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80182dc:	220a      	movs	r2, #10
 80182de:	2102      	movs	r1, #2
 80182e0:	6878      	ldr	r0, [r7, #4]
 80182e2:	f7ff fb2f 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80182e6:	4b31      	ldr	r3, [pc, #196]	; (80183ac <mbedtls_ssl_parse_change_cipher_spec+0x12c>)
 80182e8:	e054      	b.n	8018394 <mbedtls_ssl_parse_change_cipher_spec+0x114>
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182ee:	2b01      	cmp	r3, #1
 80182f0:	d104      	bne.n	80182fc <mbedtls_ssl_parse_change_cipher_spec+0x7c>
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80182f6:	781b      	ldrb	r3, [r3, #0]
 80182f8:	2b01      	cmp	r3, #1
 80182fa:	d00f      	beq.n	801831c <mbedtls_ssl_parse_change_cipher_spec+0x9c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 80182fc:	4b2a      	ldr	r3, [pc, #168]	; (80183a8 <mbedtls_ssl_parse_change_cipher_spec+0x128>)
 80182fe:	9300      	str	r3, [sp, #0]
 8018300:	f241 23bb 	movw	r3, #4795	; 0x12bb
 8018304:	4a26      	ldr	r2, [pc, #152]	; (80183a0 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 8018306:	2101      	movs	r1, #1
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f7f3 f9cb 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801830e:	2232      	movs	r2, #50	; 0x32
 8018310:	2102      	movs	r1, #2
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7ff fb16 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 8018318:	4b25      	ldr	r3, [pc, #148]	; (80183b0 <mbedtls_ssl_parse_change_cipher_spec+0x130>)
 801831a:	e03b      	b.n	8018394 <mbedtls_ssl_parse_change_cipher_spec+0x114>

    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 801831c:	4b25      	ldr	r3, [pc, #148]	; (80183b4 <mbedtls_ssl_parse_change_cipher_spec+0x134>)
 801831e:	9300      	str	r3, [sp, #0]
 8018320:	f241 23c5 	movw	r3, #4805	; 0x12c5
 8018324:	4a1e      	ldr	r2, [pc, #120]	; (80183a0 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 8018326:	2103      	movs	r1, #3
 8018328:	6878      	ldr	r0, [r7, #4]
 801832a:	f7f3 f9bb 	bl	800b6a4 <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	635a      	str	r2, [r3, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	621a      	str	r2, [r3, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018342:	2208      	movs	r2, #8
 8018344:	2100      	movs	r1, #0
 8018346:	4618      	mov	r0, r3
 8018348:	f005 fa8e 	bl	801d868 <memset>

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	68db      	ldr	r3, [r3, #12]
 8018350:	2b01      	cmp	r3, #1
 8018352:	dd0c      	ble.n	801836e <mbedtls_ssl_parse_change_cipher_spec+0xee>
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801835c:	68d9      	ldr	r1, [r3, #12]
                      ssl->transform_negotiate->fixed_ivlen;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018362:	691b      	ldr	r3, [r3, #16]
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 8018364:	1acb      	subs	r3, r1, r3
 8018366:	441a      	add	r2, r3
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	665a      	str	r2, [r3, #100]	; 0x64
 801836c:	e003      	b.n	8018376 <mbedtls_ssl_parse_change_cipher_spec+0xf6>
    }
    else
        ssl->in_msg = ssl->in_iv;
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	665a      	str	r2, [r3, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	685b      	ldr	r3, [r3, #4]
 801837a:	1c5a      	adds	r2, r3, #1
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	605a      	str	r2, [r3, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 8018380:	4b0d      	ldr	r3, [pc, #52]	; (80183b8 <mbedtls_ssl_parse_change_cipher_spec+0x138>)
 8018382:	9300      	str	r3, [sp, #0]
 8018384:	f241 23f7 	movw	r3, #4855	; 0x12f7
 8018388:	4a05      	ldr	r2, [pc, #20]	; (80183a0 <mbedtls_ssl_parse_change_cipher_spec+0x120>)
 801838a:	2102      	movs	r1, #2
 801838c:	6878      	ldr	r0, [r7, #4]
 801838e:	f7f3 f989 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 8018392:	2300      	movs	r3, #0
}
 8018394:	4618      	mov	r0, r3
 8018396:	3710      	adds	r7, #16
 8018398:	46bd      	mov	sp, r7
 801839a:	bd80      	pop	{r7, pc}
 801839c:	08022fd4 	.word	0x08022fd4
 80183a0:	080223d4 	.word	0x080223d4
 80183a4:	08022e78 	.word	0x08022e78
 80183a8:	08022ff0 	.word	0x08022ff0
 80183ac:	ffff8900 	.word	0xffff8900
 80183b0:	ffff8200 	.word	0xffff8200
 80183b4:	08023010 	.word	0x08023010
 80183b8:	08023044 	.word	0x08023044

080183bc <mbedtls_ssl_optimize_checksum>:

void mbedtls_ssl_optimize_checksum( mbedtls_ssl_context *ssl,
                            const mbedtls_ssl_ciphersuite_t *ciphersuite_info )
{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b084      	sub	sp, #16
 80183c0:	af02      	add	r7, sp, #8
 80183c2:	6078      	str	r0, [r7, #4]
 80183c4:	6039      	str	r1, [r7, #0]
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
 80183c6:	683b      	ldr	r3, [r7, #0]
 80183c8:	7a5b      	ldrb	r3, [r3, #9]
 80183ca:	2b07      	cmp	r3, #7
 80183cc:	d004      	beq.n	80183d8 <mbedtls_ssl_optimize_checksum+0x1c>
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183d2:	4a08      	ldr	r2, [pc, #32]	; (80183f4 <mbedtls_ssl_optimize_checksum+0x38>)
 80183d4:	675a      	str	r2, [r3, #116]	; 0x74
 80183d6:	e009      	b.n	80183ec <mbedtls_ssl_optimize_checksum+0x30>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80183d8:	4b07      	ldr	r3, [pc, #28]	; (80183f8 <mbedtls_ssl_optimize_checksum+0x3c>)
 80183da:	9300      	str	r3, [sp, #0]
 80183dc:	f241 3314 	movw	r3, #4884	; 0x1314
 80183e0:	4a06      	ldr	r2, [pc, #24]	; (80183fc <mbedtls_ssl_optimize_checksum+0x40>)
 80183e2:	2101      	movs	r1, #1
 80183e4:	6878      	ldr	r0, [r7, #4]
 80183e6:	f7f3 f95d 	bl	800b6a4 <mbedtls_debug_print_msg>
        return;
 80183ea:	bf00      	nop
    }
}
 80183ec:	3708      	adds	r7, #8
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}
 80183f2:	bf00      	nop
 80183f4:	08018425 	.word	0x08018425
 80183f8:	08022478 	.word	0x08022478
 80183fc:	080223d4 	.word	0x080223d4

08018400 <ssl_update_checksum_start>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b084      	sub	sp, #16
 8018404:	af00      	add	r7, sp, #0
 8018406:	60f8      	str	r0, [r7, #12]
 8018408:	60b9      	str	r1, [r7, #8]
 801840a:	607a      	str	r2, [r7, #4]
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018410:	3308      	adds	r3, #8
 8018412:	687a      	ldr	r2, [r7, #4]
 8018414:	68b9      	ldr	r1, [r7, #8]
 8018416:	4618      	mov	r0, r3
 8018418:	f7fa fe82 	bl	8013120 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 801841c:	bf00      	nop
 801841e:	3710      	adds	r7, #16
 8018420:	46bd      	mov	sp, r7
 8018422:	bd80      	pop	{r7, pc}

08018424 <ssl_update_checksum_sha256>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b084      	sub	sp, #16
 8018428:	af00      	add	r7, sp, #0
 801842a:	60f8      	str	r0, [r7, #12]
 801842c:	60b9      	str	r1, [r7, #8]
 801842e:	607a      	str	r2, [r7, #4]
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018434:	3308      	adds	r3, #8
 8018436:	687a      	ldr	r2, [r7, #4]
 8018438:	68b9      	ldr	r1, [r7, #8]
 801843a:	4618      	mov	r0, r3
 801843c:	f7fa fe70 	bl	8013120 <mbedtls_sha256_update_ret>
}
 8018440:	bf00      	nop
 8018442:	3710      	adds	r7, #16
 8018444:	46bd      	mov	sp, r7
 8018446:	bd80      	pop	{r7, pc}

08018448 <ssl_calc_finished_tls_sha256>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8018448:	b590      	push	{r4, r7, lr}
 801844a:	b0af      	sub	sp, #188	; 0xbc
 801844c:	af04      	add	r7, sp, #16
 801844e:	60f8      	str	r0, [r7, #12]
 8018450:	60b9      	str	r1, [r7, #8]
 8018452:	607a      	str	r2, [r7, #4]
    int len = 12;
 8018454:	230c      	movs	r3, #12
 8018456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801845e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if( !session )
 8018462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018466:	2b00      	cmp	r3, #0
 8018468:	d103      	bne.n	8018472 <ssl_calc_finished_tls_sha256+0x2a>
        session = ssl->session;
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801846e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    mbedtls_sha256_init( &sha256 );
 8018472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018476:	4618      	mov	r0, r3
 8018478:	f7f9 f870 	bl	801155c <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 801847c:	4b36      	ldr	r3, [pc, #216]	; (8018558 <ssl_calc_finished_tls_sha256+0x110>)
 801847e:	9300      	str	r3, [sp, #0]
 8018480:	f241 33f8 	movw	r3, #5112	; 0x13f8
 8018484:	4a35      	ldr	r2, [pc, #212]	; (801855c <ssl_calc_finished_tls_sha256+0x114>)
 8018486:	2102      	movs	r1, #2
 8018488:	68f8      	ldr	r0, [r7, #12]
 801848a:	f7f3 f90b 	bl	800b6a4 <mbedtls_debug_print_msg>

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018492:	f103 0208 	add.w	r2, r3, #8
 8018496:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801849a:	4611      	mov	r1, r2
 801849c:	4618      	mov	r0, r3
 801849e:	f7f9 f87a 	bl	8011596 <mbedtls_sha256_clone>
     *   hash = PRF( master, finished_label,
     *               Hash( handshake ) )[0.11]
     */

#if !defined(MBEDTLS_SHA256_ALT)
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 80184a2:	2320      	movs	r3, #32
 80184a4:	9302      	str	r3, [sp, #8]
 80184a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80184aa:	3308      	adds	r3, #8
 80184ac:	9301      	str	r3, [sp, #4]
 80184ae:	4b2c      	ldr	r3, [pc, #176]	; (8018560 <ssl_calc_finished_tls_sha256+0x118>)
 80184b0:	9300      	str	r3, [sp, #0]
 80184b2:	f241 4303 	movw	r3, #5123	; 0x1403
 80184b6:	4a29      	ldr	r2, [pc, #164]	; (801855c <ssl_calc_finished_tls_sha256+0x114>)
 80184b8:	2104      	movs	r1, #4
 80184ba:	68f8      	ldr	r0, [r7, #12]
 80184bc:	f7f3 f9e4 	bl	800b888 <mbedtls_debug_print_buf>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d101      	bne.n	80184ca <ssl_calc_finished_tls_sha256+0x82>
 80184c6:	4b27      	ldr	r3, [pc, #156]	; (8018564 <ssl_calc_finished_tls_sha256+0x11c>)
 80184c8:	e000      	b.n	80184cc <ssl_calc_finished_tls_sha256+0x84>
 80184ca:	4b27      	ldr	r3, [pc, #156]	; (8018568 <ssl_calc_finished_tls_sha256+0x120>)
 80184cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
             ? "client finished"
             : "server finished";

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80184d0:	f107 0210 	add.w	r2, r7, #16
 80184d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80184d8:	4611      	mov	r1, r2
 80184da:	4618      	mov	r0, r3
 80184dc:	f7fa fe96 	bl	801320c <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184e4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80184e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80184ec:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80184f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80184f4:	f107 0210 	add.w	r2, r7, #16
 80184f8:	9302      	str	r3, [sp, #8]
 80184fa:	68bb      	ldr	r3, [r7, #8]
 80184fc:	9301      	str	r3, [sp, #4]
 80184fe:	2320      	movs	r3, #32
 8018500:	9300      	str	r3, [sp, #0]
 8018502:	4613      	mov	r3, r2
 8018504:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018508:	2130      	movs	r1, #48	; 0x30
 801850a:	47a0      	blx	r4
                             padbuf, 32, buf, len );

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 801850c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018510:	9302      	str	r3, [sp, #8]
 8018512:	68bb      	ldr	r3, [r7, #8]
 8018514:	9301      	str	r3, [sp, #4]
 8018516:	4b15      	ldr	r3, [pc, #84]	; (801856c <ssl_calc_finished_tls_sha256+0x124>)
 8018518:	9300      	str	r3, [sp, #0]
 801851a:	f241 4310 	movw	r3, #5136	; 0x1410
 801851e:	4a0f      	ldr	r2, [pc, #60]	; (801855c <ssl_calc_finished_tls_sha256+0x114>)
 8018520:	2103      	movs	r1, #3
 8018522:	68f8      	ldr	r0, [r7, #12]
 8018524:	f7f3 f9b0 	bl	800b888 <mbedtls_debug_print_buf>

    mbedtls_sha256_free( &sha256 );
 8018528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801852c:	4618      	mov	r0, r3
 801852e:	f7f9 f822 	bl	8011576 <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 8018532:	f107 0310 	add.w	r3, r7, #16
 8018536:	2120      	movs	r1, #32
 8018538:	4618      	mov	r0, r3
 801853a:	f7fc fe36 	bl	80151aa <mbedtls_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 801853e:	4b0c      	ldr	r3, [pc, #48]	; (8018570 <ssl_calc_finished_tls_sha256+0x128>)
 8018540:	9300      	str	r3, [sp, #0]
 8018542:	f241 4316 	movw	r3, #5142	; 0x1416
 8018546:	4a05      	ldr	r2, [pc, #20]	; (801855c <ssl_calc_finished_tls_sha256+0x114>)
 8018548:	2102      	movs	r1, #2
 801854a:	68f8      	ldr	r0, [r7, #12]
 801854c:	f7f3 f8aa 	bl	800b6a4 <mbedtls_debug_print_msg>
}
 8018550:	bf00      	nop
 8018552:	37ac      	adds	r7, #172	; 0xac
 8018554:	46bd      	mov	sp, r7
 8018556:	bd90      	pop	{r4, r7, pc}
 8018558:	08023060 	.word	0x08023060
 801855c:	080223d4 	.word	0x080223d4
 8018560:	08023080 	.word	0x08023080
 8018564:	08023094 	.word	0x08023094
 8018568:	080230a4 	.word	0x080230a4
 801856c:	080230b4 	.word	0x080230b4
 8018570:	080230cc 	.word	0x080230cc

08018574 <ssl_handshake_wrapup_free_hs_transform>:
}
#endif /* MBEDTLS_SHA512_C */
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

static void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl )
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b084      	sub	sp, #16
 8018578:	af02      	add	r7, sp, #8
 801857a:	6078      	str	r0, [r7, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 801857c:	4b1b      	ldr	r3, [pc, #108]	; (80185ec <ssl_handshake_wrapup_free_hs_transform+0x78>)
 801857e:	9300      	str	r3, [sp, #0]
 8018580:	f241 434e 	movw	r3, #5198	; 0x144e
 8018584:	4a1a      	ldr	r2, [pc, #104]	; (80185f0 <ssl_handshake_wrapup_free_hs_transform+0x7c>)
 8018586:	2103      	movs	r1, #3
 8018588:	6878      	ldr	r0, [r7, #4]
 801858a:	f7f3 f88b 	bl	800b6a4 <mbedtls_debug_print_msg>

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018592:	4618      	mov	r0, r3
 8018594:	f000 fd0c 	bl	8018fb0 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801859c:	4618      	mov	r0, r3
 801859e:	f005 f923 	bl	801d7e8 <free>
    ssl->handshake = NULL;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	2200      	movs	r2, #0
 80185a6:	631a      	str	r2, [r3, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d009      	beq.n	80185c4 <ssl_handshake_wrapup_free_hs_transform+0x50>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185b4:	4618      	mov	r0, r3
 80185b6:	f000 fcd7 	bl	8018f68 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185be:	4618      	mov	r0, r3
 80185c0:	f005 f912 	bl	801d7e8 <free>
    }
    ssl->transform = ssl->transform_negotiate;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	63da      	str	r2, [r3, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	2200      	movs	r2, #0
 80185d0:	641a      	str	r2, [r3, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 80185d2:	4b08      	ldr	r3, [pc, #32]	; (80185f4 <ssl_handshake_wrapup_free_hs_transform+0x80>)
 80185d4:	9300      	str	r3, [sp, #0]
 80185d6:	f241 4362 	movw	r3, #5218	; 0x1462
 80185da:	4a05      	ldr	r2, [pc, #20]	; (80185f0 <ssl_handshake_wrapup_free_hs_transform+0x7c>)
 80185dc:	2103      	movs	r1, #3
 80185de:	6878      	ldr	r0, [r7, #4]
 80185e0:	f7f3 f860 	bl	800b6a4 <mbedtls_debug_print_msg>
}
 80185e4:	bf00      	nop
 80185e6:	3708      	adds	r7, #8
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd80      	pop	{r7, pc}
 80185ec:	080230e0 	.word	0x080230e0
 80185f0:	080223d4 	.word	0x080223d4
 80185f4:	08023100 	.word	0x08023100

080185f8 <mbedtls_ssl_handshake_wrapup>:

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b086      	sub	sp, #24
 80185fc:	af02      	add	r7, sp, #8
 80185fe:	6078      	str	r0, [r7, #4]
    int resume = ssl->handshake->resume;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018604:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8018608:	60fb      	str	r3, [r7, #12]

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801860a:	4b2b      	ldr	r3, [pc, #172]	; (80186b8 <mbedtls_ssl_handshake_wrapup+0xc0>)
 801860c:	9300      	str	r3, [sp, #0]
 801860e:	f241 4369 	movw	r3, #5225	; 0x1469
 8018612:	4a2a      	ldr	r2, [pc, #168]	; (80186bc <mbedtls_ssl_handshake_wrapup+0xc4>)
 8018614:	2103      	movs	r1, #3
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f7f3 f844 	bl	800b6a4 <mbedtls_debug_print_msg>
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018620:	2b00      	cmp	r3, #0
 8018622:	d009      	beq.n	8018638 <mbedtls_ssl_handshake_wrapup+0x40>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018628:	4618      	mov	r0, r3
 801862a:	f000 fcd7 	bl	8018fdc <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018632:	4618      	mov	r0, r3
 8018634:	f005 f8d8 	bl	801d7e8 <free>
    }
    ssl->session = ssl->session_negotiate;
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	629a      	str	r2, [r3, #40]	; 0x28
    ssl->session_negotiate = NULL;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	2200      	movs	r2, #0
 8018644:	62da      	str	r2, [r3, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801864c:	2b00      	cmp	r3, #0
 801864e:	d01d      	beq.n	801868c <mbedtls_ssl_handshake_wrapup+0x94>
        ssl->session->id_len != 0 &&
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018654:	689b      	ldr	r3, [r3, #8]
    if( ssl->conf->f_set_cache != NULL &&
 8018656:	2b00      	cmp	r3, #0
 8018658:	d018      	beq.n	801868c <mbedtls_ssl_handshake_wrapup+0x94>
        ssl->session->id_len != 0 &&
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d115      	bne.n	801868c <mbedtls_ssl_handshake_wrapup+0x94>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018666:	687a      	ldr	r2, [r7, #4]
 8018668:	6812      	ldr	r2, [r2, #0]
 801866a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 801866c:	687a      	ldr	r2, [r7, #4]
 801866e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8018670:	4611      	mov	r1, r2
 8018672:	4798      	blx	r3
 8018674:	4603      	mov	r3, r0
 8018676:	2b00      	cmp	r3, #0
 8018678:	d008      	beq.n	801868c <mbedtls_ssl_handshake_wrapup+0x94>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 801867a:	4b11      	ldr	r3, [pc, #68]	; (80186c0 <mbedtls_ssl_handshake_wrapup+0xc8>)
 801867c:	9300      	str	r3, [sp, #0]
 801867e:	f241 438c 	movw	r3, #5260	; 0x148c
 8018682:	4a0e      	ldr	r2, [pc, #56]	; (80186bc <mbedtls_ssl_handshake_wrapup+0xc4>)
 8018684:	2101      	movs	r1, #1
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f7f3 f80c 	bl	800b6a4 <mbedtls_debug_print_msg>
         * we need the handshake and transform structures for that */
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip freeing handshake and transform" ) );
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	f7ff ff71 	bl	8018574 <ssl_handshake_wrapup_free_hs_transform>

    ssl->state++;
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	685b      	ldr	r3, [r3, #4]
 8018696:	1c5a      	adds	r2, r3, #1
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	605a      	str	r2, [r3, #4]

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 801869c:	4b09      	ldr	r3, [pc, #36]	; (80186c4 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801869e:	9300      	str	r3, [sp, #0]
 80186a0:	f44f 53a5 	mov.w	r3, #5280	; 0x14a0
 80186a4:	4a05      	ldr	r2, [pc, #20]	; (80186bc <mbedtls_ssl_handshake_wrapup+0xc4>)
 80186a6:	2103      	movs	r1, #3
 80186a8:	6878      	ldr	r0, [r7, #4]
 80186aa:	f7f2 fffb 	bl	800b6a4 <mbedtls_debug_print_msg>
}
 80186ae:	bf00      	nop
 80186b0:	3710      	adds	r7, #16
 80186b2:	46bd      	mov	sp, r7
 80186b4:	bd80      	pop	{r7, pc}
 80186b6:	bf00      	nop
 80186b8:	08023120 	.word	0x08023120
 80186bc:	080223d4 	.word	0x080223d4
 80186c0:	08023134 	.word	0x08023134
 80186c4:	08023150 	.word	0x08023150

080186c8 <mbedtls_ssl_write_finished>:

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b086      	sub	sp, #24
 80186cc:	af02      	add	r7, sp, #8
 80186ce:	6078      	str	r0, [r7, #4]
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 80186d0:	4b4d      	ldr	r3, [pc, #308]	; (8018808 <mbedtls_ssl_write_finished+0x140>)
 80186d2:	9300      	str	r3, [sp, #0]
 80186d4:	f241 43a7 	movw	r3, #5287	; 0x14a7
 80186d8:	4a4c      	ldr	r2, [pc, #304]	; (801880c <mbedtls_ssl_write_finished+0x144>)
 80186da:	2102      	movs	r1, #2
 80186dc:	6878      	ldr	r0, [r7, #4]
 80186de:	f7f2 ffe1 	bl	800b6a4 <mbedtls_debug_print_msg>

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	68db      	ldr	r3, [r3, #12]
 80186e6:	2b01      	cmp	r3, #1
 80186e8:	dd0e      	ble.n	8018708 <mbedtls_ssl_write_finished+0x40>
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186f4:	68d9      	ldr	r1, [r3, #12]
                       ssl->transform_negotiate->fixed_ivlen;
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186fa:	691b      	ldr	r3, [r3, #16]
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 80186fc:	1acb      	subs	r3, r1, r3
 80186fe:	441a      	add	r2, r3
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8018706:	e005      	b.n	8018714 <mbedtls_ssl_write_finished+0x4c>
    }
    else
        ssl->out_msg = ssl->out_iv;
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801871a:	687a      	ldr	r2, [r7, #4]
 801871c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8018720:	1d11      	adds	r1, r2, #4
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	6812      	ldr	r2, [r2, #0]
 8018726:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 801872a:	f3c2 0200 	ubfx	r2, r2, #0, #1
 801872e:	b2d2      	uxtb	r2, r2
 8018730:	6878      	ldr	r0, [r7, #4]
 8018732:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	68db      	ldr	r3, [r3, #12]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d101      	bne.n	8018740 <mbedtls_ssl_write_finished+0x78>
 801873c:	2324      	movs	r3, #36	; 0x24
 801873e:	e000      	b.n	8018742 <mbedtls_ssl_write_finished+0x7a>
 8018740:	230c      	movs	r3, #12
 8018742:	60fb      	str	r3, [r7, #12]
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	3304      	adds	r3, #4
 8018748:	461a      	mov	r2, r3
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	2216      	movs	r2, #22
 8018754:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801875e:	2214      	movs	r2, #20
 8018760:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018766:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801876a:	2b00      	cmp	r3, #0
 801876c:	d00c      	beq.n	8018788 <mbedtls_ssl_write_finished+0xc0>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018776:	f003 0301 	and.w	r3, r3, #1
 801877a:	b2db      	uxtb	r3, r3
 801877c:	2b00      	cmp	r3, #0
 801877e:	d108      	bne.n	8018792 <mbedtls_ssl_write_finished+0xca>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	220f      	movs	r2, #15
 8018784:	605a      	str	r2, [r3, #4]
 8018786:	e004      	b.n	8018792 <mbedtls_ssl_write_finished+0xca>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	1c5a      	adds	r2, r3, #1
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	605a      	str	r2, [r3, #4]

    /*
     * Switch to our negotiated transform and session parameters for outbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 8018792:	4b1f      	ldr	r3, [pc, #124]	; (8018810 <mbedtls_ssl_write_finished+0x148>)
 8018794:	9300      	str	r3, [sp, #0]
 8018796:	f241 43dd 	movw	r3, #5341	; 0x14dd
 801879a:	4a1c      	ldr	r2, [pc, #112]	; (801880c <mbedtls_ssl_write_finished+0x144>)
 801879c:	2103      	movs	r1, #3
 801879e:	6878      	ldr	r0, [r7, #4]
 80187a0:	f7f2 ff80 	bl	800b6a4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80187aa:	2208      	movs	r2, #8
 80187ac:	2100      	movs	r1, #0
 80187ae:	4618      	mov	r0, r3
 80187b0:	f005 f85a 	bl	801d868 <memset>

    ssl->transform_out = ssl->transform_negotiate;
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	639a      	str	r2, [r3, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	f7fe fc13 	bl	8016ff0 <mbedtls_ssl_write_record>
 80187ca:	60b8      	str	r0, [r7, #8]
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d00c      	beq.n	80187ec <mbedtls_ssl_write_finished+0x124>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 80187d2:	68bb      	ldr	r3, [r7, #8]
 80187d4:	9301      	str	r3, [sp, #4]
 80187d6:	4b0f      	ldr	r3, [pc, #60]	; (8018814 <mbedtls_ssl_write_finished+0x14c>)
 80187d8:	9300      	str	r3, [sp, #0]
 80187da:	f241 5310 	movw	r3, #5392	; 0x1510
 80187de:	4a0b      	ldr	r2, [pc, #44]	; (801880c <mbedtls_ssl_write_finished+0x144>)
 80187e0:	2101      	movs	r1, #1
 80187e2:	6878      	ldr	r0, [r7, #4]
 80187e4:	f7f2 ffe4 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 80187e8:	68bb      	ldr	r3, [r7, #8]
 80187ea:	e009      	b.n	8018800 <mbedtls_ssl_write_finished+0x138>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 80187ec:	4b0a      	ldr	r3, [pc, #40]	; (8018818 <mbedtls_ssl_write_finished+0x150>)
 80187ee:	9300      	str	r3, [sp, #0]
 80187f0:	f241 5314 	movw	r3, #5396	; 0x1514
 80187f4:	4a05      	ldr	r2, [pc, #20]	; (801880c <mbedtls_ssl_write_finished+0x144>)
 80187f6:	2102      	movs	r1, #2
 80187f8:	6878      	ldr	r0, [r7, #4]
 80187fa:	f7f2 ff53 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 80187fe:	2300      	movs	r3, #0
}
 8018800:	4618      	mov	r0, r3
 8018802:	3710      	adds	r7, #16
 8018804:	46bd      	mov	sp, r7
 8018806:	bd80      	pop	{r7, pc}
 8018808:	08023164 	.word	0x08023164
 801880c:	080223d4 	.word	0x080223d4
 8018810:	08023178 	.word	0x08023178
 8018814:	08022d94 	.word	0x08022d94
 8018818:	080231ac 	.word	0x080231ac

0801881c <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 801881c:	b590      	push	{r4, r7, lr}
 801881e:	b08b      	sub	sp, #44	; 0x2c
 8018820:	af02      	add	r7, sp, #8
 8018822:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 8018824:	4b54      	ldr	r3, [pc, #336]	; (8018978 <mbedtls_ssl_parse_finished+0x15c>)
 8018826:	9300      	str	r3, [sp, #0]
 8018828:	f241 5325 	movw	r3, #5413	; 0x1525
 801882c:	4a53      	ldr	r2, [pc, #332]	; (801897c <mbedtls_ssl_parse_finished+0x160>)
 801882e:	2102      	movs	r1, #2
 8018830:	6878      	ldr	r0, [r7, #4]
 8018832:	f7f2 ff37 	bl	800b6a4 <mbedtls_debug_print_msg>

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801883a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801883c:	687a      	ldr	r2, [r7, #4]
 801883e:	6812      	ldr	r2, [r2, #0]
 8018840:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8018844:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8018848:	b2d2      	uxtb	r2, r2
 801884a:	f082 0201 	eor.w	r2, r2, #1
 801884e:	b2d2      	uxtb	r2, r2
 8018850:	f107 010c 	add.w	r1, r7, #12
 8018854:	6878      	ldr	r0, [r7, #4]
 8018856:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8018858:	6878      	ldr	r0, [r7, #4]
 801885a:	f7fe fed7 	bl	801760c <mbedtls_ssl_read_record>
 801885e:	61f8      	str	r0, [r7, #28]
 8018860:	69fb      	ldr	r3, [r7, #28]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d00c      	beq.n	8018880 <mbedtls_ssl_parse_finished+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8018866:	69fb      	ldr	r3, [r7, #28]
 8018868:	9301      	str	r3, [sp, #4]
 801886a:	4b45      	ldr	r3, [pc, #276]	; (8018980 <mbedtls_ssl_parse_finished+0x164>)
 801886c:	9300      	str	r3, [sp, #0]
 801886e:	f241 532b 	movw	r3, #5419	; 0x152b
 8018872:	4a42      	ldr	r2, [pc, #264]	; (801897c <mbedtls_ssl_parse_finished+0x160>)
 8018874:	2101      	movs	r1, #1
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f7f2 ff9a 	bl	800b7b0 <mbedtls_debug_print_ret>
        return( ret );
 801887c:	69fb      	ldr	r3, [r7, #28]
 801887e:	e076      	b.n	801896e <mbedtls_ssl_parse_finished+0x152>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018884:	2b16      	cmp	r3, #22
 8018886:	d00f      	beq.n	80188a8 <mbedtls_ssl_parse_finished+0x8c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8018888:	4b3e      	ldr	r3, [pc, #248]	; (8018984 <mbedtls_ssl_parse_finished+0x168>)
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	f241 5331 	movw	r3, #5425	; 0x1531
 8018890:	4a3a      	ldr	r2, [pc, #232]	; (801897c <mbedtls_ssl_parse_finished+0x160>)
 8018892:	2101      	movs	r1, #1
 8018894:	6878      	ldr	r0, [r7, #4]
 8018896:	f7f2 ff05 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801889a:	220a      	movs	r2, #10
 801889c:	2102      	movs	r1, #2
 801889e:	6878      	ldr	r0, [r7, #4]
 80188a0:	f7ff f850 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80188a4:	4b38      	ldr	r3, [pc, #224]	; (8018988 <mbedtls_ssl_parse_finished+0x16c>)
 80188a6:	e062      	b.n	801896e <mbedtls_ssl_parse_finished+0x152>
#if defined(MBEDTLS_SSL_PROTO_SSL3)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        hash_len = 36;
    else
#endif
        hash_len = 12;
 80188a8:	230c      	movs	r3, #12
 80188aa:	61bb      	str	r3, [r7, #24]

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80188b0:	781b      	ldrb	r3, [r3, #0]
 80188b2:	2b14      	cmp	r3, #20
 80188b4:	d109      	bne.n	80188ca <mbedtls_ssl_parse_finished+0xae>
        ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) + hash_len )
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80188ba:	6878      	ldr	r0, [r7, #4]
 80188bc:	f7fc fc38 	bl	8015130 <mbedtls_ssl_hs_hdr_len>
 80188c0:	4602      	mov	r2, r0
 80188c2:	69bb      	ldr	r3, [r7, #24]
 80188c4:	4413      	add	r3, r2
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 80188c6:	429c      	cmp	r4, r3
 80188c8:	d00f      	beq.n	80188ea <mbedtls_ssl_parse_finished+0xce>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 80188ca:	4b2e      	ldr	r3, [pc, #184]	; (8018984 <mbedtls_ssl_parse_finished+0x168>)
 80188cc:	9300      	str	r3, [sp, #0]
 80188ce:	f241 5342 	movw	r3, #5442	; 0x1542
 80188d2:	4a2a      	ldr	r2, [pc, #168]	; (801897c <mbedtls_ssl_parse_finished+0x160>)
 80188d4:	2101      	movs	r1, #1
 80188d6:	6878      	ldr	r0, [r7, #4]
 80188d8:	f7f2 fee4 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80188dc:	2232      	movs	r2, #50	; 0x32
 80188de:	2102      	movs	r1, #2
 80188e0:	6878      	ldr	r0, [r7, #4]
 80188e2:	f7ff f82f 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 80188e6:	4b29      	ldr	r3, [pc, #164]	; (801898c <mbedtls_ssl_parse_finished+0x170>)
 80188e8:	e041      	b.n	801896e <mbedtls_ssl_parse_finished+0x152>
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80188ee:	6878      	ldr	r0, [r7, #4]
 80188f0:	f7fc fc1e 	bl	8015130 <mbedtls_ssl_hs_hdr_len>
 80188f4:	4603      	mov	r3, r0
 80188f6:	4423      	add	r3, r4
 80188f8:	f107 010c 	add.w	r1, r7, #12
 80188fc:	69ba      	ldr	r2, [r7, #24]
 80188fe:	4618      	mov	r0, r3
 8018900:	f7fc fc21 	bl	8015146 <mbedtls_ssl_safer_memcmp>
 8018904:	4603      	mov	r3, r0
 8018906:	2b00      	cmp	r3, #0
 8018908:	d00f      	beq.n	801892a <mbedtls_ssl_parse_finished+0x10e>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801890a:	4b1e      	ldr	r3, [pc, #120]	; (8018984 <mbedtls_ssl_parse_finished+0x168>)
 801890c:	9300      	str	r3, [sp, #0]
 801890e:	f241 534b 	movw	r3, #5451	; 0x154b
 8018912:	4a1a      	ldr	r2, [pc, #104]	; (801897c <mbedtls_ssl_parse_finished+0x160>)
 8018914:	2101      	movs	r1, #1
 8018916:	6878      	ldr	r0, [r7, #4]
 8018918:	f7f2 fec4 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801891c:	2232      	movs	r2, #50	; 0x32
 801891e:	2102      	movs	r1, #2
 8018920:	6878      	ldr	r0, [r7, #4]
 8018922:	f7ff f80f 	bl	8017944 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 8018926:	4b19      	ldr	r3, [pc, #100]	; (801898c <mbedtls_ssl_parse_finished+0x170>)
 8018928:	e021      	b.n	801896e <mbedtls_ssl_parse_finished+0x152>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801892e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8018932:	2b00      	cmp	r3, #0
 8018934:	d00c      	beq.n	8018950 <mbedtls_ssl_parse_finished+0x134>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801893e:	f003 0301 	and.w	r3, r3, #1
 8018942:	b2db      	uxtb	r3, r3
 8018944:	2b00      	cmp	r3, #0
 8018946:	d108      	bne.n	801895a <mbedtls_ssl_parse_finished+0x13e>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	220a      	movs	r2, #10
 801894c:	605a      	str	r2, [r3, #4]
 801894e:	e004      	b.n	801895a <mbedtls_ssl_parse_finished+0x13e>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	685b      	ldr	r3, [r3, #4]
 8018954:	1c5a      	adds	r2, r3, #1
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 801895a:	4b0d      	ldr	r3, [pc, #52]	; (8018990 <mbedtls_ssl_parse_finished+0x174>)
 801895c:	9300      	str	r3, [sp, #0]
 801895e:	f241 5369 	movw	r3, #5481	; 0x1569
 8018962:	4a06      	ldr	r2, [pc, #24]	; (801897c <mbedtls_ssl_parse_finished+0x160>)
 8018964:	2102      	movs	r1, #2
 8018966:	6878      	ldr	r0, [r7, #4]
 8018968:	f7f2 fe9c 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( 0 );
 801896c:	2300      	movs	r3, #0
}
 801896e:	4618      	mov	r0, r3
 8018970:	3724      	adds	r7, #36	; 0x24
 8018972:	46bd      	mov	sp, r7
 8018974:	bd90      	pop	{r4, r7, pc}
 8018976:	bf00      	nop
 8018978:	080231c0 	.word	0x080231c0
 801897c:	080223d4 	.word	0x080223d4
 8018980:	08022e78 	.word	0x08022e78
 8018984:	080231d4 	.word	0x080231d4
 8018988:	ffff8900 	.word	0xffff8900
 801898c:	ffff8180 	.word	0xffff8180
 8018990:	080231ec 	.word	0x080231ec

08018994 <ssl_handshake_params_init>:

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b082      	sub	sp, #8
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 801899c:	f44f 7284 	mov.w	r2, #264	; 0x108
 80189a0:	2100      	movs	r1, #0
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f004 ff60 	bl	801d868 <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	3308      	adds	r3, #8
 80189ac:	4618      	mov	r0, r3
 80189ae:	f7f8 fdd5 	bl	801155c <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	3308      	adds	r3, #8
 80189b6:	2100      	movs	r1, #0
 80189b8:	4618      	mov	r0, r3
 80189ba:	f7f8 fdfd 	bl	80115b8 <mbedtls_sha256_starts_ret>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	4a04      	ldr	r2, [pc, #16]	; (80189d4 <ssl_handshake_params_init+0x40>)
 80189c2:	675a      	str	r2, [r3, #116]	; 0x74

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    mbedtls_ssl_sig_hash_set_init( &handshake->hash_algs );
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	4618      	mov	r0, r3
 80189c8:	f7fc fb78 	bl	80150bc <mbedtls_ssl_sig_hash_set_init>
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
#endif
}
 80189cc:	bf00      	nop
 80189ce:	3708      	adds	r7, #8
 80189d0:	46bd      	mov	sp, r7
 80189d2:	bd80      	pop	{r7, pc}
 80189d4:	08018401 	.word	0x08018401

080189d8 <ssl_transform_init>:

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b082      	sub	sp, #8
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 80189e0:	22d0      	movs	r2, #208	; 0xd0
 80189e2:	2100      	movs	r1, #0
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f004 ff3f 	bl	801d868 <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	3350      	adds	r3, #80	; 0x50
 80189ee:	4618      	mov	r0, r3
 80189f0:	f7f2 f98e 	bl	800ad10 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	3390      	adds	r3, #144	; 0x90
 80189f8:	4618      	mov	r0, r3
 80189fa:	f7f2 f989 	bl	800ad10 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	3338      	adds	r3, #56	; 0x38
 8018a02:	4618      	mov	r0, r3
 8018a04:	f7f5 faa4 	bl	800df50 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	3344      	adds	r3, #68	; 0x44
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	f7f5 fa9f 	bl	800df50 <mbedtls_md_init>
}
 8018a12:	bf00      	nop
 8018a14:	3708      	adds	r7, #8
 8018a16:	46bd      	mov	sp, r7
 8018a18:	bd80      	pop	{r7, pc}

08018a1a <mbedtls_ssl_session_init>:

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
 8018a1a:	b580      	push	{r7, lr}
 8018a1c:	b082      	sub	sp, #8
 8018a1e:	af00      	add	r7, sp, #0
 8018a20:	6078      	str	r0, [r7, #4]
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 8018a22:	2264      	movs	r2, #100	; 0x64
 8018a24:	2100      	movs	r1, #0
 8018a26:	6878      	ldr	r0, [r7, #4]
 8018a28:	f004 ff1e 	bl	801d868 <memset>
}
 8018a2c:	bf00      	nop
 8018a2e:	3708      	adds	r7, #8
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}

08018a34 <ssl_handshake_init>:

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b084      	sub	sp, #16
 8018a38:	af02      	add	r7, sp, #8
 8018a3a:	6078      	str	r0, [r7, #4]
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d004      	beq.n	8018a4e <ssl_handshake_init+0x1a>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f000 fa8d 	bl	8018f68 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d004      	beq.n	8018a60 <ssl_handshake_init+0x2c>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	f000 fabe 	bl	8018fdc <mbedtls_ssl_session_free>
    if( ssl->handshake )
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d004      	beq.n	8018a72 <ssl_handshake_init+0x3e>
        mbedtls_ssl_handshake_free( ssl->handshake );
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f000 fa9f 	bl	8018fb0 <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d107      	bne.n	8018a8a <ssl_handshake_init+0x56>
    {
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 8018a7a:	21d0      	movs	r1, #208	; 0xd0
 8018a7c:	2001      	movs	r0, #1
 8018a7e:	f004 fe79 	bl	801d774 <calloc>
 8018a82:	4603      	mov	r3, r0
 8018a84:	461a      	mov	r2, r3
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d107      	bne.n	8018aa2 <ssl_handshake_init+0x6e>
    {
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 8018a92:	2164      	movs	r1, #100	; 0x64
 8018a94:	2001      	movs	r0, #1
 8018a96:	f004 fe6d 	bl	801d774 <calloc>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	461a      	mov	r2, r3
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d108      	bne.n	8018abc <ssl_handshake_init+0x88>
    {
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 8018aaa:	f44f 7184 	mov.w	r1, #264	; 0x108
 8018aae:	2001      	movs	r0, #1
 8018ab0:	f004 fe60 	bl	801d774 <calloc>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	461a      	mov	r2, r3
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d007      	beq.n	8018ad4 <ssl_handshake_init+0xa0>
        ssl->transform_negotiate == NULL ||
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if( ssl->handshake == NULL ||
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d003      	beq.n	8018ad4 <ssl_handshake_init+0xa0>
        ssl->session_negotiate == NULL )
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        ssl->transform_negotiate == NULL ||
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d122      	bne.n	8018b1a <ssl_handshake_init+0xe6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 8018ad4:	4b1b      	ldr	r3, [pc, #108]	; (8018b44 <ssl_handshake_init+0x110>)
 8018ad6:	9300      	str	r3, [sp, #0]
 8018ad8:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8018adc:	4a1a      	ldr	r2, [pc, #104]	; (8018b48 <ssl_handshake_init+0x114>)
 8018ade:	2101      	movs	r1, #1
 8018ae0:	6878      	ldr	r0, [r7, #4]
 8018ae2:	f7f2 fddf 	bl	800b6a4 <mbedtls_debug_print_msg>

        mbedtls_free( ssl->handshake );
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018aea:	4618      	mov	r0, r3
 8018aec:	f004 fe7c 	bl	801d7e8 <free>
        mbedtls_free( ssl->transform_negotiate );
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018af4:	4618      	mov	r0, r3
 8018af6:	f004 fe77 	bl	801d7e8 <free>
        mbedtls_free( ssl->session_negotiate );
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018afe:	4618      	mov	r0, r3
 8018b00:	f004 fe72 	bl	801d7e8 <free>

        ssl->handshake = NULL;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2200      	movs	r2, #0
 8018b08:	631a      	str	r2, [r3, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	641a      	str	r2, [r3, #64]	; 0x40
        ssl->session_negotiate = NULL;
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	2200      	movs	r2, #0
 8018b14:	62da      	str	r2, [r3, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8018b16:	4b0d      	ldr	r3, [pc, #52]	; (8018b4c <ssl_handshake_init+0x118>)
 8018b18:	e00f      	b.n	8018b3a <ssl_handshake_init+0x106>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f7ff ff7b 	bl	8018a1a <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b28:	4618      	mov	r0, r3
 8018b2a:	f7ff ff55 	bl	80189d8 <ssl_transform_init>
    ssl_handshake_params_init( ssl->handshake );
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b32:	4618      	mov	r0, r3
 8018b34:	f7ff ff2e 	bl	8018994 <ssl_handshake_params_init>

        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
 8018b38:	2300      	movs	r3, #0
}
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	3708      	adds	r7, #8
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
 8018b42:	bf00      	nop
 8018b44:	08023200 	.word	0x08023200
 8018b48:	080223d4 	.word	0x080223d4
 8018b4c:	ffff8100 	.word	0xffff8100

08018b50 <mbedtls_ssl_init>:

/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 8018b58:	22b4      	movs	r2, #180	; 0xb4
 8018b5a:	2100      	movs	r1, #0
 8018b5c:	6878      	ldr	r0, [r7, #4]
 8018b5e:	f004 fe83 	bl	801d868 <memset>
}
 8018b62:	bf00      	nop
 8018b64:	3708      	adds	r7, #8
 8018b66:	46bd      	mov	sp, r7
 8018b68:	bd80      	pop	{r7, pc}
	...

08018b6c <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b086      	sub	sp, #24
 8018b70:	af02      	add	r7, sp, #8
 8018b72:	6078      	str	r0, [r7, #4]
 8018b74:	6039      	str	r1, [r7, #0]
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;
 8018b76:	f241 133d 	movw	r3, #4413	; 0x113d
 8018b7a:	60fb      	str	r3, [r7, #12]

    ssl->conf = conf;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	683a      	ldr	r2, [r7, #0]
 8018b80:	601a      	str	r2, [r3, #0]

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 8018b82:	68f9      	ldr	r1, [r7, #12]
 8018b84:	2001      	movs	r0, #1
 8018b86:	f004 fdf5 	bl	801d774 <calloc>
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	461a      	mov	r2, r3
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	651a      	str	r2, [r3, #80]	; 0x50
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d00d      	beq.n	8018bb6 <mbedtls_ssl_setup+0x4a>
        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
 8018b9a:	68f9      	ldr	r1, [r7, #12]
 8018b9c:	2001      	movs	r0, #1
 8018b9e:	f004 fde9 	bl	801d774 <calloc>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	461a      	mov	r2, r3
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d114      	bne.n	8018be0 <mbedtls_ssl_setup+0x74>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	9301      	str	r3, [sp, #4]
 8018bba:	4b31      	ldr	r3, [pc, #196]	; (8018c80 <mbedtls_ssl_setup+0x114>)
 8018bbc:	9300      	str	r3, [sp, #0]
 8018bbe:	f241 6329 	movw	r3, #5673	; 0x1629
 8018bc2:	4a30      	ldr	r2, [pc, #192]	; (8018c84 <mbedtls_ssl_setup+0x118>)
 8018bc4:	2101      	movs	r1, #1
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f7f2 fd6c 	bl	800b6a4 <mbedtls_debug_print_msg>
        mbedtls_free( ssl->in_buf );
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	f004 fe09 	bl	801d7e8 <free>
        ssl->in_buf = NULL;
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	2200      	movs	r2, #0
 8018bda:	651a      	str	r2, [r3, #80]	; 0x50
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8018bdc:	4b2a      	ldr	r3, [pc, #168]	; (8018c88 <mbedtls_ssl_setup+0x11c>)
 8018bde:	e04b      	b.n	8018c78 <mbedtls_ssl_setup+0x10c>
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018bf2:	f103 0208 	add.w	r2, r3, #8
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018c02:	f103 020b 	add.w	r2, r3, #11
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018c12:	f103 020d 	add.w	r2, r3, #13
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018c22:	f103 020d 	add.w	r2, r3, #13
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	655a      	str	r2, [r3, #84]	; 0x54
        ssl->in_hdr = ssl->in_buf +  8;
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c38:	f103 0208 	add.w	r2, r3, #8
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	659a      	str	r2, [r3, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c44:	f103 020b 	add.w	r2, r3, #11
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	65da      	str	r2, [r3, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c50:	f103 020d 	add.w	r2, r3, #13
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	661a      	str	r2, [r3, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c5c:	f103 020d 	add.w	r2, r3, #13
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	665a      	str	r2, [r3, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f7ff fee5 	bl	8018a34 <ssl_handshake_init>
 8018c6a:	60b8      	str	r0, [r7, #8]
 8018c6c:	68bb      	ldr	r3, [r7, #8]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d001      	beq.n	8018c76 <mbedtls_ssl_setup+0x10a>
        return( ret );
 8018c72:	68bb      	ldr	r3, [r7, #8]
 8018c74:	e000      	b.n	8018c78 <mbedtls_ssl_setup+0x10c>

    return( 0 );
 8018c76:	2300      	movs	r3, #0
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3710      	adds	r7, #16
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}
 8018c80:	08022ea8 	.word	0x08022ea8
 8018c84:	080223d4 	.word	0x080223d4
 8018c88:	ffff8100 	.word	0xffff8100

08018c8c <mbedtls_ssl_conf_endpoint>:

/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
 8018c8c:	b480      	push	{r7}
 8018c8e:	b083      	sub	sp, #12
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
 8018c94:	6039      	str	r1, [r7, #0]
    conf->endpoint   = endpoint;
 8018c96:	683b      	ldr	r3, [r7, #0]
 8018c98:	f003 0301 	and.w	r3, r3, #1
 8018c9c:	b2d9      	uxtb	r1, r3
 8018c9e:	687a      	ldr	r2, [r7, #4]
 8018ca0:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8018ca4:	f361 0300 	bfi	r3, r1, #0, #1
 8018ca8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8018cac:	bf00      	nop
 8018cae:	370c      	adds	r7, #12
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb6:	4770      	bx	lr

08018cb8 <mbedtls_ssl_conf_transport>:

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
 8018cb8:	b480      	push	{r7}
 8018cba:	b083      	sub	sp, #12
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	6039      	str	r1, [r7, #0]
    conf->transport = transport;
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	f003 0301 	and.w	r3, r3, #1
 8018cc8:	b2d9      	uxtb	r1, r3
 8018cca:	687a      	ldr	r2, [r7, #4]
 8018ccc:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8018cd0:	f361 0341 	bfi	r3, r1, #1, #1
 8018cd4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8018cd8:	bf00      	nop
 8018cda:	370c      	adds	r7, #12
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce2:	4770      	bx	lr

08018ce4 <mbedtls_ssl_conf_authmode>:
    conf->hs_timeout_max = max;
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
 8018ce4:	b480      	push	{r7}
 8018ce6:	b083      	sub	sp, #12
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
 8018cec:	6039      	str	r1, [r7, #0]
    conf->authmode   = authmode;
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	f003 0303 	and.w	r3, r3, #3
 8018cf4:	b2d9      	uxtb	r1, r3
 8018cf6:	687a      	ldr	r2, [r7, #4]
 8018cf8:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8018cfc:	f361 0383 	bfi	r3, r1, #2, #2
 8018d00:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8018d04:	bf00      	nop
 8018d06:	370c      	adds	r7, #12
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0e:	4770      	bx	lr

08018d10 <mbedtls_ssl_conf_rng>:
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
 8018d10:	b480      	push	{r7}
 8018d12:	b085      	sub	sp, #20
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	60f8      	str	r0, [r7, #12]
 8018d18:	60b9      	str	r1, [r7, #8]
 8018d1a:	607a      	str	r2, [r7, #4]
    conf->f_rng      = f_rng;
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	68ba      	ldr	r2, [r7, #8]
 8018d20:	619a      	str	r2, [r3, #24]
    conf->p_rng      = p_rng;
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	687a      	ldr	r2, [r7, #4]
 8018d26:	61da      	str	r2, [r3, #28]
}
 8018d28:	bf00      	nop
 8018d2a:	3714      	adds	r7, #20
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d32:	4770      	bx	lr

08018d34 <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
 8018d34:	b480      	push	{r7}
 8018d36:	b085      	sub	sp, #20
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	60f8      	str	r0, [r7, #12]
 8018d3c:	60b9      	str	r1, [r7, #8]
 8018d3e:	607a      	str	r2, [r7, #4]
    conf->f_dbg      = f_dbg;
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	68ba      	ldr	r2, [r7, #8]
 8018d44:	611a      	str	r2, [r3, #16]
    conf->p_dbg      = p_dbg;
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	687a      	ldr	r2, [r7, #4]
 8018d4a:	615a      	str	r2, [r3, #20]
}
 8018d4c:	bf00      	nop
 8018d4e:	3714      	adds	r7, #20
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr

08018d58 <mbedtls_ssl_set_bio>:
void mbedtls_ssl_set_bio( mbedtls_ssl_context *ssl,
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
 8018d58:	b480      	push	{r7}
 8018d5a:	b085      	sub	sp, #20
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	60f8      	str	r0, [r7, #12]
 8018d60:	60b9      	str	r1, [r7, #8]
 8018d62:	607a      	str	r2, [r7, #4]
 8018d64:	603b      	str	r3, [r7, #0]
    ssl->p_bio          = p_bio;
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	68ba      	ldr	r2, [r7, #8]
 8018d6a:	61da      	str	r2, [r3, #28]
    ssl->f_send         = f_send;
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	687a      	ldr	r2, [r7, #4]
 8018d70:	611a      	str	r2, [r3, #16]
    ssl->f_recv         = f_recv;
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	683a      	ldr	r2, [r7, #0]
 8018d76:	615a      	str	r2, [r3, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	69ba      	ldr	r2, [r7, #24]
 8018d7c:	619a      	str	r2, [r3, #24]
}
 8018d7e:	bf00      	nop
 8018d80:	3714      	adds	r7, #20
 8018d82:	46bd      	mov	sp, r7
 8018d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d88:	4770      	bx	lr

08018d8a <mbedtls_ssl_conf_ca_chain>:
}

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
 8018d8a:	b480      	push	{r7}
 8018d8c:	b085      	sub	sp, #20
 8018d8e:	af00      	add	r7, sp, #0
 8018d90:	60f8      	str	r0, [r7, #12]
 8018d92:	60b9      	str	r1, [r7, #8]
 8018d94:	607a      	str	r2, [r7, #4]
    conf->ca_chain   = ca_chain;
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	68ba      	ldr	r2, [r7, #8]
 8018d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    conf->ca_crl     = ca_crl;
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	687a      	ldr	r2, [r7, #4]
 8018da0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8018da2:	bf00      	nop
 8018da4:	3714      	adds	r7, #20
 8018da6:	46bd      	mov	sp, r7
 8018da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dac:	4770      	bx	lr
	...

08018db0 <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
 8018db0:	b590      	push	{r4, r7, lr}
 8018db2:	b085      	sub	sp, #20
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	6039      	str	r1, [r7, #0]
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
 8018dba:	2300      	movs	r3, #0
 8018dbc:	60fb      	str	r3, [r7, #12]

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
 8018dbe:	683b      	ldr	r3, [r7, #0]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d008      	beq.n	8018dd6 <mbedtls_ssl_set_hostname+0x26>
    {
        hostname_len = strlen( hostname );
 8018dc4:	6838      	ldr	r0, [r7, #0]
 8018dc6:	f7e7 fa03 	bl	80001d0 <strlen>
 8018dca:	60f8      	str	r0, [r7, #12]

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	2bff      	cmp	r3, #255	; 0xff
 8018dd0:	d901      	bls.n	8018dd6 <mbedtls_ssl_set_hostname+0x26>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8018dd2:	4b24      	ldr	r3, [pc, #144]	; (8018e64 <mbedtls_ssl_set_hostname+0xb4>)
 8018dd4:	e042      	b.n	8018e5c <mbedtls_ssl_set_hostname+0xac>
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d013      	beq.n	8018e08 <mbedtls_ssl_set_hostname+0x58>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7e7 f9ef 	bl	80001d0 <strlen>
 8018df2:	4603      	mov	r3, r0
 8018df4:	4619      	mov	r1, r3
 8018df6:	4620      	mov	r0, r4
 8018df8:	f7fc f9d7 	bl	80151aa <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018e02:	4618      	mov	r0, r3
 8018e04:	f004 fcf0 	bl	801d7e8 <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
 8018e08:	683b      	ldr	r3, [r7, #0]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d104      	bne.n	8018e18 <mbedtls_ssl_set_hostname+0x68>
    {
        ssl->hostname = NULL;
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	2200      	movs	r2, #0
 8018e12:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8018e16:	e020      	b.n	8018e5a <mbedtls_ssl_set_hostname+0xaa>
    }
    else
    {
        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	3301      	adds	r3, #1
 8018e1c:	4619      	mov	r1, r3
 8018e1e:	2001      	movs	r0, #1
 8018e20:	f004 fca8 	bl	801d774 <calloc>
 8018e24:	4603      	mov	r3, r0
 8018e26:	461a      	mov	r2, r3
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        if( ssl->hostname == NULL )
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d101      	bne.n	8018e3c <mbedtls_ssl_set_hostname+0x8c>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8018e38:	4b0b      	ldr	r3, [pc, #44]	; (8018e68 <mbedtls_ssl_set_hostname+0xb8>)
 8018e3a:	e00f      	b.n	8018e5c <mbedtls_ssl_set_hostname+0xac>

        memcpy( ssl->hostname, hostname, hostname_len );
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018e42:	68fa      	ldr	r2, [r7, #12]
 8018e44:	6839      	ldr	r1, [r7, #0]
 8018e46:	4618      	mov	r0, r3
 8018e48:	f004 fce6 	bl	801d818 <memcpy>

        ssl->hostname[hostname_len] = '\0';
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	4413      	add	r3, r2
 8018e56:	2200      	movs	r2, #0
 8018e58:	701a      	strb	r2, [r3, #0]
    }

    return( 0 );
 8018e5a:	2300      	movs	r3, #0
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	3714      	adds	r7, #20
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd90      	pop	{r4, r7, pc}
 8018e64:	ffff8f00 	.word	0xffff8f00
 8018e68:	ffff8100 	.word	0xffff8100

08018e6c <mbedtls_ssl_get_ciphersuite>:

    return( 0xFFFFFFFF );
}

const char *mbedtls_ssl_get_ciphersuite( const mbedtls_ssl_context *ssl )
{
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b082      	sub	sp, #8
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
    if( ssl == NULL || ssl->session == NULL )
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d003      	beq.n	8018e82 <mbedtls_ssl_get_ciphersuite+0x16>
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d101      	bne.n	8018e86 <mbedtls_ssl_get_ciphersuite+0x1a>
        return( NULL );
 8018e82:	2300      	movs	r3, #0
 8018e84:	e006      	b.n	8018e94 <mbedtls_ssl_get_ciphersuite+0x28>

    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f7fa fb57 	bl	8013540 <mbedtls_ssl_get_ciphersuite_name>
 8018e92:	4603      	mov	r3, r0
}
 8018e94:	4618      	mov	r0, r3
 8018e96:	3708      	adds	r7, #8
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd80      	pop	{r7, pc}

08018e9c <mbedtls_ssl_handshake_step>:

/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b084      	sub	sp, #16
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 8018ea4:	4b0f      	ldr	r3, [pc, #60]	; (8018ee4 <mbedtls_ssl_handshake_step+0x48>)
 8018ea6:	60fb      	str	r3, [r7, #12]

    if( ssl == NULL || ssl->conf == NULL )
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d003      	beq.n	8018eb6 <mbedtls_ssl_handshake_step+0x1a>
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d104      	bne.n	8018ec0 <mbedtls_ssl_handshake_step+0x24>
    {
    	printf("----------------------handshake step bad input --------------------------\r\n");
 8018eb6:	480c      	ldr	r0, [pc, #48]	; (8018ee8 <mbedtls_ssl_handshake_step+0x4c>)
 8018eb8:	f004 fe5a 	bl	801db70 <puts>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8018ebc:	4b0b      	ldr	r3, [pc, #44]	; (8018eec <mbedtls_ssl_handshake_step+0x50>)
 8018ebe:	e00d      	b.n	8018edc <mbedtls_ssl_handshake_step+0x40>
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018ec8:	f003 0301 	and.w	r3, r3, #1
 8018ecc:	b2db      	uxtb	r3, r3
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d103      	bne.n	8018eda <mbedtls_ssl_handshake_step+0x3e>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 8018ed2:	6878      	ldr	r0, [r7, #4]
 8018ed4:	f7fc f814 	bl	8014f00 <mbedtls_ssl_handshake_client_step>
 8018ed8:	60f8      	str	r0, [r7, #12]
#if defined(MBEDTLS_SSL_SRV_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
 8018eda:	68fb      	ldr	r3, [r7, #12]
}
 8018edc:	4618      	mov	r0, r3
 8018ede:	3710      	adds	r7, #16
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}
 8018ee4:	ffff8f80 	.word	0xffff8f80
 8018ee8:	0802324c 	.word	0x0802324c
 8018eec:	ffff8f00 	.word	0xffff8f00

08018ef0 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b086      	sub	sp, #24
 8018ef4:	af02      	add	r7, sp, #8
 8018ef6:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8018ef8:	2300      	movs	r3, #0
 8018efa:	60fb      	str	r3, [r7, #12]

    if( ssl == NULL || ssl->conf == NULL )
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d003      	beq.n	8018f0a <mbedtls_ssl_handshake+0x1a>
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d101      	bne.n	8018f0e <mbedtls_ssl_handshake+0x1e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8018f0a:	4b13      	ldr	r3, [pc, #76]	; (8018f58 <mbedtls_ssl_handshake+0x68>)
 8018f0c:	e020      	b.n	8018f50 <mbedtls_ssl_handshake+0x60>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 8018f0e:	4b13      	ldr	r3, [pc, #76]	; (8018f5c <mbedtls_ssl_handshake+0x6c>)
 8018f10:	9300      	str	r3, [sp, #0]
 8018f12:	f641 2306 	movw	r3, #6662	; 0x1a06
 8018f16:	4a12      	ldr	r2, [pc, #72]	; (8018f60 <mbedtls_ssl_handshake+0x70>)
 8018f18:	2102      	movs	r1, #2
 8018f1a:	6878      	ldr	r0, [r7, #4]
 8018f1c:	f7f2 fbc2 	bl	800b6a4 <mbedtls_debug_print_msg>

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 8018f20:	e006      	b.n	8018f30 <mbedtls_ssl_handshake+0x40>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 8018f22:	6878      	ldr	r0, [r7, #4]
 8018f24:	f7ff ffba 	bl	8018e9c <mbedtls_ssl_handshake_step>
 8018f28:	60f8      	str	r0, [r7, #12]

        if( ret != 0 )
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d104      	bne.n	8018f3a <mbedtls_ssl_handshake+0x4a>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	685b      	ldr	r3, [r3, #4]
 8018f34:	2b10      	cmp	r3, #16
 8018f36:	d1f4      	bne.n	8018f22 <mbedtls_ssl_handshake+0x32>
 8018f38:	e000      	b.n	8018f3c <mbedtls_ssl_handshake+0x4c>
            break;
 8018f3a:	bf00      	nop
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 8018f3c:	4b09      	ldr	r3, [pc, #36]	; (8018f64 <mbedtls_ssl_handshake+0x74>)
 8018f3e:	9300      	str	r3, [sp, #0]
 8018f40:	f641 2310 	movw	r3, #6672	; 0x1a10
 8018f44:	4a06      	ldr	r2, [pc, #24]	; (8018f60 <mbedtls_ssl_handshake+0x70>)
 8018f46:	2102      	movs	r1, #2
 8018f48:	6878      	ldr	r0, [r7, #4]
 8018f4a:	f7f2 fbab 	bl	800b6a4 <mbedtls_debug_print_msg>

    return( ret );
 8018f4e:	68fb      	ldr	r3, [r7, #12]
}
 8018f50:	4618      	mov	r0, r3
 8018f52:	3710      	adds	r7, #16
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd80      	pop	{r7, pc}
 8018f58:	ffff8f00 	.word	0xffff8f00
 8018f5c:	08023298 	.word	0x08023298
 8018f60:	080223d4 	.word	0x080223d4
 8018f64:	080232a8 	.word	0x080232a8

08018f68 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b082      	sub	sp, #8
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	6078      	str	r0, [r7, #4]
    if( transform == NULL )
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d018      	beq.n	8018fa8 <mbedtls_ssl_transform_free+0x40>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	3350      	adds	r3, #80	; 0x50
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f7f1 fed5 	bl	800ad2a <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	3390      	adds	r3, #144	; 0x90
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7f1 fed0 	bl	800ad2a <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	3338      	adds	r3, #56	; 0x38
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f7f4 ffeb 	bl	800df6a <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	3344      	adds	r3, #68	; 0x44
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7f4 ffe6 	bl	800df6a <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 8018f9e:	21d0      	movs	r1, #208	; 0xd0
 8018fa0:	6878      	ldr	r0, [r7, #4]
 8018fa2:	f7fc f902 	bl	80151aa <mbedtls_zeroize>
 8018fa6:	e000      	b.n	8018faa <mbedtls_ssl_transform_free+0x42>
        return;
 8018fa8:	bf00      	nop
}
 8018faa:	3708      	adds	r7, #8
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}

08018fb0 <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b082      	sub	sp, #8
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
    if( handshake == NULL )
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d00a      	beq.n	8018fd4 <mbedtls_ssl_handshake_free+0x24>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	3308      	adds	r3, #8
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7f8 fad7 	bl	8011576 <mbedtls_sha256_free>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 8018fc8:	f44f 7184 	mov.w	r1, #264	; 0x108
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	f7fc f8ec 	bl	80151aa <mbedtls_zeroize>
 8018fd2:	e000      	b.n	8018fd6 <mbedtls_ssl_handshake_free+0x26>
        return;
 8018fd4:	bf00      	nop
}
 8018fd6:	3708      	adds	r7, #8
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bd80      	pop	{r7, pc}

08018fdc <mbedtls_ssl_session_free>:

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b082      	sub	sp, #8
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
    if( session == NULL )
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d012      	beq.n	8019010 <mbedtls_ssl_session_free+0x34>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d009      	beq.n	8019006 <mbedtls_ssl_session_free+0x2a>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f003 fa7c 	bl	801c4f4 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019000:	4618      	mov	r0, r3
 8019002:	f004 fbf1 	bl	801d7e8 <free>

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 8019006:	2164      	movs	r1, #100	; 0x64
 8019008:	6878      	ldr	r0, [r7, #4]
 801900a:	f7fc f8ce 	bl	80151aa <mbedtls_zeroize>
 801900e:	e000      	b.n	8019012 <mbedtls_ssl_session_free+0x36>
        return;
 8019010:	bf00      	nop
}
 8019012:	3708      	adds	r7, #8
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}

08019018 <mbedtls_ssl_config_init>:

/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b082      	sub	sp, #8
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 8019020:	2254      	movs	r2, #84	; 0x54
 8019022:	2100      	movs	r1, #0
 8019024:	6878      	ldr	r0, [r7, #4]
 8019026:	f004 fc1f 	bl	801d868 <memset>
}
 801902a:	bf00      	nop
 801902c:	3708      	adds	r7, #8
 801902e:	46bd      	mov	sp, r7
 8019030:	bd80      	pop	{r7, pc}
	...

08019034 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b084      	sub	sp, #16
 8019038:	af00      	add	r7, sp, #0
 801903a:	60f8      	str	r0, [r7, #12]
 801903c:	60b9      	str	r1, [r7, #8]
 801903e:	607a      	str	r2, [r7, #4]
 8019040:	603b      	str	r3, [r7, #0]
    int ret;
#endif

    /* Use the functions here so that they are covered in tests,
     * but otherwise access member directly for efficiency */
    mbedtls_ssl_conf_endpoint( conf, endpoint );
 8019042:	68b9      	ldr	r1, [r7, #8]
 8019044:	68f8      	ldr	r0, [r7, #12]
 8019046:	f7ff fe21 	bl	8018c8c <mbedtls_ssl_conf_endpoint>
    mbedtls_ssl_conf_transport( conf, transport );
 801904a:	6879      	ldr	r1, [r7, #4]
 801904c:	68f8      	ldr	r0, [r7, #12]
 801904e:	f7ff fe33 	bl	8018cb8 <mbedtls_ssl_conf_transport>

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d107      	bne.n	8019068 <mbedtls_ssl_config_defaults+0x34>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 8019058:	68fa      	ldr	r2, [r7, #12]
 801905a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801905e:	2102      	movs	r1, #2
 8019060:	f361 0383 	bfi	r3, r1, #2, #2
 8019064:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	2b02      	cmp	r3, #2
 801906c:	d125      	bne.n	80190ba <mbedtls_ssl_config_defaults+0x86>
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	2203      	movs	r2, #3
 8019072:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	2203      	movs	r2, #3
 801907a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	2203      	movs	r2, #3
 8019082:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	2203      	movs	r2, #3
 801908a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	4a20      	ldr	r2, [pc, #128]	; (8019114 <mbedtls_ssl_config_defaults+0xe0>)
 8019092:	60da      	str	r2, [r3, #12]
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	68da      	ldr	r2, [r3, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	609a      	str	r2, [r3, #8]
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	689a      	ldr	r2, [r3, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	605a      	str	r2, [r3, #4]
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	685a      	ldr	r2, [r3, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	601a      	str	r2, [r3, #0]
                                   ssl_preset_suiteb_ciphersuites;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	4a1a      	ldr	r2, [pc, #104]	; (8019118 <mbedtls_ssl_config_defaults+0xe4>)
 80190b0:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	4a19      	ldr	r2, [pc, #100]	; (801911c <mbedtls_ssl_config_defaults+0xe8>)
 80190b6:	645a      	str	r2, [r3, #68]	; 0x44
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = ssl_preset_suiteb_curves;
#endif
            break;
 80190b8:	e026      	b.n	8019108 <mbedtls_ssl_config_defaults+0xd4>

        /*
         * Default
         */
        default:
            conf->min_major_ver = ( MBEDTLS_SSL_MIN_MAJOR_VERSION >
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	2203      	movs	r2, #3
 80190be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                                    MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION ) ?
                                    MBEDTLS_SSL_MIN_MAJOR_VERSION :
                                    MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION;
            conf->min_minor_ver = ( MBEDTLS_SSL_MIN_MINOR_VERSION >
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	2203      	movs	r2, #3
 80190c6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
                                    MBEDTLS_SSL_MIN_VALID_MINOR_VERSION ) ?
                                    MBEDTLS_SSL_MIN_MINOR_VERSION :
                                    MBEDTLS_SSL_MIN_VALID_MINOR_VERSION;
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	2203      	movs	r2, #3
 80190ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	2203      	movs	r2, #3
 80190d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80190da:	f7fa fa09 	bl	80134f0 <mbedtls_ssl_list_ciphersuites>
 80190de:	4602      	mov	r2, r0
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	60da      	str	r2, [r3, #12]
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	68da      	ldr	r2, [r3, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	609a      	str	r2, [r3, #8]
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	689a      	ldr	r2, [r3, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	605a      	str	r2, [r3, #4]
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	685a      	ldr	r2, [r3, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	601a      	str	r2, [r3, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	4a08      	ldr	r2, [pc, #32]	; (8019120 <mbedtls_ssl_config_defaults+0xec>)
 8019100:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	4a07      	ldr	r2, [pc, #28]	; (8019124 <mbedtls_ssl_config_defaults+0xf0>)
 8019106:	645a      	str	r2, [r3, #68]	; 0x44
#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
 8019108:	2300      	movs	r3, #0
}
 801910a:	4618      	mov	r0, r3
 801910c:	3710      	adds	r7, #16
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}
 8019112:	bf00      	nop
 8019114:	2000002c 	.word	0x2000002c
 8019118:	0802491c 	.word	0x0802491c
 801911c:	20000038 	.word	0x20000038
 8019120:	0802490c 	.word	0x0802490c
 8019124:	20000020 	.word	0x20000020

08019128 <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b082      	sub	sp, #8
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 8019130:	2101      	movs	r1, #1
 8019132:	6878      	ldr	r0, [r7, #4]
 8019134:	f7f5 fd36 	bl	800eba4 <mbedtls_pk_can_do>
 8019138:	4603      	mov	r3, r0
 801913a:	2b00      	cmp	r3, #0
 801913c:	d001      	beq.n	8019142 <mbedtls_ssl_sig_from_pk+0x1a>
        return( MBEDTLS_SSL_SIG_RSA );
 801913e:	2301      	movs	r3, #1
 8019140:	e000      	b.n	8019144 <mbedtls_ssl_sig_from_pk+0x1c>
#endif
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
 8019142:	2300      	movs	r3, #0
}
 8019144:	4618      	mov	r0, r3
 8019146:	3708      	adds	r7, #8
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}

0801914c <mbedtls_ssl_sig_hash_set_const_hash>:
}

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
 801914c:	b480      	push	{r7}
 801914e:	b083      	sub	sp, #12
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
 8019154:	460b      	mov	r3, r1
 8019156:	70fb      	strb	r3, [r7, #3]
    set->rsa   = md_alg;
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	78fa      	ldrb	r2, [r7, #3]
 801915c:	701a      	strb	r2, [r3, #0]
    set->ecdsa = md_alg;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	78fa      	ldrb	r2, [r7, #3]
 8019162:	705a      	strb	r2, [r3, #1]
}
 8019164:	bf00      	nop
 8019166:	370c      	adds	r7, #12
 8019168:	46bd      	mov	sp, r7
 801916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801916e:	4770      	bx	lr

08019170 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 8019170:	b480      	push	{r7}
 8019172:	b083      	sub	sp, #12
 8019174:	af00      	add	r7, sp, #0
 8019176:	6078      	str	r0, [r7, #4]
    switch( md )
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	2b05      	cmp	r3, #5
 801917c:	d003      	beq.n	8019186 <mbedtls_ssl_hash_from_md_alg+0x16>
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	2b06      	cmp	r3, #6
 8019182:	d002      	beq.n	801918a <mbedtls_ssl_hash_from_md_alg+0x1a>
 8019184:	e003      	b.n	801918e <mbedtls_ssl_hash_from_md_alg+0x1e>
        case MBEDTLS_MD_SHA1:
            return( MBEDTLS_SSL_HASH_SHA1 );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( MBEDTLS_SSL_HASH_SHA224 );
 8019186:	2303      	movs	r3, #3
 8019188:	e002      	b.n	8019190 <mbedtls_ssl_hash_from_md_alg+0x20>
        case MBEDTLS_MD_SHA256:
            return( MBEDTLS_SSL_HASH_SHA256 );
 801918a:	2304      	movs	r3, #4
 801918c:	e000      	b.n	8019190 <mbedtls_ssl_hash_from_md_alg+0x20>
            return( MBEDTLS_SSL_HASH_SHA384 );
        case MBEDTLS_MD_SHA512:
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
 801918e:	2300      	movs	r3, #0
    }
}
 8019190:	4618      	mov	r0, r3
 8019192:	370c      	adds	r7, #12
 8019194:	46bd      	mov	sp, r7
 8019196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919a:	4770      	bx	lr

0801919c <mbedtls_ssl_check_cert_usage>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 801919c:	b480      	push	{r7}
 801919e:	b087      	sub	sp, #28
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	60f8      	str	r0, [r7, #12]
 80191a4:	60b9      	str	r1, [r7, #8]
 80191a6:	607a      	str	r2, [r7, #4]
 80191a8:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80191aa:	2300      	movs	r3, #0
 80191ac:	617b      	str	r3, [r7, #20]
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
 80191ae:	697b      	ldr	r3, [r7, #20]
}
 80191b0:	4618      	mov	r0, r3
 80191b2:	371c      	adds	r7, #28
 80191b4:	46bd      	mov	sp, r7
 80191b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ba:	4770      	bx	lr

080191bc <mbedtls_ssl_write_version>:
 * 1.0 <-> 3.2      (DTLS 1.0 is based on TLS 1.1)
 * 1.x <-> 3.x+1    for x != 0 (DTLS 1.2 based on TLS 1.2)
 */
void mbedtls_ssl_write_version( int major, int minor, int transport,
                        unsigned char ver[2] )
{
 80191bc:	b480      	push	{r7}
 80191be:	b085      	sub	sp, #20
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	60f8      	str	r0, [r7, #12]
 80191c4:	60b9      	str	r1, [r7, #8]
 80191c6:	607a      	str	r2, [r7, #4]
 80191c8:	603b      	str	r3, [r7, #0]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	b2da      	uxtb	r2, r3
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	701a      	strb	r2, [r3, #0]
        ver[1] = (unsigned char) minor;
 80191d2:	683b      	ldr	r3, [r7, #0]
 80191d4:	3301      	adds	r3, #1
 80191d6:	68ba      	ldr	r2, [r7, #8]
 80191d8:	b2d2      	uxtb	r2, r2
 80191da:	701a      	strb	r2, [r3, #0]
    }
}
 80191dc:	bf00      	nop
 80191de:	3714      	adds	r7, #20
 80191e0:	46bd      	mov	sp, r7
 80191e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e6:	4770      	bx	lr

080191e8 <mbedtls_ssl_read_version>:

void mbedtls_ssl_read_version( int *major, int *minor, int transport,
                       const unsigned char ver[2] )
{
 80191e8:	b480      	push	{r7}
 80191ea:	b085      	sub	sp, #20
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	60f8      	str	r0, [r7, #12]
 80191f0:	60b9      	str	r1, [r7, #8]
 80191f2:	607a      	str	r2, [r7, #4]
 80191f4:	603b      	str	r3, [r7, #0]
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 80191f6:	683b      	ldr	r3, [r7, #0]
 80191f8:	781b      	ldrb	r3, [r3, #0]
 80191fa:	461a      	mov	r2, r3
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	601a      	str	r2, [r3, #0]
        *minor = ver[1];
 8019200:	683b      	ldr	r3, [r7, #0]
 8019202:	3301      	adds	r3, #1
 8019204:	781b      	ldrb	r3, [r3, #0]
 8019206:	461a      	mov	r2, r3
 8019208:	68bb      	ldr	r3, [r7, #8]
 801920a:	601a      	str	r2, [r3, #0]
    }
}
 801920c:	bf00      	nop
 801920e:	3714      	adds	r7, #20
 8019210:	46bd      	mov	sp, r7
 8019212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019216:	4770      	bx	lr

08019218 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b086      	sub	sp, #24
 801921c:	af00      	add	r7, sp, #0
 801921e:	60f8      	str	r0, [r7, #12]
 8019220:	60b9      	str	r1, [r7, #8]
 8019222:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( end - *p ) < 1 )
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	68ba      	ldr	r2, [r7, #8]
 801922a:	1ad3      	subs	r3, r2, r3
 801922c:	2b00      	cmp	r3, #0
 801922e:	dc01      	bgt.n	8019234 <mbedtls_x509_get_serial+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 8019230:	4b1a      	ldr	r3, [pc, #104]	; (801929c <mbedtls_x509_get_serial+0x84>)
 8019232:	e02f      	b.n	8019294 <mbedtls_x509_get_serial+0x7c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	781b      	ldrb	r3, [r3, #0]
 801923a:	2b82      	cmp	r3, #130	; 0x82
 801923c:	d006      	beq.n	801924c <mbedtls_x509_get_serial+0x34>
        **p !=   MBEDTLS_ASN1_INTEGER )
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	781b      	ldrb	r3, [r3, #0]
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8019244:	2b02      	cmp	r3, #2
 8019246:	d001      	beq.n	801924c <mbedtls_x509_get_serial+0x34>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 8019248:	4b15      	ldr	r3, [pc, #84]	; (80192a0 <mbedtls_x509_get_serial+0x88>)
 801924a:	e023      	b.n	8019294 <mbedtls_x509_get_serial+0x7c>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	1c59      	adds	r1, r3, #1
 8019252:	68fa      	ldr	r2, [r7, #12]
 8019254:	6011      	str	r1, [r2, #0]
 8019256:	781b      	ldrb	r3, [r3, #0]
 8019258:	461a      	mov	r2, r3
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	3304      	adds	r3, #4
 8019262:	461a      	mov	r2, r3
 8019264:	68b9      	ldr	r1, [r7, #8]
 8019266:	68f8      	ldr	r0, [r7, #12]
 8019268:	f7ec ffae 	bl	80061c8 <mbedtls_asn1_get_len>
 801926c:	6178      	str	r0, [r7, #20]
 801926e:	697b      	ldr	r3, [r7, #20]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d003      	beq.n	801927c <mbedtls_x509_get_serial+0x64>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 8019274:	697b      	ldr	r3, [r7, #20]
 8019276:	f5a3 530a 	sub.w	r3, r3, #8832	; 0x2280
 801927a:	e00b      	b.n	8019294 <mbedtls_x509_get_serial+0x7c>

    serial->p = *p;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	681a      	ldr	r2, [r3, #0]
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	609a      	str	r2, [r3, #8]
    *p += serial->len;
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	681a      	ldr	r2, [r3, #0]
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	685b      	ldr	r3, [r3, #4]
 801928c:	441a      	add	r2, r3
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	601a      	str	r2, [r3, #0]

    return( 0 );
 8019292:	2300      	movs	r3, #0
}
 8019294:	4618      	mov	r0, r3
 8019296:	3718      	adds	r7, #24
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}
 801929c:	ffffdd20 	.word	0xffffdd20
 80192a0:	ffffdd1e 	.word	0xffffdd1e

080192a4 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b086      	sub	sp, #24
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	60f8      	str	r0, [r7, #12]
 80192ac:	60b9      	str	r1, [r7, #8]
 80192ae:	607a      	str	r2, [r7, #4]
 80192b0:	603b      	str	r3, [r7, #0]
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 80192b2:	683b      	ldr	r3, [r7, #0]
 80192b4:	687a      	ldr	r2, [r7, #4]
 80192b6:	68b9      	ldr	r1, [r7, #8]
 80192b8:	68f8      	ldr	r0, [r7, #12]
 80192ba:	f7ed f9b6 	bl	800662a <mbedtls_asn1_get_alg>
 80192be:	6178      	str	r0, [r7, #20]
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d003      	beq.n	80192ce <mbedtls_x509_get_alg+0x2a>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80192c6:	697b      	ldr	r3, [r7, #20]
 80192c8:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 80192cc:	e000      	b.n	80192d0 <mbedtls_x509_get_alg+0x2c>

    return( 0 );
 80192ce:	2300      	movs	r3, #0
}
 80192d0:	4618      	mov	r0, r3
 80192d2:	3718      	adds	r7, #24
 80192d4:	46bd      	mov	sp, r7
 80192d6:	bd80      	pop	{r7, pc}

080192d8 <x509_get_attr_type_value>:
 *  AttributeValue ::= ANY DEFINED BY AttributeType
 */
static int x509_get_attr_type_value( unsigned char **p,
                                     const unsigned char *end,
                                     mbedtls_x509_name *cur )
{
 80192d8:	b580      	push	{r7, lr}
 80192da:	b088      	sub	sp, #32
 80192dc:	af00      	add	r7, sp, #0
 80192de:	60f8      	str	r0, [r7, #12]
 80192e0:	60b9      	str	r1, [r7, #8]
 80192e2:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80192e4:	f107 0210 	add.w	r2, r7, #16
 80192e8:	2330      	movs	r3, #48	; 0x30
 80192ea:	68b9      	ldr	r1, [r7, #8]
 80192ec:	68f8      	ldr	r0, [r7, #12]
 80192ee:	f7ed f82d 	bl	800634c <mbedtls_asn1_get_tag>
 80192f2:	61f8      	str	r0, [r7, #28]
 80192f4:	69fb      	ldr	r3, [r7, #28]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d003      	beq.n	8019302 <x509_get_attr_type_value+0x2a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80192fa:	69fb      	ldr	r3, [r7, #28]
 80192fc:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 8019300:	e080      	b.n	8019404 <x509_get_attr_type_value+0x12c>

    if( ( end - *p ) < 1 )
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	68ba      	ldr	r2, [r7, #8]
 8019308:	1ad3      	subs	r3, r2, r3
 801930a:	2b00      	cmp	r3, #0
 801930c:	dc01      	bgt.n	8019312 <x509_get_attr_type_value+0x3a>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 801930e:	4b3f      	ldr	r3, [pc, #252]	; (801940c <x509_get_attr_type_value+0x134>)
 8019310:	e078      	b.n	8019404 <x509_get_attr_type_value+0x12c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	61bb      	str	r3, [r7, #24]
    oid->tag = **p;
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	781b      	ldrb	r3, [r3, #0]
 801931c:	461a      	mov	r2, r3
 801931e:	69bb      	ldr	r3, [r7, #24]
 8019320:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8019322:	69bb      	ldr	r3, [r7, #24]
 8019324:	1d1a      	adds	r2, r3, #4
 8019326:	2306      	movs	r3, #6
 8019328:	68b9      	ldr	r1, [r7, #8]
 801932a:	68f8      	ldr	r0, [r7, #12]
 801932c:	f7ed f80e 	bl	800634c <mbedtls_asn1_get_tag>
 8019330:	61f8      	str	r0, [r7, #28]
 8019332:	69fb      	ldr	r3, [r7, #28]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d003      	beq.n	8019340 <x509_get_attr_type_value+0x68>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019338:	69fb      	ldr	r3, [r7, #28]
 801933a:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 801933e:	e061      	b.n	8019404 <x509_get_attr_type_value+0x12c>

    oid->p = *p;
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	681a      	ldr	r2, [r3, #0]
 8019344:	69bb      	ldr	r3, [r7, #24]
 8019346:	609a      	str	r2, [r3, #8]
    *p += oid->len;
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	681a      	ldr	r2, [r3, #0]
 801934c:	69bb      	ldr	r3, [r7, #24]
 801934e:	685b      	ldr	r3, [r3, #4]
 8019350:	441a      	add	r2, r3
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	601a      	str	r2, [r3, #0]

    if( ( end - *p ) < 1 )
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	68ba      	ldr	r2, [r7, #8]
 801935c:	1ad3      	subs	r3, r2, r3
 801935e:	2b00      	cmp	r3, #0
 8019360:	dc01      	bgt.n	8019366 <x509_get_attr_type_value+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 8019362:	4b2a      	ldr	r3, [pc, #168]	; (801940c <x509_get_attr_type_value+0x134>)
 8019364:	e04e      	b.n	8019404 <x509_get_attr_type_value+0x12c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	781b      	ldrb	r3, [r3, #0]
 801936c:	2b1e      	cmp	r3, #30
 801936e:	d01f      	beq.n	80193b0 <x509_get_attr_type_value+0xd8>
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	781b      	ldrb	r3, [r3, #0]
 8019376:	2b0c      	cmp	r3, #12
 8019378:	d01a      	beq.n	80193b0 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	781b      	ldrb	r3, [r3, #0]
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8019380:	2b14      	cmp	r3, #20
 8019382:	d015      	beq.n	80193b0 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	781b      	ldrb	r3, [r3, #0]
 801938a:	2b13      	cmp	r3, #19
 801938c:	d010      	beq.n	80193b0 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	781b      	ldrb	r3, [r3, #0]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
 8019394:	2b16      	cmp	r3, #22
 8019396:	d00b      	beq.n	80193b0 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	781b      	ldrb	r3, [r3, #0]
 801939e:	2b1c      	cmp	r3, #28
 80193a0:	d006      	beq.n	80193b0 <x509_get_attr_type_value+0xd8>
        **p != MBEDTLS_ASN1_BIT_STRING )
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	781b      	ldrb	r3, [r3, #0]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80193a8:	2b03      	cmp	r3, #3
 80193aa:	d001      	beq.n	80193b0 <x509_get_attr_type_value+0xd8>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 80193ac:	4b18      	ldr	r3, [pc, #96]	; (8019410 <x509_get_attr_type_value+0x138>)
 80193ae:	e029      	b.n	8019404 <x509_get_attr_type_value+0x12c>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	330c      	adds	r3, #12
 80193b4:	617b      	str	r3, [r7, #20]
    val->tag = *(*p)++;
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	1c59      	adds	r1, r3, #1
 80193bc:	68fa      	ldr	r2, [r7, #12]
 80193be:	6011      	str	r1, [r2, #0]
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	461a      	mov	r2, r3
 80193c4:	697b      	ldr	r3, [r7, #20]
 80193c6:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 80193c8:	697b      	ldr	r3, [r7, #20]
 80193ca:	3304      	adds	r3, #4
 80193cc:	461a      	mov	r2, r3
 80193ce:	68b9      	ldr	r1, [r7, #8]
 80193d0:	68f8      	ldr	r0, [r7, #12]
 80193d2:	f7ec fef9 	bl	80061c8 <mbedtls_asn1_get_len>
 80193d6:	61f8      	str	r0, [r7, #28]
 80193d8:	69fb      	ldr	r3, [r7, #28]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d003      	beq.n	80193e6 <x509_get_attr_type_value+0x10e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80193de:	69fb      	ldr	r3, [r7, #28]
 80193e0:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 80193e4:	e00e      	b.n	8019404 <x509_get_attr_type_value+0x12c>

    val->p = *p;
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	681a      	ldr	r2, [r3, #0]
 80193ea:	697b      	ldr	r3, [r7, #20]
 80193ec:	609a      	str	r2, [r3, #8]
    *p += val->len;
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	681a      	ldr	r2, [r3, #0]
 80193f2:	697b      	ldr	r3, [r7, #20]
 80193f4:	685b      	ldr	r3, [r3, #4]
 80193f6:	441a      	add	r2, r3
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	601a      	str	r2, [r3, #0]

    cur->next = NULL;
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	2200      	movs	r2, #0
 8019400:	619a      	str	r2, [r3, #24]

    return( 0 );
 8019402:	2300      	movs	r3, #0
}
 8019404:	4618      	mov	r0, r3
 8019406:	3720      	adds	r7, #32
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}
 801940c:	ffffdc20 	.word	0xffffdc20
 8019410:	ffffdc1e 	.word	0xffffdc1e

08019414 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b088      	sub	sp, #32
 8019418:	af00      	add	r7, sp, #0
 801941a:	60f8      	str	r0, [r7, #12]
 801941c:	60b9      	str	r1, [r7, #8]
 801941e:	607a      	str	r2, [r7, #4]
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8019420:	f107 0214 	add.w	r2, r7, #20
 8019424:	2331      	movs	r3, #49	; 0x31
 8019426:	68b9      	ldr	r1, [r7, #8]
 8019428:	68f8      	ldr	r0, [r7, #12]
 801942a:	f7ec ff8f 	bl	800634c <mbedtls_asn1_get_tag>
 801942e:	61f8      	str	r0, [r7, #28]
 8019430:	69fb      	ldr	r3, [r7, #28]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d003      	beq.n	801943e <mbedtls_x509_get_name+0x2a>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8019436:	69fb      	ldr	r3, [r7, #28]
 8019438:	f5a3 530e 	sub.w	r3, r3, #9088	; 0x2380
 801943c:	e043      	b.n	80194c6 <mbedtls_x509_get_name+0xb2>

        end_set  = *p + set_len;
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	681a      	ldr	r2, [r3, #0]
 8019442:	697b      	ldr	r3, [r7, #20]
 8019444:	4413      	add	r3, r2
 8019446:	61bb      	str	r3, [r7, #24]

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8019448:	687a      	ldr	r2, [r7, #4]
 801944a:	69b9      	ldr	r1, [r7, #24]
 801944c:	68f8      	ldr	r0, [r7, #12]
 801944e:	f7ff ff43 	bl	80192d8 <x509_get_attr_type_value>
 8019452:	61f8      	str	r0, [r7, #28]
 8019454:	69fb      	ldr	r3, [r7, #28]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d001      	beq.n	801945e <mbedtls_x509_get_name+0x4a>
                return( ret );
 801945a:	69fb      	ldr	r3, [r7, #28]
 801945c:	e033      	b.n	80194c6 <mbedtls_x509_get_name+0xb2>

            if( *p == end_set )
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	69ba      	ldr	r2, [r7, #24]
 8019464:	429a      	cmp	r2, r3
 8019466:	d014      	beq.n	8019492 <mbedtls_x509_get_name+0x7e>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	2201      	movs	r2, #1
 801946c:	771a      	strb	r2, [r3, #28]

            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801946e:	2120      	movs	r1, #32
 8019470:	2001      	movs	r0, #1
 8019472:	f004 f97f 	bl	801d774 <calloc>
 8019476:	4603      	mov	r3, r0
 8019478:	461a      	mov	r2, r3
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	619a      	str	r2, [r3, #24]

            if( cur->next == NULL )
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	699b      	ldr	r3, [r3, #24]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d101      	bne.n	801948a <mbedtls_x509_get_name+0x76>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8019486:	4b12      	ldr	r3, [pc, #72]	; (80194d0 <mbedtls_x509_get_name+0xbc>)
 8019488:	e01d      	b.n	80194c6 <mbedtls_x509_get_name+0xb2>

            cur = cur->next;
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	699b      	ldr	r3, [r3, #24]
 801948e:	607b      	str	r3, [r7, #4]
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8019490:	e7da      	b.n	8019448 <mbedtls_x509_get_name+0x34>
                break;
 8019492:	bf00      	nop
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	68ba      	ldr	r2, [r7, #8]
 801949a:	429a      	cmp	r2, r3
 801949c:	d101      	bne.n	80194a2 <mbedtls_x509_get_name+0x8e>
            return( 0 );
 801949e:	2300      	movs	r3, #0
 80194a0:	e011      	b.n	80194c6 <mbedtls_x509_get_name+0xb2>

        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80194a2:	2120      	movs	r1, #32
 80194a4:	2001      	movs	r0, #1
 80194a6:	f004 f965 	bl	801d774 <calloc>
 80194aa:	4603      	mov	r3, r0
 80194ac:	461a      	mov	r2, r3
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	619a      	str	r2, [r3, #24]

        if( cur->next == NULL )
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	699b      	ldr	r3, [r3, #24]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d101      	bne.n	80194be <mbedtls_x509_get_name+0xaa>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80194ba:	4b05      	ldr	r3, [pc, #20]	; (80194d0 <mbedtls_x509_get_name+0xbc>)
 80194bc:	e003      	b.n	80194c6 <mbedtls_x509_get_name+0xb2>

        cur = cur->next;
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	699b      	ldr	r3, [r3, #24]
 80194c2:	607b      	str	r3, [r7, #4]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 80194c4:	e7ac      	b.n	8019420 <mbedtls_x509_get_name+0xc>
    }
}
 80194c6:	4618      	mov	r0, r3
 80194c8:	3720      	adds	r7, #32
 80194ca:	46bd      	mov	sp, r7
 80194cc:	bd80      	pop	{r7, pc}
 80194ce:	bf00      	nop
 80194d0:	ffffd780 	.word	0xffffd780

080194d4 <x509_parse_int>:

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 80194d4:	b480      	push	{r7}
 80194d6:	b085      	sub	sp, #20
 80194d8:	af00      	add	r7, sp, #0
 80194da:	60f8      	str	r0, [r7, #12]
 80194dc:	60b9      	str	r1, [r7, #8]
 80194de:	607a      	str	r2, [r7, #4]
    *res = 0;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	2200      	movs	r2, #0
 80194e4:	601a      	str	r2, [r3, #0]

    for( ; n > 0; --n )
 80194e6:	e024      	b.n	8019532 <x509_parse_int+0x5e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	781b      	ldrb	r3, [r3, #0]
 80194ee:	2b2f      	cmp	r3, #47	; 0x2f
 80194f0:	d904      	bls.n	80194fc <x509_parse_int+0x28>
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	781b      	ldrb	r3, [r3, #0]
 80194f8:	2b39      	cmp	r3, #57	; 0x39
 80194fa:	d901      	bls.n	8019500 <x509_parse_int+0x2c>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 80194fc:	4b12      	ldr	r3, [pc, #72]	; (8019548 <x509_parse_int+0x74>)
 80194fe:	e01c      	b.n	801953a <x509_parse_int+0x66>

        *res *= 10;
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	681a      	ldr	r2, [r3, #0]
 8019504:	4613      	mov	r3, r2
 8019506:	009b      	lsls	r3, r3, #2
 8019508:	4413      	add	r3, r2
 801950a:	005b      	lsls	r3, r3, #1
 801950c:	461a      	mov	r2, r3
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	601a      	str	r2, [r3, #0]
        *res += ( *(*p)++ - '0' );
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	1c59      	adds	r1, r3, #1
 8019518:	68fa      	ldr	r2, [r7, #12]
 801951a:	6011      	str	r1, [r2, #0]
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	441a      	add	r2, r3
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	601a      	str	r2, [r3, #0]
    for( ; n > 0; --n )
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	3b01      	subs	r3, #1
 8019530:	60bb      	str	r3, [r7, #8]
 8019532:	68bb      	ldr	r3, [r7, #8]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d1d7      	bne.n	80194e8 <x509_parse_int+0x14>
    }

    return( 0 );
 8019538:	2300      	movs	r3, #0
}
 801953a:	4618      	mov	r0, r3
 801953c:	3714      	adds	r7, #20
 801953e:	46bd      	mov	sp, r7
 8019540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019544:	4770      	bx	lr
 8019546:	bf00      	nop
 8019548:	ffffdc00 	.word	0xffffdc00

0801954c <x509_date_is_valid>:

static int x509_date_is_valid(const mbedtls_x509_time *t )
{
 801954c:	b480      	push	{r7}
 801954e:	b085      	sub	sp, #20
 8019550:	af00      	add	r7, sp, #0
 8019552:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
 8019554:	4b47      	ldr	r3, [pc, #284]	; (8019674 <x509_date_is_valid+0x128>)
 8019556:	60bb      	str	r3, [r7, #8]
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	2b00      	cmp	r3, #0
 801955e:	db05      	blt.n	801956c <x509_date_is_valid+0x20>
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	f242 720f 	movw	r2, #9999	; 0x270f
 8019568:	4293      	cmp	r3, r2
 801956a:	dd01      	ble.n	8019570 <x509_date_is_valid+0x24>
 801956c:	68bb      	ldr	r3, [r7, #8]
 801956e:	e07a      	b.n	8019666 <x509_date_is_valid+0x11a>
    CHECK_RANGE( 0, 23,   t->hour );
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	68db      	ldr	r3, [r3, #12]
 8019574:	2b00      	cmp	r3, #0
 8019576:	db03      	blt.n	8019580 <x509_date_is_valid+0x34>
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	68db      	ldr	r3, [r3, #12]
 801957c:	2b17      	cmp	r3, #23
 801957e:	dd01      	ble.n	8019584 <x509_date_is_valid+0x38>
 8019580:	68bb      	ldr	r3, [r7, #8]
 8019582:	e070      	b.n	8019666 <x509_date_is_valid+0x11a>
    CHECK_RANGE( 0, 59,   t->min  );
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	691b      	ldr	r3, [r3, #16]
 8019588:	2b00      	cmp	r3, #0
 801958a:	db03      	blt.n	8019594 <x509_date_is_valid+0x48>
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	691b      	ldr	r3, [r3, #16]
 8019590:	2b3b      	cmp	r3, #59	; 0x3b
 8019592:	dd01      	ble.n	8019598 <x509_date_is_valid+0x4c>
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	e066      	b.n	8019666 <x509_date_is_valid+0x11a>
    CHECK_RANGE( 0, 59,   t->sec  );
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	695b      	ldr	r3, [r3, #20]
 801959c:	2b00      	cmp	r3, #0
 801959e:	db03      	blt.n	80195a8 <x509_date_is_valid+0x5c>
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	695b      	ldr	r3, [r3, #20]
 80195a4:	2b3b      	cmp	r3, #59	; 0x3b
 80195a6:	dd01      	ble.n	80195ac <x509_date_is_valid+0x60>
 80195a8:	68bb      	ldr	r3, [r7, #8]
 80195aa:	e05c      	b.n	8019666 <x509_date_is_valid+0x11a>

    switch( t->mon )
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	685b      	ldr	r3, [r3, #4]
 80195b0:	3b01      	subs	r3, #1
 80195b2:	2b0b      	cmp	r3, #11
 80195b4:	d849      	bhi.n	801964a <x509_date_is_valid+0xfe>
 80195b6:	a201      	add	r2, pc, #4	; (adr r2, 80195bc <x509_date_is_valid+0x70>)
 80195b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195bc:	080195ed 	.word	0x080195ed
 80195c0:	080195f9 	.word	0x080195f9
 80195c4:	080195ed 	.word	0x080195ed
 80195c8:	080195f3 	.word	0x080195f3
 80195cc:	080195ed 	.word	0x080195ed
 80195d0:	080195f3 	.word	0x080195f3
 80195d4:	080195ed 	.word	0x080195ed
 80195d8:	080195ed 	.word	0x080195ed
 80195dc:	080195f3 	.word	0x080195f3
 80195e0:	080195ed 	.word	0x080195ed
 80195e4:	080195f3 	.word	0x080195f3
 80195e8:	080195ed 	.word	0x080195ed
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 80195ec:	231f      	movs	r3, #31
 80195ee:	60fb      	str	r3, [r7, #12]
            break;
 80195f0:	e02d      	b.n	801964e <x509_date_is_valid+0x102>
        case 4: case 6: case 9: case 11:
            month_len = 30;
 80195f2:	231e      	movs	r3, #30
 80195f4:	60fb      	str	r3, [r7, #12]
            break;
 80195f6:	e02a      	b.n	801964e <x509_date_is_valid+0x102>
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	f003 0303 	and.w	r3, r3, #3
 8019600:	2b00      	cmp	r3, #0
 8019602:	d10d      	bne.n	8019620 <x509_date_is_valid+0xd4>
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	681a      	ldr	r2, [r3, #0]
 8019608:	4b1b      	ldr	r3, [pc, #108]	; (8019678 <x509_date_is_valid+0x12c>)
 801960a:	fb83 1302 	smull	r1, r3, r3, r2
 801960e:	1159      	asrs	r1, r3, #5
 8019610:	17d3      	asrs	r3, r2, #31
 8019612:	1acb      	subs	r3, r1, r3
 8019614:	2164      	movs	r1, #100	; 0x64
 8019616:	fb01 f303 	mul.w	r3, r1, r3
 801961a:	1ad3      	subs	r3, r2, r3
 801961c:	2b00      	cmp	r3, #0
 801961e:	d10e      	bne.n	801963e <x509_date_is_valid+0xf2>
                !( t->year % 400 ) )
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681a      	ldr	r2, [r3, #0]
 8019624:	4b14      	ldr	r3, [pc, #80]	; (8019678 <x509_date_is_valid+0x12c>)
 8019626:	fb83 1302 	smull	r1, r3, r3, r2
 801962a:	11d9      	asrs	r1, r3, #7
 801962c:	17d3      	asrs	r3, r2, #31
 801962e:	1acb      	subs	r3, r1, r3
 8019630:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8019634:	fb01 f303 	mul.w	r3, r1, r3
 8019638:	1ad3      	subs	r3, r2, r3
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 801963a:	2b00      	cmp	r3, #0
 801963c:	d102      	bne.n	8019644 <x509_date_is_valid+0xf8>
                month_len = 29;
 801963e:	231d      	movs	r3, #29
 8019640:	60fb      	str	r3, [r7, #12]
            else
                month_len = 28;
            break;
 8019642:	e004      	b.n	801964e <x509_date_is_valid+0x102>
                month_len = 28;
 8019644:	231c      	movs	r3, #28
 8019646:	60fb      	str	r3, [r7, #12]
            break;
 8019648:	e001      	b.n	801964e <x509_date_is_valid+0x102>
        default:
            return( ret );
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	e00b      	b.n	8019666 <x509_date_is_valid+0x11a>
    }
    CHECK_RANGE( 1, month_len, t->day );
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	689b      	ldr	r3, [r3, #8]
 8019652:	2b00      	cmp	r3, #0
 8019654:	dd04      	ble.n	8019660 <x509_date_is_valid+0x114>
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	689b      	ldr	r3, [r3, #8]
 801965a:	68fa      	ldr	r2, [r7, #12]
 801965c:	429a      	cmp	r2, r3
 801965e:	da01      	bge.n	8019664 <x509_date_is_valid+0x118>
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	e000      	b.n	8019666 <x509_date_is_valid+0x11a>

    return( 0 );
 8019664:	2300      	movs	r3, #0
}
 8019666:	4618      	mov	r0, r3
 8019668:	3714      	adds	r7, #20
 801966a:	46bd      	mov	sp, r7
 801966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019670:	4770      	bx	lr
 8019672:	bf00      	nop
 8019674:	ffffdc00 	.word	0xffffdc00
 8019678:	51eb851f 	.word	0x51eb851f

0801967c <x509_parse_time>:
 * Parse an ASN1_UTC_TIME (yearlen=2) or ASN1_GENERALIZED_TIME (yearlen=4)
 * field.
 */
static int x509_parse_time( unsigned char **p, size_t len, size_t yearlen,
                            mbedtls_x509_time *tm )
{
 801967c:	b580      	push	{r7, lr}
 801967e:	b086      	sub	sp, #24
 8019680:	af00      	add	r7, sp, #0
 8019682:	60f8      	str	r0, [r7, #12]
 8019684:	60b9      	str	r1, [r7, #8]
 8019686:	607a      	str	r2, [r7, #4]
 8019688:	603b      	str	r3, [r7, #0]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	3308      	adds	r3, #8
 801968e:	68ba      	ldr	r2, [r7, #8]
 8019690:	429a      	cmp	r2, r3
 8019692:	d201      	bcs.n	8019698 <x509_parse_time+0x1c>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8019694:	4b49      	ldr	r3, [pc, #292]	; (80197bc <x509_parse_time+0x140>)
 8019696:	e08c      	b.n	80197b2 <x509_parse_time+0x136>
    len -= yearlen + 8;
 8019698:	68ba      	ldr	r2, [r7, #8]
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	1ad3      	subs	r3, r2, r3
 801969e:	3b08      	subs	r3, #8
 80196a0:	60bb      	str	r3, [r7, #8]

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 80196a2:	683b      	ldr	r3, [r7, #0]
 80196a4:	461a      	mov	r2, r3
 80196a6:	6879      	ldr	r1, [r7, #4]
 80196a8:	68f8      	ldr	r0, [r7, #12]
 80196aa:	f7ff ff13 	bl	80194d4 <x509_parse_int>
 80196ae:	6178      	str	r0, [r7, #20]
 80196b0:	697b      	ldr	r3, [r7, #20]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d001      	beq.n	80196ba <x509_parse_time+0x3e>
 80196b6:	697b      	ldr	r3, [r7, #20]
 80196b8:	e07b      	b.n	80197b2 <x509_parse_time+0x136>
    if ( 2 == yearlen )
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	2b02      	cmp	r3, #2
 80196be:	d10f      	bne.n	80196e0 <x509_parse_time+0x64>
    {
        if ( tm->year < 50 )
 80196c0:	683b      	ldr	r3, [r7, #0]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	2b31      	cmp	r3, #49	; 0x31
 80196c6:	dc05      	bgt.n	80196d4 <x509_parse_time+0x58>
            tm->year += 100;
 80196c8:	683b      	ldr	r3, [r7, #0]
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80196d0:	683b      	ldr	r3, [r7, #0]
 80196d2:	601a      	str	r2, [r3, #0]

        tm->year += 1900;
 80196d4:	683b      	ldr	r3, [r7, #0]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80196dc:	683b      	ldr	r3, [r7, #0]
 80196de:	601a      	str	r2, [r3, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 80196e0:	683b      	ldr	r3, [r7, #0]
 80196e2:	3304      	adds	r3, #4
 80196e4:	461a      	mov	r2, r3
 80196e6:	2102      	movs	r1, #2
 80196e8:	68f8      	ldr	r0, [r7, #12]
 80196ea:	f7ff fef3 	bl	80194d4 <x509_parse_int>
 80196ee:	6178      	str	r0, [r7, #20]
 80196f0:	697b      	ldr	r3, [r7, #20]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d001      	beq.n	80196fa <x509_parse_time+0x7e>
 80196f6:	697b      	ldr	r3, [r7, #20]
 80196f8:	e05b      	b.n	80197b2 <x509_parse_time+0x136>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	3308      	adds	r3, #8
 80196fe:	461a      	mov	r2, r3
 8019700:	2102      	movs	r1, #2
 8019702:	68f8      	ldr	r0, [r7, #12]
 8019704:	f7ff fee6 	bl	80194d4 <x509_parse_int>
 8019708:	6178      	str	r0, [r7, #20]
 801970a:	697b      	ldr	r3, [r7, #20]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d001      	beq.n	8019714 <x509_parse_time+0x98>
 8019710:	697b      	ldr	r3, [r7, #20]
 8019712:	e04e      	b.n	80197b2 <x509_parse_time+0x136>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 8019714:	683b      	ldr	r3, [r7, #0]
 8019716:	330c      	adds	r3, #12
 8019718:	461a      	mov	r2, r3
 801971a:	2102      	movs	r1, #2
 801971c:	68f8      	ldr	r0, [r7, #12]
 801971e:	f7ff fed9 	bl	80194d4 <x509_parse_int>
 8019722:	6178      	str	r0, [r7, #20]
 8019724:	697b      	ldr	r3, [r7, #20]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d001      	beq.n	801972e <x509_parse_time+0xb2>
 801972a:	697b      	ldr	r3, [r7, #20]
 801972c:	e041      	b.n	80197b2 <x509_parse_time+0x136>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 801972e:	683b      	ldr	r3, [r7, #0]
 8019730:	3310      	adds	r3, #16
 8019732:	461a      	mov	r2, r3
 8019734:	2102      	movs	r1, #2
 8019736:	68f8      	ldr	r0, [r7, #12]
 8019738:	f7ff fecc 	bl	80194d4 <x509_parse_int>
 801973c:	6178      	str	r0, [r7, #20]
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d001      	beq.n	8019748 <x509_parse_time+0xcc>
 8019744:	697b      	ldr	r3, [r7, #20]
 8019746:	e034      	b.n	80197b2 <x509_parse_time+0x136>

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	2b01      	cmp	r3, #1
 801974c:	d913      	bls.n	8019776 <x509_parse_time+0xfa>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 801974e:	683b      	ldr	r3, [r7, #0]
 8019750:	3314      	adds	r3, #20
 8019752:	461a      	mov	r2, r3
 8019754:	2102      	movs	r1, #2
 8019756:	68f8      	ldr	r0, [r7, #12]
 8019758:	f7ff febc 	bl	80194d4 <x509_parse_int>
 801975c:	6178      	str	r0, [r7, #20]
 801975e:	697b      	ldr	r3, [r7, #20]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d001      	beq.n	8019768 <x509_parse_time+0xec>
 8019764:	697b      	ldr	r3, [r7, #20]
 8019766:	e024      	b.n	80197b2 <x509_parse_time+0x136>
        len -= 2;
 8019768:	68bb      	ldr	r3, [r7, #8]
 801976a:	3b02      	subs	r3, #2
 801976c:	60bb      	str	r3, [r7, #8]
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 801976e:	68bb      	ldr	r3, [r7, #8]
 8019770:	2b01      	cmp	r3, #1
 8019772:	d10f      	bne.n	8019794 <x509_parse_time+0x118>
 8019774:	e001      	b.n	801977a <x509_parse_time+0xfe>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8019776:	4b11      	ldr	r3, [pc, #68]	; (80197bc <x509_parse_time+0x140>)
 8019778:	e01b      	b.n	80197b2 <x509_parse_time+0x136>
    if ( 1 == len && 'Z' == **p )
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	781b      	ldrb	r3, [r3, #0]
 8019780:	2b5a      	cmp	r3, #90	; 0x5a
 8019782:	d107      	bne.n	8019794 <x509_parse_time+0x118>
    {
        (*p)++;
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	1c5a      	adds	r2, r3, #1
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	601a      	str	r2, [r3, #0]
        len--;
 801978e:	68bb      	ldr	r3, [r7, #8]
 8019790:	3b01      	subs	r3, #1
 8019792:	60bb      	str	r3, [r7, #8]
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 8019794:	68bb      	ldr	r3, [r7, #8]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d001      	beq.n	801979e <x509_parse_time+0x122>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 801979a:	4b08      	ldr	r3, [pc, #32]	; (80197bc <x509_parse_time+0x140>)
 801979c:	e009      	b.n	80197b2 <x509_parse_time+0x136>

    CHECK( x509_date_is_valid( tm ) );
 801979e:	6838      	ldr	r0, [r7, #0]
 80197a0:	f7ff fed4 	bl	801954c <x509_date_is_valid>
 80197a4:	6178      	str	r0, [r7, #20]
 80197a6:	697b      	ldr	r3, [r7, #20]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d001      	beq.n	80197b0 <x509_parse_time+0x134>
 80197ac:	697b      	ldr	r3, [r7, #20]
 80197ae:	e000      	b.n	80197b2 <x509_parse_time+0x136>

    return ( 0 );
 80197b0:	2300      	movs	r3, #0
}
 80197b2:	4618      	mov	r0, r3
 80197b4:	3718      	adds	r7, #24
 80197b6:	46bd      	mov	sp, r7
 80197b8:	bd80      	pop	{r7, pc}
 80197ba:	bf00      	nop
 80197bc:	ffffdc00 	.word	0xffffdc00

080197c0 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b088      	sub	sp, #32
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	60f8      	str	r0, [r7, #12]
 80197c8:	60b9      	str	r1, [r7, #8]
 80197ca:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	68ba      	ldr	r2, [r7, #8]
 80197d2:	1ad3      	subs	r3, r2, r3
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	dc01      	bgt.n	80197dc <mbedtls_x509_get_time+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 80197d8:	4b19      	ldr	r3, [pc, #100]	; (8019840 <mbedtls_x509_get_time+0x80>)
 80197da:	e02c      	b.n	8019836 <mbedtls_x509_get_time+0x76>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	781b      	ldrb	r3, [r3, #0]
 80197e2:	76fb      	strb	r3, [r7, #27]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 80197e4:	7efb      	ldrb	r3, [r7, #27]
 80197e6:	2b17      	cmp	r3, #23
 80197e8:	d102      	bne.n	80197f0 <mbedtls_x509_get_time+0x30>
        year_len = 2;
 80197ea:	2302      	movs	r3, #2
 80197ec:	61fb      	str	r3, [r7, #28]
 80197ee:	e007      	b.n	8019800 <mbedtls_x509_get_time+0x40>
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 80197f0:	7efb      	ldrb	r3, [r7, #27]
 80197f2:	2b18      	cmp	r3, #24
 80197f4:	d102      	bne.n	80197fc <mbedtls_x509_get_time+0x3c>
        year_len = 4;
 80197f6:	2304      	movs	r3, #4
 80197f8:	61fb      	str	r3, [r7, #28]
 80197fa:	e001      	b.n	8019800 <mbedtls_x509_get_time+0x40>
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 80197fc:	4b11      	ldr	r3, [pc, #68]	; (8019844 <mbedtls_x509_get_time+0x84>)
 80197fe:	e01a      	b.n	8019836 <mbedtls_x509_get_time+0x76>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	1c5a      	adds	r2, r3, #1
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	601a      	str	r2, [r3, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 801980a:	f107 0310 	add.w	r3, r7, #16
 801980e:	461a      	mov	r2, r3
 8019810:	68b9      	ldr	r1, [r7, #8]
 8019812:	68f8      	ldr	r0, [r7, #12]
 8019814:	f7ec fcd8 	bl	80061c8 <mbedtls_asn1_get_len>
 8019818:	6178      	str	r0, [r7, #20]

    if( ret != 0 )
 801981a:	697b      	ldr	r3, [r7, #20]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d003      	beq.n	8019828 <mbedtls_x509_get_time+0x68>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8019820:	697b      	ldr	r3, [r7, #20]
 8019822:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8019826:	e006      	b.n	8019836 <mbedtls_x509_get_time+0x76>

    return x509_parse_time( p, len, year_len, tm );
 8019828:	6939      	ldr	r1, [r7, #16]
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	69fa      	ldr	r2, [r7, #28]
 801982e:	68f8      	ldr	r0, [r7, #12]
 8019830:	f7ff ff24 	bl	801967c <x509_parse_time>
 8019834:	4603      	mov	r3, r0
}
 8019836:	4618      	mov	r0, r3
 8019838:	3720      	adds	r7, #32
 801983a:	46bd      	mov	sp, r7
 801983c:	bd80      	pop	{r7, pc}
 801983e:	bf00      	nop
 8019840:	ffffdba0 	.word	0xffffdba0
 8019844:	ffffdb9e 	.word	0xffffdb9e

08019848 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8019848:	b580      	push	{r7, lr}
 801984a:	b088      	sub	sp, #32
 801984c:	af00      	add	r7, sp, #0
 801984e:	60f8      	str	r0, [r7, #12]
 8019850:	60b9      	str	r1, [r7, #8]
 8019852:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	68ba      	ldr	r2, [r7, #8]
 801985a:	1ad3      	subs	r3, r2, r3
 801985c:	2b00      	cmp	r3, #0
 801985e:	dc01      	bgt.n	8019864 <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 8019860:	4b14      	ldr	r3, [pc, #80]	; (80198b4 <mbedtls_x509_get_sig+0x6c>)
 8019862:	e023      	b.n	80198ac <mbedtls_x509_get_sig+0x64>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	781b      	ldrb	r3, [r3, #0]
 801986a:	61fb      	str	r3, [r7, #28]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801986c:	f107 0314 	add.w	r3, r7, #20
 8019870:	461a      	mov	r2, r3
 8019872:	68b9      	ldr	r1, [r7, #8]
 8019874:	68f8      	ldr	r0, [r7, #12]
 8019876:	f7ec fe45 	bl	8006504 <mbedtls_asn1_get_bitstring_null>
 801987a:	61b8      	str	r0, [r7, #24]
 801987c:	69bb      	ldr	r3, [r7, #24]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d003      	beq.n	801988a <mbedtls_x509_get_sig+0x42>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 8019882:	69bb      	ldr	r3, [r7, #24]
 8019884:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 8019888:	e010      	b.n	80198ac <mbedtls_x509_get_sig+0x64>

    sig->tag = tag_type;
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	69fa      	ldr	r2, [r7, #28]
 801988e:	601a      	str	r2, [r3, #0]
    sig->len = len;
 8019890:	697a      	ldr	r2, [r7, #20]
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	605a      	str	r2, [r3, #4]
    sig->p = *p;
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	681a      	ldr	r2, [r3, #0]
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	609a      	str	r2, [r3, #8]

    *p += len;
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	681a      	ldr	r2, [r3, #0]
 80198a2:	697b      	ldr	r3, [r7, #20]
 80198a4:	441a      	add	r2, r3
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	601a      	str	r2, [r3, #0]

    return( 0 );
 80198aa:	2300      	movs	r3, #0
}
 80198ac:	4618      	mov	r0, r3
 80198ae:	3720      	adds	r7, #32
 80198b0:	46bd      	mov	sp, r7
 80198b2:	bd80      	pop	{r7, pc}
 80198b4:	ffffdb20 	.word	0xffffdb20

080198b8 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b086      	sub	sp, #24
 80198bc:	af00      	add	r7, sp, #0
 80198be:	60f8      	str	r0, [r7, #12]
 80198c0:	60b9      	str	r1, [r7, #8]
 80198c2:	607a      	str	r2, [r7, #4]
 80198c4:	603b      	str	r3, [r7, #0]
    int ret;

    if( *sig_opts != NULL )
 80198c6:	6a3b      	ldr	r3, [r7, #32]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d001      	beq.n	80198d2 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80198ce:	4b11      	ldr	r3, [pc, #68]	; (8019914 <mbedtls_x509_get_sig_alg+0x5c>)
 80198d0:	e01b      	b.n	801990a <mbedtls_x509_get_sig_alg+0x52>

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 80198d2:	683a      	ldr	r2, [r7, #0]
 80198d4:	6879      	ldr	r1, [r7, #4]
 80198d6:	68f8      	ldr	r0, [r7, #12]
 80198d8:	f7f4 ff38 	bl	800e74c <mbedtls_oid_get_sig_alg>
 80198dc:	6178      	str	r0, [r7, #20]
 80198de:	697b      	ldr	r3, [r7, #20]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d003      	beq.n	80198ec <mbedtls_x509_get_sig_alg+0x34>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 80198e4:	697b      	ldr	r3, [r7, #20]
 80198e6:	f5a3 5318 	sub.w	r3, r3, #9728	; 0x2600
 80198ea:	e00e      	b.n	801990a <mbedtls_x509_get_sig_alg+0x52>
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 80198ec:	68bb      	ldr	r3, [r7, #8]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	2b05      	cmp	r3, #5
 80198f2:	d003      	beq.n	80198fc <mbedtls_x509_get_sig_alg+0x44>
 80198f4:	68bb      	ldr	r3, [r7, #8]
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d103      	bne.n	8019904 <mbedtls_x509_get_sig_alg+0x4c>
              sig_params->len != 0 )
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	685b      	ldr	r3, [r3, #4]
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 8019900:	2b00      	cmp	r3, #0
 8019902:	d001      	beq.n	8019908 <mbedtls_x509_get_sig_alg+0x50>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 8019904:	4b04      	ldr	r3, [pc, #16]	; (8019918 <mbedtls_x509_get_sig_alg+0x60>)
 8019906:	e000      	b.n	801990a <mbedtls_x509_get_sig_alg+0x52>
    }

    return( 0 );
 8019908:	2300      	movs	r3, #0
}
 801990a:	4618      	mov	r0, r3
 801990c:	3718      	adds	r7, #24
 801990e:	46bd      	mov	sp, r7
 8019910:	bd80      	pop	{r7, pc}
 8019912:	bf00      	nop
 8019914:	ffffd800 	.word	0xffffd800
 8019918:	ffffdd00 	.word	0xffffdd00

0801991c <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 801991c:	b580      	push	{r7, lr}
 801991e:	b086      	sub	sp, #24
 8019920:	af00      	add	r7, sp, #0
 8019922:	60f8      	str	r0, [r7, #12]
 8019924:	60b9      	str	r1, [r7, #8]
 8019926:	607a      	str	r2, [r7, #4]
 8019928:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( *p == end )
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	68ba      	ldr	r2, [r7, #8]
 8019930:	429a      	cmp	r2, r3
 8019932:	d101      	bne.n	8019938 <mbedtls_x509_get_ext+0x1c>
        return( 0 );
 8019934:	2300      	movs	r3, #0
 8019936:	e037      	b.n	80199a8 <mbedtls_x509_get_ext+0x8c>

    ext->tag = **p;
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	781b      	ldrb	r3, [r3, #0]
 801993e:	461a      	mov	r2, r3
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	1d1a      	adds	r2, r3, #4
 8019948:	683b      	ldr	r3, [r7, #0]
 801994a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 801994e:	68b9      	ldr	r1, [r7, #8]
 8019950:	68f8      	ldr	r0, [r7, #12]
 8019952:	f7ec fcfb 	bl	800634c <mbedtls_asn1_get_tag>
 8019956:	6178      	str	r0, [r7, #20]
 8019958:	697b      	ldr	r3, [r7, #20]
 801995a:	2b00      	cmp	r3, #0
 801995c:	d001      	beq.n	8019962 <mbedtls_x509_get_ext+0x46>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );
 801995e:	697b      	ldr	r3, [r7, #20]
 8019960:	e022      	b.n	80199a8 <mbedtls_x509_get_ext+0x8c>

    ext->p = *p;
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	681a      	ldr	r2, [r3, #0]
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	609a      	str	r2, [r3, #8]
    end = *p + ext->len;
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	681a      	ldr	r2, [r3, #0]
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	685b      	ldr	r3, [r3, #4]
 8019972:	4413      	add	r3, r2
 8019974:	60bb      	str	r3, [r7, #8]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8019976:	f107 0210 	add.w	r2, r7, #16
 801997a:	2330      	movs	r3, #48	; 0x30
 801997c:	68b9      	ldr	r1, [r7, #8]
 801997e:	68f8      	ldr	r0, [r7, #12]
 8019980:	f7ec fce4 	bl	800634c <mbedtls_asn1_get_tag>
 8019984:	6178      	str	r0, [r7, #20]
 8019986:	697b      	ldr	r3, [r7, #20]
 8019988:	2b00      	cmp	r3, #0
 801998a:	d003      	beq.n	8019994 <mbedtls_x509_get_ext+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801998c:	697b      	ldr	r3, [r7, #20]
 801998e:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 8019992:	e009      	b.n	80199a8 <mbedtls_x509_get_ext+0x8c>

    if( end != *p + len )
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	681a      	ldr	r2, [r3, #0]
 8019998:	693b      	ldr	r3, [r7, #16]
 801999a:	4413      	add	r3, r2
 801999c:	68ba      	ldr	r2, [r7, #8]
 801999e:	429a      	cmp	r2, r3
 80199a0:	d001      	beq.n	80199a6 <mbedtls_x509_get_ext+0x8a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80199a2:	4b03      	ldr	r3, [pc, #12]	; (80199b0 <mbedtls_x509_get_ext+0x94>)
 80199a4:	e000      	b.n	80199a8 <mbedtls_x509_get_ext+0x8c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80199a6:	2300      	movs	r3, #0
}
 80199a8:	4618      	mov	r0, r3
 80199aa:	3718      	adds	r7, #24
 80199ac:	46bd      	mov	sp, r7
 80199ae:	bd80      	pop	{r7, pc}
 80199b0:	ffffda9a 	.word	0xffffda9a

080199b4 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b0cc      	sub	sp, #304	; 0x130
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80199be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80199c2:	6018      	str	r0, [r3, #0]
 80199c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80199c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80199cc:	6019      	str	r1, [r3, #0]
 80199ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80199d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80199d6:	601a      	str	r2, [r3, #0]
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 80199d8:	2300      	movs	r3, #0
 80199da:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 80199de:	2300      	movs	r3, #0
 80199e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80199e4:	f107 0310 	add.w	r3, r7, #16
 80199e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80199ec:	2100      	movs	r1, #0
 80199ee:	4618      	mov	r0, r3
 80199f0:	f003 ff3a 	bl	801d868 <memset>

    name = dn;
 80199f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80199f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    p = buf;
 8019a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019a06:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    n = size;
 8019a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019a14:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    while( name != NULL )
 8019a1e:	e0f5      	b.n	8019c0c <mbedtls_x509_dn_gets+0x258>
    {
        if( !name->oid.p )
 8019a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019a24:	689b      	ldr	r3, [r3, #8]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d105      	bne.n	8019a36 <mbedtls_x509_dn_gets+0x82>
        {
            name = name->next;
 8019a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019a2e:	699b      	ldr	r3, [r3, #24]
 8019a30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            continue;
 8019a34:	e0ea      	b.n	8019c0c <mbedtls_x509_dn_gets+0x258>
        }

        if( name != dn )
 8019a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019a3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8019a3e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	429a      	cmp	r2, r3
 8019a46:	d029      	beq.n	8019a9c <mbedtls_x509_dn_gets+0xe8>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 8019a48:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d001      	beq.n	8019a54 <mbedtls_x509_dn_gets+0xa0>
 8019a50:	4b77      	ldr	r3, [pc, #476]	; (8019c30 <mbedtls_x509_dn_gets+0x27c>)
 8019a52:	e000      	b.n	8019a56 <mbedtls_x509_dn_gets+0xa2>
 8019a54:	4b77      	ldr	r3, [pc, #476]	; (8019c34 <mbedtls_x509_dn_gets+0x280>)
 8019a56:	461a      	mov	r2, r3
 8019a58:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8019a5c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8019a60:	f004 f90a 	bl	801dc78 <sniprintf>
 8019a64:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
            MBEDTLS_X509_SAFE_SNPRINTF;
 8019a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	db05      	blt.n	8019a7c <mbedtls_x509_dn_gets+0xc8>
 8019a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019a74:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019a78:	429a      	cmp	r2, r3
 8019a7a:	d801      	bhi.n	8019a80 <mbedtls_x509_dn_gets+0xcc>
 8019a7c:	4b6e      	ldr	r3, [pc, #440]	; (8019c38 <mbedtls_x509_dn_gets+0x284>)
 8019a7e:	e0d2      	b.n	8019c26 <mbedtls_x509_dn_gets+0x272>
 8019a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019a84:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019a88:	1ad3      	subs	r3, r2, r3
 8019a8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8019a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019a92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8019a96:	4413      	add	r3, r2
 8019a98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 8019a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019aa0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8019aa4:	4611      	mov	r1, r2
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7f4 fd54 	bl	800e554 <mbedtls_oid_get_attr_short_name>
 8019aac:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

        if( ret == 0 )
 8019ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d10b      	bne.n	8019ad0 <mbedtls_x509_dn_gets+0x11c>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 8019ab8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019abc:	4a5f      	ldr	r2, [pc, #380]	; (8019c3c <mbedtls_x509_dn_gets+0x288>)
 8019abe:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8019ac2:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8019ac6:	f004 f8d7 	bl	801dc78 <sniprintf>
 8019aca:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 8019ace:	e008      	b.n	8019ae2 <mbedtls_x509_dn_gets+0x12e>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 8019ad0:	4a5b      	ldr	r2, [pc, #364]	; (8019c40 <mbedtls_x509_dn_gets+0x28c>)
 8019ad2:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8019ad6:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8019ada:	f004 f8cd 	bl	801dc78 <sniprintf>
 8019ade:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
        MBEDTLS_X509_SAFE_SNPRINTF;
 8019ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	db05      	blt.n	8019af6 <mbedtls_x509_dn_gets+0x142>
 8019aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019aee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019af2:	429a      	cmp	r2, r3
 8019af4:	d801      	bhi.n	8019afa <mbedtls_x509_dn_gets+0x146>
 8019af6:	4b50      	ldr	r3, [pc, #320]	; (8019c38 <mbedtls_x509_dn_gets+0x284>)
 8019af8:	e095      	b.n	8019c26 <mbedtls_x509_dn_gets+0x272>
 8019afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019afe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019b02:	1ad3      	subs	r3, r2, r3
 8019b04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8019b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019b0c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8019b10:	4413      	add	r3, r2
 8019b12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

        for( i = 0; i < name->val.len; i++ )
 8019b16:	2300      	movs	r3, #0
 8019b18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8019b1c:	e035      	b.n	8019b8a <mbedtls_x509_dn_gets+0x1d6>
        {
            if( i >= sizeof( s ) - 1 )
 8019b1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019b22:	2bfe      	cmp	r3, #254	; 0xfe
 8019b24:	d839      	bhi.n	8019b9a <mbedtls_x509_dn_gets+0x1e6>
                break;

            c = name->val.p[i];
 8019b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019b2a:	695a      	ldr	r2, [r3, #20]
 8019b2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019b30:	4413      	add	r3, r2
 8019b32:	781b      	ldrb	r3, [r3, #0]
 8019b34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 8019b38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8019b3c:	2b1f      	cmp	r3, #31
 8019b3e:	d90b      	bls.n	8019b58 <mbedtls_x509_dn_gets+0x1a4>
 8019b40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8019b44:	2b7f      	cmp	r3, #127	; 0x7f
 8019b46:	d007      	beq.n	8019b58 <mbedtls_x509_dn_gets+0x1a4>
 8019b48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8019b4c:	2b80      	cmp	r3, #128	; 0x80
 8019b4e:	d90d      	bls.n	8019b6c <mbedtls_x509_dn_gets+0x1b8>
 8019b50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8019b54:	2b9f      	cmp	r3, #159	; 0x9f
 8019b56:	d809      	bhi.n	8019b6c <mbedtls_x509_dn_gets+0x1b8>
                 s[i] = '?';
 8019b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019b5c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8019b60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019b64:	4413      	add	r3, r2
 8019b66:	223f      	movs	r2, #63	; 0x3f
 8019b68:	701a      	strb	r2, [r3, #0]
 8019b6a:	e009      	b.n	8019b80 <mbedtls_x509_dn_gets+0x1cc>
            else s[i] = c;
 8019b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019b70:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8019b74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019b78:	4413      	add	r3, r2
 8019b7a:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8019b7e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < name->val.len; i++ )
 8019b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019b84:	3301      	adds	r3, #1
 8019b86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8019b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019b8e:	691b      	ldr	r3, [r3, #16]
 8019b90:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8019b94:	429a      	cmp	r2, r3
 8019b96:	d3c2      	bcc.n	8019b1e <mbedtls_x509_dn_gets+0x16a>
 8019b98:	e000      	b.n	8019b9c <mbedtls_x509_dn_gets+0x1e8>
                break;
 8019b9a:	bf00      	nop
        }
        s[i] = '\0';
 8019b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019ba0:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8019ba4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019ba8:	4413      	add	r3, r2
 8019baa:	2200      	movs	r2, #0
 8019bac:	701a      	strb	r2, [r3, #0]
        ret = mbedtls_snprintf( p, n, "%s", s );
 8019bae:	f107 0310 	add.w	r3, r7, #16
 8019bb2:	4a24      	ldr	r2, [pc, #144]	; (8019c44 <mbedtls_x509_dn_gets+0x290>)
 8019bb4:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8019bb8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8019bbc:	f004 f85c 	bl	801dc78 <sniprintf>
 8019bc0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
        MBEDTLS_X509_SAFE_SNPRINTF;
 8019bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	db05      	blt.n	8019bd8 <mbedtls_x509_dn_gets+0x224>
 8019bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019bd0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019bd4:	429a      	cmp	r2, r3
 8019bd6:	d801      	bhi.n	8019bdc <mbedtls_x509_dn_gets+0x228>
 8019bd8:	4b17      	ldr	r3, [pc, #92]	; (8019c38 <mbedtls_x509_dn_gets+0x284>)
 8019bda:	e024      	b.n	8019c26 <mbedtls_x509_dn_gets+0x272>
 8019bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019be0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019be4:	1ad3      	subs	r3, r2, r3
 8019be6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8019bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019bee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8019bf2:	4413      	add	r3, r2
 8019bf4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

        merge = name->next_merged;
 8019bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019bfc:	7f1b      	ldrb	r3, [r3, #28]
 8019bfe:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        name = name->next;
 8019c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019c06:	699b      	ldr	r3, [r3, #24]
 8019c08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    while( name != NULL )
 8019c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	f47f af05 	bne.w	8019a20 <mbedtls_x509_dn_gets+0x6c>
    }

    return( (int) ( size - n ) );
 8019c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019c1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8019c1e:	681a      	ldr	r2, [r3, #0]
 8019c20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8019c24:	1ad3      	subs	r3, r2, r3
}
 8019c26:	4618      	mov	r0, r3
 8019c28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8019c2c:	46bd      	mov	sp, r7
 8019c2e:	bd80      	pop	{r7, pc}
 8019c30:	08023448 	.word	0x08023448
 8019c34:	0802344c 	.word	0x0802344c
 8019c38:	ffffd680 	.word	0xffffd680
 8019c3c:	08023450 	.word	0x08023450
 8019c40:	08023454 	.word	0x08023454
 8019c44:	08023458 	.word	0x08023458

08019c48 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	b08c      	sub	sp, #48	; 0x30
 8019c4c:	af02      	add	r7, sp, #8
 8019c4e:	60f8      	str	r0, [r7, #12]
 8019c50:	60b9      	str	r1, [r7, #8]
 8019c52:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	61fb      	str	r3, [r7, #28]
    n = size;
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	623b      	str	r3, [r7, #32]

    nr = ( serial->len <= 32 )
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	685b      	ldr	r3, [r3, #4]
        ? serial->len  : 28;
 8019c60:	2b20      	cmp	r3, #32
 8019c62:	d802      	bhi.n	8019c6a <mbedtls_x509_serial_gets+0x22>
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	685b      	ldr	r3, [r3, #4]
 8019c68:	e000      	b.n	8019c6c <mbedtls_x509_serial_gets+0x24>
 8019c6a:	231c      	movs	r3, #28
    nr = ( serial->len <= 32 )
 8019c6c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < nr; i++ )
 8019c6e:	2300      	movs	r3, #0
 8019c70:	627b      	str	r3, [r7, #36]	; 0x24
 8019c72:	e038      	b.n	8019ce6 <mbedtls_x509_serial_gets+0x9e>
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 8019c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d109      	bne.n	8019c8e <mbedtls_x509_serial_gets+0x46>
 8019c7a:	69bb      	ldr	r3, [r7, #24]
 8019c7c:	2b01      	cmp	r3, #1
 8019c7e:	d906      	bls.n	8019c8e <mbedtls_x509_serial_gets+0x46>
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	689a      	ldr	r2, [r3, #8]
 8019c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c86:	4413      	add	r3, r2
 8019c88:	781b      	ldrb	r3, [r3, #0]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d027      	beq.n	8019cde <mbedtls_x509_serial_gets+0x96>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	689a      	ldr	r2, [r3, #8]
 8019c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c94:	4413      	add	r3, r2
 8019c96:	781b      	ldrb	r3, [r3, #0]
        ret = mbedtls_snprintf( p, n, "%02X%s",
 8019c98:	4619      	mov	r1, r3
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 8019c9a:	69bb      	ldr	r3, [r7, #24]
 8019c9c:	3b01      	subs	r3, #1
        ret = mbedtls_snprintf( p, n, "%02X%s",
 8019c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ca0:	429a      	cmp	r2, r3
 8019ca2:	d201      	bcs.n	8019ca8 <mbedtls_x509_serial_gets+0x60>
 8019ca4:	4b23      	ldr	r3, [pc, #140]	; (8019d34 <mbedtls_x509_serial_gets+0xec>)
 8019ca6:	e000      	b.n	8019caa <mbedtls_x509_serial_gets+0x62>
 8019ca8:	4b23      	ldr	r3, [pc, #140]	; (8019d38 <mbedtls_x509_serial_gets+0xf0>)
 8019caa:	9300      	str	r3, [sp, #0]
 8019cac:	460b      	mov	r3, r1
 8019cae:	4a23      	ldr	r2, [pc, #140]	; (8019d3c <mbedtls_x509_serial_gets+0xf4>)
 8019cb0:	6a39      	ldr	r1, [r7, #32]
 8019cb2:	69f8      	ldr	r0, [r7, #28]
 8019cb4:	f003 ffe0 	bl	801dc78 <sniprintf>
 8019cb8:	6178      	str	r0, [r7, #20]
        MBEDTLS_X509_SAFE_SNPRINTF;
 8019cba:	697b      	ldr	r3, [r7, #20]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	db03      	blt.n	8019cc8 <mbedtls_x509_serial_gets+0x80>
 8019cc0:	697b      	ldr	r3, [r7, #20]
 8019cc2:	6a3a      	ldr	r2, [r7, #32]
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	d801      	bhi.n	8019ccc <mbedtls_x509_serial_gets+0x84>
 8019cc8:	4b1d      	ldr	r3, [pc, #116]	; (8019d40 <mbedtls_x509_serial_gets+0xf8>)
 8019cca:	e02f      	b.n	8019d2c <mbedtls_x509_serial_gets+0xe4>
 8019ccc:	697b      	ldr	r3, [r7, #20]
 8019cce:	6a3a      	ldr	r2, [r7, #32]
 8019cd0:	1ad3      	subs	r3, r2, r3
 8019cd2:	623b      	str	r3, [r7, #32]
 8019cd4:	697b      	ldr	r3, [r7, #20]
 8019cd6:	69fa      	ldr	r2, [r7, #28]
 8019cd8:	4413      	add	r3, r2
 8019cda:	61fb      	str	r3, [r7, #28]
 8019cdc:	e000      	b.n	8019ce0 <mbedtls_x509_serial_gets+0x98>
            continue;
 8019cde:	bf00      	nop
    for( i = 0; i < nr; i++ )
 8019ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce2:	3301      	adds	r3, #1
 8019ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8019ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ce8:	69bb      	ldr	r3, [r7, #24]
 8019cea:	429a      	cmp	r2, r3
 8019cec:	d3c2      	bcc.n	8019c74 <mbedtls_x509_serial_gets+0x2c>
    }

    if( nr != serial->len )
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	685b      	ldr	r3, [r3, #4]
 8019cf2:	69ba      	ldr	r2, [r7, #24]
 8019cf4:	429a      	cmp	r2, r3
 8019cf6:	d016      	beq.n	8019d26 <mbedtls_x509_serial_gets+0xde>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 8019cf8:	4a12      	ldr	r2, [pc, #72]	; (8019d44 <mbedtls_x509_serial_gets+0xfc>)
 8019cfa:	6a39      	ldr	r1, [r7, #32]
 8019cfc:	69f8      	ldr	r0, [r7, #28]
 8019cfe:	f003 ffbb 	bl	801dc78 <sniprintf>
 8019d02:	6178      	str	r0, [r7, #20]
        MBEDTLS_X509_SAFE_SNPRINTF;
 8019d04:	697b      	ldr	r3, [r7, #20]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	db03      	blt.n	8019d12 <mbedtls_x509_serial_gets+0xca>
 8019d0a:	697b      	ldr	r3, [r7, #20]
 8019d0c:	6a3a      	ldr	r2, [r7, #32]
 8019d0e:	429a      	cmp	r2, r3
 8019d10:	d801      	bhi.n	8019d16 <mbedtls_x509_serial_gets+0xce>
 8019d12:	4b0b      	ldr	r3, [pc, #44]	; (8019d40 <mbedtls_x509_serial_gets+0xf8>)
 8019d14:	e00a      	b.n	8019d2c <mbedtls_x509_serial_gets+0xe4>
 8019d16:	697b      	ldr	r3, [r7, #20]
 8019d18:	6a3a      	ldr	r2, [r7, #32]
 8019d1a:	1ad3      	subs	r3, r2, r3
 8019d1c:	623b      	str	r3, [r7, #32]
 8019d1e:	697b      	ldr	r3, [r7, #20]
 8019d20:	69fa      	ldr	r2, [r7, #28]
 8019d22:	4413      	add	r3, r2
 8019d24:	61fb      	str	r3, [r7, #28]
    }

    return( (int) ( size - n ) );
 8019d26:	68ba      	ldr	r2, [r7, #8]
 8019d28:	6a3b      	ldr	r3, [r7, #32]
 8019d2a:	1ad3      	subs	r3, r2, r3
}
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	3728      	adds	r7, #40	; 0x28
 8019d30:	46bd      	mov	sp, r7
 8019d32:	bd80      	pop	{r7, pc}
 8019d34:	0802345c 	.word	0x0802345c
 8019d38:	08023460 	.word	0x08023460
 8019d3c:	08023464 	.word	0x08023464
 8019d40:	ffffd680 	.word	0xffffd680
 8019d44:	0802346c 	.word	0x0802346c

08019d48 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b088      	sub	sp, #32
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	60f8      	str	r0, [r7, #12]
 8019d50:	60b9      	str	r1, [r7, #8]
 8019d52:	607a      	str	r2, [r7, #4]
 8019d54:	70fb      	strb	r3, [r7, #3]
    int ret;
    char *p = buf;
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	61bb      	str	r3, [r7, #24]
    size_t n = size;
 8019d5a:	68bb      	ldr	r3, [r7, #8]
 8019d5c:	617b      	str	r3, [r7, #20]
    const char *desc = NULL;
 8019d5e:	2300      	movs	r3, #0
 8019d60:	613b      	str	r3, [r7, #16]

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 8019d62:	f107 0310 	add.w	r3, r7, #16
 8019d66:	4619      	mov	r1, r3
 8019d68:	6878      	ldr	r0, [r7, #4]
 8019d6a:	f7f4 fcd7 	bl	800e71c <mbedtls_oid_get_sig_alg_desc>
 8019d6e:	61f8      	str	r0, [r7, #28]
    if( ret != 0 )
 8019d70:	69fb      	ldr	r3, [r7, #28]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d006      	beq.n	8019d84 <mbedtls_x509_sig_alg_gets+0x3c>
        ret = mbedtls_snprintf( p, n, "???"  );
 8019d76:	4a13      	ldr	r2, [pc, #76]	; (8019dc4 <mbedtls_x509_sig_alg_gets+0x7c>)
 8019d78:	6979      	ldr	r1, [r7, #20]
 8019d7a:	69b8      	ldr	r0, [r7, #24]
 8019d7c:	f003 ff7c 	bl	801dc78 <sniprintf>
 8019d80:	61f8      	str	r0, [r7, #28]
 8019d82:	e006      	b.n	8019d92 <mbedtls_x509_sig_alg_gets+0x4a>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 8019d84:	693b      	ldr	r3, [r7, #16]
 8019d86:	4a10      	ldr	r2, [pc, #64]	; (8019dc8 <mbedtls_x509_sig_alg_gets+0x80>)
 8019d88:	6979      	ldr	r1, [r7, #20]
 8019d8a:	69b8      	ldr	r0, [r7, #24]
 8019d8c:	f003 ff74 	bl	801dc78 <sniprintf>
 8019d90:	61f8      	str	r0, [r7, #28]
    MBEDTLS_X509_SAFE_SNPRINTF;
 8019d92:	69fb      	ldr	r3, [r7, #28]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	db03      	blt.n	8019da0 <mbedtls_x509_sig_alg_gets+0x58>
 8019d98:	69fb      	ldr	r3, [r7, #28]
 8019d9a:	697a      	ldr	r2, [r7, #20]
 8019d9c:	429a      	cmp	r2, r3
 8019d9e:	d801      	bhi.n	8019da4 <mbedtls_x509_sig_alg_gets+0x5c>
 8019da0:	4b0a      	ldr	r3, [pc, #40]	; (8019dcc <mbedtls_x509_sig_alg_gets+0x84>)
 8019da2:	e00a      	b.n	8019dba <mbedtls_x509_sig_alg_gets+0x72>
 8019da4:	69fb      	ldr	r3, [r7, #28]
 8019da6:	697a      	ldr	r2, [r7, #20]
 8019da8:	1ad3      	subs	r3, r2, r3
 8019daa:	617b      	str	r3, [r7, #20]
 8019dac:	69fb      	ldr	r3, [r7, #28]
 8019dae:	69ba      	ldr	r2, [r7, #24]
 8019db0:	4413      	add	r3, r2
 8019db2:	61bb      	str	r3, [r7, #24]
    ((void) pk_alg);
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
 8019db4:	68ba      	ldr	r2, [r7, #8]
 8019db6:	697b      	ldr	r3, [r7, #20]
 8019db8:	1ad3      	subs	r3, r2, r3
}
 8019dba:	4618      	mov	r0, r3
 8019dbc:	3720      	adds	r7, #32
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}
 8019dc2:	bf00      	nop
 8019dc4:	08023474 	.word	0x08023474
 8019dc8:	08023458 	.word	0x08023458
 8019dcc:	ffffd680 	.word	0xffffd680

08019dd0 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b088      	sub	sp, #32
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	60f8      	str	r0, [r7, #12]
 8019dd8:	60b9      	str	r1, [r7, #8]
 8019dda:	607a      	str	r2, [r7, #4]
    char *p = buf;
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	61fb      	str	r3, [r7, #28]
    size_t n = buf_size;
 8019de0:	68bb      	ldr	r3, [r7, #8]
 8019de2:	61bb      	str	r3, [r7, #24]
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	4a0e      	ldr	r2, [pc, #56]	; (8019e20 <mbedtls_x509_key_size_helper+0x50>)
 8019de8:	69b9      	ldr	r1, [r7, #24]
 8019dea:	69f8      	ldr	r0, [r7, #28]
 8019dec:	f003 ff44 	bl	801dc78 <sniprintf>
 8019df0:	6178      	str	r0, [r7, #20]
    MBEDTLS_X509_SAFE_SNPRINTF;
 8019df2:	697b      	ldr	r3, [r7, #20]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	db03      	blt.n	8019e00 <mbedtls_x509_key_size_helper+0x30>
 8019df8:	697b      	ldr	r3, [r7, #20]
 8019dfa:	69ba      	ldr	r2, [r7, #24]
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	d801      	bhi.n	8019e04 <mbedtls_x509_key_size_helper+0x34>
 8019e00:	4b08      	ldr	r3, [pc, #32]	; (8019e24 <mbedtls_x509_key_size_helper+0x54>)
 8019e02:	e008      	b.n	8019e16 <mbedtls_x509_key_size_helper+0x46>
 8019e04:	697b      	ldr	r3, [r7, #20]
 8019e06:	69ba      	ldr	r2, [r7, #24]
 8019e08:	1ad3      	subs	r3, r2, r3
 8019e0a:	61bb      	str	r3, [r7, #24]
 8019e0c:	697b      	ldr	r3, [r7, #20]
 8019e0e:	69fa      	ldr	r2, [r7, #28]
 8019e10:	4413      	add	r3, r2
 8019e12:	61fb      	str	r3, [r7, #28]

    return( 0 );
 8019e14:	2300      	movs	r3, #0
}
 8019e16:	4618      	mov	r0, r3
 8019e18:	3720      	adds	r7, #32
 8019e1a:	46bd      	mov	sp, r7
 8019e1c:	bd80      	pop	{r7, pc}
 8019e1e:	bf00      	nop
 8019e20:	08023478 	.word	0x08023478
 8019e24:	ffffd680 	.word	0xffffd680

08019e28 <mbedtls_x509_time_is_past>:
}

#else  /* MBEDTLS_HAVE_TIME_DATE */

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
 8019e28:	b480      	push	{r7}
 8019e2a:	b083      	sub	sp, #12
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
    ((void) to);
    return( 0 );
 8019e30:	2300      	movs	r3, #0
}
 8019e32:	4618      	mov	r0, r3
 8019e34:	370c      	adds	r7, #12
 8019e36:	46bd      	mov	sp, r7
 8019e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e3c:	4770      	bx	lr

08019e3e <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
 8019e3e:	b480      	push	{r7}
 8019e40:	b083      	sub	sp, #12
 8019e42:	af00      	add	r7, sp, #0
 8019e44:	6078      	str	r0, [r7, #4]
    ((void) from);
    return( 0 );
 8019e46:	2300      	movs	r3, #0
}
 8019e48:	4618      	mov	r0, r3
 8019e4a:	370c      	adds	r7, #12
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e52:	4770      	bx	lr

08019e54 <mbedtls_zeroize>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8019e54:	b480      	push	{r7}
 8019e56:	b085      	sub	sp, #20
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
 8019e5c:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	60fb      	str	r3, [r7, #12]
 8019e62:	e004      	b.n	8019e6e <mbedtls_zeroize+0x1a>
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	1c5a      	adds	r2, r3, #1
 8019e68:	60fa      	str	r2, [r7, #12]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	701a      	strb	r2, [r3, #0]
 8019e6e:	683b      	ldr	r3, [r7, #0]
 8019e70:	1e5a      	subs	r2, r3, #1
 8019e72:	603a      	str	r2, [r7, #0]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d1f5      	bne.n	8019e64 <mbedtls_zeroize+0x10>
}
 8019e78:	bf00      	nop
 8019e7a:	bf00      	nop
 8019e7c:	3714      	adds	r7, #20
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e84:	4770      	bx	lr

08019e86 <x509_profile_check_md_alg>:
 * Check md_alg against profile
 * Return 0 if md_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_md_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_md_type_t md_alg )
{
 8019e86:	b480      	push	{r7}
 8019e88:	b083      	sub	sp, #12
 8019e8a:	af00      	add	r7, sp, #0
 8019e8c:	6078      	str	r0, [r7, #4]
 8019e8e:	460b      	mov	r3, r1
 8019e90:	70fb      	strb	r3, [r7, #3]
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	78fa      	ldrb	r2, [r7, #3]
 8019e98:	3a01      	subs	r2, #1
 8019e9a:	2101      	movs	r1, #1
 8019e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8019ea0:	4013      	ands	r3, r2
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d001      	beq.n	8019eaa <x509_profile_check_md_alg+0x24>
        return( 0 );
 8019ea6:	2300      	movs	r3, #0
 8019ea8:	e001      	b.n	8019eae <x509_profile_check_md_alg+0x28>

    return( -1 );
 8019eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019eae:	4618      	mov	r0, r3
 8019eb0:	370c      	adds	r7, #12
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb8:	4770      	bx	lr

08019eba <x509_profile_check_pk_alg>:
 * Check pk_alg against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
 8019eba:	b480      	push	{r7}
 8019ebc:	b083      	sub	sp, #12
 8019ebe:	af00      	add	r7, sp, #0
 8019ec0:	6078      	str	r0, [r7, #4]
 8019ec2:	460b      	mov	r3, r1
 8019ec4:	70fb      	strb	r3, [r7, #3]
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	685b      	ldr	r3, [r3, #4]
 8019eca:	78fa      	ldrb	r2, [r7, #3]
 8019ecc:	3a01      	subs	r2, #1
 8019ece:	2101      	movs	r1, #1
 8019ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8019ed4:	4013      	ands	r3, r2
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d001      	beq.n	8019ede <x509_profile_check_pk_alg+0x24>
        return( 0 );
 8019eda:	2300      	movs	r3, #0
 8019edc:	e001      	b.n	8019ee2 <x509_profile_check_pk_alg+0x28>

    return( -1 );
 8019ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	370c      	adds	r7, #12
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eec:	4770      	bx	lr

08019eee <x509_profile_check_key>:
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
 8019eee:	b580      	push	{r7, lr}
 8019ef0:	b084      	sub	sp, #16
 8019ef2:	af00      	add	r7, sp, #0
 8019ef4:	60f8      	str	r0, [r7, #12]
 8019ef6:	460b      	mov	r3, r1
 8019ef8:	607a      	str	r2, [r7, #4]
 8019efa:	72fb      	strb	r3, [r7, #11]
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8019efc:	7afb      	ldrb	r3, [r7, #11]
 8019efe:	2b01      	cmp	r3, #1
 8019f00:	d002      	beq.n	8019f08 <x509_profile_check_key+0x1a>
 8019f02:	7afb      	ldrb	r3, [r7, #11]
 8019f04:	2b06      	cmp	r3, #6
 8019f06:	d10c      	bne.n	8019f22 <x509_profile_check_key+0x34>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 8019f08:	6878      	ldr	r0, [r7, #4]
 8019f0a:	f7f4 ff6b 	bl	800ede4 <mbedtls_pk_get_bitlen>
 8019f0e:	4602      	mov	r2, r0
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	68db      	ldr	r3, [r3, #12]
 8019f14:	429a      	cmp	r2, r3
 8019f16:	d301      	bcc.n	8019f1c <x509_profile_check_key+0x2e>
            return( 0 );
 8019f18:	2300      	movs	r3, #0
 8019f1a:	e004      	b.n	8019f26 <x509_profile_check_key+0x38>

        return( -1 );
 8019f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f20:	e001      	b.n	8019f26 <x509_profile_check_key+0x38>

        return( -1 );
    }
#endif

    return( -1 );
 8019f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019f26:	4618      	mov	r0, r3
 8019f28:	3710      	adds	r7, #16
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}
	...

08019f30 <x509_get_version>:
 *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
 */
static int x509_get_version( unsigned char **p,
                             const unsigned char *end,
                             int *ver )
{
 8019f30:	b580      	push	{r7, lr}
 8019f32:	b086      	sub	sp, #24
 8019f34:	af00      	add	r7, sp, #0
 8019f36:	60f8      	str	r0, [r7, #12]
 8019f38:	60b9      	str	r1, [r7, #8]
 8019f3a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8019f3c:	f107 0210 	add.w	r2, r7, #16
 8019f40:	23a0      	movs	r3, #160	; 0xa0
 8019f42:	68b9      	ldr	r1, [r7, #8]
 8019f44:	68f8      	ldr	r0, [r7, #12]
 8019f46:	f7ec fa01 	bl	800634c <mbedtls_asn1_get_tag>
 8019f4a:	6178      	str	r0, [r7, #20]
 8019f4c:	697b      	ldr	r3, [r7, #20]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d00a      	beq.n	8019f68 <x509_get_version+0x38>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8019f52:	697b      	ldr	r3, [r7, #20]
 8019f54:	f113 0f62 	cmn.w	r3, #98	; 0x62
 8019f58:	d104      	bne.n	8019f64 <x509_get_version+0x34>
        {
            *ver = 0;
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	2200      	movs	r2, #0
 8019f5e:	601a      	str	r2, [r3, #0]
            return( 0 );
 8019f60:	2300      	movs	r3, #0
 8019f62:	e01b      	b.n	8019f9c <x509_get_version+0x6c>
        }

        return( ret );
 8019f64:	697b      	ldr	r3, [r7, #20]
 8019f66:	e019      	b.n	8019f9c <x509_get_version+0x6c>
    }

    end = *p + len;
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	681a      	ldr	r2, [r3, #0]
 8019f6c:	693b      	ldr	r3, [r7, #16]
 8019f6e:	4413      	add	r3, r2
 8019f70:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8019f72:	687a      	ldr	r2, [r7, #4]
 8019f74:	68b9      	ldr	r1, [r7, #8]
 8019f76:	68f8      	ldr	r0, [r7, #12]
 8019f78:	f7ec fa3f 	bl	80063fa <mbedtls_asn1_get_int>
 8019f7c:	6178      	str	r0, [r7, #20]
 8019f7e:	697b      	ldr	r3, [r7, #20]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d003      	beq.n	8019f8c <x509_get_version+0x5c>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 8019f84:	697b      	ldr	r3, [r7, #20]
 8019f86:	f5a3 5308 	sub.w	r3, r3, #8704	; 0x2200
 8019f8a:	e007      	b.n	8019f9c <x509_get_version+0x6c>

    if( *p != end )
 8019f8c:	68fb      	ldr	r3, [r7, #12]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	68ba      	ldr	r2, [r7, #8]
 8019f92:	429a      	cmp	r2, r3
 8019f94:	d001      	beq.n	8019f9a <x509_get_version+0x6a>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 8019f96:	4b03      	ldr	r3, [pc, #12]	; (8019fa4 <x509_get_version+0x74>)
 8019f98:	e000      	b.n	8019f9c <x509_get_version+0x6c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8019f9a:	2300      	movs	r3, #0
}
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	3718      	adds	r7, #24
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bd80      	pop	{r7, pc}
 8019fa4:	ffffdd9a 	.word	0xffffdd9a

08019fa8 <x509_get_dates>:
 */
static int x509_get_dates( unsigned char **p,
                           const unsigned char *end,
                           mbedtls_x509_time *from,
                           mbedtls_x509_time *to )
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b086      	sub	sp, #24
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	60f8      	str	r0, [r7, #12]
 8019fb0:	60b9      	str	r1, [r7, #8]
 8019fb2:	607a      	str	r2, [r7, #4]
 8019fb4:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8019fb6:	f107 0210 	add.w	r2, r7, #16
 8019fba:	2330      	movs	r3, #48	; 0x30
 8019fbc:	68b9      	ldr	r1, [r7, #8]
 8019fbe:	68f8      	ldr	r0, [r7, #12]
 8019fc0:	f7ec f9c4 	bl	800634c <mbedtls_asn1_get_tag>
 8019fc4:	6178      	str	r0, [r7, #20]
 8019fc6:	697b      	ldr	r3, [r7, #20]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d003      	beq.n	8019fd4 <x509_get_dates+0x2c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8019fcc:	697b      	ldr	r3, [r7, #20]
 8019fce:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8019fd2:	e022      	b.n	801a01a <x509_get_dates+0x72>

    end = *p + len;
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	681a      	ldr	r2, [r3, #0]
 8019fd8:	693b      	ldr	r3, [r7, #16]
 8019fda:	4413      	add	r3, r2
 8019fdc:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8019fde:	687a      	ldr	r2, [r7, #4]
 8019fe0:	68b9      	ldr	r1, [r7, #8]
 8019fe2:	68f8      	ldr	r0, [r7, #12]
 8019fe4:	f7ff fbec 	bl	80197c0 <mbedtls_x509_get_time>
 8019fe8:	6178      	str	r0, [r7, #20]
 8019fea:	697b      	ldr	r3, [r7, #20]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d001      	beq.n	8019ff4 <x509_get_dates+0x4c>
        return( ret );
 8019ff0:	697b      	ldr	r3, [r7, #20]
 8019ff2:	e012      	b.n	801a01a <x509_get_dates+0x72>

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8019ff4:	683a      	ldr	r2, [r7, #0]
 8019ff6:	68b9      	ldr	r1, [r7, #8]
 8019ff8:	68f8      	ldr	r0, [r7, #12]
 8019ffa:	f7ff fbe1 	bl	80197c0 <mbedtls_x509_get_time>
 8019ffe:	6178      	str	r0, [r7, #20]
 801a000:	697b      	ldr	r3, [r7, #20]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d001      	beq.n	801a00a <x509_get_dates+0x62>
        return( ret );
 801a006:	697b      	ldr	r3, [r7, #20]
 801a008:	e007      	b.n	801a01a <x509_get_dates+0x72>

    if( *p != end )
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	68ba      	ldr	r2, [r7, #8]
 801a010:	429a      	cmp	r2, r3
 801a012:	d001      	beq.n	801a018 <x509_get_dates+0x70>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801a014:	4b03      	ldr	r3, [pc, #12]	; (801a024 <x509_get_dates+0x7c>)
 801a016:	e000      	b.n	801a01a <x509_get_dates+0x72>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801a018:	2300      	movs	r3, #0
}
 801a01a:	4618      	mov	r0, r3
 801a01c:	3718      	adds	r7, #24
 801a01e:	46bd      	mov	sp, r7
 801a020:	bd80      	pop	{r7, pc}
 801a022:	bf00      	nop
 801a024:	ffffdb9a 	.word	0xffffdb9a

0801a028 <x509_get_uid>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 801a028:	b580      	push	{r7, lr}
 801a02a:	b086      	sub	sp, #24
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	60f8      	str	r0, [r7, #12]
 801a030:	60b9      	str	r1, [r7, #8]
 801a032:	607a      	str	r2, [r7, #4]
 801a034:	603b      	str	r3, [r7, #0]
    int ret;

    if( *p == end )
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	68ba      	ldr	r2, [r7, #8]
 801a03c:	429a      	cmp	r2, r3
 801a03e:	d101      	bne.n	801a044 <x509_get_uid+0x1c>
        return( 0 );
 801a040:	2300      	movs	r3, #0
 801a042:	e026      	b.n	801a092 <x509_get_uid+0x6a>

    uid->tag = **p;
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	781b      	ldrb	r3, [r3, #0]
 801a04a:	461a      	mov	r2, r3
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	1d1a      	adds	r2, r3, #4
 801a054:	683b      	ldr	r3, [r7, #0]
 801a056:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 801a05a:	68b9      	ldr	r1, [r7, #8]
 801a05c:	68f8      	ldr	r0, [r7, #12]
 801a05e:	f7ec f975 	bl	800634c <mbedtls_asn1_get_tag>
 801a062:	6178      	str	r0, [r7, #20]
 801a064:	697b      	ldr	r3, [r7, #20]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d007      	beq.n	801a07a <x509_get_uid+0x52>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801a06a:	697b      	ldr	r3, [r7, #20]
 801a06c:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801a070:	d101      	bne.n	801a076 <x509_get_uid+0x4e>
            return( 0 );
 801a072:	2300      	movs	r3, #0
 801a074:	e00d      	b.n	801a092 <x509_get_uid+0x6a>

        return( ret );
 801a076:	697b      	ldr	r3, [r7, #20]
 801a078:	e00b      	b.n	801a092 <x509_get_uid+0x6a>
    }

    uid->p = *p;
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	681a      	ldr	r2, [r3, #0]
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	609a      	str	r2, [r3, #8]
    *p += uid->len;
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	681a      	ldr	r2, [r3, #0]
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	685b      	ldr	r3, [r3, #4]
 801a08a:	441a      	add	r2, r3
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	601a      	str	r2, [r3, #0]

    return( 0 );
 801a090:	2300      	movs	r3, #0
}
 801a092:	4618      	mov	r0, r3
 801a094:	3718      	adds	r7, #24
 801a096:	46bd      	mov	sp, r7
 801a098:	bd80      	pop	{r7, pc}
	...

0801a09c <x509_get_basic_constraints>:

static int x509_get_basic_constraints( unsigned char **p,
                                       const unsigned char *end,
                                       int *ca_istrue,
                                       int *max_pathlen )
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b086      	sub	sp, #24
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	60f8      	str	r0, [r7, #12]
 801a0a4:	60b9      	str	r1, [r7, #8]
 801a0a6:	607a      	str	r2, [r7, #4]
 801a0a8:	603b      	str	r3, [r7, #0]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	601a      	str	r2, [r3, #0]
    *max_pathlen = 0; /* endless */
 801a0b0:	683b      	ldr	r3, [r7, #0]
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a0b6:	f107 0210 	add.w	r2, r7, #16
 801a0ba:	2330      	movs	r3, #48	; 0x30
 801a0bc:	68b9      	ldr	r1, [r7, #8]
 801a0be:	68f8      	ldr	r0, [r7, #12]
 801a0c0:	f7ec f944 	bl	800634c <mbedtls_asn1_get_tag>
 801a0c4:	6178      	str	r0, [r7, #20]
 801a0c6:	697b      	ldr	r3, [r7, #20]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d003      	beq.n	801a0d4 <x509_get_basic_constraints+0x38>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a0cc:	697b      	ldr	r3, [r7, #20]
 801a0ce:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a0d2:	e048      	b.n	801a166 <x509_get_basic_constraints+0xca>

    if( *p == end )
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	68ba      	ldr	r2, [r7, #8]
 801a0da:	429a      	cmp	r2, r3
 801a0dc:	d101      	bne.n	801a0e2 <x509_get_basic_constraints+0x46>
        return( 0 );
 801a0de:	2300      	movs	r3, #0
 801a0e0:	e041      	b.n	801a166 <x509_get_basic_constraints+0xca>

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 801a0e2:	687a      	ldr	r2, [r7, #4]
 801a0e4:	68b9      	ldr	r1, [r7, #8]
 801a0e6:	68f8      	ldr	r0, [r7, #12]
 801a0e8:	f7ec f959 	bl	800639e <mbedtls_asn1_get_bool>
 801a0ec:	6178      	str	r0, [r7, #20]
 801a0ee:	697b      	ldr	r3, [r7, #20]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d017      	beq.n	801a124 <x509_get_basic_constraints+0x88>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801a0f4:	697b      	ldr	r3, [r7, #20]
 801a0f6:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801a0fa:	d105      	bne.n	801a108 <x509_get_basic_constraints+0x6c>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 801a0fc:	687a      	ldr	r2, [r7, #4]
 801a0fe:	68b9      	ldr	r1, [r7, #8]
 801a100:	68f8      	ldr	r0, [r7, #12]
 801a102:	f7ec f97a 	bl	80063fa <mbedtls_asn1_get_int>
 801a106:	6178      	str	r0, [r7, #20]

        if( ret != 0 )
 801a108:	697b      	ldr	r3, [r7, #20]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d003      	beq.n	801a116 <x509_get_basic_constraints+0x7a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a10e:	697b      	ldr	r3, [r7, #20]
 801a110:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a114:	e027      	b.n	801a166 <x509_get_basic_constraints+0xca>

        if( *ca_istrue != 0 )
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d002      	beq.n	801a124 <x509_get_basic_constraints+0x88>
            *ca_istrue = 1;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2201      	movs	r2, #1
 801a122:	601a      	str	r2, [r3, #0]
    }

    if( *p == end )
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	68ba      	ldr	r2, [r7, #8]
 801a12a:	429a      	cmp	r2, r3
 801a12c:	d101      	bne.n	801a132 <x509_get_basic_constraints+0x96>
        return( 0 );
 801a12e:	2300      	movs	r3, #0
 801a130:	e019      	b.n	801a166 <x509_get_basic_constraints+0xca>

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 801a132:	683a      	ldr	r2, [r7, #0]
 801a134:	68b9      	ldr	r1, [r7, #8]
 801a136:	68f8      	ldr	r0, [r7, #12]
 801a138:	f7ec f95f 	bl	80063fa <mbedtls_asn1_get_int>
 801a13c:	6178      	str	r0, [r7, #20]
 801a13e:	697b      	ldr	r3, [r7, #20]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d003      	beq.n	801a14c <x509_get_basic_constraints+0xb0>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a144:	697b      	ldr	r3, [r7, #20]
 801a146:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a14a:	e00c      	b.n	801a166 <x509_get_basic_constraints+0xca>

    if( *p != end )
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	68ba      	ldr	r2, [r7, #8]
 801a152:	429a      	cmp	r2, r3
 801a154:	d001      	beq.n	801a15a <x509_get_basic_constraints+0xbe>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a156:	4b06      	ldr	r3, [pc, #24]	; (801a170 <x509_get_basic_constraints+0xd4>)
 801a158:	e005      	b.n	801a166 <x509_get_basic_constraints+0xca>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 801a15a:	683b      	ldr	r3, [r7, #0]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	1c5a      	adds	r2, r3, #1
 801a160:	683b      	ldr	r3, [r7, #0]
 801a162:	601a      	str	r2, [r3, #0]

    return( 0 );
 801a164:	2300      	movs	r3, #0
}
 801a166:	4618      	mov	r0, r3
 801a168:	3718      	adds	r7, #24
 801a16a:	46bd      	mov	sp, r7
 801a16c:	bd80      	pop	{r7, pc}
 801a16e:	bf00      	nop
 801a170:	ffffda9a 	.word	0xffffda9a

0801a174 <x509_get_ns_cert_type>:

static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b088      	sub	sp, #32
 801a178:	af00      	add	r7, sp, #0
 801a17a:	60f8      	str	r0, [r7, #12]
 801a17c:	60b9      	str	r1, [r7, #8]
 801a17e:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 801a180:	2300      	movs	r3, #0
 801a182:	613b      	str	r3, [r7, #16]
 801a184:	2300      	movs	r3, #0
 801a186:	753b      	strb	r3, [r7, #20]
 801a188:	2300      	movs	r3, #0
 801a18a:	61bb      	str	r3, [r7, #24]

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 801a18c:	f107 0310 	add.w	r3, r7, #16
 801a190:	461a      	mov	r2, r3
 801a192:	68b9      	ldr	r1, [r7, #8]
 801a194:	68f8      	ldr	r0, [r7, #12]
 801a196:	f7ec f96e 	bl	8006476 <mbedtls_asn1_get_bitstring>
 801a19a:	61f8      	str	r0, [r7, #28]
 801a19c:	69fb      	ldr	r3, [r7, #28]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d003      	beq.n	801a1aa <x509_get_ns_cert_type+0x36>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a1a2:	69fb      	ldr	r3, [r7, #28]
 801a1a4:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a1a8:	e009      	b.n	801a1be <x509_get_ns_cert_type+0x4a>

    if( bs.len != 1 )
 801a1aa:	693b      	ldr	r3, [r7, #16]
 801a1ac:	2b01      	cmp	r3, #1
 801a1ae:	d001      	beq.n	801a1b4 <x509_get_ns_cert_type+0x40>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a1b0:	4b05      	ldr	r3, [pc, #20]	; (801a1c8 <x509_get_ns_cert_type+0x54>)
 801a1b2:	e004      	b.n	801a1be <x509_get_ns_cert_type+0x4a>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 801a1b4:	69bb      	ldr	r3, [r7, #24]
 801a1b6:	781a      	ldrb	r2, [r3, #0]
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	701a      	strb	r2, [r3, #0]
    return( 0 );
 801a1bc:	2300      	movs	r3, #0
}
 801a1be:	4618      	mov	r0, r3
 801a1c0:	3720      	adds	r7, #32
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	bd80      	pop	{r7, pc}
 801a1c6:	bf00      	nop
 801a1c8:	ffffda9c 	.word	0xffffda9c

0801a1cc <x509_get_key_usage>:

static int x509_get_key_usage( unsigned char **p,
                               const unsigned char *end,
                               unsigned int *key_usage)
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b08a      	sub	sp, #40	; 0x28
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	60f8      	str	r0, [r7, #12]
 801a1d4:	60b9      	str	r1, [r7, #8]
 801a1d6:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 801a1d8:	2300      	movs	r3, #0
 801a1da:	617b      	str	r3, [r7, #20]
 801a1dc:	2300      	movs	r3, #0
 801a1de:	763b      	strb	r3, [r7, #24]
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	61fb      	str	r3, [r7, #28]

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 801a1e4:	f107 0314 	add.w	r3, r7, #20
 801a1e8:	461a      	mov	r2, r3
 801a1ea:	68b9      	ldr	r1, [r7, #8]
 801a1ec:	68f8      	ldr	r0, [r7, #12]
 801a1ee:	f7ec f942 	bl	8006476 <mbedtls_asn1_get_bitstring>
 801a1f2:	6238      	str	r0, [r7, #32]
 801a1f4:	6a3b      	ldr	r3, [r7, #32]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d003      	beq.n	801a202 <x509_get_key_usage+0x36>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a1fa:	6a3b      	ldr	r3, [r7, #32]
 801a1fc:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a200:	e023      	b.n	801a24a <x509_get_key_usage+0x7e>

    if( bs.len < 1 )
 801a202:	697b      	ldr	r3, [r7, #20]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d101      	bne.n	801a20c <x509_get_key_usage+0x40>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a208:	4b12      	ldr	r3, [pc, #72]	; (801a254 <x509_get_key_usage+0x88>)
 801a20a:	e01e      	b.n	801a24a <x509_get_key_usage+0x7e>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	2200      	movs	r2, #0
 801a210:	601a      	str	r2, [r3, #0]
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 801a212:	2300      	movs	r3, #0
 801a214:	627b      	str	r3, [r7, #36]	; 0x24
 801a216:	e010      	b.n	801a23a <x509_get_key_usage+0x6e>
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681a      	ldr	r2, [r3, #0]
 801a21c:	69f9      	ldr	r1, [r7, #28]
 801a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a220:	440b      	add	r3, r1
 801a222:	781b      	ldrb	r3, [r3, #0]
 801a224:	4619      	mov	r1, r3
 801a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a228:	00db      	lsls	r3, r3, #3
 801a22a:	fa01 f303 	lsl.w	r3, r1, r3
 801a22e:	431a      	orrs	r2, r3
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	601a      	str	r2, [r3, #0]
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 801a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a236:	3301      	adds	r3, #1
 801a238:	627b      	str	r3, [r7, #36]	; 0x24
 801a23a:	697b      	ldr	r3, [r7, #20]
 801a23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a23e:	429a      	cmp	r2, r3
 801a240:	d202      	bcs.n	801a248 <x509_get_key_usage+0x7c>
 801a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a244:	2b03      	cmp	r3, #3
 801a246:	d9e7      	bls.n	801a218 <x509_get_key_usage+0x4c>
    }

    return( 0 );
 801a248:	2300      	movs	r3, #0
}
 801a24a:	4618      	mov	r0, r3
 801a24c:	3728      	adds	r7, #40	; 0x28
 801a24e:	46bd      	mov	sp, r7
 801a250:	bd80      	pop	{r7, pc}
 801a252:	bf00      	nop
 801a254:	ffffda9c 	.word	0xffffda9c

0801a258 <x509_get_ext_key_usage>:
 * KeyPurposeId ::= OBJECT IDENTIFIER
 */
static int x509_get_ext_key_usage( unsigned char **p,
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
 801a258:	b580      	push	{r7, lr}
 801a25a:	b086      	sub	sp, #24
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	60f8      	str	r0, [r7, #12]
 801a260:	60b9      	str	r1, [r7, #8]
 801a262:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 801a264:	2306      	movs	r3, #6
 801a266:	687a      	ldr	r2, [r7, #4]
 801a268:	68b9      	ldr	r1, [r7, #8]
 801a26a:	68f8      	ldr	r0, [r7, #12]
 801a26c:	f7ec f973 	bl	8006556 <mbedtls_asn1_get_sequence_of>
 801a270:	6178      	str	r0, [r7, #20]
 801a272:	697b      	ldr	r3, [r7, #20]
 801a274:	2b00      	cmp	r3, #0
 801a276:	d003      	beq.n	801a280 <x509_get_ext_key_usage+0x28>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a278:	697b      	ldr	r3, [r7, #20]
 801a27a:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a27e:	e006      	b.n	801a28e <x509_get_ext_key_usage+0x36>

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	689b      	ldr	r3, [r3, #8]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d101      	bne.n	801a28c <x509_get_ext_key_usage+0x34>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a288:	4b03      	ldr	r3, [pc, #12]	; (801a298 <x509_get_ext_key_usage+0x40>)
 801a28a:	e000      	b.n	801a28e <x509_get_ext_key_usage+0x36>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    return( 0 );
 801a28c:	2300      	movs	r3, #0
}
 801a28e:	4618      	mov	r0, r3
 801a290:	3718      	adds	r7, #24
 801a292:	46bd      	mov	sp, r7
 801a294:	bd80      	pop	{r7, pc}
 801a296:	bf00      	nop
 801a298:	ffffda9c 	.word	0xffffda9c

0801a29c <x509_get_subject_alt_name>:
 * NOTE: we only parse and use dNSName at this point.
 */
static int x509_get_subject_alt_name( unsigned char **p,
                                      const unsigned char *end,
                                      mbedtls_x509_sequence *subject_alt_name )
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b08a      	sub	sp, #40	; 0x28
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	60f8      	str	r0, [r7, #12]
 801a2a4:	60b9      	str	r1, [r7, #8]
 801a2a6:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len, tag_len;
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a2ac:	f107 0214 	add.w	r2, r7, #20
 801a2b0:	2330      	movs	r3, #48	; 0x30
 801a2b2:	68b9      	ldr	r1, [r7, #8]
 801a2b4:	68f8      	ldr	r0, [r7, #12]
 801a2b6:	f7ec f849 	bl	800634c <mbedtls_asn1_get_tag>
 801a2ba:	6238      	str	r0, [r7, #32]
 801a2bc:	6a3b      	ldr	r3, [r7, #32]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d003      	beq.n	801a2ca <x509_get_subject_alt_name+0x2e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a2c2:	6a3b      	ldr	r3, [r7, #32]
 801a2c4:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a2c8:	e077      	b.n	801a3ba <x509_get_subject_alt_name+0x11e>

    if( *p + len != end )
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	681a      	ldr	r2, [r3, #0]
 801a2ce:	697b      	ldr	r3, [r7, #20]
 801a2d0:	4413      	add	r3, r2
 801a2d2:	68ba      	ldr	r2, [r7, #8]
 801a2d4:	429a      	cmp	r2, r3
 801a2d6:	d060      	beq.n	801a39a <x509_get_subject_alt_name+0xfe>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a2d8:	4b3a      	ldr	r3, [pc, #232]	; (801a3c4 <x509_get_subject_alt_name+0x128>)
 801a2da:	e06e      	b.n	801a3ba <x509_get_subject_alt_name+0x11e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        if( ( end - *p ) < 1 )
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	68ba      	ldr	r2, [r7, #8]
 801a2e2:	1ad3      	subs	r3, r2, r3
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	dc01      	bgt.n	801a2ec <x509_get_subject_alt_name+0x50>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a2e8:	4b37      	ldr	r3, [pc, #220]	; (801a3c8 <x509_get_subject_alt_name+0x12c>)
 801a2ea:	e066      	b.n	801a3ba <x509_get_subject_alt_name+0x11e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	781b      	ldrb	r3, [r3, #0]
 801a2f2:	77fb      	strb	r3, [r7, #31]
        (*p)++;
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	1c5a      	adds	r2, r3, #1
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	601a      	str	r2, [r3, #0]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 801a2fe:	f107 0310 	add.w	r3, r7, #16
 801a302:	461a      	mov	r2, r3
 801a304:	68b9      	ldr	r1, [r7, #8]
 801a306:	68f8      	ldr	r0, [r7, #12]
 801a308:	f7eb ff5e 	bl	80061c8 <mbedtls_asn1_get_len>
 801a30c:	6238      	str	r0, [r7, #32]
 801a30e:	6a3b      	ldr	r3, [r7, #32]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d003      	beq.n	801a31c <x509_get_subject_alt_name+0x80>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a314:	6a3b      	ldr	r3, [r7, #32]
 801a316:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a31a:	e04e      	b.n	801a3ba <x509_get_subject_alt_name+0x11e>

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 801a31c:	7ffb      	ldrb	r3, [r7, #31]
 801a31e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a322:	2b80      	cmp	r3, #128	; 0x80
 801a324:	d001      	beq.n	801a32a <x509_get_subject_alt_name+0x8e>
                MBEDTLS_ASN1_CONTEXT_SPECIFIC )
        {
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a326:	4b29      	ldr	r3, [pc, #164]	; (801a3cc <x509_get_subject_alt_name+0x130>)
 801a328:	e047      	b.n	801a3ba <x509_get_subject_alt_name+0x11e>
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 801a32a:	7ffb      	ldrb	r3, [r7, #31]
 801a32c:	2b82      	cmp	r3, #130	; 0x82
 801a32e:	d006      	beq.n	801a33e <x509_get_subject_alt_name+0xa2>
        {
            *p += tag_len;
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	681a      	ldr	r2, [r3, #0]
 801a334:	693b      	ldr	r3, [r7, #16]
 801a336:	441a      	add	r2, r3
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	601a      	str	r2, [r3, #0]
            continue;
 801a33c:	e02d      	b.n	801a39a <x509_get_subject_alt_name+0xfe>
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 801a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a340:	689b      	ldr	r3, [r3, #8]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d016      	beq.n	801a374 <x509_get_subject_alt_name+0xd8>
        {
            if( cur->next != NULL )
 801a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a348:	68db      	ldr	r3, [r3, #12]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d001      	beq.n	801a352 <x509_get_subject_alt_name+0xb6>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 801a34e:	4b20      	ldr	r3, [pc, #128]	; (801a3d0 <x509_get_subject_alt_name+0x134>)
 801a350:	e033      	b.n	801a3ba <x509_get_subject_alt_name+0x11e>

            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 801a352:	2110      	movs	r1, #16
 801a354:	2001      	movs	r0, #1
 801a356:	f003 fa0d 	bl	801d774 <calloc>
 801a35a:	4603      	mov	r3, r0
 801a35c:	461a      	mov	r2, r3
 801a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a360:	60da      	str	r2, [r3, #12]

            if( cur->next == NULL )
 801a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a364:	68db      	ldr	r3, [r3, #12]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d101      	bne.n	801a36e <x509_get_subject_alt_name+0xd2>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a36a:	4b1a      	ldr	r3, [pc, #104]	; (801a3d4 <x509_get_subject_alt_name+0x138>)
 801a36c:	e025      	b.n	801a3ba <x509_get_subject_alt_name+0x11e>
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );

            cur = cur->next;
 801a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a370:	68db      	ldr	r3, [r3, #12]
 801a372:	627b      	str	r3, [r7, #36]	; 0x24
        }

        buf = &(cur->buf);
 801a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a376:	61bb      	str	r3, [r7, #24]
        buf->tag = tag;
 801a378:	7ffa      	ldrb	r2, [r7, #31]
 801a37a:	69bb      	ldr	r3, [r7, #24]
 801a37c:	601a      	str	r2, [r3, #0]
        buf->p = *p;
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	681a      	ldr	r2, [r3, #0]
 801a382:	69bb      	ldr	r3, [r7, #24]
 801a384:	609a      	str	r2, [r3, #8]
        buf->len = tag_len;
 801a386:	693a      	ldr	r2, [r7, #16]
 801a388:	69bb      	ldr	r3, [r7, #24]
 801a38a:	605a      	str	r2, [r3, #4]
        *p += buf->len;
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	681a      	ldr	r2, [r3, #0]
 801a390:	69bb      	ldr	r3, [r7, #24]
 801a392:	685b      	ldr	r3, [r3, #4]
 801a394:	441a      	add	r2, r3
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	601a      	str	r2, [r3, #0]
    while( *p < end )
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	68ba      	ldr	r2, [r7, #8]
 801a3a0:	429a      	cmp	r2, r3
 801a3a2:	d89b      	bhi.n	801a2dc <x509_get_subject_alt_name+0x40>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 801a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a6:	2200      	movs	r2, #0
 801a3a8:	60da      	str	r2, [r3, #12]

    if( *p != end )
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	68ba      	ldr	r2, [r7, #8]
 801a3b0:	429a      	cmp	r2, r3
 801a3b2:	d001      	beq.n	801a3b8 <x509_get_subject_alt_name+0x11c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a3b4:	4b03      	ldr	r3, [pc, #12]	; (801a3c4 <x509_get_subject_alt_name+0x128>)
 801a3b6:	e000      	b.n	801a3ba <x509_get_subject_alt_name+0x11e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801a3b8:	2300      	movs	r3, #0
}
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	3728      	adds	r7, #40	; 0x28
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	bd80      	pop	{r7, pc}
 801a3c2:	bf00      	nop
 801a3c4:	ffffda9a 	.word	0xffffda9a
 801a3c8:	ffffdaa0 	.word	0xffffdaa0
 801a3cc:	ffffda9e 	.word	0xffffda9e
 801a3d0:	ffffdb00 	.word	0xffffdb00
 801a3d4:	ffffda96 	.word	0xffffda96

0801a3d8 <x509_get_crt_ext>:
 *
 */
static int x509_get_crt_ext( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_x509_crt *crt )
{
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b08e      	sub	sp, #56	; 0x38
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	60f8      	str	r0, [r7, #12]
 801a3e0:	60b9      	str	r1, [r7, #8]
 801a3e2:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 801a3ea:	2303      	movs	r3, #3
 801a3ec:	68b9      	ldr	r1, [r7, #8]
 801a3ee:	68f8      	ldr	r0, [r7, #12]
 801a3f0:	f7ff fa94 	bl	801991c <mbedtls_x509_get_ext>
 801a3f4:	6378      	str	r0, [r7, #52]	; 0x34
 801a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	f000 8107 	beq.w	801a60c <x509_get_crt_ext+0x234>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a400:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801a404:	d101      	bne.n	801a40a <x509_get_crt_ext+0x32>
            return( 0 );
 801a406:	2300      	movs	r3, #0
 801a408:	e10e      	b.n	801a628 <x509_get_crt_ext+0x250>

        return( ret );
 801a40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a40c:	e10c      	b.n	801a628 <x509_get_crt_ext+0x250>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 801a40e:	2300      	movs	r3, #0
 801a410:	61fb      	str	r3, [r7, #28]
 801a412:	2300      	movs	r3, #0
 801a414:	623b      	str	r3, [r7, #32]
 801a416:	2300      	movs	r3, #0
 801a418:	627b      	str	r3, [r7, #36]	; 0x24
        int is_critical = 0; /* DEFAULT FALSE */
 801a41a:	2300      	movs	r3, #0
 801a41c:	61bb      	str	r3, [r7, #24]
        int ext_type = 0;
 801a41e:	2300      	movs	r3, #0
 801a420:	617b      	str	r3, [r7, #20]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a426:	2330      	movs	r3, #48	; 0x30
 801a428:	68b9      	ldr	r1, [r7, #8]
 801a42a:	68f8      	ldr	r0, [r7, #12]
 801a42c:	f7eb ff8e 	bl	800634c <mbedtls_asn1_get_tag>
 801a430:	6378      	str	r0, [r7, #52]	; 0x34
 801a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a434:	2b00      	cmp	r3, #0
 801a436:	d003      	beq.n	801a440 <x509_get_crt_ext+0x68>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a43a:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a43e:	e0f3      	b.n	801a628 <x509_get_crt_ext+0x250>

        end_ext_data = *p + len;
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	681a      	ldr	r2, [r3, #0]
 801a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a446:	4413      	add	r3, r2
 801a448:	633b      	str	r3, [r7, #48]	; 0x30

        /* Get extension ID */
        extn_oid.tag = **p;
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	781b      	ldrb	r3, [r3, #0]
 801a450:	61fb      	str	r3, [r7, #28]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 801a452:	f107 031c 	add.w	r3, r7, #28
 801a456:	1d1a      	adds	r2, r3, #4
 801a458:	2306      	movs	r3, #6
 801a45a:	68b9      	ldr	r1, [r7, #8]
 801a45c:	68f8      	ldr	r0, [r7, #12]
 801a45e:	f7eb ff75 	bl	800634c <mbedtls_asn1_get_tag>
 801a462:	6378      	str	r0, [r7, #52]	; 0x34
 801a464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a466:	2b00      	cmp	r3, #0
 801a468:	d003      	beq.n	801a472 <x509_get_crt_ext+0x9a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a46c:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a470:	e0da      	b.n	801a628 <x509_get_crt_ext+0x250>

        extn_oid.p = *p;
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	627b      	str	r3, [r7, #36]	; 0x24
        *p += extn_oid.len;
 801a478:	68fb      	ldr	r3, [r7, #12]
 801a47a:	681a      	ldr	r2, [r3, #0]
 801a47c:	6a3b      	ldr	r3, [r7, #32]
 801a47e:	441a      	add	r2, r3
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	601a      	str	r2, [r3, #0]

        if( ( end - *p ) < 1 )
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	68ba      	ldr	r2, [r7, #8]
 801a48a:	1ad3      	subs	r3, r2, r3
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	dc01      	bgt.n	801a494 <x509_get_crt_ext+0xbc>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a490:	4b67      	ldr	r3, [pc, #412]	; (801a630 <x509_get_crt_ext+0x258>)
 801a492:	e0c9      	b.n	801a628 <x509_get_crt_ext+0x250>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 801a494:	f107 0318 	add.w	r3, r7, #24
 801a498:	461a      	mov	r2, r3
 801a49a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a49c:	68f8      	ldr	r0, [r7, #12]
 801a49e:	f7eb ff7e 	bl	800639e <mbedtls_asn1_get_bool>
 801a4a2:	6378      	str	r0, [r7, #52]	; 0x34
 801a4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d007      	beq.n	801a4ba <x509_get_crt_ext+0xe2>
 801a4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4ac:	f113 0f62 	cmn.w	r3, #98	; 0x62
 801a4b0:	d003      	beq.n	801a4ba <x509_get_crt_ext+0xe2>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4b4:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a4b8:	e0b6      	b.n	801a628 <x509_get_crt_ext+0x250>

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 801a4ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a4be:	2304      	movs	r3, #4
 801a4c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a4c2:	68f8      	ldr	r0, [r7, #12]
 801a4c4:	f7eb ff42 	bl	800634c <mbedtls_asn1_get_tag>
 801a4c8:	6378      	str	r0, [r7, #52]	; 0x34
 801a4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d003      	beq.n	801a4d8 <x509_get_crt_ext+0x100>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801a4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4d2:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 801a4d6:	e0a7      	b.n	801a628 <x509_get_crt_ext+0x250>

        end_ext_octet = *p + len;
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	681a      	ldr	r2, [r3, #0]
 801a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4de:	4413      	add	r3, r2
 801a4e0:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( end_ext_octet != end_ext_data )
 801a4e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4e6:	429a      	cmp	r2, r3
 801a4e8:	d001      	beq.n	801a4ee <x509_get_crt_ext+0x116>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a4ea:	4b52      	ldr	r3, [pc, #328]	; (801a634 <x509_get_crt_ext+0x25c>)
 801a4ec:	e09c      	b.n	801a628 <x509_get_crt_ext+0x250>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 801a4ee:	f107 0214 	add.w	r2, r7, #20
 801a4f2:	f107 031c 	add.w	r3, r7, #28
 801a4f6:	4611      	mov	r1, r2
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	f7f4 f877 	bl	800e5ec <mbedtls_oid_get_x509_ext_type>
 801a4fe:	6378      	str	r0, [r7, #52]	; 0x34

        if( ret != 0 )
 801a500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a502:	2b00      	cmp	r3, #0
 801a504:	d007      	beq.n	801a516 <x509_get_crt_ext+0x13e>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a50a:	601a      	str	r2, [r3, #0]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 801a50c:	69bb      	ldr	r3, [r7, #24]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d07c      	beq.n	801a60c <x509_get_crt_ext+0x234>
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a512:	4b49      	ldr	r3, [pc, #292]	; (801a638 <x509_get_crt_ext+0x260>)
 801a514:	e088      	b.n	801a628 <x509_get_crt_ext+0x250>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801a51c:	697b      	ldr	r3, [r7, #20]
 801a51e:	4013      	ands	r3, r2
 801a520:	2b00      	cmp	r3, #0
 801a522:	d001      	beq.n	801a528 <x509_get_crt_ext+0x150>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 801a524:	4b45      	ldr	r3, [pc, #276]	; (801a63c <x509_get_crt_ext+0x264>)
 801a526:	e07f      	b.n	801a628 <x509_get_crt_ext+0x250>

        crt->ext_types |= ext_type;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801a52e:	697b      	ldr	r3, [r7, #20]
 801a530:	431a      	orrs	r2, r3
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

        switch( ext_type )
 801a538:	697b      	ldr	r3, [r7, #20]
 801a53a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a53e:	d04c      	beq.n	801a5da <x509_get_crt_ext+0x202>
 801a540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a544:	dc57      	bgt.n	801a5f6 <x509_get_crt_ext+0x21e>
 801a546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a54a:	d02b      	beq.n	801a5a4 <x509_get_crt_ext+0x1cc>
 801a54c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a550:	dc51      	bgt.n	801a5f6 <x509_get_crt_ext+0x21e>
 801a552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a556:	d007      	beq.n	801a568 <x509_get_crt_ext+0x190>
 801a558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a55c:	dc4b      	bgt.n	801a5f6 <x509_get_crt_ext+0x21e>
 801a55e:	2b04      	cmp	r3, #4
 801a560:	d012      	beq.n	801a588 <x509_get_crt_ext+0x1b0>
 801a562:	2b20      	cmp	r3, #32
 801a564:	d02c      	beq.n	801a5c0 <x509_get_crt_ext+0x1e8>
 801a566:	e046      	b.n	801a5f6 <x509_get_crt_ext+0x21e>
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	f103 02fc 	add.w	r2, r3, #252	; 0xfc
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801a574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a576:	68f8      	ldr	r0, [r7, #12]
 801a578:	f7ff fd90 	bl	801a09c <x509_get_basic_constraints>
 801a57c:	6378      	str	r0, [r7, #52]	; 0x34
 801a57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a580:	2b00      	cmp	r3, #0
 801a582:	d03a      	beq.n	801a5fa <x509_get_crt_ext+0x222>
                    &crt->ca_istrue, &crt->max_pathlen ) ) != 0 )
                return( ret );
 801a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a586:	e04f      	b.n	801a628 <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_KEY_USAGE:
            /* Parse key usage */
            if( ( ret = x509_get_key_usage( p, end_ext_octet,
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801a58e:	461a      	mov	r2, r3
 801a590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a592:	68f8      	ldr	r0, [r7, #12]
 801a594:	f7ff fe1a 	bl	801a1cc <x509_get_key_usage>
 801a598:	6378      	str	r0, [r7, #52]	; 0x34
 801a59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d02e      	beq.n	801a5fe <x509_get_crt_ext+0x226>
                    &crt->key_usage ) ) != 0 )
                return( ret );
 801a5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5a2:	e041      	b.n	801a628 <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE:
            /* Parse extended key usage */
            if( ( ret = x509_get_ext_key_usage( p, end_ext_octet,
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801a5aa:	461a      	mov	r2, r3
 801a5ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a5ae:	68f8      	ldr	r0, [r7, #12]
 801a5b0:	f7ff fe52 	bl	801a258 <x509_get_ext_key_usage>
 801a5b4:	6378      	str	r0, [r7, #52]	; 0x34
 801a5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d022      	beq.n	801a602 <x509_get_crt_ext+0x22a>
                    &crt->ext_key_usage ) ) != 0 )
                return( ret );
 801a5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5be:	e033      	b.n	801a628 <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	33e8      	adds	r3, #232	; 0xe8
 801a5c4:	461a      	mov	r2, r3
 801a5c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a5c8:	68f8      	ldr	r0, [r7, #12]
 801a5ca:	f7ff fe67 	bl	801a29c <x509_get_subject_alt_name>
 801a5ce:	6378      	str	r0, [r7, #52]	; 0x34
 801a5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d017      	beq.n	801a606 <x509_get_crt_ext+0x22e>
                    &crt->subject_alt_names ) ) != 0 )
                return( ret );
 801a5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5d8:	e026      	b.n	801a628 <x509_get_crt_ext+0x250>
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801a5e0:	461a      	mov	r2, r3
 801a5e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a5e4:	68f8      	ldr	r0, [r7, #12]
 801a5e6:	f7ff fdc5 	bl	801a174 <x509_get_ns_cert_type>
 801a5ea:	6378      	str	r0, [r7, #52]	; 0x34
 801a5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d00b      	beq.n	801a60a <x509_get_crt_ext+0x232>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
 801a5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5f4:	e018      	b.n	801a628 <x509_get_crt_ext+0x250>
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 801a5f6:	4b12      	ldr	r3, [pc, #72]	; (801a640 <x509_get_crt_ext+0x268>)
 801a5f8:	e016      	b.n	801a628 <x509_get_crt_ext+0x250>
            break;
 801a5fa:	bf00      	nop
 801a5fc:	e006      	b.n	801a60c <x509_get_crt_ext+0x234>
            break;
 801a5fe:	bf00      	nop
 801a600:	e004      	b.n	801a60c <x509_get_crt_ext+0x234>
            break;
 801a602:	bf00      	nop
 801a604:	e002      	b.n	801a60c <x509_get_crt_ext+0x234>
            break;
 801a606:	bf00      	nop
 801a608:	e000      	b.n	801a60c <x509_get_crt_ext+0x234>
            break;
 801a60a:	bf00      	nop
    while( *p < end )
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	68ba      	ldr	r2, [r7, #8]
 801a612:	429a      	cmp	r2, r3
 801a614:	f63f aefb 	bhi.w	801a40e <x509_get_crt_ext+0x36>
        }
    }

    if( *p != end )
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	68ba      	ldr	r2, [r7, #8]
 801a61e:	429a      	cmp	r2, r3
 801a620:	d001      	beq.n	801a626 <x509_get_crt_ext+0x24e>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801a622:	4b04      	ldr	r3, [pc, #16]	; (801a634 <x509_get_crt_ext+0x25c>)
 801a624:	e000      	b.n	801a628 <x509_get_crt_ext+0x250>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 801a626:	2300      	movs	r3, #0
}
 801a628:	4618      	mov	r0, r3
 801a62a:	3738      	adds	r7, #56	; 0x38
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}
 801a630:	ffffdaa0 	.word	0xffffdaa0
 801a634:	ffffda9a 	.word	0xffffda9a
 801a638:	ffffda9e 	.word	0xffffda9e
 801a63c:	ffffdb00 	.word	0xffffdb00
 801a640:	ffffdf80 	.word	0xffffdf80

0801a644 <x509_crt_parse_der_core>:
/*
 * Parse and fill a single X.509 certificate in DER format
 */
static int x509_crt_parse_der_core( mbedtls_x509_crt *crt, const unsigned char *buf,
                                    size_t buflen )
{
 801a644:	b590      	push	{r4, r7, lr}
 801a646:	b095      	sub	sp, #84	; 0x54
 801a648:	af02      	add	r7, sp, #8
 801a64a:	60f8      	str	r0, [r7, #12]
 801a64c:	60b9      	str	r1, [r7, #8]
 801a64e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 801a650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a654:	220c      	movs	r2, #12
 801a656:	2100      	movs	r1, #0
 801a658:	4618      	mov	r0, r3
 801a65a:	f003 f905 	bl	801d868 <memset>
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 801a65e:	f107 031c 	add.w	r3, r7, #28
 801a662:	220c      	movs	r2, #12
 801a664:	2100      	movs	r1, #0
 801a666:	4618      	mov	r0, r3
 801a668:	f003 f8fe 	bl	801d868 <memset>
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 801a66c:	f107 0310 	add.w	r3, r7, #16
 801a670:	220c      	movs	r2, #12
 801a672:	2100      	movs	r1, #0
 801a674:	4618      	mov	r0, r3
 801a676:	f003 f8f7 	bl	801d868 <memset>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d002      	beq.n	801a686 <x509_crt_parse_der_core+0x42>
 801a680:	68bb      	ldr	r3, [r7, #8]
 801a682:	2b00      	cmp	r3, #0
 801a684:	d101      	bne.n	801a68a <x509_crt_parse_der_core+0x46>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801a686:	4ba0      	ldr	r3, [pc, #640]	; (801a908 <x509_crt_parse_der_core+0x2c4>)
 801a688:	e207      	b.n	801aa9a <x509_crt_parse_der_core+0x456>

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 801a68a:	68bb      	ldr	r3, [r7, #8]
 801a68c:	637b      	str	r3, [r7, #52]	; 0x34
    len = buflen;
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	63bb      	str	r3, [r7, #56]	; 0x38
    end = p + len;
 801a692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a696:	4413      	add	r3, r2
 801a698:	643b      	str	r3, [r7, #64]	; 0x40
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a69a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a69e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a6a2:	2330      	movs	r3, #48	; 0x30
 801a6a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a6a6:	f7eb fe51 	bl	800634c <mbedtls_asn1_get_tag>
 801a6aa:	6478      	str	r0, [r7, #68]	; 0x44
 801a6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d004      	beq.n	801a6bc <x509_crt_parse_der_core+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801a6b2:	68f8      	ldr	r0, [r7, #12]
 801a6b4:	f001 ff1e 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 801a6b8:	4b94      	ldr	r3, [pc, #592]	; (801a90c <x509_crt_parse_der_core+0x2c8>)
 801a6ba:	e1ee      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    if( len > (size_t) ( end - p ) )
 801a6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a6c0:	1ad3      	subs	r3, r2, r3
 801a6c2:	461a      	mov	r2, r3
 801a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6c6:	429a      	cmp	r2, r3
 801a6c8:	d204      	bcs.n	801a6d4 <x509_crt_parse_der_core+0x90>
    {
        mbedtls_x509_crt_free( crt );
 801a6ca:	68f8      	ldr	r0, [r7, #12]
 801a6cc:	f001 ff12 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801a6d0:	4b8f      	ldr	r3, [pc, #572]	; (801a910 <x509_crt_parse_der_core+0x2cc>)
 801a6d2:	e1e2      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;
 801a6d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6d8:	4413      	add	r3, r2
 801a6da:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 801a6dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a6de:	68bb      	ldr	r3, [r7, #8]
 801a6e0:	1ad3      	subs	r3, r2, r3
 801a6e2:	461a      	mov	r2, r3
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	605a      	str	r2, [r3, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	685b      	ldr	r3, [r3, #4]
 801a6ec:	4619      	mov	r1, r3
 801a6ee:	2001      	movs	r0, #1
 801a6f0:	f003 f840 	bl	801d774 <calloc>
 801a6f4:	4603      	mov	r3, r0
 801a6f6:	637b      	str	r3, [r7, #52]	; 0x34
 801a6f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	609a      	str	r2, [r3, #8]
    if( p == NULL )
 801a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a700:	2b00      	cmp	r3, #0
 801a702:	d101      	bne.n	801a708 <x509_crt_parse_der_core+0xc4>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801a704:	4b83      	ldr	r3, [pc, #524]	; (801a914 <x509_crt_parse_der_core+0x2d0>)
 801a706:	e1c8      	b.n	801aa9a <x509_crt_parse_der_core+0x456>

    memcpy( p, buf, crt->raw.len );
 801a708:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	685b      	ldr	r3, [r3, #4]
 801a70e:	461a      	mov	r2, r3
 801a710:	68b9      	ldr	r1, [r7, #8]
 801a712:	f003 f881 	bl	801d818 <memcpy>

    // Direct pointers to the new buffer 
    p += crt->raw.len - len;
 801a716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	6859      	ldr	r1, [r3, #4]
 801a71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a71e:	1acb      	subs	r3, r1, r3
 801a720:	4413      	add	r3, r2
 801a722:	637b      	str	r3, [r7, #52]	; 0x34
    end = crt_end = p + len;
 801a724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a728:	4413      	add	r3, r2
 801a72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a72e:	643b      	str	r3, [r7, #64]	; 0x40

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 801a730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	615a      	str	r2, [r3, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a736:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a73a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a73e:	2330      	movs	r3, #48	; 0x30
 801a740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a742:	f7eb fe03 	bl	800634c <mbedtls_asn1_get_tag>
 801a746:	6478      	str	r0, [r7, #68]	; 0x44
 801a748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d006      	beq.n	801a75c <x509_crt_parse_der_core+0x118>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801a74e:	68f8      	ldr	r0, [r7, #12]
 801a750:	f001 fed0 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801a754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a756:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
 801a75a:	e19e      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    end = p + len;
 801a75c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a760:	4413      	add	r3, r2
 801a762:	643b      	str	r3, [r7, #64]	; 0x40
    crt->tbs.len = end - crt->tbs.p;
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	695b      	ldr	r3, [r3, #20]
 801a768:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a76a:	1ad3      	subs	r3, r2, r3
 801a76c:	461a      	mov	r2, r3
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	611a      	str	r2, [r3, #16]
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	f103 0218 	add.w	r2, r3, #24
 801a778:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a77c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a77e:	4618      	mov	r0, r3
 801a780:	f7ff fbd6 	bl	8019f30 <x509_get_version>
 801a784:	6478      	str	r0, [r7, #68]	; 0x44
 801a786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d11a      	bne.n	801a7c2 <x509_crt_parse_der_core+0x17e>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	f103 021c 	add.w	r2, r3, #28
 801a792:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a798:	4618      	mov	r0, r3
 801a79a:	f7fe fd3d 	bl	8019218 <mbedtls_x509_get_serial>
 801a79e:	6478      	str	r0, [r7, #68]	; 0x44
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 801a7a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d10d      	bne.n	801a7c2 <x509_crt_parse_der_core+0x17e>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801a7ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a7b0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a7b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a7b6:	f7fe fd75 	bl	80192a4 <mbedtls_x509_get_alg>
 801a7ba:	6478      	str	r0, [r7, #68]	; 0x44
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 801a7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d004      	beq.n	801a7cc <x509_crt_parse_der_core+0x188>
                                            &sig_params1 ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801a7c2:	68f8      	ldr	r0, [r7, #12]
 801a7c4:	f001 fe96 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( ret );
 801a7c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7ca:	e166      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    if( crt->version < 0 || crt->version > 2 )
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	699b      	ldr	r3, [r3, #24]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	db03      	blt.n	801a7dc <x509_crt_parse_der_core+0x198>
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	699b      	ldr	r3, [r3, #24]
 801a7d8:	2b02      	cmp	r3, #2
 801a7da:	dd04      	ble.n	801a7e6 <x509_crt_parse_der_core+0x1a2>
    {
        mbedtls_x509_crt_free( crt );
 801a7dc:	68f8      	ldr	r0, [r7, #12]
 801a7de:	f001 fe89 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 801a7e2:	4b4d      	ldr	r3, [pc, #308]	; (801a918 <x509_crt_parse_der_core+0x2d4>)
 801a7e4:	e159      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    crt->version++;
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	699b      	ldr	r3, [r3, #24]
 801a7ea:	1c5a      	adds	r2, r3, #1
 801a7ec:	68fb      	ldr	r3, [r7, #12]
 801a7ee:	619a      	str	r2, [r3, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801a7f6:	68fb      	ldr	r3, [r7, #12]
 801a7f8:	f503 7294 	add.w	r2, r3, #296	; 0x128
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	f203 1429 	addw	r4, r3, #297	; 0x129
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 801a808:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801a80c:	9300      	str	r3, [sp, #0]
 801a80e:	4623      	mov	r3, r4
 801a810:	f7ff f852 	bl	80198b8 <mbedtls_x509_get_sig_alg>
 801a814:	6478      	str	r0, [r7, #68]	; 0x44
 801a816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d004      	beq.n	801a826 <x509_crt_parse_der_core+0x1e2>
                                  &crt->sig_md, &crt->sig_pk,
                                  &crt->sig_opts ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801a81c:	68f8      	ldr	r0, [r7, #12]
 801a81e:	f001 fe69 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( ret );
 801a822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a824:	e139      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 801a826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	63da      	str	r2, [r3, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a82c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a830:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a834:	2330      	movs	r3, #48	; 0x30
 801a836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a838:	f7eb fd88 	bl	800634c <mbedtls_asn1_get_tag>
 801a83c:	6478      	str	r0, [r7, #68]	; 0x44
 801a83e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a840:	2b00      	cmp	r3, #0
 801a842:	d006      	beq.n	801a852 <x509_crt_parse_der_core+0x20e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801a844:	68f8      	ldr	r0, [r7, #12]
 801a846:	f001 fe55 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801a84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a84c:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
 801a850:	e123      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 801a852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a856:	18d1      	adds	r1, r2, r3
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801a85e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a862:	4618      	mov	r0, r3
 801a864:	f7fe fdd6 	bl	8019414 <mbedtls_x509_get_name>
 801a868:	6478      	str	r0, [r7, #68]	; 0x44
 801a86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d004      	beq.n	801a87a <x509_crt_parse_der_core+0x236>
    {
        mbedtls_x509_crt_free( crt );
 801a870:	68f8      	ldr	r0, [r7, #12]
 801a872:	f001 fe3f 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( ret );
 801a876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a878:	e10f      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 801a87a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a880:	1ad3      	subs	r3, r2, r3
 801a882:	461a      	mov	r2, r3
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	639a      	str	r2, [r3, #56]	; 0x38
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	33a4      	adds	r3, #164	; 0xa4
 801a892:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a896:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a898:	f7ff fb86 	bl	8019fa8 <x509_get_dates>
 801a89c:	6478      	str	r0, [r7, #68]	; 0x44
 801a89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d004      	beq.n	801a8ae <x509_crt_parse_der_core+0x26a>
                                         &crt->valid_to ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801a8a4:	68f8      	ldr	r0, [r7, #12]
 801a8a6:	f001 fe25 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( ret );
 801a8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8ac:	e0f5      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 801a8ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	649a      	str	r2, [r3, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a8b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a8b8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a8bc:	2330      	movs	r3, #48	; 0x30
 801a8be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a8c0:	f7eb fd44 	bl	800634c <mbedtls_asn1_get_tag>
 801a8c4:	6478      	str	r0, [r7, #68]	; 0x44
 801a8c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d006      	beq.n	801a8da <x509_crt_parse_der_core+0x296>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 801a8cc:	68f8      	ldr	r0, [r7, #12]
 801a8ce:	f001 fe11 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801a8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8d4:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
 801a8d8:	e0df      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 801a8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d01d      	beq.n	801a91c <x509_crt_parse_der_core+0x2d8>
 801a8e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8e4:	18d1      	adds	r1, r2, r3
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801a8ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a8f0:	4618      	mov	r0, r3
 801a8f2:	f7fe fd8f 	bl	8019414 <mbedtls_x509_get_name>
 801a8f6:	6478      	str	r0, [r7, #68]	; 0x44
 801a8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d00e      	beq.n	801a91c <x509_crt_parse_der_core+0x2d8>
    {
        mbedtls_x509_crt_free( crt );
 801a8fe:	68f8      	ldr	r0, [r7, #12]
 801a900:	f001 fdf8 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( ret );
 801a904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a906:	e0c8      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
 801a908:	ffffd800 	.word	0xffffd800
 801a90c:	ffffde80 	.word	0xffffde80
 801a910:	ffffde1a 	.word	0xffffde1a
 801a914:	ffffd780 	.word	0xffffd780
 801a918:	ffffda80 	.word	0xffffda80
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 801a91c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	461a      	mov	r2, r3
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	645a      	str	r2, [r3, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 801a930:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a934:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a936:	4618      	mov	r0, r3
 801a938:	f7f4 fcda 	bl	800f2f0 <mbedtls_pk_parse_subpubkey>
 801a93c:	6478      	str	r0, [r7, #68]	; 0x44
 801a93e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a940:	2b00      	cmp	r3, #0
 801a942:	d004      	beq.n	801a94e <x509_crt_parse_der_core+0x30a>
    {
        mbedtls_x509_crt_free( crt );
 801a944:	68f8      	ldr	r0, [r7, #12]
 801a946:	f001 fdd5 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( ret );
 801a94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a94c:	e0a5      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	699b      	ldr	r3, [r3, #24]
 801a952:	2b02      	cmp	r3, #2
 801a954:	d003      	beq.n	801a95e <x509_crt_parse_der_core+0x31a>
 801a956:	68fb      	ldr	r3, [r7, #12]
 801a958:	699b      	ldr	r3, [r3, #24]
 801a95a:	2b03      	cmp	r3, #3
 801a95c:	d111      	bne.n	801a982 <x509_crt_parse_der_core+0x33e>
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 801a964:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a968:	2301      	movs	r3, #1
 801a96a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a96c:	f7ff fb5c 	bl	801a028 <x509_get_uid>
 801a970:	6478      	str	r0, [r7, #68]	; 0x44
        if( ret != 0 )
 801a972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a974:	2b00      	cmp	r3, #0
 801a976:	d004      	beq.n	801a982 <x509_crt_parse_der_core+0x33e>
        {
            mbedtls_x509_crt_free( crt );
 801a978:	68f8      	ldr	r0, [r7, #12]
 801a97a:	f001 fdbb 	bl	801c4f4 <mbedtls_x509_crt_free>
            return( ret );
 801a97e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a980:	e08b      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	699b      	ldr	r3, [r3, #24]
 801a986:	2b02      	cmp	r3, #2
 801a988:	d003      	beq.n	801a992 <x509_crt_parse_der_core+0x34e>
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	699b      	ldr	r3, [r3, #24]
 801a98e:	2b03      	cmp	r3, #3
 801a990:	d111      	bne.n	801a9b6 <x509_crt_parse_der_core+0x372>
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 801a998:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a99c:	2302      	movs	r3, #2
 801a99e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a9a0:	f7ff fb42 	bl	801a028 <x509_get_uid>
 801a9a4:	6478      	str	r0, [r7, #68]	; 0x44
        if( ret != 0 )
 801a9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d004      	beq.n	801a9b6 <x509_crt_parse_der_core+0x372>
        {
            mbedtls_x509_crt_free( crt );
 801a9ac:	68f8      	ldr	r0, [r7, #12]
 801a9ae:	f001 fda1 	bl	801c4f4 <mbedtls_x509_crt_free>
            return( ret );
 801a9b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9b4:	e071      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	699b      	ldr	r3, [r3, #24]
 801a9ba:	2b03      	cmp	r3, #3
 801a9bc:	d10f      	bne.n	801a9de <x509_crt_parse_der_core+0x39a>
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
 801a9be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a9c2:	68fa      	ldr	r2, [r7, #12]
 801a9c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f7ff fd06 	bl	801a3d8 <x509_get_crt_ext>
 801a9cc:	6478      	str	r0, [r7, #68]	; 0x44
        if( ret != 0 )
 801a9ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d004      	beq.n	801a9de <x509_crt_parse_der_core+0x39a>
        {
            mbedtls_x509_crt_free( crt );
 801a9d4:	68f8      	ldr	r0, [r7, #12]
 801a9d6:	f001 fd8d 	bl	801c4f4 <mbedtls_x509_crt_free>
            return( ret );
 801a9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9dc:	e05d      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
        }
    }

    if( p != end )
 801a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a9e2:	429a      	cmp	r2, r3
 801a9e4:	d004      	beq.n	801a9f0 <x509_crt_parse_der_core+0x3ac>
    {
        mbedtls_x509_crt_free( crt );
 801a9e6:	68f8      	ldr	r0, [r7, #12]
 801a9e8:	f001 fd84 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801a9ec:	4b2d      	ldr	r3, [pc, #180]	; (801aaa4 <x509_crt_parse_der_core+0x460>)
 801a9ee:	e054      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    end = crt_end;
 801a9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a9f2:	643b      	str	r3, [r7, #64]	; 0x40
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 801a9f4:	f107 031c 	add.w	r3, r7, #28
 801a9f8:	f107 0210 	add.w	r2, r7, #16
 801a9fc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801aa00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801aa02:	f7fe fc4f 	bl	80192a4 <mbedtls_x509_get_alg>
 801aa06:	6478      	str	r0, [r7, #68]	; 0x44
 801aa08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d004      	beq.n	801aa18 <x509_crt_parse_der_core+0x3d4>
    {
        mbedtls_x509_crt_free( crt );
 801aa0e:	68f8      	ldr	r0, [r7, #12]
 801aa10:	f001 fd70 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( ret );
 801aa14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa16:	e040      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa1c:	697b      	ldr	r3, [r7, #20]
 801aa1e:	429a      	cmp	r2, r3
 801aa20:	d11a      	bne.n	801aa58 <x509_crt_parse_der_core+0x414>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801aa26:	69b9      	ldr	r1, [r7, #24]
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa2c:	461a      	mov	r2, r3
 801aa2e:	f002 fee3 	bl	801d7f8 <memcmp>
 801aa32:	4603      	mov	r3, r0
    if( crt->sig_oid.len != sig_oid2.len ||
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d10f      	bne.n	801aa58 <x509_crt_parse_der_core+0x414>
        sig_params1.len != sig_params2.len ||
 801aa38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801aa3a:	6a3b      	ldr	r3, [r7, #32]
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 801aa3c:	429a      	cmp	r2, r3
 801aa3e:	d10b      	bne.n	801aa58 <x509_crt_parse_der_core+0x414>
        ( sig_params1.len != 0 &&
 801aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        sig_params1.len != sig_params2.len ||
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d00d      	beq.n	801aa62 <x509_crt_parse_der_core+0x41e>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 801aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aa4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	f002 fed3 	bl	801d7f8 <memcmp>
 801aa52:	4603      	mov	r3, r0
        ( sig_params1.len != 0 &&
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d004      	beq.n	801aa62 <x509_crt_parse_der_core+0x41e>
    {
        mbedtls_x509_crt_free( crt );
 801aa58:	68f8      	ldr	r0, [r7, #12]
 801aa5a:	f001 fd4b 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 801aa5e:	4b12      	ldr	r3, [pc, #72]	; (801aaa8 <x509_crt_parse_der_core+0x464>)
 801aa60:	e01b      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 801aa68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801aa6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801aa6e:	4618      	mov	r0, r3
 801aa70:	f7fe feea 	bl	8019848 <mbedtls_x509_get_sig>
 801aa74:	6478      	str	r0, [r7, #68]	; 0x44
 801aa76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d004      	beq.n	801aa86 <x509_crt_parse_der_core+0x442>
    {
        mbedtls_x509_crt_free( crt );
 801aa7c:	68f8      	ldr	r0, [r7, #12]
 801aa7e:	f001 fd39 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( ret );
 801aa82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa84:	e009      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
    }

    if( p != end )
 801aa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801aa8a:	429a      	cmp	r2, r3
 801aa8c:	d004      	beq.n	801aa98 <x509_crt_parse_der_core+0x454>
    {
        mbedtls_x509_crt_free( crt );
 801aa8e:	68f8      	ldr	r0, [r7, #12]
 801aa90:	f001 fd30 	bl	801c4f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801aa94:	4b03      	ldr	r3, [pc, #12]	; (801aaa4 <x509_crt_parse_der_core+0x460>)
 801aa96:	e000      	b.n	801aa9a <x509_crt_parse_der_core+0x456>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    return( 0 );
 801aa98:	2300      	movs	r3, #0
}
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	374c      	adds	r7, #76	; 0x4c
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	bd90      	pop	{r4, r7, pc}
 801aaa2:	bf00      	nop
 801aaa4:	ffffde1a 	.word	0xffffde1a
 801aaa8:	ffffd980 	.word	0xffffd980

0801aaac <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b088      	sub	sp, #32
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	60f8      	str	r0, [r7, #12]
 801aab4:	60b9      	str	r1, [r7, #8]
 801aab6:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	61fb      	str	r3, [r7, #28]
 801aabc:	2300      	movs	r3, #0
 801aabe:	61bb      	str	r3, [r7, #24]

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 801aac0:	69fb      	ldr	r3, [r7, #28]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d002      	beq.n	801aacc <mbedtls_x509_crt_parse_der+0x20>
 801aac6:	68bb      	ldr	r3, [r7, #8]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d107      	bne.n	801aadc <mbedtls_x509_crt_parse_der+0x30>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801aacc:	4b2a      	ldr	r3, [pc, #168]	; (801ab78 <mbedtls_x509_crt_parse_der+0xcc>)
 801aace:	e04e      	b.n	801ab6e <mbedtls_x509_crt_parse_der+0xc2>

    while( crt->version != 0 && crt->next != NULL )
    {
        prev = crt;
 801aad0:	69fb      	ldr	r3, [r7, #28]
 801aad2:	61bb      	str	r3, [r7, #24]
        crt = crt->next;
 801aad4:	69fb      	ldr	r3, [r7, #28]
 801aad6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801aada:	61fb      	str	r3, [r7, #28]
    while( crt->version != 0 && crt->next != NULL )
 801aadc:	69fb      	ldr	r3, [r7, #28]
 801aade:	699b      	ldr	r3, [r3, #24]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d004      	beq.n	801aaee <mbedtls_x509_crt_parse_der+0x42>
 801aae4:	69fb      	ldr	r3, [r7, #28]
 801aae6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d1f0      	bne.n	801aad0 <mbedtls_x509_crt_parse_der+0x24>
    }

    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
 801aaee:	69fb      	ldr	r3, [r7, #28]
 801aaf0:	699b      	ldr	r3, [r3, #24]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d021      	beq.n	801ab3a <mbedtls_x509_crt_parse_der+0x8e>
 801aaf6:	69fb      	ldr	r3, [r7, #28]
 801aaf8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d11c      	bne.n	801ab3a <mbedtls_x509_crt_parse_der+0x8e>
    {
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 801ab00:	f44f 719a 	mov.w	r1, #308	; 0x134
 801ab04:	2001      	movs	r0, #1
 801ab06:	f002 fe35 	bl	801d774 <calloc>
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	461a      	mov	r2, r3
 801ab0e:	69fb      	ldr	r3, [r7, #28]
 801ab10:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if( crt->next == NULL )
 801ab14:	69fb      	ldr	r3, [r7, #28]
 801ab16:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d101      	bne.n	801ab22 <mbedtls_x509_crt_parse_der+0x76>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801ab1e:	4b17      	ldr	r3, [pc, #92]	; (801ab7c <mbedtls_x509_crt_parse_der+0xd0>)
 801ab20:	e025      	b.n	801ab6e <mbedtls_x509_crt_parse_der+0xc2>

        prev = crt;
 801ab22:	69fb      	ldr	r3, [r7, #28]
 801ab24:	61bb      	str	r3, [r7, #24]
        mbedtls_x509_crt_init( crt->next );
 801ab26:	69fb      	ldr	r3, [r7, #28]
 801ab28:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	f001 fcd3 	bl	801c4d8 <mbedtls_x509_crt_init>
        crt = crt->next;
 801ab32:	69fb      	ldr	r3, [r7, #28]
 801ab34:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801ab38:	61fb      	str	r3, [r7, #28]
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 801ab3a:	687a      	ldr	r2, [r7, #4]
 801ab3c:	68b9      	ldr	r1, [r7, #8]
 801ab3e:	69f8      	ldr	r0, [r7, #28]
 801ab40:	f7ff fd80 	bl	801a644 <x509_crt_parse_der_core>
 801ab44:	6178      	str	r0, [r7, #20]
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d00f      	beq.n	801ab6c <mbedtls_x509_crt_parse_der+0xc0>
    {
        if( prev )
 801ab4c:	69bb      	ldr	r3, [r7, #24]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d003      	beq.n	801ab5a <mbedtls_x509_crt_parse_der+0xae>
            prev->next = NULL;
 801ab52:	69bb      	ldr	r3, [r7, #24]
 801ab54:	2200      	movs	r2, #0
 801ab56:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if( crt != chain )
 801ab5a:	69fa      	ldr	r2, [r7, #28]
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	d002      	beq.n	801ab68 <mbedtls_x509_crt_parse_der+0xbc>
            mbedtls_free( crt );
 801ab62:	69f8      	ldr	r0, [r7, #28]
 801ab64:	f002 fe40 	bl	801d7e8 <free>

        return( ret );
 801ab68:	697b      	ldr	r3, [r7, #20]
 801ab6a:	e000      	b.n	801ab6e <mbedtls_x509_crt_parse_der+0xc2>
    }

    return( 0 );
 801ab6c:	2300      	movs	r3, #0
}
 801ab6e:	4618      	mov	r0, r3
 801ab70:	3720      	adds	r7, #32
 801ab72:	46bd      	mov	sp, r7
 801ab74:	bd80      	pop	{r7, pc}
 801ab76:	bf00      	nop
 801ab78:	ffffd800 	.word	0xffffd800
 801ab7c:	ffffd780 	.word	0xffffd780

0801ab80 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 801ab80:	b580      	push	{r7, lr}
 801ab82:	b092      	sub	sp, #72	; 0x48
 801ab84:	af04      	add	r7, sp, #16
 801ab86:	60f8      	str	r0, [r7, #12]
 801ab88:	60b9      	str	r1, [r7, #8]
 801ab8a:	607a      	str	r2, [r7, #4]
#if defined(MBEDTLS_PEM_PARSE_C)
    int success = 0, first_error = 0, total_failed = 0;
 801ab8c:	2300      	movs	r3, #0
 801ab8e:	637b      	str	r3, [r7, #52]	; 0x34
 801ab90:	2300      	movs	r3, #0
 801ab92:	633b      	str	r3, [r7, #48]	; 0x30
 801ab94:	2300      	movs	r3, #0
 801ab96:	62fb      	str	r3, [r7, #44]	; 0x2c
    int buf_format = MBEDTLS_X509_FORMAT_DER;
 801ab98:	2301      	movs	r3, #1
 801ab9a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d002      	beq.n	801aba8 <mbedtls_x509_crt_parse+0x28>
 801aba2:	68bb      	ldr	r3, [r7, #8]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d101      	bne.n	801abac <mbedtls_x509_crt_parse+0x2c>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801aba8:	4b4b      	ldr	r3, [pc, #300]	; (801acd8 <mbedtls_x509_crt_parse+0x158>)
 801abaa:	e090      	b.n	801acce <mbedtls_x509_crt_parse+0x14e>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d00f      	beq.n	801abd2 <mbedtls_x509_crt_parse+0x52>
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	3b01      	subs	r3, #1
 801abb6:	68ba      	ldr	r2, [r7, #8]
 801abb8:	4413      	add	r3, r2
 801abba:	781b      	ldrb	r3, [r3, #0]
 801abbc:	2b0a      	cmp	r3, #10
 801abbe:	d108      	bne.n	801abd2 <mbedtls_x509_crt_parse+0x52>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 801abc0:	4946      	ldr	r1, [pc, #280]	; (801acdc <mbedtls_x509_crt_parse+0x15c>)
 801abc2:	68b8      	ldr	r0, [r7, #8]
 801abc4:	f003 f88c 	bl	801dce0 <strstr>
 801abc8:	4603      	mov	r3, r0
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d001      	beq.n	801abd2 <mbedtls_x509_crt_parse+0x52>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
 801abce:	2302      	movs	r3, #2
 801abd0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
 801abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abd4:	2b01      	cmp	r3, #1
 801abd6:	d106      	bne.n	801abe6 <mbedtls_x509_crt_parse+0x66>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 801abd8:	687a      	ldr	r2, [r7, #4]
 801abda:	68b9      	ldr	r1, [r7, #8]
 801abdc:	68f8      	ldr	r0, [r7, #12]
 801abde:	f7ff ff65 	bl	801aaac <mbedtls_x509_crt_parse_der>
 801abe2:	4603      	mov	r3, r0
 801abe4:	e073      	b.n	801acce <mbedtls_x509_crt_parse+0x14e>
#else
    return mbedtls_x509_crt_parse_der( chain, buf, buflen );
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
    if( buf_format == MBEDTLS_X509_FORMAT_PEM )
 801abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abe8:	2b02      	cmp	r3, #2
 801abea:	d165      	bne.n	801acb8 <mbedtls_x509_crt_parse+0x138>
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 801abec:	e05f      	b.n	801acae <mbedtls_x509_crt_parse+0x12e>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 801abee:	f107 0318 	add.w	r3, r7, #24
 801abf2:	4618      	mov	r0, r3
 801abf4:	f7f3 fe57 	bl	800e8a6 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
 801abf8:	f107 0018 	add.w	r0, r7, #24
 801abfc:	f107 0314 	add.w	r3, r7, #20
 801ac00:	9302      	str	r3, [sp, #8]
 801ac02:	2300      	movs	r3, #0
 801ac04:	9301      	str	r3, [sp, #4]
 801ac06:	2300      	movs	r3, #0
 801ac08:	9300      	str	r3, [sp, #0]
 801ac0a:	68bb      	ldr	r3, [r7, #8]
 801ac0c:	4a34      	ldr	r2, [pc, #208]	; (801ace0 <mbedtls_x509_crt_parse+0x160>)
 801ac0e:	4933      	ldr	r1, [pc, #204]	; (801acdc <mbedtls_x509_crt_parse+0x15c>)
 801ac10:	f7f3 fe56 	bl	800e8c0 <mbedtls_pem_read_buffer>
 801ac14:	6278      	str	r0, [r7, #36]	; 0x24
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );

            if( ret == 0 )
 801ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d117      	bne.n	801ac4c <mbedtls_x509_crt_parse+0xcc>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 801ac1c:	697b      	ldr	r3, [r7, #20]
 801ac1e:	687a      	ldr	r2, [r7, #4]
 801ac20:	1ad3      	subs	r3, r2, r3
 801ac22:	607b      	str	r3, [r7, #4]
                buf += use_len;
 801ac24:	697b      	ldr	r3, [r7, #20]
 801ac26:	68ba      	ldr	r2, [r7, #8]
 801ac28:	4413      	add	r3, r2
 801ac2a:	60bb      	str	r3, [r7, #8]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 801ac2c:	69bb      	ldr	r3, [r7, #24]
 801ac2e:	69fa      	ldr	r2, [r7, #28]
 801ac30:	4619      	mov	r1, r3
 801ac32:	68f8      	ldr	r0, [r7, #12]
 801ac34:	f7ff ff3a 	bl	801aaac <mbedtls_x509_crt_parse_der>
 801ac38:	6278      	str	r0, [r7, #36]	; 0x24

            mbedtls_pem_free( &pem );
 801ac3a:	f107 0318 	add.w	r3, r7, #24
 801ac3e:	4618      	mov	r0, r3
 801ac40:	f7f3 ff1c 	bl	800ea7c <mbedtls_pem_free>

            if( ret != 0 )
 801ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d02f      	beq.n	801acaa <mbedtls_x509_crt_parse+0x12a>
 801ac4a:	e01f      	b.n	801ac8c <mbedtls_x509_crt_parse+0x10c>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 801ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac4e:	f513 5fa4 	cmn.w	r3, #5248	; 0x1480
 801ac52:	d101      	bne.n	801ac58 <mbedtls_x509_crt_parse+0xd8>
                return( ret );
 801ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac56:	e03a      	b.n	801acce <mbedtls_x509_crt_parse+0x14e>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 801ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac5a:	f513 5f84 	cmn.w	r3, #4224	; 0x1080
 801ac5e:	d02a      	beq.n	801acb6 <mbedtls_x509_crt_parse+0x136>
                mbedtls_pem_free( &pem );
 801ac60:	f107 0318 	add.w	r3, r7, #24
 801ac64:	4618      	mov	r0, r3
 801ac66:	f7f3 ff09 	bl	800ea7c <mbedtls_pem_free>
                buflen -= use_len;
 801ac6a:	697b      	ldr	r3, [r7, #20]
 801ac6c:	687a      	ldr	r2, [r7, #4]
 801ac6e:	1ad3      	subs	r3, r2, r3
 801ac70:	607b      	str	r3, [r7, #4]
                buf += use_len;
 801ac72:	697b      	ldr	r3, [r7, #20]
 801ac74:	68ba      	ldr	r2, [r7, #8]
 801ac76:	4413      	add	r3, r2
 801ac78:	60bb      	str	r3, [r7, #8]
                if( first_error == 0 )
 801ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d101      	bne.n	801ac84 <mbedtls_x509_crt_parse+0x104>
                    first_error = ret;
 801ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac82:	633b      	str	r3, [r7, #48]	; 0x30
                total_failed++;
 801ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac86:	3301      	adds	r3, #1
 801ac88:	62fb      	str	r3, [r7, #44]	; 0x2c
                continue;
 801ac8a:	e010      	b.n	801acae <mbedtls_x509_crt_parse+0x12e>
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 801ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac8e:	f513 5f22 	cmn.w	r3, #10368	; 0x2880
 801ac92:	d101      	bne.n	801ac98 <mbedtls_x509_crt_parse+0x118>
                    return( ret );
 801ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac96:	e01a      	b.n	801acce <mbedtls_x509_crt_parse+0x14e>

                if( first_error == 0 )
 801ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d101      	bne.n	801aca2 <mbedtls_x509_crt_parse+0x122>
                    first_error = ret;
 801ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aca0:	633b      	str	r3, [r7, #48]	; 0x30

                total_failed++;
 801aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aca4:	3301      	adds	r3, #1
 801aca6:	62fb      	str	r3, [r7, #44]	; 0x2c
                continue;
 801aca8:	e001      	b.n	801acae <mbedtls_x509_crt_parse+0x12e>
            }

            success = 1;
 801acaa:	2301      	movs	r3, #1
 801acac:	637b      	str	r3, [r7, #52]	; 0x34
        while( buflen > 1 )
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	2b01      	cmp	r3, #1
 801acb2:	d89c      	bhi.n	801abee <mbedtls_x509_crt_parse+0x6e>
 801acb4:	e000      	b.n	801acb8 <mbedtls_x509_crt_parse+0x138>
                break;
 801acb6:	bf00      	nop
        }
    }

    if( success )
 801acb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d001      	beq.n	801acc2 <mbedtls_x509_crt_parse+0x142>
        return( total_failed );
 801acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acc0:	e005      	b.n	801acce <mbedtls_x509_crt_parse+0x14e>
    else if( first_error )
 801acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d001      	beq.n	801accc <mbedtls_x509_crt_parse+0x14c>
        return( first_error );
 801acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acca:	e000      	b.n	801acce <mbedtls_x509_crt_parse+0x14e>
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 801accc:	4b05      	ldr	r3, [pc, #20]	; (801ace4 <mbedtls_x509_crt_parse+0x164>)
#endif /* MBEDTLS_PEM_PARSE_C */
}
 801acce:	4618      	mov	r0, r3
 801acd0:	3738      	adds	r7, #56	; 0x38
 801acd2:	46bd      	mov	sp, r7
 801acd4:	bd80      	pop	{r7, pc}
 801acd6:	bf00      	nop
 801acd8:	ffffd800 	.word	0xffffd800
 801acdc:	08023484 	.word	0x08023484
 801ace0:	080234a0 	.word	0x080234a0
 801ace4:	ffffd880 	.word	0xffffd880

0801ace8 <x509_info_subject_alt_name>:
}
#endif /* MBEDTLS_FS_IO */

static int x509_info_subject_alt_name( char **buf, size_t *size,
                                       const mbedtls_x509_sequence *subject_alt_name )
{
 801ace8:	b480      	push	{r7}
 801acea:	b08b      	sub	sp, #44	; 0x2c
 801acec:	af00      	add	r7, sp, #0
 801acee:	60f8      	str	r0, [r7, #12]
 801acf0:	60b9      	str	r1, [r7, #8]
 801acf2:	607a      	str	r2, [r7, #4]
    size_t i;
    size_t n = *size;
 801acf4:	68bb      	ldr	r3, [r7, #8]
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	623b      	str	r3, [r7, #32]
    char *p = *buf;
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	61fb      	str	r3, [r7, #28]
    const mbedtls_x509_sequence *cur = subject_alt_name;
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	61bb      	str	r3, [r7, #24]
    const char *sep = "";
 801ad04:	4b2b      	ldr	r3, [pc, #172]	; (801adb4 <x509_info_subject_alt_name+0xcc>)
 801ad06:	617b      	str	r3, [r7, #20]
    size_t sep_len = 0;
 801ad08:	2300      	movs	r3, #0
 801ad0a:	613b      	str	r3, [r7, #16]

    while( cur != NULL )
 801ad0c:	e03f      	b.n	801ad8e <x509_info_subject_alt_name+0xa6>
    {
        if( cur->buf.len + sep_len >= n )
 801ad0e:	69bb      	ldr	r3, [r7, #24]
 801ad10:	685a      	ldr	r2, [r3, #4]
 801ad12:	693b      	ldr	r3, [r7, #16]
 801ad14:	4413      	add	r3, r2
 801ad16:	6a3a      	ldr	r2, [r7, #32]
 801ad18:	429a      	cmp	r2, r3
 801ad1a:	d804      	bhi.n	801ad26 <x509_info_subject_alt_name+0x3e>
        {
            *p = '\0';
 801ad1c:	69fb      	ldr	r3, [r7, #28]
 801ad1e:	2200      	movs	r2, #0
 801ad20:	701a      	strb	r2, [r3, #0]
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 801ad22:	4b25      	ldr	r3, [pc, #148]	; (801adb8 <x509_info_subject_alt_name+0xd0>)
 801ad24:	e040      	b.n	801ada8 <x509_info_subject_alt_name+0xc0>
        }

        n -= cur->buf.len + sep_len;
 801ad26:	69bb      	ldr	r3, [r7, #24]
 801ad28:	685a      	ldr	r2, [r3, #4]
 801ad2a:	693b      	ldr	r3, [r7, #16]
 801ad2c:	4413      	add	r3, r2
 801ad2e:	6a3a      	ldr	r2, [r7, #32]
 801ad30:	1ad3      	subs	r3, r2, r3
 801ad32:	623b      	str	r3, [r7, #32]
        for( i = 0; i < sep_len; i++ )
 801ad34:	2300      	movs	r3, #0
 801ad36:	627b      	str	r3, [r7, #36]	; 0x24
 801ad38:	e00a      	b.n	801ad50 <x509_info_subject_alt_name+0x68>
            *p++ = sep[i];
 801ad3a:	697a      	ldr	r2, [r7, #20]
 801ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad3e:	441a      	add	r2, r3
 801ad40:	69fb      	ldr	r3, [r7, #28]
 801ad42:	1c59      	adds	r1, r3, #1
 801ad44:	61f9      	str	r1, [r7, #28]
 801ad46:	7812      	ldrb	r2, [r2, #0]
 801ad48:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < sep_len; i++ )
 801ad4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad4c:	3301      	adds	r3, #1
 801ad4e:	627b      	str	r3, [r7, #36]	; 0x24
 801ad50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad52:	693b      	ldr	r3, [r7, #16]
 801ad54:	429a      	cmp	r2, r3
 801ad56:	d3f0      	bcc.n	801ad3a <x509_info_subject_alt_name+0x52>
        for( i = 0; i < cur->buf.len; i++ )
 801ad58:	2300      	movs	r3, #0
 801ad5a:	627b      	str	r3, [r7, #36]	; 0x24
 801ad5c:	e00b      	b.n	801ad76 <x509_info_subject_alt_name+0x8e>
            *p++ = cur->buf.p[i];
 801ad5e:	69bb      	ldr	r3, [r7, #24]
 801ad60:	689a      	ldr	r2, [r3, #8]
 801ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad64:	441a      	add	r2, r3
 801ad66:	69fb      	ldr	r3, [r7, #28]
 801ad68:	1c59      	adds	r1, r3, #1
 801ad6a:	61f9      	str	r1, [r7, #28]
 801ad6c:	7812      	ldrb	r2, [r2, #0]
 801ad6e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < cur->buf.len; i++ )
 801ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad72:	3301      	adds	r3, #1
 801ad74:	627b      	str	r3, [r7, #36]	; 0x24
 801ad76:	69bb      	ldr	r3, [r7, #24]
 801ad78:	685b      	ldr	r3, [r3, #4]
 801ad7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad7c:	429a      	cmp	r2, r3
 801ad7e:	d3ee      	bcc.n	801ad5e <x509_info_subject_alt_name+0x76>

        sep = ", ";
 801ad80:	4b0e      	ldr	r3, [pc, #56]	; (801adbc <x509_info_subject_alt_name+0xd4>)
 801ad82:	617b      	str	r3, [r7, #20]
        sep_len = 2;
 801ad84:	2302      	movs	r3, #2
 801ad86:	613b      	str	r3, [r7, #16]

        cur = cur->next;
 801ad88:	69bb      	ldr	r3, [r7, #24]
 801ad8a:	68db      	ldr	r3, [r3, #12]
 801ad8c:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 801ad8e:	69bb      	ldr	r3, [r7, #24]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d1bc      	bne.n	801ad0e <x509_info_subject_alt_name+0x26>
    }

    *p = '\0';
 801ad94:	69fb      	ldr	r3, [r7, #28]
 801ad96:	2200      	movs	r2, #0
 801ad98:	701a      	strb	r2, [r3, #0]

    *size = n;
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	6a3a      	ldr	r2, [r7, #32]
 801ad9e:	601a      	str	r2, [r3, #0]
    *buf = p;
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	69fa      	ldr	r2, [r7, #28]
 801ada4:	601a      	str	r2, [r3, #0]

    return( 0 );
 801ada6:	2300      	movs	r3, #0
}
 801ada8:	4618      	mov	r0, r3
 801adaa:	372c      	adds	r7, #44	; 0x2c
 801adac:	46bd      	mov	sp, r7
 801adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb2:	4770      	bx	lr
 801adb4:	080234bc 	.word	0x080234bc
 801adb8:	ffffd680 	.word	0xffffd680
 801adbc:	080234c0 	.word	0x080234c0

0801adc0 <x509_info_cert_type>:
    if( ns_cert_type & type )                   \
        PRINT_ITEM( name );

static int x509_info_cert_type( char **buf, size_t *size,
                                unsigned char ns_cert_type )
{
 801adc0:	b580      	push	{r7, lr}
 801adc2:	b088      	sub	sp, #32
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	60f8      	str	r0, [r7, #12]
 801adc8:	60b9      	str	r1, [r7, #8]
 801adca:	4613      	mov	r3, r2
 801adcc:	71fb      	strb	r3, [r7, #7]
    int ret;
    size_t n = *size;
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	61fb      	str	r3, [r7, #28]
    char *p = *buf;
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	61bb      	str	r3, [r7, #24]
    const char *sep = "";
 801adda:	4b82      	ldr	r3, [pc, #520]	; (801afe4 <x509_info_cert_type+0x224>)
 801addc:	617b      	str	r3, [r7, #20]

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 801adde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	da19      	bge.n	801ae1a <x509_info_cert_type+0x5a>
 801ade6:	697b      	ldr	r3, [r7, #20]
 801ade8:	4a7f      	ldr	r2, [pc, #508]	; (801afe8 <x509_info_cert_type+0x228>)
 801adea:	69f9      	ldr	r1, [r7, #28]
 801adec:	69b8      	ldr	r0, [r7, #24]
 801adee:	f002 ff43 	bl	801dc78 <sniprintf>
 801adf2:	6138      	str	r0, [r7, #16]
 801adf4:	693b      	ldr	r3, [r7, #16]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	db03      	blt.n	801ae02 <x509_info_cert_type+0x42>
 801adfa:	693b      	ldr	r3, [r7, #16]
 801adfc:	69fa      	ldr	r2, [r7, #28]
 801adfe:	429a      	cmp	r2, r3
 801ae00:	d801      	bhi.n	801ae06 <x509_info_cert_type+0x46>
 801ae02:	4b7a      	ldr	r3, [pc, #488]	; (801afec <x509_info_cert_type+0x22c>)
 801ae04:	e0e9      	b.n	801afda <x509_info_cert_type+0x21a>
 801ae06:	693b      	ldr	r3, [r7, #16]
 801ae08:	69fa      	ldr	r2, [r7, #28]
 801ae0a:	1ad3      	subs	r3, r2, r3
 801ae0c:	61fb      	str	r3, [r7, #28]
 801ae0e:	693b      	ldr	r3, [r7, #16]
 801ae10:	69ba      	ldr	r2, [r7, #24]
 801ae12:	4413      	add	r3, r2
 801ae14:	61bb      	str	r3, [r7, #24]
 801ae16:	4b76      	ldr	r3, [pc, #472]	; (801aff0 <x509_info_cert_type+0x230>)
 801ae18:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 801ae1a:	79fb      	ldrb	r3, [r7, #7]
 801ae1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d019      	beq.n	801ae58 <x509_info_cert_type+0x98>
 801ae24:	697b      	ldr	r3, [r7, #20]
 801ae26:	4a73      	ldr	r2, [pc, #460]	; (801aff4 <x509_info_cert_type+0x234>)
 801ae28:	69f9      	ldr	r1, [r7, #28]
 801ae2a:	69b8      	ldr	r0, [r7, #24]
 801ae2c:	f002 ff24 	bl	801dc78 <sniprintf>
 801ae30:	6138      	str	r0, [r7, #16]
 801ae32:	693b      	ldr	r3, [r7, #16]
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	db03      	blt.n	801ae40 <x509_info_cert_type+0x80>
 801ae38:	693b      	ldr	r3, [r7, #16]
 801ae3a:	69fa      	ldr	r2, [r7, #28]
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	d801      	bhi.n	801ae44 <x509_info_cert_type+0x84>
 801ae40:	4b6a      	ldr	r3, [pc, #424]	; (801afec <x509_info_cert_type+0x22c>)
 801ae42:	e0ca      	b.n	801afda <x509_info_cert_type+0x21a>
 801ae44:	693b      	ldr	r3, [r7, #16]
 801ae46:	69fa      	ldr	r2, [r7, #28]
 801ae48:	1ad3      	subs	r3, r2, r3
 801ae4a:	61fb      	str	r3, [r7, #28]
 801ae4c:	693b      	ldr	r3, [r7, #16]
 801ae4e:	69ba      	ldr	r2, [r7, #24]
 801ae50:	4413      	add	r3, r2
 801ae52:	61bb      	str	r3, [r7, #24]
 801ae54:	4b66      	ldr	r3, [pc, #408]	; (801aff0 <x509_info_cert_type+0x230>)
 801ae56:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 801ae58:	79fb      	ldrb	r3, [r7, #7]
 801ae5a:	f003 0320 	and.w	r3, r3, #32
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d019      	beq.n	801ae96 <x509_info_cert_type+0xd6>
 801ae62:	697b      	ldr	r3, [r7, #20]
 801ae64:	4a64      	ldr	r2, [pc, #400]	; (801aff8 <x509_info_cert_type+0x238>)
 801ae66:	69f9      	ldr	r1, [r7, #28]
 801ae68:	69b8      	ldr	r0, [r7, #24]
 801ae6a:	f002 ff05 	bl	801dc78 <sniprintf>
 801ae6e:	6138      	str	r0, [r7, #16]
 801ae70:	693b      	ldr	r3, [r7, #16]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	db03      	blt.n	801ae7e <x509_info_cert_type+0xbe>
 801ae76:	693b      	ldr	r3, [r7, #16]
 801ae78:	69fa      	ldr	r2, [r7, #28]
 801ae7a:	429a      	cmp	r2, r3
 801ae7c:	d801      	bhi.n	801ae82 <x509_info_cert_type+0xc2>
 801ae7e:	4b5b      	ldr	r3, [pc, #364]	; (801afec <x509_info_cert_type+0x22c>)
 801ae80:	e0ab      	b.n	801afda <x509_info_cert_type+0x21a>
 801ae82:	693b      	ldr	r3, [r7, #16]
 801ae84:	69fa      	ldr	r2, [r7, #28]
 801ae86:	1ad3      	subs	r3, r2, r3
 801ae88:	61fb      	str	r3, [r7, #28]
 801ae8a:	693b      	ldr	r3, [r7, #16]
 801ae8c:	69ba      	ldr	r2, [r7, #24]
 801ae8e:	4413      	add	r3, r2
 801ae90:	61bb      	str	r3, [r7, #24]
 801ae92:	4b57      	ldr	r3, [pc, #348]	; (801aff0 <x509_info_cert_type+0x230>)
 801ae94:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 801ae96:	79fb      	ldrb	r3, [r7, #7]
 801ae98:	f003 0310 	and.w	r3, r3, #16
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d019      	beq.n	801aed4 <x509_info_cert_type+0x114>
 801aea0:	697b      	ldr	r3, [r7, #20]
 801aea2:	4a56      	ldr	r2, [pc, #344]	; (801affc <x509_info_cert_type+0x23c>)
 801aea4:	69f9      	ldr	r1, [r7, #28]
 801aea6:	69b8      	ldr	r0, [r7, #24]
 801aea8:	f002 fee6 	bl	801dc78 <sniprintf>
 801aeac:	6138      	str	r0, [r7, #16]
 801aeae:	693b      	ldr	r3, [r7, #16]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	db03      	blt.n	801aebc <x509_info_cert_type+0xfc>
 801aeb4:	693b      	ldr	r3, [r7, #16]
 801aeb6:	69fa      	ldr	r2, [r7, #28]
 801aeb8:	429a      	cmp	r2, r3
 801aeba:	d801      	bhi.n	801aec0 <x509_info_cert_type+0x100>
 801aebc:	4b4b      	ldr	r3, [pc, #300]	; (801afec <x509_info_cert_type+0x22c>)
 801aebe:	e08c      	b.n	801afda <x509_info_cert_type+0x21a>
 801aec0:	693b      	ldr	r3, [r7, #16]
 801aec2:	69fa      	ldr	r2, [r7, #28]
 801aec4:	1ad3      	subs	r3, r2, r3
 801aec6:	61fb      	str	r3, [r7, #28]
 801aec8:	693b      	ldr	r3, [r7, #16]
 801aeca:	69ba      	ldr	r2, [r7, #24]
 801aecc:	4413      	add	r3, r2
 801aece:	61bb      	str	r3, [r7, #24]
 801aed0:	4b47      	ldr	r3, [pc, #284]	; (801aff0 <x509_info_cert_type+0x230>)
 801aed2:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 801aed4:	79fb      	ldrb	r3, [r7, #7]
 801aed6:	f003 0308 	and.w	r3, r3, #8
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d019      	beq.n	801af12 <x509_info_cert_type+0x152>
 801aede:	697b      	ldr	r3, [r7, #20]
 801aee0:	4a47      	ldr	r2, [pc, #284]	; (801b000 <x509_info_cert_type+0x240>)
 801aee2:	69f9      	ldr	r1, [r7, #28]
 801aee4:	69b8      	ldr	r0, [r7, #24]
 801aee6:	f002 fec7 	bl	801dc78 <sniprintf>
 801aeea:	6138      	str	r0, [r7, #16]
 801aeec:	693b      	ldr	r3, [r7, #16]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	db03      	blt.n	801aefa <x509_info_cert_type+0x13a>
 801aef2:	693b      	ldr	r3, [r7, #16]
 801aef4:	69fa      	ldr	r2, [r7, #28]
 801aef6:	429a      	cmp	r2, r3
 801aef8:	d801      	bhi.n	801aefe <x509_info_cert_type+0x13e>
 801aefa:	4b3c      	ldr	r3, [pc, #240]	; (801afec <x509_info_cert_type+0x22c>)
 801aefc:	e06d      	b.n	801afda <x509_info_cert_type+0x21a>
 801aefe:	693b      	ldr	r3, [r7, #16]
 801af00:	69fa      	ldr	r2, [r7, #28]
 801af02:	1ad3      	subs	r3, r2, r3
 801af04:	61fb      	str	r3, [r7, #28]
 801af06:	693b      	ldr	r3, [r7, #16]
 801af08:	69ba      	ldr	r2, [r7, #24]
 801af0a:	4413      	add	r3, r2
 801af0c:	61bb      	str	r3, [r7, #24]
 801af0e:	4b38      	ldr	r3, [pc, #224]	; (801aff0 <x509_info_cert_type+0x230>)
 801af10:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 801af12:	79fb      	ldrb	r3, [r7, #7]
 801af14:	f003 0304 	and.w	r3, r3, #4
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d019      	beq.n	801af50 <x509_info_cert_type+0x190>
 801af1c:	697b      	ldr	r3, [r7, #20]
 801af1e:	4a39      	ldr	r2, [pc, #228]	; (801b004 <x509_info_cert_type+0x244>)
 801af20:	69f9      	ldr	r1, [r7, #28]
 801af22:	69b8      	ldr	r0, [r7, #24]
 801af24:	f002 fea8 	bl	801dc78 <sniprintf>
 801af28:	6138      	str	r0, [r7, #16]
 801af2a:	693b      	ldr	r3, [r7, #16]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	db03      	blt.n	801af38 <x509_info_cert_type+0x178>
 801af30:	693b      	ldr	r3, [r7, #16]
 801af32:	69fa      	ldr	r2, [r7, #28]
 801af34:	429a      	cmp	r2, r3
 801af36:	d801      	bhi.n	801af3c <x509_info_cert_type+0x17c>
 801af38:	4b2c      	ldr	r3, [pc, #176]	; (801afec <x509_info_cert_type+0x22c>)
 801af3a:	e04e      	b.n	801afda <x509_info_cert_type+0x21a>
 801af3c:	693b      	ldr	r3, [r7, #16]
 801af3e:	69fa      	ldr	r2, [r7, #28]
 801af40:	1ad3      	subs	r3, r2, r3
 801af42:	61fb      	str	r3, [r7, #28]
 801af44:	693b      	ldr	r3, [r7, #16]
 801af46:	69ba      	ldr	r2, [r7, #24]
 801af48:	4413      	add	r3, r2
 801af4a:	61bb      	str	r3, [r7, #24]
 801af4c:	4b28      	ldr	r3, [pc, #160]	; (801aff0 <x509_info_cert_type+0x230>)
 801af4e:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 801af50:	79fb      	ldrb	r3, [r7, #7]
 801af52:	f003 0302 	and.w	r3, r3, #2
 801af56:	2b00      	cmp	r3, #0
 801af58:	d019      	beq.n	801af8e <x509_info_cert_type+0x1ce>
 801af5a:	697b      	ldr	r3, [r7, #20]
 801af5c:	4a2a      	ldr	r2, [pc, #168]	; (801b008 <x509_info_cert_type+0x248>)
 801af5e:	69f9      	ldr	r1, [r7, #28]
 801af60:	69b8      	ldr	r0, [r7, #24]
 801af62:	f002 fe89 	bl	801dc78 <sniprintf>
 801af66:	6138      	str	r0, [r7, #16]
 801af68:	693b      	ldr	r3, [r7, #16]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	db03      	blt.n	801af76 <x509_info_cert_type+0x1b6>
 801af6e:	693b      	ldr	r3, [r7, #16]
 801af70:	69fa      	ldr	r2, [r7, #28]
 801af72:	429a      	cmp	r2, r3
 801af74:	d801      	bhi.n	801af7a <x509_info_cert_type+0x1ba>
 801af76:	4b1d      	ldr	r3, [pc, #116]	; (801afec <x509_info_cert_type+0x22c>)
 801af78:	e02f      	b.n	801afda <x509_info_cert_type+0x21a>
 801af7a:	693b      	ldr	r3, [r7, #16]
 801af7c:	69fa      	ldr	r2, [r7, #28]
 801af7e:	1ad3      	subs	r3, r2, r3
 801af80:	61fb      	str	r3, [r7, #28]
 801af82:	693b      	ldr	r3, [r7, #16]
 801af84:	69ba      	ldr	r2, [r7, #24]
 801af86:	4413      	add	r3, r2
 801af88:	61bb      	str	r3, [r7, #24]
 801af8a:	4b19      	ldr	r3, [pc, #100]	; (801aff0 <x509_info_cert_type+0x230>)
 801af8c:	617b      	str	r3, [r7, #20]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 801af8e:	79fb      	ldrb	r3, [r7, #7]
 801af90:	f003 0301 	and.w	r3, r3, #1
 801af94:	2b00      	cmp	r3, #0
 801af96:	d019      	beq.n	801afcc <x509_info_cert_type+0x20c>
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	4a1c      	ldr	r2, [pc, #112]	; (801b00c <x509_info_cert_type+0x24c>)
 801af9c:	69f9      	ldr	r1, [r7, #28]
 801af9e:	69b8      	ldr	r0, [r7, #24]
 801afa0:	f002 fe6a 	bl	801dc78 <sniprintf>
 801afa4:	6138      	str	r0, [r7, #16]
 801afa6:	693b      	ldr	r3, [r7, #16]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	db03      	blt.n	801afb4 <x509_info_cert_type+0x1f4>
 801afac:	693b      	ldr	r3, [r7, #16]
 801afae:	69fa      	ldr	r2, [r7, #28]
 801afb0:	429a      	cmp	r2, r3
 801afb2:	d801      	bhi.n	801afb8 <x509_info_cert_type+0x1f8>
 801afb4:	4b0d      	ldr	r3, [pc, #52]	; (801afec <x509_info_cert_type+0x22c>)
 801afb6:	e010      	b.n	801afda <x509_info_cert_type+0x21a>
 801afb8:	693b      	ldr	r3, [r7, #16]
 801afba:	69fa      	ldr	r2, [r7, #28]
 801afbc:	1ad3      	subs	r3, r2, r3
 801afbe:	61fb      	str	r3, [r7, #28]
 801afc0:	693b      	ldr	r3, [r7, #16]
 801afc2:	69ba      	ldr	r2, [r7, #24]
 801afc4:	4413      	add	r3, r2
 801afc6:	61bb      	str	r3, [r7, #24]
 801afc8:	4b09      	ldr	r3, [pc, #36]	; (801aff0 <x509_info_cert_type+0x230>)
 801afca:	617b      	str	r3, [r7, #20]

    *size = n;
 801afcc:	68bb      	ldr	r3, [r7, #8]
 801afce:	69fa      	ldr	r2, [r7, #28]
 801afd0:	601a      	str	r2, [r3, #0]
    *buf = p;
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	69ba      	ldr	r2, [r7, #24]
 801afd6:	601a      	str	r2, [r3, #0]

    return( 0 );
 801afd8:	2300      	movs	r3, #0
}
 801afda:	4618      	mov	r0, r3
 801afdc:	3720      	adds	r7, #32
 801afde:	46bd      	mov	sp, r7
 801afe0:	bd80      	pop	{r7, pc}
 801afe2:	bf00      	nop
 801afe4:	080234bc 	.word	0x080234bc
 801afe8:	080234c4 	.word	0x080234c4
 801afec:	ffffd680 	.word	0xffffd680
 801aff0:	080234c0 	.word	0x080234c0
 801aff4:	080234d4 	.word	0x080234d4
 801aff8:	080234e4 	.word	0x080234e4
 801affc:	080234ec 	.word	0x080234ec
 801b000:	08023500 	.word	0x08023500
 801b004:	0802350c 	.word	0x0802350c
 801b008:	08023518 	.word	0x08023518
 801b00c:	08023524 	.word	0x08023524

0801b010 <x509_info_key_usage>:
    if( key_usage & code )      \
        PRINT_ITEM( name );

static int x509_info_key_usage( char **buf, size_t *size,
                                unsigned int key_usage )
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b088      	sub	sp, #32
 801b014:	af00      	add	r7, sp, #0
 801b016:	60f8      	str	r0, [r7, #12]
 801b018:	60b9      	str	r1, [r7, #8]
 801b01a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t n = *size;
 801b01c:	68bb      	ldr	r3, [r7, #8]
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	61fb      	str	r3, [r7, #28]
    char *p = *buf;
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	61bb      	str	r3, [r7, #24]
    const char *sep = "";
 801b028:	4b87      	ldr	r3, [pc, #540]	; (801b248 <x509_info_key_usage+0x238>)
 801b02a:	617b      	str	r3, [r7, #20]

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b032:	2b00      	cmp	r3, #0
 801b034:	d019      	beq.n	801b06a <x509_info_key_usage+0x5a>
 801b036:	697b      	ldr	r3, [r7, #20]
 801b038:	4a84      	ldr	r2, [pc, #528]	; (801b24c <x509_info_key_usage+0x23c>)
 801b03a:	69f9      	ldr	r1, [r7, #28]
 801b03c:	69b8      	ldr	r0, [r7, #24]
 801b03e:	f002 fe1b 	bl	801dc78 <sniprintf>
 801b042:	6138      	str	r0, [r7, #16]
 801b044:	693b      	ldr	r3, [r7, #16]
 801b046:	2b00      	cmp	r3, #0
 801b048:	db03      	blt.n	801b052 <x509_info_key_usage+0x42>
 801b04a:	693b      	ldr	r3, [r7, #16]
 801b04c:	69fa      	ldr	r2, [r7, #28]
 801b04e:	429a      	cmp	r2, r3
 801b050:	d801      	bhi.n	801b056 <x509_info_key_usage+0x46>
 801b052:	4b7f      	ldr	r3, [pc, #508]	; (801b250 <x509_info_key_usage+0x240>)
 801b054:	e121      	b.n	801b29a <x509_info_key_usage+0x28a>
 801b056:	693b      	ldr	r3, [r7, #16]
 801b058:	69fa      	ldr	r2, [r7, #28]
 801b05a:	1ad3      	subs	r3, r2, r3
 801b05c:	61fb      	str	r3, [r7, #28]
 801b05e:	693b      	ldr	r3, [r7, #16]
 801b060:	69ba      	ldr	r2, [r7, #24]
 801b062:	4413      	add	r3, r2
 801b064:	61bb      	str	r3, [r7, #24]
 801b066:	4b7b      	ldr	r3, [pc, #492]	; (801b254 <x509_info_key_usage+0x244>)
 801b068:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b070:	2b00      	cmp	r3, #0
 801b072:	d019      	beq.n	801b0a8 <x509_info_key_usage+0x98>
 801b074:	697b      	ldr	r3, [r7, #20]
 801b076:	4a78      	ldr	r2, [pc, #480]	; (801b258 <x509_info_key_usage+0x248>)
 801b078:	69f9      	ldr	r1, [r7, #28]
 801b07a:	69b8      	ldr	r0, [r7, #24]
 801b07c:	f002 fdfc 	bl	801dc78 <sniprintf>
 801b080:	6138      	str	r0, [r7, #16]
 801b082:	693b      	ldr	r3, [r7, #16]
 801b084:	2b00      	cmp	r3, #0
 801b086:	db03      	blt.n	801b090 <x509_info_key_usage+0x80>
 801b088:	693b      	ldr	r3, [r7, #16]
 801b08a:	69fa      	ldr	r2, [r7, #28]
 801b08c:	429a      	cmp	r2, r3
 801b08e:	d801      	bhi.n	801b094 <x509_info_key_usage+0x84>
 801b090:	4b6f      	ldr	r3, [pc, #444]	; (801b250 <x509_info_key_usage+0x240>)
 801b092:	e102      	b.n	801b29a <x509_info_key_usage+0x28a>
 801b094:	693b      	ldr	r3, [r7, #16]
 801b096:	69fa      	ldr	r2, [r7, #28]
 801b098:	1ad3      	subs	r3, r2, r3
 801b09a:	61fb      	str	r3, [r7, #28]
 801b09c:	693b      	ldr	r3, [r7, #16]
 801b09e:	69ba      	ldr	r2, [r7, #24]
 801b0a0:	4413      	add	r3, r2
 801b0a2:	61bb      	str	r3, [r7, #24]
 801b0a4:	4b6b      	ldr	r3, [pc, #428]	; (801b254 <x509_info_key_usage+0x244>)
 801b0a6:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	f003 0320 	and.w	r3, r3, #32
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d019      	beq.n	801b0e6 <x509_info_key_usage+0xd6>
 801b0b2:	697b      	ldr	r3, [r7, #20]
 801b0b4:	4a69      	ldr	r2, [pc, #420]	; (801b25c <x509_info_key_usage+0x24c>)
 801b0b6:	69f9      	ldr	r1, [r7, #28]
 801b0b8:	69b8      	ldr	r0, [r7, #24]
 801b0ba:	f002 fddd 	bl	801dc78 <sniprintf>
 801b0be:	6138      	str	r0, [r7, #16]
 801b0c0:	693b      	ldr	r3, [r7, #16]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	db03      	blt.n	801b0ce <x509_info_key_usage+0xbe>
 801b0c6:	693b      	ldr	r3, [r7, #16]
 801b0c8:	69fa      	ldr	r2, [r7, #28]
 801b0ca:	429a      	cmp	r2, r3
 801b0cc:	d801      	bhi.n	801b0d2 <x509_info_key_usage+0xc2>
 801b0ce:	4b60      	ldr	r3, [pc, #384]	; (801b250 <x509_info_key_usage+0x240>)
 801b0d0:	e0e3      	b.n	801b29a <x509_info_key_usage+0x28a>
 801b0d2:	693b      	ldr	r3, [r7, #16]
 801b0d4:	69fa      	ldr	r2, [r7, #28]
 801b0d6:	1ad3      	subs	r3, r2, r3
 801b0d8:	61fb      	str	r3, [r7, #28]
 801b0da:	693b      	ldr	r3, [r7, #16]
 801b0dc:	69ba      	ldr	r2, [r7, #24]
 801b0de:	4413      	add	r3, r2
 801b0e0:	61bb      	str	r3, [r7, #24]
 801b0e2:	4b5c      	ldr	r3, [pc, #368]	; (801b254 <x509_info_key_usage+0x244>)
 801b0e4:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	f003 0310 	and.w	r3, r3, #16
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d019      	beq.n	801b124 <x509_info_key_usage+0x114>
 801b0f0:	697b      	ldr	r3, [r7, #20]
 801b0f2:	4a5b      	ldr	r2, [pc, #364]	; (801b260 <x509_info_key_usage+0x250>)
 801b0f4:	69f9      	ldr	r1, [r7, #28]
 801b0f6:	69b8      	ldr	r0, [r7, #24]
 801b0f8:	f002 fdbe 	bl	801dc78 <sniprintf>
 801b0fc:	6138      	str	r0, [r7, #16]
 801b0fe:	693b      	ldr	r3, [r7, #16]
 801b100:	2b00      	cmp	r3, #0
 801b102:	db03      	blt.n	801b10c <x509_info_key_usage+0xfc>
 801b104:	693b      	ldr	r3, [r7, #16]
 801b106:	69fa      	ldr	r2, [r7, #28]
 801b108:	429a      	cmp	r2, r3
 801b10a:	d801      	bhi.n	801b110 <x509_info_key_usage+0x100>
 801b10c:	4b50      	ldr	r3, [pc, #320]	; (801b250 <x509_info_key_usage+0x240>)
 801b10e:	e0c4      	b.n	801b29a <x509_info_key_usage+0x28a>
 801b110:	693b      	ldr	r3, [r7, #16]
 801b112:	69fa      	ldr	r2, [r7, #28]
 801b114:	1ad3      	subs	r3, r2, r3
 801b116:	61fb      	str	r3, [r7, #28]
 801b118:	693b      	ldr	r3, [r7, #16]
 801b11a:	69ba      	ldr	r2, [r7, #24]
 801b11c:	4413      	add	r3, r2
 801b11e:	61bb      	str	r3, [r7, #24]
 801b120:	4b4c      	ldr	r3, [pc, #304]	; (801b254 <x509_info_key_usage+0x244>)
 801b122:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	f003 0308 	and.w	r3, r3, #8
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d019      	beq.n	801b162 <x509_info_key_usage+0x152>
 801b12e:	697b      	ldr	r3, [r7, #20]
 801b130:	4a4c      	ldr	r2, [pc, #304]	; (801b264 <x509_info_key_usage+0x254>)
 801b132:	69f9      	ldr	r1, [r7, #28]
 801b134:	69b8      	ldr	r0, [r7, #24]
 801b136:	f002 fd9f 	bl	801dc78 <sniprintf>
 801b13a:	6138      	str	r0, [r7, #16]
 801b13c:	693b      	ldr	r3, [r7, #16]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	db03      	blt.n	801b14a <x509_info_key_usage+0x13a>
 801b142:	693b      	ldr	r3, [r7, #16]
 801b144:	69fa      	ldr	r2, [r7, #28]
 801b146:	429a      	cmp	r2, r3
 801b148:	d801      	bhi.n	801b14e <x509_info_key_usage+0x13e>
 801b14a:	4b41      	ldr	r3, [pc, #260]	; (801b250 <x509_info_key_usage+0x240>)
 801b14c:	e0a5      	b.n	801b29a <x509_info_key_usage+0x28a>
 801b14e:	693b      	ldr	r3, [r7, #16]
 801b150:	69fa      	ldr	r2, [r7, #28]
 801b152:	1ad3      	subs	r3, r2, r3
 801b154:	61fb      	str	r3, [r7, #28]
 801b156:	693b      	ldr	r3, [r7, #16]
 801b158:	69ba      	ldr	r2, [r7, #24]
 801b15a:	4413      	add	r3, r2
 801b15c:	61bb      	str	r3, [r7, #24]
 801b15e:	4b3d      	ldr	r3, [pc, #244]	; (801b254 <x509_info_key_usage+0x244>)
 801b160:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	f003 0304 	and.w	r3, r3, #4
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d019      	beq.n	801b1a0 <x509_info_key_usage+0x190>
 801b16c:	697b      	ldr	r3, [r7, #20]
 801b16e:	4a3e      	ldr	r2, [pc, #248]	; (801b268 <x509_info_key_usage+0x258>)
 801b170:	69f9      	ldr	r1, [r7, #28]
 801b172:	69b8      	ldr	r0, [r7, #24]
 801b174:	f002 fd80 	bl	801dc78 <sniprintf>
 801b178:	6138      	str	r0, [r7, #16]
 801b17a:	693b      	ldr	r3, [r7, #16]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	db03      	blt.n	801b188 <x509_info_key_usage+0x178>
 801b180:	693b      	ldr	r3, [r7, #16]
 801b182:	69fa      	ldr	r2, [r7, #28]
 801b184:	429a      	cmp	r2, r3
 801b186:	d801      	bhi.n	801b18c <x509_info_key_usage+0x17c>
 801b188:	4b31      	ldr	r3, [pc, #196]	; (801b250 <x509_info_key_usage+0x240>)
 801b18a:	e086      	b.n	801b29a <x509_info_key_usage+0x28a>
 801b18c:	693b      	ldr	r3, [r7, #16]
 801b18e:	69fa      	ldr	r2, [r7, #28]
 801b190:	1ad3      	subs	r3, r2, r3
 801b192:	61fb      	str	r3, [r7, #28]
 801b194:	693b      	ldr	r3, [r7, #16]
 801b196:	69ba      	ldr	r2, [r7, #24]
 801b198:	4413      	add	r3, r2
 801b19a:	61bb      	str	r3, [r7, #24]
 801b19c:	4b2d      	ldr	r3, [pc, #180]	; (801b254 <x509_info_key_usage+0x244>)
 801b19e:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	f003 0302 	and.w	r3, r3, #2
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d019      	beq.n	801b1de <x509_info_key_usage+0x1ce>
 801b1aa:	697b      	ldr	r3, [r7, #20]
 801b1ac:	4a2f      	ldr	r2, [pc, #188]	; (801b26c <x509_info_key_usage+0x25c>)
 801b1ae:	69f9      	ldr	r1, [r7, #28]
 801b1b0:	69b8      	ldr	r0, [r7, #24]
 801b1b2:	f002 fd61 	bl	801dc78 <sniprintf>
 801b1b6:	6138      	str	r0, [r7, #16]
 801b1b8:	693b      	ldr	r3, [r7, #16]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	db03      	blt.n	801b1c6 <x509_info_key_usage+0x1b6>
 801b1be:	693b      	ldr	r3, [r7, #16]
 801b1c0:	69fa      	ldr	r2, [r7, #28]
 801b1c2:	429a      	cmp	r2, r3
 801b1c4:	d801      	bhi.n	801b1ca <x509_info_key_usage+0x1ba>
 801b1c6:	4b22      	ldr	r3, [pc, #136]	; (801b250 <x509_info_key_usage+0x240>)
 801b1c8:	e067      	b.n	801b29a <x509_info_key_usage+0x28a>
 801b1ca:	693b      	ldr	r3, [r7, #16]
 801b1cc:	69fa      	ldr	r2, [r7, #28]
 801b1ce:	1ad3      	subs	r3, r2, r3
 801b1d0:	61fb      	str	r3, [r7, #28]
 801b1d2:	693b      	ldr	r3, [r7, #16]
 801b1d4:	69ba      	ldr	r2, [r7, #24]
 801b1d6:	4413      	add	r3, r2
 801b1d8:	61bb      	str	r3, [r7, #24]
 801b1da:	4b1e      	ldr	r3, [pc, #120]	; (801b254 <x509_info_key_usage+0x244>)
 801b1dc:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	f003 0301 	and.w	r3, r3, #1
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d019      	beq.n	801b21c <x509_info_key_usage+0x20c>
 801b1e8:	697b      	ldr	r3, [r7, #20]
 801b1ea:	4a21      	ldr	r2, [pc, #132]	; (801b270 <x509_info_key_usage+0x260>)
 801b1ec:	69f9      	ldr	r1, [r7, #28]
 801b1ee:	69b8      	ldr	r0, [r7, #24]
 801b1f0:	f002 fd42 	bl	801dc78 <sniprintf>
 801b1f4:	6138      	str	r0, [r7, #16]
 801b1f6:	693b      	ldr	r3, [r7, #16]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	db03      	blt.n	801b204 <x509_info_key_usage+0x1f4>
 801b1fc:	693b      	ldr	r3, [r7, #16]
 801b1fe:	69fa      	ldr	r2, [r7, #28]
 801b200:	429a      	cmp	r2, r3
 801b202:	d801      	bhi.n	801b208 <x509_info_key_usage+0x1f8>
 801b204:	4b12      	ldr	r3, [pc, #72]	; (801b250 <x509_info_key_usage+0x240>)
 801b206:	e048      	b.n	801b29a <x509_info_key_usage+0x28a>
 801b208:	693b      	ldr	r3, [r7, #16]
 801b20a:	69fa      	ldr	r2, [r7, #28]
 801b20c:	1ad3      	subs	r3, r2, r3
 801b20e:	61fb      	str	r3, [r7, #28]
 801b210:	693b      	ldr	r3, [r7, #16]
 801b212:	69ba      	ldr	r2, [r7, #24]
 801b214:	4413      	add	r3, r2
 801b216:	61bb      	str	r3, [r7, #24]
 801b218:	4b0e      	ldr	r3, [pc, #56]	; (801b254 <x509_info_key_usage+0x244>)
 801b21a:	617b      	str	r3, [r7, #20]
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b222:	2b00      	cmp	r3, #0
 801b224:	d032      	beq.n	801b28c <x509_info_key_usage+0x27c>
 801b226:	697b      	ldr	r3, [r7, #20]
 801b228:	4a12      	ldr	r2, [pc, #72]	; (801b274 <x509_info_key_usage+0x264>)
 801b22a:	69f9      	ldr	r1, [r7, #28]
 801b22c:	69b8      	ldr	r0, [r7, #24]
 801b22e:	f002 fd23 	bl	801dc78 <sniprintf>
 801b232:	6138      	str	r0, [r7, #16]
 801b234:	693b      	ldr	r3, [r7, #16]
 801b236:	2b00      	cmp	r3, #0
 801b238:	db03      	blt.n	801b242 <x509_info_key_usage+0x232>
 801b23a:	693b      	ldr	r3, [r7, #16]
 801b23c:	69fa      	ldr	r2, [r7, #28]
 801b23e:	429a      	cmp	r2, r3
 801b240:	d81a      	bhi.n	801b278 <x509_info_key_usage+0x268>
 801b242:	4b03      	ldr	r3, [pc, #12]	; (801b250 <x509_info_key_usage+0x240>)
 801b244:	e029      	b.n	801b29a <x509_info_key_usage+0x28a>
 801b246:	bf00      	nop
 801b248:	080234bc 	.word	0x080234bc
 801b24c:	08023538 	.word	0x08023538
 801b250:	ffffd680 	.word	0xffffd680
 801b254:	080234c0 	.word	0x080234c0
 801b258:	0802354c 	.word	0x0802354c
 801b25c:	08023560 	.word	0x08023560
 801b260:	08023574 	.word	0x08023574
 801b264:	08023588 	.word	0x08023588
 801b268:	08023598 	.word	0x08023598
 801b26c:	080235a8 	.word	0x080235a8
 801b270:	080235b4 	.word	0x080235b4
 801b274:	080235c4 	.word	0x080235c4
 801b278:	693b      	ldr	r3, [r7, #16]
 801b27a:	69fa      	ldr	r2, [r7, #28]
 801b27c:	1ad3      	subs	r3, r2, r3
 801b27e:	61fb      	str	r3, [r7, #28]
 801b280:	693b      	ldr	r3, [r7, #16]
 801b282:	69ba      	ldr	r2, [r7, #24]
 801b284:	4413      	add	r3, r2
 801b286:	61bb      	str	r3, [r7, #24]
 801b288:	4b06      	ldr	r3, [pc, #24]	; (801b2a4 <x509_info_key_usage+0x294>)
 801b28a:	617b      	str	r3, [r7, #20]

    *size = n;
 801b28c:	68bb      	ldr	r3, [r7, #8]
 801b28e:	69fa      	ldr	r2, [r7, #28]
 801b290:	601a      	str	r2, [r3, #0]
    *buf = p;
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	69ba      	ldr	r2, [r7, #24]
 801b296:	601a      	str	r2, [r3, #0]

    return( 0 );
 801b298:	2300      	movs	r3, #0
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	3720      	adds	r7, #32
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	080234c0 	.word	0x080234c0

0801b2a8 <x509_info_ext_key_usage>:

static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
 801b2a8:	b580      	push	{r7, lr}
 801b2aa:	b08c      	sub	sp, #48	; 0x30
 801b2ac:	af02      	add	r7, sp, #8
 801b2ae:	60f8      	str	r0, [r7, #12]
 801b2b0:	60b9      	str	r1, [r7, #8]
 801b2b2:	607a      	str	r2, [r7, #4]
    int ret;
    const char *desc;
    size_t n = *size;
 801b2b4:	68bb      	ldr	r3, [r7, #8]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	627b      	str	r3, [r7, #36]	; 0x24
    char *p = *buf;
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	623b      	str	r3, [r7, #32]
    const mbedtls_x509_sequence *cur = extended_key_usage;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	61fb      	str	r3, [r7, #28]
    const char *sep = "";
 801b2c4:	4b1d      	ldr	r3, [pc, #116]	; (801b33c <x509_info_ext_key_usage+0x94>)
 801b2c6:	61bb      	str	r3, [r7, #24]

    while( cur != NULL )
 801b2c8:	e02a      	b.n	801b320 <x509_info_ext_key_usage+0x78>
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 801b2ca:	69fb      	ldr	r3, [r7, #28]
 801b2cc:	f107 0210 	add.w	r2, r7, #16
 801b2d0:	4611      	mov	r1, r2
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	f7f3 f9d6 	bl	800e684 <mbedtls_oid_get_extended_key_usage>
 801b2d8:	4603      	mov	r3, r0
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d001      	beq.n	801b2e2 <x509_info_ext_key_usage+0x3a>
            desc = "???";
 801b2de:	4b18      	ldr	r3, [pc, #96]	; (801b340 <x509_info_ext_key_usage+0x98>)
 801b2e0:	613b      	str	r3, [r7, #16]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 801b2e2:	693b      	ldr	r3, [r7, #16]
 801b2e4:	9300      	str	r3, [sp, #0]
 801b2e6:	69bb      	ldr	r3, [r7, #24]
 801b2e8:	4a16      	ldr	r2, [pc, #88]	; (801b344 <x509_info_ext_key_usage+0x9c>)
 801b2ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b2ec:	6a38      	ldr	r0, [r7, #32]
 801b2ee:	f002 fcc3 	bl	801dc78 <sniprintf>
 801b2f2:	6178      	str	r0, [r7, #20]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801b2f4:	697b      	ldr	r3, [r7, #20]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	db03      	blt.n	801b302 <x509_info_ext_key_usage+0x5a>
 801b2fa:	697b      	ldr	r3, [r7, #20]
 801b2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b2fe:	429a      	cmp	r2, r3
 801b300:	d801      	bhi.n	801b306 <x509_info_ext_key_usage+0x5e>
 801b302:	4b11      	ldr	r3, [pc, #68]	; (801b348 <x509_info_ext_key_usage+0xa0>)
 801b304:	e016      	b.n	801b334 <x509_info_ext_key_usage+0x8c>
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b30a:	1ad3      	subs	r3, r2, r3
 801b30c:	627b      	str	r3, [r7, #36]	; 0x24
 801b30e:	697b      	ldr	r3, [r7, #20]
 801b310:	6a3a      	ldr	r2, [r7, #32]
 801b312:	4413      	add	r3, r2
 801b314:	623b      	str	r3, [r7, #32]

        sep = ", ";
 801b316:	4b0d      	ldr	r3, [pc, #52]	; (801b34c <x509_info_ext_key_usage+0xa4>)
 801b318:	61bb      	str	r3, [r7, #24]

        cur = cur->next;
 801b31a:	69fb      	ldr	r3, [r7, #28]
 801b31c:	68db      	ldr	r3, [r3, #12]
 801b31e:	61fb      	str	r3, [r7, #28]
    while( cur != NULL )
 801b320:	69fb      	ldr	r3, [r7, #28]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d1d1      	bne.n	801b2ca <x509_info_ext_key_usage+0x22>
    }

    *size = n;
 801b326:	68bb      	ldr	r3, [r7, #8]
 801b328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b32a:	601a      	str	r2, [r3, #0]
    *buf = p;
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	6a3a      	ldr	r2, [r7, #32]
 801b330:	601a      	str	r2, [r3, #0]

    return( 0 );
 801b332:	2300      	movs	r3, #0
}
 801b334:	4618      	mov	r0, r3
 801b336:	3728      	adds	r7, #40	; 0x28
 801b338:	46bd      	mov	sp, r7
 801b33a:	bd80      	pop	{r7, pc}
 801b33c:	080234bc 	.word	0x080234bc
 801b340:	080235d4 	.word	0x080235d4
 801b344:	080235d8 	.word	0x080235d8
 801b348:	ffffd680 	.word	0xffffd680
 801b34c:	080234c0 	.word	0x080234c0

0801b350 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 801b350:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b352:	b095      	sub	sp, #84	; 0x54
 801b354:	af06      	add	r7, sp, #24
 801b356:	6178      	str	r0, [r7, #20]
 801b358:	6139      	str	r1, [r7, #16]
 801b35a:	60fa      	str	r2, [r7, #12]
 801b35c:	60bb      	str	r3, [r7, #8]
    int ret;
    size_t n;
    char *p;
    char key_size_str[BEFORE_COLON];

    p = buf;
 801b35e:	697b      	ldr	r3, [r7, #20]
 801b360:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = size;
 801b362:	693b      	ldr	r3, [r7, #16]
 801b364:	633b      	str	r3, [r7, #48]	; 0x30

    if( NULL == crt )
 801b366:	68bb      	ldr	r3, [r7, #8]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d11b      	bne.n	801b3a4 <mbedtls_x509_crt_info+0x54>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 801b36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b36e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b370:	4a79      	ldr	r2, [pc, #484]	; (801b558 <mbedtls_x509_crt_info+0x208>)
 801b372:	4618      	mov	r0, r3
 801b374:	f002 fc80 	bl	801dc78 <sniprintf>
 801b378:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801b37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	db03      	blt.n	801b388 <mbedtls_x509_crt_info+0x38>
 801b380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b384:	429a      	cmp	r2, r3
 801b386:	d301      	bcc.n	801b38c <mbedtls_x509_crt_info+0x3c>
 801b388:	4b74      	ldr	r3, [pc, #464]	; (801b55c <mbedtls_x509_crt_info+0x20c>)
 801b38a:	e2d6      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b390:	1ad3      	subs	r3, r2, r3
 801b392:	633b      	str	r3, [r7, #48]	; 0x30
 801b394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b398:	4413      	add	r3, r2
 801b39a:	62fb      	str	r3, [r7, #44]	; 0x2c

        return( (int) ( size - n ) );
 801b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b39e:	693a      	ldr	r2, [r7, #16]
 801b3a0:	1ad3      	subs	r3, r2, r3
 801b3a2:	e2ca      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 801b3a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b3a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b3a8:	68bb      	ldr	r3, [r7, #8]
 801b3aa:	699b      	ldr	r3, [r3, #24]
 801b3ac:	9300      	str	r3, [sp, #0]
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	4a6b      	ldr	r2, [pc, #428]	; (801b560 <mbedtls_x509_crt_info+0x210>)
 801b3b2:	f002 fc61 	bl	801dc78 <sniprintf>
 801b3b6:	6378      	str	r0, [r7, #52]	; 0x34
                               prefix, crt->version );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	db03      	blt.n	801b3c6 <mbedtls_x509_crt_info+0x76>
 801b3be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3c2:	429a      	cmp	r2, r3
 801b3c4:	d301      	bcc.n	801b3ca <mbedtls_x509_crt_info+0x7a>
 801b3c6:	4b65      	ldr	r3, [pc, #404]	; (801b55c <mbedtls_x509_crt_info+0x20c>)
 801b3c8:	e2b7      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b3ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3ce:	1ad3      	subs	r3, r2, r3
 801b3d0:	633b      	str	r3, [r7, #48]	; 0x30
 801b3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3d6:	4413      	add	r3, r2
 801b3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 801b3da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b3dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	4a60      	ldr	r2, [pc, #384]	; (801b564 <mbedtls_x509_crt_info+0x214>)
 801b3e2:	f002 fc49 	bl	801dc78 <sniprintf>
 801b3e6:	6378      	str	r0, [r7, #52]	; 0x34
                               prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	db03      	blt.n	801b3f6 <mbedtls_x509_crt_info+0xa6>
 801b3ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3f2:	429a      	cmp	r2, r3
 801b3f4:	d301      	bcc.n	801b3fa <mbedtls_x509_crt_info+0xaa>
 801b3f6:	4b59      	ldr	r3, [pc, #356]	; (801b55c <mbedtls_x509_crt_info+0x20c>)
 801b3f8:	e29f      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b3fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3fe:	1ad3      	subs	r3, r2, r3
 801b400:	633b      	str	r3, [r7, #48]	; 0x30
 801b402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b406:	4413      	add	r3, r2
 801b408:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 801b40a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b40c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b40e:	68bb      	ldr	r3, [r7, #8]
 801b410:	331c      	adds	r3, #28
 801b412:	461a      	mov	r2, r3
 801b414:	f7fe fc18 	bl	8019c48 <mbedtls_x509_serial_gets>
 801b418:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	db03      	blt.n	801b428 <mbedtls_x509_crt_info+0xd8>
 801b420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b424:	429a      	cmp	r2, r3
 801b426:	d301      	bcc.n	801b42c <mbedtls_x509_crt_info+0xdc>
 801b428:	4b4c      	ldr	r3, [pc, #304]	; (801b55c <mbedtls_x509_crt_info+0x20c>)
 801b42a:	e286      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b42c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b430:	1ad3      	subs	r3, r2, r3
 801b432:	633b      	str	r3, [r7, #48]	; 0x30
 801b434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b438:	4413      	add	r3, r2
 801b43a:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 801b43c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b43e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	4a49      	ldr	r2, [pc, #292]	; (801b568 <mbedtls_x509_crt_info+0x218>)
 801b444:	f002 fc18 	bl	801dc78 <sniprintf>
 801b448:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	db03      	blt.n	801b458 <mbedtls_x509_crt_info+0x108>
 801b450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b454:	429a      	cmp	r2, r3
 801b456:	d301      	bcc.n	801b45c <mbedtls_x509_crt_info+0x10c>
 801b458:	4b40      	ldr	r3, [pc, #256]	; (801b55c <mbedtls_x509_crt_info+0x20c>)
 801b45a:	e26e      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b460:	1ad3      	subs	r3, r2, r3
 801b462:	633b      	str	r3, [r7, #48]	; 0x30
 801b464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b468:	4413      	add	r3, r2
 801b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 801b46c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b46e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b470:	68bb      	ldr	r3, [r7, #8]
 801b472:	334c      	adds	r3, #76	; 0x4c
 801b474:	461a      	mov	r2, r3
 801b476:	f7fe fa9d 	bl	80199b4 <mbedtls_x509_dn_gets>
 801b47a:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b47e:	2b00      	cmp	r3, #0
 801b480:	db03      	blt.n	801b48a <mbedtls_x509_crt_info+0x13a>
 801b482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b486:	429a      	cmp	r2, r3
 801b488:	d301      	bcc.n	801b48e <mbedtls_x509_crt_info+0x13e>
 801b48a:	4b34      	ldr	r3, [pc, #208]	; (801b55c <mbedtls_x509_crt_info+0x20c>)
 801b48c:	e255      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b48e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b492:	1ad3      	subs	r3, r2, r3
 801b494:	633b      	str	r3, [r7, #48]	; 0x30
 801b496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b49a:	4413      	add	r3, r2
 801b49c:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 801b49e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b4a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	4a31      	ldr	r2, [pc, #196]	; (801b56c <mbedtls_x509_crt_info+0x21c>)
 801b4a6:	f002 fbe7 	bl	801dc78 <sniprintf>
 801b4aa:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	db03      	blt.n	801b4ba <mbedtls_x509_crt_info+0x16a>
 801b4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4b6:	429a      	cmp	r2, r3
 801b4b8:	d301      	bcc.n	801b4be <mbedtls_x509_crt_info+0x16e>
 801b4ba:	4b28      	ldr	r3, [pc, #160]	; (801b55c <mbedtls_x509_crt_info+0x20c>)
 801b4bc:	e23d      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b4be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4c2:	1ad3      	subs	r3, r2, r3
 801b4c4:	633b      	str	r3, [r7, #48]	; 0x30
 801b4c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4ca:	4413      	add	r3, r2
 801b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 801b4ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b4d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b4d2:	68bb      	ldr	r3, [r7, #8]
 801b4d4:	336c      	adds	r3, #108	; 0x6c
 801b4d6:	461a      	mov	r2, r3
 801b4d8:	f7fe fa6c 	bl	80199b4 <mbedtls_x509_dn_gets>
 801b4dc:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	db03      	blt.n	801b4ec <mbedtls_x509_crt_info+0x19c>
 801b4e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4e8:	429a      	cmp	r2, r3
 801b4ea:	d301      	bcc.n	801b4f0 <mbedtls_x509_crt_info+0x1a0>
 801b4ec:	4b1b      	ldr	r3, [pc, #108]	; (801b55c <mbedtls_x509_crt_info+0x20c>)
 801b4ee:	e224      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4f4:	1ad3      	subs	r3, r2, r3
 801b4f6:	633b      	str	r3, [r7, #48]	; 0x30
 801b4f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4fc:	4413      	add	r3, r2
 801b4fe:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 801b500:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 801b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b504:	607b      	str	r3, [r7, #4]
 801b506:	68bb      	ldr	r3, [r7, #8]
 801b508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b50c:	68ba      	ldr	r2, [r7, #8]
 801b50e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 801b512:	68b9      	ldr	r1, [r7, #8]
 801b514:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 801b518:	68b8      	ldr	r0, [r7, #8]
 801b51a:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 801b51e:	68bc      	ldr	r4, [r7, #8]
 801b520:	f8d4 409c 	ldr.w	r4, [r4, #156]	; 0x9c
 801b524:	68bd      	ldr	r5, [r7, #8]
 801b526:	f8d5 50a0 	ldr.w	r5, [r5, #160]	; 0xa0
 801b52a:	9505      	str	r5, [sp, #20]
 801b52c:	9404      	str	r4, [sp, #16]
 801b52e:	9003      	str	r0, [sp, #12]
 801b530:	9102      	str	r1, [sp, #8]
 801b532:	9201      	str	r2, [sp, #4]
 801b534:	9300      	str	r3, [sp, #0]
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	4a0d      	ldr	r2, [pc, #52]	; (801b570 <mbedtls_x509_crt_info+0x220>)
 801b53a:	6879      	ldr	r1, [r7, #4]
 801b53c:	4630      	mov	r0, r6
 801b53e:	f002 fb9b 	bl	801dc78 <sniprintf>
 801b542:	6378      	str	r0, [r7, #52]	; 0x34
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b546:	2b00      	cmp	r3, #0
 801b548:	db03      	blt.n	801b552 <mbedtls_x509_crt_info+0x202>
 801b54a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b54e:	429a      	cmp	r2, r3
 801b550:	d310      	bcc.n	801b574 <mbedtls_x509_crt_info+0x224>
 801b552:	4b02      	ldr	r3, [pc, #8]	; (801b55c <mbedtls_x509_crt_info+0x20c>)
 801b554:	e1f1      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b556:	bf00      	nop
 801b558:	080235e0 	.word	0x080235e0
 801b55c:	ffffd680 	.word	0xffffd680
 801b560:	08023600 	.word	0x08023600
 801b564:	0802361c 	.word	0x0802361c
 801b568:	08023634 	.word	0x08023634
 801b56c:	0802364c 	.word	0x0802364c
 801b570:	08023664 	.word	0x08023664
 801b574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b578:	1ad3      	subs	r3, r2, r3
 801b57a:	633b      	str	r3, [r7, #48]	; 0x30
 801b57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b580:	4413      	add	r3, r2
 801b582:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 801b584:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 801b586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b588:	607b      	str	r3, [r7, #4]
 801b58a:	68bb      	ldr	r3, [r7, #8]
 801b58c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801b590:	68ba      	ldr	r2, [r7, #8]
 801b592:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 801b596:	68b9      	ldr	r1, [r7, #8]
 801b598:	f8d1 10ac 	ldr.w	r1, [r1, #172]	; 0xac
 801b59c:	68b8      	ldr	r0, [r7, #8]
 801b59e:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 801b5a2:	68bc      	ldr	r4, [r7, #8]
 801b5a4:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
 801b5a8:	68bd      	ldr	r5, [r7, #8]
 801b5aa:	f8d5 50b8 	ldr.w	r5, [r5, #184]	; 0xb8
 801b5ae:	9505      	str	r5, [sp, #20]
 801b5b0:	9404      	str	r4, [sp, #16]
 801b5b2:	9003      	str	r0, [sp, #12]
 801b5b4:	9102      	str	r1, [sp, #8]
 801b5b6:	9201      	str	r2, [sp, #4]
 801b5b8:	9300      	str	r3, [sp, #0]
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	4a8c      	ldr	r2, [pc, #560]	; (801b7f0 <mbedtls_x509_crt_info+0x4a0>)
 801b5be:	6879      	ldr	r1, [r7, #4]
 801b5c0:	4630      	mov	r0, r6
 801b5c2:	f002 fb59 	bl	801dc78 <sniprintf>
 801b5c6:	6378      	str	r0, [r7, #52]	; 0x34
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	db03      	blt.n	801b5d6 <mbedtls_x509_crt_info+0x286>
 801b5ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5d2:	429a      	cmp	r2, r3
 801b5d4:	d301      	bcc.n	801b5da <mbedtls_x509_crt_info+0x28a>
 801b5d6:	4b87      	ldr	r3, [pc, #540]	; (801b7f4 <mbedtls_x509_crt_info+0x4a4>)
 801b5d8:	e1af      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b5da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5de:	1ad3      	subs	r3, r2, r3
 801b5e0:	633b      	str	r3, [r7, #48]	; 0x30
 801b5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5e6:	4413      	add	r3, r2
 801b5e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 801b5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b5ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	4a81      	ldr	r2, [pc, #516]	; (801b7f8 <mbedtls_x509_crt_info+0x4a8>)
 801b5f2:	f002 fb41 	bl	801dc78 <sniprintf>
 801b5f6:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	db03      	blt.n	801b606 <mbedtls_x509_crt_info+0x2b6>
 801b5fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b602:	429a      	cmp	r2, r3
 801b604:	d301      	bcc.n	801b60a <mbedtls_x509_crt_info+0x2ba>
 801b606:	4b7b      	ldr	r3, [pc, #492]	; (801b7f4 <mbedtls_x509_crt_info+0x4a4>)
 801b608:	e197      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b60e:	1ad3      	subs	r3, r2, r3
 801b610:	633b      	str	r3, [r7, #48]	; 0x30
 801b612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b616:	4413      	add	r3, r2
 801b618:	62fb      	str	r3, [r7, #44]	; 0x2c

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 801b61a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b61c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	f893 5129 	ldrb.w	r5, [r3, #297]	; 0x129
 801b62a:	68bb      	ldr	r3, [r7, #8]
 801b62c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                             crt->sig_md, crt->sig_opts );
 801b630:	68ba      	ldr	r2, [r7, #8]
 801b632:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 801b636:	9201      	str	r2, [sp, #4]
 801b638:	9300      	str	r3, [sp, #0]
 801b63a:	462b      	mov	r3, r5
 801b63c:	4622      	mov	r2, r4
 801b63e:	f7fe fb83 	bl	8019d48 <mbedtls_x509_sig_alg_gets>
 801b642:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b646:	2b00      	cmp	r3, #0
 801b648:	db03      	blt.n	801b652 <mbedtls_x509_crt_info+0x302>
 801b64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b64e:	429a      	cmp	r2, r3
 801b650:	d301      	bcc.n	801b656 <mbedtls_x509_crt_info+0x306>
 801b652:	4b68      	ldr	r3, [pc, #416]	; (801b7f4 <mbedtls_x509_crt_info+0x4a4>)
 801b654:	e171      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b65a:	1ad3      	subs	r3, r2, r3
 801b65c:	633b      	str	r3, [r7, #48]	; 0x30
 801b65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b662:	4413      	add	r3, r2
 801b664:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 801b666:	68bb      	ldr	r3, [r7, #8]
 801b668:	33bc      	adds	r3, #188	; 0xbc
 801b66a:	4618      	mov	r0, r3
 801b66c:	f7f3 fbfa 	bl	800ee64 <mbedtls_pk_get_name>
 801b670:	4602      	mov	r2, r0
 801b672:	f107 0318 	add.w	r3, r7, #24
 801b676:	2112      	movs	r1, #18
 801b678:	4618      	mov	r0, r3
 801b67a:	f7fe fba9 	bl	8019dd0 <mbedtls_x509_key_size_helper>
 801b67e:	6378      	str	r0, [r7, #52]	; 0x34
 801b680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b682:	2b00      	cmp	r3, #0
 801b684:	d001      	beq.n	801b68a <mbedtls_x509_crt_info+0x33a>
                                      mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
    {
        return( ret );
 801b686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b688:	e157      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 801b68a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 801b68c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	33bc      	adds	r3, #188	; 0xbc
 801b692:	4618      	mov	r0, r3
 801b694:	f7f3 fba6 	bl	800ede4 <mbedtls_pk_get_bitlen>
 801b698:	4603      	mov	r3, r0
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 801b69a:	9301      	str	r3, [sp, #4]
 801b69c:	f107 0318 	add.w	r3, r7, #24
 801b6a0:	9300      	str	r3, [sp, #0]
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	4a55      	ldr	r2, [pc, #340]	; (801b7fc <mbedtls_x509_crt_info+0x4ac>)
 801b6a6:	4629      	mov	r1, r5
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	f002 fae5 	bl	801dc78 <sniprintf>
 801b6ae:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	db03      	blt.n	801b6be <mbedtls_x509_crt_info+0x36e>
 801b6b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6ba:	429a      	cmp	r2, r3
 801b6bc:	d301      	bcc.n	801b6c2 <mbedtls_x509_crt_info+0x372>
 801b6be:	4b4d      	ldr	r3, [pc, #308]	; (801b7f4 <mbedtls_x509_crt_info+0x4a4>)
 801b6c0:	e13b      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6c6:	1ad3      	subs	r3, r2, r3
 801b6c8:	633b      	str	r3, [r7, #48]	; 0x30
 801b6ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6ce:	4413      	add	r3, r2
 801b6d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 801b6d2:	68bb      	ldr	r3, [r7, #8]
 801b6d4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b6d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d040      	beq.n	801b762 <mbedtls_x509_crt_info+0x412>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 801b6e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b6e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
                        crt->ca_istrue ? "true" : "false" );
 801b6e4:	68bb      	ldr	r3, [r7, #8]
 801b6e6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d001      	beq.n	801b6f2 <mbedtls_x509_crt_info+0x3a2>
 801b6ee:	4b44      	ldr	r3, [pc, #272]	; (801b800 <mbedtls_x509_crt_info+0x4b0>)
 801b6f0:	e000      	b.n	801b6f4 <mbedtls_x509_crt_info+0x3a4>
 801b6f2:	4b44      	ldr	r3, [pc, #272]	; (801b804 <mbedtls_x509_crt_info+0x4b4>)
 801b6f4:	9300      	str	r3, [sp, #0]
 801b6f6:	68fb      	ldr	r3, [r7, #12]
 801b6f8:	4a43      	ldr	r2, [pc, #268]	; (801b808 <mbedtls_x509_crt_info+0x4b8>)
 801b6fa:	f002 fabd 	bl	801dc78 <sniprintf>
 801b6fe:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801b700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b702:	2b00      	cmp	r3, #0
 801b704:	db03      	blt.n	801b70e <mbedtls_x509_crt_info+0x3be>
 801b706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b70a:	429a      	cmp	r2, r3
 801b70c:	d301      	bcc.n	801b712 <mbedtls_x509_crt_info+0x3c2>
 801b70e:	4b39      	ldr	r3, [pc, #228]	; (801b7f4 <mbedtls_x509_crt_info+0x4a4>)
 801b710:	e113      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b716:	1ad3      	subs	r3, r2, r3
 801b718:	633b      	str	r3, [r7, #48]	; 0x30
 801b71a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b71e:	4413      	add	r3, r2
 801b720:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( crt->max_pathlen > 0 )
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801b728:	2b00      	cmp	r3, #0
 801b72a:	dd1a      	ble.n	801b762 <mbedtls_x509_crt_info+0x412>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 801b72c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b72e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b730:	68bb      	ldr	r3, [r7, #8]
 801b732:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801b736:	3b01      	subs	r3, #1
 801b738:	4a34      	ldr	r2, [pc, #208]	; (801b80c <mbedtls_x509_crt_info+0x4bc>)
 801b73a:	f002 fa9d 	bl	801dc78 <sniprintf>
 801b73e:	6378      	str	r0, [r7, #52]	; 0x34
            MBEDTLS_X509_SAFE_SNPRINTF;
 801b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b742:	2b00      	cmp	r3, #0
 801b744:	db03      	blt.n	801b74e <mbedtls_x509_crt_info+0x3fe>
 801b746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b74a:	429a      	cmp	r2, r3
 801b74c:	d301      	bcc.n	801b752 <mbedtls_x509_crt_info+0x402>
 801b74e:	4b29      	ldr	r3, [pc, #164]	; (801b7f4 <mbedtls_x509_crt_info+0x4a4>)
 801b750:	e0f3      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b756:	1ad3      	subs	r3, r2, r3
 801b758:	633b      	str	r3, [r7, #48]	; 0x30
 801b75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b75e:	4413      	add	r3, r2
 801b760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 801b762:	68bb      	ldr	r3, [r7, #8]
 801b764:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b768:	f003 0320 	and.w	r3, r3, #32
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d027      	beq.n	801b7c0 <mbedtls_x509_crt_info+0x470>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 801b770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	4a26      	ldr	r2, [pc, #152]	; (801b810 <mbedtls_x509_crt_info+0x4c0>)
 801b778:	f002 fa7e 	bl	801dc78 <sniprintf>
 801b77c:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801b77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b780:	2b00      	cmp	r3, #0
 801b782:	db03      	blt.n	801b78c <mbedtls_x509_crt_info+0x43c>
 801b784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b788:	429a      	cmp	r2, r3
 801b78a:	d301      	bcc.n	801b790 <mbedtls_x509_crt_info+0x440>
 801b78c:	4b19      	ldr	r3, [pc, #100]	; (801b7f4 <mbedtls_x509_crt_info+0x4a4>)
 801b78e:	e0d4      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b794:	1ad3      	subs	r3, r2, r3
 801b796:	633b      	str	r3, [r7, #48]	; 0x30
 801b798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b79c:	4413      	add	r3, r2
 801b79e:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 801b7a0:	68bb      	ldr	r3, [r7, #8]
 801b7a2:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 801b7a6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801b7aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b7ae:	4618      	mov	r0, r3
 801b7b0:	f7ff fa9a 	bl	801ace8 <x509_info_subject_alt_name>
 801b7b4:	6378      	str	r0, [r7, #52]	; 0x34
 801b7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d001      	beq.n	801b7c0 <mbedtls_x509_crt_info+0x470>
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
 801b7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7be:	e0bc      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 801b7c0:	68bb      	ldr	r3, [r7, #8]
 801b7c2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b7c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d03c      	beq.n	801b848 <mbedtls_x509_crt_info+0x4f8>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 801b7ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b7d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	4a0f      	ldr	r2, [pc, #60]	; (801b814 <mbedtls_x509_crt_info+0x4c4>)
 801b7d6:	f002 fa4f 	bl	801dc78 <sniprintf>
 801b7da:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801b7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	db03      	blt.n	801b7ea <mbedtls_x509_crt_info+0x49a>
 801b7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7e6:	429a      	cmp	r2, r3
 801b7e8:	d316      	bcc.n	801b818 <mbedtls_x509_crt_info+0x4c8>
 801b7ea:	4b02      	ldr	r3, [pc, #8]	; (801b7f4 <mbedtls_x509_crt_info+0x4a4>)
 801b7ec:	e0a5      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b7ee:	bf00      	nop
 801b7f0:	0802369c 	.word	0x0802369c
 801b7f4:	ffffd680 	.word	0xffffd680
 801b7f8:	080236d4 	.word	0x080236d4
 801b7fc:	080236ec 	.word	0x080236ec
 801b800:	08023700 	.word	0x08023700
 801b804:	08023708 	.word	0x08023708
 801b808:	08023710 	.word	0x08023710
 801b80c:	08023730 	.word	0x08023730
 801b810:	08023744 	.word	0x08023744
 801b814:	0802375c 	.word	0x0802375c
 801b818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b81c:	1ad3      	subs	r3, r2, r3
 801b81e:	633b      	str	r3, [r7, #48]	; 0x30
 801b820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b824:	4413      	add	r3, r2
 801b826:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 801b828:	68bb      	ldr	r3, [r7, #8]
 801b82a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801b82e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801b832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b836:	4618      	mov	r0, r3
 801b838:	f7ff fac2 	bl	801adc0 <x509_info_cert_type>
 801b83c:	6378      	str	r0, [r7, #52]	; 0x34
 801b83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b840:	2b00      	cmp	r3, #0
 801b842:	d001      	beq.n	801b848 <mbedtls_x509_crt_info+0x4f8>
            return( ret );
 801b844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b846:	e078      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 801b848:	68bb      	ldr	r3, [r7, #8]
 801b84a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b84e:	f003 0304 	and.w	r3, r3, #4
 801b852:	2b00      	cmp	r3, #0
 801b854:	d027      	beq.n	801b8a6 <mbedtls_x509_crt_info+0x556>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 801b856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	4a39      	ldr	r2, [pc, #228]	; (801b944 <mbedtls_x509_crt_info+0x5f4>)
 801b85e:	f002 fa0b 	bl	801dc78 <sniprintf>
 801b862:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b866:	2b00      	cmp	r3, #0
 801b868:	db03      	blt.n	801b872 <mbedtls_x509_crt_info+0x522>
 801b86a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b86e:	429a      	cmp	r2, r3
 801b870:	d301      	bcc.n	801b876 <mbedtls_x509_crt_info+0x526>
 801b872:	4b35      	ldr	r3, [pc, #212]	; (801b948 <mbedtls_x509_crt_info+0x5f8>)
 801b874:	e061      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b87a:	1ad3      	subs	r3, r2, r3
 801b87c:	633b      	str	r3, [r7, #48]	; 0x30
 801b87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b882:	4413      	add	r3, r2
 801b884:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 801b886:	68bb      	ldr	r3, [r7, #8]
 801b888:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 801b88c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801b890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b894:	4618      	mov	r0, r3
 801b896:	f7ff fbbb 	bl	801b010 <x509_info_key_usage>
 801b89a:	6378      	str	r0, [r7, #52]	; 0x34
 801b89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d001      	beq.n	801b8a6 <mbedtls_x509_crt_info+0x556>
            return( ret );
 801b8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8a4:	e049      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 801b8a6:	68bb      	ldr	r3, [r7, #8]
 801b8a8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b8ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d027      	beq.n	801b904 <mbedtls_x509_crt_info+0x5b4>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 801b8b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b8b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	4a24      	ldr	r2, [pc, #144]	; (801b94c <mbedtls_x509_crt_info+0x5fc>)
 801b8bc:	f002 f9dc 	bl	801dc78 <sniprintf>
 801b8c0:	6378      	str	r0, [r7, #52]	; 0x34
        MBEDTLS_X509_SAFE_SNPRINTF;
 801b8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	db03      	blt.n	801b8d0 <mbedtls_x509_crt_info+0x580>
 801b8c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8cc:	429a      	cmp	r2, r3
 801b8ce:	d301      	bcc.n	801b8d4 <mbedtls_x509_crt_info+0x584>
 801b8d0:	4b1d      	ldr	r3, [pc, #116]	; (801b948 <mbedtls_x509_crt_info+0x5f8>)
 801b8d2:	e032      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8d8:	1ad3      	subs	r3, r2, r3
 801b8da:	633b      	str	r3, [r7, #48]	; 0x30
 801b8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8e0:	4413      	add	r3, r2
 801b8e2:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 801b8e4:	68bb      	ldr	r3, [r7, #8]
 801b8e6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801b8ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801b8ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b8f2:	4618      	mov	r0, r3
 801b8f4:	f7ff fcd8 	bl	801b2a8 <x509_info_ext_key_usage>
 801b8f8:	6378      	str	r0, [r7, #52]	; 0x34
 801b8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	d001      	beq.n	801b904 <mbedtls_x509_crt_info+0x5b4>
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
 801b900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b902:	e01a      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 801b904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b908:	4a11      	ldr	r2, [pc, #68]	; (801b950 <mbedtls_x509_crt_info+0x600>)
 801b90a:	4618      	mov	r0, r3
 801b90c:	f002 f9b4 	bl	801dc78 <sniprintf>
 801b910:	6378      	str	r0, [r7, #52]	; 0x34
    MBEDTLS_X509_SAFE_SNPRINTF;
 801b912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b914:	2b00      	cmp	r3, #0
 801b916:	db03      	blt.n	801b920 <mbedtls_x509_crt_info+0x5d0>
 801b918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b91c:	429a      	cmp	r2, r3
 801b91e:	d301      	bcc.n	801b924 <mbedtls_x509_crt_info+0x5d4>
 801b920:	4b09      	ldr	r3, [pc, #36]	; (801b948 <mbedtls_x509_crt_info+0x5f8>)
 801b922:	e00a      	b.n	801b93a <mbedtls_x509_crt_info+0x5ea>
 801b924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b928:	1ad3      	subs	r3, r2, r3
 801b92a:	633b      	str	r3, [r7, #48]	; 0x30
 801b92c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b930:	4413      	add	r3, r2
 801b932:	62fb      	str	r3, [r7, #44]	; 0x2c

    return( (int) ( size - n ) );
 801b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b936:	693a      	ldr	r2, [r7, #16]
 801b938:	1ad3      	subs	r3, r2, r3
}
 801b93a:	4618      	mov	r0, r3
 801b93c:	373c      	adds	r7, #60	; 0x3c
 801b93e:	46bd      	mov	sp, r7
 801b940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b942:	bf00      	nop
 801b944:	08023774 	.word	0x08023774
 801b948:	ffffd680 	.word	0xffffd680
 801b94c:	0802378c 	.word	0x0802378c
 801b950:	080237a4 	.word	0x080237a4

0801b954 <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 801b954:	b480      	push	{r7}
 801b956:	b089      	sub	sp, #36	; 0x24
 801b958:	af00      	add	r7, sp, #0
 801b95a:	60f8      	str	r0, [r7, #12]
 801b95c:	60b9      	str	r1, [r7, #8]
 801b95e:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;
 801b960:	68fb      	ldr	r3, [r7, #12]
 801b962:	61bb      	str	r3, [r7, #24]
 801b964:	68bb      	ldr	r3, [r7, #8]
 801b966:	617b      	str	r3, [r7, #20]

    for( i = 0; i < len; i++ )
 801b968:	2300      	movs	r3, #0
 801b96a:	61fb      	str	r3, [r7, #28]
 801b96c:	e030      	b.n	801b9d0 <x509_memcasecmp+0x7c>
    {
        diff = n1[i] ^ n2[i];
 801b96e:	69ba      	ldr	r2, [r7, #24]
 801b970:	69fb      	ldr	r3, [r7, #28]
 801b972:	4413      	add	r3, r2
 801b974:	781a      	ldrb	r2, [r3, #0]
 801b976:	6979      	ldr	r1, [r7, #20]
 801b978:	69fb      	ldr	r3, [r7, #28]
 801b97a:	440b      	add	r3, r1
 801b97c:	781b      	ldrb	r3, [r3, #0]
 801b97e:	4053      	eors	r3, r2
 801b980:	74fb      	strb	r3, [r7, #19]

        if( diff == 0 )
 801b982:	7cfb      	ldrb	r3, [r7, #19]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d01d      	beq.n	801b9c4 <x509_memcasecmp+0x70>
            continue;

        if( diff == 32 &&
 801b988:	7cfb      	ldrb	r3, [r7, #19]
 801b98a:	2b20      	cmp	r3, #32
 801b98c:	d117      	bne.n	801b9be <x509_memcasecmp+0x6a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801b98e:	69ba      	ldr	r2, [r7, #24]
 801b990:	69fb      	ldr	r3, [r7, #28]
 801b992:	4413      	add	r3, r2
 801b994:	781b      	ldrb	r3, [r3, #0]
        if( diff == 32 &&
 801b996:	2b60      	cmp	r3, #96	; 0x60
 801b998:	d905      	bls.n	801b9a6 <x509_memcasecmp+0x52>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801b99a:	69ba      	ldr	r2, [r7, #24]
 801b99c:	69fb      	ldr	r3, [r7, #28]
 801b99e:	4413      	add	r3, r2
 801b9a0:	781b      	ldrb	r3, [r3, #0]
 801b9a2:	2b7a      	cmp	r3, #122	; 0x7a
 801b9a4:	d910      	bls.n	801b9c8 <x509_memcasecmp+0x74>
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
 801b9a6:	69ba      	ldr	r2, [r7, #24]
 801b9a8:	69fb      	ldr	r3, [r7, #28]
 801b9aa:	4413      	add	r3, r2
 801b9ac:	781b      	ldrb	r3, [r3, #0]
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801b9ae:	2b40      	cmp	r3, #64	; 0x40
 801b9b0:	d905      	bls.n	801b9be <x509_memcasecmp+0x6a>
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
 801b9b2:	69ba      	ldr	r2, [r7, #24]
 801b9b4:	69fb      	ldr	r3, [r7, #28]
 801b9b6:	4413      	add	r3, r2
 801b9b8:	781b      	ldrb	r3, [r3, #0]
 801b9ba:	2b5a      	cmp	r3, #90	; 0x5a
 801b9bc:	d904      	bls.n	801b9c8 <x509_memcasecmp+0x74>
        {
            continue;
        }

        return( -1 );
 801b9be:	f04f 33ff 	mov.w	r3, #4294967295
 801b9c2:	e00a      	b.n	801b9da <x509_memcasecmp+0x86>
            continue;
 801b9c4:	bf00      	nop
 801b9c6:	e000      	b.n	801b9ca <x509_memcasecmp+0x76>
            continue;
 801b9c8:	bf00      	nop
    for( i = 0; i < len; i++ )
 801b9ca:	69fb      	ldr	r3, [r7, #28]
 801b9cc:	3301      	adds	r3, #1
 801b9ce:	61fb      	str	r3, [r7, #28]
 801b9d0:	69fa      	ldr	r2, [r7, #28]
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	429a      	cmp	r2, r3
 801b9d6:	d3ca      	bcc.n	801b96e <x509_memcasecmp+0x1a>
    }

    return( 0 );
 801b9d8:	2300      	movs	r3, #0
}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	3724      	adds	r7, #36	; 0x24
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e4:	4770      	bx	lr

0801b9e6 <x509_check_wildcard>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 801b9e6:	b580      	push	{r7, lr}
 801b9e8:	b086      	sub	sp, #24
 801b9ea:	af00      	add	r7, sp, #0
 801b9ec:	6078      	str	r0, [r7, #4]
 801b9ee:	6039      	str	r1, [r7, #0]
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	613b      	str	r3, [r7, #16]
 801b9f4:	6878      	ldr	r0, [r7, #4]
 801b9f6:	f7e4 fbeb 	bl	80001d0 <strlen>
 801b9fa:	60f8      	str	r0, [r7, #12]

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 801b9fc:	683b      	ldr	r3, [r7, #0]
 801b9fe:	685b      	ldr	r3, [r3, #4]
 801ba00:	2b02      	cmp	r3, #2
 801ba02:	d90a      	bls.n	801ba1a <x509_check_wildcard+0x34>
 801ba04:	683b      	ldr	r3, [r7, #0]
 801ba06:	689b      	ldr	r3, [r3, #8]
 801ba08:	781b      	ldrb	r3, [r3, #0]
 801ba0a:	2b2a      	cmp	r3, #42	; 0x2a
 801ba0c:	d105      	bne.n	801ba1a <x509_check_wildcard+0x34>
 801ba0e:	683b      	ldr	r3, [r7, #0]
 801ba10:	689b      	ldr	r3, [r3, #8]
 801ba12:	3301      	adds	r3, #1
 801ba14:	781b      	ldrb	r3, [r3, #0]
 801ba16:	2b2e      	cmp	r3, #46	; 0x2e
 801ba18:	d001      	beq.n	801ba1e <x509_check_wildcard+0x38>
        return( 0 );
 801ba1a:	2300      	movs	r3, #0
 801ba1c:	e033      	b.n	801ba86 <x509_check_wildcard+0xa0>

    for( i = 0; i < cn_len; ++i )
 801ba1e:	2300      	movs	r3, #0
 801ba20:	617b      	str	r3, [r7, #20]
 801ba22:	e00b      	b.n	801ba3c <x509_check_wildcard+0x56>
    {
        if( cn[i] == '.' )
 801ba24:	687a      	ldr	r2, [r7, #4]
 801ba26:	697b      	ldr	r3, [r7, #20]
 801ba28:	4413      	add	r3, r2
 801ba2a:	781b      	ldrb	r3, [r3, #0]
 801ba2c:	2b2e      	cmp	r3, #46	; 0x2e
 801ba2e:	d102      	bne.n	801ba36 <x509_check_wildcard+0x50>
        {
            cn_idx = i;
 801ba30:	697b      	ldr	r3, [r7, #20]
 801ba32:	613b      	str	r3, [r7, #16]
            break;
 801ba34:	e006      	b.n	801ba44 <x509_check_wildcard+0x5e>
    for( i = 0; i < cn_len; ++i )
 801ba36:	697b      	ldr	r3, [r7, #20]
 801ba38:	3301      	adds	r3, #1
 801ba3a:	617b      	str	r3, [r7, #20]
 801ba3c:	697a      	ldr	r2, [r7, #20]
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	429a      	cmp	r2, r3
 801ba42:	d3ef      	bcc.n	801ba24 <x509_check_wildcard+0x3e>
        }
    }

    if( cn_idx == 0 )
 801ba44:	693b      	ldr	r3, [r7, #16]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d102      	bne.n	801ba50 <x509_check_wildcard+0x6a>
        return( -1 );
 801ba4a:	f04f 33ff 	mov.w	r3, #4294967295
 801ba4e:	e01a      	b.n	801ba86 <x509_check_wildcard+0xa0>

    if( cn_len - cn_idx == name->len - 1 &&
 801ba50:	68fa      	ldr	r2, [r7, #12]
 801ba52:	693b      	ldr	r3, [r7, #16]
 801ba54:	1ad2      	subs	r2, r2, r3
 801ba56:	683b      	ldr	r3, [r7, #0]
 801ba58:	685b      	ldr	r3, [r3, #4]
 801ba5a:	3b01      	subs	r3, #1
 801ba5c:	429a      	cmp	r2, r3
 801ba5e:	d110      	bne.n	801ba82 <x509_check_wildcard+0x9c>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 801ba60:	683b      	ldr	r3, [r7, #0]
 801ba62:	689b      	ldr	r3, [r3, #8]
 801ba64:	1c58      	adds	r0, r3, #1
 801ba66:	687a      	ldr	r2, [r7, #4]
 801ba68:	693b      	ldr	r3, [r7, #16]
 801ba6a:	18d1      	adds	r1, r2, r3
 801ba6c:	683b      	ldr	r3, [r7, #0]
 801ba6e:	685b      	ldr	r3, [r3, #4]
 801ba70:	3b01      	subs	r3, #1
 801ba72:	461a      	mov	r2, r3
 801ba74:	f7ff ff6e 	bl	801b954 <x509_memcasecmp>
 801ba78:	4603      	mov	r3, r0
    if( cn_len - cn_idx == name->len - 1 &&
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d101      	bne.n	801ba82 <x509_check_wildcard+0x9c>
    {
        return( 0 );
 801ba7e:	2300      	movs	r3, #0
 801ba80:	e001      	b.n	801ba86 <x509_check_wildcard+0xa0>
    }

    return( -1 );
 801ba82:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ba86:	4618      	mov	r0, r3
 801ba88:	3718      	adds	r7, #24
 801ba8a:	46bd      	mov	sp, r7
 801ba8c:	bd80      	pop	{r7, pc}

0801ba8e <x509_string_cmp>:
 * variations (but not all).
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
 801ba8e:	b580      	push	{r7, lr}
 801ba90:	b082      	sub	sp, #8
 801ba92:	af00      	add	r7, sp, #0
 801ba94:	6078      	str	r0, [r7, #4]
 801ba96:	6039      	str	r1, [r7, #0]
    if( a->tag == b->tag &&
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	681a      	ldr	r2, [r3, #0]
 801ba9c:	683b      	ldr	r3, [r7, #0]
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	429a      	cmp	r2, r3
 801baa2:	d113      	bne.n	801bacc <x509_string_cmp+0x3e>
        a->len == b->len &&
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	685a      	ldr	r2, [r3, #4]
 801baa8:	683b      	ldr	r3, [r7, #0]
 801baaa:	685b      	ldr	r3, [r3, #4]
    if( a->tag == b->tag &&
 801baac:	429a      	cmp	r2, r3
 801baae:	d10d      	bne.n	801bacc <x509_string_cmp+0x3e>
        memcmp( a->p, b->p, b->len ) == 0 )
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	6898      	ldr	r0, [r3, #8]
 801bab4:	683b      	ldr	r3, [r7, #0]
 801bab6:	6899      	ldr	r1, [r3, #8]
 801bab8:	683b      	ldr	r3, [r7, #0]
 801baba:	685b      	ldr	r3, [r3, #4]
 801babc:	461a      	mov	r2, r3
 801babe:	f001 fe9b 	bl	801d7f8 <memcmp>
 801bac2:	4603      	mov	r3, r0
        a->len == b->len &&
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d101      	bne.n	801bacc <x509_string_cmp+0x3e>
    {
        return( 0 );
 801bac8:	2300      	movs	r3, #0
 801baca:	e025      	b.n	801bb18 <x509_string_cmp+0x8a>
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	681b      	ldr	r3, [r3, #0]
 801bad0:	2b0c      	cmp	r3, #12
 801bad2:	d003      	beq.n	801badc <x509_string_cmp+0x4e>
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	2b13      	cmp	r3, #19
 801bada:	d11b      	bne.n	801bb14 <x509_string_cmp+0x86>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801badc:	683b      	ldr	r3, [r7, #0]
 801bade:	681b      	ldr	r3, [r3, #0]
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801bae0:	2b0c      	cmp	r3, #12
 801bae2:	d003      	beq.n	801baec <x509_string_cmp+0x5e>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801bae4:	683b      	ldr	r3, [r7, #0]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	2b13      	cmp	r3, #19
 801baea:	d113      	bne.n	801bb14 <x509_string_cmp+0x86>
        a->len == b->len &&
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	685a      	ldr	r2, [r3, #4]
 801baf0:	683b      	ldr	r3, [r7, #0]
 801baf2:	685b      	ldr	r3, [r3, #4]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801baf4:	429a      	cmp	r2, r3
 801baf6:	d10d      	bne.n	801bb14 <x509_string_cmp+0x86>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	6898      	ldr	r0, [r3, #8]
 801bafc:	683b      	ldr	r3, [r7, #0]
 801bafe:	6899      	ldr	r1, [r3, #8]
 801bb00:	683b      	ldr	r3, [r7, #0]
 801bb02:	685b      	ldr	r3, [r3, #4]
 801bb04:	461a      	mov	r2, r3
 801bb06:	f7ff ff25 	bl	801b954 <x509_memcasecmp>
 801bb0a:	4603      	mov	r3, r0
        a->len == b->len &&
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d101      	bne.n	801bb14 <x509_string_cmp+0x86>
    {
        return( 0 );
 801bb10:	2300      	movs	r3, #0
 801bb12:	e001      	b.n	801bb18 <x509_string_cmp+0x8a>
    }

    return( -1 );
 801bb14:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bb18:	4618      	mov	r0, r3
 801bb1a:	3708      	adds	r7, #8
 801bb1c:	46bd      	mov	sp, r7
 801bb1e:	bd80      	pop	{r7, pc}

0801bb20 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b082      	sub	sp, #8
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	6078      	str	r0, [r7, #4]
 801bb28:	6039      	str	r1, [r7, #0]
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 801bb2a:	e041      	b.n	801bbb0 <x509_name_cmp+0x90>
    {
        if( a == NULL || b == NULL )
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d002      	beq.n	801bb38 <x509_name_cmp+0x18>
 801bb32:	683b      	ldr	r3, [r7, #0]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d102      	bne.n	801bb3e <x509_name_cmp+0x1e>
            return( -1 );
 801bb38:	f04f 33ff 	mov.w	r3, #4294967295
 801bb3c:	e03f      	b.n	801bbbe <x509_name_cmp+0x9e>

        /* type */
        if( a->oid.tag != b->oid.tag ||
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	681a      	ldr	r2, [r3, #0]
 801bb42:	683b      	ldr	r3, [r7, #0]
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	429a      	cmp	r2, r3
 801bb48:	d111      	bne.n	801bb6e <x509_name_cmp+0x4e>
            a->oid.len != b->oid.len ||
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	685a      	ldr	r2, [r3, #4]
 801bb4e:	683b      	ldr	r3, [r7, #0]
 801bb50:	685b      	ldr	r3, [r3, #4]
        if( a->oid.tag != b->oid.tag ||
 801bb52:	429a      	cmp	r2, r3
 801bb54:	d10b      	bne.n	801bb6e <x509_name_cmp+0x4e>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	6898      	ldr	r0, [r3, #8]
 801bb5a:	683b      	ldr	r3, [r7, #0]
 801bb5c:	6899      	ldr	r1, [r3, #8]
 801bb5e:	683b      	ldr	r3, [r7, #0]
 801bb60:	685b      	ldr	r3, [r3, #4]
 801bb62:	461a      	mov	r2, r3
 801bb64:	f001 fe48 	bl	801d7f8 <memcmp>
 801bb68:	4603      	mov	r3, r0
            a->oid.len != b->oid.len ||
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d002      	beq.n	801bb74 <x509_name_cmp+0x54>
        {
            return( -1 );
 801bb6e:	f04f 33ff 	mov.w	r3, #4294967295
 801bb72:	e024      	b.n	801bbbe <x509_name_cmp+0x9e>
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	f103 020c 	add.w	r2, r3, #12
 801bb7a:	683b      	ldr	r3, [r7, #0]
 801bb7c:	330c      	adds	r3, #12
 801bb7e:	4619      	mov	r1, r3
 801bb80:	4610      	mov	r0, r2
 801bb82:	f7ff ff84 	bl	801ba8e <x509_string_cmp>
 801bb86:	4603      	mov	r3, r0
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d002      	beq.n	801bb92 <x509_name_cmp+0x72>
            return( -1 );
 801bb8c:	f04f 33ff 	mov.w	r3, #4294967295
 801bb90:	e015      	b.n	801bbbe <x509_name_cmp+0x9e>

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	7f1a      	ldrb	r2, [r3, #28]
 801bb96:	683b      	ldr	r3, [r7, #0]
 801bb98:	7f1b      	ldrb	r3, [r3, #28]
 801bb9a:	429a      	cmp	r2, r3
 801bb9c:	d002      	beq.n	801bba4 <x509_name_cmp+0x84>
            return( -1 );
 801bb9e:	f04f 33ff 	mov.w	r3, #4294967295
 801bba2:	e00c      	b.n	801bbbe <x509_name_cmp+0x9e>

        a = a->next;
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	699b      	ldr	r3, [r3, #24]
 801bba8:	607b      	str	r3, [r7, #4]
        b = b->next;
 801bbaa:	683b      	ldr	r3, [r7, #0]
 801bbac:	699b      	ldr	r3, [r3, #24]
 801bbae:	603b      	str	r3, [r7, #0]
    while( a != NULL || b != NULL )
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d1ba      	bne.n	801bb2c <x509_name_cmp+0xc>
 801bbb6:	683b      	ldr	r3, [r7, #0]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d1b7      	bne.n	801bb2c <x509_name_cmp+0xc>
    }

    /* a == NULL == b */
    return( 0 );
 801bbbc:	2300      	movs	r3, #0
}
 801bbbe:	4618      	mov	r0, r3
 801bbc0:	3708      	adds	r7, #8
 801bbc2:	46bd      	mov	sp, r7
 801bbc4:	bd80      	pop	{r7, pc}

0801bbc6 <x509_crt_check_parent>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 801bbc6:	b580      	push	{r7, lr}
 801bbc8:	b086      	sub	sp, #24
 801bbca:	af00      	add	r7, sp, #0
 801bbcc:	60f8      	str	r0, [r7, #12]
 801bbce:	60b9      	str	r1, [r7, #8]
 801bbd0:	607a      	str	r2, [r7, #4]
 801bbd2:	603b      	str	r3, [r7, #0]
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801bbda:	68bb      	ldr	r3, [r7, #8]
 801bbdc:	336c      	adds	r3, #108	; 0x6c
 801bbde:	4619      	mov	r1, r3
 801bbe0:	4610      	mov	r0, r2
 801bbe2:	f7ff ff9d 	bl	801bb20 <x509_name_cmp>
 801bbe6:	4603      	mov	r3, r0
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d002      	beq.n	801bbf2 <x509_crt_check_parent+0x2c>
        return( -1 );
 801bbec:	f04f 33ff 	mov.w	r3, #4294967295
 801bbf0:	e030      	b.n	801bc54 <x509_crt_check_parent+0x8e>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;
 801bbf2:	2301      	movs	r3, #1
 801bbf4:	617b      	str	r3, [r7, #20]

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d005      	beq.n	801bc08 <x509_crt_check_parent+0x42>
 801bbfc:	68bb      	ldr	r3, [r7, #8]
 801bbfe:	699b      	ldr	r3, [r3, #24]
 801bc00:	2b02      	cmp	r3, #2
 801bc02:	dc01      	bgt.n	801bc08 <x509_crt_check_parent+0x42>
        need_ca_bit = 0;
 801bc04:	2300      	movs	r3, #0
 801bc06:	617b      	str	r3, [r7, #20]

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d016      	beq.n	801bc3c <x509_crt_check_parent+0x76>
 801bc0e:	683b      	ldr	r3, [r7, #0]
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d013      	beq.n	801bc3c <x509_crt_check_parent+0x76>
        child->raw.len == parent->raw.len &&
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	685a      	ldr	r2, [r3, #4]
 801bc18:	68bb      	ldr	r3, [r7, #8]
 801bc1a:	685b      	ldr	r3, [r3, #4]
    if( top && bottom &&
 801bc1c:	429a      	cmp	r2, r3
 801bc1e:	d10d      	bne.n	801bc3c <x509_crt_check_parent+0x76>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	6898      	ldr	r0, [r3, #8]
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	6899      	ldr	r1, [r3, #8]
 801bc28:	68fb      	ldr	r3, [r7, #12]
 801bc2a:	685b      	ldr	r3, [r3, #4]
 801bc2c:	461a      	mov	r2, r3
 801bc2e:	f001 fde3 	bl	801d7f8 <memcmp>
 801bc32:	4603      	mov	r3, r0
        child->raw.len == parent->raw.len &&
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d101      	bne.n	801bc3c <x509_crt_check_parent+0x76>
    {
        need_ca_bit = 0;
 801bc38:	2300      	movs	r3, #0
 801bc3a:	617b      	str	r3, [r7, #20]
    }

    if( need_ca_bit && ! parent->ca_istrue )
 801bc3c:	697b      	ldr	r3, [r7, #20]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d007      	beq.n	801bc52 <x509_crt_check_parent+0x8c>
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d102      	bne.n	801bc52 <x509_crt_check_parent+0x8c>
        return( -1 );
 801bc4c:	f04f 33ff 	mov.w	r3, #4294967295
 801bc50:	e000      	b.n	801bc54 <x509_crt_check_parent+0x8e>
    {
        return( -1 );
    }
#endif

    return( 0 );
 801bc52:	2300      	movs	r3, #0
}
 801bc54:	4618      	mov	r0, r3
 801bc56:	3718      	adds	r7, #24
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	bd80      	pop	{r7, pc}

0801bc5c <x509_crt_verify_top>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 801bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc60:	b096      	sub	sp, #88	; 0x58
 801bc62:	af04      	add	r7, sp, #16
 801bc64:	60f8      	str	r0, [r7, #12]
 801bc66:	60b9      	str	r1, [r7, #8]
 801bc68:	607a      	str	r2, [r7, #4]
 801bc6a:	603b      	str	r3, [r7, #0]
    int ret;
    uint32_t ca_flags = 0;
 801bc6c:	2300      	movs	r3, #0
 801bc6e:	637b      	str	r3, [r7, #52]	; 0x34
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;
 801bc70:	2300      	movs	r3, #0
 801bc72:	643b      	str	r3, [r7, #64]	; 0x40

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	33a4      	adds	r3, #164	; 0xa4
 801bc78:	4618      	mov	r0, r3
 801bc7a:	f7fe f8d5 	bl	8019e28 <mbedtls_x509_time_is_past>
 801bc7e:	4603      	mov	r3, r0
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d005      	beq.n	801bc90 <x509_crt_verify_top+0x34>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801bc84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	f043 0201 	orr.w	r2, r3, #1
 801bc8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bc8e:	601a      	str	r2, [r3, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	338c      	adds	r3, #140	; 0x8c
 801bc94:	4618      	mov	r0, r3
 801bc96:	f7fe f8d2 	bl	8019e3e <mbedtls_x509_time_is_future>
 801bc9a:	4603      	mov	r3, r0
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d005      	beq.n	801bcac <x509_crt_verify_top+0x50>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 801bca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801bca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bcaa:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 801bcac:	68fb      	ldr	r3, [r7, #12]
 801bcae:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801bcb2:	4619      	mov	r1, r3
 801bcb4:	6838      	ldr	r0, [r7, #0]
 801bcb6:	f7fe f8e6 	bl	8019e86 <x509_profile_check_md_alg>
 801bcba:	4603      	mov	r3, r0
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d005      	beq.n	801bccc <x509_crt_verify_top+0x70>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 801bcc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801bcc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bcca:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801bcd2:	4619      	mov	r1, r3
 801bcd4:	6838      	ldr	r0, [r7, #0]
 801bcd6:	f7fe f8f0 	bl	8019eba <x509_profile_check_pk_alg>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d005      	beq.n	801bcec <x509_crt_verify_top+0x90>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 801bce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801bce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bcea:	601a      	str	r2, [r3, #0]

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801bcec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	f043 0208 	orr.w	r2, r3, #8
 801bcf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bcf6:	601a      	str	r2, [r3, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 801bcf8:	68fb      	ldr	r3, [r7, #12]
 801bcfa:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801bcfe:	4618      	mov	r0, r3
 801bd00:	f7f2 f90c 	bl	800df1c <mbedtls_md_info_from_type>
 801bd04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( md_info == NULL )
 801bd06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d102      	bne.n	801bd12 <x509_crt_verify_top+0xb6>
    {
        /*
         * Cannot check 'unknown', no need to try any CA
         */
        trust_ca = NULL;
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	60bb      	str	r3, [r7, #8]
 801bd10:	e083      	b.n	801be1a <x509_crt_verify_top+0x1be>
    }
    else
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	6959      	ldr	r1, [r3, #20]
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	691a      	ldr	r2, [r3, #16]
 801bd1a:	f107 0314 	add.w	r3, r7, #20
 801bd1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801bd20:	f7f2 f996 	bl	800e050 <mbedtls_md>

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 801bd24:	e079      	b.n	801be1a <x509_crt_verify_top+0x1be>
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 801bd26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	bf0c      	ite	eq
 801bd2c:	2301      	moveq	r3, #1
 801bd2e:	2300      	movne	r3, #0
 801bd30:	b2db      	uxtb	r3, r3
 801bd32:	2201      	movs	r2, #1
 801bd34:	68b9      	ldr	r1, [r7, #8]
 801bd36:	68f8      	ldr	r0, [r7, #12]
 801bd38:	f7ff ff45 	bl	801bbc6 <x509_crt_check_parent>
 801bd3c:	4603      	mov	r3, r0
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d160      	bne.n	801be04 <x509_crt_verify_top+0x1a8>
            continue;

        check_path_cnt = path_cnt + 1;
 801bd42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bd44:	3301      	adds	r3, #1
 801bd46:	647b      	str	r3, [r7, #68]	; 0x44

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 801bd48:	68fb      	ldr	r3, [r7, #12]
 801bd4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bd4c:	68bb      	ldr	r3, [r7, #8]
 801bd4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd50:	429a      	cmp	r2, r3
 801bd52:	d10e      	bne.n	801bd72 <x509_crt_verify_top+0x116>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 801bd54:	68fb      	ldr	r3, [r7, #12]
 801bd56:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801bd58:	68bb      	ldr	r3, [r7, #8]
 801bd5a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801bd5c:	68fb      	ldr	r3, [r7, #12]
 801bd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd60:	461a      	mov	r2, r3
 801bd62:	f001 fd49 	bl	801d7f8 <memcmp>
 801bd66:	4603      	mov	r3, r0
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d102      	bne.n	801bd72 <x509_crt_verify_top+0x116>
                            child->issuer_raw.len ) == 0 )
        {
            check_path_cnt--;
 801bd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd6e:	3b01      	subs	r3, #1
 801bd70:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 801bd72:	68bb      	ldr	r3, [r7, #8]
 801bd74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	dd07      	ble.n	801bd8c <x509_crt_verify_top+0x130>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
 801bd7c:	68bb      	ldr	r3, [r7, #8]
 801bd7e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 801bd82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801bd84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd86:	1acb      	subs	r3, r1, r3
        if( trust_ca->max_pathlen > 0 &&
 801bd88:	429a      	cmp	r2, r3
 801bd8a:	db3d      	blt.n	801be08 <x509_crt_verify_top+0x1ac>
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	f893 4129 	ldrb.w	r4, [r3, #297]	; 0x129
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
 801bd98:	68bb      	ldr	r3, [r7, #8]
 801bd9a:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	f893 8128 	ldrb.w	r8, [r3, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 801bda4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801bda6:	f7f2 faf7 	bl	800e398 <mbedtls_md_get_size>
 801bdaa:	4603      	mov	r3, r0
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 801bdac:	4619      	mov	r1, r3
                           child->sig.p, child->sig.len ) != 0 )
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 801bdb4:	68fa      	ldr	r2, [r7, #12]
 801bdb6:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 801bdba:	9203      	str	r2, [sp, #12]
 801bdbc:	9302      	str	r3, [sp, #8]
 801bdbe:	9101      	str	r1, [sp, #4]
 801bdc0:	f107 0314 	add.w	r3, r7, #20
 801bdc4:	9300      	str	r3, [sp, #0]
 801bdc6:	4643      	mov	r3, r8
 801bdc8:	4632      	mov	r2, r6
 801bdca:	4629      	mov	r1, r5
 801bdcc:	4620      	mov	r0, r4
 801bdce:	f7f2 ff5f 	bl	800ec90 <mbedtls_pk_verify_ext>
 801bdd2:	4603      	mov	r3, r0
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d119      	bne.n	801be0c <x509_crt_verify_top+0x1b0>
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 801bdd8:	68bb      	ldr	r3, [r7, #8]
 801bdda:	33a4      	adds	r3, #164	; 0xa4
 801bddc:	4618      	mov	r0, r3
 801bdde:	f7fe f823 	bl	8019e28 <mbedtls_x509_time_is_past>
 801bde2:	4603      	mov	r3, r0
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d107      	bne.n	801bdf8 <x509_crt_verify_top+0x19c>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 801bde8:	68bb      	ldr	r3, [r7, #8]
 801bdea:	338c      	adds	r3, #140	; 0x8c
 801bdec:	4618      	mov	r0, r3
 801bdee:	f7fe f826 	bl	8019e3e <mbedtls_x509_time_is_future>
 801bdf2:	4603      	mov	r3, r0
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d014      	beq.n	801be22 <x509_crt_verify_top+0x1c6>
        {
            if ( future_past_ca == NULL )
 801bdf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d108      	bne.n	801be10 <x509_crt_verify_top+0x1b4>
                future_past_ca = trust_ca;
 801bdfe:	68bb      	ldr	r3, [r7, #8]
 801be00:	643b      	str	r3, [r7, #64]	; 0x40

            continue;
 801be02:	e005      	b.n	801be10 <x509_crt_verify_top+0x1b4>
            continue;
 801be04:	bf00      	nop
 801be06:	e004      	b.n	801be12 <x509_crt_verify_top+0x1b6>
            continue;
 801be08:	bf00      	nop
 801be0a:	e002      	b.n	801be12 <x509_crt_verify_top+0x1b6>
            continue;
 801be0c:	bf00      	nop
 801be0e:	e000      	b.n	801be12 <x509_crt_verify_top+0x1b6>
            continue;
 801be10:	bf00      	nop
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 801be12:	68bb      	ldr	r3, [r7, #8]
 801be14:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801be18:	60bb      	str	r3, [r7, #8]
 801be1a:	68bb      	ldr	r3, [r7, #8]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d182      	bne.n	801bd26 <x509_crt_verify_top+0xca>
 801be20:	e000      	b.n	801be24 <x509_crt_verify_top+0x1c8>
        }

        break;
 801be22:	bf00      	nop
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 801be24:	68bb      	ldr	r3, [r7, #8]
 801be26:	2b00      	cmp	r3, #0
 801be28:	d104      	bne.n	801be34 <x509_crt_verify_top+0x1d8>
 801be2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be2c:	60bb      	str	r3, [r7, #8]
 801be2e:	68bb      	ldr	r3, [r7, #8]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d017      	beq.n	801be64 <x509_crt_verify_top+0x208>
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801be34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	f023 0208 	bic.w	r2, r3, #8
 801be3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801be3e:	601a      	str	r2, [r3, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 801be46:	68bb      	ldr	r3, [r7, #8]
 801be48:	33bc      	adds	r3, #188	; 0xbc
 801be4a:	461a      	mov	r2, r3
 801be4c:	6838      	ldr	r0, [r7, #0]
 801be4e:	f7fe f84e 	bl	8019eee <x509_profile_check_key>
 801be52:	4603      	mov	r3, r0
 801be54:	2b00      	cmp	r3, #0
 801be56:	d005      	beq.n	801be64 <x509_crt_verify_top+0x208>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801be58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801be60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801be62:	601a      	str	r2, [r3, #0]
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 801be64:	68bb      	ldr	r3, [r7, #8]
 801be66:	2b00      	cmp	r3, #0
 801be68:	d03a      	beq.n	801bee0 <x509_crt_verify_top+0x284>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801be6e:	68bb      	ldr	r3, [r7, #8]
 801be70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    if( trust_ca != NULL &&
 801be72:	429a      	cmp	r2, r3
 801be74:	d10b      	bne.n	801be8e <x509_crt_verify_top+0x232>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801be7a:	68bb      	ldr	r3, [r7, #8]
 801be7c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be82:	461a      	mov	r2, r3
 801be84:	f001 fcb8 	bl	801d7f8 <memcmp>
 801be88:	4603      	mov	r3, r0
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d028      	beq.n	801bee0 <x509_crt_verify_top+0x284>
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 801be8e:	68bb      	ldr	r3, [r7, #8]
 801be90:	33a4      	adds	r3, #164	; 0xa4
 801be92:	4618      	mov	r0, r3
 801be94:	f7fd ffc8 	bl	8019e28 <mbedtls_x509_time_is_past>
 801be98:	4603      	mov	r3, r0
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d003      	beq.n	801bea6 <x509_crt_verify_top+0x24a>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801be9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bea0:	f043 0301 	orr.w	r3, r3, #1
 801bea4:	637b      	str	r3, [r7, #52]	; 0x34

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 801bea6:	68bb      	ldr	r3, [r7, #8]
 801bea8:	338c      	adds	r3, #140	; 0x8c
 801beaa:	4618      	mov	r0, r3
 801beac:	f7fd ffc7 	bl	8019e3e <mbedtls_x509_time_is_future>
 801beb0:	4603      	mov	r3, r0
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d003      	beq.n	801bebe <x509_crt_verify_top+0x262>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 801beb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bebc:	637b      	str	r3, [r7, #52]	; 0x34

        if( NULL != f_vrfy )
 801bebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d00d      	beq.n	801bee0 <x509_crt_verify_top+0x284>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 801bec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bec6:	1c5a      	adds	r2, r3, #1
 801bec8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801becc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801bece:	68b9      	ldr	r1, [r7, #8]
 801bed0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801bed2:	47a0      	blx	r4
 801bed4:	63b8      	str	r0, [r7, #56]	; 0x38
 801bed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d001      	beq.n	801bee0 <x509_crt_verify_top+0x284>
                                &ca_flags ) ) != 0 )
            {
                return( ret );
 801bedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bede:	e015      	b.n	801bf0c <x509_crt_verify_top+0x2b0>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 801bee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d00b      	beq.n	801befe <x509_crt_verify_top+0x2a2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 801bee6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801bee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801beea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801beec:	68f9      	ldr	r1, [r7, #12]
 801beee:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801bef0:	47a0      	blx	r4
 801bef2:	63b8      	str	r0, [r7, #56]	; 0x38
 801bef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d001      	beq.n	801befe <x509_crt_verify_top+0x2a2>
            return( ret );
 801befa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801befc:	e006      	b.n	801bf0c <x509_crt_verify_top+0x2b0>
    }

    *flags |= ca_flags;
 801befe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bf00:	681a      	ldr	r2, [r3, #0]
 801bf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf04:	431a      	orrs	r2, r3
 801bf06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bf08:	601a      	str	r2, [r3, #0]

    return( 0 );
 801bf0a:	2300      	movs	r3, #0
}
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	3748      	adds	r7, #72	; 0x48
 801bf10:	46bd      	mov	sp, r7
 801bf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801bf18 <x509_crt_verify_child>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 801bf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf1c:	b096      	sub	sp, #88	; 0x58
 801bf1e:	af06      	add	r7, sp, #24
 801bf20:	60f8      	str	r0, [r7, #12]
 801bf22:	60b9      	str	r1, [r7, #8]
 801bf24:	607a      	str	r2, [r7, #4]
 801bf26:	603b      	str	r3, [r7, #0]
    int ret;
    uint32_t parent_flags = 0;
 801bf28:	2300      	movs	r3, #0
 801bf2a:	633b      	str	r3, [r7, #48]	; 0x30
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 801bf2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	d00e      	beq.n	801bf50 <x509_crt_verify_child+0x38>
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	336c      	adds	r3, #108	; 0x6c
 801bf3c:	4619      	mov	r1, r3
 801bf3e:	4610      	mov	r0, r2
 801bf40:	f7ff fdee 	bl	801bb20 <x509_name_cmp>
 801bf44:	4603      	mov	r3, r0
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d102      	bne.n	801bf50 <x509_crt_verify_child+0x38>
        self_cnt++;
 801bf4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bf4c:	3301      	adds	r3, #1
 801bf4e:	663b      	str	r3, [r7, #96]	; 0x60

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 801bf50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bf52:	2b07      	cmp	r3, #7
 801bf54:	dd01      	ble.n	801bf5a <x509_crt_verify_child+0x42>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 801bf56:	4b96      	ldr	r3, [pc, #600]	; (801c1b0 <x509_crt_verify_child+0x298>)
 801bf58:	e142      	b.n	801c1e0 <x509_crt_verify_child+0x2c8>
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	33a4      	adds	r3, #164	; 0xa4
 801bf5e:	4618      	mov	r0, r3
 801bf60:	f7fd ff62 	bl	8019e28 <mbedtls_x509_time_is_past>
 801bf64:	4603      	mov	r3, r0
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d005      	beq.n	801bf76 <x509_crt_verify_child+0x5e>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 801bf6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	f043 0201 	orr.w	r2, r3, #1
 801bf72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bf74:	601a      	str	r2, [r3, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 801bf76:	68fb      	ldr	r3, [r7, #12]
 801bf78:	338c      	adds	r3, #140	; 0x8c
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	f7fd ff5f 	bl	8019e3e <mbedtls_x509_time_is_future>
 801bf80:	4603      	mov	r3, r0
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d005      	beq.n	801bf92 <x509_crt_verify_child+0x7a>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 801bf86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801bf8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bf90:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801bf98:	4619      	mov	r1, r3
 801bf9a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bf9c:	f7fd ff73 	bl	8019e86 <x509_profile_check_md_alg>
 801bfa0:	4603      	mov	r3, r0
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d005      	beq.n	801bfb2 <x509_crt_verify_child+0x9a>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 801bfa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801bfae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bfb0:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801bfb8:	4619      	mov	r1, r3
 801bfba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bfbc:	f7fd ff7d 	bl	8019eba <x509_profile_check_pk_alg>
 801bfc0:	4603      	mov	r3, r0
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d005      	beq.n	801bfd2 <x509_crt_verify_child+0xba>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 801bfc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801bfce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bfd0:	601a      	str	r2, [r3, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801bfd8:	4618      	mov	r0, r3
 801bfda:	f7f1 ff9f 	bl	800df1c <mbedtls_md_info_from_type>
 801bfde:	63b8      	str	r0, [r7, #56]	; 0x38
    if( md_info == NULL )
 801bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d106      	bne.n	801bff4 <x509_crt_verify_child+0xdc>
    {
        /*
         * Cannot check 'unknown' hash
         */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801bfe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	f043 0208 	orr.w	r2, r3, #8
 801bfee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bff0:	601a      	str	r2, [r3, #0]
 801bff2:	e046      	b.n	801c082 <x509_crt_verify_child+0x16a>
    }
    else
    {
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	6959      	ldr	r1, [r3, #20]
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	691a      	ldr	r2, [r3, #16]
 801bffc:	f107 0310 	add.w	r3, r7, #16
 801c000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c002:	f7f2 f825 	bl	800e050 <mbedtls_md>

        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 801c00c:	68bb      	ldr	r3, [r7, #8]
 801c00e:	33bc      	adds	r3, #188	; 0xbc
 801c010:	461a      	mov	r2, r3
 801c012:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c014:	f7fd ff6b 	bl	8019eee <x509_profile_check_key>
 801c018:	4603      	mov	r3, r0
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d005      	beq.n	801c02a <x509_crt_verify_child+0x112>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801c01e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801c026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c028:	601a      	str	r2, [r3, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	f893 4129 	ldrb.w	r4, [r3, #297]	; 0x129
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
 801c036:	68bb      	ldr	r3, [r7, #8]
 801c038:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	f893 8128 	ldrb.w	r8, [r3, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 801c042:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c044:	f7f2 f9a8 	bl	800e398 <mbedtls_md_get_size>
 801c048:	4603      	mov	r3, r0
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801c04a:	4619      	mov	r1, r3
                           child->sig.p, child->sig.len ) != 0 )
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 801c052:	68fa      	ldr	r2, [r7, #12]
 801c054:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 801c058:	9203      	str	r2, [sp, #12]
 801c05a:	9302      	str	r3, [sp, #8]
 801c05c:	9101      	str	r1, [sp, #4]
 801c05e:	f107 0310 	add.w	r3, r7, #16
 801c062:	9300      	str	r3, [sp, #0]
 801c064:	4643      	mov	r3, r8
 801c066:	4632      	mov	r2, r6
 801c068:	4629      	mov	r1, r5
 801c06a:	4620      	mov	r0, r4
 801c06c:	f7f2 fe10 	bl	800ec90 <mbedtls_pk_verify_ext>
 801c070:	4603      	mov	r3, r0
 801c072:	2b00      	cmp	r3, #0
 801c074:	d005      	beq.n	801c082 <x509_crt_verify_child+0x16a>
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 801c076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	f043 0208 	orr.w	r2, r3, #8
 801c07e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c080:	601a      	str	r2, [r3, #0]
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c086:	e011      	b.n	801c0ac <x509_crt_verify_child+0x194>
         grandparent != NULL;
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 801c088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	bf0c      	ite	eq
 801c08e:	2301      	moveq	r3, #1
 801c090:	2300      	movne	r3, #0
 801c092:	b2db      	uxtb	r3, r3
 801c094:	2200      	movs	r2, #0
 801c096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c098:	68b8      	ldr	r0, [r7, #8]
 801c09a:	f7ff fd94 	bl	801bbc6 <x509_crt_check_parent>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d007      	beq.n	801c0b4 <x509_crt_verify_child+0x19c>
         grandparent = grandparent->next )
 801c0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0a6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    for( grandparent = trust_ca;
 801c0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d1ea      	bne.n	801c088 <x509_crt_verify_child+0x170>
 801c0b2:	e000      	b.n	801c0b6 <x509_crt_verify_child+0x19e>
                                   0, path_cnt == 0 ) == 0 )
            break;
 801c0b4:	bf00      	nop
    }

    if( grandparent != NULL )
 801c0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d017      	beq.n	801c0ec <x509_crt_verify_child+0x1d4>
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 801c0bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c0be:	3301      	adds	r3, #1
 801c0c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c0c2:	9204      	str	r2, [sp, #16]
 801c0c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c0c6:	9203      	str	r2, [sp, #12]
 801c0c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c0cc:	9202      	str	r2, [sp, #8]
 801c0ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c0d0:	9201      	str	r2, [sp, #4]
 801c0d2:	9300      	str	r3, [sp, #0]
 801c0d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c0d6:	683a      	ldr	r2, [r7, #0]
 801c0d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c0da:	68b8      	ldr	r0, [r7, #8]
 801c0dc:	f7ff fdbe 	bl	801bc5c <x509_crt_verify_top>
 801c0e0:	6378      	str	r0, [r7, #52]	; 0x34
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
        if( ret != 0 )
 801c0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d065      	beq.n	801c1b4 <x509_crt_verify_child+0x29c>
            return( ret );
 801c0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0ea:	e079      	b.n	801c1e0 <x509_crt_verify_child+0x2c8>
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 801c0ec:	68bb      	ldr	r3, [r7, #8]
 801c0ee:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c0f4:	e021      	b.n	801c13a <x509_crt_verify_child+0x222>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 801c0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	dd08      	ble.n	801c112 <x509_crt_verify_child+0x1fa>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 801c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c102:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 801c106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c108:	1c99      	adds	r1, r3, #2
 801c10a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c10c:	1acb      	subs	r3, r1, r3
            if( grandparent->max_pathlen > 0 &&
 801c10e:	429a      	cmp	r2, r3
 801c110:	db0e      	blt.n	801c130 <x509_crt_verify_child+0x218>
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 801c112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c114:	2b00      	cmp	r3, #0
 801c116:	bf0c      	ite	eq
 801c118:	2301      	moveq	r3, #1
 801c11a:	2300      	movne	r3, #0
 801c11c:	b2db      	uxtb	r3, r3
 801c11e:	2200      	movs	r2, #0
 801c120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c122:	68b8      	ldr	r0, [r7, #8]
 801c124:	f7ff fd4f 	bl	801bbc6 <x509_crt_check_parent>
 801c128:	4603      	mov	r3, r0
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d009      	beq.n	801c142 <x509_crt_verify_child+0x22a>
 801c12e:	e000      	b.n	801c132 <x509_crt_verify_child+0x21a>
                continue;
 801c130:	bf00      	nop
             grandparent = grandparent->next )
 801c132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c134:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c138:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( grandparent = parent->next;
 801c13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d1da      	bne.n	801c0f6 <x509_crt_verify_child+0x1de>
 801c140:	e000      	b.n	801c144 <x509_crt_verify_child+0x22c>
                                       0, path_cnt == 0 ) == 0 )
                break;
 801c142:	bf00      	nop
        }

        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
 801c144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c146:	2b00      	cmp	r3, #0
 801c148:	d019      	beq.n	801c17e <x509_crt_verify_child+0x266>
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
 801c14a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c14c:	3301      	adds	r3, #1
 801c14e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c150:	9205      	str	r2, [sp, #20]
 801c152:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c154:	9204      	str	r2, [sp, #16]
 801c156:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c15a:	9203      	str	r2, [sp, #12]
 801c15c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c15e:	9202      	str	r2, [sp, #8]
 801c160:	9301      	str	r3, [sp, #4]
 801c162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c164:	9300      	str	r3, [sp, #0]
 801c166:	683b      	ldr	r3, [r7, #0]
 801c168:	687a      	ldr	r2, [r7, #4]
 801c16a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c16c:	68b8      	ldr	r0, [r7, #8]
 801c16e:	f7ff fed3 	bl	801bf18 <x509_crt_verify_child>
 801c172:	6378      	str	r0, [r7, #52]	; 0x34
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
            if( ret != 0 )
 801c174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c176:	2b00      	cmp	r3, #0
 801c178:	d01c      	beq.n	801c1b4 <x509_crt_verify_child+0x29c>
                return( ret );
 801c17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c17c:	e030      	b.n	801c1e0 <x509_crt_verify_child+0x2c8>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 801c17e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c180:	3301      	adds	r3, #1
 801c182:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c184:	9204      	str	r2, [sp, #16]
 801c186:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c188:	9203      	str	r2, [sp, #12]
 801c18a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c18e:	9202      	str	r2, [sp, #8]
 801c190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c192:	9201      	str	r2, [sp, #4]
 801c194:	9300      	str	r3, [sp, #0]
 801c196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c198:	683a      	ldr	r2, [r7, #0]
 801c19a:	6879      	ldr	r1, [r7, #4]
 801c19c:	68b8      	ldr	r0, [r7, #8]
 801c19e:	f7ff fd5d 	bl	801bc5c <x509_crt_verify_top>
 801c1a2:	6378      	str	r0, [r7, #52]	; 0x34
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
            if( ret != 0 )
 801c1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d004      	beq.n	801c1b4 <x509_crt_verify_child+0x29c>
                return( ret );
 801c1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1ac:	e018      	b.n	801c1e0 <x509_crt_verify_child+0x2c8>
 801c1ae:	bf00      	nop
 801c1b0:	ffffd000 	.word	0xffffd000
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 801c1b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d00b      	beq.n	801c1d2 <x509_crt_verify_child+0x2ba>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 801c1ba:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801c1bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c1be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c1c0:	68f9      	ldr	r1, [r7, #12]
 801c1c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c1c4:	47a0      	blx	r4
 801c1c6:	6378      	str	r0, [r7, #52]	; 0x34
 801c1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d001      	beq.n	801c1d2 <x509_crt_verify_child+0x2ba>
            return( ret );
 801c1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1d0:	e006      	b.n	801c1e0 <x509_crt_verify_child+0x2c8>

    *flags |= parent_flags;
 801c1d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c1d4:	681a      	ldr	r2, [r3, #0]
 801c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1d8:	431a      	orrs	r2, r3
 801c1da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c1dc:	601a      	str	r2, [r3, #0]

    return( 0 );
 801c1de:	2300      	movs	r3, #0
}
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	3740      	adds	r7, #64	; 0x40
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1ea:	bf00      	nop

0801c1ec <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b092      	sub	sp, #72	; 0x48
 801c1f0:	af06      	add	r7, sp, #24
 801c1f2:	60f8      	str	r0, [r7, #12]
 801c1f4:	60b9      	str	r1, [r7, #8]
 801c1f6:	607a      	str	r2, [r7, #4]
 801c1f8:	603b      	str	r3, [r7, #0]
    size_t cn_len;
    int ret;
    int pathlen = 0, selfsigned = 0;
 801c1fa:	2300      	movs	r3, #0
 801c1fc:	61fb      	str	r3, [r7, #28]
 801c1fe:	2300      	movs	r3, #0
 801c200:	61bb      	str	r3, [r7, #24]
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
 801c202:	2300      	movs	r3, #0
 801c204:	623b      	str	r3, [r7, #32]
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 801c206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c208:	2200      	movs	r2, #0
 801c20a:	601a      	str	r2, [r3, #0]

    if( profile == NULL )
 801c20c:	683b      	ldr	r3, [r7, #0]
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d102      	bne.n	801c218 <mbedtls_x509_crt_verify_with_profile+0x2c>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 801c212:	4b95      	ldr	r3, [pc, #596]	; (801c468 <mbedtls_x509_crt_verify_with_profile+0x27c>)
 801c214:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
 801c216:	e141      	b.n	801c49c <mbedtls_x509_crt_verify_with_profile+0x2b0>
    }

    if( cn != NULL )
 801c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	f000 8098 	beq.w	801c350 <mbedtls_x509_crt_verify_with_profile+0x164>
    {
        name = &crt->subject;
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	336c      	adds	r3, #108	; 0x6c
 801c224:	627b      	str	r3, [r7, #36]	; 0x24
        cn_len = strlen( cn );
 801c226:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c228:	f7e3 ffd2 	bl	80001d0 <strlen>
 801c22c:	6178      	str	r0, [r7, #20]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801c234:	f003 0320 	and.w	r3, r3, #32
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d079      	beq.n	801c330 <mbedtls_x509_crt_verify_with_profile+0x144>
        {
            cur = &crt->subject_alt_names;
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	33e8      	adds	r3, #232	; 0xe8
 801c240:	623b      	str	r3, [r7, #32]

            while( cur != NULL )
 801c242:	e027      	b.n	801c294 <mbedtls_x509_crt_verify_with_profile+0xa8>
            {
                if( cur->buf.len == cn_len &&
 801c244:	6a3b      	ldr	r3, [r7, #32]
 801c246:	685b      	ldr	r3, [r3, #4]
 801c248:	697a      	ldr	r2, [r7, #20]
 801c24a:	429a      	cmp	r2, r3
 801c24c:	d109      	bne.n	801c262 <mbedtls_x509_crt_verify_with_profile+0x76>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 801c24e:	6a3b      	ldr	r3, [r7, #32]
 801c250:	689b      	ldr	r3, [r3, #8]
 801c252:	697a      	ldr	r2, [r7, #20]
 801c254:	4619      	mov	r1, r3
 801c256:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c258:	f7ff fb7c 	bl	801b954 <x509_memcasecmp>
 801c25c:	4603      	mov	r3, r0
                if( cur->buf.len == cn_len &&
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d01c      	beq.n	801c29c <mbedtls_x509_crt_verify_with_profile+0xb0>
                    break;

                if( cur->buf.len > 2 &&
 801c262:	6a3b      	ldr	r3, [r7, #32]
 801c264:	685b      	ldr	r3, [r3, #4]
 801c266:	2b02      	cmp	r3, #2
 801c268:	d911      	bls.n	801c28e <mbedtls_x509_crt_verify_with_profile+0xa2>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 801c26a:	6a3b      	ldr	r3, [r7, #32]
 801c26c:	689b      	ldr	r3, [r3, #8]
 801c26e:	2202      	movs	r2, #2
 801c270:	497e      	ldr	r1, [pc, #504]	; (801c46c <mbedtls_x509_crt_verify_with_profile+0x280>)
 801c272:	4618      	mov	r0, r3
 801c274:	f001 fac0 	bl	801d7f8 <memcmp>
 801c278:	4603      	mov	r3, r0
                if( cur->buf.len > 2 &&
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d107      	bne.n	801c28e <mbedtls_x509_crt_verify_with_profile+0xa2>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 801c27e:	6a3b      	ldr	r3, [r7, #32]
 801c280:	4619      	mov	r1, r3
 801c282:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c284:	f7ff fbaf 	bl	801b9e6 <x509_check_wildcard>
 801c288:	4603      	mov	r3, r0
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d008      	beq.n	801c2a0 <mbedtls_x509_crt_verify_with_profile+0xb4>
                {
                    break;
                }

                cur = cur->next;
 801c28e:	6a3b      	ldr	r3, [r7, #32]
 801c290:	68db      	ldr	r3, [r3, #12]
 801c292:	623b      	str	r3, [r7, #32]
            while( cur != NULL )
 801c294:	6a3b      	ldr	r3, [r7, #32]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d1d4      	bne.n	801c244 <mbedtls_x509_crt_verify_with_profile+0x58>
 801c29a:	e002      	b.n	801c2a2 <mbedtls_x509_crt_verify_with_profile+0xb6>
                    break;
 801c29c:	bf00      	nop
 801c29e:	e000      	b.n	801c2a2 <mbedtls_x509_crt_verify_with_profile+0xb6>
                    break;
 801c2a0:	bf00      	nop
            }

            if( cur == NULL )
 801c2a2:	6a3b      	ldr	r3, [r7, #32]
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d153      	bne.n	801c350 <mbedtls_x509_crt_verify_with_profile+0x164>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 801c2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	f043 0204 	orr.w	r2, r3, #4
 801c2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c2b2:	601a      	str	r2, [r3, #0]
 801c2b4:	e04c      	b.n	801c350 <mbedtls_x509_crt_verify_with_profile+0x164>
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 801c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2b8:	685b      	ldr	r3, [r3, #4]
 801c2ba:	2b03      	cmp	r3, #3
 801c2bc:	d10a      	bne.n	801c2d4 <mbedtls_x509_crt_verify_with_profile+0xe8>
 801c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2c0:	6899      	ldr	r1, [r3, #8]
 801c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2c4:	685b      	ldr	r3, [r3, #4]
 801c2c6:	461a      	mov	r2, r3
 801c2c8:	4869      	ldr	r0, [pc, #420]	; (801c470 <mbedtls_x509_crt_verify_with_profile+0x284>)
 801c2ca:	f001 fa95 	bl	801d7f8 <memcmp>
 801c2ce:	4603      	mov	r3, r0
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d001      	beq.n	801c2d8 <mbedtls_x509_crt_verify_with_profile+0xec>
 801c2d4:	2301      	movs	r3, #1
 801c2d6:	e000      	b.n	801c2da <mbedtls_x509_crt_verify_with_profile+0xee>
 801c2d8:	2300      	movs	r3, #0
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	d125      	bne.n	801c32a <mbedtls_x509_crt_verify_with_profile+0x13e>
                {
                    if( name->val.len == cn_len &&
 801c2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2e0:	691b      	ldr	r3, [r3, #16]
 801c2e2:	697a      	ldr	r2, [r7, #20]
 801c2e4:	429a      	cmp	r2, r3
 801c2e6:	d109      	bne.n	801c2fc <mbedtls_x509_crt_verify_with_profile+0x110>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 801c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ea:	695b      	ldr	r3, [r3, #20]
 801c2ec:	697a      	ldr	r2, [r7, #20]
 801c2ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c2f0:	4618      	mov	r0, r3
 801c2f2:	f7ff fb2f 	bl	801b954 <x509_memcasecmp>
 801c2f6:	4603      	mov	r3, r0
                    if( name->val.len == cn_len &&
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d01d      	beq.n	801c338 <mbedtls_x509_crt_verify_with_profile+0x14c>
                        break;

                    if( name->val.len > 2 &&
 801c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2fe:	691b      	ldr	r3, [r3, #16]
 801c300:	2b02      	cmp	r3, #2
 801c302:	d912      	bls.n	801c32a <mbedtls_x509_crt_verify_with_profile+0x13e>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 801c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c306:	695b      	ldr	r3, [r3, #20]
 801c308:	2202      	movs	r2, #2
 801c30a:	4958      	ldr	r1, [pc, #352]	; (801c46c <mbedtls_x509_crt_verify_with_profile+0x280>)
 801c30c:	4618      	mov	r0, r3
 801c30e:	f001 fa73 	bl	801d7f8 <memcmp>
 801c312:	4603      	mov	r3, r0
                    if( name->val.len > 2 &&
 801c314:	2b00      	cmp	r3, #0
 801c316:	d108      	bne.n	801c32a <mbedtls_x509_crt_verify_with_profile+0x13e>
                        x509_check_wildcard( cn, &name->val ) == 0 )
 801c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c31a:	330c      	adds	r3, #12
 801c31c:	4619      	mov	r1, r3
 801c31e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c320:	f7ff fb61 	bl	801b9e6 <x509_check_wildcard>
 801c324:	4603      	mov	r3, r0
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 801c326:	2b00      	cmp	r3, #0
 801c328:	d008      	beq.n	801c33c <mbedtls_x509_crt_verify_with_profile+0x150>
                        break;
                }

                name = name->next;
 801c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c32c:	699b      	ldr	r3, [r3, #24]
 801c32e:	627b      	str	r3, [r7, #36]	; 0x24
            while( name != NULL )
 801c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c332:	2b00      	cmp	r3, #0
 801c334:	d1bf      	bne.n	801c2b6 <mbedtls_x509_crt_verify_with_profile+0xca>
 801c336:	e002      	b.n	801c33e <mbedtls_x509_crt_verify_with_profile+0x152>
                        break;
 801c338:	bf00      	nop
 801c33a:	e000      	b.n	801c33e <mbedtls_x509_crt_verify_with_profile+0x152>
                        break;
 801c33c:	bf00      	nop
            }

            if( name == NULL )
 801c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c340:	2b00      	cmp	r3, #0
 801c342:	d105      	bne.n	801c350 <mbedtls_x509_crt_verify_with_profile+0x164>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 801c344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	f043 0204 	orr.w	r2, r3, #4
 801c34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c34e:	601a      	str	r2, [r3, #0]
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	33bc      	adds	r3, #188	; 0xbc
 801c354:	4618      	mov	r0, r3
 801c356:	f7f2 fd9d 	bl	800ee94 <mbedtls_pk_get_type>
 801c35a:	4603      	mov	r3, r0
 801c35c:	74fb      	strb	r3, [r7, #19]

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
 801c35e:	7cfb      	ldrb	r3, [r7, #19]
 801c360:	4619      	mov	r1, r3
 801c362:	6838      	ldr	r0, [r7, #0]
 801c364:	f7fd fda9 	bl	8019eba <x509_profile_check_pk_alg>
 801c368:	4603      	mov	r3, r0
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d005      	beq.n	801c37a <mbedtls_x509_crt_verify_with_profile+0x18e>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 801c36e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801c376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c378:	601a      	str	r2, [r3, #0]

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 801c380:	7cfb      	ldrb	r3, [r7, #19]
 801c382:	4619      	mov	r1, r3
 801c384:	6838      	ldr	r0, [r7, #0]
 801c386:	f7fd fdb2 	bl	8019eee <x509_profile_check_key>
 801c38a:	4603      	mov	r3, r0
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d005      	beq.n	801c39c <mbedtls_x509_crt_verify_with_profile+0x1b0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801c390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801c398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c39a:	601a      	str	r2, [r3, #0]

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 801c39c:	68bb      	ldr	r3, [r7, #8]
 801c39e:	62bb      	str	r3, [r7, #40]	; 0x28
 801c3a0:	e011      	b.n	801c3c6 <mbedtls_x509_crt_verify_with_profile+0x1da>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 801c3a2:	69fb      	ldr	r3, [r7, #28]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	bf0c      	ite	eq
 801c3a8:	2301      	moveq	r3, #1
 801c3aa:	2300      	movne	r3, #0
 801c3ac:	b2db      	uxtb	r3, r3
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c3b2:	68f8      	ldr	r0, [r7, #12]
 801c3b4:	f7ff fc07 	bl	801bbc6 <x509_crt_check_parent>
 801c3b8:	4603      	mov	r3, r0
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d007      	beq.n	801c3ce <mbedtls_x509_crt_verify_with_profile+0x1e2>
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 801c3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3c0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c3c4:	62bb      	str	r3, [r7, #40]	; 0x28
 801c3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d1ea      	bne.n	801c3a2 <mbedtls_x509_crt_verify_with_profile+0x1b6>
 801c3cc:	e000      	b.n	801c3d0 <mbedtls_x509_crt_verify_with_profile+0x1e4>
            break;
 801c3ce:	bf00      	nop
    }

    if( parent != NULL )
 801c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d013      	beq.n	801c3fe <mbedtls_x509_crt_verify_with_profile+0x212>
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 801c3d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c3d8:	9304      	str	r3, [sp, #16]
 801c3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3dc:	9303      	str	r3, [sp, #12]
 801c3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3e0:	9302      	str	r3, [sp, #8]
 801c3e2:	69bb      	ldr	r3, [r7, #24]
 801c3e4:	9301      	str	r3, [sp, #4]
 801c3e6:	69fb      	ldr	r3, [r7, #28]
 801c3e8:	9300      	str	r3, [sp, #0]
 801c3ea:	683b      	ldr	r3, [r7, #0]
 801c3ec:	687a      	ldr	r2, [r7, #4]
 801c3ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c3f0:	68f8      	ldr	r0, [r7, #12]
 801c3f2:	f7ff fc33 	bl	801bc5c <x509_crt_verify_top>
 801c3f6:	62f8      	str	r0, [r7, #44]	; 0x2c
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
        if( ret != 0 )
 801c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	e04e      	b.n	801c49c <mbedtls_x509_crt_verify_with_profile+0x2b0>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c404:	62bb      	str	r3, [r7, #40]	; 0x28
 801c406:	e011      	b.n	801c42c <mbedtls_x509_crt_verify_with_profile+0x240>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 801c408:	69fb      	ldr	r3, [r7, #28]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	bf0c      	ite	eq
 801c40e:	2301      	moveq	r3, #1
 801c410:	2300      	movne	r3, #0
 801c412:	b2db      	uxtb	r3, r3
 801c414:	2200      	movs	r2, #0
 801c416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c418:	68f8      	ldr	r0, [r7, #12]
 801c41a:	f7ff fbd4 	bl	801bbc6 <x509_crt_check_parent>
 801c41e:	4603      	mov	r3, r0
 801c420:	2b00      	cmp	r3, #0
 801c422:	d007      	beq.n	801c434 <mbedtls_x509_crt_verify_with_profile+0x248>
        for( parent = crt->next; parent != NULL; parent = parent->next )
 801c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c426:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c42a:	62bb      	str	r3, [r7, #40]	; 0x28
 801c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d1ea      	bne.n	801c408 <mbedtls_x509_crt_verify_with_profile+0x21c>
 801c432:	e000      	b.n	801c436 <mbedtls_x509_crt_verify_with_profile+0x24a>
                break;
 801c434:	bf00      	nop

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
 801c436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d01b      	beq.n	801c474 <mbedtls_x509_crt_verify_with_profile+0x288>
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
 801c43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c43e:	9305      	str	r3, [sp, #20]
 801c440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c442:	9304      	str	r3, [sp, #16]
 801c444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c446:	9303      	str	r3, [sp, #12]
 801c448:	69bb      	ldr	r3, [r7, #24]
 801c44a:	9302      	str	r3, [sp, #8]
 801c44c:	69fb      	ldr	r3, [r7, #28]
 801c44e:	9301      	str	r3, [sp, #4]
 801c450:	683b      	ldr	r3, [r7, #0]
 801c452:	9300      	str	r3, [sp, #0]
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	68ba      	ldr	r2, [r7, #8]
 801c458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c45a:	68f8      	ldr	r0, [r7, #12]
 801c45c:	f7ff fd5c 	bl	801bf18 <x509_crt_verify_child>
 801c460:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
            if( ret != 0 )
 801c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c464:	2b00      	cmp	r3, #0
 801c466:	e019      	b.n	801c49c <mbedtls_x509_crt_verify_with_profile+0x2b0>
 801c468:	ffffd800 	.word	0xffffd800
 801c46c:	08023be4 	.word	0x08023be4
 801c470:	08023be8 	.word	0x08023be8
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 801c474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c476:	9304      	str	r3, [sp, #16]
 801c478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c47a:	9303      	str	r3, [sp, #12]
 801c47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c47e:	9302      	str	r3, [sp, #8]
 801c480:	69bb      	ldr	r3, [r7, #24]
 801c482:	9301      	str	r3, [sp, #4]
 801c484:	69fb      	ldr	r3, [r7, #28]
 801c486:	9300      	str	r3, [sp, #0]
 801c488:	683b      	ldr	r3, [r7, #0]
 801c48a:	687a      	ldr	r2, [r7, #4]
 801c48c:	68b9      	ldr	r1, [r7, #8]
 801c48e:	68f8      	ldr	r0, [r7, #12]
 801c490:	f7ff fbe4 	bl	801bc5c <x509_crt_verify_top>
 801c494:	62f8      	str	r0, [r7, #44]	; 0x2c
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
            if( ret != 0 )
 801c496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c498:	2b00      	cmp	r3, #0
                goto exit;
        }
    }

exit:
 801c49a:	bf00      	nop
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 801c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c49e:	f513 5f1c 	cmn.w	r3, #9984	; 0x2700
 801c4a2:	d101      	bne.n	801c4a8 <mbedtls_x509_crt_verify_with_profile+0x2bc>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 801c4a4:	4b0a      	ldr	r3, [pc, #40]	; (801c4d0 <mbedtls_x509_crt_verify_with_profile+0x2e4>)
 801c4a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ret != 0 )
 801c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d005      	beq.n	801c4ba <mbedtls_x509_crt_verify_with_profile+0x2ce>
    {
        *flags = (uint32_t) -1;
 801c4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4b0:	f04f 32ff 	mov.w	r2, #4294967295
 801c4b4:	601a      	str	r2, [r3, #0]
        return( ret );
 801c4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4b8:	e006      	b.n	801c4c8 <mbedtls_x509_crt_verify_with_profile+0x2dc>
    }

    if( *flags != 0 )
 801c4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4bc:	681b      	ldr	r3, [r3, #0]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d001      	beq.n	801c4c6 <mbedtls_x509_crt_verify_with_profile+0x2da>
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 801c4c2:	4b04      	ldr	r3, [pc, #16]	; (801c4d4 <mbedtls_x509_crt_verify_with_profile+0x2e8>)
 801c4c4:	e000      	b.n	801c4c8 <mbedtls_x509_crt_verify_with_profile+0x2dc>

    return( 0 );
 801c4c6:	2300      	movs	r3, #0
}
 801c4c8:	4618      	mov	r0, r3
 801c4ca:	3730      	adds	r7, #48	; 0x30
 801c4cc:	46bd      	mov	sp, r7
 801c4ce:	bd80      	pop	{r7, pc}
 801c4d0:	ffffd000 	.word	0xffffd000
 801c4d4:	ffffd900 	.word	0xffffd900

0801c4d8 <mbedtls_x509_crt_init>:

/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
 801c4d8:	b580      	push	{r7, lr}
 801c4da:	b082      	sub	sp, #8
 801c4dc:	af00      	add	r7, sp, #0
 801c4de:	6078      	str	r0, [r7, #4]
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 801c4e0:	f44f 729a 	mov.w	r2, #308	; 0x134
 801c4e4:	2100      	movs	r1, #0
 801c4e6:	6878      	ldr	r0, [r7, #4]
 801c4e8:	f001 f9be 	bl	801d868 <memset>
}
 801c4ec:	bf00      	nop
 801c4ee:	3708      	adds	r7, #8
 801c4f0:	46bd      	mov	sp, r7
 801c4f2:	bd80      	pop	{r7, pc}

0801c4f4 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b088      	sub	sp, #32
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	6078      	str	r0, [r7, #4]
    mbedtls_x509_crt *cert_cur = crt;
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	61fb      	str	r3, [r7, #28]
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	2b00      	cmp	r3, #0
 801c504:	f000 8084 	beq.w	801c610 <mbedtls_x509_crt_free+0x11c>
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 801c508:	69fb      	ldr	r3, [r7, #28]
 801c50a:	33bc      	adds	r3, #188	; 0xbc
 801c50c:	4618      	mov	r0, r3
 801c50e:	f7f2 faf0 	bl	800eaf2 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 801c512:	69fb      	ldr	r3, [r7, #28]
 801c514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c516:	61bb      	str	r3, [r7, #24]
        while( name_cur != NULL )
 801c518:	e00b      	b.n	801c532 <mbedtls_x509_crt_free+0x3e>
        {
            name_prv = name_cur;
 801c51a:	69bb      	ldr	r3, [r7, #24]
 801c51c:	60bb      	str	r3, [r7, #8]
            name_cur = name_cur->next;
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	699b      	ldr	r3, [r3, #24]
 801c522:	61bb      	str	r3, [r7, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 801c524:	2120      	movs	r1, #32
 801c526:	68b8      	ldr	r0, [r7, #8]
 801c528:	f7fd fc94 	bl	8019e54 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 801c52c:	68b8      	ldr	r0, [r7, #8]
 801c52e:	f001 f95b 	bl	801d7e8 <free>
        while( name_cur != NULL )
 801c532:	69bb      	ldr	r3, [r7, #24]
 801c534:	2b00      	cmp	r3, #0
 801c536:	d1f0      	bne.n	801c51a <mbedtls_x509_crt_free+0x26>
        }

        name_cur = cert_cur->subject.next;
 801c538:	69fb      	ldr	r3, [r7, #28]
 801c53a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c53e:	61bb      	str	r3, [r7, #24]
        while( name_cur != NULL )
 801c540:	e00b      	b.n	801c55a <mbedtls_x509_crt_free+0x66>
        {
            name_prv = name_cur;
 801c542:	69bb      	ldr	r3, [r7, #24]
 801c544:	60bb      	str	r3, [r7, #8]
            name_cur = name_cur->next;
 801c546:	69bb      	ldr	r3, [r7, #24]
 801c548:	699b      	ldr	r3, [r3, #24]
 801c54a:	61bb      	str	r3, [r7, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 801c54c:	2120      	movs	r1, #32
 801c54e:	68b8      	ldr	r0, [r7, #8]
 801c550:	f7fd fc80 	bl	8019e54 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 801c554:	68b8      	ldr	r0, [r7, #8]
 801c556:	f001 f947 	bl	801d7e8 <free>
        while( name_cur != NULL )
 801c55a:	69bb      	ldr	r3, [r7, #24]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d1f0      	bne.n	801c542 <mbedtls_x509_crt_free+0x4e>
        }

        seq_cur = cert_cur->ext_key_usage.next;
 801c560:	69fb      	ldr	r3, [r7, #28]
 801c562:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801c566:	617b      	str	r3, [r7, #20]
        while( seq_cur != NULL )
 801c568:	e00b      	b.n	801c582 <mbedtls_x509_crt_free+0x8e>
        {
            seq_prv = seq_cur;
 801c56a:	697b      	ldr	r3, [r7, #20]
 801c56c:	60fb      	str	r3, [r7, #12]
            seq_cur = seq_cur->next;
 801c56e:	697b      	ldr	r3, [r7, #20]
 801c570:	68db      	ldr	r3, [r3, #12]
 801c572:	617b      	str	r3, [r7, #20]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 801c574:	2110      	movs	r1, #16
 801c576:	68f8      	ldr	r0, [r7, #12]
 801c578:	f7fd fc6c 	bl	8019e54 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 801c57c:	68f8      	ldr	r0, [r7, #12]
 801c57e:	f001 f933 	bl	801d7e8 <free>
        while( seq_cur != NULL )
 801c582:	697b      	ldr	r3, [r7, #20]
 801c584:	2b00      	cmp	r3, #0
 801c586:	d1f0      	bne.n	801c56a <mbedtls_x509_crt_free+0x76>
        }

        seq_cur = cert_cur->subject_alt_names.next;
 801c588:	69fb      	ldr	r3, [r7, #28]
 801c58a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801c58e:	617b      	str	r3, [r7, #20]
        while( seq_cur != NULL )
 801c590:	e00b      	b.n	801c5aa <mbedtls_x509_crt_free+0xb6>
        {
            seq_prv = seq_cur;
 801c592:	697b      	ldr	r3, [r7, #20]
 801c594:	60fb      	str	r3, [r7, #12]
            seq_cur = seq_cur->next;
 801c596:	697b      	ldr	r3, [r7, #20]
 801c598:	68db      	ldr	r3, [r3, #12]
 801c59a:	617b      	str	r3, [r7, #20]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 801c59c:	2110      	movs	r1, #16
 801c59e:	68f8      	ldr	r0, [r7, #12]
 801c5a0:	f7fd fc58 	bl	8019e54 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 801c5a4:	68f8      	ldr	r0, [r7, #12]
 801c5a6:	f001 f91f 	bl	801d7e8 <free>
        while( seq_cur != NULL )
 801c5aa:	697b      	ldr	r3, [r7, #20]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d1f0      	bne.n	801c592 <mbedtls_x509_crt_free+0x9e>
        }

        if( cert_cur->raw.p != NULL )
 801c5b0:	69fb      	ldr	r3, [r7, #28]
 801c5b2:	689b      	ldr	r3, [r3, #8]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d00c      	beq.n	801c5d2 <mbedtls_x509_crt_free+0xde>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 801c5b8:	69fb      	ldr	r3, [r7, #28]
 801c5ba:	689a      	ldr	r2, [r3, #8]
 801c5bc:	69fb      	ldr	r3, [r7, #28]
 801c5be:	685b      	ldr	r3, [r3, #4]
 801c5c0:	4619      	mov	r1, r3
 801c5c2:	4610      	mov	r0, r2
 801c5c4:	f7fd fc46 	bl	8019e54 <mbedtls_zeroize>
            mbedtls_free( cert_cur->raw.p );
 801c5c8:	69fb      	ldr	r3, [r7, #28]
 801c5ca:	689b      	ldr	r3, [r3, #8]
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	f001 f90b 	bl	801d7e8 <free>
        }

        cert_cur = cert_cur->next;
 801c5d2:	69fb      	ldr	r3, [r7, #28]
 801c5d4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c5d8:	61fb      	str	r3, [r7, #28]
    }
    while( cert_cur != NULL );
 801c5da:	69fb      	ldr	r3, [r7, #28]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d193      	bne.n	801c508 <mbedtls_x509_crt_free+0x14>

    cert_cur = crt;
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	61fb      	str	r3, [r7, #28]
    do
    {
        cert_prv = cert_cur;
 801c5e4:	69fb      	ldr	r3, [r7, #28]
 801c5e6:	613b      	str	r3, [r7, #16]
        cert_cur = cert_cur->next;
 801c5e8:	69fb      	ldr	r3, [r7, #28]
 801c5ea:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801c5ee:	61fb      	str	r3, [r7, #28]

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 801c5f0:	f44f 719a 	mov.w	r1, #308	; 0x134
 801c5f4:	6938      	ldr	r0, [r7, #16]
 801c5f6:	f7fd fc2d 	bl	8019e54 <mbedtls_zeroize>
        if( cert_prv != crt )
 801c5fa:	693a      	ldr	r2, [r7, #16]
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	429a      	cmp	r2, r3
 801c600:	d002      	beq.n	801c608 <mbedtls_x509_crt_free+0x114>
            mbedtls_free( cert_prv );
 801c602:	6938      	ldr	r0, [r7, #16]
 801c604:	f001 f8f0 	bl	801d7e8 <free>
    }
    while( cert_cur != NULL );
 801c608:	69fb      	ldr	r3, [r7, #28]
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d1ea      	bne.n	801c5e4 <mbedtls_x509_crt_free+0xf0>
 801c60e:	e000      	b.n	801c612 <mbedtls_x509_crt_free+0x11e>
        return;
 801c610:	bf00      	nop
}
 801c612:	3720      	adds	r7, #32
 801c614:	46bd      	mov	sp, r7
 801c616:	bd80      	pop	{r7, pc}

0801c618 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	b084      	sub	sp, #16
 801c61c:	af00      	add	r7, sp, #0
 801c61e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 801c620:	4b22      	ldr	r3, [pc, #136]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c622:	68db      	ldr	r3, [r3, #12]
 801c624:	4798      	blx	r3
   WIZCHIP.CS._select();
 801c626:	4b21      	ldr	r3, [pc, #132]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c628:	695b      	ldr	r3, [r3, #20]
 801c62a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801c62c:	4b1f      	ldr	r3, [pc, #124]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c630:	2b00      	cmp	r3, #0
 801c632:	d003      	beq.n	801c63c <WIZCHIP_READ+0x24>
 801c634:	4b1d      	ldr	r3, [pc, #116]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d114      	bne.n	801c666 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801c63c:	4b1b      	ldr	r3, [pc, #108]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c63e:	6a1b      	ldr	r3, [r3, #32]
 801c640:	687a      	ldr	r2, [r7, #4]
 801c642:	0c12      	lsrs	r2, r2, #16
 801c644:	b2d2      	uxtb	r2, r2
 801c646:	4610      	mov	r0, r2
 801c648:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801c64a:	4b18      	ldr	r3, [pc, #96]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c64c:	6a1b      	ldr	r3, [r3, #32]
 801c64e:	687a      	ldr	r2, [r7, #4]
 801c650:	0a12      	lsrs	r2, r2, #8
 801c652:	b2d2      	uxtb	r2, r2
 801c654:	4610      	mov	r0, r2
 801c656:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801c658:	4b14      	ldr	r3, [pc, #80]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c65a:	6a1b      	ldr	r3, [r3, #32]
 801c65c:	687a      	ldr	r2, [r7, #4]
 801c65e:	b2d2      	uxtb	r2, r2
 801c660:	4610      	mov	r0, r2
 801c662:	4798      	blx	r3
 801c664:	e011      	b.n	801c68a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	0c1b      	lsrs	r3, r3, #16
 801c66a:	b2db      	uxtb	r3, r3
 801c66c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	0a1b      	lsrs	r3, r3, #8
 801c672:	b2db      	uxtb	r3, r3
 801c674:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	b2db      	uxtb	r3, r3
 801c67a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801c67c:	4b0b      	ldr	r3, [pc, #44]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c680:	f107 020c 	add.w	r2, r7, #12
 801c684:	2103      	movs	r1, #3
 801c686:	4610      	mov	r0, r2
 801c688:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 801c68a:	4b08      	ldr	r3, [pc, #32]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c68c:	69db      	ldr	r3, [r3, #28]
 801c68e:	4798      	blx	r3
 801c690:	4603      	mov	r3, r0
 801c692:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 801c694:	4b05      	ldr	r3, [pc, #20]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c696:	699b      	ldr	r3, [r3, #24]
 801c698:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801c69a:	4b04      	ldr	r3, [pc, #16]	; (801c6ac <WIZCHIP_READ+0x94>)
 801c69c:	691b      	ldr	r3, [r3, #16]
 801c69e:	4798      	blx	r3
   return ret;
 801c6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6a2:	4618      	mov	r0, r3
 801c6a4:	3710      	adds	r7, #16
 801c6a6:	46bd      	mov	sp, r7
 801c6a8:	bd80      	pop	{r7, pc}
 801c6aa:	bf00      	nop
 801c6ac:	20000048 	.word	0x20000048

0801c6b0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b084      	sub	sp, #16
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	6078      	str	r0, [r7, #4]
 801c6b8:	460b      	mov	r3, r1
 801c6ba:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 801c6bc:	4b22      	ldr	r3, [pc, #136]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c6be:	68db      	ldr	r3, [r3, #12]
 801c6c0:	4798      	blx	r3
   WIZCHIP.CS._select();
 801c6c2:	4b21      	ldr	r3, [pc, #132]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c6c4:	695b      	ldr	r3, [r3, #20]
 801c6c6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	f043 0304 	orr.w	r3, r3, #4
 801c6ce:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801c6d0:	4b1d      	ldr	r3, [pc, #116]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d119      	bne.n	801c70c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801c6d8:	4b1b      	ldr	r3, [pc, #108]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c6da:	6a1b      	ldr	r3, [r3, #32]
 801c6dc:	687a      	ldr	r2, [r7, #4]
 801c6de:	0c12      	lsrs	r2, r2, #16
 801c6e0:	b2d2      	uxtb	r2, r2
 801c6e2:	4610      	mov	r0, r2
 801c6e4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801c6e6:	4b18      	ldr	r3, [pc, #96]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c6e8:	6a1b      	ldr	r3, [r3, #32]
 801c6ea:	687a      	ldr	r2, [r7, #4]
 801c6ec:	0a12      	lsrs	r2, r2, #8
 801c6ee:	b2d2      	uxtb	r2, r2
 801c6f0:	4610      	mov	r0, r2
 801c6f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801c6f4:	4b14      	ldr	r3, [pc, #80]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c6f6:	6a1b      	ldr	r3, [r3, #32]
 801c6f8:	687a      	ldr	r2, [r7, #4]
 801c6fa:	b2d2      	uxtb	r2, r2
 801c6fc:	4610      	mov	r0, r2
 801c6fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 801c700:	4b11      	ldr	r3, [pc, #68]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c702:	6a1b      	ldr	r3, [r3, #32]
 801c704:	78fa      	ldrb	r2, [r7, #3]
 801c706:	4610      	mov	r0, r2
 801c708:	4798      	blx	r3
 801c70a:	e013      	b.n	801c734 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	0c1b      	lsrs	r3, r3, #16
 801c710:	b2db      	uxtb	r3, r3
 801c712:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	0a1b      	lsrs	r3, r3, #8
 801c718:	b2db      	uxtb	r3, r3
 801c71a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	b2db      	uxtb	r3, r3
 801c720:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 801c722:	78fb      	ldrb	r3, [r7, #3]
 801c724:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 801c726:	4b08      	ldr	r3, [pc, #32]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c72a:	f107 020c 	add.w	r2, r7, #12
 801c72e:	2104      	movs	r1, #4
 801c730:	4610      	mov	r0, r2
 801c732:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801c734:	4b04      	ldr	r3, [pc, #16]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c736:	699b      	ldr	r3, [r3, #24]
 801c738:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801c73a:	4b03      	ldr	r3, [pc, #12]	; (801c748 <WIZCHIP_WRITE+0x98>)
 801c73c:	691b      	ldr	r3, [r3, #16]
 801c73e:	4798      	blx	r3
}
 801c740:	bf00      	nop
 801c742:	3710      	adds	r7, #16
 801c744:	46bd      	mov	sp, r7
 801c746:	bd80      	pop	{r7, pc}
 801c748:	20000048 	.word	0x20000048

0801c74c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801c74c:	b590      	push	{r4, r7, lr}
 801c74e:	b087      	sub	sp, #28
 801c750:	af00      	add	r7, sp, #0
 801c752:	60f8      	str	r0, [r7, #12]
 801c754:	60b9      	str	r1, [r7, #8]
 801c756:	4613      	mov	r3, r2
 801c758:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801c75a:	4b2b      	ldr	r3, [pc, #172]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c75c:	68db      	ldr	r3, [r3, #12]
 801c75e:	4798      	blx	r3
   WIZCHIP.CS._select();
 801c760:	4b29      	ldr	r3, [pc, #164]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c762:	695b      	ldr	r3, [r3, #20]
 801c764:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801c766:	4b28      	ldr	r3, [pc, #160]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d003      	beq.n	801c776 <WIZCHIP_READ_BUF+0x2a>
 801c76e:	4b26      	ldr	r3, [pc, #152]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c772:	2b00      	cmp	r3, #0
 801c774:	d126      	bne.n	801c7c4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801c776:	4b24      	ldr	r3, [pc, #144]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c778:	6a1b      	ldr	r3, [r3, #32]
 801c77a:	68fa      	ldr	r2, [r7, #12]
 801c77c:	0c12      	lsrs	r2, r2, #16
 801c77e:	b2d2      	uxtb	r2, r2
 801c780:	4610      	mov	r0, r2
 801c782:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801c784:	4b20      	ldr	r3, [pc, #128]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c786:	6a1b      	ldr	r3, [r3, #32]
 801c788:	68fa      	ldr	r2, [r7, #12]
 801c78a:	0a12      	lsrs	r2, r2, #8
 801c78c:	b2d2      	uxtb	r2, r2
 801c78e:	4610      	mov	r0, r2
 801c790:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801c792:	4b1d      	ldr	r3, [pc, #116]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c794:	6a1b      	ldr	r3, [r3, #32]
 801c796:	68fa      	ldr	r2, [r7, #12]
 801c798:	b2d2      	uxtb	r2, r2
 801c79a:	4610      	mov	r0, r2
 801c79c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801c79e:	2300      	movs	r3, #0
 801c7a0:	82fb      	strh	r3, [r7, #22]
 801c7a2:	e00a      	b.n	801c7ba <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 801c7a4:	4b18      	ldr	r3, [pc, #96]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c7a6:	69db      	ldr	r3, [r3, #28]
 801c7a8:	8afa      	ldrh	r2, [r7, #22]
 801c7aa:	68b9      	ldr	r1, [r7, #8]
 801c7ac:	188c      	adds	r4, r1, r2
 801c7ae:	4798      	blx	r3
 801c7b0:	4603      	mov	r3, r0
 801c7b2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 801c7b4:	8afb      	ldrh	r3, [r7, #22]
 801c7b6:	3301      	adds	r3, #1
 801c7b8:	82fb      	strh	r3, [r7, #22]
 801c7ba:	8afa      	ldrh	r2, [r7, #22]
 801c7bc:	88fb      	ldrh	r3, [r7, #6]
 801c7be:	429a      	cmp	r2, r3
 801c7c0:	d3f0      	bcc.n	801c7a4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801c7c2:	e017      	b.n	801c7f4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	0c1b      	lsrs	r3, r3, #16
 801c7c8:	b2db      	uxtb	r3, r3
 801c7ca:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	0a1b      	lsrs	r3, r3, #8
 801c7d0:	b2db      	uxtb	r3, r3
 801c7d2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	b2db      	uxtb	r3, r3
 801c7d8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801c7da:	4b0b      	ldr	r3, [pc, #44]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7de:	f107 0210 	add.w	r2, r7, #16
 801c7e2:	2103      	movs	r1, #3
 801c7e4:	4610      	mov	r0, r2
 801c7e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 801c7e8:	4b07      	ldr	r3, [pc, #28]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7ec:	88fa      	ldrh	r2, [r7, #6]
 801c7ee:	4611      	mov	r1, r2
 801c7f0:	68b8      	ldr	r0, [r7, #8]
 801c7f2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801c7f4:	4b04      	ldr	r3, [pc, #16]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c7f6:	699b      	ldr	r3, [r3, #24]
 801c7f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801c7fa:	4b03      	ldr	r3, [pc, #12]	; (801c808 <WIZCHIP_READ_BUF+0xbc>)
 801c7fc:	691b      	ldr	r3, [r3, #16]
 801c7fe:	4798      	blx	r3
}
 801c800:	bf00      	nop
 801c802:	371c      	adds	r7, #28
 801c804:	46bd      	mov	sp, r7
 801c806:	bd90      	pop	{r4, r7, pc}
 801c808:	20000048 	.word	0x20000048

0801c80c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801c80c:	b580      	push	{r7, lr}
 801c80e:	b086      	sub	sp, #24
 801c810:	af00      	add	r7, sp, #0
 801c812:	60f8      	str	r0, [r7, #12]
 801c814:	60b9      	str	r1, [r7, #8]
 801c816:	4613      	mov	r3, r2
 801c818:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801c81a:	4b2b      	ldr	r3, [pc, #172]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c81c:	68db      	ldr	r3, [r3, #12]
 801c81e:	4798      	blx	r3
   WIZCHIP.CS._select();
 801c820:	4b29      	ldr	r3, [pc, #164]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c822:	695b      	ldr	r3, [r3, #20]
 801c824:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	f043 0304 	orr.w	r3, r3, #4
 801c82c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801c82e:	4b26      	ldr	r3, [pc, #152]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c832:	2b00      	cmp	r3, #0
 801c834:	d126      	bne.n	801c884 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801c836:	4b24      	ldr	r3, [pc, #144]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c838:	6a1b      	ldr	r3, [r3, #32]
 801c83a:	68fa      	ldr	r2, [r7, #12]
 801c83c:	0c12      	lsrs	r2, r2, #16
 801c83e:	b2d2      	uxtb	r2, r2
 801c840:	4610      	mov	r0, r2
 801c842:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801c844:	4b20      	ldr	r3, [pc, #128]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c846:	6a1b      	ldr	r3, [r3, #32]
 801c848:	68fa      	ldr	r2, [r7, #12]
 801c84a:	0a12      	lsrs	r2, r2, #8
 801c84c:	b2d2      	uxtb	r2, r2
 801c84e:	4610      	mov	r0, r2
 801c850:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801c852:	4b1d      	ldr	r3, [pc, #116]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c854:	6a1b      	ldr	r3, [r3, #32]
 801c856:	68fa      	ldr	r2, [r7, #12]
 801c858:	b2d2      	uxtb	r2, r2
 801c85a:	4610      	mov	r0, r2
 801c85c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801c85e:	2300      	movs	r3, #0
 801c860:	82fb      	strh	r3, [r7, #22]
 801c862:	e00a      	b.n	801c87a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 801c864:	4b18      	ldr	r3, [pc, #96]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c866:	6a1b      	ldr	r3, [r3, #32]
 801c868:	8afa      	ldrh	r2, [r7, #22]
 801c86a:	68b9      	ldr	r1, [r7, #8]
 801c86c:	440a      	add	r2, r1
 801c86e:	7812      	ldrb	r2, [r2, #0]
 801c870:	4610      	mov	r0, r2
 801c872:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801c874:	8afb      	ldrh	r3, [r7, #22]
 801c876:	3301      	adds	r3, #1
 801c878:	82fb      	strh	r3, [r7, #22]
 801c87a:	8afa      	ldrh	r2, [r7, #22]
 801c87c:	88fb      	ldrh	r3, [r7, #6]
 801c87e:	429a      	cmp	r2, r3
 801c880:	d3f0      	bcc.n	801c864 <WIZCHIP_WRITE_BUF+0x58>
 801c882:	e017      	b.n	801c8b4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	0c1b      	lsrs	r3, r3, #16
 801c888:	b2db      	uxtb	r3, r3
 801c88a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	0a1b      	lsrs	r3, r3, #8
 801c890:	b2db      	uxtb	r3, r3
 801c892:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	b2db      	uxtb	r3, r3
 801c898:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801c89a:	4b0b      	ldr	r3, [pc, #44]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c89e:	f107 0210 	add.w	r2, r7, #16
 801c8a2:	2103      	movs	r1, #3
 801c8a4:	4610      	mov	r0, r2
 801c8a6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 801c8a8:	4b07      	ldr	r3, [pc, #28]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8ac:	88fa      	ldrh	r2, [r7, #6]
 801c8ae:	4611      	mov	r1, r2
 801c8b0:	68b8      	ldr	r0, [r7, #8]
 801c8b2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801c8b4:	4b04      	ldr	r3, [pc, #16]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c8b6:	699b      	ldr	r3, [r3, #24]
 801c8b8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801c8ba:	4b03      	ldr	r3, [pc, #12]	; (801c8c8 <WIZCHIP_WRITE_BUF+0xbc>)
 801c8bc:	691b      	ldr	r3, [r3, #16]
 801c8be:	4798      	blx	r3
}
 801c8c0:	bf00      	nop
 801c8c2:	3718      	adds	r7, #24
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	bd80      	pop	{r7, pc}
 801c8c8:	20000048 	.word	0x20000048

0801c8cc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 801c8cc:	b590      	push	{r4, r7, lr}
 801c8ce:	b085      	sub	sp, #20
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	4603      	mov	r3, r0
 801c8d4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 801c8d6:	2300      	movs	r3, #0
 801c8d8:	81fb      	strh	r3, [r7, #14]
 801c8da:	2300      	movs	r3, #0
 801c8dc:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 801c8de:	79fb      	ldrb	r3, [r7, #7]
 801c8e0:	009b      	lsls	r3, r3, #2
 801c8e2:	3301      	adds	r3, #1
 801c8e4:	00db      	lsls	r3, r3, #3
 801c8e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801c8ea:	4618      	mov	r0, r3
 801c8ec:	f7ff fe94 	bl	801c618 <WIZCHIP_READ>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801c8f4:	89bb      	ldrh	r3, [r7, #12]
 801c8f6:	021b      	lsls	r3, r3, #8
 801c8f8:	b29c      	uxth	r4, r3
 801c8fa:	79fb      	ldrb	r3, [r7, #7]
 801c8fc:	009b      	lsls	r3, r3, #2
 801c8fe:	3301      	adds	r3, #1
 801c900:	00db      	lsls	r3, r3, #3
 801c902:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801c906:	4618      	mov	r0, r3
 801c908:	f7ff fe86 	bl	801c618 <WIZCHIP_READ>
 801c90c:	4603      	mov	r3, r0
 801c90e:	b29b      	uxth	r3, r3
 801c910:	4423      	add	r3, r4
 801c912:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 801c914:	89bb      	ldrh	r3, [r7, #12]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d01a      	beq.n	801c950 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 801c91a:	79fb      	ldrb	r3, [r7, #7]
 801c91c:	009b      	lsls	r3, r3, #2
 801c91e:	3301      	adds	r3, #1
 801c920:	00db      	lsls	r3, r3, #3
 801c922:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801c926:	4618      	mov	r0, r3
 801c928:	f7ff fe76 	bl	801c618 <WIZCHIP_READ>
 801c92c:	4603      	mov	r3, r0
 801c92e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801c930:	89fb      	ldrh	r3, [r7, #14]
 801c932:	021b      	lsls	r3, r3, #8
 801c934:	b29c      	uxth	r4, r3
 801c936:	79fb      	ldrb	r3, [r7, #7]
 801c938:	009b      	lsls	r3, r3, #2
 801c93a:	3301      	adds	r3, #1
 801c93c:	00db      	lsls	r3, r3, #3
 801c93e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801c942:	4618      	mov	r0, r3
 801c944:	f7ff fe68 	bl	801c618 <WIZCHIP_READ>
 801c948:	4603      	mov	r3, r0
 801c94a:	b29b      	uxth	r3, r3
 801c94c:	4423      	add	r3, r4
 801c94e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 801c950:	89fa      	ldrh	r2, [r7, #14]
 801c952:	89bb      	ldrh	r3, [r7, #12]
 801c954:	429a      	cmp	r2, r3
 801c956:	d1c2      	bne.n	801c8de <getSn_TX_FSR+0x12>
   return val;
 801c958:	89fb      	ldrh	r3, [r7, #14]
}
 801c95a:	4618      	mov	r0, r3
 801c95c:	3714      	adds	r7, #20
 801c95e:	46bd      	mov	sp, r7
 801c960:	bd90      	pop	{r4, r7, pc}

0801c962 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 801c962:	b590      	push	{r4, r7, lr}
 801c964:	b085      	sub	sp, #20
 801c966:	af00      	add	r7, sp, #0
 801c968:	4603      	mov	r3, r0
 801c96a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 801c96c:	2300      	movs	r3, #0
 801c96e:	81fb      	strh	r3, [r7, #14]
 801c970:	2300      	movs	r3, #0
 801c972:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 801c974:	79fb      	ldrb	r3, [r7, #7]
 801c976:	009b      	lsls	r3, r3, #2
 801c978:	3301      	adds	r3, #1
 801c97a:	00db      	lsls	r3, r3, #3
 801c97c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 801c980:	4618      	mov	r0, r3
 801c982:	f7ff fe49 	bl	801c618 <WIZCHIP_READ>
 801c986:	4603      	mov	r3, r0
 801c988:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801c98a:	89bb      	ldrh	r3, [r7, #12]
 801c98c:	021b      	lsls	r3, r3, #8
 801c98e:	b29c      	uxth	r4, r3
 801c990:	79fb      	ldrb	r3, [r7, #7]
 801c992:	009b      	lsls	r3, r3, #2
 801c994:	3301      	adds	r3, #1
 801c996:	00db      	lsls	r3, r3, #3
 801c998:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 801c99c:	4618      	mov	r0, r3
 801c99e:	f7ff fe3b 	bl	801c618 <WIZCHIP_READ>
 801c9a2:	4603      	mov	r3, r0
 801c9a4:	b29b      	uxth	r3, r3
 801c9a6:	4423      	add	r3, r4
 801c9a8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 801c9aa:	89bb      	ldrh	r3, [r7, #12]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d01a      	beq.n	801c9e6 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 801c9b0:	79fb      	ldrb	r3, [r7, #7]
 801c9b2:	009b      	lsls	r3, r3, #2
 801c9b4:	3301      	adds	r3, #1
 801c9b6:	00db      	lsls	r3, r3, #3
 801c9b8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 801c9bc:	4618      	mov	r0, r3
 801c9be:	f7ff fe2b 	bl	801c618 <WIZCHIP_READ>
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801c9c6:	89fb      	ldrh	r3, [r7, #14]
 801c9c8:	021b      	lsls	r3, r3, #8
 801c9ca:	b29c      	uxth	r4, r3
 801c9cc:	79fb      	ldrb	r3, [r7, #7]
 801c9ce:	009b      	lsls	r3, r3, #2
 801c9d0:	3301      	adds	r3, #1
 801c9d2:	00db      	lsls	r3, r3, #3
 801c9d4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 801c9d8:	4618      	mov	r0, r3
 801c9da:	f7ff fe1d 	bl	801c618 <WIZCHIP_READ>
 801c9de:	4603      	mov	r3, r0
 801c9e0:	b29b      	uxth	r3, r3
 801c9e2:	4423      	add	r3, r4
 801c9e4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 801c9e6:	89fa      	ldrh	r2, [r7, #14]
 801c9e8:	89bb      	ldrh	r3, [r7, #12]
 801c9ea:	429a      	cmp	r2, r3
 801c9ec:	d1c2      	bne.n	801c974 <getSn_RX_RSR+0x12>
   return val;
 801c9ee:	89fb      	ldrh	r3, [r7, #14]
}
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	3714      	adds	r7, #20
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bd90      	pop	{r4, r7, pc}

0801c9f8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 801c9f8:	b590      	push	{r4, r7, lr}
 801c9fa:	b085      	sub	sp, #20
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	4603      	mov	r3, r0
 801ca00:	6039      	str	r1, [r7, #0]
 801ca02:	71fb      	strb	r3, [r7, #7]
 801ca04:	4613      	mov	r3, r2
 801ca06:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 801ca08:	2300      	movs	r3, #0
 801ca0a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 801ca10:	88bb      	ldrh	r3, [r7, #4]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d048      	beq.n	801caa8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 801ca16:	79fb      	ldrb	r3, [r7, #7]
 801ca18:	009b      	lsls	r3, r3, #2
 801ca1a:	3301      	adds	r3, #1
 801ca1c:	00db      	lsls	r3, r3, #3
 801ca1e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 801ca22:	4618      	mov	r0, r3
 801ca24:	f7ff fdf8 	bl	801c618 <WIZCHIP_READ>
 801ca28:	4603      	mov	r3, r0
 801ca2a:	b29b      	uxth	r3, r3
 801ca2c:	021b      	lsls	r3, r3, #8
 801ca2e:	b29c      	uxth	r4, r3
 801ca30:	79fb      	ldrb	r3, [r7, #7]
 801ca32:	009b      	lsls	r3, r3, #2
 801ca34:	3301      	adds	r3, #1
 801ca36:	00db      	lsls	r3, r3, #3
 801ca38:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	f7ff fdeb 	bl	801c618 <WIZCHIP_READ>
 801ca42:	4603      	mov	r3, r0
 801ca44:	b29b      	uxth	r3, r3
 801ca46:	4423      	add	r3, r4
 801ca48:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 801ca4a:	89fb      	ldrh	r3, [r7, #14]
 801ca4c:	021b      	lsls	r3, r3, #8
 801ca4e:	79fa      	ldrb	r2, [r7, #7]
 801ca50:	0092      	lsls	r2, r2, #2
 801ca52:	3202      	adds	r2, #2
 801ca54:	00d2      	lsls	r2, r2, #3
 801ca56:	4413      	add	r3, r2
 801ca58:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 801ca5a:	88bb      	ldrh	r3, [r7, #4]
 801ca5c:	461a      	mov	r2, r3
 801ca5e:	6839      	ldr	r1, [r7, #0]
 801ca60:	68b8      	ldr	r0, [r7, #8]
 801ca62:	f7ff fed3 	bl	801c80c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 801ca66:	89fa      	ldrh	r2, [r7, #14]
 801ca68:	88bb      	ldrh	r3, [r7, #4]
 801ca6a:	4413      	add	r3, r2
 801ca6c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 801ca6e:	79fb      	ldrb	r3, [r7, #7]
 801ca70:	009b      	lsls	r3, r3, #2
 801ca72:	3301      	adds	r3, #1
 801ca74:	00db      	lsls	r3, r3, #3
 801ca76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 801ca7a:	461a      	mov	r2, r3
 801ca7c:	89fb      	ldrh	r3, [r7, #14]
 801ca7e:	0a1b      	lsrs	r3, r3, #8
 801ca80:	b29b      	uxth	r3, r3
 801ca82:	b2db      	uxtb	r3, r3
 801ca84:	4619      	mov	r1, r3
 801ca86:	4610      	mov	r0, r2
 801ca88:	f7ff fe12 	bl	801c6b0 <WIZCHIP_WRITE>
 801ca8c:	79fb      	ldrb	r3, [r7, #7]
 801ca8e:	009b      	lsls	r3, r3, #2
 801ca90:	3301      	adds	r3, #1
 801ca92:	00db      	lsls	r3, r3, #3
 801ca94:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 801ca98:	461a      	mov	r2, r3
 801ca9a:	89fb      	ldrh	r3, [r7, #14]
 801ca9c:	b2db      	uxtb	r3, r3
 801ca9e:	4619      	mov	r1, r3
 801caa0:	4610      	mov	r0, r2
 801caa2:	f7ff fe05 	bl	801c6b0 <WIZCHIP_WRITE>
 801caa6:	e000      	b.n	801caaa <wiz_send_data+0xb2>
   if(len == 0)  return;
 801caa8:	bf00      	nop
}
 801caaa:	3714      	adds	r7, #20
 801caac:	46bd      	mov	sp, r7
 801caae:	bd90      	pop	{r4, r7, pc}

0801cab0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 801cab0:	b590      	push	{r4, r7, lr}
 801cab2:	b085      	sub	sp, #20
 801cab4:	af00      	add	r7, sp, #0
 801cab6:	4603      	mov	r3, r0
 801cab8:	6039      	str	r1, [r7, #0]
 801caba:	71fb      	strb	r3, [r7, #7]
 801cabc:	4613      	mov	r3, r2
 801cabe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 801cac0:	2300      	movs	r3, #0
 801cac2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 801cac4:	2300      	movs	r3, #0
 801cac6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 801cac8:	88bb      	ldrh	r3, [r7, #4]
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d048      	beq.n	801cb60 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 801cace:	79fb      	ldrb	r3, [r7, #7]
 801cad0:	009b      	lsls	r3, r3, #2
 801cad2:	3301      	adds	r3, #1
 801cad4:	00db      	lsls	r3, r3, #3
 801cad6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801cada:	4618      	mov	r0, r3
 801cadc:	f7ff fd9c 	bl	801c618 <WIZCHIP_READ>
 801cae0:	4603      	mov	r3, r0
 801cae2:	b29b      	uxth	r3, r3
 801cae4:	021b      	lsls	r3, r3, #8
 801cae6:	b29c      	uxth	r4, r3
 801cae8:	79fb      	ldrb	r3, [r7, #7]
 801caea:	009b      	lsls	r3, r3, #2
 801caec:	3301      	adds	r3, #1
 801caee:	00db      	lsls	r3, r3, #3
 801caf0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 801caf4:	4618      	mov	r0, r3
 801caf6:	f7ff fd8f 	bl	801c618 <WIZCHIP_READ>
 801cafa:	4603      	mov	r3, r0
 801cafc:	b29b      	uxth	r3, r3
 801cafe:	4423      	add	r3, r4
 801cb00:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 801cb02:	89fb      	ldrh	r3, [r7, #14]
 801cb04:	021b      	lsls	r3, r3, #8
 801cb06:	79fa      	ldrb	r2, [r7, #7]
 801cb08:	0092      	lsls	r2, r2, #2
 801cb0a:	3203      	adds	r2, #3
 801cb0c:	00d2      	lsls	r2, r2, #3
 801cb0e:	4413      	add	r3, r2
 801cb10:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 801cb12:	88bb      	ldrh	r3, [r7, #4]
 801cb14:	461a      	mov	r2, r3
 801cb16:	6839      	ldr	r1, [r7, #0]
 801cb18:	68b8      	ldr	r0, [r7, #8]
 801cb1a:	f7ff fe17 	bl	801c74c <WIZCHIP_READ_BUF>
   ptr += len;
 801cb1e:	89fa      	ldrh	r2, [r7, #14]
 801cb20:	88bb      	ldrh	r3, [r7, #4]
 801cb22:	4413      	add	r3, r2
 801cb24:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 801cb26:	79fb      	ldrb	r3, [r7, #7]
 801cb28:	009b      	lsls	r3, r3, #2
 801cb2a:	3301      	adds	r3, #1
 801cb2c:	00db      	lsls	r3, r3, #3
 801cb2e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801cb32:	461a      	mov	r2, r3
 801cb34:	89fb      	ldrh	r3, [r7, #14]
 801cb36:	0a1b      	lsrs	r3, r3, #8
 801cb38:	b29b      	uxth	r3, r3
 801cb3a:	b2db      	uxtb	r3, r3
 801cb3c:	4619      	mov	r1, r3
 801cb3e:	4610      	mov	r0, r2
 801cb40:	f7ff fdb6 	bl	801c6b0 <WIZCHIP_WRITE>
 801cb44:	79fb      	ldrb	r3, [r7, #7]
 801cb46:	009b      	lsls	r3, r3, #2
 801cb48:	3301      	adds	r3, #1
 801cb4a:	00db      	lsls	r3, r3, #3
 801cb4c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 801cb50:	461a      	mov	r2, r3
 801cb52:	89fb      	ldrh	r3, [r7, #14]
 801cb54:	b2db      	uxtb	r3, r3
 801cb56:	4619      	mov	r1, r3
 801cb58:	4610      	mov	r0, r2
 801cb5a:	f7ff fda9 	bl	801c6b0 <WIZCHIP_WRITE>
 801cb5e:	e000      	b.n	801cb62 <wiz_recv_data+0xb2>
   if(len == 0) return;
 801cb60:	bf00      	nop
}
 801cb62:	3714      	adds	r7, #20
 801cb64:	46bd      	mov	sp, r7
 801cb66:	bd90      	pop	{r4, r7, pc}

0801cb68 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 801cb68:	b590      	push	{r4, r7, lr}
 801cb6a:	b085      	sub	sp, #20
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	4604      	mov	r4, r0
 801cb70:	4608      	mov	r0, r1
 801cb72:	4611      	mov	r1, r2
 801cb74:	461a      	mov	r2, r3
 801cb76:	4623      	mov	r3, r4
 801cb78:	71fb      	strb	r3, [r7, #7]
 801cb7a:	4603      	mov	r3, r0
 801cb7c:	71bb      	strb	r3, [r7, #6]
 801cb7e:	460b      	mov	r3, r1
 801cb80:	80bb      	strh	r3, [r7, #4]
 801cb82:	4613      	mov	r3, r2
 801cb84:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 801cb86:	79fb      	ldrb	r3, [r7, #7]
 801cb88:	2b08      	cmp	r3, #8
 801cb8a:	d902      	bls.n	801cb92 <socket+0x2a>
 801cb8c:	f04f 33ff 	mov.w	r3, #4294967295
 801cb90:	e0f2      	b.n	801cd78 <socket+0x210>
	switch(protocol)
 801cb92:	79bb      	ldrb	r3, [r7, #6]
 801cb94:	2b01      	cmp	r3, #1
 801cb96:	d005      	beq.n	801cba4 <socket+0x3c>
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	dd11      	ble.n	801cbc0 <socket+0x58>
 801cb9c:	3b02      	subs	r3, #2
 801cb9e:	2b02      	cmp	r3, #2
 801cba0:	d80e      	bhi.n	801cbc0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 801cba2:	e011      	b.n	801cbc8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 801cba4:	f107 030c 	add.w	r3, r7, #12
 801cba8:	2204      	movs	r2, #4
 801cbaa:	4619      	mov	r1, r3
 801cbac:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801cbb0:	f7ff fdcc 	bl	801c74c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d105      	bne.n	801cbc6 <socket+0x5e>
 801cbba:	f06f 0302 	mvn.w	r3, #2
 801cbbe:	e0db      	b.n	801cd78 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 801cbc0:	f06f 0304 	mvn.w	r3, #4
 801cbc4:	e0d8      	b.n	801cd78 <socket+0x210>
	    break;
 801cbc6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 801cbc8:	78fb      	ldrb	r3, [r7, #3]
 801cbca:	f003 0304 	and.w	r3, r3, #4
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d002      	beq.n	801cbd8 <socket+0x70>
 801cbd2:	f06f 0305 	mvn.w	r3, #5
 801cbd6:	e0cf      	b.n	801cd78 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 801cbd8:	78fb      	ldrb	r3, [r7, #3]
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d025      	beq.n	801cc2a <socket+0xc2>
	{
   	switch(protocol)
 801cbde:	79bb      	ldrb	r3, [r7, #6]
 801cbe0:	2b01      	cmp	r3, #1
 801cbe2:	d002      	beq.n	801cbea <socket+0x82>
 801cbe4:	2b02      	cmp	r3, #2
 801cbe6:	d008      	beq.n	801cbfa <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 801cbe8:	e024      	b.n	801cc34 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 801cbea:	78fb      	ldrb	r3, [r7, #3]
 801cbec:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d11c      	bne.n	801cc2e <socket+0xc6>
 801cbf4:	f06f 0305 	mvn.w	r3, #5
 801cbf8:	e0be      	b.n	801cd78 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 801cbfa:	78fb      	ldrb	r3, [r7, #3]
 801cbfc:	f003 0320 	and.w	r3, r3, #32
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d006      	beq.n	801cc12 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 801cc04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	db02      	blt.n	801cc12 <socket+0xaa>
 801cc0c:	f06f 0305 	mvn.w	r3, #5
 801cc10:	e0b2      	b.n	801cd78 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 801cc12:	78fb      	ldrb	r3, [r7, #3]
 801cc14:	f003 0310 	and.w	r3, r3, #16
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d00a      	beq.n	801cc32 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 801cc1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	db06      	blt.n	801cc32 <socket+0xca>
 801cc24:	f06f 0305 	mvn.w	r3, #5
 801cc28:	e0a6      	b.n	801cd78 <socket+0x210>
   	}
   }
 801cc2a:	bf00      	nop
 801cc2c:	e002      	b.n	801cc34 <socket+0xcc>
   	      break;
 801cc2e:	bf00      	nop
 801cc30:	e000      	b.n	801cc34 <socket+0xcc>
   	      break;
 801cc32:	bf00      	nop
	close(sn);
 801cc34:	79fb      	ldrb	r3, [r7, #7]
 801cc36:	4618      	mov	r0, r3
 801cc38:	f000 f8ac 	bl	801cd94 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 801cc3c:	79fb      	ldrb	r3, [r7, #7]
 801cc3e:	009b      	lsls	r3, r3, #2
 801cc40:	3301      	adds	r3, #1
 801cc42:	00db      	lsls	r3, r3, #3
 801cc44:	4618      	mov	r0, r3
 801cc46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cc4a:	f023 030f 	bic.w	r3, r3, #15
 801cc4e:	b25a      	sxtb	r2, r3
 801cc50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801cc54:	4313      	orrs	r3, r2
 801cc56:	b25b      	sxtb	r3, r3
 801cc58:	b2db      	uxtb	r3, r3
 801cc5a:	4619      	mov	r1, r3
 801cc5c:	f7ff fd28 	bl	801c6b0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 801cc60:	88bb      	ldrh	r3, [r7, #4]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d110      	bne.n	801cc88 <socket+0x120>
	{
	   port = sock_any_port++;
 801cc66:	4b46      	ldr	r3, [pc, #280]	; (801cd80 <socket+0x218>)
 801cc68:	881b      	ldrh	r3, [r3, #0]
 801cc6a:	1c5a      	adds	r2, r3, #1
 801cc6c:	b291      	uxth	r1, r2
 801cc6e:	4a44      	ldr	r2, [pc, #272]	; (801cd80 <socket+0x218>)
 801cc70:	8011      	strh	r1, [r2, #0]
 801cc72:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 801cc74:	4b42      	ldr	r3, [pc, #264]	; (801cd80 <socket+0x218>)
 801cc76:	881b      	ldrh	r3, [r3, #0]
 801cc78:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801cc7c:	4293      	cmp	r3, r2
 801cc7e:	d103      	bne.n	801cc88 <socket+0x120>
 801cc80:	4b3f      	ldr	r3, [pc, #252]	; (801cd80 <socket+0x218>)
 801cc82:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801cc86:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 801cc88:	79fb      	ldrb	r3, [r7, #7]
 801cc8a:	009b      	lsls	r3, r3, #2
 801cc8c:	3301      	adds	r3, #1
 801cc8e:	00db      	lsls	r3, r3, #3
 801cc90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801cc94:	461a      	mov	r2, r3
 801cc96:	88bb      	ldrh	r3, [r7, #4]
 801cc98:	0a1b      	lsrs	r3, r3, #8
 801cc9a:	b29b      	uxth	r3, r3
 801cc9c:	b2db      	uxtb	r3, r3
 801cc9e:	4619      	mov	r1, r3
 801cca0:	4610      	mov	r0, r2
 801cca2:	f7ff fd05 	bl	801c6b0 <WIZCHIP_WRITE>
 801cca6:	79fb      	ldrb	r3, [r7, #7]
 801cca8:	009b      	lsls	r3, r3, #2
 801ccaa:	3301      	adds	r3, #1
 801ccac:	00db      	lsls	r3, r3, #3
 801ccae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801ccb2:	461a      	mov	r2, r3
 801ccb4:	88bb      	ldrh	r3, [r7, #4]
 801ccb6:	b2db      	uxtb	r3, r3
 801ccb8:	4619      	mov	r1, r3
 801ccba:	4610      	mov	r0, r2
 801ccbc:	f7ff fcf8 	bl	801c6b0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 801ccc0:	79fb      	ldrb	r3, [r7, #7]
 801ccc2:	009b      	lsls	r3, r3, #2
 801ccc4:	3301      	adds	r3, #1
 801ccc6:	00db      	lsls	r3, r3, #3
 801ccc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801cccc:	2101      	movs	r1, #1
 801ccce:	4618      	mov	r0, r3
 801ccd0:	f7ff fcee 	bl	801c6b0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801ccd4:	bf00      	nop
 801ccd6:	79fb      	ldrb	r3, [r7, #7]
 801ccd8:	009b      	lsls	r3, r3, #2
 801ccda:	3301      	adds	r3, #1
 801ccdc:	00db      	lsls	r3, r3, #3
 801ccde:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801cce2:	4618      	mov	r0, r3
 801cce4:	f7ff fc98 	bl	801c618 <WIZCHIP_READ>
 801cce8:	4603      	mov	r3, r0
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d1f3      	bne.n	801ccd6 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 801ccee:	79fb      	ldrb	r3, [r7, #7]
 801ccf0:	2201      	movs	r2, #1
 801ccf2:	fa02 f303 	lsl.w	r3, r2, r3
 801ccf6:	b21b      	sxth	r3, r3
 801ccf8:	43db      	mvns	r3, r3
 801ccfa:	b21a      	sxth	r2, r3
 801ccfc:	4b21      	ldr	r3, [pc, #132]	; (801cd84 <socket+0x21c>)
 801ccfe:	881b      	ldrh	r3, [r3, #0]
 801cd00:	b21b      	sxth	r3, r3
 801cd02:	4013      	ands	r3, r2
 801cd04:	b21b      	sxth	r3, r3
 801cd06:	b29a      	uxth	r2, r3
 801cd08:	4b1e      	ldr	r3, [pc, #120]	; (801cd84 <socket+0x21c>)
 801cd0a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 801cd0c:	78fb      	ldrb	r3, [r7, #3]
 801cd0e:	f003 0201 	and.w	r2, r3, #1
 801cd12:	79fb      	ldrb	r3, [r7, #7]
 801cd14:	fa02 f303 	lsl.w	r3, r2, r3
 801cd18:	b21a      	sxth	r2, r3
 801cd1a:	4b1a      	ldr	r3, [pc, #104]	; (801cd84 <socket+0x21c>)
 801cd1c:	881b      	ldrh	r3, [r3, #0]
 801cd1e:	b21b      	sxth	r3, r3
 801cd20:	4313      	orrs	r3, r2
 801cd22:	b21b      	sxth	r3, r3
 801cd24:	b29a      	uxth	r2, r3
 801cd26:	4b17      	ldr	r3, [pc, #92]	; (801cd84 <socket+0x21c>)
 801cd28:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 801cd2a:	79fb      	ldrb	r3, [r7, #7]
 801cd2c:	2201      	movs	r2, #1
 801cd2e:	fa02 f303 	lsl.w	r3, r2, r3
 801cd32:	b21b      	sxth	r3, r3
 801cd34:	43db      	mvns	r3, r3
 801cd36:	b21a      	sxth	r2, r3
 801cd38:	4b13      	ldr	r3, [pc, #76]	; (801cd88 <socket+0x220>)
 801cd3a:	881b      	ldrh	r3, [r3, #0]
 801cd3c:	b21b      	sxth	r3, r3
 801cd3e:	4013      	ands	r3, r2
 801cd40:	b21b      	sxth	r3, r3
 801cd42:	b29a      	uxth	r2, r3
 801cd44:	4b10      	ldr	r3, [pc, #64]	; (801cd88 <socket+0x220>)
 801cd46:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 801cd48:	79fb      	ldrb	r3, [r7, #7]
 801cd4a:	4a10      	ldr	r2, [pc, #64]	; (801cd8c <socket+0x224>)
 801cd4c:	2100      	movs	r1, #0
 801cd4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 801cd52:	79fb      	ldrb	r3, [r7, #7]
 801cd54:	4a0e      	ldr	r2, [pc, #56]	; (801cd90 <socket+0x228>)
 801cd56:	2100      	movs	r1, #0
 801cd58:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 801cd5a:	bf00      	nop
 801cd5c:	79fb      	ldrb	r3, [r7, #7]
 801cd5e:	009b      	lsls	r3, r3, #2
 801cd60:	3301      	adds	r3, #1
 801cd62:	00db      	lsls	r3, r3, #3
 801cd64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801cd68:	4618      	mov	r0, r3
 801cd6a:	f7ff fc55 	bl	801c618 <WIZCHIP_READ>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d0f3      	beq.n	801cd5c <socket+0x1f4>
   return (int8_t)sn;
 801cd74:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 801cd78:	4618      	mov	r0, r3
 801cd7a:	3714      	adds	r7, #20
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bd90      	pop	{r4, r7, pc}
 801cd80:	20000044 	.word	0x20000044
 801cd84:	200028e4 	.word	0x200028e4
 801cd88:	200028e6 	.word	0x200028e6
 801cd8c:	200028e8 	.word	0x200028e8
 801cd90:	200028f8 	.word	0x200028f8

0801cd94 <close>:

int8_t close(uint8_t sn)
{
 801cd94:	b580      	push	{r7, lr}
 801cd96:	b082      	sub	sp, #8
 801cd98:	af00      	add	r7, sp, #0
 801cd9a:	4603      	mov	r3, r0
 801cd9c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 801cd9e:	79fb      	ldrb	r3, [r7, #7]
 801cda0:	2b08      	cmp	r3, #8
 801cda2:	d902      	bls.n	801cdaa <close+0x16>
 801cda4:	f04f 33ff 	mov.w	r3, #4294967295
 801cda8:	e055      	b.n	801ce56 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 801cdaa:	79fb      	ldrb	r3, [r7, #7]
 801cdac:	009b      	lsls	r3, r3, #2
 801cdae:	3301      	adds	r3, #1
 801cdb0:	00db      	lsls	r3, r3, #3
 801cdb2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801cdb6:	2110      	movs	r1, #16
 801cdb8:	4618      	mov	r0, r3
 801cdba:	f7ff fc79 	bl	801c6b0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 801cdbe:	bf00      	nop
 801cdc0:	79fb      	ldrb	r3, [r7, #7]
 801cdc2:	009b      	lsls	r3, r3, #2
 801cdc4:	3301      	adds	r3, #1
 801cdc6:	00db      	lsls	r3, r3, #3
 801cdc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801cdcc:	4618      	mov	r0, r3
 801cdce:	f7ff fc23 	bl	801c618 <WIZCHIP_READ>
 801cdd2:	4603      	mov	r3, r0
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d1f3      	bne.n	801cdc0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 801cdd8:	79fb      	ldrb	r3, [r7, #7]
 801cdda:	009b      	lsls	r3, r3, #2
 801cddc:	3301      	adds	r3, #1
 801cdde:	00db      	lsls	r3, r3, #3
 801cde0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801cde4:	211f      	movs	r1, #31
 801cde6:	4618      	mov	r0, r3
 801cde8:	f7ff fc62 	bl	801c6b0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 801cdec:	79fb      	ldrb	r3, [r7, #7]
 801cdee:	2201      	movs	r2, #1
 801cdf0:	fa02 f303 	lsl.w	r3, r2, r3
 801cdf4:	b21b      	sxth	r3, r3
 801cdf6:	43db      	mvns	r3, r3
 801cdf8:	b21a      	sxth	r2, r3
 801cdfa:	4b19      	ldr	r3, [pc, #100]	; (801ce60 <close+0xcc>)
 801cdfc:	881b      	ldrh	r3, [r3, #0]
 801cdfe:	b21b      	sxth	r3, r3
 801ce00:	4013      	ands	r3, r2
 801ce02:	b21b      	sxth	r3, r3
 801ce04:	b29a      	uxth	r2, r3
 801ce06:	4b16      	ldr	r3, [pc, #88]	; (801ce60 <close+0xcc>)
 801ce08:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 801ce0a:	79fb      	ldrb	r3, [r7, #7]
 801ce0c:	2201      	movs	r2, #1
 801ce0e:	fa02 f303 	lsl.w	r3, r2, r3
 801ce12:	b21b      	sxth	r3, r3
 801ce14:	43db      	mvns	r3, r3
 801ce16:	b21a      	sxth	r2, r3
 801ce18:	4b12      	ldr	r3, [pc, #72]	; (801ce64 <close+0xd0>)
 801ce1a:	881b      	ldrh	r3, [r3, #0]
 801ce1c:	b21b      	sxth	r3, r3
 801ce1e:	4013      	ands	r3, r2
 801ce20:	b21b      	sxth	r3, r3
 801ce22:	b29a      	uxth	r2, r3
 801ce24:	4b0f      	ldr	r3, [pc, #60]	; (801ce64 <close+0xd0>)
 801ce26:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 801ce28:	79fb      	ldrb	r3, [r7, #7]
 801ce2a:	4a0f      	ldr	r2, [pc, #60]	; (801ce68 <close+0xd4>)
 801ce2c:	2100      	movs	r1, #0
 801ce2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 801ce32:	79fb      	ldrb	r3, [r7, #7]
 801ce34:	4a0d      	ldr	r2, [pc, #52]	; (801ce6c <close+0xd8>)
 801ce36:	2100      	movs	r1, #0
 801ce38:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801ce3a:	bf00      	nop
 801ce3c:	79fb      	ldrb	r3, [r7, #7]
 801ce3e:	009b      	lsls	r3, r3, #2
 801ce40:	3301      	adds	r3, #1
 801ce42:	00db      	lsls	r3, r3, #3
 801ce44:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ce48:	4618      	mov	r0, r3
 801ce4a:	f7ff fbe5 	bl	801c618 <WIZCHIP_READ>
 801ce4e:	4603      	mov	r3, r0
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d1f3      	bne.n	801ce3c <close+0xa8>
	return SOCK_OK;
 801ce54:	2301      	movs	r3, #1
}
 801ce56:	4618      	mov	r0, r3
 801ce58:	3708      	adds	r7, #8
 801ce5a:	46bd      	mov	sp, r7
 801ce5c:	bd80      	pop	{r7, pc}
 801ce5e:	bf00      	nop
 801ce60:	200028e4 	.word	0x200028e4
 801ce64:	200028e6 	.word	0x200028e6
 801ce68:	200028e8 	.word	0x200028e8
 801ce6c:	200028f8 	.word	0x200028f8

0801ce70 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b084      	sub	sp, #16
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	4603      	mov	r3, r0
 801ce78:	6039      	str	r1, [r7, #0]
 801ce7a:	71fb      	strb	r3, [r7, #7]
 801ce7c:	4613      	mov	r3, r2
 801ce7e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 801ce80:	79fb      	ldrb	r3, [r7, #7]
 801ce82:	2b08      	cmp	r3, #8
 801ce84:	d902      	bls.n	801ce8c <connect+0x1c>
 801ce86:	f04f 33ff 	mov.w	r3, #4294967295
 801ce8a:	e0c6      	b.n	801d01a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801ce8c:	79fb      	ldrb	r3, [r7, #7]
 801ce8e:	009b      	lsls	r3, r3, #2
 801ce90:	3301      	adds	r3, #1
 801ce92:	00db      	lsls	r3, r3, #3
 801ce94:	4618      	mov	r0, r3
 801ce96:	f7ff fbbf 	bl	801c618 <WIZCHIP_READ>
 801ce9a:	4603      	mov	r3, r0
 801ce9c:	f003 030f 	and.w	r3, r3, #15
 801cea0:	2b01      	cmp	r3, #1
 801cea2:	d002      	beq.n	801ceaa <connect+0x3a>
 801cea4:	f06f 0304 	mvn.w	r3, #4
 801cea8:	e0b7      	b.n	801d01a <connect+0x1aa>
   CHECK_SOCKINIT();
 801ceaa:	79fb      	ldrb	r3, [r7, #7]
 801ceac:	009b      	lsls	r3, r3, #2
 801ceae:	3301      	adds	r3, #1
 801ceb0:	00db      	lsls	r3, r3, #3
 801ceb2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	f7ff fbae 	bl	801c618 <WIZCHIP_READ>
 801cebc:	4603      	mov	r3, r0
 801cebe:	2b13      	cmp	r3, #19
 801cec0:	d002      	beq.n	801cec8 <connect+0x58>
 801cec2:	f06f 0302 	mvn.w	r3, #2
 801cec6:	e0a8      	b.n	801d01a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 801cec8:	683b      	ldr	r3, [r7, #0]
 801ceca:	781b      	ldrb	r3, [r3, #0]
 801cecc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	021b      	lsls	r3, r3, #8
 801ced2:	683a      	ldr	r2, [r7, #0]
 801ced4:	3201      	adds	r2, #1
 801ced6:	7812      	ldrb	r2, [r2, #0]
 801ced8:	4413      	add	r3, r2
 801ceda:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801cedc:	68fb      	ldr	r3, [r7, #12]
 801cede:	021b      	lsls	r3, r3, #8
 801cee0:	683a      	ldr	r2, [r7, #0]
 801cee2:	3202      	adds	r2, #2
 801cee4:	7812      	ldrb	r2, [r2, #0]
 801cee6:	4413      	add	r3, r2
 801cee8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801ceea:	68fb      	ldr	r3, [r7, #12]
 801ceec:	021b      	lsls	r3, r3, #8
 801ceee:	683a      	ldr	r2, [r7, #0]
 801cef0:	3203      	adds	r2, #3
 801cef2:	7812      	ldrb	r2, [r2, #0]
 801cef4:	4413      	add	r3, r2
 801cef6:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cefe:	d002      	beq.n	801cf06 <connect+0x96>
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d102      	bne.n	801cf0c <connect+0x9c>
 801cf06:	f06f 030b 	mvn.w	r3, #11
 801cf0a:	e086      	b.n	801d01a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 801cf0c:	88bb      	ldrh	r3, [r7, #4]
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	d102      	bne.n	801cf18 <connect+0xa8>
 801cf12:	f06f 030a 	mvn.w	r3, #10
 801cf16:	e080      	b.n	801d01a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 801cf18:	79fb      	ldrb	r3, [r7, #7]
 801cf1a:	009b      	lsls	r3, r3, #2
 801cf1c:	3301      	adds	r3, #1
 801cf1e:	00db      	lsls	r3, r3, #3
 801cf20:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801cf24:	2204      	movs	r2, #4
 801cf26:	6839      	ldr	r1, [r7, #0]
 801cf28:	4618      	mov	r0, r3
 801cf2a:	f7ff fc6f 	bl	801c80c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 801cf2e:	79fb      	ldrb	r3, [r7, #7]
 801cf30:	009b      	lsls	r3, r3, #2
 801cf32:	3301      	adds	r3, #1
 801cf34:	00db      	lsls	r3, r3, #3
 801cf36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cf3a:	461a      	mov	r2, r3
 801cf3c:	88bb      	ldrh	r3, [r7, #4]
 801cf3e:	0a1b      	lsrs	r3, r3, #8
 801cf40:	b29b      	uxth	r3, r3
 801cf42:	b2db      	uxtb	r3, r3
 801cf44:	4619      	mov	r1, r3
 801cf46:	4610      	mov	r0, r2
 801cf48:	f7ff fbb2 	bl	801c6b0 <WIZCHIP_WRITE>
 801cf4c:	79fb      	ldrb	r3, [r7, #7]
 801cf4e:	009b      	lsls	r3, r3, #2
 801cf50:	3301      	adds	r3, #1
 801cf52:	00db      	lsls	r3, r3, #3
 801cf54:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 801cf58:	461a      	mov	r2, r3
 801cf5a:	88bb      	ldrh	r3, [r7, #4]
 801cf5c:	b2db      	uxtb	r3, r3
 801cf5e:	4619      	mov	r1, r3
 801cf60:	4610      	mov	r0, r2
 801cf62:	f7ff fba5 	bl	801c6b0 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 801cf66:	79fb      	ldrb	r3, [r7, #7]
 801cf68:	009b      	lsls	r3, r3, #2
 801cf6a:	3301      	adds	r3, #1
 801cf6c:	00db      	lsls	r3, r3, #3
 801cf6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801cf72:	2104      	movs	r1, #4
 801cf74:	4618      	mov	r0, r3
 801cf76:	f7ff fb9b 	bl	801c6b0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801cf7a:	bf00      	nop
 801cf7c:	79fb      	ldrb	r3, [r7, #7]
 801cf7e:	009b      	lsls	r3, r3, #2
 801cf80:	3301      	adds	r3, #1
 801cf82:	00db      	lsls	r3, r3, #3
 801cf84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f7ff fb45 	bl	801c618 <WIZCHIP_READ>
 801cf8e:	4603      	mov	r3, r0
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d1f3      	bne.n	801cf7c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801cf94:	4b23      	ldr	r3, [pc, #140]	; (801d024 <connect+0x1b4>)
 801cf96:	881b      	ldrh	r3, [r3, #0]
 801cf98:	461a      	mov	r2, r3
 801cf9a:	79fb      	ldrb	r3, [r7, #7]
 801cf9c:	fa42 f303 	asr.w	r3, r2, r3
 801cfa0:	f003 0301 	and.w	r3, r3, #1
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d02b      	beq.n	801d000 <connect+0x190>
 801cfa8:	2300      	movs	r3, #0
 801cfaa:	e036      	b.n	801d01a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801cfac:	79fb      	ldrb	r3, [r7, #7]
 801cfae:	009b      	lsls	r3, r3, #2
 801cfb0:	3301      	adds	r3, #1
 801cfb2:	00db      	lsls	r3, r3, #3
 801cfb4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801cfb8:	4618      	mov	r0, r3
 801cfba:	f7ff fb2d 	bl	801c618 <WIZCHIP_READ>
 801cfbe:	4603      	mov	r3, r0
 801cfc0:	f003 0308 	and.w	r3, r3, #8
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	d00c      	beq.n	801cfe2 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 801cfc8:	79fb      	ldrb	r3, [r7, #7]
 801cfca:	009b      	lsls	r3, r3, #2
 801cfcc:	3301      	adds	r3, #1
 801cfce:	00db      	lsls	r3, r3, #3
 801cfd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801cfd4:	2108      	movs	r1, #8
 801cfd6:	4618      	mov	r0, r3
 801cfd8:	f7ff fb6a 	bl	801c6b0 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 801cfdc:	f06f 030c 	mvn.w	r3, #12
 801cfe0:	e01b      	b.n	801d01a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 801cfe2:	79fb      	ldrb	r3, [r7, #7]
 801cfe4:	009b      	lsls	r3, r3, #2
 801cfe6:	3301      	adds	r3, #1
 801cfe8:	00db      	lsls	r3, r3, #3
 801cfea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801cfee:	4618      	mov	r0, r3
 801cff0:	f7ff fb12 	bl	801c618 <WIZCHIP_READ>
 801cff4:	4603      	mov	r3, r0
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d102      	bne.n	801d000 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 801cffa:	f06f 0303 	mvn.w	r3, #3
 801cffe:	e00c      	b.n	801d01a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 801d000:	79fb      	ldrb	r3, [r7, #7]
 801d002:	009b      	lsls	r3, r3, #2
 801d004:	3301      	adds	r3, #1
 801d006:	00db      	lsls	r3, r3, #3
 801d008:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d00c:	4618      	mov	r0, r3
 801d00e:	f7ff fb03 	bl	801c618 <WIZCHIP_READ>
 801d012:	4603      	mov	r3, r0
 801d014:	2b17      	cmp	r3, #23
 801d016:	d1c9      	bne.n	801cfac <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 801d018:	2301      	movs	r3, #1
}
 801d01a:	4618      	mov	r0, r3
 801d01c:	3710      	adds	r7, #16
 801d01e:	46bd      	mov	sp, r7
 801d020:	bd80      	pop	{r7, pc}
 801d022:	bf00      	nop
 801d024:	200028e4 	.word	0x200028e4

0801d028 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801d028:	b580      	push	{r7, lr}
 801d02a:	b084      	sub	sp, #16
 801d02c:	af00      	add	r7, sp, #0
 801d02e:	4603      	mov	r3, r0
 801d030:	6039      	str	r1, [r7, #0]
 801d032:	71fb      	strb	r3, [r7, #7]
 801d034:	4613      	mov	r3, r2
 801d036:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 801d038:	2300      	movs	r3, #0
 801d03a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 801d03c:	2300      	movs	r3, #0
 801d03e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 801d040:	79fb      	ldrb	r3, [r7, #7]
 801d042:	2b08      	cmp	r3, #8
 801d044:	d902      	bls.n	801d04c <send+0x24>
 801d046:	f04f 33ff 	mov.w	r3, #4294967295
 801d04a:	e0de      	b.n	801d20a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801d04c:	79fb      	ldrb	r3, [r7, #7]
 801d04e:	009b      	lsls	r3, r3, #2
 801d050:	3301      	adds	r3, #1
 801d052:	00db      	lsls	r3, r3, #3
 801d054:	4618      	mov	r0, r3
 801d056:	f7ff fadf 	bl	801c618 <WIZCHIP_READ>
 801d05a:	4603      	mov	r3, r0
 801d05c:	f003 030f 	and.w	r3, r3, #15
 801d060:	2b01      	cmp	r3, #1
 801d062:	d002      	beq.n	801d06a <send+0x42>
 801d064:	f06f 0304 	mvn.w	r3, #4
 801d068:	e0cf      	b.n	801d20a <send+0x1e2>
   CHECK_SOCKDATA();
 801d06a:	88bb      	ldrh	r3, [r7, #4]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d102      	bne.n	801d076 <send+0x4e>
 801d070:	f06f 030d 	mvn.w	r3, #13
 801d074:	e0c9      	b.n	801d20a <send+0x1e2>
   tmp = getSn_SR(sn);
 801d076:	79fb      	ldrb	r3, [r7, #7]
 801d078:	009b      	lsls	r3, r3, #2
 801d07a:	3301      	adds	r3, #1
 801d07c:	00db      	lsls	r3, r3, #3
 801d07e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d082:	4618      	mov	r0, r3
 801d084:	f7ff fac8 	bl	801c618 <WIZCHIP_READ>
 801d088:	4603      	mov	r3, r0
 801d08a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 801d08c:	7bfb      	ldrb	r3, [r7, #15]
 801d08e:	2b17      	cmp	r3, #23
 801d090:	d005      	beq.n	801d09e <send+0x76>
 801d092:	7bfb      	ldrb	r3, [r7, #15]
 801d094:	2b1c      	cmp	r3, #28
 801d096:	d002      	beq.n	801d09e <send+0x76>
 801d098:	f06f 0306 	mvn.w	r3, #6
 801d09c:	e0b5      	b.n	801d20a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 801d09e:	4b5d      	ldr	r3, [pc, #372]	; (801d214 <send+0x1ec>)
 801d0a0:	881b      	ldrh	r3, [r3, #0]
 801d0a2:	461a      	mov	r2, r3
 801d0a4:	79fb      	ldrb	r3, [r7, #7]
 801d0a6:	fa42 f303 	asr.w	r3, r2, r3
 801d0aa:	f003 0301 	and.w	r3, r3, #1
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d039      	beq.n	801d126 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 801d0b2:	79fb      	ldrb	r3, [r7, #7]
 801d0b4:	009b      	lsls	r3, r3, #2
 801d0b6:	3301      	adds	r3, #1
 801d0b8:	00db      	lsls	r3, r3, #3
 801d0ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f7ff faaa 	bl	801c618 <WIZCHIP_READ>
 801d0c4:	4603      	mov	r3, r0
 801d0c6:	f003 031f 	and.w	r3, r3, #31
 801d0ca:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 801d0cc:	7bfb      	ldrb	r3, [r7, #15]
 801d0ce:	f003 0310 	and.w	r3, r3, #16
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d019      	beq.n	801d10a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 801d0d6:	79fb      	ldrb	r3, [r7, #7]
 801d0d8:	009b      	lsls	r3, r3, #2
 801d0da:	3301      	adds	r3, #1
 801d0dc:	00db      	lsls	r3, r3, #3
 801d0de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d0e2:	2110      	movs	r1, #16
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	f7ff fae3 	bl	801c6b0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 801d0ea:	79fb      	ldrb	r3, [r7, #7]
 801d0ec:	2201      	movs	r2, #1
 801d0ee:	fa02 f303 	lsl.w	r3, r2, r3
 801d0f2:	b21b      	sxth	r3, r3
 801d0f4:	43db      	mvns	r3, r3
 801d0f6:	b21a      	sxth	r2, r3
 801d0f8:	4b46      	ldr	r3, [pc, #280]	; (801d214 <send+0x1ec>)
 801d0fa:	881b      	ldrh	r3, [r3, #0]
 801d0fc:	b21b      	sxth	r3, r3
 801d0fe:	4013      	ands	r3, r2
 801d100:	b21b      	sxth	r3, r3
 801d102:	b29a      	uxth	r2, r3
 801d104:	4b43      	ldr	r3, [pc, #268]	; (801d214 <send+0x1ec>)
 801d106:	801a      	strh	r2, [r3, #0]
 801d108:	e00d      	b.n	801d126 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 801d10a:	7bfb      	ldrb	r3, [r7, #15]
 801d10c:	f003 0308 	and.w	r3, r3, #8
 801d110:	2b00      	cmp	r3, #0
 801d112:	d006      	beq.n	801d122 <send+0xfa>
      {
         close(sn);
 801d114:	79fb      	ldrb	r3, [r7, #7]
 801d116:	4618      	mov	r0, r3
 801d118:	f7ff fe3c 	bl	801cd94 <close>
         return SOCKERR_TIMEOUT;
 801d11c:	f06f 030c 	mvn.w	r3, #12
 801d120:	e073      	b.n	801d20a <send+0x1e2>
      }
      else return SOCK_BUSY;
 801d122:	2300      	movs	r3, #0
 801d124:	e071      	b.n	801d20a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 801d126:	79fb      	ldrb	r3, [r7, #7]
 801d128:	009b      	lsls	r3, r3, #2
 801d12a:	3301      	adds	r3, #1
 801d12c:	00db      	lsls	r3, r3, #3
 801d12e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801d132:	4618      	mov	r0, r3
 801d134:	f7ff fa70 	bl	801c618 <WIZCHIP_READ>
 801d138:	4603      	mov	r3, r0
 801d13a:	b29b      	uxth	r3, r3
 801d13c:	029b      	lsls	r3, r3, #10
 801d13e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 801d140:	88ba      	ldrh	r2, [r7, #4]
 801d142:	89bb      	ldrh	r3, [r7, #12]
 801d144:	429a      	cmp	r2, r3
 801d146:	d901      	bls.n	801d14c <send+0x124>
 801d148:	89bb      	ldrh	r3, [r7, #12]
 801d14a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 801d14c:	79fb      	ldrb	r3, [r7, #7]
 801d14e:	4618      	mov	r0, r3
 801d150:	f7ff fbbc 	bl	801c8cc <getSn_TX_FSR>
 801d154:	4603      	mov	r3, r0
 801d156:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 801d158:	79fb      	ldrb	r3, [r7, #7]
 801d15a:	009b      	lsls	r3, r3, #2
 801d15c:	3301      	adds	r3, #1
 801d15e:	00db      	lsls	r3, r3, #3
 801d160:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d164:	4618      	mov	r0, r3
 801d166:	f7ff fa57 	bl	801c618 <WIZCHIP_READ>
 801d16a:	4603      	mov	r3, r0
 801d16c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 801d16e:	7bfb      	ldrb	r3, [r7, #15]
 801d170:	2b17      	cmp	r3, #23
 801d172:	d009      	beq.n	801d188 <send+0x160>
 801d174:	7bfb      	ldrb	r3, [r7, #15]
 801d176:	2b1c      	cmp	r3, #28
 801d178:	d006      	beq.n	801d188 <send+0x160>
      {
         close(sn);
 801d17a:	79fb      	ldrb	r3, [r7, #7]
 801d17c:	4618      	mov	r0, r3
 801d17e:	f7ff fe09 	bl	801cd94 <close>
         return SOCKERR_SOCKSTATUS;
 801d182:	f06f 0306 	mvn.w	r3, #6
 801d186:	e040      	b.n	801d20a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801d188:	4b23      	ldr	r3, [pc, #140]	; (801d218 <send+0x1f0>)
 801d18a:	881b      	ldrh	r3, [r3, #0]
 801d18c:	461a      	mov	r2, r3
 801d18e:	79fb      	ldrb	r3, [r7, #7]
 801d190:	fa42 f303 	asr.w	r3, r2, r3
 801d194:	f003 0301 	and.w	r3, r3, #1
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d005      	beq.n	801d1a8 <send+0x180>
 801d19c:	88ba      	ldrh	r2, [r7, #4]
 801d19e:	89bb      	ldrh	r3, [r7, #12]
 801d1a0:	429a      	cmp	r2, r3
 801d1a2:	d901      	bls.n	801d1a8 <send+0x180>
 801d1a4:	2300      	movs	r3, #0
 801d1a6:	e030      	b.n	801d20a <send+0x1e2>
      if(len <= freesize) break;
 801d1a8:	88ba      	ldrh	r2, [r7, #4]
 801d1aa:	89bb      	ldrh	r3, [r7, #12]
 801d1ac:	429a      	cmp	r2, r3
 801d1ae:	d900      	bls.n	801d1b2 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 801d1b0:	e7cc      	b.n	801d14c <send+0x124>
      if(len <= freesize) break;
 801d1b2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 801d1b4:	88ba      	ldrh	r2, [r7, #4]
 801d1b6:	79fb      	ldrb	r3, [r7, #7]
 801d1b8:	6839      	ldr	r1, [r7, #0]
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	f7ff fc1c 	bl	801c9f8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 801d1c0:	79fb      	ldrb	r3, [r7, #7]
 801d1c2:	009b      	lsls	r3, r3, #2
 801d1c4:	3301      	adds	r3, #1
 801d1c6:	00db      	lsls	r3, r3, #3
 801d1c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d1cc:	2120      	movs	r1, #32
 801d1ce:	4618      	mov	r0, r3
 801d1d0:	f7ff fa6e 	bl	801c6b0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 801d1d4:	bf00      	nop
 801d1d6:	79fb      	ldrb	r3, [r7, #7]
 801d1d8:	009b      	lsls	r3, r3, #2
 801d1da:	3301      	adds	r3, #1
 801d1dc:	00db      	lsls	r3, r3, #3
 801d1de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	f7ff fa18 	bl	801c618 <WIZCHIP_READ>
 801d1e8:	4603      	mov	r3, r0
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d1f3      	bne.n	801d1d6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 801d1ee:	79fb      	ldrb	r3, [r7, #7]
 801d1f0:	2201      	movs	r2, #1
 801d1f2:	fa02 f303 	lsl.w	r3, r2, r3
 801d1f6:	b21a      	sxth	r2, r3
 801d1f8:	4b06      	ldr	r3, [pc, #24]	; (801d214 <send+0x1ec>)
 801d1fa:	881b      	ldrh	r3, [r3, #0]
 801d1fc:	b21b      	sxth	r3, r3
 801d1fe:	4313      	orrs	r3, r2
 801d200:	b21b      	sxth	r3, r3
 801d202:	b29a      	uxth	r2, r3
 801d204:	4b03      	ldr	r3, [pc, #12]	; (801d214 <send+0x1ec>)
 801d206:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801d208:	88bb      	ldrh	r3, [r7, #4]
}
 801d20a:	4618      	mov	r0, r3
 801d20c:	3710      	adds	r7, #16
 801d20e:	46bd      	mov	sp, r7
 801d210:	bd80      	pop	{r7, pc}
 801d212:	bf00      	nop
 801d214:	200028e6 	.word	0x200028e6
 801d218:	200028e4 	.word	0x200028e4

0801d21c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801d21c:	b590      	push	{r4, r7, lr}
 801d21e:	b085      	sub	sp, #20
 801d220:	af00      	add	r7, sp, #0
 801d222:	4603      	mov	r3, r0
 801d224:	6039      	str	r1, [r7, #0]
 801d226:	71fb      	strb	r3, [r7, #7]
 801d228:	4613      	mov	r3, r2
 801d22a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 801d22c:	2300      	movs	r3, #0
 801d22e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 801d230:	2300      	movs	r3, #0
 801d232:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 801d234:	79fb      	ldrb	r3, [r7, #7]
 801d236:	2b08      	cmp	r3, #8
 801d238:	d902      	bls.n	801d240 <recv+0x24>
 801d23a:	f04f 33ff 	mov.w	r3, #4294967295
 801d23e:	e09c      	b.n	801d37a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801d240:	79fb      	ldrb	r3, [r7, #7]
 801d242:	009b      	lsls	r3, r3, #2
 801d244:	3301      	adds	r3, #1
 801d246:	00db      	lsls	r3, r3, #3
 801d248:	4618      	mov	r0, r3
 801d24a:	f7ff f9e5 	bl	801c618 <WIZCHIP_READ>
 801d24e:	4603      	mov	r3, r0
 801d250:	f003 030f 	and.w	r3, r3, #15
 801d254:	2b01      	cmp	r3, #1
 801d256:	d002      	beq.n	801d25e <recv+0x42>
 801d258:	f06f 0304 	mvn.w	r3, #4
 801d25c:	e08d      	b.n	801d37a <recv+0x15e>
   CHECK_SOCKDATA();
 801d25e:	88bb      	ldrh	r3, [r7, #4]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d102      	bne.n	801d26a <recv+0x4e>
 801d264:	f06f 030d 	mvn.w	r3, #13
 801d268:	e087      	b.n	801d37a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 801d26a:	79fb      	ldrb	r3, [r7, #7]
 801d26c:	009b      	lsls	r3, r3, #2
 801d26e:	3301      	adds	r3, #1
 801d270:	00db      	lsls	r3, r3, #3
 801d272:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801d276:	4618      	mov	r0, r3
 801d278:	f7ff f9ce 	bl	801c618 <WIZCHIP_READ>
 801d27c:	4603      	mov	r3, r0
 801d27e:	b29b      	uxth	r3, r3
 801d280:	029b      	lsls	r3, r3, #10
 801d282:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 801d284:	89ba      	ldrh	r2, [r7, #12]
 801d286:	88bb      	ldrh	r3, [r7, #4]
 801d288:	429a      	cmp	r2, r3
 801d28a:	d201      	bcs.n	801d290 <recv+0x74>
 801d28c:	89bb      	ldrh	r3, [r7, #12]
 801d28e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 801d290:	79fb      	ldrb	r3, [r7, #7]
 801d292:	4618      	mov	r0, r3
 801d294:	f7ff fb65 	bl	801c962 <getSn_RX_RSR>
 801d298:	4603      	mov	r3, r0
 801d29a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 801d29c:	79fb      	ldrb	r3, [r7, #7]
 801d29e:	009b      	lsls	r3, r3, #2
 801d2a0:	3301      	adds	r3, #1
 801d2a2:	00db      	lsls	r3, r3, #3
 801d2a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d2a8:	4618      	mov	r0, r3
 801d2aa:	f7ff f9b5 	bl	801c618 <WIZCHIP_READ>
 801d2ae:	4603      	mov	r3, r0
 801d2b0:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 801d2b2:	7bfb      	ldrb	r3, [r7, #15]
 801d2b4:	2b17      	cmp	r3, #23
 801d2b6:	d026      	beq.n	801d306 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 801d2b8:	7bfb      	ldrb	r3, [r7, #15]
 801d2ba:	2b1c      	cmp	r3, #28
 801d2bc:	d11c      	bne.n	801d2f8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 801d2be:	89bb      	ldrh	r3, [r7, #12]
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d133      	bne.n	801d32c <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 801d2c4:	79fb      	ldrb	r3, [r7, #7]
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f7ff fb00 	bl	801c8cc <getSn_TX_FSR>
 801d2cc:	4603      	mov	r3, r0
 801d2ce:	461c      	mov	r4, r3
 801d2d0:	79fb      	ldrb	r3, [r7, #7]
 801d2d2:	009b      	lsls	r3, r3, #2
 801d2d4:	3301      	adds	r3, #1
 801d2d6:	00db      	lsls	r3, r3, #3
 801d2d8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801d2dc:	4618      	mov	r0, r3
 801d2de:	f7ff f99b 	bl	801c618 <WIZCHIP_READ>
 801d2e2:	4603      	mov	r3, r0
 801d2e4:	029b      	lsls	r3, r3, #10
 801d2e6:	429c      	cmp	r4, r3
 801d2e8:	d10d      	bne.n	801d306 <recv+0xea>
               {
                  close(sn);
 801d2ea:	79fb      	ldrb	r3, [r7, #7]
 801d2ec:	4618      	mov	r0, r3
 801d2ee:	f7ff fd51 	bl	801cd94 <close>
                  return SOCKERR_SOCKSTATUS;
 801d2f2:	f06f 0306 	mvn.w	r3, #6
 801d2f6:	e040      	b.n	801d37a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 801d2f8:	79fb      	ldrb	r3, [r7, #7]
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f7ff fd4a 	bl	801cd94 <close>
               return SOCKERR_SOCKSTATUS;
 801d300:	f06f 0306 	mvn.w	r3, #6
 801d304:	e039      	b.n	801d37a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801d306:	4b1f      	ldr	r3, [pc, #124]	; (801d384 <recv+0x168>)
 801d308:	881b      	ldrh	r3, [r3, #0]
 801d30a:	461a      	mov	r2, r3
 801d30c:	79fb      	ldrb	r3, [r7, #7]
 801d30e:	fa42 f303 	asr.w	r3, r2, r3
 801d312:	f003 0301 	and.w	r3, r3, #1
 801d316:	2b00      	cmp	r3, #0
 801d318:	d004      	beq.n	801d324 <recv+0x108>
 801d31a:	89bb      	ldrh	r3, [r7, #12]
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d101      	bne.n	801d324 <recv+0x108>
 801d320:	2300      	movs	r3, #0
 801d322:	e02a      	b.n	801d37a <recv+0x15e>
         if(recvsize != 0) break;
 801d324:	89bb      	ldrh	r3, [r7, #12]
 801d326:	2b00      	cmp	r3, #0
 801d328:	d102      	bne.n	801d330 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 801d32a:	e7b1      	b.n	801d290 <recv+0x74>
               if(recvsize != 0) break;
 801d32c:	bf00      	nop
 801d32e:	e000      	b.n	801d332 <recv+0x116>
         if(recvsize != 0) break;
 801d330:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 801d332:	89ba      	ldrh	r2, [r7, #12]
 801d334:	88bb      	ldrh	r3, [r7, #4]
 801d336:	429a      	cmp	r2, r3
 801d338:	d201      	bcs.n	801d33e <recv+0x122>
 801d33a:	89bb      	ldrh	r3, [r7, #12]
 801d33c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 801d33e:	88ba      	ldrh	r2, [r7, #4]
 801d340:	79fb      	ldrb	r3, [r7, #7]
 801d342:	6839      	ldr	r1, [r7, #0]
 801d344:	4618      	mov	r0, r3
 801d346:	f7ff fbb3 	bl	801cab0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 801d34a:	79fb      	ldrb	r3, [r7, #7]
 801d34c:	009b      	lsls	r3, r3, #2
 801d34e:	3301      	adds	r3, #1
 801d350:	00db      	lsls	r3, r3, #3
 801d352:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d356:	2140      	movs	r1, #64	; 0x40
 801d358:	4618      	mov	r0, r3
 801d35a:	f7ff f9a9 	bl	801c6b0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801d35e:	bf00      	nop
 801d360:	79fb      	ldrb	r3, [r7, #7]
 801d362:	009b      	lsls	r3, r3, #2
 801d364:	3301      	adds	r3, #1
 801d366:	00db      	lsls	r3, r3, #3
 801d368:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d36c:	4618      	mov	r0, r3
 801d36e:	f7ff f953 	bl	801c618 <WIZCHIP_READ>
 801d372:	4603      	mov	r3, r0
 801d374:	2b00      	cmp	r3, #0
 801d376:	d1f3      	bne.n	801d360 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801d378:	88bb      	ldrh	r3, [r7, #4]
}
 801d37a:	4618      	mov	r0, r3
 801d37c:	3714      	adds	r7, #20
 801d37e:	46bd      	mov	sp, r7
 801d380:	bd90      	pop	{r4, r7, pc}
 801d382:	bf00      	nop
 801d384:	200028e4 	.word	0x200028e4

0801d388 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 801d388:	b480      	push	{r7}
 801d38a:	af00      	add	r7, sp, #0
 801d38c:	bf00      	nop
 801d38e:	46bd      	mov	sp, r7
 801d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d394:	4770      	bx	lr

0801d396 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 801d396:	b480      	push	{r7}
 801d398:	af00      	add	r7, sp, #0
 801d39a:	bf00      	nop
 801d39c:	46bd      	mov	sp, r7
 801d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3a2:	4770      	bx	lr

0801d3a4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 801d3a4:	b480      	push	{r7}
 801d3a6:	af00      	add	r7, sp, #0
 801d3a8:	bf00      	nop
 801d3aa:	46bd      	mov	sp, r7
 801d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3b0:	4770      	bx	lr

0801d3b2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 801d3b2:	b480      	push	{r7}
 801d3b4:	af00      	add	r7, sp, #0
 801d3b6:	bf00      	nop
 801d3b8:	46bd      	mov	sp, r7
 801d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3be:	4770      	bx	lr

0801d3c0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 801d3c0:	b480      	push	{r7}
 801d3c2:	b083      	sub	sp, #12
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	781b      	ldrb	r3, [r3, #0]
 801d3cc:	b2db      	uxtb	r3, r3
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	370c      	adds	r7, #12
 801d3d2:	46bd      	mov	sp, r7
 801d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3d8:	4770      	bx	lr

0801d3da <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 801d3da:	b480      	push	{r7}
 801d3dc:	b083      	sub	sp, #12
 801d3de:	af00      	add	r7, sp, #0
 801d3e0:	6078      	str	r0, [r7, #4]
 801d3e2:	460b      	mov	r3, r1
 801d3e4:	70fb      	strb	r3, [r7, #3]
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	78fa      	ldrb	r2, [r7, #3]
 801d3ea:	701a      	strb	r2, [r3, #0]
 801d3ec:	bf00      	nop
 801d3ee:	370c      	adds	r7, #12
 801d3f0:	46bd      	mov	sp, r7
 801d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f6:	4770      	bx	lr

0801d3f8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 801d3f8:	b480      	push	{r7}
 801d3fa:	af00      	add	r7, sp, #0
 801d3fc:	2300      	movs	r3, #0
 801d3fe:	4618      	mov	r0, r3
 801d400:	46bd      	mov	sp, r7
 801d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d406:	4770      	bx	lr

0801d408 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 801d408:	b480      	push	{r7}
 801d40a:	b083      	sub	sp, #12
 801d40c:	af00      	add	r7, sp, #0
 801d40e:	4603      	mov	r3, r0
 801d410:	71fb      	strb	r3, [r7, #7]
 801d412:	bf00      	nop
 801d414:	370c      	adds	r7, #12
 801d416:	46bd      	mov	sp, r7
 801d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d41c:	4770      	bx	lr
	...

0801d420 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 801d420:	b480      	push	{r7}
 801d422:	b083      	sub	sp, #12
 801d424:	af00      	add	r7, sp, #0
 801d426:	6078      	str	r0, [r7, #4]
 801d428:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d002      	beq.n	801d436 <reg_wizchip_cs_cbfunc+0x16>
 801d430:	683b      	ldr	r3, [r7, #0]
 801d432:	2b00      	cmp	r3, #0
 801d434:	d106      	bne.n	801d444 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 801d436:	4b0a      	ldr	r3, [pc, #40]	; (801d460 <reg_wizchip_cs_cbfunc+0x40>)
 801d438:	4a0a      	ldr	r2, [pc, #40]	; (801d464 <reg_wizchip_cs_cbfunc+0x44>)
 801d43a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 801d43c:	4b08      	ldr	r3, [pc, #32]	; (801d460 <reg_wizchip_cs_cbfunc+0x40>)
 801d43e:	4a0a      	ldr	r2, [pc, #40]	; (801d468 <reg_wizchip_cs_cbfunc+0x48>)
 801d440:	619a      	str	r2, [r3, #24]
 801d442:	e006      	b.n	801d452 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 801d444:	4a06      	ldr	r2, [pc, #24]	; (801d460 <reg_wizchip_cs_cbfunc+0x40>)
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 801d44a:	4a05      	ldr	r2, [pc, #20]	; (801d460 <reg_wizchip_cs_cbfunc+0x40>)
 801d44c:	683b      	ldr	r3, [r7, #0]
 801d44e:	6193      	str	r3, [r2, #24]
   }
}
 801d450:	bf00      	nop
 801d452:	bf00      	nop
 801d454:	370c      	adds	r7, #12
 801d456:	46bd      	mov	sp, r7
 801d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d45c:	4770      	bx	lr
 801d45e:	bf00      	nop
 801d460:	20000048 	.word	0x20000048
 801d464:	0801d3a5 	.word	0x0801d3a5
 801d468:	0801d3b3 	.word	0x0801d3b3

0801d46c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 801d46c:	b480      	push	{r7}
 801d46e:	b083      	sub	sp, #12
 801d470:	af00      	add	r7, sp, #0
 801d472:	6078      	str	r0, [r7, #4]
 801d474:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 801d476:	bf00      	nop
 801d478:	4b0f      	ldr	r3, [pc, #60]	; (801d4b8 <reg_wizchip_spi_cbfunc+0x4c>)
 801d47a:	881b      	ldrh	r3, [r3, #0]
 801d47c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d480:	2b00      	cmp	r3, #0
 801d482:	d0f9      	beq.n	801d478 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	2b00      	cmp	r3, #0
 801d488:	d002      	beq.n	801d490 <reg_wizchip_spi_cbfunc+0x24>
 801d48a:	683b      	ldr	r3, [r7, #0]
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d106      	bne.n	801d49e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801d490:	4b09      	ldr	r3, [pc, #36]	; (801d4b8 <reg_wizchip_spi_cbfunc+0x4c>)
 801d492:	4a0a      	ldr	r2, [pc, #40]	; (801d4bc <reg_wizchip_spi_cbfunc+0x50>)
 801d494:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 801d496:	4b08      	ldr	r3, [pc, #32]	; (801d4b8 <reg_wizchip_spi_cbfunc+0x4c>)
 801d498:	4a09      	ldr	r2, [pc, #36]	; (801d4c0 <reg_wizchip_spi_cbfunc+0x54>)
 801d49a:	621a      	str	r2, [r3, #32]
 801d49c:	e006      	b.n	801d4ac <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 801d49e:	4a06      	ldr	r2, [pc, #24]	; (801d4b8 <reg_wizchip_spi_cbfunc+0x4c>)
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 801d4a4:	4a04      	ldr	r2, [pc, #16]	; (801d4b8 <reg_wizchip_spi_cbfunc+0x4c>)
 801d4a6:	683b      	ldr	r3, [r7, #0]
 801d4a8:	6213      	str	r3, [r2, #32]
   }
}
 801d4aa:	bf00      	nop
 801d4ac:	bf00      	nop
 801d4ae:	370c      	adds	r7, #12
 801d4b0:	46bd      	mov	sp, r7
 801d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4b6:	4770      	bx	lr
 801d4b8:	20000048 	.word	0x20000048
 801d4bc:	0801d3f9 	.word	0x0801d3f9
 801d4c0:	0801d409 	.word	0x0801d409

0801d4c4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b086      	sub	sp, #24
 801d4c8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801d4ca:	1d3b      	adds	r3, r7, #4
 801d4cc:	2206      	movs	r2, #6
 801d4ce:	4619      	mov	r1, r3
 801d4d0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801d4d4:	f7ff f93a 	bl	801c74c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801d4d8:	f107 0314 	add.w	r3, r7, #20
 801d4dc:	2204      	movs	r2, #4
 801d4de:	4619      	mov	r1, r3
 801d4e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d4e4:	f7ff f932 	bl	801c74c <WIZCHIP_READ_BUF>
 801d4e8:	f107 0310 	add.w	r3, r7, #16
 801d4ec:	2204      	movs	r2, #4
 801d4ee:	4619      	mov	r1, r3
 801d4f0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801d4f4:	f7ff f92a 	bl	801c74c <WIZCHIP_READ_BUF>
 801d4f8:	f107 030c 	add.w	r3, r7, #12
 801d4fc:	2204      	movs	r2, #4
 801d4fe:	4619      	mov	r1, r3
 801d500:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801d504:	f7ff f922 	bl	801c74c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801d508:	2180      	movs	r1, #128	; 0x80
 801d50a:	2000      	movs	r0, #0
 801d50c:	f7ff f8d0 	bl	801c6b0 <WIZCHIP_WRITE>
   getMR(); // for delay
 801d510:	2000      	movs	r0, #0
 801d512:	f7ff f881 	bl	801c618 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801d516:	1d3b      	adds	r3, r7, #4
 801d518:	2206      	movs	r2, #6
 801d51a:	4619      	mov	r1, r3
 801d51c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801d520:	f7ff f974 	bl	801c80c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801d524:	f107 0314 	add.w	r3, r7, #20
 801d528:	2204      	movs	r2, #4
 801d52a:	4619      	mov	r1, r3
 801d52c:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d530:	f7ff f96c 	bl	801c80c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801d534:	f107 0310 	add.w	r3, r7, #16
 801d538:	2204      	movs	r2, #4
 801d53a:	4619      	mov	r1, r3
 801d53c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801d540:	f7ff f964 	bl	801c80c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801d544:	f107 030c 	add.w	r3, r7, #12
 801d548:	2204      	movs	r2, #4
 801d54a:	4619      	mov	r1, r3
 801d54c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801d550:	f7ff f95c 	bl	801c80c <WIZCHIP_WRITE_BUF>
}
 801d554:	bf00      	nop
 801d556:	3718      	adds	r7, #24
 801d558:	46bd      	mov	sp, r7
 801d55a:	bd80      	pop	{r7, pc}

0801d55c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801d55c:	b580      	push	{r7, lr}
 801d55e:	b084      	sub	sp, #16
 801d560:	af00      	add	r7, sp, #0
 801d562:	6078      	str	r0, [r7, #4]
 801d564:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 801d566:	2300      	movs	r3, #0
 801d568:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 801d56a:	f7ff ffab 	bl	801d4c4 <wizchip_sw_reset>
   if(txsize)
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	2b00      	cmp	r3, #0
 801d572:	d03b      	beq.n	801d5ec <wizchip_init+0x90>
   {
      tmp = 0;
 801d574:	2300      	movs	r3, #0
 801d576:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801d578:	2300      	movs	r3, #0
 801d57a:	73fb      	strb	r3, [r7, #15]
 801d57c:	e015      	b.n	801d5aa <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 801d57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d582:	687a      	ldr	r2, [r7, #4]
 801d584:	4413      	add	r3, r2
 801d586:	781a      	ldrb	r2, [r3, #0]
 801d588:	7bbb      	ldrb	r3, [r7, #14]
 801d58a:	4413      	add	r3, r2
 801d58c:	b2db      	uxtb	r3, r3
 801d58e:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801d590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d594:	2b10      	cmp	r3, #16
 801d596:	dd02      	ble.n	801d59e <wizchip_init+0x42>
 801d598:	f04f 33ff 	mov.w	r3, #4294967295
 801d59c:	e066      	b.n	801d66c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801d59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5a2:	b2db      	uxtb	r3, r3
 801d5a4:	3301      	adds	r3, #1
 801d5a6:	b2db      	uxtb	r3, r3
 801d5a8:	73fb      	strb	r3, [r7, #15]
 801d5aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5ae:	2b07      	cmp	r3, #7
 801d5b0:	dde5      	ble.n	801d57e <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801d5b2:	2300      	movs	r3, #0
 801d5b4:	73fb      	strb	r3, [r7, #15]
 801d5b6:	e015      	b.n	801d5e4 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801d5b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5bc:	009b      	lsls	r3, r3, #2
 801d5be:	3301      	adds	r3, #1
 801d5c0:	00db      	lsls	r3, r3, #3
 801d5c2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801d5c6:	4618      	mov	r0, r3
 801d5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5cc:	687a      	ldr	r2, [r7, #4]
 801d5ce:	4413      	add	r3, r2
 801d5d0:	781b      	ldrb	r3, [r3, #0]
 801d5d2:	4619      	mov	r1, r3
 801d5d4:	f7ff f86c 	bl	801c6b0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801d5d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5dc:	b2db      	uxtb	r3, r3
 801d5de:	3301      	adds	r3, #1
 801d5e0:	b2db      	uxtb	r3, r3
 801d5e2:	73fb      	strb	r3, [r7, #15]
 801d5e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5e8:	2b07      	cmp	r3, #7
 801d5ea:	dde5      	ble.n	801d5b8 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801d5ec:	683b      	ldr	r3, [r7, #0]
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d03b      	beq.n	801d66a <wizchip_init+0x10e>
   {
      tmp = 0;
 801d5f2:	2300      	movs	r3, #0
 801d5f4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	73fb      	strb	r3, [r7, #15]
 801d5fa:	e015      	b.n	801d628 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801d5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d600:	683a      	ldr	r2, [r7, #0]
 801d602:	4413      	add	r3, r2
 801d604:	781a      	ldrb	r2, [r3, #0]
 801d606:	7bbb      	ldrb	r3, [r7, #14]
 801d608:	4413      	add	r3, r2
 801d60a:	b2db      	uxtb	r3, r3
 801d60c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801d60e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d612:	2b10      	cmp	r3, #16
 801d614:	dd02      	ble.n	801d61c <wizchip_init+0xc0>
 801d616:	f04f 33ff 	mov.w	r3, #4294967295
 801d61a:	e027      	b.n	801d66c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801d61c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d620:	b2db      	uxtb	r3, r3
 801d622:	3301      	adds	r3, #1
 801d624:	b2db      	uxtb	r3, r3
 801d626:	73fb      	strb	r3, [r7, #15]
 801d628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d62c:	2b07      	cmp	r3, #7
 801d62e:	dde5      	ble.n	801d5fc <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801d630:	2300      	movs	r3, #0
 801d632:	73fb      	strb	r3, [r7, #15]
 801d634:	e015      	b.n	801d662 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801d636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d63a:	009b      	lsls	r3, r3, #2
 801d63c:	3301      	adds	r3, #1
 801d63e:	00db      	lsls	r3, r3, #3
 801d640:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801d644:	4618      	mov	r0, r3
 801d646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d64a:	683a      	ldr	r2, [r7, #0]
 801d64c:	4413      	add	r3, r2
 801d64e:	781b      	ldrb	r3, [r3, #0]
 801d650:	4619      	mov	r1, r3
 801d652:	f7ff f82d 	bl	801c6b0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801d656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d65a:	b2db      	uxtb	r3, r3
 801d65c:	3301      	adds	r3, #1
 801d65e:	b2db      	uxtb	r3, r3
 801d660:	73fb      	strb	r3, [r7, #15]
 801d662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d666:	2b07      	cmp	r3, #7
 801d668:	dde5      	ble.n	801d636 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801d66a:	2300      	movs	r3, #0
}
 801d66c:	4618      	mov	r0, r3
 801d66e:	3710      	adds	r7, #16
 801d670:	46bd      	mov	sp, r7
 801d672:	bd80      	pop	{r7, pc}

0801d674 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801d674:	b580      	push	{r7, lr}
 801d676:	b082      	sub	sp, #8
 801d678:	af00      	add	r7, sp, #0
 801d67a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	2206      	movs	r2, #6
 801d680:	4619      	mov	r1, r3
 801d682:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801d686:	f7ff f8c1 	bl	801c80c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	330e      	adds	r3, #14
 801d68e:	2204      	movs	r2, #4
 801d690:	4619      	mov	r1, r3
 801d692:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d696:	f7ff f8b9 	bl	801c80c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	330a      	adds	r3, #10
 801d69e:	2204      	movs	r2, #4
 801d6a0:	4619      	mov	r1, r3
 801d6a2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801d6a6:	f7ff f8b1 	bl	801c80c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	3306      	adds	r3, #6
 801d6ae:	2204      	movs	r2, #4
 801d6b0:	4619      	mov	r1, r3
 801d6b2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801d6b6:	f7ff f8a9 	bl	801c80c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	7c9a      	ldrb	r2, [r3, #18]
 801d6be:	4b0b      	ldr	r3, [pc, #44]	; (801d6ec <wizchip_setnetinfo+0x78>)
 801d6c0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	7cda      	ldrb	r2, [r3, #19]
 801d6c6:	4b09      	ldr	r3, [pc, #36]	; (801d6ec <wizchip_setnetinfo+0x78>)
 801d6c8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801d6ca:	687b      	ldr	r3, [r7, #4]
 801d6cc:	7d1a      	ldrb	r2, [r3, #20]
 801d6ce:	4b07      	ldr	r3, [pc, #28]	; (801d6ec <wizchip_setnetinfo+0x78>)
 801d6d0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	7d5a      	ldrb	r2, [r3, #21]
 801d6d6:	4b05      	ldr	r3, [pc, #20]	; (801d6ec <wizchip_setnetinfo+0x78>)
 801d6d8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	7d9a      	ldrb	r2, [r3, #22]
 801d6de:	4b04      	ldr	r3, [pc, #16]	; (801d6f0 <wizchip_setnetinfo+0x7c>)
 801d6e0:	701a      	strb	r2, [r3, #0]
}
 801d6e2:	bf00      	nop
 801d6e4:	3708      	adds	r7, #8
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	bd80      	pop	{r7, pc}
 801d6ea:	bf00      	nop
 801d6ec:	20002900 	.word	0x20002900
 801d6f0:	20002904 	.word	0x20002904

0801d6f4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b082      	sub	sp, #8
 801d6f8:	af00      	add	r7, sp, #0
 801d6fa:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	2206      	movs	r2, #6
 801d700:	4619      	mov	r1, r3
 801d702:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801d706:	f7ff f821 	bl	801c74c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	330e      	adds	r3, #14
 801d70e:	2204      	movs	r2, #4
 801d710:	4619      	mov	r1, r3
 801d712:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d716:	f7ff f819 	bl	801c74c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	330a      	adds	r3, #10
 801d71e:	2204      	movs	r2, #4
 801d720:	4619      	mov	r1, r3
 801d722:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801d726:	f7ff f811 	bl	801c74c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	3306      	adds	r3, #6
 801d72e:	2204      	movs	r2, #4
 801d730:	4619      	mov	r1, r3
 801d732:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801d736:	f7ff f809 	bl	801c74c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801d73a:	4b0c      	ldr	r3, [pc, #48]	; (801d76c <wizchip_getnetinfo+0x78>)
 801d73c:	781a      	ldrb	r2, [r3, #0]
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801d742:	4b0a      	ldr	r3, [pc, #40]	; (801d76c <wizchip_getnetinfo+0x78>)
 801d744:	785a      	ldrb	r2, [r3, #1]
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801d74a:	4b08      	ldr	r3, [pc, #32]	; (801d76c <wizchip_getnetinfo+0x78>)
 801d74c:	789a      	ldrb	r2, [r3, #2]
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801d752:	4b06      	ldr	r3, [pc, #24]	; (801d76c <wizchip_getnetinfo+0x78>)
 801d754:	78da      	ldrb	r2, [r3, #3]
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801d75a:	4b05      	ldr	r3, [pc, #20]	; (801d770 <wizchip_getnetinfo+0x7c>)
 801d75c:	781a      	ldrb	r2, [r3, #0]
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	759a      	strb	r2, [r3, #22]
}
 801d762:	bf00      	nop
 801d764:	3708      	adds	r7, #8
 801d766:	46bd      	mov	sp, r7
 801d768:	bd80      	pop	{r7, pc}
 801d76a:	bf00      	nop
 801d76c:	20002900 	.word	0x20002900
 801d770:	20002904 	.word	0x20002904

0801d774 <calloc>:
 801d774:	4b02      	ldr	r3, [pc, #8]	; (801d780 <calloc+0xc>)
 801d776:	460a      	mov	r2, r1
 801d778:	4601      	mov	r1, r0
 801d77a:	6818      	ldr	r0, [r3, #0]
 801d77c:	f000 b87c 	b.w	801d878 <_calloc_r>
 801d780:	20000074 	.word	0x20000074

0801d784 <__errno>:
 801d784:	4b01      	ldr	r3, [pc, #4]	; (801d78c <__errno+0x8>)
 801d786:	6818      	ldr	r0, [r3, #0]
 801d788:	4770      	bx	lr
 801d78a:	bf00      	nop
 801d78c:	20000074 	.word	0x20000074

0801d790 <__libc_init_array>:
 801d790:	b570      	push	{r4, r5, r6, lr}
 801d792:	4d0d      	ldr	r5, [pc, #52]	; (801d7c8 <__libc_init_array+0x38>)
 801d794:	4c0d      	ldr	r4, [pc, #52]	; (801d7cc <__libc_init_array+0x3c>)
 801d796:	1b64      	subs	r4, r4, r5
 801d798:	10a4      	asrs	r4, r4, #2
 801d79a:	2600      	movs	r6, #0
 801d79c:	42a6      	cmp	r6, r4
 801d79e:	d109      	bne.n	801d7b4 <__libc_init_array+0x24>
 801d7a0:	4d0b      	ldr	r5, [pc, #44]	; (801d7d0 <__libc_init_array+0x40>)
 801d7a2:	4c0c      	ldr	r4, [pc, #48]	; (801d7d4 <__libc_init_array+0x44>)
 801d7a4:	f001 fb82 	bl	801eeac <_init>
 801d7a8:	1b64      	subs	r4, r4, r5
 801d7aa:	10a4      	asrs	r4, r4, #2
 801d7ac:	2600      	movs	r6, #0
 801d7ae:	42a6      	cmp	r6, r4
 801d7b0:	d105      	bne.n	801d7be <__libc_init_array+0x2e>
 801d7b2:	bd70      	pop	{r4, r5, r6, pc}
 801d7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7b8:	4798      	blx	r3
 801d7ba:	3601      	adds	r6, #1
 801d7bc:	e7ee      	b.n	801d79c <__libc_init_array+0xc>
 801d7be:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7c2:	4798      	blx	r3
 801d7c4:	3601      	adds	r6, #1
 801d7c6:	e7f2      	b.n	801d7ae <__libc_init_array+0x1e>
 801d7c8:	08024a7c 	.word	0x08024a7c
 801d7cc:	08024a7c 	.word	0x08024a7c
 801d7d0:	08024a7c 	.word	0x08024a7c
 801d7d4:	08024a80 	.word	0x08024a80

0801d7d8 <malloc>:
 801d7d8:	4b02      	ldr	r3, [pc, #8]	; (801d7e4 <malloc+0xc>)
 801d7da:	4601      	mov	r1, r0
 801d7dc:	6818      	ldr	r0, [r3, #0]
 801d7de:	f000 b8cd 	b.w	801d97c <_malloc_r>
 801d7e2:	bf00      	nop
 801d7e4:	20000074 	.word	0x20000074

0801d7e8 <free>:
 801d7e8:	4b02      	ldr	r3, [pc, #8]	; (801d7f4 <free+0xc>)
 801d7ea:	4601      	mov	r1, r0
 801d7ec:	6818      	ldr	r0, [r3, #0]
 801d7ee:	f000 b859 	b.w	801d8a4 <_free_r>
 801d7f2:	bf00      	nop
 801d7f4:	20000074 	.word	0x20000074

0801d7f8 <memcmp>:
 801d7f8:	b510      	push	{r4, lr}
 801d7fa:	3901      	subs	r1, #1
 801d7fc:	4402      	add	r2, r0
 801d7fe:	4290      	cmp	r0, r2
 801d800:	d101      	bne.n	801d806 <memcmp+0xe>
 801d802:	2000      	movs	r0, #0
 801d804:	e005      	b.n	801d812 <memcmp+0x1a>
 801d806:	7803      	ldrb	r3, [r0, #0]
 801d808:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d80c:	42a3      	cmp	r3, r4
 801d80e:	d001      	beq.n	801d814 <memcmp+0x1c>
 801d810:	1b18      	subs	r0, r3, r4
 801d812:	bd10      	pop	{r4, pc}
 801d814:	3001      	adds	r0, #1
 801d816:	e7f2      	b.n	801d7fe <memcmp+0x6>

0801d818 <memcpy>:
 801d818:	440a      	add	r2, r1
 801d81a:	4291      	cmp	r1, r2
 801d81c:	f100 33ff 	add.w	r3, r0, #4294967295
 801d820:	d100      	bne.n	801d824 <memcpy+0xc>
 801d822:	4770      	bx	lr
 801d824:	b510      	push	{r4, lr}
 801d826:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d82a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d82e:	4291      	cmp	r1, r2
 801d830:	d1f9      	bne.n	801d826 <memcpy+0xe>
 801d832:	bd10      	pop	{r4, pc}

0801d834 <memmove>:
 801d834:	4288      	cmp	r0, r1
 801d836:	b510      	push	{r4, lr}
 801d838:	eb01 0402 	add.w	r4, r1, r2
 801d83c:	d902      	bls.n	801d844 <memmove+0x10>
 801d83e:	4284      	cmp	r4, r0
 801d840:	4623      	mov	r3, r4
 801d842:	d807      	bhi.n	801d854 <memmove+0x20>
 801d844:	1e43      	subs	r3, r0, #1
 801d846:	42a1      	cmp	r1, r4
 801d848:	d008      	beq.n	801d85c <memmove+0x28>
 801d84a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d84e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d852:	e7f8      	b.n	801d846 <memmove+0x12>
 801d854:	4402      	add	r2, r0
 801d856:	4601      	mov	r1, r0
 801d858:	428a      	cmp	r2, r1
 801d85a:	d100      	bne.n	801d85e <memmove+0x2a>
 801d85c:	bd10      	pop	{r4, pc}
 801d85e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d866:	e7f7      	b.n	801d858 <memmove+0x24>

0801d868 <memset>:
 801d868:	4402      	add	r2, r0
 801d86a:	4603      	mov	r3, r0
 801d86c:	4293      	cmp	r3, r2
 801d86e:	d100      	bne.n	801d872 <memset+0xa>
 801d870:	4770      	bx	lr
 801d872:	f803 1b01 	strb.w	r1, [r3], #1
 801d876:	e7f9      	b.n	801d86c <memset+0x4>

0801d878 <_calloc_r>:
 801d878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d87a:	fba1 2402 	umull	r2, r4, r1, r2
 801d87e:	b94c      	cbnz	r4, 801d894 <_calloc_r+0x1c>
 801d880:	4611      	mov	r1, r2
 801d882:	9201      	str	r2, [sp, #4]
 801d884:	f000 f87a 	bl	801d97c <_malloc_r>
 801d888:	9a01      	ldr	r2, [sp, #4]
 801d88a:	4605      	mov	r5, r0
 801d88c:	b930      	cbnz	r0, 801d89c <_calloc_r+0x24>
 801d88e:	4628      	mov	r0, r5
 801d890:	b003      	add	sp, #12
 801d892:	bd30      	pop	{r4, r5, pc}
 801d894:	220c      	movs	r2, #12
 801d896:	6002      	str	r2, [r0, #0]
 801d898:	2500      	movs	r5, #0
 801d89a:	e7f8      	b.n	801d88e <_calloc_r+0x16>
 801d89c:	4621      	mov	r1, r4
 801d89e:	f7ff ffe3 	bl	801d868 <memset>
 801d8a2:	e7f4      	b.n	801d88e <_calloc_r+0x16>

0801d8a4 <_free_r>:
 801d8a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d8a6:	2900      	cmp	r1, #0
 801d8a8:	d044      	beq.n	801d934 <_free_r+0x90>
 801d8aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d8ae:	9001      	str	r0, [sp, #4]
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	f1a1 0404 	sub.w	r4, r1, #4
 801d8b6:	bfb8      	it	lt
 801d8b8:	18e4      	addlt	r4, r4, r3
 801d8ba:	f000 fd71 	bl	801e3a0 <__malloc_lock>
 801d8be:	4a1e      	ldr	r2, [pc, #120]	; (801d938 <_free_r+0x94>)
 801d8c0:	9801      	ldr	r0, [sp, #4]
 801d8c2:	6813      	ldr	r3, [r2, #0]
 801d8c4:	b933      	cbnz	r3, 801d8d4 <_free_r+0x30>
 801d8c6:	6063      	str	r3, [r4, #4]
 801d8c8:	6014      	str	r4, [r2, #0]
 801d8ca:	b003      	add	sp, #12
 801d8cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d8d0:	f000 bd6c 	b.w	801e3ac <__malloc_unlock>
 801d8d4:	42a3      	cmp	r3, r4
 801d8d6:	d908      	bls.n	801d8ea <_free_r+0x46>
 801d8d8:	6825      	ldr	r5, [r4, #0]
 801d8da:	1961      	adds	r1, r4, r5
 801d8dc:	428b      	cmp	r3, r1
 801d8de:	bf01      	itttt	eq
 801d8e0:	6819      	ldreq	r1, [r3, #0]
 801d8e2:	685b      	ldreq	r3, [r3, #4]
 801d8e4:	1949      	addeq	r1, r1, r5
 801d8e6:	6021      	streq	r1, [r4, #0]
 801d8e8:	e7ed      	b.n	801d8c6 <_free_r+0x22>
 801d8ea:	461a      	mov	r2, r3
 801d8ec:	685b      	ldr	r3, [r3, #4]
 801d8ee:	b10b      	cbz	r3, 801d8f4 <_free_r+0x50>
 801d8f0:	42a3      	cmp	r3, r4
 801d8f2:	d9fa      	bls.n	801d8ea <_free_r+0x46>
 801d8f4:	6811      	ldr	r1, [r2, #0]
 801d8f6:	1855      	adds	r5, r2, r1
 801d8f8:	42a5      	cmp	r5, r4
 801d8fa:	d10b      	bne.n	801d914 <_free_r+0x70>
 801d8fc:	6824      	ldr	r4, [r4, #0]
 801d8fe:	4421      	add	r1, r4
 801d900:	1854      	adds	r4, r2, r1
 801d902:	42a3      	cmp	r3, r4
 801d904:	6011      	str	r1, [r2, #0]
 801d906:	d1e0      	bne.n	801d8ca <_free_r+0x26>
 801d908:	681c      	ldr	r4, [r3, #0]
 801d90a:	685b      	ldr	r3, [r3, #4]
 801d90c:	6053      	str	r3, [r2, #4]
 801d90e:	4421      	add	r1, r4
 801d910:	6011      	str	r1, [r2, #0]
 801d912:	e7da      	b.n	801d8ca <_free_r+0x26>
 801d914:	d902      	bls.n	801d91c <_free_r+0x78>
 801d916:	230c      	movs	r3, #12
 801d918:	6003      	str	r3, [r0, #0]
 801d91a:	e7d6      	b.n	801d8ca <_free_r+0x26>
 801d91c:	6825      	ldr	r5, [r4, #0]
 801d91e:	1961      	adds	r1, r4, r5
 801d920:	428b      	cmp	r3, r1
 801d922:	bf04      	itt	eq
 801d924:	6819      	ldreq	r1, [r3, #0]
 801d926:	685b      	ldreq	r3, [r3, #4]
 801d928:	6063      	str	r3, [r4, #4]
 801d92a:	bf04      	itt	eq
 801d92c:	1949      	addeq	r1, r1, r5
 801d92e:	6021      	streq	r1, [r4, #0]
 801d930:	6054      	str	r4, [r2, #4]
 801d932:	e7ca      	b.n	801d8ca <_free_r+0x26>
 801d934:	b003      	add	sp, #12
 801d936:	bd30      	pop	{r4, r5, pc}
 801d938:	20002908 	.word	0x20002908

0801d93c <sbrk_aligned>:
 801d93c:	b570      	push	{r4, r5, r6, lr}
 801d93e:	4e0e      	ldr	r6, [pc, #56]	; (801d978 <sbrk_aligned+0x3c>)
 801d940:	460c      	mov	r4, r1
 801d942:	6831      	ldr	r1, [r6, #0]
 801d944:	4605      	mov	r5, r0
 801d946:	b911      	cbnz	r1, 801d94e <sbrk_aligned+0x12>
 801d948:	f000 f986 	bl	801dc58 <_sbrk_r>
 801d94c:	6030      	str	r0, [r6, #0]
 801d94e:	4621      	mov	r1, r4
 801d950:	4628      	mov	r0, r5
 801d952:	f000 f981 	bl	801dc58 <_sbrk_r>
 801d956:	1c43      	adds	r3, r0, #1
 801d958:	d00a      	beq.n	801d970 <sbrk_aligned+0x34>
 801d95a:	1cc4      	adds	r4, r0, #3
 801d95c:	f024 0403 	bic.w	r4, r4, #3
 801d960:	42a0      	cmp	r0, r4
 801d962:	d007      	beq.n	801d974 <sbrk_aligned+0x38>
 801d964:	1a21      	subs	r1, r4, r0
 801d966:	4628      	mov	r0, r5
 801d968:	f000 f976 	bl	801dc58 <_sbrk_r>
 801d96c:	3001      	adds	r0, #1
 801d96e:	d101      	bne.n	801d974 <sbrk_aligned+0x38>
 801d970:	f04f 34ff 	mov.w	r4, #4294967295
 801d974:	4620      	mov	r0, r4
 801d976:	bd70      	pop	{r4, r5, r6, pc}
 801d978:	2000290c 	.word	0x2000290c

0801d97c <_malloc_r>:
 801d97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d980:	1ccd      	adds	r5, r1, #3
 801d982:	f025 0503 	bic.w	r5, r5, #3
 801d986:	3508      	adds	r5, #8
 801d988:	2d0c      	cmp	r5, #12
 801d98a:	bf38      	it	cc
 801d98c:	250c      	movcc	r5, #12
 801d98e:	2d00      	cmp	r5, #0
 801d990:	4607      	mov	r7, r0
 801d992:	db01      	blt.n	801d998 <_malloc_r+0x1c>
 801d994:	42a9      	cmp	r1, r5
 801d996:	d905      	bls.n	801d9a4 <_malloc_r+0x28>
 801d998:	230c      	movs	r3, #12
 801d99a:	603b      	str	r3, [r7, #0]
 801d99c:	2600      	movs	r6, #0
 801d99e:	4630      	mov	r0, r6
 801d9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9a4:	4e2e      	ldr	r6, [pc, #184]	; (801da60 <_malloc_r+0xe4>)
 801d9a6:	f000 fcfb 	bl	801e3a0 <__malloc_lock>
 801d9aa:	6833      	ldr	r3, [r6, #0]
 801d9ac:	461c      	mov	r4, r3
 801d9ae:	bb34      	cbnz	r4, 801d9fe <_malloc_r+0x82>
 801d9b0:	4629      	mov	r1, r5
 801d9b2:	4638      	mov	r0, r7
 801d9b4:	f7ff ffc2 	bl	801d93c <sbrk_aligned>
 801d9b8:	1c43      	adds	r3, r0, #1
 801d9ba:	4604      	mov	r4, r0
 801d9bc:	d14d      	bne.n	801da5a <_malloc_r+0xde>
 801d9be:	6834      	ldr	r4, [r6, #0]
 801d9c0:	4626      	mov	r6, r4
 801d9c2:	2e00      	cmp	r6, #0
 801d9c4:	d140      	bne.n	801da48 <_malloc_r+0xcc>
 801d9c6:	6823      	ldr	r3, [r4, #0]
 801d9c8:	4631      	mov	r1, r6
 801d9ca:	4638      	mov	r0, r7
 801d9cc:	eb04 0803 	add.w	r8, r4, r3
 801d9d0:	f000 f942 	bl	801dc58 <_sbrk_r>
 801d9d4:	4580      	cmp	r8, r0
 801d9d6:	d13a      	bne.n	801da4e <_malloc_r+0xd2>
 801d9d8:	6821      	ldr	r1, [r4, #0]
 801d9da:	3503      	adds	r5, #3
 801d9dc:	1a6d      	subs	r5, r5, r1
 801d9de:	f025 0503 	bic.w	r5, r5, #3
 801d9e2:	3508      	adds	r5, #8
 801d9e4:	2d0c      	cmp	r5, #12
 801d9e6:	bf38      	it	cc
 801d9e8:	250c      	movcc	r5, #12
 801d9ea:	4629      	mov	r1, r5
 801d9ec:	4638      	mov	r0, r7
 801d9ee:	f7ff ffa5 	bl	801d93c <sbrk_aligned>
 801d9f2:	3001      	adds	r0, #1
 801d9f4:	d02b      	beq.n	801da4e <_malloc_r+0xd2>
 801d9f6:	6823      	ldr	r3, [r4, #0]
 801d9f8:	442b      	add	r3, r5
 801d9fa:	6023      	str	r3, [r4, #0]
 801d9fc:	e00e      	b.n	801da1c <_malloc_r+0xa0>
 801d9fe:	6822      	ldr	r2, [r4, #0]
 801da00:	1b52      	subs	r2, r2, r5
 801da02:	d41e      	bmi.n	801da42 <_malloc_r+0xc6>
 801da04:	2a0b      	cmp	r2, #11
 801da06:	d916      	bls.n	801da36 <_malloc_r+0xba>
 801da08:	1961      	adds	r1, r4, r5
 801da0a:	42a3      	cmp	r3, r4
 801da0c:	6025      	str	r5, [r4, #0]
 801da0e:	bf18      	it	ne
 801da10:	6059      	strne	r1, [r3, #4]
 801da12:	6863      	ldr	r3, [r4, #4]
 801da14:	bf08      	it	eq
 801da16:	6031      	streq	r1, [r6, #0]
 801da18:	5162      	str	r2, [r4, r5]
 801da1a:	604b      	str	r3, [r1, #4]
 801da1c:	4638      	mov	r0, r7
 801da1e:	f104 060b 	add.w	r6, r4, #11
 801da22:	f000 fcc3 	bl	801e3ac <__malloc_unlock>
 801da26:	f026 0607 	bic.w	r6, r6, #7
 801da2a:	1d23      	adds	r3, r4, #4
 801da2c:	1af2      	subs	r2, r6, r3
 801da2e:	d0b6      	beq.n	801d99e <_malloc_r+0x22>
 801da30:	1b9b      	subs	r3, r3, r6
 801da32:	50a3      	str	r3, [r4, r2]
 801da34:	e7b3      	b.n	801d99e <_malloc_r+0x22>
 801da36:	6862      	ldr	r2, [r4, #4]
 801da38:	42a3      	cmp	r3, r4
 801da3a:	bf0c      	ite	eq
 801da3c:	6032      	streq	r2, [r6, #0]
 801da3e:	605a      	strne	r2, [r3, #4]
 801da40:	e7ec      	b.n	801da1c <_malloc_r+0xa0>
 801da42:	4623      	mov	r3, r4
 801da44:	6864      	ldr	r4, [r4, #4]
 801da46:	e7b2      	b.n	801d9ae <_malloc_r+0x32>
 801da48:	4634      	mov	r4, r6
 801da4a:	6876      	ldr	r6, [r6, #4]
 801da4c:	e7b9      	b.n	801d9c2 <_malloc_r+0x46>
 801da4e:	230c      	movs	r3, #12
 801da50:	603b      	str	r3, [r7, #0]
 801da52:	4638      	mov	r0, r7
 801da54:	f000 fcaa 	bl	801e3ac <__malloc_unlock>
 801da58:	e7a1      	b.n	801d99e <_malloc_r+0x22>
 801da5a:	6025      	str	r5, [r4, #0]
 801da5c:	e7de      	b.n	801da1c <_malloc_r+0xa0>
 801da5e:	bf00      	nop
 801da60:	20002908 	.word	0x20002908

0801da64 <iprintf>:
 801da64:	b40f      	push	{r0, r1, r2, r3}
 801da66:	4b0a      	ldr	r3, [pc, #40]	; (801da90 <iprintf+0x2c>)
 801da68:	b513      	push	{r0, r1, r4, lr}
 801da6a:	681c      	ldr	r4, [r3, #0]
 801da6c:	b124      	cbz	r4, 801da78 <iprintf+0x14>
 801da6e:	69a3      	ldr	r3, [r4, #24]
 801da70:	b913      	cbnz	r3, 801da78 <iprintf+0x14>
 801da72:	4620      	mov	r0, r4
 801da74:	f000 fb7c 	bl	801e170 <__sinit>
 801da78:	ab05      	add	r3, sp, #20
 801da7a:	9a04      	ldr	r2, [sp, #16]
 801da7c:	68a1      	ldr	r1, [r4, #8]
 801da7e:	9301      	str	r3, [sp, #4]
 801da80:	4620      	mov	r0, r4
 801da82:	f000 fe1f 	bl	801e6c4 <_vfiprintf_r>
 801da86:	b002      	add	sp, #8
 801da88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da8c:	b004      	add	sp, #16
 801da8e:	4770      	bx	lr
 801da90:	20000074 	.word	0x20000074

0801da94 <_puts_r>:
 801da94:	b570      	push	{r4, r5, r6, lr}
 801da96:	460e      	mov	r6, r1
 801da98:	4605      	mov	r5, r0
 801da9a:	b118      	cbz	r0, 801daa4 <_puts_r+0x10>
 801da9c:	6983      	ldr	r3, [r0, #24]
 801da9e:	b90b      	cbnz	r3, 801daa4 <_puts_r+0x10>
 801daa0:	f000 fb66 	bl	801e170 <__sinit>
 801daa4:	69ab      	ldr	r3, [r5, #24]
 801daa6:	68ac      	ldr	r4, [r5, #8]
 801daa8:	b913      	cbnz	r3, 801dab0 <_puts_r+0x1c>
 801daaa:	4628      	mov	r0, r5
 801daac:	f000 fb60 	bl	801e170 <__sinit>
 801dab0:	4b2c      	ldr	r3, [pc, #176]	; (801db64 <_puts_r+0xd0>)
 801dab2:	429c      	cmp	r4, r3
 801dab4:	d120      	bne.n	801daf8 <_puts_r+0x64>
 801dab6:	686c      	ldr	r4, [r5, #4]
 801dab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801daba:	07db      	lsls	r3, r3, #31
 801dabc:	d405      	bmi.n	801daca <_puts_r+0x36>
 801dabe:	89a3      	ldrh	r3, [r4, #12]
 801dac0:	0598      	lsls	r0, r3, #22
 801dac2:	d402      	bmi.n	801daca <_puts_r+0x36>
 801dac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dac6:	f000 fc03 	bl	801e2d0 <__retarget_lock_acquire_recursive>
 801daca:	89a3      	ldrh	r3, [r4, #12]
 801dacc:	0719      	lsls	r1, r3, #28
 801dace:	d51d      	bpl.n	801db0c <_puts_r+0x78>
 801dad0:	6923      	ldr	r3, [r4, #16]
 801dad2:	b1db      	cbz	r3, 801db0c <_puts_r+0x78>
 801dad4:	3e01      	subs	r6, #1
 801dad6:	68a3      	ldr	r3, [r4, #8]
 801dad8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801dadc:	3b01      	subs	r3, #1
 801dade:	60a3      	str	r3, [r4, #8]
 801dae0:	bb39      	cbnz	r1, 801db32 <_puts_r+0x9e>
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	da38      	bge.n	801db58 <_puts_r+0xc4>
 801dae6:	4622      	mov	r2, r4
 801dae8:	210a      	movs	r1, #10
 801daea:	4628      	mov	r0, r5
 801daec:	f000 f948 	bl	801dd80 <__swbuf_r>
 801daf0:	3001      	adds	r0, #1
 801daf2:	d011      	beq.n	801db18 <_puts_r+0x84>
 801daf4:	250a      	movs	r5, #10
 801daf6:	e011      	b.n	801db1c <_puts_r+0x88>
 801daf8:	4b1b      	ldr	r3, [pc, #108]	; (801db68 <_puts_r+0xd4>)
 801dafa:	429c      	cmp	r4, r3
 801dafc:	d101      	bne.n	801db02 <_puts_r+0x6e>
 801dafe:	68ac      	ldr	r4, [r5, #8]
 801db00:	e7da      	b.n	801dab8 <_puts_r+0x24>
 801db02:	4b1a      	ldr	r3, [pc, #104]	; (801db6c <_puts_r+0xd8>)
 801db04:	429c      	cmp	r4, r3
 801db06:	bf08      	it	eq
 801db08:	68ec      	ldreq	r4, [r5, #12]
 801db0a:	e7d5      	b.n	801dab8 <_puts_r+0x24>
 801db0c:	4621      	mov	r1, r4
 801db0e:	4628      	mov	r0, r5
 801db10:	f000 f988 	bl	801de24 <__swsetup_r>
 801db14:	2800      	cmp	r0, #0
 801db16:	d0dd      	beq.n	801dad4 <_puts_r+0x40>
 801db18:	f04f 35ff 	mov.w	r5, #4294967295
 801db1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801db1e:	07da      	lsls	r2, r3, #31
 801db20:	d405      	bmi.n	801db2e <_puts_r+0x9a>
 801db22:	89a3      	ldrh	r3, [r4, #12]
 801db24:	059b      	lsls	r3, r3, #22
 801db26:	d402      	bmi.n	801db2e <_puts_r+0x9a>
 801db28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db2a:	f000 fbd2 	bl	801e2d2 <__retarget_lock_release_recursive>
 801db2e:	4628      	mov	r0, r5
 801db30:	bd70      	pop	{r4, r5, r6, pc}
 801db32:	2b00      	cmp	r3, #0
 801db34:	da04      	bge.n	801db40 <_puts_r+0xac>
 801db36:	69a2      	ldr	r2, [r4, #24]
 801db38:	429a      	cmp	r2, r3
 801db3a:	dc06      	bgt.n	801db4a <_puts_r+0xb6>
 801db3c:	290a      	cmp	r1, #10
 801db3e:	d004      	beq.n	801db4a <_puts_r+0xb6>
 801db40:	6823      	ldr	r3, [r4, #0]
 801db42:	1c5a      	adds	r2, r3, #1
 801db44:	6022      	str	r2, [r4, #0]
 801db46:	7019      	strb	r1, [r3, #0]
 801db48:	e7c5      	b.n	801dad6 <_puts_r+0x42>
 801db4a:	4622      	mov	r2, r4
 801db4c:	4628      	mov	r0, r5
 801db4e:	f000 f917 	bl	801dd80 <__swbuf_r>
 801db52:	3001      	adds	r0, #1
 801db54:	d1bf      	bne.n	801dad6 <_puts_r+0x42>
 801db56:	e7df      	b.n	801db18 <_puts_r+0x84>
 801db58:	6823      	ldr	r3, [r4, #0]
 801db5a:	250a      	movs	r5, #10
 801db5c:	1c5a      	adds	r2, r3, #1
 801db5e:	6022      	str	r2, [r4, #0]
 801db60:	701d      	strb	r5, [r3, #0]
 801db62:	e7db      	b.n	801db1c <_puts_r+0x88>
 801db64:	08024a00 	.word	0x08024a00
 801db68:	08024a20 	.word	0x08024a20
 801db6c:	080249e0 	.word	0x080249e0

0801db70 <puts>:
 801db70:	4b02      	ldr	r3, [pc, #8]	; (801db7c <puts+0xc>)
 801db72:	4601      	mov	r1, r0
 801db74:	6818      	ldr	r0, [r3, #0]
 801db76:	f7ff bf8d 	b.w	801da94 <_puts_r>
 801db7a:	bf00      	nop
 801db7c:	20000074 	.word	0x20000074

0801db80 <srand>:
 801db80:	b538      	push	{r3, r4, r5, lr}
 801db82:	4b10      	ldr	r3, [pc, #64]	; (801dbc4 <srand+0x44>)
 801db84:	681d      	ldr	r5, [r3, #0]
 801db86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801db88:	4604      	mov	r4, r0
 801db8a:	b9b3      	cbnz	r3, 801dbba <srand+0x3a>
 801db8c:	2018      	movs	r0, #24
 801db8e:	f7ff fe23 	bl	801d7d8 <malloc>
 801db92:	4602      	mov	r2, r0
 801db94:	63a8      	str	r0, [r5, #56]	; 0x38
 801db96:	b920      	cbnz	r0, 801dba2 <srand+0x22>
 801db98:	4b0b      	ldr	r3, [pc, #44]	; (801dbc8 <srand+0x48>)
 801db9a:	480c      	ldr	r0, [pc, #48]	; (801dbcc <srand+0x4c>)
 801db9c:	2142      	movs	r1, #66	; 0x42
 801db9e:	f000 f9af 	bl	801df00 <__assert_func>
 801dba2:	490b      	ldr	r1, [pc, #44]	; (801dbd0 <srand+0x50>)
 801dba4:	4b0b      	ldr	r3, [pc, #44]	; (801dbd4 <srand+0x54>)
 801dba6:	e9c0 1300 	strd	r1, r3, [r0]
 801dbaa:	4b0b      	ldr	r3, [pc, #44]	; (801dbd8 <srand+0x58>)
 801dbac:	6083      	str	r3, [r0, #8]
 801dbae:	230b      	movs	r3, #11
 801dbb0:	8183      	strh	r3, [r0, #12]
 801dbb2:	2100      	movs	r1, #0
 801dbb4:	2001      	movs	r0, #1
 801dbb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801dbba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801dbbc:	2200      	movs	r2, #0
 801dbbe:	611c      	str	r4, [r3, #16]
 801dbc0:	615a      	str	r2, [r3, #20]
 801dbc2:	bd38      	pop	{r3, r4, r5, pc}
 801dbc4:	20000074 	.word	0x20000074
 801dbc8:	08024930 	.word	0x08024930
 801dbcc:	08024947 	.word	0x08024947
 801dbd0:	abcd330e 	.word	0xabcd330e
 801dbd4:	e66d1234 	.word	0xe66d1234
 801dbd8:	0005deec 	.word	0x0005deec

0801dbdc <rand>:
 801dbdc:	4b16      	ldr	r3, [pc, #88]	; (801dc38 <rand+0x5c>)
 801dbde:	b510      	push	{r4, lr}
 801dbe0:	681c      	ldr	r4, [r3, #0]
 801dbe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dbe4:	b9b3      	cbnz	r3, 801dc14 <rand+0x38>
 801dbe6:	2018      	movs	r0, #24
 801dbe8:	f7ff fdf6 	bl	801d7d8 <malloc>
 801dbec:	63a0      	str	r0, [r4, #56]	; 0x38
 801dbee:	b928      	cbnz	r0, 801dbfc <rand+0x20>
 801dbf0:	4602      	mov	r2, r0
 801dbf2:	4b12      	ldr	r3, [pc, #72]	; (801dc3c <rand+0x60>)
 801dbf4:	4812      	ldr	r0, [pc, #72]	; (801dc40 <rand+0x64>)
 801dbf6:	214e      	movs	r1, #78	; 0x4e
 801dbf8:	f000 f982 	bl	801df00 <__assert_func>
 801dbfc:	4a11      	ldr	r2, [pc, #68]	; (801dc44 <rand+0x68>)
 801dbfe:	4b12      	ldr	r3, [pc, #72]	; (801dc48 <rand+0x6c>)
 801dc00:	e9c0 2300 	strd	r2, r3, [r0]
 801dc04:	4b11      	ldr	r3, [pc, #68]	; (801dc4c <rand+0x70>)
 801dc06:	6083      	str	r3, [r0, #8]
 801dc08:	230b      	movs	r3, #11
 801dc0a:	8183      	strh	r3, [r0, #12]
 801dc0c:	2201      	movs	r2, #1
 801dc0e:	2300      	movs	r3, #0
 801dc10:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801dc14:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801dc16:	4a0e      	ldr	r2, [pc, #56]	; (801dc50 <rand+0x74>)
 801dc18:	6920      	ldr	r0, [r4, #16]
 801dc1a:	6963      	ldr	r3, [r4, #20]
 801dc1c:	490d      	ldr	r1, [pc, #52]	; (801dc54 <rand+0x78>)
 801dc1e:	4342      	muls	r2, r0
 801dc20:	fb01 2203 	mla	r2, r1, r3, r2
 801dc24:	fba0 0101 	umull	r0, r1, r0, r1
 801dc28:	1c43      	adds	r3, r0, #1
 801dc2a:	eb42 0001 	adc.w	r0, r2, r1
 801dc2e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801dc32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801dc36:	bd10      	pop	{r4, pc}
 801dc38:	20000074 	.word	0x20000074
 801dc3c:	08024930 	.word	0x08024930
 801dc40:	08024947 	.word	0x08024947
 801dc44:	abcd330e 	.word	0xabcd330e
 801dc48:	e66d1234 	.word	0xe66d1234
 801dc4c:	0005deec 	.word	0x0005deec
 801dc50:	5851f42d 	.word	0x5851f42d
 801dc54:	4c957f2d 	.word	0x4c957f2d

0801dc58 <_sbrk_r>:
 801dc58:	b538      	push	{r3, r4, r5, lr}
 801dc5a:	4d06      	ldr	r5, [pc, #24]	; (801dc74 <_sbrk_r+0x1c>)
 801dc5c:	2300      	movs	r3, #0
 801dc5e:	4604      	mov	r4, r0
 801dc60:	4608      	mov	r0, r1
 801dc62:	602b      	str	r3, [r5, #0]
 801dc64:	f7e3 fb34 	bl	80012d0 <_sbrk>
 801dc68:	1c43      	adds	r3, r0, #1
 801dc6a:	d102      	bne.n	801dc72 <_sbrk_r+0x1a>
 801dc6c:	682b      	ldr	r3, [r5, #0]
 801dc6e:	b103      	cbz	r3, 801dc72 <_sbrk_r+0x1a>
 801dc70:	6023      	str	r3, [r4, #0]
 801dc72:	bd38      	pop	{r3, r4, r5, pc}
 801dc74:	20002914 	.word	0x20002914

0801dc78 <sniprintf>:
 801dc78:	b40c      	push	{r2, r3}
 801dc7a:	b530      	push	{r4, r5, lr}
 801dc7c:	4b17      	ldr	r3, [pc, #92]	; (801dcdc <sniprintf+0x64>)
 801dc7e:	1e0c      	subs	r4, r1, #0
 801dc80:	681d      	ldr	r5, [r3, #0]
 801dc82:	b09d      	sub	sp, #116	; 0x74
 801dc84:	da08      	bge.n	801dc98 <sniprintf+0x20>
 801dc86:	238b      	movs	r3, #139	; 0x8b
 801dc88:	602b      	str	r3, [r5, #0]
 801dc8a:	f04f 30ff 	mov.w	r0, #4294967295
 801dc8e:	b01d      	add	sp, #116	; 0x74
 801dc90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dc94:	b002      	add	sp, #8
 801dc96:	4770      	bx	lr
 801dc98:	f44f 7302 	mov.w	r3, #520	; 0x208
 801dc9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801dca0:	bf14      	ite	ne
 801dca2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801dca6:	4623      	moveq	r3, r4
 801dca8:	9304      	str	r3, [sp, #16]
 801dcaa:	9307      	str	r3, [sp, #28]
 801dcac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dcb0:	9002      	str	r0, [sp, #8]
 801dcb2:	9006      	str	r0, [sp, #24]
 801dcb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dcb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801dcba:	ab21      	add	r3, sp, #132	; 0x84
 801dcbc:	a902      	add	r1, sp, #8
 801dcbe:	4628      	mov	r0, r5
 801dcc0:	9301      	str	r3, [sp, #4]
 801dcc2:	f000 fbd5 	bl	801e470 <_svfiprintf_r>
 801dcc6:	1c43      	adds	r3, r0, #1
 801dcc8:	bfbc      	itt	lt
 801dcca:	238b      	movlt	r3, #139	; 0x8b
 801dccc:	602b      	strlt	r3, [r5, #0]
 801dcce:	2c00      	cmp	r4, #0
 801dcd0:	d0dd      	beq.n	801dc8e <sniprintf+0x16>
 801dcd2:	9b02      	ldr	r3, [sp, #8]
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	701a      	strb	r2, [r3, #0]
 801dcd8:	e7d9      	b.n	801dc8e <sniprintf+0x16>
 801dcda:	bf00      	nop
 801dcdc:	20000074 	.word	0x20000074

0801dce0 <strstr>:
 801dce0:	780a      	ldrb	r2, [r1, #0]
 801dce2:	b570      	push	{r4, r5, r6, lr}
 801dce4:	b96a      	cbnz	r2, 801dd02 <strstr+0x22>
 801dce6:	bd70      	pop	{r4, r5, r6, pc}
 801dce8:	429a      	cmp	r2, r3
 801dcea:	d109      	bne.n	801dd00 <strstr+0x20>
 801dcec:	460c      	mov	r4, r1
 801dcee:	4605      	mov	r5, r0
 801dcf0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d0f6      	beq.n	801dce6 <strstr+0x6>
 801dcf8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801dcfc:	429e      	cmp	r6, r3
 801dcfe:	d0f7      	beq.n	801dcf0 <strstr+0x10>
 801dd00:	3001      	adds	r0, #1
 801dd02:	7803      	ldrb	r3, [r0, #0]
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	d1ef      	bne.n	801dce8 <strstr+0x8>
 801dd08:	4618      	mov	r0, r3
 801dd0a:	e7ec      	b.n	801dce6 <strstr+0x6>

0801dd0c <_vsniprintf_r>:
 801dd0c:	b530      	push	{r4, r5, lr}
 801dd0e:	4614      	mov	r4, r2
 801dd10:	2c00      	cmp	r4, #0
 801dd12:	b09b      	sub	sp, #108	; 0x6c
 801dd14:	4605      	mov	r5, r0
 801dd16:	461a      	mov	r2, r3
 801dd18:	da05      	bge.n	801dd26 <_vsniprintf_r+0x1a>
 801dd1a:	238b      	movs	r3, #139	; 0x8b
 801dd1c:	6003      	str	r3, [r0, #0]
 801dd1e:	f04f 30ff 	mov.w	r0, #4294967295
 801dd22:	b01b      	add	sp, #108	; 0x6c
 801dd24:	bd30      	pop	{r4, r5, pc}
 801dd26:	f44f 7302 	mov.w	r3, #520	; 0x208
 801dd2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801dd2e:	bf14      	ite	ne
 801dd30:	f104 33ff 	addne.w	r3, r4, #4294967295
 801dd34:	4623      	moveq	r3, r4
 801dd36:	9302      	str	r3, [sp, #8]
 801dd38:	9305      	str	r3, [sp, #20]
 801dd3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dd3e:	9100      	str	r1, [sp, #0]
 801dd40:	9104      	str	r1, [sp, #16]
 801dd42:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dd46:	4669      	mov	r1, sp
 801dd48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dd4a:	f000 fb91 	bl	801e470 <_svfiprintf_r>
 801dd4e:	1c43      	adds	r3, r0, #1
 801dd50:	bfbc      	itt	lt
 801dd52:	238b      	movlt	r3, #139	; 0x8b
 801dd54:	602b      	strlt	r3, [r5, #0]
 801dd56:	2c00      	cmp	r4, #0
 801dd58:	d0e3      	beq.n	801dd22 <_vsniprintf_r+0x16>
 801dd5a:	9b00      	ldr	r3, [sp, #0]
 801dd5c:	2200      	movs	r2, #0
 801dd5e:	701a      	strb	r2, [r3, #0]
 801dd60:	e7df      	b.n	801dd22 <_vsniprintf_r+0x16>
	...

0801dd64 <vsniprintf>:
 801dd64:	b507      	push	{r0, r1, r2, lr}
 801dd66:	9300      	str	r3, [sp, #0]
 801dd68:	4613      	mov	r3, r2
 801dd6a:	460a      	mov	r2, r1
 801dd6c:	4601      	mov	r1, r0
 801dd6e:	4803      	ldr	r0, [pc, #12]	; (801dd7c <vsniprintf+0x18>)
 801dd70:	6800      	ldr	r0, [r0, #0]
 801dd72:	f7ff ffcb 	bl	801dd0c <_vsniprintf_r>
 801dd76:	b003      	add	sp, #12
 801dd78:	f85d fb04 	ldr.w	pc, [sp], #4
 801dd7c:	20000074 	.word	0x20000074

0801dd80 <__swbuf_r>:
 801dd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd82:	460e      	mov	r6, r1
 801dd84:	4614      	mov	r4, r2
 801dd86:	4605      	mov	r5, r0
 801dd88:	b118      	cbz	r0, 801dd92 <__swbuf_r+0x12>
 801dd8a:	6983      	ldr	r3, [r0, #24]
 801dd8c:	b90b      	cbnz	r3, 801dd92 <__swbuf_r+0x12>
 801dd8e:	f000 f9ef 	bl	801e170 <__sinit>
 801dd92:	4b21      	ldr	r3, [pc, #132]	; (801de18 <__swbuf_r+0x98>)
 801dd94:	429c      	cmp	r4, r3
 801dd96:	d12b      	bne.n	801ddf0 <__swbuf_r+0x70>
 801dd98:	686c      	ldr	r4, [r5, #4]
 801dd9a:	69a3      	ldr	r3, [r4, #24]
 801dd9c:	60a3      	str	r3, [r4, #8]
 801dd9e:	89a3      	ldrh	r3, [r4, #12]
 801dda0:	071a      	lsls	r2, r3, #28
 801dda2:	d52f      	bpl.n	801de04 <__swbuf_r+0x84>
 801dda4:	6923      	ldr	r3, [r4, #16]
 801dda6:	b36b      	cbz	r3, 801de04 <__swbuf_r+0x84>
 801dda8:	6923      	ldr	r3, [r4, #16]
 801ddaa:	6820      	ldr	r0, [r4, #0]
 801ddac:	1ac0      	subs	r0, r0, r3
 801ddae:	6963      	ldr	r3, [r4, #20]
 801ddb0:	b2f6      	uxtb	r6, r6
 801ddb2:	4283      	cmp	r3, r0
 801ddb4:	4637      	mov	r7, r6
 801ddb6:	dc04      	bgt.n	801ddc2 <__swbuf_r+0x42>
 801ddb8:	4621      	mov	r1, r4
 801ddba:	4628      	mov	r0, r5
 801ddbc:	f000 f944 	bl	801e048 <_fflush_r>
 801ddc0:	bb30      	cbnz	r0, 801de10 <__swbuf_r+0x90>
 801ddc2:	68a3      	ldr	r3, [r4, #8]
 801ddc4:	3b01      	subs	r3, #1
 801ddc6:	60a3      	str	r3, [r4, #8]
 801ddc8:	6823      	ldr	r3, [r4, #0]
 801ddca:	1c5a      	adds	r2, r3, #1
 801ddcc:	6022      	str	r2, [r4, #0]
 801ddce:	701e      	strb	r6, [r3, #0]
 801ddd0:	6963      	ldr	r3, [r4, #20]
 801ddd2:	3001      	adds	r0, #1
 801ddd4:	4283      	cmp	r3, r0
 801ddd6:	d004      	beq.n	801dde2 <__swbuf_r+0x62>
 801ddd8:	89a3      	ldrh	r3, [r4, #12]
 801ddda:	07db      	lsls	r3, r3, #31
 801dddc:	d506      	bpl.n	801ddec <__swbuf_r+0x6c>
 801ddde:	2e0a      	cmp	r6, #10
 801dde0:	d104      	bne.n	801ddec <__swbuf_r+0x6c>
 801dde2:	4621      	mov	r1, r4
 801dde4:	4628      	mov	r0, r5
 801dde6:	f000 f92f 	bl	801e048 <_fflush_r>
 801ddea:	b988      	cbnz	r0, 801de10 <__swbuf_r+0x90>
 801ddec:	4638      	mov	r0, r7
 801ddee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddf0:	4b0a      	ldr	r3, [pc, #40]	; (801de1c <__swbuf_r+0x9c>)
 801ddf2:	429c      	cmp	r4, r3
 801ddf4:	d101      	bne.n	801ddfa <__swbuf_r+0x7a>
 801ddf6:	68ac      	ldr	r4, [r5, #8]
 801ddf8:	e7cf      	b.n	801dd9a <__swbuf_r+0x1a>
 801ddfa:	4b09      	ldr	r3, [pc, #36]	; (801de20 <__swbuf_r+0xa0>)
 801ddfc:	429c      	cmp	r4, r3
 801ddfe:	bf08      	it	eq
 801de00:	68ec      	ldreq	r4, [r5, #12]
 801de02:	e7ca      	b.n	801dd9a <__swbuf_r+0x1a>
 801de04:	4621      	mov	r1, r4
 801de06:	4628      	mov	r0, r5
 801de08:	f000 f80c 	bl	801de24 <__swsetup_r>
 801de0c:	2800      	cmp	r0, #0
 801de0e:	d0cb      	beq.n	801dda8 <__swbuf_r+0x28>
 801de10:	f04f 37ff 	mov.w	r7, #4294967295
 801de14:	e7ea      	b.n	801ddec <__swbuf_r+0x6c>
 801de16:	bf00      	nop
 801de18:	08024a00 	.word	0x08024a00
 801de1c:	08024a20 	.word	0x08024a20
 801de20:	080249e0 	.word	0x080249e0

0801de24 <__swsetup_r>:
 801de24:	4b32      	ldr	r3, [pc, #200]	; (801def0 <__swsetup_r+0xcc>)
 801de26:	b570      	push	{r4, r5, r6, lr}
 801de28:	681d      	ldr	r5, [r3, #0]
 801de2a:	4606      	mov	r6, r0
 801de2c:	460c      	mov	r4, r1
 801de2e:	b125      	cbz	r5, 801de3a <__swsetup_r+0x16>
 801de30:	69ab      	ldr	r3, [r5, #24]
 801de32:	b913      	cbnz	r3, 801de3a <__swsetup_r+0x16>
 801de34:	4628      	mov	r0, r5
 801de36:	f000 f99b 	bl	801e170 <__sinit>
 801de3a:	4b2e      	ldr	r3, [pc, #184]	; (801def4 <__swsetup_r+0xd0>)
 801de3c:	429c      	cmp	r4, r3
 801de3e:	d10f      	bne.n	801de60 <__swsetup_r+0x3c>
 801de40:	686c      	ldr	r4, [r5, #4]
 801de42:	89a3      	ldrh	r3, [r4, #12]
 801de44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801de48:	0719      	lsls	r1, r3, #28
 801de4a:	d42c      	bmi.n	801dea6 <__swsetup_r+0x82>
 801de4c:	06dd      	lsls	r5, r3, #27
 801de4e:	d411      	bmi.n	801de74 <__swsetup_r+0x50>
 801de50:	2309      	movs	r3, #9
 801de52:	6033      	str	r3, [r6, #0]
 801de54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801de58:	81a3      	strh	r3, [r4, #12]
 801de5a:	f04f 30ff 	mov.w	r0, #4294967295
 801de5e:	e03e      	b.n	801dede <__swsetup_r+0xba>
 801de60:	4b25      	ldr	r3, [pc, #148]	; (801def8 <__swsetup_r+0xd4>)
 801de62:	429c      	cmp	r4, r3
 801de64:	d101      	bne.n	801de6a <__swsetup_r+0x46>
 801de66:	68ac      	ldr	r4, [r5, #8]
 801de68:	e7eb      	b.n	801de42 <__swsetup_r+0x1e>
 801de6a:	4b24      	ldr	r3, [pc, #144]	; (801defc <__swsetup_r+0xd8>)
 801de6c:	429c      	cmp	r4, r3
 801de6e:	bf08      	it	eq
 801de70:	68ec      	ldreq	r4, [r5, #12]
 801de72:	e7e6      	b.n	801de42 <__swsetup_r+0x1e>
 801de74:	0758      	lsls	r0, r3, #29
 801de76:	d512      	bpl.n	801de9e <__swsetup_r+0x7a>
 801de78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801de7a:	b141      	cbz	r1, 801de8e <__swsetup_r+0x6a>
 801de7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801de80:	4299      	cmp	r1, r3
 801de82:	d002      	beq.n	801de8a <__swsetup_r+0x66>
 801de84:	4630      	mov	r0, r6
 801de86:	f7ff fd0d 	bl	801d8a4 <_free_r>
 801de8a:	2300      	movs	r3, #0
 801de8c:	6363      	str	r3, [r4, #52]	; 0x34
 801de8e:	89a3      	ldrh	r3, [r4, #12]
 801de90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801de94:	81a3      	strh	r3, [r4, #12]
 801de96:	2300      	movs	r3, #0
 801de98:	6063      	str	r3, [r4, #4]
 801de9a:	6923      	ldr	r3, [r4, #16]
 801de9c:	6023      	str	r3, [r4, #0]
 801de9e:	89a3      	ldrh	r3, [r4, #12]
 801dea0:	f043 0308 	orr.w	r3, r3, #8
 801dea4:	81a3      	strh	r3, [r4, #12]
 801dea6:	6923      	ldr	r3, [r4, #16]
 801dea8:	b94b      	cbnz	r3, 801debe <__swsetup_r+0x9a>
 801deaa:	89a3      	ldrh	r3, [r4, #12]
 801deac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801deb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801deb4:	d003      	beq.n	801debe <__swsetup_r+0x9a>
 801deb6:	4621      	mov	r1, r4
 801deb8:	4630      	mov	r0, r6
 801deba:	f000 fa31 	bl	801e320 <__smakebuf_r>
 801debe:	89a0      	ldrh	r0, [r4, #12]
 801dec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dec4:	f010 0301 	ands.w	r3, r0, #1
 801dec8:	d00a      	beq.n	801dee0 <__swsetup_r+0xbc>
 801deca:	2300      	movs	r3, #0
 801decc:	60a3      	str	r3, [r4, #8]
 801dece:	6963      	ldr	r3, [r4, #20]
 801ded0:	425b      	negs	r3, r3
 801ded2:	61a3      	str	r3, [r4, #24]
 801ded4:	6923      	ldr	r3, [r4, #16]
 801ded6:	b943      	cbnz	r3, 801deea <__swsetup_r+0xc6>
 801ded8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dedc:	d1ba      	bne.n	801de54 <__swsetup_r+0x30>
 801dede:	bd70      	pop	{r4, r5, r6, pc}
 801dee0:	0781      	lsls	r1, r0, #30
 801dee2:	bf58      	it	pl
 801dee4:	6963      	ldrpl	r3, [r4, #20]
 801dee6:	60a3      	str	r3, [r4, #8]
 801dee8:	e7f4      	b.n	801ded4 <__swsetup_r+0xb0>
 801deea:	2000      	movs	r0, #0
 801deec:	e7f7      	b.n	801dede <__swsetup_r+0xba>
 801deee:	bf00      	nop
 801def0:	20000074 	.word	0x20000074
 801def4:	08024a00 	.word	0x08024a00
 801def8:	08024a20 	.word	0x08024a20
 801defc:	080249e0 	.word	0x080249e0

0801df00 <__assert_func>:
 801df00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801df02:	4614      	mov	r4, r2
 801df04:	461a      	mov	r2, r3
 801df06:	4b09      	ldr	r3, [pc, #36]	; (801df2c <__assert_func+0x2c>)
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	4605      	mov	r5, r0
 801df0c:	68d8      	ldr	r0, [r3, #12]
 801df0e:	b14c      	cbz	r4, 801df24 <__assert_func+0x24>
 801df10:	4b07      	ldr	r3, [pc, #28]	; (801df30 <__assert_func+0x30>)
 801df12:	9100      	str	r1, [sp, #0]
 801df14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801df18:	4906      	ldr	r1, [pc, #24]	; (801df34 <__assert_func+0x34>)
 801df1a:	462b      	mov	r3, r5
 801df1c:	f000 f9a6 	bl	801e26c <fiprintf>
 801df20:	f000 feea 	bl	801ecf8 <abort>
 801df24:	4b04      	ldr	r3, [pc, #16]	; (801df38 <__assert_func+0x38>)
 801df26:	461c      	mov	r4, r3
 801df28:	e7f3      	b.n	801df12 <__assert_func+0x12>
 801df2a:	bf00      	nop
 801df2c:	20000074 	.word	0x20000074
 801df30:	080249a2 	.word	0x080249a2
 801df34:	080249af 	.word	0x080249af
 801df38:	080249dd 	.word	0x080249dd

0801df3c <__sflush_r>:
 801df3c:	898a      	ldrh	r2, [r1, #12]
 801df3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df42:	4605      	mov	r5, r0
 801df44:	0710      	lsls	r0, r2, #28
 801df46:	460c      	mov	r4, r1
 801df48:	d458      	bmi.n	801dffc <__sflush_r+0xc0>
 801df4a:	684b      	ldr	r3, [r1, #4]
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	dc05      	bgt.n	801df5c <__sflush_r+0x20>
 801df50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801df52:	2b00      	cmp	r3, #0
 801df54:	dc02      	bgt.n	801df5c <__sflush_r+0x20>
 801df56:	2000      	movs	r0, #0
 801df58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801df5e:	2e00      	cmp	r6, #0
 801df60:	d0f9      	beq.n	801df56 <__sflush_r+0x1a>
 801df62:	2300      	movs	r3, #0
 801df64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801df68:	682f      	ldr	r7, [r5, #0]
 801df6a:	602b      	str	r3, [r5, #0]
 801df6c:	d032      	beq.n	801dfd4 <__sflush_r+0x98>
 801df6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801df70:	89a3      	ldrh	r3, [r4, #12]
 801df72:	075a      	lsls	r2, r3, #29
 801df74:	d505      	bpl.n	801df82 <__sflush_r+0x46>
 801df76:	6863      	ldr	r3, [r4, #4]
 801df78:	1ac0      	subs	r0, r0, r3
 801df7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801df7c:	b10b      	cbz	r3, 801df82 <__sflush_r+0x46>
 801df7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801df80:	1ac0      	subs	r0, r0, r3
 801df82:	2300      	movs	r3, #0
 801df84:	4602      	mov	r2, r0
 801df86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801df88:	6a21      	ldr	r1, [r4, #32]
 801df8a:	4628      	mov	r0, r5
 801df8c:	47b0      	blx	r6
 801df8e:	1c43      	adds	r3, r0, #1
 801df90:	89a3      	ldrh	r3, [r4, #12]
 801df92:	d106      	bne.n	801dfa2 <__sflush_r+0x66>
 801df94:	6829      	ldr	r1, [r5, #0]
 801df96:	291d      	cmp	r1, #29
 801df98:	d82c      	bhi.n	801dff4 <__sflush_r+0xb8>
 801df9a:	4a2a      	ldr	r2, [pc, #168]	; (801e044 <__sflush_r+0x108>)
 801df9c:	40ca      	lsrs	r2, r1
 801df9e:	07d6      	lsls	r6, r2, #31
 801dfa0:	d528      	bpl.n	801dff4 <__sflush_r+0xb8>
 801dfa2:	2200      	movs	r2, #0
 801dfa4:	6062      	str	r2, [r4, #4]
 801dfa6:	04d9      	lsls	r1, r3, #19
 801dfa8:	6922      	ldr	r2, [r4, #16]
 801dfaa:	6022      	str	r2, [r4, #0]
 801dfac:	d504      	bpl.n	801dfb8 <__sflush_r+0x7c>
 801dfae:	1c42      	adds	r2, r0, #1
 801dfb0:	d101      	bne.n	801dfb6 <__sflush_r+0x7a>
 801dfb2:	682b      	ldr	r3, [r5, #0]
 801dfb4:	b903      	cbnz	r3, 801dfb8 <__sflush_r+0x7c>
 801dfb6:	6560      	str	r0, [r4, #84]	; 0x54
 801dfb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dfba:	602f      	str	r7, [r5, #0]
 801dfbc:	2900      	cmp	r1, #0
 801dfbe:	d0ca      	beq.n	801df56 <__sflush_r+0x1a>
 801dfc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dfc4:	4299      	cmp	r1, r3
 801dfc6:	d002      	beq.n	801dfce <__sflush_r+0x92>
 801dfc8:	4628      	mov	r0, r5
 801dfca:	f7ff fc6b 	bl	801d8a4 <_free_r>
 801dfce:	2000      	movs	r0, #0
 801dfd0:	6360      	str	r0, [r4, #52]	; 0x34
 801dfd2:	e7c1      	b.n	801df58 <__sflush_r+0x1c>
 801dfd4:	6a21      	ldr	r1, [r4, #32]
 801dfd6:	2301      	movs	r3, #1
 801dfd8:	4628      	mov	r0, r5
 801dfda:	47b0      	blx	r6
 801dfdc:	1c41      	adds	r1, r0, #1
 801dfde:	d1c7      	bne.n	801df70 <__sflush_r+0x34>
 801dfe0:	682b      	ldr	r3, [r5, #0]
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	d0c4      	beq.n	801df70 <__sflush_r+0x34>
 801dfe6:	2b1d      	cmp	r3, #29
 801dfe8:	d001      	beq.n	801dfee <__sflush_r+0xb2>
 801dfea:	2b16      	cmp	r3, #22
 801dfec:	d101      	bne.n	801dff2 <__sflush_r+0xb6>
 801dfee:	602f      	str	r7, [r5, #0]
 801dff0:	e7b1      	b.n	801df56 <__sflush_r+0x1a>
 801dff2:	89a3      	ldrh	r3, [r4, #12]
 801dff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dff8:	81a3      	strh	r3, [r4, #12]
 801dffa:	e7ad      	b.n	801df58 <__sflush_r+0x1c>
 801dffc:	690f      	ldr	r7, [r1, #16]
 801dffe:	2f00      	cmp	r7, #0
 801e000:	d0a9      	beq.n	801df56 <__sflush_r+0x1a>
 801e002:	0793      	lsls	r3, r2, #30
 801e004:	680e      	ldr	r6, [r1, #0]
 801e006:	bf08      	it	eq
 801e008:	694b      	ldreq	r3, [r1, #20]
 801e00a:	600f      	str	r7, [r1, #0]
 801e00c:	bf18      	it	ne
 801e00e:	2300      	movne	r3, #0
 801e010:	eba6 0807 	sub.w	r8, r6, r7
 801e014:	608b      	str	r3, [r1, #8]
 801e016:	f1b8 0f00 	cmp.w	r8, #0
 801e01a:	dd9c      	ble.n	801df56 <__sflush_r+0x1a>
 801e01c:	6a21      	ldr	r1, [r4, #32]
 801e01e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e020:	4643      	mov	r3, r8
 801e022:	463a      	mov	r2, r7
 801e024:	4628      	mov	r0, r5
 801e026:	47b0      	blx	r6
 801e028:	2800      	cmp	r0, #0
 801e02a:	dc06      	bgt.n	801e03a <__sflush_r+0xfe>
 801e02c:	89a3      	ldrh	r3, [r4, #12]
 801e02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e032:	81a3      	strh	r3, [r4, #12]
 801e034:	f04f 30ff 	mov.w	r0, #4294967295
 801e038:	e78e      	b.n	801df58 <__sflush_r+0x1c>
 801e03a:	4407      	add	r7, r0
 801e03c:	eba8 0800 	sub.w	r8, r8, r0
 801e040:	e7e9      	b.n	801e016 <__sflush_r+0xda>
 801e042:	bf00      	nop
 801e044:	20400001 	.word	0x20400001

0801e048 <_fflush_r>:
 801e048:	b538      	push	{r3, r4, r5, lr}
 801e04a:	690b      	ldr	r3, [r1, #16]
 801e04c:	4605      	mov	r5, r0
 801e04e:	460c      	mov	r4, r1
 801e050:	b913      	cbnz	r3, 801e058 <_fflush_r+0x10>
 801e052:	2500      	movs	r5, #0
 801e054:	4628      	mov	r0, r5
 801e056:	bd38      	pop	{r3, r4, r5, pc}
 801e058:	b118      	cbz	r0, 801e062 <_fflush_r+0x1a>
 801e05a:	6983      	ldr	r3, [r0, #24]
 801e05c:	b90b      	cbnz	r3, 801e062 <_fflush_r+0x1a>
 801e05e:	f000 f887 	bl	801e170 <__sinit>
 801e062:	4b14      	ldr	r3, [pc, #80]	; (801e0b4 <_fflush_r+0x6c>)
 801e064:	429c      	cmp	r4, r3
 801e066:	d11b      	bne.n	801e0a0 <_fflush_r+0x58>
 801e068:	686c      	ldr	r4, [r5, #4]
 801e06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e06e:	2b00      	cmp	r3, #0
 801e070:	d0ef      	beq.n	801e052 <_fflush_r+0xa>
 801e072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e074:	07d0      	lsls	r0, r2, #31
 801e076:	d404      	bmi.n	801e082 <_fflush_r+0x3a>
 801e078:	0599      	lsls	r1, r3, #22
 801e07a:	d402      	bmi.n	801e082 <_fflush_r+0x3a>
 801e07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e07e:	f000 f927 	bl	801e2d0 <__retarget_lock_acquire_recursive>
 801e082:	4628      	mov	r0, r5
 801e084:	4621      	mov	r1, r4
 801e086:	f7ff ff59 	bl	801df3c <__sflush_r>
 801e08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e08c:	07da      	lsls	r2, r3, #31
 801e08e:	4605      	mov	r5, r0
 801e090:	d4e0      	bmi.n	801e054 <_fflush_r+0xc>
 801e092:	89a3      	ldrh	r3, [r4, #12]
 801e094:	059b      	lsls	r3, r3, #22
 801e096:	d4dd      	bmi.n	801e054 <_fflush_r+0xc>
 801e098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e09a:	f000 f91a 	bl	801e2d2 <__retarget_lock_release_recursive>
 801e09e:	e7d9      	b.n	801e054 <_fflush_r+0xc>
 801e0a0:	4b05      	ldr	r3, [pc, #20]	; (801e0b8 <_fflush_r+0x70>)
 801e0a2:	429c      	cmp	r4, r3
 801e0a4:	d101      	bne.n	801e0aa <_fflush_r+0x62>
 801e0a6:	68ac      	ldr	r4, [r5, #8]
 801e0a8:	e7df      	b.n	801e06a <_fflush_r+0x22>
 801e0aa:	4b04      	ldr	r3, [pc, #16]	; (801e0bc <_fflush_r+0x74>)
 801e0ac:	429c      	cmp	r4, r3
 801e0ae:	bf08      	it	eq
 801e0b0:	68ec      	ldreq	r4, [r5, #12]
 801e0b2:	e7da      	b.n	801e06a <_fflush_r+0x22>
 801e0b4:	08024a00 	.word	0x08024a00
 801e0b8:	08024a20 	.word	0x08024a20
 801e0bc:	080249e0 	.word	0x080249e0

0801e0c0 <std>:
 801e0c0:	2300      	movs	r3, #0
 801e0c2:	b510      	push	{r4, lr}
 801e0c4:	4604      	mov	r4, r0
 801e0c6:	e9c0 3300 	strd	r3, r3, [r0]
 801e0ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e0ce:	6083      	str	r3, [r0, #8]
 801e0d0:	8181      	strh	r1, [r0, #12]
 801e0d2:	6643      	str	r3, [r0, #100]	; 0x64
 801e0d4:	81c2      	strh	r2, [r0, #14]
 801e0d6:	6183      	str	r3, [r0, #24]
 801e0d8:	4619      	mov	r1, r3
 801e0da:	2208      	movs	r2, #8
 801e0dc:	305c      	adds	r0, #92	; 0x5c
 801e0de:	f7ff fbc3 	bl	801d868 <memset>
 801e0e2:	4b05      	ldr	r3, [pc, #20]	; (801e0f8 <std+0x38>)
 801e0e4:	6263      	str	r3, [r4, #36]	; 0x24
 801e0e6:	4b05      	ldr	r3, [pc, #20]	; (801e0fc <std+0x3c>)
 801e0e8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e0ea:	4b05      	ldr	r3, [pc, #20]	; (801e100 <std+0x40>)
 801e0ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e0ee:	4b05      	ldr	r3, [pc, #20]	; (801e104 <std+0x44>)
 801e0f0:	6224      	str	r4, [r4, #32]
 801e0f2:	6323      	str	r3, [r4, #48]	; 0x30
 801e0f4:	bd10      	pop	{r4, pc}
 801e0f6:	bf00      	nop
 801e0f8:	0801ec4d 	.word	0x0801ec4d
 801e0fc:	0801ec6f 	.word	0x0801ec6f
 801e100:	0801eca7 	.word	0x0801eca7
 801e104:	0801eccb 	.word	0x0801eccb

0801e108 <_cleanup_r>:
 801e108:	4901      	ldr	r1, [pc, #4]	; (801e110 <_cleanup_r+0x8>)
 801e10a:	f000 b8c1 	b.w	801e290 <_fwalk_reent>
 801e10e:	bf00      	nop
 801e110:	0801e049 	.word	0x0801e049

0801e114 <__sfmoreglue>:
 801e114:	b570      	push	{r4, r5, r6, lr}
 801e116:	2268      	movs	r2, #104	; 0x68
 801e118:	1e4d      	subs	r5, r1, #1
 801e11a:	4355      	muls	r5, r2
 801e11c:	460e      	mov	r6, r1
 801e11e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e122:	f7ff fc2b 	bl	801d97c <_malloc_r>
 801e126:	4604      	mov	r4, r0
 801e128:	b140      	cbz	r0, 801e13c <__sfmoreglue+0x28>
 801e12a:	2100      	movs	r1, #0
 801e12c:	e9c0 1600 	strd	r1, r6, [r0]
 801e130:	300c      	adds	r0, #12
 801e132:	60a0      	str	r0, [r4, #8]
 801e134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e138:	f7ff fb96 	bl	801d868 <memset>
 801e13c:	4620      	mov	r0, r4
 801e13e:	bd70      	pop	{r4, r5, r6, pc}

0801e140 <__sfp_lock_acquire>:
 801e140:	4801      	ldr	r0, [pc, #4]	; (801e148 <__sfp_lock_acquire+0x8>)
 801e142:	f000 b8c5 	b.w	801e2d0 <__retarget_lock_acquire_recursive>
 801e146:	bf00      	nop
 801e148:	20002911 	.word	0x20002911

0801e14c <__sfp_lock_release>:
 801e14c:	4801      	ldr	r0, [pc, #4]	; (801e154 <__sfp_lock_release+0x8>)
 801e14e:	f000 b8c0 	b.w	801e2d2 <__retarget_lock_release_recursive>
 801e152:	bf00      	nop
 801e154:	20002911 	.word	0x20002911

0801e158 <__sinit_lock_acquire>:
 801e158:	4801      	ldr	r0, [pc, #4]	; (801e160 <__sinit_lock_acquire+0x8>)
 801e15a:	f000 b8b9 	b.w	801e2d0 <__retarget_lock_acquire_recursive>
 801e15e:	bf00      	nop
 801e160:	20002912 	.word	0x20002912

0801e164 <__sinit_lock_release>:
 801e164:	4801      	ldr	r0, [pc, #4]	; (801e16c <__sinit_lock_release+0x8>)
 801e166:	f000 b8b4 	b.w	801e2d2 <__retarget_lock_release_recursive>
 801e16a:	bf00      	nop
 801e16c:	20002912 	.word	0x20002912

0801e170 <__sinit>:
 801e170:	b510      	push	{r4, lr}
 801e172:	4604      	mov	r4, r0
 801e174:	f7ff fff0 	bl	801e158 <__sinit_lock_acquire>
 801e178:	69a3      	ldr	r3, [r4, #24]
 801e17a:	b11b      	cbz	r3, 801e184 <__sinit+0x14>
 801e17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e180:	f7ff bff0 	b.w	801e164 <__sinit_lock_release>
 801e184:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e188:	6523      	str	r3, [r4, #80]	; 0x50
 801e18a:	4b13      	ldr	r3, [pc, #76]	; (801e1d8 <__sinit+0x68>)
 801e18c:	4a13      	ldr	r2, [pc, #76]	; (801e1dc <__sinit+0x6c>)
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	62a2      	str	r2, [r4, #40]	; 0x28
 801e192:	42a3      	cmp	r3, r4
 801e194:	bf04      	itt	eq
 801e196:	2301      	moveq	r3, #1
 801e198:	61a3      	streq	r3, [r4, #24]
 801e19a:	4620      	mov	r0, r4
 801e19c:	f000 f820 	bl	801e1e0 <__sfp>
 801e1a0:	6060      	str	r0, [r4, #4]
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	f000 f81c 	bl	801e1e0 <__sfp>
 801e1a8:	60a0      	str	r0, [r4, #8]
 801e1aa:	4620      	mov	r0, r4
 801e1ac:	f000 f818 	bl	801e1e0 <__sfp>
 801e1b0:	2200      	movs	r2, #0
 801e1b2:	60e0      	str	r0, [r4, #12]
 801e1b4:	2104      	movs	r1, #4
 801e1b6:	6860      	ldr	r0, [r4, #4]
 801e1b8:	f7ff ff82 	bl	801e0c0 <std>
 801e1bc:	68a0      	ldr	r0, [r4, #8]
 801e1be:	2201      	movs	r2, #1
 801e1c0:	2109      	movs	r1, #9
 801e1c2:	f7ff ff7d 	bl	801e0c0 <std>
 801e1c6:	68e0      	ldr	r0, [r4, #12]
 801e1c8:	2202      	movs	r2, #2
 801e1ca:	2112      	movs	r1, #18
 801e1cc:	f7ff ff78 	bl	801e0c0 <std>
 801e1d0:	2301      	movs	r3, #1
 801e1d2:	61a3      	str	r3, [r4, #24]
 801e1d4:	e7d2      	b.n	801e17c <__sinit+0xc>
 801e1d6:	bf00      	nop
 801e1d8:	0802492c 	.word	0x0802492c
 801e1dc:	0801e109 	.word	0x0801e109

0801e1e0 <__sfp>:
 801e1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1e2:	4607      	mov	r7, r0
 801e1e4:	f7ff ffac 	bl	801e140 <__sfp_lock_acquire>
 801e1e8:	4b1e      	ldr	r3, [pc, #120]	; (801e264 <__sfp+0x84>)
 801e1ea:	681e      	ldr	r6, [r3, #0]
 801e1ec:	69b3      	ldr	r3, [r6, #24]
 801e1ee:	b913      	cbnz	r3, 801e1f6 <__sfp+0x16>
 801e1f0:	4630      	mov	r0, r6
 801e1f2:	f7ff ffbd 	bl	801e170 <__sinit>
 801e1f6:	3648      	adds	r6, #72	; 0x48
 801e1f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e1fc:	3b01      	subs	r3, #1
 801e1fe:	d503      	bpl.n	801e208 <__sfp+0x28>
 801e200:	6833      	ldr	r3, [r6, #0]
 801e202:	b30b      	cbz	r3, 801e248 <__sfp+0x68>
 801e204:	6836      	ldr	r6, [r6, #0]
 801e206:	e7f7      	b.n	801e1f8 <__sfp+0x18>
 801e208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e20c:	b9d5      	cbnz	r5, 801e244 <__sfp+0x64>
 801e20e:	4b16      	ldr	r3, [pc, #88]	; (801e268 <__sfp+0x88>)
 801e210:	60e3      	str	r3, [r4, #12]
 801e212:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e216:	6665      	str	r5, [r4, #100]	; 0x64
 801e218:	f000 f859 	bl	801e2ce <__retarget_lock_init_recursive>
 801e21c:	f7ff ff96 	bl	801e14c <__sfp_lock_release>
 801e220:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e224:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e228:	6025      	str	r5, [r4, #0]
 801e22a:	61a5      	str	r5, [r4, #24]
 801e22c:	2208      	movs	r2, #8
 801e22e:	4629      	mov	r1, r5
 801e230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e234:	f7ff fb18 	bl	801d868 <memset>
 801e238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e23c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e240:	4620      	mov	r0, r4
 801e242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e244:	3468      	adds	r4, #104	; 0x68
 801e246:	e7d9      	b.n	801e1fc <__sfp+0x1c>
 801e248:	2104      	movs	r1, #4
 801e24a:	4638      	mov	r0, r7
 801e24c:	f7ff ff62 	bl	801e114 <__sfmoreglue>
 801e250:	4604      	mov	r4, r0
 801e252:	6030      	str	r0, [r6, #0]
 801e254:	2800      	cmp	r0, #0
 801e256:	d1d5      	bne.n	801e204 <__sfp+0x24>
 801e258:	f7ff ff78 	bl	801e14c <__sfp_lock_release>
 801e25c:	230c      	movs	r3, #12
 801e25e:	603b      	str	r3, [r7, #0]
 801e260:	e7ee      	b.n	801e240 <__sfp+0x60>
 801e262:	bf00      	nop
 801e264:	0802492c 	.word	0x0802492c
 801e268:	ffff0001 	.word	0xffff0001

0801e26c <fiprintf>:
 801e26c:	b40e      	push	{r1, r2, r3}
 801e26e:	b503      	push	{r0, r1, lr}
 801e270:	4601      	mov	r1, r0
 801e272:	ab03      	add	r3, sp, #12
 801e274:	4805      	ldr	r0, [pc, #20]	; (801e28c <fiprintf+0x20>)
 801e276:	f853 2b04 	ldr.w	r2, [r3], #4
 801e27a:	6800      	ldr	r0, [r0, #0]
 801e27c:	9301      	str	r3, [sp, #4]
 801e27e:	f000 fa21 	bl	801e6c4 <_vfiprintf_r>
 801e282:	b002      	add	sp, #8
 801e284:	f85d eb04 	ldr.w	lr, [sp], #4
 801e288:	b003      	add	sp, #12
 801e28a:	4770      	bx	lr
 801e28c:	20000074 	.word	0x20000074

0801e290 <_fwalk_reent>:
 801e290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e294:	4606      	mov	r6, r0
 801e296:	4688      	mov	r8, r1
 801e298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e29c:	2700      	movs	r7, #0
 801e29e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e2a2:	f1b9 0901 	subs.w	r9, r9, #1
 801e2a6:	d505      	bpl.n	801e2b4 <_fwalk_reent+0x24>
 801e2a8:	6824      	ldr	r4, [r4, #0]
 801e2aa:	2c00      	cmp	r4, #0
 801e2ac:	d1f7      	bne.n	801e29e <_fwalk_reent+0xe>
 801e2ae:	4638      	mov	r0, r7
 801e2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2b4:	89ab      	ldrh	r3, [r5, #12]
 801e2b6:	2b01      	cmp	r3, #1
 801e2b8:	d907      	bls.n	801e2ca <_fwalk_reent+0x3a>
 801e2ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e2be:	3301      	adds	r3, #1
 801e2c0:	d003      	beq.n	801e2ca <_fwalk_reent+0x3a>
 801e2c2:	4629      	mov	r1, r5
 801e2c4:	4630      	mov	r0, r6
 801e2c6:	47c0      	blx	r8
 801e2c8:	4307      	orrs	r7, r0
 801e2ca:	3568      	adds	r5, #104	; 0x68
 801e2cc:	e7e9      	b.n	801e2a2 <_fwalk_reent+0x12>

0801e2ce <__retarget_lock_init_recursive>:
 801e2ce:	4770      	bx	lr

0801e2d0 <__retarget_lock_acquire_recursive>:
 801e2d0:	4770      	bx	lr

0801e2d2 <__retarget_lock_release_recursive>:
 801e2d2:	4770      	bx	lr

0801e2d4 <__swhatbuf_r>:
 801e2d4:	b570      	push	{r4, r5, r6, lr}
 801e2d6:	460e      	mov	r6, r1
 801e2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e2dc:	2900      	cmp	r1, #0
 801e2de:	b096      	sub	sp, #88	; 0x58
 801e2e0:	4614      	mov	r4, r2
 801e2e2:	461d      	mov	r5, r3
 801e2e4:	da08      	bge.n	801e2f8 <__swhatbuf_r+0x24>
 801e2e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e2ea:	2200      	movs	r2, #0
 801e2ec:	602a      	str	r2, [r5, #0]
 801e2ee:	061a      	lsls	r2, r3, #24
 801e2f0:	d410      	bmi.n	801e314 <__swhatbuf_r+0x40>
 801e2f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e2f6:	e00e      	b.n	801e316 <__swhatbuf_r+0x42>
 801e2f8:	466a      	mov	r2, sp
 801e2fa:	f000 fd15 	bl	801ed28 <_fstat_r>
 801e2fe:	2800      	cmp	r0, #0
 801e300:	dbf1      	blt.n	801e2e6 <__swhatbuf_r+0x12>
 801e302:	9a01      	ldr	r2, [sp, #4]
 801e304:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e308:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e30c:	425a      	negs	r2, r3
 801e30e:	415a      	adcs	r2, r3
 801e310:	602a      	str	r2, [r5, #0]
 801e312:	e7ee      	b.n	801e2f2 <__swhatbuf_r+0x1e>
 801e314:	2340      	movs	r3, #64	; 0x40
 801e316:	2000      	movs	r0, #0
 801e318:	6023      	str	r3, [r4, #0]
 801e31a:	b016      	add	sp, #88	; 0x58
 801e31c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e320 <__smakebuf_r>:
 801e320:	898b      	ldrh	r3, [r1, #12]
 801e322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e324:	079d      	lsls	r5, r3, #30
 801e326:	4606      	mov	r6, r0
 801e328:	460c      	mov	r4, r1
 801e32a:	d507      	bpl.n	801e33c <__smakebuf_r+0x1c>
 801e32c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e330:	6023      	str	r3, [r4, #0]
 801e332:	6123      	str	r3, [r4, #16]
 801e334:	2301      	movs	r3, #1
 801e336:	6163      	str	r3, [r4, #20]
 801e338:	b002      	add	sp, #8
 801e33a:	bd70      	pop	{r4, r5, r6, pc}
 801e33c:	ab01      	add	r3, sp, #4
 801e33e:	466a      	mov	r2, sp
 801e340:	f7ff ffc8 	bl	801e2d4 <__swhatbuf_r>
 801e344:	9900      	ldr	r1, [sp, #0]
 801e346:	4605      	mov	r5, r0
 801e348:	4630      	mov	r0, r6
 801e34a:	f7ff fb17 	bl	801d97c <_malloc_r>
 801e34e:	b948      	cbnz	r0, 801e364 <__smakebuf_r+0x44>
 801e350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e354:	059a      	lsls	r2, r3, #22
 801e356:	d4ef      	bmi.n	801e338 <__smakebuf_r+0x18>
 801e358:	f023 0303 	bic.w	r3, r3, #3
 801e35c:	f043 0302 	orr.w	r3, r3, #2
 801e360:	81a3      	strh	r3, [r4, #12]
 801e362:	e7e3      	b.n	801e32c <__smakebuf_r+0xc>
 801e364:	4b0d      	ldr	r3, [pc, #52]	; (801e39c <__smakebuf_r+0x7c>)
 801e366:	62b3      	str	r3, [r6, #40]	; 0x28
 801e368:	89a3      	ldrh	r3, [r4, #12]
 801e36a:	6020      	str	r0, [r4, #0]
 801e36c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e370:	81a3      	strh	r3, [r4, #12]
 801e372:	9b00      	ldr	r3, [sp, #0]
 801e374:	6163      	str	r3, [r4, #20]
 801e376:	9b01      	ldr	r3, [sp, #4]
 801e378:	6120      	str	r0, [r4, #16]
 801e37a:	b15b      	cbz	r3, 801e394 <__smakebuf_r+0x74>
 801e37c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e380:	4630      	mov	r0, r6
 801e382:	f000 fce3 	bl	801ed4c <_isatty_r>
 801e386:	b128      	cbz	r0, 801e394 <__smakebuf_r+0x74>
 801e388:	89a3      	ldrh	r3, [r4, #12]
 801e38a:	f023 0303 	bic.w	r3, r3, #3
 801e38e:	f043 0301 	orr.w	r3, r3, #1
 801e392:	81a3      	strh	r3, [r4, #12]
 801e394:	89a0      	ldrh	r0, [r4, #12]
 801e396:	4305      	orrs	r5, r0
 801e398:	81a5      	strh	r5, [r4, #12]
 801e39a:	e7cd      	b.n	801e338 <__smakebuf_r+0x18>
 801e39c:	0801e109 	.word	0x0801e109

0801e3a0 <__malloc_lock>:
 801e3a0:	4801      	ldr	r0, [pc, #4]	; (801e3a8 <__malloc_lock+0x8>)
 801e3a2:	f7ff bf95 	b.w	801e2d0 <__retarget_lock_acquire_recursive>
 801e3a6:	bf00      	nop
 801e3a8:	20002910 	.word	0x20002910

0801e3ac <__malloc_unlock>:
 801e3ac:	4801      	ldr	r0, [pc, #4]	; (801e3b4 <__malloc_unlock+0x8>)
 801e3ae:	f7ff bf90 	b.w	801e2d2 <__retarget_lock_release_recursive>
 801e3b2:	bf00      	nop
 801e3b4:	20002910 	.word	0x20002910

0801e3b8 <__ssputs_r>:
 801e3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3bc:	688e      	ldr	r6, [r1, #8]
 801e3be:	429e      	cmp	r6, r3
 801e3c0:	4682      	mov	sl, r0
 801e3c2:	460c      	mov	r4, r1
 801e3c4:	4690      	mov	r8, r2
 801e3c6:	461f      	mov	r7, r3
 801e3c8:	d838      	bhi.n	801e43c <__ssputs_r+0x84>
 801e3ca:	898a      	ldrh	r2, [r1, #12]
 801e3cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e3d0:	d032      	beq.n	801e438 <__ssputs_r+0x80>
 801e3d2:	6825      	ldr	r5, [r4, #0]
 801e3d4:	6909      	ldr	r1, [r1, #16]
 801e3d6:	eba5 0901 	sub.w	r9, r5, r1
 801e3da:	6965      	ldr	r5, [r4, #20]
 801e3dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e3e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e3e4:	3301      	adds	r3, #1
 801e3e6:	444b      	add	r3, r9
 801e3e8:	106d      	asrs	r5, r5, #1
 801e3ea:	429d      	cmp	r5, r3
 801e3ec:	bf38      	it	cc
 801e3ee:	461d      	movcc	r5, r3
 801e3f0:	0553      	lsls	r3, r2, #21
 801e3f2:	d531      	bpl.n	801e458 <__ssputs_r+0xa0>
 801e3f4:	4629      	mov	r1, r5
 801e3f6:	f7ff fac1 	bl	801d97c <_malloc_r>
 801e3fa:	4606      	mov	r6, r0
 801e3fc:	b950      	cbnz	r0, 801e414 <__ssputs_r+0x5c>
 801e3fe:	230c      	movs	r3, #12
 801e400:	f8ca 3000 	str.w	r3, [sl]
 801e404:	89a3      	ldrh	r3, [r4, #12]
 801e406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e40a:	81a3      	strh	r3, [r4, #12]
 801e40c:	f04f 30ff 	mov.w	r0, #4294967295
 801e410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e414:	6921      	ldr	r1, [r4, #16]
 801e416:	464a      	mov	r2, r9
 801e418:	f7ff f9fe 	bl	801d818 <memcpy>
 801e41c:	89a3      	ldrh	r3, [r4, #12]
 801e41e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e426:	81a3      	strh	r3, [r4, #12]
 801e428:	6126      	str	r6, [r4, #16]
 801e42a:	6165      	str	r5, [r4, #20]
 801e42c:	444e      	add	r6, r9
 801e42e:	eba5 0509 	sub.w	r5, r5, r9
 801e432:	6026      	str	r6, [r4, #0]
 801e434:	60a5      	str	r5, [r4, #8]
 801e436:	463e      	mov	r6, r7
 801e438:	42be      	cmp	r6, r7
 801e43a:	d900      	bls.n	801e43e <__ssputs_r+0x86>
 801e43c:	463e      	mov	r6, r7
 801e43e:	6820      	ldr	r0, [r4, #0]
 801e440:	4632      	mov	r2, r6
 801e442:	4641      	mov	r1, r8
 801e444:	f7ff f9f6 	bl	801d834 <memmove>
 801e448:	68a3      	ldr	r3, [r4, #8]
 801e44a:	1b9b      	subs	r3, r3, r6
 801e44c:	60a3      	str	r3, [r4, #8]
 801e44e:	6823      	ldr	r3, [r4, #0]
 801e450:	4433      	add	r3, r6
 801e452:	6023      	str	r3, [r4, #0]
 801e454:	2000      	movs	r0, #0
 801e456:	e7db      	b.n	801e410 <__ssputs_r+0x58>
 801e458:	462a      	mov	r2, r5
 801e45a:	f000 fc99 	bl	801ed90 <_realloc_r>
 801e45e:	4606      	mov	r6, r0
 801e460:	2800      	cmp	r0, #0
 801e462:	d1e1      	bne.n	801e428 <__ssputs_r+0x70>
 801e464:	6921      	ldr	r1, [r4, #16]
 801e466:	4650      	mov	r0, sl
 801e468:	f7ff fa1c 	bl	801d8a4 <_free_r>
 801e46c:	e7c7      	b.n	801e3fe <__ssputs_r+0x46>
	...

0801e470 <_svfiprintf_r>:
 801e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e474:	4698      	mov	r8, r3
 801e476:	898b      	ldrh	r3, [r1, #12]
 801e478:	061b      	lsls	r3, r3, #24
 801e47a:	b09d      	sub	sp, #116	; 0x74
 801e47c:	4607      	mov	r7, r0
 801e47e:	460d      	mov	r5, r1
 801e480:	4614      	mov	r4, r2
 801e482:	d50e      	bpl.n	801e4a2 <_svfiprintf_r+0x32>
 801e484:	690b      	ldr	r3, [r1, #16]
 801e486:	b963      	cbnz	r3, 801e4a2 <_svfiprintf_r+0x32>
 801e488:	2140      	movs	r1, #64	; 0x40
 801e48a:	f7ff fa77 	bl	801d97c <_malloc_r>
 801e48e:	6028      	str	r0, [r5, #0]
 801e490:	6128      	str	r0, [r5, #16]
 801e492:	b920      	cbnz	r0, 801e49e <_svfiprintf_r+0x2e>
 801e494:	230c      	movs	r3, #12
 801e496:	603b      	str	r3, [r7, #0]
 801e498:	f04f 30ff 	mov.w	r0, #4294967295
 801e49c:	e0d1      	b.n	801e642 <_svfiprintf_r+0x1d2>
 801e49e:	2340      	movs	r3, #64	; 0x40
 801e4a0:	616b      	str	r3, [r5, #20]
 801e4a2:	2300      	movs	r3, #0
 801e4a4:	9309      	str	r3, [sp, #36]	; 0x24
 801e4a6:	2320      	movs	r3, #32
 801e4a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e4ac:	f8cd 800c 	str.w	r8, [sp, #12]
 801e4b0:	2330      	movs	r3, #48	; 0x30
 801e4b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e65c <_svfiprintf_r+0x1ec>
 801e4b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e4ba:	f04f 0901 	mov.w	r9, #1
 801e4be:	4623      	mov	r3, r4
 801e4c0:	469a      	mov	sl, r3
 801e4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e4c6:	b10a      	cbz	r2, 801e4cc <_svfiprintf_r+0x5c>
 801e4c8:	2a25      	cmp	r2, #37	; 0x25
 801e4ca:	d1f9      	bne.n	801e4c0 <_svfiprintf_r+0x50>
 801e4cc:	ebba 0b04 	subs.w	fp, sl, r4
 801e4d0:	d00b      	beq.n	801e4ea <_svfiprintf_r+0x7a>
 801e4d2:	465b      	mov	r3, fp
 801e4d4:	4622      	mov	r2, r4
 801e4d6:	4629      	mov	r1, r5
 801e4d8:	4638      	mov	r0, r7
 801e4da:	f7ff ff6d 	bl	801e3b8 <__ssputs_r>
 801e4de:	3001      	adds	r0, #1
 801e4e0:	f000 80aa 	beq.w	801e638 <_svfiprintf_r+0x1c8>
 801e4e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e4e6:	445a      	add	r2, fp
 801e4e8:	9209      	str	r2, [sp, #36]	; 0x24
 801e4ea:	f89a 3000 	ldrb.w	r3, [sl]
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	f000 80a2 	beq.w	801e638 <_svfiprintf_r+0x1c8>
 801e4f4:	2300      	movs	r3, #0
 801e4f6:	f04f 32ff 	mov.w	r2, #4294967295
 801e4fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e4fe:	f10a 0a01 	add.w	sl, sl, #1
 801e502:	9304      	str	r3, [sp, #16]
 801e504:	9307      	str	r3, [sp, #28]
 801e506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e50a:	931a      	str	r3, [sp, #104]	; 0x68
 801e50c:	4654      	mov	r4, sl
 801e50e:	2205      	movs	r2, #5
 801e510:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e514:	4851      	ldr	r0, [pc, #324]	; (801e65c <_svfiprintf_r+0x1ec>)
 801e516:	f7e1 fe63 	bl	80001e0 <memchr>
 801e51a:	9a04      	ldr	r2, [sp, #16]
 801e51c:	b9d8      	cbnz	r0, 801e556 <_svfiprintf_r+0xe6>
 801e51e:	06d0      	lsls	r0, r2, #27
 801e520:	bf44      	itt	mi
 801e522:	2320      	movmi	r3, #32
 801e524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e528:	0711      	lsls	r1, r2, #28
 801e52a:	bf44      	itt	mi
 801e52c:	232b      	movmi	r3, #43	; 0x2b
 801e52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e532:	f89a 3000 	ldrb.w	r3, [sl]
 801e536:	2b2a      	cmp	r3, #42	; 0x2a
 801e538:	d015      	beq.n	801e566 <_svfiprintf_r+0xf6>
 801e53a:	9a07      	ldr	r2, [sp, #28]
 801e53c:	4654      	mov	r4, sl
 801e53e:	2000      	movs	r0, #0
 801e540:	f04f 0c0a 	mov.w	ip, #10
 801e544:	4621      	mov	r1, r4
 801e546:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e54a:	3b30      	subs	r3, #48	; 0x30
 801e54c:	2b09      	cmp	r3, #9
 801e54e:	d94e      	bls.n	801e5ee <_svfiprintf_r+0x17e>
 801e550:	b1b0      	cbz	r0, 801e580 <_svfiprintf_r+0x110>
 801e552:	9207      	str	r2, [sp, #28]
 801e554:	e014      	b.n	801e580 <_svfiprintf_r+0x110>
 801e556:	eba0 0308 	sub.w	r3, r0, r8
 801e55a:	fa09 f303 	lsl.w	r3, r9, r3
 801e55e:	4313      	orrs	r3, r2
 801e560:	9304      	str	r3, [sp, #16]
 801e562:	46a2      	mov	sl, r4
 801e564:	e7d2      	b.n	801e50c <_svfiprintf_r+0x9c>
 801e566:	9b03      	ldr	r3, [sp, #12]
 801e568:	1d19      	adds	r1, r3, #4
 801e56a:	681b      	ldr	r3, [r3, #0]
 801e56c:	9103      	str	r1, [sp, #12]
 801e56e:	2b00      	cmp	r3, #0
 801e570:	bfbb      	ittet	lt
 801e572:	425b      	neglt	r3, r3
 801e574:	f042 0202 	orrlt.w	r2, r2, #2
 801e578:	9307      	strge	r3, [sp, #28]
 801e57a:	9307      	strlt	r3, [sp, #28]
 801e57c:	bfb8      	it	lt
 801e57e:	9204      	strlt	r2, [sp, #16]
 801e580:	7823      	ldrb	r3, [r4, #0]
 801e582:	2b2e      	cmp	r3, #46	; 0x2e
 801e584:	d10c      	bne.n	801e5a0 <_svfiprintf_r+0x130>
 801e586:	7863      	ldrb	r3, [r4, #1]
 801e588:	2b2a      	cmp	r3, #42	; 0x2a
 801e58a:	d135      	bne.n	801e5f8 <_svfiprintf_r+0x188>
 801e58c:	9b03      	ldr	r3, [sp, #12]
 801e58e:	1d1a      	adds	r2, r3, #4
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	9203      	str	r2, [sp, #12]
 801e594:	2b00      	cmp	r3, #0
 801e596:	bfb8      	it	lt
 801e598:	f04f 33ff 	movlt.w	r3, #4294967295
 801e59c:	3402      	adds	r4, #2
 801e59e:	9305      	str	r3, [sp, #20]
 801e5a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e66c <_svfiprintf_r+0x1fc>
 801e5a4:	7821      	ldrb	r1, [r4, #0]
 801e5a6:	2203      	movs	r2, #3
 801e5a8:	4650      	mov	r0, sl
 801e5aa:	f7e1 fe19 	bl	80001e0 <memchr>
 801e5ae:	b140      	cbz	r0, 801e5c2 <_svfiprintf_r+0x152>
 801e5b0:	2340      	movs	r3, #64	; 0x40
 801e5b2:	eba0 000a 	sub.w	r0, r0, sl
 801e5b6:	fa03 f000 	lsl.w	r0, r3, r0
 801e5ba:	9b04      	ldr	r3, [sp, #16]
 801e5bc:	4303      	orrs	r3, r0
 801e5be:	3401      	adds	r4, #1
 801e5c0:	9304      	str	r3, [sp, #16]
 801e5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5c6:	4826      	ldr	r0, [pc, #152]	; (801e660 <_svfiprintf_r+0x1f0>)
 801e5c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e5cc:	2206      	movs	r2, #6
 801e5ce:	f7e1 fe07 	bl	80001e0 <memchr>
 801e5d2:	2800      	cmp	r0, #0
 801e5d4:	d038      	beq.n	801e648 <_svfiprintf_r+0x1d8>
 801e5d6:	4b23      	ldr	r3, [pc, #140]	; (801e664 <_svfiprintf_r+0x1f4>)
 801e5d8:	bb1b      	cbnz	r3, 801e622 <_svfiprintf_r+0x1b2>
 801e5da:	9b03      	ldr	r3, [sp, #12]
 801e5dc:	3307      	adds	r3, #7
 801e5de:	f023 0307 	bic.w	r3, r3, #7
 801e5e2:	3308      	adds	r3, #8
 801e5e4:	9303      	str	r3, [sp, #12]
 801e5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5e8:	4433      	add	r3, r6
 801e5ea:	9309      	str	r3, [sp, #36]	; 0x24
 801e5ec:	e767      	b.n	801e4be <_svfiprintf_r+0x4e>
 801e5ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801e5f2:	460c      	mov	r4, r1
 801e5f4:	2001      	movs	r0, #1
 801e5f6:	e7a5      	b.n	801e544 <_svfiprintf_r+0xd4>
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	3401      	adds	r4, #1
 801e5fc:	9305      	str	r3, [sp, #20]
 801e5fe:	4619      	mov	r1, r3
 801e600:	f04f 0c0a 	mov.w	ip, #10
 801e604:	4620      	mov	r0, r4
 801e606:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e60a:	3a30      	subs	r2, #48	; 0x30
 801e60c:	2a09      	cmp	r2, #9
 801e60e:	d903      	bls.n	801e618 <_svfiprintf_r+0x1a8>
 801e610:	2b00      	cmp	r3, #0
 801e612:	d0c5      	beq.n	801e5a0 <_svfiprintf_r+0x130>
 801e614:	9105      	str	r1, [sp, #20]
 801e616:	e7c3      	b.n	801e5a0 <_svfiprintf_r+0x130>
 801e618:	fb0c 2101 	mla	r1, ip, r1, r2
 801e61c:	4604      	mov	r4, r0
 801e61e:	2301      	movs	r3, #1
 801e620:	e7f0      	b.n	801e604 <_svfiprintf_r+0x194>
 801e622:	ab03      	add	r3, sp, #12
 801e624:	9300      	str	r3, [sp, #0]
 801e626:	462a      	mov	r2, r5
 801e628:	4b0f      	ldr	r3, [pc, #60]	; (801e668 <_svfiprintf_r+0x1f8>)
 801e62a:	a904      	add	r1, sp, #16
 801e62c:	4638      	mov	r0, r7
 801e62e:	f3af 8000 	nop.w
 801e632:	1c42      	adds	r2, r0, #1
 801e634:	4606      	mov	r6, r0
 801e636:	d1d6      	bne.n	801e5e6 <_svfiprintf_r+0x176>
 801e638:	89ab      	ldrh	r3, [r5, #12]
 801e63a:	065b      	lsls	r3, r3, #25
 801e63c:	f53f af2c 	bmi.w	801e498 <_svfiprintf_r+0x28>
 801e640:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e642:	b01d      	add	sp, #116	; 0x74
 801e644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e648:	ab03      	add	r3, sp, #12
 801e64a:	9300      	str	r3, [sp, #0]
 801e64c:	462a      	mov	r2, r5
 801e64e:	4b06      	ldr	r3, [pc, #24]	; (801e668 <_svfiprintf_r+0x1f8>)
 801e650:	a904      	add	r1, sp, #16
 801e652:	4638      	mov	r0, r7
 801e654:	f000 f9d4 	bl	801ea00 <_printf_i>
 801e658:	e7eb      	b.n	801e632 <_svfiprintf_r+0x1c2>
 801e65a:	bf00      	nop
 801e65c:	08024a40 	.word	0x08024a40
 801e660:	08024a4a 	.word	0x08024a4a
 801e664:	00000000 	.word	0x00000000
 801e668:	0801e3b9 	.word	0x0801e3b9
 801e66c:	08024a46 	.word	0x08024a46

0801e670 <__sfputc_r>:
 801e670:	6893      	ldr	r3, [r2, #8]
 801e672:	3b01      	subs	r3, #1
 801e674:	2b00      	cmp	r3, #0
 801e676:	b410      	push	{r4}
 801e678:	6093      	str	r3, [r2, #8]
 801e67a:	da08      	bge.n	801e68e <__sfputc_r+0x1e>
 801e67c:	6994      	ldr	r4, [r2, #24]
 801e67e:	42a3      	cmp	r3, r4
 801e680:	db01      	blt.n	801e686 <__sfputc_r+0x16>
 801e682:	290a      	cmp	r1, #10
 801e684:	d103      	bne.n	801e68e <__sfputc_r+0x1e>
 801e686:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e68a:	f7ff bb79 	b.w	801dd80 <__swbuf_r>
 801e68e:	6813      	ldr	r3, [r2, #0]
 801e690:	1c58      	adds	r0, r3, #1
 801e692:	6010      	str	r0, [r2, #0]
 801e694:	7019      	strb	r1, [r3, #0]
 801e696:	4608      	mov	r0, r1
 801e698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e69c:	4770      	bx	lr

0801e69e <__sfputs_r>:
 801e69e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6a0:	4606      	mov	r6, r0
 801e6a2:	460f      	mov	r7, r1
 801e6a4:	4614      	mov	r4, r2
 801e6a6:	18d5      	adds	r5, r2, r3
 801e6a8:	42ac      	cmp	r4, r5
 801e6aa:	d101      	bne.n	801e6b0 <__sfputs_r+0x12>
 801e6ac:	2000      	movs	r0, #0
 801e6ae:	e007      	b.n	801e6c0 <__sfputs_r+0x22>
 801e6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6b4:	463a      	mov	r2, r7
 801e6b6:	4630      	mov	r0, r6
 801e6b8:	f7ff ffda 	bl	801e670 <__sfputc_r>
 801e6bc:	1c43      	adds	r3, r0, #1
 801e6be:	d1f3      	bne.n	801e6a8 <__sfputs_r+0xa>
 801e6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e6c4 <_vfiprintf_r>:
 801e6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c8:	460d      	mov	r5, r1
 801e6ca:	b09d      	sub	sp, #116	; 0x74
 801e6cc:	4614      	mov	r4, r2
 801e6ce:	4698      	mov	r8, r3
 801e6d0:	4606      	mov	r6, r0
 801e6d2:	b118      	cbz	r0, 801e6dc <_vfiprintf_r+0x18>
 801e6d4:	6983      	ldr	r3, [r0, #24]
 801e6d6:	b90b      	cbnz	r3, 801e6dc <_vfiprintf_r+0x18>
 801e6d8:	f7ff fd4a 	bl	801e170 <__sinit>
 801e6dc:	4b89      	ldr	r3, [pc, #548]	; (801e904 <_vfiprintf_r+0x240>)
 801e6de:	429d      	cmp	r5, r3
 801e6e0:	d11b      	bne.n	801e71a <_vfiprintf_r+0x56>
 801e6e2:	6875      	ldr	r5, [r6, #4]
 801e6e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e6e6:	07d9      	lsls	r1, r3, #31
 801e6e8:	d405      	bmi.n	801e6f6 <_vfiprintf_r+0x32>
 801e6ea:	89ab      	ldrh	r3, [r5, #12]
 801e6ec:	059a      	lsls	r2, r3, #22
 801e6ee:	d402      	bmi.n	801e6f6 <_vfiprintf_r+0x32>
 801e6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e6f2:	f7ff fded 	bl	801e2d0 <__retarget_lock_acquire_recursive>
 801e6f6:	89ab      	ldrh	r3, [r5, #12]
 801e6f8:	071b      	lsls	r3, r3, #28
 801e6fa:	d501      	bpl.n	801e700 <_vfiprintf_r+0x3c>
 801e6fc:	692b      	ldr	r3, [r5, #16]
 801e6fe:	b9eb      	cbnz	r3, 801e73c <_vfiprintf_r+0x78>
 801e700:	4629      	mov	r1, r5
 801e702:	4630      	mov	r0, r6
 801e704:	f7ff fb8e 	bl	801de24 <__swsetup_r>
 801e708:	b1c0      	cbz	r0, 801e73c <_vfiprintf_r+0x78>
 801e70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e70c:	07dc      	lsls	r4, r3, #31
 801e70e:	d50e      	bpl.n	801e72e <_vfiprintf_r+0x6a>
 801e710:	f04f 30ff 	mov.w	r0, #4294967295
 801e714:	b01d      	add	sp, #116	; 0x74
 801e716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e71a:	4b7b      	ldr	r3, [pc, #492]	; (801e908 <_vfiprintf_r+0x244>)
 801e71c:	429d      	cmp	r5, r3
 801e71e:	d101      	bne.n	801e724 <_vfiprintf_r+0x60>
 801e720:	68b5      	ldr	r5, [r6, #8]
 801e722:	e7df      	b.n	801e6e4 <_vfiprintf_r+0x20>
 801e724:	4b79      	ldr	r3, [pc, #484]	; (801e90c <_vfiprintf_r+0x248>)
 801e726:	429d      	cmp	r5, r3
 801e728:	bf08      	it	eq
 801e72a:	68f5      	ldreq	r5, [r6, #12]
 801e72c:	e7da      	b.n	801e6e4 <_vfiprintf_r+0x20>
 801e72e:	89ab      	ldrh	r3, [r5, #12]
 801e730:	0598      	lsls	r0, r3, #22
 801e732:	d4ed      	bmi.n	801e710 <_vfiprintf_r+0x4c>
 801e734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e736:	f7ff fdcc 	bl	801e2d2 <__retarget_lock_release_recursive>
 801e73a:	e7e9      	b.n	801e710 <_vfiprintf_r+0x4c>
 801e73c:	2300      	movs	r3, #0
 801e73e:	9309      	str	r3, [sp, #36]	; 0x24
 801e740:	2320      	movs	r3, #32
 801e742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e746:	f8cd 800c 	str.w	r8, [sp, #12]
 801e74a:	2330      	movs	r3, #48	; 0x30
 801e74c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e910 <_vfiprintf_r+0x24c>
 801e750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e754:	f04f 0901 	mov.w	r9, #1
 801e758:	4623      	mov	r3, r4
 801e75a:	469a      	mov	sl, r3
 801e75c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e760:	b10a      	cbz	r2, 801e766 <_vfiprintf_r+0xa2>
 801e762:	2a25      	cmp	r2, #37	; 0x25
 801e764:	d1f9      	bne.n	801e75a <_vfiprintf_r+0x96>
 801e766:	ebba 0b04 	subs.w	fp, sl, r4
 801e76a:	d00b      	beq.n	801e784 <_vfiprintf_r+0xc0>
 801e76c:	465b      	mov	r3, fp
 801e76e:	4622      	mov	r2, r4
 801e770:	4629      	mov	r1, r5
 801e772:	4630      	mov	r0, r6
 801e774:	f7ff ff93 	bl	801e69e <__sfputs_r>
 801e778:	3001      	adds	r0, #1
 801e77a:	f000 80aa 	beq.w	801e8d2 <_vfiprintf_r+0x20e>
 801e77e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e780:	445a      	add	r2, fp
 801e782:	9209      	str	r2, [sp, #36]	; 0x24
 801e784:	f89a 3000 	ldrb.w	r3, [sl]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	f000 80a2 	beq.w	801e8d2 <_vfiprintf_r+0x20e>
 801e78e:	2300      	movs	r3, #0
 801e790:	f04f 32ff 	mov.w	r2, #4294967295
 801e794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e798:	f10a 0a01 	add.w	sl, sl, #1
 801e79c:	9304      	str	r3, [sp, #16]
 801e79e:	9307      	str	r3, [sp, #28]
 801e7a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e7a4:	931a      	str	r3, [sp, #104]	; 0x68
 801e7a6:	4654      	mov	r4, sl
 801e7a8:	2205      	movs	r2, #5
 801e7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7ae:	4858      	ldr	r0, [pc, #352]	; (801e910 <_vfiprintf_r+0x24c>)
 801e7b0:	f7e1 fd16 	bl	80001e0 <memchr>
 801e7b4:	9a04      	ldr	r2, [sp, #16]
 801e7b6:	b9d8      	cbnz	r0, 801e7f0 <_vfiprintf_r+0x12c>
 801e7b8:	06d1      	lsls	r1, r2, #27
 801e7ba:	bf44      	itt	mi
 801e7bc:	2320      	movmi	r3, #32
 801e7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e7c2:	0713      	lsls	r3, r2, #28
 801e7c4:	bf44      	itt	mi
 801e7c6:	232b      	movmi	r3, #43	; 0x2b
 801e7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e7cc:	f89a 3000 	ldrb.w	r3, [sl]
 801e7d0:	2b2a      	cmp	r3, #42	; 0x2a
 801e7d2:	d015      	beq.n	801e800 <_vfiprintf_r+0x13c>
 801e7d4:	9a07      	ldr	r2, [sp, #28]
 801e7d6:	4654      	mov	r4, sl
 801e7d8:	2000      	movs	r0, #0
 801e7da:	f04f 0c0a 	mov.w	ip, #10
 801e7de:	4621      	mov	r1, r4
 801e7e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e7e4:	3b30      	subs	r3, #48	; 0x30
 801e7e6:	2b09      	cmp	r3, #9
 801e7e8:	d94e      	bls.n	801e888 <_vfiprintf_r+0x1c4>
 801e7ea:	b1b0      	cbz	r0, 801e81a <_vfiprintf_r+0x156>
 801e7ec:	9207      	str	r2, [sp, #28]
 801e7ee:	e014      	b.n	801e81a <_vfiprintf_r+0x156>
 801e7f0:	eba0 0308 	sub.w	r3, r0, r8
 801e7f4:	fa09 f303 	lsl.w	r3, r9, r3
 801e7f8:	4313      	orrs	r3, r2
 801e7fa:	9304      	str	r3, [sp, #16]
 801e7fc:	46a2      	mov	sl, r4
 801e7fe:	e7d2      	b.n	801e7a6 <_vfiprintf_r+0xe2>
 801e800:	9b03      	ldr	r3, [sp, #12]
 801e802:	1d19      	adds	r1, r3, #4
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	9103      	str	r1, [sp, #12]
 801e808:	2b00      	cmp	r3, #0
 801e80a:	bfbb      	ittet	lt
 801e80c:	425b      	neglt	r3, r3
 801e80e:	f042 0202 	orrlt.w	r2, r2, #2
 801e812:	9307      	strge	r3, [sp, #28]
 801e814:	9307      	strlt	r3, [sp, #28]
 801e816:	bfb8      	it	lt
 801e818:	9204      	strlt	r2, [sp, #16]
 801e81a:	7823      	ldrb	r3, [r4, #0]
 801e81c:	2b2e      	cmp	r3, #46	; 0x2e
 801e81e:	d10c      	bne.n	801e83a <_vfiprintf_r+0x176>
 801e820:	7863      	ldrb	r3, [r4, #1]
 801e822:	2b2a      	cmp	r3, #42	; 0x2a
 801e824:	d135      	bne.n	801e892 <_vfiprintf_r+0x1ce>
 801e826:	9b03      	ldr	r3, [sp, #12]
 801e828:	1d1a      	adds	r2, r3, #4
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	9203      	str	r2, [sp, #12]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	bfb8      	it	lt
 801e832:	f04f 33ff 	movlt.w	r3, #4294967295
 801e836:	3402      	adds	r4, #2
 801e838:	9305      	str	r3, [sp, #20]
 801e83a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e920 <_vfiprintf_r+0x25c>
 801e83e:	7821      	ldrb	r1, [r4, #0]
 801e840:	2203      	movs	r2, #3
 801e842:	4650      	mov	r0, sl
 801e844:	f7e1 fccc 	bl	80001e0 <memchr>
 801e848:	b140      	cbz	r0, 801e85c <_vfiprintf_r+0x198>
 801e84a:	2340      	movs	r3, #64	; 0x40
 801e84c:	eba0 000a 	sub.w	r0, r0, sl
 801e850:	fa03 f000 	lsl.w	r0, r3, r0
 801e854:	9b04      	ldr	r3, [sp, #16]
 801e856:	4303      	orrs	r3, r0
 801e858:	3401      	adds	r4, #1
 801e85a:	9304      	str	r3, [sp, #16]
 801e85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e860:	482c      	ldr	r0, [pc, #176]	; (801e914 <_vfiprintf_r+0x250>)
 801e862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e866:	2206      	movs	r2, #6
 801e868:	f7e1 fcba 	bl	80001e0 <memchr>
 801e86c:	2800      	cmp	r0, #0
 801e86e:	d03f      	beq.n	801e8f0 <_vfiprintf_r+0x22c>
 801e870:	4b29      	ldr	r3, [pc, #164]	; (801e918 <_vfiprintf_r+0x254>)
 801e872:	bb1b      	cbnz	r3, 801e8bc <_vfiprintf_r+0x1f8>
 801e874:	9b03      	ldr	r3, [sp, #12]
 801e876:	3307      	adds	r3, #7
 801e878:	f023 0307 	bic.w	r3, r3, #7
 801e87c:	3308      	adds	r3, #8
 801e87e:	9303      	str	r3, [sp, #12]
 801e880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e882:	443b      	add	r3, r7
 801e884:	9309      	str	r3, [sp, #36]	; 0x24
 801e886:	e767      	b.n	801e758 <_vfiprintf_r+0x94>
 801e888:	fb0c 3202 	mla	r2, ip, r2, r3
 801e88c:	460c      	mov	r4, r1
 801e88e:	2001      	movs	r0, #1
 801e890:	e7a5      	b.n	801e7de <_vfiprintf_r+0x11a>
 801e892:	2300      	movs	r3, #0
 801e894:	3401      	adds	r4, #1
 801e896:	9305      	str	r3, [sp, #20]
 801e898:	4619      	mov	r1, r3
 801e89a:	f04f 0c0a 	mov.w	ip, #10
 801e89e:	4620      	mov	r0, r4
 801e8a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e8a4:	3a30      	subs	r2, #48	; 0x30
 801e8a6:	2a09      	cmp	r2, #9
 801e8a8:	d903      	bls.n	801e8b2 <_vfiprintf_r+0x1ee>
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d0c5      	beq.n	801e83a <_vfiprintf_r+0x176>
 801e8ae:	9105      	str	r1, [sp, #20]
 801e8b0:	e7c3      	b.n	801e83a <_vfiprintf_r+0x176>
 801e8b2:	fb0c 2101 	mla	r1, ip, r1, r2
 801e8b6:	4604      	mov	r4, r0
 801e8b8:	2301      	movs	r3, #1
 801e8ba:	e7f0      	b.n	801e89e <_vfiprintf_r+0x1da>
 801e8bc:	ab03      	add	r3, sp, #12
 801e8be:	9300      	str	r3, [sp, #0]
 801e8c0:	462a      	mov	r2, r5
 801e8c2:	4b16      	ldr	r3, [pc, #88]	; (801e91c <_vfiprintf_r+0x258>)
 801e8c4:	a904      	add	r1, sp, #16
 801e8c6:	4630      	mov	r0, r6
 801e8c8:	f3af 8000 	nop.w
 801e8cc:	4607      	mov	r7, r0
 801e8ce:	1c78      	adds	r0, r7, #1
 801e8d0:	d1d6      	bne.n	801e880 <_vfiprintf_r+0x1bc>
 801e8d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e8d4:	07d9      	lsls	r1, r3, #31
 801e8d6:	d405      	bmi.n	801e8e4 <_vfiprintf_r+0x220>
 801e8d8:	89ab      	ldrh	r3, [r5, #12]
 801e8da:	059a      	lsls	r2, r3, #22
 801e8dc:	d402      	bmi.n	801e8e4 <_vfiprintf_r+0x220>
 801e8de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e8e0:	f7ff fcf7 	bl	801e2d2 <__retarget_lock_release_recursive>
 801e8e4:	89ab      	ldrh	r3, [r5, #12]
 801e8e6:	065b      	lsls	r3, r3, #25
 801e8e8:	f53f af12 	bmi.w	801e710 <_vfiprintf_r+0x4c>
 801e8ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8ee:	e711      	b.n	801e714 <_vfiprintf_r+0x50>
 801e8f0:	ab03      	add	r3, sp, #12
 801e8f2:	9300      	str	r3, [sp, #0]
 801e8f4:	462a      	mov	r2, r5
 801e8f6:	4b09      	ldr	r3, [pc, #36]	; (801e91c <_vfiprintf_r+0x258>)
 801e8f8:	a904      	add	r1, sp, #16
 801e8fa:	4630      	mov	r0, r6
 801e8fc:	f000 f880 	bl	801ea00 <_printf_i>
 801e900:	e7e4      	b.n	801e8cc <_vfiprintf_r+0x208>
 801e902:	bf00      	nop
 801e904:	08024a00 	.word	0x08024a00
 801e908:	08024a20 	.word	0x08024a20
 801e90c:	080249e0 	.word	0x080249e0
 801e910:	08024a40 	.word	0x08024a40
 801e914:	08024a4a 	.word	0x08024a4a
 801e918:	00000000 	.word	0x00000000
 801e91c:	0801e69f 	.word	0x0801e69f
 801e920:	08024a46 	.word	0x08024a46

0801e924 <_printf_common>:
 801e924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e928:	4616      	mov	r6, r2
 801e92a:	4699      	mov	r9, r3
 801e92c:	688a      	ldr	r2, [r1, #8]
 801e92e:	690b      	ldr	r3, [r1, #16]
 801e930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e934:	4293      	cmp	r3, r2
 801e936:	bfb8      	it	lt
 801e938:	4613      	movlt	r3, r2
 801e93a:	6033      	str	r3, [r6, #0]
 801e93c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e940:	4607      	mov	r7, r0
 801e942:	460c      	mov	r4, r1
 801e944:	b10a      	cbz	r2, 801e94a <_printf_common+0x26>
 801e946:	3301      	adds	r3, #1
 801e948:	6033      	str	r3, [r6, #0]
 801e94a:	6823      	ldr	r3, [r4, #0]
 801e94c:	0699      	lsls	r1, r3, #26
 801e94e:	bf42      	ittt	mi
 801e950:	6833      	ldrmi	r3, [r6, #0]
 801e952:	3302      	addmi	r3, #2
 801e954:	6033      	strmi	r3, [r6, #0]
 801e956:	6825      	ldr	r5, [r4, #0]
 801e958:	f015 0506 	ands.w	r5, r5, #6
 801e95c:	d106      	bne.n	801e96c <_printf_common+0x48>
 801e95e:	f104 0a19 	add.w	sl, r4, #25
 801e962:	68e3      	ldr	r3, [r4, #12]
 801e964:	6832      	ldr	r2, [r6, #0]
 801e966:	1a9b      	subs	r3, r3, r2
 801e968:	42ab      	cmp	r3, r5
 801e96a:	dc26      	bgt.n	801e9ba <_printf_common+0x96>
 801e96c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e970:	1e13      	subs	r3, r2, #0
 801e972:	6822      	ldr	r2, [r4, #0]
 801e974:	bf18      	it	ne
 801e976:	2301      	movne	r3, #1
 801e978:	0692      	lsls	r2, r2, #26
 801e97a:	d42b      	bmi.n	801e9d4 <_printf_common+0xb0>
 801e97c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e980:	4649      	mov	r1, r9
 801e982:	4638      	mov	r0, r7
 801e984:	47c0      	blx	r8
 801e986:	3001      	adds	r0, #1
 801e988:	d01e      	beq.n	801e9c8 <_printf_common+0xa4>
 801e98a:	6823      	ldr	r3, [r4, #0]
 801e98c:	68e5      	ldr	r5, [r4, #12]
 801e98e:	6832      	ldr	r2, [r6, #0]
 801e990:	f003 0306 	and.w	r3, r3, #6
 801e994:	2b04      	cmp	r3, #4
 801e996:	bf08      	it	eq
 801e998:	1aad      	subeq	r5, r5, r2
 801e99a:	68a3      	ldr	r3, [r4, #8]
 801e99c:	6922      	ldr	r2, [r4, #16]
 801e99e:	bf0c      	ite	eq
 801e9a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e9a4:	2500      	movne	r5, #0
 801e9a6:	4293      	cmp	r3, r2
 801e9a8:	bfc4      	itt	gt
 801e9aa:	1a9b      	subgt	r3, r3, r2
 801e9ac:	18ed      	addgt	r5, r5, r3
 801e9ae:	2600      	movs	r6, #0
 801e9b0:	341a      	adds	r4, #26
 801e9b2:	42b5      	cmp	r5, r6
 801e9b4:	d11a      	bne.n	801e9ec <_printf_common+0xc8>
 801e9b6:	2000      	movs	r0, #0
 801e9b8:	e008      	b.n	801e9cc <_printf_common+0xa8>
 801e9ba:	2301      	movs	r3, #1
 801e9bc:	4652      	mov	r2, sl
 801e9be:	4649      	mov	r1, r9
 801e9c0:	4638      	mov	r0, r7
 801e9c2:	47c0      	blx	r8
 801e9c4:	3001      	adds	r0, #1
 801e9c6:	d103      	bne.n	801e9d0 <_printf_common+0xac>
 801e9c8:	f04f 30ff 	mov.w	r0, #4294967295
 801e9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9d0:	3501      	adds	r5, #1
 801e9d2:	e7c6      	b.n	801e962 <_printf_common+0x3e>
 801e9d4:	18e1      	adds	r1, r4, r3
 801e9d6:	1c5a      	adds	r2, r3, #1
 801e9d8:	2030      	movs	r0, #48	; 0x30
 801e9da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e9de:	4422      	add	r2, r4
 801e9e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e9e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e9e8:	3302      	adds	r3, #2
 801e9ea:	e7c7      	b.n	801e97c <_printf_common+0x58>
 801e9ec:	2301      	movs	r3, #1
 801e9ee:	4622      	mov	r2, r4
 801e9f0:	4649      	mov	r1, r9
 801e9f2:	4638      	mov	r0, r7
 801e9f4:	47c0      	blx	r8
 801e9f6:	3001      	adds	r0, #1
 801e9f8:	d0e6      	beq.n	801e9c8 <_printf_common+0xa4>
 801e9fa:	3601      	adds	r6, #1
 801e9fc:	e7d9      	b.n	801e9b2 <_printf_common+0x8e>
	...

0801ea00 <_printf_i>:
 801ea00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ea04:	7e0f      	ldrb	r7, [r1, #24]
 801ea06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ea08:	2f78      	cmp	r7, #120	; 0x78
 801ea0a:	4691      	mov	r9, r2
 801ea0c:	4680      	mov	r8, r0
 801ea0e:	460c      	mov	r4, r1
 801ea10:	469a      	mov	sl, r3
 801ea12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ea16:	d807      	bhi.n	801ea28 <_printf_i+0x28>
 801ea18:	2f62      	cmp	r7, #98	; 0x62
 801ea1a:	d80a      	bhi.n	801ea32 <_printf_i+0x32>
 801ea1c:	2f00      	cmp	r7, #0
 801ea1e:	f000 80d8 	beq.w	801ebd2 <_printf_i+0x1d2>
 801ea22:	2f58      	cmp	r7, #88	; 0x58
 801ea24:	f000 80a3 	beq.w	801eb6e <_printf_i+0x16e>
 801ea28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ea2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ea30:	e03a      	b.n	801eaa8 <_printf_i+0xa8>
 801ea32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ea36:	2b15      	cmp	r3, #21
 801ea38:	d8f6      	bhi.n	801ea28 <_printf_i+0x28>
 801ea3a:	a101      	add	r1, pc, #4	; (adr r1, 801ea40 <_printf_i+0x40>)
 801ea3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ea40:	0801ea99 	.word	0x0801ea99
 801ea44:	0801eaad 	.word	0x0801eaad
 801ea48:	0801ea29 	.word	0x0801ea29
 801ea4c:	0801ea29 	.word	0x0801ea29
 801ea50:	0801ea29 	.word	0x0801ea29
 801ea54:	0801ea29 	.word	0x0801ea29
 801ea58:	0801eaad 	.word	0x0801eaad
 801ea5c:	0801ea29 	.word	0x0801ea29
 801ea60:	0801ea29 	.word	0x0801ea29
 801ea64:	0801ea29 	.word	0x0801ea29
 801ea68:	0801ea29 	.word	0x0801ea29
 801ea6c:	0801ebb9 	.word	0x0801ebb9
 801ea70:	0801eadd 	.word	0x0801eadd
 801ea74:	0801eb9b 	.word	0x0801eb9b
 801ea78:	0801ea29 	.word	0x0801ea29
 801ea7c:	0801ea29 	.word	0x0801ea29
 801ea80:	0801ebdb 	.word	0x0801ebdb
 801ea84:	0801ea29 	.word	0x0801ea29
 801ea88:	0801eadd 	.word	0x0801eadd
 801ea8c:	0801ea29 	.word	0x0801ea29
 801ea90:	0801ea29 	.word	0x0801ea29
 801ea94:	0801eba3 	.word	0x0801eba3
 801ea98:	682b      	ldr	r3, [r5, #0]
 801ea9a:	1d1a      	adds	r2, r3, #4
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	602a      	str	r2, [r5, #0]
 801eaa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801eaa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801eaa8:	2301      	movs	r3, #1
 801eaaa:	e0a3      	b.n	801ebf4 <_printf_i+0x1f4>
 801eaac:	6820      	ldr	r0, [r4, #0]
 801eaae:	6829      	ldr	r1, [r5, #0]
 801eab0:	0606      	lsls	r6, r0, #24
 801eab2:	f101 0304 	add.w	r3, r1, #4
 801eab6:	d50a      	bpl.n	801eace <_printf_i+0xce>
 801eab8:	680e      	ldr	r6, [r1, #0]
 801eaba:	602b      	str	r3, [r5, #0]
 801eabc:	2e00      	cmp	r6, #0
 801eabe:	da03      	bge.n	801eac8 <_printf_i+0xc8>
 801eac0:	232d      	movs	r3, #45	; 0x2d
 801eac2:	4276      	negs	r6, r6
 801eac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eac8:	485e      	ldr	r0, [pc, #376]	; (801ec44 <_printf_i+0x244>)
 801eaca:	230a      	movs	r3, #10
 801eacc:	e019      	b.n	801eb02 <_printf_i+0x102>
 801eace:	680e      	ldr	r6, [r1, #0]
 801ead0:	602b      	str	r3, [r5, #0]
 801ead2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ead6:	bf18      	it	ne
 801ead8:	b236      	sxthne	r6, r6
 801eada:	e7ef      	b.n	801eabc <_printf_i+0xbc>
 801eadc:	682b      	ldr	r3, [r5, #0]
 801eade:	6820      	ldr	r0, [r4, #0]
 801eae0:	1d19      	adds	r1, r3, #4
 801eae2:	6029      	str	r1, [r5, #0]
 801eae4:	0601      	lsls	r1, r0, #24
 801eae6:	d501      	bpl.n	801eaec <_printf_i+0xec>
 801eae8:	681e      	ldr	r6, [r3, #0]
 801eaea:	e002      	b.n	801eaf2 <_printf_i+0xf2>
 801eaec:	0646      	lsls	r6, r0, #25
 801eaee:	d5fb      	bpl.n	801eae8 <_printf_i+0xe8>
 801eaf0:	881e      	ldrh	r6, [r3, #0]
 801eaf2:	4854      	ldr	r0, [pc, #336]	; (801ec44 <_printf_i+0x244>)
 801eaf4:	2f6f      	cmp	r7, #111	; 0x6f
 801eaf6:	bf0c      	ite	eq
 801eaf8:	2308      	moveq	r3, #8
 801eafa:	230a      	movne	r3, #10
 801eafc:	2100      	movs	r1, #0
 801eafe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801eb02:	6865      	ldr	r5, [r4, #4]
 801eb04:	60a5      	str	r5, [r4, #8]
 801eb06:	2d00      	cmp	r5, #0
 801eb08:	bfa2      	ittt	ge
 801eb0a:	6821      	ldrge	r1, [r4, #0]
 801eb0c:	f021 0104 	bicge.w	r1, r1, #4
 801eb10:	6021      	strge	r1, [r4, #0]
 801eb12:	b90e      	cbnz	r6, 801eb18 <_printf_i+0x118>
 801eb14:	2d00      	cmp	r5, #0
 801eb16:	d04d      	beq.n	801ebb4 <_printf_i+0x1b4>
 801eb18:	4615      	mov	r5, r2
 801eb1a:	fbb6 f1f3 	udiv	r1, r6, r3
 801eb1e:	fb03 6711 	mls	r7, r3, r1, r6
 801eb22:	5dc7      	ldrb	r7, [r0, r7]
 801eb24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801eb28:	4637      	mov	r7, r6
 801eb2a:	42bb      	cmp	r3, r7
 801eb2c:	460e      	mov	r6, r1
 801eb2e:	d9f4      	bls.n	801eb1a <_printf_i+0x11a>
 801eb30:	2b08      	cmp	r3, #8
 801eb32:	d10b      	bne.n	801eb4c <_printf_i+0x14c>
 801eb34:	6823      	ldr	r3, [r4, #0]
 801eb36:	07de      	lsls	r6, r3, #31
 801eb38:	d508      	bpl.n	801eb4c <_printf_i+0x14c>
 801eb3a:	6923      	ldr	r3, [r4, #16]
 801eb3c:	6861      	ldr	r1, [r4, #4]
 801eb3e:	4299      	cmp	r1, r3
 801eb40:	bfde      	ittt	le
 801eb42:	2330      	movle	r3, #48	; 0x30
 801eb44:	f805 3c01 	strble.w	r3, [r5, #-1]
 801eb48:	f105 35ff 	addle.w	r5, r5, #4294967295
 801eb4c:	1b52      	subs	r2, r2, r5
 801eb4e:	6122      	str	r2, [r4, #16]
 801eb50:	f8cd a000 	str.w	sl, [sp]
 801eb54:	464b      	mov	r3, r9
 801eb56:	aa03      	add	r2, sp, #12
 801eb58:	4621      	mov	r1, r4
 801eb5a:	4640      	mov	r0, r8
 801eb5c:	f7ff fee2 	bl	801e924 <_printf_common>
 801eb60:	3001      	adds	r0, #1
 801eb62:	d14c      	bne.n	801ebfe <_printf_i+0x1fe>
 801eb64:	f04f 30ff 	mov.w	r0, #4294967295
 801eb68:	b004      	add	sp, #16
 801eb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb6e:	4835      	ldr	r0, [pc, #212]	; (801ec44 <_printf_i+0x244>)
 801eb70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801eb74:	6829      	ldr	r1, [r5, #0]
 801eb76:	6823      	ldr	r3, [r4, #0]
 801eb78:	f851 6b04 	ldr.w	r6, [r1], #4
 801eb7c:	6029      	str	r1, [r5, #0]
 801eb7e:	061d      	lsls	r5, r3, #24
 801eb80:	d514      	bpl.n	801ebac <_printf_i+0x1ac>
 801eb82:	07df      	lsls	r7, r3, #31
 801eb84:	bf44      	itt	mi
 801eb86:	f043 0320 	orrmi.w	r3, r3, #32
 801eb8a:	6023      	strmi	r3, [r4, #0]
 801eb8c:	b91e      	cbnz	r6, 801eb96 <_printf_i+0x196>
 801eb8e:	6823      	ldr	r3, [r4, #0]
 801eb90:	f023 0320 	bic.w	r3, r3, #32
 801eb94:	6023      	str	r3, [r4, #0]
 801eb96:	2310      	movs	r3, #16
 801eb98:	e7b0      	b.n	801eafc <_printf_i+0xfc>
 801eb9a:	6823      	ldr	r3, [r4, #0]
 801eb9c:	f043 0320 	orr.w	r3, r3, #32
 801eba0:	6023      	str	r3, [r4, #0]
 801eba2:	2378      	movs	r3, #120	; 0x78
 801eba4:	4828      	ldr	r0, [pc, #160]	; (801ec48 <_printf_i+0x248>)
 801eba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ebaa:	e7e3      	b.n	801eb74 <_printf_i+0x174>
 801ebac:	0659      	lsls	r1, r3, #25
 801ebae:	bf48      	it	mi
 801ebb0:	b2b6      	uxthmi	r6, r6
 801ebb2:	e7e6      	b.n	801eb82 <_printf_i+0x182>
 801ebb4:	4615      	mov	r5, r2
 801ebb6:	e7bb      	b.n	801eb30 <_printf_i+0x130>
 801ebb8:	682b      	ldr	r3, [r5, #0]
 801ebba:	6826      	ldr	r6, [r4, #0]
 801ebbc:	6961      	ldr	r1, [r4, #20]
 801ebbe:	1d18      	adds	r0, r3, #4
 801ebc0:	6028      	str	r0, [r5, #0]
 801ebc2:	0635      	lsls	r5, r6, #24
 801ebc4:	681b      	ldr	r3, [r3, #0]
 801ebc6:	d501      	bpl.n	801ebcc <_printf_i+0x1cc>
 801ebc8:	6019      	str	r1, [r3, #0]
 801ebca:	e002      	b.n	801ebd2 <_printf_i+0x1d2>
 801ebcc:	0670      	lsls	r0, r6, #25
 801ebce:	d5fb      	bpl.n	801ebc8 <_printf_i+0x1c8>
 801ebd0:	8019      	strh	r1, [r3, #0]
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	6123      	str	r3, [r4, #16]
 801ebd6:	4615      	mov	r5, r2
 801ebd8:	e7ba      	b.n	801eb50 <_printf_i+0x150>
 801ebda:	682b      	ldr	r3, [r5, #0]
 801ebdc:	1d1a      	adds	r2, r3, #4
 801ebde:	602a      	str	r2, [r5, #0]
 801ebe0:	681d      	ldr	r5, [r3, #0]
 801ebe2:	6862      	ldr	r2, [r4, #4]
 801ebe4:	2100      	movs	r1, #0
 801ebe6:	4628      	mov	r0, r5
 801ebe8:	f7e1 fafa 	bl	80001e0 <memchr>
 801ebec:	b108      	cbz	r0, 801ebf2 <_printf_i+0x1f2>
 801ebee:	1b40      	subs	r0, r0, r5
 801ebf0:	6060      	str	r0, [r4, #4]
 801ebf2:	6863      	ldr	r3, [r4, #4]
 801ebf4:	6123      	str	r3, [r4, #16]
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ebfc:	e7a8      	b.n	801eb50 <_printf_i+0x150>
 801ebfe:	6923      	ldr	r3, [r4, #16]
 801ec00:	462a      	mov	r2, r5
 801ec02:	4649      	mov	r1, r9
 801ec04:	4640      	mov	r0, r8
 801ec06:	47d0      	blx	sl
 801ec08:	3001      	adds	r0, #1
 801ec0a:	d0ab      	beq.n	801eb64 <_printf_i+0x164>
 801ec0c:	6823      	ldr	r3, [r4, #0]
 801ec0e:	079b      	lsls	r3, r3, #30
 801ec10:	d413      	bmi.n	801ec3a <_printf_i+0x23a>
 801ec12:	68e0      	ldr	r0, [r4, #12]
 801ec14:	9b03      	ldr	r3, [sp, #12]
 801ec16:	4298      	cmp	r0, r3
 801ec18:	bfb8      	it	lt
 801ec1a:	4618      	movlt	r0, r3
 801ec1c:	e7a4      	b.n	801eb68 <_printf_i+0x168>
 801ec1e:	2301      	movs	r3, #1
 801ec20:	4632      	mov	r2, r6
 801ec22:	4649      	mov	r1, r9
 801ec24:	4640      	mov	r0, r8
 801ec26:	47d0      	blx	sl
 801ec28:	3001      	adds	r0, #1
 801ec2a:	d09b      	beq.n	801eb64 <_printf_i+0x164>
 801ec2c:	3501      	adds	r5, #1
 801ec2e:	68e3      	ldr	r3, [r4, #12]
 801ec30:	9903      	ldr	r1, [sp, #12]
 801ec32:	1a5b      	subs	r3, r3, r1
 801ec34:	42ab      	cmp	r3, r5
 801ec36:	dcf2      	bgt.n	801ec1e <_printf_i+0x21e>
 801ec38:	e7eb      	b.n	801ec12 <_printf_i+0x212>
 801ec3a:	2500      	movs	r5, #0
 801ec3c:	f104 0619 	add.w	r6, r4, #25
 801ec40:	e7f5      	b.n	801ec2e <_printf_i+0x22e>
 801ec42:	bf00      	nop
 801ec44:	08024a51 	.word	0x08024a51
 801ec48:	08024a62 	.word	0x08024a62

0801ec4c <__sread>:
 801ec4c:	b510      	push	{r4, lr}
 801ec4e:	460c      	mov	r4, r1
 801ec50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec54:	f000 f8cc 	bl	801edf0 <_read_r>
 801ec58:	2800      	cmp	r0, #0
 801ec5a:	bfab      	itete	ge
 801ec5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ec5e:	89a3      	ldrhlt	r3, [r4, #12]
 801ec60:	181b      	addge	r3, r3, r0
 801ec62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ec66:	bfac      	ite	ge
 801ec68:	6563      	strge	r3, [r4, #84]	; 0x54
 801ec6a:	81a3      	strhlt	r3, [r4, #12]
 801ec6c:	bd10      	pop	{r4, pc}

0801ec6e <__swrite>:
 801ec6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec72:	461f      	mov	r7, r3
 801ec74:	898b      	ldrh	r3, [r1, #12]
 801ec76:	05db      	lsls	r3, r3, #23
 801ec78:	4605      	mov	r5, r0
 801ec7a:	460c      	mov	r4, r1
 801ec7c:	4616      	mov	r6, r2
 801ec7e:	d505      	bpl.n	801ec8c <__swrite+0x1e>
 801ec80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec84:	2302      	movs	r3, #2
 801ec86:	2200      	movs	r2, #0
 801ec88:	f000 f870 	bl	801ed6c <_lseek_r>
 801ec8c:	89a3      	ldrh	r3, [r4, #12]
 801ec8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ec92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ec96:	81a3      	strh	r3, [r4, #12]
 801ec98:	4632      	mov	r2, r6
 801ec9a:	463b      	mov	r3, r7
 801ec9c:	4628      	mov	r0, r5
 801ec9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eca2:	f000 b817 	b.w	801ecd4 <_write_r>

0801eca6 <__sseek>:
 801eca6:	b510      	push	{r4, lr}
 801eca8:	460c      	mov	r4, r1
 801ecaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ecae:	f000 f85d 	bl	801ed6c <_lseek_r>
 801ecb2:	1c43      	adds	r3, r0, #1
 801ecb4:	89a3      	ldrh	r3, [r4, #12]
 801ecb6:	bf15      	itete	ne
 801ecb8:	6560      	strne	r0, [r4, #84]	; 0x54
 801ecba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ecbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ecc2:	81a3      	strheq	r3, [r4, #12]
 801ecc4:	bf18      	it	ne
 801ecc6:	81a3      	strhne	r3, [r4, #12]
 801ecc8:	bd10      	pop	{r4, pc}

0801ecca <__sclose>:
 801ecca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ecce:	f000 b81b 	b.w	801ed08 <_close_r>
	...

0801ecd4 <_write_r>:
 801ecd4:	b538      	push	{r3, r4, r5, lr}
 801ecd6:	4d07      	ldr	r5, [pc, #28]	; (801ecf4 <_write_r+0x20>)
 801ecd8:	4604      	mov	r4, r0
 801ecda:	4608      	mov	r0, r1
 801ecdc:	4611      	mov	r1, r2
 801ecde:	2200      	movs	r2, #0
 801ece0:	602a      	str	r2, [r5, #0]
 801ece2:	461a      	mov	r2, r3
 801ece4:	f7e1 fcd2 	bl	800068c <_write>
 801ece8:	1c43      	adds	r3, r0, #1
 801ecea:	d102      	bne.n	801ecf2 <_write_r+0x1e>
 801ecec:	682b      	ldr	r3, [r5, #0]
 801ecee:	b103      	cbz	r3, 801ecf2 <_write_r+0x1e>
 801ecf0:	6023      	str	r3, [r4, #0]
 801ecf2:	bd38      	pop	{r3, r4, r5, pc}
 801ecf4:	20002914 	.word	0x20002914

0801ecf8 <abort>:
 801ecf8:	b508      	push	{r3, lr}
 801ecfa:	2006      	movs	r0, #6
 801ecfc:	f000 f8b2 	bl	801ee64 <raise>
 801ed00:	2001      	movs	r0, #1
 801ed02:	f7e2 fa89 	bl	8001218 <_exit>
	...

0801ed08 <_close_r>:
 801ed08:	b538      	push	{r3, r4, r5, lr}
 801ed0a:	4d06      	ldr	r5, [pc, #24]	; (801ed24 <_close_r+0x1c>)
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	4604      	mov	r4, r0
 801ed10:	4608      	mov	r0, r1
 801ed12:	602b      	str	r3, [r5, #0]
 801ed14:	f7e2 faa7 	bl	8001266 <_close>
 801ed18:	1c43      	adds	r3, r0, #1
 801ed1a:	d102      	bne.n	801ed22 <_close_r+0x1a>
 801ed1c:	682b      	ldr	r3, [r5, #0]
 801ed1e:	b103      	cbz	r3, 801ed22 <_close_r+0x1a>
 801ed20:	6023      	str	r3, [r4, #0]
 801ed22:	bd38      	pop	{r3, r4, r5, pc}
 801ed24:	20002914 	.word	0x20002914

0801ed28 <_fstat_r>:
 801ed28:	b538      	push	{r3, r4, r5, lr}
 801ed2a:	4d07      	ldr	r5, [pc, #28]	; (801ed48 <_fstat_r+0x20>)
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	4604      	mov	r4, r0
 801ed30:	4608      	mov	r0, r1
 801ed32:	4611      	mov	r1, r2
 801ed34:	602b      	str	r3, [r5, #0]
 801ed36:	f7e2 faa2 	bl	800127e <_fstat>
 801ed3a:	1c43      	adds	r3, r0, #1
 801ed3c:	d102      	bne.n	801ed44 <_fstat_r+0x1c>
 801ed3e:	682b      	ldr	r3, [r5, #0]
 801ed40:	b103      	cbz	r3, 801ed44 <_fstat_r+0x1c>
 801ed42:	6023      	str	r3, [r4, #0]
 801ed44:	bd38      	pop	{r3, r4, r5, pc}
 801ed46:	bf00      	nop
 801ed48:	20002914 	.word	0x20002914

0801ed4c <_isatty_r>:
 801ed4c:	b538      	push	{r3, r4, r5, lr}
 801ed4e:	4d06      	ldr	r5, [pc, #24]	; (801ed68 <_isatty_r+0x1c>)
 801ed50:	2300      	movs	r3, #0
 801ed52:	4604      	mov	r4, r0
 801ed54:	4608      	mov	r0, r1
 801ed56:	602b      	str	r3, [r5, #0]
 801ed58:	f7e2 faa1 	bl	800129e <_isatty>
 801ed5c:	1c43      	adds	r3, r0, #1
 801ed5e:	d102      	bne.n	801ed66 <_isatty_r+0x1a>
 801ed60:	682b      	ldr	r3, [r5, #0]
 801ed62:	b103      	cbz	r3, 801ed66 <_isatty_r+0x1a>
 801ed64:	6023      	str	r3, [r4, #0]
 801ed66:	bd38      	pop	{r3, r4, r5, pc}
 801ed68:	20002914 	.word	0x20002914

0801ed6c <_lseek_r>:
 801ed6c:	b538      	push	{r3, r4, r5, lr}
 801ed6e:	4d07      	ldr	r5, [pc, #28]	; (801ed8c <_lseek_r+0x20>)
 801ed70:	4604      	mov	r4, r0
 801ed72:	4608      	mov	r0, r1
 801ed74:	4611      	mov	r1, r2
 801ed76:	2200      	movs	r2, #0
 801ed78:	602a      	str	r2, [r5, #0]
 801ed7a:	461a      	mov	r2, r3
 801ed7c:	f7e2 fa9a 	bl	80012b4 <_lseek>
 801ed80:	1c43      	adds	r3, r0, #1
 801ed82:	d102      	bne.n	801ed8a <_lseek_r+0x1e>
 801ed84:	682b      	ldr	r3, [r5, #0]
 801ed86:	b103      	cbz	r3, 801ed8a <_lseek_r+0x1e>
 801ed88:	6023      	str	r3, [r4, #0]
 801ed8a:	bd38      	pop	{r3, r4, r5, pc}
 801ed8c:	20002914 	.word	0x20002914

0801ed90 <_realloc_r>:
 801ed90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed94:	4680      	mov	r8, r0
 801ed96:	4614      	mov	r4, r2
 801ed98:	460e      	mov	r6, r1
 801ed9a:	b921      	cbnz	r1, 801eda6 <_realloc_r+0x16>
 801ed9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eda0:	4611      	mov	r1, r2
 801eda2:	f7fe bdeb 	b.w	801d97c <_malloc_r>
 801eda6:	b92a      	cbnz	r2, 801edb4 <_realloc_r+0x24>
 801eda8:	f7fe fd7c 	bl	801d8a4 <_free_r>
 801edac:	4625      	mov	r5, r4
 801edae:	4628      	mov	r0, r5
 801edb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801edb4:	f000 f872 	bl	801ee9c <_malloc_usable_size_r>
 801edb8:	4284      	cmp	r4, r0
 801edba:	4607      	mov	r7, r0
 801edbc:	d802      	bhi.n	801edc4 <_realloc_r+0x34>
 801edbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801edc2:	d812      	bhi.n	801edea <_realloc_r+0x5a>
 801edc4:	4621      	mov	r1, r4
 801edc6:	4640      	mov	r0, r8
 801edc8:	f7fe fdd8 	bl	801d97c <_malloc_r>
 801edcc:	4605      	mov	r5, r0
 801edce:	2800      	cmp	r0, #0
 801edd0:	d0ed      	beq.n	801edae <_realloc_r+0x1e>
 801edd2:	42bc      	cmp	r4, r7
 801edd4:	4622      	mov	r2, r4
 801edd6:	4631      	mov	r1, r6
 801edd8:	bf28      	it	cs
 801edda:	463a      	movcs	r2, r7
 801eddc:	f7fe fd1c 	bl	801d818 <memcpy>
 801ede0:	4631      	mov	r1, r6
 801ede2:	4640      	mov	r0, r8
 801ede4:	f7fe fd5e 	bl	801d8a4 <_free_r>
 801ede8:	e7e1      	b.n	801edae <_realloc_r+0x1e>
 801edea:	4635      	mov	r5, r6
 801edec:	e7df      	b.n	801edae <_realloc_r+0x1e>
	...

0801edf0 <_read_r>:
 801edf0:	b538      	push	{r3, r4, r5, lr}
 801edf2:	4d07      	ldr	r5, [pc, #28]	; (801ee10 <_read_r+0x20>)
 801edf4:	4604      	mov	r4, r0
 801edf6:	4608      	mov	r0, r1
 801edf8:	4611      	mov	r1, r2
 801edfa:	2200      	movs	r2, #0
 801edfc:	602a      	str	r2, [r5, #0]
 801edfe:	461a      	mov	r2, r3
 801ee00:	f7e2 fa14 	bl	800122c <_read>
 801ee04:	1c43      	adds	r3, r0, #1
 801ee06:	d102      	bne.n	801ee0e <_read_r+0x1e>
 801ee08:	682b      	ldr	r3, [r5, #0]
 801ee0a:	b103      	cbz	r3, 801ee0e <_read_r+0x1e>
 801ee0c:	6023      	str	r3, [r4, #0]
 801ee0e:	bd38      	pop	{r3, r4, r5, pc}
 801ee10:	20002914 	.word	0x20002914

0801ee14 <_raise_r>:
 801ee14:	291f      	cmp	r1, #31
 801ee16:	b538      	push	{r3, r4, r5, lr}
 801ee18:	4604      	mov	r4, r0
 801ee1a:	460d      	mov	r5, r1
 801ee1c:	d904      	bls.n	801ee28 <_raise_r+0x14>
 801ee1e:	2316      	movs	r3, #22
 801ee20:	6003      	str	r3, [r0, #0]
 801ee22:	f04f 30ff 	mov.w	r0, #4294967295
 801ee26:	bd38      	pop	{r3, r4, r5, pc}
 801ee28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ee2a:	b112      	cbz	r2, 801ee32 <_raise_r+0x1e>
 801ee2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ee30:	b94b      	cbnz	r3, 801ee46 <_raise_r+0x32>
 801ee32:	4620      	mov	r0, r4
 801ee34:	f000 f830 	bl	801ee98 <_getpid_r>
 801ee38:	462a      	mov	r2, r5
 801ee3a:	4601      	mov	r1, r0
 801ee3c:	4620      	mov	r0, r4
 801ee3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ee42:	f000 b817 	b.w	801ee74 <_kill_r>
 801ee46:	2b01      	cmp	r3, #1
 801ee48:	d00a      	beq.n	801ee60 <_raise_r+0x4c>
 801ee4a:	1c59      	adds	r1, r3, #1
 801ee4c:	d103      	bne.n	801ee56 <_raise_r+0x42>
 801ee4e:	2316      	movs	r3, #22
 801ee50:	6003      	str	r3, [r0, #0]
 801ee52:	2001      	movs	r0, #1
 801ee54:	e7e7      	b.n	801ee26 <_raise_r+0x12>
 801ee56:	2400      	movs	r4, #0
 801ee58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ee5c:	4628      	mov	r0, r5
 801ee5e:	4798      	blx	r3
 801ee60:	2000      	movs	r0, #0
 801ee62:	e7e0      	b.n	801ee26 <_raise_r+0x12>

0801ee64 <raise>:
 801ee64:	4b02      	ldr	r3, [pc, #8]	; (801ee70 <raise+0xc>)
 801ee66:	4601      	mov	r1, r0
 801ee68:	6818      	ldr	r0, [r3, #0]
 801ee6a:	f7ff bfd3 	b.w	801ee14 <_raise_r>
 801ee6e:	bf00      	nop
 801ee70:	20000074 	.word	0x20000074

0801ee74 <_kill_r>:
 801ee74:	b538      	push	{r3, r4, r5, lr}
 801ee76:	4d07      	ldr	r5, [pc, #28]	; (801ee94 <_kill_r+0x20>)
 801ee78:	2300      	movs	r3, #0
 801ee7a:	4604      	mov	r4, r0
 801ee7c:	4608      	mov	r0, r1
 801ee7e:	4611      	mov	r1, r2
 801ee80:	602b      	str	r3, [r5, #0]
 801ee82:	f7e2 f9b9 	bl	80011f8 <_kill>
 801ee86:	1c43      	adds	r3, r0, #1
 801ee88:	d102      	bne.n	801ee90 <_kill_r+0x1c>
 801ee8a:	682b      	ldr	r3, [r5, #0]
 801ee8c:	b103      	cbz	r3, 801ee90 <_kill_r+0x1c>
 801ee8e:	6023      	str	r3, [r4, #0]
 801ee90:	bd38      	pop	{r3, r4, r5, pc}
 801ee92:	bf00      	nop
 801ee94:	20002914 	.word	0x20002914

0801ee98 <_getpid_r>:
 801ee98:	f7e2 b9a6 	b.w	80011e8 <_getpid>

0801ee9c <_malloc_usable_size_r>:
 801ee9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eea0:	1f18      	subs	r0, r3, #4
 801eea2:	2b00      	cmp	r3, #0
 801eea4:	bfbc      	itt	lt
 801eea6:	580b      	ldrlt	r3, [r1, r0]
 801eea8:	18c0      	addlt	r0, r0, r3
 801eeaa:	4770      	bx	lr

0801eeac <_init>:
 801eeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeae:	bf00      	nop
 801eeb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eeb2:	bc08      	pop	{r3}
 801eeb4:	469e      	mov	lr, r3
 801eeb6:	4770      	bx	lr

0801eeb8 <_fini>:
 801eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeba:	bf00      	nop
 801eebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eebe:	bc08      	pop	{r3}
 801eec0:	469e      	mov	lr, r3
 801eec2:	4770      	bx	lr
