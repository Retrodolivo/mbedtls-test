
mbedtls_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd8  08005bd8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005be0  08005be0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005be4  08005be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          000001f4  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112b3  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a49  00000000  00000000  0003137f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00033dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ec0  00000000  00000000  00034d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ee2  00000000  00000000  00035c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ae3  00000000  00000000  00058b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cda59  00000000  00000000  0006c60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a066  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004908  00000000  00000000  0013a0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a68 	.word	0x08005a68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08005a68 	.word	0x08005a68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void print_network_information(void);

int _write(int fd, char *str, int len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	e00b      	b.n	800059e <_write+0x2a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	18d1      	adds	r1, r2, r3
 800058c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000590:	2201      	movs	r2, #1
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <_write+0x3c>)
 8000594:	f003 fbe3 	bl	8003d5e <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	dbef      	blt.n	8000586 <_write+0x12>
	}
	return len;
 80005a6:	687b      	ldr	r3, [r7, #4]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000020c 	.word	0x2000020c

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fed2 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f816 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f986 	bl	80008d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c4:	f000 f890 	bl	80006e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005c8:	f000 f8bc 	bl	8000744 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005cc:	f000 f8ea 	bl	80007a4 <MX_SPI1_Init>
  MX_CRC_Init();
 80005d0:	f000 f876 	bl	80006c0 <MX_CRC_Init>
  MX_SPI2_Init();
 80005d4:	f000 f91c 	bl	8000810 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 f950 	bl	800087c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  w5500_init(&w5500);
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <main+0x34>)
 80005de:	f000 fe27 	bl	8001230 <w5500_init>
  print_network_information();
 80005e2:	f000 faa5 	bl	8000b30 <print_network_information>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <main+0x32>
 80005e8:	20000250 	.word	0x20000250

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fa9e 	bl	8004b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f001 ffa6 	bl	80025c4 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067e:	f000 fac3 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fa07 	bl	8002ab4 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ac:	f000 faac 	bl	8000c08 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_CRC_Init+0x20>)
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <MX_CRC_Init+0x24>)
 80006c8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_CRC_Init+0x20>)
 80006cc:	f000 ffc3 	bl	8001656 <HAL_CRC_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006d6:	f000 fa97 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000b8 	.word	0x200000b8
 80006e4:	40023000 	.word	0x40023000

080006e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x50>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_I2C1_Init+0x54>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x50>)
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_I2C1_Init+0x58>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_I2C1_Init+0x50>)
 8000706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_I2C1_Init+0x50>)
 8000726:	f001 f969 	bl	80019fc <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 fa6a 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000c0 	.word	0x200000c0
 800073c:	40005400 	.word	0x40005400
 8000740:	000186a0 	.word	0x000186a0

08000744 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2S3_Init+0x54>)
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <MX_I2S3_Init+0x58>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2S3_Init+0x54>)
 8000750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000754:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2S3_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2S3_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_I2S3_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_I2S3_Init+0x54>)
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <MX_I2S3_Init+0x5c>)
 800076e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_I2S3_Init+0x54>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_I2S3_Init+0x54>)
 8000784:	f001 fa7e 	bl	8001c84 <HAL_I2S_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800078e:	f000 fa3b 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000114 	.word	0x20000114
 800079c:	40003c00 	.word	0x40003c00
 80007a0:	00017700 	.word	0x00017700

080007a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_SPI1_Init+0x64>)
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <MX_SPI1_Init+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_SPI1_Init+0x64>)
 80007b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SPI1_Init+0x64>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_SPI1_Init+0x64>)
 80007f6:	f002 fcbd 	bl	8003174 <HAL_SPI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000800:	f000 fa02 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000015c 	.word	0x2000015c
 800080c:	40013000 	.word	0x40013000

08000810 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_SPI2_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_SPI2_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI2_Init+0x64>)
 800081c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI2_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_SPI2_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI2_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI2_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI2_Init+0x64>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI2_Init+0x64>)
 8000844:	2228      	movs	r2, #40	; 0x28
 8000846:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_SPI2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_SPI2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI2_Init+0x64>)
 800085c:	220a      	movs	r2, #10
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_SPI2_Init+0x64>)
 8000862:	f002 fc87 	bl	8003174 <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f9cc 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001b4 	.word	0x200001b4
 8000878:	40003800 	.word	0x40003800

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART2_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f003 fa06 	bl	8003cc4 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f9a3 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000020c 	.word	0x2000020c
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	4b8b      	ldr	r3, [pc, #556]	; (8000b18 <MX_GPIO_Init+0x248>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a8a      	ldr	r2, [pc, #552]	; (8000b18 <MX_GPIO_Init+0x248>)
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b88      	ldr	r3, [pc, #544]	; (8000b18 <MX_GPIO_Init+0x248>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	4b84      	ldr	r3, [pc, #528]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a83      	ldr	r2, [pc, #524]	; (8000b18 <MX_GPIO_Init+0x248>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b81      	ldr	r3, [pc, #516]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b7d      	ldr	r3, [pc, #500]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a7c      	ldr	r2, [pc, #496]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b7a      	ldr	r3, [pc, #488]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b76      	ldr	r3, [pc, #472]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a75      	ldr	r2, [pc, #468]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b73      	ldr	r3, [pc, #460]	; (8000b18 <MX_GPIO_Init+0x248>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b6f      	ldr	r3, [pc, #444]	; (8000b18 <MX_GPIO_Init+0x248>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a6e      	ldr	r2, [pc, #440]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b6c      	ldr	r3, [pc, #432]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b68      	ldr	r3, [pc, #416]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a67      	ldr	r2, [pc, #412]	; (8000b18 <MX_GPIO_Init+0x248>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b65      	ldr	r3, [pc, #404]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	4862      	ldr	r0, [pc, #392]	; (8000b1c <MX_GPIO_Init+0x24c>)
 8000994:	f001 f818 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|W5500_RST_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2103      	movs	r1, #3
 800099c:	4860      	ldr	r0, [pc, #384]	; (8000b20 <MX_GPIO_Init+0x250>)
 800099e:	f001 f813 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a8:	485e      	ldr	r0, [pc, #376]	; (8000b24 <MX_GPIO_Init+0x254>)
 80009aa:	f001 f80d 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ae:	2200      	movs	r2, #0
 80009b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009b4:	485c      	ldr	r0, [pc, #368]	; (8000b28 <MX_GPIO_Init+0x258>)
 80009b6:	f001 f807 	bl	80019c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ba:	2308      	movs	r3, #8
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4852      	ldr	r0, [pc, #328]	; (8000b1c <MX_GPIO_Init+0x24c>)
 80009d2:	f000 fe5d 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin W5500_RST_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|W5500_RST_Pin;
 80009d6:	2303      	movs	r3, #3
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	484c      	ldr	r0, [pc, #304]	; (8000b20 <MX_GPIO_Init+0x250>)
 80009ee:	f000 fe4f 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009f2:	2308      	movs	r3, #8
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a02:	2305      	movs	r3, #5
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4844      	ldr	r0, [pc, #272]	; (8000b20 <MX_GPIO_Init+0x250>)
 8000a0e:	f000 fe3f 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a16:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4841      	ldr	r0, [pc, #260]	; (8000b2c <MX_GPIO_Init+0x25c>)
 8000a28:	f000 fe32 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4839      	ldr	r0, [pc, #228]	; (8000b24 <MX_GPIO_Init+0x254>)
 8000a40:	f000 fe26 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a56:	2305      	movs	r3, #5
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4830      	ldr	r0, [pc, #192]	; (8000b24 <MX_GPIO_Init+0x254>)
 8000a62:	f000 fe15 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8000a66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4829      	ldr	r0, [pc, #164]	; (8000b24 <MX_GPIO_Init+0x254>)
 8000a80:	f000 fe06 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a84:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a88:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4822      	ldr	r0, [pc, #136]	; (8000b28 <MX_GPIO_Init+0x258>)
 8000a9e:	f000 fdf7 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481d      	ldr	r0, [pc, #116]	; (8000b2c <MX_GPIO_Init+0x25c>)
 8000ab8:	f000 fdea 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000abc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ace:	230a      	movs	r3, #10
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4814      	ldr	r0, [pc, #80]	; (8000b2c <MX_GPIO_Init+0x25c>)
 8000ada:	f000 fdd9 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_GPIO_Init+0x258>)
 8000af2:	f000 fdcd 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000afa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_GPIO_Init+0x24c>)
 8000b0c:	f000 fdc0 	bl	8001690 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3730      	adds	r7, #48	; 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	40020000 	.word	0x40020000

08000b30 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af04      	add	r7, sp, #16
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", w5500.netinfo.mac[0], w5500.netinfo.mac[1], w5500.netinfo.mac[2], w5500.netinfo.mac[3], w5500.netinfo.mac[4], w5500.netinfo.mac[5]);
 8000b36:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <print_network_information+0xc0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <print_network_information+0xc0>)
 8000b3e:	785b      	ldrb	r3, [r3, #1]
 8000b40:	461c      	mov	r4, r3
 8000b42:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <print_network_information+0xc0>)
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	461d      	mov	r5, r3
 8000b48:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <print_network_information+0xc0>)
 8000b4a:	78db      	ldrb	r3, [r3, #3]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <print_network_information+0xc0>)
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	4619      	mov	r1, r3
 8000b54:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <print_network_information+0xc0>)
 8000b56:	795b      	ldrb	r3, [r3, #5]
 8000b58:	9302      	str	r3, [sp, #8]
 8000b5a:	9101      	str	r1, [sp, #4]
 8000b5c:	9200      	str	r2, [sp, #0]
 8000b5e:	462b      	mov	r3, r5
 8000b60:	4622      	mov	r2, r4
 8000b62:	4601      	mov	r1, r0
 8000b64:	4823      	ldr	r0, [pc, #140]	; (8000bf4 <print_network_information+0xc4>)
 8000b66:	f004 f8d1 	bl	8004d0c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r", w5500.netinfo.ip[0], w5500.netinfo.ip[1], w5500.netinfo.ip[2], w5500.netinfo.ip[3]);
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <print_network_information+0xc0>)
 8000b6c:	799b      	ldrb	r3, [r3, #6]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <print_network_information+0xc0>)
 8000b72:	79db      	ldrb	r3, [r3, #7]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <print_network_information+0xc0>)
 8000b78:	7a1b      	ldrb	r3, [r3, #8]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <print_network_information+0xc0>)
 8000b7e:	7a5b      	ldrb	r3, [r3, #9]
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	4603      	mov	r3, r0
 8000b84:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <print_network_information+0xc8>)
 8000b86:	f004 f8c1 	bl	8004d0c <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r", w5500.netinfo.sn[0], w5500.netinfo.sn[1], w5500.netinfo.sn[2], w5500.netinfo.sn[3]);
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <print_network_information+0xc0>)
 8000b8c:	7a9b      	ldrb	r3, [r3, #10]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <print_network_information+0xc0>)
 8000b92:	7adb      	ldrb	r3, [r3, #11]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <print_network_information+0xc0>)
 8000b98:	7b1b      	ldrb	r3, [r3, #12]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <print_network_information+0xc0>)
 8000b9e:	7b5b      	ldrb	r3, [r3, #13]
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4815      	ldr	r0, [pc, #84]	; (8000bfc <print_network_information+0xcc>)
 8000ba6:	f004 f8b1 	bl	8004d0c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r", w5500.netinfo.gw[0], w5500.netinfo.gw[1], w5500.netinfo.gw[2], w5500.netinfo.gw[3]);
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <print_network_information+0xc0>)
 8000bac:	7b9b      	ldrb	r3, [r3, #14]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <print_network_information+0xc0>)
 8000bb2:	7bdb      	ldrb	r3, [r3, #15]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <print_network_information+0xc0>)
 8000bb8:	7c1b      	ldrb	r3, [r3, #16]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <print_network_information+0xc0>)
 8000bbe:	7c5b      	ldrb	r3, [r3, #17]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	480e      	ldr	r0, [pc, #56]	; (8000c00 <print_network_information+0xd0>)
 8000bc6:	f004 f8a1 	bl	8004d0c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r", w5500.netinfo.dns[0], w5500.netinfo.dns[1], w5500.netinfo.dns[2], w5500.netinfo.dns[3]);
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <print_network_information+0xc0>)
 8000bcc:	7c9b      	ldrb	r3, [r3, #18]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <print_network_information+0xc0>)
 8000bd2:	7cdb      	ldrb	r3, [r3, #19]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <print_network_information+0xc0>)
 8000bd8:	7d1b      	ldrb	r3, [r3, #20]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <print_network_information+0xc0>)
 8000bde:	7d5b      	ldrb	r3, [r3, #21]
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	4603      	mov	r3, r0
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <print_network_information+0xd4>)
 8000be6:	f004 f891 	bl	8004d0c <iprintf>
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf0:	20000250 	.word	0x20000250
 8000bf4:	08005a80 	.word	0x08005a80
 8000bf8:	08005ab0 	.word	0x08005ab0
 8000bfc:	08005acc 	.word	0x08005acc
 8000c00:	08005ae8 	.word	0x08005ae8
 8000c04:	08005b04 	.word	0x08005b04

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c52:	2007      	movs	r0, #7
 8000c54:	f000 fccc 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_CRC_MspInit+0x3c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10d      	bne.n	8000c92 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_CRC_MspInit+0x40>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <HAL_CRC_MspInit+0x40>)
 8000c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_CRC_MspInit+0x40>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40023000 	.word	0x40023000
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_I2C_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12c      	bne.n	8000d24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ce6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <HAL_I2C_MspInit+0x8c>)
 8000d04:	f000 fcc4 	bl	8001690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020400 	.word	0x40020400

08000d38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08e      	sub	sp, #56	; 0x38
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a31      	ldr	r2, [pc, #196]	; (8000e28 <HAL_I2S_MspInit+0xf0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d15a      	bne.n	8000e1e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d6c:	23c0      	movs	r3, #192	; 0xc0
 8000d6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 f8bb 	bl	8002ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d84:	f7ff ff40 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dec:	2306      	movs	r3, #6
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	480e      	ldr	r0, [pc, #56]	; (8000e30 <HAL_I2S_MspInit+0xf8>)
 8000df8:	f000 fc4a 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dfc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0e:	2306      	movs	r3, #6
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <HAL_I2S_MspInit+0xfc>)
 8000e1a:	f000 fc39 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3738      	adds	r7, #56	; 0x38
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40003c00 	.word	0x40003c00
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020800 	.word	0x40020800

08000e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a41      	ldr	r2, [pc, #260]	; (8000f5c <HAL_SPI_MspInit+0x124>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12c      	bne.n	8000eb4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a3f      	ldr	r2, [pc, #252]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a38      	ldr	r2, [pc, #224]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e92:	23e0      	movs	r3, #224	; 0xe0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482d      	ldr	r0, [pc, #180]	; (8000f64 <HAL_SPI_MspInit+0x12c>)
 8000eae:	f000 fbef 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000eb2:	e04f      	b.n	8000f54 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a2b      	ldr	r2, [pc, #172]	; (8000f68 <HAL_SPI_MspInit+0x130>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d14a      	bne.n	8000f54 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_SPI_MspInit+0x128>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = W5500_MISO_Pin;
 8000f12:	2304      	movs	r3, #4
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f22:	2305      	movs	r3, #5
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(W5500_MISO_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480f      	ldr	r0, [pc, #60]	; (8000f6c <HAL_SPI_MspInit+0x134>)
 8000f2e:	f000 fbaf 	bl	8001690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MOSI_Pin;
 8000f32:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f44:	2305      	movs	r3, #5
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <HAL_SPI_MspInit+0x138>)
 8000f50:	f000 fb9e 	bl	8001690 <HAL_GPIO_Init>
}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40013000 	.word	0x40013000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40003800 	.word	0x40003800
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020400 	.word	0x40020400

08000f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_UART_MspInit+0x84>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12b      	bne.n	8000fee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PRINT_TX_Pin|PRINT_RX_Pin;
 8000fce:	230c      	movs	r3, #12
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_UART_MspInit+0x8c>)
 8000fea:	f000 fb51 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40004400 	.word	0x40004400
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 f9d8 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e00a      	b.n	8001080 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800106a:	f3af 8000 	nop.w
 800106e:	4601      	mov	r1, r0
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf0      	blt.n	800106a <_read+0x12>
	}

return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	return -1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ba:	605a      	str	r2, [r3, #4]
	return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_isatty>:

int _isatty(int file)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	return 1;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f003 fcdc 	bl	8004ae8 <__errno>
 8001130:	4603      	mov	r3, r0
 8001132:	220c      	movs	r2, #12
 8001134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20020000 	.word	0x20020000
 800115c:	00000400 	.word	0x00000400
 8001160:	20000270 	.word	0x20000270
 8001164:	20000290 	.word	0x20000290

08001168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <SystemInit+0x20>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <SystemInit+0x20>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <w5500_select>:
#include "wizchip.h"
#include "string.h"


static void w5500_select(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <w5500_select+0x14>)
 8001198:	f000 fc16 	bl	80019c8 <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020400 	.word	0x40020400

080011a4 <w5500_unselect>:

static void w5500_unselect(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ae:	4802      	ldr	r0, [pc, #8]	; (80011b8 <w5500_unselect+0x14>)
 80011b0:	f000 fc0a 	bl	80019c8 <HAL_GPIO_WritePin>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40020400 	.word	0x40020400

080011bc <w5500_read_byte>:

static uint8_t w5500_read_byte(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
    uint8_t rb;
    HAL_SPI_Receive(W5500_SPI_PORT, &rb, 1, HAL_MAX_DELAY);
 80011c2:	1df9      	adds	r1, r7, #7
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2201      	movs	r2, #1
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <w5500_read_byte+0x20>)
 80011cc:	f002 f997 	bl	80034fe <HAL_SPI_Receive>
    return rb;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001b4 	.word	0x200001b4

080011e0 <w5500_write_byte>:

static void w5500_write_byte(uint8_t wb)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(W5500_SPI_PORT, &wb, 1, HAL_MAX_DELAY);
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	2201      	movs	r2, #1
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <w5500_write_byte+0x20>)
 80011f4:	f002 f847 	bl	8003286 <HAL_SPI_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200001b4 	.word	0x200001b4

08001204 <w5500_hw_reset>:

static void w5500_hw_reset(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2102      	movs	r1, #2
 800120c:	4807      	ldr	r0, [pc, #28]	; (800122c <w5500_hw_reset+0x28>)
 800120e:	f000 fbdb 	bl	80019c8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f000 f916 	bl	8001444 <HAL_Delay>
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2102      	movs	r1, #2
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <w5500_hw_reset+0x28>)
 800121e:	f000 fbd3 	bl	80019c8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001222:	200a      	movs	r0, #10
 8001224:	f000 f90e 	bl	8001444 <HAL_Delay>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40020800 	.word	0x40020800

08001230 <w5500_init>:

void w5500_init(w5500chip_t *chip)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	/*link up architecture based spi cntrl funcs to lib funcs*/
	reg_wizchip_cs_cbfunc(w5500_select, w5500_unselect);
 8001238:	492c      	ldr	r1, [pc, #176]	; (80012ec <w5500_init+0xbc>)
 800123a:	482d      	ldr	r0, [pc, #180]	; (80012f0 <w5500_init+0xc0>)
 800123c:	f003 faaa 	bl	8004794 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(w5500_read_byte, w5500_write_byte);
 8001240:	492c      	ldr	r1, [pc, #176]	; (80012f4 <w5500_init+0xc4>)
 8001242:	482d      	ldr	r0, [pc, #180]	; (80012f8 <w5500_init+0xc8>)
 8001244:	f003 facc 	bl	80047e0 <reg_wizchip_spi_cbfunc>
	w5500_hw_reset();
 8001248:	f7ff ffdc 	bl	8001204 <w5500_hw_reset>
	/*split up rxtx buffer among sockets*/
	chip->rxtx_buff[SOCK_0] = 16;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2210      	movs	r2, #16
 8001250:	75da      	strb	r2, [r3, #23]
	chip->rxtx_buff[SOCK_1] = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	761a      	strb	r2, [r3, #24]
	chip->rxtx_buff[SOCK_2] = 0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	765a      	strb	r2, [r3, #25]
	chip->rxtx_buff[SOCK_3] = 0;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	769a      	strb	r2, [r3, #26]
	chip->rxtx_buff[SOCK_4] = 0;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	76da      	strb	r2, [r3, #27]
	chip->rxtx_buff[SOCK_5] = 0;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	771a      	strb	r2, [r3, #28]
	chip->rxtx_buff[SOCK_6] = 0;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	775a      	strb	r2, [r3, #29]
	chip->rxtx_buff[SOCK_7] = 0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	779a      	strb	r2, [r3, #30]

	uint8_t mac[6] = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef};
 800127c:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <w5500_init+0xcc>)
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001286:	6018      	str	r0, [r3, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	8019      	strh	r1, [r3, #0]
	memcpy(chip->netinfo.mac, mac, 6);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	461a      	mov	r2, r3
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	6010      	str	r0, [r2, #0]
 8001298:	889b      	ldrh	r3, [r3, #4]
 800129a:	8093      	strh	r3, [r2, #4]

	uint8_t ip[4] = {192, 168, 0, 3};
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <w5500_init+0xd0>)
 800129e:	617b      	str	r3, [r7, #20]
	memcpy(chip->netinfo.ip, ip, 4);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3306      	adds	r3, #6
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	601a      	str	r2, [r3, #0]

	/*setting subnet mask*/
	uint8_t sn[4] = {255, 255, 252, 0};
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <w5500_init+0xd4>)
 80012aa:	613b      	str	r3, [r7, #16]
	memcpy(chip->netinfo.sn, sn, 4);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	330a      	adds	r3, #10
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	601a      	str	r2, [r3, #0]

	/*setting gateway*/
	uint8_t gw[4] = {192, 168, 0, 2};
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <w5500_init+0xd8>)
 80012b6:	60fb      	str	r3, [r7, #12]
	memcpy(chip->netinfo.gw, gw, 4);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	330e      	adds	r3, #14
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	601a      	str	r2, [r3, #0]

	wizchip_init(chip->rxtx_buff, chip->rxtx_buff);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f103 0217 	add.w	r2, r3, #23
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3317      	adds	r3, #23
 80012ca:	4619      	mov	r1, r3
 80012cc:	4610      	mov	r0, r2
 80012ce:	f003 faff 	bl	80048d0 <wizchip_init>
	wizchip_setnetinfo(&chip->netinfo);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fb87 	bl	80049e8 <wizchip_setnetinfo>
	/*after wizchip_getnetinfo() netinfo struct should stay the same*/
	wizchip_getnetinfo(&chip->netinfo);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 fbc3 	bl	8004a68 <wizchip_getnetinfo>
}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	080011a5 	.word	0x080011a5
 80012f0:	0800118d 	.word	0x0800118d
 80012f4:	080011e1 	.word	0x080011e1
 80012f8:	080011bd 	.word	0x080011bd
 80012fc:	08005b20 	.word	0x08005b20
 8001300:	0300a8c0 	.word	0x0300a8c0
 8001304:	00fcffff 	.word	0x00fcffff
 8001308:	0200a8c0 	.word	0x0200a8c0

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001312:	490e      	ldr	r1, [pc, #56]	; (800134c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001328:	4c0b      	ldr	r4, [pc, #44]	; (8001358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001336:	f7ff ff17 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f003 fbdb 	bl	8004af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff f939 	bl	80005b4 <main>
  bx  lr    
 8001342:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001350:	08005be8 	.word	0x08005be8
  ldr r2, =_sbss
 8001354:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001358:	20000290 	.word	0x20000290

0800135c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_Init+0x40>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_Init+0x40>)
 8001376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_Init+0x40>)
 8001382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f931 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f808 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001394:	f7ff fc3e 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023c00 	.word	0x40023c00

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x54>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x58>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f93b 	bl	800163e <HAL_SYSTICK_Config>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00e      	b.n	80013f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d80a      	bhi.n	80013ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f000 f911 	bl	8001606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_InitTick+0x5c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e000      	b.n	80013f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	20000274 	.word	0x20000274

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000274 	.word	0x20000274

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff ffee 	bl	800142c <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_Delay+0x44>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800146a:	bf00      	nop
 800146c:	f7ff ffde 	bl	800142c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f7ff ff8e 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff47 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff5c 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff8e 	bl	8001544 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5d 	bl	80014f0 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffb0 	bl	80015ac <SysTick_Config>
 800164c:	4603      	mov	r3, r0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e00e      	b.n	8001686 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	795b      	ldrb	r3, [r3, #5]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d105      	bne.n	800167e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff faf3 	bl	8000c64 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e16b      	b.n	8001984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 815a 	bne.w	800197e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d005      	beq.n	80016e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d130      	bne.n	8001744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 0201 	and.w	r2, r3, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b03      	cmp	r3, #3
 800174e:	d017      	beq.n	8001780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80b4 	beq.w	800197e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b60      	ldr	r3, [pc, #384]	; (800199c <HAL_GPIO_Init+0x30c>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a5f      	ldr	r2, [pc, #380]	; (800199c <HAL_GPIO_Init+0x30c>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_GPIO_Init+0x30c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001832:	4a5b      	ldr	r2, [pc, #364]	; (80019a0 <HAL_GPIO_Init+0x310>)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3302      	adds	r3, #2
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_GPIO_Init+0x314>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d02b      	beq.n	80018b6 <HAL_GPIO_Init+0x226>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <HAL_GPIO_Init+0x318>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d025      	beq.n	80018b2 <HAL_GPIO_Init+0x222>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a50      	ldr	r2, [pc, #320]	; (80019ac <HAL_GPIO_Init+0x31c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01f      	beq.n	80018ae <HAL_GPIO_Init+0x21e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_GPIO_Init+0x320>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d019      	beq.n	80018aa <HAL_GPIO_Init+0x21a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4e      	ldr	r2, [pc, #312]	; (80019b4 <HAL_GPIO_Init+0x324>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0x216>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <HAL_GPIO_Init+0x328>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <HAL_GPIO_Init+0x212>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x32c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_GPIO_Init+0x20a>
 8001896:	2307      	movs	r3, #7
 8001898:	e00e      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 800189a:	2308      	movs	r3, #8
 800189c:	e00c      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 800189e:	2306      	movs	r3, #6
 80018a0:	e00a      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e008      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018b6:	2300      	movs	r3, #0
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4093      	lsls	r3, r2
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c8:	4935      	ldr	r1, [pc, #212]	; (80019a0 <HAL_GPIO_Init+0x310>)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_GPIO_Init+0x334>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fa:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <HAL_GPIO_Init+0x334>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_GPIO_Init+0x334>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <HAL_GPIO_Init+0x334>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_GPIO_Init+0x334>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_GPIO_Init+0x334>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_GPIO_Init+0x334>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_GPIO_Init+0x334>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	f67f ae90 	bls.w	80016ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40021400 	.word	0x40021400
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40021c00 	.word	0x40021c00
 80019c4:	40013c00 	.word	0x40013c00

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e4:	e003      	b.n	80019ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	619a      	str	r2, [r3, #24]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e12b      	b.n	8001c66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff f940 	bl	8000ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2224      	movs	r2, #36	; 0x24
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a60:	f001 fa20 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8001a64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a81      	ldr	r2, [pc, #516]	; (8001c70 <HAL_I2C_Init+0x274>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d807      	bhi.n	8001a80 <HAL_I2C_Init+0x84>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4a80      	ldr	r2, [pc, #512]	; (8001c74 <HAL_I2C_Init+0x278>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	bf94      	ite	ls
 8001a78:	2301      	movls	r3, #1
 8001a7a:	2300      	movhi	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e006      	b.n	8001a8e <HAL_I2C_Init+0x92>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a7d      	ldr	r2, [pc, #500]	; (8001c78 <HAL_I2C_Init+0x27c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	bf94      	ite	ls
 8001a88:	2301      	movls	r3, #1
 8001a8a:	2300      	movhi	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0e7      	b.n	8001c66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4a78      	ldr	r2, [pc, #480]	; (8001c7c <HAL_I2C_Init+0x280>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0c9b      	lsrs	r3, r3, #18
 8001aa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_I2C_Init+0x274>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d802      	bhi.n	8001ad0 <HAL_I2C_Init+0xd4>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3301      	adds	r3, #1
 8001ace:	e009      	b.n	8001ae4 <HAL_I2C_Init+0xe8>
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	4a69      	ldr	r2, [pc, #420]	; (8001c80 <HAL_I2C_Init+0x284>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001af6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	495c      	ldr	r1, [pc, #368]	; (8001c70 <HAL_I2C_Init+0x274>)
 8001b00:	428b      	cmp	r3, r1
 8001b02:	d819      	bhi.n	8001b38 <HAL_I2C_Init+0x13c>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1e59      	subs	r1, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b12:	1c59      	adds	r1, r3, #1
 8001b14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b18:	400b      	ands	r3, r1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00a      	beq.n	8001b34 <HAL_I2C_Init+0x138>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1e59      	subs	r1, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	e051      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001b34:	2304      	movs	r3, #4
 8001b36:	e04f      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d111      	bne.n	8001b64 <HAL_I2C_Init+0x168>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	440b      	add	r3, r1
 8001b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	e012      	b.n	8001b8a <HAL_I2C_Init+0x18e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	0099      	lsls	r1, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Init+0x196>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e022      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10e      	bne.n	8001bb8 <HAL_I2C_Init+0x1bc>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1e58      	subs	r0, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	440b      	add	r3, r1
 8001ba8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bac:	3301      	adds	r3, #1
 8001bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb6:	e00f      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e58      	subs	r0, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	0099      	lsls	r1, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	6809      	ldr	r1, [r1, #0]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6911      	ldr	r1, [r2, #16]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68d2      	ldr	r2, [r2, #12]
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	000186a0 	.word	0x000186a0
 8001c74:	001e847f 	.word	0x001e847f
 8001c78:	003d08ff 	.word	0x003d08ff
 8001c7c:	431bde83 	.word	0x431bde83
 8001c80:	10624dd3 	.word	0x10624dd3

08001c84 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e128      	b.n	8001ee8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a90      	ldr	r2, [pc, #576]	; (8001ef0 <HAL_I2S_Init+0x26c>)
 8001cae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff f841 	bl	8000d38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ccc:	f023 030f 	bic.w	r3, r3, #15
 8001cd0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d060      	beq.n	8001da4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001cea:	2310      	movs	r3, #16
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e001      	b.n	8001cf4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d802      	bhi.n	8001d02 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f001 f9d8 	bl	80030b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d08:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d12:	d125      	bne.n	8001d60 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d010      	beq.n	8001d3e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	3305      	adds	r3, #5
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	e01f      	b.n	8001d7e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	3305      	adds	r3, #5
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e00e      	b.n	8001d7e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	3305      	adds	r3, #5
 8001d7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4a5c      	ldr	r2, [pc, #368]	; (8001ef4 <HAL_I2S_Init+0x270>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	08db      	lsrs	r3, r3, #3
 8001d88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	e003      	b.n	8001dac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d902      	bls.n	8001db8 <HAL_I2S_Init+0x134>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2bff      	cmp	r3, #255	; 0xff
 8001db6:	d907      	bls.n	8001dc8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	f043 0210 	orr.w	r2, r3, #16
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e08f      	b.n	8001ee8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	ea42 0103 	orr.w	r1, r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001de6:	f023 030f 	bic.w	r3, r3, #15
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6851      	ldr	r1, [r2, #4]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6892      	ldr	r2, [r2, #8]
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68d2      	ldr	r2, [r2, #12]
 8001df8:	4311      	orrs	r1, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6992      	ldr	r2, [r2, #24]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e0a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d161      	bne.n	8001ed8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a38      	ldr	r2, [pc, #224]	; (8001ef8 <HAL_I2S_Init+0x274>)
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a37      	ldr	r2, [pc, #220]	; (8001efc <HAL_I2S_Init+0x278>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_I2S_Init+0x1a4>
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_I2S_Init+0x27c>)
 8001e26:	e001      	b.n	8001e2c <HAL_I2S_Init+0x1a8>
 8001e28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	4932      	ldr	r1, [pc, #200]	; (8001efc <HAL_I2S_Init+0x278>)
 8001e34:	428a      	cmp	r2, r1
 8001e36:	d101      	bne.n	8001e3c <HAL_I2S_Init+0x1b8>
 8001e38:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_I2S_Init+0x27c>)
 8001e3a:	e001      	b.n	8001e40 <HAL_I2S_Init+0x1bc>
 8001e3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e44:	f023 030f 	bic.w	r3, r3, #15
 8001e48:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <HAL_I2S_Init+0x278>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_I2S_Init+0x1d4>
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_I2S_Init+0x27c>)
 8001e56:	e001      	b.n	8001e5c <HAL_I2S_Init+0x1d8>
 8001e58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a25      	ldr	r2, [pc, #148]	; (8001efc <HAL_I2S_Init+0x278>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_I2S_Init+0x1ea>
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_I2S_Init+0x27c>)
 8001e6c:	e001      	b.n	8001e72 <HAL_I2S_Init+0x1ee>
 8001e6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7e:	d003      	beq.n	8001e88 <HAL_I2S_Init+0x204>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	e001      	b.n	8001e94 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	897b      	ldrh	r3, [r7, #10]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ec0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_I2S_Init+0x278>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_I2S_Init+0x24c>
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_I2S_Init+0x27c>)
 8001ece:	e001      	b.n	8001ed4 <HAL_I2S_Init+0x250>
 8001ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed4:	897a      	ldrh	r2, [r7, #10]
 8001ed6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	08001ffb 	.word	0x08001ffb
 8001ef4:	cccccccd 	.word	0xcccccccd
 8001ef8:	08002111 	.word	0x08002111
 8001efc:	40003800 	.word	0x40003800
 8001f00:	40003400 	.word	0x40003400

08001f04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	881a      	ldrh	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c9a      	adds	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10e      	bne.n	8001f94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffb8 	bl	8001f04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	b292      	uxth	r2, r2
 8001fb0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	1c9a      	adds	r2, r3, #2
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10e      	bne.n	8001ff2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fe2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff93 	bl	8001f18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b04      	cmp	r3, #4
 8002014:	d13a      	bne.n	800208c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d109      	bne.n	8002034 <I2S_IRQHandler+0x3a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d102      	bne.n	8002034 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffb4 	bl	8001f9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d126      	bne.n	800208c <I2S_IRQHandler+0x92>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b20      	cmp	r3, #32
 800204a:	d11f      	bne.n	800208c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800205a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f043 0202 	orr.w	r2, r3, #2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ff50 	bl	8001f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b03      	cmp	r3, #3
 8002096:	d136      	bne.n	8002106 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d109      	bne.n	80020b6 <I2S_IRQHandler+0xbc>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d102      	bne.n	80020b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff45 	bl	8001f40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d122      	bne.n	8002106 <I2S_IRQHandler+0x10c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d11b      	bne.n	8002106 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	f043 0204 	orr.w	r2, r3, #4
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff13 	bl	8001f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a92      	ldr	r2, [pc, #584]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800212a:	4b92      	ldr	r3, [pc, #584]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800212c:	e001      	b.n	8002132 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800212e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a8b      	ldr	r2, [pc, #556]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002148:	4b8a      	ldr	r3, [pc, #552]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800214a:	e001      	b.n	8002150 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800214c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215c:	d004      	beq.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 8099 	bne.w	800229a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b02      	cmp	r3, #2
 8002170:	d107      	bne.n	8002182 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f925 	bl	80023cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f9c8 	bl	800252c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	2b40      	cmp	r3, #64	; 0x40
 80021a4:	d13a      	bne.n	800221c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d035      	beq.n	800221c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a6e      	ldr	r2, [pc, #440]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80021ba:	4b6e      	ldr	r3, [pc, #440]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021bc:	e001      	b.n	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80021be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4969      	ldr	r1, [pc, #420]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ca:	428b      	cmp	r3, r1
 80021cc:	d101      	bne.n	80021d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80021ce:	4b69      	ldr	r3, [pc, #420]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021d0:	e001      	b.n	80021d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80021d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f043 0202 	orr.w	r2, r3, #2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fe88 	bl	8001f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b08      	cmp	r3, #8
 8002224:	f040 80c3 	bne.w	80023ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80bd 	beq.w	80023ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002242:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a49      	ldr	r2, [pc, #292]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800224e:	4b49      	ldr	r3, [pc, #292]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002250:	e001      	b.n	8002256 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4944      	ldr	r1, [pc, #272]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800225e:	428b      	cmp	r3, r1
 8002260:	d101      	bne.n	8002266 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002262:	4b44      	ldr	r3, [pc, #272]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002264:	e001      	b.n	800226a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800226a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800226e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f043 0204 	orr.w	r2, r3, #4
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fe4a 	bl	8001f2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002298:	e089      	b.n	80023ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d107      	bne.n	80022b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f8be 	bl	8002430 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d107      	bne.n	80022ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f8fd 	bl	80024c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d12f      	bne.n	8002338 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d02a      	beq.n	8002338 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022fe:	e001      	b.n	8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002300:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4919      	ldr	r1, [pc, #100]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800230c:	428b      	cmp	r3, r1
 800230e:	d101      	bne.n	8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002312:	e001      	b.n	8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002318:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800231c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f043 0202 	orr.w	r2, r3, #2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fdfa 	bl	8001f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d136      	bne.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d031      	beq.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a07      	ldr	r2, [pc, #28]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002358:	e001      	b.n	800235e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800235a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4902      	ldr	r1, [pc, #8]	; (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002366:	428b      	cmp	r3, r1
 8002368:	d106      	bne.n	8002378 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800236a:	4b02      	ldr	r3, [pc, #8]	; (8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800236c:	e006      	b.n	800237c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800236e:	bf00      	nop
 8002370:	40003800 	.word	0x40003800
 8002374:	40003400 	.word	0x40003400
 8002378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800237c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002380:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002390:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f043 0204 	orr.w	r2, r3, #4
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff fdc0 	bl	8001f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023ac:	e000      	b.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023ae:	bf00      	nop
}
 80023b0:	bf00      	nop
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	1c99      	adds	r1, r3, #2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6251      	str	r1, [r2, #36]	; 0x24
 80023de:	881a      	ldrh	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800240c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffc9 	bl	80023b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	1c99      	adds	r1, r3, #2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6251      	str	r1, [r2, #36]	; 0x24
 8002442:	8819      	ldrh	r1, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1d      	ldr	r2, [pc, #116]	; (80024c0 <I2SEx_TxISR_I2SExt+0x90>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <I2SEx_TxISR_I2SExt+0x22>
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <I2SEx_TxISR_I2SExt+0x94>)
 8002450:	e001      	b.n	8002456 <I2SEx_TxISR_I2SExt+0x26>
 8002452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002456:	460a      	mov	r2, r1
 8002458:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d121      	bne.n	80024b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <I2SEx_TxISR_I2SExt+0x90>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d101      	bne.n	8002480 <I2SEx_TxISR_I2SExt+0x50>
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <I2SEx_TxISR_I2SExt+0x94>)
 800247e:	e001      	b.n	8002484 <I2SEx_TxISR_I2SExt+0x54>
 8002480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	490d      	ldr	r1, [pc, #52]	; (80024c0 <I2SEx_TxISR_I2SExt+0x90>)
 800248c:	428b      	cmp	r3, r1
 800248e:	d101      	bne.n	8002494 <I2SEx_TxISR_I2SExt+0x64>
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <I2SEx_TxISR_I2SExt+0x94>)
 8002492:	e001      	b.n	8002498 <I2SEx_TxISR_I2SExt+0x68>
 8002494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002498:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800249c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff81 	bl	80023b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40003800 	.word	0x40003800
 80024c4:	40003400 	.word	0x40003400

080024c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68d8      	ldr	r0, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	1c99      	adds	r1, r3, #2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80024e0:	b282      	uxth	r2, r0
 80024e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d113      	bne.n	8002524 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800250a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff4a 	bl	80023b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a20      	ldr	r2, [pc, #128]	; (80025bc <I2SEx_RxISR_I2SExt+0x90>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <I2SEx_RxISR_I2SExt+0x16>
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <I2SEx_RxISR_I2SExt+0x94>)
 8002540:	e001      	b.n	8002546 <I2SEx_RxISR_I2SExt+0x1a>
 8002542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002546:	68d8      	ldr	r0, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	1c99      	adds	r1, r3, #2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002552:	b282      	uxth	r2, r0
 8002554:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d121      	bne.n	80025b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <I2SEx_RxISR_I2SExt+0x90>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d101      	bne.n	800257c <I2SEx_RxISR_I2SExt+0x50>
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <I2SEx_RxISR_I2SExt+0x94>)
 800257a:	e001      	b.n	8002580 <I2SEx_RxISR_I2SExt+0x54>
 800257c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	490d      	ldr	r1, [pc, #52]	; (80025bc <I2SEx_RxISR_I2SExt+0x90>)
 8002588:	428b      	cmp	r3, r1
 800258a:	d101      	bne.n	8002590 <I2SEx_RxISR_I2SExt+0x64>
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <I2SEx_RxISR_I2SExt+0x94>)
 800258e:	e001      	b.n	8002594 <I2SEx_RxISR_I2SExt+0x68>
 8002590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002594:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002598:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff03 	bl	80023b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40003800 	.word	0x40003800
 80025c0:	40003400 	.word	0x40003400

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e267      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d075      	beq.n	80026ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025e2:	4b88      	ldr	r3, [pc, #544]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d00c      	beq.n	8002608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4b85      	ldr	r3, [pc, #532]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d112      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002606:	d10b      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05b      	beq.n	80026cc <HAL_RCC_OscConfig+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d157      	bne.n	80026cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e242      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x74>
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x98>
 8002642:	4b70      	ldr	r3, [pc, #448]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6f      	ldr	r2, [pc, #444]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 800265c:	4b69      	ldr	r3, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a68      	ldr	r2, [pc, #416]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b66      	ldr	r3, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a65      	ldr	r2, [pc, #404]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fed6 	bl	800142c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fed2 	bl	800142c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e207      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b5b      	ldr	r3, [pc, #364]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xc0>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fec2 	bl	800142c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe febe 	bl	800142c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1f3      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b51      	ldr	r3, [pc, #324]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0xe8>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026da:	4b4a      	ldr	r3, [pc, #296]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b44      	ldr	r3, [pc, #272]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1c7      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4937      	ldr	r1, [pc, #220]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_RCC_OscConfig+0x244>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fe77 	bl	800142c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe fe73 	bl	800142c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1a8      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b28      	ldr	r3, [pc, #160]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4925      	ldr	r1, [pc, #148]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_OscConfig+0x244>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fe56 	bl	800142c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002784:	f7fe fe52 	bl	800142c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e187      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d036      	beq.n	800281c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_RCC_OscConfig+0x248>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fe36 	bl	800142c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe fe32 	bl	800142c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e167      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x200>
 80027e2:	e01b      	b.n	800281c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_OscConfig+0x248>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fe1f 	bl	800142c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	e00e      	b.n	8002810 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f2:	f7fe fe1b 	bl	800142c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d907      	bls.n	8002810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e150      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
 8002804:	40023800 	.word	0x40023800
 8002808:	42470000 	.word	0x42470000
 800280c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	4b88      	ldr	r3, [pc, #544]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ea      	bne.n	80027f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8097 	beq.w	8002958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282e:	4b81      	ldr	r3, [pc, #516]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b7d      	ldr	r3, [pc, #500]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a7c      	ldr	r2, [pc, #496]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b77      	ldr	r3, [pc, #476]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	4b74      	ldr	r3, [pc, #464]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a73      	ldr	r2, [pc, #460]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002872:	f7fe fddb 	bl	800142c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7fe fdd7 	bl	800142c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e10c      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x2ea>
 80028a0:	4b64      	ldr	r3, [pc, #400]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a63      	ldr	r2, [pc, #396]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	e01c      	b.n	80028e8 <HAL_RCC_OscConfig+0x324>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x30c>
 80028b6:	4b5f      	ldr	r3, [pc, #380]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a5e      	ldr	r2, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
 80028c2:	4b5c      	ldr	r3, [pc, #368]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a5b      	ldr	r2, [pc, #364]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0x324>
 80028d0:	4b58      	ldr	r3, [pc, #352]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a54      	ldr	r2, [pc, #336]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 0304 	bic.w	r3, r3, #4
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe fd9c 	bl	800142c <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe fd98 	bl	800142c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0cb      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ee      	beq.n	80028f8 <HAL_RCC_OscConfig+0x334>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291c:	f7fe fd86 	bl	800142c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe fd82 	bl	800142c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0b5      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ee      	bne.n	8002924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	4a38      	ldr	r2, [pc, #224]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002956:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80a1 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002962:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b08      	cmp	r3, #8
 800296c:	d05c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d141      	bne.n	80029fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <HAL_RCC_OscConfig+0x478>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe fd56 	bl	800142c <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fd52 	bl	800142c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e087      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	019b      	lsls	r3, r3, #6
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	3b01      	subs	r3, #1
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	061b      	lsls	r3, r3, #24
 80029c6:	491b      	ldr	r1, [pc, #108]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x478>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fd2b 	bl	800142c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe fd27 	bl	800142c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e05c      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x416>
 80029f8:	e054      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_RCC_OscConfig+0x478>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe fd14 	bl	800142c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe fd10 	bl	800142c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e045      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x444>
 8002a26:	e03d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e038      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_RCC_OscConfig+0x4ec>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d028      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d121      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d11a      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d111      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0cc      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d90c      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d044      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d119      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e067      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4934      	ldr	r1, [pc, #208]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fc42 	bl	800142c <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7fe fc3e 	bl	800142c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d20c      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fba2 	bl	80013a4 <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023c00 	.word	0x40023c00
 8002c70:	40023800 	.word	0x40023800
 8002c74:	08005b28 	.word	0x08005b28
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c84:	b094      	sub	sp, #80	; 0x50
 8002c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c90:	2300      	movs	r3, #0
 8002c92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c98:	4b79      	ldr	r3, [pc, #484]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	f200 80e1 	bhi.w	8002e6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x3a>
 8002cb2:	e0db      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cb8:	e0db      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cba:	4b73      	ldr	r3, [pc, #460]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cbe:	e0d8      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4b6f      	ldr	r3, [pc, #444]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cca:	4b6d      	ldr	r3, [pc, #436]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	2200      	movs	r2, #0
 8002cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cea:	2300      	movs	r3, #0
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
 8002cee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	0159      	lsls	r1, r3, #5
 8002d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d04:	0150      	lsls	r0, r2, #5
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	1a51      	subs	r1, r2, r1
 8002d0e:	6139      	str	r1, [r7, #16]
 8002d10:	4629      	mov	r1, r5
 8002d12:	eb63 0301 	sbc.w	r3, r3, r1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d24:	4659      	mov	r1, fp
 8002d26:	018b      	lsls	r3, r1, #6
 8002d28:	4651      	mov	r1, sl
 8002d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d2e:	4651      	mov	r1, sl
 8002d30:	018a      	lsls	r2, r1, #6
 8002d32:	4651      	mov	r1, sl
 8002d34:	ebb2 0801 	subs.w	r8, r2, r1
 8002d38:	4659      	mov	r1, fp
 8002d3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d52:	4690      	mov	r8, r2
 8002d54:	4699      	mov	r9, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	eb18 0303 	adds.w	r3, r8, r3
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	462b      	mov	r3, r5
 8002d60:	eb49 0303 	adc.w	r3, r9, r3
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d72:	4629      	mov	r1, r5
 8002d74:	024b      	lsls	r3, r1, #9
 8002d76:	4621      	mov	r1, r4
 8002d78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	024a      	lsls	r2, r1, #9
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d86:	2200      	movs	r2, #0
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d90:	f7fd fa6e 	bl	8000270 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d9c:	e058      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9e:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	4611      	mov	r1, r2
 8002daa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
 8002db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002db8:	4642      	mov	r2, r8
 8002dba:	464b      	mov	r3, r9
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	0159      	lsls	r1, r3, #5
 8002dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dca:	0150      	lsls	r0, r2, #5
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002df0:	ebb2 040a 	subs.w	r4, r2, sl
 8002df4:	eb63 050b 	sbc.w	r5, r3, fp
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	464b      	mov	r3, r9
 8002e14:	eb45 0303 	adc.w	r3, r5, r3
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e26:	4629      	mov	r1, r5
 8002e28:	028b      	lsls	r3, r1, #10
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e30:	4621      	mov	r1, r4
 8002e32:	028a      	lsls	r2, r1, #10
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	61fa      	str	r2, [r7, #28]
 8002e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e44:	f7fd fa14 	bl	8000270 <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3750      	adds	r7, #80	; 0x50
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000000 	.word	0x20000000

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ea8:	f7ff fff0 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0a9b      	lsrs	r3, r3, #10
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	08005b38 	.word	0x08005b38

08002ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ed0:	f7ff ffdc 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0b5b      	lsrs	r3, r3, #13
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08005b38 	.word	0x08005b38

08002ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d035      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f1c:	4b62      	ldr	r3, [pc, #392]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f22:	f7fe fa83 	bl	800142c <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f2a:	f7fe fa7f 	bl	800142c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0b0      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f3c:	4b5b      	ldr	r3, [pc, #364]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	019a      	lsls	r2, r3, #6
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	071b      	lsls	r3, r3, #28
 8002f54:	4955      	ldr	r1, [pc, #340]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f5c:	4b52      	ldr	r3, [pc, #328]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f62:	f7fe fa63 	bl	800142c <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f6a:	f7fe fa5f 	bl	800142c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e090      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8083 	beq.w	800309c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b44      	ldr	r3, [pc, #272]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a43      	ldr	r2, [pc, #268]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a3e      	ldr	r2, [pc, #248]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fa35 	bl	800142c <HAL_GetTick>
 8002fc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe fa31 	bl	800142c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e062      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fd8:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe4:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d02f      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d028      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003002:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800300c:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003012:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003018:	4a24      	ldr	r2, [pc, #144]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d114      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe f9ff 	bl	800142c <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7fe f9fb 	bl	800142c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e02a      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ee      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003060:	d10d      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003076:	490d      	ldr	r1, [pc, #52]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003078:	4313      	orrs	r3, r2
 800307a:	608b      	str	r3, [r1, #8]
 800307c:	e005      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003084:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003088:	6093      	str	r3, [r2, #8]
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800308c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	4905      	ldr	r1, [pc, #20]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003098:	4313      	orrs	r3, r2
 800309a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	42470068 	.word	0x42470068
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40007000 	.word	0x40007000
 80030b4:	42470e40 	.word	0x42470e40

080030b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d13e      	bne.n	8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d12f      	bne.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80030ee:	617b      	str	r3, [r7, #20]
          break;
 80030f0:	e02f      	b.n	8003152 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fe:	d108      	bne.n	8003112 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003100:	4b18      	ldr	r3, [pc, #96]	; (8003164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003108:	4a18      	ldr	r2, [pc, #96]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	e007      	b.n	8003122 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003112:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800311a:	4a15      	ldr	r2, [pc, #84]	; (8003170 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	fb02 f303 	mul.w	r3, r2, r3
 8003134:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313c:	0f1b      	lsrs	r3, r3, #28
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
          break;
 800314a:	e002      	b.n	8003152 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
          break;
 8003150:	bf00      	nop
        }
      }
      break;
 8003152:	bf00      	nop
    }
  }
  return frequency;
 8003154:	697b      	ldr	r3, [r7, #20]
}
 8003156:	4618      	mov	r0, r3
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	00bb8000 	.word	0x00bb8000
 800316c:	007a1200 	.word	0x007a1200
 8003170:	00f42400 	.word	0x00f42400

08003174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07b      	b.n	800327e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d108      	bne.n	80031a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003196:	d009      	beq.n	80031ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	61da      	str	r2, [r3, #28]
 800319e:	e005      	b.n	80031ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd fe36 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	ea42 0103 	orr.w	r1, r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	f003 0104 	and.w	r1, r3, #4
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f003 0210 	and.w	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b088      	sub	sp, #32
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_SPI_Transmit+0x22>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e126      	b.n	80034f6 <HAL_SPI_Transmit+0x270>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032b0:	f7fe f8bc 	bl	800142c <HAL_GetTick>
 80032b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d002      	beq.n	80032cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
 80032c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ca:	e10b      	b.n	80034e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_SPI_Transmit+0x52>
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032dc:	e102      	b.n	80034e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003324:	d10f      	bne.n	8003346 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003344:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d007      	beq.n	8003364 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336c:	d14b      	bne.n	8003406 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_SPI_Transmit+0xf6>
 8003376:	8afb      	ldrh	r3, [r7, #22]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d13e      	bne.n	80033fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	1c9a      	adds	r2, r3, #2
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033a0:	e02b      	b.n	80033fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d112      	bne.n	80033d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	881a      	ldrh	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	1c9a      	adds	r2, r3, #2
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80033d4:	e011      	b.n	80033fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d6:	f7fe f829 	bl	800142c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d803      	bhi.n	80033ee <HAL_SPI_Transmit+0x168>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d102      	bne.n	80033f4 <HAL_SPI_Transmit+0x16e>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033f8:	e074      	b.n	80034e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ce      	bne.n	80033a2 <HAL_SPI_Transmit+0x11c>
 8003404:	e04c      	b.n	80034a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_SPI_Transmit+0x18e>
 800340e:	8afb      	ldrh	r3, [r7, #22]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d140      	bne.n	8003496 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800343a:	e02c      	b.n	8003496 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d113      	bne.n	8003472 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003470:	e011      	b.n	8003496 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003472:	f7fd ffdb 	bl	800142c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d803      	bhi.n	800348a <HAL_SPI_Transmit+0x204>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d102      	bne.n	8003490 <HAL_SPI_Transmit+0x20a>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003494:	e026      	b.n	80034e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1cd      	bne.n	800343c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	6839      	ldr	r1, [r7, #0]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fbcb 	bl	8003c40 <SPI_EndRxTxTransaction>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e000      	b.n	80034e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b088      	sub	sp, #32
 8003502:	af02      	add	r7, sp, #8
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351a:	d112      	bne.n	8003542 <HAL_SPI_Receive+0x44>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10e      	bne.n	8003542 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2204      	movs	r2, #4
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f8f1 	bl	8003720 <HAL_SPI_TransmitReceive>
 800353e:	4603      	mov	r3, r0
 8003540:	e0ea      	b.n	8003718 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_SPI_Receive+0x52>
 800354c:	2302      	movs	r3, #2
 800354e:	e0e3      	b.n	8003718 <HAL_SPI_Receive+0x21a>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003558:	f7fd ff68 	bl	800142c <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d002      	beq.n	8003570 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800356a:	2302      	movs	r3, #2
 800356c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800356e:	e0ca      	b.n	8003706 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_Receive+0x7e>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d102      	bne.n	8003582 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003580:	e0c1      	b.n	8003706 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2204      	movs	r2, #4
 8003586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c8:	d10f      	bne.n	80035ea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d007      	beq.n	8003608 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003606:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d162      	bne.n	80036d6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003610:	e02e      	b.n	8003670 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d115      	bne.n	800364c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f103 020c 	add.w	r2, r3, #12
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800364a:	e011      	b.n	8003670 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800364c:	f7fd feee 	bl	800142c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d803      	bhi.n	8003664 <HAL_SPI_Receive+0x166>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d102      	bne.n	800366a <HAL_SPI_Receive+0x16c>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800366e:	e04a      	b.n	8003706 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1cb      	bne.n	8003612 <HAL_SPI_Receive+0x114>
 800367a:	e031      	b.n	80036e0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d113      	bne.n	80036b2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	b292      	uxth	r2, r2
 8003696:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	1c9a      	adds	r2, r3, #2
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036b0:	e011      	b.n	80036d6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b2:	f7fd febb 	bl	800142c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d803      	bhi.n	80036ca <HAL_SPI_Receive+0x1cc>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d102      	bne.n	80036d0 <HAL_SPI_Receive+0x1d2>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036d4:	e017      	b.n	8003706 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1cd      	bne.n	800367c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	6839      	ldr	r1, [r7, #0]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fa45 	bl	8003b74 <SPI_EndRxTransaction>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
 8003702:	e000      	b.n	8003706 <HAL_SPI_Receive+0x208>
  }

error :
 8003704:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003716:	7dfb      	ldrb	r3, [r7, #23]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	; 0x30
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800372e:	2301      	movs	r3, #1
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x26>
 8003742:	2302      	movs	r3, #2
 8003744:	e18a      	b.n	8003a5c <HAL_SPI_TransmitReceive+0x33c>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800374e:	f7fd fe6d 	bl	800142c <HAL_GetTick>
 8003752:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800376c:	2b01      	cmp	r3, #1
 800376e:	d00f      	beq.n	8003790 <HAL_SPI_TransmitReceive+0x70>
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003776:	d107      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d103      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x68>
 8003780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003784:	2b04      	cmp	r3, #4
 8003786:	d003      	beq.n	8003790 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003788:	2302      	movs	r3, #2
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800378e:	e15b      	b.n	8003a48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x82>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x82>
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037a8:	e14e      	b.n	8003a48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d003      	beq.n	80037be <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2205      	movs	r2, #5
 80037ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	887a      	ldrh	r2, [r7, #2]
 80037ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	887a      	ldrh	r2, [r7, #2]
 80037d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d007      	beq.n	8003812 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381a:	d178      	bne.n	800390e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_SPI_TransmitReceive+0x10a>
 8003824:	8b7b      	ldrh	r3, [r7, #26]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d166      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	881a      	ldrh	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	1c9a      	adds	r2, r3, #2
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800384e:	e053      	b.n	80038f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b02      	cmp	r3, #2
 800385c:	d11b      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x176>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d016      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x176>
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b01      	cmp	r3, #1
 800386c:	d113      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	881a      	ldrh	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	1c9a      	adds	r2, r3, #2
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d119      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x1b8>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d014      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	b292      	uxth	r2, r2
 80038ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038d4:	2301      	movs	r3, #1
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038d8:	f7fd fda8 	bl	800142c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d807      	bhi.n	80038f8 <HAL_SPI_TransmitReceive+0x1d8>
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ee:	d003      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038f6:	e0a7      	b.n	8003a48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1a6      	bne.n	8003850 <HAL_SPI_TransmitReceive+0x130>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1a1      	bne.n	8003850 <HAL_SPI_TransmitReceive+0x130>
 800390c:	e07c      	b.n	8003a08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_SPI_TransmitReceive+0x1fc>
 8003916:	8b7b      	ldrh	r3, [r7, #26]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d16b      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	7812      	ldrb	r2, [r2, #0]
 8003928:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003942:	e057      	b.n	80039f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b02      	cmp	r3, #2
 8003950:	d11c      	bne.n	800398c <HAL_SPI_TransmitReceive+0x26c>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d017      	beq.n	800398c <HAL_SPI_TransmitReceive+0x26c>
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d114      	bne.n	800398c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	7812      	ldrb	r2, [r2, #0]
 800396e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d119      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x2ae>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d014      	beq.n	80039ce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ca:	2301      	movs	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039ce:	f7fd fd2d 	bl	800142c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039da:	429a      	cmp	r2, r3
 80039dc:	d803      	bhi.n	80039e6 <HAL_SPI_TransmitReceive+0x2c6>
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x2cc>
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039f2:	e029      	b.n	8003a48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1a2      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x224>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d19d      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f917 	bl	8003c40 <SPI_EndRxTxTransaction>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d006      	beq.n	8003a26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a24:	e010      	b.n	8003a48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	e000      	b.n	8003a48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3730      	adds	r7, #48	; 0x30
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a74:	f7fd fcda 	bl	800142c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a84:	f7fd fcd2 	bl	800142c <HAL_GetTick>
 8003a88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a8a:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	015b      	lsls	r3, r3, #5
 8003a90:	0d1b      	lsrs	r3, r3, #20
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9a:	e054      	b.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d050      	beq.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aa4:	f7fd fcc2 	bl	800142c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d902      	bls.n	8003aba <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d13d      	bne.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad2:	d111      	bne.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003adc:	d004      	beq.n	8003ae8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae6:	d107      	bne.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b00:	d10f      	bne.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e017      	b.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	bf0c      	ite	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	2300      	movne	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d19b      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000000 	.word	0x20000000

08003b74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b88:	d111      	bne.n	8003bae <SPI_EndRxTransaction+0x3a>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b92:	d004      	beq.n	8003b9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9c:	d107      	bne.n	8003bae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb6:	d12a      	bne.n	8003c0e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc0:	d012      	beq.n	8003be8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff ff49 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d02d      	beq.n	8003c34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e026      	b.n	8003c36 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f7ff ff36 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01a      	beq.n	8003c34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e013      	b.n	8003c36 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2101      	movs	r1, #1
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ff23 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e000      	b.n	8003c36 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <SPI_EndRxTxTransaction+0x7c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <SPI_EndRxTxTransaction+0x80>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0d5b      	lsrs	r3, r3, #21
 8003c58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c5c:	fb02 f303 	mul.w	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c6a:	d112      	bne.n	8003c92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2180      	movs	r1, #128	; 0x80
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff fef4 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e00f      	b.n	8003cb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca8:	2b80      	cmp	r3, #128	; 0x80
 8003caa:	d0f2      	beq.n	8003c92 <SPI_EndRxTxTransaction+0x52>
 8003cac:	e000      	b.n	8003cb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cae:	bf00      	nop
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	165e9f81 	.word	0x165e9f81

08003cc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e03f      	b.n	8003d56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd f942 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f929 	bl	8003f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b08a      	sub	sp, #40	; 0x28
 8003d62:	af02      	add	r7, sp, #8
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d17c      	bne.n	8003e78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_UART_Transmit+0x2c>
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e075      	b.n	8003e7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_UART_Transmit+0x3e>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e06e      	b.n	8003e7a <HAL_UART_Transmit+0x11c>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2221      	movs	r2, #33	; 0x21
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db2:	f7fd fb3b 	bl	800142c <HAL_GetTick>
 8003db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	d108      	bne.n	8003de0 <HAL_UART_Transmit+0x82>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e003      	b.n	8003de8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003df0:	e02a      	b.n	8003e48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2180      	movs	r1, #128	; 0x80
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f840 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e036      	b.n	8003e7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	3302      	adds	r3, #2
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e007      	b.n	8003e3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1cf      	bne.n	8003df2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2140      	movs	r1, #64	; 0x40
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f810 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e006      	b.n	8003e7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b090      	sub	sp, #64	; 0x40
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e92:	e050      	b.n	8003f36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d04c      	beq.n	8003f36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea2:	f7fd fac3 	bl	800142c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d241      	bcs.n	8003f36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ed2:	637a      	str	r2, [r7, #52]	; 0x34
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e5      	bne.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f06:	623a      	str	r2, [r7, #32]
 8003f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	69f9      	ldr	r1, [r7, #28]
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e00f      	b.n	8003f56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d09f      	beq.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3740      	adds	r7, #64	; 0x40
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f64:	b0c0      	sub	sp, #256	; 0x100
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	68d9      	ldr	r1, [r3, #12]
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	ea40 0301 	orr.w	r3, r0, r1
 8003f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fb8:	f021 010c 	bic.w	r1, r1, #12
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fda:	6999      	ldr	r1, [r3, #24]
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	ea40 0301 	orr.w	r3, r0, r1
 8003fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b8f      	ldr	r3, [pc, #572]	; (800422c <UART_SetConfig+0x2cc>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d005      	beq.n	8004000 <UART_SetConfig+0xa0>
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b8d      	ldr	r3, [pc, #564]	; (8004230 <UART_SetConfig+0x2d0>)
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d104      	bne.n	800400a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004000:	f7fe ff64 	bl	8002ecc <HAL_RCC_GetPCLK2Freq>
 8004004:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004008:	e003      	b.n	8004012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800400a:	f7fe ff4b 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 800400e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401c:	f040 810c 	bne.w	8004238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004024:	2200      	movs	r2, #0
 8004026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800402a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800402e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004032:	4622      	mov	r2, r4
 8004034:	462b      	mov	r3, r5
 8004036:	1891      	adds	r1, r2, r2
 8004038:	65b9      	str	r1, [r7, #88]	; 0x58
 800403a:	415b      	adcs	r3, r3
 800403c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004042:	4621      	mov	r1, r4
 8004044:	eb12 0801 	adds.w	r8, r2, r1
 8004048:	4629      	mov	r1, r5
 800404a:	eb43 0901 	adc.w	r9, r3, r1
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800405a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800405e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004062:	4690      	mov	r8, r2
 8004064:	4699      	mov	r9, r3
 8004066:	4623      	mov	r3, r4
 8004068:	eb18 0303 	adds.w	r3, r8, r3
 800406c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004070:	462b      	mov	r3, r5
 8004072:	eb49 0303 	adc.w	r3, r9, r3
 8004076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004086:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800408a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800408e:	460b      	mov	r3, r1
 8004090:	18db      	adds	r3, r3, r3
 8004092:	653b      	str	r3, [r7, #80]	; 0x50
 8004094:	4613      	mov	r3, r2
 8004096:	eb42 0303 	adc.w	r3, r2, r3
 800409a:	657b      	str	r3, [r7, #84]	; 0x54
 800409c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040a4:	f7fc f8e4 	bl	8000270 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4b61      	ldr	r3, [pc, #388]	; (8004234 <UART_SetConfig+0x2d4>)
 80040ae:	fba3 2302 	umull	r2, r3, r3, r2
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	011c      	lsls	r4, r3, #4
 80040b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80040d0:	415b      	adcs	r3, r3
 80040d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040d8:	4641      	mov	r1, r8
 80040da:	eb12 0a01 	adds.w	sl, r2, r1
 80040de:	4649      	mov	r1, r9
 80040e0:	eb43 0b01 	adc.w	fp, r3, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f8:	4692      	mov	sl, r2
 80040fa:	469b      	mov	fp, r3
 80040fc:	4643      	mov	r3, r8
 80040fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004106:	464b      	mov	r3, r9
 8004108:	eb4b 0303 	adc.w	r3, fp, r3
 800410c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800411c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004124:	460b      	mov	r3, r1
 8004126:	18db      	adds	r3, r3, r3
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
 800412a:	4613      	mov	r3, r2
 800412c:	eb42 0303 	adc.w	r3, r2, r3
 8004130:	647b      	str	r3, [r7, #68]	; 0x44
 8004132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800413a:	f7fc f899 	bl	8000270 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4611      	mov	r1, r2
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <UART_SetConfig+0x2d4>)
 8004146:	fba3 2301 	umull	r2, r3, r3, r1
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2264      	movs	r2, #100	; 0x64
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	1acb      	subs	r3, r1, r3
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800415a:	4b36      	ldr	r3, [pc, #216]	; (8004234 <UART_SetConfig+0x2d4>)
 800415c:	fba3 2302 	umull	r2, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004168:	441c      	add	r4, r3
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004174:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	63b9      	str	r1, [r7, #56]	; 0x38
 8004184:	415b      	adcs	r3, r3
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800418c:	4641      	mov	r1, r8
 800418e:	1851      	adds	r1, r2, r1
 8004190:	6339      	str	r1, [r7, #48]	; 0x30
 8004192:	4649      	mov	r1, r9
 8004194:	414b      	adcs	r3, r1
 8004196:	637b      	str	r3, [r7, #52]	; 0x34
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041a4:	4659      	mov	r1, fp
 80041a6:	00cb      	lsls	r3, r1, #3
 80041a8:	4651      	mov	r1, sl
 80041aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ae:	4651      	mov	r1, sl
 80041b0:	00ca      	lsls	r2, r1, #3
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	4642      	mov	r2, r8
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041c0:	464b      	mov	r3, r9
 80041c2:	460a      	mov	r2, r1
 80041c4:	eb42 0303 	adc.w	r3, r2, r3
 80041c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041e0:	460b      	mov	r3, r1
 80041e2:	18db      	adds	r3, r3, r3
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e6:	4613      	mov	r3, r2
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041f6:	f7fc f83b 	bl	8000270 <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <UART_SetConfig+0x2d4>)
 8004200:	fba3 1302 	umull	r1, r3, r3, r2
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	2164      	movs	r1, #100	; 0x64
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	3332      	adds	r3, #50	; 0x32
 8004212:	4a08      	ldr	r2, [pc, #32]	; (8004234 <UART_SetConfig+0x2d4>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	f003 0207 	and.w	r2, r3, #7
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4422      	add	r2, r4
 8004226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004228:	e105      	b.n	8004436 <UART_SetConfig+0x4d6>
 800422a:	bf00      	nop
 800422c:	40011000 	.word	0x40011000
 8004230:	40011400 	.word	0x40011400
 8004234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800423c:	2200      	movs	r2, #0
 800423e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004242:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800424a:	4642      	mov	r2, r8
 800424c:	464b      	mov	r3, r9
 800424e:	1891      	adds	r1, r2, r2
 8004250:	6239      	str	r1, [r7, #32]
 8004252:	415b      	adcs	r3, r3
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
 8004256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800425a:	4641      	mov	r1, r8
 800425c:	1854      	adds	r4, r2, r1
 800425e:	4649      	mov	r1, r9
 8004260:	eb43 0501 	adc.w	r5, r3, r1
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	00eb      	lsls	r3, r5, #3
 800426e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004272:	00e2      	lsls	r2, r4, #3
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	4643      	mov	r3, r8
 800427a:	18e3      	adds	r3, r4, r3
 800427c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004280:	464b      	mov	r3, r9
 8004282:	eb45 0303 	adc.w	r3, r5, r3
 8004286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042a6:	4629      	mov	r1, r5
 80042a8:	008b      	lsls	r3, r1, #2
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b0:	4621      	mov	r1, r4
 80042b2:	008a      	lsls	r2, r1, #2
 80042b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042b8:	f7fb ffda 	bl	8000270 <__aeabi_uldivmod>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4b60      	ldr	r3, [pc, #384]	; (8004444 <UART_SetConfig+0x4e4>)
 80042c2:	fba3 2302 	umull	r2, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	011c      	lsls	r4, r3, #4
 80042ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042dc:	4642      	mov	r2, r8
 80042de:	464b      	mov	r3, r9
 80042e0:	1891      	adds	r1, r2, r2
 80042e2:	61b9      	str	r1, [r7, #24]
 80042e4:	415b      	adcs	r3, r3
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ec:	4641      	mov	r1, r8
 80042ee:	1851      	adds	r1, r2, r1
 80042f0:	6139      	str	r1, [r7, #16]
 80042f2:	4649      	mov	r1, r9
 80042f4:	414b      	adcs	r3, r1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004304:	4659      	mov	r1, fp
 8004306:	00cb      	lsls	r3, r1, #3
 8004308:	4651      	mov	r1, sl
 800430a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430e:	4651      	mov	r1, sl
 8004310:	00ca      	lsls	r2, r1, #3
 8004312:	4610      	mov	r0, r2
 8004314:	4619      	mov	r1, r3
 8004316:	4603      	mov	r3, r0
 8004318:	4642      	mov	r2, r8
 800431a:	189b      	adds	r3, r3, r2
 800431c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004320:	464b      	mov	r3, r9
 8004322:	460a      	mov	r2, r1
 8004324:	eb42 0303 	adc.w	r3, r2, r3
 8004328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	67bb      	str	r3, [r7, #120]	; 0x78
 8004336:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004344:	4649      	mov	r1, r9
 8004346:	008b      	lsls	r3, r1, #2
 8004348:	4641      	mov	r1, r8
 800434a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800434e:	4641      	mov	r1, r8
 8004350:	008a      	lsls	r2, r1, #2
 8004352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004356:	f7fb ff8b 	bl	8000270 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4b39      	ldr	r3, [pc, #228]	; (8004444 <UART_SetConfig+0x4e4>)
 8004360:	fba3 1302 	umull	r1, r3, r3, r2
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	2164      	movs	r1, #100	; 0x64
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	3332      	adds	r3, #50	; 0x32
 8004372:	4a34      	ldr	r2, [pc, #208]	; (8004444 <UART_SetConfig+0x4e4>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437e:	441c      	add	r4, r3
 8004380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004384:	2200      	movs	r2, #0
 8004386:	673b      	str	r3, [r7, #112]	; 0x70
 8004388:	677a      	str	r2, [r7, #116]	; 0x74
 800438a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800438e:	4642      	mov	r2, r8
 8004390:	464b      	mov	r3, r9
 8004392:	1891      	adds	r1, r2, r2
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	415b      	adcs	r3, r3
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800439e:	4641      	mov	r1, r8
 80043a0:	1851      	adds	r1, r2, r1
 80043a2:	6039      	str	r1, [r7, #0]
 80043a4:	4649      	mov	r1, r9
 80043a6:	414b      	adcs	r3, r1
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043b6:	4659      	mov	r1, fp
 80043b8:	00cb      	lsls	r3, r1, #3
 80043ba:	4651      	mov	r1, sl
 80043bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c0:	4651      	mov	r1, sl
 80043c2:	00ca      	lsls	r2, r1, #3
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	4603      	mov	r3, r0
 80043ca:	4642      	mov	r2, r8
 80043cc:	189b      	adds	r3, r3, r2
 80043ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80043d0:	464b      	mov	r3, r9
 80043d2:	460a      	mov	r2, r1
 80043d4:	eb42 0303 	adc.w	r3, r2, r3
 80043d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	663b      	str	r3, [r7, #96]	; 0x60
 80043e4:	667a      	str	r2, [r7, #100]	; 0x64
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043f2:	4649      	mov	r1, r9
 80043f4:	008b      	lsls	r3, r1, #2
 80043f6:	4641      	mov	r1, r8
 80043f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fc:	4641      	mov	r1, r8
 80043fe:	008a      	lsls	r2, r1, #2
 8004400:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004404:	f7fb ff34 	bl	8000270 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <UART_SetConfig+0x4e4>)
 800440e:	fba3 1302 	umull	r1, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2164      	movs	r1, #100	; 0x64
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	; 0x32
 8004420:	4a08      	ldr	r2, [pc, #32]	; (8004444 <UART_SetConfig+0x4e4>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4422      	add	r2, r4
 8004434:	609a      	str	r2, [r3, #8]
}
 8004436:	bf00      	nop
 8004438:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800443c:	46bd      	mov	sp, r7
 800443e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004442:	bf00      	nop
 8004444:	51eb851f 	.word	0x51eb851f

08004448 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004450:	4b22      	ldr	r3, [pc, #136]	; (80044dc <WIZCHIP_READ+0x94>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <WIZCHIP_READ+0x94>)
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800445c:	4b1f      	ldr	r3, [pc, #124]	; (80044dc <WIZCHIP_READ+0x94>)
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <WIZCHIP_READ+0x24>
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <WIZCHIP_READ+0x94>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	d114      	bne.n	8004496 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <WIZCHIP_READ+0x94>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	0c12      	lsrs	r2, r2, #16
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	4610      	mov	r0, r2
 8004478:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <WIZCHIP_READ+0x94>)
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	0a12      	lsrs	r2, r2, #8
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	4610      	mov	r0, r2
 8004486:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <WIZCHIP_READ+0x94>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	4610      	mov	r0, r2
 8004492:	4798      	blx	r3
 8004494:	e011      	b.n	80044ba <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	0c1b      	lsrs	r3, r3, #16
 800449a:	b2db      	uxtb	r3, r3
 800449c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <WIZCHIP_READ+0x94>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f107 020c 	add.w	r2, r7, #12
 80044b4:	2103      	movs	r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <WIZCHIP_READ+0x94>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	4798      	blx	r3
 80044c0:	4603      	mov	r3, r0
 80044c2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <WIZCHIP_READ+0x94>)
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80044ca:	4b04      	ldr	r3, [pc, #16]	; (80044dc <WIZCHIP_READ+0x94>)
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	4798      	blx	r3
   return ret;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c

080044e0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80044ec:	4b22      	ldr	r3, [pc, #136]	; (8004578 <WIZCHIP_WRITE+0x98>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80044f2:	4b21      	ldr	r3, [pc, #132]	; (8004578 <WIZCHIP_WRITE+0x98>)
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <WIZCHIP_WRITE+0x98>)
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	d119      	bne.n	800453c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <WIZCHIP_WRITE+0x98>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	0c12      	lsrs	r2, r2, #16
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	4610      	mov	r0, r2
 8004514:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <WIZCHIP_WRITE+0x98>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	0a12      	lsrs	r2, r2, #8
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	4610      	mov	r0, r2
 8004522:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <WIZCHIP_WRITE+0x98>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	4610      	mov	r0, r2
 800452e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004530:	4b11      	ldr	r3, [pc, #68]	; (8004578 <WIZCHIP_WRITE+0x98>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	4610      	mov	r0, r2
 8004538:	4798      	blx	r3
 800453a:	e013      	b.n	8004564 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	b2db      	uxtb	r3, r3
 8004542:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	b2db      	uxtb	r3, r3
 800454a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <WIZCHIP_WRITE+0x98>)
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	f107 020c 	add.w	r2, r7, #12
 800455e:	2104      	movs	r1, #4
 8004560:	4610      	mov	r0, r2
 8004562:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <WIZCHIP_WRITE+0x98>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800456a:	4b03      	ldr	r3, [pc, #12]	; (8004578 <WIZCHIP_WRITE+0x98>)
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	4798      	blx	r3
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	2000000c 	.word	0x2000000c

0800457c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800458a:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004590:	4b29      	ldr	r3, [pc, #164]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004596:	4b28      	ldr	r3, [pc, #160]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <WIZCHIP_READ_BUF+0x2a>
 800459e:	4b26      	ldr	r3, [pc, #152]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d126      	bne.n	80045f4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	0c12      	lsrs	r2, r2, #16
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	4610      	mov	r0, r2
 80045b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80045b4:	4b20      	ldr	r3, [pc, #128]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	0a12      	lsrs	r2, r2, #8
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	4610      	mov	r0, r2
 80045c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80045c2:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	4610      	mov	r0, r2
 80045cc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80045ce:	2300      	movs	r3, #0
 80045d0:	82fb      	strh	r3, [r7, #22]
 80045d2:	e00a      	b.n	80045ea <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80045d4:	4b18      	ldr	r3, [pc, #96]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	8afa      	ldrh	r2, [r7, #22]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	188c      	adds	r4, r1, r2
 80045de:	4798      	blx	r3
 80045e0:	4603      	mov	r3, r0
 80045e2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80045e4:	8afb      	ldrh	r3, [r7, #22]
 80045e6:	3301      	adds	r3, #1
 80045e8:	82fb      	strh	r3, [r7, #22]
 80045ea:	8afa      	ldrh	r2, [r7, #22]
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d3f0      	bcc.n	80045d4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80045f2:	e017      	b.n	8004624 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	0c1b      	lsrs	r3, r3, #16
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	b2db      	uxtb	r3, r3
 8004602:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	f107 0210 	add.w	r2, r7, #16
 8004612:	2103      	movs	r1, #3
 8004614:	4610      	mov	r0, r2
 8004616:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	4611      	mov	r1, r2
 8004620:	68b8      	ldr	r0, [r7, #8]
 8004622:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004624:	4b04      	ldr	r3, [pc, #16]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800462a:	4b03      	ldr	r3, [pc, #12]	; (8004638 <WIZCHIP_READ_BUF+0xbc>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4798      	blx	r3
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}
 8004638:	2000000c 	.word	0x2000000c

0800463c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800464a:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d126      	bne.n	80046b4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	0c12      	lsrs	r2, r2, #16
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	4610      	mov	r0, r2
 8004672:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004674:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	0a12      	lsrs	r2, r2, #8
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	4610      	mov	r0, r2
 8004680:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	4610      	mov	r0, r2
 800468c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	82fb      	strh	r3, [r7, #22]
 8004692:	e00a      	b.n	80046aa <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	8afa      	ldrh	r2, [r7, #22]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	440a      	add	r2, r1
 800469e:	7812      	ldrb	r2, [r2, #0]
 80046a0:	4610      	mov	r0, r2
 80046a2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80046a4:	8afb      	ldrh	r3, [r7, #22]
 80046a6:	3301      	adds	r3, #1
 80046a8:	82fb      	strh	r3, [r7, #22]
 80046aa:	8afa      	ldrh	r2, [r7, #22]
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d3f0      	bcc.n	8004694 <WIZCHIP_WRITE_BUF+0x58>
 80046b2:	e017      	b.n	80046e4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	f107 0210 	add.w	r2, r7, #16
 80046d2:	2103      	movs	r1, #3
 80046d4:	4610      	mov	r0, r2
 80046d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	88fa      	ldrh	r2, [r7, #6]
 80046de:	4611      	mov	r1, r2
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80046ea:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	4798      	blx	r3
}
 80046f0:	bf00      	nop
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	2000000c 	.word	0x2000000c

080046fc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800470a:	b480      	push	{r7}
 800470c:	af00      	add	r7, sp, #0
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004726:	b480      	push	{r7}
 8004728:	af00      	add	r7, sp, #0
 800472a:	bf00      	nop
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	70fb      	strb	r3, [r7, #3]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
 8004770:	2300      	movs	r3, #0
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	71fb      	strb	r3, [r7, #7]
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <reg_wizchip_cs_cbfunc+0x16>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <reg_wizchip_cs_cbfunc+0x40>)
 80047ac:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <reg_wizchip_cs_cbfunc+0x44>)
 80047ae:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80047b0:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <reg_wizchip_cs_cbfunc+0x40>)
 80047b2:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <reg_wizchip_cs_cbfunc+0x48>)
 80047b4:	619a      	str	r2, [r3, #24]
 80047b6:	e006      	b.n	80047c6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80047b8:	4a06      	ldr	r2, [pc, #24]	; (80047d4 <reg_wizchip_cs_cbfunc+0x40>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <reg_wizchip_cs_cbfunc+0x40>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6193      	str	r3, [r2, #24]
   }
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000000c 	.word	0x2000000c
 80047d8:	08004719 	.word	0x08004719
 80047dc:	08004727 	.word	0x08004727

080047e0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80047ea:	bf00      	nop
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <reg_wizchip_spi_cbfunc+0x4c>)
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f9      	beq.n	80047ec <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <reg_wizchip_spi_cbfunc+0x24>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <reg_wizchip_spi_cbfunc+0x4c>)
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <reg_wizchip_spi_cbfunc+0x50>)
 8004808:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <reg_wizchip_spi_cbfunc+0x4c>)
 800480c:	4a09      	ldr	r2, [pc, #36]	; (8004834 <reg_wizchip_spi_cbfunc+0x54>)
 800480e:	621a      	str	r2, [r3, #32]
 8004810:	e006      	b.n	8004820 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004812:	4a06      	ldr	r2, [pc, #24]	; (800482c <reg_wizchip_spi_cbfunc+0x4c>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004818:	4a04      	ldr	r2, [pc, #16]	; (800482c <reg_wizchip_spi_cbfunc+0x4c>)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6213      	str	r3, [r2, #32]
   }
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	2000000c 	.word	0x2000000c
 8004830:	0800476d 	.word	0x0800476d
 8004834:	0800477d 	.word	0x0800477d

08004838 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800483e:	1d3b      	adds	r3, r7, #4
 8004840:	2206      	movs	r2, #6
 8004842:	4619      	mov	r1, r3
 8004844:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004848:	f7ff fe98 	bl	800457c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	2204      	movs	r2, #4
 8004852:	4619      	mov	r1, r3
 8004854:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004858:	f7ff fe90 	bl	800457c <WIZCHIP_READ_BUF>
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	2204      	movs	r2, #4
 8004862:	4619      	mov	r1, r3
 8004864:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004868:	f7ff fe88 	bl	800457c <WIZCHIP_READ_BUF>
 800486c:	f107 030c 	add.w	r3, r7, #12
 8004870:	2204      	movs	r2, #4
 8004872:	4619      	mov	r1, r3
 8004874:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004878:	f7ff fe80 	bl	800457c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	2000      	movs	r0, #0
 8004880:	f7ff fe2e 	bl	80044e0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004884:	2000      	movs	r0, #0
 8004886:	f7ff fddf 	bl	8004448 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	2206      	movs	r2, #6
 800488e:	4619      	mov	r1, r3
 8004890:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004894:	f7ff fed2 	bl	800463c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	2204      	movs	r2, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80048a4:	f7ff feca 	bl	800463c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80048a8:	f107 0310 	add.w	r3, r7, #16
 80048ac:	2204      	movs	r2, #4
 80048ae:	4619      	mov	r1, r3
 80048b0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80048b4:	f7ff fec2 	bl	800463c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80048b8:	f107 030c 	add.w	r3, r7, #12
 80048bc:	2204      	movs	r2, #4
 80048be:	4619      	mov	r1, r3
 80048c0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80048c4:	f7ff feba 	bl	800463c <WIZCHIP_WRITE_BUF>
}
 80048c8:	bf00      	nop
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80048de:	f7ff ffab 	bl	8004838 <wizchip_sw_reset>
   if(txsize)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d03b      	beq.n	8004960 <wizchip_init+0x90>
   {
      tmp = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	e015      	b.n	800491e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80048f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	7bbb      	ldrb	r3, [r7, #14]
 80048fe:	4413      	add	r3, r2
 8004900:	b2db      	uxtb	r3, r3
 8004902:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004908:	2b10      	cmp	r3, #16
 800490a:	dd02      	ble.n	8004912 <wizchip_init+0x42>
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	e066      	b.n	80049e0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	3301      	adds	r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	73fb      	strb	r3, [r7, #15]
 800491e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004922:	2b07      	cmp	r3, #7
 8004924:	dde5      	ble.n	80048f2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e015      	b.n	8004958 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800492c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	3301      	adds	r3, #1
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800493a:	4618      	mov	r0, r3
 800493c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	4619      	mov	r1, r3
 8004948:	f7ff fdca 	bl	80044e0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800494c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	3301      	adds	r3, #1
 8004954:	b2db      	uxtb	r3, r3
 8004956:	73fb      	strb	r3, [r7, #15]
 8004958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495c:	2b07      	cmp	r3, #7
 800495e:	dde5      	ble.n	800492c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d03b      	beq.n	80049de <wizchip_init+0x10e>
   {
      tmp = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
 800496e:	e015      	b.n	800499c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	4413      	add	r3, r2
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	4413      	add	r3, r2
 800497e:	b2db      	uxtb	r3, r3
 8004980:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004986:	2b10      	cmp	r3, #16
 8004988:	dd02      	ble.n	8004990 <wizchip_init+0xc0>
 800498a:	f04f 33ff 	mov.w	r3, #4294967295
 800498e:	e027      	b.n	80049e0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	3301      	adds	r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	73fb      	strb	r3, [r7, #15]
 800499c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a0:	2b07      	cmp	r3, #7
 80049a2:	dde5      	ble.n	8004970 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]
 80049a8:	e015      	b.n	80049d6 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80049aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	3301      	adds	r3, #1
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80049b8:	4618      	mov	r0, r3
 80049ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	f7ff fd8b 	bl	80044e0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	3301      	adds	r3, #1
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049da:	2b07      	cmp	r3, #7
 80049dc:	dde5      	ble.n	80049aa <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2206      	movs	r2, #6
 80049f4:	4619      	mov	r1, r3
 80049f6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80049fa:	f7ff fe1f 	bl	800463c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	330e      	adds	r3, #14
 8004a02:	2204      	movs	r2, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a0a:	f7ff fe17 	bl	800463c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	330a      	adds	r3, #10
 8004a12:	2204      	movs	r2, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004a1a:	f7ff fe0f 	bl	800463c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3306      	adds	r3, #6
 8004a22:	2204      	movs	r2, #4
 8004a24:	4619      	mov	r1, r3
 8004a26:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004a2a:	f7ff fe07 	bl	800463c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7c9a      	ldrb	r2, [r3, #18]
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <wizchip_setnetinfo+0x78>)
 8004a34:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	7cda      	ldrb	r2, [r3, #19]
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <wizchip_setnetinfo+0x78>)
 8004a3c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	7d1a      	ldrb	r2, [r3, #20]
 8004a42:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <wizchip_setnetinfo+0x78>)
 8004a44:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	7d5a      	ldrb	r2, [r3, #21]
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <wizchip_setnetinfo+0x78>)
 8004a4c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7d9a      	ldrb	r2, [r3, #22]
 8004a52:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <wizchip_setnetinfo+0x7c>)
 8004a54:	701a      	strb	r2, [r3, #0]
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000278 	.word	0x20000278
 8004a64:	2000027c 	.word	0x2000027c

08004a68 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2206      	movs	r2, #6
 8004a74:	4619      	mov	r1, r3
 8004a76:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004a7a:	f7ff fd7f 	bl	800457c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	330e      	adds	r3, #14
 8004a82:	2204      	movs	r2, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a8a:	f7ff fd77 	bl	800457c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	330a      	adds	r3, #10
 8004a92:	2204      	movs	r2, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004a9a:	f7ff fd6f 	bl	800457c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3306      	adds	r3, #6
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004aaa:	f7ff fd67 	bl	800457c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004aae:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <wizchip_getnetinfo+0x78>)
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <wizchip_getnetinfo+0x78>)
 8004ab8:	785a      	ldrb	r2, [r3, #1]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004abe:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <wizchip_getnetinfo+0x78>)
 8004ac0:	789a      	ldrb	r2, [r3, #2]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <wizchip_getnetinfo+0x78>)
 8004ac8:	78da      	ldrb	r2, [r3, #3]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <wizchip_getnetinfo+0x7c>)
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	759a      	strb	r2, [r3, #22]
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000278 	.word	0x20000278
 8004ae4:	2000027c 	.word	0x2000027c

08004ae8 <__errno>:
 8004ae8:	4b01      	ldr	r3, [pc, #4]	; (8004af0 <__errno+0x8>)
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000038 	.word	0x20000038

08004af4 <__libc_init_array>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	4d0d      	ldr	r5, [pc, #52]	; (8004b2c <__libc_init_array+0x38>)
 8004af8:	4c0d      	ldr	r4, [pc, #52]	; (8004b30 <__libc_init_array+0x3c>)
 8004afa:	1b64      	subs	r4, r4, r5
 8004afc:	10a4      	asrs	r4, r4, #2
 8004afe:	2600      	movs	r6, #0
 8004b00:	42a6      	cmp	r6, r4
 8004b02:	d109      	bne.n	8004b18 <__libc_init_array+0x24>
 8004b04:	4d0b      	ldr	r5, [pc, #44]	; (8004b34 <__libc_init_array+0x40>)
 8004b06:	4c0c      	ldr	r4, [pc, #48]	; (8004b38 <__libc_init_array+0x44>)
 8004b08:	f000 ffae 	bl	8005a68 <_init>
 8004b0c:	1b64      	subs	r4, r4, r5
 8004b0e:	10a4      	asrs	r4, r4, #2
 8004b10:	2600      	movs	r6, #0
 8004b12:	42a6      	cmp	r6, r4
 8004b14:	d105      	bne.n	8004b22 <__libc_init_array+0x2e>
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1c:	4798      	blx	r3
 8004b1e:	3601      	adds	r6, #1
 8004b20:	e7ee      	b.n	8004b00 <__libc_init_array+0xc>
 8004b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b26:	4798      	blx	r3
 8004b28:	3601      	adds	r6, #1
 8004b2a:	e7f2      	b.n	8004b12 <__libc_init_array+0x1e>
 8004b2c:	08005be0 	.word	0x08005be0
 8004b30:	08005be0 	.word	0x08005be0
 8004b34:	08005be0 	.word	0x08005be0
 8004b38:	08005be4 	.word	0x08005be4

08004b3c <memset>:
 8004b3c:	4402      	add	r2, r0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d100      	bne.n	8004b46 <memset+0xa>
 8004b44:	4770      	bx	lr
 8004b46:	f803 1b01 	strb.w	r1, [r3], #1
 8004b4a:	e7f9      	b.n	8004b40 <memset+0x4>

08004b4c <_free_r>:
 8004b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d044      	beq.n	8004bdc <_free_r+0x90>
 8004b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b56:	9001      	str	r0, [sp, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b5e:	bfb8      	it	lt
 8004b60:	18e4      	addlt	r4, r4, r3
 8004b62:	f000 fbdb 	bl	800531c <__malloc_lock>
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <_free_r+0x94>)
 8004b68:	9801      	ldr	r0, [sp, #4]
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	b933      	cbnz	r3, 8004b7c <_free_r+0x30>
 8004b6e:	6063      	str	r3, [r4, #4]
 8004b70:	6014      	str	r4, [r2, #0]
 8004b72:	b003      	add	sp, #12
 8004b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b78:	f000 bbd6 	b.w	8005328 <__malloc_unlock>
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	d908      	bls.n	8004b92 <_free_r+0x46>
 8004b80:	6825      	ldr	r5, [r4, #0]
 8004b82:	1961      	adds	r1, r4, r5
 8004b84:	428b      	cmp	r3, r1
 8004b86:	bf01      	itttt	eq
 8004b88:	6819      	ldreq	r1, [r3, #0]
 8004b8a:	685b      	ldreq	r3, [r3, #4]
 8004b8c:	1949      	addeq	r1, r1, r5
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	e7ed      	b.n	8004b6e <_free_r+0x22>
 8004b92:	461a      	mov	r2, r3
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b10b      	cbz	r3, 8004b9c <_free_r+0x50>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d9fa      	bls.n	8004b92 <_free_r+0x46>
 8004b9c:	6811      	ldr	r1, [r2, #0]
 8004b9e:	1855      	adds	r5, r2, r1
 8004ba0:	42a5      	cmp	r5, r4
 8004ba2:	d10b      	bne.n	8004bbc <_free_r+0x70>
 8004ba4:	6824      	ldr	r4, [r4, #0]
 8004ba6:	4421      	add	r1, r4
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	42a3      	cmp	r3, r4
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	d1e0      	bne.n	8004b72 <_free_r+0x26>
 8004bb0:	681c      	ldr	r4, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	6053      	str	r3, [r2, #4]
 8004bb6:	4421      	add	r1, r4
 8004bb8:	6011      	str	r1, [r2, #0]
 8004bba:	e7da      	b.n	8004b72 <_free_r+0x26>
 8004bbc:	d902      	bls.n	8004bc4 <_free_r+0x78>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	6003      	str	r3, [r0, #0]
 8004bc2:	e7d6      	b.n	8004b72 <_free_r+0x26>
 8004bc4:	6825      	ldr	r5, [r4, #0]
 8004bc6:	1961      	adds	r1, r4, r5
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf04      	itt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	bf04      	itt	eq
 8004bd4:	1949      	addeq	r1, r1, r5
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	6054      	str	r4, [r2, #4]
 8004bda:	e7ca      	b.n	8004b72 <_free_r+0x26>
 8004bdc:	b003      	add	sp, #12
 8004bde:	bd30      	pop	{r4, r5, pc}
 8004be0:	20000280 	.word	0x20000280

08004be4 <sbrk_aligned>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4e0e      	ldr	r6, [pc, #56]	; (8004c20 <sbrk_aligned+0x3c>)
 8004be8:	460c      	mov	r4, r1
 8004bea:	6831      	ldr	r1, [r6, #0]
 8004bec:	4605      	mov	r5, r0
 8004bee:	b911      	cbnz	r1, 8004bf6 <sbrk_aligned+0x12>
 8004bf0:	f000 f8a4 	bl	8004d3c <_sbrk_r>
 8004bf4:	6030      	str	r0, [r6, #0]
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 f89f 	bl	8004d3c <_sbrk_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	d00a      	beq.n	8004c18 <sbrk_aligned+0x34>
 8004c02:	1cc4      	adds	r4, r0, #3
 8004c04:	f024 0403 	bic.w	r4, r4, #3
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d007      	beq.n	8004c1c <sbrk_aligned+0x38>
 8004c0c:	1a21      	subs	r1, r4, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 f894 	bl	8004d3c <_sbrk_r>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d101      	bne.n	8004c1c <sbrk_aligned+0x38>
 8004c18:	f04f 34ff 	mov.w	r4, #4294967295
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	20000284 	.word	0x20000284

08004c24 <_malloc_r>:
 8004c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c28:	1ccd      	adds	r5, r1, #3
 8004c2a:	f025 0503 	bic.w	r5, r5, #3
 8004c2e:	3508      	adds	r5, #8
 8004c30:	2d0c      	cmp	r5, #12
 8004c32:	bf38      	it	cc
 8004c34:	250c      	movcc	r5, #12
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	4607      	mov	r7, r0
 8004c3a:	db01      	blt.n	8004c40 <_malloc_r+0x1c>
 8004c3c:	42a9      	cmp	r1, r5
 8004c3e:	d905      	bls.n	8004c4c <_malloc_r+0x28>
 8004c40:	230c      	movs	r3, #12
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	2600      	movs	r6, #0
 8004c46:	4630      	mov	r0, r6
 8004c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c4c:	4e2e      	ldr	r6, [pc, #184]	; (8004d08 <_malloc_r+0xe4>)
 8004c4e:	f000 fb65 	bl	800531c <__malloc_lock>
 8004c52:	6833      	ldr	r3, [r6, #0]
 8004c54:	461c      	mov	r4, r3
 8004c56:	bb34      	cbnz	r4, 8004ca6 <_malloc_r+0x82>
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	f7ff ffc2 	bl	8004be4 <sbrk_aligned>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	4604      	mov	r4, r0
 8004c64:	d14d      	bne.n	8004d02 <_malloc_r+0xde>
 8004c66:	6834      	ldr	r4, [r6, #0]
 8004c68:	4626      	mov	r6, r4
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	d140      	bne.n	8004cf0 <_malloc_r+0xcc>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	4631      	mov	r1, r6
 8004c72:	4638      	mov	r0, r7
 8004c74:	eb04 0803 	add.w	r8, r4, r3
 8004c78:	f000 f860 	bl	8004d3c <_sbrk_r>
 8004c7c:	4580      	cmp	r8, r0
 8004c7e:	d13a      	bne.n	8004cf6 <_malloc_r+0xd2>
 8004c80:	6821      	ldr	r1, [r4, #0]
 8004c82:	3503      	adds	r5, #3
 8004c84:	1a6d      	subs	r5, r5, r1
 8004c86:	f025 0503 	bic.w	r5, r5, #3
 8004c8a:	3508      	adds	r5, #8
 8004c8c:	2d0c      	cmp	r5, #12
 8004c8e:	bf38      	it	cc
 8004c90:	250c      	movcc	r5, #12
 8004c92:	4629      	mov	r1, r5
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff ffa5 	bl	8004be4 <sbrk_aligned>
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d02b      	beq.n	8004cf6 <_malloc_r+0xd2>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	442b      	add	r3, r5
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	e00e      	b.n	8004cc4 <_malloc_r+0xa0>
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	1b52      	subs	r2, r2, r5
 8004caa:	d41e      	bmi.n	8004cea <_malloc_r+0xc6>
 8004cac:	2a0b      	cmp	r2, #11
 8004cae:	d916      	bls.n	8004cde <_malloc_r+0xba>
 8004cb0:	1961      	adds	r1, r4, r5
 8004cb2:	42a3      	cmp	r3, r4
 8004cb4:	6025      	str	r5, [r4, #0]
 8004cb6:	bf18      	it	ne
 8004cb8:	6059      	strne	r1, [r3, #4]
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	bf08      	it	eq
 8004cbe:	6031      	streq	r1, [r6, #0]
 8004cc0:	5162      	str	r2, [r4, r5]
 8004cc2:	604b      	str	r3, [r1, #4]
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	f104 060b 	add.w	r6, r4, #11
 8004cca:	f000 fb2d 	bl	8005328 <__malloc_unlock>
 8004cce:	f026 0607 	bic.w	r6, r6, #7
 8004cd2:	1d23      	adds	r3, r4, #4
 8004cd4:	1af2      	subs	r2, r6, r3
 8004cd6:	d0b6      	beq.n	8004c46 <_malloc_r+0x22>
 8004cd8:	1b9b      	subs	r3, r3, r6
 8004cda:	50a3      	str	r3, [r4, r2]
 8004cdc:	e7b3      	b.n	8004c46 <_malloc_r+0x22>
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	42a3      	cmp	r3, r4
 8004ce2:	bf0c      	ite	eq
 8004ce4:	6032      	streq	r2, [r6, #0]
 8004ce6:	605a      	strne	r2, [r3, #4]
 8004ce8:	e7ec      	b.n	8004cc4 <_malloc_r+0xa0>
 8004cea:	4623      	mov	r3, r4
 8004cec:	6864      	ldr	r4, [r4, #4]
 8004cee:	e7b2      	b.n	8004c56 <_malloc_r+0x32>
 8004cf0:	4634      	mov	r4, r6
 8004cf2:	6876      	ldr	r6, [r6, #4]
 8004cf4:	e7b9      	b.n	8004c6a <_malloc_r+0x46>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f000 fb14 	bl	8005328 <__malloc_unlock>
 8004d00:	e7a1      	b.n	8004c46 <_malloc_r+0x22>
 8004d02:	6025      	str	r5, [r4, #0]
 8004d04:	e7de      	b.n	8004cc4 <_malloc_r+0xa0>
 8004d06:	bf00      	nop
 8004d08:	20000280 	.word	0x20000280

08004d0c <iprintf>:
 8004d0c:	b40f      	push	{r0, r1, r2, r3}
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <iprintf+0x2c>)
 8004d10:	b513      	push	{r0, r1, r4, lr}
 8004d12:	681c      	ldr	r4, [r3, #0]
 8004d14:	b124      	cbz	r4, 8004d20 <iprintf+0x14>
 8004d16:	69a3      	ldr	r3, [r4, #24]
 8004d18:	b913      	cbnz	r3, 8004d20 <iprintf+0x14>
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f000 f9f8 	bl	8005110 <__sinit>
 8004d20:	ab05      	add	r3, sp, #20
 8004d22:	9a04      	ldr	r2, [sp, #16]
 8004d24:	68a1      	ldr	r1, [r4, #8]
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f000 fb2d 	bl	8005388 <_vfiprintf_r>
 8004d2e:	b002      	add	sp, #8
 8004d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d34:	b004      	add	sp, #16
 8004d36:	4770      	bx	lr
 8004d38:	20000038 	.word	0x20000038

08004d3c <_sbrk_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4d06      	ldr	r5, [pc, #24]	; (8004d58 <_sbrk_r+0x1c>)
 8004d40:	2300      	movs	r3, #0
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	f7fc f9d8 	bl	80010fc <_sbrk>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_sbrk_r+0x1a>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_sbrk_r+0x1a>
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	2000028c 	.word	0x2000028c

08004d5c <__swbuf_r>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	460e      	mov	r6, r1
 8004d60:	4614      	mov	r4, r2
 8004d62:	4605      	mov	r5, r0
 8004d64:	b118      	cbz	r0, 8004d6e <__swbuf_r+0x12>
 8004d66:	6983      	ldr	r3, [r0, #24]
 8004d68:	b90b      	cbnz	r3, 8004d6e <__swbuf_r+0x12>
 8004d6a:	f000 f9d1 	bl	8005110 <__sinit>
 8004d6e:	4b21      	ldr	r3, [pc, #132]	; (8004df4 <__swbuf_r+0x98>)
 8004d70:	429c      	cmp	r4, r3
 8004d72:	d12b      	bne.n	8004dcc <__swbuf_r+0x70>
 8004d74:	686c      	ldr	r4, [r5, #4]
 8004d76:	69a3      	ldr	r3, [r4, #24]
 8004d78:	60a3      	str	r3, [r4, #8]
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	071a      	lsls	r2, r3, #28
 8004d7e:	d52f      	bpl.n	8004de0 <__swbuf_r+0x84>
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	b36b      	cbz	r3, 8004de0 <__swbuf_r+0x84>
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	6820      	ldr	r0, [r4, #0]
 8004d88:	1ac0      	subs	r0, r0, r3
 8004d8a:	6963      	ldr	r3, [r4, #20]
 8004d8c:	b2f6      	uxtb	r6, r6
 8004d8e:	4283      	cmp	r3, r0
 8004d90:	4637      	mov	r7, r6
 8004d92:	dc04      	bgt.n	8004d9e <__swbuf_r+0x42>
 8004d94:	4621      	mov	r1, r4
 8004d96:	4628      	mov	r0, r5
 8004d98:	f000 f926 	bl	8004fe8 <_fflush_r>
 8004d9c:	bb30      	cbnz	r0, 8004dec <__swbuf_r+0x90>
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	60a3      	str	r3, [r4, #8]
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	6022      	str	r2, [r4, #0]
 8004daa:	701e      	strb	r6, [r3, #0]
 8004dac:	6963      	ldr	r3, [r4, #20]
 8004dae:	3001      	adds	r0, #1
 8004db0:	4283      	cmp	r3, r0
 8004db2:	d004      	beq.n	8004dbe <__swbuf_r+0x62>
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	07db      	lsls	r3, r3, #31
 8004db8:	d506      	bpl.n	8004dc8 <__swbuf_r+0x6c>
 8004dba:	2e0a      	cmp	r6, #10
 8004dbc:	d104      	bne.n	8004dc8 <__swbuf_r+0x6c>
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f000 f911 	bl	8004fe8 <_fflush_r>
 8004dc6:	b988      	cbnz	r0, 8004dec <__swbuf_r+0x90>
 8004dc8:	4638      	mov	r0, r7
 8004dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <__swbuf_r+0x9c>)
 8004dce:	429c      	cmp	r4, r3
 8004dd0:	d101      	bne.n	8004dd6 <__swbuf_r+0x7a>
 8004dd2:	68ac      	ldr	r4, [r5, #8]
 8004dd4:	e7cf      	b.n	8004d76 <__swbuf_r+0x1a>
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <__swbuf_r+0xa0>)
 8004dd8:	429c      	cmp	r4, r3
 8004dda:	bf08      	it	eq
 8004ddc:	68ec      	ldreq	r4, [r5, #12]
 8004dde:	e7ca      	b.n	8004d76 <__swbuf_r+0x1a>
 8004de0:	4621      	mov	r1, r4
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 f80c 	bl	8004e00 <__swsetup_r>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d0cb      	beq.n	8004d84 <__swbuf_r+0x28>
 8004dec:	f04f 37ff 	mov.w	r7, #4294967295
 8004df0:	e7ea      	b.n	8004dc8 <__swbuf_r+0x6c>
 8004df2:	bf00      	nop
 8004df4:	08005b64 	.word	0x08005b64
 8004df8:	08005b84 	.word	0x08005b84
 8004dfc:	08005b44 	.word	0x08005b44

08004e00 <__swsetup_r>:
 8004e00:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <__swsetup_r+0xcc>)
 8004e02:	b570      	push	{r4, r5, r6, lr}
 8004e04:	681d      	ldr	r5, [r3, #0]
 8004e06:	4606      	mov	r6, r0
 8004e08:	460c      	mov	r4, r1
 8004e0a:	b125      	cbz	r5, 8004e16 <__swsetup_r+0x16>
 8004e0c:	69ab      	ldr	r3, [r5, #24]
 8004e0e:	b913      	cbnz	r3, 8004e16 <__swsetup_r+0x16>
 8004e10:	4628      	mov	r0, r5
 8004e12:	f000 f97d 	bl	8005110 <__sinit>
 8004e16:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <__swsetup_r+0xd0>)
 8004e18:	429c      	cmp	r4, r3
 8004e1a:	d10f      	bne.n	8004e3c <__swsetup_r+0x3c>
 8004e1c:	686c      	ldr	r4, [r5, #4]
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e24:	0719      	lsls	r1, r3, #28
 8004e26:	d42c      	bmi.n	8004e82 <__swsetup_r+0x82>
 8004e28:	06dd      	lsls	r5, r3, #27
 8004e2a:	d411      	bmi.n	8004e50 <__swsetup_r+0x50>
 8004e2c:	2309      	movs	r3, #9
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e34:	81a3      	strh	r3, [r4, #12]
 8004e36:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3a:	e03e      	b.n	8004eba <__swsetup_r+0xba>
 8004e3c:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <__swsetup_r+0xd4>)
 8004e3e:	429c      	cmp	r4, r3
 8004e40:	d101      	bne.n	8004e46 <__swsetup_r+0x46>
 8004e42:	68ac      	ldr	r4, [r5, #8]
 8004e44:	e7eb      	b.n	8004e1e <__swsetup_r+0x1e>
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <__swsetup_r+0xd8>)
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	bf08      	it	eq
 8004e4c:	68ec      	ldreq	r4, [r5, #12]
 8004e4e:	e7e6      	b.n	8004e1e <__swsetup_r+0x1e>
 8004e50:	0758      	lsls	r0, r3, #29
 8004e52:	d512      	bpl.n	8004e7a <__swsetup_r+0x7a>
 8004e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e56:	b141      	cbz	r1, 8004e6a <__swsetup_r+0x6a>
 8004e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e5c:	4299      	cmp	r1, r3
 8004e5e:	d002      	beq.n	8004e66 <__swsetup_r+0x66>
 8004e60:	4630      	mov	r0, r6
 8004e62:	f7ff fe73 	bl	8004b4c <_free_r>
 8004e66:	2300      	movs	r3, #0
 8004e68:	6363      	str	r3, [r4, #52]	; 0x34
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	2300      	movs	r3, #0
 8004e74:	6063      	str	r3, [r4, #4]
 8004e76:	6923      	ldr	r3, [r4, #16]
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	f043 0308 	orr.w	r3, r3, #8
 8004e80:	81a3      	strh	r3, [r4, #12]
 8004e82:	6923      	ldr	r3, [r4, #16]
 8004e84:	b94b      	cbnz	r3, 8004e9a <__swsetup_r+0x9a>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e90:	d003      	beq.n	8004e9a <__swsetup_r+0x9a>
 8004e92:	4621      	mov	r1, r4
 8004e94:	4630      	mov	r0, r6
 8004e96:	f000 fa01 	bl	800529c <__smakebuf_r>
 8004e9a:	89a0      	ldrh	r0, [r4, #12]
 8004e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ea0:	f010 0301 	ands.w	r3, r0, #1
 8004ea4:	d00a      	beq.n	8004ebc <__swsetup_r+0xbc>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60a3      	str	r3, [r4, #8]
 8004eaa:	6963      	ldr	r3, [r4, #20]
 8004eac:	425b      	negs	r3, r3
 8004eae:	61a3      	str	r3, [r4, #24]
 8004eb0:	6923      	ldr	r3, [r4, #16]
 8004eb2:	b943      	cbnz	r3, 8004ec6 <__swsetup_r+0xc6>
 8004eb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004eb8:	d1ba      	bne.n	8004e30 <__swsetup_r+0x30>
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	0781      	lsls	r1, r0, #30
 8004ebe:	bf58      	it	pl
 8004ec0:	6963      	ldrpl	r3, [r4, #20]
 8004ec2:	60a3      	str	r3, [r4, #8]
 8004ec4:	e7f4      	b.n	8004eb0 <__swsetup_r+0xb0>
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e7f7      	b.n	8004eba <__swsetup_r+0xba>
 8004eca:	bf00      	nop
 8004ecc:	20000038 	.word	0x20000038
 8004ed0:	08005b64 	.word	0x08005b64
 8004ed4:	08005b84 	.word	0x08005b84
 8004ed8:	08005b44 	.word	0x08005b44

08004edc <__sflush_r>:
 8004edc:	898a      	ldrh	r2, [r1, #12]
 8004ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	0710      	lsls	r0, r2, #28
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	d458      	bmi.n	8004f9c <__sflush_r+0xc0>
 8004eea:	684b      	ldr	r3, [r1, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	dc05      	bgt.n	8004efc <__sflush_r+0x20>
 8004ef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	dc02      	bgt.n	8004efc <__sflush_r+0x20>
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004efe:	2e00      	cmp	r6, #0
 8004f00:	d0f9      	beq.n	8004ef6 <__sflush_r+0x1a>
 8004f02:	2300      	movs	r3, #0
 8004f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f08:	682f      	ldr	r7, [r5, #0]
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	d032      	beq.n	8004f74 <__sflush_r+0x98>
 8004f0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	075a      	lsls	r2, r3, #29
 8004f14:	d505      	bpl.n	8004f22 <__sflush_r+0x46>
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	1ac0      	subs	r0, r0, r3
 8004f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f1c:	b10b      	cbz	r3, 8004f22 <__sflush_r+0x46>
 8004f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f20:	1ac0      	subs	r0, r0, r3
 8004f22:	2300      	movs	r3, #0
 8004f24:	4602      	mov	r2, r0
 8004f26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f28:	6a21      	ldr	r1, [r4, #32]
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b0      	blx	r6
 8004f2e:	1c43      	adds	r3, r0, #1
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	d106      	bne.n	8004f42 <__sflush_r+0x66>
 8004f34:	6829      	ldr	r1, [r5, #0]
 8004f36:	291d      	cmp	r1, #29
 8004f38:	d82c      	bhi.n	8004f94 <__sflush_r+0xb8>
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <__sflush_r+0x108>)
 8004f3c:	40ca      	lsrs	r2, r1
 8004f3e:	07d6      	lsls	r6, r2, #31
 8004f40:	d528      	bpl.n	8004f94 <__sflush_r+0xb8>
 8004f42:	2200      	movs	r2, #0
 8004f44:	6062      	str	r2, [r4, #4]
 8004f46:	04d9      	lsls	r1, r3, #19
 8004f48:	6922      	ldr	r2, [r4, #16]
 8004f4a:	6022      	str	r2, [r4, #0]
 8004f4c:	d504      	bpl.n	8004f58 <__sflush_r+0x7c>
 8004f4e:	1c42      	adds	r2, r0, #1
 8004f50:	d101      	bne.n	8004f56 <__sflush_r+0x7a>
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	b903      	cbnz	r3, 8004f58 <__sflush_r+0x7c>
 8004f56:	6560      	str	r0, [r4, #84]	; 0x54
 8004f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f5a:	602f      	str	r7, [r5, #0]
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	d0ca      	beq.n	8004ef6 <__sflush_r+0x1a>
 8004f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f64:	4299      	cmp	r1, r3
 8004f66:	d002      	beq.n	8004f6e <__sflush_r+0x92>
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f7ff fdef 	bl	8004b4c <_free_r>
 8004f6e:	2000      	movs	r0, #0
 8004f70:	6360      	str	r0, [r4, #52]	; 0x34
 8004f72:	e7c1      	b.n	8004ef8 <__sflush_r+0x1c>
 8004f74:	6a21      	ldr	r1, [r4, #32]
 8004f76:	2301      	movs	r3, #1
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b0      	blx	r6
 8004f7c:	1c41      	adds	r1, r0, #1
 8004f7e:	d1c7      	bne.n	8004f10 <__sflush_r+0x34>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0c4      	beq.n	8004f10 <__sflush_r+0x34>
 8004f86:	2b1d      	cmp	r3, #29
 8004f88:	d001      	beq.n	8004f8e <__sflush_r+0xb2>
 8004f8a:	2b16      	cmp	r3, #22
 8004f8c:	d101      	bne.n	8004f92 <__sflush_r+0xb6>
 8004f8e:	602f      	str	r7, [r5, #0]
 8004f90:	e7b1      	b.n	8004ef6 <__sflush_r+0x1a>
 8004f92:	89a3      	ldrh	r3, [r4, #12]
 8004f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f98:	81a3      	strh	r3, [r4, #12]
 8004f9a:	e7ad      	b.n	8004ef8 <__sflush_r+0x1c>
 8004f9c:	690f      	ldr	r7, [r1, #16]
 8004f9e:	2f00      	cmp	r7, #0
 8004fa0:	d0a9      	beq.n	8004ef6 <__sflush_r+0x1a>
 8004fa2:	0793      	lsls	r3, r2, #30
 8004fa4:	680e      	ldr	r6, [r1, #0]
 8004fa6:	bf08      	it	eq
 8004fa8:	694b      	ldreq	r3, [r1, #20]
 8004faa:	600f      	str	r7, [r1, #0]
 8004fac:	bf18      	it	ne
 8004fae:	2300      	movne	r3, #0
 8004fb0:	eba6 0807 	sub.w	r8, r6, r7
 8004fb4:	608b      	str	r3, [r1, #8]
 8004fb6:	f1b8 0f00 	cmp.w	r8, #0
 8004fba:	dd9c      	ble.n	8004ef6 <__sflush_r+0x1a>
 8004fbc:	6a21      	ldr	r1, [r4, #32]
 8004fbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fc0:	4643      	mov	r3, r8
 8004fc2:	463a      	mov	r2, r7
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	47b0      	blx	r6
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	dc06      	bgt.n	8004fda <__sflush_r+0xfe>
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	e78e      	b.n	8004ef8 <__sflush_r+0x1c>
 8004fda:	4407      	add	r7, r0
 8004fdc:	eba8 0800 	sub.w	r8, r8, r0
 8004fe0:	e7e9      	b.n	8004fb6 <__sflush_r+0xda>
 8004fe2:	bf00      	nop
 8004fe4:	20400001 	.word	0x20400001

08004fe8 <_fflush_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	690b      	ldr	r3, [r1, #16]
 8004fec:	4605      	mov	r5, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	b913      	cbnz	r3, 8004ff8 <_fflush_r+0x10>
 8004ff2:	2500      	movs	r5, #0
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	b118      	cbz	r0, 8005002 <_fflush_r+0x1a>
 8004ffa:	6983      	ldr	r3, [r0, #24]
 8004ffc:	b90b      	cbnz	r3, 8005002 <_fflush_r+0x1a>
 8004ffe:	f000 f887 	bl	8005110 <__sinit>
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <_fflush_r+0x6c>)
 8005004:	429c      	cmp	r4, r3
 8005006:	d11b      	bne.n	8005040 <_fflush_r+0x58>
 8005008:	686c      	ldr	r4, [r5, #4]
 800500a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0ef      	beq.n	8004ff2 <_fflush_r+0xa>
 8005012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005014:	07d0      	lsls	r0, r2, #31
 8005016:	d404      	bmi.n	8005022 <_fflush_r+0x3a>
 8005018:	0599      	lsls	r1, r3, #22
 800501a:	d402      	bmi.n	8005022 <_fflush_r+0x3a>
 800501c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800501e:	f000 f915 	bl	800524c <__retarget_lock_acquire_recursive>
 8005022:	4628      	mov	r0, r5
 8005024:	4621      	mov	r1, r4
 8005026:	f7ff ff59 	bl	8004edc <__sflush_r>
 800502a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800502c:	07da      	lsls	r2, r3, #31
 800502e:	4605      	mov	r5, r0
 8005030:	d4e0      	bmi.n	8004ff4 <_fflush_r+0xc>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	059b      	lsls	r3, r3, #22
 8005036:	d4dd      	bmi.n	8004ff4 <_fflush_r+0xc>
 8005038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503a:	f000 f908 	bl	800524e <__retarget_lock_release_recursive>
 800503e:	e7d9      	b.n	8004ff4 <_fflush_r+0xc>
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <_fflush_r+0x70>)
 8005042:	429c      	cmp	r4, r3
 8005044:	d101      	bne.n	800504a <_fflush_r+0x62>
 8005046:	68ac      	ldr	r4, [r5, #8]
 8005048:	e7df      	b.n	800500a <_fflush_r+0x22>
 800504a:	4b04      	ldr	r3, [pc, #16]	; (800505c <_fflush_r+0x74>)
 800504c:	429c      	cmp	r4, r3
 800504e:	bf08      	it	eq
 8005050:	68ec      	ldreq	r4, [r5, #12]
 8005052:	e7da      	b.n	800500a <_fflush_r+0x22>
 8005054:	08005b64 	.word	0x08005b64
 8005058:	08005b84 	.word	0x08005b84
 800505c:	08005b44 	.word	0x08005b44

08005060 <std>:
 8005060:	2300      	movs	r3, #0
 8005062:	b510      	push	{r4, lr}
 8005064:	4604      	mov	r4, r0
 8005066:	e9c0 3300 	strd	r3, r3, [r0]
 800506a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800506e:	6083      	str	r3, [r0, #8]
 8005070:	8181      	strh	r1, [r0, #12]
 8005072:	6643      	str	r3, [r0, #100]	; 0x64
 8005074:	81c2      	strh	r2, [r0, #14]
 8005076:	6183      	str	r3, [r0, #24]
 8005078:	4619      	mov	r1, r3
 800507a:	2208      	movs	r2, #8
 800507c:	305c      	adds	r0, #92	; 0x5c
 800507e:	f7ff fd5d 	bl	8004b3c <memset>
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <std+0x38>)
 8005084:	6263      	str	r3, [r4, #36]	; 0x24
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <std+0x3c>)
 8005088:	62a3      	str	r3, [r4, #40]	; 0x28
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <std+0x40>)
 800508c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <std+0x44>)
 8005090:	6224      	str	r4, [r4, #32]
 8005092:	6323      	str	r3, [r4, #48]	; 0x30
 8005094:	bd10      	pop	{r4, pc}
 8005096:	bf00      	nop
 8005098:	08005911 	.word	0x08005911
 800509c:	08005933 	.word	0x08005933
 80050a0:	0800596b 	.word	0x0800596b
 80050a4:	0800598f 	.word	0x0800598f

080050a8 <_cleanup_r>:
 80050a8:	4901      	ldr	r1, [pc, #4]	; (80050b0 <_cleanup_r+0x8>)
 80050aa:	f000 b8af 	b.w	800520c <_fwalk_reent>
 80050ae:	bf00      	nop
 80050b0:	08004fe9 	.word	0x08004fe9

080050b4 <__sfmoreglue>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	2268      	movs	r2, #104	; 0x68
 80050b8:	1e4d      	subs	r5, r1, #1
 80050ba:	4355      	muls	r5, r2
 80050bc:	460e      	mov	r6, r1
 80050be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050c2:	f7ff fdaf 	bl	8004c24 <_malloc_r>
 80050c6:	4604      	mov	r4, r0
 80050c8:	b140      	cbz	r0, 80050dc <__sfmoreglue+0x28>
 80050ca:	2100      	movs	r1, #0
 80050cc:	e9c0 1600 	strd	r1, r6, [r0]
 80050d0:	300c      	adds	r0, #12
 80050d2:	60a0      	str	r0, [r4, #8]
 80050d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050d8:	f7ff fd30 	bl	8004b3c <memset>
 80050dc:	4620      	mov	r0, r4
 80050de:	bd70      	pop	{r4, r5, r6, pc}

080050e0 <__sfp_lock_acquire>:
 80050e0:	4801      	ldr	r0, [pc, #4]	; (80050e8 <__sfp_lock_acquire+0x8>)
 80050e2:	f000 b8b3 	b.w	800524c <__retarget_lock_acquire_recursive>
 80050e6:	bf00      	nop
 80050e8:	20000289 	.word	0x20000289

080050ec <__sfp_lock_release>:
 80050ec:	4801      	ldr	r0, [pc, #4]	; (80050f4 <__sfp_lock_release+0x8>)
 80050ee:	f000 b8ae 	b.w	800524e <__retarget_lock_release_recursive>
 80050f2:	bf00      	nop
 80050f4:	20000289 	.word	0x20000289

080050f8 <__sinit_lock_acquire>:
 80050f8:	4801      	ldr	r0, [pc, #4]	; (8005100 <__sinit_lock_acquire+0x8>)
 80050fa:	f000 b8a7 	b.w	800524c <__retarget_lock_acquire_recursive>
 80050fe:	bf00      	nop
 8005100:	2000028a 	.word	0x2000028a

08005104 <__sinit_lock_release>:
 8005104:	4801      	ldr	r0, [pc, #4]	; (800510c <__sinit_lock_release+0x8>)
 8005106:	f000 b8a2 	b.w	800524e <__retarget_lock_release_recursive>
 800510a:	bf00      	nop
 800510c:	2000028a 	.word	0x2000028a

08005110 <__sinit>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4604      	mov	r4, r0
 8005114:	f7ff fff0 	bl	80050f8 <__sinit_lock_acquire>
 8005118:	69a3      	ldr	r3, [r4, #24]
 800511a:	b11b      	cbz	r3, 8005124 <__sinit+0x14>
 800511c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005120:	f7ff bff0 	b.w	8005104 <__sinit_lock_release>
 8005124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005128:	6523      	str	r3, [r4, #80]	; 0x50
 800512a:	4b13      	ldr	r3, [pc, #76]	; (8005178 <__sinit+0x68>)
 800512c:	4a13      	ldr	r2, [pc, #76]	; (800517c <__sinit+0x6c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	62a2      	str	r2, [r4, #40]	; 0x28
 8005132:	42a3      	cmp	r3, r4
 8005134:	bf04      	itt	eq
 8005136:	2301      	moveq	r3, #1
 8005138:	61a3      	streq	r3, [r4, #24]
 800513a:	4620      	mov	r0, r4
 800513c:	f000 f820 	bl	8005180 <__sfp>
 8005140:	6060      	str	r0, [r4, #4]
 8005142:	4620      	mov	r0, r4
 8005144:	f000 f81c 	bl	8005180 <__sfp>
 8005148:	60a0      	str	r0, [r4, #8]
 800514a:	4620      	mov	r0, r4
 800514c:	f000 f818 	bl	8005180 <__sfp>
 8005150:	2200      	movs	r2, #0
 8005152:	60e0      	str	r0, [r4, #12]
 8005154:	2104      	movs	r1, #4
 8005156:	6860      	ldr	r0, [r4, #4]
 8005158:	f7ff ff82 	bl	8005060 <std>
 800515c:	68a0      	ldr	r0, [r4, #8]
 800515e:	2201      	movs	r2, #1
 8005160:	2109      	movs	r1, #9
 8005162:	f7ff ff7d 	bl	8005060 <std>
 8005166:	68e0      	ldr	r0, [r4, #12]
 8005168:	2202      	movs	r2, #2
 800516a:	2112      	movs	r1, #18
 800516c:	f7ff ff78 	bl	8005060 <std>
 8005170:	2301      	movs	r3, #1
 8005172:	61a3      	str	r3, [r4, #24]
 8005174:	e7d2      	b.n	800511c <__sinit+0xc>
 8005176:	bf00      	nop
 8005178:	08005b40 	.word	0x08005b40
 800517c:	080050a9 	.word	0x080050a9

08005180 <__sfp>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	4607      	mov	r7, r0
 8005184:	f7ff ffac 	bl	80050e0 <__sfp_lock_acquire>
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <__sfp+0x84>)
 800518a:	681e      	ldr	r6, [r3, #0]
 800518c:	69b3      	ldr	r3, [r6, #24]
 800518e:	b913      	cbnz	r3, 8005196 <__sfp+0x16>
 8005190:	4630      	mov	r0, r6
 8005192:	f7ff ffbd 	bl	8005110 <__sinit>
 8005196:	3648      	adds	r6, #72	; 0x48
 8005198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800519c:	3b01      	subs	r3, #1
 800519e:	d503      	bpl.n	80051a8 <__sfp+0x28>
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	b30b      	cbz	r3, 80051e8 <__sfp+0x68>
 80051a4:	6836      	ldr	r6, [r6, #0]
 80051a6:	e7f7      	b.n	8005198 <__sfp+0x18>
 80051a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051ac:	b9d5      	cbnz	r5, 80051e4 <__sfp+0x64>
 80051ae:	4b16      	ldr	r3, [pc, #88]	; (8005208 <__sfp+0x88>)
 80051b0:	60e3      	str	r3, [r4, #12]
 80051b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051b6:	6665      	str	r5, [r4, #100]	; 0x64
 80051b8:	f000 f847 	bl	800524a <__retarget_lock_init_recursive>
 80051bc:	f7ff ff96 	bl	80050ec <__sfp_lock_release>
 80051c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051c8:	6025      	str	r5, [r4, #0]
 80051ca:	61a5      	str	r5, [r4, #24]
 80051cc:	2208      	movs	r2, #8
 80051ce:	4629      	mov	r1, r5
 80051d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051d4:	f7ff fcb2 	bl	8004b3c <memset>
 80051d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051e0:	4620      	mov	r0, r4
 80051e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e4:	3468      	adds	r4, #104	; 0x68
 80051e6:	e7d9      	b.n	800519c <__sfp+0x1c>
 80051e8:	2104      	movs	r1, #4
 80051ea:	4638      	mov	r0, r7
 80051ec:	f7ff ff62 	bl	80050b4 <__sfmoreglue>
 80051f0:	4604      	mov	r4, r0
 80051f2:	6030      	str	r0, [r6, #0]
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d1d5      	bne.n	80051a4 <__sfp+0x24>
 80051f8:	f7ff ff78 	bl	80050ec <__sfp_lock_release>
 80051fc:	230c      	movs	r3, #12
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	e7ee      	b.n	80051e0 <__sfp+0x60>
 8005202:	bf00      	nop
 8005204:	08005b40 	.word	0x08005b40
 8005208:	ffff0001 	.word	0xffff0001

0800520c <_fwalk_reent>:
 800520c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005210:	4606      	mov	r6, r0
 8005212:	4688      	mov	r8, r1
 8005214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005218:	2700      	movs	r7, #0
 800521a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800521e:	f1b9 0901 	subs.w	r9, r9, #1
 8005222:	d505      	bpl.n	8005230 <_fwalk_reent+0x24>
 8005224:	6824      	ldr	r4, [r4, #0]
 8005226:	2c00      	cmp	r4, #0
 8005228:	d1f7      	bne.n	800521a <_fwalk_reent+0xe>
 800522a:	4638      	mov	r0, r7
 800522c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005230:	89ab      	ldrh	r3, [r5, #12]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d907      	bls.n	8005246 <_fwalk_reent+0x3a>
 8005236:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800523a:	3301      	adds	r3, #1
 800523c:	d003      	beq.n	8005246 <_fwalk_reent+0x3a>
 800523e:	4629      	mov	r1, r5
 8005240:	4630      	mov	r0, r6
 8005242:	47c0      	blx	r8
 8005244:	4307      	orrs	r7, r0
 8005246:	3568      	adds	r5, #104	; 0x68
 8005248:	e7e9      	b.n	800521e <_fwalk_reent+0x12>

0800524a <__retarget_lock_init_recursive>:
 800524a:	4770      	bx	lr

0800524c <__retarget_lock_acquire_recursive>:
 800524c:	4770      	bx	lr

0800524e <__retarget_lock_release_recursive>:
 800524e:	4770      	bx	lr

08005250 <__swhatbuf_r>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	460e      	mov	r6, r1
 8005254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005258:	2900      	cmp	r1, #0
 800525a:	b096      	sub	sp, #88	; 0x58
 800525c:	4614      	mov	r4, r2
 800525e:	461d      	mov	r5, r3
 8005260:	da08      	bge.n	8005274 <__swhatbuf_r+0x24>
 8005262:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	061a      	lsls	r2, r3, #24
 800526c:	d410      	bmi.n	8005290 <__swhatbuf_r+0x40>
 800526e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005272:	e00e      	b.n	8005292 <__swhatbuf_r+0x42>
 8005274:	466a      	mov	r2, sp
 8005276:	f000 fbb1 	bl	80059dc <_fstat_r>
 800527a:	2800      	cmp	r0, #0
 800527c:	dbf1      	blt.n	8005262 <__swhatbuf_r+0x12>
 800527e:	9a01      	ldr	r2, [sp, #4]
 8005280:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005284:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005288:	425a      	negs	r2, r3
 800528a:	415a      	adcs	r2, r3
 800528c:	602a      	str	r2, [r5, #0]
 800528e:	e7ee      	b.n	800526e <__swhatbuf_r+0x1e>
 8005290:	2340      	movs	r3, #64	; 0x40
 8005292:	2000      	movs	r0, #0
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	b016      	add	sp, #88	; 0x58
 8005298:	bd70      	pop	{r4, r5, r6, pc}
	...

0800529c <__smakebuf_r>:
 800529c:	898b      	ldrh	r3, [r1, #12]
 800529e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052a0:	079d      	lsls	r5, r3, #30
 80052a2:	4606      	mov	r6, r0
 80052a4:	460c      	mov	r4, r1
 80052a6:	d507      	bpl.n	80052b8 <__smakebuf_r+0x1c>
 80052a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	2301      	movs	r3, #1
 80052b2:	6163      	str	r3, [r4, #20]
 80052b4:	b002      	add	sp, #8
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	ab01      	add	r3, sp, #4
 80052ba:	466a      	mov	r2, sp
 80052bc:	f7ff ffc8 	bl	8005250 <__swhatbuf_r>
 80052c0:	9900      	ldr	r1, [sp, #0]
 80052c2:	4605      	mov	r5, r0
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7ff fcad 	bl	8004c24 <_malloc_r>
 80052ca:	b948      	cbnz	r0, 80052e0 <__smakebuf_r+0x44>
 80052cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d0:	059a      	lsls	r2, r3, #22
 80052d2:	d4ef      	bmi.n	80052b4 <__smakebuf_r+0x18>
 80052d4:	f023 0303 	bic.w	r3, r3, #3
 80052d8:	f043 0302 	orr.w	r3, r3, #2
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	e7e3      	b.n	80052a8 <__smakebuf_r+0xc>
 80052e0:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <__smakebuf_r+0x7c>)
 80052e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	6020      	str	r0, [r4, #0]
 80052e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	9b00      	ldr	r3, [sp, #0]
 80052f0:	6163      	str	r3, [r4, #20]
 80052f2:	9b01      	ldr	r3, [sp, #4]
 80052f4:	6120      	str	r0, [r4, #16]
 80052f6:	b15b      	cbz	r3, 8005310 <__smakebuf_r+0x74>
 80052f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 fb7f 	bl	8005a00 <_isatty_r>
 8005302:	b128      	cbz	r0, 8005310 <__smakebuf_r+0x74>
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	81a3      	strh	r3, [r4, #12]
 8005310:	89a0      	ldrh	r0, [r4, #12]
 8005312:	4305      	orrs	r5, r0
 8005314:	81a5      	strh	r5, [r4, #12]
 8005316:	e7cd      	b.n	80052b4 <__smakebuf_r+0x18>
 8005318:	080050a9 	.word	0x080050a9

0800531c <__malloc_lock>:
 800531c:	4801      	ldr	r0, [pc, #4]	; (8005324 <__malloc_lock+0x8>)
 800531e:	f7ff bf95 	b.w	800524c <__retarget_lock_acquire_recursive>
 8005322:	bf00      	nop
 8005324:	20000288 	.word	0x20000288

08005328 <__malloc_unlock>:
 8005328:	4801      	ldr	r0, [pc, #4]	; (8005330 <__malloc_unlock+0x8>)
 800532a:	f7ff bf90 	b.w	800524e <__retarget_lock_release_recursive>
 800532e:	bf00      	nop
 8005330:	20000288 	.word	0x20000288

08005334 <__sfputc_r>:
 8005334:	6893      	ldr	r3, [r2, #8]
 8005336:	3b01      	subs	r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	b410      	push	{r4}
 800533c:	6093      	str	r3, [r2, #8]
 800533e:	da08      	bge.n	8005352 <__sfputc_r+0x1e>
 8005340:	6994      	ldr	r4, [r2, #24]
 8005342:	42a3      	cmp	r3, r4
 8005344:	db01      	blt.n	800534a <__sfputc_r+0x16>
 8005346:	290a      	cmp	r1, #10
 8005348:	d103      	bne.n	8005352 <__sfputc_r+0x1e>
 800534a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800534e:	f7ff bd05 	b.w	8004d5c <__swbuf_r>
 8005352:	6813      	ldr	r3, [r2, #0]
 8005354:	1c58      	adds	r0, r3, #1
 8005356:	6010      	str	r0, [r2, #0]
 8005358:	7019      	strb	r1, [r3, #0]
 800535a:	4608      	mov	r0, r1
 800535c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005360:	4770      	bx	lr

08005362 <__sfputs_r>:
 8005362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005364:	4606      	mov	r6, r0
 8005366:	460f      	mov	r7, r1
 8005368:	4614      	mov	r4, r2
 800536a:	18d5      	adds	r5, r2, r3
 800536c:	42ac      	cmp	r4, r5
 800536e:	d101      	bne.n	8005374 <__sfputs_r+0x12>
 8005370:	2000      	movs	r0, #0
 8005372:	e007      	b.n	8005384 <__sfputs_r+0x22>
 8005374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005378:	463a      	mov	r2, r7
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff ffda 	bl	8005334 <__sfputc_r>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d1f3      	bne.n	800536c <__sfputs_r+0xa>
 8005384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005388 <_vfiprintf_r>:
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538c:	460d      	mov	r5, r1
 800538e:	b09d      	sub	sp, #116	; 0x74
 8005390:	4614      	mov	r4, r2
 8005392:	4698      	mov	r8, r3
 8005394:	4606      	mov	r6, r0
 8005396:	b118      	cbz	r0, 80053a0 <_vfiprintf_r+0x18>
 8005398:	6983      	ldr	r3, [r0, #24]
 800539a:	b90b      	cbnz	r3, 80053a0 <_vfiprintf_r+0x18>
 800539c:	f7ff feb8 	bl	8005110 <__sinit>
 80053a0:	4b89      	ldr	r3, [pc, #548]	; (80055c8 <_vfiprintf_r+0x240>)
 80053a2:	429d      	cmp	r5, r3
 80053a4:	d11b      	bne.n	80053de <_vfiprintf_r+0x56>
 80053a6:	6875      	ldr	r5, [r6, #4]
 80053a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053aa:	07d9      	lsls	r1, r3, #31
 80053ac:	d405      	bmi.n	80053ba <_vfiprintf_r+0x32>
 80053ae:	89ab      	ldrh	r3, [r5, #12]
 80053b0:	059a      	lsls	r2, r3, #22
 80053b2:	d402      	bmi.n	80053ba <_vfiprintf_r+0x32>
 80053b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053b6:	f7ff ff49 	bl	800524c <__retarget_lock_acquire_recursive>
 80053ba:	89ab      	ldrh	r3, [r5, #12]
 80053bc:	071b      	lsls	r3, r3, #28
 80053be:	d501      	bpl.n	80053c4 <_vfiprintf_r+0x3c>
 80053c0:	692b      	ldr	r3, [r5, #16]
 80053c2:	b9eb      	cbnz	r3, 8005400 <_vfiprintf_r+0x78>
 80053c4:	4629      	mov	r1, r5
 80053c6:	4630      	mov	r0, r6
 80053c8:	f7ff fd1a 	bl	8004e00 <__swsetup_r>
 80053cc:	b1c0      	cbz	r0, 8005400 <_vfiprintf_r+0x78>
 80053ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053d0:	07dc      	lsls	r4, r3, #31
 80053d2:	d50e      	bpl.n	80053f2 <_vfiprintf_r+0x6a>
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	b01d      	add	sp, #116	; 0x74
 80053da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053de:	4b7b      	ldr	r3, [pc, #492]	; (80055cc <_vfiprintf_r+0x244>)
 80053e0:	429d      	cmp	r5, r3
 80053e2:	d101      	bne.n	80053e8 <_vfiprintf_r+0x60>
 80053e4:	68b5      	ldr	r5, [r6, #8]
 80053e6:	e7df      	b.n	80053a8 <_vfiprintf_r+0x20>
 80053e8:	4b79      	ldr	r3, [pc, #484]	; (80055d0 <_vfiprintf_r+0x248>)
 80053ea:	429d      	cmp	r5, r3
 80053ec:	bf08      	it	eq
 80053ee:	68f5      	ldreq	r5, [r6, #12]
 80053f0:	e7da      	b.n	80053a8 <_vfiprintf_r+0x20>
 80053f2:	89ab      	ldrh	r3, [r5, #12]
 80053f4:	0598      	lsls	r0, r3, #22
 80053f6:	d4ed      	bmi.n	80053d4 <_vfiprintf_r+0x4c>
 80053f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053fa:	f7ff ff28 	bl	800524e <__retarget_lock_release_recursive>
 80053fe:	e7e9      	b.n	80053d4 <_vfiprintf_r+0x4c>
 8005400:	2300      	movs	r3, #0
 8005402:	9309      	str	r3, [sp, #36]	; 0x24
 8005404:	2320      	movs	r3, #32
 8005406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800540a:	f8cd 800c 	str.w	r8, [sp, #12]
 800540e:	2330      	movs	r3, #48	; 0x30
 8005410:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055d4 <_vfiprintf_r+0x24c>
 8005414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005418:	f04f 0901 	mov.w	r9, #1
 800541c:	4623      	mov	r3, r4
 800541e:	469a      	mov	sl, r3
 8005420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005424:	b10a      	cbz	r2, 800542a <_vfiprintf_r+0xa2>
 8005426:	2a25      	cmp	r2, #37	; 0x25
 8005428:	d1f9      	bne.n	800541e <_vfiprintf_r+0x96>
 800542a:	ebba 0b04 	subs.w	fp, sl, r4
 800542e:	d00b      	beq.n	8005448 <_vfiprintf_r+0xc0>
 8005430:	465b      	mov	r3, fp
 8005432:	4622      	mov	r2, r4
 8005434:	4629      	mov	r1, r5
 8005436:	4630      	mov	r0, r6
 8005438:	f7ff ff93 	bl	8005362 <__sfputs_r>
 800543c:	3001      	adds	r0, #1
 800543e:	f000 80aa 	beq.w	8005596 <_vfiprintf_r+0x20e>
 8005442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005444:	445a      	add	r2, fp
 8005446:	9209      	str	r2, [sp, #36]	; 0x24
 8005448:	f89a 3000 	ldrb.w	r3, [sl]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80a2 	beq.w	8005596 <_vfiprintf_r+0x20e>
 8005452:	2300      	movs	r3, #0
 8005454:	f04f 32ff 	mov.w	r2, #4294967295
 8005458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800545c:	f10a 0a01 	add.w	sl, sl, #1
 8005460:	9304      	str	r3, [sp, #16]
 8005462:	9307      	str	r3, [sp, #28]
 8005464:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005468:	931a      	str	r3, [sp, #104]	; 0x68
 800546a:	4654      	mov	r4, sl
 800546c:	2205      	movs	r2, #5
 800546e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005472:	4858      	ldr	r0, [pc, #352]	; (80055d4 <_vfiprintf_r+0x24c>)
 8005474:	f7fa feac 	bl	80001d0 <memchr>
 8005478:	9a04      	ldr	r2, [sp, #16]
 800547a:	b9d8      	cbnz	r0, 80054b4 <_vfiprintf_r+0x12c>
 800547c:	06d1      	lsls	r1, r2, #27
 800547e:	bf44      	itt	mi
 8005480:	2320      	movmi	r3, #32
 8005482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005486:	0713      	lsls	r3, r2, #28
 8005488:	bf44      	itt	mi
 800548a:	232b      	movmi	r3, #43	; 0x2b
 800548c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005490:	f89a 3000 	ldrb.w	r3, [sl]
 8005494:	2b2a      	cmp	r3, #42	; 0x2a
 8005496:	d015      	beq.n	80054c4 <_vfiprintf_r+0x13c>
 8005498:	9a07      	ldr	r2, [sp, #28]
 800549a:	4654      	mov	r4, sl
 800549c:	2000      	movs	r0, #0
 800549e:	f04f 0c0a 	mov.w	ip, #10
 80054a2:	4621      	mov	r1, r4
 80054a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054a8:	3b30      	subs	r3, #48	; 0x30
 80054aa:	2b09      	cmp	r3, #9
 80054ac:	d94e      	bls.n	800554c <_vfiprintf_r+0x1c4>
 80054ae:	b1b0      	cbz	r0, 80054de <_vfiprintf_r+0x156>
 80054b0:	9207      	str	r2, [sp, #28]
 80054b2:	e014      	b.n	80054de <_vfiprintf_r+0x156>
 80054b4:	eba0 0308 	sub.w	r3, r0, r8
 80054b8:	fa09 f303 	lsl.w	r3, r9, r3
 80054bc:	4313      	orrs	r3, r2
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	46a2      	mov	sl, r4
 80054c2:	e7d2      	b.n	800546a <_vfiprintf_r+0xe2>
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	1d19      	adds	r1, r3, #4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	9103      	str	r1, [sp, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	bfbb      	ittet	lt
 80054d0:	425b      	neglt	r3, r3
 80054d2:	f042 0202 	orrlt.w	r2, r2, #2
 80054d6:	9307      	strge	r3, [sp, #28]
 80054d8:	9307      	strlt	r3, [sp, #28]
 80054da:	bfb8      	it	lt
 80054dc:	9204      	strlt	r2, [sp, #16]
 80054de:	7823      	ldrb	r3, [r4, #0]
 80054e0:	2b2e      	cmp	r3, #46	; 0x2e
 80054e2:	d10c      	bne.n	80054fe <_vfiprintf_r+0x176>
 80054e4:	7863      	ldrb	r3, [r4, #1]
 80054e6:	2b2a      	cmp	r3, #42	; 0x2a
 80054e8:	d135      	bne.n	8005556 <_vfiprintf_r+0x1ce>
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	1d1a      	adds	r2, r3, #4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	9203      	str	r2, [sp, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bfb8      	it	lt
 80054f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80054fa:	3402      	adds	r4, #2
 80054fc:	9305      	str	r3, [sp, #20]
 80054fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055e4 <_vfiprintf_r+0x25c>
 8005502:	7821      	ldrb	r1, [r4, #0]
 8005504:	2203      	movs	r2, #3
 8005506:	4650      	mov	r0, sl
 8005508:	f7fa fe62 	bl	80001d0 <memchr>
 800550c:	b140      	cbz	r0, 8005520 <_vfiprintf_r+0x198>
 800550e:	2340      	movs	r3, #64	; 0x40
 8005510:	eba0 000a 	sub.w	r0, r0, sl
 8005514:	fa03 f000 	lsl.w	r0, r3, r0
 8005518:	9b04      	ldr	r3, [sp, #16]
 800551a:	4303      	orrs	r3, r0
 800551c:	3401      	adds	r4, #1
 800551e:	9304      	str	r3, [sp, #16]
 8005520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005524:	482c      	ldr	r0, [pc, #176]	; (80055d8 <_vfiprintf_r+0x250>)
 8005526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800552a:	2206      	movs	r2, #6
 800552c:	f7fa fe50 	bl	80001d0 <memchr>
 8005530:	2800      	cmp	r0, #0
 8005532:	d03f      	beq.n	80055b4 <_vfiprintf_r+0x22c>
 8005534:	4b29      	ldr	r3, [pc, #164]	; (80055dc <_vfiprintf_r+0x254>)
 8005536:	bb1b      	cbnz	r3, 8005580 <_vfiprintf_r+0x1f8>
 8005538:	9b03      	ldr	r3, [sp, #12]
 800553a:	3307      	adds	r3, #7
 800553c:	f023 0307 	bic.w	r3, r3, #7
 8005540:	3308      	adds	r3, #8
 8005542:	9303      	str	r3, [sp, #12]
 8005544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005546:	443b      	add	r3, r7
 8005548:	9309      	str	r3, [sp, #36]	; 0x24
 800554a:	e767      	b.n	800541c <_vfiprintf_r+0x94>
 800554c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005550:	460c      	mov	r4, r1
 8005552:	2001      	movs	r0, #1
 8005554:	e7a5      	b.n	80054a2 <_vfiprintf_r+0x11a>
 8005556:	2300      	movs	r3, #0
 8005558:	3401      	adds	r4, #1
 800555a:	9305      	str	r3, [sp, #20]
 800555c:	4619      	mov	r1, r3
 800555e:	f04f 0c0a 	mov.w	ip, #10
 8005562:	4620      	mov	r0, r4
 8005564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005568:	3a30      	subs	r2, #48	; 0x30
 800556a:	2a09      	cmp	r2, #9
 800556c:	d903      	bls.n	8005576 <_vfiprintf_r+0x1ee>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0c5      	beq.n	80054fe <_vfiprintf_r+0x176>
 8005572:	9105      	str	r1, [sp, #20]
 8005574:	e7c3      	b.n	80054fe <_vfiprintf_r+0x176>
 8005576:	fb0c 2101 	mla	r1, ip, r1, r2
 800557a:	4604      	mov	r4, r0
 800557c:	2301      	movs	r3, #1
 800557e:	e7f0      	b.n	8005562 <_vfiprintf_r+0x1da>
 8005580:	ab03      	add	r3, sp, #12
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	462a      	mov	r2, r5
 8005586:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <_vfiprintf_r+0x258>)
 8005588:	a904      	add	r1, sp, #16
 800558a:	4630      	mov	r0, r6
 800558c:	f3af 8000 	nop.w
 8005590:	4607      	mov	r7, r0
 8005592:	1c78      	adds	r0, r7, #1
 8005594:	d1d6      	bne.n	8005544 <_vfiprintf_r+0x1bc>
 8005596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005598:	07d9      	lsls	r1, r3, #31
 800559a:	d405      	bmi.n	80055a8 <_vfiprintf_r+0x220>
 800559c:	89ab      	ldrh	r3, [r5, #12]
 800559e:	059a      	lsls	r2, r3, #22
 80055a0:	d402      	bmi.n	80055a8 <_vfiprintf_r+0x220>
 80055a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055a4:	f7ff fe53 	bl	800524e <__retarget_lock_release_recursive>
 80055a8:	89ab      	ldrh	r3, [r5, #12]
 80055aa:	065b      	lsls	r3, r3, #25
 80055ac:	f53f af12 	bmi.w	80053d4 <_vfiprintf_r+0x4c>
 80055b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055b2:	e711      	b.n	80053d8 <_vfiprintf_r+0x50>
 80055b4:	ab03      	add	r3, sp, #12
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	462a      	mov	r2, r5
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <_vfiprintf_r+0x258>)
 80055bc:	a904      	add	r1, sp, #16
 80055be:	4630      	mov	r0, r6
 80055c0:	f000 f880 	bl	80056c4 <_printf_i>
 80055c4:	e7e4      	b.n	8005590 <_vfiprintf_r+0x208>
 80055c6:	bf00      	nop
 80055c8:	08005b64 	.word	0x08005b64
 80055cc:	08005b84 	.word	0x08005b84
 80055d0:	08005b44 	.word	0x08005b44
 80055d4:	08005ba4 	.word	0x08005ba4
 80055d8:	08005bae 	.word	0x08005bae
 80055dc:	00000000 	.word	0x00000000
 80055e0:	08005363 	.word	0x08005363
 80055e4:	08005baa 	.word	0x08005baa

080055e8 <_printf_common>:
 80055e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	4616      	mov	r6, r2
 80055ee:	4699      	mov	r9, r3
 80055f0:	688a      	ldr	r2, [r1, #8]
 80055f2:	690b      	ldr	r3, [r1, #16]
 80055f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055f8:	4293      	cmp	r3, r2
 80055fa:	bfb8      	it	lt
 80055fc:	4613      	movlt	r3, r2
 80055fe:	6033      	str	r3, [r6, #0]
 8005600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005604:	4607      	mov	r7, r0
 8005606:	460c      	mov	r4, r1
 8005608:	b10a      	cbz	r2, 800560e <_printf_common+0x26>
 800560a:	3301      	adds	r3, #1
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	0699      	lsls	r1, r3, #26
 8005612:	bf42      	ittt	mi
 8005614:	6833      	ldrmi	r3, [r6, #0]
 8005616:	3302      	addmi	r3, #2
 8005618:	6033      	strmi	r3, [r6, #0]
 800561a:	6825      	ldr	r5, [r4, #0]
 800561c:	f015 0506 	ands.w	r5, r5, #6
 8005620:	d106      	bne.n	8005630 <_printf_common+0x48>
 8005622:	f104 0a19 	add.w	sl, r4, #25
 8005626:	68e3      	ldr	r3, [r4, #12]
 8005628:	6832      	ldr	r2, [r6, #0]
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	42ab      	cmp	r3, r5
 800562e:	dc26      	bgt.n	800567e <_printf_common+0x96>
 8005630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005634:	1e13      	subs	r3, r2, #0
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	bf18      	it	ne
 800563a:	2301      	movne	r3, #1
 800563c:	0692      	lsls	r2, r2, #26
 800563e:	d42b      	bmi.n	8005698 <_printf_common+0xb0>
 8005640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005644:	4649      	mov	r1, r9
 8005646:	4638      	mov	r0, r7
 8005648:	47c0      	blx	r8
 800564a:	3001      	adds	r0, #1
 800564c:	d01e      	beq.n	800568c <_printf_common+0xa4>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	68e5      	ldr	r5, [r4, #12]
 8005652:	6832      	ldr	r2, [r6, #0]
 8005654:	f003 0306 	and.w	r3, r3, #6
 8005658:	2b04      	cmp	r3, #4
 800565a:	bf08      	it	eq
 800565c:	1aad      	subeq	r5, r5, r2
 800565e:	68a3      	ldr	r3, [r4, #8]
 8005660:	6922      	ldr	r2, [r4, #16]
 8005662:	bf0c      	ite	eq
 8005664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005668:	2500      	movne	r5, #0
 800566a:	4293      	cmp	r3, r2
 800566c:	bfc4      	itt	gt
 800566e:	1a9b      	subgt	r3, r3, r2
 8005670:	18ed      	addgt	r5, r5, r3
 8005672:	2600      	movs	r6, #0
 8005674:	341a      	adds	r4, #26
 8005676:	42b5      	cmp	r5, r6
 8005678:	d11a      	bne.n	80056b0 <_printf_common+0xc8>
 800567a:	2000      	movs	r0, #0
 800567c:	e008      	b.n	8005690 <_printf_common+0xa8>
 800567e:	2301      	movs	r3, #1
 8005680:	4652      	mov	r2, sl
 8005682:	4649      	mov	r1, r9
 8005684:	4638      	mov	r0, r7
 8005686:	47c0      	blx	r8
 8005688:	3001      	adds	r0, #1
 800568a:	d103      	bne.n	8005694 <_printf_common+0xac>
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005694:	3501      	adds	r5, #1
 8005696:	e7c6      	b.n	8005626 <_printf_common+0x3e>
 8005698:	18e1      	adds	r1, r4, r3
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	2030      	movs	r0, #48	; 0x30
 800569e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056a2:	4422      	add	r2, r4
 80056a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056ac:	3302      	adds	r3, #2
 80056ae:	e7c7      	b.n	8005640 <_printf_common+0x58>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4622      	mov	r2, r4
 80056b4:	4649      	mov	r1, r9
 80056b6:	4638      	mov	r0, r7
 80056b8:	47c0      	blx	r8
 80056ba:	3001      	adds	r0, #1
 80056bc:	d0e6      	beq.n	800568c <_printf_common+0xa4>
 80056be:	3601      	adds	r6, #1
 80056c0:	e7d9      	b.n	8005676 <_printf_common+0x8e>
	...

080056c4 <_printf_i>:
 80056c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	7e0f      	ldrb	r7, [r1, #24]
 80056ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056cc:	2f78      	cmp	r7, #120	; 0x78
 80056ce:	4691      	mov	r9, r2
 80056d0:	4680      	mov	r8, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	469a      	mov	sl, r3
 80056d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056da:	d807      	bhi.n	80056ec <_printf_i+0x28>
 80056dc:	2f62      	cmp	r7, #98	; 0x62
 80056de:	d80a      	bhi.n	80056f6 <_printf_i+0x32>
 80056e0:	2f00      	cmp	r7, #0
 80056e2:	f000 80d8 	beq.w	8005896 <_printf_i+0x1d2>
 80056e6:	2f58      	cmp	r7, #88	; 0x58
 80056e8:	f000 80a3 	beq.w	8005832 <_printf_i+0x16e>
 80056ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056f4:	e03a      	b.n	800576c <_printf_i+0xa8>
 80056f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056fa:	2b15      	cmp	r3, #21
 80056fc:	d8f6      	bhi.n	80056ec <_printf_i+0x28>
 80056fe:	a101      	add	r1, pc, #4	; (adr r1, 8005704 <_printf_i+0x40>)
 8005700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005704:	0800575d 	.word	0x0800575d
 8005708:	08005771 	.word	0x08005771
 800570c:	080056ed 	.word	0x080056ed
 8005710:	080056ed 	.word	0x080056ed
 8005714:	080056ed 	.word	0x080056ed
 8005718:	080056ed 	.word	0x080056ed
 800571c:	08005771 	.word	0x08005771
 8005720:	080056ed 	.word	0x080056ed
 8005724:	080056ed 	.word	0x080056ed
 8005728:	080056ed 	.word	0x080056ed
 800572c:	080056ed 	.word	0x080056ed
 8005730:	0800587d 	.word	0x0800587d
 8005734:	080057a1 	.word	0x080057a1
 8005738:	0800585f 	.word	0x0800585f
 800573c:	080056ed 	.word	0x080056ed
 8005740:	080056ed 	.word	0x080056ed
 8005744:	0800589f 	.word	0x0800589f
 8005748:	080056ed 	.word	0x080056ed
 800574c:	080057a1 	.word	0x080057a1
 8005750:	080056ed 	.word	0x080056ed
 8005754:	080056ed 	.word	0x080056ed
 8005758:	08005867 	.word	0x08005867
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	1d1a      	adds	r2, r3, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	602a      	str	r2, [r5, #0]
 8005764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800576c:	2301      	movs	r3, #1
 800576e:	e0a3      	b.n	80058b8 <_printf_i+0x1f4>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	6829      	ldr	r1, [r5, #0]
 8005774:	0606      	lsls	r6, r0, #24
 8005776:	f101 0304 	add.w	r3, r1, #4
 800577a:	d50a      	bpl.n	8005792 <_printf_i+0xce>
 800577c:	680e      	ldr	r6, [r1, #0]
 800577e:	602b      	str	r3, [r5, #0]
 8005780:	2e00      	cmp	r6, #0
 8005782:	da03      	bge.n	800578c <_printf_i+0xc8>
 8005784:	232d      	movs	r3, #45	; 0x2d
 8005786:	4276      	negs	r6, r6
 8005788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800578c:	485e      	ldr	r0, [pc, #376]	; (8005908 <_printf_i+0x244>)
 800578e:	230a      	movs	r3, #10
 8005790:	e019      	b.n	80057c6 <_printf_i+0x102>
 8005792:	680e      	ldr	r6, [r1, #0]
 8005794:	602b      	str	r3, [r5, #0]
 8005796:	f010 0f40 	tst.w	r0, #64	; 0x40
 800579a:	bf18      	it	ne
 800579c:	b236      	sxthne	r6, r6
 800579e:	e7ef      	b.n	8005780 <_printf_i+0xbc>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	6820      	ldr	r0, [r4, #0]
 80057a4:	1d19      	adds	r1, r3, #4
 80057a6:	6029      	str	r1, [r5, #0]
 80057a8:	0601      	lsls	r1, r0, #24
 80057aa:	d501      	bpl.n	80057b0 <_printf_i+0xec>
 80057ac:	681e      	ldr	r6, [r3, #0]
 80057ae:	e002      	b.n	80057b6 <_printf_i+0xf2>
 80057b0:	0646      	lsls	r6, r0, #25
 80057b2:	d5fb      	bpl.n	80057ac <_printf_i+0xe8>
 80057b4:	881e      	ldrh	r6, [r3, #0]
 80057b6:	4854      	ldr	r0, [pc, #336]	; (8005908 <_printf_i+0x244>)
 80057b8:	2f6f      	cmp	r7, #111	; 0x6f
 80057ba:	bf0c      	ite	eq
 80057bc:	2308      	moveq	r3, #8
 80057be:	230a      	movne	r3, #10
 80057c0:	2100      	movs	r1, #0
 80057c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057c6:	6865      	ldr	r5, [r4, #4]
 80057c8:	60a5      	str	r5, [r4, #8]
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	bfa2      	ittt	ge
 80057ce:	6821      	ldrge	r1, [r4, #0]
 80057d0:	f021 0104 	bicge.w	r1, r1, #4
 80057d4:	6021      	strge	r1, [r4, #0]
 80057d6:	b90e      	cbnz	r6, 80057dc <_printf_i+0x118>
 80057d8:	2d00      	cmp	r5, #0
 80057da:	d04d      	beq.n	8005878 <_printf_i+0x1b4>
 80057dc:	4615      	mov	r5, r2
 80057de:	fbb6 f1f3 	udiv	r1, r6, r3
 80057e2:	fb03 6711 	mls	r7, r3, r1, r6
 80057e6:	5dc7      	ldrb	r7, [r0, r7]
 80057e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057ec:	4637      	mov	r7, r6
 80057ee:	42bb      	cmp	r3, r7
 80057f0:	460e      	mov	r6, r1
 80057f2:	d9f4      	bls.n	80057de <_printf_i+0x11a>
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d10b      	bne.n	8005810 <_printf_i+0x14c>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	07de      	lsls	r6, r3, #31
 80057fc:	d508      	bpl.n	8005810 <_printf_i+0x14c>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	6861      	ldr	r1, [r4, #4]
 8005802:	4299      	cmp	r1, r3
 8005804:	bfde      	ittt	le
 8005806:	2330      	movle	r3, #48	; 0x30
 8005808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800580c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005810:	1b52      	subs	r2, r2, r5
 8005812:	6122      	str	r2, [r4, #16]
 8005814:	f8cd a000 	str.w	sl, [sp]
 8005818:	464b      	mov	r3, r9
 800581a:	aa03      	add	r2, sp, #12
 800581c:	4621      	mov	r1, r4
 800581e:	4640      	mov	r0, r8
 8005820:	f7ff fee2 	bl	80055e8 <_printf_common>
 8005824:	3001      	adds	r0, #1
 8005826:	d14c      	bne.n	80058c2 <_printf_i+0x1fe>
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	b004      	add	sp, #16
 800582e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005832:	4835      	ldr	r0, [pc, #212]	; (8005908 <_printf_i+0x244>)
 8005834:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005838:	6829      	ldr	r1, [r5, #0]
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005840:	6029      	str	r1, [r5, #0]
 8005842:	061d      	lsls	r5, r3, #24
 8005844:	d514      	bpl.n	8005870 <_printf_i+0x1ac>
 8005846:	07df      	lsls	r7, r3, #31
 8005848:	bf44      	itt	mi
 800584a:	f043 0320 	orrmi.w	r3, r3, #32
 800584e:	6023      	strmi	r3, [r4, #0]
 8005850:	b91e      	cbnz	r6, 800585a <_printf_i+0x196>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	f023 0320 	bic.w	r3, r3, #32
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	2310      	movs	r3, #16
 800585c:	e7b0      	b.n	80057c0 <_printf_i+0xfc>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	f043 0320 	orr.w	r3, r3, #32
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	2378      	movs	r3, #120	; 0x78
 8005868:	4828      	ldr	r0, [pc, #160]	; (800590c <_printf_i+0x248>)
 800586a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800586e:	e7e3      	b.n	8005838 <_printf_i+0x174>
 8005870:	0659      	lsls	r1, r3, #25
 8005872:	bf48      	it	mi
 8005874:	b2b6      	uxthmi	r6, r6
 8005876:	e7e6      	b.n	8005846 <_printf_i+0x182>
 8005878:	4615      	mov	r5, r2
 800587a:	e7bb      	b.n	80057f4 <_printf_i+0x130>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	6826      	ldr	r6, [r4, #0]
 8005880:	6961      	ldr	r1, [r4, #20]
 8005882:	1d18      	adds	r0, r3, #4
 8005884:	6028      	str	r0, [r5, #0]
 8005886:	0635      	lsls	r5, r6, #24
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	d501      	bpl.n	8005890 <_printf_i+0x1cc>
 800588c:	6019      	str	r1, [r3, #0]
 800588e:	e002      	b.n	8005896 <_printf_i+0x1d2>
 8005890:	0670      	lsls	r0, r6, #25
 8005892:	d5fb      	bpl.n	800588c <_printf_i+0x1c8>
 8005894:	8019      	strh	r1, [r3, #0]
 8005896:	2300      	movs	r3, #0
 8005898:	6123      	str	r3, [r4, #16]
 800589a:	4615      	mov	r5, r2
 800589c:	e7ba      	b.n	8005814 <_printf_i+0x150>
 800589e:	682b      	ldr	r3, [r5, #0]
 80058a0:	1d1a      	adds	r2, r3, #4
 80058a2:	602a      	str	r2, [r5, #0]
 80058a4:	681d      	ldr	r5, [r3, #0]
 80058a6:	6862      	ldr	r2, [r4, #4]
 80058a8:	2100      	movs	r1, #0
 80058aa:	4628      	mov	r0, r5
 80058ac:	f7fa fc90 	bl	80001d0 <memchr>
 80058b0:	b108      	cbz	r0, 80058b6 <_printf_i+0x1f2>
 80058b2:	1b40      	subs	r0, r0, r5
 80058b4:	6060      	str	r0, [r4, #4]
 80058b6:	6863      	ldr	r3, [r4, #4]
 80058b8:	6123      	str	r3, [r4, #16]
 80058ba:	2300      	movs	r3, #0
 80058bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c0:	e7a8      	b.n	8005814 <_printf_i+0x150>
 80058c2:	6923      	ldr	r3, [r4, #16]
 80058c4:	462a      	mov	r2, r5
 80058c6:	4649      	mov	r1, r9
 80058c8:	4640      	mov	r0, r8
 80058ca:	47d0      	blx	sl
 80058cc:	3001      	adds	r0, #1
 80058ce:	d0ab      	beq.n	8005828 <_printf_i+0x164>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	079b      	lsls	r3, r3, #30
 80058d4:	d413      	bmi.n	80058fe <_printf_i+0x23a>
 80058d6:	68e0      	ldr	r0, [r4, #12]
 80058d8:	9b03      	ldr	r3, [sp, #12]
 80058da:	4298      	cmp	r0, r3
 80058dc:	bfb8      	it	lt
 80058de:	4618      	movlt	r0, r3
 80058e0:	e7a4      	b.n	800582c <_printf_i+0x168>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4632      	mov	r2, r6
 80058e6:	4649      	mov	r1, r9
 80058e8:	4640      	mov	r0, r8
 80058ea:	47d0      	blx	sl
 80058ec:	3001      	adds	r0, #1
 80058ee:	d09b      	beq.n	8005828 <_printf_i+0x164>
 80058f0:	3501      	adds	r5, #1
 80058f2:	68e3      	ldr	r3, [r4, #12]
 80058f4:	9903      	ldr	r1, [sp, #12]
 80058f6:	1a5b      	subs	r3, r3, r1
 80058f8:	42ab      	cmp	r3, r5
 80058fa:	dcf2      	bgt.n	80058e2 <_printf_i+0x21e>
 80058fc:	e7eb      	b.n	80058d6 <_printf_i+0x212>
 80058fe:	2500      	movs	r5, #0
 8005900:	f104 0619 	add.w	r6, r4, #25
 8005904:	e7f5      	b.n	80058f2 <_printf_i+0x22e>
 8005906:	bf00      	nop
 8005908:	08005bb5 	.word	0x08005bb5
 800590c:	08005bc6 	.word	0x08005bc6

08005910 <__sread>:
 8005910:	b510      	push	{r4, lr}
 8005912:	460c      	mov	r4, r1
 8005914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005918:	f000 f894 	bl	8005a44 <_read_r>
 800591c:	2800      	cmp	r0, #0
 800591e:	bfab      	itete	ge
 8005920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005922:	89a3      	ldrhlt	r3, [r4, #12]
 8005924:	181b      	addge	r3, r3, r0
 8005926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800592a:	bfac      	ite	ge
 800592c:	6563      	strge	r3, [r4, #84]	; 0x54
 800592e:	81a3      	strhlt	r3, [r4, #12]
 8005930:	bd10      	pop	{r4, pc}

08005932 <__swrite>:
 8005932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005936:	461f      	mov	r7, r3
 8005938:	898b      	ldrh	r3, [r1, #12]
 800593a:	05db      	lsls	r3, r3, #23
 800593c:	4605      	mov	r5, r0
 800593e:	460c      	mov	r4, r1
 8005940:	4616      	mov	r6, r2
 8005942:	d505      	bpl.n	8005950 <__swrite+0x1e>
 8005944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005948:	2302      	movs	r3, #2
 800594a:	2200      	movs	r2, #0
 800594c:	f000 f868 	bl	8005a20 <_lseek_r>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	4632      	mov	r2, r6
 800595e:	463b      	mov	r3, r7
 8005960:	4628      	mov	r0, r5
 8005962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005966:	f000 b817 	b.w	8005998 <_write_r>

0800596a <__sseek>:
 800596a:	b510      	push	{r4, lr}
 800596c:	460c      	mov	r4, r1
 800596e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005972:	f000 f855 	bl	8005a20 <_lseek_r>
 8005976:	1c43      	adds	r3, r0, #1
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	bf15      	itete	ne
 800597c:	6560      	strne	r0, [r4, #84]	; 0x54
 800597e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005986:	81a3      	strheq	r3, [r4, #12]
 8005988:	bf18      	it	ne
 800598a:	81a3      	strhne	r3, [r4, #12]
 800598c:	bd10      	pop	{r4, pc}

0800598e <__sclose>:
 800598e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005992:	f000 b813 	b.w	80059bc <_close_r>
	...

08005998 <_write_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d07      	ldr	r5, [pc, #28]	; (80059b8 <_write_r+0x20>)
 800599c:	4604      	mov	r4, r0
 800599e:	4608      	mov	r0, r1
 80059a0:	4611      	mov	r1, r2
 80059a2:	2200      	movs	r2, #0
 80059a4:	602a      	str	r2, [r5, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f7fa fde4 	bl	8000574 <_write>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_write_r+0x1e>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_write_r+0x1e>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	2000028c 	.word	0x2000028c

080059bc <_close_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4d06      	ldr	r5, [pc, #24]	; (80059d8 <_close_r+0x1c>)
 80059c0:	2300      	movs	r3, #0
 80059c2:	4604      	mov	r4, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	f7fb fb63 	bl	8001092 <_close>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_close_r+0x1a>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_close_r+0x1a>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	2000028c 	.word	0x2000028c

080059dc <_fstat_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4d07      	ldr	r5, [pc, #28]	; (80059fc <_fstat_r+0x20>)
 80059e0:	2300      	movs	r3, #0
 80059e2:	4604      	mov	r4, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	4611      	mov	r1, r2
 80059e8:	602b      	str	r3, [r5, #0]
 80059ea:	f7fb fb5e 	bl	80010aa <_fstat>
 80059ee:	1c43      	adds	r3, r0, #1
 80059f0:	d102      	bne.n	80059f8 <_fstat_r+0x1c>
 80059f2:	682b      	ldr	r3, [r5, #0]
 80059f4:	b103      	cbz	r3, 80059f8 <_fstat_r+0x1c>
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	bd38      	pop	{r3, r4, r5, pc}
 80059fa:	bf00      	nop
 80059fc:	2000028c 	.word	0x2000028c

08005a00 <_isatty_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4d06      	ldr	r5, [pc, #24]	; (8005a1c <_isatty_r+0x1c>)
 8005a04:	2300      	movs	r3, #0
 8005a06:	4604      	mov	r4, r0
 8005a08:	4608      	mov	r0, r1
 8005a0a:	602b      	str	r3, [r5, #0]
 8005a0c:	f7fb fb5d 	bl	80010ca <_isatty>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d102      	bne.n	8005a1a <_isatty_r+0x1a>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	b103      	cbz	r3, 8005a1a <_isatty_r+0x1a>
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	2000028c 	.word	0x2000028c

08005a20 <_lseek_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d07      	ldr	r5, [pc, #28]	; (8005a40 <_lseek_r+0x20>)
 8005a24:	4604      	mov	r4, r0
 8005a26:	4608      	mov	r0, r1
 8005a28:	4611      	mov	r1, r2
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	602a      	str	r2, [r5, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7fb fb56 	bl	80010e0 <_lseek>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_lseek_r+0x1e>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_lseek_r+0x1e>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	2000028c 	.word	0x2000028c

08005a44 <_read_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d07      	ldr	r5, [pc, #28]	; (8005a64 <_read_r+0x20>)
 8005a48:	4604      	mov	r4, r0
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	2200      	movs	r2, #0
 8005a50:	602a      	str	r2, [r5, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f7fb fb00 	bl	8001058 <_read>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d102      	bne.n	8005a62 <_read_r+0x1e>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	b103      	cbz	r3, 8005a62 <_read_r+0x1e>
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	bd38      	pop	{r3, r4, r5, pc}
 8005a64:	2000028c 	.word	0x2000028c

08005a68 <_init>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr

08005a74 <_fini>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	bf00      	nop
 8005a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7a:	bc08      	pop	{r3}
 8005a7c:	469e      	mov	lr, r3
 8005a7e:	4770      	bx	lr
